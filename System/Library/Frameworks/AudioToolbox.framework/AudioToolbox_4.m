uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void DspLib::FastMedianFilter::initialize(DspLib::FastMedianFilter *this, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = a2 | 1;
  v4 = (a2 | 1) + 1;
  if (v4 != (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2)
  {
    *((_QWORD *)this + 1) = *(_QWORD *)this;
    std::vector<float>::resize((uint64_t)this, v4);
  }
  DspLib::CircularDelay::setLength((DspLib::FastMedianFilter *)((char *)this + 24), v3);
}

void DspLib::FastMedianFilter::uninitialize(DspLib::FastMedianFilter *this)
{
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  DspLib::CircularDelay::setLength((DspLib::FastMedianFilter *)((char *)this + 24), 0);
}

void DspLib::FastMedianFilter::reset(DspLib::FastMedianFilter *this)
{
  DspLib::CircularDelay::reset((DspLib::FastMedianFilter *)((char *)this + 24));
  DspLib::fill(*((float **)this + 3), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2, *((float *)this + 14));
  DspLib::fill(*(float **)this, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2, *((float *)this + 14));
}

uint64_t DspLib::FastMedianFilter::findValueInBuffer(DspLib::FastMedianFilter *this, float a2)
{
  unint64_t v2;
  unint64_t v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2) - 1;
  v3 = v2 >> 1;
  v4 = *(float *)(*(_QWORD *)this + 4 * (v2 >> 1));
  v5 = 0;
  if (v4 != a2)
  {
    v6 = v2 - v3;
    do
    {
      v7 = v3 >> 1;
      v8 = v3 - (v3 >> 1);
      v9 = v5 + v3;
      v3 = v6 >> 1;
      v6 -= v6 >> 1;
      if (v4 < a2)
      {
        v5 = v9;
      }
      else
      {
        v3 = v7;
        v6 = v8;
      }
      v4 = *(float *)(*(_QWORD *)this + 4 * (v5 + v3));
    }
    while (v4 != a2);
  }
  return v5 + v3;
}

unint64_t DspLib::FastMedianFilter::findPlaceForNewValue(DspLib::FastMedianFilter *this, float a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)this;
  v3 = ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  if (v3 >= 2)
  {
    result = 0;
    v5 = v3 >> 1;
    v6 = v3 - (v3 >> 1);
    do
    {
      v7 = *(float *)(v2 + 4 * (v5 + result));
      v8 = v6 >> 1;
      v6 -= v6 >> 1;
      v9 = v5 - (v5 >> 1);
      if (v7 >= a2)
      {
        v5 >>= 1;
      }
      else
      {
        result += v5;
        v5 = v8;
      }
      if (v7 >= a2)
        v6 = v9;
    }
    while (v5);
  }
  else
  {
    result = 0;
  }
  if (result < v3 - 1 && *(float *)(v2 + 4 * result) < a2)
    ++result;
  return result;
}

float DspLib::FastMedianFilter::updateMedianFilter(const void **this, float a2)
{
  unint64_t ValueInBuffer;
  float v4;
  unint64_t PlaceForNewValue;
  unint64_t v6;
  _BYTE *v7;
  float *v8;
  float __dst;
  float v11;

  v11 = a2;
  __dst = 0.0;
  DspLib::CircularDelay::process(this + 3, (char *)&v11, 1uLL, (char *)&__dst, 1uLL);
  ValueInBuffer = DspLib::FastMedianFilter::findValueInBuffer((DspLib::FastMedianFilter *)this, __dst);
  v4 = v11;
  PlaceForNewValue = DspLib::FastMedianFilter::findPlaceForNewValue((DspLib::FastMedianFilter *)this, v11);
  v6 = PlaceForNewValue;
  if (ValueInBuffer >= PlaceForNewValue)
  {
    v7 = *this;
    v8 = (float *)((char *)*this + 4 * PlaceForNewValue);
    if (ValueInBuffer <= PlaceForNewValue)
    {
      *v8 = v4;
    }
    else
    {
      memmove(v8 + 1, v8, &v7[4 * ValueInBuffer] - (_BYTE *)v8);
      v7 = *this;
      *((float *)*this + v6) = v11;
    }
  }
  else
  {
    if (PlaceForNewValue != ValueInBuffer + 1)
    {
      memmove((char *)*this + 4 * ValueInBuffer, (char *)*this + 4 * ValueInBuffer + 4, (_BYTE *)*this + 4 * PlaceForNewValue - ((_BYTE *)*this + 4 * ValueInBuffer + 4));
      v4 = v11;
    }
    v7 = *this;
    *((float *)*this + v6 - 1) = v4;
  }
  return *(float *)&v7[((((_BYTE *)this[1] - v7) >> 1) - 2) & 0xFFFFFFFFFFFFFFFCLL];
}

void DspLib::FastMedianFilter::process(const void **this, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;

  if (a3)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      *(float *)(a4 + 4 * v8) = DspLib::FastMedianFilter::updateMedianFilter(this, *(float *)(a2 + 4 * v8));
      v8 = v9;
    }
    while (a3 > v9++);
  }
}

void DspLib::LogContext::~LogContext(DspLib::LogContext *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void Log_FlushBuffer(FILE **a1)
{
  std::__shared_weak_count *v2;
  FILE *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  size_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = a1[4];
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (*a1)
  {
    v6 = (char *)a1[6];
    v7 = ((char *)a1[7] - v6) >> 2;
    while (1)
    {
      v8 = HIDWORD(v3->_bf._base) - v3->_bf._size;
      if (v8 < 0)
        v8 += LODWORD(v3->_bf._base);
      if (!v8)
        break;
      v9 = DspLib::CircularBuffer<float>::read((uint64_t)v3, v6, v7);
      fwrite(v6, v9, 4uLL, *a1);
    }
    fflush(*a1);
  }
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B6075ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t DspLib::CircularBuffer<float>::read(uint64_t a1, char *__dst, unint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  const void *v12;
  int v13;

  v5 = *(unsigned int *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 24);
  if ((int)(*(_DWORD *)(a1 + 28) - v5 + (v6 & ((*(_DWORD *)(a1 + 28) - (int)v5) >> 31))) >= a3)
    v7 = a3;
  else
    v7 = (int)(*(_DWORD *)(a1 + 28) - v5 + (v6 & ((*(_DWORD *)(a1 + 28) - (int)v5) >> 31)));
  v8 = 4 * v7;
  v9 = (v6 - v5);
  if (v7 <= v9)
  {
    v12 = (const void *)(*(_QWORD *)a1 + 4 * v5);
    v11 = __dst;
  }
  else
  {
    v10 = v8 - 4 * v9;
    memcpy(__dst, (const void *)(*(_QWORD *)a1 + 4 * v5), 4 * v9);
    v11 = &__dst[4 * v9];
    v12 = *(const void **)a1;
    v8 = v10;
  }
  memcpy(v11, v12, v8);
  v13 = *(_DWORD *)(a1 + 36) - v7;
  *(_DWORD *)(a1 + 32) = (v7 + *(unsigned int *)(a1 + 32)) % *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 36) = v13;
  return v7;
}

void LogQueueFinalizer(FILE **a1)
{
  Log_FlushBuffer(a1);
  if (*a1)
  {
    fclose(*a1);
    *a1 = 0;
  }
  DspLib::LogContext::~LogContext((DspLib::LogContext *)a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::Logger::Logger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  const __CFString *v9;
  const char *CStringPtr;
  const char *v11;
  unsigned int v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  NSObject *v19;
  std::string v21;
  uint64_t v22;
  stat v23;
  char __str[512];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (uint64_t *)(a1 + 24);
  std::allocate_shared[abi:ne180100]<DspLib::CircularBuffer<float>,std::allocator<DspLib::CircularBuffer<float>>,unsigned long &,void>((unsigned int *)a1, (_QWORD *)(a1 + 24));
  if (stat("/private/var/mobile/tmp/com.apple.audiomxd/lsm2/", &v23) == -1)
    mkdir("/private/var/mobile/tmp/com.apple.audiomxd/lsm2/", 0x1FFu);
  v9 = (const __CFString *)MGGetStringAnswer();
  CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
  v11 = "";
  if (CStringPtr)
    v11 = CStringPtr;
  v12 = llround(*(double *)(a3 + 8));
  if (*(char *)(a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  snprintf(__str, 0x200uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", "/private/var/mobile/tmp/com.apple.audiomxd/lsm2/", v11, *(_DWORD *)a3, *(char *)(a3 + 4), *(char *)(a3 + 5), *(char *)(a3 + 6), *(char *)(a3 + 7), v12, v13);
  v14 = operator new();
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  v22 = v14;
  *(_QWORD *)v14 = fopen(__str, "wb");
  std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)(v14 + 32), v8);
  std::vector<float>::resize(v14 + 48, *(_QWORD *)(a1 + 8));
  std::string::operator=((std::string *)(v14 + 8), (const std::string *)a2);
  std::string::basic_string[abi:ne180100]<0>(&v21, "com.apple.coreaudio.");
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append(&v21, v16, v17);
  if ((v18->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
  v19 = dispatch_queue_create((const char *)v18, 0);
  *(_QWORD *)(a1 + 40) = v19;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    v19 = *(NSObject **)(a1 + 40);
    if (v19)
      goto LABEL_18;
LABEL_20:
    DspLib::LogContext::~LogContext((DspLib::LogContext *)v14);
    MEMORY[0x1BCC95CEC]();
    return a1;
  }
  if (!v19)
    goto LABEL_20;
LABEL_18:
  dispatch_set_context(v19, (void *)v14);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 40), (dispatch_function_t)LogQueueFinalizer);
  return a1;
}

void sub_1B6076234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,DspLib::LogContext *a24)
{
  uint64_t v24;

  if (a23 < 0)
    operator delete(__p);
  std::unique_ptr<DspLib::LogContext>::reset[abi:ne180100](&a24, 0);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t DspLib::Logger::Logger(uint64_t a1, uint64_t a2)
{
  CATimeUtilities *v4;
  uint64_t CurrentGregorianDate;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = CFTimeZoneCopySystem();
  CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v4);
  v7 = v6;
  CFRelease(v4);
  v9[0] = CurrentGregorianDate;
  v9[1] = v7;
  return DspLib::Logger::Logger(a1, a2, (uint64_t)v9, 0x20000, 4096);
}

void DspLib::Logger::~Logger(dispatch_object_t *this)
{
  DspLib::Logger::FlushLog((DspLib::Logger *)this);
  dispatch_release(this[5]);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
}

void DspLib::Logger::FlushLog(DspLib::Logger *this)
{
  NSObject *v2;
  void *context;

  if (*((_QWORD *)this + 2))
  {
    v2 = *((_QWORD *)this + 5);
    context = dispatch_get_context(v2);
    dispatch_async_f(v2, context, (dispatch_function_t)Log_FlushBuffer);
    *((_QWORD *)this + 2) = 0;
  }
}

void DspLib::Logger::logData(DspLib::Logger *this, float a2)
{
  float __src;

  __src = a2;
  DspLib::Logger::logData(this, &__src, 1);
}

void DspLib::Logger::logData(DspLib::Logger *this, float *__src, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v6 = a3;
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  v8 = v7[7] - v7[8];
  if ((unint64_t)a3 + (v7[6] & (v8 >> 31)) + v8 >= v7[6])
  {
    do
    {
      dispatch_sync(*((dispatch_queue_t *)this + 5), &__block_literal_global_0);
      v7 = (_DWORD *)*((_QWORD *)this + 3);
      v9 = v7[7] - v7[8];
    }
    while (v6 + (v7[6] & (v9 >> 31)) + v9 >= (unint64_t)v7[6]);
  }
  DspLib::CircularBuffer<float>::write((uint64_t)v7, (char *)__src, a3);
  v10 = *((_QWORD *)this + 1);
  v11 = *((_QWORD *)this + 2) + a3;
  *((_QWORD *)this + 2) = v11;
  if (v11 >= v10)
    DspLib::Logger::FlushLog(this);
}

void *DspLib::CircularBuffer<float>::write(uint64_t a1, char *__src, unsigned int a3)
{
  char *v4;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  void *result;

  v4 = __src;
  v6 = 4 * a3;
  v7 = *(unsigned int *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 24) - v7;
  if (v8 >= a3)
  {
    v10 = (void *)(*(_QWORD *)a1 + 4 * v7);
  }
  else
  {
    v9 = v6 - 4 * v8;
    memcpy((void *)(*(_QWORD *)a1 + 4 * v7), __src, 4 * v8);
    v10 = *(void **)a1;
    __src = &v4[4 * v8];
    v6 = v9;
  }
  result = memcpy(v10, __src, v6);
  *(_DWORD *)(a1 + 36) += a3;
  *(_DWORD *)(a1 + 28) = (*(_DWORD *)(a1 + 28) + a3) % *(_DWORD *)(a1 + 24);
  return result;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E69BF8C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E69BF8C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<std::vector<char>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<DspLib::CircularBuffer<float>,std::allocator<DspLib::CircularBuffer<float>>,unsigned long &,void>@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x40uLL);
  result = std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<DspLib::CircularBuffer<float>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B6076608(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<DspLib::CircularBuffer<float>>,0>(uint64_t a1, unsigned int *a2)
{
  int v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E69BF910;
  v3 = *a2;
  std::vector<float>::vector((_QWORD *)(a1 + 24), *a2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 52) = 0;
  return a1;
}

void sub_1B6076660(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BF910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69BF910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

DspLib::LogContext *std::unique_ptr<DspLib::LogContext>::reset[abi:ne180100](DspLib::LogContext **a1, DspLib::LogContext *a2)
{
  DspLib::LogContext *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::LogContext::~LogContext(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *CASmartPreferences::AddHandler<BOOL>(CASmartPreferences *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = CASmartPreferences::instance(a1);
  v14 = a3;
  v9 = v15;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  v18 = 0;
  v10 = operator new(0x30uLL);
  *v10 = &off_1E69BF960;
  v10[1] = v14;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)(v10 + 2), (uint64_t)v15);
  v18 = v10;
  CASmartPreferences::_RegisterFirstHandler((uint64_t)v8, a1, a2, v17);
  result = v18;
  if (v18 == v17)
  {
    v12 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v12 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
LABEL_6:
  if (v16 == v15)
  {
    v13 = 4;
  }
  else
  {
    if (!v16)
      return result;
    v13 = 5;
    v9 = v16;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v13))(v9);
}

void sub_1B6076838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a13 == v17)
  {
    v22 = 4;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
    v17 = a13;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v22))(v17);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E69BF960;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E69BF960;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E69BF960;
  v2[1] = v3;
  std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1B60769BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E69BF960;
  a2[1] = v2;
  return std::__function::__value_func<void ()(std::vector<long long> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1} &,void const*>(a1 + 8, a2);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

BOOL std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1} &,void const*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  char v8;

  v3 = *a2;
  v7 = 0;
  v4 = (*(uint64_t (**)(uint64_t, char *))a1)(v3, &v7);
  if (!v7)
    return 0;
  v8 = v4;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void DspLib::ToneGenerator::initialize(DspLib::ToneGenerator *this, double a2)
{
  *(_BYTE *)this = 1;
  *((double *)this + 8) = a2;
  *((double *)this + 15) = a2;
  *((double *)this + 2) = a2;
  *((double *)this + 21) = a2;
  DspLib::ToneGenerator::configure((uint64_t)this, *((_DWORD *)this + 1), *((float *)this + 2));
  DspLib::ToneGenerator::reset(this);
}

void DspLib::ToneGenerator::configure(uint64_t a1, int a2, float a3)
{
  float v3;
  float v4;
  float v6;
  double Chunk;
  double v8;
  double v9;

  *(_DWORD *)(a1 + 4) = a2;
  v3 = 40.0;
  if (a3 <= 40.0)
    v3 = a3;
  if (a3 >= -100.0)
    v4 = v3;
  else
    v4 = -100.0;
  *(float *)(a1 + 8) = v4;
  if (*(_BYTE *)a1)
  {
    *(float *)(a1 + 72) = DspLib::dB2Amp((DspLib *)a1, v4);
    switch(*(_DWORD *)(a1 + 4))
    {
      case 2:
        v6 = 6283.18531 / *(double *)(a1 + 168);
        *(float *)(a1 + 180) = v6;
        break;
      case 3:
        Chunk = DspLib::ToneGenerator::FrequencySequencer::getChunk((DspLib::ToneGenerator::FrequencySequencer *)(a1 + 120));
        DspLib::ToneGenerator::LogSweepGenerator::configure(a1 + 16, Chunk, v8, v9);
        break;
      case 4:
      case 6:
        DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::initialize((_QWORD *)(a1 + 192));
        break;
      case 5:
        *(_QWORD *)(a1 + 184) = 0;
        break;
      default:
        return;
    }
  }
}

void DspLib::ToneGenerator::reset(DspLib::ToneGenerator *this)
{
  BOOL v1;
  BOOL v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t i;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 10) = 0;
  v1 = *((_QWORD *)this + 12) != 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = v1;
  v2 = *((_QWORD *)this + 18) != 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = v2;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 44) = 0;
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    v4 = 5489;
    *(_DWORD *)v3 = 5489;
    for (i = 1; i != 624; ++i)
    {
      v4 = i + 1812433253 * (v4 ^ (v4 >> 30));
      *(_DWORD *)(v3 + 4 * i) = v4;
    }
    *(_QWORD *)(v3 + 2496) = 0;
  }
  srand(0x98962Fu);
}

uint64_t DspLib::ToneGenerator::uninitialize(DspLib::ToneGenerator *this)
{
  *(_BYTE *)this = 0;
  return DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::uninitialize((DspLib::ToneGenerator *)((char *)this + 192));
}

uint64_t DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::uninitialize(DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1BCC95CEC](v2, 0x1000C4000313F17);
  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
    JUMPOUT(0x1BCC95CECLL);
  return result;
}

double DspLib::ToneGenerator::LogSweepGenerator::configure(uint64_t a1, double a2, double a3, double a4)
{
  double v6;
  float v7;
  double v8;
  double v9;
  double v10;
  float v11;
  double result;

  v6 = a3 * 6.28318548;
  v7 = log(a4 * 6.28318548 / (a3 * 6.28318548));
  v8 = v7;
  v9 = a2 * v6 / v8;
  v10 = *(double *)a1;
  v11 = exp(1.0 / (a2 / v8 * *(double *)a1));
  *(double *)(a1 + 32) = v9;
  *(double *)(a1 + 40) = v11;
  *(double *)(a1 + 24) = v9;
  result = a2 * v10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = vcvtad_u64_f64(a2 * v10);
  return result;
}

double DspLib::ToneGenerator::FrequencySequencer::getChunk(DspLib::ToneGenerator::FrequencySequencer *this)
{
  double result;

  result = 4.0;
  if (*((_QWORD *)this + 3))
  {
    if (*((_BYTE *)this + 40))
      return *(float *)(*((_QWORD *)this + 2) + 24 * *((_QWORD *)this + 4) + 4);
  }
  return result;
}

_QWORD *DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::initialize(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v3;
  uint64_t i;
  uint64_t v5;

  v1 = this;
  if (!*this)
  {
    v2 = (_QWORD *)operator new();
    *v2 = 0x3F800000BF800000;
    this = (_QWORD *)*v1;
    *v1 = v2;
    if (this)
      this = (_QWORD *)MEMORY[0x1BCC95CEC](this, 0x1000C4000313F17);
  }
  if (!v1[1])
  {
    this = (_QWORD *)operator new();
    v3 = 5489;
    *(_DWORD *)this = 5489;
    for (i = 1; i != 624; ++i)
    {
      v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
      *((_DWORD *)this + i) = v3;
    }
    this[312] = 0;
    v5 = v1[1];
    v1[1] = this;
    if (v5)
      JUMPOUT(0x1BCC95CECLL);
  }
  return this;
}

void DspLib::ToneGenerator::generate(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  switch(*(_DWORD *)(a1 + 4))
  {
    case 1:
      v16 = *(_OWORD *)a2;
      v17 = *(_QWORD *)(a2 + 16);
      DspLib::ToneGenerator::UnsafeRandomNumberGenerator::generate(a1, &v16);
      break;
    case 2:
      v14 = *(_OWORD *)a2;
      v15 = *(_QWORD *)(a2 + 16);
      DspLib::ToneGenerator::SineGenerator::generate(a1 + 168, (float ***)&v14, a1 + 120);
      break;
    case 3:
      v12 = *(_OWORD *)a2;
      v13 = *(_QWORD *)(a2 + 16);
      DspLib::ToneGenerator::LogSweepGenerator::generate(a1 + 16, (const void ***)&v12);
      break;
    case 4:
      v10 = *(_OWORD *)a2;
      v11 = *(_QWORD *)(a2 + 16);
      DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateUniform((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)(a1 + 192), &v10);
      break;
    case 5:
      v6 = *(_OWORD *)a2;
      v7 = *(_QWORD *)(a2 + 16);
      DspLib::ToneGenerator::DiracPulseGenerator::generate((uint64_t *)(a1 + 184), &v6);
      break;
    case 6:
      v8 = *(_OWORD *)a2;
      v9 = *(_QWORD *)(a2 + 16);
      DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateGaussian((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)(a1 + 192), &v8);
      break;
    default:
      v18 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a2 + 16);
      DspLib::clear(&v18);
      break;
  }
  v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  DspLib::ToneGenerator::EnvelopeSequencer::computeEnvelope(a1 + 64, &v4);
}

void DspLib::ToneGenerator::UnsafeRandomNumberGenerator::generate(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = a2[1];
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2[2];
    do
    {
      if (v6)
      {
        v7 = 0;
        v8 = 1;
        do
        {
          *(float *)(*(_QWORD *)(*a2 + 8 * v4) + 4 * v7) = (float)((float)rand() * 4.6566e-10) + -0.5;
          v7 = v8;
          v6 = a2[2];
        }
        while (v6 > v8++);
        v2 = a2[1];
      }
      v4 = ++v5;
    }
    while (v2 > v5);
  }
}

void DspLib::ToneGenerator::SineGenerator::generate(uint64_t a1, float ***a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int i;
  unint64_t v9;
  int v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  float **v18;

  DspLib::clear(**a2, (vDSP_Length)a2[2]);
  v6 = (unint64_t)a2[2];
  if (v6)
  {
    v7 = 0;
    for (i = 0; i < v6; v7 = i)
    {
      v9 = DspLib::ToneGenerator::FrequencySequencer::advance(a3, v6 - v7);
      *(_DWORD *)(a1 + 12) = v10;
      if (v9)
      {
        LODWORD(v11) = 0;
        v12 = **a2;
        v13 = *(float *)(a1 + 8);
        do
        {
          v12[i + v11] = sinf(v13);
          v13 = *(float *)(a1 + 12) + *(float *)(a1 + 8);
          if (v13 > 6.28318531)
          {
            v14 = v13 + -6.28318531;
            v13 = v14;
          }
          *(float *)(a1 + 8) = v13;
          v11 = (v11 + 1);
        }
        while (v9 > v11);
      }
      v6 = (unint64_t)a2[2];
      i += v9;
    }
  }
  v15 = (unint64_t)a2[1];
  if (v15 >= 2)
  {
    v16 = 2;
    v17 = 1;
    do
    {
      v18 = a2[2];
      if (v18)
      {
        memmove((*a2)[v17], **a2, 4 * (_QWORD)v18);
        v15 = (unint64_t)a2[1];
      }
      v17 = v16;
    }
    while (v15 > v16++);
  }
}

void DspLib::ToneGenerator::LogSweepGenerator::generate(uint64_t a1, const void ***a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  float v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;

  v2 = (unint64_t)a2[2];
  if (v2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(a1 + 16) - v5 >= v2)
      v6 = (unint64_t)a2[2];
    else
      v6 = *(_QWORD *)(a1 + 16) - v5;
    v7 = (float *)**a2;
    if (v6)
    {
      v8 = 0;
      v10 = *(double *)(a1 + 32);
      v9 = *(double *)(a1 + 40);
      v11 = *(double *)(a1 + 24);
      do
      {
        v12 = sin(v11 - v10);
        v7[v8] = v12;
        v11 = v11 * v9;
        ++v8;
      }
      while (v6 > v8);
      *(double *)(a1 + 24) = v11;
    }
    DspLib::clear(&v7[v2 - (v2 - v6)], v2 - v6);
    *(_QWORD *)(a1 + 8) += v6;
    v13 = (unint64_t)a2[1];
    if (v13 >= 2)
    {
      v14 = 2;
      v15 = 1;
      do
      {
        v16 = (uint64_t *)a2[2];
        if (v16)
        {
          memmove((void *)(*a2)[v15], **a2, 4 * (_QWORD)v16);
          v13 = (unint64_t)a2[1];
        }
        v15 = v14;
      }
      while (v13 > v14++);
    }
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateUniform(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **result, _QWORD *a2)
{
  unint64_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  float *v10;
  float v11;

  v2 = a2[2];
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = a2[1];
    do
    {
      if (v7)
      {
        v8 = 0;
        v9 = 1;
        do
        {
          v10 = (float *)*v4;
          v11 = *(float *)&(*v4)->__x_[1] - *(float *)(*v4)->__x_;
          result = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4[1]);
          v7 = a2[1];
          *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v5) = *v10
                                                         + (float)(v11
                                                                 * (float)((float)result * 2.3283e-10));
          v8 = v9;
        }
        while (v7 > v9++);
        v2 = a2[2];
      }
      v5 = ++v6;
    }
    while (v2 > v6);
  }
  return result;
}

void DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateGaussian(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int i;
  int v10;
  float *v11;
  float v12;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v13;
  uint64_t v14;
  float v15;
  __int128 v16;
  uint64_t v17;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  DspLib::clear(&v16);
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *((_QWORD *)a2 + 1);
    do
    {
      if (v7)
      {
        v8 = 0;
        for (i = 0; i < v7; v8 = ++i)
        {
          v10 = 12;
          do
          {
            v11 = (float *)*a1;
            v12 = *(float *)&(*a1)->__x_[1] - *(float *)(*a1)->__x_;
            v13 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(a1[1]);
            v14 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v8);
            v15 = (float)(*v11 + (float)(v12 * (float)((float)v13 * 2.3283e-10))) + *(float *)(v14 + 4 * v5);
            *(float *)(v14 + 4 * v5) = v15;
            --v10;
          }
          while (v10);
          *(float *)(v14 + 4 * v5) = v15 / 12.0;
          v7 = *((_QWORD *)a2 + 1);
        }
        v4 = *((_QWORD *)a2 + 2);
      }
      v5 = ++v6;
    }
    while (v4 > v6);
  }
}

void DspLib::ToneGenerator::DiracPulseGenerator::generate(uint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  DspLib::clear(&v7);
  v4 = *((_QWORD *)a2 + 1);
  v5 = *a1;
  if (v4)
  {
    v6 = 0;
    do
    {
      if (!v5)
        **(_DWORD **)(*(_QWORD *)a2 + 8 * v6) = 1065353216;
      ++v6;
    }
    while (v4 > v6);
  }
  if (!v5)
    *a1 = *((_QWORD *)a2 + 2);
}

void DspLib::ToneGenerator::EnvelopeSequencer::computeEnvelope(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  vDSP_Length v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  vDSP_Length v13;
  vDSP_Length v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  vDSP_Length v21;

  v2 = a2[2];
  if (v2)
  {
    v5 = 0;
    v6 = a1 + 40;
    do
    {
      v7 = v2 - v5;
      if (*(_QWORD *)(a1 + 32) && *(_BYTE *)(a1 + 48))
      {
        v8 = *(_QWORD *)(a1 + 40);
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_QWORD *)(a1 + 24);
        v11 = v10 + 24 * v8;
        v12 = *(float *)(v11 + 4);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)v11;
        v13 = vcvtad_u64_f64(*(double *)a1 * v12) - v9;
        if (v7 <= v13)
        {
          v14 = v9 + v7;
        }
        else
        {
          v14 = 0;
          v15 = v10 + 24 * v8;
          v16 = *(_QWORD *)(v15 + 8);
          *(_BYTE *)(v6 + 8) = *(_BYTE *)(v15 + 16);
          *(_QWORD *)v6 = v16;
          v7 = v13;
        }
        *(_QWORD *)(a1 + 16) = v14;
      }
      if (a2[1])
      {
        v17 = 0;
        v18 = *(float *)(a1 + 8) * *(float *)(a1 + 12);
        v19 = 1;
        do
        {
          v20 = *(_QWORD *)(*a2 + 8 * v17);
          if (v7 == -1)
            v21 = a2[2] - v5;
          else
            v21 = v7;
          DspLib::multiply((float *)(v20 + 4 * v5), v21, v18);
          v17 = v19;
        }
        while (a2[1] > (unint64_t)v19++);
      }
      v5 += v7;
    }
    while (v5 < v2);
  }
}

unint64_t DspLib::ToneGenerator::FrequencySequencer::advance(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  if (*(_QWORD *)(a1 + 24) && *(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v6 = vcvtad_u64_f64(*(double *)a1 * *(float *)(v4 + 24 * v3 + 4)) - v5;
    if (a2 <= v6)
    {
      v7 = v5 + a2;
    }
    else
    {
      v7 = 0;
      v8 = v4 + 24 * v3;
      v9 = *(_QWORD *)(v8 + 8);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(v8 + 16);
      *(_QWORD *)(a1 + 32) = v9;
      v2 = v6;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t DspLib::LoudnessNormalizer::Parameters::automationParameter(DspLib::LoudnessNormalizer::Parameters *this, int a2)
{
  int v2;
  int v4;
  int v5;

  v2 = 0;
  if ((int)this > 12)
  {
    if ((_DWORD)this == 13)
      goto LABEL_8;
    if ((_DWORD)this != 38)
      goto LABEL_9;
LABEL_7:
    v2 = 2;
    goto LABEL_9;
  }
  if ((_DWORD)this == 3)
    goto LABEL_7;
  if ((_DWORD)this == 4)
LABEL_8:
    v2 = 1;
LABEL_9:
  if ((_DWORD)this == 4 || (_DWORD)this == 38)
    v4 = 26;
  else
    v4 = 20;
  if (a2)
    v5 = 3;
  else
    v5 = 0;
  return (v4 + v5 + v2);
}

uint64_t DspLib::LoudnessNormalizer::Parameters::automationVolumeForParameterAndPoint(DspLib::LoudnessNormalizer::Parameters *this, int a2)
{
  int v3;
  int v4;

  if ((_DWORD)this == 4 || (_DWORD)this == 38)
    v3 = 26;
  else
    v3 = 20;
  if (a2)
    v4 = 3;
  else
    v4 = 0;
  return (v3 + v4);
}

BOOL DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(int a1, float a2)
{
  return (a1 & ~vcvtas_u32_f32(a2)) == 0;
}

BOOL DspLib::LoudnessNormalizer::Parameters::shapingFilterIsOn(float *a1)
{
  return a1[33] >= 0.5 && a1[6] >= 0.5 && a1[7] >= 0.5;
}

double DspLib::AudioMeter::Algorithm::Algorithm(DspLib::AudioMeter::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::AudioMeter::Parameters::kDefault, 8uLL, (uint64_t)&DspLib::AudioMeter::Parameters::kMinimum, 8, (uint64_t)&DspLib::AudioMeter::Parameters::kMaximum, 8);
  *(_QWORD *)v1 = off_1E69BF9F0;
  result = 0.0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 312) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  return result;
}

uint64_t DspLib::AudioMeter::Algorithm::initialize(DspLib::AudioMeter::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  DspLib::RMS *v9;
  DspLib::RMS *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  v5 = v4;
  v6 = *((_DWORD *)this + 3);
  if (v6 >= 0x11)
  {
    v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/AudioMeter/dsp/DspLibAudioMeter.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v14, 19);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if ((_DWORD)v4)
    {
      v8 = *((_QWORD *)this + 27);
      v7 = *((_QWORD *)this + 28);
      if (v7 != v8)
      {
        do
        {
          v7 -= 192;
          std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v7);
        }
        while (v7 != v8);
        v6 = *((_DWORD *)this + 3);
      }
      *((_QWORD *)this + 28) = v8;
      std::vector<DspLib::RMS>::resize((uint64_t *)this + 27, v6);
      v9 = (DspLib::RMS *)*((_QWORD *)this + 27);
      v10 = (DspLib::RMS *)*((_QWORD *)this + 28);
      while (v9 != v10)
      {
        DspLib::RMS::initialize(v9, 1u, *((double *)this + 3));
        v9 = (DspLib::RMS *)((char *)v9 + 192);
      }
      std::vector<float>::resize((uint64_t)this + 240, *((unsigned int *)this + 3));
      std::vector<float>::resize((uint64_t)this + 264, *((unsigned int *)this + 8));
      std::vector<std::vector<float>>::resize((uint64_t *)this + 36, *((unsigned int *)this + 3));
      v11 = *((_QWORD *)this + 36);
      v12 = *((_QWORD *)this + 37);
      while (v11 != v12)
      {
        std::vector<float>::resize(v11, 1uLL);
        v11 += 24;
      }
      *((_BYTE *)this + 8) = 1;
    }
    (*(void (**)(DspLib::AudioMeter::Algorithm *))(*(_QWORD *)this + 144))(this);
  }
  return v5;
}

void std::vector<DspLib::RMS>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 6);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::RMS>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 192 * a2;
    while (v3 != v7)
    {
      v3 -= 192;
      std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v3);
    }
    a1[1] = v7;
  }
}

void DspLib::AudioMeter::Algorithm::uninitialize(DspLib::AudioMeter::Algorithm *this)
{
  uint64_t i;
  uint64_t v3;

  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 8) = 0;
  v3 = *((_QWORD *)this + 27);
  for (i = *((_QWORD *)this + 28); i != v3; std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(i))
    i -= 192;
  *((_QWORD *)this + 28) = v3;
  *((_QWORD *)this + 31) = *((_QWORD *)this + 30);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 36);
  *((_QWORD *)this + 34) = *((_QWORD *)this + 33);
}

void DspLib::AudioMeter::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v5 = DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 216);
    v7 = *(_QWORD *)(a1 + 224);
    while (v6 != v7)
    {
      DspLib::RMS::setParameters(v6, 1, **(float **)(a1 + 48));
      v6 += 192;
    }
    v8 = *(double *)(a1 + 24) * (float)(*(float *)(*(_QWORD *)(a1 + 48) + 4) / 1000.0);
    v9 = *(_QWORD **)(a1 + 288);
    v10 = *(_QWORD **)(a1 + 296);
    v11 = v9[1] - *v9;
    *(_DWORD *)(a1 + 312) = v8;
    v12 = (v8 >> 6) + 1;
    v13 = v11 >> 2;
    while (v9 != v10)
    {
      std::vector<float>::resize((uint64_t)v9, v12);
      v9 += 3;
    }
    if (v13 != v12)
    {
      MEMORY[0x1E0C80A78](v5);
      v16 = (char *)v25 - v15;
      if (v14 >= 0x200)
        v17 = 512;
      else
        v17 = v14;
      bzero((char *)v25 - v15, v17);
      v18 = *(_QWORD **)(a1 + 288);
      v19 = *(_QWORD **)(a1 + 296);
      v20 = 0xAAAAAAAAAAAAAAABLL * (v19 - v18);
      if (v19 == v18)
        goto LABEL_17;
      v21 = 0;
      v22 = *(uint64_t **)(a1 + 288);
      do
      {
        v23 = *v22;
        v22 += 3;
        *(_QWORD *)&v16[8 * v21++] = v23;
      }
      while (v20 > v21);
      if (v19 == v18)
LABEL_17:
        v24 = 0;
      else
        v24 = (uint64_t)(v18[1] - *v18) >> 2;
      v25[0] = v16;
      v25[1] = v20;
      v25[2] = v24;
      DspLib::clear(v25);
    }
  }
}

void DspLib::AudioMeter::Algorithm::reset(DspLib::AudioMeter::Algorithm *this)
{
  DspLib::RMS *v2;
  DspLib::RMS *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v2 = (DspLib::RMS *)*((_QWORD *)this + 27);
  v3 = (DspLib::RMS *)*((_QWORD *)this + 28);
  while (v2 != v3)
  {
    DspLib::RMS::reset(v2);
    v2 = (DspLib::RMS *)((char *)v2 + 192);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 36);
  v5 = (uint64_t *)*((_QWORD *)this + 37);
  MEMORY[0x1E0C80A78](this);
  v8 = (char *)v14 - v7;
  if (v6 >= 0x200)
    v9 = 512;
  else
    v9 = v6;
  bzero((char *)v14 - v7, v9);
  if (v5 == v4)
    goto LABEL_12;
  v10 = 0;
  v11 = v4;
  do
  {
    v12 = *v11;
    v11 += 3;
    *(_QWORD *)&v8[8 * v10++] = v12;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v5 - v4) > v10);
  if (v5 == v4)
LABEL_12:
    v13 = 0;
  else
    v13 = (v4[1] - *v4) >> 2;
  v14[0] = v8;
  v14[1] = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
  v14[2] = v13;
  DspLib::clear(v14);
  DspLib::clear(*((float **)this + 30), (uint64_t)(*((_QWORD *)this + 31) - *((_QWORD *)this + 30)) >> 2);
  DspLib::clear(*((float **)this + 33), (uint64_t)(*((_QWORD *)this + 34) - *((_QWORD *)this + 33)) >> 2);
}

void DspLib::AudioMeter::Algorithm::processBlock(DspLib::AudioMeter::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  unint64_t cycle_count;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  vDSP_Length v20;
  const float *v21;
  float v22;
  uint64_t v23;
  const float *v24;
  vDSP_Length v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v6 = DspLibBuffer::numChannels(a2);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - v8;
  if (v7 >= 0x200)
    v10 = 512;
  else
    v10 = v7;
  bzero((char *)&v32 - v8, v10);
  if (DspLibBuffer::numChannels(a2))
  {
    v11 = 0;
    do
    {
      *(_QWORD *)&v9[8 * v11] = DspLibBuffer::channel(a2, v11);
      ++v11;
    }
    while (v11 < DspLibBuffer::numChannels(a2));
  }
  DspLibBuffer::numChannels(a2);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  v13 = *((double *)this + 3);
  v14 = expf(-1.0 / (float)((float)((float)(v13 / (float)cycle_count) * *(float *)(*((_QWORD *)this + 6) + 8)) / 1000.0));
  v15 = 64;
  if (cycle_count > 0x40)
    v15 = cycle_count;
  if (*((_DWORD *)this + 3))
  {
    v16 = v14;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = *((unsigned int *)this + 78) / v15;
    do
    {
      v21 = *(const float **)&v9[8 * v19];
      v22 = DspLib::maxMagnitude(v21, cycle_count);
      std::vector<float>::resize((uint64_t)this + 264, cycle_count);
      v23 = *((_QWORD *)this + 27) + v17;
      v24 = (const float *)*((_QWORD *)this + 33);
      v25 = (uint64_t)(*((_QWORD *)this + 34) - (_QWORD)v24) >> 2;
      v34 = cycle_count;
      v35[0] = v21;
      *(_QWORD *)&v33 = v35;
      *((_QWORD *)&v33 + 1) = 1;
      DspLib::RMS::process(v23, &v33, v24, v25);
      v26 = *((_QWORD *)this + 36) + v18;
      v27 = *(float **)v26;
      v28 = *(_QWORD *)(v26 + 8) - 4;
      if (v28 != *(_QWORD *)v26)
      {
        memmove(v27 + 1, v27, v28 - *(_QWORD *)v26);
        v27 = *(float **)(*((_QWORD *)this + 36) + v18);
      }
      *v27 = v22;
      v29 = DspLib::maxv(v27, v20);
      v30 = *((_QWORD *)this + 30);
      v31 = *(float *)(v30 + 4 * v19);
      if (v29 < v31)
        v29 = v16 * v31;
      *(float *)(v30 + 4 * v19++) = v29;
      v18 += 24;
      v17 += 192;
    }
    while (v19 < *((unsigned int *)this + 3));
  }
}

void DspLib::AudioMeter::Algorithm::status(_QWORD *a1, float *a2, vDSP_Length __N)
{
  DspLib *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  DspLib *v9;

  DspLib::clear(a2, __N);
  v6 = a1[27];
  v7 = a1[28];
  if (v6 != v7)
  {
    v8 = 16;
    do
    {
      *(_BYTE *)(v6 + 188) = 1;
      a2[v8 - 16] = DspLib::amp2dBSafe(v5, sqrtf(fabsf(*(float *)(v6 + 184))), 0.000001);
      a2[v8] = DspLib::amp2dBSafe(v9, *(float *)(a1[30] + 4 * (v8 - 16)), 0.000001);
      v6 += 192;
      ++v8;
    }
    while (v6 != v7);
  }
}

uint64_t DspLib::AudioMeter::Algorithm::numStatus(DspLib::AudioMeter::Algorithm *this)
{
  return 32;
}

void DspLib::AudioMeter::Algorithm::~Algorithm(DspLib::AudioMeter::Algorithm *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = off_1E69BF9F0;
  v5 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  if (v3)
  {
    *((_QWORD *)this + 31) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 216);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = off_1E69BF9F0;
  v5 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  if (v3)
  {
    *((_QWORD *)this + 31) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 216);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  MEMORY[0x1BCC95CEC](this, 0x10E1C4016621F76);
}

double DspLib::AlgorithmBase::tailTimeSamples(DspLib::AlgorithmBase *this)
{
  return (*(double (**)(DspLib::AlgorithmBase *))(*(_QWORD *)this + 80))(this)
       + ceil(*((double *)this + 3) * 0.001);
}

uint64_t DspLib::AlgorithmBase::numParameters(DspLib::AlgorithmBase *this)
{
  return (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2;
}

float DspLib::AlgorithmBase::parameter(DspLib::AlgorithmBase *this, uint64_t a2)
{
  return *(float *)(*((_QWORD *)this + 6) + 4 * a2);
}

float DspLib::AlgorithmBase::parameterBounds(DspLib::AlgorithmBase *this, uint64_t a2)
{
  return *(float *)(*((_QWORD *)this + 23) + 4 * a2);
}

uint64_t DspLib::AlgorithmBase::setMeteringIsEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 40) = a2;
  return this;
}

void std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a1 + 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
}

uint64_t std::vector<DspLib::RMS>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 6) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 192 * a2;
      do
      {
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 176) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 44) = 1137180672;
        *(_QWORD *)(v7 + 160) = 0;
        *(_QWORD *)(v7 + 168) = 0;
        *(_QWORD *)(v7 + 176) = 0;
        *(_DWORD *)(v7 + 80) = 0;
        *(_DWORD *)(v7 + 136) = 0;
        *(_OWORD *)(v7 + 120) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_DWORD *)(v7 + 184) = 730643660;
        v7 += 192;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 6);
    v9 = v8 + a2;
    if (v8 + a2 > 0x155555555555555)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 6);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAALL)
      v11 = 0x155555555555555;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::RMS>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[192 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[192 * v11];
    v15 = &v14[192 * a2];
    do
    {
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 11) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 11) = 1137180672;
      *((_QWORD *)v14 + 20) = 0;
      *((_QWORD *)v14 + 21) = 0;
      *((_QWORD *)v14 + 22) = 0;
      *((_DWORD *)v14 + 20) = 0;
      *((_DWORD *)v14 + 34) = 0;
      *(_OWORD *)(v14 + 120) = 0uLL;
      *(_OWORD *)(v14 + 104) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *((_DWORD *)v14 + 46) = 730643660;
      v14 += 192;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<DspLib::RMS>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<DspLib::RMS>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B6078578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::RMS>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::RMS>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 192;
    v4 -= 12;
    std::construct_at[abi:ne180100]<DspLib::RMS,DspLib::RMS,DspLib::RMS*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::RMS>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a2);
}

__n128 std::construct_at[abi:ne180100]<DspLib::RMS,DspLib::RMS,DspLib::RMS*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v4 = *((_QWORD *)a2 + 9);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v5 = *(__int128 *)((char *)a2 + 136);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *(_OWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  result = (__n128)a2[10];
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  LODWORD(v4) = *((_DWORD *)a2 + 46);
  *(_BYTE *)(a1 + 188) = *((_BYTE *)a2 + 188);
  *(_DWORD *)(a1 + 184) = v4;
  return result;
}

uint64_t std::__split_buffer<DspLib::RMS>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(i - 192);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

float DspLib::elapsedTimeInMilliseconds(DspLib *this, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = mach_absolute_time();
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = v3;
  v5 = dword_1EF134CE4;
  if (!dword_1EF134CE4)
  {
    mach_timebase_info((mach_timebase_info_t)&DspLib::elapsedTimeInMilliseconds(unsigned long long &)::timeBaseInfo);
    v5 = dword_1EF134CE4;
  }
  return (float)((float)((float)(v3 - v4)
                       * (float)DspLib::elapsedTimeInMilliseconds(unsigned long long &)::timeBaseInfo)
               / (float)v5)
       * 0.000001;
}

void DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *((_BYTE *)this + 32) = 0;
  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      v5 = (void **)(v2 - 24);
      std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v5);
      v2 = v4;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 2) = v3;
}

uint64_t DspLib::PeakPowerGuard::readPresets(const __CFDictionary *a1, uint64_t *a2)
{
  const __CFArray *Value;
  const __CFArray *v4;
  CFIndex Count;
  uint64_t result;
  CFIndex v8;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v10;
  uint64_t v11;
  const void *v12;
  const __CFNumber *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t *v17;
  CFIndex v18;
  _QWORD *v19;
  unint64_t v20;
  CFIndex v21;
  unsigned int v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  uint64_t v25;
  const __CFNumber *v26;
  const __CFNumber *v28;
  uint64_t v29;
  _QWORD *v30;
  const __CFArray *v31;
  const __CFArray *v32;
  CFIndex i;
  const __CFNumber *v34;
  unsigned int v35;
  float valuePtr;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("presets"));
  if (!Value)
    return 1;
  v4 = Value;
  Count = CFArrayGetCount(Value);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::resize(a2, Count);
  if (a2[1] == *a2 || 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > 8)
    return 1;
  v8 = 0;
  v35 = 0;
LABEL_9:
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v8);
  if (!ValueAtIndex)
    return 1;
  v10 = ValueAtIndex;
  v11 = *a2;
  v12 = CFDictionaryGetValue(ValueAtIndex, CFSTR("name"));
  *(_QWORD *)(v11 + 40 * v8) = v12;
  if (!v12)
    return 1;
  v13 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("samplerateInHz"));
  if (!v13)
    return 1;
  valuePtr = 0.0;
  CFNumberGetValue(v13, kCFNumberFloat32Type, &valuePtr);
  if (valuePtr < 1.0)
    return 1;
  *(float *)(v11 + 40 * v8 + 8) = valuePtr;
  v14 = (const __CFArray *)CFDictionaryGetValue(v10, CFSTR("FIRarray"));
  if (!v14)
    return 1;
  v15 = v14;
  v16 = v11 + 40 * v8;
  v17 = (uint64_t *)(v16 + 16);
  v18 = CFArrayGetCount(v14);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::resize((uint64_t *)(v16 + 16), v18);
  v19 = (_QWORD *)(v16 + 24);
  result = 1;
  v20 = *(_QWORD *)(v16 + 24) - *(_QWORD *)(v16 + 16);
  if (v20 && v20 <= 0x800)
  {
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v21);
      if (!v23)
        return 1;
      v24 = v23;
      v25 = *v17;
      v26 = (const __CFNumber *)CFDictionaryGetValue(v23, CFSTR("temperatureInDegreeCelcius"));
      if (!v26)
        return 1;
      valuePtr = 0.0;
      CFNumberGetValue(v26, kCFNumberFloat32Type, &valuePtr);
      if (valuePtr > 200.0 || valuePtr < -20.0)
        return 1;
      *(float *)(v25 + 32 * v21 + 24) = valuePtr;
      v28 = (const __CFNumber *)CFDictionaryGetValue(v24, CFSTR("numberOfCoefficients"));
      if (!v28)
        return 1;
      valuePtr = 0.0;
      CFNumberGetValue(v28, kCFNumberSInt32Type, &valuePtr);
      v29 = LODWORD(valuePtr);
      if (LODWORD(valuePtr) > 0x1000)
        return 1;
      v30 = (_QWORD *)(v25 + 32 * v21);
      std::vector<float>::resize((uint64_t)v30, LODWORD(valuePtr));
      v31 = (const __CFArray *)CFDictionaryGetValue(v24, CFSTR("FIRcoefficients"));
      if (!v31)
        return 1;
      if ((_DWORD)v29)
      {
        v32 = v31;
        for (i = 0; i != v29; *(float *)(*v30 + 4 * i++) = valuePtr)
        {
          v34 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, i);
          if (!v34)
            return 1;
          valuePtr = 0.0;
          CFNumberGetValue(v34, kCFNumberFloat32Type, &valuePtr);
        }
      }
      v21 = ++v22;
      if (v22 >= (unint64_t)((*v19 - *v17) >> 5))
      {
        result = 0;
        v8 = ++v35;
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v35)
          goto LABEL_9;
        return result;
      }
    }
  }
  return result;
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 40;
        v9 = (void **)(v3 - 24);
        std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v9);
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::setCoeffSet(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this, const __CFDictionary *a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  char *v11;
  int v12;
  const __CFDictionary *v13;

  DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(this);
  *((_BYTE *)this + 32) = 1;
  if (!a2)
  {
    v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuardAdmittanceFilterCoeffSet.cpp");
    v12 = 147;
LABEL_14:
    printf("DSP Sound assertion in %s at line %d\n", v11, v12);
    ++DspLibDebug::mAssertCounter;
    DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(this);
    return *((unsigned __int8 *)this + 32);
  }
  CFRetain(a2);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v13, a2);
  v4 = (const __CFDictionary *)*((_QWORD *)this + 5);
  v5 = v13;
  *((_QWORD *)this + 5) = v13;
  v13 = v4;
  if (v4)
  {
    CFRelease(v4);
    v5 = (const __CFDictionary *)*((_QWORD *)this + 5);
  }
  Value = CFDictionaryGetValue(v5, CFSTR("name"));
  v7 = Value;
  if (Value)
    CFRetain(Value);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v13, v7);
  v8 = *(const __CFDictionary **)this;
  v9 = v13;
  *(_QWORD *)this = v13;
  v13 = v8;
  if (v8)
  {
    CFRelease(v8);
    v9 = *(const __CFDictionary **)this;
  }
  if (!v9)
  {
    v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuardAdmittanceFilterCoeffSet.cpp");
    v12 = 150;
    goto LABEL_14;
  }
  if (DspLib::PeakPowerGuard::readPresets(*((const __CFDictionary **)this + 5), (uint64_t *)this + 1))
  {
    v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuardAdmittanceFilterCoeffSet.cpp");
    v12 = 151;
    goto LABEL_14;
  }
  return *((unsigned __int8 *)this + 32);
}

uint64_t DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::filterCoefficientsForTemperature(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float *v7;
  unsigned int v8;
  float v9;
  float v10;
  float v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 40 * *((unsigned int *)this + 12) + 16);
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 40 * *((unsigned int *)this + 12) + 24);
  v4 = v3 - v2;
  if (v3 == v2)
  {
    v5 = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = v4 >> 5;
    v7 = (float *)(v2 + 24);
    v8 = 1;
    v9 = *(float *)"(knN";
    do
    {
      v10 = *v7;
      v7 += 8;
      v11 = vabds_f32(v10, a2);
      if (v11 >= v9)
        v5 = v5;
      else
        v5 = v8 - 1;
      if (v11 < v9)
        v9 = v11;
    }
    while (v6 > v8++);
  }
  return v2 + 32 * v5;
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::~__split_buffer(&v15);
  }
}

void sub_1B6078FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 16);
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 40;
  }
}

void **std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::~__split_buffer(void **a1)
{
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v4 = (void **)(i - 24);
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__append(a1, a2 - v4);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1B60793AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

DspLib::LoudspeakerSystemIDV1::Algorithm *DspLib::LoudspeakerSystemIDV1::Algorithm::Algorithm(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  uint64_t v2;
  char *v4;

  v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::LoudspeakerSystemIDV1::Parameters::kDefinition);
  *(_QWORD *)v2 = &off_1E69BFB00;
  *(_QWORD *)(v2 + 296) = 1;
  *(_QWORD *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 311) = 0;
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)(v2 + 320));
  *((_WORD *)this + 4628) = 0;
  *((_BYTE *)this + 9258) = 0;
  *((_DWORD *)this + 2315) = 1;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9264), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9344), 0, 0);
  *((_WORD *)this + 4712) = 0;
  *((_BYTE *)this + 9426) = 0;
  *((_QWORD *)this + 1179) = 0;
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9440));
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::LR2InductanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 10496));
  *((_DWORD *)this + 2880) = 0;
  *((_QWORD *)this + 1441) = 1;
  *((_OWORD *)this + 726) = 0u;
  *((_OWORD *)this + 727) = 0u;
  *(_OWORD *)((char *)this + 11644) = 0u;
  *((_QWORD *)this + 1458) = 0;
  *((_QWORD *)this + 1460) = 0;
  *((_QWORD *)this + 1459) = 0;
  *(_QWORD *)((char *)this + 11685) = 0;
  *((_OWORD *)this + 721) = 0u;
  *((_OWORD *)this + 722) = 0u;
  *((_OWORD *)this + 723) = 0u;
  *((_OWORD *)this + 724) = 0u;
  *(_OWORD *)((char *)this + 11594) = 0u;
  *((_BYTE *)this + 11693) = 1;
  *((_QWORD *)this + 1462) = 0;
  DspLib::LoudspeakerSystemIDV1::TestToneGenerator::TestToneGenerator((uint64_t)this + 11704);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11840), 0, 0);
  if (++DspLib::LoudspeakerSystemIDV1::gInstanceCounter >= 2)
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 23);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

void sub_1B6079794(_Unwind_Exception *a1)
{
  DspLib::AlgorithmBaseNewParameters *v1;
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *v2;
  DspLib::LoudspeakerSystemIDV1::ModelFit *v3;
  DspLib::FIRDecimator *v4;
  DspLib::ComplexVector *v5;
  DspLibBuffer *v6;
  DspLib::ComplexVector *v7;
  void *v9;

  v7 = v5;
  DspLib::ComplexVector::~ComplexVector(v7);
  DspLibBuffer::~DspLibBuffer(v6);
  v9 = (void *)*((_QWORD *)v1 + 1458);
  if (v9)
  {
    *((_QWORD *)v1 + 1459) = v9;
    operator delete(v9);
  }
  DspLib::FIRDecimator::~FIRDecimator(v4);
  DspLib::LoudspeakerSystemIDV1::ModelFit::~ModelFit(v3);
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::~ImpedanceMeasurement(v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(v1);
  _Unwind_Resume(a1);
}

void DspLib::FIRDecimator::~FIRDecimator(DspLib::FIRDecimator *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::~ModelFit(DspLib::LoudspeakerSystemIDV1::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::~LR2InductanceModel((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::~SingleResonanceModel((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8));
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::~Algorithm(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69BFB00;
  --DspLib::LoudspeakerSystemIDV1::gInstanceCounter;
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11840));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744));
  v2 = (void *)*((_QWORD *)this + 1458);
  if (v2)
  {
    *((_QWORD *)this + 1459) = v2;
    operator delete(v2);
  }
  v6 = (void **)((char *)this + 11576);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = (void *)*((_QWORD *)this + 1442);
  if (v3)
  {
    *((_QWORD *)this + 1443) = v3;
    operator delete(v3);
  }
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::~LR2InductanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 10496));
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::~SingleResonanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9440));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9344));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9264));
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::~ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320));
  *(_QWORD *)this = off_1E69C47E8;
  v4 = (void *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 35) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(_QWORD *)this = off_1E69C46F0;
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
}

{
  DspLib::LoudspeakerSystemIDV1::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::LoudspeakerSystemIDV1::Algorithm::initialize(DspLib::LoudspeakerSystemIDV1::Algorithm *this, int a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  vDSP_Length v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  __n128 v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  unint64_t instruction_count;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  v6 = v5;
  if ((_DWORD)v5)
  {
    v7 = a3 / 2000.0;
    v8 = fmaxf(roundf(v7), 1.0);
    v9 = (16 * v8) | 1;
    MEMORY[0x1E0C80A78](v5);
    v11 = (char *)&v20[-1] - v10;
    v20[0] = &unk_1E69BFC40;
    v20[1] = DspLib::makeChebychevWindow;
    v21 = v20;
    v13.n128_f32[0] = DspLib::makeSincWindow((float *)((char *)&v20[-1] - v10), v9, v12, 0x10u, (uint64_t)v20, 0.5);
    v14 = v21;
    if (v21 == v20)
    {
      v15 = 4;
      v14 = v20;
    }
    else
    {
      if (!v21)
      {
LABEL_7:
        std::vector<std::vector<float>>::resize((uint64_t *)this + 1447, 2uLL);
        DspLib::FIRDecimator::setSrcParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11528), (unint64_t)v8, *((unsigned int *)this + 8));
        DspLib::FIRDecimator::setCoefficients((uint64_t)this + 11528, v11, v9);
        v16 = v8;
        DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), *((double *)this + 3) / v16);
        DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744), 0x201uLL, 1u);
        instruction_count = vp::utility::CPU_Profiler::get_instruction_count((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744));
        DspLibBuffer::setNumFrames((_QWORD *)this + 1468, instruction_count);
        DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11840), 0x200uLL);
        DspLib::LoudspeakerSystemIDV1::ModelFit::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9256), *((double *)this + 3) / v16);
        DspLib::LoudspeakerSystemIDV1::PilotTone::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11608), *((double *)this + 3));
        DspLib::LoudspeakerSystemIDV1::TestToneGenerator::initialize((uint64_t)this + 11704, *((double *)this + 3));
        *((_BYTE *)this + 8) = 1;
        (*(void (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *, char *, _QWORD))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0);
        (*(void (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *))(*(_QWORD *)this + 152))(this);
        return v6;
      }
      v15 = 5;
    }
    (*(void (**)(__n128))(*v14 + 8 * v15))(v13);
    goto LABEL_7;
  }
  return v6;
}

void sub_1B6079C30(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerSystemIDV1::Algorithm::uninitialize(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  *((_BYTE *)this + 8) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 1447, 0);
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::uninitialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320));
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11840), 0);
  DspLib::LoudspeakerSystemIDV1::ModelFit::uninitialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9256));
  vp::vx::io::Object::Log_Context::get_user_info((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11608));
  return vp::vx::io::Object::Log_Context::get_user_info((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11704));
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::reset(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  DspLib::LoudspeakerSystemIDV1::Algorithm *v1;
  float *v2;
  vDSP_Length cycle_count;

  v1 = this;
  *((_QWORD *)this + 38) = 0;
  DspLib::FIRDecimator::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11528));
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset((float **)v1 + 40);
  DspLib::LoudspeakerSystemIDV1::ModelFit::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 9256));
  DspLib::LoudspeakerSystemIDV1::PilotTone::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 11608));
  DspLib::LoudspeakerSystemIDV1::TestToneGenerator::reset((uint64_t)v1 + 11704);
  *((_DWORD *)v1 + 2880) = 0;
  DspLib::ComplexVector::operator=((char *)v1 + 11840, 0.0);
  v1 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 11744);
  v2 = (float *)DspLibBuffer::channel(v1, 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);
  DspLib::clear(v2, cycle_count);
}

void DspLib::FIRDecimator::reset(DspLib::FIRDecimator *this)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  while (v2 != v3)
  {
    v4 = *(float **)v2;
    v5 = *(_QWORD *)(v2 + 8);
    v2 += 24;
    DspLib::clear(v4, (v5 - (uint64_t)v4) >> 2);
  }
  *((_QWORD *)this + 9) = *(_QWORD *)this - 1;
}

uint64_t DspLib::LoudspeakerSystemIDV1::Algorithm::numStatus(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  return 2665;
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::setParameters(DspLib::LoudspeakerSystemIDV1::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  uint64_t v4;

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((_BYTE *)this + 8))
  {
    DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::setParameters((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    *((_BYTE *)this + 313) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) >= 0.5;
    LODWORD(v4) = vcvtad_u64_f64(*((double *)this + 3)* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x300000003));
    *((_QWORD *)this + 37) = v4;
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    DspLib::LoudspeakerSystemIDV1::ModelFit::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9256), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    DspLib::LoudspeakerSystemIDV1::PilotTone::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11608), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11704), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    *((_BYTE *)this + 312) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2) >= 0.5;
    *((_BYTE *)this + 314) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000004) >= 0.5;
  }
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::setParameters(DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *this, const DspLib::AlgorithmParametersInstance *a2)
{
  int v4;
  float v5;
  float v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;

  *((float *)this + 23) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 1) * 1000.0;
  *((float *)this + 24) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000001) * 1000.0;
  *((float *)this + 1) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000004);
  *((float *)this + 22) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0xB00000006);
  if (!*((_BYTE *)this + 12))
  {
    v4 = *((_DWORD *)this + 1);
    *(_DWORD *)this = v4;
    *((_DWORD *)this + 2) = v4;
  }
  v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x200000007);
  v6 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000007) * 0.001;
  DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x400000007);
  DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x500000007);
  *((float *)this + 11) = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(v5, v6);
  *((_DWORD *)this + 12) = v7;
  *((_DWORD *)this + 13) = v8;
  if (!*((_BYTE *)this + 56))
  {
    *((_QWORD *)this + 4) = *(_QWORD *)((char *)this + 44);
    *((_DWORD *)this + 10) = *((_DWORD *)this + 13);
  }
  v9 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 6);
  v10 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000006);
  v11 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x200000006);
  *((float *)this + 18) = v9;
  *((float *)this + 19) = v10;
  *((float *)this + 20) = v11;
  v12 = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(v9, v10, v11);
  if (!*((_BYTE *)this + 84))
  {
    *((float *)this + 15) = v12;
    *((_DWORD *)this + 16) = v13;
    *((_DWORD *)this + 17) = v14;
  }
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::process(DspLib::LoudspeakerSystemIDV1::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, DspLibBuffer *a4)
{
  uint64_t cycle_count;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float **v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float **v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  float v36;
  const DspLib::ComplexSpan *v37;
  float v38;
  _BOOL4 v39;
  unint64_t *v40;
  float v41;
  unsigned int v42;
  _QWORD v44[3];
  _QWORD v45[2];
  unint64_t v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 313))
  {
    DspLibBuffer::operator=((uint64_t)a3, a2);
  }
  else
  {
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
    if (cycle_count)
    {
      v9 = cycle_count;
      if (*((_BYTE *)this + 40))
        DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
      DspLibBuffer::setNumFrames(a3, v9);
      v10 = DspLibBuffer::numChannels(a2);
      MEMORY[0x1E0C80A78](v10);
      v13 = (float **)((char *)&v44[-1] - v12);
      if (v11 >= 0x200)
        v14 = 512;
      else
        v14 = v11;
      bzero((char *)&v44[-1] - v12, v14);
      DspLibBuffer::channelsPtr((float *)a2, v13);
      v15 = DspLibBuffer::numChannels(a3);
      MEMORY[0x1E0C80A78](v15);
      v18 = (float **)((char *)&v44[-1] - v17);
      if (v16 >= 0x200)
        v19 = 512;
      else
        v19 = v16;
      bzero((char *)&v44[-1] - v17, v19);
      v20 = (uint64_t)DspLibBuffer::channelsPtr((float *)a3, v18);
      if (a2 != a3)
        v20 = DspLibBuffer::operator=((uint64_t)a3, a2);
      if (*((_BYTE *)this + 314))
        DspLib::LoudspeakerSystemIDV1::PilotTone::process((uint64_t)this + 11608, *v18, v9);
      if (*((_BYTE *)this + 312))
        DspLib::LoudspeakerSystemIDV1::TestToneGenerator::process((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11704), *v18, v9);
      if (a4)
      {
        MEMORY[0x1E0C80A78](v20);
        v47[0] = &v44[-v21 - 1];
        v47[1] = v47[0] + 4 * v21;
        v23 = v22 / *((_QWORD *)this + 1441) + 1;
        v45[0] = v47;
        v45[1] = 2;
        v46 = v23;
        v24 = DspLibBuffer::numChannels(a4);
        MEMORY[0x1E0C80A78](v24);
        v27 = (char *)&v44[-1] - v26;
        if (v25 >= 0x200)
          v28 = 512;
        else
          v28 = v25;
        bzero((char *)&v44[-1] - v26, v28);
        if (DspLibBuffer::numChannels(a4))
        {
          v29 = 0;
          do
          {
            *(_QWORD *)&v27[8 * v29] = DspLibBuffer::channel(a4, v29);
            ++v29;
          }
          while (v29 < DspLibBuffer::numChannels(a4));
        }
        v30 = DspLibBuffer::numChannels(a4);
        v31 = vp::utility::CPU_Profiler::get_cycle_count(a4);
        v44[0] = v27;
        v44[1] = v30;
        v44[2] = v31;
        DspLib::FIRDecimator::process((uint64_t)this + 11528, v44, v45);
        if (*((_BYTE *)this + 11692)
          || DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000004) < 0.5)
        {
          v32 = 0;
        }
        else
        {
          v41 = *(float *)DspLibBuffer::operator[]((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744), *((unsigned int *)this + 2908));
          v32 = v41 > DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x200000004);
        }
        *((_BYTE *)this + 352) = v32;
        DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::process((uint64_t)this + 320, *(float **)(v45[0] + 8), *(float **)v45[0], v46);
        v33 = *((_QWORD *)this + 37);
        v34 = *((_QWORD *)this + 38) + v9;
        v35 = v34 >= v33;
        if (v34 >= v33)
          v34 = 0;
        *((_QWORD *)this + 38) = v34;
        if (v35)
        {
          DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::impedance((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), (DSPSplitComplex *)this + 740);
          DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::coherence((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744));
          *((_DWORD *)this + 2315) = 1;
        }
        else
        {
          v36 = *((float *)this + 90);
          v37 = (const DspLib::ComplexSpan *)DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::voltagePowerSpectrum((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320));
          if (*((_BYTE *)this + 352))
          {
            v38 = *((float *)this + 91);
            v39 = v38 >= DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x900000004);
          }
          else
          {
            v39 = 1;
          }
          DspLib::LoudspeakerSystemIDV1::ModelFit::process((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9256), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11840), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11744), v36, v37, v39);
        }
        v42 = *((_DWORD *)this + 2880) + 1;
        *((_DWORD *)this + 2880) = v42;
        if (v42 >= 0x1F5)
        {
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9440));
          *((_DWORD *)this + 2880) = 0;
        }
        DspLib::elapsedTimeInMilliseconds((DspLib *)&unk_1EF131CC8, v40);
      }
      if (*((_BYTE *)this + 40))
        DspLib::CPUMeasure::stop((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 72), v9, *((double *)this + 3));
    }
  }
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::processBlock(DspLib::LoudspeakerSystemIDV1::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, unsigned int a4)
{
  DspLibBuffer *v4;

  if (a4 <= 1)
    v4 = 0;
  else
    v4 = (DspLibBuffer *)((char *)a2 + 96);
  DspLib::LoudspeakerSystemIDV1::Algorithm::process(this, a2, a3, v4);
}

double DspLib::LoudspeakerSystemIDV1::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  double result;
  const void *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;

  DspLib::clear((float *)a2, __N);
  if (*(_BYTE *)(a1 + 40))
  {
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::status(a1 + 320, a2);
    v6 = (const void *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 11744), 0);
    DspLib::FFT::amplitude(a1 + 11840, (float *)(a2 + 400), 0x201uLL);
    v8 = *(_OWORD *)(a1 + 11840);
    v9 = *(_QWORD *)(a1 + 11856);
    DspLib::FFT::phase((uint64_t)&v8, (float *)(a2 + 2452), 0x201uLL);
    memmove((void *)(a2 + 4504), v6, 0x804uLL);
    DspLib::LoudspeakerSystemIDV1::ModelFit::status(a1 + 9256);
    DspLib::LoudspeakerSystemIDV1::PilotTone::status(a1 + 11608, a2);
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::status(a1 + 11704, a2);
    result = 0.0;
    *(_OWORD *)(a2 + 244) = 0u;
    v7 = (_OWORD *)(a2 + 244);
    *(_OWORD *)((char *)v7 + 140) = 0u;
    v7[7] = 0u;
    v7[8] = 0u;
    v7[5] = 0u;
    v7[6] = 0u;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::singleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  int v8;
  float v9;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;

  *(_BYTE *)a2 = 1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 20) = 0;
  v4 = a2 + 20;
  *(_QWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 33) = 0;
  v5 = a2 + 44;
  for (i = 44; i != 116; i += 24)
  {
    v7 = (_QWORD *)(a2 + i);
    *v7 = 0;
    v7[1] = 0;
    *(_QWORD *)((char *)v7 + 13) = 0;
  }
  *(_QWORD *)(a2 + 120) = 0;
  v8 = *((_DWORD *)this + 93);
  *(_DWORD *)(a2 + 4) = *((_DWORD *)this + 90);
  *(_DWORD *)(a2 + 8) = v8;
  v9 = *((float *)this + 91);
  *(float *)(a2 + 12) = v9;
  v10 = *((_BYTE *)this + 352);
  if (v10)
    v10 = v9 < DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x900000004);
  *(_BYTE *)(a2 + 16) = v10;
  *(_QWORD *)v4 = *((_QWORD *)this + 1432);
  *(_DWORD *)(v4 + 8) = *((_DWORD *)this + 2866);
  v11 = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 10496));
  v12 = *((float *)this + 2728);
  *(float *)(a2 + 32) = v11;
  *(float *)(a2 + 36) = v12;
  *(_BYTE *)(a2 + 40) = v12 < DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x1400000006);
  *(_QWORD *)v5 = *((_QWORD *)this + 1301);
  *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 2604);
  v13 = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9440));
  v14 = *((float *)this + 2465);
  *(float *)(a2 + 56) = v13;
  *(float *)(a2 + 60) = v14;
  *(_BYTE *)(a2 + 64) = v14 < DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x1800000007);
  *(_BYTE *)a2 = byte_1EF131D1C;
}

float DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  vp::utility::CPU_Profiler *v1;
  const float *v2;
  vDSP_Length cycle_count;

  v1 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680);
  v2 = (const float *)DspLibBuffer::channel((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680), 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);
  return DspLib::minv(v2, cycle_count);
}

float DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::coherenceMin(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  vp::utility::CPU_Profiler *v1;
  const float *v2;
  vDSP_Length cycle_count;

  v1 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688);
  v2 = (const float *)DspLibBuffer::channel((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688), 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);
  return DspLib::minv(v2, cycle_count);
}

float DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::takeRdcProcessTimeStamp(DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *this, unint64_t *a2)
{
  return DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)((char *)this + 24), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeRdc(uint64_t this, float a2, float a3)
{
  *(float *)this = a2;
  *(float *)(this + 8) = a3;
  *(_BYTE *)(this + 12) = 1;
  return this;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readRdc(DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *this, float *a2, float *a3, BOOL *a4)
{
  unint64_t *v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  uint64_t v13;

  v13 = *((_QWORD *)this + 3);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v13, (unint64_t *)a2) >= *((float *)this + 23))
  {
    *((_BYTE *)this + 100) = 1;
    v13 = *((_QWORD *)this + 2);
    v11 = -DspLib::elapsedTimeInMilliseconds((DspLib *)&v13, v8);
    *a2 = *((float *)this + 1)
        + (float)(expf(v11 / *((float *)this + 24)) * (float)(*(float *)this - *((float *)this + 1)));
    v12 = expf(v11 / *((float *)this + 24));
    v10 = 0;
    v9 = *((float *)this + 1) + (float)(v12 * (float)(*((float *)this + 2) - *((float *)this + 1)));
  }
  else
  {
    *((_BYTE *)this + 100) = 0;
    *a2 = *(float *)this;
    v9 = *((float *)this + 2);
    v10 = 1;
  }
  *a3 = v9;
  *a4 = v10;
}

uint64_t DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeSingleResonanceModel(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 32) = v2;
  *(_BYTE *)(result + 56) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readSingleResonanceModel(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t *v6;
  uint64_t v7;
  char v8;
  float v9;
  float v10;
  uint64_t i;
  uint64_t v12;

  v12 = *(_QWORD *)(a1 + 24);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v12, (unint64_t *)a2) >= *(float *)(a1 + 92))
  {
    v12 = *(_QWORD *)(a1 + 16);
    v9 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v12, v6);
    v10 = expf((float)-v9 / *(float *)(a1 + 96));
    for (i = 0; i != 12; i += 4)
      *(float *)(a2 + i) = *(float *)(a1 + i + 44)
                         + (float)(v10 * (float)(*(float *)(a1 + i + 32) - *(float *)(a1 + i + 44)));
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)a2 = v7;
    v8 = 1;
  }
  *a3 = v8;
}

uint64_t DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeInductanceModel(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 68) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 60) = v2;
  *(_BYTE *)(result + 84) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readInductanceModel(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t *v6;
  uint64_t v7;
  char v8;
  float v9;
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 24);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v10, (unint64_t *)a2) >= *(float *)(a1 + 92))
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v10, v6);
    DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::decayInductanceModel(a1, (float *)(a1 + 72), a1 + 60, a2, v9);
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 68);
    *(_QWORD *)a2 = v7;
    v8 = 1;
  }
  *a3 = v8;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::decayInductanceModel(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float a5)
{
  float v8;
  double v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;

  v8 = expf((float)-a5 / *(float *)(a1 + 96));
  LODWORD(v9) = *(_DWORD *)a3;
  v10 = DspLib::LoudspeakerSystemIDV1::coeffsToTsParameters(v9, *(float *)(a3 + 4));
  *(float *)a4 = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(*a2 + (float)(v8 * (float)(v10 - *a2)), a2[1] + (float)(v8 * (float)(v11 - a2[1])), a2[2] + (float)(v8 * (float)(v12 - a2[2])));
  *(_DWORD *)(a4 + 4) = v13;
  *(_DWORD *)(a4 + 8) = v14;
}

double DspLib::LoudspeakerSystemIDV1::Algorithm::latencySamples(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  return 0.0;
}

double DspLib::LoudspeakerSystemIDV1::Algorithm::tailTimeSamples(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  return (*(double (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *))(*(_QWORD *)this + 80))(this)
       + (double)vcvtpd_u64_f64(*((double *)this + 1452) * 0.2);
}

DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_DWORD *)((char *)this + 31) = 0;
  *((_DWORD *)this + 11) = 1120403456;
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_BYTE *)this + 56) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_DWORD *)this + 17) = 1065353216;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 8280, (char *)this + 84, 1024, 512, 0);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 8368, (char *)this + 4180, 1024, 512, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8456), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8536), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8616), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8696), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8776), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8856), 0, 0);
  return this;
}

void sub_1B607AC34(_Unwind_Exception *a1)
{
  DspLib::FFT::BufferedForwardSTFT *v1;
  DspLib::FFT::BufferedForwardSTFT *v2;
  DspLib::ComplexVector *v3;
  DspLib::ComplexVector *v4;
  DspLib::ComplexVector *v5;
  DspLib::ComplexVector *v6;
  DspLib::ComplexVector *v7;

  DspLib::ComplexVector::~ComplexVector(v7);
  DspLib::ComplexVector::~ComplexVector(v6);
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLib::ComplexVector::~ComplexVector(v4);
  DspLib::ComplexVector::~ComplexVector(v3);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v2);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v1);
  _Unwind_Resume(a1);
}

void sub_1B607AC98()
{
  JUMPOUT(0x1B607AC80);
}

void sub_1B607ACA0()
{
  JUMPOUT(0x1B607AC88);
}

DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::SingleResonanceModel(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  *(_OWORD *)((char *)this + 26) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), 0, 0);
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_DWORD *)this + 106) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 784), 0, 0);
  *((_WORD *)this + 440) = 0;
  *((_OWORD *)this + 54) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 888), 0, 0);
  *((_DWORD *)this + 262) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  return this;
}

void sub_1B607ADEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  DspLib::ComplexMatrix *v11;
  DspLib::ComplexVector *v12;
  DspLib::ComplexMatrix *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexVector *v16;
  DspLib::ComplexMatrix *v17;
  DspLib::ComplexVector *v18;
  DspLibBuffer *v19;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B607AE70()
{
  JUMPOUT(0x1B607AE38);
}

void sub_1B607AE78()
{
  JUMPOUT(0x1B607AE40);
}

void sub_1B607AE80()
{
  JUMPOUT(0x1B607AE48);
}

void sub_1B607AE88()
{
  JUMPOUT(0x1B607AE50);
}

void sub_1B607AE90()
{
  JUMPOUT(0x1B607AE58);
}

DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::LR2InductanceModel(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  *(_OWORD *)((char *)this + 30) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320), 0, 0);
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 424), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 776), 0, 0);
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 880), 0, 0);
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  return this;
}

void sub_1B607AFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  DspLib::ComplexMatrix *v11;
  DspLib::ComplexVector *v12;
  DspLib::ComplexMatrix *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexVector *v16;
  DspLib::ComplexMatrix *v17;
  DspLib::ComplexVector *v18;
  DspLibBuffer *v19;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B607B054()
{
  JUMPOUT(0x1B607B01CLL);
}

void sub_1B607B05C()
{
  JUMPOUT(0x1B607B024);
}

void sub_1B607B064()
{
  JUMPOUT(0x1B607B02CLL);
}

void sub_1B607B06C()
{
  JUMPOUT(0x1B607B034);
}

void sub_1B607B074()
{
  JUMPOUT(0x1B607B03CLL);
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::~SingleResonanceModel(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  void *v2;

  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 888));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 784));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::~LR2InductanceModel(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  void *v2;

  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 880));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 776));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 424));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 144));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::~ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  void *v2;
  void *v3;

  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8856));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8776));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8696));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8616));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8536));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8456));
  v2 = (void *)*((_QWORD *)this + 1051);
  if (v2)
  {
    *((_QWORD *)this + 1052) = v2;
    operator delete(v2);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 8368);
  v3 = (void *)*((_QWORD *)this + 1040);
  if (v3)
  {
    *((_QWORD *)this + 1041) = v3;
    operator delete(v3);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 8280);
}

void std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E69BFC40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E69BFC40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, a2[1]);
}

uint64_t std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::target_type()
{
}

void DspLib::LoudspeakerManagerV2::modelPolynomial(float *a1@<X0>, uint64_t a2@<X8>, int a3@<W1>, uint64_t a4@<X2>, _BYTE *a5@<X3>)
{
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  char v24;
  double v25;
  float v26;
  float v27;
  float v28;
  double v29;
  double v30;
  int v31;
  float v32;
  float v33;
  float v34;
  double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  double v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  double v71;
  float v72;
  float v73;
  double v74;
  double v75;
  int64x2_t v76;
  double v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  double v84;
  double v85;
  float v86;
  float v87;
  double v88;
  double v89;
  double v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  double v97;
  double v98;
  double v99;
  float v100;
  double v101;
  float v102;
  float v103;
  float v104;
  float v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  float v111;
  float v112;
  double v113;
  double v114;
  double v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  double v138;
  double v139;
  float v140;
  float v141;
  double v142;
  double v143;
  double v144;
  float v145;
  float v146;
  float v147;
  double v148;
  double v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  float v162;
  float v163;
  float v164;
  double v165;
  double v166;
  double v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  double v174;
  double v175;
  float v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  double v191;
  double v192;
  float v193;
  float v194;
  float v195;
  double v196;
  double v197;
  double v198;
  float v199;
  double v200;
  float64x2_t v201;
  double v202;
  float v203;
  float v204;
  float v205;
  double v206;
  double v207;
  double v208;
  float v209;
  float v210;
  float v211;
  double v212;
  double v213;
  double v214;

  switch(a3)
  {
    case 0:
      if (*((_BYTE *)a1 + 48))
      {
        if (*((_BYTE *)a1 + 92))
        {
          if (*((_BYTE *)a1 + 136))
          {
            v5 = a1[1];
            v6 = a1[5];
            v7 = a1[6];
            v8 = a1[7];
            v9 = a1[14];
            v10 = a1[15];
            v11 = a1[17];
            v12 = a1[25];
            v13 = a1[26];
            v14 = a1[28];
            v15 = v5 * v6;
            v16 = v15 * v10;
            *(double *)(a2 + 48) = v16 * v13;
            v17 = v15 * v13;
            v18 = v5 * v10;
            *(double *)(a2 + 32) = v17
                                 + v16
                                 + v15 * v9 * v12
                                 + v18 * v12
                                 + v5 * v13 * v9
                                 + (float)((float)(v6 * v9) * v14)
                                 + (float)(v11 * (float)(v6 * v12))
                                 + (float)(v7 * (float)(v10 * v13))
                                 + (float)(v8 * (float)(v10 * v12))
                                 + (float)(v10 * v14)
                                 + (float)(v8 * (float)(v9 * v13))
                                 + (float)(v11 * v13);
            *(double *)(a2 + 40) = v17 * v9
                                 + v16 * v12
                                 + v18 * v13
                                 + (float)((float)(v6 * v10) * v14)
                                 + (float)(v11 * (float)(v6 * v13))
                                 + (float)(v8 * (float)(v10 * v13));
            v19 = v5 * v9;
            *(double *)(a2 + 16) = v19
                                 + v15
                                 + v5 * v12
                                 + (float)(v7 * v10)
                                 + (float)(v7 * v13)
                                 + (float)(v7 * (float)(v9 * v9))
                                 + (float)(v8 * v9)
                                 + (float)(v8 * v12)
                                 + v11
                                 + v14;
            *(double *)(a2 + 24) = v15 * v12
                                 + v15 * v9
                                 + v18
                                 + v5 * v13
                                 + v19 * v12
                                 + (float)(v6 * v11)
                                 + (float)(v6 * v14)
                                 + (float)(v7 * (float)(v10 * v12))
                                 + (float)(v8 * v10)
                                 + (float)(v7 * (float)(v9 * v13))
                                 + (float)(v8 * v13)
                                 + (float)(v8 * (float)(v9 * v12))
                                 + (float)(v9 * v14)
                                 + (float)(v11 * v12);
            *(double *)a2 = v7;
            *(double *)(a2 + 8) = v5 + (float)(v7 * v9) + (float)(v7 * v12) + v8;
            *(_OWORD *)(a2 + 104) = xmmword_1B6627160;
            *(double *)(a2 + 88) = (float)((float)((float)(v9 * (float)(v6 * v13)) + (float)((float)(v6 * v10) * v12))
                                         + (float)(v10 * v13));
            *(double *)(a2 + 96) = (float)((float)(v6 * v10) * v13);
            *(double *)(a2 + 72) = (float)((float)(v13 + (float)(v10 + (float)((float)(v6 * v12) + (float)(v6 * v9))))
                                         + (float)(v9 * v12));
            *(double *)(a2 + 80) = (float)((float)((float)((float)((float)(v6 * v13) + (float)(v6 * v10))
                                                         + (float)((float)(v6 * v9) * v12))
                                                 + (float)(v10 * v12))
                                         + (float)(v13 * v9));
            *(double *)(a2 + 64) = (float)((float)(v6 + v9) + v12);
            *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
            v20 = 6;
          }
          else
          {
            v184 = a1[1];
            v185 = a1[5];
            v186 = a1[6];
            v187 = a1[7];
            v188 = a1[14];
            v189 = a1[15];
            v190 = a1[17];
            *(_OWORD *)(a2 + 40) = 0u;
            *(_OWORD *)(a2 + 56) = 0u;
            *(_OWORD *)(a2 + 72) = 0u;
            *(_OWORD *)(a2 + 88) = 0u;
            v191 = v184 * v185;
            *(double *)(a2 + 24) = v184 * v189 + v191 * v188 + (float)(v185 * v190) + (float)(v187 * v189);
            *(double *)(a2 + 32) = v191 * v189;
            *(double *)(a2 + 16) = v184 * v188 + v191 + (float)(v186 * v189) + (float)(v187 * v188) + v190;
            *(double *)a2 = v186;
            *(double *)(a2 + 8) = v184 + (float)(v186 * v188) + v187;
            *(_QWORD *)(a2 + 104) = 0;
            *(_QWORD *)(a2 + 112) = 5;
            *(double *)(a2 + 72) = (float)(v189 + (float)(v185 * v188));
            *(double *)(a2 + 80) = (float)(v185 * v189);
            *(double *)(a2 + 64) = (float)(v185 + v188);
            *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
            v20 = 4;
          }
        }
        else
        {
          v144 = a1[1];
          v145 = a1[5];
          v146 = a1[6];
          v147 = a1[7];
          *(_OWORD *)(a2 + 56) = 0u;
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 72) = 0u;
          *(_OWORD *)(a2 + 88) = 0u;
          *(double *)a2 = v146;
          *(double *)(a2 + 8) = v144 + v147;
          v148 = v145;
          *(double *)(a2 + 16) = v144 * v148;
          *(_QWORD *)(a2 + 104) = 0;
          *(_QWORD *)(a2 + 112) = 3;
          *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
          *(double *)(a2 + 64) = v148;
          v20 = 2;
        }
        goto LABEL_55;
      }
      if (*((_BYTE *)a1 + 92))
      {
        if (*((_BYTE *)a1 + 136))
        {
          v90 = a1[1];
          v91 = a1[14];
          v92 = a1[15];
          v93 = a1[17];
          v94 = a1[25];
          v95 = a1[26];
          v96 = a1[28];
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_OWORD *)(a2 + 72) = 0u;
          *(_OWORD *)(a2 + 88) = 0u;
          *(double *)a2 = v90;
          *(double *)(a2 + 8) = v90 * v94 + v90 * v91 + v93 + v96;
          v97 = v90 * v91;
          v98 = v97 * v94 + v90 * v92 + v90 * v95 + (float)(v91 * v96) + (float)(v93 * v94);
          v99 = v90 * v92;
          *(double *)(a2 + 16) = v98;
          *(double *)(a2 + 24) = v97 * v95 + v99 * v94 + (float)(v92 * v96) + (float)(v93 * v95);
          *(double *)(a2 + 32) = v99 * v95;
          v20 = 5;
          *(_QWORD *)(a2 + 104) = 0;
          *(_QWORD *)(a2 + 112) = 5;
          *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
          *(double *)(a2 + 64) = (float)(v91 + v94);
          *(double *)(a2 + 72) = (float)((float)(v92 + (float)(v91 * v94)) + v95);
          *(double *)(a2 + 80) = (float)((float)(v91 * v95) + (float)(v92 * v94));
          *(double *)(a2 + 88) = (float)(v92 * v95);
          goto LABEL_55;
        }
        v202 = a1[1];
        v203 = a1[14];
        v204 = a1[15];
        v205 = a1[17];
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        v206 = v204;
        v207 = v203;
        *(double *)(a2 + 8) = v205 + v202 * v207;
        *(double *)(a2 + 16) = v202 * v206;
        *(double *)a2 = v202;
        v20 = 3;
        *(_QWORD *)(a2 + 104) = 0;
        *(_QWORD *)(a2 + 112) = 3;
        *(double *)(a2 + 64) = v207;
        *(double *)(a2 + 72) = v206;
      }
      else
      {
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(double *)a2 = a1[1];
        v20 = 1;
        *(_QWORD *)(a2 + 104) = 0;
        *(_QWORD *)(a2 + 112) = 1;
      }
      goto LABEL_54;
    case 1:
      v21 = *((unsigned __int8 *)a1 + 136);
      v22 = *((unsigned __int8 *)a1 + 92);
      if (*((_BYTE *)a1 + 136))
        v23 = v22 == 0;
      else
        v23 = 1;
      v24 = v23;
      if (*((_BYTE *)a1 + 48))
      {
        if ((v24 & 1) != 0)
        {
          v25 = a1[1];
          v26 = a1[5];
          v27 = a1[6];
          v28 = a1[7];
          if (v21 | v22)
          {
            v162 = a1[14];
            v163 = a1[15];
            v164 = a1[17];
            *(_OWORD *)(a2 + 32) = 0u;
            *(_OWORD *)(a2 + 48) = 0u;
            *(_OWORD *)(a2 + 64) = 0u;
            *(_OWORD *)(a2 + 80) = 0u;
            *(_OWORD *)(a2 + 96) = 0u;
            v165 = 1.0 / v27;
            *(double *)(a2 + 16) = v165 * (float)(v163 + (float)(v26 * v162));
            *(double *)(a2 + 24) = v165 * (float)(v26 * v163);
            v166 = v25 * v26;
            *(double *)a2 = v165;
            *(double *)(a2 + 8) = v165 * (float)(v26 + v162);
            *(_QWORD *)(a2 + 112) = 4;
            *(double *)(a2 + 80) = v165 * (v25 * v163 + v166 * v162 + (float)(v26 * v164) + (float)(v28 * v163));
            *(double *)(a2 + 88) = v165 * (v166 * v163);
            *(double *)(a2 + 64) = v165 * (v25 + v28 + (float)(v27 * v162));
            *(double *)(a2 + 72) = v165 * (v25 * v162 + v166 + (float)(v28 * v162) + (float)(v27 * v163) + v164);
            *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
            v20 = 5;
          }
          else
          {
            *(_OWORD *)(a2 + 48) = 0u;
            *(_OWORD *)(a2 + 64) = 0u;
            *(_OWORD *)(a2 + 16) = 0u;
            *(_OWORD *)(a2 + 32) = 0u;
            *(_OWORD *)(a2 + 80) = 0u;
            *(_OWORD *)(a2 + 96) = 0u;
            v29 = 1.0 / v27;
            v30 = v26;
            *(double *)a2 = v29;
            *(double *)(a2 + 8) = v29 * v30;
            *(_QWORD *)(a2 + 112) = 2;
            *(double *)(a2 + 64) = v29 * (v25 + v28);
            *(double *)(a2 + 72) = v25 * v30 * v29;
            *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
            v20 = 3;
          }
        }
        else
        {
          v115 = a1[1];
          v117 = a1[5];
          v116 = a1[6];
          v118 = a1[7];
          v119 = a1[14];
          v120 = a1[15];
          v121 = a1[17];
          v122 = a1[25];
          v123 = a1[26];
          v124 = a1[28];
          v125 = 1.0 / v116;
          *(double *)(a2 + 32) = v125
                               * (float)((float)((float)((float)(v117 * v119) * v123)
                                               + (float)((float)(v117 * v120) * v122))
                                       + (float)(v120 * v123));
          *(double *)(a2 + 40) = v125 * (float)((float)(v117 * v120) * v123);
          *(double *)(a2 + 16) = v125
                               * (float)(v123
                                       + (float)((float)(v120 + (float)((float)(v117 * v122) + (float)(v117 * v119)))
                                               + (float)(v119 * v122)));
          *(double *)(a2 + 24) = v125
                               * (float)((float)((float)((float)((float)((float)(v117 * v119) * v122)
                                                               + (float)(v117 * v120))
                                                       + (float)(v117 * v123))
                                               + (float)(v120 * v122))
                                       + (float)(v119 * v123));
          v126 = v115 * v117;
          v127 = v126 * v120;
          v128 = v126 * v119;
          v129 = v115 * v120;
          *(double *)a2 = v125;
          *(double *)(a2 + 8) = v125 * (float)((float)(v117 + v119) + v122);
          *(_QWORD *)(a2 + 112) = 6;
          *(double *)(a2 + 96) = v125
                               * (v128 * v123
                                + v127 * v122
                                + v129 * v123
                                + (float)((float)(v117 * v120) * v124)
                                + (float)((float)(v117 * v121) * v123)
                                + (float)((float)(v118 * v120) * v123));
          *(double *)(a2 + 104) = v125 * (v127 * v123);
          v130 = v115 * v119;
          *(double *)(a2 + 80) = v125
                               * (v126 * v122
                                + v128
                                + v129
                                + v130 * v122
                                + v115 * v123
                                + (float)(v117 * v121)
                                + (float)(v117 * v124)
                                + (float)(v118 * v120)
                                + (float)((float)(v118 * v119) * v122)
                                + (float)(v118 * v123)
                                + (float)((float)(v116 * v120) * v122)
                                + (float)((float)(v116 * v119) * v123)
                                + (float)(v119 * v124)
                                + (float)(v121 * v122));
          *(double *)(a2 + 88) = v125
                               * (v128 * v122
                                + v126 * v120
                                + v126 * v123
                                + v129 * v122
                                + v130 * v123
                                + (float)((float)(v117 * v119) * v124)
                                + (float)((float)(v117 * v121) * v122)
                                + (float)((float)(v118 * v120) * v122)
                                + (float)((float)(v118 * v119) * v123)
                                + (float)((float)(v116 * v120) * v123)
                                + (float)(v120 * v124)
                                + (float)(v121 * v123));
          *(double *)(a2 + 64) = v125 * (v115 + v118 + (float)(v116 * v119) + (float)(v116 * v122));
          *(double *)(a2 + 72) = v125
                               * (v130
                                + v126
                                + v115 * v122
                                + (float)(v118 * v119)
                                + (float)(v118 * v122)
                                + (float)(v116 * v120)
                                + (float)((float)(v116 * v119) * v122)
                                + (float)(v116 * v123)
                                + v121
                                + v124);
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
          v20 = 7;
        }
      }
      else
      {
        if ((v24 & 1) != 0)
        {
          if (!(v21 | v22))
          {
            *(_OWORD *)(a2 + 56) = 0u;
            *(_OWORD *)(a2 + 88) = 0u;
            *(_OWORD *)(a2 + 72) = 0u;
            *(_OWORD *)(a2 + 40) = 0u;
            *(_OWORD *)(a2 + 24) = 0u;
            *(_OWORD *)(a2 + 8) = 0u;
            *(_QWORD *)a2 = 0x3FF0000000000000;
            v20 = 1;
            *(_QWORD *)(a2 + 104) = 0;
            *(_QWORD *)(a2 + 112) = 1;
            *(double *)(a2 + 56) = a1[1];
            goto LABEL_55;
          }
          v198 = a1[1];
          v199 = a1[17];
          *(_OWORD *)(a2 + 72) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 88) = 0u;
          v200 = 1.0 / v198;
          v201 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 14));
          *(float64x2_t *)(a2 + 8) = vmulq_n_f64(v201, v200);
          *(double *)a2 = v200;
          v20 = 3;
          *(_QWORD *)(a2 + 104) = 0;
          *(_QWORD *)(a2 + 112) = 3;
          *(float64_t *)(a2 + 72) = v201.f64[1];
          v161 = v201.f64[0] + v199 * v200;
        }
        else
        {
          v149 = a1[1];
          v150 = a1[14];
          v151 = a1[15];
          v152 = a1[17];
          v153 = a1[25];
          v154 = a1[26];
          v155 = a1[28];
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_OWORD *)(a2 + 72) = 0u;
          *(_OWORD *)(a2 + 88) = 0u;
          v156 = 1.0 / v149;
          v157 = (float)(v151 * v154);
          v158 = (float)((float)(v150 * v154) + (float)(v151 * v153));
          v159 = (float)((float)(v151 + (float)(v150 * v153)) + v154);
          *(double *)(a2 + 24) = v156 * v158;
          *(double *)(a2 + 32) = v156 * v157;
          v160 = (float)(v150 + v153);
          *(double *)(a2 + 8) = v156 * v160;
          *(double *)(a2 + 16) = v156 * v159;
          *(double *)a2 = v156;
          v20 = 5;
          *(_QWORD *)(a2 + 104) = 0;
          *(_QWORD *)(a2 + 112) = 5;
          *(double *)(a2 + 80) = v158 + (float)((float)(v152 * v154) + (float)(v151 * v155)) * v156;
          *(double *)(a2 + 88) = v157;
          *(double *)(a2 + 72) = v159 + (float)((float)(v152 * v153) + (float)(v150 * v155)) * v156;
          v161 = v160 + (float)(v152 + v155) * v156;
        }
        *(double *)(a2 + 64) = v161;
LABEL_54:
        *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      }
LABEL_55:
      *(_QWORD *)(a2 + 120) = v20;
      return;
    case 2:
      v31 = *(_DWORD *)(a4 + 8);
      v33 = *(float *)a4;
      v32 = *(float *)(a4 + 4);
      if (*((_BYTE *)a1 + 136))
      {
        if (!*a5 || (v34 = a1[16], v34 == 0.0))
        {
          if ((v31 & 1) == 0)
          {
            v131 = a1[1];
            v132 = a1[14];
            v133 = a1[15];
            v134 = a1[25];
            v135 = a1[26];
            v136 = a1[28];
            v137 = a1[17];
            v138 = a1[18];
            *(_OWORD *)(a2 + 88) = 0u;
            *(_OWORD *)(a2 + 24) = 0u;
            *(_OWORD *)(a2 + 40) = 0u;
            *(_OWORD *)(a2 + 56) = 0u;
            *(_OWORD *)(a2 + 72) = 0u;
            *(_QWORD *)(a2 + 104) = 0;
            v139 = 1.0 / (v131 * v138);
            v140 = v137 * v135;
            v141 = v137 * v134;
            *(double *)(a2 + 8) = v139 * (float)((float)(v137 * v134) + (float)(v132 * v136));
            *(double *)(a2 + 16) = v139 * (float)((float)(v137 * v135) + (float)(v133 * v136));
            *(double *)a2 = v139 * (float)(v137 + v136);
            *(double *)(a2 + 88) = (float)(v133 * v135);
            v142 = v134;
            v143 = v135;
            *(double *)(a2 + 72) = 1.0
                                 / v131
                                 * (v131 * v132 * v142 + v131 * v133 + v131 * v143 + (float)(v132 * v136) + v141);
            *(double *)(a2 + 80) = 1.0 / v131 * (v131 * v132 * v143 + v131 * v133 * v142 + (float)(v133 * v136) + v140);
            *(double *)(a2 + 64) = 1.0 / v131 * (v131 * v142 + v131 * v132 + v137 + v136);
            *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
            v76 = (int64x2_t)xmmword_1B6627130;
            goto LABEL_58;
          }
          v167 = a1[1];
          v168 = a1[14];
          v169 = a1[15];
          v170 = a1[25];
          v171 = a1[26];
          v172 = a1[28];
          v173 = a1[17];
          v174 = a1[18];
          v44 = xmmword_1B6627120;
          *(_OWORD *)(a2 + 80) = 0u;
          *(_OWORD *)(a2 + 96) = 0u;
          *(_OWORD *)(a2 + 32) = 0u;
          *(_OWORD *)(a2 + 48) = 0u;
          *(_OWORD *)(a2 + 64) = 0u;
          v175 = 1.0 / (v167 * v174);
          v176 = v173 * v171;
          *(double *)(a2 + 16) = v175
                               * (float)((float)((float)((float)((float)(v173 * v33) * v170)
                                                       + (float)((float)(v168 * v33) * v172))
                                               + (float)(v169 * v172))
                                       + (float)(v173 * v171));
          *(double *)(a2 + 24) = v175 * (float)((float)((float)(v173 * v171) + (float)(v169 * v172)) * v33);
          *(double *)a2 = v175 * (float)(v173 + v172);
          *(double *)(a2 + 8) = v175
                              * (float)((float)((float)((float)(v172 * v33) + (float)(v33 * v173)) + (float)(v168 * v172))
                                      + (float)(v173 * v170));
          *(double *)(a2 + 96) = (float)((float)(v169 * v32) * v171);
          v177 = v32 * v167;
          v178 = v177 * v168;
          v179 = v171;
          v180 = v167 * v169;
          v181 = v178 * v171
               + v177 * v169 * v170
               + v180 * v171
               + (float)((float)(v169 * v32) * v172)
               + (float)((float)(v173 * v32) * v171);
          v182 = v178 * v170 + v177 * v169 + v177 * v171 + v180 * v170;
          v183 = v167 * v168;
          *(double *)(a2 + 80) = 1.0
                               / v167
                               * (v182
                                + v183 * v179
                                + (float)((float)(v168 * v32) * v172)
                                + (float)((float)(v173 * v32) * v170)
                                + (float)(v169 * v172)
                                + v176);
          *(double *)(a2 + 88) = 1.0 / v167 * v181;
          *(double *)(a2 + 64) = 1.0 / v167 * (v183 + v167 * v32 + v167 * v170 + v173 + v172);
          *(double *)(a2 + 72) = 1.0
                               / v167
                               * (v177 * v170
                                + v177 * v168
                                + v180
                                + v183 * v170
                                + v167 * v179
                                + (float)(v173 * v32)
                                + (float)(v172 * v32)
                                + (float)(v168 * v172)
                                + (float)(v173 * v170));
        }
        else
        {
          v35 = a1[1];
          v36 = a1[13];
          v37 = a1[14];
          v38 = a1[15];
          v40 = a1[25];
          v39 = a1[26];
          v41 = a1[28];
          v42 = a1[17];
          v43 = a1[18];
          *(_OWORD *)(a2 + 32) = 0u;
          *(_OWORD *)(a2 + 48) = 0u;
          *(_OWORD *)(a2 + 64) = 0u;
          *(_OWORD *)(a2 + 80) = 0u;
          v44 = xmmword_1B6627120;
          *(_OWORD *)(a2 + 96) = 0u;
          v45 = 1.0 / (v35 * v43);
          v46 = v43 * v43;
          v47 = v46 * v38;
          v48 = v41;
          v49 = (float)(v42 * v39);
          v50 = v37;
          v51 = v46 * v50;
          v52 = (float)(v42 * v40);
          v53 = (float)(v34 * v39);
          *(double *)(a2 + 16) = v45 * (v52 + v46 * v50 * v48 + v53);
          *(double *)(a2 + 24) = v45 * (v49 + v47 * v48);
          v54 = v36;
          v55 = v46 * v54;
          v56 = v42;
          v57 = (float)(v34 * v40);
          v58 = v34;
          *(double *)a2 = (v58 + v46 * v48) * v45;
          *(double *)(a2 + 8) = v45 * (v56 + v46 * v54 * v48 + v57);
          *(double *)(a2 + 96) = (float)(v38 * v39);
          v59 = v35 * v38;
          v60 = v40;
          v61 = v35 * v50;
          v62 = v39;
          v63 = v35 * v54;
          *(double *)(a2 + 80) = 1.0 / v35 * (v59 + v51 * v48 + v61 * v60 + v63 * v62 + v52 + v53);
          *(double *)(a2 + 88) = 1.0 / v35 * (v59 * v60 + v47 * v48 + v61 * v62 + v49);
          *(double *)(a2 + 64) = 1.0 / v35 * (v63 + v46 * v48 + v35 * v60 + v58);
          *(double *)(a2 + 72) = 1.0 / v35 * (v61 + v55 * v48 + v63 * v60 + v35 * v62 + v56 + v57);
        }
        *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
        *(_OWORD *)(a2 + 112) = v44;
        return;
      }
      if (!*((_BYTE *)a1 + 92))
        goto LABEL_38;
      if (!*a5 || (v100 = a1[16], v100 == 0.0))
      {
        if ((v31 & 1) == 0)
        {
          v192 = a1[1];
          v193 = a1[14];
          v194 = a1[15];
          v195 = a1[17];
          v196 = a1[18];
          *(_OWORD *)(a2 + 72) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_OWORD *)(a2 + 8) = 0u;
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 88) = 0u;
          *(_QWORD *)(a2 + 104) = 0;
          v197 = v195;
          *(double *)a2 = 1.0 / (v192 * v196) * v197;
          *(double *)(a2 + 64) = 1.0 / v192 * (v197 + v192 * v193);
          *(double *)(a2 + 72) = v194;
          *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
          v76 = (int64x2_t)xmmword_1B6627150;
          goto LABEL_58;
        }
        v208 = a1[1];
        v209 = a1[14];
        v210 = a1[15];
        v211 = a1[17];
        v212 = a1[18];
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        v213 = 1.0 / (v208 * v212);
        *(double *)a2 = v213 * v211;
        *(double *)(a2 + 8) = v213 * (float)(v211 * v33);
        *(double *)(a2 + 80) = (float)(v210 * v32);
        v214 = v209;
        *(double *)(a2 + 64) = 1.0 / v208 * (v208 * v214 + v208 * v32 + v211);
        *(double *)(a2 + 72) = 1.0 / v208 * (v208 * v210 + v32 * v208 * v214 + (float)(v211 * v32));
      }
      else
      {
        v101 = a1[1];
        v102 = a1[13];
        v103 = a1[14];
        v104 = a1[15];
        v105 = a1[17];
        v106 = a1[18];
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        v107 = 1.0 / (v101 * v106);
        v108 = v105;
        v109 = v100;
        *(double *)a2 = v107 * v109;
        *(double *)(a2 + 8) = v107 * v108;
        *(double *)(a2 + 72) = 1.0 / v101 * (v108 + v101 * v103);
        *(double *)(a2 + 80) = v104;
        *(double *)(a2 + 64) = 1.0 / v101 * (v109 + v101 * v102);
      }
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      v76 = (int64x2_t)xmmword_1B6627140;
      goto LABEL_58;
    case 3:
      if (*((_BYTE *)a1 + 136))
      {
        v64 = a1[1];
        v65 = a1[14];
        v66 = a1[15];
        v67 = a1[25];
        v68 = a1[26];
        v69 = a1[28];
        v70 = a1[17];
        v71 = 1.0 / (v64 * a1[18]);
        v72 = v70 * v68;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 72) = 0u;
        *(_QWORD *)(a2 + 104) = 0;
        v73 = v70 * v67;
        *(double *)(a2 + 8) = v71 * (float)((float)(v70 * v67) + (float)(v65 * v69));
        *(double *)(a2 + 16) = v71 * (float)((float)(v70 * v68) + (float)(v66 * v69));
        *(double *)a2 = v71 * (float)(v70 + v69);
        *(double *)(a2 + 88) = (float)(v66 * v68);
        v74 = v67;
        v75 = v68;
        *(double *)(a2 + 72) = 1.0 / v64 * (v64 * v65 * v74 + v64 * v66 + v64 * v75 + (float)(v65 * v69) + v73);
        *(double *)(a2 + 80) = 1.0 / v64 * (v64 * v65 * v75 + v64 * v66 * v74 + (float)(v66 * v69) + v72);
        *(double *)(a2 + 64) = 1.0 / v64 * (v64 * v74 + v64 * v65 + v70 + v69);
        *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
        v76 = (int64x2_t)xmmword_1B6627100;
        goto LABEL_58;
      }
      if (!*((_BYTE *)a1 + 92))
        goto LABEL_38;
      v110 = a1[1];
      v111 = a1[14];
      v112 = a1[15];
      v113 = a1[17];
      v114 = 1.0 / (v110 * a1[18]) * v113;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 88) = 0u;
      *(_QWORD *)(a2 + 104) = 0;
      *(double *)a2 = v114;
      *(double *)(a2 + 64) = 1.0 / v110 * (v113 + v110 * v111);
      *(double *)(a2 + 72) = v112;
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      v76 = (int64x2_t)xmmword_1B6627110;
      goto LABEL_58;
    case 4:
      if (*((_BYTE *)a1 + 136))
      {
        v77 = a1[1];
        v78 = a1[14];
        v79 = a1[15];
        v80 = a1[25];
        v81 = a1[26];
        v82 = a1[28];
        v83 = a1[17];
        v84 = a1[18];
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 72) = 0u;
        *(_QWORD *)(a2 + 104) = 0;
        v85 = 1.0 / (v77 * v84);
        *(int64x2_t *)(a2 + 24) = vdupq_n_s64(0x3DA5FD7FE1796495uLL);
        v86 = v83 * v81;
        v87 = v83 * v80;
        *(double *)(a2 + 8) = v85 * (float)((float)(v83 * v80) + (float)(v78 * v82));
        *(double *)(a2 + 16) = v85 * (float)((float)(v83 * v81) + (float)(v79 * v82));
        *(double *)a2 = v85 * (float)(v83 + v82);
        *(double *)(a2 + 88) = (float)(v79 * v81);
        v88 = v80;
        v89 = v81;
        *(double *)(a2 + 72) = 1.0 / v77 * (v77 * v78 * v88 + v77 * v79 + v77 * v89 + (float)(v78 * v82) + v87);
        *(double *)(a2 + 80) = 1.0 / v77 * (v77 * v78 * v89 + v77 * v79 * v88 + (float)(v79 * v82) + v86);
        *(double *)(a2 + 64) = 1.0 / v77 * (v77 * v88 + v77 * v78 + v83 + v82);
        *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
        v76 = vdupq_n_s64(5uLL);
LABEL_58:
        *(int64x2_t *)(a2 + 112) = v76;
      }
      else if (*((_BYTE *)a1 + 92))
      {
        DspLib::LoudspeakerManagerV2::accelerationPolynomialSingleResonator(a1, a2);
      }
      else
      {
LABEL_38:
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
      }
      return;
    default:
      goto LABEL_38;
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::initialize(void **this, unint64_t a2)
{
  std::vector<DspLib::Biquad::Section>::reserve(this + 11, 4uLL);
  std::vector<DspLib::Biquad::SDomainSection>::reserve(this + 14, 4uLL);
  std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::resize((uint64_t)(this + 8), a2);
  DspLib::LoudspeakerManagerV2::ModelManager::pageInRootsPath((DspLib::LoudspeakerManagerV2::ModelManager *)this);
  this[12] = this[11];
  std::vector<DspLib::Biquad::Section>::reserve(this + 17, 1uLL);
  this[18] = this[17];
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)(this + 20), a2);
}

void std::vector<DspLib::Biquad::Section>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 20;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(v3, a2);
    v7 = &v6[20 * v5];
    v9 = &v6[20 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v13;
        v12 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<DspLib::Biquad::SDomainSection>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xFF2920BC035B7D1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2440 * a2;
  }
}

__n128 DspLib::LoudspeakerManagerV2::ModelManager::pageInRootsPath(DspLib::LoudspeakerManagerV2::ModelManager *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __int128 *v15;
  char *v16;
  __int128 v17;
  BOOL v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v33 = 0;
  v30[0] = xmmword_1B6627170;
  v30[1] = xmmword_1B6627180;
  v31 = 0x4014000000000000;
  v28 = 0;
  v29 = 0;
  v26[0] = xmmword_1B6627190;
  v26[1] = xmmword_1B66271A0;
  v27 = 0x4024000000000000;
  v2 = (uint64_t *)((char *)this + 88);
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2);
  MEMORY[0x1E0C80A78](this);
  v5 = (char *)v26 - v4;
  v7 = (char *)v26 + 4 * v6 - v4;
  v8 = (char *)v26 - v4;
  do
  {
    *(_DWORD *)v8 = 1065353216;
    *(_QWORD *)(v8 + 12) = 0;
    *(_QWORD *)(v8 + 4) = 0;
    v8 += 20;
  }
  while (v8 != v7);
  v9 = *((_QWORD *)this + 11);
  v10 = *((_QWORD *)this + 12) - v9;
  if (v10)
  {
    v11 = 0;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 2);
    v13 = 1;
    do
    {
      v14 = 5 * v11;
      v15 = (__int128 *)(v9 + 4 * v14);
      v16 = &v5[4 * v14];
      v17 = *v15;
      *((_DWORD *)v16 + 4) = *((_DWORD *)v15 + 4);
      *(_OWORD *)v16 = v17;
      v11 = v13;
      v18 = v12 > v13++;
    }
    while (v18);
  }
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v2, 2uLL);
  DspLib::sPolynomialToBiquadCoefficients((double *)v30, 6000.0, 7, (DspLib *)v26, (const double *)7, v2, *((_DWORD *)this + 3));
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v2, v3);
  v20 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) != v20)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      v23 = 5 * v21;
      v24 = (__n128 *)&v5[4 * v23];
      v25 = (__n128 *)(v20 + 4 * v23);
      result = *v24;
      v25[1].n128_u32[0] = v24[1].n128_u32[0];
      *v25 = result;
      v21 = v22;
      v20 = *((_QWORD *)this + 11);
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 12) - v20) >> 2) > v22++;
    }
    while (v18);
  }
  return result;
}

void std::vector<DspLib::Biquad::Section>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::Biquad::Section>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 20 * a2;
  }
}

_QWORD *DspLib::LoudspeakerManagerV2::ModelManager::uninitialize(_QWORD *this)
{
  this[12] = this[11];
  this[9] = this[8];
  this[18] = this[17];
  this[21] = this[20];
  return this;
}

void DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::LoudspeakerManagerV2::ModelManager *this, const DspLib::AlgorithmParametersInstance *a2)
{
  float *v4;
  float v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  DspLib *v23;
  float v24;
  DspLib *v25;
  const DspLib::AlgorithmParametersInstance *v26;
  int v27;

  v4 = (float *)DspLib::AlgorithmParametersInstance::group(a2, 2u);
  *(_BYTE *)this = v4[3] != 0.0;
  *((_BYTE *)this + 1) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0) != 0.0;
  v5 = v4[12] * 0.01;
  *((float *)this + 13) = v5;
  v6 = v4[13] * 0.01;
  *((float *)this + 14) = v6;
  v7 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v7)
  {
    v8 = 0;
    v9 = 4;
    do
    {
      v10 = (int)v4[v9];
      v11 = v7 + 2440 * v8;
      v26 = a2;
      v27 = v10;
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v26, (__int128 *)v11);
      if (!*((_BYTE *)this + 60))
      {
        v12 = *(_OWORD *)(v11 + 128);
        v13 = v7 + 2440 * v8;
        *(_OWORD *)(v13 + 2384) = *(_OWORD *)(v11 + 144);
        v14 = *(_OWORD *)(v11 + 176);
        *(_OWORD *)(v13 + 2400) = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v13 + 2416) = v14;
        v15 = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v13 + 2320) = *(_OWORD *)(v11 + 80);
        v16 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v13 + 2336) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v13 + 2352) = v16;
        *(_OWORD *)(v13 + 2368) = v12;
        v17 = *(_OWORD *)v11;
        *(_OWORD *)(v13 + 2256) = *(_OWORD *)(v11 + 16);
        v18 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 2272) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 2288) = v18;
        *(_OWORD *)(v13 + 2304) = v15;
        *(_QWORD *)(v13 + 2432) = *(_QWORD *)(v11 + 192);
        *(_OWORD *)(v13 + 2240) = v17;
        *(_BYTE *)(v13 + 2256) = 1;
      }
      v19 = v7 + 2440 * v8;
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v26, (__int128 *)(v19 + 424));
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v26, (__int128 *)(v19 + 848));
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v26, (__int128 *)(v19 + 1272));
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v26, (__int128 *)(v19 + 1696));
      v20 = DspLib::AlgorithmParametersInstance::group(a2, v10 + 18);
      DspLib::LoudspeakerManagerV2::ThermalCoefficients::setParameters(v19 + 2120, v20, 15, *((unsigned __int8 *)this + 48));
      v21 = (v10 + 15);
      *(_BYTE *)(v19 + 2188) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1800000000) != 0.0;
      *(double *)(v19 + 2192) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1900000000)
                              * 6.28318531;
      *(double *)(v19 + 2200) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1A00000000);
      v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1B00000000);
      *(double *)(v19 + 2208) = DspLib::dB2Amp(v23, v22);
      v24 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1C00000000);
      *(double *)(v19 + 2216) = DspLib::dB2Amp(v25, -v24);
      v8 = v9 - 3;
      v7 = *((_QWORD *)this + 8);
      ++v9;
    }
    while (0xFF2920BC035B7D1 * ((*((_QWORD *)this + 9) - v7) >> 3) > v8);
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()(uint64_t a1, __int128 *a2)
{
  DspLib::AlgorithmParametersInstance *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  DspLib *v7;
  float v8;
  float v9;
  __int128 v10;
  _BOOL4 v11;
  int v12;
  int v13;
  char v14;
  float v15;
  char v16;
  int v17;
  char v18;
  char v19;
  float v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  float v32[2];
  uint64_t v33;
  int v34;
  int v35;
  float v36[2];
  __int128 v37;
  _BYTE v38[25];

  v3 = *(DspLib::AlgorithmParametersInstance **)a1;
  v4 = *(_DWORD *)(a1 + 8) + 3 * *((_DWORD *)a2 + 105);
  v5 = (v4 + 3);
  v6 = DspLib::AlgorithmParametersInstance::group(*(DspLib::AlgorithmParametersInstance **)a1, v4 + 3);
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v6 + 4);
  *((_BYTE *)a2 + 200) = *(float *)v6 >= 0.5;
  *((_BYTE *)a2 + 201) = *(float *)(v6 + 12) >= 0.5;
  *((_BYTE *)a2 + 202) = *(float *)(v6 + 36) >= 0.5;
  *((_BYTE *)a2 + 203) = *(float *)(v6 + 56) >= 0.5;
  *((_BYTE *)a2 + 217) = *(float *)(v6 + 92) >= 0.5;
  if (DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v3, v5 | 0x200000000) == 0.0)
  {
    v14 = 0;
    *(_QWORD *)((char *)a2 + 60) = 0;
    *(_QWORD *)((char *)a2 + 52) = 0;
    v8 = 0.0;
    *((_BYTE *)a2 + 76) = 0;
    v12 = 0;
    v13 = 0;
    *(_QWORD *)((char *)a2 + 68) = 0;
  }
  else
  {
    v8 = *(float *)(v6 + 16);
    v9 = *(float *)(v6 + 20) * 0.001;
    *(_QWORD *)&v10 = *(_QWORD *)(v6 + 24);
    v31 = *(_QWORD *)(v6 + 84);
    v11 = *(float *)(v6 + 72) == 2.0;
    *((_BYTE *)a2 + 216) = v11;
    v36[0] = v8;
    v36[1] = v9;
    *((_QWORD *)&v10 + 1) = v31;
    v37 = v10;
    v7 = (DspLib *)DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v36, v11, (uint64_t)v38);
    v12 = v31;
    *(__int128 *)((char *)a2 + 52) = *(_OWORD *)v38;
    *(__int128 *)((char *)a2 + 61) = *(_OWORD *)&v38[9];
    v13 = HIDWORD(v31);
    v14 = 1;
  }
  *((_BYTE *)a2 + 92) = v14;
  if (*(float *)(v6 + 32) == 0.0 || *(float *)(v6 + 8) == 0.0)
  {
    v16 = 0;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_BYTE *)a2 + 120) = 0;
    *((_QWORD *)a2 + 14) = 0;
  }
  else
  {
    v15 = *(float *)(v6 + 40) * 0.001;
    v32[0] = v8;
    v32[1] = v15;
    v33 = *(_QWORD *)(v6 + 44);
    v34 = v12;
    v35 = v13;
    v7 = (DspLib *)DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v32, 0, (uint64_t)v38);
    a2[6] = *(_OWORD *)v38;
    *(__int128 *)((char *)a2 + 105) = *(_OWORD *)&v38[9];
    v16 = 1;
  }
  *((_BYTE *)a2 + 136) = v16;
  if (*(float *)(v6 + 52) == 0.0)
  {
    v19 = 0;
    *(_QWORD *)((char *)a2 + 25) = 0;
    *(_QWORD *)((char *)a2 + 20) = 0;
  }
  else
  {
    v7 = (DspLib *)DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(*(float *)(v6 + 64), *(float *)(v6 + 68), *(float *)(v6 + 60));
    *(_QWORD *)((char *)a2 + 20) = v7;
    *((_DWORD *)a2 + 7) = v17;
    *((_BYTE *)a2 + 32) = v18;
    v19 = 1;
  }
  *((_BYTE *)a2 + 48) = v19;
  v20 = *(float *)(v6 + 76) * 6.2832;
  *((float *)a2 + 51) = v20 * DspLib::dB2Amp(v7, *(float *)(v6 + 80));
  *((float *)a2 + 52) = v20;
  v21 = *(float *)(v6 + 72) < 0.5;
  v22 = a2[10];
  v23 = a2[11];
  v24 = a2[8];
  *(__int128 *)((char *)a2 + 364) = a2[9];
  *(__int128 *)((char *)a2 + 380) = v22;
  *(__int128 *)((char *)a2 + 396) = v23;
  v25 = a2[6];
  v26 = a2[7];
  v27 = a2[4];
  *(__int128 *)((char *)a2 + 300) = a2[5];
  *(__int128 *)((char *)a2 + 316) = v25;
  *(__int128 *)((char *)a2 + 332) = v26;
  *(__int128 *)((char *)a2 + 348) = v24;
  v28 = *a2;
  *(__int128 *)((char *)a2 + 236) = a2[1];
  v29 = a2[3];
  *(__int128 *)((char *)a2 + 252) = a2[2];
  v30 = !v21;
  *((_BYTE *)a2 + 212) = v30;
  *(_QWORD *)((char *)a2 + 412) = *((_QWORD *)a2 + 24);
  *(__int128 *)((char *)a2 + 268) = v29;
  *(__int128 *)((char *)a2 + 284) = v27;
  *(__int128 *)((char *)a2 + 220) = v28;
}

float DspLib::LoudspeakerManagerV2::ThermalCoefficients::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float result;

  v4 = *(float *)(a2 + 48);
  *(float *)(a1 + 40) = v4;
  v5 = *(float *)(a2 + 52);
  *(float *)(a1 + 44) = v5;
  v6 = *(float *)(a2 + 40);
  *(float *)(a1 + 48) = v6;
  v7 = *(float *)(a2 + 44);
  *(float *)(a1 + 52) = v7;
  if (*(float *)(a2 + 56) >= 0.5)
  {
    v9 = *(float *)(a2 + 4);
    *(float *)(a1 + 4) = v9;
    v8 = *(float *)a2;
  }
  else if (a4)
  {
    v9 = *(float *)(a1 + 56);
    v8 = *(float *)(a1 + 60);
    *(float *)(a1 + 4) = v9;
  }
  else
  {
    *(_DWORD *)(a1 + 4) = -998637568;
    v8 = -1000.0;
    v9 = -1000.0;
  }
  *(float *)(a1 + 8) = v8;
  if (v9 < v4 || v9 > v5 || v8 < v6)
  {
    *(_BYTE *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    v12 = 0.0;
  }
  else
  {
    v13 = v8 > v7;
    *(_BYTE *)(a1 + 64) = v8 <= v7;
    v14 = *(float *)(a2 + 32);
    *(float *)(a1 + 32) = v14;
    v15 = *(float *)(a2 + 36);
    *(float *)(a1 + 36) = v15;
    v12 = 0.0;
    if (!v13)
      v12 = (float)(v14 + (float)((float)((float)(v15 - v14) / 15.0) * -20.0))
          + (float)((float)((float)(v15 - v14) / 15.0) * v8);
  }
  *(float *)a1 = v12;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

double DspLib::LoudspeakerManagerV2::ModelManager::getSDomainModel@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, int a5@<W4>, _OWORD *a6@<X8>)
{
  float v8;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  float *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double result;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  _OWORD v42[4];
  __int128 v43;
  _OWORD v44[12];
  _OWORD v45[2];
  _OWORD v46[12];
  uint64_t v47;

  v8 = *(float *)(a2 + 64);
  if (v8 != 0.0 && (*(_DWORD *)(a3 + 420) != 2 || *(_BYTE *)(a3 + 216) == 0))
  {
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(float *)(a2 + 68) / v8;
    v12 = *(float *)(a2 + 52) - v11;
    v13 = *(float *)(a2 + 56) - (float)(v12 * v11);
    *(float *)(a2 + 56) = v12;
    *(float *)(a2 + 60) = v13;
    *(float *)(a2 + 68) = v8;
    *(_DWORD *)(a2 + 72) = v10;
    *(_BYTE *)(a2 + 76) = BYTE4(v10);
  }
  v14 = *(_OWORD *)(a2 + 176);
  v46[10] = *(_OWORD *)(a2 + 160);
  v46[11] = v14;
  v47 = *(_QWORD *)(a2 + 192);
  v15 = *(_OWORD *)(a2 + 112);
  v46[6] = *(_OWORD *)(a2 + 96);
  v46[7] = v15;
  v16 = *(_OWORD *)(a2 + 144);
  v46[8] = *(_OWORD *)(a2 + 128);
  v46[9] = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v46[2] = *(_OWORD *)(a2 + 32);
  v46[3] = v17;
  v18 = *(_OWORD *)(a2 + 80);
  v46[4] = *(_OWORD *)(a2 + 64);
  v46[5] = v18;
  v19 = *(_OWORD *)(a2 + 16);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v19;
  v20 = *(_OWORD *)(a3 + 176);
  v44[10] = *(_OWORD *)(a3 + 160);
  v44[11] = v20;
  v45[0] = *(_OWORD *)(a3 + 192);
  *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)(a3 + 204);
  v21 = *(_OWORD *)(a3 + 112);
  v44[6] = *(_OWORD *)(a3 + 96);
  v44[7] = v21;
  v22 = *(_OWORD *)(a3 + 144);
  v44[8] = *(_OWORD *)(a3 + 128);
  v44[9] = v22;
  v23 = *(_OWORD *)(a3 + 48);
  v44[2] = *(_OWORD *)(a3 + 32);
  v44[3] = v23;
  v24 = *(_OWORD *)(a3 + 80);
  v44[4] = *(_OWORD *)(a3 + 64);
  v44[5] = v24;
  v25 = *(_OWORD *)(a3 + 16);
  v44[0] = *(_OWORD *)a3;
  v44[1] = v25;
  *a4 = DspLib::LoudspeakerManagerV2::updateAppliedModel((uint64_t)v46, (uint64_t)v44, (__int128 *)(a3 + 220), *(_BYTE *)a1, a5, *(float *)(a1 + 52), *(float *)(a1 + 56));
  v26 = *(_DWORD *)(a3 + 420);
  if (v26 == 2)
  {
    v27 = a3 + 204;
    v28 = (_BYTE *)(a3 + 216);
    v29 = (float *)(a3 + 220);
  }
  else
  {
    v29 = (float *)(a3 + 220);
    v27 = 0;
    v28 = 0;
  }
  DspLib::LoudspeakerManagerV2::modelPolynomial(v29, (uint64_t)v40, v26, v27, v28);
  if ((_QWORD)v43)
  {
    v30 = 0;
    v31 = 1;
    while ((*((_QWORD *)v40 + v30) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v30 = v31;
      v32 = (unint64_t)v43 > v31++;
      if (!v32)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    if (!*((_QWORD *)&v43 + 1))
    {
LABEL_19:
      v35 = v42[2];
      a6[4] = v42[1];
      a6[5] = v35;
      v36 = v43;
      a6[6] = v42[3];
      a6[7] = v36;
      v37 = v40[1];
      *a6 = v40[0];
      a6[1] = v37;
      result = *(double *)&v41;
      v39 = v42[0];
      a6[2] = v41;
      a6[3] = v39;
      return result;
    }
    v33 = 0;
    v34 = 1;
    while ((*((_QWORD *)v42 + v33 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v33 = v34;
      v32 = *((_QWORD *)&v43 + 1) > (unint64_t)v34++;
      if (!v32)
        goto LABEL_19;
    }
  }
  result = 0.0;
  a6[6] = 0u;
  a6[7] = 0u;
  a6[4] = 0u;
  a6[5] = 0u;
  a6[2] = 0u;
  a6[3] = 0u;
  *a6 = 0u;
  a6[1] = 0u;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::updateAppliedModel(uint64_t a1, uint64_t a2, __int128 *a3, char a4, int a5, float a6, float a7)
{
  __int128 v13;
  _QWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  float32x2_t v22;
  char v23;
  float v24;
  BOOL v25;
  BOOL v26;
  BOOL v28;
  uint64_t result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char v37;
  char v38;
  float32x2_t v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[25];
  _OWORD v43[2];
  _BYTE v44[16];
  uint64_t v45;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v13 = a3[11];
  v59 = a3[10];
  v60 = v13;
  v14 = (_QWORD *)((char *)a3 + 52);
  v15 = (_OWORD *)(a2 + 52);
  v61 = *((_QWORD *)a3 + 24);
  v16 = a3[7];
  v55 = a3[6];
  v56 = v16;
  v17 = a3[9];
  v57 = a3[8];
  v58 = v17;
  v18 = a3[3];
  v51 = a3[2];
  v52 = v18;
  v19 = a3[5];
  v53 = a3[4];
  v54 = v19;
  v20 = a3[1];
  v49 = *a3;
  v50 = v20;
  v21 = (_OWORD *)(a1 + 52);
  if (*(_BYTE *)a1 || (a4 & 1) != 0 || *(_BYTE *)(a2 + 217))
  {
    *((float *)a3 + 1) = *((float *)a3 + 1) + (float)((float)(*(float *)(a2 + 4) - *((float *)a3 + 1)) * 0.2);
    *((float *)a3 + 7) = *((float *)a3 + 7) + (float)((float)(*(float *)(a2 + 28) - *((float *)a3 + 7)) * 0.2);
    v22 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
    *(float32x2_t *)((char *)a3 + 20) = vmla_f32(*(float32x2_t *)((char *)a3 + 20), v22, vsub_f32(*(float32x2_t *)(a2 + 20), *(float32x2_t *)((char *)a3 + 20)));
    v23 = 1;
    if (*(float *)(a1 + 64) <= 0.0)
      v23 = *(_BYTE *)(a2 + 216) != 0;
    DspLib::LoudspeakerManagerV2::smoothResonatorCoefficients((uint64_t)v14, a2 + 52, v23);
    *(float32x2_t *)((char *)a3 + 100) = vmla_f32(*(float32x2_t *)((char *)a3 + 100), v22, vsub_f32(*(float32x2_t *)(a2 + 100), *(float32x2_t *)((char *)a3 + 100)));
    *((float32x2_t *)a3 + 14) = vmla_f32((float32x2_t)a3[7], v22, vsub_f32(*(float32x2_t *)(a2 + 112), (float32x2_t)a3[7]));
    *((_DWORD *)a3 + 24) = 0;
    *((_DWORD *)a3 + 27) = 0;
    *(_BYTE *)a3 = 1;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  *((float *)a3 + 1) = *((float *)a3 + 1) + (float)((float)(*(float *)(a1 + 4) - *((float *)a3 + 1)) * 0.2);
  if (!*(_BYTE *)(a1 + 48) || !*(_BYTE *)(a2 + 48))
  {
    v36 = 0;
    *(_QWORD *)((char *)a3 + 25) = 0;
    *(_QWORD *)((char *)a3 + 20) = 0;
    goto LABEL_34;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    *((float *)a3 + 7) = *((float *)a3 + 7) + (float)((float)(*(float *)(a1 + 28) - *((float *)a3 + 7)) * 0.2);
    *(float32x2_t *)((char *)a3 + 20) = vmla_f32(*(float32x2_t *)((char *)a3 + 20), (float32x2_t)vdup_n_s32(0x3E4CCCCDu), vsub_f32(*(float32x2_t *)(a1 + 20), *(float32x2_t *)((char *)a3 + 20)));
    v36 = 1;
LABEL_34:
    *((_BYTE *)a3 + 48) = v36;
  }
  if (!*(_BYTE *)(a1 + 92) || !*(_BYTE *)(a2 + 92))
  {
    v38 = 0;
    *v14 = 0;
    *(_QWORD *)((char *)a3 + 60) = 0;
    *((_BYTE *)a3 + 76) = 0;
    *(_QWORD *)((char *)a3 + 68) = 0;
LABEL_46:
    *((_BYTE *)a3 + 92) = v38;
    goto LABEL_47;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a2 + 216) && *(float *)(a1 + 64) == 0.0)
    {
      v46[0] = *v21;
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)(a1 + 64);
      DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v46, 1, 0, (uint64_t)&v47, *(float *)(a1 + 72), 0.0, 0.0);
      v43[0] = *v15;
      *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)((char *)v15 + 12);
      DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v43, 1, 1, (uint64_t)v44, *(float *)(a2 + 72), 0.0, 0.0);
      v48 = v45;
      v40 = v47;
      v41 = v45;
      DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs((float *)&v40, 1, (uint64_t)v42);
      *v21 = *(_OWORD *)v42;
      *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v42[9];
    }
    v37 = *(float *)(a1 + 64) > 0.0 || *(_BYTE *)(a2 + 216) != 0;
    DspLib::LoudspeakerManagerV2::smoothResonatorCoefficients((uint64_t)v14, (uint64_t)v21, v37);
    v38 = 1;
    goto LABEL_46;
  }
LABEL_47:
  if (*(_BYTE *)(a1 + 136) && *(_BYTE *)(a2 + 136))
  {
    if (*(_BYTE *)(a1 + 132))
    {
      v39 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
      *(float32x2_t *)((char *)a3 + 100) = vmla_f32(*(float32x2_t *)((char *)a3 + 100), v39, vsub_f32(*(float32x2_t *)(a1 + 100), *(float32x2_t *)((char *)a3 + 100)));
      *((float32x2_t *)a3 + 14) = vmla_f32((float32x2_t)a3[7], v39, vsub_f32(*(float32x2_t *)(a1 + 112), (float32x2_t)a3[7]));
      *((_DWORD *)a3 + 24) = 0;
      *((_DWORD *)a3 + 27) = 0;
      *((_BYTE *)a3 + 136) = 1;
    }
  }
  else
  {
    *((_QWORD *)a3 + 12) = 0;
    *((_QWORD *)a3 + 13) = 0;
    *((_BYTE *)a3 + 120) = 0;
    *((_QWORD *)a3 + 14) = 0;
    *((_BYTE *)a3 + 136) = 0;
  }
LABEL_7:
  v24 = *((float *)a3 + 1);
  v25 = (float)(vabds_f32(v24, *(float *)(a1 + 4)) / *(float *)(a1 + 4)) <= a6 || *(_BYTE *)(a1 + 16) == 0;
  if (v25
    && ((float)(vabds_f32(*((float *)a3 + 15), *(float *)(a1 + 60)) / *(float *)(a1 + 60)) > a7
      ? (v26 = *(_BYTE *)(a1 + 132) == 0)
      : (v26 = 1),
        v26))
  {
    v28 = (float)(vabds_f32(v24, *(float *)(a2 + 4)) / *(float *)(a2 + 4)) > a6 && *(_BYTE *)a1 != 0;
    result = 1;
    if (a5 != 1 && !v28)
    {
      result = 0;
      *((_QWORD *)a3 + 24) = v61;
      v30 = v60;
      a3[10] = v59;
      a3[11] = v30;
      v31 = v56;
      a3[6] = v55;
      a3[7] = v31;
      v32 = v58;
      a3[8] = v57;
      a3[9] = v32;
      v33 = v52;
      a3[2] = v51;
      a3[3] = v33;
      v34 = v54;
      a3[4] = v53;
      a3[5] = v34;
      v35 = v50;
      *a3 = v49;
      a3[1] = v35;
    }
  }
  else
  {
    result = 1;
  }
  *((_BYTE *)a3 + 1) = result;
  return result;
}

void DspLib::LoudspeakerManagerV2::ModelManager::status(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  float v15;
  float *v16;
  uint64_t i;
  float v18;
  uint64_t v19;
  float v20;
  float *v21;
  uint64_t j;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  float v36;
  float v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  float v45;
  float v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  float v50;
  int v51;
  float v52;
  int v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  _BOOL4 v59;
  _OWORD v60[2];
  unsigned __int128 v61;
  uint64_t v62;
  _OWORD v63[2];
  __int128 v64;
  int v65;
  _OWORD v66[8];
  __int128 v67;
  int v68;
  _BYTE v69[32];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64x2_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64x2_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64x2_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v5 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v6 = v4 < 2;
  v7 = *(_QWORD *)(a1 + 64);
  switch(v4)
  {
    case 1u:
      v8 = v7 + 2440 * v5 + 424;
      goto LABEL_5;
    case 2u:
      v59 = v4 < 2;
      v9 = v7 + 2440 * v5;
      v8 = v9 + 848;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v10 = *(_DWORD *)(v9 + 1268);
      DspLib::LoudspeakerManagerV2::modelPolynomial((float *)(v9 + 848), (uint64_t)v69, v10, v9 + 1052, (_BYTE *)(v9 + 1064));
      v80 = v72;
      v81 = v73;
      v82 = v74;
      v83 = v75;
      v76 = *(_OWORD *)v69;
      v77 = *(_OWORD *)&v69[16];
      v78 = v70;
      v79 = v71;
      if (*(float *)(v9 + 2244) <= 0.0)
      {
        v88 = v80;
        v89 = v81;
        v90 = v82;
        v91 = v83;
        v84 = v76;
        v85 = v77;
        v11 = v78;
        v12 = v79;
      }
      else
      {
        DspLib::LoudspeakerManagerV2::modelPolynomial((float *)(v7 + 2440 * v5 + 2240), (uint64_t)v69, 2, v9 + 1052, (_BYTE *)(v9 + 1064));
        v88 = v72;
        v89 = v73;
        v90 = v74;
        v91 = v75;
        v84 = *(_OWORD *)v69;
        v85 = *(_OWORD *)&v69[16];
        v11 = v70;
        v12 = v71;
      }
      v86 = v11;
      v87 = v12;
      DspLib::LoudspeakerManagerV2::modelPolynomial((float *)(v7 + 2440 * v5 + 1068), (uint64_t)&v92, v10, v9 + 1052, (_BYTE *)(v9 + 1064));
      v6 = v59;
      goto LABEL_16;
    case 3u:
      v8 = v7 + 2440 * v5 + 1272;
      goto LABEL_5;
    case 4u:
      v8 = v7 + 2440 * v5 + 1696;
LABEL_5:
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      goto LABEL_6;
    default:
      v98 = 0u;
      v99 = 0u;
      v8 = v7 + 2440 * v5;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      if (!v4)
      {
LABEL_6:
        DspLib::LoudspeakerManagerV2::modelPolynomial((float *)v8, (uint64_t)&v76, *(_DWORD *)(v8 + 420), 0, 0);
        if (*(float *)(v7 + 2440 * v5 + 2244) <= 0.0)
        {
          v88 = v80;
          v89 = v81;
          v90 = v82;
          v91 = v83;
          v84 = v76;
          v85 = v77;
          v86 = v78;
          v87 = v79;
        }
        else
        {
          DspLib::LoudspeakerManagerV2::modelPolynomial((float *)(v7 + 2440 * v5 + 2240), (uint64_t)&v84, v4, 0, 0);
        }
        DspLib::LoudspeakerManagerV2::modelPolynomial((float *)(v8 + 220), (uint64_t)&v92, *(_DWORD *)(v8 + 420), 0, 0);
      }
LABEL_16:
      v13 = 0;
      v14 = *(unsigned __int8 *)(v8 + 221);
      do
      {
        v15 = *((double *)&v84 + v13);
        *(float *)(a2 + 8180 + 4 * v13++) = v15;
      }
      while (v13 != 7);
      v16 = (float *)(a2 + 8208);
      for (i = 56; i != 112; i += 8)
      {
        v18 = *(double *)((char *)&v84 + i);
        *v16++ = v18;
      }
      v19 = 0;
      *(float32x2_t *)(a2 + 8236) = vcvt_f32_f64(vcvtq_f64_u64(v91));
      do
      {
        v20 = *((double *)&v76 + v19);
        *(float *)(a2 + 8244 + 4 * v19++) = v20;
      }
      while (v19 != 7);
      v21 = (float *)(a2 + 8272);
      for (j = 56; j != 112; j += 8)
      {
        v23 = *(double *)((char *)&v76 + j);
        *v21++ = v23;
      }
      *(float32x2_t *)(a2 + 8300) = vcvt_f32_f64(vcvtq_f64_u64(v83));
      v24 = 0.0;
      if (v14)
        v24 = 1.0;
      *(float *)(a2 + 8148) = v24;
      v25 = *(_QWORD *)(a1 + 160) + 20 * v5;
      v26 = *(_DWORD *)(v25 + 16);
      v67 = *(_OWORD *)v25;
      v68 = v26;
      DspLib::Biquad::write((uint64_t)&v67, a2 + 8388);
      v66[4] = v96;
      v66[5] = v97;
      v66[6] = v98;
      v66[7] = v99;
      v66[0] = v92;
      v66[1] = v93;
      v66[2] = v94;
      v66[3] = v95;
      DspLib::LoudspeakerManagerV2::updateBiquadCoefficients(v66, (uint64_t *)(a1 + 88), (uint64_t *)(a1 + 112), *(_DWORD *)(a1 + 8), v6, 48000.0);
      DspLib::Biquad::write(*(_QWORD *)(a1 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 2), a2 + 8308);
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 2);
      if (v27 <= 3)
      {
        v28 = v27 - 4;
        v29 = a2 + 4 * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 2) + 8308;
        do
        {
          v65 = 0;
          v64 = DspLib::Biquad::kBypassSection;
          DspLib::Biquad::write((uint64_t)&v64, v29);
          v29 += 20;
        }
        while (!__CFADD__(v28++, 1));
      }
      v31 = *(_QWORD *)(a1 + 64);
      v32 = *(_QWORD *)(a1 + 72) - v31;
      if (v32)
      {
        v33 = 0xFF2920BC035B7D1 * (v32 >> 3);
        v34 = v31 + 2120;
        v35 = 2012;
        do
        {
          if (*(float *)v34 == 0.0)
            v36 = 1000.0;
          else
            v36 = *(float *)(v34 + 8)
                + (float)((float)(1.0 / *(float *)v34)
                        * (float)((float)(*(float *)(v34 + 124) / *(float *)(v34 + 4)) + -1.0));
          *(float *)(a2 + 4 * (v35 - 8)) = v36;
          if (*(_BYTE *)(v34 + 136))
            v37 = 1.0;
          else
            v37 = 0.0;
          *(float *)(a2 + 4 * v35) = v37;
          v38 = v35 - 2011;
          v34 += 2440;
          ++v35;
        }
        while (v33 > v38);
      }
      v39 = v7 + 2440 * v5;
      *(_DWORD *)(a2 + 8080) = *(_DWORD *)(v39 + 2244);
      *(_DWORD *)(a2 + 8084) = *(_DWORD *)(v39 + 2252);
      v40 = *(float *)(v39 + 2312);
      v41 = *(_OWORD *)(v39 + 2292);
      *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(v39 + 2304);
      v63[0] = v41;
      DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v63, 1, *(float *)(v39 + 2304) > 0.0, (uint64_t)v69, v40, 1.0, 1.0);
      v42 = 0;
      if (*(_BYTE *)(v39 + 2332))
      {
        v43 = *(_OWORD *)&v69[4];
        v44 = *(_DWORD *)&v69[20];
        v45 = 0.0;
        if (*(_BYTE *)(v7 + 2440 * v5 + 2328))
          v45 = 1.0;
        v46 = v40;
      }
      else
      {
        v43 = 0uLL;
        v46 = 0.0;
        v44 = 0;
        v45 = 0.0;
      }
      *(_OWORD *)(a2 + 8092) = v43;
      *(float *)(a2 + 8088) = v46;
      *(_DWORD *)(a2 + 8108) = v44;
      *(float *)(a2 + 8112) = v45;
      if (*(_BYTE *)(v7 + 2440 * v5 + 2376))
      {
        v47 = v7 + 2440 * v5;
        v48 = *(_OWORD *)(v47 + 2336);
        *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)(v47 + 2348);
        v60[0] = v48;
        DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v60, 1, 0, (uint64_t)&v61, v40, 1.0, 1.0);
        *(_OWORD *)v69 = v61;
        *(_QWORD *)&v69[16] = v62;
        v49 = v61 >> 32;
        v42 = HIDWORD(v61);
        v50 = 0.0;
        if (*(_BYTE *)(v47 + 2372))
          v50 = 1.0;
      }
      else
      {
        v49 = 0;
        v50 = 0.0;
      }
      *(_QWORD *)(a2 + 8116) = v49;
      *(_DWORD *)(a2 + 8124) = v42;
      *(float *)(a2 + 8128) = v50;
      v51 = 0;
      v52 = 0.0;
      v53 = 0;
      v54 = 0.0;
      if (*(_BYTE *)(v7 + 2440 * v5 + 2288))
      {
        v55 = v7 + 2440 * v5;
        v52 = DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters(*(_QWORD *)(v55 + 2260));
        v54 = 0.0;
        if (*(_BYTE *)(v55 + 2284))
          v54 = 1.0;
      }
      *(_DWORD *)(a2 + 8132) = v51;
      *(float *)(a2 + 8136) = v52;
      *(_DWORD *)(a2 + 8140) = v53;
      *(float *)(a2 + 8144) = v54;
      v56 = 1.0;
      if (*(_BYTE *)(a1 + 48))
        v57 = 1.0;
      else
        v57 = 0.0;
      *(float *)(a2 + 8152) = v57;
      v58 = *(_QWORD *)(a1 + 64) + 2440 * *(unsigned int *)(a1 + 4);
      *(_DWORD *)(a2 + 8156) = *(_DWORD *)(v58 + 2124);
      *(_DWORD *)(a2 + 8160) = *(_DWORD *)(v58 + 2128);
      *(_DWORD *)(a2 + 8164) = *(_DWORD *)(v58 + 2176);
      *(_DWORD *)(a2 + 8168) = *(_DWORD *)(v58 + 2180);
      *(_DWORD *)(a2 + 8172) = *(_DWORD *)(v58 + 2120);
      if (!*(_BYTE *)(v58 + 2184))
        v56 = 0.0;
      *(float *)(a2 + 8176) = v56;
      return;
  }
}

void DspLib::LoudspeakerManagerV2::updateBiquadCoefficients(_OWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, double a6)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];
  _OWORD v25[5];

  v8 = a1[5];
  v25[1] = a1[4];
  v25[2] = v8;
  v9 = a1[7];
  v25[3] = a1[6];
  v25[4] = v9;
  v10 = a1[1];
  v24[0] = *a1;
  v24[1] = v10;
  v11 = a1[3];
  v24[2] = a1[2];
  v25[0] = v11;
  DspLib::sPolynomialToBiquadCoefficients((uint64_t)v24, a6, v9, (DspLib *)((char *)v25 + 8), *((const double **)&v9 + 1), a3, a2, a5);
  switch(a4)
  {
    case 3:
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2);
      if (v17 <= 1)
      {
        std::vector<DspLib::Biquad::Section>::resize((uint64_t)a2, 2uLL);
        do
        {
          v18 = v17;
          v19 = *a2 + 20 * v17;
          *(_OWORD *)v19 = DspLib::Biquad::kBypassSection;
          *(_DWORD *)(v19 + 16) = 0;
          v17 = 1;
        }
        while (!v18);
      }
      break;
    case 2:
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2);
      if (v20 <= 2)
      {
        std::vector<DspLib::Biquad::Section>::resize((uint64_t)a2, 3uLL);
        v21 = v20 - 3;
        v22 = 20 * v20;
        do
        {
          v23 = *a2 + v22;
          *(_OWORD *)v23 = DspLib::Biquad::kBypassSection;
          *(_DWORD *)(v23 + 16) = 0;
          v22 += 20;
          v16 = __CFADD__(v21++, 1);
        }
        while (!v16);
      }
      break;
    case 1:
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2);
      if (v12 <= 2)
      {
        std::vector<DspLib::Biquad::Section>::resize((uint64_t)a2, 3uLL);
        v13 = v12 - 3;
        v14 = 20 * v12;
        do
        {
          v15 = *a2 + v14;
          *(_OWORD *)v15 = DspLib::Biquad::kBypassSection;
          *(_DWORD *)(v15 + 16) = 0;
          v14 += 20;
          v16 = __CFADD__(v13++, 1);
        }
        while (!v16);
      }
      break;
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::setSpTSCalibration(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v15 = *a2;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    do
    {
      v7 = *(_QWORD *)v4;
      if (v6 >= *(_QWORD *)(a1 + 40))
      {
        v6 = std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__push_back_slow_path<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties const&>((uint64_t *)(a1 + 24), (__int128 *)v7);
      }
      else
      {
        v8 = *(_OWORD *)v7;
        *(_QWORD *)(v6 + 14) = *(_QWORD *)(v7 + 14);
        *(_OWORD *)v6 = v8;
        v9 = *(_QWORD *)(v7 + 32);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v6 + 32) = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = *(_QWORD *)(v7 + 48);
        *(_QWORD *)(v6 + 40) = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(v6 + 48) = v12;
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v6 += 56;
      }
      *(_QWORD *)(a1 + 32) = v6;
      v4 += 8;
    }
    while (v4 != v5);
    v4 = *a2;
    v15 = a2[1];
  }
  v16 = v15 - v4;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  if (0xFF2920BC035B7D1 * ((v18 - v17) >> 3) == v16 >> 3)
  {
    *(_BYTE *)(a1 + 16) = 1;
    if (v18 != v17)
    {
      v19 = 0;
      v20 = 1;
      do
      {
        DspLib::LoudspeakerManagerV2::ThermalCoefficients::setCalibration(v17 + 2440 * v19 + 2120, *(_QWORD *)&(*a2)[8 * v19]);
        v19 = v20;
        v17 = *(_QWORD *)(a1 + 64);
      }
      while (0xFF2920BC035B7D1 * ((*(_QWORD *)(a1 + 72) - v17) >> 3) > (unint64_t)v20++);
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
}

float DspLib::LoudspeakerManagerV2::ThermalCoefficients::setCalibration(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  BOOL v12;
  float result;

  v2 = *(float *)(a2 + 4);
  v3 = *(float *)(a2 + 8);
  *(float *)(a1 + 4) = v2;
  *(float *)(a1 + 8) = v3;
  *(float *)(a1 + 56) = v2;
  *(float *)(a1 + 60) = v3;
  v4 = *(float *)(a1 + 40);
  v5 = *(float *)(a1 + 44);
  v6 = 4;
  if (v5 < v2)
    v6 = 44;
  if (v2 < v4)
    v6 = 40;
  v7 = *(float *)(a1 + v6);
  *(float *)(a1 + 4) = v7;
  v8 = *(float *)(a1 + 48);
  v9 = *(float *)(a1 + 52);
  v10 = 8;
  if (v9 < v3)
    v10 = 52;
  if (v3 < v8)
    v10 = 48;
  v11 = *(float *)(a1 + v10);
  *(float *)(a1 + 8) = v11;
  v12 = v7 >= v4;
  if (v7 > v5)
    v12 = 0;
  if (v11 < v8)
    v12 = 0;
  if (v11 > v9)
    v12 = 0;
  *(_BYTE *)(a1 + 64) = v12;
  result = (float)(*(float *)(a1 + 32)
                 + (float)((float)((float)(*(float *)(a1 + 36) - *(float *)(a1 + 32)) / 15.0) * -20.0))
         + (float)((float)((float)(*(float *)(a1 + 36) - *(float *)(a1 + 32)) / 15.0) * v11);
  *(float *)a1 = result;
  return result;
}

__n128 DspLib::LoudspeakerManagerV2::ModelManager::getZDomainVoiceCoilThermalModel@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  __n128 *v11;
  __n128 result;

  v7 = *(_QWORD *)(a1 + 64) + 2440 * a2;
  v8 = *(float *)(v7 + 2136);
  v9 = *(float *)(v7 + 2132) / v8;
  std::vector<DspLib::Biquad::Section>::resize(a1 + 88, 1uLL);
  v10 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)v10 = 0;
  *(float *)(v10 + 4) = v9;
  *(_DWORD *)(v10 + 8) = 0;
  *(float *)(v10 + 12) = 1.0 / v8;
  *(_DWORD *)(v10 + 16) = 0;
  DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)v10, a4);
  v11 = *(__n128 **)(a1 + 88);
  result = *v11;
  *a3 = *v11;
  a3[1].n128_u32[0] = v11[1].n128_u32[0];
  return result;
}

__n128 DspLib::LoudspeakerManagerV2::ModelManager::getZDomainMagnetThermalModel@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  __n128 *v11;
  __n128 result;

  v7 = *(_QWORD *)(a1 + 64) + 2440 * a2;
  v8 = *(float *)(v7 + 2144);
  v9 = *(float *)(v7 + 2140) / v8;
  std::vector<DspLib::Biquad::Section>::resize(a1 + 88, 1uLL);
  v10 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)v10 = 0;
  *(float *)(v10 + 4) = v9;
  *(_DWORD *)(v10 + 8) = 0;
  *(float *)(v10 + 12) = 1.0 / v8;
  *(_DWORD *)(v10 + 16) = 0;
  DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)v10, a4);
  v11 = *(__n128 **)(a1 + 88);
  result = *v11;
  *a3 = *v11;
  a3[1].n128_u32[0] = v11[1].n128_u32[0];
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::getZDomainLoudspeakerModel(_QWORD *a1, uint64_t a2, int a3, int a4, _BYTE *a5, int a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[8];
  _OWORD v18[8];

  v13 = a1[8];
  v14 = v13 + 2440 * a2;
  v15 = v14 + 2240;
  switch(a3)
  {
    case 1:
      v14 = v13 + 2440 * a2 + 424;
      break;
    case 2:
      v14 = v13 + 2440 * a2 + 848;
      break;
    case 3:
      v14 = v13 + 2440 * a2 + 1272;
      break;
    case 4:
      v14 = v13 + 2440 * a2 + 1696;
      break;
    default:
      break;
  }
  DspLib::LoudspeakerManagerV2::ModelManager::getSDomainModel((uint64_t)a1, v15, v14, a5, a6, v18);
  if (*a5)
  {
    v17[4] = v18[4];
    v17[5] = v18[5];
    v17[6] = v18[6];
    v17[7] = v18[7];
    v17[0] = v18[0];
    v17[1] = v18[1];
    v17[2] = v18[2];
    v17[3] = v18[3];
    DspLib::LoudspeakerManagerV2::updateBiquadCoefficients(v17, a1 + 11, a1 + 14, a3, a4, a7);
  }
  return a1[11];
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::appliedAccelerationModelDidChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  uint64_t v19;
  _OWORD v20[12];
  _OWORD v21[2];
  _OWORD v22[12];
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 64) + 2440 * a2;
  v6 = *(_OWORD *)(v5 + 2384);
  v7 = *(_OWORD *)(v5 + 2416);
  v22[10] = *(_OWORD *)(v5 + 2400);
  v22[11] = v7;
  v23 = *(_QWORD *)(v5 + 2432);
  v8 = *(_OWORD *)(v5 + 2320);
  v9 = *(_OWORD *)(v5 + 2352);
  v22[6] = *(_OWORD *)(v5 + 2336);
  v22[7] = v9;
  v22[8] = *(_OWORD *)(v5 + 2368);
  v22[9] = v6;
  v10 = *(_OWORD *)(v5 + 2256);
  v11 = *(_OWORD *)(v5 + 2288);
  v22[2] = *(_OWORD *)(v5 + 2272);
  v22[3] = v11;
  v22[4] = *(_OWORD *)(v5 + 2304);
  v22[5] = v8;
  v22[0] = *(_OWORD *)(v5 + 2240);
  v22[1] = v10;
  v12 = *(_OWORD *)(v5 + 1872);
  v20[10] = *(_OWORD *)(v5 + 1856);
  v20[11] = v12;
  v21[0] = *(_OWORD *)(v5 + 1888);
  *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(v5 + 1900);
  v13 = *(_OWORD *)(v5 + 1808);
  v20[6] = *(_OWORD *)(v5 + 1792);
  v20[7] = v13;
  v14 = *(_OWORD *)(v5 + 1840);
  v20[8] = *(_OWORD *)(v5 + 1824);
  v20[9] = v14;
  v15 = *(_OWORD *)(v5 + 1744);
  v20[2] = *(_OWORD *)(v5 + 1728);
  v20[3] = v15;
  v16 = *(_OWORD *)(v5 + 1776);
  v20[4] = *(_OWORD *)(v5 + 1760);
  v20[5] = v16;
  v17 = *(_OWORD *)(v5 + 1712);
  v20[0] = *(_OWORD *)(v5 + 1696);
  v20[1] = v17;
  result = DspLib::LoudspeakerManagerV2::updateAppliedModel((uint64_t)v22, (uint64_t)v20, (__int128 *)(v5 + 1916), *(_BYTE *)a1, a3, *(float *)(a1 + 52), *(float *)(a1 + 56));
  if ((_DWORD)result)
  {
    v19 = *(_QWORD *)(a1 + 64) + 2440 * a2;
    return *(float *)(v19 + 1700) > 0.0 && *(float *)(v19 + 1768) > 0.0;
  }
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::findCompensator@<X0>(uint64_t result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  v3 = *(_OWORD *)(result + 72);
  *(_OWORD *)a3 = *(_OWORD *)(result + 56);
  *(_OWORD *)(a3 + 16) = v3;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 88);
  v4 = *(_QWORD *)(result + 104);
  *(_QWORD *)(a3 + 112) = 3;
  *(_QWORD *)(a3 + 48) = v4;
  *(_QWORD *)(a3 + 56) = 0x3FF0000000000000;
  v6 = *(double *)(a3 + 8);
  v5 = *(double *)(a3 + 16);
  v7 = v5 / a2[276];
  if (a2[274] * a2[274] >= v7)
    v7 = a2[274] * a2[274];
  v8 = a2[278];
  v9 = v8 == 1.0;
  v10 = 1.0 / v8 * v7;
  if (!v9)
    v7 = v10;
  *(double *)(a3 + 72) = v7;
  v11 = (v7 - v5) * (v7 - v5) / v5;
  v12 = v7 / (a2[275] * a2[275]);
  v13 = fmax(v6 * v6 / (a2[277] * a2[277]) - v11, 0.0);
  if (v13 >= v12)
    v13 = v12;
  v14 = sqrt(v13);
  v15 = a2[279];
  if (v15 != 1.0)
    v14 = sqrt(v11 * (1.0 - v15 * v15) + v14 * v14) / v15;
  *(double *)(a3 + 64) = v14;
  *(_QWORD *)(a3 + 120) = 3;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::getZDomainAcousticResonanceControl(DspLib::LoudspeakerManagerV2::ModelManager *this, double a2, uint64_t a3)
{
  uint64_t v5;
  float *v7;
  double v8;
  float v9;
  float v10;
  float v11;
  double v12;
  double v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  double __dst[305];
  double v20;
  int64x2_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  double v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int64x2_t v29;
  double v30[7];
  uint64_t v31[9];

  v5 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v5 + 2440 * a3 + 2188))
  {
    v7 = (float *)(v5 + 2440 * a3);
    v8 = v7[480];
    v9 = v7[493];
    v10 = v7[494];
    v11 = v7[496];
    v12 = v7[497];
    v26 = 0u;
    v22 = 0u;
    v23 = 0u;
    v27 = 0u;
    v28 = 0;
    v21 = vdupq_n_s64(0x3DA5FD7FE1796495uLL);
    v13 = v11;
    v20 = v13 / (v8 * v12);
    *(double *)&v26 = v10;
    v25 = (v13 + v8 * v9) / v8;
    v24 = 0x3FF0000000000000;
    v29 = vdupq_n_s64(3uLL);
    memcpy(__dst, v7, sizeof(__dst));
    DspLib::LoudspeakerManagerV2::findCompensator((uint64_t)&v20, __dst, (uint64_t)v30);
    DspLib::sPolynomialToBiquadCoefficients(v30, a2, v31[7], (DspLib *)v31, (const double *)v31[8], (uint64_t *)this + 17, 0);
  }
  else
  {
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)this + 136, 1uLL);
    v14 = *((_QWORD *)this + 17);
    *(_OWORD *)v14 = DspLib::Biquad::kBypassSection;
    *(_DWORD *)(v14 + 16) = 0;
  }
  v15 = (__int128 *)*((_QWORD *)this + 17);
  v16 = *((_QWORD *)this + 20) + 20 * a3;
  v17 = *v15;
  *(_DWORD *)(v16 + 16) = *((_DWORD *)v15 + 4);
  *(_OWORD *)v16 = v17;
  return *((_QWORD *)this + 17);
}

int64x2_t DspLib::LoudspeakerManagerV2::accelerationPolynomialSingleResonator@<Q0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  float v3;
  float v4;
  float v5;
  double v6;
  double v7;
  int64x2_t result;

  v2 = a1[1];
  v3 = a1[14];
  v4 = a1[15];
  v5 = a1[17];
  v6 = a1[18];
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_QWORD *)(a2 + 104) = 0;
  *(int64x2_t *)(a2 + 8) = vdupq_n_s64(0x3DA5FD7FE1796495uLL);
  v7 = v5;
  *(double *)a2 = v7 / (v2 * v6);
  *(double *)(a2 + 64) = (v7 + v2 * v3) / v2;
  *(double *)(a2 + 72) = v4;
  *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
  result = vdupq_n_s64(3uLL);
  *(int64x2_t *)(a2 + 112) = result;
  return result;
}

void std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  DspLib::LoudspeakerManagerV2::ModelCollection *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  DspLib::LoudspeakerManagerV2::ModelCollection *v13;
  uint64_t v14;
  DspLib::LoudspeakerManagerV2::ModelCollection *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  DspLib::LoudspeakerManagerV2::ModelCollection *v19;
  char *v20;
  char *v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(DspLib::LoudspeakerManagerV2::ModelCollection **)(v4 - 8);
  if (0xFF2920BC035B7D1 * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)v7 + 2440 * a2);
      v14 = 2440 * a2;
      do
      {
        DspLib::LoudspeakerManagerV2::ModelCollection::ModelCollection(v7);
        v7 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)v7 + 2440);
        v14 -= 2440;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xFF2920BC035B7D1 * ((v7 - (DspLib::LoudspeakerManagerV2::ModelCollection *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1ADBE87F94905ELL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xFF2920BC035B7D1 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xD6DF43FCA482FLL)
      v11 = 0x1ADBE87F94905ELL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::ModelCollection>>(v4, v11);
    else
      v12 = 0;
    v15 = (DspLib::LoudspeakerManagerV2::ModelCollection *)&v12[2440 * v8];
    v16 = &v12[2440 * v11];
    v17 = 2440 * a2;
    v18 = (char *)v15 + v17;
    v19 = v15;
    do
    {
      v19 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)DspLib::LoudspeakerManagerV2::ModelCollection::ModelCollection(v19)
                                                            + 2440);
      v17 -= 2440;
    }
    while (v17);
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v20 -= 2440;
        v15 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)v15 - 2440);
        memcpy(v15, v20, 0x988uLL);
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v18;
    a1[2] = v16;
    if (v20)
      operator delete(v20);
  }
}

void sub_1B607EAB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

DspLib::LoudspeakerManagerV2::ModelCollection *DspLib::LoudspeakerManagerV2::ModelCollection::ModelCollection(DspLib::LoudspeakerManagerV2::ModelCollection *this)
{
  uint64_t v2;
  uint64_t v8;
  char *v9;

  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this, 0);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault(v2 + 424, 1);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this + 848, 2);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this + 1272, 3);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this + 1696, 4);
  *((_BYTE *)this + 2184) = 0;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *((_BYTE *)this + 2188) = 0;
  *((_OWORD *)this + 137) = 0u;
  *((_OWORD *)this + 138) = xmmword_1B66271B0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 139) = _Q0;
  *((_WORD *)this + 1120) = 1;
  *(_QWORD *)((char *)this + 2244) = 0;
  *(_QWORD *)((char *)this + 2249) = 0;
  *(_QWORD *)((char *)this + 2260) = 0;
  *(_QWORD *)((char *)this + 2265) = 0;
  *((_BYTE *)this + 2284) = 0;
  *(_QWORD *)((char *)this + 2276) = 0;
  v8 = 2292;
  *((_BYTE *)this + 2288) = 0;
  do
  {
    v9 = (char *)this + v8;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v9[24] = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)(v9 + 28) = 0;
    v9[36] = 0;
    v8 += 44;
    v9[40] = 0;
  }
  while (v9 + 44 != (char *)this + 2424);
  *((int32x2_t *)this + 303) = vdup_n_s32(0xC2C80000);
  *((_DWORD *)this + 608) = 1065353216;
  *((_BYTE *)this + 2436) = 0;
  return this;
}

double DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  v2 = 52;
  *(_BYTE *)(a1 + 48) = 0;
  do
  {
    v3 = a1 + v2;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 28) = 0;
    *(_BYTE *)(v3 + 36) = 0;
    v2 += 44;
    *(_BYTE *)(v3 + 40) = 0;
  }
  while (v3 + 44 != a1 + 184);
  *(int32x2_t *)(a1 + 184) = vdup_n_s32(0xC2C80000);
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_BYTE *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 205) = 0;
  *(_WORD *)(a1 + 220) = 1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 229) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 245) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  v4 = 272;
  do
  {
    v5 = a1 + v4;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 28) = 0;
    *(_BYTE *)(v5 + 36) = 0;
    v4 += 44;
    *(_BYTE *)(v5 + 40) = 0;
  }
  while (v5 + 44 != a1 + 404);
  *(_DWORD *)(a1 + 404) = -1027080192;
  result = 0.00781250567;
  *(_QWORD *)(a1 + 408) = 0x3F800000C2C80000;
  *(_BYTE *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 420) = a2;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::ModelCollection>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1ADBE87F94905FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2440 * a2);
}

void std::vector<DspLib::Biquad::Section>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[20 * a2];
      do
      {
        *(_DWORD *)v7 = 1065353216;
        *(_QWORD *)(v7 + 12) = 0;
        *(_QWORD *)(v7 + 4) = 0;
        v7 += 20;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[20 * v8];
    v15 = &v14[20 * a2];
    v16 = v14;
    do
    {
      *(_DWORD *)v16 = 1065353216;
      *(_QWORD *)(v16 + 12) = 0;
      *(_QWORD *)(v16 + 4) = 0;
      v16 += 20;
    }
    while (v16 != v15);
    v17 = &v12[20 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v20;
        v14 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

uint64_t DspLib::LoudspeakerManagerV2::smoothResonatorCoefficients(uint64_t result, uint64_t a2, char a3)
{
  float32x2_t v3;

  v3 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
  *(float32x2_t *)(result + 4) = vmla_f32(*(float32x2_t *)(result + 4), v3, vsub_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)(result + 4)));
  *(float32x2_t *)(result + 16) = vmla_f32(*(float32x2_t *)(result + 16), v3, vsub_f32(*(float32x2_t *)(a2 + 16), *(float32x2_t *)(result + 16)));
  if ((a3 & 1) != 0)
  {
    *(float *)result = *(float *)result + (float)((float)(*(float *)a2 - *(float *)result) * 0.2);
    *(float *)(result + 12) = *(float *)(result + 12)
                            + (float)((float)(*(float *)(a2 + 12) - *(float *)(result + 12)) * 0.2);
  }
  else
  {
    *(_DWORD *)result = 0;
    *(_DWORD *)(result + 12) = 0;
  }
  return result;
}

uint64_t std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__push_back_slow_path<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v22[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v22[0] = v10;
  v22[1] = v11;
  v22[3] = &v10[56 * v9];
  v12 = *a2;
  *(_QWORD *)(v11 + 14) = *(_QWORD *)((char *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)v11 + 3) = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 4);
  *((_QWORD *)v11 + 4) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = &v10[56 * v4];
  *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)a2 + 6);
  *((_QWORD *)v16 + 6) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v22[2] = v11 + 56;
  std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__swap_out_circular_buffer(a1, v22);
  v20 = a1[1];
  std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1B607F054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7 - 56;
    do
    {
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v8 + 14) = *(_QWORD *)(a3 - 42);
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>,std::reverse_iterator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 40);
    result = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 24);
    v1 += 56;
  }
  return result;
}

uint64_t std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 56;
      std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2 - 16);
      result = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2 - 32);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::initialize(DspLib::LoudspeakerSystemIDV2::ModelFit *this, double a2)
{
  *((double *)this + 164) = a2;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488), a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648), a2);
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808), a2);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8), *((_QWORD *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88), *((_QWORD *)this + 368));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168), *((_QWORD *)this + 513));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248), *((_QWORD *)this + 656));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328), *((_QWORD *)this + 368));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408), *((_QWORD *)this + 513));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488), *((_QWORD *)this + 656));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568), *((_QWORD *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648), *((_QWORD *)this + 513));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736), *((_QWORD *)this + 656));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816), *((_QWORD *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896), *((_QWORD *)this + 368));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976), *((_QWORD *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056), *((_QWORD *)this + 368));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136), *((_QWORD *)this + 513));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216), *((_QWORD *)this + 656));
  *(_BYTE *)this = 1;
  DspLib::LoudspeakerSystemIDV2::ModelFit::reset(this);
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::reset(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808));
  *((_BYTE *)this + 1304) = 0;
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::uninitialize(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216), 0);
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::setParameters(uint64_t a1, uint64_t *a2, int a3, unint64_t *a4)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  DSPSplitComplex *v13;
  const float *v14;
  const float *v15;
  DSPSplitComplex *v16;
  DSPSplitComplex *v17;
  DSPSplitComplex *v18;
  float v19;
  float v20;
  BOOL v21;
  char *v22;
  DSPSplitComplex *v23;
  DSPSplitComplex *v24;
  DSPSplitComplex *v25;
  DSPSplitComplex *v26;
  DSPSplitComplex *v27;
  DSPSplitComplex *v28;
  DSPSplitComplex *v29;
  DSPSplitComplex *v30;
  int v31;

  if (*(_BYTE *)a1)
  {
    v4 = a4;
    DspLib::LoudspeakerSystemIDV2::ModelFit::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)a1, a4);
    v8 = (7 * a3 + 6);
    *(_BYTE *)(a1 + 1296) = DspLib::AlgorithmParametersInstance::operator[](a2, v8) >= 0.5;
    v9 = (7 * a3 + 7);
    *(_BYTE *)(a1 + 1297) = DspLib::AlgorithmParametersInstance::operator[](a2, v9) >= 0.5;
    v10 = (7 * a3 + 8);
    *(_BYTE *)(a1 + 1298) = DspLib::AlgorithmParametersInstance::operator[](a2, v10) >= 0.5;
    v31 = 7 * a3;
    v11 = (7 * a3 + 5);
    *(_BYTE *)(a1 + 1302) = DspLib::AlgorithmParametersInstance::operator[](a2, v11 | 0x1500000000) >= 0.5;
    *(_BYTE *)(a1 + 1299) = DspLib::AlgorithmParametersInstance::operator[](a2, v8 | 0x100000000) >= 0.5;
    *(_BYTE *)(a1 + 1300) = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x100000000) >= 0.5;
    *(_BYTE *)(a1 + 1301) = DspLib::AlgorithmParametersInstance::operator[](a2, v10 | 0x100000000) >= 0.5;
    *(_BYTE *)(a1 + 1303) = DspLib::AlgorithmParametersInstance::operator[](a2, v11 | 0x300000000) >= 0.5;
    LODWORD(v11) = *(_BYTE *)(a1 + 2224) != 0;
    v12 = (const float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v8);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 1328), v12);
    if ((_DWORD)v11 != (*(_BYTE *)(a1 + 2224) != 0))
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::resetNvm((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 1328), v4);
    v13 = (DSPSplitComplex *)(a1 + 2488);
    v14 = (const float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v9);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 2488), v14);
    v15 = (const float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v10);
    v23 = (DSPSplitComplex *)(a1 + 3648);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 3648), v15);
    v24 = (DSPSplitComplex *)(a1 + 4808);
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::setParameters(a1 + 4808, (DspLib::AlgorithmParametersInstance *)a2, a3);
    v28 = (DSPSplitComplex *)(a1 + 8);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 8), *(_QWORD *)(a1 + 1784));
    v29 = (DSPSplitComplex *)(a1 + 88);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 88), *(_QWORD *)(a1 + 2944));
    v30 = (DSPSplitComplex *)(a1 + 168);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 168), *(_QWORD *)(a1 + 4104));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 248), *(_QWORD *)(a1 + 5248));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 328), *(_QWORD *)(a1 + 2944));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 408), *(_QWORD *)(a1 + 4104));
    v16 = (DSPSplitComplex *)(a1 + 488);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 488), *(_QWORD *)(a1 + 5248));
    v17 = (DSPSplitComplex *)(a1 + 568);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 568), *(_QWORD *)(a1 + 1784));
    v18 = (DSPSplitComplex *)(a1 + 648);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 648), *(_QWORD *)(a1 + 4104));
    v27 = (DSPSplitComplex *)(a1 + 736);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 736), *(_QWORD *)(a1 + 5248));
    v25 = (DSPSplitComplex *)(a1 + 816);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 816), *(_QWORD *)(a1 + 1784));
    v26 = (DSPSplitComplex *)(a1 + 896);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 896), *(_QWORD *)(a1 + 2944));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 976), *(_QWORD *)(a1 + 1784));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1056), *(_QWORD *)(a1 + 2944));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1136), *(_QWORD *)(a1 + 4104));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1216), *(_QWORD *)(a1 + 5248));
    if (*(_BYTE *)(a1 + 1296))
    {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)(a1 + 1328), (DSPSplitComplex *)(a1 + 328), (DspLib::ComplexMatrixSpan *)(a1 + 3008), (float *)(a1 + 2312), *(unsigned __int8 *)(a1 + 2224));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)(a1 + 1328), (DSPSplitComplex *)(a1 + 408), (DspLib::ComplexMatrixSpan *)(a1 + 4168), (float *)(a1 + 2312), *(unsigned __int8 *)(a1 + 2224));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)(a1 + 1328), (DSPSplitComplex *)(a1 + 248), (DspLib::ComplexMatrixSpan *)(a1 + 5312), (float *)(a1 + 2312), *(unsigned __int8 *)(a1 + 2224));
      v16 = (DSPSplitComplex *)(a1 + 488);
      v13 = (DSPSplitComplex *)(a1 + 2488);
      v18 = (DSPSplitComplex *)(a1 + 648);
      v17 = (DSPSplitComplex *)(a1 + 568);
      v19 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(*(float *)(a1 + 1320), *(float *)(a1 + 1324), a1 + 1328, (float *)(a1 + 2312), *(unsigned __int8 *)(a1 + 2224));
    }
    else
    {
      v19 = 0.0;
      DspLib::ComplexVector::operator=(a1 + 328, 0.0);
      DspLib::ComplexVector::operator=(a1 + 408, 0.0);
      DspLib::ComplexVector::operator=(a1 + 248, 0.0);
    }
    *(float *)(a1 + 728) = v19;
    if (*(_BYTE *)(a1 + 1297))
    {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v13, v17, (DspLib::ComplexMatrixSpan *)(a1 + 1848), (float *)(a1 + 3472), *(unsigned __int8 *)(a1 + 3384));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v13, v18, (DspLib::ComplexMatrixSpan *)(a1 + 4168), (float *)(a1 + 3472), *(unsigned __int8 *)(a1 + 3384));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v13, v16, (DspLib::ComplexMatrixSpan *)(a1 + 5312), (float *)(a1 + 3472), *(unsigned __int8 *)(a1 + 3384));
    }
    else
    {
      DspLib::ComplexVector::operator=(v17, 0.0);
      DspLib::ComplexVector::operator=(v18, 0.0);
      DspLib::ComplexVector::operator=(v16, 0.0);
    }
    if (*(_BYTE *)(a1 + 1298))
    {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v23, v25, (DspLib::ComplexMatrixSpan *)(a1 + 1848), (float *)(a1 + 4632), *(unsigned __int8 *)(a1 + 4544));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v23, v26, (DspLib::ComplexMatrixSpan *)(a1 + 3008), (float *)(a1 + 4632), *(unsigned __int8 *)(a1 + 4544));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v23, v27, (DspLib::ComplexMatrixSpan *)(a1 + 5312), (float *)(a1 + 4632), *(unsigned __int8 *)(a1 + 4544));
    }
    else
    {
      DspLib::ComplexVector::operator=(v25, 0.0);
      DspLib::ComplexVector::operator=(v26, 0.0);
      DspLib::ComplexVector::operator=(v27, 0.0);
    }
    if (*(_BYTE *)(a1 + 1302))
    {
      DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v24, v28, (DspLib::ComplexMatrixSpan *)(a1 + 1848), (float *)(a1 + 5768));
      DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v24, v29, (DspLib::ComplexMatrixSpan *)(a1 + 3008), (float *)(a1 + 5768));
      DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v24, v30, (DspLib::ComplexMatrixSpan *)(a1 + 4168), (float *)(a1 + 5768));
    }
    else
    {
      DspLib::ComplexVector::operator=(v28, 0.0);
      DspLib::ComplexVector::operator=(v29, 0.0);
      DspLib::ComplexVector::operator=(v30, 0.0);
    }
    *(float *)(a1 + 1324) = DspLib::AlgorithmParametersInstance::operator[](a2, (v31 + 4)) * 6.2832;
    v20 = DspLib::AlgorithmParametersInstance::operator[](a2, 0x100000000);
    v21 = v20 >= 0.5;
    if (v20 >= 0.5 && !*(_BYTE *)(a1 + 2))
      DspLib::LoudspeakerSystemIDV2::ModelFit::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)a1);
    *(_BYTE *)(a1 + 2) = v21;
    *(_BYTE *)(a1 + 1) = 1;
  }
  else
  {
    v22 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v22, 89);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::LoudspeakerSystemIDV2::ModelFit::readFromNvm(DspLib::LoudspeakerSystemIDV2::ModelFit *this, unint64_t *a2)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), 0, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488), (unint64_t *)1, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648), (unint64_t *)2, a2);
  return DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ModelFit::writeToNvm(DspLib::LoudspeakerSystemIDV2::ModelFit *this, unsigned int a2)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), 0, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488), (unint64_t *)1, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648), (unint64_t *)2, a2);
  return DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ModelFit::process(DspLib::LoudspeakerSystemIDV2::ModelFit *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, char a6, unint64_t *a7)
{
  unsigned int v7;
  float v14;
  float v15;
  int v16;
  uint64_t result;
  char *v18;

  if (*((_BYTE *)this + 1))
  {
    v7 = a7;
    DspLib::LoudspeakerSystemIDV2::ModelFit::readFromNvm(this, a7);
    if ((a6 & 1) != 0)
    {
      switch(*((_DWORD *)this + 1))
      {
        case 1:
          if (*((_BYTE *)this + 1296) && *((_BYTE *)this + 1299))
          {
            v14 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(*((float *)this + 330), *((float *)this + 331), (uint64_t)this + 1328, (float *)this + 578, *((unsigned __int8 *)this + 2224));
            v15 = v14 + (float)((float)(*((float *)this + 182) - v14) * 0.1);
            if (v15 > 0.1)
              v15 = 0.1;
            *((float *)this + 182) = v15;
            DspLib::ComplexVector::operator=((char *)this + 976, (char *)this + 8);
            DspLib::operator+=((char *)this + 976, (char *)this + 568);
            DspLib::operator+=((char *)this + 976, (char *)this + 816);
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), a2, a3, a4, a5, (DSPSplitComplex *)this + 61);
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 83, (DSPSplitComplex *)((char *)this + 328), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3008), (float *)this + 578, *((unsigned __int8 *)this + 2224));
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 83, (DSPSplitComplex *)((char *)this + 408), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4168), (float *)this + 578, *((unsigned __int8 *)this + 2224));
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 83, (DSPSplitComplex *)((char *)this + 248), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 5312), (float *)this + 578, *((unsigned __int8 *)this + 2224));
          }
          else
          {
            *((_BYTE *)this + 1732) = 0;
          }
          v16 = 2;
          goto LABEL_30;
        case 2:
          if (*((_BYTE *)this + 1297))
          {
            if (*((_BYTE *)this + 1300) && *((_BYTE *)this + 1732))
            {
              DspLib::ComplexVector::operator=((char *)this + 1056, (char *)this + 88);
              DspLib::operator+=((char *)this + 1056, (char *)this + 328);
              DspLib::operator+=((char *)this + 1056, (char *)this + 896);
              *((_DWORD *)this + 900) = *((_DWORD *)this + 592);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488), a2, a3, a4, a5, (DSPSplitComplex *)this + 66);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)((char *)this + 2488), (DSPSplitComplex *)((char *)this + 568), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1848), (float *)this + 868, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)((char *)this + 2488), (DSPSplitComplex *)((char *)this + 648), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4168), (float *)this + 868, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)((char *)this + 2488), (DSPSplitComplex *)((char *)this + 488), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 5312), (float *)this + 868, 0);
            }
            else
            {
              *((_WORD *)this + 1446) = 0;
            }
          }
          else
          {
            *((_BYTE *)this + 2892) = 0;
          }
          v16 = 3;
          goto LABEL_30;
        case 3:
          if (*((_BYTE *)this + 1298))
          {
            if (*((_BYTE *)this + 1301))
            {
              DspLib::ComplexVector::operator=((char *)this + 1136, (char *)this + 168);
              DspLib::operator+=((char *)this + 1136, (char *)this + 408);
              DspLib::operator+=((char *)this + 1136, (char *)this + 648);
              *((_DWORD *)this + 1190) = *((_DWORD *)this + 592);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648), a2, a3, a4, a5, (DSPSplitComplex *)this + 71);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 228, (DSPSplitComplex *)this + 51, (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1848), (float *)this + 1158, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 228, (DSPSplitComplex *)this + 56, (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3008), (float *)this + 1158, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 228, (DSPSplitComplex *)this + 46, (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 5312), (float *)this + 1158, 0);
            }
            else
            {
              *((_WORD *)this + 2026) = 0;
            }
          }
          else
          {
            *((_BYTE *)this + 4052) = 0;
          }
          v16 = 4;
LABEL_30:
          *((_DWORD *)this + 1) = v16;
          break;
        case 4:
          if (*((_BYTE *)this + 1302) && *((_BYTE *)this + 1303))
          {
            DspLib::ComplexVector::operator=((char *)this + 1216, (char *)this + 248);
            DspLib::operator+=((char *)this + 1216, (char *)this + 488);
            DspLib::operator+=((char *)this + 1216, (char *)this + 736);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808), a2, a3, a4, a5, (DSPSplitComplex *)this + 76);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)((char *)this + 4808), (DSPSplitComplex *)((char *)this + 8), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1848), (float *)this + 1442);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)((char *)this + 4808), (DSPSplitComplex *)((char *)this + 88), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3008), (float *)this + 1442);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)((char *)this + 4808), (DSPSplitComplex *)((char *)this + 168), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4168), (float *)this + 1442);
          }
          else
          {
            *((_BYTE *)this + 5212) = 0;
          }
          *((_BYTE *)this + 1304) = 1;
          *((_DWORD *)this + 1) = 0;
          break;
        default:
          return DspLib::LoudspeakerSystemIDV2::ModelFit::writeToNvm(this, v7);
      }
    }
    else
    {
      *((_BYTE *)this + 1732) = 0;
      *((_BYTE *)this + 2892) = 0;
      *((_BYTE *)this + 4052) = 0;
      *((_BYTE *)this + 5212) = 0;
    }
    return DspLib::LoudspeakerSystemIDV2::ModelFit::writeToNvm(this, v7);
  }
  else
  {
    v18 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ModelFit.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v18, 226);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::updateEstimatedModel(DspLib::LoudspeakerSystemIDV2 *this, DSPSplitComplex *a2, float a3, DspLib::ComplexSpan *a4, float a5, const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *a6, uint64_t a7, const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *a8, uint64_t a9, const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *a10, uint64_t a11, const DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *a12, BOOL a13, BOOL a14)
{
  int v14;
  int v16;
  int v18;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  DspLib::ComplexMatrixSpan *v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  DSPSplitComplex *result;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  DSPSplitComplex __B;
  uint64_t v36;
  _QWORD v37[6];

  v14 = (int)a10;
  v16 = (int)a8;
  v18 = (int)a6;
  v37[5] = *MEMORY[0x1E0C80C00];
  v22 = MEMORY[0x1E0C80A78](this);
  v23 = MEMORY[0x1E0C80A78](v22);
  v37[0] = v25;
  v37[1] = (char *)&v34 - v24;
  v37[2] = 3 * v23;
  v37[3] = 3;
  v37[4] = v23;
  DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV2 *)v37, 0.0, v27, v26);
  v28 = DspLib::ComplexSpan::operator=((uint64_t)a2, a5);
  v29 = MEMORY[0x1E0C80A78](v28);
  result = (DSPSplitComplex *)MEMORY[0x1E0C80A78](v29);
  __B.realp = v32;
  __B.imagp = (float *)((char *)&v34 - v31);
  v36 = v33;
  if (v18)
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)a4, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)a4 + 246, BYTE1(a12));
    result = DspLib::operator+=(a2, &__B);
  }
  if (v16)
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)a7, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)(a7 + 984), 0);
    result = DspLib::operator+=(a2, &__B);
  }
  if (v14)
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)a9, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)(a9 + 984), 0);
    result = DspLib::operator+=(a2, &__B);
  }
  if ((_BYTE)a12)
  {
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)a11, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)(a11 + 960));
    return DspLib::operator+=(a2, &__B);
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector(DspLib::LoudspeakerSystemIDV2 *this, float a2, float a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  DSPSplitComplex __C;
  uint64_t v22;
  DSPSplitComplex __A;
  unint64_t v24;
  uint64_t v25;
  DSPComplex v26;

  v25 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 4))
  {
    v7 = MEMORY[0x1E0C80A78](this);
    MEMORY[0x1E0C80A78](v7);
    v8 = 0;
    v9 = 0;
    __A.realp = v11;
    __A.imagp = (float *)((char *)&v20 - v10);
    v24 = v12;
    do
    {
      v26.imag = (float)(a2 + (float)((float)v9 * a3)) * 6.2832;
      v26.real = 0.0;
      v13 = DspLib::ComplexSpan::setElement(&__A, v8, v26);
      v8 = ++v9;
    }
    while (v24 > v9);
    v14 = MEMORY[0x1E0C80A78](v13);
    MEMORY[0x1E0C80A78](v14);
    __C.realp = v16;
    __C.imagp = (float *)((char *)&v20 - v15);
    v22 = v17;
    DspLib::ComplexSpan::operator=(&__C, &__A);
    DspLib::ComplexMatrixSpan::setRow(this, 0, &__C);
    if (*((_QWORD *)this + 3) >= 2uLL)
    {
      v18 = 3;
      do
      {
        DspLib::operator*=(&__C, &__A);
        DspLib::ComplexMatrixSpan::setRow(this, v18 - 2, &__C);
      }
      while (*((_QWORD *)this + 3) >= (unint64_t)v18++);
    }
  }
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::status(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *v13;
  uint64_t v14;
  char *v15;
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *v16;
  __int16 v17;
  DSPSplitComplex __A;
  vDSP_Length v19;
  char v20;
  _QWORD v21[514];

  v1 = MEMORY[0x1E0C80A78](a1);
  v21[513] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)v1)
  {
    v5 = v4;
    v6 = v3;
    v7 = v2;
    v8 = v1;
    v9 = *(double *)(v1 + 1312) * 0.00048828125;
    __A.realp = (float *)v21;
    __A.imagp = (float *)&v20;
    v19 = 1025;
    v10 = v1 + 1328;
    v11 = v1 + 2488;
    v12 = v1 + 3648;
    v13 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)(v1 + 4808);
    BYTE1(v16) = *(_BYTE *)(v1 + 2224);
    LOBYTE(v16) = *(_BYTE *)(v1 + 1302);
    DspLib::LoudspeakerSystemIDV2::updateEstimatedModel((DspLib::LoudspeakerSystemIDV2 *)0x401, &__A, v9, (DspLib::ComplexSpan *)(v1 + 1328), v5, (const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)*(unsigned __int8 *)(v1 + 1296), v1 + 2488, (const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)*(unsigned __int8 *)(v1 + 1297), v1 + 3648, (const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)*(unsigned __int8 *)(v1 + 1298), v1 + 4808, v16, v17, SHIBYTE(v17));
    vDSP_zvabs(&__A, 1, (float *)(v7 + 12604), 1, v19);
    vDSP_zvphas(&__A, 1, (float *)(v7 + 16704), 1, v19);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(v10, v7, v6, 0);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(v11, v7, v6, 1);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(v12, v7, v6, 2);
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::status(v13, v7);
    *(_DWORD *)(v7 + 20804) = *(_DWORD *)(v8 + 728);
    if (v6)
    {
      v14 = 0;
      do
      {
        if ((*(_DWORD *)(v7 + 4 * v14) & 0x7FFFFFFFu) >= 0x7F800000)
          *(_DWORD *)(v7 + 4 * v14) = 0;
        ++v14;
      }
      while (v6 > v14);
    }
  }
  else
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 406);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerManagerV1::ModelManager::coldStartBiquad(uint64_t *a1, double a2, float a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  float v19;

  v19 = a3;
  v18 = 1065353216;
  DspLib::sPolynomialToBiquadCoefficients((float *)&v18, a2, 1, (DspLib *)&v19, (const float *)1, a1, 1);
  v4 = *a1;
  v5 = a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 2);
  if (v6 <= 1)
  {
    v7 = (unint64_t *)(a1 + 2);
    do
    {
      if (v5 >= *v7)
      {
        v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v7 - v4) >> 2);
        v9 = 2 * v8;
        if (2 * v8 <= v6 + 1)
          v9 = v6 + 1;
        if (v8 >= 0x666666666666666)
          v10 = 0xCCCCCCCCCCCCCCCLL;
        else
          v10 = v9;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>((uint64_t)(a1 + 2), v10);
        v13 = &v11[20 * v6];
        *(_OWORD *)v13 = DspLib::Biquad::kBypassSection;
        *((_DWORD *)v13 + 4) = 0;
        v15 = *a1;
        v14 = (char *)a1[1];
        v16 = (uint64_t)v13;
        if (v14 != (char *)*a1)
        {
          do
          {
            v17 = *(_OWORD *)(v14 - 20);
            *(_DWORD *)(v16 - 4) = *((_DWORD *)v14 - 1);
            *(_OWORD *)(v16 - 20) = v17;
            v16 -= 20;
            v14 -= 20;
          }
          while (v14 != (char *)v15);
          v14 = (char *)*a1;
        }
        v5 = (unint64_t)(v13 + 20);
        *a1 = v16;
        a1[1] = (uint64_t)(v13 + 20);
        a1[2] = (uint64_t)&v11[20 * v12];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)(v5 + 16) = 0;
        *(_OWORD *)v5 = DspLib::Biquad::kBypassSection;
        v5 += 20;
      }
      a1[1] = v5;
      v4 = *a1;
      v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 2);
    }
    while (v6 < 2);
  }
}

void DspLib::LoudspeakerManagerV1::ModelManager::initialize(void **this)
{
  std::vector<DspLib::Biquad::Section>::reserve(this + 8, 3uLL);
  DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath((DspLib::LoudspeakerManagerV1::ModelManager *)this);
  this[9] = this[8];
}

void DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath(DspLib::LoudspeakerManagerV1::ModelManager *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __int128 *v15;
  char *v16;
  __int128 v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = xmmword_1B6627240;
  v29 = 1084227584;
  v26 = xmmword_1B6627260;
  v27 = 1092616192;
  v2 = (uint64_t *)((char *)this + 64);
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
  MEMORY[0x1E0C80A78](this);
  v5 = (char *)&v26 - v4;
  v7 = (char *)&v26 + 4 * v6 - v4;
  v8 = (char *)&v26 - v4;
  do
  {
    *(_DWORD *)v8 = 1065353216;
    *(_QWORD *)(v8 + 12) = 0;
    *(_QWORD *)(v8 + 4) = 0;
    v8 += 20;
  }
  while (v8 != v7);
  v9 = *((_QWORD *)this + 8);
  v10 = *((_QWORD *)this + 9) - v9;
  if (v10)
  {
    v11 = 0;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 2);
    v13 = 1;
    do
    {
      v14 = 5 * v11;
      v15 = (__int128 *)(v9 + 4 * v14);
      v16 = &v5[4 * v14];
      v17 = *v15;
      *((_DWORD *)v16 + 4) = *((_DWORD *)v15 + 4);
      *(_OWORD *)v16 = v17;
      v11 = v13;
      v18 = v12 > v13++;
    }
    while (v18);
  }
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v2, 2uLL);
  DspLib::sPolynomialToBiquadCoefficients((float *)&v28, 6000.0, 5, (DspLib *)&v26, (const float *)5, v2, 1);
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v2, v3);
  v19 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v19)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      v22 = 5 * v20;
      v23 = &v5[4 * v22];
      v24 = v19 + 4 * v22;
      v25 = *(_OWORD *)v23;
      *(_DWORD *)(v24 + 16) = *((_DWORD *)v23 + 4);
      *(_OWORD *)v24 = v25;
      v20 = v21;
      v19 = *((_QWORD *)this + 8);
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 9) - v19) >> 2) > v21++;
    }
    while (v18);
  }
  *((_DWORD *)this + 14) = 0;
}

uint64_t DspLib::LoudspeakerManagerV1::ModelManager::uninitialize(uint64_t this)
{
  *(_QWORD *)(this + 72) = *(_QWORD *)(this + 64);
  return this;
}

void DspLib::LoudspeakerManagerV1::ModelManager::getAdmittanceModel(DspLib::LoudspeakerManagerV1::ModelManager *this@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  float v27;
  int8x8_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  _OWORD v40[2];
  const float *v41;
  __int128 v42;
  float32x4_t v43[2];
  uint64_t v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 8);
  v11 = (uint64_t *)((char *)this + 64);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 9) - v10) >> 2);
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = v12;
  *(float *)(a4 + 16) = 1.0 / *((float *)this + 24);
  ++*((_DWORD *)this + 14);
  if (*((_BYTE *)this + 90))
  {
    DspLib::LoudspeakerManagerV1::ModelManager::coldStartBiquad((uint64_t *)this + 8, a5, *((float *)this + 23));
    v13 = *((_QWORD *)this + 8);
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 9) - v13) >> 2);
    *(_QWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v14;
    *(float *)(a4 + 16) = 1.0 / *((float *)this + 23);
    *((_BYTE *)this + 90) = 0;
  }
  if (*((_BYTE *)this + 88))
  {
    v15 = *a2;
    v16 = *((float *)a2 + 1);
    v17 = a2[16];
    v48[0] = *(_QWORD *)(a2 + 17);
    *(_QWORD *)((char *)v48 + 7) = *((_QWORD *)a2 + 3);
    v18 = a2[40];
    v47[0] = *(_QWORD *)(a2 + 41);
    *(_QWORD *)((char *)v47 + 7) = *((_QWORD *)a2 + 6);
    v19 = a2[64];
    if ((a3 & 1) != 0 || !*((_BYTE *)this + 89) || vabds_f32(v16, *((float *)this + 24)) > 0.01)
    {
      *((float *)this + 24) = v16;
      memset(v43, 0, sizeof(v43));
      v42 = 0u;
      v46[0] = v48[0];
      *(_QWORD *)((char *)v46 + 7) = *(_QWORD *)((char *)v48 + 7);
      v44 = 0;
      v45[0] = v47[0];
      *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)v47 + 7);
      v20 = *((_DWORD *)this + 23);
      if ((v21 & 1) == 0)
      {
        v32 = v16;
        v37 = v19;
        v38 = v15;
        v33 = v17;
        v34 = v18;
        v36 = *((_DWORD *)this + 23);
        v20 = v36;
        v18 = v34;
        v19 = v37;
        v15 = v38;
        v17 = v33;
        v16 = v32;
        if (v35)
        {
          DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re = v36;
          v20 = v36;
          v18 = v34;
          v19 = v37;
          v15 = v38;
          v17 = v33;
          v16 = v32;
        }
      }
      if (v15)
      {
        DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re = v20;
        LODWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es) = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(0.0000215, 0.000016, 1.9);
        HIDWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es) = v22;
        dword_1EF134D00 = v23;
        LODWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms) = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(5.006, 0.0282);
        HIDWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms) = v24;
        dword_1EF134D0C = v25;
      }
      else if (v17)
      {
        DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re = LODWORD(v16);
        if (v18)
        {
          DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es = *(_QWORD *)((char *)v46 + 3);
          dword_1EF134D00 = *(_DWORD *)((char *)&v46[1] + 3);
        }
        if (v19)
        {
          DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms = *(_QWORD *)((char *)v45 + 3);
          dword_1EF134D0C = *(_DWORD *)((char *)&v45[1] + 3);
        }
      }
      v26 = 0;
      v27 = *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re;
      LODWORD(v42) = HIDWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es);
      *((float *)&v42 + 1) = *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es
                           + (float)(*(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re
                                   + (float)(*(float *)&dword_1EF134D0C
                                           * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es
                                             + 1)));
      *((float *)&v42 + 2) = *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                           + (float)((float)((float)((float)(v27 * *(float *)&dword_1EF134D0C)
                                                   + (float)(v27 * *(float *)&dword_1EF134D00))
                                           + (float)(*((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                                                     + 1)
                                                   * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es
                                                     + 1)))
                                   + (float)(*(float *)&dword_1EF134D0C
                                           * *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es));
      *((float *)&v42 + 3) = (float)((float)((float)(v27
                                                   * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                                                     + 1))
                                           + (float)((float)(v27 * *(float *)&dword_1EF134D00)
                                                   * *(float *)&dword_1EF134D0C))
                                   + (float)(*(float *)&dword_1EF134D00
                                           * *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms))
                           + (float)(*((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                                     + 1)
                                   * *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es);
      v43[0].f32[0] = (float)(*(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re
                            * *(float *)&dword_1EF134D00)
                    * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                      + 1);
      v43[0].i32[1] = 1065353216;
      v43[0].f32[2] = *(float *)&dword_1EF134D00 + *(float *)&dword_1EF134D0C;
      v43[0].f32[3] = *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                      + 1)
                    + (float)(*(float *)&dword_1EF134D00 * *(float *)&dword_1EF134D0C);
      v43[1].i64[0] = COERCE_UNSIGNED_INT(*(float *)&dword_1EF134D00* *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms+ 1));
      do
        ++v26;
      while ((v26 - 1) < 4);
      v28 = (int8x8_t)vdup_n_s16(0);
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)veor_s8(vorr_s8((int8x8_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)((char *)v43 + 4)), (int8x16_t)vcgezq_f32(*(float32x4_t *)((char *)v43 + 4))))), v28), v28), 0xFuLL))) & 1) == 0)
      {
        *(_OWORD *)((char *)this + 20) = v42;
        *((_DWORD *)this + 9) = v43[0].i32[0];
        *(float32x4_t *)this = *(float32x4_t *)((char *)v43 + 4);
        *((_DWORD *)this + 4) = v43[1].i32[1];
        *(_OWORD *)((char *)this + 40) = xmmword_1B6627100;
      }
      v29 = *((_OWORD *)this + 2);
      v40[0] = *((_OWORD *)this + 1);
      v40[1] = v29;
      v39 = *(_OWORD *)this;
      v41 = (const float *)*((_QWORD *)this + 6);
      DspLib::sPolynomialToBiquadCoefficients((float *)&v39, a5, *((uint64_t *)&v29 + 1), (DspLib *)((char *)v40 + 4), v41, v11, 1);
      *((_DWORD *)this + 14) = 0;
      v30 = *((_QWORD *)this + 8);
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 9) - v30) >> 2);
      *(_QWORD *)a4 = v30;
      *(_QWORD *)(a4 + 8) = v31;
      *(float *)(a4 + 16) = 1.0 / *((float *)this + 24);
    }
    *((_BYTE *)this + 89) = 1;
  }
  else
  {
    *((_BYTE *)this + 89) = 0;
  }
  if (*((_DWORD *)this + 14) >= 0x1F5u)
    DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath(this);
}

double DspLib::LoudspeakerManagerV2::Algorithm::Algorithm(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  _QWORD *v1;
  double result;

  v1 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(this, (__int128 *)&DspLib::LoudspeakerManagerV2::Parameters::kSystemDefinition);
  *v1 = &off_1E69BFD08;
  *((_WORD *)v1 + 148) = 256;
  *((_BYTE *)v1 + 298) = 0;
  *(_QWORD *)((char *)v1 + 300) = 0;
  *(_QWORD *)((char *)v1 + 305) = 0;
  v1[40] = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 41) = 0u;
  *((_BYTE *)v1 + 344) = 0;
  *(_QWORD *)((char *)v1 + 348) = 0;
  *((_BYTE *)v1 + 356) = 0;
  *(_OWORD *)(v1 + 45) = 0u;
  *(_OWORD *)(v1 + 47) = 0u;
  *(_OWORD *)(v1 + 49) = 0u;
  *(_OWORD *)(v1 + 51) = 0u;
  *(_OWORD *)(v1 + 53) = 0u;
  *(_OWORD *)(v1 + 55) = 0u;
  *(_OWORD *)(v1 + 57) = 0u;
  *(_OWORD *)(v1 + 59) = 0u;
  *(_OWORD *)(v1 + 61) = 0u;
  *((_DWORD *)v1 + 126) = 0;
  *((_BYTE *)v1 + 508) = 1;
  v1[66] = 0;
  *((_OWORD *)v1 + 32) = 0u;
  *((_BYTE *)v1 + 536) = 0;
  v1[70] = 0;
  *((_OWORD *)v1 + 34) = 0u;
  *((_DWORD *)v1 + 142) = 1;
  v1[72] = 0;
  *((_BYTE *)v1 + 584) = 0;
  *(_OWORD *)((char *)v1 + 588) = 0u;
  *(_OWORD *)((char *)v1 + 604) = 0u;
  *(_OWORD *)((char *)v1 + 620) = 0u;
  *(_OWORD *)((char *)v1 + 636) = 0u;
  *(_OWORD *)((char *)v1 + 652) = 0u;
  *(_OWORD *)((char *)v1 + 668) = 0u;
  *(_OWORD *)((char *)v1 + 684) = 0u;
  *(_OWORD *)((char *)v1 + 700) = 0u;
  *(_OWORD *)((char *)v1 + 716) = 0u;
  *(_OWORD *)((char *)v1 + 732) = 0u;
  *(_OWORD *)((char *)v1 + 748) = 0u;
  *(_OWORD *)((char *)v1 + 764) = 0u;
  *(_OWORD *)((char *)v1 + 780) = 0u;
  *((_BYTE *)v1 + 796) = 0;
  *((_BYTE *)v1 + 800) = 0;
  *(_OWORD *)(v1 + 101) = 0u;
  *(_OWORD *)(v1 + 103) = 0u;
  *(_OWORD *)(v1 + 105) = 0u;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::initialize(DspLib::LoudspeakerManagerV2::Algorithm *this, uint64_t a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  DspLib::PilotToneV2::PilotTone *v9;
  DspLib::PilotToneV2::PilotTone *v10;
  void *__p;
  _BYTE *v13;

  v5 = DspLib::AlgorithmBaseNewParameters::initialize((uint64_t **)this, a2, a3);
  if ((_DWORD)v5)
  {
    DspLib::LoudspeakerManagerV2::ModelManager::initialize((void **)this + 37, *((unsigned int *)this + 3));
    std::vector<float>::resize((uint64_t)this + 512, *((unsigned int *)this + 3));
    std::vector<DspLib::Biquad::Section>::vector(&__p, 3uLL);
    if (*((_DWORD *)this + 3))
    {
      v6 = 0;
      do
      {
        v7 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v7, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)__p) >> 2), 1, v6++);
        v8 = *((unsigned int *)this + 3);
      }
      while (v6 < v8);
    }
    else
    {
      v8 = 0;
    }
    std::vector<DspLib::PilotToneV2::PilotTone>::resize((uint64_t *)this + 60, v8);
    v9 = (DspLib::PilotToneV2::PilotTone *)*((_QWORD *)this + 60);
    v10 = (DspLib::PilotToneV2::PilotTone *)*((_QWORD *)this + 61);
    while (v9 != v10)
    {
      DspLib::PilotToneV2::PilotTone::initialize(v9, *((double *)this + 3));
      v9 = (DspLib::PilotToneV2::PilotTone *)((char *)v9 + 280);
    }
    DspLib::LoudspeakerHealth::initialize((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 576), a3, *((_DWORD *)this + 3));
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerManagerV2::Algorithm *, char *, _QWORD))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0);
    (*(void (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(_QWORD *)this + 152))(this);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
  }
  return v5;
}

void sub_1B6080FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<DspLib::PilotToneV2::PilotTone>::resize(uint64_t *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1[1];
  v4 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::PilotToneV2::PilotTone>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 280 * a2;
    while (v3 != (_QWORD *)v7)
    {
      v3 -= 35;
      std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(v3);
    }
    a1[1] = v7;
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::uninitialize(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *i;

  v2 = (uint64_t *)*((_QWORD *)this + 30);
  v3 = (uint64_t *)*((_QWORD *)this + 31);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  DspLib::LoudspeakerManagerV2::ModelManager::uninitialize((_QWORD *)this + 37);
  v5 = (_BYTE *)*((_QWORD *)this + 60);
  v6 = (_BYTE *)*((_QWORD *)this + 61);
  if (v5 != v6)
  {
    do
    {
      DspLib::PilotToneV2::PilotTone::uninitialize(v5);
      v5 += 280;
    }
    while (v5 != v6);
    v5 = (_BYTE *)*((_QWORD *)this + 60);
    for (i = (_QWORD *)*((_QWORD *)this + 61);
          i != (_QWORD *)v5;
          std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(i))
    {
      i -= 35;
    }
  }
  *((_QWORD *)this + 61) = v5;
  DspLib::LoudspeakerHealth::uninitialize((uint64_t)this + 576);
  *((_BYTE *)this + 8) = 0;
  DspLib::LoudspeakerManagerV2::Algorithm::uninitializeLogging(this);
}

void DspLib::LoudspeakerManagerV2::Algorithm::uninitializeLogging(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  DspLib::Logger *v2;
  DspLib::Logger *v3;
  DspLib::Logger *v4;

  v2 = (DspLib::Logger *)*((_QWORD *)this + 101);
  if (v2)
  {
    DspLib::Logger::FlushLog(v2);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 101);
  }
  v3 = (DspLib::Logger *)*((_QWORD *)this + 103);
  if (v3)
  {
    DspLib::Logger::FlushLog(v3);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 103);
  }
  v4 = (DspLib::Logger *)*((_QWORD *)this + 105);
  if (v4)
  {
    DspLib::Logger::FlushLog(v4);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 105);
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::setParameters(DspLib::LoudspeakerManagerV2::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  double v9;
  uint64_t ZDomainAcousticResonanceControl;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  float *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((_BYTE *)this + 8))
  {
    *((_QWORD *)this + 68) = vcvtad_u64_f64(*((double *)this + 3)* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x200000000)/ (double)(4 * (unint64_t)*((unsigned int *)this + 3)));
    v4 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000000);
    *((_BYTE *)this + 508) = v4 != 0.0;
    if (v4 == 0.0)
    {
      v5 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
      DspLib::LoudspeakerController::Algorithm::resetClosedLoopTemperature(v5);
    }
    DspLib::LoudspeakerManagerV2::ModelManager::setParameters((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296), (DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 264));
    if (*((_QWORD *)this + 46) != *((_QWORD *)this + 45))
    {
      v6 = 0;
      v7 = 1;
      do
      {
        if (DspLib::LoudspeakerManagerV2::ModelManager::appliedAccelerationModelDidChange((uint64_t)this + 296, v6, 1))
        {
          v8 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
          v9 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
          ZDomainAcousticResonanceControl = DspLib::LoudspeakerManagerV2::ModelManager::getZDomainAcousticResonanceControl((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296), v9, v6);
          v12 = v11;
          v13 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
          DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v13, ZDomainAcousticResonanceControl, v12, 6, v6);
        }
        v6 = v7;
      }
      while (0xFF2920BC035B7D1 * ((uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 3) > (unint64_t)v7++);
    }
    v15 = *((_QWORD *)this + 60);
    v16 = *((_QWORD *)this + 61);
    if (v15 != v16)
    {
      v17 = 0;
      do
      {
        v18 = (int)DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, (v17 << 32) | 0x15);
        if (v18 == 1)
          v19 = 22;
        else
          v19 = 1;
        if (v18 == 2)
          v20 = 23;
        else
          v20 = v19;
        v21 = (float *)DspLib::AlgorithmParametersInstance::group((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 264), v20);
        DspLib::PilotToneV2::PilotTone::setParameters(v15, v21);
        v17 = (v17 + 1);
        v15 += 280;
      }
      while (v15 != v16);
    }
    if (*((_DWORD *)this + 3))
    {
      v22 = 0;
      v23 = 2936;
      v24 = 184;
      do
      {
        v25 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        v26 = *((_QWORD *)this + 60);
        v27 = *(float *)(v26 + v24);
        if (v27 <= 1.0)
          v28 = *(float *)(v26 + v24);
        else
          v28 = 1.0;
        if (v27 >= 0.0)
          v29 = v28;
        else
          v29 = 0.0;
        *(float *)(*(_QWORD *)(v25 + 544) + v23 - 2900) = v29;
        v30 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        DspLib::LoudspeakerHealth::setAmplifierVoltsPerFullScale((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 576), v22++, *(float *)(*(_QWORD *)(v30 + 544) + v23));
        v23 += 4144;
        v24 += 280;
      }
      while (v22 < *((unsigned int *)this + 3));
    }
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::reset(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  DspLib::PilotToneV2::PilotTone *v5;
  DspLib::PilotToneV2::PilotTone *v6;

  v2 = (uint64_t *)*((_QWORD *)this + 30);
  v3 = (uint64_t *)*((_QWORD *)this + 31);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4);
  }
  v5 = (DspLib::PilotToneV2::PilotTone *)*((_QWORD *)this + 60);
  v6 = (DspLib::PilotToneV2::PilotTone *)*((_QWORD *)this + 61);
  while (v5 != v6)
  {
    DspLib::PilotToneV2::PilotTone::reset(v5);
    v5 = (DspLib::PilotToneV2::PilotTone *)((char *)v5 + 280);
  }
  *((_BYTE *)this + 536) = 0;
  DspLib::fill(*((float **)this + 64), (uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 2, NAN);
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 142) = 1;
  DspLib::LoudspeakerHealth::reset((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 576));
  DspLib::LoudspeakerManagerV2::Algorithm::resetLogging(this);
}

void DspLib::LoudspeakerManagerV2::Algorithm::resetLogging(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  DspLib::Logger *v2;
  DspLib::Logger *v3;
  DspLib::Logger *v4;

  v2 = (DspLib::Logger *)*((_QWORD *)this + 101);
  if (v2)
    DspLib::Logger::FlushLog(v2);
  v3 = (DspLib::Logger *)*((_QWORD *)this + 103);
  if (v3)
    DspLib::Logger::FlushLog(v3);
  v4 = (DspLib::Logger *)*((_QWORD *)this + 105);
  if (v4)
    DspLib::Logger::FlushLog(v4);
}

void DspLib::LoudspeakerManagerV2::Algorithm::configureLogging(DspLib::LoudspeakerManagerV2::Algorithm *this, uint64_t a2)
{
  DspLib::Logger **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  DspLib::Logger **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  DspLib::Logger **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  DspLib::Logger *v18;
  DspLib::LoudspeakerController::Algorithm *v20;
  __int128 v21;

  if (a2 == 1)
  {
    *((_BYTE *)this + 800) = 1;
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[16],void>("LsmFrameLog.bin", &v21);
    v3 = (DspLib::Logger **)((char *)this + 808);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 808, &v21);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[17],void>("LsmSignalLog.bin", &v21);
    v7 = (DspLib::Logger **)((char *)this + 824);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 824, &v21);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[24],void>("LsmConfigurationLog.bin", &v21);
    v11 = (DspLib::Logger **)((char *)this + 840);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 840, &v21);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (*v3)
      DspLib::Logger::logData(*v3, (float)*((unsigned int *)this + 3));
    if (*v7)
      DspLib::Logger::logData(*v7, (float)*((unsigned int *)this + 3));
    v15 = *((_QWORD *)this + 45);
    if (*((_QWORD *)this + 46) != v15)
    {
      v16 = 0;
      v17 = 1;
      do
      {
        if (*v11)
        {
          DspLib::Logger::logData(*v11, *(float *)(v15 + 2440 * v16 + 2176));
          v18 = (DspLib::Logger *)*((_QWORD *)this + 105);
          v15 = *((_QWORD *)this + 45);
          if (v18)
          {
            DspLib::Logger::logData(v18, *(float *)(v15 + 2440 * v16 + 2180));
            v15 = *((_QWORD *)this + 45);
          }
        }
        v16 = v17;
      }
      while (0xFF2920BC035B7D1 * ((*((_QWORD *)this + 46) - v15) >> 3) > (unint64_t)v17++);
    }
  }
  else
  {
    *((_BYTE *)this + 800) = 0;
    DspLib::LoudspeakerManagerV2::Algorithm::uninitializeLogging(this);
  }
  v20 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  DspLib::LoudspeakerController::Algorithm::configureLogging(v20, *((unsigned __int8 *)this + 800));
}

void DspLib::LoudspeakerManagerV2::Algorithm::processLogging(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  DspLib::Logger *v6;
  DspLib::Logger *v7;
  unint64_t v8;
  uint64_t v9;
  DspLib::Logger *v10;
  uint64_t v11;
  float v12;
  float v13;
  DspLib::Logger *v14;
  DspLib::Logger *v15;

  v6 = *(DspLib::Logger **)(a1 + 808);
  if (v6)
    DspLib::Logger::logData(v6, (float)(unint64_t)a2[2]);
  v7 = *(DspLib::Logger **)(a1 + 824);
  if (v7)
    DspLib::Logger::logData(v7, (float)(unint64_t)a2[2]);
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    v9 = 2120;
    do
    {
      v10 = *(DspLib::Logger **)(a1 + 808);
      if (v10)
      {
        v11 = *(_QWORD *)(a1 + 360);
        v12 = *(float *)(v11 + v9);
        if (v12 == 0.0)
          v13 = 1000.0;
        else
          v13 = *(float *)(v11 + v9 + 8)
              + (float)((float)(1.0 / v12)
                      * (float)((float)(*(float *)(v11 + v9 + 124) / *(float *)(v11 + v9 + 4)) + -1.0));
        DspLib::Logger::logData(v10, v13);
      }
      v14 = *(DspLib::Logger **)(a1 + 824);
      if (v14)
        DspLib::Logger::logData(v14, *(float **)(*a2 + 8 * v8), a2[2]);
      if (*(_BYTE *)(a3 + 24))
      {
        v15 = *(DspLib::Logger **)(a1 + 824);
        if (v15)
          DspLib::Logger::logData(v15, *(float **)(*(_QWORD *)a3 + 8 * v8), *(_QWORD *)(a3 + 16));
      }
      ++v8;
      v9 += 2440;
    }
    while (v8 < *(unsigned int *)(a1 + 12));
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::updateAcousticResonanceControlIfNeeded(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  DspLib::LoudspeakerManagerV2::ModelManager *v2;
  uint64_t v3;
  double v4;
  uint64_t ZDomainAcousticResonanceControl;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296);
  if (DspLib::LoudspeakerManagerV2::ModelManager::appliedAccelerationModelDidChange((uint64_t)this + 296, *((_QWORD *)this + 70), 0))
  {
    v3 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    v4 = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    ZDomainAcousticResonanceControl = DspLib::LoudspeakerManagerV2::ModelManager::getZDomainAcousticResonanceControl(v2, v4, *((_QWORD *)this + 70));
    v7 = v6;
    v8 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v8, ZDomainAcousticResonanceControl, v7, 6, *((_QWORD *)this + 70));
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::LoudspeakerManagerV2::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, uint64_t a4)
{
  uint64_t cycle_count;
  double v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  DspLib::LoudspeakerController::Algorithm *v23;
  DspLib::LoudspeakerController::Algorithm *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t i;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  unint64_t v39;
  float **v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  DspLibBuffer *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  DspLibBuffer *v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  uint64_t *v63;
  _BYTE v64[32];
  _QWORD v65[3];
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];
  uint64_t v69[3];

  v69[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  v69[0] = (uint64_t)this;
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  if (*((_BYTE *)this + 297))
  {
    LODWORD(v10) = *((_DWORD *)this + 3);
    if (!*((_BYTE *)this + 536))
    {
      if ((_DWORD)v10)
      {
        v11 = 0;
        do
        {
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(v69, v11, 1, 1, v9);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(v69, v11, 2, 1, v12);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(v69, v11, 3, 1, v13);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(v69, v11, 4, 1, v14);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(v69, v11++, 5, 1, v15);
          v10 = *((unsigned int *)this + 3);
        }
        while (v11 < v10);
      }
      *((_BYTE *)this + 536) = 1;
    }
    if ((_DWORD)v10)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        DspLib::LoudspeakerController::Algorithm::setAmbientTemperature(v18, *(float *)(*((_QWORD *)this + 45) + v16 + 2148), v17);
        v19 = *((_QWORD *)this + 45);
        if (*((_BYTE *)this + 508) && *(_BYTE *)(v19 + v16 + 2184) && *(_BYTE *)(v19 + v16 + 2256))
        {
          v20 = (float *)(v19 + v16);
          v21 = v20[530];
          if (v21 == 0.0)
            v22 = 1000.0;
          else
            v22 = v20[532] + (float)((float)(1.0 / v21) * (float)((float)(v20[561] / v20[531]) + -1.0));
          LODWORD(v9) = *(_DWORD *)(*((_QWORD *)this + 64) + 4 * v17);
          if (v22 != *(float *)&v9)
          {
            v24 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
            DspLib::LoudspeakerController::Algorithm::setClosedLoopTemperature(v24, v22, v17);
            *(float *)(*((_QWORD *)this + 64) + 4 * v17) = v22;
          }
        }
        else if (*(_BYTE *)(v19 + v16 + 2240))
        {
          v23 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
          DspLib::LoudspeakerController::Algorithm::decayClosedLoopTemperatureOffset(v23, v17, cycle_count);
        }
        ++v17;
        v16 += 2440;
      }
      while (v17 < *((unsigned int *)this + 3));
    }
    v25 = *((_QWORD *)this + 69) + cycle_count;
    *((_QWORD *)this + 69) = v25;
    if (v25 >= *((_QWORD *)this + 68))
    {
      DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(v69, *((_QWORD *)this + 70), *((_QWORD *)this + 71), 0, v9);
      *((_QWORD *)this + 69) = 0;
      v26 = *((_QWORD *)this + 70);
      v27 = *((_QWORD *)this + 71);
      if (v26 >= (unint64_t)*((unsigned int *)this + 3) - 1)
      {
        v28 = 0;
        if ((v27 - 1) > 2)
          LODWORD(v27) = 1;
        else
          LODWORD(v27) = dword_1B6627374[(int)v27 - 1];
      }
      else
      {
        v28 = v26 + 1;
      }
      *((_QWORD *)this + 70) = v28;
      *((_DWORD *)this + 142) = v27;
      for (i = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
            *(_QWORD *)(i + 472);
            i = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1))
      {
        if ((v27 & 0xFFFFFFFE) != 2)
          break;
        v30 = *((_QWORD *)this + 70);
        if (*(_DWORD *)(*(_QWORD *)(i + 480) + 16 * v30) != 2)
          break;
        LODWORD(v27) = *((_DWORD *)this + 142);
        if (v30 >= (unint64_t)*((unsigned int *)this + 3) - 1)
        {
          v31 = 0;
          if ((v27 - 1) > 2)
            LODWORD(v27) = 1;
          else
            v27 = qword_1B6627380[(int)v27 - 1];
        }
        else
        {
          v31 = v30 + 1;
        }
        *((_QWORD *)this + 70) = v31;
        *((_DWORD *)this + 142) = v27;
      }
      DspLib::LoudspeakerManagerV2::Algorithm::updateAcousticResonanceControlIfNeeded(this);
    }
  }
  v32 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  v33 = *(void (**)(uint64_t, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t))(*(_QWORD *)v32 + 160);
  v59 = a2;
  v61 = a4;
  v33(v32, a2, a3, a4, 1);
  v34 = DspLibBuffer::numChannels(a3);
  v63 = &v58;
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v58 - v36;
  if (v35 >= 0x200)
    v38 = 512;
  else
    v38 = v35;
  bzero((char *)&v58 - v36, v38);
  if (DspLibBuffer::numChannels(a3))
  {
    v39 = 0;
    do
    {
      *(_QWORD *)&v37[8 * v39] = DspLibBuffer::channel(a3, v39);
      ++v39;
    }
    while (v39 < DspLibBuffer::numChannels(a3));
  }
  v62 = cycle_count;
  v60 = DspLibBuffer::numChannels(a3);
  v40 = (float **)vp::utility::CPU_Profiler::get_cycle_count(a3);
  if (*((_DWORD *)this + 3))
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 2240;
    do
    {
      v45 = *((_QWORD *)this + 60) + v42;
      v46 = *(float **)&v37[8 * v43];
      v47 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
      DspLib::PilotToneV2::PilotTone::process(v45, v46, v40, *(_QWORD *)(*(_QWORD *)(v47 + 544) + v41), (uint64_t)(*(_QWORD *)(*(_QWORD *)(v47 + 544) + v41 + 8) - *(_QWORD *)(*(_QWORD *)(v47 + 544) + v41)) >> 2);
      DspLib::LoudspeakerHealth::process((uint64_t)this + 576, (uint64_t)v46, (vDSP_Length)v40, *((_QWORD *)this + 45) + v44, v43++);
      v42 += 280;
      v44 += 2440;
      v41 += 4144;
    }
    while (v43 < *((unsigned int *)this + 3));
  }
  if (*((_BYTE *)this + 800))
  {
    v48 = v60;
    if (v61 == 2)
    {
      v49 = (DspLibBuffer *)((char *)v59 + 96);
      v50 = DspLibBuffer::numChannels((DspLibBuffer *)((char *)v59 + 96));
      MEMORY[0x1E0C80A78](v50);
      v53 = (char *)&v58 - v52;
      if (v51 >= 0x200)
        v54 = 512;
      else
        v54 = v51;
      bzero((char *)&v58 - v52, v54);
      if (DspLibBuffer::numChannels(v49))
      {
        v55 = 0;
        do
        {
          *(_QWORD *)&v53[8 * v55] = DspLibBuffer::channel(v49, v55);
          ++v55;
        }
        while (v55 < DspLibBuffer::numChannels(v49));
      }
      v56 = DspLibBuffer::numChannels(v49);
      v57 = vp::utility::CPU_Profiler::get_cycle_count(v49);
      v68[0] = v37;
      v68[1] = v48;
      v68[2] = v40;
      v66[0] = v53;
      v66[1] = v56;
      v66[2] = v57;
      v67 = 1;
      DspLib::LoudspeakerManagerV2::Algorithm::processLogging((uint64_t)this, v68, (uint64_t)v66);
    }
    else
    {
      v65[0] = v37;
      v65[1] = v60;
      v65[2] = v40;
      v64[0] = 0;
      v64[24] = 0;
      DspLib::LoudspeakerManagerV2::Algorithm::processLogging((uint64_t)this, v65, (uint64_t)v64);
    }
  }
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::stop((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 72), v62, *((double *)this + 3));
}

void DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(uint64_t *a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ZDomainLoudspeakerModel;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  int v20;
  __n128 v21;
  int v22;
  __n128 v23;
  int v24;
  __n128 v25;
  int v26;

  v8 = *a1;
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
      a5 = *(double *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1) + 24);
      goto LABEL_3;
    case 2:
      a5 = *(double *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1) + 24);
      goto LABEL_8;
    case 5:
      v9 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1);
      v10 = *(double *)(v9 + 24) / (double)*(unint64_t *)(v9 + 304);
      DspLib::LoudspeakerManagerV2::ModelManager::getZDomainVoiceCoilThermalModel(v8 + 296, a2, &v25, v10);
      v11 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
      v23 = v25;
      v24 = v26;
      DspLib::LoudspeakerController::Algorithm::setVoiceCoilModel(v11, (uint64_t)&v23, a2);
      DspLib::LoudspeakerManagerV2::ModelManager::getZDomainMagnetThermalModel(v8 + 296, a2, &v21, v10);
      v12 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
      v19 = v21;
      v20 = v22;
      DspLib::LoudspeakerController::Algorithm::setMagnetModel(v12, (uint64_t)&v19, a2);
      return;
    case 6:
      v13 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      return;
    default:
LABEL_3:
      if ((a3 | 2) != 3)
        return;
LABEL_8:
      v25.n128_u8[0] = 0;
      ZDomainLoudspeakerModel = DspLib::LoudspeakerManagerV2::ModelManager::getZDomainLoudspeakerModel((_QWORD *)(v8 + 296), a2, a3, a3 == 1, &v25, a4, a5);
      if (v25.n128_u8[0])
      {
        v16 = ZDomainLoudspeakerModel;
        v17 = v15;
        v18 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
        DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v18, v16, v17, a3, a2);
      }
      return;
  }
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  unsigned int v5;
  uint64_t v6;

  DspLib::clear(a2, __N);
  v5 = *(_DWORD *)(a1 + 504);
  if (v5 < *(_DWORD *)(a1 + 12))
    DspLib::PilotToneV2::PilotTone::status(*(_QWORD *)(a1 + 480) + 280 * v5, (uint64_t)(a2 + 2001));
  DspLib::LoudspeakerManagerV2::ModelManager::status(a1 + 296, (uint64_t)a2);
  DspLib::LoudspeakerHealth::status(a1 + 576, (uint64_t)(a2 + 2102), 50);
  DspLib::clear(a2, 7uLL);
  v6 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  return (*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v6 + 184))(v6, a2 + 7, 1994);
}

void DspLib::LoudspeakerManagerV2::Algorithm::~Algorithm(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  DspLib::LoudspeakerManagerV2::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &off_1E69BFD08;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 840);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  DspLib::LoudspeakerHealth::~LoudspeakerHealth((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 576));
  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }
  v10 = (void **)((char *)this + 480);
  std::vector<DspLib::PilotToneV2::PilotTone>::__destroy_vector::operator()[abi:ne180100](&v10);
  v3 = (void *)*((_QWORD *)this + 57);
  if (v3)
  {
    *((_QWORD *)this + 58) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 54);
  if (v4)
  {
    *((_QWORD *)this + 55) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 51);
  if (v5)
  {
    *((_QWORD *)this + 52) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 48);
  if (v6)
  {
    *((_QWORD *)this + 49) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 45);
  if (v7)
  {
    *((_QWORD *)this + 46) = v7;
    operator delete(v7);
  }
  v10 = (void **)((char *)this + 320);
  std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__destroy_vector::operator()[abi:ne180100](&v10);
  *(_QWORD *)this = off_1E69C47E8;
  v8 = (void *)*((_QWORD *)this + 34);
  if (v8)
  {
    *((_QWORD *)this + 35) = v8;
    operator delete(v8);
  }
  v10 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v10);
  *(_QWORD *)this = off_1E69C46F0;
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::latencySamples(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v1;

  v1 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::tailTimeSamples(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v1;

  v1 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::numStatus(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  return 2152;
}

uint64_t std::vector<DspLib::PilotToneV2::PilotTone>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAF8AF8AF8AF8AF8BLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 280 * a2;
      do
      {
        *(_OWORD *)(v7 + 224) = 0uLL;
        *(_OWORD *)(v7 + 240) = 0uLL;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 176) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_BYTE *)(v7 + 104) = 1;
        *(_QWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 118) = 0;
        *(_QWORD *)(v7 + 128) = 0;
        *(_QWORD *)(v7 + 136) = 0;
        *(_DWORD *)(v7 + 144) = 0;
        *(_QWORD *)(v7 + 152) = 0;
        *(_QWORD *)(v7 + 160) = 0;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(_QWORD *)(v7 + 221) = 0;
        *(_QWORD *)(v7 + 248) = 0;
        *(_QWORD *)(v7 + 256) = 0;
        *(_QWORD *)(v7 + 232) = 0;
        *(_QWORD *)(v7 + 240) = 0;
        *(_BYTE *)(v7 + 256) = 0;
        v14 = (_QWORD *)(v7 + 260);
        *(_QWORD *)(v7 + 268) = 0;
        *(_DWORD *)(v7 + 276) = 0;
        v7 += 280;
        *v14 = 0;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAF8AF8AF8AF8AF8BLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xEA0EA0EA0EA0EALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x75075075075075)
      v11 = 0xEA0EA0EA0EA0EALL;
    else
      v11 = v9;
    v18[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>>(result, v11);
    else
      v12 = 0;
    v15 = &v12[280 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[280 * v11];
    v16 = &v15[280 * a2];
    do
    {
      *((_OWORD *)v15 + 14) = 0uLL;
      *((_OWORD *)v15 + 15) = 0uLL;
      *((_OWORD *)v15 + 12) = 0uLL;
      *((_OWORD *)v15 + 13) = 0uLL;
      *((_OWORD *)v15 + 10) = 0uLL;
      *((_OWORD *)v15 + 11) = 0uLL;
      *((_OWORD *)v15 + 8) = 0uLL;
      *((_OWORD *)v15 + 9) = 0uLL;
      *((_OWORD *)v15 + 6) = 0uLL;
      *((_OWORD *)v15 + 7) = 0uLL;
      *((_OWORD *)v15 + 4) = 0uLL;
      *((_OWORD *)v15 + 5) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *(_OWORD *)v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      v15[104] = 1;
      *((_QWORD *)v15 + 14) = 0;
      *(_QWORD *)(v15 + 118) = 0;
      *((_QWORD *)v15 + 16) = 0;
      *((_QWORD *)v15 + 17) = 0;
      *((_DWORD *)v15 + 36) = 0;
      *((_QWORD *)v15 + 19) = 0;
      *((_QWORD *)v15 + 20) = 0;
      *((_OWORD *)v15 + 12) = 0uLL;
      *((_OWORD *)v15 + 13) = 0uLL;
      *(_QWORD *)(v15 + 221) = 0;
      *((_QWORD *)v15 + 31) = 0;
      *((_QWORD *)v15 + 32) = 0;
      *((_QWORD *)v15 + 29) = 0;
      *((_QWORD *)v15 + 30) = 0;
      v15[256] = 0;
      v17 = v15 + 260;
      *(_QWORD *)(v15 + 268) = 0;
      *((_DWORD *)v15 + 69) = 0;
      v15 += 280;
      *v17 = 0;
    }
    while (v15 != v16);
    v18[2] = v16;
    std::vector<DspLib::PilotToneV2::PilotTone>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<DspLib::PilotToneV2::PilotTone>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1B6082390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::PilotToneV2::PilotTone>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::PilotToneV2::PilotTone>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(280 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 280;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 280;
    std::construct_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 56), (__n128 *)(a2 + 56));
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v10 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 221) = *(_QWORD *)(a2 + 221);
  *(_QWORD *)(a1 + 216) = v10;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v11 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v11;
  return a1;
}

void sub_1B60825EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 7));
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
}

uint64_t std::__split_buffer<DspLib::PilotToneV2::PilotTone>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>((_QWORD *)(i - 280));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DspLib::LoudspeakerHealth::~LoudspeakerHealth(DspLib::LoudspeakerHealth *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 11);
  if (v6)
  {
    *((_QWORD *)this + 12) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 9) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 6) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 3) = v9;
    operator delete(v9);
  }
}

void std::vector<DspLib::PilotToneV2::PilotTone>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 35;
        std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 56)
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](i - 16);
    result = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](i - 32);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[16],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[16],std::allocator<DspLib::Logger>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B60829C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[16],std::allocator<DspLib::Logger>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C16C8;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[16],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B6082A0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69C16C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLib::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69C16C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__on_zero_shared(uint64_t a1)
{
  DspLib::Logger::~Logger((DspLib::Logger *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[16],DspLib::Logger*>(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B6082AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[17],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],std::allocator<DspLib::Logger>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B6082B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],std::allocator<DspLib::Logger>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C16C8;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[17],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B6082B60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[17],DspLib::Logger*>(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B6082BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[24],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[24],std::allocator<DspLib::Logger>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B6082C20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[24],std::allocator<DspLib::Logger>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C16C8;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[24],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B6082C68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[24],DspLib::Logger*>(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B6082CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::TestToneGenerator(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::initialize(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_BYTE *)(this + 8) = 1;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::reset(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void DspLib::LoudspeakerSystemIDV1::TestToneGenerator::setParameters(DspLib::LoudspeakerSystemIDV1::TestToneGenerator *this, const DspLib::AlgorithmParametersInstance *a2)
{
  uint64_t v2;
  float *v4;
  float v5;
  float v6;

  v4 = (float *)DspLib::AlgorithmParametersInstance::group(a2, 2u);
  LODWORD(v2) = vcvtad_u64_f64(*(double *)this / v4[1]);
  v5 = *(double *)this / (double)v2;
  v6 = v5 * 6.28318531 / *(double *)this;
  *((float *)this + 3) = v6;
  *((float *)this + 4) = DspLib::dB2Amp((DspLib *)v4, v4[2]);
  *((_BYTE *)this + 9) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = v2;
}

void DspLib::LoudspeakerSystemIDV1::TestToneGenerator::process(DspLib::LoudspeakerSystemIDV1::TestToneGenerator *this, float *a2, vDSP_Length a3)
{
  DspLib::LoudspeakerSystemIDV1::TestToneGenerator *v5;
  uint64_t v6;
  const float *v7;
  vDSP_Length v8;
  char *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 9))
  {
    v5 = (DspLib::LoudspeakerSystemIDV1::TestToneGenerator *)MEMORY[0x1E0C80A78](this);
    v7 = (const float *)((char *)v10 - v6);
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::updateTestToneGeneratorVector(v5, (float *)((char *)v10 - v6), v8);
    DspLib::add(a2, a3, v7);
  }
  else
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1TestToneGenerator.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 53);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerSystemIDV1::TestToneGenerator::updateTestToneGeneratorVector(DspLib::LoudspeakerSystemIDV1::TestToneGenerator *this, float *__C, vDSP_Length __N)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *((_QWORD *)this + 3);
  if (__N)
  {
    v7 = 0;
    do
    {
      __C[v7] = sinf(*((float *)this + 3) * (float)(unint64_t)(v6 + v7));
      ++v7;
    }
    while (__N > v7);
  }
  *((_QWORD *)this + 3) = v6 + __N;
  v8 = *((_QWORD *)this + 4);
  if (v6 + __N >= v8)
    *((_QWORD *)this + 3) = v6 + __N - v8;
  DspLib::multiply(__C, __N, *((float *)this + 4));
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::status(uint64_t result, uint64_t a2)
{
  float v2;
  char *v3;

  if (*(_BYTE *)(result + 8))
  {
    v2 = *(double *)result * (*(float *)(result + 12) / 6.28318531);
    *(float *)(a2 + 228) = v2;
  }
  else
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1TestToneGenerator.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v3, 62);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

float DspLib::Biquad::Design::lengthThreeFIR(float a1, float a2, float a3, float a4)
{
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v8 = cosf(a4);
  v9 = cosf(a4 + a4);
  v10 = (float)((float)((float)((float)(a2 * a2) - (float)(a3 * a3)) / (float)(v8 * 4.0)) * -4.0) + (float)(a1 * a1);
  v11 = v10 < 0.0;
  v12 = sqrtf(-(float)(v10 - (float)(a1 * a1)));
  v13 = a1 - sqrtf(v10);
  if (v11)
    v13 = v12;
  v14 = v13 * 0.5;
  v15 = (float)(1.0 - v9) + (float)(1.0 - v9);
  v16 = a1 - v14;
  v17 = (float)(v9 + -1.0) * (float)(v16 + v16);
  v18 = (float)((float)(v15 * -4.0)
              * (float)((float)((float)((float)(v14 * v14) + (float)(v16 * v16))
                              + (float)((float)(v14 * (float)(v16 + v16)) * v8))
                      - (float)(a2 * a2)))
      + (float)(v17 * v17);
  v19 = sqrtf(-(float)(v18 - (float)(v17 * v17)));
  v20 = (float)-v17 - sqrtf(v18);
  if (v18 < 0.0)
    v20 = v19;
  return v16 - (float)(v20 / (float)(v15 + v15));
}

float *DspLib::Biquad::Design::bilinearTransformStoZUnwarped(float *result, double a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  char *v22;
  int v23;

  v2 = result[1];
  v3 = result[2];
  v5 = result[3];
  v4 = result[4];
  if (v2 != 0.0 || v5 != 0.0 || v3 != 0.0 || v4 != 0.0)
  {
    if (v4 == 0.0 && v3 == 0.0)
    {
      if (v5 != 0.0)
      {
        v6 = a2 + a2;
        v7 = v5;
        v8 = v6 + v5;
        v9 = *result;
        v10 = v2;
        v11 = (v10 + v9 * v6) / v8;
        *(float *)&v10 = (v10 - v9 * v6) / v8;
        *(float *)&v6 = (v7 - v6) / v8;
        *result = v11;
        result[1] = *(float *)&v10;
        result[3] = *(float *)&v6;
        return result;
      }
      v22 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquadDesigns.cpp");
      v23 = 55;
      goto LABEL_14;
    }
    if (v4 == 0.0)
    {
      v22 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquadDesigns.cpp");
      v23 = 68;
LABEL_14:
      result = (float *)printf("DSP Sound assertion in %s at line %d\n", v22, v23);
      ++DspLibDebug::mAssertCounter;
      return result;
    }
    v12 = a2 + a2;
    v13 = v5;
    v14 = v4;
    v15 = v12 * v12 + v13 * v12 + v4;
    v16 = *result;
    v17 = v12 * v2;
    v18 = v3;
    v19 = (v17 + v16 * (v12 * v12) + v3) / v15;
    v20 = ((float)(v3 + v3) - (float)(*result + *result) * (v12 * v12)) / v15;
    *(float *)&v17 = (v18 - (v17 - v16 * (v12 * v12))) / v15;
    v21 = ((float)(v4 + v4) + v12 * v12 * -2.0) / v15;
    *result = v19;
    result[1] = v20;
    *(float *)&v12 = (v12 * v12 - v13 * v12 + v14) / v15;
    result[2] = *(float *)&v17;
    result[3] = v21;
    result[4] = *(float *)&v12;
  }
  return result;
}

float *DspLib::Biquad::Design::zeroOrderNumeratorbilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;
  double v9;
  double v10;
  float v11;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  double v17;
  double v18;

  v4 = a4 + a4;
  if (a2 == 2)
  {
    v9 = v4 * v4;
    v10 = result[5];
    v11 = result[3];
    v12 = v4 * result[4];
    v13 = v11;
    v14 = 1.0 / (v12 + v4 * v4 * v10 + v11);
    v8 = v14 * *result;
    v7 = v14 * (float)(*result + *result);
    v6 = ((float)(v11 + v11) + v9 * -2.0 * v10) * v14;
    v15 = (v13 - (v12 - v9 * v10)) * v14;
    v5 = v8;
  }
  else
  {
    v5 = 0.0;
    if (a2 == 1)
    {
      v16 = result[4];
      v17 = result[3];
      v18 = 1.0 / (v17 + v4 * v16);
      v8 = v18 * *result;
      v6 = (v17 - v4 * v16) * v18;
      v7 = v8;
    }
    else if (a2)
    {
      v8 = 0.0;
      v7 = 0.0;
      v6 = 0.0;
    }
    else
    {
      v6 = 1.0;
      v7 = *result * (float)(1.0 / result[3]);
      v8 = 0.0;
    }
    v15 = 0.0;
  }
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = v15;
  return result;
}

float *DspLib::Biquad::Design::firstOrderNumeratorbilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  double v4;
  float v5;
  float v6;
  double v7;
  double v8;
  double v9;
  float v10;
  float v11;
  double v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v4 = a4 + a4;
  if (a2 == 2)
  {
    v12 = result[5];
    v13 = result[3];
    v14 = v4 * result[4];
    v15 = v13;
    v16 = 1.0 / (v14 + v4 * v4 * v12 + v13);
    v17 = result[1];
    v18 = *result;
    v10 = (v18 + v4 * v17) * v16;
    v11 = v16 * (float)(*result + *result);
    v5 = (v18 - v4 * v17) * v16;
    v6 = ((float)(v13 + v13) + v4 * v4 * -2.0 * v12) * v16;
    v19 = (v15 - (v14 - v4 * v4 * v12)) * v16;
  }
  else
  {
    v5 = 0.0;
    if (a2 == 1)
    {
      v20 = result[4];
      v21 = result[3];
      v22 = 1.0 / (v21 + v4 * v20);
      v23 = result[1];
      v24 = *result;
      v10 = v22 * (v24 + v4 * v23);
      v11 = v22 * (v24 - v4 * v23);
      v6 = (v21 - v4 * v20) * v22;
    }
    else if (a2)
    {
      v10 = 0.0;
      v11 = 0.0;
      v6 = 0.0;
    }
    else
    {
      v6 = 1.0;
      v7 = (float)(1.0 / result[3]);
      v8 = result[1];
      v9 = *result;
      v10 = (v9 + v4 * v8) * v7;
      v11 = (v9 - v4 * v8) * v7;
    }
    v19 = 0.0;
  }
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = v19;
  return result;
}

float *DspLib::Biquad::Design::secondOrderNumeratorbilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  double v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;

  v4 = a4 + a4;
  v5 = v4 * v4;
  if (a2 == 2)
  {
    v10 = result[5];
    v11 = v4 * result[4];
    v12 = result[3];
    v13 = v12;
    v14 = 1.0 / (v11 + v5 * v10 + v12);
    v15 = result[2];
    v16 = v4 * result[1];
    v17 = *result;
    v6 = v14 * (v16 + v5 * v15 + v17);
    v8 = v14 * ((float)(*result + *result) + v5 * -2.0 * v15);
    v9 = v14 * (v17 - (v16 - v5 * v15));
    v7 = ((float)(v12 + v12) + v5 * -2.0 * v10) * v14;
    v18 = (v13 - (v11 - v5 * v10)) * v14;
LABEL_7:
    v25 = v18;
    goto LABEL_10;
  }
  if (a2 == 1)
  {
    v19 = result[4];
    v20 = result[3];
    v21 = 1.0 / (v20 + v4 * v19);
    v22 = result[2];
    v23 = v4 * result[1];
    v24 = *result;
    v6 = v21 * (v23 + v5 * v22 + v24);
    v8 = v21 * ((float)(*result + *result) + v5 * -2.0 * v22);
    v9 = v21 * (v24 - (v23 - v5 * v22));
    v7 = (v20 + v20) * v21;
    v18 = (v20 - v4 * v19) * v21;
    goto LABEL_7;
  }
  v6 = 0.0;
  if (a2)
  {
    v8 = 0.0;
    v9 = 0.0;
    v7 = 0.0;
  }
  else
  {
    v7 = 1.0;
    v8 = *result * (float)(1.0 / result[3]);
    v9 = 0.0;
  }
  v25 = 0.0;
LABEL_10:
  *a3 = v6;
  a3[1] = v8;
  a3[2] = v9;
  a3[3] = v7;
  a3[4] = v25;
  return result;
}

float *DspLib::Biquad::Design::bilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float v3;
  uint64_t v4;
  uint64_t v5;

  if (*result == 0.0)
  {
    v3 = result[1];
    if (v3 == 0.0 && result[2] == 0.0 && result[3] == 0.0 && result[4] == 0.0 && result[5] == 0.0)
    {
      *(_DWORD *)(a2 + 16) = 0;
      *(_OWORD *)a2 = DspLib::Biquad::kBypassSection;
      return result;
    }
  }
  else
  {
    v3 = result[1];
  }
  v4 = v3 != 0.0;
  if (result[2] != 0.0)
    v4 = 2;
  if (result[5] == 0.0)
    v5 = result[4] != 0.0;
  else
    v5 = 2;
  if (v4 == 2)
    return DspLib::Biquad::Design::secondOrderNumeratorbilinearTransformStoZUnwarped(result, v5, (float *)a2, a3);
  if (v4 == 1)
    return DspLib::Biquad::Design::firstOrderNumeratorbilinearTransformStoZUnwarped(result, v5, (float *)a2, a3);
  return DspLib::Biquad::Design::zeroOrderNumeratorbilinearTransformStoZUnwarped(result, v5, (float *)a2, a3);
}

void DspLib::Biquad::Design::ParametricEQ::design(DspLib::Biquad::Design::ParametricEQ *this@<X0>, float a2@<S0>, int a3@<W1>, double *a4@<X2>, uint64_t a5@<X8>)
{
  DspLib *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double *v20;
  double v21;
  double v22;
  double *v23;
  int v24;
  double v25;
  double v26;
  float v27;
  DspLib *v28;
  float v29;
  float v30;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  __int128 v37;
  void *__p[2];
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  float __C;
  float __B;
  float v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    DspLib::Biquad::Design::parametricSectionRegular(*(DspLib **)this, *((_QWORD *)this + 1), a4, (float32x4_t *)a5, a2);
    return;
  }
  if (*(_DWORD *)this > 0x13u || ((1 << *(_DWORD *)this) & 0xB4007) == 0)
  {
    puts("ERROR: prototypeForPhaseCompensation not available for this filter type.");
    *(_DWORD *)a5 = 1065353216;
    *(_QWORD *)(a5 + 12) = 0;
    *(_QWORD *)(a5 + 4) = 0;
    return;
  }
  v7 = *(DspLib **)this;
  v8 = *((_QWORD *)this + 1);
  LODWORD(v9) = HIDWORD(*(_QWORD *)this);
  v10 = *((float *)&v8 + 1);
  v11 = 0.5;
  v12 = 0.125;
  v13 = 1000000.0;
  if ((int)*(_QWORD *)this <= 1)
  {
    if ((_DWORD)v7)
    {
      LODWORD(v14) = HIDWORD(*((_QWORD *)this + 1));
      v15 = 0.5;
      if ((_DWORD)v7 == 1)
      {
        if (*((float *)&v8 + 1) <= 0.3)
          v14 = 0.3;
        else
          LODWORD(v14) = HIDWORD(*((_QWORD *)this + 1));
        v15 = -0.5;
        v11 = 1.0;
        v12 = 1.25;
        v13 = 0.025;
      }
    }
    else
    {
      if (*((float *)&v8 + 1) <= 0.3)
        v14 = 0.3;
      else
        LODWORD(v14) = HIDWORD(*((_QWORD *)this + 1));
      v15 = -0.5;
      v11 = 1.0;
      v13 = 0.025;
      v12 = 0.8;
    }
    goto LABEL_25;
  }
  if ((_DWORD)v7 == 19)
  {
    v15 = -0.5;
    v11 = 0.25;
    v12 = 0.5;
LABEL_19:
    LODWORD(v14) = HIDWORD(*((_QWORD *)this + 1));
    goto LABEL_25;
  }
  if ((_DWORD)v7 != 17)
  {
    LODWORD(v14) = HIDWORD(*((_QWORD *)this + 1));
    v15 = 0.5;
    if ((_DWORD)v7 != 2)
      goto LABEL_25;
    v15 = -0.5;
    v12 = 0.5;
    v13 = 0.1;
    v11 = 0.8;
    goto LABEL_19;
  }
  v11 = 0.25;
  v12 = 0.5;
  LODWORD(v14) = HIDWORD(*((_QWORD *)this + 1));
  v15 = 0.5;
LABEL_25:
  v16 = sqrtf(*((float *)&v8 + 1));
  v17 = logf(v11);
  v46[0] = expf(v17 / v16) * v9;
  v18 = logf(v12);
  v46[1] = expf(v18 / v16) * v9;
  LOBYTE(v40) = 0;
  v41 = 0u;
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v40, 1uLL, 1uLL);
  LOBYTE(v36) = 0;
  v37 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v39, 0, sizeof(v39));
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v36, 1uLL, 1uLL);
  v19 = fabsf(*(float *)&v8);
  DspLib::Biquad::Design::parametricSectionRegular(v7, LODWORD(v19) | ((unint64_t)LODWORD(v14) << 32), v20, &v35, a2);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)&v40, (uint64_t)&v35, 1, 0, 0x41uLL);
  DspLib::Biquad::amplitudeResponse(&v40, (uint64_t)v46, 2uLL, (uint64_t)&__B, 2, 0, 44100.0, v21, v22);
  DspLib::amp2dB(&__B, 2uLL, 1.0);
  v24 = 99;
  do
  {
    DspLib::Biquad::Design::parametricSectionRegular(v7, COERCE_UNSIGNED_INT(v19 * 0.5) | ((unint64_t)LODWORD(v10) << 32), v23, &v34, a2);
    DspLib::Biquad::Filter::setCoefficients((uint64_t)&v36, (uint64_t)&v34, 1, 0, 0x41uLL);
    DspLib::Biquad::amplitudeResponse(&v36, (uint64_t)v46, 2uLL, (uint64_t)&__C, 2, 0, 44100.0, v25, v26);
    DspLib::amp2dB(&__C, 2uLL, 1.0);
    DspLib::multiply(&__C, 2uLL, 2.0);
    DspLib::subtract(&__C, 2uLL, &__B);
    v27 = v15 * DspLib::mean(&__C, 2uLL);
    v29 = v10 * DspLib::dB2Amp(v28, v27);
    if (v29 <= 19.9)
      v30 = v29;
    else
      v30 = 19.9;
    if (v29 >= 0.1)
      v10 = v30;
    else
      v10 = 0.1;
  }
  while ((v27 >= v13 || v27 <= -0.025) && v24-- != 0);
  DspLib::Biquad::Design::parametricSectionRegular(v7, COERCE_UNSIGNED_INT(*(float *)&v8 * 0.5) | ((unint64_t)LODWORD(v10) << 32), v23, (float32x4_t *)a5, a2);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v39 + 8));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v43[8]);
  if ((_QWORD)v42)
  {
    *((_QWORD *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
}

void sub_1B6083B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::Biquad::Design::parametricSectionRegular@<X0>(DspLib *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, float32x4_t *a4@<X8>, float a5@<S0>)
{
  float v7;
  float v8;
  float v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double cosval;
  float64x2_t v15;
  double v16;
  float v17;
  __double2 v18;
  float64x2_t v19;
  double v20;
  float v21;
  __double2 v22;
  long double v23;
  double v24;
  double v25;
  __double2 v26;
  double sinval;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  __double2 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  long double v43;
  double v44;
  long double v45;
  long double v46;
  long double v47;
  long double v48;
  long double v49;
  long double v50;
  float v51;
  __double2 v52;
  long double v53;
  long double v54;
  long double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  float v63;
  double v64;
  DspLib *v65;
  __double2 v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float v73;
  __double2 v74;
  double v75;
  double v76;
  double v77;
  double v78;
  __double2 v79;
  double v80;
  float v81;
  double *v82;
  float v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  DspLib::Biquad::Design *v91;
  int v92;
  const DSPComplex *v93;
  double v94;
  DspLib::Biquad::Design *v95;
  int v96;
  const DSPComplex *v97;
  float v98;
  double *v99;
  uint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float v103;
  double v104;
  double v105;
  double v106;
  double *v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  DspLib::Biquad::Design *v113;
  int v114;
  const DSPComplex *v115;
  double v116;
  DspLib::Biquad::Design *v117;
  int v118;
  const DSPComplex *v119;
  double *v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  DspLib::Biquad::Design *v131;
  int v132;
  const DSPComplex *v133;
  double v134;
  DspLib::Biquad::Design *v135;
  int v136;
  const DSPComplex *v137;
  float v138;
  float v139;
  double v140;
  double v141;
  double v142;
  double *v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  DspLib::Biquad::Design *v149;
  int v150;
  const DSPComplex *v151;
  double v152;
  DspLib::Biquad::Design *v153;
  int v154;
  const DSPComplex *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  uint64_t v168;
  float v169;
  double v170;
  float v171;
  double v172;
  double v173;
  double v174;
  long double v175;
  long double v176;
  long double v177;
  long double v178;
  long double v179;
  long double v180;
  long double v181;
  double v182;
  double v183;
  double v184;
  float v185;
  DspLib::Biquad::Design *v186;
  int v187;
  const DSPComplex *v188;
  double v189;
  DspLib::Biquad::Design *v190;
  int v191;
  const DSPComplex *v192;
  double v193;
  float32_t v194;
  uint64_t result;
  float v196;
  __double2 v197;
  long double v198;
  double v199;
  double v200;
  double v201;
  float32x4_t v202;
  __int32 v203;
  _BYTE v204[40];
  float v205;
  int v206;
  DSPComplex v207;
  DSPComplex v208;
  DSPComplex v209;
  DSPComplex v210;
  DSPComplex v211;
  DSPComplex v212;

  v7 = *((float *)&a1 + 1);
  v8 = *(float *)&a2;
  switch((int)a1)
  {
    case 0:
      v9 = *((float *)&a2 + 1);
      v10 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      v11 = 1.0;
      v12 = v10.__sinval * sinh(1.0 / (v9 + v9));
      v13 = 1.0 / (v12 + 1.0);
      cosval = v10.__cosval;
      v15.f64[0] = 1.0 - v10.__cosval;
      v16 = (1.0 - v10.__cosval) * v13;
      goto LABEL_4;
    case 1:
      v17 = *((float *)&a2 + 1);
      v18 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      v11 = 1.0;
      v12 = v18.__sinval * sinh(1.0 / (v17 + v17));
      v13 = 1.0 / (v12 + 1.0);
      cosval = v18.__cosval;
      v15.f64[0] = v18.__cosval + 1.0;
      v16 = (-1.0 - v18.__cosval) * v13;
LABEL_4:
      v15.f64[1] = cosval;
      v19 = vmulq_n_f64(vmulq_f64(v15, (float64x2_t)xmmword_1B66273B0), v13);
      *(float64_t *)v204 = v19.f64[0];
      *(double *)&v204[8] = v16;
      *(float64x2_t *)&v204[16] = v19;
      v20 = (v11 - v12) * v13;
      goto LABEL_47;
    case 2:
      v21 = *((float *)&a2 + 1);
      v22 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      v23 = v22.__sinval * sinh(1.0 / (v21 + v21));
      v24 = 1.0 / (v23 + 1.0);
      *(double *)v204 = v24;
      *(double *)&v204[8] = v22.__cosval * -2.0 * v24;
      *(double *)&v204[16] = v24;
      *(double *)&v204[24] = *(double *)&v204[8];
      v25 = 1.0 - v23;
      goto LABEL_16;
    case 3:
      if (*(float *)&a2 == 0.0)
        goto LABEL_7;
      v196 = *((float *)&a2 + 1);
      v197 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      v198 = v197.__sinval * sinh(1.0 / (v196 + v196));
      v199 = __exp10(v8 * 0.025);
      v33 = 1.0 / (v198 / v199 + 1.0);
      *(double *)v204 = (v198 * v199 + 1.0) * v33;
      *(double *)&v204[8] = v197.__cosval * -2.0 * v33;
      *(double *)&v204[16] = (1.0 - v198 * v199) * v33;
      *(double *)&v204[24] = *(double *)&v204[8];
      v42 = 1.0 - v198 / v199;
      goto LABEL_11;
    case 4:
      v26 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      sinval = v26.__sinval;
      v28 = __exp10(v8 * 0.025);
      v29 = v28 + -1.0;
      v30 = sqrt((v28 * v28 + 1.0) / 0.707106781 - v29 * v29);
      v31 = v28 + 1.0;
      v32 = v28 + 1.0 + (v28 + -1.0) * v26.__cosval;
      v33 = 1.0 / (v32 + v30 * v26.__sinval);
      v34 = v28 + 1.0 - (v28 + -1.0) * v26.__cosval;
      *(double *)v204 = v28 * (v34 + v30 * v26.__sinval) * v33;
      *(double *)&v204[8] = (v28 + v28) * (v28 + -1.0 - (v28 + 1.0) * v26.__cosval) * v33;
      v35 = v28 * (v34 - v30 * v26.__sinval) * v33;
      v36 = (v29 + v31 * v26.__cosval) * -2.0;
      goto LABEL_10;
    case 5:
      v37 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      sinval = v37.__sinval;
      v38 = __exp10(v8 * 0.025);
      v39 = v38 + -1.0;
      v30 = sqrt((v38 * v38 + 1.0) / 0.707106781 - v39 * v39);
      v40 = v38 + 1.0;
      v32 = v38 + 1.0 - (v38 + -1.0) * v37.__cosval;
      v33 = 1.0 / (v32 + v30 * v37.__sinval);
      v41 = v38 + 1.0 + (v38 + -1.0) * v37.__cosval;
      *(double *)v204 = v38 * (v41 + v30 * v37.__sinval) * v33;
      *(double *)&v204[8] = v38 * -2.0 * (v38 + -1.0 + (v38 + 1.0) * v37.__cosval) * v33;
      v35 = v38 * (v41 - v30 * v37.__sinval) * v33;
      v36 = v39 - v40 * v37.__cosval + v39 - v40 * v37.__cosval;
LABEL_10:
      *(double *)&v204[16] = v35;
      *(double *)&v204[24] = v36 * v33;
      v42 = v32 - v30 * sinval;
LABEL_11:
      v20 = v42 * v33;
      goto LABEL_47;
    case 6:
      v43 = 1.0 / tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      *(double *)v204 = 1.0 / (v43 + 1.0);
      *(double *)&v204[8] = *(double *)v204;
      *(_QWORD *)&v204[16] = 0;
      v44 = (1.0 - v43) * *(double *)v204;
      goto LABEL_42;
    case 7:
      v45 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v46 = 1.0 / (v45 + 1.0);
      *(double *)v204 = v46;
      *(double *)&v204[8] = -v46;
      *(_QWORD *)&v204[16] = 0;
      v44 = (v45 + -1.0) * v46;
      goto LABEL_42;
    case 8:
      v47 = 1.0 / tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v48 = 1.0 / (v47 * v47 + v47 * 1.41421356 + 1.0);
      *(double *)v204 = v48;
      *(double *)&v204[8] = v48 + v48;
      *(double *)&v204[16] = v48;
      *(double *)&v204[24] = (1.0 - v47 * v47 + 1.0 - v47 * v47) * v48;
      v20 = (v47 * -1.41421356 + 1.0 + v47 * v47) * v48;
      goto LABEL_47;
    case 9:
      v49 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v24 = 1.0 / (v49 * 1.41421356 + v49 * v49 + 1.0);
      *(double *)v204 = v24;
      *(double *)&v204[8] = v24 * -2.0;
      *(double *)&v204[16] = v24;
      *(double *)&v204[24] = (v49 * v49 + -1.0 + v49 * v49 + -1.0) * v24;
      v25 = v49 * -1.41421356 + 1.0 + v49 * v49;
LABEL_16:
      v20 = v25 * v24;
      goto LABEL_47;
    case 10:
      v50 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v44 = (1.0 - 1.0 / v50) * (1.0 / (1.0 / v50 + 1.0));
      *(double *)v204 = v44;
      *(_OWORD *)&v204[8] = xmmword_1B66271B0;
      goto LABEL_42;
    case 11:
      v51 = *((float *)&a2 + 1);
      v52 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      v53 = v52.__sinval * sinh(1.0 / (v51 + v51));
      v54 = v53 / __exp10(v8 * 0.025);
      v55 = 1.0 / (v54 + 1.0);
      v56 = (1.0 - v54) * v55;
      v57 = v52.__cosval * -2.0 * v55;
      *(double *)v204 = v56;
      *(double *)&v204[8] = v57;
      *(_QWORD *)&v204[16] = 0x3FF0000000000000;
      goto LABEL_24;
    case 12:
      v58 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v59 = v58 * v58;
      v60 = __exp10(v8 * 0.05);
      v61 = v58 * 1.41421356 + 1.0 + v58 * v58;
      v62 = sqrt(v60 + v60);
      *(double *)v204 = (v58 * v58 + v60 + v62 * v58) / v61;
      *(double *)&v204[8] = (v59 - v60 + v59 - v60) / v61;
      *(double *)&v204[16] = (v58 * v58 + v60 - v62 * v58) / v61;
      *(double *)&v204[24] = (v59 + -1.0 + v59 + -1.0) / v61;
      v20 = (v58 * -1.41421356 + 1.0 + v58 * v58) / v61;
      goto LABEL_47;
    case 13:
      v63 = *((float *)&a2 + 1);
      v64 = a5;
      v66 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v67 = v66.__cosval / v66.__sinval * (v66.__cosval / v66.__sinval);
      v68 = v67 * 1102.5 / (v63 * 3.14159265 * v64);
      v69 = v67 + v68 + 1.0;
      v200 = v68 / v69;
      v70 = -v68 / v69;
      v71 = (1.0 - v67 + 1.0 - v67) / v69;
      v72 = v67 + 1.0 - v68;
      goto LABEL_22;
    case 14:
      v73 = *((float *)&a2 + 1);
      v74 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      v75 = v74.__cosval / v74.__sinval * (v74.__cosval / v74.__sinval);
      v76 = v74.__cosval / v74.__sinval / v73;
      v69 = v75 + v76 + 1.0;
      v200 = v76 / v69;
      v70 = -v76 / v69;
      v71 = (1.0 - v75 + 1.0 - v75) / v69;
      v72 = v75 + 1.0 - v76;
LABEL_22:
      *(double *)&v204[24] = v71;
      *(double *)&v204[32] = v72 / v69;
      v77 = DspLib::dB2Amp(v65, v8);
      *(float64x2_t *)v204 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v200, v77);
      *(double *)&v204[16] = v70 * v77;
      break;
    case 15:
      v78 = 1.0 / *((float *)&a2 + 1) * 0.5;
      v79 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      v56 = (1.0 - v78 * v79.__sinval) / (v78 * v79.__sinval + 1.0);
      v80 = (v56 + 1.0 + v79.__cosval * (v56 + 1.0)) * 0.25;
      *(double *)v204 = v80;
      *(double *)&v204[8] = v80 * -2.0;
      v57 = -(v79.__cosval * (v56 + 1.0));
      *(double *)&v204[16] = v80;
LABEL_24:
      *(double *)&v204[24] = v57;
      *(double *)&v204[32] = v56;
      break;
    case 16:
      v81 = *((float *)&a2 + 1);
      v83 = DspLib::dB2Amp(a1, *(float *)&a2);
      if (v83 >= 1.0)
        v84 = v83;
      else
        v84 = 1.0 / v83;
      v85 = v81;
      v86 = v7 * 6.28318531 / a5;
      memset(v204, 0, sizeof(v204));
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v86, v85, 1.0, (double *)&v204[32], v82);
      v87 = *(double *)&v204[24];
      v88 = *(double *)&v204[32];
      v201 = 1.0 / (*(double *)&v204[24] + 1.0 + *(double *)&v204[32]);
      v89 = 1.0
          / sqrt(fabs(*(double *)&v204[24] + 1.0 - *(double *)&v204[32] + v87 * v87 + v87 * *(double *)&v204[32] + v88 * v88));
      v90 = 1.0
          / sqrt(fabs(1.0 - *(double *)&v204[24] - *(double *)&v204[32] + v87 * v87 - v87 * *(double *)&v204[32] + v88 * v88));
      *(float *)&v88 = 1.04719755 / v86;
      *(float *)&v86 = *(float *)&v88 + *(float *)&v88;
      LODWORD(v87) = 0;
      v205 = DspLib::Biquad::Design::analogBell(v91, *(DSPComplex *)&v87, v84, v85);
      v206 = v92;
      v94 = DspLib::abs((DspLib *)&v205, v93);
      v207.real = 0.0;
      v207.imag = *(float *)&v86;
      v205 = DspLib::Biquad::Design::analogBell(v95, v207, v84, v85);
      v206 = v96;
      v98 = DspLib::abs((DspLib *)&v205, v97);
      DspLib::Biquad::Design::secondOrderFIRWithGains((DspLib::Biquad::Design *)v204, 1.0 / v201, v94 / v89, v98 / v90, (double *)&v204[8], (double *)&v204[16], v99);
      if (v83 < 1.0)
      {
        v100 = *(_QWORD *)v204;
        *(double *)v204 = 1.0 / *(double *)v204;
        v101 = (float64x2_t)vdupq_lane_s64(v100, 0);
        v102 = *(float64x2_t *)&v204[8];
        *(float64x2_t *)&v204[8] = vdivq_f64(*(float64x2_t *)&v204[24], v101);
        *(float64x2_t *)&v204[24] = vdivq_f64(v102, v101);
      }
      break;
    case 17:
      v103 = *((float *)&a2 + 1);
      v104 = *((float *)&a1 + 1) * 6.28318531 / a5;
      v105 = DspLib::dB2Amp(a1, *(float *)&a2);
      memset(v204, 0, sizeof(v204));
      v106 = v103;
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v104, v106, v105, (double *)&v204[32], v107);
      v108 = *(double *)&v204[24];
      v109 = *(double *)&v204[32];
      v110 = 1.0 / (*(double *)&v204[24] + 1.0 + *(double *)&v204[32]);
      v111 = 1.0
           / sqrt(fabs(*(double *)&v204[24]+ 1.0- *(double *)&v204[32]+ v108 * v108+ v108 * *(double *)&v204[32]+ v109 * v109));
      v112 = 1.0
           / sqrt(fabs(1.0- *(double *)&v204[24]- *(double *)&v204[32]+ v108 * v108- v108 * *(double *)&v204[32]+ v109 * v109));
      *(float *)&v109 = 1.04719755 / v104;
      *(float *)&v104 = *(float *)&v109 + *(float *)&v109;
      LODWORD(v108) = 0;
      v205 = DspLib::Biquad::Design::analogHighShelf(v113, *(DSPComplex *)&v108, v105, v106);
      v206 = v114;
      v116 = DspLib::abs((DspLib *)&v205, v115);
      v208.real = 0.0;
      v208.imag = *(float *)&v104;
      v205 = DspLib::Biquad::Design::analogHighShelf(v117, v208, v105, v106);
      v206 = v118;
      v121 = DspLib::abs((DspLib *)&v205, v119);
      v122 = 1.0 / v110;
      v123 = v116 / v111;
      v124 = v121 / v112;
      goto LABEL_50;
    case 18:
      v125 = *((float *)&a1 + 1) * 6.28318531 / a5;
      memset(v204, 0, sizeof(v204));
      v126 = *((float *)&a2 + 1);
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v125, *((float *)&a2 + 1), 1.0, (double *)&v204[32], a3);
      v127 = *(double *)&v204[24];
      v128 = *(double *)&v204[32];
      v129 = 1.0
           / sqrt(*(double *)&v204[24]+ 1.0- *(double *)&v204[32]+ v127 * v127+ v127 * *(double *)&v204[32]+ v128 * v128);
      v130 = 1.0
           / sqrt(1.0- *(double *)&v204[24]- *(double *)&v204[32]+ v127 * v127- v127 * *(double *)&v204[32]+ v128 * v128);
      *(float *)&v128 = 1.04719755 / v125;
      *(float *)&v125 = *(float *)&v128 + *(float *)&v128;
      LODWORD(v127) = 0;
      v205 = DspLib::Biquad::Design::analogHighPass(v131, *(DSPComplex *)&v127, v126);
      v206 = v132;
      v134 = DspLib::abs((DspLib *)&v205, v133);
      v209.real = 0.0;
      v209.imag = *(float *)&v125;
      v205 = DspLib::Biquad::Design::analogHighPass(v135, v209, v126);
      v206 = v136;
      v138 = DspLib::abs((DspLib *)&v205, v137);
      v123 = v134 / v129;
      v124 = v138 / v130;
      v122 = 0.0;
      goto LABEL_50;
    case 19:
      v139 = *((float *)&a2 + 1);
      v140 = *((float *)&a1 + 1) * 6.28318531 / a5;
      v141 = DspLib::dB2Amp(a1, *(float *)&a2);
      memset(v204, 0, sizeof(v204));
      v142 = v139;
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v140, v142, 1.0 / v141, (double *)&v204[32], v143);
      v144 = *(double *)&v204[24];
      v145 = *(double *)&v204[32];
      v146 = 1.0 / (*(double *)&v204[24] + 1.0 + *(double *)&v204[32]);
      v147 = 1.0
           / sqrt(fabs(*(double *)&v204[24]+ 1.0- *(double *)&v204[32]+ v144 * v144+ v144 * *(double *)&v204[32]+ v145 * v145));
      v148 = 1.0
           / sqrt(fabs(1.0- *(double *)&v204[24]- *(double *)&v204[32]+ v144 * v144- v144 * *(double *)&v204[32]+ v145 * v145));
      *(float *)&v145 = 1.04719755 / v140;
      *(float *)&v140 = *(float *)&v145 + *(float *)&v145;
      LODWORD(v144) = 0;
      v205 = DspLib::Biquad::Design::analogLowShelf(v149, *(DSPComplex *)&v144, v141, v142);
      v206 = v150;
      v152 = DspLib::abs((DspLib *)&v205, v151);
      v210.real = 0.0;
      v210.imag = *(float *)&v140;
      v205 = DspLib::Biquad::Design::analogLowShelf(v153, v210, v141, v142);
      v206 = v154;
      v156 = DspLib::abs((DspLib *)&v205, v155);
      v122 = v141 / v146;
      v123 = v152 / v147;
      v124 = v156 / v148;
      goto LABEL_50;
    case 20:
      v157 = *((float *)&a2 + 1);
      v158 = 1.0 / (v157 + v157);
      v159 = v158 * v158;
      v160 = *((float *)&a1 + 1) * 6.28318531 / a5;
      memset(v204, 0, 24);
      v161 = -v160;
      if (*((float *)&a2 + 1) >= 0.5)
      {
        v181 = exp(v158 * v161) * -2.0;
        v164 = v181 * cos(v160 * sqrt(1.0 - v159));
      }
      else
      {
        v162 = sqrt(v159 + -1.0);
        v163 = exp((v158 + v162) * v161);
        v164 = -(v163 + exp((v158 - v162) * v161));
      }
      *(double *)&v204[24] = v164;
      *(_QWORD *)&v204[32] = exp(v158 * (v160 * -2.0));
      v182 = 1.0 / (*(double *)&v204[32] + v164 + 1.0);
      v183 = 1.0
           / sqrt(fabs(v164+ 1.0- *(double *)&v204[32]+ v164 * v164+ v164 * *(double *)&v204[32]+ *(double *)&v204[32] * *(double *)&v204[32]));
      v184 = 1.0
           / sqrt(fabs(1.0- v164- *(double *)&v204[32]+ v164 * v164- v164 * *(double *)&v204[32]+ *(double *)&v204[32] * *(double *)&v204[32]));
      v211.imag = 1.04719755 / v160;
      v185 = v211.imag + v211.imag;
      v211.real = 0.0;
      v205 = DspLib::Biquad::Design::analogLowPass(v186, v211, v157);
      v206 = v187;
      v189 = DspLib::abs((DspLib *)&v205, v188);
      v212.real = 0.0;
      v212.imag = v185;
      v205 = DspLib::Biquad::Design::analogLowPass(v190, v212, v157);
      v206 = v191;
      v193 = DspLib::abs((DspLib *)&v205, v192);
      v122 = 1.0 / v182;
      v123 = v189 / v183;
      v124 = v193 / v184;
LABEL_50:
      DspLib::Biquad::Design::secondOrderFIRWithGains((DspLib::Biquad::Design *)v204, v122, v123, v124, (double *)&v204[8], (double *)&v204[16], v120);
      break;
    case 21:
      v165 = a5;
      v166 = *(float *)&a2;
      v167 = *((float *)&a1 + 1);
      v168 = 0;
      goto LABEL_38;
    case 22:
      v165 = a5;
      v166 = *(float *)&a2;
      v167 = *((float *)&a1 + 1);
      v168 = 1;
LABEL_38:
      DspLib::Biquad::Design::easttyBaxandallToneControl((DspLib::Biquad::Design *)v168, v165, v166, v167, (double *)v204);
      break;
    case 23:
LABEL_7:
      *(_OWORD *)v204 = DspLib::Biquad::Design::kBypassDouble;
      memset(&v204[16], 0, 24);
      break;
    case 26:
      memset(&v204[8], 0, 32);
      *(double *)v204 = DspLib::dB2Amp(a1, *(float *)&a2);
      break;
    case 27:
      v169 = expf(-1.0 / (float)((float)(*((float *)&a1 + 1) * a5) / 1000.0));
      *(double *)v204 = (float)(1.0 - v169);
      *(_QWORD *)&v204[8] = 0;
      *(_QWORD *)&v204[16] = 0;
      v44 = (float)-v169;
LABEL_42:
      *(double *)&v204[24] = v44;
      *(_QWORD *)&v204[32] = 0;
      break;
    case 28:
      v170 = *((float *)&a2 + 1);
      v171 = DspLib::dB2Amp(a1, *(float *)&a2);
      v172 = v171;
      if (v8 >= 0.0)
        v173 = 1.0;
      else
        v173 = v171;
      v174 = v173 * v170;
      v175 = 1.0 / tan(v7 * 3.14159265 / a5);
      v176 = v175 * v175;
      v177 = v175 / v174;
      v178 = v175 * v175 + v175 / v174 + 1.0;
      v179 = (1.0 - v175 * v175 + 1.0 - v175 * v175) * (1.0 / v178);
      v180 = v175 * v172 / v174;
      *(double *)v204 = (v176 + v180 + 1.0) * (1.0 / v178);
      *(long double *)&v204[8] = v179;
      *(double *)&v204[16] = (v176 + 1.0 - v180) * (1.0 / v178);
      *(long double *)&v204[24] = v179;
      v20 = (v176 + 1.0 - v177) / v178;
LABEL_47:
      *(double *)&v204[32] = v20;
      break;
    default:
      memset(v204, 0, sizeof(v204));
      break;
  }
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v204), *(float64x2_t *)&v204[16]);
  v194 = *(double *)&v204[32];
  a4[1].f32[0] = v194;
  v203 = a4[1].i32[0];
  v202 = *a4;
  result = DspLib::Biquad::validate((uint64_t)&v202);
  if ((result & 1) == 0)
  {
    result = printf("a1 = %f and a2 =%f, create a biquad filter which is not stable\n", *(double *)&v204[24], *(double *)&v204[32]);
    a4[1].i32[0] = 0;
    *a4 = (float32x4_t)DspLib::Biquad::kBypassSection;
  }
  return result;
}

void DspLib::Biquad::Design::butterworthLowPass(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, int a4@<W1>, _QWORD *a5@<X8>)
{
  int v7;
  unsigned int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  __double2 v15;
  uint64_t v16;
  uint64_t v17;
  float sinval;
  float cosval;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;

  if (this >= 0x14)
    v7 = 20;
  else
    v7 = (int)this;
  if ((_DWORD)this)
    v8 = v7;
  else
    v8 = 1;
  v9 = a3 * 0.49;
  if ((float)(a3 * 0.49) >= a2)
    v9 = a2;
  if (a2 >= 1.0)
    v10 = v9;
  else
    v10 = 1.0;
  if (a4)
  {
    v11 = (float)v8;
    if ((v8 & 1) != 0)
      v10 = powf(1.6, 1.0 / v11) * v10;
    v8 = vcvtas_u32_f32(v11 * 0.5);
  }
  std::vector<DspLib::Biquad::Section>::vector(a5, (v8 + 1) >> 1);
  v12 = (float)(a3 * 0.5) * 0.9;
  if (v12 >= v10)
    v12 = v10;
  v13 = v12 * 6.28318531 / a3;
  v14 = v13;
  v15 = __sincos_stret(v13);
  if (v8 < 2)
  {
    LODWORD(v16) = 0;
    if ((v8 & 1) == 0)
      return;
LABEL_24:
    v24 = 1.0 / tan(v14 * 0.5);
    v25 = (float)(1.0 - v24) / (float)(v24 + 1.0);
    v26 = 1.0 / (float)(2.0 / (float)(v25 + 1.0));
    v27 = *a5 + 20 * v16;
    *(float *)v27 = v26;
    *(float *)(v27 + 4) = v26;
    *(_DWORD *)(v27 + 8) = 0;
    *(float *)(v27 + 12) = v25;
    *(_DWORD *)(v27 + 16) = 0;
    return;
  }
  v17 = 0;
  cosval = v15.__cosval;
  v16 = v8 >> 1;
  v20 = (float *)(*a5 + 8);
  do
  {
    v21 = sin(((double)++v17 * 2.0 + -1.0) * 3.14159265 * 0.5 / (double)v8);
    sinval = v15.__sinval;
    v22 = (float)(1.0 - (float)(v21 * sinval)) / (float)((float)(v21 * sinval) + 1.0);
    v23 = (float)((float)(v22 + 1.0) - (float)((float)(v22 + 1.0) * cosval)) * 0.25;
    *(v20 - 2) = v23;
    *(v20 - 1) = v23 + v23;
    *v20 = v23;
    v20[1] = -(float)((float)(v22 + 1.0) * cosval);
    v20[2] = v22;
    v20 += 5;
  }
  while (v16 != v17);
  if ((v8 & 1) != 0)
    goto LABEL_24;
}

void DspLib::Biquad::Design::butterworthHighPass(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, int a4@<W1>, float **a5@<X8>)
{
  float v6;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;

  v6 = a2;
  if (a4)
  {
    v8 = (float)this;
    if ((this & 1) != 0)
      v6 = a2 / powf(1.6, 1.0 / v8);
    LODWORD(this) = vcvtas_u32_f32(v8 * 0.5);
  }
  DspLib::Biquad::Design::butterworthLowPass(this, v6, a3, 0, a5);
  v9 = *a5;
  v10 = a5[1];
  if (*a5 != v10)
  {
    do
    {
      v11 = v9[2];
      v12 = v9[1];
      v13 = (float)((float)(1.0 - v9[3]) + v9[4]) / (float)((float)(*v9 + v12) + v11);
      *v9 = *v9 * v13;
      v9[1] = -(float)(v12 * v13);
      v9[2] = v11 * v13;
      v9 += 5;
    }
    while (v9 != v10);
  }
}

uint64_t DspLib::Biquad::Design::easttyBaxandallToneTilt@<X0>(DspLib::Biquad::Design *this@<X0>, unsigned int a2@<S0>, unsigned int a3@<S1>, float a4@<S2>, double *a5@<X2>, uint64_t a6@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  double *v10;

  if ((_DWORD)this)
    *(float *)&a3 = *(float *)&a3 * 0.5;
  v8 = a2;
  v9 = a3;
  DspLib::Biquad::Design::parametricSectionRegular((DspLib *)(((unint64_t)a2 << 32) | 0x15), a3 | 0x3F40000000000000, a5, (float32x4_t *)a6, a4);
  return DspLib::Biquad::Design::parametricSectionRegular((DspLib *)((v8 << 32) | 0x16), v9 ^ 0x80000000 | 0x3F40000000000000, v10, (float32x4_t *)(a6 + 20), a4);
}

void DspLib::Biquad::Design::fractionalOrderShelf(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, _QWORD *a7@<X8>)
{
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  DspLib::Biquad::Design *v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  float v22;
  void *v23;
  float32x2_t *v24;
  uint64_t v25;
  double v26;
  double v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _DWORD *v32;
  vDSP_Length v35;
  __int128 v36;
  void *__p[2];
  _OWORD v38[2];
  vDSP_Length v39;
  __int128 v40;
  void *v41[2];
  _OWORD v42[2];
  void *v43;
  _BYTE *v44;
  float32x2_t *__C;
  __int128 v46;
  float __A;
  _DWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
  {
    std::vector<DspLib::Biquad::Section>::vector(a7, 1uLL);
  }
  else if ((_DWORD)this)
  {
    if (a2 < 0.0 || a3 < 0.0)
    {
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      v32 = operator new(0x14uLL);
      a7[1] = v32 + 5;
      a7[2] = v32 + 5;
      v32[4] = 0;
      *(_OWORD *)v32 = xmmword_1B6627638;
      *a7 = v32;
    }
    else
    {
      DspLib::Biquad::Design::fractionalOrderShelfRegular(this, a2, a3, a4, a5, a6, (float32x2_t **)&v43);
      LOBYTE(v39) = 0;
      v40 = 0u;
      *(_OWORD *)v41 = 0u;
      memset(v42, 0, sizeof(v42));
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v39, 1uLL, 1uLL);
      LOBYTE(v35) = 0;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v38, 0, sizeof(v38));
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v35, 1uLL, 1uLL);
      DspLib::Biquad::Filter::setNumberOfStages(&v39, -858993459 * ((unint64_t)(v44 - (_BYTE *)v43) >> 2));
      DspLib::Biquad::Filter::setCoefficients((uint64_t)&v39, (uint64_t)v43, 0xCCCCCCCCCCCCCCCDLL * ((v44 - (_BYTE *)v43) >> 2), 0, 0x41uLL);
      v11 = logf((float)((float)(a2 * a2) * a2) * a3);
      v12 = expf(v11 * 0.25);
      v48[0] = sqrtf(v12 * a2);
      *(float *)&v48[1] = v12;
      if (a3 > a2)
        v15 = a3 / a2;
      else
        v15 = a2 / a3;
      *(float *)&v13 = a3 / a2;
      DspLib::Biquad::amplitudeResponse(&v39, (uint64_t)v48, 2uLL, (uint64_t)&__A, 2, 0, 44100.0, v13, v14);
      DspLib::amp2dB(&__A, 2uLL, 1.0);
      v16 = (DspLib::Biquad::Design *)std::vector<DspLib::Biquad::Section>::vector(a7, 0xCCCCCCCCCCCCCCCDLL * ((v44 - (_BYTE *)v43) >> 2));
      v17 = fmaxf(sqrtf(v15) * 0.999, 1.0);
      v18 = a4 * 0.5;
      v19 = 50;
      v20 = 1.0;
      do
      {
        v21 = v20 * a3;
        v22 = a2 / v20;
        if (a3 > a2)
        {
          v22 = v20 * a2;
          v21 = a3 / v20;
        }
        DspLib::Biquad::Design::fractionalOrderShelfRegular(v16, v22, v21, v18, a5, a6, &__C);
        v23 = (void *)*a7;
        if (*a7)
        {
          a7[1] = v23;
          operator delete(v23);
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
        }
        v24 = __C;
        *a7 = __C;
        v25 = v46;
        *(_OWORD *)(a7 + 1) = v46;
        DspLib::Biquad::Filter::setNumberOfStages(&v35, -858993459 * ((unint64_t)(v25 - (_QWORD)v24) >> 2));
        DspLib::Biquad::Filter::setCoefficients((uint64_t)&v35, *a7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a7[1] - *a7) >> 2), 0, 0x41uLL);
        DspLib::Biquad::amplitudeResponse(&v35, (uint64_t)v48, 2uLL, (uint64_t)&__C, 2, 0, 44100.0, v26, v27);
        DspLib::amp2dB((float *)&__C, 2uLL, 1.0);
        DspLib::multiply((float *)&__C, 2uLL, 2.0);
        if (*((float *)&__C + 1) == 0.0 || *(float *)&__C == 0.0)
          break;
        DspLib::divide(&__A, 2uLL, (const float *)&__C, 2, (float *)&__C);
        v28 = fabsf(sqrtf(*(float *)&__C * *((float *)&__C + 1)));
        v29 = INFINITY;
        if ((float)(*(float *)&__C * *((float *)&__C + 1)) != -INFINITY)
          v29 = v28;
        if (v29 < 1.001 && v29 > 0.999)
          break;
        v30 = v20 * sqrtf(v29);
        v31 = v17 >= v30 ? v30 : v17;
        v20 = v30 >= 1.0 ? v31 : 1.0;
        --v19;
      }
      while (v19);
      DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v38 + 8));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v42 + 8));
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
    }
  }
  else
  {
    DspLib::Biquad::Design::fractionalOrderShelfRegular(this, a2, a3, a4, a5, a6, (float32x2_t **)a7);
  }
}

void sub_1B60853C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void DspLib::Biquad::Design::fractionalOrderShelfRegular(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float32x2_t **a7@<X8>)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  uint64_t v20;
  long double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int32x2_t v26;
  int32x2_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  int8x8_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v44;
  int8x8_t v45;
  int32x2_t v46;
  int64x2_t v47;
  _QWORD *v48;
  float64x2_t v55;
  int64x2_t v56;
  int8x8_t v57;
  float32x2_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  uint64x2_t v66;
  float64x2_t v67;
  int32x2_t v68;
  float64x2_t v69;
  int8x8_t v70;
  unint64_t v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  __double2 v77;
  double v78;
  double v79;
  float v80;
  long double v81;
  float *v82;
  float *v83;
  float *v84;
  float *v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  double v98;
  float v99;
  double v100;
  float v101;
  float v102;
  float v103;
  float v104;
  double v105;
  float32x2_t *v106;
  double v107;
  float v108;
  float v109;
  float v110;
  _BYTE v111[80];
  _QWORD v112[10];
  _QWORD v113[10];
  _QWORD v114[10];
  _QWORD v115[11];
  DSPComplex v116;
  DSPComplex v117;
  DSPComplex v118;
  DSPComplex v119;

  v115[10] = *MEMORY[0x1E0C80C00];
  v10 = fminf(a5 * 0.499, 20000.0);
  if (v10 >= a2)
    v11 = a2;
  else
    v11 = v10;
  if (a2 >= 20.0)
    v12 = v11;
  else
    v12 = 20.0;
  if (v10 >= a3)
    v13 = a3;
  else
    v13 = v10;
  if (a3 >= 20.0)
    v14 = v13;
  else
    v14 = 20.0;
  v15 = 40.0;
  if (a4 <= 40.0)
    v15 = a4;
  if (a4 >= -40.0)
    v16 = v15;
  else
    v16 = -40.0;
  std::vector<DspLib::Biquad::Section>::vector(a7, 1uLL);
  if (v12 != v14)
  {
    v17 = v12;
    v110 = a5;
    if (v12 <= v14)
    {
      v107 = 0.0;
      v17 = v14;
    }
    else
    {
      v107 = v16;
      v16 = -v16;
      v12 = v14;
    }
    v18 = fabsf(v16);
    v108 = v17;
    v19 = log(v17);
    v109 = v12;
    v21 = log(v12);
    v22 = v18 / (v19 - v21) * 0.693147181 / 6.0 + v18 / (v19 - v21) * 0.693147181 / 6.0;
    if (v22 <= a6)
      v23 = v22;
    else
      v23 = a6;
    if (v22 >= 1.0)
      v24 = v23;
    else
      v24 = 1.0;
    MEMORY[0x1E0C80A78](v20);
    v29 = (char *)&v107 - ((v28 + 23) & 0xFFFFFFFFFFFFFFF0);
    v30 = v24;
    if ((v24 & 1) != 0)
      v31 = v30 + 1;
    else
      v31 = v24;
    v32 = v31 >> 1;
    if (v31 >= 2)
    {
      v33 = v30 + 1;
      v34 = v24 - (double)v30;
      if (v32 <= 1)
        v35 = 1;
      else
        v35 = v32;
      *(double *)&v36 = v25 - v34;
      *(float *)v27.i32 = (float)v30 * 0.5;
      *(float *)v26.i32 = (float)v33 * 0.5;
      v37 = (uint64x2_t)vdupq_n_s64(v35 - 1);
      v38 = (float32x2_t)vdup_lane_s32(v26, 0);
      v39 = (float32x2_t)vdup_lane_s32(v27, 0);
      v40 = (int8x8_t)vdup_n_s32((v24 & 1) == 0);
      v41 = (float64x2_t)vdupq_lane_s64(v36, 0);
      v42 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0);
      v43 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v30), 0);
      v44 = ((_DWORD)v35 + 1) & 0xFFFFFFFE;
      v45 = vmvn_s8(v40);
      v46 = (int32x2_t)0x100000000;
      v47 = (int64x2_t)xmmword_1B6626830;
      v48 = v29 + 8;
      __asm
      {
        FMOV            V20.2D, #2.0
        FMOV            V21.2D, #-1.0
        FMOV            V22.2D, #0.5
      }
      v55 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
      v56 = vdupq_n_s64(2uLL);
      do
      {
        v57 = (int8x8_t)vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v47));
        v58 = vcvt_f32_u32((uint32x2_t)vadd_s32(vmovn_s64(v47), (int32x2_t)0x100000001));
        v59 = (int8x8_t)vcgt_f32(v58, v38);
        v60 = vand_s8(v57, v40);
        v61 = vand_s8(v57, v45);
        v62 = vbic_s8(v61, v59);
        v63 = (int32x2_t)vand_s8(v61, v59);
        v64 = (int32x2_t)vmvn_s8((int8x8_t)v46);
        v65 = vsub_s32(vcltz_s32(vshl_n_s32(v63, 0x1FuLL)), v64);
        v66.i64[0] = v65.u32[0];
        v66.i64[1] = v65.u32[1];
        v67 = vmulq_f64(vsubq_f64(_Q22, vdivq_f64(vmulq_f64(vmlaq_f64(_Q21, _Q20, vcvtq_f64_u64(v66)), _Q22), v43)), v55);
        v68 = vsub_s32((int32x2_t)vand_s8(v60, (int8x8_t)vcgt_f32(v58, v39)), v64);
        v66.i64[0] = v68.u32[0];
        v66.i64[1] = v68.u32[1];
        v69 = vmlaq_f64(vmulq_n_f64(vmulq_f64(vsubq_f64(_Q22, vdivq_f64(vmulq_f64(vmlaq_f64(_Q21, _Q20, vcvtq_f64_u64(v66)), _Q22), v42)), v55), v34), v67, v41);
        v70 = vorr_s8(vorr_s8(v60, v62), (int8x8_t)v63);
        if ((v70.i8[0] & 1) != 0)
          *(v48 - 1) = *(_QWORD *)&v69.f64[0];
        if ((v70.i8[4] & 1) != 0)
          *v48 = *(_QWORD *)&v69.f64[1];
        v47 = vaddq_s64(v47, v56);
        v46 = vadd_s32(v46, (int32x2_t)0x200000002);
        v48 += 2;
        v44 -= 2;
      }
      while (v44);
    }
    v71 = (v32 + 1);
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a7, v71);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v115, v71, 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v114, v71, 0);
    v72 = v16 / (v24 * 40.0);
    if (v31 >= 2)
    {
      v73 = 0;
      if (v32 <= 1)
        v74 = 1;
      else
        v74 = v32;
      do
      {
        v75 = __exp10(-v72);
        v76 = __exp10(v72);
        v77 = __sincos_stret(*(double *)&v29[8 * v73]);
        v116.real = v77.__cosval * -v75;
        v116.imag = v75 * v77.__sinval;
        DspLib::ComplexSpan::setElement(v115, v73, v116);
        v117.real = -(v76 * v77.__cosval);
        v117.imag = v76 * v77.__sinval;
        DspLib::ComplexSpan::setElement(v114, v73++, v117);
      }
      while (v74 != v73);
    }
    v78 = ceil(v24);
    v79 = floor(v24);
    if (((int)v24 & 1) == 0)
      v78 = v79;
    v80 = v72 * (v78 - v24);
    v118.real = -__exp10f(v80);
    v118.imag = 0.0;
    DspLib::ComplexSpan::setElement(v115, v32, v118);
    v119.real = -__exp10f(-v80);
    v119.imag = 0.0;
    DspLib::ComplexSpan::setElement(v114, v32, v119);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v113, (v32 + 1), 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v112, (v32 + 1), 0);
    v81 = tan(sqrtf(v108 * v109) * 6.28318531 / v110 * 0.5);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v111, (v32 + 1), 0);
    DspLib::ComplexVector::operator=(v113, v115);
    *(float *)&v81 = v81;
    DspLib::operator*=(v113, *(float *)&v81);
    DspLib::operator+=((uint64_t)v113, 1.0);
    DspLib::ComplexVector::operator=(v111, v115);
    DspLib::operator*=(v111, -*(float *)&v81);
    DspLib::operator+=((uint64_t)v111, 1.0);
    DspLib::operator/=(v113, v111);
    DspLib::ComplexVector::operator=(v112, v114);
    DspLib::operator*=(v112, *(float *)&v81);
    DspLib::operator+=((uint64_t)v112, 1.0);
    DspLib::ComplexVector::operator=(v111, v114);
    DspLib::operator*=(v111, -*(float *)&v81);
    DspLib::operator+=((uint64_t)v111, 1.0);
    DspLib::operator/=(v112, v111);
    v82 = (float *)v113[0];
    v83 = (float *)v113[1];
    v84 = (float *)v112[0];
    v85 = (float *)v112[1];
    v86 = (float *)&(*a7)[1];
    do
    {
      v87 = *v82++;
      v88 = v87;
      v89 = *v83++;
      v90 = v89;
      v91 = -v88;
      v92 = *v84++;
      v93 = v92;
      v94 = -v92;
      v95 = *v85++;
      v96 = v95;
      _ZF = v90 == 0.0;
      v98 = (float)-v88;
      v99 = v88 * -2.0;
      v100 = (float)-v95;
      v101 = (float)-v90 * (float)-v90 + v98 * v98;
      if (_ZF)
        v99 = v91;
      v102 = v93 * -2.0;
      if (_ZF)
        v101 = 0.0;
      v103 = v100 * v100 + v94 * v94;
      if (v96 == 0.0)
      {
        v102 = v94;
        v103 = 0.0;
      }
      v104 = (float)((float)(1.0 - v102) + v103) / (float)((float)(1.0 - v99) + v101);
      v86[1] = v99;
      v86[2] = v101;
      *(v86 - 2) = 1.0 / v104;
      *(v86 - 1) = v102 / v104;
      *v86 = v103 / v104;
      v86 += 5;
      --v71;
    }
    while (v71);
    v105 = __exp10(v107 / 20.0);
    v106 = *a7;
    *v106 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(**a7), v105));
    *(float *)&v105 = v105 * v106[1].f32[0];
    v106[1].i32[0] = LODWORD(v105);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v111);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v112);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v113);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v114);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v115);
  }
}

void sub_1B6085AFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 104));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 184));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 264));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v3 - 232));
  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void DspLib::Biquad::Design::fractionalOrderBandShelf(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>, float a8@<S6>, void **a9@<X8>)
{
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  void *__p;
  _BYTE *v20;

  DspLib::Biquad::Design::fractionalOrderShelf(this, a2, a3, -a6, a8, a7, &__p);
  DspLib::Biquad::Design::fractionalOrderShelf(this, a4, a5, a6, a8, a7, &v17);
  std::vector<DspLib::Biquad::Section>::vector(a9, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)__p) >> 2) - 0x3333333333333333 * ((v18 - v17) >> 2));
  if (v20 != __p)
    memmove(*a9, __p, v20 - (_BYTE *)__p);
  v16 = v17;
  if (v18 != v17)
  {
    memmove((char *)*a9 + v20 - (_BYTE *)__p, v17, v18 - v17);
    v16 = v17;
  }
  if (v16)
  {
    v18 = v16;
    operator delete(v16);
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_1B6085C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::Biquad::Design::allpass@<X0>(DspLib::Biquad::Design *this@<X0>, unsigned int a2@<S0>, unsigned int a3@<S1>, float a4@<S2>, unint64_t a5@<X1>, _QWORD *a6@<X8>)
{
  float v10;
  unsigned int v11;
  uint64_t result;
  double *v13;
  unsigned int v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t v18;
  __int32 v19;

  v10 = (float)this;
  if (this > 0x13)
    v10 = 19.9;
  if (!(_DWORD)this)
    v10 = 1.0;
  v11 = vcvtas_u32_f32(v10);
  LODWORD(a5) = vcvtps_u32_f32((float)roundf(v10) * 0.5);
  result = (uint64_t)std::vector<DspLib::Biquad::Section>::vector(a6, a5);
  if (v11 >= 2)
  {
    v15 = 0;
    v14 = v11 >> 1;
    do
    {
      result = DspLib::Biquad::Design::parametricSectionRegular((DspLib *)(((unint64_t)a2 << 32) | 0xB), (unint64_t)a3 << 32, v13, &v18, a4);
      v16 = (float32x4_t *)(*a6 + v15);
      *v16 = v18;
      v16[1].i32[0] = v19;
      v15 += 20;
    }
    while (20 * (v11 >> 1) != v15);
  }
  else
  {
    v14 = 0;
  }
  if ((v11 & 1) != 0)
  {
    result = DspLib::Biquad::Design::parametricSectionRegular((DspLib *)(((unint64_t)a2 << 32) | 0xA), (unint64_t)a3 << 32, v13, &v18, a4);
    v17 = (float32x4_t *)(*a6 + 20 * v14);
    *v17 = v18;
    v17[1].i32[0] = v19;
  }
  return result;
}

void sub_1B6085E08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *DspLib::Biquad::Design::allpassFromPoles@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t *result;
  uint64_t v8;
  float *v9;
  unsigned int v10;
  float v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;

  result = std::vector<DspLib::Biquad::Section>::vector(a4, a2);
  if (a2)
  {
    v8 = *result;
    v9 = (float *)(a1 + 16);
    v10 = 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      v16 = *v9;
      if ((a3 & 1) != 0 || fabsf(v16) > 1.0e-12 || fabsf(*(v9 - 2)) > 1.0e-12)
      {
        *(float *)v8 = v16;
        v17 = *((_DWORD *)v9 - 1);
        v18 = __PAIR64__(HIDWORD(_D0), v17);
      }
      else
      {
        v17 = *((_DWORD *)v9 - 1);
        *(_DWORD *)v8 = v17;
        v18 = 1065353216;
      }
      *(_QWORD *)(v8 + 4) = v18;
      *(_DWORD *)(v8 + 12) = v17;
      *(float *)(v8 + 16) = v16;
      v8 += 20;
      v19 = a2 > v10++;
      v9 += 5;
    }
    while (v19);
  }
  return result;
}

float DspLib::Biquad::Design::phaseComplement@<S0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  float result;
  uint64_t v5;
  uint64_t v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section const*>,std::__wrap_iter<DspLib::Biquad::Section const*>>(a3, a1, (uint64_t)a1 + 20 * a2, 0xCCCCCCCCCCCCCCCDLL * ((20 * a2) >> 2));
  v5 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    do
    {
      result = *(float *)v5;
      *(_DWORD *)v5 = *(_DWORD *)(v5 + 8);
      *(float *)(v5 + 8) = result;
      v5 += 20;
    }
    while (v5 != v6);
  }
  return result;
}

void DspLib::Biquad::Design::integrator(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, uint64_t a5@<X8>)
{
  int v8;
  __double2 v9;
  double v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  double v19;
  double v20;
  double v21;
  float v22;

  if (this >= 2)
    v8 = 2;
  else
    v8 = (int)this;
  if (!(_DWORD)this || v8 == 1)
  {
    v14 = a3 * 3.14159265 / a4;
    v15 = cos(a2 * 6.28318531 / a4);
    v16 = v14 * sqrt(v15 * 2.0 + 2.0) / ((float)(a3 / a2) * 0.707106781);
    v17 = v15 * v15 + -1.0 + v16 * v16;
    if (v17 >= 0.0)
    {
      v19 = sqrt(v17);
      v20 = v15 + v19;
      v21 = v15 - v19;
      if (v20 <= 1.0)
        v21 = v20;
      v18 = v21;
    }
    else
    {
      v18 = 0.999;
    }
    v22 = v14 + v14;
    *(float *)a5 = v22;
    *(_DWORD *)(a5 + 4) = 0;
    *(_DWORD *)(a5 + 8) = 0;
    *(float *)(a5 + 12) = -v18;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    v9 = __sincos_stret(a2 * 6.28318531 / a4);
    v10 = 1.0 / (v9.__sinval * 0.62275067 + 1.0);
    v11 = ((1.0 - v9.__cosval) * 0.5 * v10 + (1.0 - v9.__cosval) * 0.5 * v10 + (1.0 - v9.__cosval) * v10)
        * (float)((float)(a3 / a2) * (float)(a3 / a2));
    *(float *)a5 = v11;
    *(_DWORD *)(a5 + 4) = 0;
    *(_DWORD *)(a5 + 8) = 0;
    v12 = v9.__cosval * -2.0 * v10;
    v13 = (1.0 - v9.__sinval * 0.62275067) * v10;
    *(float *)(a5 + 12) = v12;
    *(float *)(a5 + 16) = v13;
  }
}

void DspLib::Biquad::Design::phaseEqualizer(double a1@<D0>, double a2@<D1>, double a3@<D2>, double a4@<D3>, uint64_t a5@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  double *v17;
  float v18;
  int v19;
  double v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *__p[2];
  _OWORD v36[4];
  void **v37;

  v7 = 192000.0;
  if (a4 <= 192000.0)
    v7 = a4;
  if (a4 >= 8000.0)
    v8 = v7;
  else
    v8 = 8000.0;
  v9 = v8 * 0.49;
  if (v8 * 0.49 >= a1)
    v9 = a1;
  if (a1 >= 10.0)
    v10 = v9;
  else
    v10 = 10.0;
  v11 = 20.0;
  if (a2 <= 20.0)
    v11 = a2;
  if (a2 >= 0.5)
    v12 = v11;
  else
    v12 = 0.5;
  v13 = 180.0;
  if (a3 <= 180.0)
    v13 = a3;
  LOBYTE(v33) = 0;
  v34 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v36, 0, 32);
  if (a3 >= -180.0)
    v14 = v13;
  else
    v14 = -180.0;
  memset(&v36[2], 0, 32);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)&v33, 2uLL, v8, 1uLL);
  v15 = dbl_1B66273C0[v14 >= 0.0];
  *(float *)&v16 = v12;
  v17 = (double *)((unint64_t)v16 << 32);
  v18 = v10;
  v31 = v18;
  v19 = 19;
  v20 = 0.0014 / v12;
  do
  {
    *(float *)&v21 = v10 / v15;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)&v33, ((unint64_t)v21 << 32) | 0xB, v17, 0, 0);
    *(float *)&v22 = v10 * v15;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)&v33, ((unint64_t)v22 << 32) | 0xB, v17, 0, 1uLL);
    *(float *)&v37 = v31;
    v32 = 0;
    DspLib::Biquad::phaseResponse(&v33, (uint64_t)&v37, 1uLL, (uint64_t)&v32 + 4, 1, 0, *(double *)&v36[2], v23, v24);
    DspLib::Biquad::phaseResponse(&v33, (uint64_t)&v37, 1uLL, (uint64_t)&v32, 1, 1, *(double *)&v36[2], v25, v26);
    v27 = (float)(*(float *)&v32 - *((float *)&v32 + 1));
    v28 = v27 * 57.2957795 + 360.0;
    v29 = v27 * 57.2957795 + -360.0;
    if (v14 >= 0.0)
      v29 = v28;
    if (vabdd_f64(v14, v29) < 1.0)
      break;
    v15 = v15 * ((v14 - v29) * v20 + 1.0);
    if (v15 > 3.0)
      break;
  }
  while (v15 >= 0.333333333 && v19-- != 0);
  DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)&v33, 0, 0, (float32x4_t *)a5);
  DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)&v33, 0, 1, (float32x4_t *)(a5 + 20));
  v37 = (void **)&v36[2] + 1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v36 + 8));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B6086390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DspLib::Biquad::ParametricFilter::~ParametricFilter((DspLib::Biquad::ParametricFilter *)va);
  _Unwind_Resume(a1);
}

void DspLib::Biquad::ParametricFilter::~ParametricFilter(DspLib::Biquad::ParametricFilter *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::ParametricFilter *)((char *)this + 48));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

float *DspLib::Biquad::Design::aWeighting@<X0>(double a1@<D0>, _OWORD *a2@<X8>)
{
  uint64_t v5;
  float *result;

  v5 = 0;
  *a2 = xmmword_1B6627578;
  a2[1] = unk_1B6627588;
  a2[2] = xmmword_1B6627598;
  *(_OWORD *)((char *)a2 + 44) = *(__int128 *)((char *)&xmmword_1B6627598 + 12);
  do
  {
    result = DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)((char *)a2 + v5), a1);
    v5 += 20;
  }
  while (v5 != 60);
  return result;
}

float *DspLib::Biquad::Design::cWeighting@<X0>(double a1@<D0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  float *result;

  v5 = 0;
  *(_OWORD *)a2 = xmmword_1B66275B4;
  *(_OWORD *)(a2 + 16) = unk_1B66275C4;
  *(_QWORD *)(a2 + 32) = 0x4FAEF1FF4815A495;
  do
  {
    result = DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)(a2 + v5), a1);
    v5 += 20;
  }
  while (v5 != 40);
  return result;
}

void DspLib::Biquad::Design::kWeighting(double a1@<D0>, uint64_t a2@<X8>)
{
  uint64_t i;
  uint64_t v6;
  float v7;
  float v8;
  long double v9;
  long double v10;
  long double v11;
  long double v12;
  long double v13;
  long double v14;
  long double v15;
  long double v16;
  float v17;
  long double v18;
  long double v19;

  for (i = 0; i != 40; i += 20)
  {
    v6 = a2 + i;
    *(_DWORD *)v6 = 1065353216;
    *(_QWORD *)(v6 + 12) = 0;
    *(_QWORD *)(v6 + 4) = 0;
  }
  if (a1 == 48000.0)
  {
    *(_OWORD *)a2 = xmmword_1B66273D0;
    *(_DWORD *)(a2 + 16) = 1060864988;
    v7 = 0.99007;
    v8 = -1.99;
  }
  else
  {
    v9 = tan(5284.07858 / a1);
    v10 = v9 / 0.707175237 + 1.0 + v9 * v9;
    v11 = v9 * 1.25872093 / 0.707175237;
    v12 = (v11 + 1.5848647 + v9 * v9) / v10;
    v13 = (v9 * v9 + -1.5848647 + v9 * v9 + -1.5848647) / v10;
    v14 = (1.5848647 - v11 + v9 * v9) / v10;
    v15 = (v9 * v9 + -1.0 + v9 * v9 + -1.0) / v10;
    v16 = (1.0 - v9 / 0.707175237 + v9 * v9) / v10;
    v17 = v12;
    *(float *)&v10 = v13;
    *(float *)&v14 = v14;
    *(float *)&v15 = v15;
    *(float *)&v16 = v16;
    *(float *)a2 = v17;
    *(_DWORD *)(a2 + 4) = LODWORD(v10);
    *(_DWORD *)(a2 + 8) = LODWORD(v14);
    *(_DWORD *)(a2 + 12) = LODWORD(v15);
    *(_DWORD *)(a2 + 16) = LODWORD(v16);
    v18 = tan(119.806115 / a1);
    v19 = v18 / 0.500327037 + 1.0 + v18 * v18;
    v8 = (v18 * v18 + -1.0 + v18 * v18 + -1.0) / v19;
    v7 = (1.0 - v18 / 0.500327037 + v18 * v18) / v19;
  }
  *(_QWORD *)(a2 + 20) = 0xC00000003F800000;
  *(_DWORD *)(a2 + 28) = 1065353216;
  *(float *)(a2 + 32) = v8;
  *(float *)(a2 + 36) = v7;
}

void DspLib::Biquad::Design::fromSDomain(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, float32x2_t **a5@<X8>, float a6@<S0>, double a7@<D1>)
{
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  unsigned int v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  unint64_t v31;
  float v32;
  float v33;
  unsigned int v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  float32x2_t *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  float v66;
  unint64_t v67;
  float v68;
  float32x2_t *v69;
  float *v70;
  float v71;
  float *v72;
  float v73;
  _QWORD v74[10];
  _QWORD v75[2];
  unint64_t v76;
  _QWORD v77[10];
  _QWORD v78[2];
  unint64_t v79;
  _QWORD v80[2];
  unint64_t v81;
  _QWORD v82[2];
  unint64_t v83;
  _QWORD v84[2];
  int v85;
  float v86;
  int v87;
  float v88;
  uint64_t v89;
  DSPComplex v90;
  DSPComplex v91;

  v89 = *MEMORY[0x1E0C80C00];
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v82, a2, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v80, a4, 0);
  v13 = 1.0;
  v14 = 1.0;
  if (v83)
  {
    v15 = 0;
    v16 = a7 + a7;
    v17 = 1.0 / v16;
    v18 = 1;
    do
    {
      v19 = (float *)(a1 + 8 * v15);
      v20 = *v19;
      v21 = v19[1];
      v22 = v17 * *v19;
      v23 = v17 * v21;
      v24 = v22 + 1.0;
      v25 = 1.0 - v22;
      v26 = (float)(v24 * v25) - (float)(v23 * v23);
      v27 = (float)((float)(v17 * v21) * v25) + (float)(v24 * (float)(v17 * v21));
      v28 = 1.0 / (float)((float)(v23 * v23) + (float)(v25 * v25));
      v90.real = v26 * v28;
      v90.imag = v27 * v28;
      DspLib::ComplexSpan::setElement(v82, v15, v90);
      v29 = (float)(v21 * v21) + (float)(v20 * v20);
      if (v21 == 0.0)
        v29 = v20;
      v14 = v14 * fabsf(v29);
      v15 = v18;
      v30 = v83 > v18++;
    }
    while (v30);
  }
  if (v81)
  {
    v31 = 0;
    v32 = a7 + a7;
    v33 = 1.0 / v32;
    v34 = 1;
    v13 = 1.0;
    do
    {
      v35 = (float *)(a3 + 8 * v31);
      v36 = *v35;
      v37 = v35[1];
      v38 = v33 * *v35;
      v39 = v33 * v37;
      v40 = v38 + 1.0;
      v41 = 1.0 - v38;
      v42 = (float)(v40 * v41) - (float)(v39 * v39);
      v43 = (float)((float)(v33 * v37) * v41) + (float)(v40 * (float)(v33 * v37));
      v44 = 1.0 / (float)((float)(v39 * v39) + (float)(v41 * v41));
      v91.real = v42 * v44;
      v91.imag = v43 * v44;
      DspLib::ComplexSpan::setElement(v80, v31, v91);
      v45 = (float)(v37 * v37) + (float)(v36 * v36);
      if (v37 == 0.0)
        v45 = v36;
      v13 = v13 * fabsf(v45);
      v31 = v34;
      v30 = v81 > v34++;
    }
    while (v30);
  }
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v78, 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v77, 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v75, 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v74, 0, 0);
  v46 = DspLib::Biquad::Design::fromSDomain(std::span<DSPComplex const,18446744073709551615ul>,std::span<DSPComplex const,18446744073709551615ul>,float,double)::$_2::operator()(v82, (DspLib::ComplexVector *)v78, (DspLib::ComplexVector *)v77);
  v47 = DspLib::Biquad::Design::fromSDomain(std::span<DSPComplex const,18446744073709551615ul>,std::span<DSPComplex const,18446744073709551615ul>,float,double)::$_2::operator()(v80, (DspLib::ComplexVector *)v75, (DspLib::ComplexVector *)v74);
  if (v46 <= v47)
    v48 = v47;
  else
    v48 = v46;
  std::vector<DspLib::Biquad::Section>::vector(a5, v48);
  v49 = a5[1];
  if (v49 == *a5)
  {
    v60 = 0;
  }
  else
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 1;
    do
    {
      memset(v84, 0, 12);
      if (v77[2] <= (unint64_t)v51)
      {
        v57 = v52 + 1;
        if (v79 <= v57)
        {
          LODWORD(v84[0]) = 1065353216;
          if (v79 == v57)
          {
            v55 = -*(float *)(v78[0] + 4 * v52);
            *((float *)v84 + 1) = v55;
            LODWORD(v84[1]) = 0;
            ++v52;
          }
          else
          {
            *(_QWORD *)((char *)v84 + 4) = 0;
            v55 = 0.0;
          }
        }
        else
        {
          v87 = 1065353216;
          v88 = -*(float *)(v78[0] + 4 * v52);
          v85 = 1065353216;
          v86 = -*(float *)(v78[0] + 4 * v57);
          DspLib::convolve((float *)v84, 3, (uint64_t)&v87, 2uLL, (uint64_t)&v85, 2);
          v52 += 2;
          v55 = *((float *)v84 + 1);
        }
      }
      else
      {
        v54 = DspLib::ComplexSpan::operator[](v77, v51);
        LODWORD(v84[0]) = 1065353216;
        v55 = v54 * -2.0;
        *((float *)v84 + 1) = v54 * -2.0;
        *(float *)&v84[1] = (float)(v56 * v56) + (float)(v54 * v54);
        ++v51;
      }
      v49 = *a5;
      v58 = (uint64_t)*a5 + 20 * v50;
      *(float *)(v58 + 12) = v55;
      *(_DWORD *)(v58 + 16) = v84[1];
      v50 = v53;
      v59 = a5[1];
      v60 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v59 - (char *)v49) >> 2);
      v30 = v60 > v53++;
    }
    while (v30);
    if (v59 != v49)
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 1;
      while (1)
      {
        memset(v84, 0, 12);
        if (v74[2] > (unint64_t)v62)
          break;
        v67 = v63 + 1;
        if (v76 <= v67)
        {
          LODWORD(v84[0]) = 1065353216;
          if (v76 != v67)
          {
            *(_QWORD *)((char *)v84 + 4) = 0;
            goto LABEL_33;
          }
          *((float *)v84 + 1) = -*(float *)(v75[0] + 4 * v63);
          LODWORD(v84[1]) = 0;
          v68 = 1.0;
          ++v63;
        }
        else
        {
          v87 = 1065353216;
          v88 = -*(float *)(v75[0] + 4 * v63);
          v85 = 1065353216;
          v86 = -*(float *)(v75[0] + 4 * v67);
          DspLib::convolve((float *)v84, 3, (uint64_t)&v87, 2uLL, (uint64_t)&v85, 2);
          v63 += 2;
          v68 = *(float *)v84;
        }
LABEL_34:
        v69 = *a5;
        v70 = (float *)*a5 + 5 * v61;
        *v70 = v68;
        v70[1] = *((float *)v84 + 1);
        v70[2] = *(float *)&v84[1];
        v61 = v64;
        v49 = a5[1];
        v60 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v49 - (char *)v69) >> 2);
        v30 = v60 > v64++;
        if (!v30)
          goto LABEL_38;
      }
      v65 = DspLib::ComplexSpan::operator[](v74, v62);
      LODWORD(v84[0]) = 1065353216;
      *((float *)v84 + 1) = v65 * -2.0;
      *(float *)&v84[1] = (float)(v66 * v66) + (float)(v65 * v65);
      ++v62;
LABEL_33:
      v68 = 1.0;
      goto LABEL_34;
    }
  }
  v69 = v49;
LABEL_38:
  if (COERCE_INT(fabs((float)(v13 / v14) * a6)) >= 2139095040)
    goto LABEL_46;
  if (v49 == v69)
  {
    v71 = 1.0;
  }
  else
  {
    v71 = 1.0;
    v72 = (float *)v69;
    do
    {
      v71 = v71 * (float)((float)((float)(*v72 + v72[1]) + v72[2]) / (float)((float)(v72[3] + 1.0) + v72[4]));
      v72 += 5;
    }
    while (v72 != (float *)((char *)v69 + 20 * v60));
  }
  v73 = (float)((float)(v13 / v14) * a6) / fabsf(v71);
  *v69 = vmul_n_f32(*v69, v73);
  v69[1].f32[0] = v73 * v69[1].f32[0];
  if ((DspLib::Biquad::validate((__int128 *)v69, v60) & 1) == 0)
LABEL_46:
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a5, 0);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v74);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v75);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v77);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v78);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v80);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v82);
}

void sub_1B6086BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;
  void *v62;

  v62 = *(void **)v60;
  if (*(_QWORD *)v60)
  {
    *(_QWORD *)(v60 + 8) = v62;
    operator delete(v62);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a10);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a20);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a30);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a40);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a50);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a60);
  _Unwind_Resume(a1);
}

uint64_t DspLib::Biquad::Design::fromSDomain(std::span<DSPComplex const,18446744073709551615ul>,std::span<DSPComplex const,18446744073709551615ul>,float,double)::$_2::operator()(_QWORD *a1, DspLib::ComplexVector *a2, DspLib::ComplexVector *a3)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;

  if (a1[2])
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    do
    {
      DspLib::ComplexSpan::operator[](a1, v6);
      if (v10 == 0.0)
        ++v7;
      else
        ++v8;
      v6 = v9;
      v11 = a1[2] > (unint64_t)v9++;
    }
    while (v11);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  DspLib::ComplexVector::setLength(a2, v7);
  DspLib::ComplexVector::setLength(a3, v8);
  if (a1[2])
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = DspLib::ComplexSpan::operator[](a1, v12);
      if (v17 == 0.0)
        DspLib::ComplexSpan::setElement(a2, v13++, *(DSPComplex *)&v16);
      else
        DspLib::ComplexSpan::setElement(a3, v14++, *(DSPComplex *)&v16);
      v12 = v15;
      v11 = a1[2] > (unint64_t)v15++;
    }
    while (v11);
  }
  return v8 + vcvtps_u32_f32((float)v7 * 0.5);
}

uint64_t DspLib::Biquad::Design::iso226LoudnessEQ@<X0>(float a1@<S0>, float a2@<S1>, float a3@<S2>, double a4@<D3>, uint64_t a5@<X8>)
{
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float v15;
  double *v16;
  double *v17;
  double *v18;
  uint64_t v20;
  float v21;
  float v22;

  v22 = a1;
  v21 = 0.0;
  v20 = 0;
  DspLib::poly(DspLib::Biquad::Design::iso226LoudnessEQ(float,float,float,double)::kLowShelfGainPolynomial, 4, &v22, 1uLL, &v21);
  DspLib::poly(DspLib::Biquad::Design::iso226LoudnessEQ(float,float,float,double)::kBellGainPolynomial, 4, &v22, 1uLL, (float *)&v20 + 1);
  DspLib::poly(DspLib::Biquad::Design::iso226LoudnessEQ(float,float,float,double)::kHighShelfGainPolynomial, 4, &v22, 1uLL, (float *)&v20);
  if (v21 >= 0.0)
    v10 = a3;
  else
    v10 = a2;
  v11 = v10 * sinf(fminf(v21 / v10, 1.5708));
  v21 = v11;
  if (*((float *)&v20 + 1) >= 0.0)
    v12 = a3;
  else
    v12 = a2;
  v13 = v12 * sinf(fminf(*((float *)&v20 + 1) / v12, 1.5708));
  *((float *)&v20 + 1) = v13;
  if (*(float *)&v20 < 0.0)
    a3 = a2;
  *(float *)&v14 = a3 * sinf(fminf(*(float *)&v20 / a3, 1.5708));
  LODWORD(v20) = v14;
  v15 = a4;
  DspLib::Biquad::Design::parametricSectionRegular((DspLib *)0x430C000000000013, LODWORD(v11) | 0x3ECCCCCD00000000, v16, (float32x4_t *)a5, v15);
  DspLib::Biquad::Design::parametricSectionRegular((DspLib *)0x4525600000000010, LODWORD(v13) | 0x3ECCCCCD00000000, v17, (float32x4_t *)(a5 + 20), v15);
  return DspLib::Biquad::Design::parametricSectionRegular((DspLib *)0x466A600000000011, v14 | 0x3F33333300000000, v18, (float32x4_t *)(a5 + 40), v15);
}

double DspLib::Biquad::Design::easttyBaxandallToneControl@<D0>(DspLib::Biquad::Design *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double *a5@<X8>)
{
  int v6;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double result;

  v6 = (int)this;
  v8 = tan(a4 * 3.14159265 / a2);
  v9 = exp(a3 * 0.11512925);
  if (v9 > 0.9999999 && v9 < 1.0000001)
    v11 = 1.0000001;
  else
    v11 = v9;
  v12 = sqrt(v11);
  v13 = 1.0;
  v14 = sqrt(v11 * (v11 + 34.0) + 1.0);
  v15 = log(v11);
  v16 = exp((v14 + (v11 + 1.0) * 3.0) * v15 / ((v11 + -1.0) * -8.0));
  v17 = sqrt(v12);
  v18 = v17 * v16;
  v19 = v16 / v17;
  if (v6)
  {
    v20 = v18 * v8;
    v21 = v19 * v8;
    v13 = v11;
  }
  else
  {
    v20 = v8 / v18;
    v21 = v8 / v19;
  }
  v22 = sqrt((v11 + v12 * 4.0 + 1.0 + v14) / (v12 * 8.0));
  v23 = v22 + v22;
  v24 = v23 * v20 + 1.0 + v20 * v20;
  v25 = v23 * v21 + 1.0 + v21 * v21;
  v26 = v13 * (v21 * v21 * v24 / (v20 * v20 * v25));
  *a5 = v26;
  a5[1] = (v20 * v20 + -1.0) * (v26 + v26) / v24;
  a5[2] = (v20 * v20 - v23 * v20 + 1.0) * v26 / v24;
  a5[3] = (v21 * v21 + -1.0 + v21 * v21 + -1.0) / v25;
  result = (v21 * v21 - v23 * v21 + 1.0) / v25;
  a5[4] = result;
  return result;
}

double DspLib::Biquad::Design::matchedZtransform(DspLib::Biquad::Design *this, double a2, double a3, double a4, double *a5, double *a6)
{
  float v10;
  float v11;
  float v12;
  float v13;
  __float2 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double result;

  v10 = 1.0 / (a3 + a3);
  v11 = 1.0 / (a3 * 4.0 * a3) + -1.0;
  v12 = sqrtf(sqrtf((float)(v11 * v11) + 0.0));
  v13 = atan2f(0.0, v11);
  v14 = __sincosf_stret(v13 * 0.5);
  v15 = (float)(v12 * v14.__cosval) + v10;
  v16 = v10 - (float)(v12 * v14.__cosval);
  v17 = -(sqrt(sqrt(a4)) * a2);
  *(float *)&a4 = (float)((float)(v12 * v14.__sinval) + 0.0) * v17;
  *(float *)&a2 = v16 * v17;
  v18 = (float)(0.0 - (float)(v12 * v14.__sinval)) * v17;
  v19 = (float)(v16 * v17) + (float)(v15 * v17);
  v20 = v18 + *(float *)&a4;
  v21 = expf(v15 * v17);
  v22 = v21 * cosf(*(float *)&a4);
  LODWORD(a4) = expf(*(float *)&a2);
  *(double *)this = (float)-(float)((float)(*(float *)&a4 * cosf(v18)) + v22);
  LODWORD(a4) = expf(v19);
  result = (float)(*(float *)&a4 * cosf(v20));
  *a5 = result;
  return result;
}

float DspLib::Biquad::Design::analogBell(DspLib::Biquad::Design *this, DSPComplex a2, double a3, double a4)
{
  float v4;
  float v5;
  float v6;
  float v7;

  v4 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  v5 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  v6 = a3 / a4;
  v7 = 1.0 / a4;
  return (float)((float)((float)(v5 + (float)((float)(a2.imag * v6) + 0.0))
                       * (float)(v5 + (float)((float)(a2.imag * v7) + 0.0)))
               + (float)((float)(v4 + (float)((float)(a2.real * v6) + 1.0))
                       * (float)(v4 + (float)((float)(a2.real * v7) + 1.0))))
       * (float)(1.0
               / (float)((float)((float)(v5 + (float)((float)(a2.imag * v7) + 0.0))
                               * (float)(v5 + (float)((float)(a2.imag * v7) + 0.0)))
                       + (float)((float)(v4 + (float)((float)(a2.real * v7) + 1.0))
                               * (float)(v4 + (float)((float)(a2.real * v7) + 1.0)))));
}

double DspLib::Biquad::Design::secondOrderFIRWithGains(DspLib::Biquad::Design *this, double a2, double a3, double a4, double *a5, double *a6, double *a7)
{
  float v12;
  float v13;
  float v14;
  const DSPComplex *v15;
  __float2 v16;
  float v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  const DSPComplex *v23;
  __float2 v24;
  float v25;
  float v26;
  double v27;
  double result;
  _DWORD v29[2];
  _DWORD v30[2];

  v12 = a3 * -2.0 * a3 + a2 * a2 + (a4 + a4) * a4;
  v13 = sqrtf(sqrtf((float)(v12 * v12) + 0.0));
  v14 = atan2f(0.0, v12);
  v16 = __sincosf_stret(v14 * 0.5);
  v17 = a2;
  v18 = v17 - (float)(v13 * v16.__cosval);
  *(float *)v30 = v18;
  *(float *)&v30[1] = -(float)(v13 * v16.__sinval);
  if (v12 < 0.0)
    v18 = DspLib::abs((DspLib *)v30, v15);
  v19 = (float)(v18 * 0.5);
  *a5 = v19;
  v20 = a3 * 12.0 * a3 + a2 * -3.0 * a2 + a2 * -6.0 * v19 + v19 * -3.0 * v19;
  v21 = sqrtf(sqrtf((float)(v20 * v20) + 0.0));
  v22 = atan2f(0.0, v20);
  v24 = __sincosf_stret(v22 * 0.5);
  v25 = (a2 - v19) * 3.0;
  v26 = v25 - (float)(v24.__cosval * v21);
  *(float *)v29 = v26;
  *(float *)&v29[1] = -(float)(v24.__sinval * v21);
  if (v20 < 0.0)
    v26 = DspLib::abs((DspLib *)v29, v23);
  v27 = (float)(v26 / 6.0);
  *a6 = v27;
  result = a2 - *a5 - v27;
  *(double *)this = result;
  return result;
}

float DspLib::Biquad::Design::analogHighShelf(DspLib::Biquad::Design *this, DSPComplex a2, double a3, double a4)
{
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v4 = sqrt(a3);
  v5 = sqrt(v4) / a4;
  v6 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  v7 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  v8 = a2.real * v5;
  *(float *)&v4 = v4;
  return (float)((float)((float)(v7 + (float)((float)(a2.imag * v5) + 0.0))
                       * (float)((float)((float)(v7 * *(float *)&v4) + (float)((float)(a2.imag * v5) + 0.0))
                               * *(float *)&v4))
               + (float)((float)((float)((float)(v6 * *(float *)&v4) + (float)(v8 + 1.0)) * *(float *)&v4)
                       * (float)(v6 + (float)(v8 + *(float *)&v4))))
       * (float)(1.0
               / (float)((float)((float)(v7 + (float)((float)(a2.imag * v5) + 0.0))
                               * (float)(v7 + (float)((float)(a2.imag * v5) + 0.0)))
                       + (float)((float)(v6 + (float)(v8 + *(float *)&v4)) * (float)(v6 + (float)(v8 + *(float *)&v4)))));
}

float DspLib::Biquad::Design::analogHighPass(DspLib::Biquad::Design *this, DSPComplex a2, double a3)
{
  float v3;
  float v4;
  float v5;

  v3 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  v4 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  v5 = 1.0 / a3;
  return (float)((float)((float)(v4 + 0.0) * (float)(v4 + (float)((float)(a2.imag * v5) + 0.0)))
               + (float)(v3 * (float)(v3 + (float)((float)(a2.real * v5) + 1.0))))
       * (float)(1.0
               / (float)((float)((float)(v4 + (float)((float)(a2.imag * v5) + 0.0))
                               * (float)(v4 + (float)((float)(a2.imag * v5) + 0.0)))
                       + (float)((float)(v3 + (float)((float)(a2.real * v5) + 1.0))
                               * (float)(v3 + (float)((float)(a2.real * v5) + 1.0)))));
}

float DspLib::Biquad::Design::analogLowShelf(DspLib::Biquad::Design *this, DSPComplex a2, double a3, double a4)
{
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v4 = sqrt(a3);
  v5 = sqrt(v4) / a4;
  v6 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  v7 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  *(float *)&v4 = v4;
  v8 = (float)(a2.imag * v5) + 0.0;
  return (float)((float)((float)((float)(v7 * *(float *)&v4) + v8) * (float)((float)(v7 + v8) * *(float *)&v4))
               + (float)((float)((float)(v6 + (float)((float)(a2.real * v5) + *(float *)&v4)) * *(float *)&v4)
                       * (float)((float)(v6 * *(float *)&v4) + (float)((float)(a2.real * v5) + 1.0))))
       * (float)(1.0
               / (float)((float)((float)((float)(v7 * *(float *)&v4) + v8) * (float)((float)(v7 * *(float *)&v4) + v8))
                       + (float)((float)((float)(v6 * *(float *)&v4) + (float)((float)(a2.real * v5) + 1.0))
                               * (float)((float)(v6 * *(float *)&v4) + (float)((float)(a2.real * v5) + 1.0)))));
}

float DspLib::Biquad::Design::analogLowPass(DspLib::Biquad::Design *this, DSPComplex a2, double a3)
{
  float v3;
  float v4;

  v3 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  v4 = 1.0 / a3;
  return (float)((float)(v3 + (float)((float)(a2.real * v4) + 1.0))
               + (float)((float)((float)((float)(a2.imag * a2.real) + (float)(a2.real * a2.imag))
                               + (float)((float)(a2.imag * v4) + 0.0))
                       * 0.0))
       * (float)(1.0
               / (float)((float)((float)((float)((float)(a2.imag * a2.real) + (float)(a2.real * a2.imag))
                                       + (float)((float)(a2.imag * v4) + 0.0))
                               * (float)((float)((float)(a2.imag * a2.real) + (float)(a2.real * a2.imag))
                                       + (float)((float)(a2.imag * v4) + 0.0)))
                       + (float)((float)(v3 + (float)((float)(a2.real * v4) + 1.0))
                               * (float)(v3 + (float)((float)(a2.real * v4) + 1.0)))));
}

_QWORD *std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section const*>,std::__wrap_iter<DspLib::Biquad::Section const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B608761C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::Biquad::Design::fractionalOrderShelf(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

DspLib::BassQueen::Algorithm *DspLib::BassQueen::Algorithm::Algorithm(DspLib::BassQueen::Algorithm *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::BassQueen::Parameters::kDefault, 0x59uLL, (uint64_t)&DspLib::BassQueen::Parameters::kMinimum, 89, (uint64_t)&DspLib::BassQueen::Parameters::kMaximum, 89);
  *v2 = &off_1E69C1718;
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)(v2 + 116), 1);
  *((_QWORD *)this + 203) = 1;
  *((_OWORD *)this + 102) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_QWORD *)this + 212) = 0;
  *((_DWORD *)this + 426) = 1;
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 225) = 0;
  *((_QWORD *)this + 224) = 0;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_DWORD *)this + 444) = 0;
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)this + 1808, 0);
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)this + 2504, 0);
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)this + 3200, 0);
  *((_BYTE *)this + 3896) = 0;
  *((_QWORD *)this + 558) = 0;
  *((_QWORD *)this + 560) = 0;
  *((_QWORD *)this + 559) = 0;
  *((_OWORD *)this + 249) = 0u;
  *((_OWORD *)this + 250) = 0u;
  *((_OWORD *)this + 251) = 0u;
  *((_OWORD *)this + 252) = 0u;
  *((_OWORD *)this + 253) = 0u;
  *((_OWORD *)this + 254) = 0u;
  *((_BYTE *)this + 4080) = 0;
  *(_OWORD *)((char *)this + 4088) = 0u;
  *(_OWORD *)((char *)this + 4104) = 0u;
  *(_OWORD *)((char *)this + 4120) = 0u;
  *(_OWORD *)((char *)this + 4136) = 0u;
  *(_OWORD *)((char *)this + 4152) = 0u;
  *(_OWORD *)((char *)this + 4168) = 0u;
  *((_BYTE *)this + 4184) = 0;
  *((_BYTE *)this + 4288) = 0;
  *((_OWORD *)this + 267) = 0u;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 265) = 0u;
  *((_OWORD *)this + 264) = 0u;
  *((_OWORD *)this + 263) = 0u;
  *((_OWORD *)this + 262) = 0u;
  *((_BYTE *)this + 4392) = 0;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4344) = 0u;
  *(_OWORD *)((char *)this + 4328) = 0u;
  *(_OWORD *)((char *)this + 4312) = 0u;
  *(_OWORD *)((char *)this + 4296) = 0u;
  *((_OWORD *)this + 277) = 0u;
  *((_OWORD *)this + 276) = 0u;
  *((_OWORD *)this + 275) = 0u;
  *(_OWORD *)((char *)this + 3961) = 0u;
  *((_OWORD *)this + 247) = 0u;
  *((_OWORD *)this + 246) = 0u;
  *((_OWORD *)this + 245) = 0u;
  *((_OWORD *)this + 244) = 0u;
  *((_OWORD *)this + 281) = 0u;
  *((_OWORD *)this + 282) = 0u;
  *((_OWORD *)this + 283) = 0u;
  *((_BYTE *)this + 4544) = 0;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *(_OWORD *)((char *)this + 4584) = 0u;
  *(_OWORD *)((char *)this + 4600) = 0u;
  *(_OWORD *)((char *)this + 4616) = 0u;
  *(_OWORD *)((char *)this + 4632) = 0u;
  *((_BYTE *)this + 4648) = 0;
  *((_OWORD *)this + 291) = 0u;
  *((_OWORD *)this + 292) = 0u;
  *((_OWORD *)this + 293) = 0u;
  *((_OWORD *)this + 294) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *((_OWORD *)this + 296) = 0u;
  *((_OWORD *)this + 297) = 0u;
  *((_OWORD *)this + 298) = 0u;
  *((_OWORD *)this + 299) = 0u;
  *((_OWORD *)this + 300) = 0u;
  *(_OWORD *)((char *)this + 4809) = 0u;
  *(_DWORD *)((char *)this + 5055) = 0;
  *((_OWORD *)this + 315) = 0u;
  *((_OWORD *)this + 314) = 0u;
  *((_OWORD *)this + 313) = 0u;
  *((_OWORD *)this + 312) = 0u;
  *((_OWORD *)this + 311) = 0u;
  *((_OWORD *)this + 310) = 0u;
  *((_OWORD *)this + 309) = 0u;
  *((_OWORD *)this + 308) = 0u;
  *((_OWORD *)this + 307) = 0u;
  DspLibBuffer::DspLibBuffer((DspLib::BassQueen::Algorithm *)((char *)this + 5120));
  DspLibBuffer::DspLibBuffer((DspLib::BassQueen::Algorithm *)((char *)this + 5264));
  DspLibBuffer::DspLibBuffer((DspLib::BassQueen::Algorithm *)((char *)this + 5360));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::BassQueen::Algorithm *)((char *)this + 5456));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::BassQueen::Algorithm *)((char *)this + 5776));
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)this + 6096, 0);
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)this + 6792, 0);
  *((_DWORD *)this + 8) = 256;
  *((_DWORD *)this + 1271) = 0;
  memcpy((char *)this + 216, &DspLib::BassQueen::Parameters::kMinimum, 0x164uLL);
  memcpy((char *)this + 572, &DspLib::BassQueen::Parameters::kMaximum, 0x164uLL);
  return this;
}

void sub_1B6087980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, DspLib::Biquad::ParametricFilter *a10, DspLib::Biquad::Filter *a11, DspLib::LoudspeakerModel::Algorithm *a12, DspLib::LoudspeakerModel::Algorithm *a13, DspLib::LoudspeakerModel::Algorithm *a14, DspLib::LoudspeakerModel::Algorithm *a15, _QWORD *a16)
{
  _QWORD *v16;
  DspLibBuffer *v17;
  DspLibBuffer *v18;
  DspLibBuffer *v19;
  DspLib::AudioMeter::Algorithm *v20;
  DspLib::AudioMeter::Algorithm *v21;
  DspLib::ConstantQFilterbank::Modifier *v22;
  DspLib::Biquad::ParametricFilter *v23;
  DspLib::LoudspeakerModel::Algorithm *v24;
  DspLib::BassQueen::FilterBankWeights *v25;
  void *v26;
  void *v27;

  DspLib::LoudspeakerModel::Algorithm::~Algorithm(v24);
  DspLib::AudioMeter::Algorithm::~Algorithm(v21);
  DspLib::AudioMeter::Algorithm::~Algorithm(v20);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLibBuffer::~DspLibBuffer(v18);
  DspLibBuffer::~DspLibBuffer(v17);
  v26 = (void *)v16[629];
  if (v26)
  {
    v16[630] = v26;
    operator delete(v26);
  }
  DspLib::BassQueen::FilterBankWeights::~FilterBankWeights(v25);
  a16 = v16 + 600;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = v16 + 597;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = v16 + 594;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  DspLib::Biquad::ParametricFilter::~ParametricFilter(a10);
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v23);
  DspLib::ConstantQFilterbank::Modifier::~Modifier(v22);
  DspLib::Biquad::Filter::~Filter(a11);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(a12);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(a13);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(a14);
  DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator((DspLib::PolyPhaseInterpolator *)(v16 + 213));
  DspLib::FIRDecimator::~FIRDecimator((DspLib::FIRDecimator *)(v16 + 203));
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(a15);
  *v16 = off_1E69C46F0;
  v27 = (void *)v16[6];
  if (v27)
  {
    v16[7] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void sub_1B6087AA4()
{
  JUMPOUT(0x1B60879CCLL);
}

void sub_1B6087AAC()
{
  JUMPOUT(0x1B60879D4);
}

void sub_1B6087AB4()
{
  JUMPOUT(0x1B6087A50);
}

void sub_1B6087ABC()
{
  JUMPOUT(0x1B6087A58);
}

void sub_1B6087AC4()
{
  JUMPOUT(0x1B6087A60);
}

void sub_1B6087ACC()
{
  JUMPOUT(0x1B6087A7CLL);
}

void DspLib::LoudspeakerModel::Algorithm::~Algorithm(DspLib::LoudspeakerModel::Algorithm *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 672));
  v2 = (void *)*((_QWORD *)this + 81);
  if (v2)
  {
    *((_QWORD *)this + 82) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 600));
  v3 = (void *)*((_QWORD *)this + 72);
  if (v3)
  {
    *((_QWORD *)this + 73) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 672));
  v2 = (void *)*((_QWORD *)this + 81);
  if (v2)
  {
    *((_QWORD *)this + 82) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 600));
  v3 = (void *)*((_QWORD *)this + 72);
  if (v3)
  {
    *((_QWORD *)this + 73) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void DspLib::BassQueen::FilterBankWeights::~FilterBankWeights(DspLib::BassQueen::FilterBankWeights *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 16);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(DspLib::PolyPhaseInterpolator *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 16);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t DspLib::BassQueen::Algorithm::initialize(DspLib::BassQueen::Algorithm *this, int a2, double a3)
{
  uint64_t v4;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 8) = 1;
    std::vector<std::vector<float>>::resize((uint64_t *)this + 209, *((unsigned int *)this + 3));
    std::vector<std::vector<float>>::resize((uint64_t *)this + 219, *((unsigned int *)this + 3));
    DspLib::ConstantQFilterbank::Modifier::initialize((DspLib::BassQueen::Algorithm *)((char *)this + 3968), *((_DWORD *)this + 3), *((double *)this + 3));
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 600, *((unsigned int *)this + 3));
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 597, *((unsigned int *)this + 3));
    (*(void (**)(DspLib::BassQueen::Algorithm *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::BassQueen::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

FILE *DspLib::BassQueen::Algorithm::uninitialize(DspLib::BassQueen::Algorithm *this)
{
  *((_BYTE *)this + 8) = 0;
  DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 928));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 209, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 219, 0);
  DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 1808));
  DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 2504));
  DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3200));
  DspLibBuffer::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5120));
  DspLib::BassQueen::FilterBankWeights::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 4896));
  DspLib::ConstantQFilterbank::Modifier::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3968));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 4544));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 4648));
  *((_QWORD *)this + 630) = *((_QWORD *)this + 629);
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3896));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 594);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 597);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 600);
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5456));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5776));
  DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 6792));
  DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 6096));
  DspLibBuffer::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5264));
  return DspLibBuffer::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5360));
}

void DspLib::BassQueen::FilterBankWeights::uninitialize(DspLib::BassQueen::FilterBankWeights *this)
{
  uint64_t i;
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); i != v3; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i))
    i -= 104;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
}

void DspLib::BassQueen::Algorithm::reset(DspLib::BassQueen::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  vDSP_Length v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  float *v15;
  DspLib::CircularDelay *v16;
  DspLib::CircularDelay *v17;
  DspLib::CircularDelay *v18;
  DspLib::CircularDelay *v19;
  DspLib::CircularDelay *v20;
  DspLib::CircularDelay *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t cycle_count;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD v39[3];
  _QWORD v40[4];

  v40[3] = *MEMORY[0x1E0C80C00];
  DspLib::LoudspeakerModel::Algorithm::reset((DspLib::BassQueen::Algorithm *)((char *)this + 928));
  DspLib::FIRDecimator::reset((DspLib::BassQueen::Algorithm *)((char *)this + 1624));
  v2 = *((_QWORD *)this + 219);
  v3 = *((_QWORD *)this + 220);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 != v4)
      bzero(*(void **)v2, (v4 - *(_QWORD *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    v2 += 24;
  }
  *((_DWORD *)this + 444) = 0;
  DspLib::LoudspeakerModel::Algorithm::reset((DspLib::BassQueen::Algorithm *)((char *)this + 1808));
  DspLib::BassQueen::FilterBankWeights::reset((DspLib::BassQueen::Algorithm *)((char *)this + 4896));
  DspLib::ConstantQFilterbank::Modifier::reset((DspLib::BassQueen::Algorithm *)((char *)this + 3968));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 4592));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 4696));
  *((_QWORD *)this + 608) = 0;
  *((_QWORD *)this + 607) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 609) = _D0;
  *((_QWORD *)this + 605) = 0;
  *(_QWORD *)((char *)this + 4885) = 0;
  *((_QWORD *)this + 610) = 0;
  *((_DWORD *)this + 1310) = 0;
  v10 = (uint64_t)(*((_QWORD *)this + 618) - *((_QWORD *)this + 617)) >> 2;
  MEMORY[0x1E0C80A78](v11);
  v15 = (float *)((char *)&v39[-1] - v14);
  if (v13 != v12)
    memmove((char *)&v39[-1] - v14, v12, v13 - v12);
  DspLib::multiply(v15, v10, 0.0);
  DspLib::ConstantQFilterbank::Modifier::setGains((uint64_t)this + 3968);
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 3944));
  v16 = (DspLib::CircularDelay *)*((_QWORD *)this + 600);
  v17 = (DspLib::CircularDelay *)*((_QWORD *)this + 601);
  while (v16 != v17)
  {
    DspLib::CircularDelay::reset(v16);
    v16 = (DspLib::CircularDelay *)((char *)v16 + 32);
  }
  v18 = (DspLib::CircularDelay *)*((_QWORD *)this + 594);
  v19 = (DspLib::CircularDelay *)*((_QWORD *)this + 595);
  while (v18 != v19)
  {
    DspLib::CircularDelay::reset(v18);
    v18 = (DspLib::CircularDelay *)((char *)v18 + 32);
  }
  v20 = (DspLib::CircularDelay *)*((_QWORD *)this + 597);
  v21 = (DspLib::CircularDelay *)*((_QWORD *)this + 598);
  while (v20 != v21)
  {
    DspLib::CircularDelay::reset(v20);
    v20 = (DspLib::CircularDelay *)((char *)v20 + 32);
  }
  DspLib::AudioMeter::Algorithm::reset((DspLib::BassQueen::Algorithm *)((char *)this + 5456));
  DspLib::AudioMeter::Algorithm::reset((DspLib::BassQueen::Algorithm *)((char *)this + 5776));
  DspLib::LoudspeakerModel::Algorithm::reset((DspLib::BassQueen::Algorithm *)((char *)this + 6096));
  DspLib::LoudspeakerModel::Algorithm::reset((DspLib::BassQueen::Algorithm *)((char *)this + 6792));
  v22 = DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5360));
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v39[-1] - v24;
  if (v23 >= 0x200)
    v26 = 512;
  else
    v26 = v23;
  bzero((char *)&v39[-1] - v24, v26);
  if (DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5360)))
  {
    v27 = 0;
    do
    {
      *(_QWORD *)&v25[8 * v27] = DspLibBuffer::channel((DspLib::BassQueen::Algorithm *)((char *)this + 5360), v27);
      ++v27;
    }
    while (v27 < DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5360)));
  }
  v28 = DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5360));
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((DspLib::BassQueen::Algorithm *)((char *)this + 5360));
  v40[0] = v25;
  v40[1] = v28;
  v40[2] = cycle_count;
  DspLib::clear(v40);
  v30 = DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5264));
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v39[-1] - v32;
  if (v31 >= 0x200)
    v34 = 512;
  else
    v34 = v31;
  bzero((char *)&v39[-1] - v32, v34);
  if (DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5264)))
  {
    v35 = 0;
    do
    {
      *(_QWORD *)&v33[8 * v35] = DspLibBuffer::channel((DspLib::BassQueen::Algorithm *)((char *)this + 5264), v35);
      ++v35;
    }
    while (v35 < DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5264)));
  }
  v36 = DspLibBuffer::numChannels((DspLib::BassQueen::Algorithm *)((char *)this + 5264));
  v37 = vp::utility::CPU_Profiler::get_cycle_count((DspLib::BassQueen::Algorithm *)((char *)this + 5264));
  v39[0] = v33;
  v39[1] = v36;
  v39[2] = v37;
  DspLib::clear(v39);
  *((_QWORD *)this + 656) = 0;
  *((_DWORD *)this + 1314) = 0;
  *((_BYTE *)this + 5244) = 0;
}

void DspLib::BassQueen::FilterBankWeights::reset(DspLib::BassQueen::FilterBankWeights *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  while (v2 != v3)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 48));
    v2 += 104;
  }
  DspLib::clear(*((float **)this + 8), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
}

uint64_t DspLib::BassQueen::Algorithm::numStatus(DspLib::BassQueen::Algorithm *this)
{
  return 111;
}

double DspLib::BassQueen::Algorithm::latencySamples(DspLib::BassQueen::Algorithm *this, double a2)
{
  char *v3;

  if (*((_BYTE *)this + 8))
  {
    LODWORD(a2) = *((_DWORD *)this + 1269);
    return (double)*(unint64_t *)&a2;
  }
  else
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassQueen/dsp/DspLibBassQueen.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 148);
    ++DspLibDebug::mAssertCounter;
    return 0.0;
  }
}

FILE *DspLib::BassQueen::Algorithm::setMeteringIsEnabled(FILE *this, int a2)
{
  uint64_t v2;
  DspLib::AudioMeter::Algorithm *p_blksize;

  if (LOBYTE(this->_lbfsize) != a2)
  {
    v2 = (uint64_t)this;
    LOBYTE(this->_lbfsize) = a2;
    p_blksize = (DspLib::AudioMeter::Algorithm *)&this[35]._blksize;
    if (a2)
    {
      DspLib::AudioMeter::Algorithm::initialize(p_blksize, *(_DWORD *)(v2 + 12), *(double *)(v2 + 24));
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(v2 + 5776), *(_DWORD *)(v2 + 12), *(double *)(v2 + 24));
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(v2 + 6096), *(_DWORD *)(v2 + 12), *(double *)(v2 + 24));
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(v2 + 6792), *(_DWORD *)(v2 + 12), *(double *)(v2 + 24));
      return (FILE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
    }
    else
    {
      DspLib::AudioMeter::Algorithm::uninitialize(p_blksize);
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(v2 + 5776));
      DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::LoudspeakerModel::Algorithm *)(v2 + 6096));
      DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::LoudspeakerModel::Algorithm *)(v2 + 6792));
      DspLibBuffer::uninitialize((DspLibBuffer *)(v2 + 5264));
      return DspLibBuffer::uninitialize((DspLibBuffer *)(v2 + 5360));
    }
  }
  return this;
}

uint64_t DspLib::BassQueen::Algorithm::setParameter(DspLib::BassQueen::Algorithm *this, uint64_t a2, float a3)
{
  uint64_t result;
  float v7;
  float v8;
  uint64_t v9;

  if ((unint64_t)(a2 - 31) > 1)
    return DspLib::AlgorithmBase::setParameter(this, a2, a3);
  result = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *, uint64_t))(*(_QWORD *)this + 120))(this, a2);
  if (v8 >= a3)
    v8 = a3;
  if (v7 <= a3)
    v7 = v8;
  v9 = *((_QWORD *)this + 6);
  *(float *)(v9 + 4 * a2) = v7;
  *((float *)this + 1305) = 100.0 / *(float *)(v9 + 124);
  *((float *)this + 1306) = 100.0 / *(float *)(v9 + 128);
  return result;
}

void DspLib::BassQueen::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3)
{
  __n128 v6;
  float *v7;
  uint64_t v8;
  DspLib *v9;
  DspLib *isEqual;
  float v11;
  float v12;
  float v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  DspLib *v23;
  DspLib *v24;
  _BOOL8 v25;
  float *v26;
  float *v27;
  unsigned int v28;
  unint64_t v29;
  float *v30;
  vDSP_Length cycle_count;
  float v32;
  unsigned int i;
  unsigned int v34;
  unsigned int v35;
  float *v36;
  vDSP_Length v37;
  const float *v38;
  uint64_t v39;
  uint64_t v40;
  DspLib::Biquad::Design *v41;
  float *v42;
  float v43;
  void *v44;
  unint64_t v45;
  const void *v46;
  float v47;
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  double v52;
  unsigned int v53;
  unint64_t v54;
  DspLib::CircularDelay *v55;
  DspLib::CircularDelay *v56;
  unint64_t v57;
  DspLib::CircularDelay *v58;
  DspLib::CircularDelay *v59;
  DspLib::CircularDelay *v60;
  DspLib::CircularDelay *v61;
  uint64_t v62;
  float v63;
  void *v64;
  _BYTE *v65;
  void *__p;
  _BYTE *v67;
  uint64_t v68;

  DspLib::BassQueen::Parameters::setBoundaries((uint64_t)a2, a3, a1 + 216, 89, a1 + 572);
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, v6);
  if (!*(_BYTE *)(a1 + 8))
    return;
  v7 = *(float **)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 5056) = *v7 >= 0.5;
  *(_BYTE *)(a1 + 5057) = v7[22] >= 0.5;
  *(_BYTE *)(a1 + 5058) = v7[23] >= 0.5;
  *(_BYTE *)(a1 + 5059) = vcvtas_u32_f32(v7[1]) > 6;
  *(float *)(a1 + 5232) = DspLib::BassQueen::Algorithm::findZerodBFrequency((DspLib::BassQueen::Algorithm *)a1, (uint64_t)v7, 10.0, 10000.0, 10.0, (v8 - (uint64_t)v7) >> 2, 0);
  *(float *)(a1 + 5236) = DspLib::BassQueen::Algorithm::findZerodBFrequency((DspLib::BassQueen::Algorithm *)a1, *(_QWORD *)(a1 + 48), 10.0, 10000.0, 10000.0, (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2, 1);
  isEqual = (DspLib *)DspLib::isEqual(v9, *(float *)(a1 + 5232), 10000.0, 1.0e-20);
  if ((isEqual & 1) != 0
    || (isEqual = (DspLib *)DspLib::isEqual(isEqual, *(float *)(a1 + 5236), 10.0, 1.0e-20),
        (isEqual & 1) != 0))
  {
    *(int32x2_t *)(a1 + 5232) = vdup_n_s32(0x42C80000u);
    v11 = 100.0;
  }
  else
  {
    v11 = *(float *)(a1 + 5236);
  }
  v12 = v11 * 6.0;
  v13 = 20000.0;
  if (v12 <= 20000.0)
    v13 = v12;
  if (v12 < 1000.0)
    v13 = 1000.0;
  v14 = *(double *)(a1 + 24);
  v15 = (v14 / v13 * 0.5);
  if (v15 >= 0x20)
    v16 = 32;
  else
    v16 = (v14 / v13 * 0.5);
  if (v15)
    v17 = v16;
  else
    v17 = 1;
  v18 = *(_DWORD *)(a1 + 5084);
  *(_DWORD *)(a1 + 5084) = v17;
  if (v17 != v18)
  {
    v19 = v14 / (double)v17;
    *(double *)(a1 + 5096) = v19;
    *(double *)(a1 + 5104) = v19 / (double)(0x100u / (unsigned __int16)v17);
    __p = 0;
    v67 = 0;
    v68 = 0;
    *(float *)(a1 + 5216) = DspLib::BassQueen::Algorithm::makeSRCCoefficients(a1, (float **)&__p);
    DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)(a1 + 1624), *(unsigned int *)(a1 + 5084), *(unsigned int *)(a1 + 32));
    DspLib::FIRDecimator::setCoefficients(a1 + 1624, __p, (v67 - (_BYTE *)__p) >> 2);
    DspLib::multiply((float *)__p, (v67 - (_BYTE *)__p) >> 2, (float)*(unsigned int *)(a1 + 5084));
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 1704), *(_DWORD *)(a1 + 5084), *(_DWORD *)(a1 + 32) / *(_DWORD *)(a1 + 5084) + 1);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 1704), (uint64_t)__p, (v67 - (_BYTE *)__p) >> 2);
    LODWORD(v20) = *(_DWORD *)(a1 + 32);
    LODWORD(v21) = *(_DWORD *)(a1 + 5084);
    LODWORD(v22) = vcvtpd_u64_f64((double)v20 / (double)v21);
    *(_DWORD *)(a1 + 5088) = v22;
    *(_QWORD *)(a1 + 4904) = *(_QWORD *)(a1 + 5096);
    std::vector<float>::resize(a1 + 4984, v22);
    DspLib::ConstantQFilterbank::Modifier::setMaxFrameSize((DspLib::ConstantQFilterbank::Modifier *)(a1 + 3968), *(unsigned int *)(a1 + 5088));
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 1808), *(_DWORD *)(a1 + 12), *(double *)(a1 + 5096));
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 2504), *(_DWORD *)(a1 + 12), *(double *)(a1 + 5096));
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 3200), *(_DWORD *)(a1 + 12), *(double *)(a1 + 5096));
    DspLib::ConstantQFilterbank::Modifier::setSampleRate((DspLib::ConstantQFilterbank::Modifier *)(a1 + 3968), (double)vcvtad_u64_f64(*(double *)(a1 + 5096)));
    isEqual = (DspLib *)__p;
    if (__p)
    {
      v67 = __p;
      operator delete(__p);
    }
  }
  *(float *)(a1 + 5060) = DspLib::dB2Amp(isEqual, *(float *)(*(_QWORD *)(a1 + 48) + 8));
  *(float *)(a1 + 5068) = DspLib::dB2Amp(v23, *(float *)(*(_QWORD *)(a1 + 48) + 96));
  v25 = DspLib::isEqual(v24, *(float *)(*(_QWORD *)(a1 + 48) + 8), 0.0, 1.0e-20);
  *(_BYTE *)(a1 + 5064) = !v25;
  *(_BYTE *)(a1 + 5072) = !DspLib::isEqual((DspLib *)v25, *(float *)(*(_QWORD *)(a1 + 48) + 96), 0.0, 1.0e-20);
  v26 = *(float **)(a1 + 48);
  *(float *)(a1 + 5220) = 100.0 / v26[31];
  *(float *)(a1 + 5224) = 100.0 / v26[32];
  v27 = v26 + 50;
  DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 1808, v26 + 50, 39);
  DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 2504, v27, 39);
  DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 3200, v27, 39);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1) && *(_BYTE *)(a1 + 2360))
  {
    DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 6096, v27, 39);
    DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 6792, v27, 39);
    DspLibBuffer::initialize((DspLibBuffer *)(a1 + 5264), 1uLL, *(_DWORD *)(a1 + 1824) / *(_DWORD *)(a1 + 1820));
    DspLibBuffer::initialize((DspLibBuffer *)(a1 + 5360), 1uLL, *(_DWORD *)(a1 + 1824) / *(_DWORD *)(a1 + 1820));
    DspLibBuffer::setNumFrames((_QWORD *)(a1 + 5264), 1uLL);
    DspLibBuffer::setNumFrames((_QWORD *)(a1 + 5360), 1uLL);
  }
  else
  {
    DspLibBuffer::uninitialize((DspLibBuffer *)(a1 + 5264));
    DspLibBuffer::uninitialize((DspLibBuffer *)(a1 + 5360));
  }
  if (*(_BYTE *)(a1 + 5057))
  {
    DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 928, v27, 39);
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 928), *(_DWORD *)(a1 + 12), *(double *)(a1 + 24));
  }
  else
  {
    DspLib::LoudspeakerModel::Algorithm::uninitialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 928));
  }
  v28 = vcvtpd_u64_f64(logf(*(float *)(a1 + 5236) / *(float *)(a1 + 5232)) / (*(float *)(*(_QWORD *)(a1 + 48) + 40) * 0.693147181)+ 1.0);
  if (v28 >= 0x14)
    v29 = 20;
  else
    v29 = v28;
  DspLibBuffer::initialize((DspLibBuffer *)(a1 + 5120), v29, 1u);
  DspLibBuffer::setNumFrames((_QWORD *)(a1 + 5120), v29);
  *(_QWORD *)(a1 + 5144) = *(_QWORD *)(a1 + 5096);
  v30 = (float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 5120), 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 5120));
  v32 = *(float *)(a1 + 5232);
  if (v29 < 2)
    DspLib::fill(v30, cycle_count, v32);
  else
    DspLib::ramp(v30, cycle_count, 1, v32, *(float *)(a1 + 5236));
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)&__p);
  DspLib::LoudspeakerModel::Algorithm::frequencyResponse((DspLib::LoudspeakerModel::Algorithm *)(a1 + 1808), (const DspLibBuffer *)(a1 + 5120), (DspLibBuffer *)&__p);
  for (i = 1; ; ++i)
  {
    v34 = DspLibBuffer::numChannels((DspLibBuffer *)&__p);
    v35 = v34 >= 2 ? 2 : v34;
    if (i >= v35)
      break;
    v36 = (float *)DspLibBuffer::channel((DspLibBuffer *)&__p, 0);
    v37 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&__p);
    v38 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&__p, i);
    vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&__p);
    DspLib::vmax(v36, v37, v38);
  }
  v39 = DspLibBuffer::channel((DspLibBuffer *)(a1 + 5120), 0);
  v40 = DspLibBuffer::channel((DspLibBuffer *)&__p, 0);
  DspLib::BassQueen::FilterBankWeights::setParameters(a1 + 4896, v39, v29, v40, *(float *)(*(_QWORD *)(a1 + 48) + 48), *(float *)(*(_QWORD *)(a1 + 48) + 52));
  v42 = *(float **)(a1 + 48);
  if (v42[15] >= 0.5)
  {
    LODWORD(v41) = vcvtas_u32_f32(v42[17]);
    v43 = *(double *)(a1 + 5096);
    DspLib::Biquad::Design::butterworthHighPass(v41, v42[16], v43, 0, (float **)&v64);
    if (*(_BYTE *)(a1 + 3896))
    {
      v44 = v64;
      v45 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)v64) >> 2);
      if (*(_QWORD *)(a1 + 3952) == v45)
      {
LABEL_45:
        DspLib::Biquad::Filter::setCoefficients(a1 + 3896, (uint64_t)v44, v45, 0, 0x41uLL);
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        goto LABEL_47;
      }
    }
    else
    {
      v45 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)v64) >> 2);
    }
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 3896), *(unsigned int *)(a1 + 12), v45);
    v44 = v64;
    v45 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)v64) >> 2);
    goto LABEL_45;
  }
  DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 3896));
LABEL_47:
  v46 = (const void *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 5120), 0);
  v47 = *(float *)(*(_QWORD *)(a1 + 48) + 44);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  DspLib::ConstantQFilterbank::Modifier::setParameters(a1 + 3968, v46, v29, v48, *(float *)(*(_QWORD *)(a1 + 48) + 112) >= 0.5, v47);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 4544), *(_QWORD *)(a1 + 4024), *(double *)(a1 + 4048), *(_QWORD *)(a1 + 4032));
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 4648), *(_QWORD *)(a1 + 4024), *(double *)(a1 + 4048), *(_QWORD *)(a1 + 4032));
  v49 = *(_QWORD *)(a1 + 48);
  v50 = *(_DWORD *)(v49 + 76);
  *(_DWORD *)(a1 + 4832) = *(_DWORD *)(v49 + 80);
  *(_DWORD *)(a1 + 4852) = v50;
  *(_DWORD *)(a1 + 4836) = -1056245401;
  *(_BYTE *)(a1 + 4824) = 1;
  std::vector<float>::resize(a1 + 5032, (uint64_t)(*(_QWORD *)(a1 + 4944) - *(_QWORD *)(a1 + 4936)) >> 2);
  v51 = *(_QWORD *)(a1 + 48);
  v52 = *(double *)(a1 + 5096);
  LODWORD(v29) = vcvtad_u64_f64(v52 * (float)(*(float *)(v51 + 28) / 1000.0));
  if (*(_BYTE *)(a1 + 5059))
    v53 = vcvtad_u64_f64(v52 * (float)(*(float *)(v51 + 24) / 1000.0));
  else
    v53 = v29;
  *(_DWORD *)(a1 + 5080) = v53;
  std::vector<DspLib::CircularDelay>::resize((uint64_t *)(a1 + 4752), *(unsigned int *)(a1 + 12));
  v55 = *(DspLib::CircularDelay **)(a1 + 4752);
  v56 = *(DspLib::CircularDelay **)(a1 + 4760);
  if (v55 != v56)
  {
    v57 = (*(_DWORD *)(a1 + 5088) + *(_DWORD *)(a1 + 5080));
    do
    {
      DspLib::CircularDelay::setLength(v55, v57);
      v55 = (DspLib::CircularDelay *)((char *)v55 + 32);
    }
    while (v55 != v56);
  }
  LODWORD(v55) = vcvtas_u32_f32((float)(*(_DWORD *)(a1 + 5084) * v29) + (float)(*(float *)(a1 + 5216) * 2.0));
  *(_DWORD *)(a1 + 5076) = (_DWORD)v55;
  v58 = *(DspLib::CircularDelay **)(a1 + 4800);
  v59 = *(DspLib::CircularDelay **)(a1 + 4808);
  while (v58 != v59)
  {
    DspLib::CircularDelay::setLength(v58, (unint64_t)v55);
    v58 = (DspLib::CircularDelay *)((char *)v58 + 32);
  }
  v60 = *(DspLib::CircularDelay **)(a1 + 4776);
  v61 = *(DspLib::CircularDelay **)(a1 + 4784);
  while (v60 != v61)
  {
    DspLib::CircularDelay::setLength(v60, v29);
    v60 = (DspLib::CircularDelay *)((char *)v60 + 32);
  }
  v62 = *(_QWORD *)(a1 + 48);
  LODWORD(v54) = *(_DWORD *)(a1 + 32);
  v63 = *(double *)(a1 + 24) / (double)v54;
  *(float *)(a1 + 5228) = 1.0 - expf(-1.0 / (float)((float)(*(float *)(v62 + 108) * v63) / 1000.0));
  *(float *)(a1 + 5112) = (float)(*(float *)(v62 + 72) / 200.0) + 1.0;
  *(float *)(a1 + 5116) = 1.0 - (float)(*(float *)(v62 + 72) / 200.0);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&__p);
}

void sub_1B6088D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&a13);
  _Unwind_Resume(a1);
}

float DspLib::BassQueen::Algorithm::findZerodBFrequency(DspLib::BassQueen::Algorithm *a1, uint64_t a2, float a3, float a4, float a5, uint64_t a6, int a7)
{
  float v12;
  int v13;
  BOOL v14;
  float *v15;
  vDSP_Length cycle_count;
  float v17;
  float *v18;
  float v19;
  _OWORD v21[2];
  _QWORD v22[6];
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  float v31[12];
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[96];
  _BYTE v41[24];
  uint64_t v42;

  v31[0] = a5;
  DspLibBuffer::DspLibBuffer(v41, v31, 1);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v40);
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)v31, 0);
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)v22, 1);
  memset(v21, 0, sizeof(v21));
  if (a7)
    v12 = 0.7;
  else
    v12 = 1.4286;
  v42 = 0x40E7700000000000;
  DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v31, (float *)(a2 + 200), 39);
  DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v31, 1, 48000.0);
  if (*(float *)(a2 + 88) >= 0.5)
  {
    DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v22, (float *)(a2 + 200), 39);
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v22, 1, 48000.0);
  }
  v13 = 0;
  v14 = 0;
  do
  {
    DspLib::BassQueen::Algorithm::totalStaticFrequencyResponse(a1, (const DspLibBuffer *)v41, (DspLibBuffer *)v40);
    v15 = (float *)DspLibBuffer::channel((DspLibBuffer *)v40, 0);
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v40);
    DspLib::add(v15, cycle_count, *(float *)(*((_QWORD *)a1 + 6) + 12));
    v17 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)v40, 0);
    if (v17 < 0.0 && fabsf(v17) < 0.1)
      break;
    if (!v13 && v17 > 0.0)
      break;
    if (v14 != v17 > 0.0)
    {
      v12 = sqrtf(1.0 / v12);
      v14 = v17 > 0.0;
    }
    v18 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)v41, 0);
    *v18 = v12 * *v18;
    if (*(float *)DspLibBuffer::operator[]((DspLibBuffer *)v41, 0) < a3)
    {
      *(float *)DspLibBuffer::operator[]((DspLibBuffer *)v41, 0) = a3;
      break;
    }
    if (*(float *)DspLibBuffer::operator[]((DspLibBuffer *)v41, 0) > a4)
    {
      *(float *)DspLibBuffer::operator[]((DspLibBuffer *)v41, 0) = a4;
      break;
    }
    --v13;
  }
  while (v13 != -100);
  v19 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)v41, 0);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v21 + 8));
  v22[0] = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v30);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v27);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  v22[0] = off_1E69C46F0;
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  *(_QWORD *)v31 = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v39);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v36);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  *(_QWORD *)v31 = off_1E69C46F0;
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v40);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v41);
  return v19;
}

void sub_1B60890F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)va);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm((DspLib::LoudspeakerModel::Algorithm *)va1);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm((DspLib::LoudspeakerModel::Algorithm *)&STACK[0x308]);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&STACK[0x5C0]);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v2 - 192));
  _Unwind_Resume(a1);
}

float DspLib::BassQueen::Algorithm::makeSRCCoefficients(uint64_t a1, float **a2)
{
  float *v4;
  vDSP_Length v5;
  unsigned int v6;
  float SincWindow;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::vector<float>::resize((uint64_t)a2, (10 * *(_DWORD *)(a1 + 5084)) | 1u);
  v4 = *a2;
  v5 = a2[1] - *a2;
  v6 = *(_DWORD *)(a1 + 5084);
  v11[0] = &unk_1E69BFC40;
  v11[1] = DspLib::makeChebychevWindow;
  v12 = v11;
  SincWindow = DspLib::makeSincWindow(v4, v5, v6, 0xAu, (uint64_t)v11, 0.6);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return SincWindow;
}

void sub_1B6089250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void DspLib::BassQueen::FilterBankWeights::setParameters(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, float a5, float a6)
{
  float *v11;
  vDSP_Length v12;
  DspLib *v13;
  float v14;

  *(float *)a1 = a6;
  std::vector<float>::resize(a1 + 40, a3);
  std::vector<float>::resize(a1 + 64, a3);
  std::vector<float>::resize(a1 + 112, a3);
  v11 = *(float **)(a1 + 112);
  v12 = (uint64_t)(*(_QWORD *)(a1 + 120) - (_QWORD)v11) >> 2;
  v14 = DspLib::dB2Power(v13, -20.0);
  DspLib::fill(v11, v12, v14);
  DspLib::ConstantQFilterbank::Analyzer::setParameters((uint64_t *)(a1 + 16), a2, a3, a4, a5, *(double *)(a1 + 8));
}

uint64_t DspLib::BassQueen::Algorithm::parametersAreValid(DspLib::BassQueen::Algorithm *this)
{
  return *((unsigned __int8 *)this + 2360);
}

float DspLib::BassQueen::Algorithm::computeMaxExcursion(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (!*(_DWORD *)(a1 + 12))
    return 0.0;
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *(float *)(a1 + 5220);
    v9 = v8 * DspLib::maxMagnitude(*(const float **)(*a2 + 8 * v6), a2[2]);
    if (v7 < v9)
      v7 = v9;
    if (a3 == 2)
    {
      v10 = *(float *)(a1 + 5224);
      v11 = v10 * DspLib::maxMagnitude(*(const float **)(*a2 + 8 * (v6 + *(_DWORD *)(a1 + 12))), a2[2]);
      if (v7 < v11)
        v7 = v11;
    }
    ++v6;
  }
  while (v6 < *(unsigned int *)(a1 + 12));
  return v7;
}

void DspLib::BassQueen::Algorithm::processBlock(DspLib::BassQueen::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float **v9;
  size_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  int8x16_t v16;
  DspLibBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  const void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float **v70;
  size_t v71;
  uint64_t v72;
  unint64_t v73;
  float v74;
  DspLib *v75;
  float v76;
  _BOOL4 v77;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  size_t v82;
  vDSP_Length v83;
  void *v84;
  uint64_t v85;
  float *v86;
  float v87;
  float v88;
  const void **v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  unint64_t v95;
  float **v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  float **v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _BYTE *v104;
  _BYTE *v105;
  unint64_t v106;
  const DspLib::Biquad::Filter *v107;
  const void **v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  char *v116;
  size_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  float v123;
  float v124;
  DspLibBuffer *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  const DspLib::LoudspeakerModel::Algorithm *v129;
  unint64_t v130;
  unint64_t v131;
  float **v132;
  const DspLib::Biquad::Filter *v133;
  uint64_t v134;
  uint64_t v135;
  DspLib::LoudspeakerModel::Algorithm *v136;
  DspLib::Biquad::Filter *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t cycle_count;
  uint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  DspLib::BassQueen::MitigationAdaptation *v147;
  char *v148;
  unsigned int v149;
  const DspLib::LoudspeakerModel::Algorithm *v150;
  const DspLib::Biquad::Filter *v151;
  uint64_t v152[3];
  _QWORD v153[3];
  _QWORD v154[3];
  _QWORD v155[3];
  uint64_t v156;
  __int128 v157;
  _QWORD v158[3];
  __int128 v159;
  uint64_t v160;
  _QWORD v161[3];
  uint64_t v162;
  __int128 v163;
  _QWORD v164[3];
  __int128 v165;
  unint64_t v166;
  __int128 v167;
  unint64_t v168;
  _QWORD v169[3];
  __int128 v170;
  unint64_t v171;
  __int128 v172;
  unint64_t v173;
  _QWORD v174[3];
  _QWORD v175[3];
  uint64_t v176;
  __int128 v177;
  _QWORD v178[3];
  _QWORD v179[3];
  _BYTE v180[24];
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185[3];
  float **v186;
  uint64_t v187;
  unint64_t v188;
  float **v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  if (!*((_BYTE *)this + 2360))
  {
    DspLibBuffer::setNumFrames(a3, 0);
    return;
  }
  if (a3 != a2)
    DspLibBuffer::operator=((uint64_t)a3, a2);
  v6 = DspLibBuffer::numChannels(a3);
  v144 = &v126;
  MEMORY[0x1E0C80A78](v6);
  v9 = (float **)((char *)&v126 - v8);
  if (v7 >= 0x200)
    v10 = 512;
  else
    v10 = v7;
  bzero((char *)&v126 - v8, v10);
  if (DspLibBuffer::numChannels(a3))
  {
    v11 = 0;
    do
    {
      v9[v11] = (float *)DspLibBuffer::channel(a3, v11);
      ++v11;
    }
    while (v11 < DspLibBuffer::numChannels(a3));
  }
  v12 = DspLibBuffer::numChannels(a3);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a3);
  v13 = vp::utility::CPU_Profiler::get_cycle_count(a3);
  v145 = v13;
  if (v13)
  {
    v14 = (char *)this + 4892;
    v135 = v12;
    v15 = *((unsigned __int8 *)this + 5056);
    v148 = (char *)this + 4892;
    if (!v15)
    {
      if (*((_BYTE *)this + 5064))
      {
        v185[0] = (uint64_t)v9;
        v185[1] = v135;
        v185[2] = cycle_count;
        DspLib::multiply(v185, *((float *)this + 1265));
        v14 = v148;
      }
      if (v14[165])
      {
        *(_QWORD *)&v183 = v9;
        *((_QWORD *)&v183 + 1) = v135;
        v184 = cycle_count;
        *(_QWORD *)&v181 = v9;
        *((_QWORD *)&v181 + 1) = v135;
        v182 = cycle_count;
        v13 = DspLib::LoudspeakerModel::Algorithm::processBlock((_QWORD *)this + 116, &v183, &v181);
        v14 = v148;
      }
    }
    if (*((_BYTE *)this + 40))
    {
      v16 = DspLib::CPUMeasure::pause((DspLib::BassQueen::Algorithm *)((char *)this + 72));
      (*(void (**)(char *, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t, int8x16_t))(*((_QWORD *)this + 682)
                                                                                                  + 160))((char *)this + 5456, a3, a3, 1, 1, v16);
      if (*((_BYTE *)this + 6648))
        DspLib::BassQueen::peakExcursion(a3, (DspLib::BassQueen::Algorithm *)((char *)this + 6096), (DspLib::BassQueen::Algorithm *)((char *)this + 5264), v17);
      DspLib::CPUMeasure::resume((DspLib::BassQueen::Algorithm *)((char *)this + 72));
      v14 = v148;
    }
    if (v14[164])
    {
      v149 = 0;
LABEL_130:
      if (*((_BYTE *)this + 40))
      {
        v120 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        DspLib::CPUMeasure::stop((DspLib::BassQueen::Algorithm *)((char *)this + 72), v120, *((double *)this + 3));
        v121 = v149;
        v122 = v149;
        if (*((_QWORD *)this + 656) > (unint64_t)v149)
          v122 = *((_QWORD *)this + 656);
        *((_QWORD *)this + 656) = v122;
        v123 = *((double *)this + 638);
        v124 = expf(-1.0 / (float)((float)(v123 * 1000.0) / 1000.0));
        *((float *)this + 1314) = (float)((float)(1.0 - v124) * (float)v121) + (float)(*((float *)this + 1314) * v124);
        (*(void (**)(char *, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t))(*((_QWORD *)this + 722)
                                                                                         + 160))((char *)this + 5776, a3, a3, 1, 1);
        if (*((_BYTE *)this + 7344))
          DspLib::BassQueen::peakExcursion(a3, (DspLib::BassQueen::Algorithm *)((char *)this + 6792), (DspLib::BassQueen::Algorithm *)((char *)this + 5360), v125);
      }
      return;
    }
    if (!v14[166])
    {
      v149 = 0;
LABEL_128:
      if (v14[180])
      {
        v152[0] = (uint64_t)v9;
        v152[1] = v135;
        v152[2] = cycle_count;
        DspLib::multiply(v152, *((float *)this + 1267));
      }
      goto LABEL_130;
    }
    v126 = (uint64_t)&v126;
    LODWORD(v18) = *((_DWORD *)this + 1272);
    if (v18 <= 1)
      v18 = 1;
    else
      v18 = v18;
    if (*((_DWORD *)this + 3) == 1)
      v19 = v18;
    else
      v19 = 4 * (((v18 - 1) >> 2) + 1);
    v20 = MEMORY[0x1E0C80A78](v13);
    v22 = (char *)&v126 - v21;
    v23 = *((unsigned int *)this + 3);
    MEMORY[0x1E0C80A78](v20);
    v25 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFF0);
    if (v24 >= 0x200)
      v26 = 512;
    else
      v26 = v24;
    bzero((char *)&v126 - ((v24 + 15) & 0xFFFFFFFF0), v26);
    if ((_DWORD)v23)
    {
      v27 = v23;
      v28 = v25;
      do
      {
        *v28++ = v22;
        v22 += 4 * v19;
        --v27;
      }
      while (v27);
    }
    v29 = *((unsigned int *)this + 1272);
    *(_QWORD *)v180 = v25;
    *(_QWORD *)&v180[8] = v23;
    *(_QWORD *)&v180[16] = v29;
    v179[0] = v9;
    v179[1] = v135;
    v179[2] = cycle_count;
    DspLib::FIRDecimator::process((uint64_t)this + 1624, v179, v180);
    v30 = *(_QWORD *)&v180[16];
    v178[0] = *(_QWORD *)v180;
    v178[1] = *(_QWORD *)&v180[8];
    v178[2] = *(_QWORD *)&v180[16];
    DspLib::BassQueen::FilterBankWeights::compute((uint64_t)this + 4896, (uint64_t)v178);
    v31 = *((unsigned int *)this + 1270);
    if (!v148[167])
      v31 = (*((_DWORD *)this + 1272) + v31) - v30;
    v176 = *(_QWORD *)v180;
    v177 = *(_OWORD *)&v180[8];
    v32 = DspLib::MultiChannelCircularDelay::write((uint64_t *)this + 594, &v176);
    v142 = v30;
    if (v30 <= 1)
      v33 = 1;
    else
      v33 = v30;
    v34 = *((unsigned int *)this + 3);
    v127 = ((v33 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v128 = v33;
    if (v34 == 1)
      v35 = v33;
    else
      v35 = ((v33 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v36 = MEMORY[0x1E0C80A78](v32);
    v38 = (char *)&v126 - v37;
    MEMORY[0x1E0C80A78](v36);
    if (v39 >= 0x200)
      v40 = 512;
    else
      v40 = v39;
    v140 = (char *)&v126 - ((v39 + 15) & 0xFFFFFFFF0);
    bzero(v140, v40);
    v141 = v34;
    if ((_DWORD)v34)
    {
      v42 = v140;
      v41 = v141;
      do
      {
        *v42++ = v38;
        v38 += 4 * v35;
        --v41;
      }
      while (v41);
    }
    v43 = v142 + *((unsigned int *)this + 1270);
    v175[0] = v140;
    v175[1] = v141;
    v175[2] = v142;
    v44 = DspLib::MultiChannelCircularDelay::read((const void **)this + 594, v43, v175);
    if (v31 <= 1)
      v45 = 1;
    else
      v45 = v31;
    v46 = *((unsigned int *)this + 3);
    if (v46 == 1)
      v47 = v45;
    else
      v47 = ((v45 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v48 = MEMORY[0x1E0C80A78](v44);
    v50 = (char *)&v126 - v49;
    MEMORY[0x1E0C80A78](v48);
    if (v51 >= 0x200)
      v52 = 512;
    else
      v52 = v51;
    v138 = (char *)&v126 - ((v51 + 15) & 0xFFFFFFFF0);
    bzero(v138, v52);
    v139 = v46;
    if ((_DWORD)v46)
    {
      v54 = v138;
      v53 = v139;
      do
      {
        *v54++ = v50;
        v50 += 4 * v47;
        --v53;
      }
      while (v53);
    }
    v55 = *((unsigned int *)this + 1270);
    v174[0] = v138;
    v174[1] = v139;
    v174[2] = v31;
    DspLib::MultiChannelCircularDelay::read((const void **)this + 594, v55, v174);
    v56 = v142;
    v133 = (DspLib::BassQueen::Algorithm *)((char *)this + 4544);
    v151 = (DspLib::BassQueen::Algorithm *)((char *)this + 3976);
    DspLib::Biquad::Filter::copyStatesFrom((DspLib::BassQueen::Algorithm *)((char *)this + 4544), (DspLib::BassQueen::Algorithm *)((char *)this + 3976));
    v129 = (DspLib::BassQueen::Algorithm *)((char *)this + 2504);
    v150 = (DspLib::BassQueen::Algorithm *)((char *)this + 1808);
    DspLib::LoudspeakerModel::Algorithm::copyStatesFrom((DspLib::BassQueen::Algorithm *)((char *)this + 2504), (DspLib::BassQueen::Algorithm *)((char *)this + 1808));
    v134 = (uint64_t)this + 3968;
    if (v56 <= v31)
      v58 = v31;
    else
      v58 = v56;
    if (v58 <= 1)
      v58 = 1;
    v131 = v58;
    v130 = ((v58 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v137 = (DspLib::BassQueen::Algorithm *)((char *)this + 4648);
    v136 = (DspLib::BassQueen::Algorithm *)((char *)this + 3200);
    v147 = (DspLib::BassQueen::Algorithm *)((char *)this + 4824);
    v149 = 1;
    v132 = v9;
    while (1)
    {
      v59 = v31;
      v146 = &v126;
      v60 = *((_DWORD *)this + 3);
      v61 = *((_DWORD *)this + 456) / v60;
      if (v60 * (unint64_t)v61 == 1)
        v62 = v131;
      else
        v62 = v130;
      v63 = MEMORY[0x1E0C80A78](v57);
      v65 = (float *)((char *)&v126 - v64);
      v66 = *((unsigned int *)this + 3);
      v67 = v66 * (unint64_t)v61;
      MEMORY[0x1E0C80A78](v63);
      v70 = (float **)((char *)&v126 - v69);
      if (v68 >= 0x200)
        v71 = 512;
      else
        v71 = v68;
      bzero((char *)&v126 - v69, v71);
      if (v67)
      {
        v72 = 0;
        do
        {
          v70[v72++] = v65;
          v65 += v62;
        }
        while (v67 > v72);
      }
      v73 = v142;
      v189 = (float **)v140;
      v190 = v141;
      v191 = v142;
      v186 = v70;
      v187 = v66;
      v188 = v142;
      DspLib::Biquad::Filter::process(v151, (uint64_t)&v189, &v186);
      v31 = v59;
      v9 = v132;
      *(_QWORD *)&v172 = v70;
      *((_QWORD *)&v172 + 1) = v66;
      v173 = v73;
      *(_QWORD *)&v170 = v70;
      *((_QWORD *)&v170 + 1) = v66 * (unint64_t)v61;
      v171 = v73;
      DspLib::LoudspeakerModel::Algorithm::processBlock(v150, &v172, &v170);
      v169[0] = v70;
      v169[1] = v66 * (unint64_t)v61;
      v169[2] = v73;
      v74 = DspLib::BassQueen::Algorithm::computeMaxExcursion((uint64_t)this, v169, v61);
      DspLib::Biquad::Filter::copyStatesFrom(v137, v151);
      DspLib::LoudspeakerModel::Algorithm::copyStatesFrom(v136, v150);
      v189 = (float **)v138;
      v190 = v139;
      v191 = v31;
      v186 = v70;
      v187 = v66;
      v188 = v31;
      DspLib::Biquad::Filter::process(v151, (uint64_t)&v189, &v186);
      *(_QWORD *)&v167 = v70;
      *((_QWORD *)&v167 + 1) = v66;
      v168 = v31;
      *(_QWORD *)&v165 = v70;
      *((_QWORD *)&v165 + 1) = v66 * (unint64_t)v61;
      v166 = v31;
      DspLib::LoudspeakerModel::Algorithm::processBlock(v150, &v167, &v165);
      v164[0] = v70;
      v164[1] = v66 * (unint64_t)v61;
      v164[2] = v31;
      v76 = DspLib::BassQueen::Algorithm::computeMaxExcursion((uint64_t)this, v164, v61);
      if (v74 < v76)
        v74 = v76;
      v77 = !DspLib::isEqual(v75, *((float *)this + 1210), 0.0, 1.0e-20) && v74 <= *((float *)this + 1279);
      if (v74 <= 1.0 && !v77)
        break;
      DspLib::BassQueen::MitigationAdaptation::update(v147, v74 * *((float *)this + 1278), v149);
      if (*v148)
        break;
      v80 = (_BYTE *)*((_QWORD *)this + 617);
      v81 = (_BYTE *)*((_QWORD *)this + 618);
      v82 = v81 - v80;
      v83 = (v81 - v80) >> 2;
      if (v81 == v80)
      {
        MEMORY[0x1E0C80A78](v79);
        v86 = (float *)(&v126 - 2);
      }
      else
      {
        v84 = memmove(*((void **)this + 629), v80, v81 - v80);
        MEMORY[0x1E0C80A78](v84);
        v86 = (float *)((char *)&v126 - v85);
        memmove((char *)&v126 - v85, *((const void **)this + 629), v82);
      }
      DspLib::multiply(v86, v83, *((float *)this + 1210));
      DspLib::ConstantQFilterbank::Modifier::setGains(v134);
      DspLib::Biquad::Filter::copyStatesFrom(v151, v133);
      DspLib::LoudspeakerModel::Algorithm::copyStatesFrom(v150, v129);
      v57 = DspLib::BassQueen::MitigationAdaptation::mitigationIsAtLimit(v147);
      if (v57)
        break;
      if (++v149 == 30)
      {
        v149 = 30;
        break;
      }
    }
    DspLib::Biquad::Filter::copyStatesFrom(v151, v137);
    DspLib::LoudspeakerModel::Algorithm::copyStatesFrom(v150, v136);
    v87 = *((float *)this + 1210);
    v88 = *((float *)this + 1310);
    if (v87 >= v88)
    {
      if (v87 <= v88)
      {
LABEL_99:
        v189 = *(float ***)v180;
        v190 = *(_QWORD *)&v180[8];
        v191 = v73;
        v186 = *(float ***)v180;
        v187 = *(_QWORD *)&v180[8];
        v188 = v73;
        v89 = DspLib::MultiChannelCircularDelay::process((const void **)this + 597, &v189, &v186);
        v90 = *((unsigned int *)this + 3);
        if (v90 == 1)
          v91 = v128;
        else
          v91 = v127;
        v92 = MEMORY[0x1E0C80A78](v89);
        v94 = (float *)((char *)&v126 - v93);
        MEMORY[0x1E0C80A78](v92);
        v96 = (float **)((char *)&v126 - ((v95 + 15) & 0xFFFFFFFF0));
        if (v95 >= 0x200)
          v97 = 512;
        else
          v97 = v95;
        bzero((char *)&v126 - ((v95 + 15) & 0xFFFFFFFF0), v97);
        if ((_DWORD)v90)
        {
          v99 = v90;
          v100 = v96;
          do
          {
            *v100++ = v94;
            v94 += v91;
            --v99;
          }
          while (v99);
        }
        v101 = (uint64_t)(*((_QWORD *)this + 618) - *((_QWORD *)this + 617)) >> 2;
        MEMORY[0x1E0C80A78](v98);
        v103 = (char *)&v126 - v102;
        v104 = (_BYTE *)*((_QWORD *)this + 629);
        v105 = (_BYTE *)*((_QWORD *)this + 630);
        if (v105 != v104)
          memmove(v103, v104, v105 - v104);
        DspLib::multiply((float *)v103, v101, *((float *)this + 1310));
        v106 = v142;
        v161[2] = v142;
        v162 = *(_QWORD *)v180;
        v163 = *(_OWORD *)&v180[8];
        v161[0] = v96;
        v161[1] = v90;
        if (v148[167])
          v107 = 0;
        else
          v107 = v133;
        DspLib::ConstantQFilterbank::Modifier::apply(v134, (uint64_t)&v162, (uint64_t)v161, (uint64_t)v103, v101, (uint64_t)v107);
        if (*((_BYTE *)this + 3896))
        {
          v189 = v96;
          v190 = v90;
          v191 = v106;
          v186 = v96;
          v187 = v90;
          v188 = v106;
          DspLib::Biquad::Filter::process((_QWORD *)this + 487, (uint64_t)&v189, &v186);
        }
        v159 = *(_OWORD *)v180;
        v160 = *(_QWORD *)&v180[16];
        v158[0] = v96;
        v158[1] = v90;
        v158[2] = v106;
        DspLib::subtract(&v159, v158);
        v189 = v9;
        v190 = v135;
        v191 = cycle_count;
        v186 = v9;
        v187 = v135;
        v188 = cycle_count;
        v108 = DspLib::MultiChannelCircularDelay::process((const void **)this + 600, &v189, &v186);
        v109 = v145;
        if (v145 <= 1)
          v109 = 1;
        v110 = *((unsigned int *)this + 3);
        if (v110 == 1)
          v111 = v109;
        else
          v111 = ((v109 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        v112 = MEMORY[0x1E0C80A78](v108);
        v114 = (char *)&v126 - v113;
        MEMORY[0x1E0C80A78](v112);
        v116 = (char *)&v126 - ((v115 + 15) & 0xFFFFFFFF0);
        if (v115 >= 0x200)
          v117 = 512;
        else
          v117 = v115;
        bzero((char *)&v126 - ((v115 + 15) & 0xFFFFFFFF0), v117);
        if ((_DWORD)v110)
        {
          v118 = v110;
          v119 = v116;
          do
          {
            *v119++ = v114;
            v114 += 4 * v111;
            --v118;
          }
          while (v118);
        }
        v157 = *(_OWORD *)&v180[8];
        v155[0] = v116;
        v155[1] = v110;
        v155[2] = v145;
        v156 = *(_QWORD *)v180;
        DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 426, &v156, v155);
        v154[0] = v9;
        v154[1] = v135;
        v154[2] = cycle_count;
        v153[0] = v116;
        v153[1] = v110;
        v153[2] = v145;
        DspLib::subtract(v154, v153);
        v14 = v148;
        goto LABEL_128;
      }
      v87 = v88 + (float)((float)(v87 - v88) * *((float *)this + 1307));
    }
    *((float *)this + 1310) = v87;
    goto LABEL_99;
  }
}

void DspLib::BassQueen::peakExcursion(DspLib::BassQueen *this, DspLibBuffer *a2, DspLib::LoudspeakerModel::Algorithm *a3, DspLibBuffer *a4)
{
  int v7;
  uint64_t cycle_count;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int i;
  unsigned int v16;
  float v17;
  int v18;
  const float *v19;
  vDSP_Length v20;
  float v21;
  _QWORD v23[13];

  v23[12] = *MEMORY[0x1E0C80C00];
  v7 = (*(uint64_t (**)(DspLibBuffer *))(*(_QWORD *)a2 + 72))(a2);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(this);
  if (v7 == 1)
    v9 = cycle_count;
  else
    v9 = ((cycle_count - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v10 = (*(uint64_t (**)(DspLibBuffer *))(*(_QWORD *)a2 + 72))(a2);
  MEMORY[0x1E0C80A78](v10);
  v12 = (float *)((char *)&v23[-1] - v11);
  v13 = (*(uint64_t (**)(DspLibBuffer *))(*(_QWORD *)a2 + 72))(a2);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v23, v12, v9, v13, 1);
  v14 = vp::utility::CPU_Profiler::get_cycle_count(this);
  DspLibBuffer::setNumFrames(v23, v14);
  (*(void (**)(DspLibBuffer *, DspLib::BassQueen *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(a2, this, v23, 1, 1);
  for (i = 0; i < DspLibBuffer::numChannels(a3); ++i)
  {
    v16 = 0;
    v17 = *(float *)DspLibBuffer::element(a3, 1uLL, i);
    while (v16 < DspLibBuffer::numChannels(this))
    {
      v18 = DspLibBuffer::numChannels(this);
      v19 = (const float *)DspLibBuffer::channel((DspLibBuffer *)v23, v16 + i * v18);
      v20 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v23);
      v21 = DspLib::maxMagnitude(v19, v20);
      if (v17 < v21)
        v17 = v21;
      ++v16;
    }
    *(float *)DspLibBuffer::element(a3, 1uLL, i) = v17;
  }
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v23);
}

void sub_1B608A32C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void DspLib::BassQueen::FilterBankWeights::compute(uint64_t a1, uint64_t a2)
{
  float **v2;
  __int128 *v4;
  uint64_t v5;
  float *v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t v11;
  const float *v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  vDSP_Length v18;
  float v20;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(float ***)(a2 + 16);
  if (v2)
  {
    MEMORY[0x1E0C80A78](a1);
    v6 = (float *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    v7 = *((_QWORD *)v4 + 1);
    if (v7 < 2)
    {
      v6 = **(float ***)v4;
      v8 = *((_QWORD *)v4 + 2);
    }
    else
    {
      v22 = *v4;
      v23 = *((_QWORD *)v4 + 2);
      DspLib::sum((uint64_t)&v22, v6, (vDSP_Length)v2);
      DspLib::multiply(v6, (vDSP_Length)v2, 1.0 / (float)v7);
      v8 = (uint64_t)v2;
    }
    DspLib::clear(*(float **)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
    v9 = exp(-1.0 / (*(double *)(a1 + 8) * (*(float *)a1 * 1000.0 / (double)(unint64_t)v2) / 1000.0));
    DspLib::multiply(*(float **)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2, v9);
    v10 = *(float **)(a1 + 40);
    if (*(_QWORD *)(a1 + 48) == (_QWORD)v10)
    {
      v18 = 0;
    }
    else
    {
      v21[1] = v21;
      v11 = 0;
      v12 = *(const float **)(a1 + 88);
      v13 = 1;
      do
      {
        DspLib::Biquad::Filter::process((_QWORD *)(*(_QWORD *)(a1 + 16) + 104 * v11), (uint64_t)v6, v8, (uint64_t)v12, v2);
        v14 = DspLib::maxMagnitude(v12, (vDSP_Length)v2);
        v15 = *(_QWORD *)(a1 + 64);
        v16 = v14 * v14;
        if (*(float *)(v15 + 4 * v11) >= v16)
          v16 = *(float *)(v15 + 4 * v11);
        *(float *)(v15 + 4 * v11) = v16;
        v10 = *(float **)(a1 + 40);
        v17 = *(_QWORD *)(a1 + 48);
        v10[v11] = v16 + *(float *)(*(_QWORD *)(a1 + 112) + 4 * v11);
        v11 = v13;
        v18 = (v17 - (uint64_t)v10) >> 2;
      }
      while (v18 > v13++);
    }
    v20 = DspLib::sum(v10, v18);
    DspLib::multiply(v10, v18, 1.0 / v20);
  }
}

void DspLib::BassQueen::MitigationAdaptation::update(DspLib::BassQueen::MitigationAdaptation *this, float a2, unsigned int a3)
{
  float v4;
  float v6;
  BOOL v7;
  float v8;
  float v9;
  float v10;
  _DWORD *v11;
  char *v12;
  float v13;
  char *v14;
  int v15;

  if (*(_BYTE *)this)
  {
    v4 = a2;
    if (a3 == 1)
      *((_DWORD *)this + 6) = 1065353216;
    v6 = DspLib::sign(0, (float)(a2 - *((float *)this + 16)));
    v7 = 0;
    *((float *)this + 15) = v6;
    *((float *)this + 16) = v4;
    if (a3 >= 3)
    {
      v7 = v6 > 0.0;
      if (*((float *)this + 14) >= 0.0)
        v7 = 0;
    }
    *((_BYTE *)this + 68) = v7;
    if (v4 < 1.0 && (float)((float)(*((float *)this + 7) / -100.0) + 1.0) < v4)
      v4 = (float)(*((float *)this + 7) / -100.0) + 1.0;
    if (v4 > 1.0 && v4 < (float)((float)(*((float *)this + 7) / 100.0) + 1.0))
      v4 = (float)(*((float *)this + 7) / 100.0) + 1.0;
    if (!v7)
    {
      v8 = *((float *)this + 4);
      *((float *)this + 5) = v8;
      v9 = *((float *)this + 3) * *((float *)this + 6);
      v10 = v8 + (float)(v9 * logf(v4));
      *((float *)this + 4) = v10;
      v15 = 0;
      v11 = (_DWORD *)((char *)this + 8);
      v12 = (char *)&v15;
      if (v10 <= 0.0)
        v12 = (char *)this + 16;
      if (v10 >= *((float *)this + 2))
        v11 = v12;
      *((_DWORD *)this + 4) = *v11;
    }
    v13 = DspLib::sign(0, (float)(1.0 - v4));
    *((float *)this + 14) = v13;
    if (*((float *)this + 12) != v13)
    {
      *((float *)this + 6) = *((float *)this + 6) * 0.7;
      *((float *)this + 12) = v13;
    }
  }
  else
  {
    v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassQueen/dsp/DspLibMitigationAdaptation.h");
    printf("DSP Sound assertion in %s at line %d\n", v14, 64);
    ++DspLibDebug::mAssertCounter;
  }
}

BOOL DspLib::BassQueen::MitigationAdaptation::mitigationIsAtLimit(DspLib::BassQueen::MitigationAdaptation *this)
{
  _BOOL8 isEqual;

  isEqual = DspLib::isEqual(this, *((float *)this + 4), *((float *)this + 2), 1.0e-20);
  return isEqual || DspLib::isEqual((DspLib *)isEqual, *((float *)this + 4), 0.0, 1.0e-20);
}

void DspLib::BassQueen::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  unint64_t v5;
  const float *v6;
  vDSP_Length cycle_count;
  float v8;
  DspLib *v9;
  unint64_t v10;
  const float *v11;
  vDSP_Length v12;
  float v13;
  DspLib *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v39[3];
  uint64_t v40[4];

  v40[3] = *MEMORY[0x1E0C80C00];
  DspLib::clear((float *)a2, __N);
  if (*(_BYTE *)(a1 + 40))
  {
    DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 5456), (float *)a2, 0x20uLL);
    DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 5776), (float *)(a2 + 128), 0x20uLL);
    *(int32x4_t *)(a2 + 428) = vdupq_n_s32(0xC2C80000);
    if (DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5264)))
    {
      v5 = 0;
      do
      {
        v6 = (const float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 5264), v5);
        cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 5264));
        v8 = DspLib::maxMagnitude(v6, cycle_count);
        *(float *)(a2 + 4 * (v5++ + 107)) = DspLib::amp2dBSafe(v9, v8, 0.000001);
      }
      while (v5 < DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5264)));
    }
    if (DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5360)))
    {
      v10 = 0;
      do
      {
        v11 = (const float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 5360), v10);
        v12 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 5360));
        v13 = DspLib::maxMagnitude(v11, v12);
        *(float *)(a2 + 4 * (v10++ + 109)) = DspLib::amp2dBSafe(v14, v13, 0.000001);
      }
      while (v10 < DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5360)));
    }
    v15 = DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5264));
    MEMORY[0x1E0C80A78](v15);
    v18 = (char *)&v39[-1] - v17;
    if (v16 >= 0x200)
      v19 = 512;
    else
      v19 = v16;
    bzero((char *)&v39[-1] - v17, v19);
    if (DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5264)))
    {
      v20 = 0;
      do
      {
        *(_QWORD *)&v18[8 * v20] = DspLibBuffer::channel((DspLibBuffer *)(a1 + 5264), v20);
        ++v20;
      }
      while (v20 < DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5264)));
    }
    v21 = DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5264));
    v22 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 5264));
    v40[0] = (uint64_t)v18;
    v40[1] = v21;
    v40[2] = v22;
    DspLib::multiply(v40, 0.90484);
    v23 = DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5360));
    MEMORY[0x1E0C80A78](v23);
    v26 = (char *)&v39[-1] - v25;
    if (v24 >= 0x200)
      v27 = 512;
    else
      v27 = v24;
    bzero((char *)&v39[-1] - v25, v27);
    if (DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5360)))
    {
      v28 = 0;
      do
      {
        *(_QWORD *)&v26[8 * v28] = DspLibBuffer::channel((DspLibBuffer *)(a1 + 5360), v28);
        ++v28;
      }
      while (v28 < DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5360)));
    }
    v29 = DspLibBuffer::numChannels((DspLibBuffer *)(a1 + 5360));
    v30 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 5360));
    v39[0] = (uint64_t)v26;
    v39[1] = v29;
    v39[2] = v30;
    DspLib::multiply(v39, 0.90484);
    *(float *)(a2 + 256) = (float)*(unint64_t *)(a1 + 5248);
    *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 5256);
    v31 = *(_QWORD *)(a1 + 5040);
    v32 = *(_QWORD *)(a1 + 5032);
    v33 = v31 - v32;
    if (v31 != v32)
    {
      v34 = 0;
      v35 = v33 >> 2;
      v36 = *(unsigned __int8 *)(a1 + 5056);
      do
      {
        if (v36)
        {
          *(_DWORD *)(a2 + 4 * (v34 + 66)) = 0;
          v37 = 0;
        }
        else
        {
          *(float *)(a2 + 4 * (v34 + 66)) = *(float *)(v32 + 4 * v34) * *(float *)(a1 + 5240);
          v37 = *(_DWORD *)(*(_QWORD *)(a1 + 4936) + 4 * v34);
        }
        *(_DWORD *)(a2 + 4 * (v34++ + 86)) = v37;
      }
      while (v35 > v34);
    }
    *(_DWORD *)(a2 + 424) = *(_DWORD *)(a1 + 5240);
  }
}

void DspLib::BassQueen::Algorithm::totalStaticFrequencyResponse(DspLib::BassQueen::Algorithm *this, const DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  const float *v10;
  vDSP_Length v11;
  const float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  vDSP_Length v16;
  const float *v17;
  _QWORD v18[6];
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  _BYTE v27[96];
  _QWORD v28[6];
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[96];

  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::initialize(a3, cycle_count, 1u);
  v7 = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, v7);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v37);
  v8 = *((_QWORD *)this + 6);
  DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)v28, 0);
  v9 = (float *)(v8 + 200);
  DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v28, v9, 39);
  DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v28, 1, *((double *)a2 + 3));
  DspLib::LoudspeakerModel::Algorithm::frequencyResponse((DspLib::LoudspeakerModel::Algorithm *)v28, a2, (DspLibBuffer *)v37);
  if (DspLibBuffer::numChannels((DspLibBuffer *)v37) < 2)
  {
    DspLibBuffer::operator=((uint64_t)a3, (const DspLibBuffer *)v37);
  }
  else
  {
    v10 = (const float *)DspLibBuffer::channel((DspLibBuffer *)v37, 0);
    v11 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v37);
    v12 = (const float *)DspLibBuffer::channel((DspLibBuffer *)v37, 1u);
    v13 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v37);
    v14 = (float *)DspLibBuffer::channel(a3, 0);
    vp::utility::CPU_Profiler::get_cycle_count(a3);
    DspLib::vmax(v10, v11, v12, v13, v14);
  }
  if (*((_BYTE *)this + 5057))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)v27);
    DspLib::LoudspeakerModel::Algorithm::Algorithm((uint64_t)v18, 1);
    DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v18, v9, 39);
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v18, 1, *((double *)a2 + 3));
    DspLib::LoudspeakerModel::Algorithm::frequencyResponse((DspLib::LoudspeakerModel::Algorithm *)v18, a2, (DspLibBuffer *)v27);
    v15 = (float *)DspLibBuffer::channel(a3, 0);
    v16 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v17 = (const float *)DspLibBuffer::channel((DspLibBuffer *)v27, 0);
    vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v27);
    DspLib::add(v15, v16, v17);
    v18[0] = &off_1E69C1C68;
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v26);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v23);
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    v18[0] = off_1E69C46F0;
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v27);
  }
  v28[0] = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v36);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v33);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  v28[0] = off_1E69C46F0;
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v37);
}

void sub_1B608ADB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&STACK[0x2B8]);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm((DspLib::LoudspeakerModel::Algorithm *)&STACK[0x318]);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 - 176));
  _Unwind_Resume(a1);
}

void DspLib::BassQueen::Algorithm::~Algorithm(DspLib::BassQueen::Algorithm *this)
{
  DspLib::BassQueen::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void **v37;

  *(_QWORD *)this = &off_1E69C1718;
  *((_QWORD *)this + 849) = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 7464));
  v2 = (void *)*((_QWORD *)this + 930);
  if (v2)
  {
    *((_QWORD *)this + 931) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 7392));
  v3 = (void *)*((_QWORD *)this + 921);
  if (v3)
  {
    *((_QWORD *)this + 922) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 849) = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 855);
  if (v4)
  {
    *((_QWORD *)this + 856) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 762) = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 6768));
  v5 = (void *)*((_QWORD *)this + 843);
  if (v5)
  {
    *((_QWORD *)this + 844) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 6696));
  v6 = (void *)*((_QWORD *)this + 834);
  if (v6)
  {
    *((_QWORD *)this + 835) = v6;
    operator delete(v6);
  }
  *((_QWORD *)this + 762) = off_1E69C46F0;
  v7 = (void *)*((_QWORD *)this + 768);
  if (v7)
  {
    *((_QWORD *)this + 769) = v7;
    operator delete(v7);
  }
  *((_QWORD *)this + 722) = off_1E69BF9F0;
  v37 = (void **)((char *)this + 6064);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  v8 = (void *)*((_QWORD *)this + 755);
  if (v8)
  {
    *((_QWORD *)this + 756) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 752);
  if (v9)
  {
    *((_QWORD *)this + 753) = v9;
    operator delete(v9);
  }
  v37 = (void **)((char *)this + 5992);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v37);
  *((_QWORD *)this + 722) = off_1E69C46F0;
  v10 = (void *)*((_QWORD *)this + 728);
  if (v10)
  {
    *((_QWORD *)this + 729) = v10;
    operator delete(v10);
  }
  *((_QWORD *)this + 682) = off_1E69BF9F0;
  v37 = (void **)((char *)this + 5744);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  v11 = (void *)*((_QWORD *)this + 715);
  if (v11)
  {
    *((_QWORD *)this + 716) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 712);
  if (v12)
  {
    *((_QWORD *)this + 713) = v12;
    operator delete(v12);
  }
  v37 = (void **)((char *)this + 5672);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v37);
  *((_QWORD *)this + 682) = off_1E69C46F0;
  v13 = (void *)*((_QWORD *)this + 688);
  if (v13)
  {
    *((_QWORD *)this + 689) = v13;
    operator delete(v13);
  }
  DspLibBuffer::~DspLibBuffer((DspLib::BassQueen::Algorithm *)((char *)this + 5360));
  DspLibBuffer::~DspLibBuffer((DspLib::BassQueen::Algorithm *)((char *)this + 5264));
  DspLibBuffer::~DspLibBuffer((DspLib::BassQueen::Algorithm *)((char *)this + 5120));
  v14 = (void *)*((_QWORD *)this + 629);
  if (v14)
  {
    *((_QWORD *)this + 630) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 626);
  if (v15)
  {
    *((_QWORD *)this + 627) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 623);
  if (v16)
  {
    *((_QWORD *)this + 624) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 620);
  if (v17)
  {
    *((_QWORD *)this + 621) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 617);
  if (v18)
  {
    *((_QWORD *)this + 618) = v18;
    operator delete(v18);
  }
  v37 = (void **)((char *)this + 4912);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v37);
  v37 = (void **)((char *)this + 4800);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v37);
  v37 = (void **)((char *)this + 4776);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v37);
  v37 = (void **)((char *)this + 4752);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v37);
  v37 = (void **)((char *)this + 4728);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 4696));
  v19 = (void *)*((_QWORD *)this + 584);
  if (v19)
  {
    *((_QWORD *)this + 585) = v19;
    operator delete(v19);
  }
  v37 = (void **)((char *)this + 4624);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 4592));
  v20 = (void *)*((_QWORD *)this + 571);
  if (v20)
  {
    *((_QWORD *)this + 572) = v20;
    operator delete(v20);
  }
  DspLib::ConstantQFilterbank::Modifier::~Modifier((DspLib::BassQueen::Algorithm *)((char *)this + 3968));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3944));
  v21 = (void *)*((_QWORD *)this + 490);
  if (v21)
  {
    *((_QWORD *)this + 491) = v21;
    operator delete(v21);
  }
  *((_QWORD *)this + 400) = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3872));
  v22 = (void *)*((_QWORD *)this + 481);
  if (v22)
  {
    *((_QWORD *)this + 482) = v22;
    operator delete(v22);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3800));
  v23 = (void *)*((_QWORD *)this + 472);
  if (v23)
  {
    *((_QWORD *)this + 473) = v23;
    operator delete(v23);
  }
  *((_QWORD *)this + 400) = off_1E69C46F0;
  v24 = (void *)*((_QWORD *)this + 406);
  if (v24)
  {
    *((_QWORD *)this + 407) = v24;
    operator delete(v24);
  }
  *((_QWORD *)this + 313) = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3176));
  v25 = (void *)*((_QWORD *)this + 394);
  if (v25)
  {
    *((_QWORD *)this + 395) = v25;
    operator delete(v25);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3104));
  v26 = (void *)*((_QWORD *)this + 385);
  if (v26)
  {
    *((_QWORD *)this + 386) = v26;
    operator delete(v26);
  }
  *((_QWORD *)this + 313) = off_1E69C46F0;
  v27 = (void *)*((_QWORD *)this + 319);
  if (v27)
  {
    *((_QWORD *)this + 320) = v27;
    operator delete(v27);
  }
  *((_QWORD *)this + 226) = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 2480));
  v28 = (void *)*((_QWORD *)this + 307);
  if (v28)
  {
    *((_QWORD *)this + 308) = v28;
    operator delete(v28);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 2408));
  v29 = (void *)*((_QWORD *)this + 298);
  if (v29)
  {
    *((_QWORD *)this + 299) = v29;
    operator delete(v29);
  }
  *((_QWORD *)this + 226) = off_1E69C46F0;
  v30 = (void *)*((_QWORD *)this + 232);
  if (v30)
  {
    *((_QWORD *)this + 233) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 223);
  if (v31)
  {
    *((_QWORD *)this + 224) = v31;
    operator delete(v31);
  }
  v37 = (void **)((char *)this + 1752);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  v37 = (void **)((char *)this + 1720);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  v37 = (void **)((char *)this + 1672);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  v32 = (void *)*((_QWORD *)this + 204);
  if (v32)
  {
    *((_QWORD *)this + 205) = v32;
    operator delete(v32);
  }
  *((_QWORD *)this + 116) = &off_1E69C1C68;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 1600));
  v33 = (void *)*((_QWORD *)this + 197);
  if (v33)
  {
    *((_QWORD *)this + 198) = v33;
    operator delete(v33);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 1528));
  v34 = (void *)*((_QWORD *)this + 188);
  if (v34)
  {
    *((_QWORD *)this + 189) = v34;
    operator delete(v34);
  }
  *((_QWORD *)this + 116) = off_1E69C46F0;
  v35 = (void *)*((_QWORD *)this + 122);
  if (v35)
  {
    *((_QWORD *)this + 123) = v35;
    operator delete(v35);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v36 = (void *)*((_QWORD *)this + 6);
  if (v36)
  {
    *((_QWORD *)this + 7) = v36;
    operator delete(v36);
  }
}

float DspLib::BassQueen::Algorithm::parameterBounds(DspLib::BassQueen::Algorithm *this, uint64_t a2)
{
  return *((float *)this + a2 + 54);
}

void std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 48));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void DspLib::ConstantQFilterbank::Modifier::~Modifier(DspLib::ConstantQFilterbank::Modifier *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  v2 = (void *)*((_QWORD *)this + 69);
  if (v2)
  {
    *((_QWORD *)this + 70) = v2;
    operator delete(v2);
  }
  v10 = (void **)((char *)this + 528);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v3 = (void *)*((_QWORD *)this + 62);
  if (v3)
  {
    *((_QWORD *)this + 63) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 57);
  if (v4)
  {
    *((_QWORD *)this + 58) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v10 = (void **)((char *)this + 400);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 368));
  v6 = (void *)*((_QWORD *)this + 43);
  if (v6)
  {
    *((_QWORD *)this + 44) = v6;
    operator delete(v6);
  }
  v10 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 264));
  v7 = (void *)*((_QWORD *)this + 30);
  if (v7)
  {
    *((_QWORD *)this + 31) = v7;
    operator delete(v7);
  }
  v10 = (void **)((char *)this + 192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 160));
  v8 = (void *)*((_QWORD *)this + 17);
  if (v8)
  {
    *((_QWORD *)this + 18) = v8;
    operator delete(v8);
  }
  v10 = (void **)((char *)this + 88);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 56));
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
}

void std::vector<DspLib::CircularDelay>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<DspLib::CircularDelay>::__append(a1, a2 - v4);
  }
}

void std::vector<DspLib::CircularDelay>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<DspLib::CircularDelay>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1B608B19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::CircularDelay>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *(_QWORD *)(v7 - 8) = a3[3];
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>::operator()[abi:ne180100](a1);
  return a1;
}

double DspLib::NotchFilterBank::FilterBank::FilterBank(DspLib::NotchFilterBank::FilterBank *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::NotchFilterBank::Parameters::kDefault, 0x10uLL, (uint64_t)&DspLib::NotchFilterBank::Parameters::kMinimum, 16, (uint64_t)&DspLib::NotchFilterBank::Parameters::kMaximum, 16);
  *(_QWORD *)v1 = &off_1E69C1828;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 296) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 496) = 1065353216;
  *(_QWORD *)(v1 + 532) = 0x3F80000000000000;
  *(_QWORD *)(v1 + 520) = 0;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_BYTE *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_QWORD *)(v1 + 560) = 0;
  *(_OWORD *)(v1 + 544) = 0u;
  *(_BYTE *)(v1 + 568) = 0;
  *(_QWORD *)(v1 + 672) = 0x447A000000000017;
  result = 0.0078125;
  *(_QWORD *)(v1 + 680) = 0x3F80000000000000;
  return result;
}

void DspLib::NotchFilterBank::FilterBank::~FilterBank(DspLib::NotchFilterBank::FilterBank *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;

  *(_QWORD *)this = &off_1E69C1828;
  DspLib::NotchFilterBank::FilterBank::cleanUp(this);
  *((_BYTE *)this + 8) = 0;
  v13 = (void **)((char *)this + 648);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::NotchFilterBank::FilterBank *)((char *)this + 616));
  v2 = (void *)*((_QWORD *)this + 74);
  if (v2)
  {
    *((_QWORD *)this + 75) = v2;
    operator delete(v2);
  }
  v13 = (void **)((char *)this + 544);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 504);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v13);
  v3 = (void *)*((_QWORD *)this + 59);
  if (v3)
  {
    *((_QWORD *)this + 60) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 56);
  if (v4)
  {
    *((_QWORD *)this + 57) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 53);
  if (v5)
  {
    *((_QWORD *)this + 54) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 50);
  if (v6)
  {
    *((_QWORD *)this + 51) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 47);
  if (v7)
  {
    *((_QWORD *)this + 48) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 44);
  if (v8)
    operator delete(v8);
  v9 = (void *)*((_QWORD *)this + 41);
  if (v9)
  {
    *((_QWORD *)this + 42) = v9;
    operator delete(v9);
  }
  v13 = (void **)((char *)this + 304);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v10 = (void *)*((_QWORD *)this + 30);
  if (v10)
  {
    *((_QWORD *)this + 31) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 27);
  if (v11)
  {
    *((_QWORD *)this + 28) = v11;
    operator delete(v11);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v12 = (void *)*((_QWORD *)this + 6);
  if (v12)
  {
    *((_QWORD *)this + 7) = v12;
    operator delete(v12);
  }
}

{
  DspLib::NotchFilterBank::FilterBank::~FilterBank(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::NotchFilterBank::FilterBank::initialize(DspLib::NotchFilterBank::FilterBank *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t j;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  int v41;
  unsigned int v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  v5 = v4;
  if ((_DWORD)v4)
  {
    if (*((_DWORD *)this + 3) >= 0x41u)
    {
      v40 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      v41 = 35;
    }
    else
    {
      v6 = *((unsigned int *)this + 73);
      if ((_DWORD)v6)
      {
        v42 = v4;
        *((_QWORD *)this + 84) = 0x447A000000000000;
        *((_DWORD *)this + 170) = 0;
        std::vector<float>::resize((uint64_t)this + 376, v6);
        std::vector<float>::resize((uint64_t)this + 400, *((unsigned int *)this + 73));
        std::vector<float>::resize((uint64_t)this + 424, *((unsigned int *)this + 73));
        std::vector<float>::resize((uint64_t)this + 448, *((unsigned int *)this + 73));
        std::vector<float>::resize((uint64_t)this + 472, *((unsigned int *)this + 73));
        DspLib::fill(*((float **)this + 47), (uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 2, 1000.0);
        DspLib::fill(*((float **)this + 50), (uint64_t)(*((_QWORD *)this + 51) - *((_QWORD *)this + 50)) >> 2, 1000.0);
        DspLib::clear(*((float **)this + 53), (uint64_t)(*((_QWORD *)this + 54) - *((_QWORD *)this + 53)) >> 2);
        DspLib::fill(*((float **)this + 56), (uint64_t)(*((_QWORD *)this + 57) - *((_QWORD *)this + 56)) >> 2, 1.0);
        DspLib::clear(*((float **)this + 59), (uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 2);
        v7 = *((_QWORD *)this + 63);
        for (i = *((_QWORD *)this + 64); i != v7; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i))
          i -= 104;
        *((_QWORD *)this + 64) = v7;
        if (*((_DWORD *)this + 73))
        {
          v9 = 0;
          v10 = 0;
          v11 = (_QWORD *)((char *)this + 504);
          do
          {
            v12 = *((_QWORD *)this + 64);
            v13 = *((_QWORD *)this + 65);
            if (v12 >= v13)
            {
              v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - *v11) >> 3);
              v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) > 0x276276276276276)
LABEL_53:
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v17 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - *v11) >> 3);
              if (2 * v17 > v16)
                v16 = 2 * v17;
              if (v17 >= 0x13B13B13B13B13BLL)
                v18 = 0x276276276276276;
              else
                v18 = v16;
              v47 = (char *)this + 520;
              if (v18)
                v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>((uint64_t)this + 520, v18);
              else
                v19 = 0;
              v20 = &v19[104 * v15];
              v43 = v19;
              v44 = v20;
              v46 = &v19[104 * v18];
              *(_OWORD *)v20 = 0u;
              *((_OWORD *)v20 + 1) = 0u;
              *((_OWORD *)v20 + 2) = 0u;
              *((_OWORD *)v20 + 3) = 0u;
              *((_OWORD *)v20 + 4) = 0u;
              *((_OWORD *)v20 + 5) = 0u;
              *((_QWORD *)v20 + 12) = 0;
              v45 = v20 + 104;
              std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer((uint64_t *)this + 63, &v43);
              v14 = *((_QWORD *)this + 64);
              std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)&v43);
            }
            else
            {
              *(_QWORD *)(v12 + 96) = 0;
              *(_OWORD *)(v12 + 64) = 0u;
              *(_OWORD *)(v12 + 80) = 0u;
              *(_OWORD *)(v12 + 32) = 0u;
              *(_OWORD *)(v12 + 48) = 0u;
              *(_OWORD *)v12 = 0u;
              *(_OWORD *)(v12 + 16) = 0u;
              v14 = v12 + 104;
              *((_QWORD *)this + 64) = v12 + 104;
            }
            *((_QWORD *)this + 64) = v14;
            DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(*((_QWORD *)this + 63) + v9), 1uLL, *((double *)this + 3), 1uLL);
            ++v10;
            v9 += 104;
          }
          while (v10 < *((unsigned int *)this + 73));
        }
        DspLib::Biquad::ParametricFilter::initialize((DspLib::NotchFilterBank::FilterBank *)((char *)this + 568), 1uLL, *((double *)this + 3), 1uLL);
        v21 = *((_DWORD *)this + 72);
        if (v21)
        {
          if (v21 != 1)
          {
            v24 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
            printf("DSP Sound assertion in %s at line %d\n", v24, 82);
            ++DspLibDebug::mAssertCounter;
            return v42;
          }
          std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::resize((uint64_t)this + 328, (*((_DWORD *)this + 3) * *((_DWORD *)this + 73)));
        }
        else
        {
          v22 = *((_QWORD *)this + 38);
          for (j = *((_QWORD *)this + 39); j != v22; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(j))
            j -= 104;
          *((_QWORD *)this + 39) = v22;
          if (*((_DWORD *)this + 73))
          {
            v25 = 0;
            v26 = 0;
            v27 = (_QWORD *)((char *)this + 304);
            do
            {
              v28 = *((_QWORD *)this + 39);
              v29 = *((_QWORD *)this + 40);
              if (v28 >= v29)
              {
                v31 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v28 - *v27) >> 3);
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) > 0x276276276276276)
                  goto LABEL_53;
                v33 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v29 - *v27) >> 3);
                if (2 * v33 > v32)
                  v32 = 2 * v33;
                if (v33 >= 0x13B13B13B13B13BLL)
                  v34 = 0x276276276276276;
                else
                  v34 = v32;
                v47 = (char *)this + 320;
                if (v34)
                  v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>((uint64_t)this + 320, v34);
                else
                  v35 = 0;
                v36 = &v35[104 * v31];
                v43 = v35;
                v44 = v36;
                v46 = &v35[104 * v34];
                *(_OWORD *)v36 = 0u;
                *((_OWORD *)v36 + 1) = 0u;
                *((_OWORD *)v36 + 2) = 0u;
                *((_OWORD *)v36 + 3) = 0u;
                *((_OWORD *)v36 + 4) = 0u;
                *((_OWORD *)v36 + 5) = 0u;
                *((_QWORD *)v36 + 12) = 0;
                v45 = v36 + 104;
                std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer((uint64_t *)this + 38, &v43);
                v30 = *((_QWORD *)this + 39);
                std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)&v43);
              }
              else
              {
                *(_QWORD *)(v28 + 96) = 0;
                *(_OWORD *)(v28 + 64) = 0u;
                *(_OWORD *)(v28 + 80) = 0u;
                *(_OWORD *)(v28 + 32) = 0u;
                *(_OWORD *)(v28 + 48) = 0u;
                *(_OWORD *)v28 = 0u;
                *(_OWORD *)(v28 + 16) = 0u;
                v30 = v28 + 104;
                *((_QWORD *)this + 39) = v28 + 104;
              }
              *((_QWORD *)this + 39) = v30;
              DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(*((_QWORD *)this + 38) + v25), *((unsigned int *)this + 3), *((double *)this + 3), 1uLL);
              ++v26;
              v25 += 104;
            }
            while (v26 < *((unsigned int *)this + 73));
          }
        }
        std::vector<float>::resize((uint64_t)this + 216, 0x200uLL);
        std::vector<float>::resize((uint64_t)this + 240, 0x200uLL);
        std::vector<std::vector<float>>::resize((uint64_t *)this + 33, *((unsigned int *)this + 3));
        v38 = *((_QWORD *)this + 33);
        v37 = *((_QWORD *)this + 34);
        while (v38 != v37)
        {
          std::vector<float>::resize(v38, 0x200uLL);
          v38 += 24;
        }
        std::vector<BOOL>::resize((uint64_t)this + 352, *((unsigned int *)this + 73), 0);
        *((_BYTE *)this + 8) = 1;
        (*(void (**)(DspLib::NotchFilterBank::FilterBank *))(*(_QWORD *)this + 144))(this);
        return v42;
      }
      v40 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      v41 = 36;
    }
    printf("DSP Sound assertion in %s at line %d\n", v40, v41);
    ++DspLibDebug::mAssertCounter;
  }
  return v5;
}

void sub_1B608BF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 36 * a2;
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1B608C12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DspLib::NotchFilterBank::FilterBank::uninitialize(DspLib::NotchFilterBank::FilterBank *this)
{
  DspLib::NotchFilterBank::FilterBank::cleanUp(this);
  *((_BYTE *)this + 8) = 0;
}

void DspLib::NotchFilterBank::FilterBank::cleanUp(DspLib::NotchFilterBank::FilterBank *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  int v8;
  char *v9;

  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 28) = *((_QWORD *)this + 27);
  *((_QWORD *)this + 31) = *((_QWORD *)this + 30);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 33);
  *((_QWORD *)this + 48) = *((_QWORD *)this + 47);
  *((_QWORD *)this + 51) = *((_QWORD *)this + 50);
  *((_QWORD *)this + 54) = *((_QWORD *)this + 53);
  *((_QWORD *)this + 57) = *((_QWORD *)this + 56);
  *((_QWORD *)this + 60) = *((_QWORD *)this + 59);
  v2 = *((_QWORD *)this + 69);
  v3 = *((_QWORD *)this + 68);
  while (v2 != v3)
  {
    v2 -= 104;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v2);
  }
  *((_QWORD *)this + 69) = v3;
  v5 = *((_QWORD *)this + 63);
  for (i = *((_QWORD *)this + 64); i != v5; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i))
    i -= 104;
  *((_QWORD *)this + 64) = v5;
  v7 = *((_QWORD *)this + 38);
  for (j = *((_QWORD *)this + 39); j != v7; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(j))
    j -= 104;
  *((_QWORD *)this + 39) = v7;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::NotchFilterBank::FilterBank *)((char *)this + 568));
  v8 = *((_DWORD *)this + 72);
  if (v8)
  {
    if (v8 == 1)
    {
      *((_QWORD *)this + 42) = *((_QWORD *)this + 41);
    }
    else
    {
      v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v9, 139);
      ++DspLibDebug::mAssertCounter;
    }
  }
}

void DspLib::NotchFilterBank::FilterBank::reset(DspLib::NotchFilterBank::FilterBank *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *((_QWORD *)this + 38);
  v3 = *((_QWORD *)this + 39);
  while (v2 != v3)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 48));
    v2 += 104;
  }
  v4 = *((_QWORD *)this + 63);
  v5 = *((_QWORD *)this + 64);
  while (v4 != v5)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v4 + 48));
    v4 += 104;
  }
  v6 = *((_QWORD *)this + 41);
  if (v6 != *((_QWORD *)this + 42))
  {
    v7 = (*((_DWORD *)this + 3) * *((_DWORD *)this + 73));
    if ((_DWORD)v7)
    {
      v8 = (_QWORD *)(v6 + 12);
      do
      {
        *((_DWORD *)v8 - 2) = 0;
        *v8 = 0;
        *(_QWORD *)((char *)v8 + 12) = 0;
        v8 = (_QWORD *)((char *)v8 + 36);
        --v7;
      }
      while (v7);
    }
  }
  v9 = *((_QWORD *)this + 45);
  if (v9)
  {
    v12 = *((_QWORD *)this + 44);
    v13 = 0;
    std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v12, v9);
  }
  *((_BYTE *)this + 528) = 0;
  v10 = *((_QWORD *)this + 68);
  v11 = *((_QWORD *)this + 69);
  while (v10 != v11)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v10 + 48));
    v10 += 104;
  }
  DspLib::Biquad::SetupWrapper::reset((DspLib::NotchFilterBank::FilterBank *)((char *)this + 616));
  *((_DWORD *)this + 74) = 0;
}

void DspLib::NotchFilterBank::FilterBank::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  double v5;
  DspLib::Biquad::ParametricFilter *v6;
  unint64_t v7;
  unint64_t v8;
  DspLib *v9;
  float *v10;
  double v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  uint64_t v19;
  DspLib::Biquad::ParametricFilter *v20;
  DspLib *v21;
  DspLib::Biquad::ParametricFilter *v22;
  DspLib::Biquad::ParametricFilter *v23;

  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = round(*(double *)(a1 + 24));
    v6 = *(DspLib::Biquad::ParametricFilter **)(a1 + 504);
    v7 = *(_QWORD *)(a1 + 512);
    v8 = ((unint64_t)COERCE_UNSIGNED_INT(1000.0 / *(float *)(*(_QWORD *)(a1 + 48) + 16)) << 32) | 6;
    while (v6 != (DspLib::Biquad::ParametricFilter *)v7)
    {
      DspLib::Biquad::ParametricFilter::initialize(v6, 1uLL, v5, 1uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v6, v8, (double *)0x3F00000000000000, 0, 0x41uLL);
      v6 = (DspLib::Biquad::ParametricFilter *)((char *)v6 + 104);
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 568), 1uLL, v5, 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 568, v8, (double *)0x3F00000000000000, 0, 0x41uLL);
    v10 = *(float **)(a1 + 48);
    if (*(_DWORD *)(a1 + 288) == 1)
    {
      v11 = *(double *)(a1 + 24);
      v12 = -1.0 / (v11 * v10[5] / 1000.0);
      v13 = expf(v12);
      v14 = (*(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 292));
      if ((_DWORD)v14)
      {
        v15 = 1.0 - v13;
        v16 = (float *)(*(_QWORD *)(a1 + 328) + 32);
        do
        {
          *(v16 - 6) = v15;
          v17 = v10[6];
          v18 = 0.0;
          if (v17 >= 100.0)
            v18 = 2500.0 / (v11 * v17);
          *v16 = v18;
          v16 += 9;
          --v14;
        }
        while (v14);
        v10 = *(float **)(a1 + 48);
      }
    }
    LODWORD(v7) = vcvtas_u32_f32(v10[7]);
    v19 = *(_QWORD *)(a1 + 552);
    v20 = *(DspLib::Biquad::ParametricFilter **)(a1 + 544);
    if (0x4EC4EC4EC4EC4EC5 * ((v19 - (uint64_t)v20) >> 3) != v7)
    {
      while ((DspLib::Biquad::ParametricFilter *)v19 != v20)
      {
        v19 -= 104;
        std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v19);
      }
      *(_QWORD *)(a1 + 552) = v20;
      std::vector<DspLib::Biquad::ParametricFilter>::resize((uint64_t *)(a1 + 544), v7);
      v20 = *(DspLib::Biquad::ParametricFilter **)(a1 + 544);
      v19 = *(_QWORD *)(a1 + 552);
    }
    while (v20 != (DspLib::Biquad::ParametricFilter *)v19)
    {
      DspLib::Biquad::ParametricFilter::initialize(v20, *(unsigned int *)(a1 + 12), v5, 1uLL);
      v20 = (DspLib::Biquad::ParametricFilter *)((char *)v20 + 104);
    }
    *(float *)(a1 + 496) = DspLib::dB2Amp(v9, *(float *)(*(_QWORD *)(a1 + 48) + 12));
    *(float *)(a1 + 536) = DspLib::dB2Amp(v21, *(float *)(*(_QWORD *)(a1 + 48) + 12)/ (float)(unint64_t)(0x4EC4EC4EC4EC4EC5* ((uint64_t)(*(_QWORD *)(a1 + 552) - *(_QWORD *)(a1 + 544)) >> 3)));
    DspLib::NotchFilterBank::FilterBank::setFilterBankParameters((DspLib::NotchFilterBank::FilterBank *)a1, *(_DWORD *)(a1 + 292));
    v22 = *(DspLib::Biquad::ParametricFilter **)(a1 + 304);
    v23 = *(DspLib::Biquad::ParametricFilter **)(a1 + 312);
    while (v22 != v23)
    {
      DspLib::Biquad::ParametricFilter::initialize(v22, *(unsigned int *)(a1 + 12), v5, 1uLL);
      v22 = (DspLib::Biquad::ParametricFilter *)((char *)v22 + 104);
    }
    DspLib::NotchFilterBank::FilterBank::setLowShelveQuality((DspLib::NotchFilterBank::FilterBank *)a1, *(float *)(*(_QWORD *)(a1 + 48) + 32));
  }
}

void std::vector<DspLib::Biquad::ParametricFilter>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::Biquad::ParametricFilter>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v3);
    }
    a1[1] = v7;
  }
}

void DspLib::NotchFilterBank::FilterBank::setFilterBankParameters(DspLib::NotchFilterBank::FilterBank *this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  unsigned int v31;
  float *v32;

  v3 = *((_QWORD *)this + 6);
  v4 = *(float *)(v3 + 8);
  v5 = 23;
  if (v4 == 1)
    v5 = 14;
  if (v4)
    v6 = v5;
  else
    v6 = 13;
  v7 = *((_DWORD *)this + 72);
  if (v7 != 1)
  {
    if (v7)
    {
      v20 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v20, 404);
      ++DspLibDebug::mAssertCounter;
    }
    else if (a2)
    {
      v8 = 0;
      v9 = a2;
      do
      {
        v10 = *((_QWORD *)this + 6);
        v11 = *((_QWORD *)this + 56);
        v12 = *((_QWORD *)this + 50);
        v13 = *(float *)(v10 + 4) * *(float *)(v11 + 4 * v8);
        v14 = *((_QWORD *)this + 47);
        v15 = *(float *)(v14 + 4 * v8);
        v16 = *((_QWORD *)this + 59);
        if (*(float *)(v12 + 4 * v8) != v15 || v13 != *(float *)(v16 + 4 * v8))
        {
          *(float *)(v12 + 4 * v8) = v15;
          *(float *)(v16 + 4 * v8) = v13;
          DspLib::Biquad::ParametricFilter::setParametricEQ(*((_QWORD *)this + 38) + 104 * v8, v6 | ((unint64_t)*(unsigned int *)(v14 + 4 * v8) << 32), (double *)((unint64_t)COERCE_UNSIGNED_INT(*(float *)(v10 + 4) * *(float *)(v11 + 4 * v8)) << 32), 0, 0x41uLL);
        }
        ++v8;
      }
      while (v8 != v9);
    }
    return;
  }
  v17 = 6.28318531 / *((double *)this + 3);
  v18 = 0.0;
  if (v4)
  {
    if (v4 == 1)
    {
      v19 = v17 / *(float *)(v3 + 4);
      if (!a2)
        return;
      goto LABEL_22;
    }
  }
  else
  {
    v18 = (float)(v17 * 140.37) / *(float *)(v3 + 4);
  }
  v19 = 0.0;
  if (!a2)
    return;
LABEL_22:
  v21 = 0;
  v22 = 0;
  v23 = *((_QWORD *)this + 47);
  v24 = *((_QWORD *)this + 56);
  v25 = *((unsigned int *)this + 3);
  do
  {
    if ((_DWORD)v25)
    {
      v26 = *(float *)(v23 + 4 * v22);
      v27 = (float)(v18 + (float)(v19 * v26)) * (float)(1.0 / *(float *)(v24 + 4 * v22));
      if (v27 > 1.0)
        v27 = 1.0;
      v28 = *((_QWORD *)this + 41);
      v29 = v26 * v17;
      v30 = v25;
      v31 = v21;
      do
      {
        v32 = (float *)(v28 + 36 * v31);
        v32[5] = v27;
        *v32 = v29;
        ++v31;
        --v30;
      }
      while (v30);
    }
    ++v22;
    v21 += v25;
  }
  while (v22 != a2);
}

void DspLib::NotchFilterBank::FilterBank::setLowShelveQuality(DspLib::NotchFilterBank::FilterBank *this, float a2)
{
  uint64_t v2;
  uint64_t i;

  *((float *)this + 171) = a2;
  v2 = *((_QWORD *)this + 68);
  for (i = *((_QWORD *)this + 69); v2 != i; v2 += 104)
    DspLib::Biquad::ParametricFilter::setParametricEQ(v2, *((_QWORD *)this + 84), *((double **)this + 85), 0, 0x41uLL);
}

uint64_t DspLib::NotchFilterBank::FilterBank::setFilterMode(uint64_t result, int a2)
{
  char *v2;
  int v3;

  if (*(_BYTE *)(result + 8))
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v3 = 260;
LABEL_7:
    result = printf("DSP Sound assertion in %s at line %d\n", v2, v3);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  if (a2 >= 2)
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v3 = 261;
    goto LABEL_7;
  }
  *(_DWORD *)(result + 288) = a2;
  return result;
}

uint64_t DspLib::NotchFilterBank::FilterBank::setNumNotchFilters(uint64_t this, unsigned int a2)
{
  char *v2;
  int v3;

  if (*(_BYTE *)(this + 8))
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v3 = 273;
LABEL_9:
    this = printf("DSP Sound assertion in %s at line %d\n", v2, v3);
    ++DspLibDebug::mAssertCounter;
    return this;
  }
  if (a2 >= 0x65)
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v3 = 274;
    goto LABEL_9;
  }
  if (!a2)
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v3 = 275;
    goto LABEL_9;
  }
  *(_DWORD *)(this + 292) = a2;
  return this;
}

void DspLib::NotchFilterBank::FilterBank::setNotchFilters(DspLib::NotchFilterBank::FilterBank *this, float *a2, float *a3, float *a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  char *v15;
  int v16;

  if (*((_DWORD *)this + 73) < a5)
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v16 = 287;
LABEL_22:
    printf("DSP Sound assertion in %s at line %d\n", v15, v16);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!a2)
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v16 = 288;
    goto LABEL_22;
  }
  if (!a3)
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v16 = 289;
    goto LABEL_22;
  }
  if (a5)
  {
    v7 = 0;
    v8 = *((_QWORD *)this + 53);
    v9 = *((_QWORD *)this + 56);
    do
    {
      v10 = a2[v7];
      if (v10 <= 20000.0)
        v11 = &a2[v7];
      else
        v11 = (float *)&DspLib::NotchFilterBank::kMaxFilterFrequency;
      if (v10 < 20.0)
        v11 = (float *)&DspLib::NotchFilterBank::kMinFilterFrequency;
      a2[v7] = *v11;
      v12 = a3[v7];
      v13 = 0.0;
      if (v12 >= 0.0)
      {
        v13 = 1.0;
        if (v12 <= 1.0)
          v13 = a3[v7];
      }
      a3[v7] = v13;
      v14 = 1.0;
      *(float *)(v8 + v7 * 4) = 1.0 - v13;
      if (a4)
        v14 = a4[v7];
      *(float *)(v9 + v7 * 4) = v14;
      ++v7;
    }
    while (a5 != v7);
    memmove(*((void **)this + 47), a2, 4 * a5);
  }
  DspLib::NotchFilterBank::FilterBank::setFilterBankParameters(this, a5);
}

void DspLib::NotchFilterBank::FilterBank::setLowShelveFrequency(DspLib::NotchFilterBank::FilterBank *this, float a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t i;

  v2 = 20000.0;
  if (a2 <= 20000.0)
    v2 = a2;
  if (a2 >= 20.0)
    v3 = v2;
  else
    v3 = 20.0;
  *((float *)this + 169) = v3;
  v4 = *((_QWORD *)this + 68);
  for (i = *((_QWORD *)this + 69); v4 != i; v4 += 104)
    DspLib::Biquad::ParametricFilter::setParametricEQ(v4, *((_QWORD *)this + 84), *((double **)this + 85), 0, 0x41uLL);
}

float DspLib::NotchFilterBank::FilterBank::setLowShelveGain(DspLib::NotchFilterBank::FilterBank *this, float a2)
{
  float result;

  if (a2 > 1.0)
    a2 = 1.0;
  result = 1.0
         - powf(fmaxf(a2, 0.00001), 1.0/ (float)(unint64_t)(0x4EC4EC4EC4EC4EC5* ((uint64_t)(*((_QWORD *)this + 69) - *((_QWORD *)this + 68)) >> 3)));
  *((float *)this + 133) = result;
  return result;
}

void DspLib::NotchFilterBank::FilterBank::processBlock(DspLib::NotchFilterBank::FilterBank *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  _QWORD v20[3];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  if (cycle_count >= 0x201)
  {
    v17 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v18 = 413;
LABEL_15:
    printf("DSP Sound assertion in %s at line %d\n", v17, v18);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!*((_BYTE *)this + 8))
  {
    v17 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v18 = 414;
    goto LABEL_15;
  }
  v7 = cycle_count;
  v8 = DspLibBuffer::channel(a3, 0);
  if (v8 != DspLibBuffer::channel(a2, 0))
    DspLibBuffer::operator=((uint64_t)a3, a2);
  *((_DWORD *)this + 74) = 0;
  DspLibBuffer::setNumFrames(a3, v7);
  v9 = DspLibBuffer::numChannels(a3);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20[-1] - v11;
  if (v10 >= 0x200)
    v13 = 512;
  else
    v13 = v10;
  bzero((char *)&v20[-1] - v11, v13);
  if (DspLibBuffer::numChannels(a3))
  {
    v14 = 0;
    do
    {
      *(_QWORD *)&v12[8 * v14] = DspLibBuffer::channel(a3, v14);
      ++v14;
    }
    while (v14 < DspLibBuffer::numChannels(a3));
  }
  v15 = DspLibBuffer::numChannels(a3);
  v16 = vp::utility::CPU_Profiler::get_cycle_count(a3);
  v21[0] = v12;
  v21[1] = v15;
  v21[2] = v16;
  DspLib::NotchFilterBank::FilterBank::processLowShelveBlock((uint64_t)this, v21);
  v20[0] = v12;
  v20[1] = v15;
  v20[2] = v16;
  DspLib::NotchFilterBank::FilterBank::processNotchFilterBlock((uint64_t)this, v20);
}

void DspLib::NotchFilterBank::FilterBank::processLowShelveBlock(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  uint64_t v9;
  float **v10;
  size_t v11;
  float **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  _QWORD v19[3];
  __int128 v20;
  uint64_t v21;
  float **v22[3];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v2 = a2[2];
  if (v2)
  {
    if (*(float *)(a1 + 532) <= *(float *)(a1 + 536))
    {
      if (!*(_BYTE *)(a1 + 528))
        return;
    }
    else
    {
      *(_BYTE *)(a1 + 528) = 1;
    }
    ++*(_DWORD *)(a1 + 296);
    std::vector<float>::resize(a1 + 216, v2);
    DspLib::fill(*(float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, *(float *)(a1 + 532));
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 568), *(_QWORD *)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, *(_QWORD *)(a1 + 216), (float **)((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2));
    if (*(float *)(*(_QWORD *)(a1 + 216) + 4 * v2 - 4) < *(float *)(a1 + 536))
      *(_BYTE *)(a1 + 528) = 0;
    v6 = *(_QWORD **)(a1 + 544);
    for (i = *(_QWORD **)(a1 + 552); v6 != i; v6 += 13)
    {
      MEMORY[0x1E0C80A78](v5);
      v10 = (float **)((char *)&v19[-1] - v9);
      if (v8 >= 0x200)
        v11 = 512;
      else
        v11 = v8;
      bzero((char *)&v19[-1] - v9, v11);
      v12 = *(float ***)(a1 + 264);
      v13 = *(_QWORD *)(a1 + 272) - (_QWORD)v12;
      v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
      if (v13)
      {
        v15 = 0;
        do
        {
          v16 = *v12;
          v12 += 3;
          v10[v15++] = v16;
        }
        while (v14 > v15);
      }
      if (*(_DWORD *)(a1 + 12))
      {
        v17 = 0;
        do
        {
          DspLib::multiply(*(const float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, *(const float **)(*a2 + 8 * v17), a2[2], v10[v17]);
          ++v17;
        }
        while (v17 < *(unsigned int *)(a1 + 12));
      }
      v22[0] = v10;
      v22[1] = (float **)v14;
      v22[2] = (float **)v2;
      v23[0] = v10;
      v23[1] = v14;
      v23[2] = v2;
      DspLib::Biquad::Filter::process(v6, (uint64_t)v23, v22);
      v20 = *(_OWORD *)a2;
      v21 = a2[2];
      v19[0] = v10;
      v19[1] = v14;
      v19[2] = v2;
      DspLib::subtract(&v20, v19);
    }
  }
}

void DspLib::NotchFilterBank::FilterBank::processNotchFilterBlock(uint64_t a1, _QWORD *a2)
{
  float **v2;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  float **v18;
  size_t v19;
  float **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[3];
  __int128 v34;
  uint64_t v35;
  float **v36[3];
  _QWORD v37[4];

  v37[3] = *MEMORY[0x1E0C80C00];
  v2 = (float **)a2[2];
  if (v2 && *(_DWORD *)(a1 + 292))
  {
    v5 = 0;
    v6 = a1 + 216;
    v7 = (char *)v2 - 1;
    v31 = a1 + 240;
    do
    {
      v8 = *(float *)(*(_QWORD *)(a1 + 424) + 4 * v5);
      v9 = *(_QWORD *)(a1 + 352);
      v10 = v5 >> 6;
      v11 = 1 << v5;
      if (v8 > *(float *)(a1 + 496))
        *(_QWORD *)(v9 + 8 * v10) |= v11;
      if ((*(_QWORD *)(v9 + 8 * v10) & v11) != 0)
      {
        ++*(_DWORD *)(a1 + 296);
        std::vector<float>::resize(v6, (unint64_t)v2);
        DspLib::fill(*(float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, v8);
        DspLib::Biquad::Filter::process((_QWORD *)(*(_QWORD *)(a1 + 504) + 104 * v5), *(_QWORD *)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, *(_QWORD *)(a1 + 216), (float **)((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2));
        if (*(float *)(*(_QWORD *)(a1 + 216) + 4 * (_QWORD)v7) < *(float *)(a1 + 496))
          *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v10) &= ~v11;
        v13 = *(_DWORD *)(a1 + 288);
        if (v13 == 1)
        {
          std::vector<float>::resize(v31, (unint64_t)v2);
          if (*(_DWORD *)(a1 + 12))
          {
            v27 = 0;
            do
            {
              DspLib::multiply(*(const float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, *(const float **)(*a2 + 8 * v27), a2[2], *(float **)(a1 + 240));
              DspLib::NotchFilterBank::FilterBank::adaptiveNotchFilter(v28, *(float **)(a1 + 240), *(float **)(a1 + 240), (float *)(*(_QWORD *)(a1 + 328) + 36 * (v27 + v5 * *(_DWORD *)(a1 + 12))), v2);
              DspLib::subtract(*(float **)(*a2 + 8 * v27++), a2[2], *(const float **)(a1 + 240));
            }
            while (v27 < *(unsigned int *)(a1 + 12));
          }
        }
        else
        {
          if (v13)
          {
            v29 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
            printf("DSP Sound assertion in %s at line %d\n", v29, 528);
            ++DspLibDebug::mAssertCounter;
            return;
          }
          v14 = v6;
          v15 = v7;
          v32 = &v30;
          MEMORY[0x1E0C80A78](v12);
          v18 = (float **)((char *)&v30 - v17);
          if (v16 >= 0x200)
            v19 = 512;
          else
            v19 = v16;
          bzero((char *)&v30 - v17, v19);
          v20 = *(float ***)(a1 + 264);
          v21 = *(_QWORD *)(a1 + 272) - (_QWORD)v20;
          v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
          if (v21)
          {
            v23 = 0;
            do
            {
              v24 = *v20;
              v20 += 3;
              v18[v23++] = v24;
            }
            while (v22 > v23);
          }
          if (*(_DWORD *)(a1 + 12))
          {
            v25 = 0;
            do
            {
              DspLib::multiply(*(const float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, *(const float **)(*a2 + 8 * v25), a2[2], v18[v25]);
              ++v25;
            }
            while (v25 < *(unsigned int *)(a1 + 12));
          }
          v26 = (_QWORD *)(*(_QWORD *)(a1 + 304) + 104 * v5);
          v36[0] = v18;
          v36[1] = (float **)v22;
          v36[2] = v2;
          v37[0] = v18;
          v37[1] = v22;
          v37[2] = v2;
          DspLib::Biquad::Filter::process(v26, (uint64_t)v37, v36);
          v34 = *(_OWORD *)a2;
          v35 = a2[2];
          v33[0] = v18;
          v33[1] = v22;
          v33[2] = v2;
          DspLib::subtract(&v34, v33);
          v7 = v15;
          v6 = v14;
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 292));
  }
}

void DspLib::NotchFilterBank::FilterBank::adaptiveNotchFilter(uint64_t a1, float *a2, float *a3, float *a4, unsigned int a5)
{
  float *v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  uint64_t v14;
  __float2 v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  float v23;
  float v24;
  char *v25;
  int v26;
  float v27;
  float v28;
  float v29;

  if (a2)
  {
    v5 = a3;
    if (a3)
    {
      if (a4)
      {
        v7 = *a4;
        v8 = a4[1];
        v9 = a4[3];
        v10 = a4[4];
        v11 = a4[6];
        v29 = a4[7];
        if (a5)
        {
          v12 = a2;
          v27 = a4[5];
          v28 = a4[2];
          v13 = a4[8];
          v14 = a5;
          do
          {
            v8 = v8 + (float)((float)(v7 - v8) * v28);
            v15 = __sincosf_stret(v11);
            v16 = (float)(v11 + v8);
            if (v16 >= 6.28318531)
            {
              v17 = v16 + -6.28318531;
              v11 = v17;
            }
            else
            {
              v11 = v11 + v8;
            }
            v18 = (float)(v10 * v15.__sinval) + (float)(v9 * v15.__cosval);
            v19 = v27 * (float)(*v12 - v18);
            v9 = v9 + (float)(v19 * v15.__cosval);
            v10 = v10 + (float)(v19 * v15.__sinval);
            *v5 = v18;
            if (v13 > 0.0)
            {
              v20 = atan2f(v9, v10);
              v21 = v20 - v29;
              v22 = (float)(v20 - v29);
              if (v22 < 3.14159265)
              {
                v23 = v22 + 6.28318531;
                v21 = v23;
              }
              if (v21 > 3.14159265)
              {
                v24 = v21 + -6.28318531;
                v21 = v24;
              }
              v8 = v7 + (float)(v21 * v13);
              v29 = v20;
              v7 = v8;
            }
            ++v12;
            ++v5;
            --v14;
          }
          while (v14);
        }
        if (v9 > 10.0)
        {
          v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          v26 = 604;
        }
        else if (v9 < -10.0)
        {
          v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          v26 = 605;
        }
        else if (v10 > 10.0)
        {
          v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          v26 = 606;
        }
        else
        {
          if (v10 >= -10.0)
          {
            a4[3] = v9;
            a4[4] = v10;
            a4[6] = v11;
            a4[7] = v29;
            *a4 = v7;
            a4[1] = v8;
            return;
          }
          v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          v26 = 607;
        }
      }
      else
      {
        v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
        v26 = 544;
      }
    }
    else
    {
      v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      v26 = 543;
    }
  }
  else
  {
    v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v26 = 542;
  }
  printf("DSP Sound assertion in %s at line %d\n", v25, v26);
  ++DspLibDebug::mAssertCounter;
}

void DspLib::NotchFilterBank::FilterBank::getAmplitudeResponseLowShelvingFilter(DspLib::NotchFilterBank::FilterBank *this, float *a2, float *__b, unsigned int a4)
{
  float v7;
  DspLib::Biquad::Filter *v9;
  DspLib::Biquad::Filter *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __float2 v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unint64_t v30;
  unsigned int v31;
  char *v33;
  int v34;
  __int128 v35;
  float v36;

  if (!a2)
  {
    v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v34 = 624;
LABEL_21:
    printf("DSP Sound assertion in %s at line %d\n", v33, v34);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!__b)
  {
    v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v34 = 625;
    goto LABEL_21;
  }
  if (a4 >= 0xF4241)
  {
    v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    v34 = 626;
    goto LABEL_21;
  }
  v7 = *((float *)this + 133);
  if (v7 <= *((float *)this + 134))
  {
    if (a4)
      memset_pattern16(__b, &unk_1B6627B80, 4 * a4);
  }
  else
  {
    v9 = (DspLib::Biquad::Filter *)*((_QWORD *)this + 69);
    v10 = (DspLib::Biquad::Filter *)*((_QWORD *)this + 68);
    if (v9 == v10)
    {
      v36 = 0.0;
      v35 = DspLib::Biquad::kBypassSection;
      if (!a4)
        return;
    }
    else
    {
      DspLib::Biquad::Filter::section(v10, 0, 0, (float32x4_t *)&v35);
      if (!a4)
        return;
    }
    v11 = 0;
    v12 = 6.28318531 / *((double *)this + 3);
    v13 = v35;
    v15 = *((float *)&v35 + 3);
    v14 = v36;
    v16 = *((float *)&v35 + 2);
    v17 = -v7;
    do
    {
      v18 = a2[v11] * v12;
      v19 = 1.0;
      if (v18 < 3.14159265)
      {
        v20 = __sincosf_stret(v18);
        v19 = 1.0;
        v21 = *((_QWORD *)this + 69) - *((_QWORD *)this + 68);
        if (v21)
        {
          v22 = (float)(v20.__cosval * v20.__cosval) - (float)(v20.__sinval * v20.__sinval);
          v23 = (float)-(float)(v20.__sinval * v20.__cosval) - (float)(v20.__sinval * v20.__cosval);
          v24 = *(float *)&v13 + (float)((float)(v20.__cosval * *((float *)&v13 + 1)) + (float)(v22 * v16));
          v25 = (float)(v23 * v16) - (float)(v20.__sinval * *((float *)&v13 + 1));
          v26 = (float)((float)(v20.__cosval * v15) + (float)(v22 * v14)) + 1.0;
          v27 = (float)(v23 * v14) - (float)(v20.__sinval * v15);
          v28 = (float)(v27 * v27) + (float)(v26 * v26);
          v29 = sqrtf((float)((float)((float)((float)((float)(v25 * v26) - (float)(v24 * v27)) / v28) * v17)* (float)((float)((float)((float)(v25 * v26) - (float)(v24 * v27)) / v28) * v17))+ (float)((float)((float)((float)((float)((float)(v25 * v27) + (float)(v24 * v26)) / v28) * v17) + 1.0)* (float)((float)((float)((float)((float)(v25 * v27) + (float)(v24 * v26)) / v28) * v17) + 1.0)));
          v30 = 0x4EC4EC4EC4EC4EC5 * (v21 >> 3);
          v31 = 1;
          do
            v19 = v29 * v19;
          while (v30 > v31++);
        }
      }
      __b[v11++] = v19;
    }
    while (v11 != a4);
  }
}

void DspLib::NotchFilterBank::FilterBank::getAmplitudeResponse(DspLib::NotchFilterBank::FilterBank *this, float *a2, float *__b, unsigned int a4)
{
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v14;
  float *v15;
  uint64_t v16;
  float *v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  __float2 v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float *v36;
  float *v37;
  float v38;
  uint64_t v39;
  float v40;
  __float2 v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  char *v50;
  float *v51;
  __int128 v53;
  float v54;

  if (!a2)
  {
    v49 = 689;
    goto LABEL_33;
  }
  if (!__b)
  {
    v49 = 690;
    goto LABEL_33;
  }
  if (a4 > 0xF4240)
  {
    v49 = 691;
    goto LABEL_33;
  }
  v7 = 6.28318531 / *((double *)this + 3);
  DspLib::NotchFilterBank::FilterBank::getAmplitudeResponseLowShelvingFilter(this, a2, __b, a4);
  v8 = *((_DWORD *)this + 72);
  if (!v8)
  {
    v29 = *((unsigned int *)this + 73);
    if (!(_DWORD)v29)
      return;
    v30 = 0;
    while (1)
    {
      v31 = *(float *)(*((_QWORD *)this + 53) + 4 * v30);
      if (v31 > *((float *)this + 124))
        break;
LABEL_30:
      if (++v30 >= v29)
        return;
    }
    v32 = *((_QWORD *)this + 38);
    if (0x4EC4EC4EC4EC4EC5 * ((*((_QWORD *)this + 39) - v32) >> 3) >= v30)
    {
      DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(v32 + 104 * v30), 0, 0, (float32x4_t *)&v53);
      if (!a4)
      {
LABEL_29:
        v29 = *((unsigned int *)this + 73);
        goto LABEL_30;
      }
    }
    else
    {
      v54 = 0.0;
      v53 = DspLib::Biquad::kBypassSection;
      if (!a4)
        goto LABEL_29;
    }
    v33 = v53;
    v35 = a4;
    v36 = __b;
    v37 = a2;
    v39 = *((_QWORD *)&v53 + 1);
    v38 = v54;
    do
    {
      v40 = *v37 * v7;
      if (v40 < 3.14159265)
      {
        v41 = __sincosf_stret(v40);
        v42 = (float)(v41.__cosval * v41.__cosval) - (float)(v41.__sinval * v41.__sinval);
        v43 = (float)-(float)(v41.__sinval * v41.__cosval) - (float)(v41.__sinval * v41.__cosval);
        v44 = *(float *)&v33 + (float)((float)(v41.__cosval * *((float *)&v33 + 1)) + (float)(v42 * *(float *)&v39));
        v45 = (float)(v43 * *(float *)&v39) - (float)(v41.__sinval * *((float *)&v33 + 1));
        v46 = (float)((float)(v41.__cosval * *((float *)&v39 + 1)) + (float)(v42 * v38)) + 1.0;
        v47 = (float)(v43 * v38) - (float)(v41.__sinval * *((float *)&v39 + 1));
        v48 = (float)(v47 * v47) + (float)(v46 * v46);
        v34 = -v31;
        *v36 = *v36
             * sqrtf((float)((float)((float)((float)((float)(v45 * v46) - (float)(v44 * v47)) / v48) * v34)* (float)((float)((float)((float)(v45 * v46) - (float)(v44 * v47)) / v48) * v34))+ (float)((float)((float)((float)((float)((float)(v45 * v47) + (float)(v44 * v46)) / v48) * v34) + 1.0)* (float)((float)((float)((float)((float)(v45 * v47) + (float)(v44 * v46)) / v48) * v34) + 1.0)));
      }
      ++v37;
      ++v36;
      --v35;
    }
    while (v35);
    goto LABEL_29;
  }
  if (v8 != 1)
  {
    v49 = 787;
LABEL_33:
    v50 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v50, v49);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  v51 = __b;
  v9 = *((unsigned int *)this + 73);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 53);
    do
    {
      v12 = *(float *)(v11 + 4 * v10);
      if (v12 > *((float *)this + 124) && a4 != 0)
      {
        v14 = -v12;
        v16 = a4;
        v15 = v51;
        v17 = a2;
        do
        {
          v18 = *v17 * v7;
          if (v18 < 3.14159265)
          {
            v19 = (float *)(*((_QWORD *)this + 41) + 36 * (*((_DWORD *)this + 3) * v10));
            v20 = cosf(*v19);
            v21 = v19[5];
            v22 = __sincosf_stret(v18);
            v23 = v21 * (float)((float)(v22.__cosval * v20) + -1.0);
            v24 = -(float)(v22.__sinval * v20);
            v25 = v21 * v24;
            v26 = (float)(1.0 - v21)
                + (float)((float)((float)(v22.__cosval * v22.__cosval) - (float)(v22.__sinval * v22.__sinval))
                        + (float)((float)(v22.__cosval * v20) * (float)(v21 + -2.0)));
            v27 = (float)((float)-(float)(v22.__sinval * v22.__cosval) - (float)(v22.__sinval * v22.__cosval))
                + (float)(v24 * (float)(v21 + -2.0));
            v28 = (float)(v27 * v27) + (float)(v26 * v26);
            *v15 = *v15
                 * sqrtf((float)((float)((float)((float)((float)(v25 * v26) - (float)(v23 * v27)) / v28) * v14)* (float)((float)((float)((float)(v25 * v26) - (float)(v23 * v27)) / v28) * v14))+ (float)((float)((float)((float)((float)((float)(v25 * v27) + (float)(v23 * v26)) / v28) * v14) + 1.0)* (float)((float)((float)((float)((float)(v25 * v27) + (float)(v23 * v26)) / v28) * v14) + 1.0)));
          }
          ++v17;
          ++v15;
          --v16;
        }
        while (v16);
      }
      ++v10;
    }
    while (v10 != v9);
  }
}

float DspLib::NotchFilterBank::FilterBank::status(uint64_t a1, float *a2)
{
  float result;

  result = (float)*(unsigned int *)(a1 + 296);
  *a2 = result;
  return result;
}

double DspLib::NotchFilterBank::FilterBank::latencySamples(DspLib::NotchFilterBank::FilterBank *this)
{
  return 0.0;
}

uint64_t DspLib::NotchFilterBank::FilterBank::numStatus(DspLib::NotchFilterBank::FilterBank *this)
{
  return 1;
}

uint64_t std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 104;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 104;
    std::construct_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

void sub_1B608DE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x71C71C71C71C71CLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x38E38E38E38E38ELL)
      v11 = 0x71C71C71C71C71CLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[36 * v8];
    v15 = &v12[36 * v11];
    v16 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 36);
        v21 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v21;
        *(_OWORD *)(v14 - 36) = v20;
        v14 -= 36;
        v18 -= 36;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(36 * a2);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::vector<DspLib::Biquad::ParametricFilter>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 104 * ((104 * a2 - 104) / 0x68) + 104;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[104 * v8];
    v18 = &v12[104 * v11];
    v14 = 104 * ((104 * a2 - 104) / 0x68) + 104;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B608E424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void DspLib::MovingAverage::setLength(DspLib::MovingAverage *this, unint64_t a2)
{
  uint64_t v3;
  float v4;

  DspLib::CircularDelay::setLength(this, a2);
  v3 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v4 = 1.0;
  if ((unint64_t)v3 >= 5)
    v4 = 1.0 / (float)(unint64_t)(v3 >> 2);
  *((float *)this + 9) = v4;
  *((_DWORD *)this + 8) = 0;
  DspLib::CircularDelay::reset(this);
}

uint64_t *DspLib::MovingAverage::process(uint64_t *result, void *a2, vDSP_Length a3, char *a4, unint64_t a5)
{
  uint64_t *v9;

  if (a3)
  {
    v9 = result;
    DspLib::processKernel((const void **)result, a2, a3, a4, a5, (result[1] - *result) >> 2, *((float *)result + 8), *((float *)result + 9));
    *((_DWORD *)v9 + 8) = *(_DWORD *)&a4[4 * a5 - 4];
    return DspLib::CircularDelay::write(v9, (char *)a2, a3);
  }
  return result;
}

void DspLib::processKernel(const void **a1, void *__src, vDSP_Length a3, char *a4, unint64_t a5, unint64_t a6, float a7, float a8)
{
  vDSP_Length v15;

  if (a6)
  {
    v15 = a3 - a6;
    if (a3 <= a6)
    {
      DspLib::CircularDelay::read(a1, a6, a4, a5);
    }
    else
    {
      DspLib::CircularDelay::read(a1, a6, a4, a6);
      memmove(&a4[4 * a6], __src, 4 * v15);
    }
    DspLib::subtract((const float *)__src, a3, (const float *)a4, a5, (float *)a4);
    if (a3 < 2)
      *(float *)a4 = (float)(*(float *)a4 * a8) + a7;
    else
      DspLib::runningSum((float *)a4, a5, a8, a7);
  }
  else if (a3)
  {
    memmove(a4, __src, 4 * a3);
  }
}

void DspLib::zeroInputKernel(const void **a1, char *a2, vDSP_Length __N, unint64_t a4, float a5, float a6)
{
  vDSP_Length v11;

  if (__N)
  {
    if (a4)
    {
      v11 = __N - a4;
      if (__N <= a4)
      {
        DspLib::CircularDelay::read(a1, a4, a2, __N);
        DspLib::negate((float *)a2, __N);
      }
      else
      {
        DspLib::CircularDelay::read(a1, a4, a2, a4);
        DspLib::negate((float *)a2, a4);
        DspLib::clear((float *)&a2[4 * __N + -4 * v11], __N - a4);
      }
      if (__N < 2)
        *(float *)a2 = (float)(*(float *)a2 * a6) + a5;
      else
        DspLib::runningSum((float *)a2, __N, a6, a5);
    }
    else
    {
      DspLib::clear((float *)a2, __N);
    }
  }
}

void DspLib::zeroStateKernel(void *__src, unint64_t a2, float *__dst, vDSP_Length a4, unint64_t a5, float a6)
{
  unint64_t v12;

  if (a2)
  {
    if (a5)
    {
      v12 = a2 - a5;
      if (a2 <= a5)
      {
        memmove(__dst, __src, 4 * a2);
      }
      else
      {
        memmove(__dst, __src, 4 * a5);
        DspLib::subtract((const float *)__src + a2 - v12, a2 - a5, (const float *)__src, a2 - a5, &__dst[a4 - (a4 - a5)]);
      }
      if (a4 < 2)
        *__dst = *__dst * a6;
      else
        DspLib::runningSum(__dst, a4, a6, 0.0);
    }
    else
    {
      memmove(__dst, __src, 4 * a2);
    }
  }
}

void DspLib::MovingAverage::recalculateState(DspLib::MovingAverage *this)
{
  *((float *)this + 8) = DspLib::recalculateStateKernel(this, (const DspLib::CircularDelay *)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2));
}

float DspLib::recalculateStateKernel(DspLib *this, const DspLib::CircularDelay *a2)
{
  const void **v3;
  uint64_t v4;
  const float *v5;
  unint64_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = (const void **)MEMORY[0x1E0C80A78](this);
  v5 = (const float *)((char *)v8 - v4);
  DspLib::CircularDelay::read(v3, v6, (char *)v8 - v4, v6);
  if (a2)
    return DspLib::mean(v5, (vDSP_Length)a2);
  else
    return 0.0;
}

void DspLib::MultiMovingAverage::setLengths(uint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a3;
  v6 = a3 != (a1[1] - *a1) >> 4;
  std::vector<DspLib::MultiMovingAverage::LengthEntry>::resize((uint64_t)a1, a3);
  v7 = 0;
  if (v3)
  {
    v8 = *a1;
    do
    {
      v10 = *a2++;
      v9 = v10;
      if (v10 != *(_QWORD *)v8)
      {
        *(_QWORD *)v8 = v9;
        v6 = 1;
      }
      v11 = 1.0;
      if (v9 >= 2)
        v11 = 1.0 / (float)v9;
      *(float *)(v8 + 12) = v11;
      if (v9 > v7)
        v7 = v9;
      v8 += 16;
      --v3;
    }
    while (v3);
  }
  DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(a1 + 3), v7);
  if (v6)
  {
    v12 = *a1;
    v13 = a1[1];
    while (v12 != v13)
    {
      *(_DWORD *)(v12 + 8) = 0;
      v12 += 16;
    }
    DspLib::CircularDelay::reset((DspLib::CircularDelay *)(a1 + 3));
  }
}

void std::vector<DspLib::MultiMovingAverage::LengthEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<DspLib::MultiMovingAverage::LengthEntry>::__append((void **)a1, a2 - v2);
  }
}

uint64_t *DspLib::MultiMovingAverage::process(uint64_t *result, void *__src, vDSP_Length a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (a3)
  {
    v6 = result;
    v7 = *result;
    if (result[1] != *result)
    {
      v9 = 0;
      v10 = 0;
      v11 = *a4;
      v12 = a4[2];
      do
      {
        DspLib::processKernel((const void **)v6 + 3, __src, a3, *(char **)(v11 + 8 * v10), v12, *(_QWORD *)(v7 + v9), *(float *)(v7 + v9 + 8), *(float *)(v7 + v9 + 12));
        v11 = *a4;
        v12 = a4[2];
        v7 = *v6;
        v13 = v6[1];
        *(_DWORD *)(*v6 + v9 + 8) = *(_DWORD *)(*(_QWORD *)(*a4 + 8 * v10++) + 4 * v12 - 4);
        v9 += 16;
      }
      while (v10 < (v13 - v7) >> 4);
    }
    return DspLib::CircularDelay::write(v6 + 3, (char *)__src, a3);
  }
  return result;
}

void DspLib::MultiMovingAverage::zeroInputResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  const void **v7;

  v2 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = (const void **)(a1 + 3);
    do
    {
      DspLib::zeroInputKernel(v7, *(char **)(*a2 + 8 * v6++), a2[2], *(_QWORD *)(v2 + v5), *(float *)(v2 + v5 + 8), *(float *)(v2 + v5 + 12));
      v2 = *a1;
      v5 += 16;
    }
    while (v6 < (uint64_t)(a1[1] - *a1) >> 4);
  }
}

void DspLib::MultiMovingAverage::zeroStateResponse(uint64_t *a1, void *__src, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v4 = *a1;
  if (a1[1] != *a1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      DspLib::zeroStateKernel(__src, a3, *(float **)(*a4 + 8 * v10++), a4[2], *(_QWORD *)(v4 + v9), *(float *)(v4 + v9 + 12));
      v4 = *a1;
      v9 += 16;
    }
    while (v10 < (a1[1] - *a1) >> 4);
  }
}

void DspLib::MultiMovingAverage::recalculateState(DspLib::MultiMovingAverage *this)
{
  uint64_t v1;
  uint64_t v2;
  DspLib *v3;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    v3 = (DspLib::MultiMovingAverage *)((char *)this + 24);
    do
    {
      *(float *)(v1 + 8) = DspLib::recalculateStateKernel(v3, *(const DspLib::CircularDelay **)v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
}

void DspLib::OnePoleSmoother::initialize(DspLib::OnePoleSmoother *this, double a2)
{
  *(double *)this = a2;
  DspLib::Biquad::Filter::initialize((DspLib::OnePoleSmoother *)((char *)this + 8), 1uLL, 1uLL);
  DspLib::OnePoleSmoother::configure(this, *((double *)this + 10), *((double *)this + 11));
  DspLib::Biquad::SetupWrapper::reset((DspLib::OnePoleSmoother *)((char *)this + 56));
}

void DspLib::OnePoleSmoother::configure(DspLib::OnePoleSmoother *this, double a2, double a3)
{
  long double v5;
  float v6;
  float v7;
  float v8;
  _DWORD v9[5];

  *((double *)this + 10) = a2;
  v5 = exp(-1.0 / (*(double *)this * a2));
  v6 = 1.0 - v5;
  *(float *)&v5 = v5;
  v7 = v6 * a3;
  v8 = a3 * 0.0;
  *(float *)v9 = v7;
  *(float *)&v9[1] = v8;
  *(float *)&v9[2] = v8;
  *(float *)&v9[3] = -*(float *)&v5;
  v9[4] = 0;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 8, (uint64_t)v9, 1, 0, 0x41uLL);
}

void DspLib::OnePoleSmoother::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float **a5)
{
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 8), a2, a3, a4, a5);
}

void std::vector<DspLib::MultiMovingAverage::LengthEntry>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[2 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_DWORD *)v7 + 3) = 1065353216;
        v7 += 2;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_DWORD *)v17 + 3) = 1065353216;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

void DspLib::DownSampler::process(unsigned int *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v5 = a2[2];
  v6 = *a1;
  v7 = a1[1];
  v8 = v5 % v6;
  if (v7)
    v9 = a1[1];
  else
    v9 = *a1;
  if (v8 + v9 - 1 < v6)
    v10 = v5 / v6;
  else
    v10 = v5 / v6 + 1;
  if (v5 && v10)
  {
    v12 = v6 - v7;
    if (v7)
      v13 = v12;
    else
      v13 = 0;
    v14 = a2[1];
    if (*a2 == *a3)
    {
      if (v14)
      {
        v18 = 0;
        v19 = 1;
        do
        {
          MEMORY[0x1E0C80A78](a1);
          v21 = (char *)v27 - v20;
          v22 = a2[2];
          if (v22)
            memmove(v21, *(const void **)(*a2 + 8 * v18), 4 * v22);
          DspLib::copyWithStrides((DspLib *)&v21[4 * v13], (const float *)*a1, *(char **)(*a3 + 8 * v18), (float *)1, v10);
          v18 = v19;
          v17 = a2[1] > (unint64_t)v19++;
        }
        while (v17);
      }
    }
    else if (v14)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        DspLib::copyWithStrides((DspLib *)(*(_QWORD *)(*a2 + 8 * v15) + 4 * v13), (const float *)*a1, *(char **)(*a3 + 8 * v15), (float *)1, v10);
        v15 = v16;
        v17 = a2[1] > (unint64_t)v16++;
      }
      while (v17);
    }
  }
  v23 = *a1;
  v24 = a1[1] + v8;
  a1[1] = v24;
  v25 = v24 >= v23;
  v26 = v24 - v23;
  if (v25)
    a1[1] = v26;
  a3[2] = v10;
}

void DspLib::UpSampler::process(unsigned int *a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  if (v6)
    v7 = *a1 - v6;
  else
    v7 = 0;
  v8 = a2[1];
  if (*a2 == *a3)
  {
    if (v8)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        MEMORY[0x1E0C80A78](a1);
        v15 = (char *)v17 - v14;
        v16 = a2[2];
        if (v16)
          memmove(v15, *(const void **)(*a2 + 8 * v12), 4 * v16);
        DspLib::clear(*(float **)(*a3 + 8 * v12), a3[2]);
        DspLib::copyWithStrides((DspLib *)v15, (const float *)1, (char *)(*(_QWORD *)(*a3 + 8 * v12) + 4 * v7), (float *)*a1, a2[2]);
        v12 = v13;
        v11 = a2[1] > (unint64_t)v13++;
      }
      while (v11);
    }
  }
  else if (v8)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      DspLib::clear(*(float **)(*a3 + 8 * v9), a3[2]);
      DspLib::copyWithStrides(*(DspLib **)(*a2 + 8 * v9), (const float *)1, (char *)(*(_QWORD *)(*a3 + 8 * v9) + 4 * v7), (float *)*a1, a2[2]);
      v9 = v10;
      v11 = a2[1] > (unint64_t)v10++;
    }
    while (v11);
  }
  a1[1] = (a3[2] + (unint64_t)a1[1]) % *a1;
}

void DspLib::PolyPhaseInterpolator::setSrcParameters(DspLib::PolyPhaseInterpolator *this, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;

  if (!a2)
  {
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    v8 = 78;
LABEL_11:
    printf("DSP Sound assertion in %s at line %d\n", v7, v8);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!a3)
  {
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    v8 = 79;
    goto LABEL_11;
  }
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 10) = a3 * a2;
  *((_DWORD *)this + 11) = a3;
  v4 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
  while (v4 != v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 != v6)
      bzero(*(void **)v4, (v6 - *(_QWORD *)v4) & 0xFFFFFFFFFFFFFFFCLL);
    v4 += 24;
  }
  *((_DWORD *)this + 18) = 0;
}

void DspLib::PolyPhaseInterpolator::setCoefficients(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  if (a3)
  {
    v6 = *a1;
    *((_QWORD *)a1 + 1) = (a3 - 1) / v6 + 1;
    v7 = a1 + 4;
    std::vector<std::vector<float>>::resize((uint64_t *)a1 + 2, v6);
    v8 = *((_QWORD *)a1 + 2);
    v9 = *((_QWORD *)a1 + 3);
    while (v8 != v9)
    {
      std::vector<float>::resize(v8, *((_QWORD *)a1 + 1));
      v8 += 24;
    }
    v10 = *((_QWORD *)a1 + 6);
    v11 = *((_QWORD *)a1 + 7);
    while (v10 != v11)
    {
      std::vector<float>::resize(v10, *((_QWORD *)a1 + 1) + a1[11] + 1);
      v10 += 24;
    }
    v12 = *a1;
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *((_QWORD *)a1 + 1);
      do
      {
        if (v14)
        {
          v15 = 0;
          v16 = *(_QWORD *)(*v7 + 24 * v13);
          v17 = v13;
          do
          {
            v18 = 0;
            if (a3 > v17)
              v18 = *(_DWORD *)(a2 + 4 * v17);
            *(_DWORD *)(v16 + 4 * v15++) = v18;
            v17 += v12;
          }
          while (v14 > v15);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    std::vector<float>::resize((uint64_t)(a1 + 20), a1[11] + 1);
  }
}

void DspLib::PolyPhaseInterpolator::process(unsigned int *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  vDSP_Length v7;
  uint64_t v8;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const float *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int v25;
  char *__dst;

  v4 = a2[2];
  v5 = a3[2];
  v6 = *a1;
  if (v5 <= v4 * v6)
    v7 = a2[2];
  else
    v7 = v4 + 1;
  v8 = *((_QWORD *)a1 + 6);
  if (*((_QWORD *)a1 + 7) != v8)
  {
    v10 = a2;
    v11 = 0;
    v12 = 0;
    do
    {
      v25 = v12;
      v13 = *(char **)(v8 + 24 * v11);
      v14 = v10[2];
      if (v14)
        memmove(&v13[4 * *((_QWORD *)a1 + 1)], *(const void **)(*v10 + 8 * v11), 4 * v14);
      __dst = v13;
      if (a3[2])
      {
        v15 = 0;
        v16 = 0;
        v17 = a1[18];
        if (v17)
          v18 = -1;
        else
          v18 = 0;
        v19 = (const float *)&__dst[4 * v18 + 4];
        do
        {
          vDSP_conv(v19, 1, (const float *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 24 * v17) + 4 * *((_QWORD *)a1 + 1) - 4), -1, *((float **)a1 + 10), 1, v7, *((_QWORD *)a1 + 1));
          v20 = *a1;
          v21 = (a3[2] + ~(unint64_t)v16) / v20 + 1;
          DspLib::copyWithStrides(*((DspLib **)a1 + 10), (const float *)1, (char *)(*(_QWORD *)(*a3 + 8 * v11) + 4 * v16), (float *)v20, v21);
          v15 += v21;
          ++v16;
          v22 = v17 + 1 >= *a1;
          if (v17 + 1 < *a1)
            ++v17;
          else
            v17 = 0;
          v19 += v22;
        }
        while (a3[2] > (unint64_t)v15);
      }
      v23 = *((_QWORD *)a1 + 1);
      v10 = a2;
      if (v23)
        memmove(__dst, &__dst[4 * a2[2]], 4 * v23);
      v11 = (v25 + 1);
      v8 = *((_QWORD *)a1 + 6);
      v12 = v25 + 1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 7) - v8) >> 3) > v11);
    v5 = a3[2];
    v6 = *a1;
  }
  a1[18] = (v5 + a1[18]) % v6;
}

void DspLib::FIRDecimator::setSrcParameters(DspLib::FIRDecimator *this, unint64_t a2, unint64_t a3)
{
  char *v3;
  int v4;

  if (a2)
  {
    if (a3)
    {
      *(_QWORD *)this = a2;
      *((_QWORD *)this + 4) = a3 / a2 + 1;
      *((_QWORD *)this + 5) = a3;
      DspLib::FIRDecimator::reset(this);
      return;
    }
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    v4 = 158;
  }
  else
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    v4 = 157;
  }
  printf("DSP Sound assertion in %s at line %d\n", v3, v4);
  ++DspLibDebug::mAssertCounter;
}

void DspLib::FIRDecimator::setCoefficients(uint64_t a1, const void *a2, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;

  if (a3)
  {
    std::vector<float>::resize(a1 + 8, a3);
    v6 = *(void **)(a1 + 8);
    if (a3 == (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2)
    {
      memmove(v6, a2, 4 * a3);
      DspLib::reverse(*(float **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
      if (v7 != v8)
      {
        v9 = a3 - 1;
        do
        {
          std::vector<float>::resize(v7, v9 + *(_QWORD *)(a1 + 40));
          v7 += 24;
        }
        while (v7 != v8);
      }
    }
    else
    {
      v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v10, 171);
      ++DspLibDebug::mAssertCounter;
    }
  }
}

void DspLib::FIRDecimator::process(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  unsigned int v14;
  const float *v16;
  unint64_t v17;

  v3 = *(_QWORD *)(a1 + 72) + a2[2];
  a3[2] = v3 / *(_QWORD *)a1;
  if (a2[2])
  {
    v17 = v3 % *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 56) != v5)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = (char *)(*(_QWORD *)(v5 + 24 * v8)
                     + 4
                     * (*(_QWORD *)(a1 + 72) - *(_QWORD *)a1 + ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)));
        v11 = a2[2];
        if (v11)
        {
          memmove(v10, *(const void **)(*a2 + 8 * v8), 4 * v11);
          v5 = *(_QWORD *)(a1 + 48);
        }
        if (a3[2])
        {
          v12 = 0;
          v13 = *(const float **)(v5 + 24 * v8);
          v14 = 1;
          do
          {
            *(float *)(*(_QWORD *)(*a3 + 8 * v8) + 4 * v12) = DspLib::dotProduct(*(const float **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2, v13);
            v13 += *(_QWORD *)a1;
            v12 = v14;
          }
          while (a3[2] > (unint64_t)v14++);
          v5 = *(_QWORD *)(a1 + 48);
          v16 = (const float *)&v10[4 * a2[2]];
          if (v16 != v13)
          {
            memmove(*(void **)(v5 + 24 * v8), v13, (char *)v16 - (char *)v13);
            v5 = *(_QWORD *)(a1 + 48);
          }
        }
        v8 = ++v9;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v5) >> 3) > v9);
    }
    *(_QWORD *)(a1 + 72) = v17;
  }
}

void DspLib::SampleAndHoldUpSampler::process(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  vDSP_Length v12;

  if (a5)
  {
    v9 = 0;
    v10 = 0;
    v11 = *((_DWORD *)a1 + 1);
    do
    {
      if (v11)
      {
        if (a5 - v9 >= v11)
          v12 = v11;
        else
          v12 = a5 - v9;
        DspLib::fill((float *)(a4 + 4 * v9), v12, a1[2]);
        v9 += v12;
        v11 = *((_DWORD *)a1 + 1) - v12;
      }
      else
      {
        a1[2] = *(float *)(a2 + 4 * v10++);
        v11 = *(_DWORD *)a1;
      }
      *((_DWORD *)a1 + 1) = v11;
    }
    while (v9 < a5);
  }
}

void DspLib::AveragingDecimator::reset(DspLib::AveragingDecimator *this)
{
  std::vector<float>::resize((uint64_t)this + 16, *((_QWORD *)this + 5));
  DspLib::clear(*((float **)this + 2), (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2);
}

void DspLib::AveragingDecimator::setSrcFactor(void **this, char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;

  v4 = ~a3;
  if (*this != a2 || &a2[v4] != this[5])
  {
    *this = a2;
    std::vector<float>::reserve(this + 2, (unint64_t)(a2 - 1));
    v5 = *this;
    this[5] = (char *)*this + v4;
    *((float *)this + 2) = 1.0 / (float)(unint64_t)v5;
    DspLib::AveragingDecimator::reset((DspLib::AveragingDecimator *)this);
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void DspLib::AveragingDecimator::processKernel(uint64_t a1, void *__src, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  vDSP_Length v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 != 1)
  {
    v13 = (unint64_t)(float)(*(float *)(a1 + 8)
                                  * (float)(unint64_t)(a3
                                                            + ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2)));
    *(_QWORD *)(a4 + 8) = v13;
    if (a6)
    {
      v14 = a6 + a3;
      MEMORY[0x1E0C80A78](a1);
      v16 = (char *)v27 - v15;
      memmove((char *)v27 - v15, v17, 4 * a6);
      if (a3)
LABEL_7:
        memmove(&v16[4 * a6], __src, 4 * a3);
    }
    else
    {
      if (a3 == *(_QWORD *)a1 * v13)
      {
        if (v13)
        {
          v22 = 0;
          v23 = 1;
          do
          {
            v24 = *(_QWORD *)a1 * v22;
            if (*(_QWORD *)a1 == -1)
              v25 = a3 - v24;
            else
              v25 = *(_QWORD *)a1;
            *(float *)(*(_QWORD *)a4 + 4 * v22) = DspLib::sum((const float *)__src + v24, v25);
            v22 = v23;
            v20 = v13 > v23++;
          }
          while (v20);
        }
        goto LABEL_14;
      }
      v14 = a3;
      MEMORY[0x1E0C80A78](a1);
      v16 = (char *)v27 - v26;
      if (a3)
        goto LABEL_7;
    }
    if (v13)
    {
      v18 = 0;
      v19 = 1;
      do
      {
        *(float *)(*(_QWORD *)a4 + 4 * v18) = DspLib::sum((const float *)&v16[4 * *(_QWORD *)a1 * v18], *(_QWORD *)a1);
        v18 = v19;
        v20 = v13 > v19++;
      }
      while (v20);
    }
    if (a7)
    {
      v21 = *(_QWORD *)a1 * v13;
      std::vector<float>::resize((uint64_t)a7, v14 - v21);
      if (v14 != v21)
        memmove(*a7, &v16[4 * v14 + -4 * (v14 - v21)], 4 * (v14 - v21));
    }
LABEL_14:
    DspLib::multiply(*(float **)a4, *(_QWORD *)(a4 + 8), *(float *)(a1 + 8));
    return;
  }
  if (a3)
    memmove(*(void **)a4, __src, 4 * a3);
  *(_QWORD *)(a4 + 8) = a3;
}

void DspLib::AveragingDecimator::zeroInputResponse(uint64_t a1, float *a2, vDSP_Length __N)
{
  const float *v5;
  uint64_t v6;
  float v7;

  DspLib::clear(a2, __N);
  v5 = *(const float **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24) - (_QWORD)v5;
  if (v6)
  {
    v7 = *(float *)(a1 + 8);
    *a2 = v7 * DspLib::sum(v5, v6 >> 2);
  }
}

void DspLib::AveragingDecimator::zeroStateResponse(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v12[0] = a4;
  v12[1] = a5;
  v8 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v12[-1] - v9;
  DspLib::clear((float *)((char *)&v12[-1] - v9), v8);
  DspLib::AveragingDecimator::processKernel(a1, a2, a3, (uint64_t)v12, (uint64_t)v10, v8, 0);
}

void DspLib::MeisterStueck::OSCFilter::uninitialize(DspLib::MeisterStueck::OSCFilter *this)
{
  DspLib::Biquad::ParametricFilter::uninitialize(this);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::MeisterStueck::OSCFilter *)((char *)this + 104));
}

BOOL DspLib::MeisterStueck::OSCFilter::isInitialized(DspLib::MeisterStueck::OSCFilter *this)
{
  return *(_BYTE *)this && *((_BYTE *)this + 104) != 0;
}

void DspLib::MeisterStueck::OSCFilter::reset(DspLib::MeisterStueck::OSCFilter *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::MeisterStueck::OSCFilter *)((char *)this + 48));
  DspLib::Biquad::SetupWrapper::reset((DspLib::MeisterStueck::OSCFilter *)((char *)this + 152));
}

void DspLib::MeisterStueck::OSCFilter::setParameters(DspLib::Biquad::ParametricFilter *this, uint64_t a2)
{
  float v4;
  float v5;
  BOOL v6;
  unsigned int v7;
  vDSP_Length v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;

  if (*(_BYTE *)a2
    && ((v4 = *(float *)(a2 + 16), v5 = *(float *)(a2 + 20), v4 <= 10.0) ? (v6 = v5 <= 10.0) : (v6 = 0),
        !v6 && (v7 = *(_DWORD *)(a2 + 24)) != 0))
  {
    if (v4 <= 10.0)
      v8 = v5 > 10.0;
    else
      v8 = (v5 > 10.0) + 1;
    v9 = (float)((float)v7 * 0.32091) + -0.1;
    v10 = 1.0
        - expf((float)((float)((float)((float)((float)v7 * (float)v7) * 0.038869)+ (float)((float)((float)((float)v7 * (float)v7) * (float)v7) * -0.00095057))+ (float)((float)v7 * -0.54832))+ 0.0021239);
    DspLib::Biquad::ParametricFilter::initialize(this, *(unsigned int *)(a2 + 4), *(double *)(a2 + 8), v8);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)((char *)this + 104), *(unsigned int *)(a2 + 4), *(double *)(a2 + 8), v8);
    v11 = *(float *)(a2 + 16);
    if (v11 <= 10.0)
    {
      v13 = 0;
    }
    else
    {
      v12 = ((unint64_t)COERCE_UNSIGNED_INT(v11 / v10) << 32) | 0x10;
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this, v12, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), 0, 0x41uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 104, v12, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), 0, 0x41uLL);
      v13 = 1;
    }
    v14 = *(float *)(a2 + 20);
    if (v14 > 10.0)
    {
      v15 = ((unint64_t)COERCE_UNSIGNED_INT(v10 * v14) << 32) | 0x10;
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this, v15, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), v13, 0x41uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 104, v15, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), v13, 0x41uLL);
    }
  }
  else
  {
    DspLib::Biquad::ParametricFilter::uninitialize(this);
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)((char *)this + 104));
  }
}

void DspLib::MeisterStueck::OSCFilter::process(_QWORD *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *a4;
  v9 = *((_QWORD *)a4 + 2);
  DspLib::Biquad::Filter::process(a1, (uint64_t)&v10, (float ***)&v8);
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  v8 = *a5;
  v9 = *((_QWORD *)a5 + 2);
  DspLib::Biquad::Filter::process(a1 + 13, (uint64_t)&v10, (float ***)&v8);
}

void DspLib::MeisterStueck::OSCFilter::process(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  v3 = *a3;
  v4 = *((_QWORD *)a3 + 2);
  DspLib::Biquad::Filter::process(a1, (uint64_t)&v5, (float ***)&v3);
}

void DspLib::LowFlow::PhysicalModel::setParameters(_DWORD *a1, uint64_t a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _DWORD v19[10];
  float v20[5];
  float v21[3];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25[3];
  double v26[2];
  __CLPK_doublereal v27[3];
  DSPDoubleSplitComplex v28;
  DSPDoubleSplitComplex v29;

  v27[2] = *(__CLPK_doublereal *)MEMORY[0x1E0C80C00];
  *a1 = *(_DWORD *)a2;
  v3 = *(float *)(a2 + 4);
  v4 = v3 / *(float *)(a2 + 8);
  v5 = *(float *)(a2 + 12);
  v6 = *(float *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  v8 = *(float *)(a2 + 24);
  v21[0] = v4 * (float)(v5 + v6);
  v21[1] = v4 * (float)(v7 + v8);
  v9 = *(float *)(a2 + 28);
  v10 = *(float *)(a2 + 32);
  v21[2] = v4 * (float)(v9 + v10);
  v11 = v3 * v4;
  v20[0] = v5 * v6;
  v20[1] = (float)((float)(v6 * v7) + (float)(v5 * v8)) + (float)(v11 * (float)(v5 + v6));
  v20[2] = (float)((float)((float)(v7 * v8) + (float)(v5 * v10)) + (float)(v9 * v6)) + (float)(v11 * (float)(v7 + v8));
  v20[3] = (float)((float)(v7 * v10) + (float)(v9 * v8)) + (float)(v11 * (float)(v9 + v10));
  v20[4] = v9 * v10;
  v27[0] = 0.0;
  v27[1] = 0.0;
  v26[0] = 0.0;
  v26[1] = 0.0;
  v28.realp = v26;
  v28.imagp = (double *)2;
  DspLib::roots((DspLib *)v21, (const float *)3, v27, v28);
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v29.realp = (double *)&v22;
  v29.imagp = (double *)4;
  DspLib::roots((DspLib *)v20, (const float *)5, (__CLPK_doublereal *)&v24, v29);
  v12 = 0;
  v13 = v27[0] * -2.0;
  v14 = v26[0] * v26[0] + v27[0] * v27[0];
  *(float *)&v19[1] = v13;
  *(float *)&v19[2] = v14;
  v15 = *(double *)&v24 * -2.0;
  v16 = *(double *)&v22 * *(double *)&v22 + *(double *)&v24 * *(double *)&v24;
  *(float *)&v19[3] = v15;
  *(float *)&v19[4] = v16;
  v19[0] = 1065353216;
  v19[5] = 0;
  *(float *)&v19[6] = v21[0] / v20[0];
  v19[7] = 0;
  v17 = v25[0] * -2.0;
  v18 = *(double *)&v23 * *(double *)&v23 + v25[0] * v25[0];
  *(float *)&v19[8] = v17;
  *(float *)&v19[9] = v18;
  do
  {
    DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)&v19[v12], 48000.0);
    v12 += 5;
  }
  while (v12 != 10);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(a1 + 2), (uint64_t)v19, 2, 0, 0x41uLL);
}

void DspLib::LowFlow::PressureAnalyzer::initialize(uint64_t a1, int a2, int a3)
{
  void *v4;
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 16) = a3;
  if (a3)
  {
    v4 = (void *)operator new();
    bzero(v4, 0x1000uLL);
    v5 = *(_QWORD *)(a1 + 4128);
    *(_QWORD *)(a1 + 4128) = v4;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(a1 + 4128);
  *(_QWORD *)(a1 + 4128) = 0;
  if (v5)
LABEL_5:
    MEMORY[0x1BCC95CEC](v5, 0x1000C40BAFFE814);
LABEL_6:
  *(_DWORD *)(a1 + 4984) = 1065353216;
  *(_QWORD *)(a1 + 5012) = 0;
  DspLib::clear((float *)(a1 + 5024), 0x63uLL);
}

uint64_t DspLib::LowFlow::PressureAnalyzer::updatePressureMapping(DspLib::LowFlow::PressureAnalyzer *this)
{
  vDSP_Length *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float *v6;
  _QWORD *v7;
  DSPSplitComplex __Z;
  unint64_t v10;
  vDSP_Length v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  std::vector<float>::resize((uint64_t)this + 4144, (*((_QWORD *)this + 1) >> 1) + 1);
  if (*((_BYTE *)this + 16))
    std::vector<float>::resize((uint64_t)this + 4168, (*((_QWORD *)this + 1) >> 1) + 1);
  else
    *((_QWORD *)this + 522) = *((_QWORD *)this + 521);
  v2 = DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v11, *((_QWORD *)this + 1));
  MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  v4 = *((_QWORD *)this + 1);
  __Z.realp = v6;
  __Z.imagp = (float *)((char *)&__Z - v5);
  v10 = v4 >> 1;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v7, (DSPComplex *)this + 4, v4, &__Z);
  DspLib::FFT::amplitude((uint64_t)&__Z, *((float **)this + 518), (uint64_t)(*((_QWORD *)this + 519) - *((_QWORD *)this + 518)) >> 2);
  DspLib::multiply(*((float **)this + 518), (uint64_t)(*((_QWORD *)this + 519) - *((_QWORD *)this + 518)) >> 2, 0.5);
  if (*((_BYTE *)this + 16))
  {
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v11, *((DSPComplex **)this + 516), *((_QWORD *)this + 1), &__Z);
    DspLib::FFT::amplitude((uint64_t)&__Z, *((float **)this + 521), (uint64_t)(*((_QWORD *)this + 522) - *((_QWORD *)this + 521)) >> 2);
    DspLib::multiply(*((float **)this + 521), (uint64_t)(*((_QWORD *)this + 522) - *((_QWORD *)this + 521)) >> 2, *((float *)this + 1034) * 0.5);
  }
  return DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)v11);
}

void sub_1B6090480(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

float DspLib::LowFlow::PressureAnalyzer::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  float result;
  _QWORD __src[198];
  _QWORD v42[99];
  _QWORD v43[99];
  double v44[99];

  if (*(_QWORD *)(a1 + 8) != a4)
  {
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a4;
    v7 = (double)a4 / 48000.0;
    do
    {
      v44[v6] = v7 * DspLib::bark2Hz((DspLib *)a1, (double)v6 * 0.25);
      ++v6;
    }
    while (v6 != 99);
    v8 = v44[0];
    v9 = vcvtad_u64_f64(v44[0]);
    if (v9 <= 1)
      v9 = 1;
    v43[0] = v9;
    v10 = 1;
    v11 = v9;
    do
    {
      v12 = v44[v10];
      v13 = vcvtad_u64_f64(v12 - v8);
      if (v13 <= 1)
        v13 = 1;
      v11 += v13;
      v43[v10++] = v11;
      v8 = v12;
    }
    while (v10 != 99);
    v14 = 0;
    v42[0] = v9;
    v15 = vdupq_n_s64(1uLL);
    do
    {
      v16 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)&v44[v14 + 1]));
      v17 = (int8x16_t)vaddq_s64(*(int64x2_t *)&v43[v14], v15);
      *(int8x16_t *)&v42[v14 + 1] = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v17, (uint64x2_t)v16), v17, v16);
      v14 += 2;
    }
    while (v14 != 98);
    v18 = 0;
    v19 = (int8x16_t)vdupq_n_s64(v9);
    do
    {
      v20 = *(int64x2_t *)&v42[v18 + 1];
      *(int64x2_t *)&__src[v18 + 99] = vsubq_s64(v20, (int64x2_t)vextq_s8(v19, (int8x16_t)v20, 8uLL));
      v18 += 2;
      v19 = (int8x16_t)v20;
    }
    while (v18 != 98);
    __src[197] = v42[98];
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    v21 = 0;
    v22 = 1;
    __src[0] = 1;
    do
    {
      v22 += __src[v21 + 99];
      __src[++v21] = v22;
    }
    while (v21 != 98);
    memcpy((void *)(a1 + 4192), __src, 0x318uLL);
    DspLib::LowFlow::PressureAnalyzer::updatePressureMapping((DspLib::LowFlow::PressureAnalyzer *)a1);
  }
  v23 = 24 * *(_DWORD *)a1;
  v24 = *(float *)(a2 + 4 * (v23 + 10));
  v25 = *(float *)(a2 + 4 * (v23 + 11));
  if (v24 <= v25)
  {
    *(float *)(a1 + 4988) = v24;
    *(float *)(a1 + 4992) = v25;
  }
  else
  {
    v24 = *(float *)(a1 + 4988);
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = fabsf(v24);
  v30 = a1 + 4192;
  v31 = (float)*(unint64_t *)(a1 + 8);
  do
  {
    v32 = *(_QWORD *)(v30 + 8 * v26);
    v33 = vabds_f32(v24, (float)(unint64_t)(48000 * v27) / v31);
    if (v33 < v29)
    {
      v28 = v26;
      v29 = v33;
    }
    ++v26;
    v27 = v32;
  }
  while (v26 != 99);
  v34 = 0;
  v35 = 0;
  if (v28 >= 0x62)
    v28 = 98;
  *(_DWORD *)(a1 + 4996) = v28;
  v36 = *(float *)(a1 + 4992);
  v37 = fabsf(v36);
  do
  {
    v38 = vabds_f32(v36, (float)(unint64_t)(48000 * *(_QWORD *)(v30 + 8 * v34)) / v31);
    if (v38 < v37)
    {
      v37 = v38;
      v35 = v34;
    }
    ++v34;
  }
  while (v34 != 99);
  if (v35 <= v28 + 1)
    v39 = v28 + 1;
  else
    v39 = v35;
  *(_DWORD *)(a1 + 5000) = v39;
  *(float *)(a1 + 5004) = 1.0
                        - expf(-1.0/ (float)((float)((float)(*(float *)(a2 + 4 * (v23 + 19)) * 1000.0) * 375.0)/ 1000.0));
  result = 1.0
         - expf(-1.0 / (float)((float)((float)(*(float *)(a2 + 4 * (v23 + 20)) * 1000.0) * 375.0)
                             / 1000.0));
  *(float *)(a1 + 5008) = result;
  return result;
}

uint64_t DspLib::LowFlow::PressureAnalyzer::setPressureMapping(uint64_t a1, const void *a2, const void *a3, _DWORD *a4)
{
  int v7;

  memcpy((void *)(a1 + 32), a2, 0x1000uLL);
  v7 = *(unsigned __int8 *)(a1 + 16);
  if (a3 && *(_BYTE *)(a1 + 16))
  {
    memcpy(*(void **)(a1 + 4128), a3, 0x1000uLL);
    v7 = *(unsigned __int8 *)(a1 + 16);
  }
  if (a4 && v7)
    *(_DWORD *)(a1 + 4136) = *a4;
  return DspLib::LowFlow::PressureAnalyzer::updatePressureMapping((DspLib::LowFlow::PressureAnalyzer *)a1);
}

void DspLib::LowFlow::PressureAnalyzer::process(const float **this, const float *a2, vDSP_Length a3, const float *a4, unint64_t a5, int a6)
{
  uint64_t v10;
  float *v11;
  uint64_t v12;
  const float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  unsigned int v18;
  char *v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float *v24;
  char *v25;
  float v26;
  float Median;
  DspLib *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](this);
  v11 = (float *)((char *)v36 - v10);
  DspLib::multiply(v13, a3, *(const float **)(v12 + 4144), (uint64_t)(*(_QWORD *)(v12 + 4152) - *(_QWORD *)(v12 + 4144)) >> 2, (float *)((char *)v36 - v10));
  if (a4)
  {
    MEMORY[0x1E0C80A78](v14);
    v16 = (float *)((char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    DspLib::multiply(a4, a3, this[521], this[522] - this[521], v16);
    DspLib::add(v11, a3, v16);
  }
  v17 = DspLib::sum(v11, a3);
  DspLib::square(v11, a3);
  *((float *)this + 1246) = *((float *)this + 1246) * 0.1;
  *((float *)this + 1246) = *((float *)this + 1246)
                          + (float)((float)((float)(sqrtf((float)a3) * sqrtf(DspLib::sum(v11, a3)))
                                          / (float)(v17 + 0.000000001))
                                  * 0.9);
  if (a6)
  {
    v18 = 0;
    v19 = (char *)(this + 524);
    v20 = (char *)(this + 628);
    v21 = 99;
  }
  else
  {
    v18 = *((_DWORD *)this + 1249);
    v21 = *((_DWORD *)this + 1250);
    v19 = (char *)(this + 524);
    v20 = (char *)(this + 628);
    if (v18 > 0x49)
      goto LABEL_7;
  }
  memcpy((char *)this + 4 * v18 + 5024, &v11[v18], 4 * (74 - v18));
LABEL_7:
  if (v18 <= 0x4A)
    v22 = 74;
  else
    v22 = v18;
  if (v22 < v21)
  {
    v23 = v21 - v22;
    v24 = (float *)&v20[4 * v22];
    v25 = &v19[8 * v22];
    do
    {
      vDSP_meanv(&v11[*((_QWORD *)v25 - 1)], 1, v24++, *(_QWORD *)v25 - *((_QWORD *)v25 - 1));
      v25 += 8;
      --v23;
    }
    while (v23);
  }
  v26 = *((float *)this + 1246);
  Median = DspLib::LowFlow::getMedian((DspLib::LowFlow *)&v20[4 * *((unsigned int *)this + 1249)], (const float *)(*((_DWORD *)this + 1250) - *((_DWORD *)this + 1249)));
  v29 = DspLib::power2dBSafe(v28, Median + 1.0e-30, 1.0e-20) + 97.0;
  v30 = 1.0;
  if (v26 >= 1.0)
    v30 = v26;
  if (v30 <= 4.0)
    v31 = (float)(v30 + -1.0) * 4.0;
  else
    v31 = 12.0;
  v32 = v29 - v31;
  v33 = *((float *)this + 1253);
  if ((float)(v33 + 3.0) < v32 || (v32 = v32 + 12.0, v32 < v33))
  {
    *((float *)this + 1253) = v32;
    v33 = v32;
  }
  v34 = *((float *)this + 1254);
  v35 = 5008;
  if (v34 < v33)
    v35 = 5004;
  *((float *)this + 1254) = v34 + (float)(*(float *)((char *)this + v35) * (float)(v33 - v34));
}

void *DspLib::LowFlow::PressureAnalyzer::status(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  float v6;

  v4 = (float *)(a1 + 5024);
  v5 = -396;
  do
  {
    v6 = *(float *)(a1 + v5 + 5420);
    if (v6 < 1.0e-30)
      v6 = 1.0e-30;
    *(float *)(a1 + v5 + 5420) = v6;
    v5 += 4;
  }
  while (v5);
  DspLib::add((float *)(a1 + 5024), 0x63uLL, 1.0e-30);
  DspLib::power2dB(v4, 0x63uLL, 1.0);
  DspLib::add(v4, 0x63uLL, 97.0);
  return memmove((void *)(a2 + 4 * (750 * *(_DWORD *)a1 + 324)), v4, 0x18CuLL);
}

double DspLib::LowFlow::AnalysisPath::initialize(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 32), 1uLL, 2uLL);
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 80));
  *(_BYTE *)(a1 + 4) = a3;
  DspLib::LowFlow::PressureAnalyzer::initialize(a1 + 176, *(_DWORD *)a1, a3);
  return DspLib::LowFlow::AnalysisPath::reset((DspLib::LowFlow::AnalysisPath *)a1);
}

double DspLib::LowFlow::AnalysisPath::reset(DspLib::LowFlow::AnalysisPath *this)
{
  float **v2;
  float **v3;
  double result;

  DspLib::Biquad::SetupWrapper::reset((DspLib::LowFlow::AnalysisPath *)((char *)this + 80));
  v2 = (float **)*((_QWORD *)this + 16);
  if (v2)
    DspLib::FFT::BufferedForwardSTFT::reset(v2);
  v3 = (float **)*((_QWORD *)this + 17);
  if (v3)
    DspLib::FFT::BufferedForwardSTFT::reset(v3);
  DspLib::clear(*((float **)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2);
  *((_DWORD *)this + 1290) = 1065353216;
  *(_QWORD *)((char *)this + 5188) = 0;
  DspLib::clear((float *)this + 1300, 0x63uLL);
  result = 5.27765581e13;
  *((_QWORD *)this + 2) = 0x42C8000000000000;
  *((_BYTE *)this + 5600) = 0;
  return result;
}

uint64_t DspLib::LowFlow::AnalysisPath::uninitialize(DspLib::LowFlow::AnalysisPath *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  DspLib::Biquad::Filter::uninitialize((DspLib::LowFlow::AnalysisPath *)((char *)this + 32));
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100]((uint64_t)this + 136, v2);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100]((uint64_t)this + 128, v3);
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_QWORD *)this + 544) = *((_QWORD *)this + 543);
  result = *((_QWORD *)this + 538);
  *((_QWORD *)this + 538) = 0;
  if (result)
    result = MEMORY[0x1BCC95CEC](result, 0x1000C40BAFFE814);
  *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  return result;
}

float DspLib::LowFlow::AnalysisPath::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  float *v7;
  vDSP_Length v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 8) != a4)
  {
    *(_QWORD *)(a1 + 8) = a4;
    std::vector<float>::resize(a1 + 104, a4);
    DspLib::makePeriodicHannWindow(*(_DWORD **)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    v7 = *(float **)(a1 + 104);
    v8 = (uint64_t)(*(_QWORD *)(a1 + 112) - (_QWORD)v7) >> 2;
    v9 = DspLib::norm(v7, v8);
    DspLib::multiply(v7, v8, 1.0 / v9);
    std::vector<float>::resize(a1 + 144, (*(_QWORD *)(a1 + 8) >> 1) + 1);
    v10 = operator new();
    DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(v10, *(_QWORD *)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2, 128, 0);
    v11 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v10;
    if (v11)
      std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100](a1 + 128, v11);
    if (*(_BYTE *)(a1 + 4))
    {
      v12 = operator new();
      DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(v12, *(_QWORD *)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2, 128, 0);
      v13 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v12;
      if (v13)
        std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100](a1 + 136, v13);
    }
  }
  return DspLib::LowFlow::PressureAnalyzer::setParameters(a1 + 176, a2, a3, *(_QWORD *)(a1 + 8));
}

void sub_1B6090E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E0C402D731071);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LowFlow::AnalysisPath::setModelParameters(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _DWORD *a5)
{
  DspLib::LowFlow::PhysicalModel::setParameters((_DWORD *)(a1 + 24), a2);
  return DspLib::LowFlow::PressureAnalyzer::setPressureMapping(a1 + 176, a3, a4, a5);
}

unint64_t DspLib::LowFlow::AnalysisPath::process(DspLib::LowFlow::AnalysisPath *this, const float *a2, float **a3, float *a4, int a5)
{
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float **v12;
  float **v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  unint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  unint64_t v44;
  int v45;
  char *v47;
  uint64_t v48;
  DSPSplitComplex v49;
  uint64_t v50;
  DSPSplitComplex v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = (char *)this + 5600;
  *((_BYTE *)this + 5600) = 0;
  v9 = *((_QWORD *)this + 16);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(v9 + 16);
  if (v10 >= v11)
    v10 = 0;
  v12 = (float **)(v11 - v10);
  if (v12 >= a3)
    v13 = a3;
  else
    v13 = v12;
  MEMORY[0x1E0C80A78](this);
  v15 = (char *)&v48 - v14;
  DspLib::multiply(v17, (vDSP_Length)v13, (float *)((char *)&v48 - v14), *(float *)(v16 + 24));
  DspLib::Biquad::Filter::process((_QWORD *)this + 4, (uint64_t)v15, (uint64_t)v13, (uint64_t)v15, v13);
  MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  v51.realp = v21;
  v51.imagp = (float *)((char *)&v48 - v20);
  v52 = v22;
  v23 = DspLib::FFT::BufferedForwardSTFT::addInput(*((_QWORD *)this + 16), v15, (unint64_t)v13, &v51);
  v24 = v23;
  if (a4)
  {
    MEMORY[0x1E0C80A78](v23);
    MEMORY[0x1E0C80A78](v25);
    v26 = *((_QWORD *)this + 1) >> 1;
    v49.realp = v28;
    v49.imagp = (float *)((char *)&v48 - v27);
    v50 = v26;
    if (DspLib::FFT::BufferedForwardSTFT::addInput(*((_QWORD *)this + 17), a4, (unint64_t)v13, &v49) == v24)
    {
      v29 = (_QWORD *)*((_QWORD *)this + 16);
      if (v29[9])
      {
        v30 = 0;
        v31 = v29[5] + 4 * *v29 - 4 * v29[2];
        v32 = 0.0;
        do
        {
          v33 = DspLib::rms((const float *)(v31 + v30), 8uLL);
          if (v33 > v32)
            v32 = v33;
          v30 += 32;
        }
        while (v30 != 512);
        DspLib::FFT::amplitude((uint64_t)&v51, *((float **)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2);
        MEMORY[0x1E0C80A78](v34);
        v36 = (float *)((char *)&v48 - ((v35 + 19) & 0xFFFFFFFFFFFFFFF0));
        DspLib::FFT::amplitude((uint64_t)&v49, v36, (*((_QWORD *)this + 1) >> 1) + 1);
        DspLib::LowFlow::PressureAnalyzer::process((const float **)this + 22, *((const float **)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2, v36, v37, a5);
        *((float *)this + 4) = v32;
        *((_DWORD *)this + 5) = v38;
        *v8 = 1;
      }
    }
    else
    {
      v47 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LowFlow/dsp/DspLibLowFlowAnalysisPath.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v47, 514);
      ++DspLibDebug::mAssertCounter;
    }
  }
  else
  {
    v39 = (_QWORD *)*((_QWORD *)this + 16);
    if (v39[9])
    {
      v40 = 0;
      v41 = v39[5] + 4 * *v39 - 4 * v39[2];
      v42 = 0.0;
      do
      {
        v43 = DspLib::rms((const float *)(v41 + v40), 8uLL);
        if (v43 > v42)
          v42 = v43;
        v40 += 32;
      }
      while (v40 != 512);
      DspLib::FFT::amplitude((uint64_t)&v51, *((float **)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2);
      DspLib::LowFlow::PressureAnalyzer::process((const float **)this + 22, *((const float **)this + 18), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2, 0, v44, a5);
      *((float *)this + 4) = v42;
      *((_DWORD *)this + 5) = v45;
      *v8 = 1;
    }
  }
  return v24;
}

void *DspLib::LowFlow::AnalysisPath::status(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;

  v4 = (void *)(a2 + 4 * (750 * *(_DWORD *)a1 + 2));
  v5 = *(_QWORD *)(a1 + 8);
  memmove(v4, *(const void **)(a1 + 144), 4 * (v5 >> 1) + 4);
  DspLib::clear((float *)v4 + (v5 >> 1) + 1, 320 - (v5 >> 1));
  return DspLib::LowFlow::PressureAnalyzer::status(a1 + 176, a2);
}

float DspLib::LowFlow::getMedian(DspLib::LowFlow *this, const float *a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v4;
  const void *v5;
  size_t v6;
  unsigned int v7;
  _QWORD v9[2];

  v2 = a2;
  v9[1] = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
    return 1.0;
  MEMORY[0x1E0C80A78](this);
  v4 = (char *)v9 - v3;
  memcpy((char *)v9 - v3, v5, v6);
  std::__sort<std::__less<float,float> &,float *>();
  v7 = v2 >> 1;
  if ((v2 & 1) != 0)
    return *(float *)&v4[4 * v7];
  else
    return (float)(*(float *)&v4[4 * v7 - 4] + *(float *)&v4[4 * v7]) * 0.5;
}

void std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(_QWORD *)(a2 + 48) = v3;
      operator delete(v3);
    }
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(a2);
    JUMPOUT(0x1BCC95CECLL);
  }
}

DspLib::MeisterStueck::Kernel::Algorithm *DspLib::MeisterStueck::Kernel::Algorithm::Algorithm(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  uint64_t v2;

  v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::MeisterStueck::Kernel::Parameters::kDefault, 0x19uLL, (uint64_t)&DspLib::MeisterStueck::Kernel::Parameters::kMinimum, 25, (uint64_t)&DspLib::MeisterStueck::Kernel::Parameters::kMaximum, 25);
  *(_QWORD *)v2 = &off_1E69C1938;
  *(_OWORD *)(v2 + 216) = xmmword_1B6627BC0;
  *(_DWORD *)(v2 + 232) = 1;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_DWORD *)(v2 + 304) = 0;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_BYTE *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 420) = 0;
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 312) = 0;
  *(_BYTE *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 408) = &off_1E69C4400;
  *(_BYTE *)(v2 + 424) = 0;
  *(_OWORD *)(v2 + 696) = 0u;
  *(_OWORD *)(v2 + 712) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(_OWORD *)(v2 + 680) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 528) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 560) = 0u;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 608) = 0u;
  *(_BYTE *)(v2 + 624) = 0;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_OWORD *)(v2 + 505) = 0u;
  *(_DWORD *)(v2 + 728) = 1065353216;
  *(_QWORD *)(v2 + 988) = 0;
  *(_DWORD *)(v2 + 764) = 0;
  *(_OWORD *)(v2 + 732) = 0u;
  *(_OWORD *)(v2 + 748) = 0u;
  *((float *)this + 249) = DspLib::dB2Amp((DspLib *)v2, -100.0);
  *((_QWORD *)this + 125) = 0;
  *((_DWORD *)this + 252) = 1065353216;
  *(_OWORD *)((char *)this + 1012) = 0u;
  *(_OWORD *)((char *)this + 1028) = xmmword_1B6627BD0;
  *((_DWORD *)this + 261) = 1065353216;
  *((_WORD *)this + 524) = 0;
  *(_QWORD *)((char *)this + 1052) = 0;
  return this;
}

void sub_1B6091590(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DspLib::PolyPhaseInterpolator *v2;
  DspLib::Biquad::Filter *v3;
  DspLib::AnalyticSignalTransformAllpass *v4;
  DspLib::MeisterStueck::OSCFilter *v5;
  void *v7;
  void *v8;

  v7 = (void *)v1[93];
  if (v7)
  {
    v1[94] = v7;
    operator delete(v7);
  }
  DspLib::MeisterStueck::OSCFilter::~OSCFilter(v5);
  DspLib::AnalyticSignalTransformAllpass::~AnalyticSignalTransformAllpass(v4);
  DspLib::Biquad::Filter::~Filter(v3);
  DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(v2);
  *v1 = off_1E69C46F0;
  v8 = (void *)v1[6];
  if (v8)
  {
    v1[7] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void DspLib::MeisterStueck::OSCFilter::~OSCFilter(DspLib::MeisterStueck::OSCFilter *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::OSCFilter *)((char *)this + 152));
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::OSCFilter *)((char *)this + 48));
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

void DspLib::AnalyticSignalTransformAllpass::~AnalyticSignalTransformAllpass(DspLib::AnalyticSignalTransformAllpass *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69C4400;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 64));
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69C4400;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 64));
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::MeisterStueck::Kernel::Algorithm::initialize(DspLib::MeisterStueck::Kernel::Algorithm *this, unsigned int a2, double a3)
{
  char *v6;

  if ((DspLib::AlgorithmBase::setNumberOfAudioChannels(this, a2, a2) & 1) != 0)
  {
    *((double *)this + 3) = a3;
    DspLib::Biquad::Filter::initialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 336), 1uLL, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 35, 1uLL);
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::MeisterStueck::Kernel::Algorithm *))(*(_QWORD *)this + 144))(this);
  }
  else
  {
    v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 18);
    ++DspLibDebug::mAssertCounter;
  }
  return 1;
}

void DspLib::MeisterStueck::Kernel::Algorithm::uninitialize(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 94) = *((_QWORD *)this + 93);
  DspLib::Biquad::Filter::uninitialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 336));
  DspLib::AnalyticSignalTransformAllpass::uninitialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 408));
  DspLib::MeisterStueck::OSCFilter::uninitialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 520));
}

void DspLib::MeisterStueck::Kernel::Algorithm::reset(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  char *v9;
  float __C[1026];
  uint64_t v11;

  v1 = MEMORY[0x1E0C80A78](this);
  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(v1 + 8))
  {
    v2 = v1;
    DspLib::AnalyticSignalTransformAllpass::reset((DspLib::AnalyticSignalTransformAllpass *)(v1 + 408));
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 384));
    *(_DWORD *)(v2 + 220) = 0;
    *(_DWORD *)(v2 + 228) = 0;
    v3 = *(_QWORD *)(v2 + 280);
    v4 = *(_QWORD *)(v2 + 288);
    while (v3 != v4)
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)v3 != v5)
        bzero(*(void **)v3, (v5 - *(_QWORD *)v3) & 0xFFFFFFFFFFFFFFFCLL);
      v3 += 24;
    }
    *(_DWORD *)(v2 + 304) = 0;
    DspLib::MeisterStueck::OSCFilter::reset((DspLib::MeisterStueck::OSCFilter *)(v2 + 520));
    DspLib::clear(*(float **)(v2 + 744), (uint64_t)(*(_QWORD *)(v2 + 752) - *(_QWORD *)(v2 + 744)) >> 2);
    *(_QWORD *)(v2 + 1008) = 1065353216;
    *(_QWORD *)(v2 + 1016) = 0;
    *(_DWORD *)(v2 + 1028) = 1065353216;
    *(_QWORD *)(v2 + 1032) = 1065353216;
    *(_DWORD *)(v2 + 1044) = 1065353216;
    DspLib::fill(__C, 0x400uLL, 1.0);
    DspLib::Biquad::Filter::process((_QWORD *)(v2 + 336), (uint64_t)__C, 1024, (uint64_t)__C, (float **)0x400);
    v6 = *(_QWORD *)(v2 + 280);
    for (i = *(_QWORD *)(v2 + 288); v6 != i; v6 += 24)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)v6 != v8)
        memset_pattern16(*(void **)v6, &unk_1B6627B80, ((v8 - *(_QWORD *)v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
    *(_DWORD *)(v2 + 1052) = 0;
  }
  else
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 46);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  double v20;
  unsigned int v21;
  int v22;
  int v23;
  vDSP_Length v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  float v34;
  double v35;
  float v36;
  float v37;
  float v38;
  __float2 v39;
  uint64_t v40;
  float v41;
  DspLib *v42;
  float v43;
  char v44;
  float *v45;
  float v46;
  float v47;
  _BYTE v48[24];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (*(float *)(v5 + 20) >= 0.5 && *(float *)(v5 + 96) >= 0.5)
    {
      if (!*(_BYTE *)(a1 + 416))
        DspLib::AnalyticSignalTransformAllpass::initialize((DspLib::AnalyticSignalTransformAllpass *)(a1 + 408), 1u);
    }
    else
    {
      DspLib::AnalyticSignalTransformAllpass::uninitialize((DspLib::AnalyticSignalTransformAllpass *)(a1 + 408));
    }
    v6 = *(float **)(a1 + 48);
    DspLib::MeisterStueck::Kernel::Algorithm::createGainTable((DspLib::MeisterStueck::Kernel::Algorithm *)a1, v6[4], v6[9], v6[10], v6[12], v6[14], v6[13], v6[20], v6[21], v6[1]);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = vcvtas_u32_f32(*(float *)(v8 + 64));
    if (v9 <= 1)
      v9 = 1;
    *(_DWORD *)(a1 + 732) = v9;
    v10 = vcvtad_u64_f64(*(double *)(a1 + 24) * *(float *)(v8 + 28) / 1000.0 / (double)v9);
    v11 = v10 | 1;
    if ((v10 | 1) == *(_DWORD *)(a1 + 1004))
      goto LABEL_20;
    v12 = (uint64_t *)(a1 + 744);
    v13 = (*(_QWORD *)(a1 + 752) - *(_QWORD *)(a1 + 744)) >> 2;
    v14 = (int)((v10 & 0xFFFFFFFE) + *(_DWORD *)(a1 + 32));
    std::vector<float>::resize(a1 + 744, v14);
    if ((_DWORD)v13)
    {
      if (v11 > *(_DWORD *)(a1 + 1004) && (int)v14 > (int)v13)
      {
        v16 = *v12;
        v17 = (_DWORD *)(*v12 + 4 * (int)v13);
        v18 = ~(_DWORD)v13 + v13;
        v19 = v14 - (int)v13;
        do
        {
          *v17++ = *(_DWORD *)(v16 + 4 * (v18 & ~(v18 >> 31)));
          --v18;
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      DspLib::clear(*(float **)(a1 + 744), (uint64_t)(*(_QWORD *)(a1 + 752) - *(_QWORD *)(a1 + 744)) >> 2);
    }
    *(_DWORD *)(a1 + 1004) = v11;
    v9 = *(_DWORD *)(a1 + 732);
    if (v9)
    {
LABEL_20:
      *(_DWORD *)(a1 + 216) = v9;
      *(_DWORD *)(a1 + 220) = 0;
      *(_DWORD *)(a1 + 224) = v9;
      *(_DWORD *)(a1 + 228) = 0;
    }
    v20 = *(double *)(a1 + 24);
    v21 = vcvtad_u64_f64(v20 / 1000.0);
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    v23 = v22 + 2 * v9 - 2;
    if (v9 != *(_DWORD *)(a1 + 736) || *(_DWORD *)(a1 + 740) != v23)
    {
      MEMORY[0x1E0C80A78](v7);
      v28 = (float *)&v48[-v27];
      v29 = *(_DWORD *)(a1 + 732);
      if (v25 + (unint64_t)(2 * v29) >= v26)
        v30 = v26;
      else
        v30 = v25 + (2 * v29);
      DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs(v28, v30, v29, v24);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 232), *(_DWORD *)(a1 + 732), *(_DWORD *)(a1 + 32) / *(_DWORD *)(a1 + 732) + 1);
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 232), (uint64_t)v28, v30);
      v31 = *(_QWORD *)(a1 + 280);
      for (i = *(_QWORD *)(a1 + 288); v31 != i; v31 += 24)
      {
        v33 = *(_QWORD *)(v31 + 8);
        if (*(_QWORD *)v31 != v33)
          memset_pattern16(*(void **)v31, &unk_1B6627B80, ((v33 - *(_QWORD *)v31 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      }
      *(_DWORD *)(a1 + 736) = *(_DWORD *)(a1 + 732);
      *(_DWORD *)(a1 + 740) = v23;
      v20 = *(double *)(a1 + 24);
    }
    v34 = *(float *)(*(_QWORD *)(a1 + 48) + 60);
    if (v34 >= 1.0)
    {
      v36 = v20;
      v37 = v36 * 0.49;
      if (v37 < v34)
        v34 = v37;
      v35 = v34 * 3.14159265;
    }
    else
    {
      v35 = 3.14159265;
    }
    v38 = v35 / v20;
    v39 = __sincosf_stret(v38);
    *(float *)&v48[4] = 1.0 / (float)((float)(v39.__cosval / v39.__sinval) + 1.0);
    *(float *)&v48[8] = *(float *)&v48[4];
    *(_DWORD *)&v48[12] = 0;
    *(float *)&v48[16] = (float)(1.0 - (float)(v39.__cosval / v39.__sinval))
                       / (float)((float)(v39.__cosval / v39.__sinval) + 1.0);
    *(_DWORD *)&v48[20] = 0;
    DspLib::Biquad::Filter::setCoefficients(a1 + 336, (uint64_t)&v48[4], 1, 0, 0x41uLL);
    v40 = *(_QWORD *)(a1 + 48);
    v41 = *(double *)(a1 + 24);
    *(_DWORD *)(a1 + 1024) = (float)((float)(*(float *)(v40 + 44) / 1000.0) * v41);
    v43 = DspLib::dB2Amp(v42, *(float *)(v40 + 76));
    v44 = 0;
    *(float *)(a1 + 728) = v43;
    v45 = *(float **)(a1 + 48);
    v46 = v45[2];
    if (v46 > 1.0)
    {
      v47 = *(double *)(a1 + 24);
      *(float *)(a1 + 1040) = 1.0
                            - expf(-1.0/ (float)((float)(v46 * (float)(v47 / (float)*(unsigned int *)(a1 + 732))) / 1000.0));
      v44 = 1;
    }
    *(_BYTE *)(a1 + 1048) = v44;
    *(_BYTE *)(a1 + 1049) = v45[17] >= 0.5;
    *(_DWORD *)(a1 + 1056) = llroundf(fmaxf(v45[3], 0.0));
  }
}

float DspLib::MeisterStueck::Kernel::Algorithm::createGainTable(DspLib::MeisterStueck::Kernel::Algorithm *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  uint64_t v18;
  uint64_t v19;
  DspLib *v20;
  float v21;
  char *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  DspLib *v28;
  float v29;
  float v31;
  float v33;

  *((_DWORD *)this + 247) = 1120403456;
  v18 = *((_QWORD *)this + 6);
  *((float *)this + 248) = 10.0 / (float)(*(float *)(v18 + 32) + 100.0);
  v19 = 0;
  *((float *)this + 250) = DspLib::dB2Amp(this, *(float *)(v18 + 32));
  v31 = (float)(-1.0 / a4) + 1.0;
  v33 = (float)(-1.0 / a7) + 1.0;
  v21 = a9 + -1.0;
  v22 = (char *)this + 768;
  v23 = -100.0;
  do
  {
    if (v23 >= a5)
    {
      v25 = a10;
      if (v23 < a2)
        goto LABEL_10;
      v24 = v31 * (float)(a2 - v23);
      if (v24 < a3)
        v24 = a3;
    }
    else
    {
      v24 = v33 * (float)(a5 - v23);
      if (v24 > a6)
        v24 = a6;
    }
    v25 = v24 + a10;
LABEL_10:
    v26 = DspLib::dB2Amp(v20, v25);
    *(float *)&v22[v19] = v26;
    if (v23 < a8)
    {
      v27 = v26 * DspLib::dB2Amp(v20, v21 * (float)(v23 - a8));
      v29 = DspLib::dB2Amp(v28, a10);
      if (v27 >= v29)
        v29 = v27;
      *(float *)&v22[v19] = v29;
    }
    v23 = v23 + (float)(1.0 / *((float *)this + 248));
    v19 += 4;
  }
  while (v19 != 44);
  return DspLib::createInterpolationTable((uint64_t)this + 768, 11, (uint64_t)this + 812, 0x2CuLL);
}

void *DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(unsigned int *a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *result;
  unint64_t v16;
  uint64_t v17;
  const float *v18;
  float *v19;
  uint64_t v20;
  DSPSplitComplex v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE v40[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v11 = a1[3];
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)v40 = *(_QWORD *)(a6 + 24);
  *(_QWORD *)&v40[8] = v11;
  *(_QWORD *)&v40[16] = v12;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)v39 = *(_QWORD *)(a6 + 72);
  *(_QWORD *)&v39[8] = v11;
  *(_QWORD *)&v39[16] = v13;
  v14 = a1 + 130;
  if (DspLib::MeisterStueck::OSCFilter::isInitialized((DspLib::MeisterStueck::OSCFilter *)(a1 + 130)))
  {
    v37 = *(_OWORD *)a2;
    v38 = *(_QWORD *)(a2 + 16);
    v35 = *(_OWORD *)a3;
    v36 = *(_QWORD *)(a3 + 16);
    v33 = *(_OWORD *)v40;
    v34 = *(_QWORD *)&v40[16];
    v32 = *(_QWORD *)&v39[16];
    v31 = *(_OWORD *)v39;
    DspLib::MeisterStueck::OSCFilter::process(v14, &v37, &v35, &v33, &v31);
    v29 = *(_QWORD *)v40;
    v30 = *(_OWORD *)&v40[8];
    DspLib::DownSampler::process(a1 + 54, &v29, v40);
    v27 = *(_QWORD *)v39;
    v28 = *(_OWORD *)&v39[8];
    DspLib::DownSampler::process(a1 + 56, &v27, v39);
  }
  else
  {
    v25 = *(_OWORD *)a2;
    v26 = *(_QWORD *)(a2 + 16);
    DspLib::DownSampler::process(a1 + 54, &v25, v40);
    v23 = *(_OWORD *)a3;
    v24 = *(_QWORD *)(a3 + 16);
    DspLib::DownSampler::process(a1 + 56, &v23, v39);
  }
  result = *(void **)&v40[16];
  if (*(_QWORD *)&v40[16] && a1[3])
  {
    v16 = 0;
    do
    {
      MEMORY[0x1E0C80A78](result);
      v18 = (const float *)((char *)&v20 - v17);
      v19 = *(float **)(*(_QWORD *)(a6 + 72) + 8 * v16);
      v21.realp = *(float **)(*(_QWORD *)(a6 + 24) + 8 * v16);
      v21.imagp = v19;
      v22 = *(_QWORD *)&v40[16];
      vDSP_zvabs(&v21, 1, (float *)((char *)&v20 - v17), 1, *(vDSP_Length *)&v40[16]);
      if (v16)
      {
        DspLib::vmax(a4, *(vDSP_Length *)&v40[16], v18);
      }
      else if (*(_QWORD *)&v40[16])
      {
        result = memmove(a4, v18, 4 * *(_QWORD *)&v40[16]);
      }
      ++v16;
    }
    while (v16 < a1[3]);
    return *(void **)&v40[16];
  }
  return result;
}

void *DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(unsigned int *a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *result;
  unint64_t v12;
  uint64_t v13;
  const float *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = a1[3];
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)v23 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)&v23[8] = v8;
  *(_QWORD *)&v23[16] = v9;
  v10 = a1 + 130;
  if (DspLib::MeisterStueck::OSCFilter::isInitialized((DspLib::MeisterStueck::OSCFilter *)(a1 + 130)))
  {
    v21 = *(_OWORD *)a2;
    v22 = *(_QWORD *)(a2 + 16);
    v19 = *(_OWORD *)v23;
    v20 = *(_QWORD *)&v23[16];
    DspLib::MeisterStueck::OSCFilter::process(v10, &v21, &v19);
    v17 = *(_QWORD *)v23;
    v18 = *(_OWORD *)&v23[8];
    DspLib::DownSampler::process(a1 + 54, &v17, v23);
  }
  else
  {
    v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    DspLib::DownSampler::process(a1 + 54, &v15, v23);
  }
  result = *(void **)&v23[16];
  if (*(_QWORD *)&v23[16] && a1[3])
  {
    v12 = 0;
    do
    {
      MEMORY[0x1E0C80A78](result);
      v14 = (const float *)((char *)&v15 - v13);
      DspLib::abs(*(const float **)(*(_QWORD *)v23 + 8 * v12), *(vDSP_Length *)&v23[16], (float *)((char *)&v15 - v13));
      if (v12)
      {
        DspLib::vmax(a3, *(vDSP_Length *)&v23[16], v14);
      }
      else if (*(_QWORD *)&v23[16])
      {
        result = memmove(a3, v14, 4 * *(_QWORD *)&v23[16]);
      }
      ++v12;
    }
    while (v12 < a1[3]);
    return *(void **)&v23[16];
  }
  return result;
}

void DspLib::MeisterStueck::Kernel::Algorithm::processDetector(uint64_t a1, void *__src, vDSP_Length a3, uint64_t a4, uint64_t a5)
{
  float *v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  _QWORD v23[3];
  _QWORD v24[3];
  void *v25;
  uint64_t v26;

  if (a3)
  {
    v10 = *(float **)(a1 + 744);
    memmove(&v10[*(unsigned int *)(a1 + 1004) - 1], __src, 4 * a3);
    DspLib::slidingWindowMaxima(v10, a3 + *(unsigned int *)(a1 + 1004) - 1, (float *)__src, a3);
    if (4 * *(unsigned int *)(a1 + 1004) != 4)
      memmove(v10, &v10[a3], 4 * *(unsigned int *)(a1 + 1004) - 4);
    DspLib::multiply((float *)__src, a3, *(float *)(a1 + 728));
    if (*(_BYTE *)(a1 + 40))
    {
      v11 = *(double *)(a1 + 24);
      v12 = expf(-1.0/ (float)((float)((float)((float)(v11 / (float)a3) / (float)*(unsigned int *)(a1 + 732)) * 20.0) / 1000.0));
      v13 = COERCE_FLOAT(DspLib::maxIndex((const float *)__src, a3));
      v15 = v14;
      *(float *)(a1 + 1028) = v13;
      v16 = *(float *)(a1 + 1012) * v12;
      if (v16 <= v13)
        v16 = v13;
      *(float *)(a1 + 1012) = fmaxf(v16, 0.000001);
      v17 = *(float *)(a1 + 1016);
      if (v17 >= v13)
      {
        v18 = *(_DWORD *)(a1 + 1020);
        if (v18 >= *(_DWORD *)(a1 + 1024))
          *(float *)(a1 + 1016) = v12 * v17;
        else
          *(_DWORD *)(a1 + 1020) = v18 + a5;
      }
      else
      {
        *(float *)(a1 + 1016) = v13;
        *(_DWORD *)(a1 + 1020) = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    DspLib::MeisterStueck::Kernel::Algorithm::gainForEnvelope(a1, (const float *)__src, a3, (float *)__src, a3);
    if (*(_BYTE *)(a1 + 1048))
    {
      v19 = 0;
      do
      {
        v20 = *((float *)__src + v19);
        v21 = *(float *)(a1 + 1044);
        if (v20 >= v21)
        {
          v22 = v21 + (float)((float)(v20 - v21) * *(float *)(a1 + 1040));
          *(float *)(a1 + 1044) = v22;
          *((float *)__src + v19) = v22;
        }
        else
        {
          *(float *)(a1 + 1044) = v20;
        }
        ++v19;
      }
      while (a3 > v19);
    }
    if (*(_BYTE *)(a1 + 40))
    {
      *(_DWORD *)(a1 + 1032) = *((_DWORD *)__src + v15);
      *(float *)(a1 + 1008) = DspLib::minv((const float *)__src, a3);
    }
  }
  v25 = __src;
  v26 = a4;
  v24[0] = &v25;
  v24[1] = 1;
  v24[2] = a3;
  v23[0] = &v26;
  v23[1] = 1;
  v23[2] = a5;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 232), v24, v23);
}

void DspLib::MeisterStueck::Kernel::Algorithm::gainForEnvelope(uint64_t a1, const float *a2, vDSP_Length __N, float *__D, vDSP_Length a5)
{
  float *v7;

  v7 = *(float **)(a1 + 48);
  if (*v7 >= 0.5 || v7[18] >= 0.5)
  {
    DspLib::fill(__D, a5, 1.0);
  }
  else
  {
    DspLib::clip(a2, __N, __D, *(float *)(a1 + 996), *(float *)(a1 + 1000));
    DspLib::amp2dB(__D, a5, 1.0);
    DspLib::add(__D, a5, *(float *)(a1 + 988));
    DspLib::multiply(__D, a5, *(float *)(a1 + 992));
    DspLib::elementAtIndexWithInterpolation(a1 + 812, 44, __D, a5, (uint64_t)__D, a5);
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::processTransientCrossFader(uint64_t a1, const float *__A, vDSP_Length __N, const float *__B, uint64_t a5, float *a6, vDSP_Length a7, int a8, float *a9, vDSP_Length a10)
{
  float v13;

  DspLib::divide(__A, __N, __B, a5, a6);
  DspLib::square(a6, a7);
  DspLib::negate(a6, a7);
  DspLib::add(a6, a7, 1.0);
  DspLib::clip(a6, a7, 0.0, 1.0);
  DspLib::negate(a6, a7, a9);
  DspLib::add(a9, a10, 1.0);
  if (*(_BYTE *)(a1 + 40))
  {
    v13 = DspLib::maxv(a6, a7);
    if (v13 < *(float *)(a1 + 1036))
      v13 = *(float *)(a1 + 1036);
    *(float *)(a1 + 1036) = v13;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::processBlock(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  float **v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  const float *v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  __int128 *v34;
  char *v35;
  _QWORD v36[3];
  float *v37;
  const float *v38;
  const float *v39;
  float *v40;
  uint64_t v41;
  const float *v42;
  const float *v43;
  unsigned int *v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  const void *v48[3];
  _QWORD v49[3];
  _QWORD v50[3];
  float *v51;
  float *v52;
  const float *v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v45 = a3;
  v66 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
  {
    if (**(float **)(a1 + 48) >= 0.5)
    {
      v64 = *a2;
      v65 = *((_QWORD *)a2 + 2);
      v62 = *v45;
      v63 = *((_QWORD *)v45 + 2);
      v60 = *a4;
      v61 = *((_QWORD *)a4 + 2);
      DspLib::add(&v64, &v62, &v60);
      v58 = *a4;
      v59 = *((_QWORD *)a4 + 2);
      DspLib::multiply((uint64_t *)&v58, 0.70711);
    }
    else
    {
      v36[2] = v36;
      v6 = (float **)*((_QWORD *)a2 + 2);
      MEMORY[0x1E0C80A78](a1);
      v8 = (float *)((char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1E0C80A78](v9);
      v43 = (const float *)((char *)v36 - v10);
      v41 = v11;
      MEMORY[0x1E0C80A78](v12);
      v42 = (const float *)((char *)v36 - v13);
      v56 = *a2;
      v57 = *((_QWORD *)a2 + 2);
      v54 = *v45;
      v55 = *((_QWORD *)v45 + 2);
      v44 = v14;
      v16 = DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(v14, (uint64_t)&v56, (uint64_t)&v54, v8, (uint64_t)v6, v15);
      DspLib::MeisterStueck::Kernel::Algorithm::processDetector((uint64_t)v44, v8, (vDSP_Length)v16, (uint64_t)v43, (uint64_t)v6);
      DspLib::Biquad::Filter::process((_QWORD *)v44 + 42, (uint64_t)v43, (uint64_t)v6, (uint64_t)v42, v6);
      MEMORY[0x1E0C80A78](v17);
      MEMORY[0x1E0C80A78](v18);
      v39 = (const float *)((char *)v36 - v19);
      v40 = v20;
      DspLib::MeisterStueck::Kernel::Algorithm::processTransientCrossFader((uint64_t)v44, v43, (vDSP_Length)v6, v42, (uint64_t)v6, v20, (vDSP_Length)v6, v21, (float *)((char *)v36 - v19), (vDSP_Length)v6);
      v22 = (uint64_t)v44;
      if (*(float *)(*((_QWORD *)v44 + 6) + 20) >= 0.5)
      {
        v36[1] = v36;
        MEMORY[0x1E0C80A78](v44);
        v27 = (float *)((char *)v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
        DspLib::subtract(v43, (vDSP_Length)v6, v42, (uint64_t)v6, v27);
        MEMORY[0x1E0C80A78](v28);
        MEMORY[0x1E0C80A78](v29);
        v37 = v27;
        v38 = v30;
        v52 = v27;
        v53 = v30;
        v50[2] = v6;
        v51 = v27;
        v50[0] = &v51;
        v50[1] = 1;
        v49[0] = &v53;
        v49[1] = 1;
        v49[2] = v6;
        v48[0] = &v52;
        v48[1] = (const void *)1;
        v48[2] = v6;
        DspLib::AnalyticSignalTransformAllpass::process((uint64_t)(v44 + 102), (uint64_t)v50, (uint64_t)v49, v48);
        v22 = (uint64_t)v44;
        if (v44[3])
        {
          v31 = 0;
          do
          {
            MEMORY[0x1E0C80A78](v22);
            v33 = (float *)((char *)v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
            v34 = v45;
            DspLib::add(*(const float **)(*(_QWORD *)a2 + 8 * v31), *((_QWORD *)a2 + 2), *(const float **)(*(_QWORD *)v45 + 8 * v31), *((_QWORD *)v45 + 2), v33);
            DspLib::multiply(v33, (vDSP_Length)v6, 0.70711);
            DspLib::multiply(v33, (vDSP_Length)v6, v42, (uint64_t)v6, v27);
            DspLib::vmma(*(const float **)(*(_QWORD *)a2 + 8 * v31), *((_QWORD *)a2 + 2), v38, (int)v6, *(const float **)(*(_QWORD *)v45 + 8 * v31), *((_QWORD *)v34 + 2), v37, (int)v6, *(float **)(*(_QWORD *)a4 + 8 * v31));
            DspLib::multiply(*(float **)(*(_QWORD *)a4 + 8 * v31), *((_QWORD *)a4 + 2), 0.70711);
            DspLib::add(*(float **)(*(_QWORD *)a4 + 8 * v31), *((_QWORD *)a4 + 2), v27);
            DspLib::multiply(v33, (vDSP_Length)v6, v43);
            DspLib::vmma(*(const float **)(*(_QWORD *)a4 + 8 * v31), *((_QWORD *)a4 + 2), v39, (int)v6, v33, (int)v6, v40, (int)v6, *(float **)(*(_QWORD *)a4 + 8 * v31));
            ++v31;
            v22 = (uint64_t)v44;
          }
          while (v31 < v44[3]);
        }
      }
      else if (v44[3])
      {
        v23 = 0;
        do
        {
          MEMORY[0x1E0C80A78](v22);
          v25 = (float *)((char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
          DspLib::add(*(const float **)(*(_QWORD *)a2 + 8 * v23), *((_QWORD *)a2 + 2), *(const float **)(*(_QWORD *)v45 + 8 * v23), *((_QWORD *)v45 + 2), v25);
          DspLib::multiply(v25, (vDSP_Length)v6, 0.70711);
          DspLib::multiply(v25, (vDSP_Length)v6, v42, (uint64_t)v6, *(float **)(*(_QWORD *)a4 + 8 * v23));
          DspLib::multiply(v25, (vDSP_Length)v6, v43);
          DspLib::vmma(*(const float **)(*(_QWORD *)a4 + 8 * v23), *((_QWORD *)a4 + 2), v39, (int)v6, v25, (int)v6, v40, (int)v6, *(float **)(*(_QWORD *)a4 + 8 * v23));
          ++v23;
          v22 = (uint64_t)v44;
        }
        while (v23 < v44[3]);
      }
      if (*(_BYTE *)(v22 + 1049))
      {
        v46 = *a4;
        v47 = *((_QWORD *)a4 + 2);
        DspLib::MeisterStueck::Kernel::Algorithm::processSaturation(v22, (uint64_t *)&v46);
      }
    }
  }
  else
  {
    v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v35, 414);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::processSaturation(uint64_t a1, uint64_t *a2)
{
  float v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 40))
  {
    v7 = *a2;
    v8 = *(_OWORD *)(a2 + 1);
    v4 = DspLib::maxMagnitude(&v7);
    if (*(float *)(a1 + 1052) >= v4)
      v4 = *(float *)(a1 + 1052);
    *(float *)(a1 + 1052) = v4;
  }
  v5 = *(_OWORD *)a2;
  v6 = a2[2];
  DspLib::Saturation::process(&v5, *(_DWORD *)(a1 + 1056));
}

void DspLib::MeisterStueck::Kernel::Algorithm::processBlock(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  vDSP_Length v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  void *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  vDSP_Length v23;
  unint64_t v24;
  unint64_t i;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  float *v29;
  const float *v30;
  const float *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
  {
    if (**(float **)(a1 + 48) >= 0.5)
    {
      v24 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v24)
      {
        for (i = 0; i < v24; ++i)
        {
          v26 = a2[2];
          if (v26)
          {
            memmove(*(void **)(*a3 + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v26);
            v24 = *(unsigned int *)(a1 + 12);
          }
        }
      }
    }
    else
    {
      v28 = (uint64_t)&v28;
      v6 = a2[2];
      MEMORY[0x1E0C80A78](a1);
      v8 = (float *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1E0C80A78](v9);
      v31 = (const float *)((char *)&v28 - v10);
      MEMORY[0x1E0C80A78](v11);
      v30 = (const float *)((char *)&v28 - v12);
      MEMORY[0x1E0C80A78](v13);
      v29 = (float *)((char *)&v28 - v14);
      MEMORY[0x1E0C80A78](v15);
      v17 = (float *)((char *)&v28 - v16);
      v34 = *(_OWORD *)a2;
      v35 = a2[2];
      v19 = DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope((unsigned int *)a1, (uint64_t)&v34, v8, v6, v18);
      DspLib::MeisterStueck::Kernel::Algorithm::processDetector(a1, v8, (vDSP_Length)v19, (uint64_t)v31, v6);
      DspLib::Biquad::Filter::process((_QWORD *)(a1 + 336), (uint64_t)v31, v6, (uint64_t)v30, (float **)v6);
      DspLib::MeisterStueck::Kernel::Algorithm::processTransientCrossFader(a1, v31, v6, v30, v6, v29, v6, v20, v17, v6);
      if (*(_DWORD *)(a1 + 12))
      {
        v21 = 0;
        do
        {
          v22 = *a2;
          v23 = a2[2];
          if (v6)
            memmove(v8, *(const void **)(v22 + 8 * v21), 4 * v6);
          DspLib::multiply(*(const float **)(v22 + 8 * v21), v23, v30, v6, *(float **)(*a3 + 8 * v21));
          DspLib::multiply(v8, v6, v31);
          DspLib::vmma(*(const float **)(*a3 + 8 * v21), a3[2], v17, v6, v8, v6, v29, v6, *(float **)(*a3 + 8 * v21));
          ++v21;
        }
        while (v21 < *(unsigned int *)(a1 + 12));
      }
    }
    if (*(_BYTE *)(a1 + 1049))
    {
      v32 = *(_OWORD *)a3;
      v33 = a3[2];
      DspLib::MeisterStueck::Kernel::Algorithm::processSaturation(a1, (uint64_t *)&v32);
    }
  }
  else
  {
    v27 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v27, 501);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::Saturation::process(__int128 *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
      v19 = *a1;
      v20 = *((_QWORD *)a1 + 2);
      DspLib::clip((uint64_t *)&v19, -1.0, 1.0);
      break;
    case 1:
      v17 = *a1;
      v18 = *((_QWORD *)a1 + 2);
      DspLib::clip((uint64_t *)&v17, -2.965, 2.965);
      v15 = *a1;
      v16 = *((_QWORD *)a1 + 2);
      DspLib::poly(&v15, _ZGRZN6DspLib10Saturation7processENS_9MultiSpanIfEENS0_6FlavorEE27kTubePolynomialCoefficients_, 4);
      break;
    case 2:
      goto LABEL_5;
    case 3:
      v13 = *a1;
      v14 = *((_QWORD *)a1 + 2);
      DspLib::clip((uint64_t *)&v13, -1.5708, 1.5708);
LABEL_5:
      v3 = *(_QWORD *)a1;
      v12 = *(__int128 *)((char *)a1 + 8);
      v9 = *a1;
      v10 = *((_QWORD *)a1 + 2);
      v11 = v3;
      DspLib::vsin(&v11, &v9);
      break;
    case 4:
      MEMORY[0x1E0C80A78](a1);
      v5 = (float *)((char *)&v9 - v4);
      if (*((_QWORD *)a1 + 1))
      {
        v6 = 0;
        v7 = 1;
        do
        {
          DspLib::vsin(*(const float **)(*(_QWORD *)a1 + 8 * v6), *((_QWORD *)a1 + 2), v5);
          DspLib::add(*(float **)(*(_QWORD *)a1 + 8 * v6), *((_QWORD *)a1 + 2), v5);
          DspLib::multiply(*(float **)(*(_QWORD *)a1 + 8 * v6), *((_QWORD *)a1 + 2), 0.5);
          v6 = v7;
        }
        while (*((_QWORD *)a1 + 1) > (unint64_t)v7++);
      }
      break;
    default:
      return;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::status(uint64_t a1, uint64_t a2)
{
  float *v3;
  DspLib *v5;
  float v6;
  DspLib *v7;
  DspLib *v8;
  DspLib *v9;
  DspLib *v10;
  float v11;
  _DWORD *v12;
  DspLib *v13;

  v3 = *(float **)(a1 + 48);
  if (*v3 >= 0.5 || v3[18] >= 0.5)
  {
    *(_OWORD *)a2 = xmmword_1B6627BE0;
    *(_DWORD *)(a2 + 16) = 0;
    v12 = (_DWORD *)(a2 + 24);
  }
  else
  {
    *(float *)a2 = DspLib::amp2dBSafe((DspLib *)a1, *(float *)(a1 + 1008), 0.000001);
    v5 = (DspLib *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, 1);
    *(float *)(a1 + 1008) = DspLib::dB2Amp(v5, v6);
    *(float *)(a2 + 4) = DspLib::amp2dBSafe(v7, *(float *)(a1 + 1012), 0.000001);
    *(float *)(a2 + 8) = DspLib::amp2dBSafe(v8, *(float *)(a1 + 1016), 0.000001);
    v11 = DspLib::amp2dBSafe(v9, *(float *)(a1 + 1028), 0.000001);
    if (v11 < -100.0)
      v11 = -100.0;
    *(float *)(a2 + 12) = v11;
    *(float *)(a2 + 16) = DspLib::amp2dBSafe(v10, *(float *)(a1 + 1032), 0.000001);
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 1036);
    v12 = (_DWORD *)(a1 + 1052);
    *(float *)(a2 + 24) = DspLib::amp2dBSafe(v13, *(float *)(a1 + 1052), 0.000001);
    *(_DWORD *)(a1 + 1036) = 0;
  }
  *v12 = 0;
}

void DspLib::MeisterStueck::Kernel::Algorithm::~Algorithm(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  DspLib::MeisterStueck::Kernel::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &off_1E69C1938;
  v2 = (void *)*((_QWORD *)this + 93);
  if (v2)
  {
    *((_QWORD *)this + 94) = v2;
    operator delete(v2);
  }
  v10 = (void **)((char *)this + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 672));
  v3 = (void *)*((_QWORD *)this + 81);
  if (v3)
  {
    *((_QWORD *)this + 82) = v3;
    operator delete(v3);
  }
  v10 = (void **)((char *)this + 600);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 568));
  v4 = (void *)*((_QWORD *)this + 68);
  if (v4)
  {
    *((_QWORD *)this + 69) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 51) = &off_1E69C4400;
  v5 = (void *)*((_QWORD *)this + 62);
  if (v5)
  {
    *((_QWORD *)this + 63) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 472));
  v6 = (void *)*((_QWORD *)this + 56);
  if (v6)
  {
    *((_QWORD *)this + 57) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 384));
  v7 = (void *)*((_QWORD *)this + 45);
  if (v7)
  {
    *((_QWORD *)this + 46) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 39);
  if (v8)
  {
    *((_QWORD *)this + 40) = v8;
    operator delete(v8);
  }
  v10 = (void **)((char *)this + 280);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  *(_QWORD *)this = off_1E69C46F0;
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
}

double DspLib::MeisterStueck::Kernel::Algorithm::latencySamples(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::MeisterStueck::Kernel::Algorithm::numStatus(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  return 7;
}

double DspLib::XTC::Algorithm::Algorithm(DspLib::XTC::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::XTC::Parameters::kDefault, 0x40uLL, (uint64_t)&DspLib::XTC::Parameters::kMinimum, 64, (uint64_t)&DspLib::XTC::Parameters::kMaximum, 64);
  *(_QWORD *)v1 = &off_1E69C1A48;
  result = 0.0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 248) = 1065353216;
  *(_QWORD *)(v1 + 252) = 0;
  *(_QWORD *)(v1 + 260) = 0;
  *(_QWORD *)(v1 + 268) = 0;
  *(_QWORD *)(v1 + 273) = 0;
  *(_QWORD *)(v1 + 284) = 2;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_QWORD *)(v1 + 344) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v1 + 352) = _D1;
  *(_BYTE *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 368) = 0;
  *(_QWORD *)(v1 + 376) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_BYTE *)(v1 + 384) = 0;
  *(_BYTE *)(v1 + 440) = 0;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_BYTE *)(v1 + 432) = 0;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 496) = 0;
  *(_DWORD *)(v1 + 504) = 0;
  *(_QWORD *)(v1 + 512) = 0;
  *(_DWORD *)(v1 + 520) = 0;
  return result;
}

uint64_t DspLib::XTC::Algorithm::initialize(DspLib::XTC::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  char *v10;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (*(_QWORD *)((char *)this + 12) == 0x200000002)
  {
    *((_BYTE *)this + 8) = 1;
    v5 = (_OWORD *)operator new();
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    v5[6] = 0u;
    v5[7] = 0u;
    v5[8] = 0u;
    v5[9] = 0u;
    v5[10] = 0u;
    v5[11] = 0u;
    v5[12] = 0u;
    v5[13] = 0u;
    v5[14] = 0u;
    v5[15] = 0u;
    v5[16] = 0u;
    v6 = *((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = v5;
    if (v6)
      std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 216, v6);
    v7 = (_OWORD *)operator new();
    *v7 = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[6] = 0u;
    v7[7] = 0u;
    v7[8] = 0u;
    v7[9] = 0u;
    v7[10] = 0u;
    v7[11] = 0u;
    v7[12] = 0u;
    v7[13] = 0u;
    v7[14] = 0u;
    v7[15] = 0u;
    v7[16] = 0u;
    v8 = *((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v7;
    if (v8)
      std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 224, v8);
    DspLib::XTC::FIRMatrix::initialize(*((DspLib::XTC::FIRMatrix **)this + 27), *((unsigned int *)this + 8));
    DspLib::XTC::FIRMatrix::initialize(*((DspLib::XTC::FIRMatrix **)this + 28), *((unsigned int *)this + 8));
    (*(void (**)(DspLib::XTC::Algorithm *))(*(_QWORD *)this + 152))(this);
    (*(void (**)(DspLib::XTC::Algorithm *))(*(_QWORD *)this + 144))(this);
  }
  else
  {
    v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 22);
    ++DspLibDebug::mAssertCounter;
  }
  return v4;
}

uint64_t DspLib::XTC::Algorithm::uninitialize(DspLib::XTC::Algorithm *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 0;
  *((_BYTE *)this + 8) = 0;
  v3 = (char *)this + 256;
  do
  {
    std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100]((uint64_t *)&v3[v2], 0);
    v2 += 8;
  }
  while (v2 != 16);
  v4 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 216, v4);
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 224, v5);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  return DspLib::ToneGenerator::uninitialize((DspLib::XTC::Algorithm *)((char *)this + 280));
}

uint64_t *std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    for (i = 256; i != -64; i -= 80)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v2 + i));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void DspLib::XTC::Algorithm::reset(DspLib::XTC::Algorithm *this)
{
  DspLib::XTC::FIRMatrix *v2;
  DspLib::XTC::FIRMatrix *v3;
  char *v4;

  if (*((_BYTE *)this + 8))
  {
    *(int8x16_t *)((char *)this + 232) = vextq_s8(*(int8x16_t *)((char *)this + 216), *(int8x16_t *)((char *)this + 216), 8uLL);
    DspLib::ToneGenerator::reset((DspLib::XTC::Algorithm *)((char *)this + 280));
    v2 = (DspLib::XTC::FIRMatrix *)*((_QWORD *)this + 30);
    if (v2)
      DspLib::XTC::FIRMatrix::reset(v2);
    v3 = (DspLib::XTC::FIRMatrix *)*((_QWORD *)this + 29);
    if (v3)
      DspLib::XTC::FIRMatrix::reset(v3);
    *((_DWORD *)this + 126) = 0;
    *((_QWORD *)this + 62) = 0;
    *((_DWORD *)this + 62) = 1065353216;
  }
  else
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 63);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::XTC::Algorithm::latencySamples(DspLib::XTC::Algorithm *this)
{
  uint64_t v1;
  float v2;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    v2 = fabsf(*(float *)(v1 + 264));
  else
    v2 = 0.0;
  return round(*((double *)this + 3) * (float)(v2 / 1000.0));
}

float DspLib::XTC::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  DspLib::XTC::FIRMatrix *v6;
  uint64_t v7;
  float result;

  if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(_QWORD *)(a1 + 216);
    v6 = *(DspLib::XTC::FIRMatrix **)(a1 + 224);
    *(_QWORD *)(a1 + 216) = v6;
    *(_QWORD *)(a1 + 224) = v5;
    DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
    DspLib::XTC::Algorithm::designFilters((DspLib::XTC::Algorithm *)a1, v6);
    v7 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v7;
  }
  result = *(float *)(*(_QWORD *)(a1 + 48) + 88);
  *(float *)(a1 + 252) = result;
  return result;
}

void DspLib::XTC::Algorithm::setParametersAndDesignFilters(DspLib::XTC::Algorithm *a1, const void *a2, uint64_t a3, DspLib::XTC::FIRMatrix *a4, __n128 a5)
{
  DspLib::AlgorithmBase::setParameters(a1, a2, a3, a5);
  DspLib::XTC::Algorithm::designFilters(a1, a4);
}

uint64_t DspLib::XTC::Algorithm::setFIRMatrixAndTriggerCrossFade(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 232) = *(_QWORD *)(result + 240);
  *(_QWORD *)(result + 240) = a2;
  return result;
}

void DspLib::XTC::Algorithm::designFilters(DspLib::XTC::Algorithm *this, DspLib::XTC::FIRMatrix *a2)
{
  float *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  unint64_t i;
  unsigned int v11;
  uint64_t cycle_count;
  _QWORD v13[3];
  _BYTE v14[96];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v14, 1uLL, 4u);
  v4 = (float *)*((_QWORD *)this + 6);
  if (v4[15] >= 0.5 && vcvtas_u32_f32(*v4) == 2)
  {
    if (!*((_BYTE *)this + 280))
    {
      DspLib::ToneGenerator::configure((uint64_t)this + 280, 6, -20.0);
      DspLib::ToneGenerator::initialize((DspLib::XTC::Algorithm *)((char *)this + 280), *((double *)this + 3));
    }
  }
  else
  {
    DspLib::ToneGenerator::reset((DspLib::XTC::Algorithm *)((char *)this + 280));
  }
  *((float *)a2 + 66) = DspLib::XTC::Algorithm::designXTCfilters(this, (DspLibBuffer *)v14);
  v5 = DspLibBuffer::numChannels((DspLibBuffer *)v14);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - v7;
  if (v6 >= 0x200)
    v9 = 512;
  else
    v9 = v6;
  bzero((char *)v13 - v7, v9);
  for (i = 0; i < DspLibBuffer::numChannels((DspLibBuffer *)v14); ++i)
    *(_QWORD *)&v8[8 * i] = DspLibBuffer::channel((DspLibBuffer *)v14, i);
  v11 = DspLibBuffer::numChannels((DspLibBuffer *)v14);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v14);
  v13[0] = v8;
  v13[1] = v11;
  v13[2] = cycle_count;
  DspLib::XTC::FIRMatrix::setCoefficients((uint64_t)a2, v13);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v14);
}

void sub_1B6093B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 - 136));
  _Unwind_Resume(a1);
}

float DspLib::XTC::Algorithm::designXTCfilters(DspLib::XTC::Algorithm *this, DspLibBuffer *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v24;
  int v25;
  _BYTE v26[320];
  unint64_t v27;
  int v28;
  _BYTE v29[320];
  unint64_t v30;
  int v31;
  _BYTE v32[320];

  v4 = *((_QWORD *)this + 6);
  v5 = llroundf(*(float *)(v4 + 4 * (vcvtas_u32_f32(*(float *)(v4 + 4)) + 23)));
  if (v5 == -2)
    v5 = *((_DWORD *)this + 130);
  *((_DWORD *)this + 130) = v5;
  if (v5 == -1)
    return DspLib::XTC::Algorithm::makeBypassFirCoefficients(this, a2);
  v6 = *((_QWORD *)this + v5 + 32);
  if (v6)
    return DspLib::XTC::Algorithm::runXTCfilterPostProcess((uint64_t)this, v6, a2);
  if (!*((_QWORD *)this + 34))
    return DspLib::XTC::Algorithm::makeBypassFirCoefficients(this, a2);
  v8 = 16 * (v5 & ~(v5 >> 31));
  v9 = *(float *)(v4 + 4 * (v8 + 35));
  v10 = *(float *)(v4 + 4 * (v8 + 37));
  v11 = *(float *)(v4 + 4 * (v8 + 38));
  v12 = 0.0;
  if (v9 > 0.0)
  {
    v13 = *(float *)(v4 + 4 * (v8 + 36));
    if (v13 > 0.0)
    {
      v14 = atanf(v9 / (float)(v13 + v13));
      v12 = (float)(v14 + v14) * 57.2957795;
    }
  }
  v15 = 0;
  v16 = 179.0;
  if (v12 <= 179.0)
    v16 = v12;
  if (v12 >= 1.0)
    v17 = v16;
  else
    v17 = 1.0;
  v30 = 0;
  v31 = 0;
  do
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v32[v15], 0, 0);
    v15 += 80;
  }
  while (v15 != 320);
  v18 = 0;
  v27 = 0;
  v28 = 0;
  do
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v29[v18], 0, 0);
    v18 += 80;
  }
  while (v18 != 320);
  v19 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v26[v19], 0, 0);
    v19 += 80;
  }
  while (v19 != 320);
  DspLib::XTC::HRIRDatabase::getHRTFwithAngleAndRotation(*((_QWORD *)this + 34), &v30, v17, 0.0);
  DspLib::XTC::HRIRDatabase::getHRTFwithAngleAndRotation(*((_QWORD *)this + 34), &v27, v10, v11);
  DspLib::XTC::Algorithm::compute_W_with_H_and_D((uint64_t)this, (uint64_t)&v30, (uint64_t)&v27, (uint64_t)&v24);
  v20 = DspLib::XTC::Algorithm::runXTCfilterPostProcess((uint64_t)this, (uint64_t)&v24, a2);
  for (i = 256; i != -64; i -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&v24 + i));
  for (j = 256; j != -64; j -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&v27 + j));
  for (k = 256; k != -64; k -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&v30 + k));
  return v20;
}

void sub_1B6093E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;

  for (i = 256; i != -64; i -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&a9 + i));
  for (j = 256; j != -64; j -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(&a51 + j));
  for (k = 256; k != -64; k -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&STACK[0x2A0] + k));
  _Unwind_Resume(a1);
}

void sub_1B6093EA8()
{
  uint64_t v0;

  for (; v0; v0 -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&STACK[0x260] + v0));
  JUMPOUT(0x1B6093EA0);
}

void DspLib::XTC::Algorithm::processTestNoiseGenerator(DspLib::XTC::Algorithm *this, DspLibBuffer *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t cycle_count;
  unint64_t v13;
  double v14;
  unint64_t v15;
  float *v16;
  vDSP_Length v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 280))
  {
    v4 = (char *)this + 280;
    v5 = DspLibBuffer::numChannels(a2);
    MEMORY[0x1E0C80A78](v5);
    v8 = (char *)v18 - v7;
    if (v6 >= 0x200)
      v9 = 512;
    else
      v9 = v6;
    bzero((char *)v18 - v7, v9);
    if (DspLibBuffer::numChannels(a2))
    {
      v10 = 0;
      do
      {
        *(_QWORD *)&v8[8 * v10] = DspLibBuffer::channel(a2, v10);
        ++v10;
      }
      while (v10 < DspLibBuffer::numChannels(a2));
    }
    v11 = DspLibBuffer::numChannels(a2);
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
    v18[0] = v8;
    v18[1] = v11;
    v18[2] = cycle_count;
    DspLib::ToneGenerator::generate((uint64_t)v4, (uint64_t)v18);
    v13 = *((_QWORD *)this + 62);
    v14 = *((double *)this + 3);
    if (v14 >= (double)v13)
    {
      v15 = vp::utility::CPU_Profiler::get_cycle_count(a2) + v13;
      v14 = *((double *)this + 3);
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 62) = v15;
    v16 = (float *)DspLibBuffer::channel(a2, v14 * 0.5 >= (double)v15);
    v17 = vp::utility::CPU_Profiler::get_cycle_count(a2);
    DspLib::clear(v16, v17);
  }
}

void DspLib::XTC::Algorithm::processBlock(DspLib::XTC::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  float *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  size_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  unsigned int v26;
  vDSP_Length v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  int v33;
  _QWORD v34[3];
  _QWORD v35[3];
  float __Start;
  float v37;
  float __Step;
  _QWORD v39[3];
  _QWORD v40[3];
  const float *v41;
  const float *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    v32 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    v33 = 145;
LABEL_38:
    printf("DSP Sound assertion in %s at line %d\n", v32, v33);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!*((_QWORD *)this + 30))
  {
    v32 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    v33 = 146;
    goto LABEL_38;
  }
  if (!*((_QWORD *)this + 29))
  {
    v32 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    v33 = 147;
    goto LABEL_38;
  }
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  if (vp::utility::CPU_Profiler::get_cycle_count(a3))
  {
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    if (a2 != a3)
      DspLibBuffer::operator=((uint64_t)a3, a2);
    v7 = (float *)*((_QWORD *)this + 6);
    if (vcvtas_u32_f32(*v7) == 2)
    {
      if (vcvtas_u32_f32(v7[15]) == 1)
        DspLib::XTC::Algorithm::processTestNoiseGenerator(this, a3);
      v8 = vp::utility::CPU_Profiler::get_cycle_count(a3);
      v9 = DspLibBuffer::numChannels(a3);
      MEMORY[0x1E0C80A78](v9);
      v12 = (void **)((char *)v34 - v11);
      if (v10 >= 0x200)
        v13 = 512;
      else
        v13 = v10;
      bzero((char *)v34 - v11, v13);
      if (DspLibBuffer::numChannels(a3))
      {
        v14 = 0;
        do
        {
          v12[v14] = (void *)DspLibBuffer::channel(a3, v14);
          ++v14;
        }
        while (v14 < DspLibBuffer::numChannels(a3));
      }
      v15 = DspLibBuffer::numChannels(a3);
      v16 = vp::utility::CPU_Profiler::get_cycle_count(a3);
      v17 = v16;
      if (v8 <= 1)
        v18 = 1;
      else
        v18 = v8;
      v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      MEMORY[0x1E0C80A78](v16);
      v43 = (char *)&v34[-v19];
      v44 = &v43[4 * v19];
      v20 = *((_QWORD *)this + 30);
      v40[0] = v12;
      v40[1] = v15;
      v40[2] = v17;
      v39[0] = &v43;
      v39[1] = 2;
      v39[2] = v8;
      DspLib::XTC::FIRMatrix::process(v20, v40, v39);
      v22 = *((float *)this + 62);
      if (v22 >= 1.0)
      {
        if (v8)
        {
          v30 = 4 * v8;
          memmove(*v12, v43, v30);
          memmove(v12[1], v44, v30);
        }
      }
      else
      {
        v23 = 1.0 / (*((double *)this + 3) * (float)(*((float *)this + 63) / 1000.0));
        v37 = -v23;
        __Step = v23;
        __Start = 1.0 - v22;
        MEMORY[0x1E0C80A78](v21);
        v26 = vcvtas_u32_f32(v25);
        v41 = (const float *)((char *)v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
        v42 = &v41[v19];
        if (v8 >= v26)
          v27 = v26;
        else
          v27 = v8;
        v28 = *((_QWORD *)this + 29);
        v35[0] = v12;
        v35[1] = v15;
        v35[2] = v17;
        v34[0] = &v41;
        v34[1] = 2;
        v34[2] = v8;
        DspLib::XTC::FIRMatrix::process(v28, v35, v34);
        if (v8)
        {
          v29 = 4 * v8;
          memmove(*v12, v43, v29);
          memmove(v12[1], v44, v29);
        }
        vDSP_vrampmul2((const float *)v43, (const float *)v44, 1, (float *)this + 62, &__Step, (float *)*v12, (float *)v12[1], 1, v27);
        vDSP_vrampmuladd2(v41, v42, 1, &__Start, &v37, (float *)*v12, (float *)v12[1], 1, v27);
      }
      if (vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6) + 60)) == 2)
        DspLib::XTC::Algorithm::processTestNoiseGenerator(this, a3);
    }
    if (*((_BYTE *)this + 40))
    {
      v31 = vp::utility::CPU_Profiler::get_cycle_count(a3);
      DspLib::CPUMeasure::stop((DspLib::XTC::Algorithm *)((char *)this + 72), v31, *((double *)this + 3));
    }
  }
}

void DspLib::XTC::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  const DspLib::ComplexSpan *v5;
  float v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  float v13;
  uint64_t i;

  DspLib::clear((float *)a2, __N);
  v6 = DspLib::sum(*(const float **)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
  v7 = *(unsigned int *)(a1 + 504);
  *(float *)a2 = v6;
  *(float *)(a2 + 4) = (float)v7;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v7);
  if ((v7 + 1) <= 0x3F)
    v8 = v7 + 1;
  else
    v8 = 0;
  *(_DWORD *)(a1 + 504) = v8;
  v9 = 1;
  v10 = 5;
  do
  {
    v11 = v9;
    v12 = *(_QWORD *)(a1 + 256);
    v13 = 0.0;
    if (v12)
    {
      for (i = 16; i != 336; i += 80)
        v13 = v13 + DspLib::checksum((DspLib *)(v12 + i), v5, 0.0);
    }
    v9 = 0;
    *(float *)(a2 + 4 * v10) = v13;
    v10 = 6;
  }
  while ((v11 & 1) != 0);
}

float DspLib::XTC::Algorithm::makeBypassFirCoefficients(DspLib::XTC::Algorithm *this, DspLibBuffer *a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  float *v10;
  vDSP_Length cycle_count;
  float v12;

  v4 = *((_QWORD *)this + 30);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 256);
    v6 = *(float *)(v4 + 264);
    if (v5)
      goto LABEL_6;
  }
  else
  {
    v6 = 0.0;
  }
  v5 = 1;
LABEL_6:
  DspLibBuffer::resize(a2, v5);
  DspLibBuffer::setNumFrames(a2, v5);
  v7 = *((double *)this + 3);
  *((double *)a2 + 3) = v7;
  v8 = vcvtad_u64_f64(v7 * (float)(fabsf(v6) / 1000.0));
  if ((int)v5 - 1 >= v8)
    v9 = v8;
  else
    v9 = v5 - 1;
  v10 = (float *)DspLibBuffer::channel(a2, 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLib::clear(v10, cycle_count);
  if (v6 <= 0.0)
    v12 = -1.0;
  else
    v12 = 1.0;
  *(float *)(DspLibBuffer::channel(a2, 0) + 4 * v9) = v12;
  *(float *)(DspLibBuffer::channel(a2, 3u) + 4 * v9) = v12;
  return v6;
}

float DspLib::XTC::Algorithm::runXTCfilterPostProcess(uint64_t a1, uint64_t a2, DspLibBuffer *a3)
{
  float v6;
  unint64_t v7;
  const DspLib::ComplexSpan *v8;
  double v9;
  float v10;
  uint64_t i;
  char *v12;
  int v13;
  DspLib::ComplexVector *v14;
  int v15;
  float v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  float *v20;
  uint64_t v21;
  float v22;
  float *v23;
  float v24;
  _BOOL4 v25;
  float v26;
  DspLib::ComplexSpan *v27;
  float v28;
  DspLib::FFT *v29;
  uint64_t v30;
  uint64_t v31;
  DspLib::FFT *v32;
  float v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  DspLib::ComplexSpan *v42;
  uint64_t j;
  uint64_t v44;
  DspLib::FFT *v45;
  _QWORD *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const float **v54;
  size_t v55;
  unint64_t k;
  unsigned int v57;
  vDSP_Length cycle_count;
  uint64_t v59;
  uint64_t v60;
  uint64_t m;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  DspLib *v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  const float *v78;
  unint64_t v79;
  const float *v80;
  unint64_t v81;
  const float *v82;
  unint64_t v83;
  const float *v84;
  unint64_t v85;
  const float *v86;
  unint64_t v87;
  const float *v88;
  unint64_t v89;
  const float *v90;
  unint64_t v91;
  const float *v92;
  unint64_t v93;
  const float *v94;
  unint64_t v95;
  const float *v96;
  unint64_t v97;
  char *v99;
  _QWORD v100[2];
  void **v101;
  void **v102;
  _QWORD v103[3];
  uint64_t v104[3];
  _QWORD v105[3];
  vDSP_Length v106[2];
  _BYTE v107[80];
  _BYTE v108[80];
  uint64_t v109;
  DSPSplitComplex v110[5];
  DSPSplitComplex v111[5];
  DspLib::FFT *v112;
  DspLib::ComplexVector *v113;
  unint64_t v114;
  unint64_t v115;
  _DWORD v116[8];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v6 = *(float *)(a2 + 8);
  v115 = *(_QWORD *)a2;
  v7 = 2 * v115;
  v9 = round(log2((double)(2 * v115)));
  v10 = 0.0;
  for (i = 16; i != 336; i += 80)
    v10 = v10 + DspLib::checksum((DspLib *)(a2 + i), v8, 0.0);
  if (v6 >= 1000.0)
  {
    if (v7 != 1 << v9)
    {
      v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      v13 = 420;
      goto LABEL_27;
    }
    v14 = 0;
    v112 = 0;
    v113 = 0;
    v15 = 4;
    v114 = 0;
    do
    {
      if ((unint64_t)v14 >= v114)
      {
        v14 = (DspLib::ComplexVector *)std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long &>((uint64_t *)&v112, &v115);
      }
      else
      {
        DspLib::ComplexVector::ComplexVector(v14, v115, 0);
        v14 = (DspLib::ComplexVector *)((char *)v14 + 80);
      }
      v113 = v14;
      --v15;
    }
    while (v15);
    v16 = *(float *)(*(_QWORD *)(a1 + 48) + 12);
    DspLib::ComplexVector::operator=(v112, a2 + 16);
    DspLib::ComplexVector::operator=((char *)v112 + 80, a2 + 96);
    DspLib::ComplexVector::operator=((char *)v112 + 160, a2 + 176);
    DspLib::ComplexVector::operator=((char *)v112 + 240, a2 + 256);
    v17 = 0;
    v18 = (_DWORD **)((char *)v112 + 8);
    do
    {
      v19 = *v18;
      v18 += 10;
      v116[v17 + 4] = *v19;
      *v19 = 0;
      ++v17;
    }
    while (v17 != 4);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v111, v115, 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v110, v115, 0);
    DspLib::XTC::Algorithm::makeCrossover(&v111[0].realp, &v110[0].realp, *(float **)(a1 + 48), v6);
    v21 = *(_QWORD *)(a1 + 512);
    if (v21)
    {
      DspLib::ComplexVector::operator=(v21 + 1696, v111);
      DspLib::ComplexVector::operator=(*(_QWORD *)(a1 + 512) + 1856, v110);
      DspLib::ComplexVector::operator=(*(_QWORD *)(a1 + 512) + 1776, v110);
      DspLib::ComplexVector::operator=(*(_QWORD *)(a1 + 512) + 1936, v111);
    }
    v109 = 0;
    v22 = DspLib::FFT::impulseResponsePeakInMilliseconds(v112, (const DspLib::ComplexSpan *)((char *)&v109 + 4), v6, v20);
    v24 = DspLib::FFT::impulseResponsePeakInMilliseconds((DspLib::FFT *)((char *)v112 + 240), (const DspLib::ComplexSpan *)&v109, v6, v23);
    v25 = *(float *)&v109 < 0.0 && *((float *)&v109 + 1) < 0.0;
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v108, v115, 0);
    v26 = (float)(v22 + v24) * 0.5;
    DspLib::initializeWithLinearPhase((DspLib *)v108, v27, v26, v6);
    if (v25)
      DspLib::operator*=(v108, -1.0);
    DspLib::operator*=(v110, v108);
    v28 = 1.0;
    if (v25)
      v28 = -1.0;
    v29 = v112;
    **(float **)v112 = v28;
    **((_DWORD **)v29 + 10) = 0;
    **((_DWORD **)v29 + 20) = 0;
    **((float **)v29 + 30) = v28;
    DspLib::operator*(v29, v111, (DspLib::ComplexVector *)v107);
    DspLib::operator+((DspLib::ComplexSpan *)v107, v110, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=(v112, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v107);
    DspLib::operator*((DspLib::FFT *)((char *)v112 + 80), v111, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=((char *)v112 + 80, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::operator*((DspLib::FFT *)((char *)v112 + 160), v111, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=((char *)v112 + 160, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::operator*((DspLib::FFT *)((char *)v112 + 240), v111, (DspLib::ComplexVector *)v107);
    DspLib::operator+((DspLib::ComplexSpan *)v107, v110, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=((char *)v112 + 240, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v107);
    v30 = 0;
    v31 = 8;
    v32 = v112;
    do
    {
      **(_DWORD **)((char *)v32 + v31) = v116[v30 + 4];
      v33 = *(double *)(a1 + 24);
      DspLib::FFT::resample((DSPSplitComplex *)((char *)v32 + v31 - 8), 0, v6, v33);
      v32 = v112;
      v34 = *(_DWORD **)((char *)v112 + v31);
      v116[v30 + 4] = *v34;
      *v34 = 0;
      ++v30;
      v31 += 80;
    }
    while (v30 != 4);
    v35 = DspLib::XTC::Algorithm::targetFIRfilterLength((DspLib::XTC::Algorithm *)a1);
    v36 = v35;
    v37 = *(double *)(a1 + 24);
    if (v16 < 0.5)
      v38 = (float)(*(float *)(*(_QWORD *)(a1 + 48) + 56) * (float)((float)((float)v35 / v37) * 1000.0)) / 100.0;
    else
      v38 = 0.0;
    v40 = (float)((float)(int)roundf((float)((float)(v26 + v38) / 1000.0) * v37) / v37) * 1000.0;
    if (v25)
      v39 = -v40;
    else
      v39 = v40;
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v107, v115, 0);
    v41 = *(double *)(a1 + 24);
    DspLib::initializeWithLinearPhase((DspLib *)v107, v42, v40 - v26, v41);
    for (j = 0; j != 320; j += 80)
    {
      DspLib::operator*((DspLib::ComplexSpan *)v107, (DspLib::ComplexVector *)&v101, 2.0);
      DspLib::operator*=((char *)v112 + j, &v101);
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    }
    v44 = 0;
    v45 = v112;
    do
    {
      v46 = (_QWORD *)((char *)v45 + v44);
      v47 = 4 * v46[2] - 4;
      v48 = *(float *)(*v46 + v47);
      v49 = *(float *)(v46[1] + v47);
      v50 = DspLib::sign((DspLib *)1, v49);
      v45 = v112;
      **(float **)((char *)v112 + v44 + 8) = v50 * sqrtf((float)(v49 * v49) + (float)(v48 * v48));
      v44 += 80;
    }
    while (v44 != 320);
    DspLibBuffer::resize(a3, v7);
    DspLibBuffer::setNumFrames(a3, v7);
    v51 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v51);
    v54 = (const float **)((char *)v100 - v53);
    if (v52 >= 0x200)
      v55 = 512;
    else
      v55 = v52;
    bzero((char *)v100 - v53, v55);
    for (k = 0; k < DspLibBuffer::numChannels(a3); ++k)
      v54[k] = (const float *)DspLibBuffer::channel(a3, k);
    v57 = DspLibBuffer::numChannels(a3);
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v100[1] = v100;
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v106, v7);
    v59 = 0;
    v60 = 0;
    do
    {
      DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v106, (DSPSplitComplex *)((char *)v112 + v60), (DSPComplex *)v54[v59]);
      DspLib::multiply((float *)v54[v59], cycle_count, 0.5 / (float)v7);
      v60 += 80;
      ++v59;
    }
    while (v59 != 4);
    if (v16 < 0.5)
    {
      for (m = 0; m != 4; ++m)
        *(float *)&v116[m] = DspLib::sum(v54[m], cycle_count);
      std::vector<float>::vector(&v101, v36);
      DspLib::makeTukeyWindow((uint64_t)v101, ((char *)v102 - (char *)v101) >> 2, *(float *)(*(_QWORD *)(a1 + 48) + 52));
      DspLibBuffer::setNumFrames(a3, v36);
      v105[0] = v54;
      v105[1] = v57;
      v105[2] = v36;
      DspLib::multiply(v105, (const float *)v101);
      v62 = *(float *)v116;
      v63 = DspLib::sum(*v54, v36) - v62;
      v64 = -(float)v36;
      DspLib::add((float *)*v54, v36, v63 / v64);
      v65 = *(float *)&v116[3];
      v66 = DspLib::sum(v54[3], v36);
      DspLib::add((float *)v54[3], v36, (float)(v66 - v65) / v64);
      v67 = *(float *)&v116[2];
      v68 = DspLib::sum(v54[2], v36);
      DspLib::add((float *)v54[2], v36, (float)(v68 - v67) / v64);
      v69 = *(float *)&v116[1];
      v70 = DspLib::sum(v54[1], v36);
      DspLib::add((float *)v54[1], v36, (float)(v70 - v69) / v64);
      v104[0] = (uint64_t)v54;
      v104[1] = v57;
      v104[2] = v36;
      v72 = DspLib::dB2Amp(v71, *(float *)(*(_QWORD *)(a1 + 48) + 84));
      DspLib::multiply(v104, v72);
      if (v101)
      {
        v102 = v101;
        operator delete(v101);
      }
      cycle_count = v36;
    }
    v103[0] = v54;
    v103[1] = v57;
    v103[2] = cycle_count;
    if (!DspLib::isFinite(v103))
    {
      v99 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v99, 566);
      ++DspLibDebug::mAssertCounter;
      goto LABEL_67;
    }
    if (v16 >= 0.5)
      goto LABEL_67;
    v73 = *(_QWORD *)(a1 + 48);
    v74 = *(float *)(v73 + 40);
    v75 = *(float *)(v73 + 44);
    if (v74 < 0.5 && v75 < 0.5)
      goto LABEL_67;
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v101, a3);
    if (v74 < 0.5 || v75 < 0.5)
    {
      if (v75 >= 0.5)
      {
        v92 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 2u);
        v93 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 0, v92, v93, 0);
        v94 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 3u);
        v95 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 1u, v94, v95, 0);
        v96 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 0);
        v97 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 2u, v96, v97, 0);
        v90 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 1u);
        v91 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      }
      else
      {
        if (v74 < 0.5)
        {
LABEL_66:
          DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v101);
LABEL_67:
          *((_QWORD *)a3 + 3) = *(_QWORD *)(a1 + 24);
          DspLibBuffer::setNumFrames(a3, v36);
          DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v106);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v107);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v108);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v110);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v111);
          v101 = (void **)&v112;
          std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v101);
          return v39;
        }
        v78 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 0);
        v79 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 0, v78, v79, 0);
        v80 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 2u);
        v81 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 1u, v80, v81, 0);
        v82 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 1u);
        v83 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 2u, v82, v83, 0);
        v90 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 3u);
        v91 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      }
    }
    else
    {
      v84 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 2u);
      v85 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      DspLibBuffer::copy(a3, 0, v84, v85, 0);
      v86 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 0);
      v87 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      DspLibBuffer::copy(a3, 1u, v86, v87, 0);
      v88 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 3u);
      v89 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      DspLibBuffer::copy(a3, 2u, v88, v89, 0);
      v90 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 1u);
      v91 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
    }
    DspLibBuffer::copy(a3, 3u, v90, v91, 0);
    goto LABEL_66;
  }
  v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
  v13 = 414;
LABEL_27:
  printf("DSP Sound assertion in %s at line %d\n", v12, v13);
  ++DspLibDebug::mAssertCounter;
  return 0.0;
}

void sub_1B6095180(_Unwind_Exception *a1)
{
  void ***v1;
  uint64_t v2;

  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)(v1 + 23));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 25));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 35));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 46));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 56));
  v1[2] = (void **)(v2 - 192);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](v1 + 2);
  _Unwind_Resume(a1);
}

void DspLib::XTC::Algorithm::compute_W_with_H_and_D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  char *v8;
  uint64_t n;
  char *v10;
  uint64_t ii;
  uint64_t i;
  DspLib::XTC::HRTFSetsForDisplay *v14;
  uint64_t v15;
  int v16;
  uint64_t j;
  const DspLib::ComplexSpan *v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v45;
  uint64_t k;
  uint64_t m;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  DspLib::ComplexSpan *v56;
  _DWORD v57[24];
  _BYTE v58[96];
  _BYTE v59[96];
  _BYTE v60[96];
  _DWORD v61[4];
  uint64_t v62;
  float v63;
  int v64;
  _DWORD v65[24];
  _DWORD v66[24];
  int64x2_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  DSPComplex v71;
  DSPComplex v72;
  DSPComplex v73;
  DSPComplex v74;
  DSPComplex v75;
  DSPComplex v76;
  DSPComplex v77;
  DSPComplex v78;
  DSPComplex v79;
  DSPComplex v80;
  DSPComplex v81;
  DSPComplex v82;
  DSPComplex v83;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a3 == *(_QWORD *)a2)
  {
    if (vabds_f32(*(float *)(a3 + 8), *(float *)(a2 + 8)) <= 0.1)
    {
      *(_QWORD *)a4 = v5;
      v56 = (DspLib::ComplexSpan *)(a4 + 16);
      for (i = 16; i != 336; i += 80)
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a4 + i), *(_QWORD *)a4);
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(a2 + 8);
      v14 = *(DspLib::XTC::HRTFSetsForDisplay **)(a1 + 512);
      if (v14)
      {
        DspLib::XTC::HRTFSetsForDisplay::setLength(v14, v5);
        v15 = *(_QWORD *)(a1 + 512);
        v16 = *(_DWORD *)(a2 + 8);
        for (j = 8; j != 2024; j += 336)
          *(_DWORD *)(v15 + j) = v16;
        DspLib::XTC::HRTFSet::operator=(v15, a2);
        DspLib::XTC::HRTFSet::operator=(*(_QWORD *)(a1 + 512) + 336, a3);
      }
      v67 = vdupq_n_s64(0x3F000000uLL);
      v68 = 1056964608;
      v69 = 0x80000000BF000000;
      DspLib::ComplexMatrix::ComplexMatrix(v60, &v67, 4);
      DspLib::inv((DspLib *)v60, (DspLib::ComplexMatrix *)&v67);
      if (v5 > 1)
      {
        v54 = (_QWORD *)(a2 + 96);
        v55 = (_QWORD *)(a2 + 16);
        v52 = (_QWORD *)(a2 + 256);
        v53 = (_QWORD *)(a2 + 176);
        v50 = (_QWORD *)(a3 + 96);
        v51 = (_QWORD *)(a3 + 16);
        v49 = (_QWORD *)(a3 + 176);
        v19 = (_QWORD *)(a3 + 256);
        v20 = 2;
        v21 = 1;
        do
        {
          v66[0] = DspLib::ComplexSpan::operator[](v55, v21);
          v66[1] = v22;
          v66[2] = DspLib::ComplexSpan::operator[](v54, v21);
          v66[3] = v23;
          v66[4] = DspLib::ComplexSpan::operator[](v53, v21);
          v66[5] = v24;
          v66[6] = DspLib::ComplexSpan::operator[](v52, v21);
          v66[7] = v25;
          DspLib::ComplexMatrix::ComplexMatrix(v59, v66, 4);
          v65[0] = DspLib::ComplexSpan::operator[](v51, v21);
          v65[1] = v26;
          v65[2] = DspLib::ComplexSpan::operator[](v50, v21);
          v65[3] = v27;
          v65[4] = DspLib::ComplexSpan::operator[](v49, v21);
          v65[5] = v28;
          v65[6] = DspLib::ComplexSpan::operator[](v19, v21);
          v65[7] = v29;
          DspLib::ComplexMatrix::ComplexMatrix(v66, v65, 4);
          DspLib::inv((DspLib *)v59, (DspLib::ComplexMatrix *)v58);
          DspLib::operator*((uint64_t)v58, (uint64_t)v66, (DspLib::ComplexMatrix *)v65);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v58);
          DspLib::operator*((uint64_t)v60, (uint64_t)v65, (DspLib::ComplexMatrix *)v57);
          DspLib::operator*((uint64_t)v57, (uint64_t)&v67, (DspLib::ComplexMatrix *)v58);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v57);
          v57[0] = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 0);
          v57[1] = v30;
          DspLib::operator/=(v58, v57);
          v31 = *(_QWORD *)(a1 + 48);
          v32 = llroundf(*(float *)(v31 + 4 * (vcvtas_u32_f32(*(float *)(v31 + 4)) + 23)));
          if (v32 == -2)
            v32 = *(_DWORD *)(a1 + 520);
          *(_DWORD *)(a1 + 520) = v32;
          if (*(float *)(v31 + 4 * (16 * (v32 & ~(v32 >> 31)) + 39)) < 0.5)
          {
            v61[0] = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 0);
            v61[1] = v33;
            v61[2] = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 1uLL);
            v61[3] = v34;
            v62 = 0;
            v63 = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 1uLL, 1uLL);
            v64 = v35;
            DspLib::ComplexMatrix::ComplexMatrix(v57, v61, 4);
            DspLib::ComplexMatrix::operator=(v58, v57);
            DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v57);
          }
          v36 = *(_QWORD *)(a1 + 512);
          if (v36)
          {
            v71.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 0);
            DspLib::ComplexSpan::setElement((_QWORD *)(v36 + 688), v21, v71);
            v37 = *(_QWORD *)(a1 + 512);
            v72.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 1uLL);
            DspLib::ComplexSpan::setElement((_QWORD *)(v37 + 768), v21, v72);
            v38 = *(_QWORD *)(a1 + 512);
            v73.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 0);
            DspLib::ComplexSpan::setElement((_QWORD *)(v38 + 848), v21, v73);
            v39 = *(_QWORD *)(a1 + 512);
            v74.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 1uLL);
            DspLib::ComplexSpan::setElement((_QWORD *)(v39 + 928), v21, v74);
            v40 = *(_QWORD *)(a1 + 512);
            v75.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 0);
            DspLib::ComplexSpan::setElement((_QWORD *)(v40 + 1024), v21, v75);
            v41 = *(_QWORD *)(a1 + 512);
            v76.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 1uLL);
            DspLib::ComplexSpan::setElement((_QWORD *)(v41 + 1104), v21, v76);
            v42 = *(_QWORD *)(a1 + 512);
            v77.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 1uLL, 0);
            DspLib::ComplexSpan::setElement((_QWORD *)(v42 + 1184), v21, v77);
            v43 = *(_QWORD *)(a1 + 512);
            v78.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 1uLL, 1uLL);
            DspLib::ComplexSpan::setElement((_QWORD *)(v43 + 1264), v21, v78);
          }
          DspLib::operator*((uint64_t)&v67, (uint64_t)v58, (DspLib::ComplexMatrix *)v61);
          DspLib::operator*((uint64_t)v61, (uint64_t)v60, (DspLib::ComplexMatrix *)v57);
          DspLib::ComplexMatrix::operator=(v65, v57);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v57);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v61);
          v79.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 0);
          DspLib::ComplexSpan::setElement(v56, v21, v79);
          v80.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 1uLL);
          DspLib::ComplexSpan::setElement((_QWORD *)(a4 + 96), v21, v80);
          v81.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 0);
          DspLib::ComplexSpan::setElement((_QWORD *)(a4 + 176), v21, v81);
          v82.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 1uLL);
          DspLib::ComplexSpan::setElement((_QWORD *)(a4 + 256), v21, v82);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v58);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v65);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v66);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v59);
          v21 = v20;
        }
        while (v5 > v20++);
      }
      v45 = 0.0;
      for (k = 16; k != 336; k += 80)
        v45 = v45 + DspLib::checksum((DspLib *)(a4 + k), v18, 0.0);
      for (m = 16; m != 336; m += 80)
      {
        v83.real = 0.0;
        v83.imag = 0.0;
        DspLib::ComplexSpan::setElement((_QWORD *)(a4 + m), 0, v83);
      }
      v48 = *(_QWORD *)(a1 + 512);
      if (v48)
        DspLib::XTC::HRTFSet::operator=(v48 + 1344, a4);
      DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&v67);
      DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v60);
    }
    else
    {
      v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v8, 281);
      ++DspLibDebug::mAssertCounter;
      *(_QWORD *)a4 = 0;
      for (n = 16; n != 336; n += 80)
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a4 + n), *(_QWORD *)a4);
    }
  }
  else
  {
    v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 274);
    ++DspLibDebug::mAssertCounter;
    *(_QWORD *)a4 = 0;
    for (ii = 16; ii != 336; ii += 80)
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a4 + ii), *(_QWORD *)a4);
  }
}

void sub_1B6095978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)(v55 - 208));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&a55);
  _Unwind_Resume(a1);
}

void DspLib::XTC::HRTFSetsForDisplay::setLength(DspLib::XTC::HRTFSetsForDisplay *this, uint64_t a2)
{
  uint64_t i;
  uint64_t j;

  for (i = 0; i != 6; ++i)
  {
    *(_QWORD *)this = a2;
    for (j = 16; j != 336; j += 80)
      DspLib::ComplexVector::setLength((DspLib::XTC::HRTFSetsForDisplay *)((char *)this + j), *(_QWORD *)this);
    this = (DspLib::XTC::HRTFSetsForDisplay *)((char *)this + 336);
  }
}

uint64_t DspLib::XTC::HRTFSet::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t result;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  for (i = 16; i != 336; i += 80)
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + i), *(_QWORD *)a1);
  for (j = 16; j != 336; j += 80)
    result = DspLib::ComplexVector::operator=(a1 + j, a2 + j);
  return result;
}

void DspLib::XTC::Algorithm::makeCrossover(float **a1, float **a2, float *a3, float a4)
{
  float v6;
  _BOOL4 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float **v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float *v27;
  unint64_t i;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  v6 = a3[9];
  v7 = v6 >= 0.5;
  v8 = a3[16];
  v9 = a3[17];
  v10 = a3[18];
  if (v9 < v8)
  {
    v11 = a3[19];
    if (v11 >= v8)
      v10 = (float)(v10 - (float)((float)((float)(a3[20] - v10) / (float)(v11 - v9)) * v9))
          + (float)((float)((float)(a3[20] - v10) / (float)(v11 - v9)) * v8);
    else
      v10 = a3[20];
  }
  v12 = a3[2];
  if (a3[30] >= 0.5)
  {
    if (v12 < 0.5)
    {
      v7 = 0;
      v14 = 1.0;
      goto LABEL_11;
    }
    DspLib::ComplexVector::operator=(a1, 1.0);
LABEL_26:
    v15 = 0.0;
LABEL_27:
    v17 = a2;
    v16 = v15;
    goto LABEL_28;
  }
  v13 = a3[8];
  v14 = v10 / 100.0;
  v15 = 1.0 - (float)(v10 / 100.0);
  if (v12 >= 0.5)
  {
    if (v13 < 0.5)
      v40 = v10 / 100.0;
    else
      v40 = 0.0;
    DspLib::ComplexVector::operator=(a1, v40);
    if (v6 < 0.5)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (v13 >= 0.5)
  {
    DspLib::ComplexVector::operator=(a2, v15);
    v16 = 0.0;
    v17 = a1;
LABEL_28:
    DspLib::ComplexVector::operator=(v17, v16);
    return;
  }
LABEL_11:
  v18 = (unint64_t)a1[2];
  v19 = a3[6];
  v20 = a3[7];
  v21 = a3[4];
  v22 = a3[5];
  v23 = 1.0;
  if (v7)
    v24 = 1.0;
  else
    v24 = v14;
  if (v7)
    v25 = v14;
  else
    v25 = 1.0;
  v26 = *a1;
  **a1 = 0.0;
  v27 = *a2;
  **a2 = v25;
  if (v18 >= 2)
  {
    v41 = a4 / (float)(2 * v18);
    v42 = v19;
    for (i = 1; i < v18; i = (i + 1))
    {
      v29 = v21;
      v30 = v41 * (float)i;
      v31 = logf(v19 / v30);
      v32 = expf(v20 * v31) + v23;
      v33 = v20;
      v34 = 1.0 / v32;
      v35 = v29 / v30;
      v21 = v29;
      v36 = logf(v35);
      v37 = expf(v22 * v36);
      v19 = v42;
      v38 = v34 * (float)(1.0 - (float)(1.0 / (float)(v37 + 1.0)));
      v20 = v33;
      v23 = 1.0;
      v39 = v24 * v38;
      v26[i] = v25 * v39;
      v27[i] = v25 * (float)(1.0 - v39);
    }
  }
}

unint64_t DspLib::XTC::Algorithm::targetFIRfilterLength(DspLib::XTC::Algorithm *this)
{
  int v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  double v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = llroundf(*(float *)(*((_QWORD *)this + 6) + 4 * (vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6) + 4)) + 23)));
  if (v2 == -2)
    v2 = *((_DWORD *)this + 130);
  *((_DWORD *)this + 130) = v2;
  if (v2 == -1)
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 668);
    ++DspLibDebug::mAssertCounter;
  }
  v4 = (uint64_t *)*((_QWORD *)this + (v2 & ~(v2 >> 31)) + 32);
  if (v4)
  {
    v5 = *v4;
    if (v5)
      goto LABEL_13;
  }
  else
  {
    v6 = *((_QWORD *)this + 34);
    if (v6)
    {
      v5 = (uint64_t)((1 << *(_DWORD *)(v6 + 4)) + (1 << *(_DWORD *)(v6 + 4) < 0)) >> 1;
      if (v5)
        goto LABEL_13;
    }
    else
    {
      v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v7, 683);
      ++DspLibDebug::mAssertCounter;
    }
  }
  v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v8, 688);
  ++DspLibDebug::mAssertCounter;
  v5 = 1;
LABEL_13:
  v9 = *((_QWORD *)this + 6);
  if (*(float *)(v9 + 12) >= 0.5)
  {
    v12 = 2 * v5;
    v11 = (char *)v12;
  }
  else
  {
    v10 = *((double *)this + 3) * *(float *)(v9 + 48);
    v11 = "onE";
    LODWORD(v11) = vcvtad_u64_f64(v10 * 0.001);
    v12 = 2 * v5;
  }
  v13 = (unint64_t)&v11[(v11 & 1) - 1];
  if (v12 >= v13)
    v12 = v13;
  if (v13)
    return v12;
  else
    return 1;
}

void DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(_QWORD *a1, DSPSplitComplex *__Z, DSPComplex *__C)
{
  const vDSP_DFT_SetupStruct *v6;

  v6 = (const vDSP_DFT_SetupStruct *)a1[1];
  if (v6)
    vDSP_DFT_Execute(v6, __Z->realp, __Z->imagp, __Z->realp, __Z->imagp);
  vDSP_ztoc(__Z, 1, __C, 2, *a1 >> 1);
}

uint64_t DspLib::XTC::Algorithm::wFilters(DspLib::XTC::Algorithm *this, int a2)
{
  char *v2;
  uint64_t result;
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)this + 8 * (a2 > 0);
  result = *((_QWORD *)v2 + 32);
  if (!result)
  {
    v4 = (uint64_t *)(v2 + 256);
    v5 = (_OWORD *)operator new();
    v6 = 0;
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    v5[6] = 0u;
    v5[7] = 0u;
    v5[8] = 0u;
    v5[9] = 0u;
    v5[10] = 0u;
    v5[11] = 0u;
    v5[12] = 0u;
    v5[13] = 0u;
    v5[14] = 0u;
    v5[15] = 0u;
    v5[16] = 0u;
    v5[17] = 0u;
    v5[18] = 0u;
    v5[19] = 0u;
    v5[20] = 0u;
    do
    {
      DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v5[v6 + 1], 0, 0);
      v6 += 5;
    }
    while (v6 != 20);
    v7 = 0;
    std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100](v4, (uint64_t)v5);
    std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100](&v7, 0);
    return *v4;
  }
  return result;
}

void sub_1B6096004(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 - 64 + v2));
  MEMORY[0x1BCC95CEC](v1, 0x1080C400BF4BD80);
  _Unwind_Resume(a1);
}

void DspLib::XTC::Algorithm::~Algorithm(DspLib::XTC::Algorithm *this)
{
  DspLib::XTC::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E69C1A48;
  v2 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v2)
    std::default_delete<DspLib::XTC::HRTFSetsForDisplay>::operator()[abi:ne180100]((uint64_t)this + 512, v2);
  v3 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v3)
    MEMORY[0x1BCC95CEC](v3, 0x1000C407BAC9B3ELL);
  v4 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v4)
    MEMORY[0x1BCC95CEC](v4, 0x1000C4000313F17);
  for (i = 264; i != 248; i -= 8)
    std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100]((uint64_t *)((char *)this + i), 0);
  v6 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 224, v6);
  v7 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 216, v7);
  *(_QWORD *)this = off_1E69C46F0;
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
}

uint64_t DspLib::XTC::Algorithm::numStatus(DspLib::XTC::Algorithm *this)
{
  return 10;
}

uint64_t std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long &>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (DspLib::ComplexVector *)&v10[80 * v4];
  v15 = v14;
  v16 = &v10[80 * v9];
  DspLib::ComplexVector::ComplexVector(v14, *a2, 0);
  v15 = (DspLib::ComplexVector *)((char *)v14 + 80);
  std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B6096164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ComplexVector>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ComplexVector>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  DspLib::ComplexVector *v12;

  v10 = 0;
  v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    v12 = (DspLib::ComplexVector *)(v11 + v10);
    v10 -= 80;
    DspLib::ComplexVector::ComplexVector(v12, (const DspLib::ComplexVector *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<DspLib::ComplexVector>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v4 - 80));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<DspLib::XTC::HRTFSetsForDisplay>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t j;

  if (a2)
  {
    v3 = a2 + 2016;
    for (i = a2 + 1936; ; i -= 336)
    {
      for (j = 0; j != -320; j -= 80)
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(i + j));
      v3 -= 336;
      if (v3 == a2)
        JUMPOUT(0x1BCC95CECLL);
    }
  }
}

uint64_t DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(uint64_t a1)
{
  vDSP_DFT_SetupStruct *v2;

  v2 = *(vDSP_DFT_SetupStruct **)(a1 + 8);
  if (v2)
    vDSP_DFT_DestroySetup(v2);
  return a1;
}

void std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v4;
  void **v5;

  if (a2)
  {
    for (i = 0; i != -256; i -= 64)
    {
      v5 = (void **)(a2 + i + 232);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
      v4 = *(void **)(a2 + i + 200);
      if (v4)
      {
        *(_QWORD *)(a2 + i + 208) = v4;
        operator delete(v4);
      }
    }
    MEMORY[0x1BCC95CEC](a2, 0x10A0C409CCB4655);
  }
}

vDSP_Length *DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(vDSP_Length *a1, vDSP_Length a2)
{
  vDSP_DFT_Setup Setup;
  char *v5;

  *a1 = a2;
  Setup = vDSP_DFT_zrop_CreateSetup(0, a2, vDSP_DFT_INVERSE);
  a1[1] = (vDSP_Length)Setup;
  if (!Setup)
  {
    v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.h");
    printf("DSP Sound assertion in %s at line %d\n", v5, 63);
    ++DspLibDebug::mAssertCounter;
  }
  return a1;
}

double *DspLib::roots(DspLib *this, const float *a2, __CLPK_doublereal *a3, DSPDoubleSplitComplex a4)
{
  double *realp;
  double *v6;
  uint64_t v8;
  double *v9;
  char *v10;
  BOOL v11;
  DspLib *v12;
  uint64_t v13;
  char *v14;
  double *v15;
  _QWORD v17[2];
  DSPDoubleSplitComplex v18;
  DSPDoubleSplitComplex v19;

  realp = a4.realp;
  v17[1] = *MEMORY[0x1E0C80C00];
  if (a2)
    v6 = (double *)((char *)a2 - 1);
  else
    v6 = 0;
  if (*(float *)this == 0.0 && (unint64_t)a2 >= 2)
  {
    v9 = 0;
    do
    {
      v10 = (char *)v9 + 1;
      v11 = *((float *)this + ((_DWORD)v9 + 1)) != 0.0 || (double *)((char *)v6 - 1) == v9;
      v9 = (double *)((char *)v9 + 1);
    }
    while (!v11);
    v8 = v10;
    v6 = (double *)((char *)v6 - v10);
  }
  else
  {
    v8 = 0;
  }
  if ((double *)((unint64_t)v6 - 1) >= a4.imagp)
    return 0;
  v12 = (DspLib *)MEMORY[0x1E0C80A78]((char *)this + 4 * v8);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  DspLib::getCompanionMatrix(v12, (unint64_t)v6, v14, v15);
  v19.realp = realp;
  DspLib::hessenbergEigenvalues((DspLib *)v14, v6, a3, v19);
  v18.realp = realp;
  v18.imagp = v6;
  DspLib::sortRoots(a3, v18);
  return v6;
}

void DspLib::getCompanionMatrix(DspLib *this, unint64_t a2, void *a3, double *a4)
{
  double v7;
  unsigned int v8;
  double *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  if (a2 * a2)
    bzero(a3, 8 * a2 * a2);
  if (a2)
  {
    v7 = *(float *)this;
    v8 = 1;
    v9 = (double *)a3;
    do
    {
      v10 = v8;
      *v9 = (float)-*((float *)this + v8) / v7;
      v9 += a2;
      ++v8;
    }
    while (v10 < a2);
    if (a2 >= 2)
    {
      v11 = 0;
      v12 = 1;
      v13 = 2;
      do
      {
        *((_QWORD *)a3 + v11 + v12++) = 0x3FF0000000000000;
        v14 = v13++;
        v11 += a2;
      }
      while (v14 < a2);
    }
  }
}

uint64_t DspLib::hessenbergEigenvalues(DspLib *this, double *a2, __CLPK_doublereal *a3, DSPDoubleSplitComplex a4)
{
  double *__wi;
  uint64_t v7;
  uint64_t v8;
  __CLPK_integer v10;
  __CLPK_integer __lwork;
  __CLPK_doublereal v12;
  char __compz;
  char __job;
  __CLPK_integer __ilo[3];
  __CLPK_integer __ldh;
  uint64_t v17;

  __wi = a4.realp;
  v17 = *MEMORY[0x1E0C80C00];
  __ldh = (int)a2;
  *(_QWORD *)__ilo = DspLib::balanceMatrix(this, a2);
  __job = 69;
  __compz = 78;
  v12 = 0.0;
  v10 = 0;
  __lwork = -1;
  v7 = dhseqr_(&__job, &__compz, &__ldh, __ilo, &__ilo[1], (__CLPK_doublereal *)this, &__ldh, a3, __wi, 0, &__ldh, &v12, &__lwork, &v10);
  __lwork = (int)v12;
  MEMORY[0x1E0C80A78](v7);
  return dhseqr_(&__job, &__compz, &__ldh, __ilo, &__ilo[1], (__CLPK_doublereal *)this, &__ldh, a3, __wi, 0, &__ldh, (__CLPK_doublereal *)((char *)&v10 - v8), &__lwork, &v10);
}

_QWORD *DspLib::sortRoots(_QWORD *this, DSPDoubleSplitComplex a2)
{
  char *v2;
  int v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  double v7;
  double *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  double *v13;
  uint64_t v14;
  double v15;

  if (a2.imagp)
  {
    v2 = 0;
    v3 = 0;
    v4 = (char *)a2.imagp - 1;
    v5 = 1;
    while (a2.realp[(_QWORD)v2] != 0.0)
    {
LABEL_13:
      ++v2;
      ++v5;
      if (a2.imagp <= (double *)v2)
        return this;
    }
    if (v3 || v4 != v2)
    {
      if ((((_BYTE)v3 + 1) & 1) == 0)
      {
LABEL_12:
        ++v3;
        goto LABEL_13;
      }
    }
    else
    {
      v6 = this[(_QWORD)v4];
      this[(_QWORD)v4] = *this;
      *this = v6;
      v7 = a2.realp[(_QWORD)v2];
      a2.realp[(_QWORD)v2] = *a2.realp;
      *a2.realp = v7;
    }
    v8 = (double *)((_DWORD)v2 + 1);
    if (v8 < a2.imagp)
    {
      v9 = 0;
      v10 = ((_DWORD)v2 + 1);
      v11 = (_DWORD)v2 + 1;
      v12 = &this[v5];
      v13 = &a2.realp[v5];
      while (a2.realp[v10] != 0.0)
      {
        ++v9;
        v10 = ++v11;
        if ((double *)v11 >= a2.imagp)
          goto LABEL_12;
      }
      v3 += 2;
      if (v8 < v11)
      {
        do
        {
          v14 = this[v10];
          this[v10] = *v12;
          *v12++ = v14;
          v15 = a2.realp[v10];
          a2.realp[v10] = *v13;
          *v13++ = v15;
          --v9;
        }
        while (v9);
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  return this;
}

unint64_t DspLib::roots(DspLib *this, const double *a2, __CLPK_doublereal *a3, DSPDoubleSplitComplex a4)
{
  double *realp;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  double *v12;
  size_t v13;
  DSPDoubleSplitComplex v14;
  DspLib *v15;
  uint64_t v16;
  double v17;
  unsigned int v18;
  double *v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD v25[2];
  DSPDoubleSplitComplex v26;

  realp = a4.realp;
  v25[1] = *MEMORY[0x1E0C80C00];
  if (a2)
    v6 = (unint64_t)a2 - 1;
  else
    v6 = 0;
  if (*(double *)this == 0.0 && (unint64_t)a2 >= 2)
  {
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      v11 = *((double *)this + (v9 + 1)) != 0.0 || v6 - 1 == v9;
      ++v9;
    }
    while (!v11);
    v8 = v10;
    v6 -= v10;
  }
  else
  {
    v8 = 0;
  }
  if ((double *)(v6 - 1) >= a4.imagp)
    return 0;
  v12 = (double *)((char *)this + 8 * v8);
  MEMORY[0x1E0C80A78](this);
  v15 = (DspLib *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v16)
    bzero((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v17 = *v12;
  v18 = 1;
  v19 = (double *)v15;
  do
  {
    *v19 = -v12[v18] / v17;
    v19 += v6;
    v20 = v6 > v18++;
  }
  while (v20);
  if (v6 >= 2)
  {
    v21 = 0;
    v22 = 1;
    v23 = 2;
    do
    {
      *((_QWORD *)v15 + v21 + v22++) = 0x3FF0000000000000;
      v20 = v6 > v23++;
      v21 += v6;
    }
    while (v20);
  }
  v14.realp = realp;
  DspLib::hessenbergEigenvalues(v15, (double *)v6, a3, v14);
  v26.realp = realp;
  v26.imagp = (double *)v6;
  DspLib::sortRoots(a3, v26);
  return v6;
}

void DspLib::sPolynomialToBiquadCoefficients(float *a1, double a2, uint64_t a3, DspLib *a4, const float *a5, uint64_t *a6, int a7)
{
  DspLib *v13;
  uint64_t v14;
  __CLPK_doublereal *v15;
  double *v16;
  const float *v17;
  unint64_t v18;
  uint64_t v19;
  __CLPK_doublereal *v20;
  double *v21;
  double *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  DSPDoubleSplitComplex v40;
  DSPDoubleSplitComplex v41;
  DSPDoubleSplitComplex v42;
  DSPDoubleSplitComplex v43;

  v39 = *MEMORY[0x1E0C80C00];
  v13 = (DspLib *)MEMORY[0x1E0C80A78](a1);
  v15 = (__CLPK_doublereal *)&v37 - v14;
  v16 = &v15[(uint64_t)v41.imagp];
  v41.realp = v16;
  v18 = (unint64_t)DspLib::roots(v13, v17, v15, v41);
  MEMORY[0x1E0C80A78](v18);
  v20 = (__CLPK_doublereal *)&v37 - v19;
  v21 = &v20[(uint64_t)v42.imagp];
  v42.realp = v21;
  v22 = DspLib::roots(a4, a5, v20, v42);
  v23 = (unint64_t)v22;
  if (a7)
  {
    v24 = ((unint64_t)v22 + 1) >> 1;
    if (v24 <= (v18 + 1) >> 1)
      v24 = (v18 + 1) >> 1;
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v25);
    v27 = *a6;
    v28 = a6[1];
    if (*a6 != v28)
    {
      v26 = *(double *)&DspLib::Biquad::kBypassSection;
      do
      {
        *(_DWORD *)(v27 + 16) = 0;
        *(_OWORD *)v27 = DspLib::Biquad::kBypassSection;
        v27 += 20;
      }
      while (v27 != v28);
    }
    v40.realp = v16;
    v40.imagp = (double *)v18;
    v43.realp = v21;
    v43.imagp = (double *)v23;
    DspLib::groupRoots((DspLib *)v15, v40, (DspLib *)v20, v43, v26);
    if (v23 | v18)
    {
      DspLib::addZerosForward(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
      DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    }
    DspLib::discretizeMZTi((__int128 *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18, (uint64_t)v20, (uint64_t)v21, v23, a2);
  }
  else
  {
    a6[1] = *a6;
    v29 = a6 + 1;
    v30 = ((unint64_t)v22 + 1) >> 1;
    if (v30 <= (v18 + 1) >> 1)
      v30 = (v18 + 1) >> 1;
    if (v30 <= 1)
      v31 = 1;
    else
      v31 = v30;
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v31);
    DspLib::addZeros(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
    DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    v32 = (float *)*a6;
    if (*v29 != *a6)
    {
      v33 = 20 * ((*v29 - *a6) / 20);
      do
      {
        DspLib::Biquad::Design::bilinearTransformStoZUnwarped(v32, a2);
        v32 += 5;
        v33 -= 20;
      }
      while (v33);
    }
  }
  DspLib::configureGain((float32x2_t *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), *a1 / *(float *)a4);
  v35 = *a6;
  for (i = a6[1]; v35 != i; v35 += 20)
  {
    v36 = *(_OWORD *)v35;
    v38 = *(_DWORD *)(v35 + 16);
    v37 = v36;
    if ((DspLib::Biquad::validate((uint64_t)&v37) & 1) == 0)
    {
      *(_DWORD *)(v35 + 16) = 0;
      *(_OWORD *)v35 = DspLib::Biquad::kBypassSection;
    }
  }
}

uint64_t DspLib::addZeros(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v5;
  unint64_t v6;
  uint64_t i;
  unint64_t v8;
  double v9;
  double v10;
  float v11;
  double v12;
  float v13;
  int v14;
  double v15;
  double v16;
  double v17;
  float v18;

  if (a2)
  {
    v5 = 0;
    v6 = a5 - 1;
    for (i = 20 * a2; i; i -= 20)
    {
      if (v5 < a5)
      {
        v8 = v6 - v5;
        v9 = *(double *)(a4 + 8 * v8);
        if (v6 > v5 && v9 != 0.0)
        {
          v10 = *(double *)(a3 + 8 * v8);
          *(_DWORD *)result = 1065353216;
          v11 = v10 * -2.0;
          *(float *)(result + 4) = v11;
          v12 = v9 * v9 + v10 * v10;
          goto LABEL_7;
        }
        if (v9 == 0.0)
        {
          if (v6 != v5 && *(double *)(a4 + 8 * (v8 - 1)) == 0.0)
          {
            v16 = *(double *)(a3 + 8 * v8);
            v17 = *(double *)(a3 + 8 * (v8 - 1));
            *(_DWORD *)result = 1065353216;
            v18 = v16 + v17;
            *(float *)(result + 4) = -v18;
            v12 = v16 * v17;
LABEL_7:
            v13 = v12;
            v14 = 2;
          }
          else
          {
            v15 = *(double *)(a3 + 8 * v8);
            *(_QWORD *)result = 0x3F80000000000000;
            *(float *)&v15 = v15;
            v13 = -*(float *)&v15;
            v14 = 1;
          }
          *(float *)(result + 8) = v13;
          v5 += v14;
        }
      }
      result += 20;
    }
  }
  return result;
}

uint64_t DspLib::addPoles(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  float *v7;
  uint64_t i;
  double v9;
  double v10;
  float v11;
  double v12;
  float v13;
  uint64_t v14;
  float v15;
  double v16;
  double v17;
  float v18;

  if (a2)
  {
    v5 = 0;
    v6 = a5 - 1;
    v7 = (float *)(result + 16);
    for (i = 20 * a2; i; i -= 20)
    {
      if (v5 >= a5)
      {
LABEL_12:
        v14 = v5;
        goto LABEL_13;
      }
      v9 = *(double *)(a4 + 8 * v5);
      if (v6 <= v5 || v9 == 0.0)
      {
        if (v9 != 0.0)
          goto LABEL_12;
        v14 = (v5 + 1);
        if (v6 == v5 || *(double *)(a4 + 8 * v14) != 0.0)
        {
          v15 = *(double *)(a3 + 8 * v5);
          *(v7 - 1) = -v15;
          *v7 = 0.0;
          goto LABEL_13;
        }
        v16 = *(double *)(a3 + 8 * v5);
        v17 = *(double *)(a3 + 8 * v14);
        v18 = v16 + v17;
        *(v7 - 1) = -v18;
        v12 = v16 * v17;
      }
      else
      {
        v10 = *(double *)(a3 + 8 * v5);
        v11 = v10 * -2.0;
        *(v7 - 1) = v11;
        v12 = v9 * v9 + v10 * v10;
      }
      v13 = v12;
      *v7 = v13;
      v14 = (v5 + 2);
LABEL_13:
      v7 += 5;
      v5 = v14;
    }
  }
  return result;
}

double DspLib::groupRoots(DspLib *this, DSPDoubleSplitComplex a2, DspLib *a3, DSPDoubleSplitComplex a4, double result)
{
  double *imagp;
  double *realp;
  double *v8;
  double *v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  double v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  double *v54;
  unint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  char *v70;
  double *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  double *v75;
  double v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  double *v90;
  unint64_t v91;
  char *v92;
  double v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  DSPDoubleSplitComplex v104;

  if ((uint64_t)a4.imagp | (uint64_t)a2.imagp)
  {
    imagp = a4.imagp;
    realp = a4.realp;
    v8 = a2.imagp;
    v9 = a2.realp;
    v11 = DspLib::partitionRealRootToEnd(a3, a4);
    v12 = v11;
    v13 = (unint64_t)imagp - v11;
    if (imagp != (double *)v11)
    {
      v14 = 0;
      v15 = 4;
      do
      {
        v16 = (v14 + 2);
        v17 = v14;
        v18 = v15;
        v19 = v16;
        if (v13 > v16)
        {
          do
          {
            if (*((double *)a3 + v19) > *((double *)a3 + v17))
              v17 = v18 - 2;
            v19 = v18;
            v20 = v13 > v18;
            v18 += 2;
          }
          while (v20);
        }
        v21 = *((_QWORD *)a3 + v14);
        *((_QWORD *)a3 + v14) = *((_QWORD *)a3 + v17);
        *((_QWORD *)a3 + v17) = v21;
        v22 = realp[v14];
        realp[v14] = realp[v17];
        realp[v17] = v22;
        v23 = v14 | 1;
        v24 = v17 + 1;
        v25 = *((_QWORD *)a3 + v23);
        *((_QWORD *)a3 + v23) = *((_QWORD *)a3 + v24);
        *((_QWORD *)a3 + v24) = v25;
        v26 = realp[v23];
        realp[v23] = realp[v24];
        realp[v24] = v26;
        v15 += 2;
        v14 = v16;
      }
      while (v13 > v16);
    }
    v27 = (char *)a3 + 8 * v13;
    if (v11)
    {
      v28 = 0;
      do
      {
        v29 = v28++;
        if (v28 < v11)
        {
          v30 = *(double *)&v27[8 * v29];
          v31 = v28;
          v32 = v29;
          do
          {
            if (*(double *)&v27[8 * v31] > v30)
              v32 = v31;
            v30 = *(double *)&v27[8 * v29];
            *(_QWORD *)&v27[8 * v29] = *(_QWORD *)&v27[8 * v32];
            *(double *)&v27[8 * v32] = v30;
            ++v31;
          }
          while (v11 != v31);
        }
      }
      while (v28 != v11);
    }
    v104.realp = v9;
    v104.imagp = v8;
    v33 = DspLib::partitionRealRootToEnd(this, v104);
    v34 = (unint64_t)v8 - v33;
    if ((unint64_t)v8 - v33 >= v13)
      v35 = (char *)v13;
    else
      v35 = (char *)v8 - v33;
    if (v35)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        v38 = *((double *)this + v37);
        v39 = v37 + 2;
        if (v37 + 2 >= v34)
        {
          v44 = v37;
        }
        else
        {
          v40 = *((double *)a3 + v36);
          v41 = realp[v36];
          v42 = sqrt((v41 - v9[v37]) * (v41 - v9[v37]) + (v40 - v38) * (v40 - v38));
          v43 = v37 + 2;
          v44 = v37;
          do
          {
            v45 = sqrt((v41 - v9[v43]) * (v41 - v9[v43])+ (v40 - *((double *)this + v43)) * (v40 - *((double *)this + v43)));
            if (v45 < v42)
            {
              v42 = v45;
              v44 = v43;
            }
            v43 += 2;
          }
          while (v43 < v34);
          v38 = *((double *)this + v44);
        }
        *((_QWORD *)this + v44) = *((_QWORD *)this + v36);
        *((double *)this + v36) = v38;
        v46 = v9[v44];
        v9[v44] = v9[v36];
        v9[v36] = v46;
        v47 = 8 * v44 + 8;
        v48 = (16 * (((unint64_t)(v37 & 0xFFFFFFFE) >> 1) & 0x7FFFFFFF)) | 8;
        v49 = *(_QWORD *)((char *)this + v47);
        *(_QWORD *)((char *)this + v47) = *(_QWORD *)((char *)this + v48);
        *(_QWORD *)((char *)this + v48) = v49;
        result = *(double *)((char *)v9 + v47);
        *(double *)((char *)v9 + v47) = *(double *)((char *)v9 + v48);
        *(double *)((char *)v9 + v48) = result;
        v36 = v39 & 0xFFFFFFFE;
        v37 += 2;
      }
      while ((unint64_t)v35 > v36);
    }
    else
    {
      v39 = 0;
    }
    v50 = v34 - v39;
    if (v12 >= v34 - v39)
      v51 = v34 - v39;
    else
      v51 = v12;
    if (v51)
    {
      v52 = 0;
      v53 = (char *)this + 8 * v39;
      v54 = &v9[v39];
      do
      {
        v55 = v52 + 2;
        if (v52 + 2 < v50)
        {
          v56 = *(double *)&v27[8 * v52] - *(double *)&v53[8 * v52];
          result = sqrt(v54[v52] * v54[v52] + v56 * v56);
          v57 = v52 | 1;
          v58 = v52 + 2;
          v59 = v52;
          do
          {
            v60 = *(double *)&v27[8 * v52] - *(double *)&v53[8 * v58];
            v61 = sqrt(v54[v58] * v54[v58] + v60 * v60);
            if (v61 < result)
            {
              result = v61;
              v59 = v58;
            }
            v62 = *(_QWORD *)&v53[8 * v59];
            *(_QWORD *)&v53[8 * v59] = *(_QWORD *)&v53[8 * v52];
            *(_QWORD *)&v53[8 * v52] = v62;
            v63 = v54[v59];
            v54[v59] = v54[v52];
            v54[v52] = v63;
            v64 = 8 * v59 + 8;
            v65 = *(_QWORD *)&v53[v64];
            *(_QWORD *)&v53[v64] = *(_QWORD *)&v53[8 * v57];
            *(_QWORD *)&v53[8 * v57] = v65;
            v66 = *(double *)((char *)v54 + v64);
            *(double *)((char *)v54 + v64) = v54[v57];
            v54[v57] = v66;
            ++v58;
          }
          while (v50 != v58);
        }
        v52 += 2;
      }
      while (v55 < v51);
    }
    else
    {
      v55 = 0;
    }
    v67 = v55 + v39;
    v68 = v13 >= v55 + v39;
    v69 = v13 - (v55 + v39);
    if (!v68)
      v69 = 0;
    v70 = (char *)this + 8 * v34;
    v71 = &v9[v34];
    if (v33 >= v69)
      v72 = v69;
    else
      v72 = v33;
    if (v72)
    {
      v73 = 0;
      v74 = (char *)a3 + 8 * v67;
      v75 = &realp[v67];
      do
      {
        v76 = *(double *)&v70[8 * v73];
        v77 = v73 + 1;
        v78 = v76;
        v79 = v73;
        if (v73 + 1 < v33)
        {
          v80 = *(double *)&v74[8 * v73];
          v81 = v75[v73] * v75[v73];
          v82 = sqrt(v81 + (v80 - v76) * (v80 - v76));
          v83 = v73 + 1;
          v79 = v73;
          do
          {
            v84 = sqrt(v81 + (v80 - *(double *)&v70[8 * v83]) * (v80 - *(double *)&v70[8 * v83]));
            if (v84 < v82)
            {
              v82 = v84;
              v79 = v83;
            }
            ++v83;
          }
          while (v33 != v83);
          v78 = *(double *)&v70[8 * v79];
        }
        *(double *)&v70[8 * v79] = v76;
        *(double *)&v70[8 * v73] = v78;
        result = v71[v79];
        v71[v79] = v71[v73];
        v71[v73++] = result;
      }
      while (v77 != v72);
    }
    v85 = v12 - v55;
    v86 = v33 - v72;
    if (v33 - v72 < v12 - v55)
      v85 = v33 - v72;
    if (v85)
    {
      v87 = 0;
      v88 = &v27[8 * v55];
      v89 = &v70[8 * v72];
      v90 = &v71[v72];
      v91 = ~v72 + v33;
      v92 = (char *)this + 8 * (_QWORD)v8 + 8 * v72 - 8 * v33 + 8;
      do
      {
        v93 = *(double *)&v89[8 * v87];
        v94 = v87 + 1;
        v95 = v93;
        v96 = v87;
        if (v87 + 1 < v86)
        {
          v97 = 0;
          v98 = *(double *)&v88[8 * v87];
          v99 = vabdd_f64(v98, v93);
          v96 = v87;
          do
          {
            v100 = *(double *)&v92[8 * v97];
            v101 = v97 + 1;
            v102 = v97 + 1 + v87;
            v103 = vabdd_f64(v98, v100);
            if (v103 < v99)
            {
              v96 = v102;
              v99 = v103;
            }
            v97 = v101;
          }
          while (v91 != v101);
          v95 = *(double *)&v89[8 * v96];
        }
        *(double *)&v89[8 * v96] = v93;
        *(double *)&v89[8 * v87] = v95;
        result = v90[v96];
        v90[v96] = v90[v87];
        v90[v87] = result;
        --v91;
        v92 += 8;
        ++v87;
      }
      while (v94 != v85);
    }
  }
  return result;
}

uint64_t DspLib::addZerosForward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  float *v7;
  uint64_t i;
  double v9;
  double v10;
  float v11;
  double v12;
  float v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  float v18;

  if (a2)
  {
    v5 = 0;
    v6 = a5 - 1;
    v7 = (float *)(result + 8);
    for (i = 20 * a2; i; i -= 20)
    {
      if (v5 >= a5)
      {
LABEL_12:
        v14 = v5;
        goto LABEL_13;
      }
      v9 = *(double *)(a4 + 8 * v5);
      if (v6 <= v5 || v9 == 0.0)
      {
        if (v9 != 0.0)
          goto LABEL_12;
        v14 = (v5 + 1);
        if (v6 == v5 || *(double *)(a4 + 8 * v14) != 0.0)
        {
          v15 = *(double *)(a3 + 8 * v5);
          *(v7 - 2) = 1.0;
          *(float *)&v15 = v15;
          *(v7 - 1) = -*(float *)&v15;
          *v7 = 0.0;
          goto LABEL_13;
        }
        v16 = *(double *)(a3 + 8 * v5);
        v17 = *(double *)(a3 + 8 * v14);
        *(v7 - 2) = 1.0;
        v18 = v16 + v17;
        *(v7 - 1) = -v18;
        v12 = v16 * v17;
      }
      else
      {
        v10 = *(double *)(a3 + 8 * v5);
        *(v7 - 2) = 1.0;
        v11 = v10 * -2.0;
        *(v7 - 1) = v11;
        v12 = v9 * v9 + v10 * v10;
      }
      v13 = v12;
      *v7 = v13;
      v14 = (v5 + 2);
LABEL_13:
      v7 += 5;
      v5 = v14;
    }
  }
  return result;
}

void DspLib::discretizeMZTi(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int128 *v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double sinval;
  double cosval;
  __double2 v35;
  _BOOL4 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  __double2 v44;
  float v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  __int128 v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  double v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  float64_t v100;
  double v101;
  float32x2_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  double v111;
  float64_t v112;
  double v113;
  float64_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  int v121;
  float v122;
  float v123;
  __int128 v124;
  int v125;
  uint64_t v126;
  int v127;
  float v128;
  float v129;
  __int128 v130;
  int v131;
  uint64_t v132;
  int v133;
  float v134;
  float v135;
  __int128 v136;
  int v137;

  if (a8 | a5 && a2)
  {
    v12 = a1;
    v13 = 0;
    v14 = 0;
    v15 = (__int128 *)((char *)a1 + 20 * a2);
    v16 = a9 * 6.28318531;
    v111 = v16 / 6.0;
    v17 = 3.0;
    v18 = 2.0943951;
    v19 = v16 / 3.0;
    do
    {
      v20 = *((float *)v12 + 2);
      if (v20 == 0.0)
        v21 = *((float *)v12 + 1) != 0.0;
      else
        v21 = 2;
      v22 = *((float *)v12 + 3);
      v23 = *((float *)v12 + 4);
      if (v23 == 0.0)
        v24 = v22 != 0.0;
      else
        v24 = 2;
      LODWORD(v17) = -8388608;
      if ((_DWORD)v21)
      {
        v25 = v21;
        v26 = v14;
        do
        {
          v18 = *(double *)(a3 + 8 * v26);
          v27 = v18 >= 0.0 || v18 <= *(float *)&v17;
          *(float *)&v18 = v18;
          if (!v27)
            *(float *)&v17 = *(float *)&v18;
          ++v26;
          --v25;
        }
        while (v25);
      }
      if (v23 != 0.0 || v22 != 0.0)
      {
        v37 = *(float *)&v17;
        if (v24 <= 1)
          v38 = 1;
        else
          v38 = v24;
        v17 = *(double *)(a6 + 8 * v13);
        if (v17 > v37 && v17 < 0.0)
        {
          v36 = 1;
LABEL_34:
          v41 = *(double *)(a7 + 8 * v13);
          v42 = *(double *)(a6 + 8 * v13) / a9;
          if (v41 != 0.0)
          {
            v43 = v41 / a9;
            v32 = exp(v42);
            v44 = __sincos_stret(v43);
            cosval = v44.__cosval;
            sinval = v44.__sinval;
LABEL_36:
            v17 = cosval * v32;
            v18 = v17 * -2.0;
            v45 = v17 * -2.0;
            v46 = sinval * v32 * (sinval * v32) + v17 * v17;
LABEL_43:
            v28 = v46;
            goto LABEL_44;
          }
          v50 = exp(v42);
          v48 = v50;
          if (v23 == 0.0)
          {
            v108 = v50;
            v45 = -v108;
            v28 = 0.0;
            goto LABEL_44;
          }
          v49 = exp(*(double *)(a6 + 8 * (v13 + 1)) / a9);
LABEL_42:
          v17 = v48 + v49;
          *(float *)&v17 = v48 + v49;
          v45 = -*(float *)&v17;
          v46 = v48 * v49;
          goto LABEL_43;
        }
        v39 = 0;
        v40 = v38 - 1;
        while (v40 != v39)
        {
          v17 = *(double *)(a6 + 8 * (v13 + 1 + v39++));
          if (v17 > v37 && v17 < 0.0)
          {
            v36 = v39 < v24;
            goto LABEL_34;
          }
        }
      }
      v28 = 0.0;
      if ((_DWORD)v21)
      {
        v29 = *(double *)(a4 + 8 * v14);
        v30 = *(double *)(a3 + 8 * v14) / a9;
        if (v29 != 0.0)
        {
          v31 = v29 / a9;
          v32 = exp(v30);
          v35 = __sincos_stret(v31);
          cosval = v35.__cosval;
          sinval = v35.__sinval;
          v36 = 0;
          goto LABEL_36;
        }
        v47 = exp(v30);
        v48 = v47;
        if (v20 == 0.0)
        {
          v36 = 0;
          v107 = v47;
          v45 = -v107;
          goto LABEL_44;
        }
        v49 = exp(*(double *)(a3 + 8 * (v14 + 1)) / a9);
        v36 = 0;
        goto LABEL_42;
      }
      v36 = 0;
      v45 = 0.0;
LABEL_44:
      v51 = *v12;
      v137 = *((_DWORD *)v12 + 4);
      v136 = v51;
      v117 = DspLib::Biquad::frequencyResponse((float *)&v136, 1, 0.0, v17, v18);
      v114 = v52;
      v132 = 1065353216;
      v133 = 0;
      v134 = v45;
      v135 = v28;
      v115 = DspLib::Biquad::frequencyResponse((float *)&v132, 0, 0.0, v52, v53);
      v119 = v54;
      v55 = *((_DWORD *)v12 + 4);
      v130 = *v12;
      v131 = v55;
      v116 = DspLib::Biquad::frequencyResponse((float *)&v130, 1, v111, v54, v56);
      v112 = v57;
      v126 = 1065353216;
      v127 = 0;
      v128 = v45;
      v129 = v28;
      v113 = DspLib::Biquad::frequencyResponse((float *)&v126, 0, 1.04719755, v57, v58);
      v118 = v59;
      v60 = *((_DWORD *)v12 + 4);
      v124 = *v12;
      v125 = v60;
      v62 = DspLib::Biquad::frequencyResponse((float *)&v124, 1, v19, v59, v61);
      v64 = v63;
      v120 = 1065353216;
      v121 = 0;
      v122 = v45;
      v123 = v28;
      v66 = DspLib::Biquad::frequencyResponse((float *)&v120, 0, 2.0943951, v63, v65);
      v68.f64[0] = v118;
      v68.f64[1] = v119;
      if (v36)
      {
        v69.f64[0] = v112;
        v70.f64[0] = v113;
        v69.f64[1] = v114;
        v71 = vmulq_f64(v69, v68);
        v70.f64[1] = v115;
        v72 = vmulq_f64(v69, v70);
        v73.f64[0] = v116;
        v73.f64[1] = v117;
        v69.f64[0] = -v118;
        v69.f64[1] = -v119;
        __asm { FMOV            V2.2D, #1.0 }
        v79 = vdivq_f64(_Q2, vmlaq_f64(vmulq_f64(v68, v68), v70, v70));
        v80 = vmulq_f64(vmlaq_f64(v71, v70, v73), v79);
        v81 = vmulq_f64(vmlaq_f64(v72, v69, v73), v79);
        v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v81, v81), v80, v80));
        v80.f64[0] = v64 * v67 + v62 * v66;
        v83 = v64 * v66 - v62 * v67;
        v84 = 1.0 / (v67 * v67 + v66 * v66);
        v85 = v80.f64[0] * v84;
      }
      else
      {
        v86.f64[0] = v116;
        v86.f64[1] = v117;
        v87.f64[0] = v113;
        v88.f64[0] = v112;
        v88.f64[1] = v114;
        v89.f64[0] = -v118;
        v89.f64[1] = -v119;
        v87.f64[1] = v115;
        v90 = vmlaq_f64(vmulq_f64(v88, v89), v86, v87);
        v91 = vmlaq_f64(vmulq_f64(v86, v68), v88, v87);
        v92 = vaddq_f64(v90, vmulq_f64(v91, (float64x2_t)0));
        v93 = vsubq_f64(vmulq_f64(v90, (float64x2_t)0), v91);
        v94 = vmlaq_f64(vmulq_f64(v91, v91), v90, v90);
        __asm { FMOV            V2.2D, #1.0 }
        v96 = vdivq_f64(_Q2, v94);
        v97 = vmulq_f64(v92, v96);
        v98 = vmulq_f64(v93, v96);
        v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v98, v98), v97, v97));
        v97.f64[0] = v66 * v62 - v67 * v64;
        v99 = v62 * v67 + v66 * v64;
        v100 = v97.f64[0] + v99 * 0.0;
        v83 = v97.f64[0] * 0.0 - v99;
        v84 = 1.0 / (v99 * v99 + v97.f64[0] * v97.f64[0]);
        v85 = v100 * v84;
      }
      v101 = sqrt(v83 * v84 * (v83 * v84) + v85 * v85);
      v102 = vcvt_f32_f64(v82);
      v103 = v101;
      v104 = DspLib::Biquad::Design::lengthThreeFIR(v102.f32[1], v102.f32[0], v103, 1.0472);
      if (!v36)
      {
        v105 = v45 / v104;
        v106 = v28 / v104;
        v45 = *(float *)&v17 / v104;
        v28 = *(float *)&v18 / v104;
        v104 = 1.0 / v104;
        *(float *)&v17 = v105;
        *(float *)&v18 = v106;
      }
      *(float *)v12 = v104;
      *((_DWORD *)v12 + 1) = LODWORD(v17);
      *((_DWORD *)v12 + 2) = LODWORD(v18);
      *((float *)v12 + 3) = v45;
      v13 += v24;
      v14 += v21;
      *((float *)v12 + 4) = v28;
      v12 = (__int128 *)((char *)v12 + 20);
    }
    while (v12 != v15);
  }
}

float32_t DspLib::configureGain(float32x2_t *a1, unint64_t a2, float a3)
{
  unsigned int v3;
  uint64_t v4;
  float32x2_t *v5;
  float64x2_t v6;
  float32_t result;

  if (a2 >= 2)
  {
    v3 = 2;
    v4 = 1;
    do
    {
      v5 = (float32x2_t *)((char *)a1 + 20 * v4);
      a3 = a3 * COERCE_FLOAT(*v5);
      v6 = vcvtq_f64_f32(*v5);
      *v5 = vcvt_f32_f64(vmulq_n_f64(v6, 1.0 / v6.f64[0]));
      *(float *)v6.f64 = 1.0 / v6.f64[0] * v5[1].f32[0];
      v5[1].i32[0] = LODWORD(v6.f64[0]);
      v4 = v3;
    }
    while (a2 > v3++);
  }
  *a1 = vmul_n_f32(*a1, a3);
  result = a3 * a1[1].f32[0];
  a1[1].f32[0] = result;
  return result;
}

void DspLib::sPolynomialToBiquadCoefficients(double *a1, double a2, uint64_t a3, DspLib *a4, const double *a5, uint64_t *a6, int a7)
{
  DspLib *v13;
  uint64_t v14;
  __CLPK_doublereal *v15;
  double *v16;
  const double *v17;
  unint64_t v18;
  uint64_t v19;
  __CLPK_doublereal *v20;
  double *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  float v34;
  uint64_t i;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  DSPDoubleSplitComplex v41;
  DSPDoubleSplitComplex v42;
  DSPDoubleSplitComplex v43;
  DSPDoubleSplitComplex v44;

  v40 = *MEMORY[0x1E0C80C00];
  v13 = (DspLib *)MEMORY[0x1E0C80A78](a1);
  v15 = (__CLPK_doublereal *)&v38 - v14;
  v16 = &v15[(uint64_t)v42.imagp];
  v42.realp = v16;
  v18 = DspLib::roots(v13, v17, v15, v42);
  MEMORY[0x1E0C80A78](v18);
  v20 = (__CLPK_doublereal *)&v38 - v19;
  v21 = &v20[(uint64_t)v43.imagp];
  v43.realp = v21;
  v22 = DspLib::roots(a4, a5, v20, v43);
  v23 = v22;
  if (a7)
  {
    v24 = (v22 + 1) >> 1;
    if (v24 <= (v18 + 1) >> 1)
      v24 = (v18 + 1) >> 1;
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v25);
    v27 = *a6;
    v28 = a6[1];
    if (*a6 != v28)
    {
      v26 = *(double *)&DspLib::Biquad::kBypassSection;
      do
      {
        *(_DWORD *)(v27 + 16) = 0;
        *(_OWORD *)v27 = DspLib::Biquad::kBypassSection;
        v27 += 20;
      }
      while (v27 != v28);
    }
    v41.realp = v16;
    v41.imagp = (double *)v18;
    v44.realp = v21;
    v44.imagp = (double *)v23;
    DspLib::groupRoots((DspLib *)v15, v41, (DspLib *)v20, v44, v26);
    if (v23 | v18)
    {
      DspLib::addZerosForward(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
      DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    }
    DspLib::discretizeMZTi((__int128 *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18, (uint64_t)v20, (uint64_t)v21, v23, a2);
  }
  else
  {
    a6[1] = *a6;
    v29 = a6 + 1;
    v30 = (v22 + 1) >> 1;
    if (v30 <= (v18 + 1) >> 1)
      v30 = (v18 + 1) >> 1;
    if (v30 <= 1)
      v31 = 1;
    else
      v31 = v30;
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v31);
    DspLib::addZeros(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
    DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    v32 = (float *)*a6;
    if (*v29 != *a6)
    {
      v33 = 20 * ((*v29 - *a6) / 20);
      do
      {
        DspLib::Biquad::Design::bilinearTransformStoZUnwarped(v32, a2);
        v32 += 5;
        v33 -= 20;
      }
      while (v33);
    }
  }
  v34 = *a1 / *(double *)a4;
  DspLib::configureGain((float32x2_t *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), v34);
  v36 = *a6;
  for (i = a6[1]; v36 != i; v36 += 20)
  {
    v37 = *(_OWORD *)v36;
    v39 = *(_DWORD *)(v36 + 16);
    v38 = v37;
    if ((DspLib::Biquad::validate((uint64_t)&v38) & 1) == 0)
    {
      *(_DWORD *)(v36 + 16) = 0;
      *(_OWORD *)v36 = DspLib::Biquad::kBypassSection;
    }
  }
}

void std::vector<DspLib::Biquad::SDomainSection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::Biquad::SDomainSection>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t *DspLib::addZeros(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v13;
  double v14;
  double v15;
  float v16;
  float v17;
  unint64_t v18;
  int v19;
  float v20;
  double v21;
  double v22;
  float v23;

  v4 = *result;
  v5 = result[1];
  if (*result != v5)
  {
    v6 = 0;
    v7 = a4 - 1;
    __asm { FMOV            V1.2S, #1.0 }
    do
    {
      if (v6 < a4)
      {
        v13 = v7 - v6;
        v14 = *(double *)(a3 + 8 * v13);
        if (v7 > v6 && v14 != 0.0)
        {
          v15 = *(double *)(a2 + 8 * v13);
          v16 = v14 * v14 + v15 * v15;
          *(float *)v4 = v16;
          v17 = v15 * -2.0;
          goto LABEL_7;
        }
        if (v14 == 0.0)
        {
          if (v7 != v6 && *(double *)(a3 + 8 * (v13 - 1)) == 0.0)
          {
            v21 = *(double *)(a2 + 8 * v13);
            v22 = *(double *)(a2 + 8 * (v13 - 1));
            v23 = v21 * v22;
            *(float *)v4 = v23;
            *(float *)&v21 = v21 + v22;
            v17 = -*(float *)&v21;
LABEL_7:
            v18 = __PAIR64__(HIDWORD(_D1), LODWORD(v17));
            v19 = 2;
          }
          else
          {
            v20 = *(double *)(a2 + 8 * v13);
            *(float *)v4 = -v20;
            v19 = 1;
            v18 = 1065353216;
          }
          *(_QWORD *)(v4 + 4) = v18;
          v6 += v19;
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t *DspLib::addPoles(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  float v12;
  double v13;
  double v14;
  float v15;

  v4 = *result;
  v5 = result[1];
  if (*result != v5)
  {
    v6 = 0;
    v7 = a4 - 1;
    do
    {
      if (v6 >= a4)
      {
LABEL_12:
        v11 = v6;
        goto LABEL_13;
      }
      v8 = *(double *)(a3 + 8 * v6);
      if (v7 <= v6 || v8 == 0.0)
      {
        if (v8 != 0.0)
          goto LABEL_12;
        v11 = (v6 + 1);
        if (v7 == v6 || *(double *)(a3 + 8 * v11) != 0.0)
        {
          v12 = *(double *)(a2 + 8 * v6);
          *(float *)(v4 + 12) = -v12;
          *(_QWORD *)(v4 + 16) = 1065353216;
          goto LABEL_13;
        }
        v13 = *(double *)(a2 + 8 * v6);
        v14 = *(double *)(a2 + 8 * v11);
        v15 = v13 * v14;
        *(float *)&v13 = v13 + v14;
        *(float *)(v4 + 12) = v15;
        *(float *)(v4 + 16) = -*(float *)&v13;
      }
      else
      {
        v9 = *(double *)(a2 + 8 * v6);
        v10 = v8 * v8 + v9 * v9;
        *(float *)&v9 = v9 * -2.0;
        *(float *)(v4 + 12) = v10;
        *(_DWORD *)(v4 + 16) = LODWORD(v9);
      }
      *(_DWORD *)(v4 + 20) = 1065353216;
      v11 = (v6 + 2);
LABEL_13:
      v4 += 24;
      v6 = v11;
    }
    while (v4 != v5);
  }
  return result;
}

void DspLib::discretizeMZTiNew(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int128 *v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double sinval;
  double cosval;
  __double2 v35;
  _BOOL4 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  __double2 v44;
  float v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  __int128 v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  double v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  float64_t v100;
  double v101;
  float32x2_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  double v111;
  float64_t v112;
  double v113;
  float64_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  int v121;
  float v122;
  float v123;
  __int128 v124;
  int v125;
  uint64_t v126;
  int v127;
  float v128;
  float v129;
  __int128 v130;
  int v131;
  uint64_t v132;
  int v133;
  float v134;
  float v135;
  __int128 v136;
  int v137;

  if (a8 | a5 && a2)
  {
    v12 = a1;
    v13 = 0;
    v14 = 0;
    v15 = (__int128 *)((char *)a1 + 20 * a2);
    v16 = a9 * 6.28318531;
    v111 = v16 / 6.0;
    v17 = 3.0;
    v18 = 2.09439516;
    v19 = v16 / 3.0;
    do
    {
      v20 = *((float *)v12 + 2);
      if (v20 == 0.0)
        v21 = *((float *)v12 + 1) != 0.0;
      else
        v21 = 2;
      v22 = *((float *)v12 + 3);
      v23 = *((float *)v12 + 4);
      if (v23 == 0.0)
        v24 = v22 != 0.0;
      else
        v24 = 2;
      LODWORD(v17) = -8388608;
      if ((_DWORD)v21)
      {
        v25 = v21;
        v26 = v14;
        do
        {
          v18 = *(double *)(a3 + 8 * v26);
          v27 = v18 >= -9.99999996e-13 || v18 <= *(float *)&v17;
          *(float *)&v18 = v18;
          if (!v27)
            *(float *)&v17 = *(float *)&v18;
          ++v26;
          --v25;
        }
        while (v25);
      }
      if (v23 != 0.0 || v22 != 0.0)
      {
        v37 = *(float *)&v17;
        if (v24 <= 1)
          v38 = 1;
        else
          v38 = v24;
        v17 = *(double *)(a6 + 8 * v13);
        if (v17 > v37 && v17 < -9.99999996e-13)
        {
          v36 = 1;
LABEL_34:
          v41 = *(double *)(a7 + 8 * v13);
          v42 = *(double *)(a6 + 8 * v13) / a9;
          if (v41 != 0.0)
          {
            v43 = v41 / a9;
            v32 = exp(v42);
            v44 = __sincos_stret(v43);
            cosval = v44.__cosval;
            sinval = v44.__sinval;
LABEL_36:
            v17 = cosval * v32;
            v18 = v17 * -2.0;
            v45 = v17 * -2.0;
            v46 = sinval * v32 * (sinval * v32) + v17 * v17;
LABEL_43:
            v28 = v46;
            goto LABEL_44;
          }
          v50 = exp(v42);
          v48 = v50;
          if (v23 == 0.0)
          {
            v108 = v50;
            v45 = -v108;
            v28 = 0.0;
            goto LABEL_44;
          }
          v49 = exp(*(double *)(a6 + 8 * (v13 + 1)) / a9);
LABEL_42:
          v17 = v48 + v49;
          *(float *)&v17 = v48 + v49;
          v45 = -*(float *)&v17;
          v46 = v48 * v49;
          goto LABEL_43;
        }
        v39 = 0;
        v40 = v38 - 1;
        while (v40 != v39)
        {
          v17 = *(double *)(a6 + 8 * (v13 + 1 + v39++));
          if (v17 > v37 && v17 < -9.99999996e-13)
          {
            v36 = v39 < v24;
            goto LABEL_34;
          }
        }
      }
      v28 = 0.0;
      if ((_DWORD)v21)
      {
        v29 = *(double *)(a4 + 8 * v14);
        v30 = *(double *)(a3 + 8 * v14) / a9;
        if (v29 != 0.0)
        {
          v31 = v29 / a9;
          v32 = exp(v30);
          v35 = __sincos_stret(v31);
          cosval = v35.__cosval;
          sinval = v35.__sinval;
          v36 = 0;
          goto LABEL_36;
        }
        v47 = exp(v30);
        v48 = v47;
        if (v20 == 0.0)
        {
          v36 = 0;
          v107 = v47;
          v45 = -v107;
          goto LABEL_44;
        }
        v49 = exp(*(double *)(a3 + 8 * (v14 + 1)) / a9);
        v36 = 0;
        goto LABEL_42;
      }
      v36 = 0;
      v45 = 0.0;
LABEL_44:
      v51 = *v12;
      v137 = *((_DWORD *)v12 + 4);
      v136 = v51;
      v117 = DspLib::Biquad::frequencyResponse((float *)&v136, 1, 0.0, v17, v18);
      v114 = v52;
      v132 = 1065353216;
      v133 = 0;
      v134 = v45;
      v135 = v28;
      v115 = DspLib::Biquad::frequencyResponse((float *)&v132, 0, 0.0, v52, v53);
      v119 = v54;
      v55 = *((_DWORD *)v12 + 4);
      v130 = *v12;
      v131 = v55;
      v116 = DspLib::Biquad::frequencyResponse((float *)&v130, 1, v111, v54, v56);
      v112 = v57;
      v126 = 1065353216;
      v127 = 0;
      v128 = v45;
      v129 = v28;
      v113 = DspLib::Biquad::frequencyResponse((float *)&v126, 0, 1.04719755, v57, v58);
      v118 = v59;
      v60 = *((_DWORD *)v12 + 4);
      v124 = *v12;
      v125 = v60;
      v62 = DspLib::Biquad::frequencyResponse((float *)&v124, 1, v19, v59, v61);
      v64 = v63;
      v120 = 1065353216;
      v121 = 0;
      v122 = v45;
      v123 = v28;
      v66 = DspLib::Biquad::frequencyResponse((float *)&v120, 0, 2.0943951, v63, v65);
      v68.f64[0] = v118;
      v68.f64[1] = v119;
      if (v36)
      {
        v69.f64[0] = v112;
        v70.f64[0] = v113;
        v69.f64[1] = v114;
        v71 = vmulq_f64(v69, v68);
        v70.f64[1] = v115;
        v72 = vmulq_f64(v69, v70);
        v73.f64[0] = v116;
        v73.f64[1] = v117;
        v69.f64[0] = -v118;
        v69.f64[1] = -v119;
        __asm { FMOV            V2.2D, #1.0 }
        v79 = vdivq_f64(_Q2, vmlaq_f64(vmulq_f64(v68, v68), v70, v70));
        v80 = vmulq_f64(vmlaq_f64(v71, v70, v73), v79);
        v81 = vmulq_f64(vmlaq_f64(v72, v69, v73), v79);
        v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v81, v81), v80, v80));
        v80.f64[0] = v64 * v67 + v62 * v66;
        v83 = v64 * v66 - v62 * v67;
        v84 = 1.0 / (v67 * v67 + v66 * v66);
        v85 = v80.f64[0] * v84;
      }
      else
      {
        v86.f64[0] = v116;
        v86.f64[1] = v117;
        v87.f64[0] = v113;
        v88.f64[0] = v112;
        v88.f64[1] = v114;
        v89.f64[0] = -v118;
        v89.f64[1] = -v119;
        v87.f64[1] = v115;
        v90 = vmlaq_f64(vmulq_f64(v88, v89), v86, v87);
        v91 = vmlaq_f64(vmulq_f64(v86, v68), v88, v87);
        v92 = vaddq_f64(v90, vmulq_f64(v91, (float64x2_t)0));
        v93 = vsubq_f64(vmulq_f64(v90, (float64x2_t)0), v91);
        v94 = vmlaq_f64(vmulq_f64(v91, v91), v90, v90);
        __asm { FMOV            V2.2D, #1.0 }
        v96 = vdivq_f64(_Q2, v94);
        v97 = vmulq_f64(v92, v96);
        v98 = vmulq_f64(v93, v96);
        v82 = vsqrtq_f64(vmlaq_f64(vmulq_f64(v98, v98), v97, v97));
        v97.f64[0] = v66 * v62 - v67 * v64;
        v99 = v62 * v67 + v66 * v64;
        v100 = v97.f64[0] + v99 * 0.0;
        v83 = v97.f64[0] * 0.0 - v99;
        v84 = 1.0 / (v99 * v99 + v97.f64[0] * v97.f64[0]);
        v85 = v100 * v84;
      }
      v101 = sqrt(v83 * v84 * (v83 * v84) + v85 * v85);
      v102 = vcvt_f32_f64(v82);
      v103 = v101;
      v104 = DspLib::Biquad::Design::lengthThreeFIR(v102.f32[1], v102.f32[0], v103, 1.0472);
      if (!v36)
      {
        v105 = v45 / v104;
        v106 = v28 / v104;
        v45 = *(float *)&v17 / v104;
        v28 = *(float *)&v18 / v104;
        v104 = 1.0 / v104;
        *(float *)&v17 = v105;
        *(float *)&v18 = v106;
      }
      *(float *)v12 = v104;
      *((_DWORD *)v12 + 1) = LODWORD(v17);
      *((_DWORD *)v12 + 2) = LODWORD(v18);
      *((float *)v12 + 3) = v45;
      v13 += v24;
      v14 += v21;
      *((float *)v12 + 4) = v28;
      v12 = (__int128 *)((char *)v12 + 20);
    }
    while (v12 != v15);
  }
}

void DspLib::sPolynomialToBiquadCoefficients(uint64_t a1, double a2, uint64_t a3, DspLib *a4, const double *a5, uint64_t *a6, uint64_t *a7, int a8)
{
  DspLib *v13;
  uint64_t v14;
  __CLPK_doublereal *v15;
  double *v16;
  const double *v17;
  unint64_t v18;
  uint64_t v19;
  __CLPK_doublereal *v20;
  double *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  __int128 v49;
  __int128 v50;
  double *v51;
  DspLib *v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  DSPDoubleSplitComplex v62;
  DSPDoubleSplitComplex v63;
  DSPDoubleSplitComplex v64;
  DSPDoubleSplitComplex v65;

  v52 = a4;
  v61 = *MEMORY[0x1E0C80C00];
  v13 = (DspLib *)MEMORY[0x1E0C80A78](a1);
  v15 = (__CLPK_doublereal *)&(&v51)[-v14];
  v16 = &v15[(uint64_t)v63.imagp];
  v51 = (double *)v13;
  v63.realp = v16;
  v18 = DspLib::roots(v13, v17, v15, v63);
  MEMORY[0x1E0C80A78](v18);
  v20 = (__CLPK_doublereal *)&(&v51)[-v19];
  v21 = &v20[(uint64_t)v64.imagp];
  v64.realp = v21;
  v22 = DspLib::roots(v52, a5, v20, v64);
  v23 = v22;
  if (v22)
  {
    v24 = 0;
    do
    {
      v25 = v20[v24];
      if (v25 > 0.0)
        v25 = -v25;
      if (v25 == 0.0)
        v25 = -0.000000100000001;
      v20[v24++] = v25;
    }
    while (v22 > v24);
  }
  if (a8)
  {
    v26 = (v22 + 1) >> 1;
    if (v26 <= (v18 + 1) >> 1)
      v26 = (v18 + 1) >> 1;
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a7, v27);
    v29 = *a7;
    v30 = a7[1];
    if (*a7 != v30)
    {
      v28 = *(double *)&DspLib::Biquad::kBypassSection;
      do
      {
        *(_DWORD *)(v29 + 16) = 0;
        *(_OWORD *)v29 = DspLib::Biquad::kBypassSection;
        v29 += 20;
      }
      while (v29 != v30);
    }
    v62.realp = v16;
    v62.imagp = (double *)v18;
    v65.realp = v21;
    v65.imagp = (double *)v23;
    DspLib::groupRoots((DspLib *)v15, v62, (DspLib *)v20, v65, v28);
    v31 = *a7;
    if (v23 | v18)
    {
      DspLib::addZerosForward(v31, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - v31) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
      DspLib::addPoles(*a7, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - *a7) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
      if (v18 == 2 && v23 == 4)
      {
        v32 = fabs(*v16);
        v31 = *a7;
        if (vabdd_f64(v32, fabs(*v21)) > vabdd_f64(v32, fabs(v21[2])))
        {
          *(_QWORD *)(v31 + 20) = *(_QWORD *)v31;
          *(_DWORD *)(v31 + 28) = *(_DWORD *)(v31 + 8);
          *(_QWORD *)v31 = 1065353216;
          *(_DWORD *)(v31 + 8) = 0;
        }
      }
      else
      {
        v31 = *a7;
      }
    }
    DspLib::discretizeMZTiNew((__int128 *)v31, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - v31) >> 2), (uint64_t)v15, (uint64_t)v16, v18, (uint64_t)v20, (uint64_t)v21, v23, a2);
  }
  else
  {
    a7[1] = *a7;
    v33 = (v22 + 1) >> 1;
    if (v33 <= (v18 + 1) >> 1)
      v33 = (v18 + 1) >> 1;
    if (v33 <= 1)
      v34 = 1;
    else
      v34 = v33;
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a7, v34);
    a6[1] = *a6;
    std::vector<DspLib::Biquad::SDomainSection>::resize((uint64_t)a6, v34);
    DspLib::addZeros(a6, (uint64_t)v15, (uint64_t)v16, v18);
    DspLib::addPoles(a6, (uint64_t)v20, (uint64_t)v21, v23);
    v35 = *a6;
    if (a6[1] != *a6)
    {
      v36 = 0;
      v37 = 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3);
      v38 = *a7;
      v39 = 1;
      do
      {
        v40 = v35 + 24 * v36;
        v41 = *(_OWORD *)v40;
        v58 = *(_QWORD *)(v40 + 16);
        v57 = v41;
        DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)&v57, (uint64_t)&v59, a2);
        v42 = v38 + 20 * v36;
        v43 = v59;
        *(_DWORD *)(v42 + 16) = v60;
        *(_OWORD *)v42 = v43;
        v36 = v39;
      }
      while (v37 > v39++);
    }
  }
  v45 = *v51 / *(double *)v52;
  DspLib::configureGain((float32x2_t *)*a7, 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - *a7) >> 2), v45);
  v47 = *a7;
  v46 = a7[1];
  if (v47 != v46)
  {
    v48 = (float32x2_t)vdup_n_s32(0x3F7FFF58u);
    do
    {
      v49 = *(_OWORD *)v47;
      v56 = *(_DWORD *)(v47 + 16);
      v55 = v49;
      if ((DspLib::Biquad::validate((uint64_t)&v55) & 1) == 0)
      {
        *(float32x2_t *)(v47 + 12) = vmul_f32(*(float32x2_t *)(v47 + 12), v48);
        v50 = *(_OWORD *)v47;
        v54 = *(_DWORD *)(v47 + 16);
        v53 = v50;
        if ((DspLib::Biquad::validate((uint64_t)&v53) & 1) == 0)
        {
          *(_DWORD *)(v47 + 16) = 0;
          *(_OWORD *)v47 = DspLib::Biquad::kBypassSection;
        }
      }
      v47 += 20;
    }
    while (v47 != v46);
  }
}

uint64_t DspLib::balanceMatrix(DspLib *this, double *a2)
{
  uint64_t v2;
  __CLPK_doublereal *v3;
  uint64_t v5;
  char __job;
  __CLPK_integer __lda;
  __CLPK_integer __ilo[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  __lda = (int)a2;
  *(_QWORD *)__ilo = 0xFFFFFFFEFFFFFFFFLL;
  __job = 83;
  MEMORY[0x1E0C80A78](this);
  HIDWORD(v5) = 0;
  dgebal_(&__job, &__lda, v3, &__lda, __ilo, &__ilo[1], (__CLPK_doublereal *)((char *)&v5 - v2), (__CLPK_integer *)&v5 + 1);
  return *(_QWORD *)__ilo;
}

uint64_t DspLib::partitionRealRootToEnd(DspLib *this, DSPDoubleSplitComplex a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t *v11;

  v2 = (uint64_t)a2.imagp - 1;
  if ((uint64_t)a2.imagp - 1 < 0)
    return 0;
  v4 = 0;
  result = 0;
  v6 = 8 * (uint64_t)a2.imagp - 8;
  v7 = (int8x16_t *)((char *)a2.realp + v6);
  v8 = (int8x16_t *)((char *)this + v6);
  do
  {
    if (a2.realp[v2] == 0.0)
    {
      if (v2 < (unint64_t)a2.imagp - result - 1)
      {
        v9 = result + v4;
        v10 = v8;
        v11 = v7;
        do
        {
          *v10 = vextq_s8(*v10, *v10, 8uLL);
          v10 = (int8x16_t *)((char *)v10 + 8);
          *v11 = vextq_s8(*v11, *v11, 8uLL);
          v11 = (int8x16_t *)((char *)v11 + 8);
        }
        while (!__CFADD__(v9++, 1));
      }
      ++result;
    }
    v7 = (int8x16_t *)((char *)v7 - 8);
    --v4;
    v8 = (int8x16_t *)((char *)v8 - 8);
  }
  while (v2-- > 0);
  return result;
}

void std::vector<DspLib::Biquad::SDomainSection>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      do
      {
        *(_OWORD *)v7 = xmmword_1B6627DC0;
        v7[2] = 0;
        v7 += 3;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v14[24 * a2];
    v16 = v14;
    do
    {
      *(_OWORD *)v16 = xmmword_1B6627DC0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 24;
    }
    while (v16 != v15);
    v17 = &v12[24 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

DspLib::PeakPowerGuard::Algorithm *DspLib::PeakPowerGuard::Algorithm::Algorithm(DspLib::PeakPowerGuard::Algorithm *this)
{
  uint64_t v2;

  v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib14PeakPowerGuard10ParametersL8kDefaultE_, 0x2FuLL, (uint64_t)&_ZGRN6DspLib14PeakPowerGuard10ParametersL8kMinimumE_, 47, (uint64_t)&_ZGRN6DspLib14PeakPowerGuard10ParametersL8kMaximumE_, 47);
  *(_QWORD *)v2 = &off_1E69C1B58;
  *(_WORD *)(v2 + 216) = 1;
  *(_QWORD *)(v2 + 228) = 0;
  *(_QWORD *)(v2 + 220) = 0;
  *(_OWORD *)(v2 + 236) = xmmword_1B6627DF0;
  *(_QWORD *)(v2 + 252) = 1065353216;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 288) = xmmword_1B6627E00;
  *(_QWORD *)(v2 + 304) = 1065353216;
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 328) = 0;
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::AudioMeter::Algorithm *)(v2 + 336));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 656));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 976));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1296));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1616));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1936));
  DspLib::AudioMeter::Algorithm::Algorithm((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2256));
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 161) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 163) = _Q1;
  *((_OWORD *)this + 164) = _Q1;
  *((_DWORD *)this + 660) = 1065353216;
  *((_OWORD *)this + 166) = _Q1;
  *((_QWORD *)this + 334) = 0;
  *((_DWORD *)this + 670) = 0;
  *((_OWORD *)this + 168) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_OWORD *)this + 170) = _Q1;
  *((_OWORD *)this + 171) = _Q1;
  *((_DWORD *)this + 688) = 1065353216;
  *((_OWORD *)this + 173) = _Q1;
  *((_QWORD *)this + 377) = 0;
  *((_DWORD *)this + 756) = 0;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *(_OWORD *)((char *)this + 2840) = 0u;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *(_OWORD *)((char *)this + 2872) = 0u;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *(_OWORD *)((char *)this + 2904) = 0u;
  *(_OWORD *)((char *)this + 2920) = 0u;
  *(_OWORD *)((char *)this + 2936) = 0u;
  *(_OWORD *)((char *)this + 2952) = 0u;
  *(_OWORD *)((char *)this + 2968) = 0u;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *(_OWORD *)((char *)this + 2993) = 0u;
  *((_QWORD *)this + 379) = 1;
  *((_DWORD *)this + 760) = 1;
  *((_QWORD *)this + 392) = 0;
  *((_QWORD *)this + 390) = 0;
  *((_QWORD *)this + 391) = 0;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *((_DWORD *)this + 778) = 0;
  *(_OWORD *)((char *)this + 3144) = xmmword_1B6627BC0;
  *(_OWORD *)((char *)this + 3160) = xmmword_1B6627BC0;
  *((_DWORD *)this + 794) = 1;
  *((_OWORD *)this + 199) = 0u;
  *((_OWORD *)this + 200) = 0u;
  *((_OWORD *)this + 201) = 0u;
  *((_OWORD *)this + 202) = 0u;
  *((_DWORD *)this + 812) = 0;
  *(_OWORD *)((char *)this + 3864) = 0u;
  *(_OWORD *)((char *)this + 3848) = 0u;
  *(_OWORD *)((char *)this + 3832) = 0u;
  *(_OWORD *)((char *)this + 3816) = 0u;
  *(_OWORD *)((char *)this + 3800) = 0u;
  *(_OWORD *)((char *)this + 3784) = 0u;
  *((_BYTE *)this + 3672) = 0;
  *(_OWORD *)((char *)this + 3640) = 0u;
  *(_OWORD *)((char *)this + 3656) = 0u;
  *(_OWORD *)((char *)this + 3608) = 0u;
  *(_OWORD *)((char *)this + 3624) = 0u;
  *(_OWORD *)((char *)this + 3576) = 0u;
  *(_OWORD *)((char *)this + 3592) = 0u;
  *(_OWORD *)((char *)this + 3544) = 0u;
  *(_OWORD *)((char *)this + 3560) = 0u;
  *(_OWORD *)((char *)this + 3512) = 0u;
  *(_OWORD *)((char *)this + 3528) = 0u;
  *(_OWORD *)((char *)this + 3480) = 0u;
  *(_OWORD *)((char *)this + 3496) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *(_OWORD *)((char *)this + 3416) = 0u;
  *(_OWORD *)((char *)this + 3432) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3400) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *((_BYTE *)this + 3776) = 0;
  *((_OWORD *)this + 235) = 0u;
  *((_OWORD *)this + 234) = 0u;
  *((_OWORD *)this + 233) = 0u;
  *((_OWORD *)this + 232) = 0u;
  *((_OWORD *)this + 231) = 0u;
  *((_OWORD *)this + 230) = 0u;
  return this;
}

void sub_1B609902C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  DspLib::AudioMeter::Algorithm *v2;
  DspLib::AudioMeter::Algorithm *v3;
  DspLib::AudioMeter::Algorithm *v4;
  DspLib::AudioMeter::Algorithm *v5;
  DspLib::AudioMeter::Algorithm *v6;
  DspLib::AudioMeter::Algorithm *v7;
  DspLib::AudioMeter::Algorithm *v8;
  void *v10;

  v8 = v5;
  DspLib::AudioMeter::Algorithm::~Algorithm(v8);
  DspLib::AudioMeter::Algorithm::~Algorithm(v7);
  DspLib::AudioMeter::Algorithm::~Algorithm(v6);
  DspLib::AudioMeter::Algorithm::~Algorithm(v4);
  DspLib::AudioMeter::Algorithm::~Algorithm(v3);
  DspLib::AudioMeter::Algorithm::~Algorithm(v2);
  *v1 = off_1E69C46F0;
  v10 = (void *)v1[6];
  if (v10)
  {
    v1[7] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1B60990AC()
{
  JUMPOUT(0x1B609907CLL);
}

void sub_1B60990B4()
{
  JUMPOUT(0x1B6099084);
}

uint64_t DspLib::PeakPowerGuard::Algorithm::initialize(DspLib::PeakPowerGuard::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t i;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 8) = 1;
    std::vector<std::vector<float>>::resize((uint64_t *)this + 386, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 403, 1uLL);
    for (i = 2808; i != 2880; i += 24)
      std::vector<float>::resize((uint64_t)this + i, *((unsigned int *)this + 8));
    do
    {
      std::vector<float>::resize((uint64_t)this + i, *((unsigned int *)this + 8));
      i += 24;
    }
    while (i != 2976);
    DspLib::FIR::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3280), 1uLL, *((unsigned int *)this + 8));
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 456, *((unsigned int *)this + 3));
    DspLib::Biquad::ParametricFilter::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3672), 1uLL, *((double *)this + 3), 1uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3776), 1uLL, *((double *)this + 3), 1uLL);
    (*(void (**)(DspLib::PeakPowerGuard::Algorithm *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::PeakPowerGuard::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

void DspLib::PeakPowerGuard::Algorithm::uninitialize(DspLib::PeakPowerGuard::Algorithm *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  *((_BYTE *)this + 8) = 0;
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 656));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 976));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1296));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1616));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1936));
  DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2256));
  v2 = (_QWORD *)((char *)this + 2808);
  v3 = (_QWORD *)((char *)this + 2880);
  do
  {
    v2[1] = *v2;
    v2 += 3;
  }
  while (v2 != v3);
  do
  {
    v3[1] = *v3;
    v3 += 3;
  }
  while (v3 != (_QWORD *)((char *)this + 2976));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 386, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 403, 0);
  DspLib::FIR::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3280));
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 418, 0, 0);
  v4 = (uint64_t *)((char *)this + 3400);
  v5 = (uint64_t *)((char *)this + 3496);
  do
  {
    v4[1] = *v4;
    v4 += 3;
  }
  while (v4 != v5);
  DspLib::MultiMovingAverage::setLengths(v5, 0, 0);
  v6 = (uint64_t *)((char *)this + 3552);
  v7 = (uint64_t *)((char *)this + 3648);
  do
  {
    v6[1] = *v6;
    v6 += 3;
  }
  while (v6 != v7);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100](v7);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3672));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3776));
}

void DspLib::PeakPowerGuard::Algorithm::reset(DspLib::PeakPowerGuard::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  DspLib::CircularDelay *v13;
  DspLib::CircularDelay *v14;
  char *v15;

  if (*((_BYTE *)this + 8))
  {
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 656));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 976));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1296));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1616));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1936));
    DspLib::AudioMeter::Algorithm::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2256));
    DspLib::clear((float *)this + 648, 4uLL);
    DspLib::clear((float *)this + 644, 4uLL);
    DspLib::fill((float *)this + 652, 4uLL, 1.0);
    DspLib::fill((float *)this + 656, 4uLL, 1.0);
    DspLib::fill((float *)this + 664, 4uLL, 1.0);
    *((_DWORD *)this + 660) = 1065353216;
    *((_QWORD *)this + 334) = 0;
    *((_DWORD *)this + 670) = 0;
    DspLib::clear((float *)this + 672, 4uLL);
    DspLib::clear((float *)this + 676, 4uLL);
    DspLib::fill((float *)this + 680, 4uLL, 1.0);
    DspLib::fill((float *)this + 684, 4uLL, 1.0);
    DspLib::fill((float *)this + 692, 4uLL, 1.0);
    v2 = 0;
    *((_DWORD *)this + 688) = 1065353216;
    *((_DWORD *)this + 62) = 1065353216;
    *((_DWORD *)this + 76) = 1065353216;
    do
    {
      *(_DWORD *)((char *)this + v2 + 3148) = 0;
      v2 += 8;
    }
    while (v2 != 32);
    *((_DWORD *)this + 759) = 0;
    v3 = *((_QWORD *)this + 386);
    v4 = *((_QWORD *)this + 387);
    while (v3 != v4)
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)v3 != v5)
        bzero(*(void **)v3, (v5 - *(_QWORD *)v3) & 0xFFFFFFFFFFFFFFFCLL);
      v3 += 24;
    }
    *((_DWORD *)this + 778) = 0;
    v6 = *((_QWORD *)this + 403);
    v7 = *((_QWORD *)this + 404);
    while (v6 != v7)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)v6 != v8)
        bzero(*(void **)v6, (v8 - *(_QWORD *)v6) & 0xFFFFFFFFFFFFFFFCLL);
      v6 += 24;
    }
    *((_DWORD *)this + 812) = 0;
    DspLib::FIR::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3280));
    DspLib::Biquad::SetupWrapper::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3720));
    DspLib::Biquad::SetupWrapper::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3824));
    v9 = *((_QWORD *)this + 418);
    v10 = *((_QWORD *)this + 419);
    while (v9 != v10)
    {
      *(_DWORD *)(v9 + 8) = 0;
      v9 += 16;
    }
    DspLib::CircularDelay::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3368));
    v11 = *((_QWORD *)this + 437);
    v12 = *((_QWORD *)this + 438);
    while (v11 != v12)
    {
      *(_DWORD *)(v11 + 8) = 0;
      v11 += 16;
    }
    DspLib::CircularDelay::reset((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3520));
    v13 = (DspLib::CircularDelay *)*((_QWORD *)this + 456);
    v14 = (DspLib::CircularDelay *)*((_QWORD *)this + 457);
    while (v13 != v14)
    {
      DspLib::CircularDelay::reset(v13);
      v13 = (DspLib::CircularDelay *)((char *)v13 + 32);
    }
  }
  else
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 64);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::PeakPowerGuard::Algorithm::setMeteringIsEnabled(DspLib::PeakPowerGuard::Algorithm *this, int a2)
{
  char *v3;
  char *v4;
  double v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  const void *v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  char *v19;

  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 40) = a2;
    v3 = (char *)this + 336;
    if (a2)
    {
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336), *((_DWORD *)this + 3), *((double *)this + 3));
      v4 = (char *)this + 656;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 656), *((_DWORD *)this + 4), *((double *)this + 3));
      v5 = roundf(*((float *)this + 56));
      v6 = (char *)this + 976;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 976), 1, v5);
      v7 = (char *)this + 1296;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1296), 1, v5);
      v8 = (char *)this + 1616;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1616), 1, v5);
      v9 = (char *)this + 1936;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1936), 1, v5);
      v10 = (char *)this + 2256;
      DspLib::AudioMeter::Algorithm::initialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2256), 1, v5);
      v11 = (const void *)*((_QWORD *)this + 6);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v3, v11, 8, v12);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v4, v11, 8, v13);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v6, v11, 8, v14);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v7, v11, 8, v15);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v8, v11, 8, v16);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v9, v11, 8, v17);
      DspLib::AudioMeter::Algorithm::setParameters((uint64_t)v10, v11, 8, v18);
    }
    else
    {
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 336));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 656));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 976));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1296));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1616));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1936));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2256));
    }
  }
  else
  {
    v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v19, 109);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::PeakPowerGuard::Algorithm::setAdmittanceFilterCoeffSet(DspLib::PeakPowerGuard::Algorithm *this, const __CFDictionary *a2)
{
  uint64_t v3;
  char *v5;

  if (a2)
  {
    v3 = DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::setCoeffSet((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2976), a2);
    (*(void (**)(DspLib::PeakPowerGuard::Algorithm *))(*(_QWORD *)this + 144))(this);
    return v3;
  }
  else
  {
    v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v5, 146);
    ++DspLibDebug::mAssertCounter;
    return 0;
  }
}

void DspLib::PeakPowerGuard::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  void *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  uint64_t i;
  uint64_t v22;
  float v23;
  vDSP_Length v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  DspLib *v29;
  float *v30;
  float v31;
  DspLib *v32;
  uint64_t v33;
  float v34;
  __int128 v35;
  float v36;
  double v37;
  float v38;
  float v39;
  int32x2_t v40;
  uint64_t v41;
  float v42;
  float32x2_t v43;
  int32x2_t v44;
  float32x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  float32x2_t v48;
  uint32x2_t v49;
  __int128 v50;
  uint64_t j;
  uint64_t v52;
  unint64_t v53;
  DspLib::CircularDelay *v54;
  DspLib::CircularDelay *v55;
  float v56;
  DspLib::AudioMeter::Algorithm *v57;
  double v58;
  double v59[3];
  unint64_t v60[4];
  unint64_t v61[5];

  v61[4] = *MEMORY[0x1E0C80C00];
  v5 = DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    *(_BYTE *)(a1 + 216) = *(float *)(v8 + 32) >= 0.5;
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(v8 + 52);
    *(_DWORD *)(a1 + 308) = *(_DWORD *)(v8 + 128);
    v9 = a1 + 320;
    v10 = (BOOL *)(a1 + 312);
    v11 = v8 + 148;
    do
    {
      *(v10 - 52) = *(float *)(v11 + v7 - 16) >= 0.5;
      *(_DWORD *)(v9 + v7 - 48) = *(_DWORD *)(v11 + v7 - 84);
      *v10++ = *(float *)(v11 + v7) >= 0.5;
      *(_DWORD *)(v9 + v7) = *(_DWORD *)(v11 + v7 - 68);
      v7 += 4;
    }
    while (v7 != 16);
    *(_BYTE *)(a1 + 217) = *(float *)(v8 + 56) >= 0.5;
    *(_DWORD *)(a1 + 2784) = *(_DWORD *)(v8 + 168);
    *(_DWORD *)(a1 + 2788) = *(_DWORD *)(v8 + 172);
    *(_DWORD *)(a1 + 2792) = *(_DWORD *)(v8 + 176);
    *(_DWORD *)(a1 + 2796) = *(_DWORD *)(v8 + 180);
    v6.n128_u32[0] = *(_DWORD *)(v8 + 184);
    *(_DWORD *)(a1 + 2800) = v6.n128_u32[0];
    if (*(_BYTE *)(a1 + 40))
    {
      DspLib::AudioMeter::Algorithm::setParameters(a1 + 336, (const void *)v8, 8, v6);
      DspLib::AudioMeter::Algorithm::setParameters(a1 + 656, (const void *)v8, 8, v12);
    }
    if (*(_BYTE *)(a1 + 3008))
    {
      v13 = *(_QWORD *)(a1 + 2992);
      v14 = *(_QWORD *)(a1 + 2984);
      if (v13 == v14)
        v15 = -858993459 * ((unint64_t)(v13 - v14) >> 3) - 1;
      else
        v15 = 0;
      *(_DWORD *)(a1 + 3024) = v15;
      v16 = DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::filterCoefficientsForTemperature((DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *)(a1 + 2976), *(float *)(*(_QWORD *)(a1 + 48) + 44));
      DspLib::FIR::setCoefficients((_QWORD *)(a1 + 3280), *(const void **)v16, (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 2);
      v17 = *(double *)(a1 + 24);
      v18 = (float)roundf(v17 / *(float *)(*(_QWORD *)(a1 + 2984) + 40 * *(unsigned int *)(a1 + 3024) + 8));
    }
    else
    {
      v18 = 1.0;
    }
    v19 = (float)*(unsigned int *)(a1 + 220);
    v20 = v18;
    if (v18 != v19)
    {
      if (v20)
      {
        *(_DWORD *)(a1 + 3032) = v20;
        *(_DWORD *)(a1 + 3036) = 0;
      }
      for (i = 0; i != 32; i += 8)
      {
        if (v20)
        {
          v22 = a1 + i;
          *(_DWORD *)(v22 + 3144) = v20;
          *(_DWORD *)(v22 + 3148) = 0;
        }
      }
    }
    v23 = *(double *)(a1 + 24);
    LODWORD(v24) = vcvtas_u32_f32((float)(*(float *)(*(_QWORD *)(a1 + 48) + 164) / 1000.0) * v23);
    if (v18 != v19 || *(_DWORD *)(a1 + 228) != (_DWORD)v24)
    {
      if (v24 <= 1)
        v24 = 1;
      else
        v24 = v24;
      v25 = 2 * v20 + v24 - 2;
      MEMORY[0x1E0C80A78](v5);
      v27 = (char *)v59 - v26;
      DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs((float *)((char *)v59 - v26), v25, v18, v24);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 3040), v18, (float)((float)((float)*(unsigned int *)(a1 + 32) / v18) + 1.0));
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 3040), (uint64_t)v27, v25);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 3176), v18, (float)((float)((float)*(unsigned int *)(a1 + 32) / v18) + 1.0));
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 3176), (uint64_t)v27, v25);
    }
    DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 3672), 1uLL);
    DspLib::Biquad::ParametricFilter::setNumberOfStages((DspLib::Biquad::ParametricFilter *)(a1 + 3776), 1uLL);
    v28 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 48) + 36) << 32) | 8;
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 3672, v28, (double *)0x3F34FDF400000000, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 3776, v28, (double *)0x3F34FDF400000000, 0, 0x41uLL);
    *(float *)(a1 + 240) = DspLib::dB2Amp(v29, *(float *)(*(_QWORD *)(a1 + 48) + 100));
    v30 = *(float **)(a1 + 48);
    v31 = *(double *)(a1 + 24);
    *(float *)(a1 + 244) = 1.0 - expf(-1.0 / (float)((float)(v30[26] * (float)(v31 / v18)) / 1000.0));
    *(float *)(a1 + 236) = 100.0 / v30[12];
    *(float *)(a1 + 296) = DspLib::dB2Amp(v32, v30[27]);
    v33 = *(_QWORD *)(a1 + 48);
    v34 = *(float *)(v33 + 112);
    *(_QWORD *)&v35 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v59 = v35;
    *(float *)&v35 = *(double *)&v35;
    v36 = expf(-1.0 / (float)((float)(v34 * (float)(*(float *)&v35 / v18)) / 1000.0));
    v37 = v59[0];
    *(float *)(a1 + 300) = 1.0 - v36;
    v38 = (float)(*(float *)(v33 + 116) * *(float *)(v33 + 116)) / *(float *)(v33 + 120);
    *(float *)(a1 + 288) = v38;
    *(float *)(a1 + 288) = v38 * (float)(100.0 / *(float *)(v33 + 124));
    *(float *)(a1 + 292) = 100.0 / *(float *)(v33 + 96);
    v39 = v37 / v18;
    v40.i32[0] = *(_DWORD *)(v33 + 60);
    if (*(float *)v40.i32 != *(float *)(a1 + 232) || *(float *)(a1 + 224) != v39)
    {
      v41 = 0;
      *(_DWORD *)(a1 + 232) = v40.i32[0];
      *(float *)(a1 + 224) = v39;
      v42 = (float)roundf(v39);
      v43 = (float32x2_t)vdup_lane_s32(v40, 0);
      v44 = (int32x2_t)0x100000000;
      v45 = (float32x2_t)vdup_n_s32(0x447A0000u);
      v46 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
      v47.i64[0] = 0xFFFFFFFFLL;
      v47.i64[1] = 0xFFFFFFFFLL;
      do
      {
        v48 = vdiv_f32(v43, vcvt_f32_s32((int32x2_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v44)));
        v49 = vcvt_u32_f32(vdiv_f32(vmul_n_f32(v48, v42), v45));
        *(_QWORD *)&v50 = v49.u32[0];
        *((_QWORD *)&v50 + 1) = v49.u32[1];
        *(_OWORD *)&v61[v41] = v50;
        *(int8x16_t *)&v60[v41] = vandq_s8((int8x16_t)vcvtq_u64_f64(vdivq_f64(vmulq_n_f64(vcvtq_f64_f32(v48), v37), v46)), v47);
        v44 = vadd_s32(v44, (int32x2_t)0x200000002);
        v41 += 2;
      }
      while (v41 != 4);
      DspLib::MultiMovingAverage::setLengths((uint64_t *)(a1 + 3344), v61, 4uLL);
      DspLib::MultiMovingAverage::setLengths((uint64_t *)(a1 + 3496), v60, 4uLL);
    }
    for (j = 0; j != 96; j += 24)
      std::vector<float>::resize(a1 + 3552 + j, *(unsigned int *)(a1 + 32));
    v52 = 0;
    v53 = a1 + 3400;
    do
    {
      std::vector<float>::resize(v53 + v52, (unint64_t)(float)((float)((float)*(unsigned int *)(a1 + 32) / v18) + 1.0));
      v52 += 24;
    }
    while (v52 != 96);
    v54 = *(DspLib::CircularDelay **)(a1 + 3648);
    v55 = *(DspLib::CircularDelay **)(a1 + 3656);
    if (v54 != v55)
    {
      v56 = *(double *)(a1 + 24);
      LODWORD(v53) = vcvtas_u32_f32((float)(*(float *)(*(_QWORD *)(a1 + 48) + 164) / 1000.0) * v56);
      do
      {
        DspLib::CircularDelay::setLength(v54, v53);
        v54 = (DspLib::CircularDelay *)((char *)v54 + 32);
      }
      while (v54 != v55);
    }
    *(_DWORD *)(a1 + 220) = v20;
    *(_DWORD *)(a1 + 228) = v24;
    v57 = (DspLib::AudioMeter::Algorithm *)(a1 + 336);
    if (*(_BYTE *)(a1 + 40))
    {
      DspLib::AudioMeter::Algorithm::initialize(v57, *(_DWORD *)(a1 + 12), *(double *)(a1 + 24));
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 656), *(_DWORD *)(a1 + 16), *(double *)(a1 + 24));
      v58 = roundf(*(float *)(a1 + 224));
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 976), 1, v58);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 1296), 1, v58);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 1616), 1, v58);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 1936), 1, v58);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::AudioMeter::Algorithm *)(a1 + 2256), 1, v58);
    }
    else
    {
      DspLib::AudioMeter::Algorithm::uninitialize(v57);
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 656));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 976));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 1296));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 1616));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 1936));
      DspLib::AudioMeter::Algorithm::uninitialize((DspLib::AudioMeter::Algorithm *)(a1 + 2256));
    }
  }
}

void DspLib::Biquad::ParametricFilter::setNumberOfStages(DspLib::Biquad::ParametricFilter *this, vDSP_Length a2)
{
  char *v2;

  if (*(_BYTE *)this)
  {
    DspLib::Biquad::ParametricFilter::initialize(this, *((_QWORD *)this + 6), *((double *)this + 9), a2);
  }
  else
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.h");
    printf("DSP Sound assertion in %s at line %d\n", v2, 112);
    ++DspLibDebug::mAssertCounter;
  }
}

vDSP_Length DspLib::PeakPowerGuard::Algorithm::wooferInputSideChain(DspLib::PeakPowerGuard::Algorithm *this, float *a2, float *a3, vDSP_Length a4, float *a5, vDSP_Length a6)
{
  vDSP_Length v9;
  float **v11;
  uint64_t v12;
  vDSP_Length __N;
  float **v14;
  uint64_t v15;
  vDSP_Length v16;
  float *v17;
  float *v18;

  v17 = a2;
  v18 = a5;
  v11 = &v18;
  v12 = 1;
  __N = a6;
  v14 = &v17;
  v15 = 1;
  v16 = a4;
  DspLib::DownSampler::process((unsigned int *)this + 758, &v14, &v11);
  v9 = __N;
  DspLib::multiply(a5, __N, *((float *)this + 63));
  if (*((_BYTE *)this + 40))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v11, a5, v9, 1u, 0);
    DspLib::AlgorithmBase::process((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 976), (DspLibBuffer *)&v11, 0, 1u, 1);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v11);
  }
  v17 = a3;
  v18 = a5;
  v11 = &v18;
  v12 = 1;
  __N = v9;
  v14 = &v17;
  v15 = 1;
  v16 = v9;
  DspLib::FIR::process((uint64_t)this + 3280, &v11, &v14);
  if (*((_BYTE *)this + 40))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v11, a3, v9, 1u, 0);
    DspLib::AlgorithmBase::process((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1296), (DspLibBuffer *)&v11, 0, 1u, 1);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v11);
  }
  DspLib::multiply(a5, v9, a3);
  if (*((_BYTE *)this + 40))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v11, a5, v9, 1u, 0);
    DspLib::AlgorithmBase::process((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1616), (DspLibBuffer *)&v11, 0, 1u, 1);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v11);
  }
  DspLib::multiply(a5, v9, *((float *)this + 59));
  if (*((_BYTE *)this + 40))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v11, a5, v9, 1u, 0);
    DspLib::AlgorithmBase::process((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 1936), (DspLibBuffer *)&v11, 0, 1u, 1);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v11);
  }
  DspLib::add(a5, v9, *((float *)this + 64));
  if (*((_BYTE *)this + 40))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v11, a5, v9, 1u, 0);
    DspLib::AlgorithmBase::process((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2256), (DspLibBuffer *)&v11, 0, 1u, 1);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v11);
  }
  return v9;
}

void sub_1B609A0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)va);
  _Unwind_Resume(a1);
}

void DspLib::PeakPowerGuard::Algorithm::tweeterInputSideChain(DspLib::PeakPowerGuard::Algorithm *this, DspLibBuffer *a2, float *a3, float *a4)
{
  vDSP_Length cycle_count;
  unsigned int v9;
  const float *v10;

  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLib::clear(a4, cycle_count);
  if (*((_DWORD *)this + 3) >= 2u)
  {
    v9 = 1;
    do
    {
      v10 = (const float *)DspLibBuffer::channel(a2, v9);
      DspLib::square(v10, cycle_count, a3);
      DspLib::add(a4, cycle_count, a3);
      ++v9;
    }
    while (v9 < *((_DWORD *)this + 3));
  }
  if (*((_BYTE *)this + 40))
    *((float *)this + 668) = DspLib::maxMagnitude(a4, cycle_count);
  DspLib::multiply(a4, cycle_count, *((float *)this + 72));
  if (*((_BYTE *)this + 40))
    *((float *)this + 669) = DspLib::maxMagnitude(a4, cycle_count);
  DspLib::add(a4, cycle_count, a3, *((float *)this + 77));
  if (*((_BYTE *)this + 40))
    *((float *)this + 670) = DspLib::maxMagnitude(a3, cycle_count);
}

void DspLib::PeakPowerGuard::Algorithm::computeGains(DspLib::PeakPowerGuard::Algorithm *this, const float *const *a2, float *a3, unint64_t a4, const float *const *a5, float *a6, float *__C, float *a8, float *a9, vDSP_Length a10)
{
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  char *v35;
  float *__Ca;
  _QWORD v40[3];
  float *v41;
  _QWORD v42[2];
  vDSP_Length v43;
  float *v44;

  DspLib::fill(__C, a10, 1.0);
  __Ca = a6;
  DspLib::fill(a6, a10, 1.0);
  v15 = 0;
  v16 = (char *)this + 2608;
  v17 = (char *)this + 2624;
  v18 = (char *)this + 2720;
  v19 = (char *)this + 2736;
  while (1)
  {
    if (a4)
      memmove(a3, a2[v15], 4 * a4);
    if (*((_BYTE *)this + 40))
      *((float *)this + v15 + 644) = DspLib::maxMagnitude(a3, a4);
    if (a10)
      memmove(a8, a5[v15], 4 * a10);
    v42[0] = &v44;
    v42[1] = 1;
    v43 = a10;
    v44 = a9;
    v41 = a8;
    v40[0] = &v41;
    v40[1] = 1;
    v40[2] = a10;
    DspLib::DownSampler::process((unsigned int *)this + 2 * v15 + 786, v40, v42);
    if (v43 != a4)
      break;
    if (*((_BYTE *)this + 40))
      *((float *)this + v15 + 672) = DspLib::maxv(a9, a4);
    DspLib::multiply(a9, a4, a8, *((float *)this + 73));
    if (*((_BYTE *)this + 40))
      *((float *)this + v15 + 676) = DspLib::maxv(a8, a4);
    DspLib::add(a3, a4, a8);
    if (*((_BYTE *)this + 40))
      *((float *)this + v15 + 648) = DspLib::maxMagnitude(a3, a4);
    if (*((_BYTE *)this + v15 + 260))
    {
      v20 = *((float *)this + v15 + 68);
      DspLib::clip(a3, a4, v20, v20 / (float)(*((float *)this + 60) * *((float *)this + 60)));
      DspLib::svdiv(a3, a4, v20);
    }
    else
    {
      DspLib::fill(a3, a4, 1.0);
    }
    if (*((_BYTE *)this + 40))
      *((float *)this + v15 + 664) = DspLib::minv(a3, a4);
    DspLib::vmin(__Ca, a4, a3);
    if (*((_BYTE *)this + v15 + 312))
    {
      v21 = *((float *)this + v15 + 80);
      DspLib::clip(a9, a4, v21, v21 / (float)(*((float *)this + 74) * *((float *)this + 74)));
      DspLib::svdiv(a9, a4, v21);
    }
    else
    {
      DspLib::fill(a9, a4, 1.0);
    }
    if (*((_BYTE *)this + 40))
      *((float *)this + v15 + 692) = DspLib::minv(a9, a4);
    DspLib::vmin(__C, a4, a9);
    if (*((_BYTE *)this + 40) && a4)
    {
      v22 = 0;
      v23 = *((float *)this + 60);
      v24 = *((float *)this + 74);
      v25 = *(float *)&v16[4 * v15];
      v26 = *(float *)&v17[4 * v15];
      v27 = *(float *)&v18[4 * v15];
      v28 = *(float *)&v19[4 * v15];
      do
      {
        v29 = sqrtf(a3[v22]);
        if (v29 <= 1.0)
          v30 = v29;
        else
          v30 = 1.0;
        if (v29 >= v23)
          v31 = v30;
        else
          v31 = v23;
        v32 = sqrtf(a9[v22]);
        if (v32 <= 1.0)
          v33 = v32;
        else
          v33 = 1.0;
        if (v32 >= v24)
          v34 = v33;
        else
          v34 = v24;
        if (v31 >= v25)
          v31 = v25 + (float)((float)(1.0 - v25) * *((float *)this + 61));
        *(float *)&v16[4 * v15] = v31;
        if (v31 < v26)
          v26 = v31;
        *(float *)&v17[4 * v15] = v26;
        if (v34 >= v27)
          v34 = v27 + (float)((float)(1.0 - v27) * *((float *)this + 75));
        *(float *)&v18[4 * v15] = v34;
        if (v34 < v28)
          v28 = v34;
        *(float *)&v19[4 * v15] = v28;
        ++v22;
        v27 = v34;
        v25 = v31;
      }
      while (a4 > v22);
    }
    if (++v15 == 4)
    {
      DspLib::sqrt(__Ca, a4);
      DspLib::sqrt(__C, a4);
      return;
    }
  }
  v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v35, 372);
  ++DspLibDebug::mAssertCounter;
}

float *DspLib::PeakPowerGuard::Algorithm::attackRelease(float *this, float *a2, float *a3, unint64_t a4)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a4)
  {
    v4 = 0;
    do
    {
      v5 = a2[v4];
      v6 = this[62];
      if (v5 >= v6)
      {
        v7 = v6 + (float)((float)(1.0 - v6) * this[61]);
        this[62] = v7;
        a2[v4] = v7;
      }
      else
      {
        this[62] = v5;
      }
      v8 = a3[v4];
      v9 = this[76];
      if (v8 >= v9)
      {
        v10 = v9 + (float)((float)(1.0 - v9) * this[75]);
        this[76] = v10;
        a3[v4] = v10;
      }
      else
      {
        this[76] = v8;
      }
      ++v4;
    }
    while (a4 > v4);
  }
  return this;
}

void DspLib::PeakPowerGuard::Algorithm::applyGains(DspLib::PeakPowerGuard::Algorithm *this, DspLibBuffer *a2, const float *a3, const float *a4, vDSP_Length a5)
{
  int v10;
  void *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  float *v15;

  v10 = *((unsigned __int8 *)this + 217);
  v11 = (void *)DspLibBuffer::channel(a2, 0);
  if (v10)
  {
    if (a5)
      memmove(v11, a3, 4 * a5);
    if (*((_DWORD *)this + 3) >= 2u)
    {
      v12 = 1;
      do
      {
        v13 = (void *)DspLibBuffer::channel(a2, v12);
        if (a5)
          memmove(v13, a4, 4 * a5);
        ++v12;
      }
      while (v12 < *((_DWORD *)this + 3));
    }
  }
  else
  {
    DspLib::multiply((float *)v11, a5, a3);
    if (*((_DWORD *)this + 3) >= 2u)
    {
      v14 = 1;
      do
      {
        v15 = (float *)DspLibBuffer::channel(a2, v14);
        DspLib::multiply(v15, a5, a4);
        ++v14;
      }
      while (v14 < *((_DWORD *)this + 3));
    }
  }
}

void DspLib::PeakPowerGuard::Algorithm::processBlock(DspLib::PeakPowerGuard::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  float **cycle_count;
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float **v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  char *v29;
  uint64_t v30[3];
  uint64_t v31[3];
  float *v32;
  float *v33;
  float **v34;
  uint64_t v35;
  uint64_t v36;
  float **v37;
  uint64_t v38;
  uint64_t v39;
  float *v40[4];
  float *v41[6];

  v41[4] = *(float **)MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    cycle_count = (float **)vp::utility::CPU_Profiler::get_cycle_count(a2);
    DspLibBuffer::setNumFrames(a3, (unint64_t)cycle_count);
    if (*((_BYTE *)this + 40))
    {
      (*(void (**)(char *, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t))(*((_QWORD *)this + 42) + 160))((char *)this + 336, a2, a2, 1, 1);
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    }
    if (a2 != a3)
      DspLibBuffer::operator=((uint64_t)a3, a2);
    if (cycle_count && !*((_BYTE *)this + 216))
    {
      v7 = (float *)DspLibBuffer::channel(a2, 0);
      v8 = (float *)*((_QWORD *)this + 351);
      v9 = (float *)*((_QWORD *)this + 354);
      v10 = DspLib::PeakPowerGuard::Algorithm::wooferInputSideChain(this, v7, v9, (vDSP_Length)cycle_count, v8, (uint64_t)(*((_QWORD *)this + 352) - (_QWORD)v8) >> 2);
      v11 = (float *)*((_QWORD *)this + 360);
      v12 = (float *)*((_QWORD *)this + 363);
      DspLib::PeakPowerGuard::Algorithm::tweeterInputSideChain(this, a2, v11, v12);
      v13 = (float *)*((_QWORD *)this + 428);
      v41[0] = *((float **)this + 425);
      v41[1] = v13;
      v14 = (float *)*((_QWORD *)this + 434);
      v41[2] = *((float **)this + 431);
      v41[3] = v14;
      v31[0] = (uint64_t)v41;
      v31[1] = 4;
      v31[2] = v10;
      DspLib::MultiMovingAverage::process((uint64_t *)this + 418, v8, v10, v31);
      v15 = (float *)*((_QWORD *)this + 447);
      v40[0] = *((float **)this + 444);
      v40[1] = v15;
      v16 = (float *)*((_QWORD *)this + 453);
      v40[2] = *((float **)this + 450);
      v40[3] = v16;
      v30[0] = (uint64_t)v40;
      v30[1] = 4;
      v30[2] = (uint64_t)cycle_count;
      DspLib::MultiMovingAverage::process((uint64_t *)this + 437, v11, (vDSP_Length)cycle_count, v30);
      v17 = (float *)*((_QWORD *)this + 357);
      v18 = (float *)*((_QWORD *)this + 369);
      DspLib::PeakPowerGuard::Algorithm::computeGains(this, (const float *const *)v41, v9, v10, (const float *const *)v40, v17, v18, *((float **)this + 366), v12, (vDSP_Length)cycle_count);
      DspLib::PeakPowerGuard::Algorithm::attackRelease((float *)this, v17, v18, v10);
      v32 = v17;
      v33 = v9;
      v37 = &v32;
      v38 = 1;
      v39 = v10;
      v34 = &v33;
      v35 = 1;
      v36 = (uint64_t)cycle_count;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 760, &v37, &v34);
      v32 = v18;
      v33 = v12;
      v37 = &v32;
      v38 = 1;
      v39 = v10;
      v34 = &v33;
      v35 = 1;
      v36 = (uint64_t)cycle_count;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 794, &v37, &v34);
      v19 = DspLibBuffer::numChannels(a3);
      MEMORY[0x1E0C80A78](v19);
      v22 = (float **)((char *)v30 - v21);
      if (v20 >= 0x200)
        v23 = 512;
      else
        v23 = v20;
      bzero((char *)v30 - v21, v23);
      if (DspLibBuffer::numChannels(a3))
      {
        v24 = 0;
        do
        {
          v22[v24] = (float *)DspLibBuffer::channel(a3, v24);
          ++v24;
        }
        while (v24 < DspLibBuffer::numChannels(a3));
      }
      v25 = DspLibBuffer::numChannels(a3);
      v26 = vp::utility::CPU_Profiler::get_cycle_count(a3);
      v37 = v22;
      v38 = v25;
      v39 = v26;
      v34 = v22;
      v35 = v25;
      v36 = v26;
      DspLib::MultiChannelCircularDelay::process((const void **)this + 456, &v37, &v34);
      DspLib::Biquad::Filter::process((_QWORD *)this + 459, (uint64_t)v9, (uint64_t)cycle_count, (uint64_t)v9, cycle_count);
      DspLib::Biquad::Filter::process((_QWORD *)this + 472, (uint64_t)v12, (uint64_t)cycle_count, (uint64_t)v12, cycle_count);
      if (*((_BYTE *)this + 40))
      {
        v27 = DspLib::minv(v9, (vDSP_Length)cycle_count);
        if (v27 >= *((float *)this + 660))
          v27 = *((float *)this + 660);
        *((float *)this + 660) = v27;
        v28 = DspLib::minv(v12, (vDSP_Length)cycle_count);
        if (v28 >= *((float *)this + 688))
          v28 = *((float *)this + 688);
        *((float *)this + 688) = v28;
      }
      DspLib::PeakPowerGuard::Algorithm::applyGains(this, a3, v9, v12, (vDSP_Length)cycle_count);
    }
    if (*((_BYTE *)this + 40))
    {
      DspLib::CPUMeasure::stop((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 72), (unint64_t)cycle_count, *((double *)this + 3));
      (*(void (**)(char *, DspLibBuffer *, DspLibBuffer *, uint64_t, uint64_t))(*((_QWORD *)this + 82) + 160))((char *)this + 656, a3, a3, 1, 1);
    }
  }
  else
  {
    v29 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v29, 520);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::PeakPowerGuard::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  float v5;
  DspLib *v6;
  DspLib *v7;
  DspLib *v8;
  DspLib *v9;
  DspLib *v10;
  DspLib *v11;
  DspLib *v12;
  DspLib *v13;
  DspLib *v14;
  DspLib *v15;
  DspLib *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  DspLib *v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  char *v24;
  void *__p;
  _BYTE *v26;

  if (*(_BYTE *)(a1 + 8))
  {
    DspLib::clear((float *)a2, __N);
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 12);
    v5 = *(double *)(a1 + 24);
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 284) = *(_DWORD *)(a1 + 2800);
    *(_OWORD *)(a2 + 268) = *(_OWORD *)(a1 + 2784);
    if (*(_BYTE *)(a1 + 40))
    {
      DspLib::clip((float *)(a1 + 2592), 4uLL, 0.0, 200.0);
      DspLib::clip((float *)(a1 + 2688), 4uLL, 0.0, 200.0);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 336), (float *)(a2 + 12), 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 656), (float *)(a2 + 140), 0x20uLL);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 220);
      std::vector<float>::vector(&__p, 0x20uLL);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 976), (float *)__p, (v26 - (_BYTE *)__p) >> 2);
      *(float *)(a2 + 288) = DspLib::dB2Amp(v6, *((float *)__p + 16));
      *(float *)(a2 + 292) = DspLib::dB2Amp(v7, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 1296), (float *)__p, (v26 - (_BYTE *)__p) >> 2);
      *(float *)(a2 + 296) = DspLib::dB2Amp(v8, *((float *)__p + 16));
      *(float *)(a2 + 300) = DspLib::dB2Amp(v9, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 1616), (float *)__p, (v26 - (_BYTE *)__p) >> 2);
      *(float *)(a2 + 304) = DspLib::dB2Amp(v10, *((float *)__p + 16));
      *(float *)(a2 + 308) = DspLib::dB2Amp(v11, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 1936), (float *)__p, (v26 - (_BYTE *)__p) >> 2);
      *(float *)(a2 + 312) = DspLib::dB2Amp(v12, *((float *)__p + 16));
      *(float *)(a2 + 316) = DspLib::dB2Amp(v13, *(float *)__p);
      DspLib::AudioMeter::Algorithm::status((_QWORD *)(a1 + 2256), (float *)__p, (v26 - (_BYTE *)__p) >> 2);
      *(float *)(a2 + 320) = DspLib::dB2Amp(v14, *((float *)__p + 16));
      *(float *)(a2 + 324) = DspLib::dB2Amp(v15, *(float *)__p);
      *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 2576);
      *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 2592);
      DspLib::clear((float *)(a1 + 2592), 4uLL);
      v17 = 0;
      v18 = a1 + 2624;
      v19 = (float *)(a2 + 372);
      do
      {
        *v19-- = DspLib::amp2dBSafe(v16, *(float *)(v18 + v17), 0.000001);
        *(_DWORD *)(v18 + v17) = 1065353216;
        v17 += 4;
      }
      while (v17 != 16);
      *(float *)(a2 + 376) = DspLib::amp2dBSafe(v16, *(float *)(a1 + 2640), 0.000001);
      *(_DWORD *)(a1 + 2640) = 1065353216;
      *(_QWORD *)(a2 + 380) = *(_QWORD *)(a1 + 2672);
      *(_DWORD *)(a2 + 388) = *(_DWORD *)(a1 + 2680);
      *(_OWORD *)(a2 + 392) = *(_OWORD *)(a1 + 2688);
      DspLib::clear((float *)(a1 + 2688), 4uLL);
      v21 = 0;
      *(_OWORD *)(a2 + 408) = *(_OWORD *)(a1 + 2704);
      v22 = a1 + 2736;
      v23 = (float *)(a2 + 436);
      do
      {
        *v23-- = DspLib::amp2dBSafe(v20, *(float *)(v22 + v21), 0.000001);
        *(_DWORD *)(v22 + v21) = 1065353216;
        v21 += 4;
      }
      while (v21 != 16);
      *(float *)(a2 + 440) = DspLib::amp2dBSafe(v20, *(float *)(a1 + 2752), 0.000001);
      *(_DWORD *)(a1 + 2752) = 1065353216;
      if (__p)
      {
        v26 = __p;
        operator delete(__p);
      }
    }
    else
    {
      DspLib::fill((float *)(a2 + 12), 0x10uLL, -100.0);
      DspLib::fill((float *)(a2 + 76), 0x10uLL, -100.0);
      DspLib::fill((float *)(a2 + 140), 0x10uLL, -100.0);
      DspLib::fill((float *)(a2 + 204), 0x10uLL, -100.0);
    }
  }
  else
  {
    v24 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuard.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v24, 574);
    ++DspLibDebug::mAssertCounter;
  }
}

void sub_1B609AF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DspLib::PeakPowerGuard::Algorithm::~Algorithm(DspLib::PeakPowerGuard::Algorithm *this)
{
  DspLib::PeakPowerGuard::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  uint64_t j;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t k;
  void *v16;
  uint64_t m;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void **v41;

  *(_QWORD *)this = &off_1E69C1B58;
  v41 = (void **)((char *)this + 3856);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3824));
  v2 = (void *)*((_QWORD *)this + 475);
  if (v2)
  {
    *((_QWORD *)this + 476) = v2;
    operator delete(v2);
  }
  v41 = (void **)((char *)this + 3752);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 3720));
  v3 = (void *)*((_QWORD *)this + 462);
  if (v3)
  {
    *((_QWORD *)this + 463) = v3;
    operator delete(v3);
  }
  v41 = (void **)((char *)this + 3648);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v41);
  for (i = 0; i != -96; i -= 24)
  {
    v5 = *(void **)((char *)this + i + 3624);
    if (v5)
    {
      *(_QWORD *)((char *)this + i + 3632) = v5;
      operator delete(v5);
    }
  }
  v6 = (void *)*((_QWORD *)this + 440);
  if (v6)
  {
    *((_QWORD *)this + 441) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 437);
  if (v7)
  {
    *((_QWORD *)this + 438) = v7;
    operator delete(v7);
  }
  for (j = 0; j != -96; j -= 24)
  {
    v9 = *(void **)((char *)this + j + 3472);
    if (v9)
    {
      *(_QWORD *)((char *)this + j + 3480) = v9;
      operator delete(v9);
    }
  }
  v10 = (void *)*((_QWORD *)this + 421);
  if (v10)
  {
    *((_QWORD *)this + 422) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 418);
  if (v11)
  {
    *((_QWORD *)this + 419) = v11;
    operator delete(v11);
  }
  v41 = (void **)((char *)this + 3320);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v12 = (void *)*((_QWORD *)this + 411);
  if (v12)
  {
    *((_QWORD *)this + 412) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 407);
  if (v13)
  {
    *((_QWORD *)this + 408) = v13;
    operator delete(v13);
  }
  v41 = (void **)((char *)this + 3224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v41 = (void **)((char *)this + 3192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v14 = (void *)*((_QWORD *)this + 390);
  if (v14)
  {
    *((_QWORD *)this + 391) = v14;
    operator delete(v14);
  }
  v41 = (void **)((char *)this + 3088);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v41 = (void **)((char *)this + 3056);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::~AdmittanceFilterCoeffSet((DspLib::PeakPowerGuard::Algorithm *)((char *)this + 2976));
  for (k = 0; k != -96; k -= 24)
  {
    v16 = *(void **)((char *)this + k + 2952);
    if (v16)
    {
      *(_QWORD *)((char *)this + k + 2960) = v16;
      operator delete(v16);
    }
  }
  for (m = 0; m != -72; m -= 24)
  {
    v18 = *(void **)((char *)this + m + 2856);
    if (v18)
    {
      *(_QWORD *)((char *)this + m + 2864) = v18;
      operator delete(v18);
    }
  }
  *((_QWORD *)this + 282) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 2544);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v19 = (void *)*((_QWORD *)this + 315);
  if (v19)
  {
    *((_QWORD *)this + 316) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 312);
  if (v20)
  {
    *((_QWORD *)this + 313) = v20;
    operator delete(v20);
  }
  v41 = (void **)((char *)this + 2472);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 282) = off_1E69C46F0;
  v21 = (void *)*((_QWORD *)this + 288);
  if (v21)
  {
    *((_QWORD *)this + 289) = v21;
    operator delete(v21);
  }
  *((_QWORD *)this + 242) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 2224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v22 = (void *)*((_QWORD *)this + 275);
  if (v22)
  {
    *((_QWORD *)this + 276) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 272);
  if (v23)
  {
    *((_QWORD *)this + 273) = v23;
    operator delete(v23);
  }
  v41 = (void **)((char *)this + 2152);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 242) = off_1E69C46F0;
  v24 = (void *)*((_QWORD *)this + 248);
  if (v24)
  {
    *((_QWORD *)this + 249) = v24;
    operator delete(v24);
  }
  *((_QWORD *)this + 202) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 1904);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v25 = (void *)*((_QWORD *)this + 235);
  if (v25)
  {
    *((_QWORD *)this + 236) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 232);
  if (v26)
  {
    *((_QWORD *)this + 233) = v26;
    operator delete(v26);
  }
  v41 = (void **)((char *)this + 1832);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 202) = off_1E69C46F0;
  v27 = (void *)*((_QWORD *)this + 208);
  if (v27)
  {
    *((_QWORD *)this + 209) = v27;
    operator delete(v27);
  }
  *((_QWORD *)this + 162) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 1584);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v28 = (void *)*((_QWORD *)this + 195);
  if (v28)
  {
    *((_QWORD *)this + 196) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 192);
  if (v29)
  {
    *((_QWORD *)this + 193) = v29;
    operator delete(v29);
  }
  v41 = (void **)((char *)this + 1512);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 162) = off_1E69C46F0;
  v30 = (void *)*((_QWORD *)this + 168);
  if (v30)
  {
    *((_QWORD *)this + 169) = v30;
    operator delete(v30);
  }
  *((_QWORD *)this + 122) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 1264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v31 = (void *)*((_QWORD *)this + 155);
  if (v31)
  {
    *((_QWORD *)this + 156) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 152);
  if (v32)
  {
    *((_QWORD *)this + 153) = v32;
    operator delete(v32);
  }
  v41 = (void **)((char *)this + 1192);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 122) = off_1E69C46F0;
  v33 = (void *)*((_QWORD *)this + 128);
  if (v33)
  {
    *((_QWORD *)this + 129) = v33;
    operator delete(v33);
  }
  *((_QWORD *)this + 82) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 944);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v34 = (void *)*((_QWORD *)this + 115);
  if (v34)
  {
    *((_QWORD *)this + 116) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 112);
  if (v35)
  {
    *((_QWORD *)this + 113) = v35;
    operator delete(v35);
  }
  v41 = (void **)((char *)this + 872);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 82) = off_1E69C46F0;
  v36 = (void *)*((_QWORD *)this + 88);
  if (v36)
  {
    *((_QWORD *)this + 89) = v36;
    operator delete(v36);
  }
  *((_QWORD *)this + 42) = off_1E69BF9F0;
  v41 = (void **)((char *)this + 624);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v41);
  v37 = (void *)*((_QWORD *)this + 75);
  if (v37)
  {
    *((_QWORD *)this + 76) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 72);
  if (v38)
  {
    *((_QWORD *)this + 73) = v38;
    operator delete(v38);
  }
  v41 = (void **)((char *)this + 552);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v41);
  *((_QWORD *)this + 42) = off_1E69C46F0;
  v39 = (void *)*((_QWORD *)this + 48);
  if (v39)
  {
    *((_QWORD *)this + 49) = v39;
    operator delete(v39);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v40 = (void *)*((_QWORD *)this + 6);
  if (v40)
  {
    *((_QWORD *)this + 7) = v40;
    operator delete(v40);
  }
}

double DspLib::PeakPowerGuard::Algorithm::latencySamples(DspLib::PeakPowerGuard::Algorithm *this)
{
  float v1;

  v1 = *((double *)this + 3);
  return roundf((float)(*(float *)(*((_QWORD *)this + 6) + 164) / 1000.0) * v1);
}

uint64_t DspLib::PeakPowerGuard::Algorithm::numStatus(DspLib::PeakPowerGuard::Algorithm *this)
{
  return 111;
}

void DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::~AdmittanceFilterCoeffSet(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this)
{
  const void *v2;
  void **v3;

  DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(this);
  v2 = (const void *)*((_QWORD *)this + 5);
  if (v2)
    CFRelease(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        v7 = (void **)(v4 - 24);
        std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::initialize(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, double a2)
{
  *((double *)this + 20) = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17000), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16840), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16920), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17080), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17160), 0x400uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17240), 0x400uLL);
  *((_BYTE *)this + 152) = 1;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset((float **)this);
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset(float **this)
{
  int v2;

  DspLib::FFT::BufferedForwardSTFT::reset(this + 2083);
  DspLib::FFT::BufferedForwardSTFT::reset(this + 2094);
  DspLib::ComplexVector::operator=(this + 2125, 0.0);
  DspLib::ComplexVector::operator=(this + 2135, 0.0);
  DspLib::ComplexVector::operator=(this + 2145, 0.0);
  DspLib::ComplexVector::operator=(this + 2155, 0.0);
  DspLib::ComplexVector::operator=(this + 2105, 0.0);
  DspLib::ComplexVector::operator=(this + 2115, 0.0);
  *((_DWORD *)this + 52) = 1092616192;
  *((_BYTE *)this + 276) = 0;
  *((_DWORD *)this + 50) = *((_DWORD *)this + 49);
  v2 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 60) = v2;
  *((_DWORD *)this + 61) = v2;
  DspLib::AveragingDecimator::reset((DspLib::AveragingDecimator *)(this + 1));
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::uninitialize(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16840), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16920), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17000), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17080), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17160), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17240), 0);
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setParameters(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  int v7;
  float v8;
  float v9;
  DspLib::PilotToneV2 *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;

  v7 = 7 * a3;
  v8 = DspLib::AlgorithmParametersInstance::operator[](a2, (7 * a3 + 4));
  v9 = *(double *)(a1 + 160);
  *(_QWORD *)(a1 + 168) = DspLib::PilotToneV2::pilotToneBestFftBinFit(v10, v8, v9);
  v11 = DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v7 + 2);
  v12 = DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v7 + 3);
  v13 = *(double *)(a1 + 160) * 0.0009765625;
  *(float *)(a1 + 272) = expf(-1.0 / (float)((float)((float)(*(float *)v12 * 1000.0) * v13) / 1000.0));
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(v11 + 4);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)v11;
  if (*(float *)(v11 + 16) < 0.5)
    v14 = 1.0;
  else
    v14 = -1.0;
  *(float *)(a1 + 236) = v14;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setFftWindows((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)a1, v14);
  v15 = *(_DWORD *)(v12 + 16);
  *(_DWORD *)(a1 + 176) = v15;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(v12 + 20);
  v16 = *(_DWORD *)(v12 + 12);
  *(_DWORD *)(a1 + 200) = v16;
  *(_DWORD *)(a1 + 196) = v16;
  v17 = *(_DWORD *)(v12 + 8);
  *(_BYTE *)(a1 + 190) = *(float *)(v12 + 4) >= 0.5;
  *(_DWORD *)(a1 + 220) = v17;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(v12 + 36);
  *(_DWORD *)(a1 + 240) = v15;
  *(_DWORD *)(a1 + 244) = v15;
  v18 = *(double *)(a1 + 160) * 0.0009765625;
  *(float *)(a1 + 248) = expf(-1.0 / (float)((float)((float)(*(float *)v12 * 1000.0) * v18) / 1000.0));
  *(float *)(a1 + 252) = expf(-1.0 / (float)((float)((float)(*(float *)(v12 + 40) * 1000.0) * v18) / 1000.0));
  *(float *)(a1 + 256) = expf(-1.0 / (float)((float)((float)((float)(*(float *)(v12 + 40) * 1000.0) * 6.0) * v18)
                                           / 1000.0));
  v19 = *(float *)(v12 + 52) * 0.01;
  v20 = 0.0;
  if (v19 > 0.0)
    v20 = expf(-1.0 / (float)((float)((float)(v19 * (float)(*(float *)(v12 + 40) * 1000.0)) * v18) / 1000.0));
  *(float *)(a1 + 184) = v20;
  *(float *)(a1 + 260) = 1.0 / *(float *)(v12 + 44);
  *(_BYTE *)(a1 + 268) = *(float *)(v12 + 48) != 0.0;
  v21 = DspLib::AlgorithmParametersInstance::operator[](a2, 0x100000000);
  if (v21 >= 0.5 && !*(_BYTE *)(a1 + 189))
  {
    DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::reset((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a4);
    DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset((float **)a1);
  }
  *(_BYTE *)(a1 + 189) = v21 >= 0.5;
  v22 = 0;
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, (float *)(a1 + 192), (float *)(a1 + 200), &v22, a4);
  if (!v22)
    *(_DWORD *)(a1 + 208) = 1092616192;
  *(_BYTE *)(a1 + 212) = 1;
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setFftWindows(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, float a2)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v3 = (float *)((char *)this + 280);
  v4 = *((float *)this + 57) * a2;
  DspLib::makePeriodicHannWindow((_DWORD *)this + 70, 0x800uLL);
  v5 = DspLib::norm(v3, 0x800uLL);
  DspLib::multiply(v3, 0x800uLL, v4 / v5);
  v6 = *((float *)this + 58);
  DspLib::makePeriodicHannWindow((_DWORD *)this + 2118, 0x800uLL);
  v7 = v6 / DspLib::norm((const float *)this + 2118, 0x800uLL);
  DspLib::multiply((float *)this + 2118, 0x800uLL, v7);
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::reset(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, unsigned int a2)
{
  char *v2;
  int v3;
  unint64_t result;
  int v5;
  char v6;

  v2 = (char *)this + 264 * a2;
  v2[12] = 0;
  v3 = *((_DWORD *)v2 + 1);
  *(_DWORD *)v2 = v3;
  *((_DWORD *)v2 + 2) = v3;
  *((_DWORD *)v2 + 52) = 0;
  *((_WORD *)v2 + 106) = 0;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(v2 + 156);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(v2 + 172);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(v2 + 188);
  *((_DWORD *)v2 + 30) = *((_DWORD *)v2 + 51);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 124);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(v2 + 140);
  v2[244] = 0;
  result = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(*((float *)v2 + 58), *((float *)v2 + 59), *((float *)v2 + 60));
  *((_QWORD *)v2 + 27) = result;
  *((_DWORD *)v2 + 56) = v5;
  v2[228] = v6;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::updateRdcSmoothingCoefficient(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, float result)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;

  if (*((_BYTE *)this + 268))
  {
    v2 = *((float *)this + 62);
    v3 = *((float *)this + 63);
    v4 = result + (float)(v2 * (float)(*((float *)this + 60) - result));
    v5 = result + (float)(v3 * (float)(*((float *)this + 61) - result));
    *((float *)this + 60) = v4;
    *((float *)this + 61) = v5;
    v6 = *((float *)this + 65) * (float)((float)(vabds_f32(v4, v5) / *((float *)this + 50)) * 100.0);
    if (v6 <= 1.0)
      v7 = v6;
    else
      v7 = 1.0;
    v8 = v6 < 0.0;
    v9 = 0.0;
    if (!v8)
      v9 = v7;
    result = (float)(v3 * (float)(1.0 - (float)(v9 * v9))) + (float)((float)(v9 * v9) * v2);
    *((float *)this + 68) = result;
  }
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::rdcShouldUpdate(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  int v2;
  const DSPComplex *v3;
  int v4;
  const DSPComplex *v5;
  float v6;
  _DWORD v8[2];
  _DWORD v9[2];

  v9[0] = DspLib::ComplexSpan::operator[]((_QWORD *)this + 2155, *((_QWORD *)this + 21));
  v9[1] = v2;
  if (DspLib::abs((DspLib *)v9, v3) > (float)(*(float *)this * *((float *)this + 58))
    && (v8[0] = DspLib::ComplexSpan::operator[]((_QWORD *)this + 2145, *((_QWORD *)this + 21)),
        v8[1] = v4,
        DspLib::abs((DspLib *)v8, v5) > (float)(*(float *)this * *((float *)this + 57)))
    && *((float *)this + 54) > *((float *)this + 55)
    && *((_BYTE *)this + 190)
    && (v6 = *((float *)this + 51), v6 >= *((float *)this + 44)))
  {
    return v6 <= *((float *)this + 45);
  }
  else
  {
    return 0;
  }
}

uint64_t DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::process(uint64_t this, float *a2, float *a3, uint64_t a4, unsigned int a5, float a6)
{
  uint64_t v6;
  size_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  int v22;
  int v23;
  float v24;
  int v25;
  const DSPComplex *v26;
  float v27;
  const DSPComplex *v28;
  BOOL ShouldUpdate;
  DspLib::ComplexSpan *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v39;
  float v40;
  float v41;
  DspLib::ComplexSpan *v42;
  float v43;
  DspLib::ComplexSpan *v44;
  float v45;
  int v46;
  const DSPComplex *v47;
  float v48;
  int v49;
  const DSPComplex *v50;
  float v51;
  float v52;
  char *v53;
  int v54;
  uint64_t v55;
  float *v56;
  float *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  float *v61;
  unint64_t v62;
  unsigned int v63;
  float v64;
  int v65;
  BOOL v66[4];
  int v67;
  uint64_t v68;

  v63 = a5;
  v68 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 152))
  {
    v53 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceMeasurement.cpp");
    v54 = 190;
LABEL_31:
    this = printf("DSP Sound assertion in %s at line %d\n", v53, v54);
    ++DspLibDebug::mAssertCounter;
    return this;
  }
  v6 = this;
  if (!*(_BYTE *)(this + 212))
  {
    v53 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceMeasurement.cpp");
    v54 = 191;
    goto LABEL_31;
  }
  if (a4)
  {
    v55 = (uint64_t)&v55;
    v9 = 4 * a4;
    v10 = MEMORY[0x1E0C80A78](this);
    v11 = (float *)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1E0C80A78](v10);
    v13 = (char *)&v55 - v12;
    v62 = v14;
    memcpy(v11, v15, v9);
    v59 = v13;
    memcpy(v13, a3, v9);
    v16 = v62;
    v17 = 0;
    v18 = *v11;
    v60 = v6 + 16664;
    v61 = v11;
    *v11 = v18 + 0.000001;
    v58 = v6 + 16752;
    v56 = (float *)(v6 + 200);
    v57 = (float *)(v6 + 192);
    while (1)
    {
      v19 = v16 - v17;
      DspLib::FFT::BufferedForwardSTFT::addInput(v60, &v61[v17], v16 - v17, (DSPSplitComplex *)(v6 + 17160));
      this = DspLib::FFT::BufferedForwardSTFT::addInput(v58, &v59[4 * v17], v19, (DSPSplitComplex *)(v6 + 17240));
      v20 = this;
      if (*(_QWORD *)(v6 + 16824))
        break;
LABEL_27:
      v17 += v20;
      v16 = v62;
      if (v17 >= v62)
        return this;
    }
    v66[0] = 0;
    DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, v57, v56, v66, v63);
    if (!v66[0])
      *(_DWORD *)(v6 + 208) = 1092616192;
    v21 = DspLib::ComplexSpan::operator[]((_QWORD *)(v6 + 17240), *(_QWORD *)(v6 + 168));
    v23 = v22;
    v24 = DspLib::ComplexSpan::operator[]((_QWORD *)(v6 + 17160), *(_QWORD *)(v6 + 168));
    *(float *)v66 = v21;
    v67 = v23;
    v64 = v24;
    v65 = v25;
    v27 = DspLib::abs((DspLib *)v66, v26);
    *(float *)(v6 + 204) = (float)((float)(v27 + 0.000000001) / (float)(DspLib::abs((DspLib *)&v64, v28) + 0.000000001))
                         - a6;
    ShouldUpdate = DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::rdcShouldUpdate((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)v6);
    *(_BYTE *)(v6 + 188) = ShouldUpdate;
    if (ShouldUpdate)
    {
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::updateRdcSmoothingCoefficient((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)v6, *(float *)(v6 + 204));
      if (*(_BYTE *)(v6 + 188))
      {
        v31 = *(float *)(v6 + 204);
        v32 = v31 + (float)(*(float *)(v6 + 272) * (float)(*(float *)(v6 + 200) - v31));
        *(float *)(v6 + 200) = v32;
        v33 = *(float *)(v6 + 176);
        v34 = *(float *)(v6 + 180);
        v35 = 10.0;
        if (v31 >= v33 && v31 <= v34)
          v35 = (float)(vabds_f32(v31, v32) / v31) * 100.0;
        v36 = *(float *)(v6 + 224);
        if (v32 >= v33 && v32 <= v34 && v35 < v36)
        {
          DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::takeRdcProcessTimeStamp((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, (unint64_t *)v63);
          v31 = *(float *)(v6 + 204);
          *(float *)(v6 + 192) = v31 + (float)(*(float *)(v6 + 272) * (float)(*(float *)(v6 + 192) - v31));
          v36 = *(float *)(v6 + 224);
        }
        v39 = (float)(vabds_f32(*(float *)(v6 + 192), v31) / *(float *)(v6 + 192)) * 100.0;
        *(float *)(v6 + 208) = v39;
        if (v39 > v36)
          *(_DWORD *)(v6 + 272) = *(_DWORD *)(v6 + 256);
        goto LABEL_26;
      }
    }
    else
    {
      v40 = *(float *)(v6 + 196) + (float)(*(float *)(v6 + 252) * (float)(*(float *)(v6 + 200) - *(float *)(v6 + 196)));
      *(float *)(v6 + 200) = v40;
      *(float *)(v6 + 240) = v40;
      *(float *)(v6 + 244) = v40;
    }
    v39 = *(float *)(v6 + 208);
    v36 = *(float *)(v6 + 224);
LABEL_26:
    *(_BYTE *)(v6 + 276) = v39 < v36;
    DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v6 + 17240), (DSPSplitComplex *)(v6 + 17160), (DSPSplitComplex *)(v6 + 17080), v30);
    v41 = *(float *)(v6 + 272);
    DspLib::operator*=(v6 + 17000, v41);
    DspLib::operator*=(v6 + 17080, 1.0 - v41);
    DspLib::operator+=((DSPSplitComplex *)(v6 + 17000), (DSPSplitComplex *)(v6 + 17080));
    DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v6 + 17160), (DSPSplitComplex *)(v6 + 17160), (DSPSplitComplex *)(v6 + 17080), v42);
    v43 = *(float *)(v6 + 272);
    DspLib::operator*=(v6 + 16840, v43);
    DspLib::operator*=(v6 + 17080, 1.0 - v43);
    DspLib::operator+=((DSPSplitComplex *)(v6 + 16840), (DSPSplitComplex *)(v6 + 17080));
    DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v6 + 17240), (DSPSplitComplex *)(v6 + 17240), (DSPSplitComplex *)(v6 + 17080), v44);
    v45 = *(float *)(v6 + 272);
    DspLib::operator*=(v6 + 16920, v45);
    DspLib::operator*=(v6 + 17080, 1.0 - v45);
    DspLib::operator+=((DSPSplitComplex *)(v6 + 16920), (DSPSplitComplex *)(v6 + 17080));
    *(_DWORD *)v66 = DspLib::ComplexSpan::operator[]((_QWORD *)(v6 + 17000), *(_QWORD *)(v6 + 168));
    v67 = v46;
    v48 = DspLib::abs((DspLib *)v66, v47);
    v64 = DspLib::ComplexSpan::operator[]((_QWORD *)(v6 + 17000), *(_QWORD *)(v6 + 168));
    v65 = v49;
    v51 = DspLib::abs((DspLib *)&v64, v50);
    v52 = DspLib::ComplexSpan::operator[]((_QWORD *)(v6 + 16920), *(_QWORD *)(v6 + 168));
    *(float *)(v6 + 216) = (float)(v48 * v51)
                         / (float)(v52 * DspLib::ComplexSpan::operator[]((_QWORD *)(v6 + 16840), *(_QWORD *)(v6 + 168)));
    this = DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeRdc((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, *(float *)(v6 + 192), *(float *)(v6 + 200), v63);
    goto LABEL_27;
  }
  return this;
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::status(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  float v4;
  double v5;
  float v6;
  float v7;
  float v8;
  char *v9;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(_DWORD *)(a1 + 192);
    v3 = *(_QWORD *)(a1 + 168);
    v4 = 0.0;
    if (*(_BYTE *)(a1 + 276))
      v4 = 1.0;
    *(float *)(a2 + 72) = (float)v3;
    *(_DWORD *)a2 = v2;
    *(float *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 208);
    v5 = *(double *)(a1 + 160);
    v6 = v5 * 0.00048828125;
    *(float *)(a2 + 8) = (float)v3 * v6;
    v7 = v5;
    *(float *)(a2 + 304) = v7;
    v8 = v5 * 0.0009765625;
    *(float *)(a2 + 20808) = -1.0 / (float)(logf(*(float *)(a1 + 272)) * v8);
  }
  else
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceMeasurement.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 275);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::coherence(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, DspLibBuffer *a2)
{
  char *v3;
  char *v4;
  const DSPSplitComplex *v5;
  float *v6;
  vDSP_Length cycle_count;

  v3 = (char *)this + 16920;
  v4 = (char *)this + 16840;
  v5 = (const DSPSplitComplex *)((char *)this + 17000);
  v6 = (float *)DspLibBuffer::channel(a2, 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLib::FFT::coherence((uint64_t)v3, (uint64_t)v4, v5, v6, cycle_count);
}

float DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::impedance(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this, DSPSplitComplex *__C)
{
  DspLib::ComplexSpan *v4;

  DspLib::ComplexSpan::operator=(__C, (DSPSplitComplex *)((char *)this + 17000));
  return DspLib::FFT::divide(__C, (DSPSplitComplex *)((char *)this + 16840), v4);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::voltagePowerSpectrum(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  return (uint64_t)this + 16920;
}

uint64_t DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::IntegratedLoudnessProcessor(uint64_t a1, int a2)
{
  DspLib *v4;
  uint64_t i;

  bzero((void *)a1, 0xFA4uLL);
  bzero((void *)(a1 + 4032), 0xFA4uLL);
  *(_OWORD *)(a1 + 8040) = 0u;
  *(_QWORD *)(a1 + 8056) = 0;
  *(_QWORD *)(a1 + 8064) = 0x461C400000000000;
  *(_DWORD *)(a1 + 8072) = 1065353216;
  *(_BYTE *)(a1 + 8088) = 0;
  *(_QWORD *)(a1 + 8080) = 0;
  *(_QWORD *)(a1 + 8092) = 0x3F80000000000001;
  *(_DWORD *)(a1 + 8036) = a2;
  DspLib::ramp((float *)a1, 0x3E9uLL, 0, -100.0, 0.0);
  for (i = 0; i != 4004; i += 4)
    *(float *)(a1 + i) = DspLib::dB2Power(v4, *(float *)(a1 + i) + 0.691);
  return a1;
}

int32x2_t DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::shift(DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *this, int32x2_t result)
{
  vDSP_Length v2;
  char *v4;
  int32x2_t v5;

  LODWORD(v2) = vcvtas_u32_f32(fabsf(*(float *)result.i32) / 0.1);
  if ((_DWORD)v2)
  {
    v5 = result;
    v4 = (char *)this + 4032;
    if (4 * v2 != 4004)
      memmove((char *)this + 4032, (char *)this + 4 * v2 + 4032, 4004 - 4 * v2);
    DspLib::clear((float *)&v4[4 * (1001 - v2)], v2);
    result = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)this + 8060), (float32x2_t)vdup_lane_s32(v5, 0));
    *(int32x2_t *)((char *)this + 8060) = result;
  }
  return result;
}

void DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset(DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *this, float a2)
{
  DspLib *v4;
  float v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int i;
  unsigned int v11;

  *((float *)this + 2015) = a2;
  *((float *)this + 2016) = a2;
  *((float *)this + 2012) = expf(-1.0 / (float)((float)(*((float *)this + 2010) * 1000.0) / 1000.0));
  v5 = a2 + 0.691;
  if (*((_DWORD *)this + 2023) > 1u)
    v5 = -70.0;
  *((float *)this + 2011) = DspLib::dB2Power(v4, v5);
  DspLib::clear((float *)this + 1008, 0x3E9uLL);
  v6 = vcvtas_u32_f32(fmaxf((float)(a2 + 100.0) * 10.01, 0.0));
  if (v6 >= 0x3E9)
    v7 = 1001;
  else
    v7 = v6;
  v8 = v7 - 1;
  if (!v6)
    v8 = 0;
  v9 = v8 - 5;
  for (i = v8 + 5; v9 <= i; ++v9)
  {
    if (v9 >= 0x3E8)
      v11 = 1000;
    else
      v11 = v9;
    *((_DWORD *)this + v11 + 1008) = 1065353216;
  }
  *((_QWORD *)this + 1010) = 0;
  *(_QWORD *)((char *)this + 8052) = 0xC28C0000C28C0000;
}

void DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::process(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE *v7;
  float *v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  float v28;
  float v29;
  DspLib *v30;
  float v31;
  float v32;
  BOOL v33;
  BOOL v34;
  float v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  vDSP_Length v39;
  float v40;
  DspLib *v41;
  float v42;
  float v43;
  BOOL v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  if (a3)
  {
    v6 = 0;
    v7 = (_BYTE *)(a1 + 8088);
    v8 = (float *)(a1 + 4032);
    v9 = 1;
    v10 = 1.0;
    v11 = -10.0;
    while (1)
    {
      v12 = *(float *)(a2 + 4 * v6);
      v13 = DspLib::power2dBSafe((DspLib *)a1, v12, 1.0e-20) + -0.691;
      *(float *)(a1 + 8056) = v13;
      if (v13 <= -70.0)
        goto LABEL_27;
      v14 = *(_DWORD *)(a1 + 8036);
      if (!v14)
        break;
      if (v14 == 1)
      {
        v15 = v12 + *(float *)(a1 + 8044);
        *(float *)(a1 + 8044) = v15;
        v16 = *(_QWORD *)(a1 + 8080) + 1;
        *(_QWORD *)(a1 + 8080) = v16;
        v17 = DspLib::power2dBSafe((DspLib *)a1, v15 / (float)(unint64_t)v16, 1.0e-20) + v11;
LABEL_8:
        *(float *)(a1 + 8052) = v17;
        goto LABEL_10;
      }
      v17 = *(float *)(a1 + 8052);
LABEL_10:
      v19 = vcvtas_u32_f32(fmaxf((float)((float)(v17 + -0.691) + 100.0) * 10.01, 0.0));
      if (v19 >= 0x3E9)
        v20 = 1001;
      else
        v20 = v19;
      v21 = v20 - 1;
      if (v19)
        v22 = v21;
      else
        v22 = 0;
      if (*v7)
        v23 = *(float *)(a1 + 8096);
      else
        v23 = 1.0;
      v24 = vcvtas_u32_f32(fmaxf((float)(*(float *)(a1 + 8056) + 100.0) * 10.01, 0.0));
      if (v24 >= 0x3E9)
        v25 = 1001;
      else
        v25 = v24;
      v26 = v25 - 1;
      if (v24)
        v27 = v26;
      else
        v27 = 0;
      v8[v27] = v23 + v8[v27];
      v28 = DspLib::sum(&v8[v22], 1001 - v22);
      if (v28 > 1.0e-20)
      {
        v29 = DspLib::dotProduct(&v8[v22], 1001 - v22, (const float *)(a1 + 4 * v22));
        *(float *)(a1 + 8060) = DspLib::power2dBSafe(v30, v29 / v28, 1.0e-20) + -0.691;
      }
LABEL_27:
      v31 = *(float *)(a1 + 8060);
      if (*v7)
      {
        v32 = *(float *)(a1 + 8064);
        if (v31 <= v32)
          v31 = v32 + (float)((float)((float)(v31 - v32) * *(float *)(a1 + 8072)) * *(float *)(a1 + 8096));
        *(float *)(a1 + 8064) = v31;
        *(float *)(a4 + 4 * v6) = v31;
        if (*(_DWORD *)(a1 + 8036))
          goto LABEL_59;
        v33 = *(float *)(a1 + 8056) > -70.0 || *(_DWORD *)(a1 + 8092) == 1;
        v34 = v33;
        if (*(float *)(a1 + 8096) < 0.1 || !v34)
          goto LABEL_59;
LABEL_43:
        v35 = 0.0;
        v36 = vcvtas_u32_f32(fmaxf((float)(*(float *)(a1 + 8060) + 100.0) * 10.01, 0.0));
        if (v36 >= 0x3E9)
          v37 = 1001;
        else
          v37 = v36;
        v38 = v37 - 1;
        if (v36)
          v39 = v38;
        else
          v39 = 0;
        if ((v39 + 1) <= 0x3E8)
          v35 = DspLib::sum(&v8[(v39 + 1)], 1001 - (v39 + 1));
        v40 = DspLib::sum(v8, v39);
        v42 = DspLib::amp2dBSafe(v41, (float)(v35 + 1.0e-20) / (float)(v40 + 1.0e-20), 0.000001) / v11;
        if (v42 <= v10)
          v43 = v42;
        else
          v43 = v10;
        v44 = v42 < 0.0;
        v45 = 0.0;
        if (!v44)
          v45 = v43;
        v46 = v45 * v45;
        v47 = 2.0;
        if (*v7)
          v47 = v10;
        v48 = (float)((float)(v10 - v46) * 5.0) + (float)(v47 * v46);
        v49 = *(float *)(a1 + 8040);
        *(float *)(a1 + 8048) = expf(-1.0/ (float)((float)(v49 * (float)((float)(v46 + (float)(v10 - v46)) * 1000.0)) / 1000.0));
        v50 = v49 * (float)(v48 * 1000.0);
        v11 = -10.0;
        v10 = 1.0;
        v51 = expf(-1.0 / (float)(v50 / 1000.0));
        DspLib::multiply(v8, 0x3E9uLL, v51);
        goto LABEL_59;
      }
      *(float *)(a4 + 4 * v6) = v31;
      if (!*(_DWORD *)(a1 + 8036) && (*(_DWORD *)(a1 + 8092) == 1 || *(float *)(a1 + 8056) > -70.0))
        goto LABEL_43;
LABEL_59:
      v6 = v9;
      if (a3 <= v9++)
        return;
    }
    v18 = (float)(v12 * (float)(v10 - *(float *)(a1 + 8048))) + (float)(*(float *)(a1 + 8044) * *(float *)(a1 + 8048));
    *(float *)(a1 + 8044) = v18;
    v17 = DspLib::power2dBSafe((DspLib *)a1, v18, 1.0e-20) + -20.0;
    goto LABEL_8;
  }
}

void DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::histogram(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;

  if (a3)
  {
    v4 = 0;
    v5 = 0;
    v6 = a1 + 4032;
    v7 = 100.0 / (float)a3;
    v8 = a3;
    do
    {
      v9 = v4 + 1;
      v10 = vcvtas_u32_f32(fmaxf((float)((float)((float)(v7 * (float)(v4 + 1)) + -100.0) + 100.0) * 10.01, 0.0));
      if (v10 >= 0x3E9)
        v11 = 1001;
      else
        v11 = v10;
      v12 = v11 - 1;
      if (v10)
        v13 = v12;
      else
        v13 = 0;
      *(float *)(a2 + 4 * v4) = DspLib::sum((const float *)(v6 + 4 * v5), v13 - v5 + 1);
      v5 = v13 + 1;
      ++v4;
    }
    while (v8 != v9);
  }
}

float DspLib::abs(DspLib *this, const DSPComplex *a2)
{
  DSPSplitComplex v3;
  uint64_t v4;
  float __C;

  __C = 0.0;
  v3.realp = (float *)this;
  v3.imagp = (float *)((char *)this + 4);
  v4 = 1;
  vDSP_zvabs(&v3, 1, &__C, 1, 1uLL);
  return __C;
}

float DspLib::ComplexSpan::operator[](_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 <= a2)
    v3 = v2 - 1;
  else
    v3 = a2;
  return *(float *)(*a1 + 4 * v3);
}

_QWORD *DspLib::ComplexSpan::setElement(_QWORD *this, unint64_t a2, DSPComplex a3)
{
  uint64_t v3;

  if (this[2] > a2)
  {
    v3 = this[1];
    *(float *)(*this + 4 * a2) = a3.real;
    *(float *)(v3 + 4 * a2) = a3.imag;
  }
  return this;
}

DSPSplitComplex *DspLib::ComplexSpan::operator=(DSPSplitComplex *__C, DSPSplitComplex *__A)
{
  float *realp;

  realp = __A[1].realp;
  if (realp == __C[1].realp)
    vDSP_zvmov(__A, 1, __C, 1, (vDSP_Length)realp);
  return __C;
}

uint64_t DspLib::ComplexSpan::operator=(uint64_t a1, float a2)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    DspLib::fill(*(float **)a1, v3, a2);
    DspLib::clear(*(float **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  return a1;
}

DSPSplitComplex *DspLib::operator+=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  float *realp;
  float *v4;

  realp = __A[1].realp;
  v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1)
    vDSP_zvadd(__A, 1, __B, v4 == realp, __A, 1, (vDSP_Length)realp);
  return __A;
}

uint64_t DspLib::operator+=(uint64_t a1, float a2)
{
  DspLib::add(*(float **)a1, *(_QWORD *)(a1 + 16), a2);
  return a1;
}

DSPSplitComplex *DspLib::operator-=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  float *realp;
  float *v4;

  realp = __A[1].realp;
  v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1)
    vDSP_zvsub(__A, 1, __B, v4 == realp, __A, 1, (vDSP_Length)realp);
  return __A;
}

uint64_t DspLib::operator-=(uint64_t a1, float a2)
{
  DspLib::add(*(float **)a1, *(_QWORD *)(a1 + 16), -a2);
  return a1;
}

DSPSplitComplex *DspLib::operator*=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  float *realp;
  float *v4;

  realp = __A[1].realp;
  v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1)
    vDSP_zvmul(__A, 1, __B, v4 == realp, __A, 1, (vDSP_Length)realp, 1);
  return __A;
}

uint64_t DspLib::operator*=(uint64_t a1, float a2)
{
  DspLib::multiply(*(float **)a1, *(_QWORD *)(a1 + 16), a2);
  DspLib::multiply(*(float **)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
  return a1;
}

DSPSplitComplex *DspLib::operator/=(DSPSplitComplex *__A, DSPSplitComplex *__B)
{
  float *realp;
  float *v4;

  realp = __A[1].realp;
  v4 = __B[1].realp;
  if (v4 == realp || v4 == (float *)1)
    vDSP_zvdiv(__B, v4 == realp, __A, 1, __A, 1, (vDSP_Length)realp);
  return __A;
}

float DspLib::checksum(DspLib *this, const DspLib::ComplexSpan *a2, float result)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(float **)this;
    v5 = (float *)*((_QWORD *)this + 1);
    do
    {
      v6 = *v4++;
      v7 = fabsf(v6);
      v8 = *v5++;
      result = result + (float)(v7 + fabsf(v8));
      --v3;
    }
    while (v3);
  }
  return result;
}

void DspLib::initializeWithLinearPhase(DspLib *this, DspLib::ComplexSpan *a2, float a3, float a4)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  __double2 v9;
  float cosval;
  float sinval;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = 0;
    v6 = (float)((float)(a3 / 1000.0) * a4) * -3.14159265 / (double)v4;
    v7 = *(_QWORD *)this;
    v8 = *((_QWORD *)this + 1);
    do
    {
      v9 = __sincos_stret(v6 * (double)v5);
      cosval = v9.__cosval;
      *(float *)(v7 + 4 * v5) = cosval;
      sinval = v9.__sinval;
      *(float *)(v8 + 4 * v5++) = sinval;
    }
    while (v4 != v5);
  }
}

DspLib::ComplexVector *DspLib::ComplexVector::ComplexVector(DspLib::ComplexVector *this, unint64_t a2, const DSPSplitComplex *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  v5 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)this = 0u;
  DspLib::allocateComplex(a2, this, (unint64_t *)this + 2, (uint64_t)this + 24, (_QWORD *)this + 4, (_QWORD *)this + 7);
  v6 = *v5;
  if (*v5)
  {
    if (a3)
    {
      v8 = (__int128)*a3;
      v9 = v6;
      DspLib::ComplexVector::operator=((uint64_t)this, (uint64_t)&v8);
    }
    else
    {
      DspLib::ComplexSpan::operator=((uint64_t)this, 0.0);
    }
  }
  return this;
}

void sub_1B609CE44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexVector::setLength(DspLib::ComplexVector *this, unint64_t a2)
{
  DspLib::allocateComplex(a2, this, (unint64_t *)this + 2, (uint64_t)this + 24, (_QWORD *)this + 4, (_QWORD *)this + 7);
}

uint64_t DspLib::ComplexVector::operator=(uint64_t a1, uint64_t a2)
{
  vDSP_Length v4;

  DspLib::allocateComplex(*(_QWORD *)(a2 + 16), (_QWORD *)a1, (unint64_t *)(a1 + 16), a1 + 24, (_QWORD *)(a1 + 32), (_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 == *(_QWORD *)(a1 + 16))
    vDSP_zvmov((const DSPSplitComplex *)a2, 1, (const DSPSplitComplex *)a1, 1, v4);
  return a1;
}

DspLib::ComplexVector *DspLib::ComplexVector::ComplexVector(DspLib::ComplexVector *this, const DspLib::ComplexSpan *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  DspLib::ComplexVector::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_1B609CF34(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

DspLib::ComplexVector *DspLib::ComplexVector::ComplexVector(DspLib::ComplexVector *this, const DspLib::ComplexVector *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  DspLib::ComplexVector::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_1B609CF94(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexVector::~ComplexVector(DspLib::ComplexVector *this)
{
  void *v2;
  void *v3;

  if (*((_QWORD *)this + 2))
  {
    if (*(DspLib::ComplexVector **)this != (DspLib::ComplexVector *)((char *)this + 24))
      *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
    if (*((DspLib::ComplexVector **)this + 1) != (DspLib::ComplexVector *)((char *)this + 28))
      *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
    *((_QWORD *)this + 1) = (char *)this + 28;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = (char *)this + 24;
  }
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
}

void DspLib::allocateComplex(unint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v10;

  if (*a3 != a1)
  {
    if (*a3)
    {
      if (*a2 != a4)
        a5[1] = *a5;
      if (a2[1] != a4 + 4)
        a6[1] = *a6;
    }
    *a3 = a1;
    if (a1 < 2)
    {
      *a2 = a4;
      v10 = a4 + 4;
    }
    else
    {
      std::vector<float>::resize((uint64_t)a5, a1);
      std::vector<float>::resize((uint64_t)a6, *a3);
      *a2 = *a5;
      v10 = *a6;
    }
    a2[1] = v10;
  }
}

void DspLib::operator+(DspLib::ComplexSpan *a1@<X0>, DSPSplitComplex *a2@<X1>, DspLib::ComplexVector *a3@<X8>)
{
  float *realp;
  DSPSplitComplex v7[5];

  realp = a2[1].realp;
  if (realp == (float *)1 || realp == *((float **)a1 + 2))
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v7, a1);
    DspLib::operator+=(v7, a2);
    DspLib::ComplexVector::ComplexVector(a3, (const DspLib::ComplexVector *)v7);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v7);
  }
  else
  {
    DspLib::ComplexVector::ComplexVector(a3, 0, 0);
  }
}

void sub_1B609D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a9);
  _Unwind_Resume(a1);
}

void DspLib::operator-(DspLib::ComplexSpan *a1@<X0>, DSPSplitComplex *a2@<X1>, DspLib::ComplexVector *a3@<X8>)
{
  float *realp;
  DSPSplitComplex v7[5];

  realp = a2[1].realp;
  if (realp == (float *)1 || realp == *((float **)a1 + 2))
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v7, a1);
    DspLib::operator-=(v7, a2);
    DspLib::ComplexVector::ComplexVector(a3, (const DspLib::ComplexVector *)v7);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v7);
  }
  else
  {
    DspLib::ComplexVector::ComplexVector(a3, 0, 0);
  }
}

void sub_1B609D218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a9);
  _Unwind_Resume(a1);
}

void DspLib::operator*(DspLib::ComplexSpan *a1@<X0>, DSPSplitComplex *a2@<X1>, DspLib::ComplexVector *a3@<X8>)
{
  float *realp;
  DSPSplitComplex v7[5];

  realp = a2[1].realp;
  if (realp == (float *)1 || realp == *((float **)a1 + 2))
  {
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v7, a1);
    DspLib::operator*=(v7, a2);
    DspLib::ComplexVector::ComplexVector(a3, (const DspLib::ComplexVector *)v7);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v7);
  }
  else
  {
    DspLib::ComplexVector::ComplexVector(a3, 0, 0);
  }
}

void sub_1B609D2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a9);
  _Unwind_Resume(a1);
}

void DspLib::operator*(DspLib::ComplexSpan *a1@<X0>, DspLib::ComplexVector *a2@<X8>, float a3@<S0>)
{
  float *__C[2];
  vDSP_Length __N;

  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)__C, a1);
  DspLib::multiply(__C[0], __N, a3);
  DspLib::multiply(__C[1], __N, a3);
  DspLib::ComplexVector::ComplexVector(a2, (const DspLib::ComplexVector *)__C);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)__C);
}

void sub_1B609D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a9);
  _Unwind_Resume(a1);
}

float DspLib::ComplexMatrixSpan::element(DspLib::ComplexMatrixSpan *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v3 >= a2)
    v3 = a2;
  v5 = *((_QWORD *)this + 4);
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = *((_QWORD *)this + 4);
  v7 = v6 + v3 * v5;
  if (v4 <= v7)
    v7 = v4 - 1;
  return *(float *)(*(_QWORD *)this + 4 * v7);
}

void DspLib::ComplexMatrixSpan::row(DspLib::ComplexMatrixSpan *this, unint64_t a2, const DSPSplitComplex *a3)
{
  vDSP_Length realp;
  unint64_t v4;
  vDSP_Length v5;
  float *v6;
  float *v7;
  DSPSplitComplex __A;
  vDSP_Length v9;

  realp = (vDSP_Length)a3[1].realp;
  if (realp == *((_QWORD *)this + 4))
  {
    v4 = *((_QWORD *)this + 3);
    if (v4 >= a2)
      v4 = a2;
    v5 = v4 * realp;
    v6 = (float *)(*(_QWORD *)this + 4 * v5);
    v7 = (float *)(*((_QWORD *)this + 1) + 4 * v5);
    __A.realp = v6;
    __A.imagp = v7;
    v9 = realp;
    vDSP_zvmov(&__A, 1, a3, 1, realp);
  }
}

void DspLib::ComplexMatrixSpan::setRow(DspLib::ComplexMatrixSpan *this, unint64_t a2, DSPSplitComplex *__A)
{
  vDSP_Length v3;
  float *realp;
  vDSP_Stride v6;
  unint64_t v7;
  vDSP_Length v8;
  float *v9;
  float *v10;
  DSPSplitComplex v11;

  v3 = *((_QWORD *)this + 4);
  realp = __A[1].realp;
  if ((float *)v3 == realp || realp == (float *)1)
  {
    v6 = v3 == (_QWORD)realp;
    v7 = *((_QWORD *)this + 3);
    if (v7 >= a2)
      v7 = a2;
    v8 = v7 * v3;
    v9 = (float *)(*(_QWORD *)this + 4 * v8);
    v10 = (float *)(*((_QWORD *)this + 1) + 4 * v8);
    v11.realp = v9;
    v11.imagp = v10;
    vDSP_zvmov(__A, v6, &v11, 1, v3);
  }
}

void DspLib::ComplexMatrixSpan::setColumn(DspLib::ComplexMatrixSpan *this, unint64_t a2, DSPSplitComplex *__A)
{
  vDSP_Length v3;
  float *realp;
  vDSP_Stride v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  float *v10;
  DSPSplitComplex v11;

  v3 = *((_QWORD *)this + 3);
  realp = __A[1].realp;
  if ((float *)v3 == realp || realp == (float *)1)
  {
    v6 = v3 == (_QWORD)realp;
    v7 = *((_QWORD *)this + 4);
    if (v7 >= a2)
      v8 = a2;
    else
      v8 = *((_QWORD *)this + 4);
    v9 = (float *)(*(_QWORD *)this + 4 * v8);
    v10 = (float *)(*((_QWORD *)this + 1) + 4 * v8);
    v11.realp = v9;
    v11.imagp = v10;
    vDSP_zvmov(__A, v6, &v11, v7, v3);
  }
}

_QWORD *DspLib::ComplexMatrixSpan::operator=(_QWORD *a1, _DWORD *a2, DspLib *this)
{
  unint64_t SquareRoot;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;

  SquareRoot = DspLib::getSquareRoot((uint64_t)this);
  if (SquareRoot == a1[4])
  {
    v6 = a1[3];
    if (SquareRoot == v6 && v6 != 0)
    {
      v8 = 0;
      v9 = a1[2];
      do
      {
        if (SquareRoot >= v8)
          v10 = v8;
        else
          v10 = SquareRoot;
        v11 = SquareRoot * v10;
        v12 = SquareRoot;
        do
        {
          if (v9 > v11)
          {
            v13 = a2[1];
            v14 = a1[1];
            *(_DWORD *)(*a1 + 4 * v11) = *a2;
            *(_DWORD *)(v14 + 4 * v11) = v13;
          }
          a2 += 2;
          ++v11;
          --v12;
        }
        while (v12);
        ++v8;
      }
      while (v8 != SquareRoot);
    }
  }
  return a1;
}

uint64_t DspLib::getSquareRoot(uint64_t this)
{
  if (this > 24)
  {
    if (this > 48)
    {
      if (this == 49)
        return 7;
      if (this == 64)
        return 8;
    }
    else
    {
      if (this == 25)
        return 5;
      if (this == 36)
        return 6;
    }
  }
  else if (this > 8)
  {
    if (this == 9)
      return 3;
    if (this == 16)
      return 4;
  }
  else
  {
    if (this == 1)
      return this;
    if (this == 4)
      return 2;
  }
  return 0;
}

DSPSplitComplex *DspLib::operator/=(DSPSplitComplex *a1, uint64_t *a2)
{
  uint64_t v3;
  DSPSplitComplex v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  v5.realp = (float *)&v7;
  v5.imagp = (float *)&v7 + 1;
  v3 = *a2;
  v6 = 1;
  v7 = v3;
  DspLib::operator/=(a1, &v5);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v5);
  return a1;
}

void sub_1B609D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a9);
  _Unwind_Resume(a1);
}

DspLib::ComplexMatrix *DspLib::ComplexMatrix::ComplexMatrix(DspLib::ComplexMatrix *this, uint64_t a2, uint64_t a3)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  DspLib::allocateComplex(a3 * a2, this, (unint64_t *)this + 2, (uint64_t)this + 40, (_QWORD *)this + 6, (_QWORD *)this + 9);
  return this;
}

void sub_1B609D6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexMatrix::setDimensions(DspLib::ComplexMatrix *this, uint64_t a2, uint64_t a3)
{
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  DspLib::allocateComplex(a3 * a2, this, (unint64_t *)this + 2, (uint64_t)this + 40, (_QWORD *)this + 6, (_QWORD *)this + 9);
}

DspLib::ComplexMatrix *DspLib::ComplexMatrix::ComplexMatrix(DspLib::ComplexMatrix *this, const DSPSplitComplex *a2)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::operator=((uint64_t)this, a2);
  return this;
}

{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::operator=((uint64_t)this, a2);
  return this;
}

void sub_1B609D74C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B609D7B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::ComplexMatrix::operator=(uint64_t a1, const DSPSplitComplex *a2)
{
  float *imagp;
  float *realp;
  vDSP_Length v6;

  imagp = a2[1].imagp;
  realp = a2[2].realp;
  *(_QWORD *)(a1 + 24) = imagp;
  *(_QWORD *)(a1 + 32) = realp;
  DspLib::allocateComplex((_QWORD)realp * (_QWORD)imagp, (_QWORD *)a1, (unint64_t *)(a1 + 16), a1 + 40, (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 72));
  v6 = (vDSP_Length)a2[1].realp;
  if (v6 == *(_QWORD *)(a1 + 16))
    vDSP_zvmov(a2, 1, (const DSPSplitComplex *)a1, 1, v6);
  return a1;
}

_QWORD *DspLib::ComplexMatrix::ComplexMatrix(uint64_t a1, _DWORD *a2, DspLib *this)
{
  uint64_t v6;
  uint64_t SquareRoot;

  v6 = a1 + 40;
  SquareRoot = DspLib::getSquareRoot((uint64_t)this);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = SquareRoot;
  *(_QWORD *)(a1 + 32) = SquareRoot;
  DspLib::allocateComplex(SquareRoot * SquareRoot, (_QWORD *)a1, (unint64_t *)(a1 + 16), v6, (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 72));
  return DspLib::ComplexMatrixSpan::operator=((_QWORD *)a1, a2, this);
}

void sub_1B609D8DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ComplexMatrix::~ComplexMatrix(DspLib::ComplexMatrix *this)
{
  void *v2;
  void *v3;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (*((_QWORD *)this + 2))
  {
    if (*(DspLib::ComplexMatrix **)this != (DspLib::ComplexMatrix *)((char *)this + 40))
      *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
    if (*((DspLib::ComplexMatrix **)this + 1) != (DspLib::ComplexMatrix *)((char *)this + 44))
      *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
    *((_QWORD *)this + 1) = (char *)this + 44;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = (char *)this + 40;
  }
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
}

void DspLib::operator/(const DSPSplitComplex *a1@<X0>, uint64_t *a2@<X1>, DspLib::ComplexMatrix *a3@<X8>)
{
  DSPSplitComplex v5[6];

  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)v5, a1);
  DspLib::operator/=(v5, a2);
  DspLib::ComplexMatrix::ComplexMatrix(a3, v5);
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v5);
}

void sub_1B609D9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&a9);
  _Unwind_Resume(a1);
}

void DspLib::operator*(uint64_t a1@<X0>, uint64_t a2@<X1>, DspLib::ComplexMatrix *a3@<X8>)
{
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 24))
  {
    DspLib::ComplexMatrix::ComplexMatrix(a3, *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 32));
    vDSP_zmmul((const DSPSplitComplex *)a1, 1, (const DSPSplitComplex *)a2, 1, (const DSPSplitComplex *)a3, 1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a1 + 32));
  }
  else
  {
    DspLib::ComplexMatrix::ComplexMatrix(a3, 0, 0);
  }
}

void sub_1B609DA9C(_Unwind_Exception *a1)
{
  DspLib::ComplexMatrix *v1;

  DspLib::ComplexMatrix::~ComplexMatrix(v1);
  _Unwind_Resume(a1);
}

void DspLib::inv(DspLib *this@<X0>, DspLib::ComplexMatrix *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  DSPSplitComplex v41[6];
  DSPSplitComplex v42[5];
  _BYTE v43[80];
  _QWORD v44[10];
  DSPSplitComplex v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  DSPSplitComplex v52;
  uint64_t v53;
  int v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[3];
  int v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int *v65;
  int *v66;
  uint64_t v67;
  int v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 3) == 2 && *((_QWORD *)this + 4) == 2)
  {
    v7 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    v8 = v6 - 1;
    if (v6 > 1)
      v9 = 1;
    else
      v9 = v6 - 1;
    v10 = 3;
    if (v6 <= 3)
      v10 = v6 - 1;
    v11 = *(_QWORD *)this;
    v12 = *(_DWORD *)(v7 + 4 * v10);
    v13 = *(float *)(*(_QWORD *)this + 4 * v9);
    v14 = *(float *)(v7 + 4 * v9);
    if (v6 > 2)
      v8 = 2;
    v15 = *(float *)(v11 + 4 * v8);
    v16 = *(float *)(v7 + 4 * v8);
    if (v6)
      v17 = 0;
    else
      v17 = -1;
    v18 = *(_DWORD *)(v11 + 4 * v17);
    v19 = *(_DWORD *)(v7 + 4 * v17);
    LODWORD(v65) = *(_DWORD *)(*(_QWORD *)this + 4 * v10);
    HIDWORD(v65) = v12;
    *(float *)&v66 = -v13;
    *((float *)&v66 + 1) = -v14;
    *(float *)&v67 = -v15;
    *((float *)&v67 + 1) = -v16;
    v68 = v18;
    v69 = v19;
    DspLib::ComplexMatrix::ComplexMatrix((uint64_t)v41, &v65, (DspLib *)4);
    v20 = 0;
    if (*((_QWORD *)this + 3) == 2)
    {
      v21 = 0;
      if (*((_QWORD *)this + 4) == 2)
      {
        v23 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        if (v22)
          v24 = 0;
        else
          v24 = -1;
        v25 = v22 - 1;
        v26 = *(_QWORD *)this;
        v27 = *(_DWORD *)(*(_QWORD *)this + 4 * v24);
        v28 = *(_DWORD *)(v23 + 4 * v24);
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v66 = &v69;
        v67 = 1;
        v65 = &v68;
        v68 = v27;
        v69 = v28;
        if (v22 > 1)
          v29 = 1;
        else
          v29 = v22 - 1;
        v30 = *(_DWORD *)(v26 + 4 * v29);
        v31 = *(_DWORD *)(v23 + 4 * v29);
        v63 = 0uLL;
        v64 = 0uLL;
        v62 = 0uLL;
        v59[1] = &v61;
        v59[2] = 1;
        v59[0] = &v60;
        v60 = v30;
        v61 = v31;
        v32 = 2;
        if (v22 <= 2)
          v32 = v22 - 1;
        v33 = *(_DWORD *)(v26 + 4 * v32);
        v34 = *(_DWORD *)(v23 + 4 * v32);
        v57 = 0uLL;
        v58 = 0uLL;
        v56 = 0uLL;
        v52.imagp = (float *)&v55;
        v53 = 1;
        v52.realp = (float *)&v54;
        v54 = v33;
        v55 = v34;
        v35 = v22 > 3;
        v36 = 3;
        if (!v35)
          v36 = v25;
        v37 = *(_DWORD *)(v26 + 4 * v36);
        v38 = *(_DWORD *)(v23 + 4 * v36);
        v50 = 0uLL;
        v51 = 0uLL;
        v49 = 0uLL;
        v45.imagp = (float *)&v48;
        v46 = 1;
        v45.realp = (float *)&v47;
        v47 = v37;
        v48 = v38;
        DspLib::operator*((DspLib::ComplexSpan *)&v65, &v45, (DspLib::ComplexVector *)v43);
        DspLib::operator*((DspLib::ComplexSpan *)v59, &v52, (DspLib::ComplexVector *)v42);
        DspLib::operator-((DspLib::ComplexSpan *)v43, v42, (DspLib::ComplexVector *)v44);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v42);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v43);
        if (v44[2])
          v39 = 0;
        else
          v39 = -1;
        v20 = *(_DWORD *)(v44[0] + 4 * v39);
        v21 = *(_DWORD *)(v44[1] + 4 * v39);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v44);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v45);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v52);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v59);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v65);
      }
    }
    else
    {
      v21 = 0;
    }
    v40 = __PAIR64__(v21, v20);
    DspLib::operator/(v41, (uint64_t *)&v40, a2);
    DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v41);
  }
  else
  {
    DspLib::ComplexMatrix::ComplexMatrix(a2, 0, 0);
  }
}

void sub_1B609DD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a22);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a32);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a52);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a62);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v62 - 216));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v62 - 136));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&a10);
  _Unwind_Resume(a1);
}

double DspLib::LoudspeakerModel::Algorithm::Algorithm(uint64_t a1, int a2)
{
  uint64_t v3;
  double result;

  v3 = DspLib::AlgorithmBase::AlgorithmBase(a1, &DspLib::LoudspeakerModel::Parameters::kDefault, 0x27uLL, (uint64_t)&DspLib::LoudspeakerModel::Parameters::kMinimum, 39, (uint64_t)&DspLib::LoudspeakerModel::Parameters::kMaximum, 39);
  *(_QWORD *)v3 = &off_1E69C1C68;
  *(_BYTE *)(v3 + 552) = 0;
  *(_OWORD *)(v3 + 632) = 0u;
  *(_OWORD *)(v3 + 648) = 0u;
  *(_OWORD *)(v3 + 664) = 0u;
  *(_OWORD *)(v3 + 680) = 0u;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_OWORD *)(v3 + 560) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  *(_BYTE *)(v3 + 624) = 0;
  *(_OWORD *)(v3 + 264) = xmmword_1B66281D8;
  *(_OWORD *)(v3 + 280) = unk_1B66281E8;
  *(_OWORD *)(v3 + 296) = xmmword_1B66281F8;
  *(_OWORD *)(v3 + 312) = unk_1B6628208;
  *(_OWORD *)(v3 + 232) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)(v3 + 248) = unk_1B66281C8;
  *(_OWORD *)(v3 + 372) = *(__int128 *)((char *)&xmmword_1B6628238 + 12);
  *(_OWORD *)(v3 + 344) = unk_1B6628228;
  *(_OWORD *)(v3 + 360) = xmmword_1B6628238;
  *(_OWORD *)(v3 + 328) = xmmword_1B6628218;
  *(_OWORD *)(v3 + 388) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)(v3 + 404) = *(_OWORD *)algn_1B6628264;
  *(_OWORD *)(v3 + 452) = xmmword_1B6628294;
  *(_OWORD *)(v3 + 468) = unk_1B66282A4;
  *(_OWORD *)(v3 + 420) = xmmword_1B6628274;
  *(_OWORD *)(v3 + 436) = unk_1B6628284;
  *(_OWORD *)(v3 + 528) = *(__int128 *)((char *)&xmmword_1B66282D4 + 12);
  result = dbl_1B66282C4[0];
  *(_OWORD *)(v3 + 500) = *(_OWORD *)dbl_1B66282C4;
  *(_OWORD *)(v3 + 516) = xmmword_1B66282D4;
  *(_OWORD *)(v3 + 484) = xmmword_1B66282B4;
  *(_DWORD *)(v3 + 544) = a2;
  return result;
}

BOOL DspLib::LoudspeakerModel::Algorithm::initialize(DspLib::LoudspeakerModel::Algorithm *this, int a2, double a3)
{
  int v3;
  _BOOL8 v4;
  _BOOL4 isEqual;
  char *v9;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *((_BYTE *)this + 8) == 0;
  if (a3 <= 0.0)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerModel/dsp/DspLibLoudspeakerModel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 23);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    *((_DWORD *)this + 3) = a2;
    if (*((_DWORD *)this + 136) == 1)
      *((_DWORD *)this + 4) = a2;
    isEqual = DspLib::isEqual(this, *((double *)this + 3), a3, 1.0e-20);
    *((double *)this + 3) = a3;
    if (v3 && isEqual)
    {
      return 0;
    }
    else
    {
      v4 = 1;
      *((_BYTE *)this + 8) = 1;
      (*(void (**)(DspLib::LoudspeakerModel::Algorithm *))(*(_QWORD *)this + 144))(this);
    }
  }
  return v4;
}

void DspLib::LoudspeakerModel::Algorithm::uninitialize(DspLib::LoudspeakerModel::Algorithm *this)
{
  DspLib::Biquad::Filter::uninitialize((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 552));
  DspLib::Biquad::Filter::uninitialize((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 624));
  *((_BYTE *)this + 8) = 0;
}

void DspLib::LoudspeakerModel::Algorithm::setParameters(uint64_t a1, float *a2, uint64_t a3)
{
  __n128 v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  char *v25;
  BOOL v26;
  char *v27;
  void *v28;
  void *v29;
  int v30;
  unint64_t cycle_count;
  unint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  char *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  DspLib::Biquad::Design *v52;
  BOOL v53;
  float v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  vDSP_Length v63;
  float *v64;
  vDSP_Length v65;
  float v66;
  const float *v67;
  vDSP_Length v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char v73[56];
  __int128 v74;
  uint64_t v75;
  __int128 __src;
  _BYTE v77[28];
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  _OWORD v82[2];
  char *v83;
  char *v84;
  uint64_t v85;

  DspLib::LoudspeakerModel::Parameters::setBoundaries(a2, a3, a1 + 232, 39, a1 + 388);
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, v6);
  if (*(_BYTE *)(a1 + 8))
  {
    v7 = DspLib::LoudspeakerModel::Parameters::mode(*(float **)(a1 + 48));
    *(_DWORD *)(a1 + 548) = v7;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    switch(v7)
    {
      case 0:
      case 4:
        goto LABEL_70;
      case 1:
        v8 = *(_DWORD *)(a1 + 544);
        if (v8 == 2)
          goto LABEL_6;
        if (v8 != 1)
        {
          if (v8)
            goto LABEL_43;
LABEL_6:
          DspLib::LoudspeakerModel::Algorithm::calculateThieleSmallExcursionModelCoefficients(*(float **)(a1 + 48), (uint64_t)&__src, *(double *)(a1 + 24));
          if (v77[24])
          {
            std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v83, 1uLL);
            std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(v83, (char *)&__src, (uint64_t)&v77[24], 2uLL);
          }
          goto LABEL_43;
        }
        DspLib::LoudspeakerModel::Algorithm::calculateThieleSmallExcursionModelCoefficients(*(float **)(a1 + 48), (uint64_t)&__src, *(double *)(a1 + 24));
        v49 = *(_QWORD *)(a1 + 48);
        v81 = __src;
        v82[0] = *(_OWORD *)v77;
        *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)&v77[12];
        DspLib::LoudspeakerModel::Algorithm::calculateInversePressureModelCoefficientsForThieleSmallParameters(v49, (uint64_t)&v81, (uint64_t)&v70, *(double *)(a1 + 24));
        if (v73[0])
        {
          std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v83, 1uLL);
          std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(v83, (char *)&v70, (uint64_t)v73, 2uLL);
        }
        goto LABEL_43;
      case 2:
        v30 = *(_DWORD *)(a1 + 544);
        if (v30 == 2)
          goto LABEL_26;
        if (v30 == 1)
        {
          LODWORD(__src) = 1;
          v84 = (char *)std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<int,DspLib::Biquad::Section const&>((uint64_t *)&v83, (int *)&__src, &DspLib::Biquad::kBypassSection);
          goto LABEL_43;
        }
        if (v30)
          goto LABEL_43;
LABEL_26:
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        DspLibBuffer::DspLibBuffer((DspLibBuffer *)&__src);
        DspLib::LoudspeakerModel::Algorithm::importSdomainParameters_0(*(_QWORD *)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2, (uint64_t *)&v70, (uint64_t *)&v78, (DspLibBuffer *)&__src);
        cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&__src);
        std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v83, cycle_count);
        if (v84 == v83)
          goto LABEL_42;
        v32 = 0;
        v33 = 0;
        v34 = 1;
        do
        {
          v35 = (uint64_t *)&v70[24 * v32];
          v36 = *v35;
          v37 = v35[1];
          v38 = (uint64_t *)&v78[24 * v32];
          v39 = *v38;
          v40 = v38[1];
          v41 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)&__src, v32);
          DspLib::Biquad::Design::fromSDomain(v36, (v37 - v36) >> 3, v39, (v40 - v39) >> 3, (float32x2_t **)&v74, *v41, *(double *)(a1 + 24));
          v42 = v83;
          v43 = &v83[24 * v32];
          v44 = *(void **)v43;
          if (*(_QWORD *)v43)
          {
            *(_QWORD *)&v83[24 * v32 + 8] = v44;
            operator delete(v44);
            *(_QWORD *)v43 = 0;
            *((_QWORD *)v43 + 1) = 0;
            *((_QWORD *)v43 + 2) = 0;
          }
          *(_OWORD *)v43 = v74;
          *(_QWORD *)&v42[24 * v32 + 16] = v75;
          v25 = v83;
          v45 = v84;
          v33 |= *(_QWORD *)&v83[24 * v32 + 8] == *(_QWORD *)&v83[24 * v32];
          v32 = v34;
          v26 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3) > v34++;
        }
        while (v26);
        if ((v33 & 1) == 0)
          goto LABEL_42;
        if (v84 != v83)
        {
          v46 = v84;
          do
          {
            v48 = (void *)*((_QWORD *)v46 - 3);
            v46 -= 24;
            v47 = v48;
            if (v48)
            {
              *((_QWORD *)v45 - 2) = v47;
              operator delete(v47);
            }
            v45 = v46;
          }
          while (v46 != v25);
        }
        goto LABEL_37;
      case 3:
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        DspLibBuffer::DspLibBuffer((DspLibBuffer *)&__src);
        DspLib::LoudspeakerModel::Algorithm::importSdomainParameters_1(*(_QWORD *)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2, (uint64_t *)&v70, (uint64_t *)&v78, (DspLibBuffer *)&__src);
        v9 = *(_DWORD *)(a1 + 544);
        switch(v9)
        {
          case 2:
            goto LABEL_11;
          case 1:
            DspLib::LoudspeakerModel::Algorithm::calculatedInversePressurFilterForSdomain_1_Parameters(&v70, &v78, (vp::utility::CPU_Profiler *)&__src, vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 140)), (uint64_t *)&v83, *(float *)(*(_QWORD *)(a1 + 48) + 148), *(float *)(*(_QWORD *)(a1 + 48) + 152), *(float *)(*(_QWORD *)(a1 + 48) + 4), *(double *)(a1 + 24));
            break;
          case 0:
LABEL_11:
            v10 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&__src);
            std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)&v83, v10);
            if (v84 != v83)
            {
              v11 = 0;
              v12 = 0;
              v13 = 1;
              do
              {
                v14 = (uint64_t *)&v70[24 * v11];
                v15 = *v14;
                v16 = v14[1];
                v17 = (uint64_t *)&v78[24 * v11];
                v18 = *v17;
                v19 = v17[1];
                v20 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)&__src, v11);
                DspLib::Biquad::Design::fromSDomain(v15, (v16 - v15) >> 3, v18, (v19 - v18) >> 3, (float32x2_t **)&v74, *v20, *(double *)(a1 + 24));
                v21 = v83;
                v22 = &v83[24 * v11];
                v23 = *(void **)v22;
                if (*(_QWORD *)v22)
                {
                  *(_QWORD *)&v83[24 * v11 + 8] = v23;
                  operator delete(v23);
                  *(_QWORD *)v22 = 0;
                  *((_QWORD *)v22 + 1) = 0;
                  *((_QWORD *)v22 + 2) = 0;
                }
                *(_OWORD *)v22 = v74;
                *(_QWORD *)&v21[24 * v11 + 16] = v75;
                v25 = v83;
                v24 = v84;
                v12 |= *(_QWORD *)&v83[24 * v11 + 8] == *(_QWORD *)&v83[24 * v11];
                v11 = v13;
                v26 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3) > v13++;
              }
              while (v26);
              if ((v12 & 1) != 0)
              {
                if (v84 != v83)
                {
                  v27 = v84;
                  do
                  {
                    v29 = (void *)*((_QWORD *)v27 - 3);
                    v27 -= 24;
                    v28 = v29;
                    if (v29)
                    {
                      *((_QWORD *)v24 - 2) = v28;
                      operator delete(v28);
                    }
                    v24 = v27;
                  }
                  while (v27 != v25);
                }
LABEL_37:
                v84 = v25;
              }
            }
            break;
        }
LABEL_42:
        DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&__src);
        *(_QWORD *)&__src = &v78;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
        *(_QWORD *)&__src = &v70;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
LABEL_43:
        v50 = v83;
        if (*(_DWORD *)(a1 + 544) == 1)
        {
          v51 = *(_QWORD *)(a1 + 48);
          v52 = (DspLib::Biquad::Design *)(vcvtas_u32_f32(*(float *)(v51 + 8)) - 2);
          v53 = !(_DWORD)v52 || v84 == v83;
          if (!v53 && *((_QWORD *)v83 + 1) != *(_QWORD *)v83)
          {
            v54 = *(double *)(a1 + 24);
            DspLib::Biquad::Design::butterworthHighPass(v52, *(float *)(v51 + 4), v54, 0, (float **)&__src);
            v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v83 + 1) - *(_QWORD *)v83) >> 2);
            std::vector<DspLib::Biquad::Section>::resize((uint64_t)v83, v55 - 0x3333333333333333 * ((uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2));
            v56 = (char *)*((_QWORD *)&__src + 1);
            if (*((_QWORD *)&__src + 1) != (_QWORD)__src)
            {
              v57 = 0;
              v58 = 1;
              v56 = (char *)__src;
              do
              {
                v59 = &v56[20 * v57];
                v60 = *(_QWORD *)v83 + 20 * (v57 + v55);
                v61 = *(_OWORD *)v59;
                *(_DWORD *)(v60 + 16) = *((_DWORD *)v59 + 4);
                *(_OWORD *)v60 = v61;
                v57 = v58;
                v56 = (char *)__src;
                v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2) > v58++;
              }
              while (v26);
            }
            if (v56)
            {
              *((_QWORD *)&__src + 1) = v56;
              operator delete(v56);
            }
            v50 = v83;
          }
        }
        v62 = -1431655765 * ((unint64_t)(v84 - v50) >> 3);
        v63 = *(unsigned int *)(a1 + 12);
        *(_DWORD *)(a1 + 16) = v63 * v62;
        if ((_DWORD)v63 * v62)
        {
          DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 552), v63, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v50 + 1) - *(_QWORD *)v50) >> 2));
          DspLib::Biquad::Filter::setCoefficients(a1 + 552, *(_QWORD *)v83, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v83 + 1) - *(_QWORD *)v83) >> 2), 0, 0x41uLL);
          if (v62 == 2)
          {
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 624), *(unsigned int *)(a1 + 12), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v83 + 4) - *((_QWORD *)v83 + 3)) >> 2));
            DspLib::Biquad::Filter::setCoefficients(a1 + 624, *((_QWORD *)v83 + 3), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v83 + 4) - *((_QWORD *)v83 + 3)) >> 2), 0, 0x41uLL);
          }
          else
          {
            DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 624));
          }
          DspLibBuffer::DspLibBuffer((DspLibBuffer *)&__src, 0xAuLL, 1u);
          DspLibBuffer::setNumFrames(&__src, 0xAuLL);
          *(_QWORD *)&v77[8] = *(_QWORD *)(a1 + 24);
          v64 = (float *)DspLibBuffer::channel((DspLibBuffer *)&__src, 0);
          v65 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&__src);
          v66 = *(double *)(a1 + 24) * 0.49;
          DspLib::ramp(v64, v65, 1, 20.0, v66);
          DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v70);
          DspLib::LoudspeakerModel::Algorithm::frequencyResponse((DspLib::LoudspeakerModel::Algorithm *)a1, (const DspLibBuffer *)&__src, (DspLibBuffer *)&v70);
          v67 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v70, 0);
          v68 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v70);
          if (DspLib::maxv(v67, v68) >= 60.0
            || (DspLib::Biquad::validate(*(__int128 **)v83, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v83 + 1) - *(_QWORD *)v83) >> 2)) & 1) == 0)
          {
            DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 552));
            DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 624));
          }
          DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v70);
          DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&__src);
        }
        else
        {
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 552));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 624));
        }
        if (*(_BYTE *)(a1 + 624))
        {
          if (*(_DWORD *)(a1 + 548) == 3)
            v69 = DspLib::LoudspeakerModel::Algorithm::processDualSerial;
          else
            v69 = DspLib::LoudspeakerModel::Algorithm::processDualParallel;
        }
        else
        {
          v69 = DspLib::LoudspeakerModel::Algorithm::processSingle;
        }
        *(_QWORD *)(a1 + 216) = v69;
        *(_QWORD *)(a1 + 224) = 0;
LABEL_70:
        *(_QWORD *)&__src = &v83;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
        break;
      default:
        goto LABEL_43;
    }
  }
}

void sub_1B609E828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  __p = (void *)(v25 - 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

float *DspLib::LoudspeakerModel::Algorithm::calculateThieleSmallExcursionModelCoefficients@<X0>(float *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v4;
  float *v5;
  double v6;
  double v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  long double v37;
  long double v38;
  double v39;
  long double v40;
  long double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  float v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  char v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;

  v4 = result[15] * result[15];
  if (v4 == 0.0)
    goto LABEL_6;
  v5 = result;
  v6 = result[13];
  v7 = v6 * v6;
  if (v6 * v6 == 0.0)
    goto LABEL_6;
  v8 = result[12];
  if (v8 == 0.0)
    goto LABEL_6;
  v9 = result[14] / 140002.31 / v4;
  if (v9 == 0.0)
    goto LABEL_6;
  v10 = result[9];
  v11 = result[11];
  v12 = v8;
  v13 = a3 * a3;
  v14 = a3 * a3 * a3;
  v15 = result[5] / v7;
  v16 = result[6] / v7;
  v17 = 1.0 / v12 + 1.0 / v9;
  v18 = v16 * v10;
  v19 = v16 * v11 + v15 * v10;
  v20 = v16 * v17 + v15 * v11 + 1.0;
  v21 = v15 * v17;
  v22 = (a3 + a3) * v20;
  v23 = v13 * 4.0;
  v24 = v15 * v17 + v22 + v13 * 4.0 * v19 + v14 * 8.0 * v18;
  if (v24 == 0.0)
  {
LABEL_6:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  else
  {
    v25 = v21 - v22 + v23 * v19 - v14 * 8.0 * v18;
    v26 = v14 * 24.0;
    v27 = 1.0 / v24;
    v28 = (v22 + v21 * 3.0 - v23 * v19 - v26 * v18) * (1.0 / v24);
    v29 = (-(v22 - v21 * 3.0) - v23 * v19 + v26 * v18) * (1.0 / v24);
    v30 = (v29 - v28 * v28 / 3.0) * ((v29 - v28 * v28 / 3.0) * (v29 - v28 * v28 / 3.0));
    v31 = v25 * (1.0 / v24) + v28 * (v28 * (v28 + v28)) / 27.0 - v28 * v29 / 3.0;
    v32 = sqrt(fabs(v30 / 27.0 + v31 * v31 * 0.25));
    v33 = v31 * -0.5;
    v34 = v31 * -0.5 + v32;
    v35 = 0.0;
    v36 = 0.0;
    if (v34 != 0.0)
    {
      if (v34 < 0.0)
      {
        v37 = log(-v34);
        v36 = -exp(v37 * 0.333333343);
      }
      else
      {
        v38 = log(v34);
        v36 = exp(v38 * 0.333333343);
      }
    }
    v39 = v33 - v32;
    if (v33 - v32 != 0.0)
    {
      if (v33 - v32 < 0.0)
      {
        v40 = log(-v39);
        v35 = -exp(v40 * 0.333333343);
      }
      else
      {
        v41 = log(v39);
        v35 = exp(v41 * 0.333333343);
      }
    }
    v42 = v28 / -3.0 + v36 + v35;
    v43 = v28 / -3.0 - (v36 + v35) * 0.5;
    v44 = 0.9999;
    if (v42 <= 0.9999)
      v44 = v28 / -3.0 + v36 + v35;
    if (v42 >= -0.9999)
      v45 = v44;
    else
      v45 = -0.9999;
    v46 = 0.999;
    if (v43 <= 0.999)
      v46 = v28 / -3.0 - (v36 + v35) * 0.5;
    if (v43 >= -0.9999)
      v47 = v46;
    else
      v47 = -0.9999;
    v48 = v27 / v6 * 8.0;
    *(_QWORD *)&v54 = COERCE_UNSIGNED_INT((float)(v5[16] * v48) / v5[17]);
    DWORD2(v54) = 0;
    v49 = v45;
    *((float *)&v54 + 3) = -v49;
    v55 = xmmword_1B66282F0;
    *(float *)&v50 = v47 * -2.0;
    *(float *)&v51 = (v36 - v35) * 1.73205081 * 0.5 * ((v36 - v35) * 1.73205081 * 0.5) + v47 * v47;
    v56 = __PAIR64__(v51, v50);
    result = (float *)DspLib::Biquad::validate(&v54, 2);
    if ((result & 1) != 0)
    {
      v52 = v55;
      *(_OWORD *)a2 = v54;
      *(_OWORD *)(a2 + 16) = v52;
      *(_QWORD *)(a2 + 32) = v56;
      v53 = 1;
    }
    else
    {
      v53 = 0;
      *(_BYTE *)a2 = 0;
    }
    *(_BYTE *)(a2 + 40) = v53;
  }
  return result;
}

void std::vector<std::vector<DspLib::Biquad::Section>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DspLib::Biquad::Section>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t DspLib::LoudspeakerModel::Algorithm::calculateInversePressureModelCoefficientsForThieleSmallParameters@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  float v6;
  float v7;
  char *v8;
  float v9;
  float v10;
  float v11;
  __int128 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (*(_BYTE *)(a2 + 40))
  {
    v5 = 0;
    v7 = *(float *)(a2 + 32);
    v6 = *(float *)(a2 + 36);
    do
    {
      v8 = (char *)&v14 + v5;
      *(_DWORD *)v8 = 1065353216;
      *(_QWORD *)(v8 + 12) = 0;
      *(_QWORD *)(v8 + 4) = 0;
      v5 += 20;
    }
    while (v5 != 40);
    LODWORD(v14) = 1065353216;
    *((float *)&v14 + 1) = v7;
    *((_QWORD *)&v14 + 1) = LODWORD(v6);
    LODWORD(v15) = 0;
    v9 = a4;
    DspLib::Biquad::Design::integrator((DspLib::Biquad::Design *)2, *(float *)(result + 4), 45.0, v9, (uint64_t)&v15 + 4);
    v10 = (float)((float)(*((float *)&v15 + 1) - *((float *)&v15 + 2)) + *((float *)&v15 + 3))
        / (float)((float)(1.0 - *(float *)&v16) + *((float *)&v16 + 1));
    v11 = 1.0 / (float)((float)(1.0 - v7) + v6);
    *(float *)&v14 = v11;
    *((float *)&v14 + 1) = v11 * v7;
    *((float *)&v14 + 2) = v11 * v6;
    *((float *)&v15 + 1) = *((float *)&v15 + 1) * (float)(1.0 / v10);
    *((float *)&v15 + 2) = (float)(1.0 / v10) * *((float *)&v15 + 2);
    *((float *)&v15 + 3) = (float)(1.0 / v10) * *((float *)&v15 + 3);
    result = DspLib::Biquad::validate(&v14, 2);
    if ((result & 1) != 0)
    {
      v12 = v15;
      *(_OWORD *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v12;
      *(_QWORD *)(a3 + 32) = v16;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 40) = v13;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  return result;
}

void DspLib::LoudspeakerModel::Algorithm::importSdomainParameters_0(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, DspLibBuffer *this)
{
  char v6;
  DspLib *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  DspLib *isEqual;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float *v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  float *v45;
  char v49;
  void *v50;
  float *v51;
  float *v52;
  void *__p;
  float *v54;
  float *v55;

  v6 = 1;
  v7 = (DspLib *)DspLibBuffer::initialize(this, 2uLL, 1u);
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = 0;
    v49 = v6;
    __p = 0;
    v54 = 0;
    v55 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v11 = *(float *)(a1 + 4 * v8 + 20);
    v12 = v8 + 1;
    v13 = v8 + 9;
    do
    {
      v14 = a1 + 4 * (v12 + 2 * v10);
      v16 = *(float *)(v14 + 20);
      v15 = *(float *)(v14 + 24);
      v17 = a1 + 4 * (v13 + 2 * v10);
      v19 = *(float *)(v17 + 20);
      v18 = *(float *)(v17 + 24);
      isEqual = (DspLib *)DspLib::isEqual(v7, v11, 0.0, 1.0e-20);
      if ((isEqual & 1) == 0)
      {
        isEqual = (DspLib *)DspLib::isEqual(isEqual, v16, 0.0, 1.0e-20);
        if (!(_DWORD)isEqual
          || (isEqual = (DspLib *)DspLib::isEqual(isEqual, v15, 0.0, 1.0e-20), (isEqual & 1) == 0))
        {
          v21 = v54;
          if (v54 >= v55)
          {
            isEqual = (DspLib *)__p;
            v23 = ((char *)v54 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v25 = (char *)v55 - (_BYTE *)__p;
            if (((char *)v55 - (_BYTE *)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v55, v26);
              isEqual = (DspLib *)__p;
              v21 = v54;
            }
            else
            {
              v27 = 0;
            }
            v28 = (float *)&v27[8 * v23];
            *v28 = v16;
            v28[1] = v15;
            v29 = v28;
            if (v21 != (float *)isEqual)
            {
              do
              {
                v30 = *((_QWORD *)v21 - 1);
                v21 -= 2;
                *((_QWORD *)v29 - 1) = v30;
                v29 -= 2;
              }
              while (v21 != (float *)isEqual);
              isEqual = (DspLib *)__p;
            }
            v22 = v28 + 2;
            __p = v29;
            v54 = v28 + 2;
            v55 = (float *)&v27[8 * v26];
            if (isEqual)
              operator delete(isEqual);
          }
          else
          {
            *v54 = v16;
            v21[1] = v15;
            v22 = v21 + 2;
          }
          v54 = v22;
        }
      }
      v7 = (DspLib *)DspLib::isEqual(isEqual, v11, 0.0, 1.0e-20);
      if ((v7 & 1) == 0)
      {
        v7 = (DspLib *)DspLib::isEqual(v7, v19, 0.0, 1.0e-20);
        if (!(_DWORD)v7 || (v7 = (DspLib *)DspLib::isEqual(v7, v18, 0.0, 1.0e-20), (v7 & 1) == 0))
        {
          v31 = v51;
          if (v51 >= v52)
          {
            v7 = (DspLib *)v50;
            v33 = ((char *)v51 - (_BYTE *)v50) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v35 = (char *)v52 - (_BYTE *)v50;
            if (((char *)v52 - (_BYTE *)v50) >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v52, v36);
              v7 = (DspLib *)v50;
              v31 = v51;
            }
            else
            {
              v37 = 0;
            }
            v38 = (float *)&v37[8 * v33];
            *v38 = v19;
            v38[1] = v18;
            v39 = v38;
            if (v31 != (float *)v7)
            {
              do
              {
                v40 = *((_QWORD *)v31 - 1);
                v31 -= 2;
                *((_QWORD *)v39 - 1) = v40;
                v39 -= 2;
              }
              while (v31 != (float *)v7);
              v7 = (DspLib *)v50;
            }
            v32 = v38 + 2;
            v50 = v39;
            v51 = v38 + 2;
            v52 = (float *)&v37[8 * v36];
            if (v7)
              operator delete(v7);
          }
          else
          {
            *v51 = v19;
            v31[1] = v18;
            v32 = v31 + 2;
          }
          v51 = v32;
        }
      }
      ++v10;
    }
    while (v10 != 4);
    if (v54 != __p)
    {
      v41 = a3[1];
      if (v41 >= a3[2])
      {
        v42 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<DSPComplex>>::__construct_one_at_end[abi:ne180100]<std::vector<DSPComplex>&>((uint64_t)a3, (uint64_t)&__p);
        v42 = v41 + 24;
      }
      a3[1] = v42;
    }
    if (v51 != v50)
    {
      v43 = a4[1];
      if (v43 >= a4[2])
      {
        v44 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>(a4, (uint64_t)&v50);
      }
      else
      {
        std::vector<std::vector<DSPComplex>>::__construct_one_at_end[abi:ne180100]<std::vector<DSPComplex>&>((uint64_t)a4, (uint64_t)&v50);
        v44 = v43 + 24;
      }
      a4[1] = v44;
    }
    if (v54 != __p || (v45 = v51, v51 != v50))
    {
      DspLibBuffer::setNumFrames(this, v9 + 1);
      *(float *)DspLibBuffer::operator[](this, v9) = v11;
      v45 = (float *)v50;
      ++v9;
    }
    if (v45)
    {
      v51 = v45;
      operator delete(v45);
    }
    v7 = (DspLib *)__p;
    if (__p)
    {
      v54 = (float *)__p;
      operator delete(__p);
    }
    v6 = 0;
    v8 = 17;
  }
  while ((v49 & 1) != 0);
  std::vector<std::vector<DSPComplex>>::resize(a3, v9);
  std::vector<std::vector<DSPComplex>>::resize(a4, v9);
}

void sub_1B609F1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void DspLib::LoudspeakerModel::Algorithm::importSdomainParameters_1(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, DspLibBuffer *this)
{
  char v8;
  DspLib *isEqual;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  float v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float *v52;
  uint64_t *v53;
  char v55;
  unsigned int v56;
  void *v57;
  float *v58;
  float *v59;
  void *__p;
  float *v61;
  float *v62;

  v8 = 1;
  isEqual = (DspLib *)DspLibBuffer::initialize(this, 2uLL, 1u);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v53 = a4;
  do
  {
    v55 = v8;
    v56 = v12;
    v13 = 0;
    __p = 0;
    v61 = 0;
    v62 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v14 = 17 * v11;
    v15 = *(float *)(a1 + 68 * v11 + 20);
    v16 = DspLib::LoudspeakerModel::Parameters::Sdomain_1::kMaxNumPolesPerChannel[v11];
    if (v16 <= 1)
      v17 = 1;
    else
      v17 = v16;
    do
    {
      v18 = v14 + 1 + 2 * v13;
      v19 = *(float *)(a1 + 4 * (v18 + 5));
      v20 = *(float *)(a1 + 4 * (v18 + 6));
      isEqual = (DspLib *)DspLib::isEqual(isEqual, v15, 0.0, 1.0e-20);
      if ((isEqual & 1) == 0)
      {
        isEqual = (DspLib *)DspLib::isEqual(isEqual, v19, 0.0, 1.0e-20);
        if (!(_DWORD)isEqual
          || (isEqual = (DspLib *)DspLib::isEqual(isEqual, v20, 0.0, 1.0e-20), (isEqual & 1) == 0))
        {
          v21 = v61;
          if (v61 >= v62)
          {
            isEqual = (DspLib *)__p;
            v23 = ((char *)v61 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v25 = (char *)v62 - (_BYTE *)__p;
            if (((char *)v62 - (_BYTE *)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v62, v26);
              isEqual = (DspLib *)__p;
              v21 = v61;
            }
            else
            {
              v27 = 0;
            }
            v28 = (float *)&v27[8 * v23];
            *v28 = v19;
            v28[1] = v20;
            v29 = v28;
            if (v21 != (float *)isEqual)
            {
              do
              {
                v30 = *((_QWORD *)v21 - 1);
                v21 -= 2;
                *((_QWORD *)v29 - 1) = v30;
                v29 -= 2;
              }
              while (v21 != (float *)isEqual);
              isEqual = (DspLib *)__p;
            }
            v22 = v28 + 2;
            __p = v29;
            v61 = v28 + 2;
            v62 = (float *)&v27[8 * v26];
            if (isEqual)
              operator delete(isEqual);
          }
          else
          {
            *v61 = v19;
            v21[1] = v20;
            v22 = v21 + 2;
          }
          v61 = v22;
        }
      }
      ++v13;
    }
    while (v13 != v17);
    if ((v10 & 1) == 0)
    {
      v31 = 0;
      v32 = DspLib::LoudspeakerModel::Parameters::Sdomain_1::kMaxNumZerosPerChannel[v11];
      if (v32 <= 1)
        v33 = 1;
      else
        v33 = v32;
      v34 = v14 + 9;
      do
      {
        v35 = v34 + 2 * v31;
        v36 = *(float *)(a1 + 4 * (v35 + 5));
        v37 = *(float *)(a1 + 4 * (v35 + 6));
        isEqual = (DspLib *)DspLib::isEqual(isEqual, v15, 0.0, 1.0e-20);
        if ((isEqual & 1) == 0)
        {
          isEqual = (DspLib *)DspLib::isEqual(isEqual, v36, 0.0, 1.0e-20);
          if (!(_DWORD)isEqual
            || (isEqual = (DspLib *)DspLib::isEqual(isEqual, v37, 0.0, 1.0e-20), (isEqual & 1) == 0))
          {
            v38 = v58;
            if (v58 >= v59)
            {
              isEqual = (DspLib *)v57;
              v40 = ((char *)v58 - (_BYTE *)v57) >> 3;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v42 = (char *)v59 - (_BYTE *)v57;
              if (((char *)v59 - (_BYTE *)v57) >> 2 > v41)
                v41 = v42 >> 2;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v59, v43);
                isEqual = (DspLib *)v57;
                v38 = v58;
              }
              else
              {
                v44 = 0;
              }
              v45 = (float *)&v44[8 * v40];
              *v45 = v36;
              v45[1] = v37;
              v46 = v45;
              if (v38 != (float *)isEqual)
              {
                do
                {
                  v47 = *((_QWORD *)v38 - 1);
                  v38 -= 2;
                  *((_QWORD *)v46 - 1) = v47;
                  v46 -= 2;
                }
                while (v38 != (float *)isEqual);
                isEqual = (DspLib *)v57;
              }
              v39 = v45 + 2;
              v57 = v46;
              v58 = v45 + 2;
              v59 = (float *)&v44[8 * v43];
              if (isEqual)
                operator delete(isEqual);
            }
            else
            {
              *v58 = v36;
              v38[1] = v37;
              v39 = v38 + 2;
            }
            v58 = v39;
          }
        }
        ++v31;
      }
      while (v31 != v33);
    }
    v12 = v56;
    if (v61 != __p)
    {
      v48 = a3[1];
      if (v48 >= a3[2])
      {
        v49 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<DSPComplex>>::__construct_one_at_end[abi:ne180100]<std::vector<DSPComplex>&>((uint64_t)a3, (uint64_t)&__p);
        v49 = v48 + 24;
      }
      a3[1] = v49;
    }
    if (v58 != v57)
    {
      v50 = v53[1];
      if (v50 >= v53[2])
      {
        v51 = std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>(v53, (uint64_t)&v57);
      }
      else
      {
        std::vector<std::vector<DSPComplex>>::__construct_one_at_end[abi:ne180100]<std::vector<DSPComplex>&>((uint64_t)v53, (uint64_t)&v57);
        v51 = v50 + 24;
      }
      v53[1] = v51;
    }
    if (v61 != __p || (v52 = v58, v58 != v57))
    {
      DspLibBuffer::setNumFrames(this, v56 + 1);
      *(float *)DspLibBuffer::operator[](this, v56) = v15;
      v52 = (float *)v57;
      v12 = v56 + 1;
    }
    if (v52)
    {
      v58 = v52;
      operator delete(v52);
    }
    isEqual = (DspLib *)__p;
    if (__p)
    {
      v61 = (float *)__p;
      operator delete(__p);
    }
    v8 = 0;
    v10 = 1;
    v11 = 1;
  }
  while ((v55 & 1) != 0);
  std::vector<std::vector<DSPComplex>>::resize(a3, v12);
  std::vector<std::vector<DSPComplex>>::resize(v53, v12);
}

void sub_1B609F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void DspLib::LoudspeakerModel::Algorithm::calculatedInversePressurFilterForSdomain_1_Parameters(char **a1, char **a2, vp::utility::CPU_Profiler *this, unsigned int a4, uint64_t *a5, double a6, double a7, double a8, double a9)
{
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  char *v26;
  float *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  float *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  double v57;
  float v58;
  float v59;
  float *v60;
  float *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  float *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  char *v84;
  float v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  double v90;
  double v91;
  float32x2_t *v92;
  float v93;
  float v94;
  float v95;
  char v96[12];
  uint64_t v97;
  _QWORD v98[3];
  void *v99[3];
  void *v100;
  char *v101;
  char *v102;
  void *__p;
  float *v104;
  float *v105;
  _BYTE __src[24];
  __int128 v107;
  _BYTE v108[32];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v19 = *a1;
  v18 = a1[1];
  v21 = *a2;
  v20 = a2[1];
  if (vp::utility::CPU_Profiler::get_cycle_count(this) != 2
    || v18 - v19 != 48
    || v20 - v21 != 48
    || (*((_QWORD *)*a1 + 4) - *((_QWORD *)*a1 + 3) == 8
      ? (v22 = *((_QWORD *)*a2 + 4) == *((_QWORD *)*a2 + 3))
      : (v22 = 0),
        !v22))
  {
    *(_DWORD *)__src = 1;
    v23 = a5[1];
    if (v23 >= a5[2])
    {
      v24 = std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<int,DspLib::Biquad::Section const&>(a5, (int *)__src, &DspLib::Biquad::kBypassSection);
    }
    else
    {
      std::vector<DspLib::Biquad::Section>::vector((_QWORD *)a5[1], 1uLL, &DspLib::Biquad::kBypassSection);
      v24 = v23 + 24;
      a5[1] = v23 + 24;
    }
    a5[1] = v24;
    return;
  }
  v25 = (float *)DspLibBuffer::operator[](this, 1uLL);
  v26 = *a1;
  v27 = (float *)*((_QWORD *)*a1 + 3);
  v28 = *v27;
  v29 = v28 * -2.0;
  v30 = (v27[1] * v27[1] + v28 * v28 + (double)a4 * *v25 * (a7 / a6)) * -4.0 + v29 * v29;
  if (v30 < 0.0)
    v31 = 0.0;
  else
    v31 = 1.0;
  if (v30 >= 0.0)
    v32 = 0.0;
  else
    v32 = 1.0;
  __p = 0;
  v104 = 0;
  v105 = 0;
  v101 = 0;
  v102 = 0;
  v100 = 0;
  v33 = *(_QWORD *)v26;
  if (*((_QWORD *)v26 + 1) != *(_QWORD *)v26)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      if (v34 >= v102)
      {
        v37 = (v34 - (_BYTE *)v100) >> 3;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v38 = (v102 - (_BYTE *)v100) >> 2;
        if (v38 <= v37 + 1)
          v38 = v37 + 1;
        if ((unint64_t)(v102 - (_BYTE *)v100) >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v102, v39);
        else
          v40 = 0;
        v41 = &v40[8 * v37];
        *(_QWORD *)v41 = *(_QWORD *)(v33 + 8 * v35);
        v34 = v41 + 8;
        v43 = (char *)v100;
        v42 = v101;
        if (v101 != v100)
        {
          do
          {
            v44 = *((_QWORD *)v42 - 1);
            v42 -= 8;
            *((_QWORD *)v41 - 1) = v44;
            v41 -= 8;
          }
          while (v42 != v43);
          v42 = (char *)v100;
        }
        v100 = v41;
        v101 = v34;
        v102 = &v40[8 * v39];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_QWORD *)v34 = *(_QWORD *)(v33 + 8 * v35);
        v34 += 8;
      }
      v101 = v34;
      v33 = *(_QWORD *)*a1;
      v35 = ++v36;
    }
    while (v36 < (unint64_t)((*((_QWORD *)*a1 + 1) - v33) >> 3));
  }
  v45 = *(_QWORD *)*a2;
  if (*((_QWORD *)*a2 + 1) == v45)
  {
    v48 = v104;
  }
  else
  {
    v46 = 0;
    v47 = 0;
    v48 = v104;
    do
    {
      if (v48 >= v105)
      {
        v49 = ((char *)v48 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v50 = ((char *)v105 - (_BYTE *)__p) >> 2;
        if (v50 <= v49 + 1)
          v50 = v49 + 1;
        if ((unint64_t)((char *)v105 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v105, v51);
        else
          v52 = 0;
        v53 = (float *)&v52[8 * v49];
        *(_QWORD *)v53 = *(_QWORD *)(v45 + 8 * v46);
        v48 = v53 + 2;
        v55 = (char *)__p;
        v54 = (char *)v104;
        if (v104 != __p)
        {
          do
          {
            v56 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v53 - 1) = v56;
            v53 -= 2;
          }
          while (v54 != v55);
          v54 = (char *)__p;
        }
        __p = v53;
        v104 = v48;
        v105 = (float *)&v52[8 * v51];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v48 = *(_QWORD *)(v45 + 8 * v46);
        v48 += 2;
      }
      v104 = v48;
      v45 = *(_QWORD *)*a2;
      v46 = ++v47;
    }
    while (v47 < (unint64_t)((*((_QWORD *)*a2 + 1) - v45) >> 3));
  }
  v57 = sqrt(fabs(v30)) * 0.5;
  v58 = v29 * -0.5 + v57 * v31;
  v59 = v57 * v32;
  if (v48 >= v105)
  {
    v61 = (float *)__p;
    v62 = ((char *)v48 - (_BYTE *)__p) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      goto LABEL_103;
    v64 = (char *)v105 - (_BYTE *)__p;
    if (((char *)v105 - (_BYTE *)__p) >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v105, v65);
      v61 = (float *)__p;
      v48 = v104;
    }
    else
    {
      v66 = 0;
    }
    v67 = (float *)&v66[8 * v62];
    v68 = &v66[8 * v65];
    *v67 = v58;
    v67[1] = v59;
    v60 = v67 + 2;
    if (v48 != v61)
    {
      do
      {
        v69 = *((_QWORD *)v48 - 1);
        v48 -= 2;
        *((_QWORD *)v67 - 1) = v69;
        v67 -= 2;
      }
      while (v48 != v61);
      v61 = (float *)__p;
    }
    __p = v67;
    v104 = v60;
    v105 = (float *)v68;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *v48 = v58;
    v48[1] = v59;
    v60 = v48 + 2;
  }
  v104 = v60;
  v70 = (_QWORD *)*((_QWORD *)*a1 + 3);
  v71 = v101;
  if (v101 >= v102)
  {
    v73 = (v101 - (_BYTE *)v100) >> 3;
    if (!((unint64_t)(v73 + 1) >> 61))
    {
      v74 = (v102 - (_BYTE *)v100) >> 2;
      if (v74 <= v73 + 1)
        v74 = v73 + 1;
      if ((unint64_t)(v102 - (_BYTE *)v100) >= 0x7FFFFFFFFFFFFFF8)
        v75 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v75 = v74;
      if (v75)
        v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v102, v75);
      else
        v76 = 0;
      v77 = &v76[8 * v73];
      v78 = &v76[8 * v75];
      *(_QWORD *)v77 = *v70;
      v72 = v77 + 8;
      v80 = (char *)v100;
      v79 = v101;
      if (v101 != v100)
      {
        do
        {
          v81 = *((_QWORD *)v79 - 1);
          v79 -= 8;
          *((_QWORD *)v77 - 1) = v81;
          v77 -= 8;
        }
        while (v79 != v80);
        v79 = (char *)v100;
      }
      v100 = v77;
      v101 = v72;
      v102 = v78;
      if (v79)
        operator delete(v79);
      goto LABEL_91;
    }
LABEL_103:
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)v101 = *v70;
  v72 = v71 + 8;
LABEL_91:
  v101 = v72;
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  std::vector<std::vector<DspLib::Biquad::Section>>::resize(a5, 1uLL);
  DspLib::Biquad::Design::fromSDomain((uint64_t)__p, ((char *)v104 - (_BYTE *)__p) >> 3, (uint64_t)v100, (v72 - (_BYTE *)v100) >> 3, (float32x2_t **)__src, 1.0, a9);
  v82 = (_QWORD *)*a5;
  v83 = *(void **)*a5;
  if (v83)
  {
    v82[1] = v83;
    operator delete(v83);
    *v82 = 0;
    v82[1] = 0;
    v82[2] = 0;
  }
  *(_OWORD *)v82 = *(_OWORD *)__src;
  v82[2] = *(_QWORD *)&__src[16];
  v84 = (char *)*a5;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a5 + 8) - *(_QWORD *)*a5) >> 2) > 2)
  {
    v85 = a8;
    v86 = a9;
    DspLib::Biquad::Design::integrator((DspLib::Biquad::Design *)2, v85, 100.0, v86, (uint64_t)v96);
    v87 = *a5;
    v88 = *(_QWORD *)*a5;
    *(_QWORD *)(v88 + 52) = v97;
    v89 = a9 * 0.5;
    v95 = v89;
    __src[0] = 0;
    *(_OWORD *)&__src[8] = 0u;
    v107 = 0u;
    memset(v108, 0, sizeof(v108));
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)__src, 1uLL, 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v87 + 8) - v88) >> 2));
    DspLib::Biquad::Filter::setCoefficients((uint64_t)__src, *(_QWORD *)*a5, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a5 + 8) - *(_QWORD *)*a5) >> 2), 0, 0x41uLL);
    v94 = 0.0;
    DspLib::Biquad::amplitudeResponse(__src, (uint64_t)&v95, 1uLL, (uint64_t)&v94, 1, 0, a9, v90, v91);
    v92 = *(float32x2_t **)*a5;
    v93 = 1.0 / v94;
    *v92 = vmul_n_f32(*v92, 1.0 / v94);
    v92[1].f32[0] = v93 * v92[1].f32[0];
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v108[8]);
    if ((_QWORD)v107)
    {
      *((_QWORD *)&v107 + 1) = v107;
      operator delete((void *)v107);
    }
  }
  else
  {
    *(_DWORD *)&__src[16] = 0;
    *(_OWORD *)__src = xmmword_1B66280D0;
    std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(v84, __src, (uint64_t)&__src[20], 1uLL);
  }
  *(_QWORD *)__src = v98;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  *(_QWORD *)__src = v99;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  if (v100)
  {
    v101 = (char *)v100;
    operator delete(v100);
  }
  if (__p)
  {
    v104 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1B609FE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DspLib::LoudspeakerModel::Algorithm::frequencyResponse(DspLib::LoudspeakerModel::Algorithm *this, const DspLibBuffer *a2, DspLibBuffer *a3)
{
  int v6;
  unint64_t cycle_count;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  const float *v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  float *v27;
  double v28;
  double v29;
  unint64_t v30;
  float *v31;
  vDSP_Length v32;
  int v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  float *v45;
  float v46;
  float v47;
  BOOL v48;
  float v49;
  float *v50;
  _QWORD *v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  _QWORD *v59;
  double v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  unint64_t v67;
  float *v68;
  vDSP_Length v69;
  float *v70;
  vDSP_Length v71;
  const float *v72;
  const float *v73;
  float v74;
  float v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  size_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD v85[3];
  _BYTE v86[96];
  DSPSplitComplex __A;
  vDSP_Length v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(DspLib::LoudspeakerModel::Algorithm *))(*(_QWORD *)this + 96))(this);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  if (v6)
  {
    if (*((_BYTE *)this + 624))
      v8 = 3;
    else
      v8 = 1;
    DspLibBuffer::initialize(a3, cycle_count, v8);
    v9 = vp::utility::CPU_Profiler::get_cycle_count(a2);
    DspLibBuffer::setNumFrames(a3, v9);
    v10 = *((_DWORD *)this + 136);
    switch(v10)
    {
      case 2:
        v33 = *((_DWORD *)this + 137);
        switch(v33)
        {
          case 1:
            v59 = (_QWORD *)((char *)this + 552);
            v60 = *((double *)this + 3);
            v61 = DspLibBuffer::channel(a2, 0);
            v62 = vp::utility::CPU_Profiler::get_cycle_count(a3);
            v63 = DspLibBuffer::channel(a3, 0);
            v64 = vp::utility::CPU_Profiler::get_cycle_count(a3);
            DspLib::Biquad::amplitudeResponse(v59, v61, v62, v63, v64, 0, v60, v65, v66);
            break;
          case 2:
            v67 = vp::utility::CPU_Profiler::get_cycle_count(a2);
            DspLibBuffer::initialize(a3, v67, 1u);
            v68 = (float *)DspLibBuffer::channel(a3, 0);
            v69 = vp::utility::CPU_Profiler::get_cycle_count(a3);
            DspLib::clear(v68, v69);
            break;
          case 3:
            v34 = vp::utility::CPU_Profiler::get_cycle_count(a2);
            DspLibBuffer::initialize(a3, v34, 1u);
            DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__A, 0, 0);
            v35 = *((double *)this + 3);
            v36 = DspLibBuffer::channel(a2, 0);
            v37 = vp::utility::CPU_Profiler::get_cycle_count(a2);
            DspLib::Biquad::complexResponse((_QWORD *)this + 69, v36, v37, (DspLib::ComplexVector *)&__A, 0, v35, v38, v39);
            DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v86, 0, 0);
            v40 = *((double *)this + 3);
            v41 = DspLibBuffer::channel(a2, 0);
            v42 = vp::utility::CPU_Profiler::get_cycle_count(a2);
            DspLib::Biquad::complexResponse((_QWORD *)this + 78, v41, v42, (DspLib::ComplexVector *)v86, 0, v40, v43, v44);
            v45 = (float *)*((_QWORD *)this + 6);
            v46 = v45[37];
            v47 = v45[38] / v46;
            v48 = v46 == 0.0;
            v49 = 1.0;
            if (!v48)
              v49 = v47;
            DspLib::operator*=(v86, v45[35] * v49);
            DspLib::operator*=(v86, &__A);
            DspLib::operator+=(&__A, v86);
            v50 = (float *)DspLibBuffer::channel(a3, 0);
            vp::utility::CPU_Profiler::get_cycle_count(a3);
            vDSP_zvabs(&__A, 1, v50, 1, v88);
            DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v86);
            DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__A);
            break;
        }
        v70 = (float *)DspLibBuffer::channel(a3, 0);
        v71 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        v72 = (const float *)DspLibBuffer::channel(a2, 0);
        vp::utility::CPU_Profiler::get_cycle_count(a3);
        DspLib::multiply(v70, v71, v72);
        v73 = (const float *)DspLibBuffer::channel(a2, 0);
        vp::utility::CPU_Profiler::get_cycle_count(a3);
        DspLib::multiply(v70, v71, v73);
        v74 = DspLib::maxv(v70, v71);
        if (v74 == 0.0)
          v75 = 1.0;
        else
          v75 = 1.0 / v74;
        DspLib::multiply(v70, v71, v75);
        break;
      case 1:
        v51 = (_QWORD *)((char *)this + 552);
        v52 = *((double *)this + 3);
        v53 = DspLibBuffer::channel(a2, 0);
        v54 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        v55 = DspLibBuffer::channel(a3, 0);
        v56 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        DspLib::Biquad::amplitudeResponse(v51, v53, v54, v55, v56, 0, v52, v57, v58);
        break;
      case 0:
        v11 = DspLibBuffer::numChannels(a3);
        MEMORY[0x1E0C80A78](v11);
        v14 = (char *)&v85[-1] - v13;
        if (v12 >= 0x200)
          v15 = 512;
        else
          v15 = v12;
        bzero((char *)&v85[-1] - v13, v15);
        if (DspLibBuffer::numChannels(a3))
        {
          v16 = 0;
          do
          {
            *(_QWORD *)&v14[8 * v16] = DspLibBuffer::channel(a3, v16);
            ++v16;
          }
          while (v16 < DspLibBuffer::numChannels(a3));
        }
        DspLibBuffer::numChannels(a3);
        v17 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        v18 = *((double *)this + 3);
        v19 = DspLibBuffer::channel(a2, 0);
        v20 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        v21 = *(const float **)v14;
        DspLib::Biquad::amplitudeResponse((_QWORD *)this + 69, v19, v20, *(_QWORD *)v14, v17, 0, v18, v22, v23);
        if (*((_BYTE *)this + 624))
        {
          v24 = *((double *)this + 3);
          v25 = DspLibBuffer::channel(a2, 0);
          v26 = vp::utility::CPU_Profiler::get_cycle_count(a3);
          v27 = (float *)*((_QWORD *)v14 + 2);
          DspLib::Biquad::amplitudeResponse((_QWORD *)this + 78, v25, v26, (uint64_t)v27, v17, 0, v24, v28, v29);
          if (*((_DWORD *)this + 137) == 3)
          {
            DspLibBuffer::channelBuffer(a3, 0, (uint64_t)&__A);
            DspLibBuffer::channelBuffer(a3, 1u, (uint64_t)v86);
            DspLibBuffer::operator=((uint64_t)v86, (const DspLibBuffer *)&__A);
            DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v86);
            DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&__A);
            DspLib::multiply(*((float **)v14 + 1), v17, v27);
          }
          else
          {
            DspLibBuffer::channelBuffer(a3, 2u, (uint64_t)&__A);
            DspLibBuffer::channelBuffer(a3, 1u, (uint64_t)v86);
            DspLibBuffer::operator=((uint64_t)v86, (const DspLibBuffer *)&__A);
            DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v86);
            DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&__A);
            DspLib::divide(v27, v17, v21);
          }
        }
        break;
    }
    v76 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v76);
    v79 = (char *)&v85[-1] - v78;
    if (v77 >= 0x200)
      v80 = 512;
    else
      v80 = v77;
    bzero((char *)&v85[-1] - v78, v80);
    if (DspLibBuffer::numChannels(a3))
    {
      v81 = 0;
      do
      {
        *(_QWORD *)&v79[8 * v81] = DspLibBuffer::channel(a3, v81);
        ++v81;
      }
      while (v81 < DspLibBuffer::numChannels(a3));
    }
    v82 = DspLibBuffer::numChannels(a3);
    v83 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v85[0] = v79;
    v85[1] = v82;
    v85[2] = v83;
    DspLib::amp2dBSafe(v85, 1.0e-20);
  }
  else
  {
    DspLibBuffer::initialize(a3, cycle_count, 1u);
    v30 = vp::utility::CPU_Profiler::get_cycle_count(a2);
    DspLibBuffer::setNumFrames(a3, v30);
    v31 = (float *)DspLibBuffer::channel(a3, 0);
    v32 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    DspLib::fill(v31, v32, -120.0);
  }
}

void sub_1B60A05A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 - 208));
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerModel::Algorithm::processDualSerial(uint64_t a1, __int128 *a2, uint64_t a3)
{
  float **v4;
  float **v5;
  uint64_t v6;
  float **v7;
  float **v8;
  float **v9[3];
  _QWORD v10[3];
  float **v11[3];
  __int128 v12;
  uint64_t v13;

  v4 = *(float ***)a3;
  v5 = *(float ***)(a3 + 16);
  v7 = (float **)*((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  v8 = (float **)(*(_QWORD *)a3 + 8 * *(_QWORD *)(a3 + 8) - 8 * (_QWORD)v7);
  v12 = *a2;
  v13 = v6;
  v11[0] = v4;
  v11[1] = v7;
  v11[2] = v5;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 552), (uint64_t)&v12, v11);
  v10[0] = v4;
  v10[1] = v7;
  v10[2] = v5;
  v9[0] = v8;
  v9[1] = v7;
  v9[2] = v5;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 624), (uint64_t)v10, v9);
}

void DspLib::LoudspeakerModel::Algorithm::processDualParallel(uint64_t a1, __int128 *a2, uint64_t a3)
{
  float **v5;
  float **v6;
  uint64_t v7;
  float **v8;
  float **v9;
  float **v10[3];
  __int128 v11;
  uint64_t v12;
  float **v13[3];
  __int128 v14;
  uint64_t v15;

  v5 = *(float ***)a3;
  v6 = *(float ***)(a3 + 16);
  v8 = (float **)*((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v9 = (float **)(*(_QWORD *)a3 + 8 * *(_QWORD *)(a3 + 8) - 8 * (_QWORD)v8);
  v14 = *a2;
  v15 = v7;
  v13[0] = v9;
  v13[1] = v8;
  v13[2] = v6;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 624), (uint64_t)&v14, v13);
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v10[0] = v5;
  v10[1] = v8;
  v10[2] = v6;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 552), (uint64_t)&v11, v10);
}

void DspLib::LoudspeakerModel::Algorithm::processSingle(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  v3 = *a3;
  v4 = *((_QWORD *)a3 + 2);
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 552), (uint64_t)&v5, (float ***)&v3);
}

void DspLib::LoudspeakerModel::Algorithm::copyStatesFrom(DspLib::LoudspeakerModel::Algorithm *this, const DspLib::LoudspeakerModel::Algorithm *a2)
{
  DspLib::Biquad::Filter::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 552), (const DspLib::LoudspeakerModel::Algorithm *)((char *)a2 + 552));
  if (*((_BYTE *)this + 624))
    DspLib::Biquad::Filter::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 624), (const DspLib::LoudspeakerModel::Algorithm *)((char *)a2 + 624));
}

void DspLib::LoudspeakerModel::Algorithm::reset(DspLib::LoudspeakerModel::Algorithm *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 600));
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 672));
}

uint64_t DspLib::LoudspeakerModel::Algorithm::processBlock(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  uint64_t result;
  uint64_t (*v7)(_QWORD *, __int128 *, __int128 *);
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 96))(a1);
  if ((_DWORD)result)
  {
    v7 = (uint64_t (*)(_QWORD *, __int128 *, __int128 *))a1[27];
    v8 = a1[28];
    v9 = (_QWORD *)((char *)a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *, __int128 *, __int128 *))(*v9 + v7);
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    v10 = *a3;
    v11 = *((_QWORD *)a3 + 2);
    return v7(v9, &v12, &v10);
  }
  return result;
}

_QWORD *DspLib::LoudspeakerModel::Algorithm::processBlock(DspLib::LoudspeakerModel::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(DspLib::LoudspeakerModel::Algorithm *))(*(_QWORD *)this + 96))(this)
    || !vp::utility::CPU_Profiler::get_cycle_count(a2))
  {
    return DspLibBuffer::setNumFrames(a3, 0);
  }
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  v7 = DspLibBuffer::numChannels(a2);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v24 - v9;
  if (v8 >= 0x200)
    v11 = 512;
  else
    v11 = v8;
  bzero((char *)&v24 - v9, v11);
  if (DspLibBuffer::numChannels(a2))
  {
    v12 = 0;
    do
    {
      *(_QWORD *)&v10[8 * v12] = DspLibBuffer::channel(a2, v12);
      ++v12;
    }
    while (v12 < DspLibBuffer::numChannels(a2));
  }
  v13 = DspLibBuffer::numChannels(a2);
  v14 = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v15 = DspLibBuffer::numChannels(a3);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v24 - v17;
  if (v16 >= 0x200)
    v19 = 512;
  else
    v19 = v16;
  bzero((char *)&v24 - v17, v19);
  if (DspLibBuffer::numChannels(a3))
  {
    v20 = 0;
    do
    {
      *(_QWORD *)&v18[8 * v20] = DspLibBuffer::channel(a3, v20);
      ++v20;
    }
    while (v20 < DspLibBuffer::numChannels(a3));
  }
  v21 = DspLibBuffer::numChannels(a3);
  v22 = vp::utility::CPU_Profiler::get_cycle_count(a3);
  *(_QWORD *)&v27 = v10;
  *((_QWORD *)&v27 + 1) = v13;
  v28 = v14;
  *(_QWORD *)&v25 = v18;
  *((_QWORD *)&v25 + 1) = v21;
  v26 = v22;
  return (_QWORD *)DspLib::LoudspeakerModel::Algorithm::processBlock(this, &v27, &v25);
}

void std::vector<std::vector<DSPComplex>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DSPComplex>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t DspLib::LoudspeakerModel::Algorithm::parametersAreValid(DspLib::LoudspeakerModel::Algorithm *this)
{
  return *((unsigned __int8 *)this + 552);
}

float DspLib::LoudspeakerModel::Algorithm::parameterBounds(DspLib::LoudspeakerModel::Algorithm *this, uint64_t a2)
{
  return *((float *)this + a2 + 58);
}

uint64_t DspLib::AlgorithmBase::numStatus(DspLib::AlgorithmBase *this)
{
  return 0;
}

void std::vector<std::vector<DspLib::Biquad::Section>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B60A0D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::reverse_iterator<std::vector<DspLib::Biquad::Section>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

char *std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x666666666666666)
      v12 = 0xCCCCCCCCCCCCCCCLL;
    else
      v12 = v11;
    result = std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<int,DspLib::Biquad::Section const&>(uint64_t *a1, int *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  std::vector<DspLib::Biquad::Section>::vector(v16, *a2, a3);
  v17 = v16 + 24;
  std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1B60A10B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<DspLib::Biquad::Section>::vector(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 20 * a2;
    v8 = 20 * a2;
    do
    {
      v9 = *a3;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)a3 + 4);
      *(_OWORD *)v6 = v9;
      v6 += 20;
      v8 -= 20;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B60A113C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<DSPComplex>>::__construct_one_at_end[abi:ne180100]<std::vector<DSPComplex>&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B60A11A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DSPComplex>>::__emplace_back_slow_path<std::vector<DSPComplex>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<DSPComplex>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B60A12A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<DSPComplex>::__init_with_size[abi:ne180100]<DSPComplex*,DSPComplex*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B60A1318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<DSPComplex>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>,std::reverse_iterator<std::vector<DSPComplex>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DSPComplex>>,std::reverse_iterator<std::vector<DSPComplex>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<DSPComplex>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<DSPComplex>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B60A15CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DspLib::RMS::initialize(DspLib::RMS *this, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v13;
  int v14;

  v3 = *((_QWORD *)this + 3);
  v5 = v3 != a2 || *((_BYTE *)this + 16) == 0;
  if (a2 >= 0x41)
  {
    v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/RMS/dsp/DspLibRMS.cpp");
    v14 = 28;
LABEL_22:
    printf("DSP Sound assertion in %s at line %d\n", v13, v14);
    ++DspLibDebug::mAssertCounter;
    return v5;
  }
  if (!a2)
  {
    v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/RMS/dsp/DspLibRMS.cpp");
    v14 = 29;
    goto LABEL_22;
  }
  v8 = a2;
  *((_QWORD *)this + 3) = a2;
  if (a3 <= 0.0)
  {
    v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/RMS/dsp/DspLibRMS.cpp");
    v14 = 31;
    goto LABEL_22;
  }
  v5 = v5 | !DspLib::isEqual(this, *((double *)this + 4), a3, 1.0e-20);
  *((double *)this + 4) = a3;
  std::vector<float>::resize((uint64_t)this + 112, *((_QWORD *)this + 3));
  std::vector<float>::resize((uint64_t)this + 88, *((_QWORD *)this + 3));
  std::vector<float>::resize((uint64_t)this + 48, *((_QWORD *)this + 3));
  if (v3 == v8)
  {
    *((_BYTE *)this + 16) = 1;
    DspLib::RMS::setExcludeChannelMask((uint64_t)this, *((_DWORD *)this + 18));
    DspLib::RMS::setParameters((uint64_t)this, *((_DWORD *)this + 10), *((float *)this + 11));
  }
  else
  {
    v9 = *((_QWORD *)this + 3);
    if (v9 > 8)
    {
      v10 = (_BYTE *)*((_QWORD *)this + 6);
      v11 = (_BYTE *)*((_QWORD *)this + 7);
      if (v10 != v11)
        memset_pattern16(v10, &unk_1B6627B80, ((v11 - v10 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
    else if (v9)
    {
      memcpy(*((void **)this + 6), &DspLib::kITU1770Weights, 4 * v9);
    }
    *((_BYTE *)this + 16) = 1;
    DspLib::RMS::setExcludeChannelMask((uint64_t)this, *((_DWORD *)this + 18));
    DspLib::RMS::setParameters((uint64_t)this, *((_DWORD *)this + 10), *((float *)this + 11));
    DspLib::RMS::reset(this);
  }
  return v5;
}

uint64_t DspLib::RMS::setExcludeChannelMask(uint64_t this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;

  if (*(_BYTE *)(this + 16))
  {
    v2 = *(_QWORD *)(this + 24);
    if (v2 < 9)
    {
      *(_DWORD *)(this + 72) = 0;
    }
    else
    {
      v3 = 0;
      *(_DWORD *)(this + 72) = a2;
      v4 = *(_QWORD *)(this + 48);
      do
      {
        if (((a2 >> v3) & 1) != 0)
          v5 = 0.0;
        else
          v5 = 1.0;
        *(float *)(v4 + 4 * v3++) = v5;
      }
      while (v2 > v3);
    }
  }
  else
  {
    *(_DWORD *)(this + 72) = a2;
  }
  return this;
}

void DspLib::RMS::setParameters(uint64_t a1, int a2, float a3)
{
  int v3;
  int v4;
  float v5;
  float v6;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  float **v13;
  float **v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  int v24;
  void *v25;

  if (a2 >= 2)
    v3 = 2;
  else
    v3 = a2;
  v4 = v3 & ~(v3 >> 31);
  *(_DWORD *)(a1 + 40) = v4;
  v5 = 100000.0;
  if (a3 <= 100000.0)
    v5 = a3;
  if (a3 >= 0.1)
    v6 = v5;
  else
    v6 = 0.1;
  *(float *)(a1 + 44) = v6;
  if (*(_BYTE *)(a1 + 16))
  {
    v8 = *(double *)(a1 + 32) * v6 / 1000.0;
    if ((v4 - 1) >= 2)
    {
      if (!v4)
      {
        std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 160));
        v17 = v8;
        v18 = expf(-2.2 / v17);
        *(float *)(a1 + 76) = v18;
        *(float *)(a1 + 80) = 1.0 - v18;
        v19 = *(_QWORD *)(a1 + 24);
        if (v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(a1 + 48);
          v22 = *(_QWORD *)(a1 + 88);
          do
          {
            *(float *)(v22 + 4 * v20) = *(float *)(a1 + 80) * *(float *)(v21 + 4 * v20);
            ++v20;
          }
          while (v19 > v20);
        }
      }
    }
    else
    {
      v9 = v8;
      v11 = *(_QWORD **)(a1 + 160);
      v10 = (uint64_t *)(a1 + 160);
      v12 = *(_QWORD *)(a1 + 24);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - (_QWORD)v11) >> 3) != v12
        || v9 != (uint64_t)(v11[1] - *v11) >> 2)
      {
        std::vector<std::vector<float>>::resize(v10, v12);
        v13 = *(float ***)(a1 + 160);
        v14 = *(float ***)(a1 + 168);
        while (v13 != v14)
        {
          std::vector<float>::resize((uint64_t)v13, v8);
          v15 = *v13;
          v16 = v13[1];
          v13 += 3;
          DspLib::clear(v15, v16 - v15);
        }
        *(_QWORD *)(a1 + 144) = 0;
        *(_DWORD *)(a1 + 136) = 0;
        if ((_DWORD)v9)
          v23 = 1.0 / (float)v9;
        else
          v23 = 1.0;
        *(float *)(a1 + 152) = v23;
      }
    }
    v24 = *(_DWORD *)(a1 + 40);
    if (v24)
    {
      if (v24 == 2)
      {
        v25 = DspLib::RMS::processMovingAverageMean;
      }
      else
      {
        if (v24 != 1)
          return;
        v25 = DspLib::RMS::processMovingAverage;
      }
    }
    else
    {
      v25 = DspLib::RMS::processOnePoleFilter;
    }
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void DspLib::RMS::reset(DspLib::RMS *this)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float *v6;
  uint64_t v7;

  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 46) = 730643660;
  *((_BYTE *)this + 188) = 0;
  v2 = *((_QWORD *)this + 20);
  v3 = *((_QWORD *)this + 21);
  while (v2 != v3)
  {
    v4 = *(float **)v2;
    v5 = *(_QWORD *)(v2 + 8);
    v2 += 24;
    DspLib::clear(v4, (v5 - (uint64_t)v4) >> 2);
  }
  v6 = (float *)*((_QWORD *)this + 14);
  v7 = *((_QWORD *)this + 15) - (_QWORD)v6;
  if (v7)
    DspLib::clear(v6, v7 >> 2);
}

void DspLib::RMS::processOnePoleFilter(uint64_t a1, uint64_t **a2, float *__C, vDSP_Length __N)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;

  v4 = (unint64_t)a2[2];
  if (v4)
  {
    v5 = 0;
    v6 = **a2;
    v7 = *(float **)(a1 + 112);
    v8 = *(float **)(a1 + 88);
    do
    {
      v9 = *v8;
      v10 = (float)(*(float *)(a1 + 76) * *v7) + (float)(*(float *)(v6 + 4 * v5) * *(float *)(v6 + 4 * v5));
      *v7 = v10;
      __C[v5++] = v9 * v10;
    }
    while (v4 > v5);
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (v11 >= 2)
  {
    for (i = 1; i < v11; i = (i + 1))
    {
      if (v4)
      {
        v13 = 0;
        v14 = (*a2)[i];
        v15 = *(_QWORD *)(a1 + 112);
        v16 = *(_QWORD *)(a1 + 88);
        do
        {
          v17 = *(float *)(v16 + 4 * i);
          v18 = (float)(*(float *)(a1 + 76) * *(float *)(v15 + 4 * i))
              + (float)(*(float *)(v14 + 4 * v13) * *(float *)(v14 + 4 * v13));
          *(float *)(v15 + 4 * i) = v18;
          __C[v13] = __C[v13] + (float)(v17 * v18);
          ++v13;
        }
        while (v4 > v13);
      }
    }
  }
  DspLib::add(__C, __N, 1.0e-10);
}

void DspLib::RMS::processMovingAverage(uint64_t a1, uint64_t a2, float *a3, vDSP_Length a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  const float **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  double v20;
  float v21;
  float v22;
  uint64_t v24;
  float *v25;
  vDSP_Length v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)(a1 + 160);
  v8 = v7[1] - *v7;
  if (v8)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v9 = 0;
      v10 = 0;
      v11 = v8 >> 2;
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(double *)(a1 + 144);
      v14 = *(_DWORD *)(a1 + 136);
      do
      {
        if (v12)
        {
          v15 = 0;
          v16 = *(const float ***)a2;
          v17 = *(_QWORD *)(a1 + 48);
          v18 = v7;
          do
          {
            v19 = *v18;
            v18 += 3;
            v20 = v13 - *(float *)(v19 + 4 * v14);
            v21 = (float)(v16[v15][v9] * v16[v15][v9]) * *(float *)(v17 + 4 * v15);
            *(float *)(v19 + 4 * v14) = v21;
            v13 = v20 + v21;
            ++v15;
          }
          while (v12 > v15);
          *(double *)(a1 + 144) = v13;
        }
        if (v11 > v14 + 1)
          ++v14;
        else
          v14 = 0;
        *(_DWORD *)(a1 + 136) = v14;
        v22 = v13 * *(float *)(a1 + 152) + 1.0e-10;
        a3[v9] = v22;
        v9 = ++v10;
      }
      while (*(_QWORD *)(a2 + 16) > (unint64_t)v10);
    }
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    v25 = (float *)((char *)v30 - v24);
    v26 = *(_QWORD *)(a2 + 16);
    DspLib::square(**(const float ***)a2, v26, (float *)((char *)v30 - v24));
    DspLib::multiply(v25, v26, a3, **(float **)(a1 + 48));
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v27 = 2;
      v28 = 1;
      do
      {
        DspLib::square(*(const float **)(*(_QWORD *)a2 + 8 * v28), *(_QWORD *)(a2 + 16), v25);
        DspLib::multiplyAccumulate(a3, a4, v25, *(float *)(*(_QWORD *)(a1 + 48) + 4 * v28));
        v28 = v27;
      }
      while (*(_QWORD *)(a1 + 24) > (unint64_t)v27++);
    }
  }
}

void DspLib::RMS::processMovingAverageMean(uint64_t a1, uint64_t a2, float *__C, vDSP_Length a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unsigned int v16;
  uint64_t v17;
  const float **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  float v23;
  float v24;
  unsigned int v25;
  uint64_t v26;

  v8 = *(uint64_t **)(a1 + 160);
  if (*(uint64_t **)(a1 + 168) == v8 || (v9 = v8[1], v10 = v9 - *v8, v9 == *v8))
  {
    DspLib::multiply(**(const float ***)a2, *(_QWORD *)(a2 + 16), __C, **(float **)(a1 + 48));
    if (*(_QWORD *)(a1 + 24) >= 2uLL)
    {
      v25 = 2;
      v26 = 1;
      do
      {
        DspLib::multiplyAccumulate(__C, a4, *(const float **)(*(_QWORD *)a2 + 8 * v26), *(float *)(*(_QWORD *)(a1 + 48) + 4 * v26));
        v26 = v25;
      }
      while (*(_QWORD *)(a1 + 24) > (unint64_t)v25++);
    }
  }
  else if (*(_QWORD *)(a2 + 16))
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 2;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(double *)(a1 + 144);
    v16 = *(_DWORD *)(a1 + 136);
    do
    {
      if (v14)
      {
        v17 = 0;
        v18 = *(const float ***)a2;
        v19 = *(_QWORD *)(a1 + 48);
        v20 = v8;
        do
        {
          v21 = *v20;
          v20 += 3;
          v22 = v15 - *(float *)(v21 + 4 * v16);
          v23 = v18[v17][v11] * *(float *)(v19 + 4 * v17);
          *(float *)(v21 + 4 * v16) = v23;
          v15 = v22 + v23;
          ++v17;
        }
        while (v14 > v17);
        *(double *)(a1 + 144) = v15;
      }
      if (v13 > v16 + 1)
        ++v16;
      else
        v16 = 0;
      *(_DWORD *)(a1 + 136) = v16;
      v24 = v15 * *(float *)(a1 + 152) + 1.0e-10;
      __C[v11] = v24;
      v11 = ++v12;
    }
    while (*(_QWORD *)(a2 + 16) > (unint64_t)v12);
  }
}

void DspLib::RMS::uninitialize(DspLib::RMS *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 16) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
}

void DspLib::RMS::process(uint64_t a1, __int128 *a2, const float *a3, vDSP_Length a4)
{
  void (*v7)(_QWORD *, __int128 *, const float *, vDSP_Length);
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;

  v7 = *(void (**)(_QWORD *, __int128 *, const float *, vDSP_Length))a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_QWORD *)(a1 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(void (**)(_QWORD *, __int128 *, const float *, vDSP_Length))(*v9 + v7);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v7(v9, &v10, a3, a4);
  if (*(_BYTE *)(a1 + 188))
  {
    *(float *)(a1 + 184) = DspLib::maxv(a3, a4);
    *(_BYTE *)(a1 + 188) = 0;
  }
}

BOOL DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, double a2)
{
  _BOOL8 result;

  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 792), 0);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_WORD *)this + 202) = 0;
  *((_QWORD *)this + 54) = 1092616192;
  result = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
  *((_BYTE *)this + 42) = 1;
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t j;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  DspLib::ComplexSpan *v25;
  _BYTE v28[4];
  float v29;
  float v30;
  int v31;
  _QWORD v32[3];
  _QWORD v33[5];
  DSPSplitComplex __A;
  uint64_t v35;
  _QWORD v36[5];
  char v37;
  char v38;
  uint64_t v39;
  DSPComplex v40;
  DSPComplex v41;
  DSPComplex v42;

  v39 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 10) <= 4uLL)
    v1 = 4;
  else
    v1 = *((_QWORD *)this + 10);
  v2 = MEMORY[0x1E0C80A78](this);
  MEMORY[0x1E0C80A78](v2);
  v3 = 0;
  v4 = 0;
  v36[0] = v6;
  v36[1] = &v28[-v5];
  v36[2] = 3 * v1;
  v36[3] = 3;
  *(_QWORD *)(v7 + 32) = v1;
  __A.realp = (float *)&v38;
  __A.imagp = (float *)&v37;
  v35 = 3;
  do
  {
    for (i = 0; i != 3; ++i)
    {
      v9 = (float)rand() * 4.6566e-10;
      v40.imag = (float)rand() * 4.6566e-10;
      v40.real = v9;
      DspLib::ComplexSpan::setElement(&__A, i, v40);
    }
    DspLib::ComplexMatrixSpan::setColumn((DspLib::ComplexMatrixSpan *)v36, v3, &__A);
    v3 = ++v4;
  }
  while (v1 > v4);
  v11 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v12 = 0;
  v13 = 0;
  v33[0] = v14;
  v33[1] = &v28[-v15];
  v33[2] = 3 * v1;
  v33[3] = v1;
  v33[4] = 3;
  do
  {
    for (j = 0; j != 3; ++j)
    {
      v17 = (float)rand() * 4.6566e-10;
      v41.imag = (float)rand() * 4.6566e-10;
      v41.real = v17;
      DspLib::ComplexSpan::setElement(&__A, j, v41);
    }
    DspLib::ComplexMatrixSpan::setRow((DspLib::ComplexMatrixSpan *)v33, v12, &__A);
    v12 = ++v13;
  }
  while (v1 > v13);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  v20 = 0;
  v32[0] = v22;
  v32[1] = &v28[-v21];
  v23 = 1;
  v32[2] = v1;
  do
  {
    v24 = (float)rand() * 4.6566e-10;
    v42.imag = (float)rand() * 4.6566e-10;
    v42.real = v24;
    DspLib::ComplexSpan::setElement(v32, v20, v42);
    v20 = v23;
  }
  while (v1 > v23++);
  v31 = 0;
  v30 = 0.0;
  return DspLib::LoudspeakerSystemIDV2::updateModelParameters((DspLib::LoudspeakerSystemIDV2 *)&v31, &v30, &v29, (float *)v36, (DspLib::ComplexMatrixSpan *)v33, (DspLib::ComplexMatrixSpan *)v32, v25, 0.0);
}

BOOL DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::reset(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_WORD *)this + 202) = 0;
  *((_QWORD *)this + 54) = 1092616192;
  return DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
}

BOOL DspLib::LoudspeakerSystemIDV2::updateModelParameters(DspLib::LoudspeakerSystemIDV2 *this, float *a2, float *a3, float *a4, DspLib::ComplexMatrixSpan *a5, DspLib::ComplexMatrixSpan *a6, DspLib::ComplexSpan *a7, float a8)
{
  float *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float v29;
  float *v31;
  float *v32;
  float **v33;
  float *v34;
  int64x2_t v35;
  float *v36;
  int64x2_t v37;
  uint64_t v38;
  _QWORD v39[4];
  _QWORD v40[4];
  float *v41;
  int64x2_t v42;
  uint64_t v43;
  _QWORD v44[4];
  _QWORD v45[4];
  _QWORD v46[3];
  _BYTE *v47;
  int64x2_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _BYTE *v51;
  int64x2_t v52;
  uint64_t v53;
  _BYTE *v54;
  __int128 v55;
  uint64_t v56;
  float v57[4];
  float __C[4];
  _BYTE v59[40];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v14 = (float *)v59;
  v35 = (int64x2_t)xmmword_1B66273A0;
  v55 = xmmword_1B66273A0;
  v54 = v59;
  v56 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesX((uint64_t)&v54, a4, a5);
  for (i = 0; i != 3; ++i)
  {
    *v14 = *v14 + a8;
    v14 += 4;
  }
  v52 = v35;
  v51 = v59;
  v53 = 3;
  v16 = DspLib::matNxNInv((uint64_t)&v51);
  if ((_DWORD)v16)
    return 0;
  v33 = &v31;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v31 - v21;
  v31 = (float *)this;
  v32 = a3;
  v23 = *((_QWORD *)a4 + 4);
  v34 = a2;
  v50[0] = v20;
  v50[1] = (char *)&v31 - v21;
  v50[2] = 3 * v23;
  v50[3] = 3;
  v50[4] = v23;
  v48 = v35;
  v47 = v59;
  v49 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM((uint64_t)v50, &v47, a4);
  v46[0] = __C;
  v46[1] = v57;
  v46[2] = 3;
  v45[0] = v20;
  v45[1] = 3 * v23;
  v45[2] = 3;
  v45[3] = v23;
  v24 = *((_QWORD *)a4 + 4);
  v44[0] = *(_QWORD *)a6;
  v44[1] = v24;
  v44[2] = v24;
  v44[3] = 1;
  v41 = __C;
  v35 = vdupq_n_s64(3uLL);
  v42 = v35;
  v43 = 1;
  DspLib::multiply((uint64_t)v45, (uint64_t)v44, &v41);
  v40[0] = v22;
  v40[1] = 3 * v23;
  v25 = v34;
  v40[2] = 3;
  v40[3] = v23;
  v26 = *((_QWORD *)a4 + 4);
  v39[0] = *((_QWORD *)a6 + 1);
  v39[1] = v26;
  v39[2] = v26;
  v39[3] = 1;
  v36 = v57;
  v37 = v35;
  v38 = 1;
  DspLib::multiply((uint64_t)v40, (uint64_t)v39, &v36);
  DspLib::add(__C, 3uLL, v57);
  v27 = DspLib::ComplexSpan::operator[](v46, 0);
  v28 = v31;
  *v31 = v27;
  *v25 = DspLib::ComplexSpan::operator[](v46, 1uLL);
  v29 = DspLib::ComplexSpan::operator[](v46, 2uLL);
  *v32 = v29;
  if ((*(_DWORD *)v28 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  return (*(_DWORD *)v25 & 0x7FFFFFFFu) < 0x7F800000 && (LODWORD(v29) & 0x7FFFFFFFu) < 0x7F800000;
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 904), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 792), 0);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, const float *a2)
{
  float v4;
  float v5;
  float v6;
  DspLib *v7;
  DspLib *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int8x16_t v21;
  float32x2_t v22;
  float v23;
  DspLib::ComplexMatrixSpan *v24;
  void *v25;
  uint64_t v26;
  float v27;
  uint64_t result;
  char *v29;
  __int128 v30;
  uint64_t v31;

  if (*((_BYTE *)this + 42))
  {
    v4 = a2[7];
    if (a2[8] + *(double *)this * 0.00048828125 * -2.0 > v4)
    {
      *((float *)this + 220) = v4;
      v5 = a2[8];
      if (v5 <= a2[7])
        v5 = a2[7];
      *((float *)this + 221) = v5;
      *((float *)this + 223) = a2[26];
    }
    v6 = DspLib::dB2Amp(this, a2[12]);
    *((float *)this + 266) = v6 / (float)(v6 + 1.0);
    *((float *)this + 267) = a2[13] / 100.0;
    *((float *)this + 268) = DspLib::dB2Amp(v7, a2[11]);
    v9 = DspLib::dB2Amp(v8, a2[15]);
    *((float *)this + 269) = v9 / (float)(v9 + 1.0);
    *((float *)this + 270) = a2[25];
    *((float *)this + 271) = a2[4] * 0.001;
    *((float *)this + 272) = a2[16] * 0.001;
    v10 = a2[17];
    if (v10 <= a2[16])
      v10 = a2[16];
    *((float *)this + 273) = v10 * 0.001;
    *((float *)this + 274) = a2[20];
    v11 = a2[21];
    if (v11 <= a2[20])
      v11 = a2[20];
    *((float *)this + 275) = v11;
    *((float *)this + 276) = a2[18];
    v12 = a2[19];
    if (v12 <= a2[18])
      v12 = a2[18];
    *((float *)this + 277) = v12;
    *((_BYTE *)this + 888) = a2[2] >= 0.5;
    v13 = a2[24];
    *((float *)this + 278) = a2[3];
    *((float *)this + 279) = a2[22];
    v14 = a2[23];
    if (v14 <= a2[22])
      v14 = a2[22];
    *((float *)this + 280) = v14;
    v15 = *a2 >= 0.5;
    v16 = a2[27] >= 0.5;
    *((float *)this + 281) = a2[29];
    v17 = a2[30];
    if (v17 <= a2[29])
      v17 = a2[29];
    *((float *)this + 282) = v17;
    *((float *)this + 283) = a2[32];
    v18 = a2[33];
    if (v18 <= a2[32])
      v18 = a2[32];
    *((_BYTE *)this + 889) = v13 >= 0.5;
    *((_BYTE *)this + 406) = v15;
    *((_BYTE *)this + 896) = v16;
    *((float *)this + 284) = v18;
    if (v13 >= 0.5)
      *((_BYTE *)this + 888) = 0;
    *((_BYTE *)this + 40) = a2[35] >= 0.5;
    *((float *)this + 285) = a2[37];
    *((float *)this + 287) = a2[38];
    v19 = a2[39];
    if (v19 <= a2[38])
      v19 = a2[38];
    *((float *)this + 286) = v19;
    *((_BYTE *)this + 41) = a2[34] >= 0.5;
    *((float *)this + 288) = a2[36];
    v20 = *(double *)this * 0.00048828125;
    v21.i64[0] = 0xFFFFFFFFLL;
    v21.i64[1] = 0xFFFFFFFFLL;
    v22 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 880)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v20), 0)))), v21)), v20));
    *((float32x2_t *)this + 109) = v22;
    v23 = *((float *)this + 223) * v20;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), 3, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22).f32[0] / v23));
    DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), *((float *)this + 218), v23, v24);
    std::vector<unsigned long>::resize((uint64_t)this + 8, *((_QWORD *)this + 69));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x800, *((float *)this + 218), *((float *)this + 219), *(double *)this, (unint64_t)*((float *)this + 223), (unint64_t **)&v30);
    v25 = (void *)*((_QWORD *)this + 1);
    if (v25)
    {
      *((_QWORD *)this + 2) = v25;
      operator delete(v25);
    }
    *(_OWORD *)((char *)this + 8) = v30;
    *((_QWORD *)this + 3) = v31;
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), *((_QWORD *)this + 69));
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), *((_QWORD *)this + 69), 1u);
    DspLibBuffer::setNumFrames((_QWORD *)this + 87, *((_QWORD *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 792), *((_QWORD *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 904), *((_QWORD *)this + 69));
    DspLib::ComplexVector::operator=((char *)this + 904, 0.0);
    if (*((_BYTE *)this + 896))
      v26 = 5;
    else
      v26 = 3;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), v26, *((_QWORD *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144), *((_QWORD *)this + 69));
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), *((_QWORD *)this + 69), v26);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), *((_QWORD *)this + 69));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440), *((_QWORD *)this + 69));
    v27 = *(double *)this / (double)vcvtad_u64_f64(*(double *)this * a2[3]);
    *((float *)this + 8) = expf(-1.0 / (float)((float)((float)(a2[10] * 1000.0) * v27) / 1000.0));
    *((float *)this + 9) = expf(-1.0 / (float)((float)((float)(a2[14] * 1000.0) * v27) / 1000.0));
    *((_BYTE *)this + 43) = 1;
    return DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::pageInMatrixFunctions(this);
  }
  else
  {
    v29 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v29, 116);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, unint64_t *a2, unsigned int a3)
{
  _BYTE v4[25];

  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readResonanceModel((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a2, a3, (uint64_t)v4);
  *(_OWORD *)((char *)this + 984) = *(_OWORD *)v4;
  *(_OWORD *)((char *)this + 993) = *(_OWORD *)&v4[9];
  if (!*((_BYTE *)this + 1008))
  {
    *((_DWORD *)this + 100) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_WORD *)this + 202) = 0;
    *((_DWORD *)this + 109) = 0;
  }
}

double DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v4;
  float v6;
  float v7;
  char v8;
  _OWORD *v9;
  unsigned int v10;
  unsigned int v11;
  double result;
  _OWORD v13[2];
  _OWORD v14[2];

  v4 = a2;
  if (*((_BYTE *)this + 41))
  {
    v6 = DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 416), a2);
    v7 = 0.0;
    if (!*((_BYTE *)this + 405))
      v7 = v6 + *((float *)this + 102);
    *((float *)this + 102) = v7;
    v8 = v7 > 1000.0;
    v14[0] = *(_OWORD *)((char *)this + 984);
    *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)this + 996);
    v9 = v14;
    v10 = v4;
    v11 = a3;
  }
  else
  {
    v13[0] = *(_OWORD *)((char *)this + 984);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)this + 996);
    v9 = v13;
    v10 = v4;
    v11 = a3;
    v8 = 0;
  }
  *(_QWORD *)&result = DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeResonanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, (uint64_t)v9, v10, v11, v8).n128_u64[0];
  return result;
}

unint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::resetNvm(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, unsigned int a2)
{
  return DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::reset((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  char *v11;
  DspLib::ComplexSpan *v12;
  float v13;
  uint64_t result;
  int v15;
  DspLib::ComplexSpan *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  DspLib::ComplexSpan *v23;
  DspLib::ComplexSpan *v24;
  uint64_t v25;
  const DspLib::ComplexSpan *v26;
  char v27;
  _QWORD v28[3];
  DSPSplitComplex *v29;
  _OWORD v30[2];
  DSPSplitComplex __B;
  uint64_t v32;
  uint64_t v33;

  v29 = a6;
  v33 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 43))
  {
    v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v11, 251);
    ++DspLibDebug::mAssertCounter;
  }
  DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (_QWORD *)this + 77, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), (uint64_t *)this + 1);
  DspLib::LoudspeakerSystemIDV2::updateWeights((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 904), v12, *((float *)this + 266));
  *((float *)this + 106) = v13;
  result = DspLib::LoudspeakerSystemIDV2::safeToAdapt((uint64_t *)a5, (float *)this + 100, (uint64_t *)this + 1, (float *)this + 109, v13, *((float *)this + 266), *((float *)this + 267), *((float *)this + 268));
  if (!(_DWORD)result)
  {
    *((_WORD *)this + 202) = 0;
    return result;
  }
  v15 = *((unsigned __int8 *)this + 896);
  v28[1] = (char *)this + 440;
  v28[2] = (char *)this + 144;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)result, (DSPSplitComplex *)((char *)this + 792), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (float *)this + 246, v15);
  DspLib::operator+=((char *)this + 792, v29);
  DspLib::operator+=((uint64_t)this + 792, a4);
  DspLib::LoudspeakerSystemIDV2::updateModelFitData((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), v29, a4, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 792), (DSPSplitComplex *)((char *)this + 440), v16);
  DspLib::LoudspeakerSystemIDV2::updateMInResonanceModel((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (float *)this + 246, (DSPSplitComplex *)((char *)this + 904), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), *((unsigned __int8 *)this + 896));
  DspLib::LoudspeakerSystemIDV2::updateAInverseInResonanceModel((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (float *)this + 246, (uint64_t)this + 144, (uint64_t)this + 904, *((unsigned __int8 *)this + 896));
  DspLib::LoudspeakerSystemIDV2::updateXInResonanceModel((DSPSplitComplex *)((char *)this + 440), (DSPSplitComplex *)this + 9, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), (DspLib::ComplexMatrix *)*((unsigned __int8 *)this + 896));
  v18 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  v19 = *((_QWORD *)this + 69);
  __B.realp = v21;
  __B.imagp = (float *)((char *)v28 - v20);
  v32 = v19;
  if (*((_BYTE *)this + 896))
    v22 = 2;
  else
    v22 = 1;
  DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), v22, &__B);
  DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)((char *)this + 440));
  DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
  DspLib::operator*=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)this + 9);
  memset(v30, 0, 25);
  if (*((_BYTE *)this + 896))
  {
    result = DspLib::LoudspeakerSystemIDV2::updateCreepModelParameters((DspLib::LoudspeakerSystemIDV2 *)v30, (float *)this + 12, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), v23, 1.0e-30);
    if ((result & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    *((_DWORD *)this + 246) = 0;
    *((_DWORD *)this + 249) = 0;
    result = DspLib::LoudspeakerSystemIDV2::updateModelParameters((DspLib::LoudspeakerSystemIDV2 *)((char *)v30 + 4), (float *)v30 + 2, (float *)&v30[1], (float *)this + 12, (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), v24, 1.0e-30);
    v27 = 0;
    if (!(_DWORD)result)
      goto LABEL_15;
  }
  result = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::parametersAreValid((uint64_t)this, (uint64_t)v30, (uint64_t)v29, a4, v25, v26);
  if (!(_DWORD)result)
  {
LABEL_14:
    v27 = 0;
    goto LABEL_15;
  }
  *(_OWORD *)((char *)this + 984) = v30[0];
  *(_OWORD *)((char *)this + 993) = *(_OWORD *)((char *)v30 + 9);
  v27 = 1;
LABEL_15:
  *((_BYTE *)this + 405) = v27;
  *((_BYTE *)this + 404) = *((float *)this + 108) < *((float *)this + 270);
  return result;
}

_DWORD *DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(_DWORD *result, DspLibBuffer *a2, _QWORD *a3, DspLibBuffer *a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  DSPComplex v14;

  v5 = *a5;
  if (a5[1] != *a5)
  {
    v10 = result;
    v11 = 0;
    v12 = 1;
    do
    {
      v14.real = DspLib::ComplexSpan::operator[](v10, *(_QWORD *)(v5 + 8 * v11));
      DspLib::ComplexSpan::setElement(a3, v11, v14);
      v13 = *(_DWORD *)DspLibBuffer::element(a2, *(_QWORD *)(*a5 + 8 * v11), 0);
      result = (_DWORD *)DspLibBuffer::operator[](a4, v11);
      *result = v13;
      v11 = v12;
      v5 = *a5;
      ++v12;
    }
    while (v11 < (a5[1] - *a5) >> 3);
  }
  return result;
}

DspLibBuffer *DspLib::LoudspeakerSystemIDV2::updateWeights(DspLibBuffer *this, const DspLibBuffer *a2, DspLib::ComplexSpan *a3, float a4)
{
  DspLibBuffer *v6;
  unint64_t v7;
  unsigned int v8;
  float v9;
  float v10;
  int v11;

  if (*((_QWORD *)a2 + 2))
  {
    v6 = this;
    v7 = 0;
    v8 = 1;
    v9 = 0.0;
    do
    {
      v10 = *(float *)DspLibBuffer::operator[](v6, v7);
      v9 = v9 + v10;
      if (v10 < a4)
        v10 = 0.0;
      v11 = 0;
      this = (DspLibBuffer *)DspLib::ComplexSpan::setElement(a2, v7, *(DSPComplex *)&v10);
      v7 = v8;
    }
    while (*((_QWORD *)a2 + 2) > (unint64_t)v8++);
  }
  return this;
}

BOOL DspLib::LoudspeakerSystemIDV2::safeToAdapt(uint64_t *a1, float *a2, uint64_t *a3, float *a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v18;
  float v19;
  _BOOL4 v20;

  *a2 = 0.0;
  v8 = *a3;
  v9 = a3[1] - *a3;
  if (!v9)
    return 0;
  v10 = 0;
  v11 = v9 >> 3;
  v12 = *a1;
  v13 = 0.0;
  v14 = 0.0;
  do
  {
    v15 = *(_QWORD *)(v8 + 8 * v10);
    if (v15 >= 0x3FF)
      v15 = 1023;
    v16 = *(float *)(v12 + 4 * v15);
    v14 = v16 + v14;
    *a2 = v14;
    if (v16 > v13)
      v13 = v16;
    ++v10;
  }
  while (v11 > v10);
  if (v14 == 0.0)
    return 0;
  v18 = v13 / v14;
  *a4 = v18;
  v19 = *a2 / (float)v11;
  *a2 = v19;
  v20 = a5 >= a6;
  if (v18 <= a7)
    v20 = 1;
  return v19 > a8 && v20;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(DSPSplitComplex *result, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  DSPSplitComplex *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex *p_B;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  DSPSplitComplex v38;
  uint64_t v39;
  DSPSplitComplex __B;
  uint64_t v41;
  DSPSplitComplex __A;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a3 + 4);
  if (a5)
  {
    if (!v8)
      return result;
    v9 = MEMORY[0x1E0C80A78](result);
    MEMORY[0x1E0C80A78](v9);
    v10 = *((_QWORD *)a3 + 4);
    __A.realp = v12;
    __A.imagp = (float *)((char *)&v38 - v11);
    v43 = v10;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
    v13 = DspLib::operator*=((uint64_t)&__A, a4[4]);
    v14 = MEMORY[0x1E0C80A78](v13);
    MEMORY[0x1E0C80A78](v14);
    __B.realp = v16;
    __B.imagp = (float *)((char *)&v38 - v15);
    v41 = v17;
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__B, a4[3]);
    v18 = DspLib::operator+=(&__A, &__B);
    v19 = MEMORY[0x1E0C80A78](v18);
    MEMORY[0x1E0C80A78](v19);
    v38.realp = v21;
    v38.imagp = (float *)((char *)&v38 - v20);
    v39 = v22;
    DspLib::ComplexMatrixSpan::row(a3, 0, &v38);
    DspLib::operator*=((uint64_t)&v38, a4[1]);
    DspLib::operator+=((uint64_t)&v38, a4[2]);
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__B, *a4);
    DspLib::operator+=(&v38, &__B);
    DspLib::ComplexMatrixSpan::row(a3, 2uLL, &__B);
    DspLib::operator+=(&v38, &__B);
    DspLib::ComplexSpan::operator=(a2, &__A);
    p_B = &v38;
  }
  else
  {
    if (!v8)
      return result;
    v24 = MEMORY[0x1E0C80A78](result);
    MEMORY[0x1E0C80A78](v24);
    v25 = *((_QWORD *)a3 + 4);
    __A.realp = v27;
    __A.imagp = (float *)((char *)&v38 - v26);
    v43 = v25;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
    v29 = MEMORY[0x1E0C80A78](v28);
    MEMORY[0x1E0C80A78](v29);
    __B.realp = v31;
    __B.imagp = (float *)((char *)&v38 - v30);
    v41 = v32;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__B);
    DspLib::operator*=((uint64_t)&__A, a4[4]);
    DspLib::operator*=((uint64_t)&__B, a4[1]);
    v33 = DspLib::operator+=((uint64_t)&__B, a4[2]);
    v34 = MEMORY[0x1E0C80A78](v33);
    MEMORY[0x1E0C80A78](v34);
    v38.realp = v36;
    v38.imagp = (float *)((char *)&v38 - v35);
    v39 = v37;
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &v38);
    DspLib::operator+=(&__B, &v38);
    DspLib::ComplexSpan::operator=(a2, &__A);
    p_B = &__B;
  }
  return DspLib::operator/=(a2, p_B);
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::updateModelFitData(DspLib::LoudspeakerSystemIDV2 *this, const DspLib::ComplexSpan *a2, DSPSplitComplex *a3, float a4, DspLib::ComplexSpan *a5, DSPSplitComplex *a6, DspLib::ComplexSpan *a7)
{
  unint64_t v13;
  unsigned int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  DSPComplex v22;

  if (a6[1].realp)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = DspLib::ComplexSpan::operator[](this, v13);
      v17 = v16;
      v18 = *(float *)DspLibBuffer::operator[](a2, v13);
      v22.real = (float)(v15 * v18) + (float)((float)(1.0 - v18) * DspLib::ComplexSpan::operator[](a5, v13));
      v22.imag = (float)(v17 * v18) + (float)((float)(1.0 - v18) * v19);
      DspLib::ComplexSpan::setElement(a6, v13, v22);
      v13 = v14;
    }
    while (a6[1].realp > (float *)v14++);
  }
  DspLib::operator-=((uint64_t)a6, a4);
  return DspLib::operator-=(a6, a3);
}

void DspLib::LoudspeakerSystemIDV2::updateMInResonanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4, int a5)
{
  if (a5)
    DspLib::LoudspeakerSystemIDV2::ceepResonatorModelJacobian(a1, a2, a3, a4);
  else
    DspLib::LoudspeakerSystemIDV2::standardResonatorModelJacobian(a1, a2, a3, a4);
}

uint64_t DspLib::LoudspeakerSystemIDV2::updateAInverseInResonanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  DspLib::ComplexMatrixSpan *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  DspLib::ComplexMatrixSpan *v20;
  unint64_t v21;
  uint64_t v23;
  DSPSplitComplex __B;
  uint64_t v25;
  DSPSplitComplex __A;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = MEMORY[0x1E0C80A78](a1);
  v11 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v10);
  __A.realp = v13;
  __A.imagp = (float *)((char *)&v23 - v12);
  v27 = v14;
  DspLib::ComplexMatrixSpan::row(v11, 0, &__A);
  DspLib::operator*=((uint64_t)&__A, a2[1]);
  v15 = DspLib::operator+=((uint64_t)&__A, a2[2]);
  v16 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  v17 = *((_QWORD *)a1 + 4);
  __B.realp = v18;
  __B.imagp = (float *)((char *)&v23 - v19);
  v25 = v17;
  if (a5)
  {
    DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__B, *a2);
    DspLib::operator+=(&__A, &__B);
    v20 = a1;
    v21 = 2;
  }
  else
  {
    v20 = a1;
    v21 = 1;
  }
  DspLib::ComplexMatrixSpan::row(v20, v21, &__B);
  DspLib::operator+=(&__A, &__B);
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &__A);
}

void DspLib::LoudspeakerSystemIDV2::updateXInResonanceModel(DSPSplitComplex *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v9;
  int v10;
  float *realp;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  DSPSplitComplex *p_C;
  DspLib::ComplexMatrixSpan *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  DSPSplitComplex __B;
  uint64_t v29;
  DSPSplitComplex __C;
  float *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = MEMORY[0x1E0C80A78](this);
  MEMORY[0x1E0C80A78](v9);
  realp = this[1].realp;
  __C.realp = v12;
  __C.imagp = (float *)((char *)&v27 - v13);
  v31 = realp;
  if (v10)
  {
    DspLib::ComplexSpan::operator=(&__C, this);
    DspLib::operator*=((uint64_t)&__C, -1.0);
    DspLib::operator*=(&__C, a2);
    DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
    v15 = MEMORY[0x1E0C80A78](v14);
    MEMORY[0x1E0C80A78](v15);
    __B.realp = v17;
    __B.imagp = (float *)((char *)&v27 - v16);
    v29 = v18;
    DspLib::ComplexMatrixSpan::row(a4, 0, &__B);
    DspLib::operator*=(&__C, &__B);
    DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
    DspLib::operator*=(&__C, &__B);
    DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
    DspLib::operator*=(&__B, a2);
    DspLib::ComplexMatrixSpan::setColumn(a3, 4uLL, &__B);
    DspLib::ComplexMatrixSpan::row(a4, 1uLL, &__C);
    DspLib::operator*=(&__C, a2);
    p_C = &__C;
    v20 = a3;
    v21 = 3;
  }
  else
  {
    DspLib::ComplexSpan::operator=(&__C, this);
    DspLib::operator*=((uint64_t)&__C, -1.0);
    DspLib::operator*=(&__C, a2);
    DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
    v23 = MEMORY[0x1E0C80A78](v22);
    MEMORY[0x1E0C80A78](v23);
    __B.realp = v25;
    __B.imagp = (float *)((char *)&v27 - v24);
    v29 = v26;
    DspLib::ComplexMatrixSpan::row(a4, 0, &__B);
    DspLib::operator*=(&__C, &__B);
    DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
    DspLib::operator*=(&__B, a2);
    p_C = &__B;
    v20 = a3;
    v21 = 2;
  }
  DspLib::ComplexMatrixSpan::setColumn(v20, v21, p_C);
}

BOOL DspLib::LoudspeakerSystemIDV2::updateCreepModelParameters(DspLib::LoudspeakerSystemIDV2 *this, float *a2, DspLib::ComplexMatrixSpan *a3, DspLib::ComplexMatrixSpan *a4, DspLib::ComplexSpan *a5, float a6)
{
  float *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  float *v25;
  unint64_t v26;
  float v27;
  uint64_t v28;
  DspLib::LoudspeakerSystemIDV2 *v29;
  int64x2_t v30;
  float *v31;
  int64x2_t v32;
  uint64_t v33;
  _QWORD v34[4];
  _QWORD v35[4];
  float *v36;
  int64x2_t v37;
  uint64_t v38;
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[3];
  _BYTE *v42;
  int64x2_t v43;
  uint64_t v44;
  _QWORD v45[5];
  _BYTE *v46;
  int64x2_t v47;
  uint64_t v48;
  _BYTE *v49;
  __int128 v50;
  uint64_t v51;
  float v52[8];
  float __C[8];
  _BYTE v54[104];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v10 = (float *)v54;
  v30 = (int64x2_t)xmmword_1B6628350;
  v50 = xmmword_1B6628350;
  v49 = v54;
  v51 = 5;
  DspLib::LoudspeakerSystemIDV2::updateMTimesX((uint64_t)&v49, a2, a3);
  for (i = 0; i != 5; ++i)
  {
    *v10 = *v10 + a6;
    v10 += 6;
  }
  v47 = v30;
  v46 = v54;
  v48 = 5;
  v12 = DspLib::matNxNInv((uint64_t)&v46);
  if ((_DWORD)v12)
    return 0;
  v28 = (uint64_t)&v28;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v28 - v17;
  v19 = *((_QWORD *)a2 + 4);
  v45[0] = v16;
  v45[1] = (char *)&v28 - v17;
  v29 = this;
  v45[2] = 5 * v19;
  v45[3] = 5;
  v45[4] = v19;
  v43 = v30;
  v42 = v54;
  v44 = 5;
  DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM((uint64_t)v45, &v42, a2);
  v41[0] = __C;
  v41[1] = v52;
  v41[2] = 5;
  v40[0] = v16;
  v40[1] = 5 * v19;
  v40[2] = 5;
  v40[3] = v19;
  v20 = *((_QWORD *)a2 + 4);
  v39[0] = *(_QWORD *)a4;
  v39[1] = v20;
  v39[2] = v20;
  v39[3] = 1;
  v36 = __C;
  v30 = vdupq_n_s64(5uLL);
  v37 = v30;
  v38 = 1;
  DspLib::multiply((uint64_t)v40, (uint64_t)v39, &v36);
  v35[0] = v18;
  v35[1] = 5 * v19;
  v35[2] = 5;
  v35[3] = v19;
  v21 = (float *)v29;
  v22 = *((_QWORD *)a2 + 4);
  v34[0] = *((_QWORD *)a4 + 1);
  v34[1] = v22;
  v34[2] = v22;
  v34[3] = 1;
  v31 = v52;
  v32 = v30;
  v33 = 1;
  DspLib::multiply((uint64_t)v35, (uint64_t)v34, &v31);
  DspLib::add(__C, 5uLL, v52);
  v23 = DspLib::ComplexSpan::operator[](v41, 0);
  *v21 = v23;
  if ((LODWORD(v23) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  v24 = 0;
  v25 = v21 + 1;
  do
  {
    v26 = v24;
    if (v24 == 4)
      break;
    ++v24;
    v27 = DspLib::ComplexSpan::operator[](v41, v26 + 1);
    v25[v26] = v27;
  }
  while ((LODWORD(v27) & 0x7FFFFFFFu) < 0x7F800000);
  return v26 > 3;
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::parametersAreValid(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  DspLib::LoudspeakerSystemIDV2 *v10;
  DSPSplitComplex *v11;
  const DspLib::ComplexSpan *v12;
  int v13;
  uint64_t v14;
  int v15;
  float v16;
  _BOOL4 v17;
  float v18;
  _BOOL4 v19;
  float *v20;
  const DspLib::ComplexSpan *v21;
  float v22;
  int v23;
  int v24;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[25];
  _OWORD v29[2];

  v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 616);
  v11 = (DSPSplitComplex *)(a1 + 792);
  v12 = (const DspLib::ComplexSpan *)(a1 + 440);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 616), *(const DspLib::ComplexSpan **)(a1 + 904), (float *)(a1 + 792), (const DspLib::ComplexSpan *)(a1 + 440), a6);
  *(_DWORD *)(a1 + 432) = v13;
  v14 = 36;
  if (*(float *)(a1 + 424) > *(float *)(a1 + 1076))
    v14 = 32;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::smoothCoefficients(a1, (float32x4_t *)a2, *(float *)(a1 + v14));
  v29[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)(a2 + 12);
  v15 = *(unsigned __int8 *)(a1 + 896);
  DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v29, *(unsigned __int8 *)(a1 + 888), v15, (uint64_t)v28, *(float *)(a1 + 1112), *(float *)(a1 + 1084), *(float *)(a1 + 1092));
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)v28;
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)&v28[16];
  if (*(_BYTE *)(a1 + 41))
  {
    v16 = 1.0 / (float)(sqrtf(*(float *)(a1 + 1044) * (float)(1.0 / *(float *)(a1 + 1052))) * 6.2832);
    v17 = v16 > *(float *)(a1 + 884) || v16 < *(float *)(a1 + 880);
  }
  else
  {
    v17 = 0;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v18 = (float)(1.0 / *(float *)(a1 + 1048)) * sqrtf(*(float *)(a1 + 1044) * *(float *)(a1 + 1052));
    v19 = v18 > *(float *)(a1 + 1144) || v18 < *(float *)(a1 + 1148);
  }
  else
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::clipTsParameters((float *)a1, (float *)(a1 + 1040));
    v19 = 0;
    v15 = *(unsigned __int8 *)(a1 + 896);
  }
  v26 = *(_OWORD *)(a1 + 1040);
  v27 = *(_QWORD *)(a1 + 1056);
  v20 = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs((float *)&v26, v15 != 0, (uint64_t)v28);
  *(_OWORD *)a2 = *(_OWORD *)v28;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)&v28[9];
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)v20, v11, (DspLib::ComplexMatrixSpan *)(a1 + 520), (float *)a2, *(unsigned __int8 *)(a1 + 896));
  DspLib::operator+=(v11, a3);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 904), (float *)v11, v12, v21);
  v23 = v22 >= *(float *)(a1 + 432) || v17;
  v24 = v23 | v19;
  if ((v24 & 1) == 0)
    *(float *)(a1 + 432) = v22;
  return v24 ^ 1u;
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  int32x2_t v15;
  char *v21;
  _OWORD v22[2];
  _DWORD v23[6];

  if (*(_BYTE *)(a1 + 42))
  {
    v22[0] = *(_OWORD *)(a1 + 984);
    *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 996);
    DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v22, *(unsigned __int8 *)(a1 + 888), *(unsigned __int8 *)(a1 + 896), (uint64_t)v23, *(float *)(a1 + 1112), *(float *)(a1 + 1084), *(float *)(a1 + 1092));
    v7 = *(float *)&v23[1];
    a4 *= 18;
    *(_DWORD *)(a2 + 4 * (a4 + 19)) = v23[0];
    *(float *)(a2 + 4 * (a4 + 20)) = v7 * 1000.0;
    v8 = *(float *)&v23[2];
    v9 = *(float *)&v23[3];
    v10 = v23[4];
    v11 = v23[5];
    *(_DWORD *)(a2 + 4 * (a4 + 28)) = *(_DWORD *)(a1 + 400);
    *(float *)(a2 + 4 * (a4 + 21)) = v8;
    *(float *)(a2 + 4 * (a4 + 22)) = v9;
    *(_DWORD *)(a2 + 4 * (a4 + 35)) = v10;
    *(_DWORD *)(a2 + 4 * (a4 + 36)) = v11;
    v12 = 1.0 / (float)(sqrtf(v7 * (float)(1.0 / v9)) * 6.2832);
    v13 = (float)(1.0 / v8) * sqrtf(v7 * v9);
    v14 = (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
    *(float *)(a2 + 4 * (a4 + 23)) = v12;
    *(float *)(a2 + 4 * (a4 + 24)) = v13;
    *(float *)(a2 + 4 * (a4 + 25)) = v14;
    v15.i32[0] = *(unsigned __int8 *)(a1 + 404);
    v15.i32[1] = *(unsigned __int8 *)(a1 + 405);
    __asm { FMOV            V1.2S, #1.0 }
    *(int8x8_t *)(a2 + 4 * (a4 + 26)) = vbic_s8(_D1, (int8x8_t)vceqz_s32(v15));
    *(_DWORD *)(a2 + 4 * (a4 + 29)) = *(_DWORD *)(a1 + 436);
    *(_DWORD *)(a2 + 4 * (a4 + 30)) = *(_DWORD *)(a1 + 424);
    *(float *)(a2 + 4 * (a4 + 31)) = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)a1);
    *(_DWORD *)(a2 + 4 * (a4 + 34)) = *(_DWORD *)(a1 + 432);
    *(_DWORD *)(a2 + 4 * (a4 + 32)) = *(_DWORD *)(a1 + 872);
    *(_DWORD *)(a2 + 4 * (a4 + 33)) = *(_DWORD *)(a1 + 876);
  }
  else
  {
    v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 327);
    ++DspLibDebug::mAssertCounter;
  }
}

float32x2_t DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x2_t result;
  float v18;
  float v19;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (a3)
  {
    if (a2)
    {
      *(float *)a4 = a5;
      v7 = *(float *)(a1 + 12);
      if (v7 > 0.0)
        a7 = (float)(a5 * a5) / v7;
      *(float *)(a4 + 4) = a7;
      a6 = a7;
    }
    else
    {
      v9 = *(float *)(a1 + 12);
      v10 = sqrtf(v9 * a6);
      if (v9 > 0.0)
        a5 = v10;
      *(float *)a4 = a5;
      *(float *)(a4 + 4) = a6;
    }
    v11 = a5 * a5;
    v12 = *(float *)(a1 + 16);
    v13 = (float)(a6 * (float)((float)(v11 * *(float *)a1) - (float)(a6 * v12))) / v11;
    v14 = *(float *)(a1 + 8);
    v15 = (float)((float)(v12 * (float)(v14 * (float)((float)(v11 * a6) * v13)))
                + (float)((float)((float)-(float)((float)(v11 * v11) * a6) * v14) * *(float *)(a1 + 4)))
        / (float)((float)((float)(v12 * (float)-(float)((float)(v11 * a6) * *(float *)(a1 + 4)))
                        + (float)((float)(v11 * v11) * v14))
                + (float)((float)(a6 * v13) * (float)(v12 * v12)));
    v16 = (float)(v15 * (float)-(float)(v11 * v15)) / (float)(a6 * (float)((float)(v11 * v14) - (float)(v15 * v12)));
    *(float *)(a4 + 16) = v16;
    *(float *)(a4 + 20) = v15;
    result.f32[0] = (float)(v14 * (float)(a6 * v16)) / v15;
    *(float *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 12) = result.i32[0];
  }
  else
  {
    if (a2)
    {
      *(float *)a4 = a5;
      v8 = *(float *)(a1 + 16);
      if (v8 > 0.0)
        a7 = (float)(a5 * a5) / v8;
      *(float *)(a4 + 4) = a7;
      a6 = a7;
    }
    else
    {
      v18 = *(float *)(a1 + 16);
      v19 = sqrtf(v18 * a6);
      if (v18 > 0.0)
        a5 = v19;
      *(float *)a4 = a5;
      *(float *)(a4 + 4) = a6;
    }
    result = vmul_n_f32(*(float32x2_t *)(a1 + 4), a6);
    *(float32x2_t *)(a4 + 8) = result;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  vp::utility::CPU_Profiler *v1;
  const float *v2;
  vDSP_Length cycle_count;

  v1 = (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696);
  v2 = (const float *)DspLibBuffer::channel((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696), 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);
  return DspLib::minv(v2, cycle_count);
}

void DspLib::LoudspeakerSystemIDV2::ceepResonatorModelJacobian(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  DspLib::ComplexMatrixSpan *v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  DSPSplitComplex __B;
  uint64_t v30;
  DSPSplitComplex __C;
  uint64_t v32;
  DSPSplitComplex v33;
  uint64_t v34;
  DSPSplitComplex __A;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = MEMORY[0x1E0C80A78](v8);
  __A.realp = v11;
  __A.imagp = (float *)((char *)&v28 - v10);
  v36 = v12;
  v13 = MEMORY[0x1E0C80A78](v9);
  v14 = MEMORY[0x1E0C80A78](v13);
  v33.realp = v16;
  v33.imagp = (float *)((char *)&v28 - v15);
  v34 = v17;
  v18 = MEMORY[0x1E0C80A78](v14);
  v19 = MEMORY[0x1E0C80A78](v18);
  __C.realp = v21;
  __C.imagp = (float *)((char *)&v28 - v20);
  v32 = v22;
  v23 = MEMORY[0x1E0C80A78](v19);
  v24 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v23);
  __B.realp = v26;
  __B.imagp = (float *)((char *)&v28 - v25);
  v30 = v27;
  DspLib::ComplexMatrixSpan::row(v24, 0, &v33);
  DspLib::operator*=((uint64_t)&v33, a2[1]);
  DspLib::operator+=((uint64_t)&v33, a2[2]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
  DspLib::operator*=((uint64_t)&__B, *a2);
  DspLib::operator+=(&v33, &__B);
  DspLib::ComplexMatrixSpan::row(a1, 2uLL, &__B);
  DspLib::operator+=(&v33, &__B);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 3uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 4uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  DspLib::operator*=((uint64_t)&__A, a2[4]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
  DspLib::operator*=((uint64_t)&__B, a2[3]);
  DspLib::operator+=(&__A, &__B);
  DspLib::operator*=((uint64_t)&__A, -1.0);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__B);
  DspLib::operator*=(&__A, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::operator*=(&__A, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &v33);
  DspLib::operator/=(&__C, &v33);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

void DspLib::LoudspeakerSystemIDV2::standardResonatorModelJacobian(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  DspLib::ComplexMatrixSpan *v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex __C;
  uint64_t v24;
  DSPSplitComplex __B;
  uint64_t v26;
  DSPSplitComplex __A;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = MEMORY[0x1E0C80A78](v8);
  __A.realp = v11;
  __A.imagp = (float *)((char *)&__C - v10);
  v28 = v12;
  v13 = MEMORY[0x1E0C80A78](v9);
  v14 = MEMORY[0x1E0C80A78](v13);
  __B.realp = v16;
  __B.imagp = (float *)((char *)&__C - v15);
  v26 = v17;
  v18 = MEMORY[0x1E0C80A78](v14);
  v19 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v18);
  __C.realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  v24 = v22;
  DspLib::ComplexMatrixSpan::row(v19, 0, &__B);
  DspLib::operator*=((uint64_t)&__B, a2[1]);
  DspLib::operator+=((uint64_t)&__B, a2[2]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator+=(&__B, &__A);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::operator*=((uint64_t)&__A, -a2[4]);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -a2[4]);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

float32_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::smoothCoefficients(uint64_t a1, float32x4_t *a2, float a3)
{
  float32_t result;

  *a2 = vmlaq_n_f32(*a2, vsubq_f32(*(float32x4_t *)(a1 + 984), *a2), a3);
  result = a2[1].f32[0] + (float)(a3 * (float)(*(float *)(a1 + 1000) - a2[1].f32[0]));
  a2[1].f32[0] = result;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::clipTsParameters(float *a1, float *a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float result;

  v2 = a1 + 279;
  v3 = a1 + 280;
  if (a1[280] >= *a2)
    v3 = a2;
  if (*a2 >= a1[279])
    v2 = v3;
  *a2 = *v2;
  v4 = a1 + 272;
  v5 = a2[1];
  v6 = a1 + 273;
  if (a1[273] >= v5)
    v6 = a2 + 1;
  if (v5 >= a1[272])
    v4 = v6;
  a2[1] = *v4;
  v7 = a1 + 274;
  v8 = a1 + 275;
  v9 = a2[3];
  if (a1[275] >= v9)
    v8 = a2 + 3;
  if (v9 >= a1[274])
    v7 = v8;
  a2[3] = *v7;
  v10 = a1 + 276;
  v11 = a1 + 277;
  v12 = a2[2];
  if (a1[277] >= v12)
    v11 = a2 + 2;
  if (v12 >= a1[276])
    v10 = v11;
  a2[2] = *v10;
  v13 = a1 + 281;
  v14 = a1 + 282;
  v15 = a2[5];
  if (a1[282] >= v15)
    v14 = a2 + 5;
  if (v15 >= a1[281])
    v13 = v14;
  a2[5] = *v13;
  v16 = a1 + 283;
  v17 = a1 + 284;
  v19 = a2[4];
  v18 = a2 + 4;
  v20 = v19;
  if (a1[284] >= v19)
    v17 = v18;
  if (v20 >= a1[283])
    v16 = v17;
  result = *v16;
  *v18 = *v16;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::calculateError(DspLib::LoudspeakerSystemIDV2 *this, const DspLib::ComplexSpan *a2, float *a3, const DspLib::ComplexSpan *a4, const DspLib::ComplexSpan *a5)
{
  unint64_t v9;
  float v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  if (*((_QWORD *)a4 + 2))
  {
    v9 = 0;
    v10 = 0.0;
    v11 = 1;
    v12 = 0.0;
    do
    {
      v13 = DspLib::ComplexSpan::operator[](this, v9);
      v15 = v14;
      v16 = *((float *)a2 + v9);
      v17 = DspLib::ComplexSpan::operator[](a3, v9);
      v10 = v10 + v16;
      v12 = v12
          + (float)(fabsf(v16* (float)((float)((float)(v17 - v13) * (float)(v17 - v13))- (float)((float)(v18 - v15) * (float)(v18 - v15))))+ fabsf(v16* (float)((float)((float)(v18 - v15) * (float)(v17 - v13))+ (float)((float)(v17 - v13) * (float)(v18 - v15)))));
      v9 = v11;
    }
    while (*((_QWORD *)a4 + 2) > (unint64_t)v11++);
  }
}

float *DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs@<X0>(float *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  *(_BYTE *)(a3 + 24) = 0;
  v3 = *result;
  v4 = result[1];
  v5 = (float)(v3 * v3) / v4;
  v6 = result[3];
  if (a2)
  {
    v8 = result[4];
    v7 = result[5];
    v9 = v4 * v8;
    v10 = (float)(v3 * v3) / v4;
    v5 = (float)((float)(v3 * v3) * (float)(v6 + v7)) / (float)(v4 * v8);
    v11 = result[2];
    v12 = (float)((float)((float)(v4 * v7) + (float)(v6 * v4)) + (float)(v8 * v11)) / (float)(v4 * v8);
    v13 = (float)((float)((float)(v6 * v11) + (float)(v6 * v8)) + (float)(v7 * v11)) / (float)(v4 * v8);
    v14 = (float)(v6 * v7) / v9;
  }
  else
  {
    v14 = v6 / v4;
    v10 = 0.0;
    v12 = 0.0;
    v13 = result[2] / v4;
  }
  *(float *)a3 = v12;
  *(float *)(a3 + 4) = v13;
  *(float *)(a3 + 8) = v14;
  *(float *)(a3 + 12) = v10;
  *(float *)(a3 + 16) = v5;
  *(float *)(a3 + 20) = v3;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(float a1, float a2, uint64_t a3, float *a4, int a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v5 = (float)(a1 * a1) - (float)(a2 * a2);
  v6 = (float)(a2 * a1) + (float)(a1 * a2);
  v7 = a4[4];
  v8 = a1 * v7;
  v9 = a2 * v7;
  if (a5)
  {
    v10 = a4[3];
    v8 = v8 + (float)(v5 * v10);
    v9 = v9 + (float)(v6 * v10);
    v11 = a4[1];
    v12 = (float)(a1 * v11) + (float)(v5 * *a4);
    v13 = (float)(a2 * v11) + (float)(v6 * *a4);
    v14 = (float)(v5 * a1) - (float)(v6 * a2);
    v15 = (float)(a1 * v6) + (float)(v5 * a2);
    v16 = v14 + v12;
    v17 = v15 + v13;
  }
  else
  {
    v18 = a4[1];
    v19 = a1 * v18;
    v20 = a2 * v18;
    v16 = v5 + v19;
    v17 = v6 + v20;
  }
  return (float)((float)(v17 * v9) + (float)(v8 * (float)(a4[2] + v16)))
       * (float)(1.0 / (float)((float)(v17 * v17) + (float)((float)(a4[2] + v16) * (float)(a4[2] + v16))));
}

double DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::initialize(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, double a2)
{
  double result;

  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 776), 0);
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  result = 524288.0;
  *((_QWORD *)this + 51) = 0x4120000000000000;
  *((_DWORD *)this + 104) = 0;
  *((_BYTE *)this + 44) = 1;
  return result;
}

double DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::reset(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this)
{
  double result;

  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  result = 524288.0;
  *((_QWORD *)this + 51) = 0x4120000000000000;
  *((_DWORD *)this + 104) = 0;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::uninitialize(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this)
{
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 320), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 144), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 424), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 880), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 776), 0);
}

void DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::setParameters(uint64_t a1, DspLib::AlgorithmParametersInstance *this, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  DspLib *v10;
  DspLib *v11;
  float v12;
  float v13;
  int8x16_t v14;
  float32x2_t v15;
  float v16;
  DspLib::ComplexMatrixSpan *v17;
  void *v18;
  float v19;
  float v20;
  char *v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)(a1 + 44))
  {
    v5 = 7 * a3;
    v6 = DspLib::AlgorithmParametersInstance::group(this, 7 * a3 + 5);
    v7 = v6;
    v8 = *(float *)(v6 + 20);
    if (*(float *)(v6 + 24) + *(double *)a1 * 0.00048828125 * -2.0 * *(float *)(v6 + 68) > v8)
    {
      *(float *)(a1 + 864) = v8;
      *(_DWORD *)(a1 + 868) = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(a1 + 872) = *(_DWORD *)(v6 + 68);
    }
    v9 = DspLib::dB2Amp((DspLib *)v6, *(float *)(v6 + 56));
    *(float *)(a1 + 992) = v9 / (float)(v9 + 1.0);
    *(float *)(a1 + 996) = *(float *)(v7 + 60) * 0.01;
    *(float *)(a1 + 1000) = DspLib::dB2Amp(v10, *(float *)(v7 + 64));
    *(_DWORD *)(a1 + 1008) = *(_DWORD *)(v7 + 80);
    v12 = DspLib::dB2Amp(v11, *(float *)(v7 + 76));
    *(float *)(a1 + 1004) = v12 / (float)(v12 + 1.0);
    *(_DWORD *)(a1 + 1012) = *(_DWORD *)(v7 + 32);
    *(_DWORD *)(a1 + 1016) = *(_DWORD *)(v7 + 36);
    *(_DWORD *)(a1 + 1020) = *(_DWORD *)(v7 + 40);
    *(_DWORD *)(a1 + 1024) = *(_DWORD *)(v7 + 44);
    *(_DWORD *)(a1 + 1028) = *(_DWORD *)(v7 + 48);
    *(_DWORD *)(a1 + 1032) = *(_DWORD *)(v7 + 52);
    *(_BYTE *)(a1 + 406) = *(float *)(v7 + 84) != 0.0;
    v13 = *(double *)a1 * 0.00048828125;
    v14.i64[0] = 0xFFFFFFFFLL;
    v14.i64[1] = 0xFFFFFFFFLL;
    v15 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 864)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v13), 0)))), v14)), v13));
    *(float32x2_t *)(a1 + 856) = v15;
    v16 = *(float *)(a1 + 872) * v13;
    DspLib::ComplexMatrix::setDimensions((DspLib::ComplexMatrix *)(a1 + 504), 3, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), v15).f32[0] / v16));
    DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV2 *)(a1 + 504), *(float *)(a1 + 856), v16, v17);
    std::vector<unsigned long>::resize(a1 + 8, *(_QWORD *)(a1 + 536));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x800, *(float *)(a1 + 856), *(float *)(a1 + 860), *(double *)a1, (unint64_t)*(float *)(a1 + 872), (unint64_t **)&v22);
    v18 = *(void **)(a1 + 8);
    if (v18)
    {
      *(_QWORD *)(a1 + 16) = v18;
      operator delete(v18);
    }
    *(_OWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 24) = v23;
    v19 = *(double *)a1 * 0.00048828125 * *(float *)(a1 + 872);
    *(float *)(a1 + 40) = v19;
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 600), *(_QWORD *)(a1 + 536));
    DspLibBuffer::initialize((DspLibBuffer *)(a1 + 680), *(_QWORD *)(a1 + 536), 1u);
    DspLibBuffer::setNumFrames((_QWORD *)(a1 + 680), *(_QWORD *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 776), *(_QWORD *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 880), *(_QWORD *)(a1 + 536));
    DspLib::ComplexVector::operator=(a1 + 880, 0.0);
    DspLib::ComplexMatrix::setDimensions((DspLib::ComplexMatrix *)(a1 + 48), 3, *(_QWORD *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 144), *(_QWORD *)(a1 + 536));
    DspLib::ComplexMatrix::setDimensions((DspLib::ComplexMatrix *)(a1 + 224), *(_QWORD *)(a1 + 536), 3);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 320), *(_QWORD *)(a1 + 536));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 424), *(_QWORD *)(a1 + 536));
    v20 = *(double *)a1
        / (double)vcvtad_u64_f64(*(double *)a1* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this, (v5 + 2) | 0x300000000));
    *(float *)(a1 + 32) = expf(-1.0 / (float)((float)((float)(*(float *)(v7 + 28) * 1000.0) * v20) / 1000.0));
    *(float *)(a1 + 36) = expf(-1.0 / (float)((float)((float)(*(float *)(v7 + 72) * 1000.0) * v20) / 1000.0));
    *(_BYTE *)(a1 + 45) = 1;
  }
  else
  {
    v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 801);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, unint64_t *a2)
{
  double result;
  uint64_t v4;

  *((_QWORD *)this + 120) = DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readInductanceModel((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, a2);
  *((_DWORD *)this + 242) = v4;
  *((_BYTE *)this + 972) = BYTE4(v4);
  if ((v4 & 0xFF00000000) == 0)
  {
    *((_DWORD *)this + 100) = 0;
    *((_WORD *)this + 202) = 0;
    result = 524288.0;
    *((_QWORD *)this + 51) = 0x4120000000000000;
    *((_DWORD *)this + 104) = 0;
  }
  return result;
}

uint64_t DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, unsigned int a2)
{
  return DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeInductanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, *((_QWORD *)this + 120), *((_QWORD *)this + 121), a2);
}

BOOL DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::process(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  char *v12;
  DspLib::ComplexSpan *v13;
  float v14;
  _BOOL8 result;
  uint64_t v16;
  DSPSplitComplex *v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  DspLib::ComplexSpan *v21;
  DspLib::ComplexMatrix *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  DspLib::ComplexSpan *v28;
  uint64_t v29;
  const DspLib::ComplexSpan *v30;
  char v31;
  float32x2_t v33[2];
  DSPSplitComplex __B;
  uint64_t v35;
  DSPSplitComplex v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 45))
  {
    v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v12, 894);
    ++DspLibDebug::mAssertCounter;
  }
  DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (_QWORD *)this + 75, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680), (uint64_t *)this + 1);
  DspLib::LoudspeakerSystemIDV2::updateWeights((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 880), v13, *((float *)this + 248));
  *((float *)this + 102) = v14;
  result = DspLib::LoudspeakerSystemIDV2::safeToAdapt((uint64_t *)a5, (float *)this + 100, (uint64_t *)this + 1, (float *)this + 104, v14, *((float *)this + 248), *((float *)this + 249), *((float *)this + 250));
  if (result)
  {
    v16 = MEMORY[0x1E0C80A78](result);
    v17 = (DSPSplitComplex *)MEMORY[0x1E0C80A78](v16);
    v18 = *((_QWORD *)this + 67);
    v36.realp = v20;
    v36.imagp = (float *)((char *)&v33[-1] - v19);
    v37 = v18;
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v17, &v36, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), (float *)this + 240);
    DspLib::ComplexVector::operator=((uint64_t)this + 776, (uint64_t)a6);
    DspLib::operator+=((char *)this + 776, &v36);
    DspLib::operator+=((uint64_t)this + 776, a4);
    DspLib::LoudspeakerSystemIDV2::updateModelFitData((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680), a6, a4, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 776), (DSPSplitComplex *)((char *)this + 424), v21);
    DspLib::LoudspeakerSystemIDV2::updateMInInductanceModel((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), (float *)this + 240, (DSPSplitComplex *)this + 55, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 48));
    DspLib::LoudspeakerSystemIDV2::updateAInverseInInductanceModel((uint64_t)this + 504, (float *)this + 240, (uint64_t)this + 144, (uint64_t)this + 880);
    DspLib::LoudspeakerSystemIDV2::updateXInInductanceModel((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 424), (DSPSplitComplex *)this + 9, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), v22);
    v24 = MEMORY[0x1E0C80A78](v23);
    MEMORY[0x1E0C80A78](v24);
    __B.realp = v26;
    __B.imagp = (float *)((char *)&v33[-1] - v25);
    v35 = v27;
    DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), 0, &__B);
    DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)((char *)this + 424));
    DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
    DspLib::operator*=((DSPSplitComplex *)this + 20, (DSPSplitComplex *)this + 9);
    memset(v33, 0, 13);
    result = DspLib::LoudspeakerSystemIDV2::updateModelParameters((DspLib::LoudspeakerSystemIDV2 *)v33, (float *)v33 + 1, (float *)&v33[1], (float *)this + 12, (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), (DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 320), v28, 1.0e-10);
    if (result
      && (result = DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::parametersAreValid((uint64_t)this, v33, (uint64_t)a6, a4, v29, v30)))
    {
      *((float32x2_t *)this + 120) = v33[0];
      *(float32x2_t *)((char *)this + 965) = *(float32x2_t *)((char *)v33 + 5);
      v31 = 1;
    }
    else
    {
      v31 = 0;
    }
    *((_BYTE *)this + 405) = v31;
    *((_BYTE *)this + 404) = *((float *)this + 103) < *((float *)this + 252);
  }
  else
  {
    *((_WORD *)this + 202) = 0;
  }
  return result;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(DSPSplitComplex *result, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  DSPSplitComplex __B;
  uint64_t v19;
  DSPSplitComplex __A;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a3 + 4))
  {
    v7 = MEMORY[0x1E0C80A78](result);
    MEMORY[0x1E0C80A78](v7);
    v9 = *(_QWORD *)(v8 + 32);
    __A.realp = v11;
    __A.imagp = (float *)((char *)&v17 - v10);
    v21 = v9;
    DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
    v13 = MEMORY[0x1E0C80A78](v12);
    MEMORY[0x1E0C80A78](v13);
    __B.realp = v15;
    __B.imagp = (float *)((char *)&v17 - v14);
    v19 = v16;
    DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
    DspLib::operator*=((uint64_t)&__A, a4[2]);
    DspLib::operator*=((uint64_t)&__B, a4[1]);
    DspLib::operator+=(&__A, &__B);
    DspLib::ComplexMatrixSpan::row(a3, 0, &__B);
    DspLib::operator+=((uint64_t)&__B, *a4);
    if (fabsf(*__B.realp) < 0.00000011921)
      *__B.realp = 0.00000011921;
    DspLib::ComplexSpan::operator=(a2, &__A);
    return DspLib::operator/=(a2, &__B);
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::updateMInInductanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v8;
  DspLib::ComplexMatrixSpan *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  DSPSplitComplex *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex __C;
  uint64_t v24;
  DSPSplitComplex __A;
  uint64_t v26;
  DSPSplitComplex __B;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v8);
  __B.realp = v11;
  __B.imagp = (float *)((char *)&__C - v10);
  v28 = v12;
  DspLib::ComplexMatrixSpan::row(v9, 0, &__B);
  v13 = DspLib::operator+=((uint64_t)&__B, *a2);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  __A.realp = v16;
  __A.imagp = (float *)((char *)&__C - v15);
  v26 = v17;
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  v18 = DspLib::operator*=(&__A, a3);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  __C.realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  v24 = v22;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__C);
  DspLib::operator*=((uint64_t)&__C, -a2[2]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -a2[1]);
  DspLib::operator+=(&__A, &__C);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

uint64_t DspLib::LoudspeakerSystemIDV2::updateAInverseInInductanceModel(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  DspLib::ComplexMatrixSpan *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  DSPSplitComplex v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](a1);
  v8 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v7);
  v13.realp = v10;
  v13.imagp = (float *)((char *)&v13 - v9);
  v14 = v11;
  DspLib::ComplexMatrixSpan::row(v8, 0, &v13);
  DspLib::operator+=((uint64_t)&v13, *a2);
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &v13);
}

void DspLib::LoudspeakerSystemIDV2::updateXInInductanceModel(DspLib::LoudspeakerSystemIDV2 *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  DSPSplitComplex *v12;
  DSPSplitComplex __C;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](this);
  MEMORY[0x1E0C80A78](v8);
  __C.realp = v10;
  __C.imagp = (float *)((char *)&__C - v9);
  v14 = v11;
  DspLib::ComplexSpan::operator=(&__C, v12);
  DspLib::operator*=((uint64_t)&__C, -1.0);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 1uLL, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 0, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
}

BOOL DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::parametersAreValid(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  DspLib::LoudspeakerSystemIDV2 *v10;
  float *v11;
  const DspLib::ComplexSpan *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float32_t v20;
  uint64_t v21;
  uint64_t v22;
  DSPSplitComplex *v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  DspLib::ComplexMatrixSpan *v27;
  const DspLib::ComplexSpan *v28;
  float v29;
  char v30;
  float v31;
  _BOOL8 result;
  DSPSplitComplex v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 600);
  v11 = (float *)(a1 + 776);
  v12 = (const DspLib::ComplexSpan *)(a1 + 424);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 600), *(const DspLib::ComplexSpan **)(a1 + 880), (float *)(a1 + 776), (const DspLib::ComplexSpan *)(a1 + 424), a6);
  *(_DWORD *)(a1 + 412) = v13;
  v14 = 36;
  if (*(float *)(a1 + 408) > *(float *)(a1 + 1004))
    v14 = 32;
  v15 = *(float *)(a1 + v14);
  *a2 = vmla_n_f32(*a2, vsub_f32(*(float32x2_t *)(a1 + 960), *a2), v15);
  a2[1].f32[0] = a2[1].f32[0] + (float)(v15 * (float)(*(float *)(a1 + 968) - a2[1].f32[0]));
  v16 = *(float *)(a1 + 1024);
  v17 = a2[1].f32[0] + (float)(COERCE_FLOAT(a2->i32[1] ^ 0x80000000) * a2->f32[0]);
  v18 = v17 / a2->f32[0];
  v19 = a2->f32[0] < 1.0e-12;
  v35 = a2->f32[1];
  if (!v19)
    v16 = v18;
  v36 = v16;
  v37 = v17;
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::clipTsParameters((float *)a1, &v35);
  v20 = v37 + (float)((float)(v35 * v37) / v36);
  *a2 = (float32x2_t)(COERCE_UNSIGNED_INT(v37 / v36) | ((unint64_t)LODWORD(v35) << 32));
  a2[1].i8[4] = 0;
  a2[1].f32[0] = v20;
  v22 = MEMORY[0x1E0C80A78](v21);
  v23 = (DSPSplitComplex *)MEMORY[0x1E0C80A78](v22);
  v24 = *(_QWORD *)(a1 + 536);
  v33.realp = v26;
  v33.imagp = (float *)((char *)&v33 - v25);
  v34 = v24;
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v23, &v33, v27, (float *)a2);
  DspLib::ComplexVector::operator=((uint64_t)v11, a3);
  DspLib::operator+=(v11, &v33);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 880), v11, v12, v28);
  v30 = 1;
  *(_BYTE *)(a1 + 404) = 1;
  v31 = *(float *)(a1 + 412);
  if (v29 >= v31)
    v30 = 0;
  else
    *(float *)(a1 + 412) = v29;
  result = v29 < v31;
  *(_BYTE *)(a1 + 405) = v30;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::status(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  char *v10;

  if (*((_BYTE *)this + 44))
  {
    v4 = *((float *)this + 241);
    v5 = *((float *)this + 240);
    v6 = *((float *)this + 242) - (float)(v4 * v5);
    if (v5 == 0.0)
      v7 = *((float *)this + 256);
    else
      v7 = v6 / v5;
    *(float *)(a2 + 16) = v4;
    *(float *)(a2 + 20) = v7;
    if (*((_BYTE *)this + 404))
      v8 = 1.0;
    else
      v8 = 0.0;
    *(float *)(a2 + 24) = v6;
    *(float *)(a2 + 28) = v8;
    if (*((_BYTE *)this + 405))
      v9 = 1.0;
    else
      v9 = 0.0;
    *(float *)(a2 + 68) = v9;
    *(float *)(a2 + 32) = (float)*((unint64_t *)this + 67);
    *(_DWORD *)(a2 + 36) = *((_DWORD *)this + 10);
    *(_DWORD *)(a2 + 52) = *((_DWORD *)this + 214);
    *(_DWORD *)(a2 + 56) = *((_DWORD *)this + 215);
    *(_DWORD *)(a2 + 12) = *((_DWORD *)this + 100);
    *(_DWORD *)(a2 + 40) = *((_DWORD *)this + 104);
    *(_DWORD *)(a2 + 44) = *((_DWORD *)this + 102);
    *(float *)(a2 + 48) = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin(this);
    *(_DWORD *)(a2 + 64) = *((_DWORD *)this + 103);
  }
  else
  {
    v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 939);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::clipTsParameters(float *a1, float *a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float result;

  v2 = a1 + 253;
  v3 = a1 + 254;
  if (a1[254] >= *a2)
    v3 = a2;
  if (*a2 >= a1[253])
    v2 = v3;
  *a2 = *v2;
  v4 = a1 + 255;
  v5 = a1 + 256;
  v6 = a2[1];
  if (a1[256] >= v6)
    v5 = a2 + 1;
  if (v6 >= a1[255])
    v4 = v5;
  a2[1] = *v4;
  v7 = a1 + 257;
  v8 = a1 + 258;
  v10 = a2[2];
  v9 = a2 + 2;
  v11 = v10;
  if (a1[258] >= v10)
    v8 = v9;
  if (v11 >= a1[257])
    v7 = v8;
  result = *v7;
  *v9 = *v7;
  return result;
}

float DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters(uint64_t a1)
{
  return *((float *)&a1 + 1);
}

unint64_t DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(float a1, float a2, float a3)
{
  return COERCE_UNSIGNED_INT(a3 / a2) | ((unint64_t)LODWORD(a1) << 32);
}

void DspLib::LoudspeakerSystemIDV2::updateMTimesX(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const float *v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float *v20;
  float *v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  _OWORD v24[2];
  _QWORD v25[4];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v6 = a2[3];
  v7 = a2[4];
  v26[0] = *a2;
  v26[1] = v7 * v6;
  v26[2] = v6;
  v26[3] = v7;
  v8 = a3[3];
  v9 = a3[4];
  v25[0] = *a3;
  v25[1] = v9 * v8;
  v25[2] = v8;
  v25[3] = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v10;
  DspLib::multiply((uint64_t)v26, (uint64_t)v25, (float **)v24);
  v12 = a2[3];
  v13 = a3[4];
  if ((unint64_t)(v13 * v12) <= 1)
    v14 = 1;
  else
    v14 = v13 * v12;
  MEMORY[0x1E0C80A78](v11);
  v16 = (const float *)((char *)v21 - v15);
  v17 = a2[4];
  v23[0] = a2[1];
  v23[1] = v17 * (_QWORD)v18;
  v23[2] = v18;
  v23[3] = v17;
  v19 = a3[3];
  v22[0] = a3[1];
  v22[1] = v19 * (_QWORD)v20;
  v22[2] = v19;
  v22[3] = v20;
  v21[0] = (float *)((char *)v21 - v15);
  v21[1] = (float *)v14;
  v21[2] = v18;
  v21[3] = v20;
  DspLib::multiply((uint64_t)v23, (uint64_t)v22, v21);
  DspLib::add(*(float **)a1, *(_QWORD *)(a1 + 8), v16);
}

void DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16[4];
  _QWORD v17[4];
  _OWORD v18[2];
  float *v19[4];
  _QWORD v20[4];
  _OWORD v21[2];

  v6 = a2[1];
  v21[0] = *a2;
  v21[1] = v6;
  v7 = a3[3];
  v8 = a3[4];
  v20[0] = *a3;
  v20[1] = v8 * v7;
  v20[2] = v7;
  v20[3] = v8;
  v9 = *(float **)(a1 + 24);
  v10 = *(float **)(a1 + 32);
  v19[0] = *(float **)a1;
  v19[1] = (float *)((_QWORD)v10 * (_QWORD)v9);
  v19[2] = v9;
  v19[3] = v10;
  DspLib::multiply((uint64_t)v21, (uint64_t)v20, v19);
  v11 = a2[1];
  v18[0] = *a2;
  v18[1] = v11;
  v12 = a3[3];
  v13 = a3[4];
  v17[0] = a3[1];
  v17[1] = v13 * v12;
  v17[2] = v12;
  v17[3] = v13;
  v14 = *(float **)(a1 + 24);
  v15 = *(float **)(a1 + 32);
  v16[0] = *(float **)(a1 + 8);
  v16[1] = (float *)((_QWORD)v15 * (_QWORD)v14);
  v16[2] = v14;
  v16[3] = v15;
  DspLib::multiply((uint64_t)v18, (uint64_t)v17, v16);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

int8x16_t DspLib::CPUMeasure::start(int8x16_t *this)
{
  int32x2_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int8x16_t result;
  int8x16_t v6;

  this[5].i64[1] = 0;
  this[6].i64[0] = 0;
  this[6].i64[1] = 0;
  this->i64[0] = mach_absolute_time();
  v2 = vdup_n_s32(thread_selfcounts() == 0);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  v4 = vandq_s8(v6, (int8x16_t)vcltzq_s64(vshlq_n_s64(v3, 0x3FuLL)));
  result = vextq_s8(v4, v4, 8uLL);
  this[2] = result;
  return result;
}

void DspLib::CPUMeasure::stop(DspLib::CPUMeasure *this, unint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int32x2_t v8;
  double v9;
  float v10;
  float v11;
  int32x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  int32x2_t v19;
  float32x2_t v21;
  float v22;
  int8x16_t v23;

  v5 = mach_absolute_time();
  v6 = *((_QWORD *)this + 1);
  v22 = (float)(v5 - (*(_QWORD *)this + *((_QWORD *)this + 11)));
  *((_QWORD *)this + 1) = v5;
  v7 = thread_selfcounts() == 0;
  *(float *)v8.i32 = (float)a2;
  v19 = v8;
  v9 = a3 / (double)a2;
  v10 = exp(-1.0 / (v9 * 0.5));
  v11 = (float)((float)(1.0 - v10) * (float)(v5 - v6)) + (float)(*((float *)this + 5) * v10);
  *((float *)this + 4) = (float)((float)(1.0 - v10) * v22) + (float)(*((float *)this + 4) * v10);
  *((float *)this + 5) = v11;
  v12 = vdup_n_s32(v7);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  v14 = (int64x2_t)vandq_s8(vextq_s8(v23, v23, 8uLL), (int8x16_t)vcltzq_s64(vshlq_n_s64(v13, 0x3FuLL)));
  v21 = vcvt_f32_f64(vmulq_f64(vmulq_n_f64(vcvtq_f64_f32(vdiv_f32((float32x2_t)vand_s8((int8x8_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vsubq_s64(v14, vaddq_s64(*((int64x2_t *)this + 6), *((int64x2_t *)this + 2))))), (int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vsubq_s64(v14, *((int64x2_t *)this + 6)), *((uint64x2_t *)this + 2)))), (float32x2_t)vdup_lane_s32(v19, 0))), a3), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
  *((float32x2_t *)this + 6) = vmla_n_f32(vmul_n_f32(v21, 1.0 - v10), *(float32x2_t *)((char *)this + 48), v10);
  v15 = exp(-1.0 / (v9 * 4.0));
  v16 = vmul_n_f32(*(float32x2_t *)((char *)this + 24), v15);
  v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v21, 0);
  v17.f32[0] = v22;
  *((int8x8_t *)this + 3) = vbsl_s8((int8x8_t)vcgt_f32(v17, v16), (int8x8_t)v17, (int8x8_t)v16);
  v18 = *((float *)this + 14) * v15;
  if (v18 < v21.f32[1])
    v18 = v21.f32[1];
  *((float *)this + 14) = v18;
}

int8x16_t DspLib::CPUMeasure::pause(DspLib::CPUMeasure *this)
{
  int32x2_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int8x16_t result;
  int8x16_t v6;

  *((_QWORD *)this + 8) = mach_absolute_time();
  v2 = vdup_n_s32(thread_selfcounts() == 0);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  v4 = vandq_s8(v6, (int8x16_t)vcltzq_s64(vshlq_n_s64(v3, 0x3FuLL)));
  result = vextq_s8(v4, v4, 8uLL);
  *(int8x16_t *)((char *)this + 72) = result;
  return result;
}

int64x2_t DspLib::CPUMeasure::resume(DspLib::CPUMeasure *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  int64x2_t result;
  uint64_t v8;
  uint64_t v9;

  v2 = mach_absolute_time();
  v3 = thread_selfcounts();
  v4 = v8;
  v5 = v9;
  if (v3)
  {
    v4 = 0;
    v5 = 0;
  }
  v6.i64[0] = v2;
  v6.i64[1] = v5;
  result = vaddq_s64(vsubq_s64(v6, *((int64x2_t *)this + 4)), *(int64x2_t *)((char *)this + 88));
  *(int64x2_t *)((char *)this + 88) = result;
  *((_QWORD *)this + 13) += v4 - *((_QWORD *)this + 10);
  return result;
}

double DspLib::CPUMeasure::percentCPU@<D0>(DspLib::CPUMeasure *this@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v2;
  const float *v3;
  float32x2_t v4;
  double result;

  v2.i32[0] = *((_DWORD *)this + 4);
  v3 = (const float *)((char *)this + 20);
  v2.i32[1] = *((_DWORD *)this + 6);
  v4 = vld1_dup_f32(v3);
  *(float32x2_t *)a2 = vmul_f32(vdiv_f32(v2, v4), (float32x2_t)vdup_n_s32(0x42C80000u));
  v4.i32[0] = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 12);
  *(_DWORD *)(a2 + 12) = v4.i32[0];
  result = *(double *)((char *)this + 52);
  *(double *)(a2 + 16) = result;
  return result;
}

void DspLib::BuzzKill::BuzzKillFFT::processWithDifference(DspLib::BuzzKill::BuzzKillFFT *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  const float *v8;
  char *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    if (*((_DWORD *)this + 3))
    {
      v2 = 0;
      v3 = 0;
      v4 = 0;
      do
      {
        MEMORY[0x1E0C80A78](this);
        v6 = (_DWORD *)((char *)v10 - v5);
        v7 = *((_QWORD *)this + 28);
        DspLib::subtract(v8 + 1, v7 - 1, v8, v7 - 1, (float *)((char *)v10 - v5 + 4));
        *v6 = 0;
        DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)(*((_QWORD *)this + 39) + v3), (uint64_t)v6, v7, (DSPSplitComplex *)(*((_QWORD *)this + 36) + v2));
        ++v4;
        v3 += 88;
        v2 += 80;
      }
      while (v4 < *((unsigned int *)this + 3));
    }
  }
  else
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKillClasses.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 11);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::BuzzKill::FFTForDisplay::initialize(DspLib::BuzzKill::FFTForDisplay *this, double a2, uint64_t a3)
{
  *(double *)this = a2;
  *((_QWORD *)this + 1) = a3;
  return DspLib::FFT::Filterbank::initialize((DspLib::BuzzKill::FFTForDisplay *)((char *)this + 24), 1, 44100.0);
}

void DspLib::BuzzKill::FFTForDisplay::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unsigned int v8;
  _QWORD *v9;
  __n128 v10;
  float v11;
  float v12;

  v8 = 1 << vcvtas_u32_f32(*(float *)a2);
  *(_DWORD *)(a1 + 384) = v8;
  v9 = (_QWORD *)(a1 + 392);
  DspLibBuffer::initialize((DspLibBuffer *)(a1 + 392), (v8 >> 1) + 1, 1u);
  DspLibBuffer::setNumFrames(v9, ((unint64_t)*(unsigned int *)(a1 + 384) >> 1) + 1);
  v10.n128_u32[0] = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = v10.n128_f32[0];
  DspLib::FFT::Filterbank::setParameters(a1 + 24, (const void *)a2, a3, v10);
  v11 = roundf((float)((float)(*(float *)(a2 + 4) / -100.0) + 1.0) * (float)*(unsigned int *)(a1 + 384));
  *(float *)(a1 + 20) = a4;
  v12 = *(double *)a1;
  *(float *)(a1 + 488) = expf(-1.0 / (float)((float)((float)(v12 / (float)v11) * a4) / 1000.0));
}

void DspLib::BuzzKill::FFTForDisplay::reset(DspLib::BuzzKill::FFTForDisplay *this)
{
  DspLibBuffer *v1;
  float *v2;
  vDSP_Length cycle_count;

  v1 = this;
  DspLib::FFT::Filterbank::reset((DspLib::BuzzKill::FFTForDisplay *)((char *)this + 24));
  v1 = (DspLibBuffer *)((char *)v1 + 392);
  v2 = (float *)DspLibBuffer::channel(v1, 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);
  DspLib::clear(v2, cycle_count);
}

void DspLib::BuzzKill::FFTForDisplay::process(DspLib::BuzzKill::FFTForDisplay *this, float *__C, vDSP_Length __N)
{
  unsigned int v3;
  unint64_t v5;
  float v6;
  unsigned int v7;
  vDSP_Length v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  float v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  _QWORD v17[3];
  _QWORD v18[2];

  v3 = __N;
  v18[1] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned int *)this + 96);
  v6 = 2.0 / (float)*((unint64_t *)this + 1);
  v16 = __C;
  DspLib::multiply(__C, __N, v6);
  if (v3)
  {
    v7 = 0;
    v8 = (v5 >> 1) + 1;
    v9 = 4 * v8;
    do
    {
      v17[0] = v18;
      v17[1] = 1;
      v17[2] = v3 - v7;
      v18[0] = &v16[v7];
      v10 = DspLib::FFT::Filterbank::audioInput((uint64_t)this + 24, v17);
      v11 = *(_DWORD *)(*((_QWORD *)this + 42) + 72);
      if (v11)
      {
        if (*((_DWORD *)this + 4) == 1)
        {
          v12 = *(double *)this;
          *((float *)this + 122) = expf(-1.0 / (float)((float)(*((float *)this + 5) * (float)(v12 / (float)v11)) / 1000.0));
        }
        v13 = (float *)DspLibBuffer::channel((DspLib::BuzzKill::FFTForDisplay *)((char *)this + 392), 0);
        DspLib::multiply(v13, v8, *((float *)this + 122));
        MEMORY[0x1E0C80A78](v14);
        DspLib::FFT::amplitude(*((_QWORD *)this + 39), (float *)((char *)&v17[-1] - ((v9 + 15) & 0x7FFFFFFF0)), v8);
        v15 = (float *)DspLibBuffer::channel((DspLib::BuzzKill::FFTForDisplay *)((char *)this + 392), 0);
        DspLib::vmax(v15, v8, (const float *)((char *)&v17[-1] - ((v9 + 15) & 0x7FFFFFFF0)));
      }
      v7 += v10;
    }
    while (v7 < v3);
  }
}

void DspLib::BuzzKill::FFTForDisplay::status(uint64_t a1, uint64_t a2)
{
  DspLibBuffer *v4;
  unsigned int cycle_count;
  uint64_t v6;
  unsigned int v7;
  int v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  unsigned int v20;

  v4 = (DspLibBuffer *)(a1 + 392);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 392));
  if (cycle_count >= 2)
  {
    v6 = DspLibBuffer::channel(v4, 0);
    v7 = 0;
    v8 = 0;
    v9 = *(double *)a1;
    v10 = v9 / (float)*(unsigned int *)(a1 + 384);
    v11 = (float *)(a2 + 4048);
    v12 = -501;
    while (1)
    {
      v13 = v11[701];
      v14 = cycle_count - 2 >= (float)(v13 / v10) ? (float)(v13 / v10) : cycle_count - 2;
      *v11 = (float)((float)(*(float *)(v6 + 4 * (v14 + 1)) * (float)((float)(v13 / v10) - (float)v14))
                   + (float)((float)(1.0 - (float)((float)(v13 / v10) - (float)v14)) * *(float *)(v6 + 4 * v14)))
           + 0.00001;
      if ((float)(v13 - *(float *)(a2 + 4 * (v8 + 1713))) > v10)
        break;
      v8 = v12 + 501;
      ++v11;
      v7 = (float)(v13 / v10);
      if (__CFADD__(v12++, 1))
        goto LABEL_23;
    }
    if ((v12 + 501) <= 0x1F4)
    {
      v16 = v12 + 501;
      do
      {
        v17 = a2 + 4 * v16;
        v18 = vcvtas_u32_f32(*(float *)(v17 + 6852) / v10);
        if (cycle_count - 1 < v18)
          v18 = cycle_count - 1;
        v19 = *(float *)(v6 + 4 * v18);
        if (v7 <= v18)
        {
          if (v7 + 1 <= v18 + 1)
            v20 = v18 + 1;
          else
            v20 = v7 + 1;
          do
          {
            if (*(float *)(v6 + 4 * v7) > v19)
              v19 = *(float *)(v6 + 4 * v7);
            ++v7;
          }
          while (v20 != v7);
          v7 = v20;
        }
        *(float *)(v17 + 4048) = v19 + 0.00001;
        ++v16;
      }
      while (v16 != 501);
    }
LABEL_23:
    DspLib::amp2dB((float *)(a2 + 4048), 0x1F5uLL, 1.0);
  }
}

uint64_t DspLib::BuzzKill::HighBuzzKillFFT::initialize(DspLib::BuzzKill::HighBuzzKillFFT *this, int a2)
{
  __n128 v3;
  float *v4;
  vDSP_Length cycle_count;
  _OWORD v7[2];
  uint64_t v8;

  v8 = 0;
  v7[0] = xmmword_1B6628370;
  v7[1] = xmmword_1B6628390;
  DspLib::FFT::Filterbank::initialize(this, a2, 44100.0);
  DspLib::FFT::Filterbank::setParameters((uint64_t)this, v7, 10, v3);
  DspLibBuffer::initialize((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 456), 0x21uLL, 1u);
  DspLibBuffer::setNumFrames((_QWORD *)this + 57, 0x21uLL);
  v4 = (float *)DspLibBuffer::channel((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 456), 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 456));
  DspLib::fill(v4, cycle_count, 1.0);
  return DspLibBuffer::initialize((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 360), 0x21uLL, 1u);
}

void DspLib::BuzzKill::HighBuzzKillFFT::process(DspLib::BuzzKill::HighBuzzKillFFT *this, float **a2, float **a3, unsigned int a4)
{
  DspLib::BuzzKill::HighBuzzKillFFT *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  DspLibBuffer *v8;
  DspLibBuffer *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float **v15;
  _QWORD *v16;
  float **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  const float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float **v29;
  float **v30;
  uint64_t v31;
  uint64_t v32;
  float ***v33;
  unsigned int v34;
  _QWORD v35[3];
  _QWORD v36[2];
  uint64_t v37;
  float __C[36];
  uint64_t v39;

  v30 = a3;
  v29 = a2;
  v39 = *MEMORY[0x1E0C80C00];
  v34 = a4;
  if (a4)
  {
    v4 = this;
    v5 = 0;
    v6 = *((unsigned int *)this + 3);
    v7 = 512;
    v31 = 8 * v6;
    if ((unint64_t)(8 * v6) < 0x200)
      v7 = 8 * v6;
    v32 = v7;
    v8 = (DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 456);
    v9 = (DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 360);
    v10 = v7;
    do
    {
      v33 = &v29;
      v11 = v31;
      MEMORY[0x1E0C80A78](this);
      v12 = (v11 + 15) & 0xFFFFFFFF0;
      bzero((char *)&v29 - v12, v10);
      MEMORY[0x1E0C80A78](v13);
      bzero((char *)&v29 - v12, v10);
      if ((_DWORD)v6)
      {
        v14 = v6;
        v15 = v29;
        v16 = (float ***)((char *)&v29 - v12);
        v17 = v30;
        v18 = (float ***)((char *)&v29 - v12);
        do
        {
          v19 = (uint64_t)*v15++;
          *v16++ = v19 + 4 * v5;
          v20 = (uint64_t)*v17++;
          *v18++ = v20 + 4 * v5;
          --v14;
        }
        while (v14);
      }
      v36[0] = (char *)&v29 - v12;
      v36[1] = v6;
      v37 = v34 - v5;
      v35[0] = (char *)&v29 - v12;
      v35[1] = v6;
      v35[2] = v37;
      this = (DspLib::BuzzKill::HighBuzzKillFFT *)DspLib::FFT::Filterbank::audioInputOutput((uint64_t)v4, v36, v35);
      v21 = (int)this;
      if (*(_QWORD *)(*((_QWORD *)v4 + 39) + 72))
        v22 = (_DWORD)v6 == 0;
      else
        v22 = 1;
      if (!v22)
      {
        v23 = 0;
        do
        {
          DspLib::FFT::amplitude(*((_QWORD *)v4 + 36) + v23, __C, 0x21uLL);
          v24 = (const float *)DspLibBuffer::channel(v8, 0);
          v25 = (float *)DspLibBuffer::channel(v9, 0);
          DspLib::divide(v24, 0x21uLL, __C, 33, v25);
          v26 = (float *)DspLibBuffer::channel(v9, 0);
          DspLib::clip(v26, 0x21uLL, 0.0, 1.0);
          v27 = *((_QWORD *)v4 + 36) + v23;
          v28 = DspLibBuffer::channel(v9, 0);
          DspLib::FFT::multiply(v27, v28, 0x21uLL);
          v23 += 80;
        }
        while (80 * v6 != v23);
      }
      v5 += v21;
    }
    while (v5 < v34);
  }
}

uint64_t DspLib::BuzzKill::MitigationFilterBank::initialize(uint64_t this, uint64_t a2, double a3)
{
  *(_QWORD *)(this + 16) = a2;
  *(double *)(this + 8) = a3;
  return this;
}

double DspLib::BuzzKill::MitigationFilterBank::uninitialize(DspLib::BuzzKill::MitigationFilterBank *this)
{
  double result;

  *((_QWORD *)this + 92) = *((_QWORD *)this + 91);
  *((_QWORD *)this + 95) = *((_QWORD *)this + 94);
  DspLib::NotchFilterBank::FilterBank::uninitialize((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32));
  result = 0.0;
  *((_QWORD *)this + 90) = 0;
  return result;
}

void DspLib::BuzzKill::MitigationFilterBank::reset(DspLib::BuzzKill::MitigationFilterBank *this)
{
  DspLib::fill(*((float **)this + 91), (uint64_t)(*((_QWORD *)this + 92) - *((_QWORD *)this + 91)) >> 2, 1000.0);
  DspLib::fill(*((float **)this + 94), (uint64_t)(*((_QWORD *)this + 95) - *((_QWORD *)this + 94)) >> 2, 1.0);
  DspLib::NotchFilterBank::FilterBank::reset((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32));
  DspLib::NotchFilterBank::FilterBank::setNotchFilters((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32), *((float **)this + 91), *((float **)this + 94), 0, *((_DWORD *)this + 181));
  DspLib::NotchFilterBank::FilterBank::setLowShelveGain((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32), 0.0);
  *((_DWORD *)this + 6) = 0;
}

void DspLib::BuzzKill::MitigationFilterBank::setParameters(uint64_t a1, float *a2, float a3)
{
  unint64_t v6;
  int v7;
  float v8;
  __n128 v9;

  *(float *)(a1 + 776) = 1.0 - DspLib::dB2Amp((DspLib *)a1, a2[27]);
  LODWORD(v6) = vcvtas_u32_f32(a2[23]);
  if (*(_DWORD *)(a1 + 724) == (_DWORD)v6)
  {
    v7 = (a2[24] + 0.5);
    if (*(_DWORD *)(a1 + 720) == v7)
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)(a1 + 724) = v6;
    std::vector<float>::resize(a1 + 728, v6);
    std::vector<float>::resize(a1 + 752, *(unsigned int *)(a1 + 724));
    DspLib::fill(*(float **)(a1 + 728), (uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) >> 2, 1000.0);
    DspLib::fill(*(float **)(a1 + 752), (uint64_t)(*(_QWORD *)(a1 + 760) - *(_QWORD *)(a1 + 752)) >> 2, 1.0);
    v7 = (a2[24] + 0.5);
  }
  DspLib::NotchFilterBank::FilterBank::uninitialize((DspLib::NotchFilterBank::FilterBank *)(a1 + 32));
  DspLib::NotchFilterBank::FilterBank::setFilterMode(a1 + 32, v7);
  DspLib::NotchFilterBank::FilterBank::setNumNotchFilters(a1 + 32, *(_DWORD *)(a1 + 724));
LABEL_6:
  *(_DWORD *)(a1 + 720) = v7;
  v8 = *(double *)(a1 + 8);
  DspLib::NotchFilterBank::FilterBank::initialize((DspLib::NotchFilterBank::FilterBank *)(a1 + 32), *(_DWORD *)(a1 + 16), (double)vcvtas_u32_f32(v8 / a3));
  DspLib::NotchFilterBank::FilterBank::setLowShelveFrequency((DspLib::NotchFilterBank::FilterBank *)(a1 + 32), a2[25]);
  DspLib::NotchFilterBank::FilterBank::setParameters(a1 + 32, a2 + 40, 16, v9);
}

unsigned int DspLib::BuzzKill::MitigationFilterBank::numActiveFilters(DspLib::BuzzKill::MitigationFilterBank *this)
{
  unsigned int result;
  float v3;

  DspLib::NotchFilterBank::FilterBank::status((uint64_t)this + 32, &v3);
  result = vcvtas_u32_f32(v3);
  *((_DWORD *)this + 6) = result;
  return result;
}

void DspLib::BuzzKill::MitigationFilterBank::assignFilters(DspLib::BuzzKill::MitigationFilterBank *this, char a2, float *a3, float *a4, int a5, float *a6, float a7)
{
  DspLib::NotchFilterBank::FilterBank *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  _BYTE *v28;
  _OWORD v29[6];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v14 = (DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32);
  DspLib::NotchFilterBank::FilterBank::setLowShelveGain((DspLib::BuzzKill::MitigationFilterBank *)((char *)this + 32), 1.0);
  if ((a2 & 1) == 0)
  {
    v15 = (float *)*((_QWORD *)this + 91);
    v16 = (float *)*((_QWORD *)this + 94);
    v17 = *((unsigned int *)this + 181);
    if (a5)
    {
      v18 = 0;
      v19 = *(unsigned __int8 *)this;
      v20 = *((float *)this + 194);
      memset(v29, 0, sizeof(v29));
      v30 = 0;
      do
      {
        if ((_DWORD)v17)
        {
          v21 = 0;
          v22 = a3[v18];
          v23 = a4[v18];
          v24 = a6[v18];
          v25 = -1;
          v26 = 1.0e10;
          while (1)
          {
            v27 = (float)(1.0 / v22) * vabds_f32(v22, v15[v21]);
            if (v27 < a7)
              break;
            if (v16[v21] > v20 && v27 < v26)
            {
              v25 = v21;
              v26 = v27;
            }
            if (v17 == ++v21)
            {
              if ((v25 & 0x80000000) != 0)
                goto LABEL_19;
              v15[v25] = v22;
              if (!v19)
                v24 = v23;
              v16[v25] = v24;
              v28 = (char *)v29 + v25;
              goto LABEL_18;
            }
          }
          v28 = (char *)v29 + v21;
          if (*((_BYTE *)v29 + v21))
            goto LABEL_19;
          v15[v21] = v22;
          if (!v19)
            v24 = v23 * v16[v21];
          v16[v21] = v24;
LABEL_18:
          *v28 = 1;
        }
LABEL_19:
        ++v18;
      }
      while (v18 != a5);
    }
    DspLib::NotchFilterBank::FilterBank::setNotchFilters(v14, v15, v16, 0, v17);
  }
}

void DspLib::BuzzKill::MitigationFilterBank::status(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  int v23;
  float *v24;
  float *v25;

  *(float *)a2 = (float)*(unsigned int *)(a1 + 24);
  *(_DWORD *)(a2 + 4) = 0;
  v11 = *(unsigned int *)(a1 + 724);
  if ((_DWORD)v11)
  {
    memmove((void *)(a2 + 6052), *(const void **)(a1 + 728), 4 * v11);
    v12 = *(unsigned int *)(a1 + 724);
    if ((_DWORD)v12)
      memmove((void *)(a2 + 6452), *(const void **)(a1 + 752), 4 * v12);
  }
  v13 = a3 + a3;
  v14 = *(double *)(a1 + 8) * 0.5;
  if (v14 >= a4)
    v14 = a4;
  if (v13 < v14)
    v13 = v14;
  v15 = powf(v13 / a3, 0.002);
  v16 = 0;
  v17 = 1.0;
  do
  {
    *(float *)(a2 + 6852 + v16) = v17 * a3;
    v17 = v15 * v17;
    v16 += 4;
  }
  while (v16 != 2004);
  v18 = *(unsigned int *)(a1 + 724);
  if ((_DWORD)v18)
  {
    v19 = *(float **)(a1 + 752);
    v20 = *(float **)(a1 + 728);
    v21 = log10f(v15);
    do
    {
      if (*v19 < *(float *)(a1 + 776))
      {
        v22 = *v20;
        if (*v20 > 0.1)
        {
          v23 = (int)(float)((float)(log10f(v22 / a3) / v21) + 0.5);
          if (v23 >= 1)
            *(float *)(a2 + 4 * (v23 + 1713)) = v22;
        }
      }
      ++v19;
      ++v20;
      --v18;
    }
    while (v18);
  }
  if ((a6 & 1) != 0)
  {
    DspLib::clear((float *)(a2 + 2044), 0x1F5uLL);
  }
  else
  {
    v24 = (float *)(a2 + 6852);
    v25 = (float *)(a2 + 2044);
    DspLib::NotchFilterBank::FilterBank::getAmplitudeResponse((DspLib::NotchFilterBank::FilterBank *)(a1 + 32), v24, v25, 0x1F5u);
    DspLib::amp2dB(v25, 0x1F5uLL, 1.0);
  }
}

void DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>(uint64_t *a1, uint64_t a2, uint64_t a3, DSPSplitComplex *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  DSPComplex *v9;
  const float *v10;
  vDSP_Length v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (DSPComplex *)((char *)v12 - v8);
  DspLib::multiply(v10, v11, *(const float **)(v7 + 24), *(_QWORD *)(v7 + 32), (float *)((char *)v12 - v8));
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(a1, v9, v6, a4);
}

uint64_t DspLib::DynamicFilter::Algorithm::Algorithm(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(a1, (uint64_t)&DspLib::DynamicFilter::Parameters::kDefinition);
  *(_QWORD *)v6 = &off_1E69C1D88;
  *(_DWORD *)(v6 + 296) = 1;
  *(_DWORD *)(v6 + 1088) = 0;
  *(_DWORD *)(v6 + 1104) = 0;
  *(_QWORD *)(v6 + 1112) = 0;
  *(_BYTE *)(v6 + 1120) = 0;
  *(_OWORD *)(v6 + 1336) = 0u;
  *(_OWORD *)(v6 + 1352) = 0u;
  *(_OWORD *)(v6 + 1368) = 0u;
  *(_OWORD *)(v6 + 1384) = 0u;
  *(_OWORD *)(v6 + 1400) = 0u;
  *(_OWORD *)(v6 + 1416) = 0u;
  *(_OWORD *)(v6 + 1128) = 0u;
  *(_OWORD *)(v6 + 1144) = 0u;
  *(_OWORD *)(v6 + 1160) = 0u;
  *(_OWORD *)(v6 + 1176) = 0u;
  *(_OWORD *)(v6 + 1192) = 0u;
  *(_OWORD *)(v6 + 1208) = 0u;
  *(_BYTE *)(v6 + 1224) = 0;
  *(_BYTE *)(v6 + 1328) = 0;
  *(_OWORD *)(v6 + 1312) = 0u;
  *(_OWORD *)(v6 + 1296) = 0u;
  *(_OWORD *)(v6 + 1280) = 0u;
  *(_OWORD *)(v6 + 1264) = 0u;
  *(_OWORD *)(v6 + 1248) = 0u;
  *(_OWORD *)(v6 + 1232) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 361) = 0u;
  *(_OWORD *)(v6 + 1432) = xmmword_1B6627BC0;
  *(_DWORD *)(v6 + 1448) = 0;
  *(_BYTE *)(v6 + 1456) = 0;
  *(_OWORD *)(v6 + 1568) = 0u;
  *(_OWORD *)(v6 + 1584) = 0u;
  *(_OWORD *)(v6 + 1600) = 0u;
  *(_OWORD *)(v6 + 1616) = 0u;
  *(_OWORD *)(v6 + 1632) = 0u;
  *(_OWORD *)(v6 + 1648) = 0u;
  *(_BYTE *)(v6 + 1560) = 0;
  *(_OWORD *)(v6 + 1544) = 0u;
  *(_OWORD *)(v6 + 1528) = 0u;
  *(_OWORD *)(v6 + 1512) = 0u;
  *(_OWORD *)(v6 + 1496) = 0u;
  *(_OWORD *)(v6 + 1480) = 0u;
  *(_OWORD *)(v6 + 1464) = 0u;
  *(_QWORD *)(v6 + 1664) = v6 + 1456;
  *(_QWORD *)(v6 + 1672) = v6 + 1560;
  *(_WORD *)(v6 + 1680) = 257;
  v6 += 1688;
  *(_DWORD *)(a1 + 1724) = 0;
  *(_QWORD *)(a1 + 1728) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)v6, a2);
  std::shared_ptr<vp::vx::IO_Node_Audio_Injector_Factory::Audio_Player>::operator=[abi:ne180100]((_QWORD *)(a1 + 1704), a3);
  return a1;
}

uint64_t DspLib::DynamicFilter::Algorithm::initialize(uint64_t **this, uint64_t a2, double a3)
{
  uint64_t v4;

  v4 = DspLib::AlgorithmBaseNewParameters::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 8) = 1;
    ((void (*)(uint64_t **, char *, _QWORD))(*this)[32])(this, (char *)this + 264, 0);
    ((void (*)(uint64_t **))(*this)[19])(this);
  }
  return v4;
}

void DspLib::DynamicFilter::Algorithm::uninitialize(DspLib::DynamicFilter::Algorithm *this)
{
  DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, 0);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 1560));
  *((_BYTE *)this + 8) = 0;
}

void DspLib::DynamicFilter::Algorithm::allocateProcessingResources(DspLib::DynamicFilter::Algorithm *this, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (a2)
  {
    if (!*((_BYTE *)this + 1681))
    {
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v9);
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 1688, &v9);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v9);
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 1704, &v9);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      DspLibBuffer::initialize(*((DspLibBuffer **)this + 211), *((unsigned int *)this + 8), *((_DWORD *)this + 80));
      DspLibBuffer::initialize(*((DspLibBuffer **)this + 213), *((unsigned int *)this + 8), *((_DWORD *)this + 80));
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 1456), *((unsigned int *)this + 80), *((double *)this + 3), 1uLL);
    DspLib::SideChain::Algorithm::initialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 328), *((double *)this + 3), *((unsigned int *)this + 8));
  }
  else
  {
    if (!*((_BYTE *)this + 1681))
    {
      std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 211);
      std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 213);
    }
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 1456));
    DspLib::SideChain::Algorithm::uninitialize((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  }
}

void DspLib::DynamicFilter::Algorithm::allocateBiquadFilterB(DspLib::DynamicFilter::Algorithm *this, int a2)
{
  DspLib::Biquad::ParametricFilter *v3;

  v3 = (DspLib::DynamicFilter::Algorithm *)((char *)this + 1560);
  if (a2)
    DspLib::Biquad::ParametricFilter::initialize(v3, *((unsigned int *)this + 80), *((double *)this + 3), 1uLL);
  else
    DspLib::Biquad::ParametricFilter::uninitialize(v3);
}

double DspLib::DynamicFilter::Algorithm::reset(DspLib::DynamicFilter::Algorithm *this)
{
  double result;

  DspLib::SideChain::Algorithm::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  DspLib::Biquad::SetupWrapper::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 1504));
  DspLib::Biquad::SetupWrapper::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 1608));
  *((_BYTE *)this + 1680) = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 1720) = 0u;
  return result;
}

uint64_t DspLib::DynamicFilter::Algorithm::numStatus(DspLib::DynamicFilter::Algorithm *this)
{
  return 1;
}

double DspLib::DynamicFilter::Algorithm::latencySamples(DspLib::DynamicFilter::Algorithm *this)
{
  return 0.0;
}

void DspLib::DynamicFilter::Algorithm::setParameters(DspLib::DynamicFilter::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  _BOOL4 v10;
  int v11;
  float v12;
  unint64_t v13;
  double *v14;
  char v15;
  char v16;

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (!*((_BYTE *)this + 8))
    return;
  v4 = *((_DWORD *)this + 3);
  v5 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 3u));
  if (v5 >= 5)
    abort();
  *((_DWORD *)this + 74) = v5;
  v6 = ~(-1 << v4) & 0xFFFFF;
  *((_QWORD *)this + 39) = v6 & vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xAu));
  *((_QWORD *)this + 38) = v6 & vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 9u));
  v15 = 1;
  *((_DWORD *)this + 81) = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,20ul>,true,BOOL,std::__identity,0>((int8x8_t *)this + 39, 0, (uint64_t)this + 312, 0x14u, &v15);
  v16 = 1;
  v7 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,20ul>,true,BOOL,std::__identity,0>((int8x8_t *)this + 38, 0, (uint64_t)this + 304, 0x14u, &v16);
  *((_DWORD *)this + 80) = v7;
  DspLib::DynamicFilter::Algorithm::allocateProcessingResources(this, v7 != 0);
  if (*((_DWORD *)this + 80))
  {
    v8 = *((_DWORD *)this + 74);
    v9 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
    if (v8 == 1)
    {
      v10 = 1;
      goto LABEL_9;
    }
    if (v8 != 4)
    {
      v10 = v9 > 0.0;
      goto LABEL_9;
    }
  }
  v10 = 0;
LABEL_9:
  DspLib::DynamicFilter::Algorithm::allocateBiquadFilterB(this, v10);
  if (*((_DWORD *)this + 80))
  {
    v11 = *((_DWORD *)this + 74);
    v12 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
    if (v11 != 1 && (v11 == 4 || v12 <= 0.0))
    {
      v13 = DspLib::DynamicFilter::Algorithm::computeFilterParameters(this, 1.0);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 1456, v13, v14, 0, 0x41uLL);
    }
    DspLib::DynamicFilter::Algorithm::configureSideChain(this);
  }
  if (!*((_DWORD *)this + 81))
    DspLib::SideChain::Algorithm::reset((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
}

uint64_t DspLib::DynamicFilter::crossFadeIsNeeded(int a1, float a2)
{
  _BOOL4 v2;

  v2 = a2 > 0.0;
  if (a1 == 4)
    v2 = 0;
  return a1 == 1 || v2;
}

unint64_t DspLib::DynamicFilter::Algorithm::computeFilterParameters(DspLib::DynamicFilter::Algorithm *this, float a2)
{
  uint64_t *v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;

  v4 = (uint64_t *)((char *)this + 264);
  v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0);
  DspLib::AlgorithmParametersInstance::operator[](v4, 1u);
  switch(*((_DWORD *)this + 74))
  {
    case 0:
    case 1:
      v6 = 14;
      break;
    case 2:
      v7 = 2.0;
      if (a2 > 1.0)
        v7 = 2.0 / a2;
      v5 = v7 * v5;
      v6 = 6;
      break;
    case 3:
      v8 = 0.5;
      if (a2 > 1.0)
        v8 = a2 * 0.5;
      v5 = v8 * v5;
      v6 = 7;
      break;
    case 4:
      v6 = 23;
      break;
    default:
      v6 = 0;
      break;
  }
  return v6 | ((unint64_t)LODWORD(v5) << 32);
}

void DspLib::DynamicFilter::Algorithm::configureSideChain(DspLib::DynamicFilter::Algorithm *this)
{
  uint64_t *v2;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  _DWORD v7[3];
  BOOL v8;
  __int16 v9;
  char v10;
  float v11;
  float v12;

  v2 = (uint64_t *)((char *)this + 264);
  v3 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
  switch(*((_DWORD *)this + 74))
  {
    case 0:
      v3 = fminf(v3, 0.0);
      goto LABEL_3;
    case 1:
LABEL_3:
      v4 = 14;
      break;
    case 2:
      v4 = 8;
      break;
    case 3:
      v4 = 9;
      break;
    case 4:
      v4 = 23;
      break;
    default:
      v4 = 0;
      break;
  }
  v5 = DspLib::AlgorithmParametersInstance::operator[](v2, 0);
  v6 = DspLib::AlgorithmParametersInstance::operator[](v2, 1u);
  v9 = 0;
  v10 = 0;
  v7[0] = DspLib::AlgorithmParametersInstance::operator[](v2, 2u);
  *(float *)&v7[1] = v3;
  v7[2] = DspLib::AlgorithmParametersInstance::operator[](v2, 5u);
  v8 = DspLib::AlgorithmParametersInstance::operator[](v2, 8u) >= 0.5;
  v11 = DspLib::AlgorithmParametersInstance::operator[](v2, 6u);
  v12 = DspLib::AlgorithmParametersInstance::operator[](v2, 7u);
  DspLib::SideChain::Algorithm::setParameters((uint64_t)this + 328, v4 | ((unint64_t)LODWORD(v5) << 32), (double *)((unint64_t)LODWORD(v6) << 32), (uint64_t)v7);
}

void DspLib::DynamicFilter::Algorithm::processSideChain(uint64_t a1, __int128 *a2, float *__A, vDSP_Length __N)
{
  uint64_t v8;
  float v9;
  __int128 v10;
  uint64_t v11;

  v8 = *((_QWORD *)a2 + 1);
  if (v8 == 1)
  {
    DspLib::SideChain::Algorithm::process(a1 + 328, **(_QWORD **)a2, *((_QWORD *)a2 + 2), __A, __N);
  }
  else if (v8)
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 2);
    DspLib::sum((uint64_t)&v10, __A, __N);
    DspLib::multiply(__A, __N, 1.0 / (float)*((unint64_t *)a2 + 1));
    DspLib::SideChain::Algorithm::process(a1 + 328, (uint64_t)__A, __N, __A, __N);
  }
  else
  {
    v9 = DspLib::SideChain::Algorithm::gainForLevel((DspLib::SideChain::Algorithm *)(a1 + 328), 0.0);
    DspLib::fill(__A, __N, v9);
  }
}

void DspLib::DynamicFilter::Algorithm::processBlock(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  vDSP_Length v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  float v32;
  float v33;
  unint64_t v34;
  double *v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD v41[3];
  uint64_t v42[3];
  __int128 v43;
  vDSP_Length v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 320))
  {
    v38 = a3;
    v39 = a4;
    v40 = &v37;
    v8 = MEMORY[0x1E0C80A78](a1);
    v10 = (float *)((char *)&v37 - v9);
    v12 = *(_QWORD *)(v11 + 16);
    v13 = *(unsigned int *)(v8 + 324);
    MEMORY[0x1E0C80A78](v8);
    v16 = (char *)&v37 - v15;
    if (v14 >= 0x200)
      v17 = 512;
    else
      v17 = v14;
    bzero((char *)&v37 - v15, v17);
    v18 = *(unsigned int *)(a1 + 320);
    MEMORY[0x1E0C80A78](v19);
    v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFF0);
    if (v20 >= 0x200)
      v22 = 512;
    else
      v22 = v20;
    bzero((char *)&v37 - ((v20 + 15) & 0xFFFFFFFF0), v22);
    v23 = a2[1];
    if (v23)
    {
      v24 = 0;
      v25 = 0;
      v26 = *a2;
      v27 = *(_QWORD *)(a1 + 312);
      do
      {
        if (((v27 >> v24) & 1) != 0)
          *(_QWORD *)&v16[8 * v25++] = *(_QWORD *)(v26 + 8 * v24);
        ++v24;
      }
      while (v23 > v24);
      v28 = 0;
      v29 = 0;
      v30 = *(_QWORD *)(a1 + 304);
      do
      {
        if (((v30 >> v28) & 1) != 0)
          *(_QWORD *)&v21[8 * v29++] = *(_QWORD *)(v26 + 8 * v28);
        ++v28;
      }
      while (v23 > v28);
    }
    *(_QWORD *)&v43 = v16;
    *((_QWORD *)&v43 + 1) = v13;
    v44 = v12;
    DspLib::DynamicFilter::Algorithm::processSideChain(a1, &v43, v10, v12);
    v31 = *(_DWORD *)(a1 + 296);
    v32 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)(a1 + 264), 4u);
    if (v31 != 1 && (v31 == 4 || v32 <= 0.0))
    {
      v41[0] = v21;
      v41[1] = v18;
      v41[2] = v12;
      DspLib::DynamicFilter::Algorithm::processWithoutCrossFade(a1, v41, v10, v12);
    }
    else
    {
      *(float *)(a1 + 1728) = *(float *)(a1 + 1728) + 1.0;
      v33 = DspLib::mean(v10, v12) + *(float *)(a1 + 1732);
      *(float *)(a1 + 1732) = v33;
      if ((a5 & 1) == 0)
      {
        *(int8x16_t *)(a1 + 1664) = vextq_s8(*(int8x16_t *)(a1 + 1664), *(int8x16_t *)(a1 + 1664), 8uLL);
        v34 = DspLib::DynamicFilter::Algorithm::computeFilterParameters((DspLib::DynamicFilter::Algorithm *)a1, v33 / *(float *)(a1 + 1728));
        v36 = v35;
        *(_QWORD *)(a1 + 1728) = 0;
        DspLib::Biquad::ParametricFilter::setParametricEQ(*(_QWORD *)(a1 + 1664), v34, v35, 0, 0x41uLL);
        if (*(_BYTE *)(a1 + 1680))
        {
          DspLib::Biquad::ParametricFilter::setParametricEQ(*(_QWORD *)(a1 + 1672), v34, v36, 0, 0x41uLL);
          *(_BYTE *)(a1 + 1680) = 0;
        }
        DspLib::Biquad::Filter::copyStatesFrom(*(DspLib::Biquad::Filter **)(a1 + 1664), *(const DspLib::Biquad::Filter **)(a1 + 1672));
      }
      v42[0] = (uint64_t)v21;
      v42[1] = v18;
      v42[2] = v12;
      DspLib::DynamicFilter::Algorithm::processWithCrossFade(a1, v42, v10, v12, *(const float **)v38, *(_QWORD *)(v38 + 8), *(const float **)v39, *(_QWORD *)(v39 + 8));
    }
  }
}

void DspLib::DynamicFilter::Algorithm::processWithCrossFade(uint64_t a1, uint64_t *a2, float *a3, vDSP_Length a4, const float *a5, uint64_t a6, const float *a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float **v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float **v24;
  size_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  vDSP_Length v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  float **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v30 = a8;
  v32 = a4;
  v31 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  v12 = DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  MEMORY[0x1E0C80A78](v12);
  v15 = (float **)((char *)&v30 - v14);
  if (v13 >= 0x200)
    v16 = 512;
  else
    v16 = v13;
  bzero((char *)&v30 - v14, v16);
  if (DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)))
  {
    v17 = 0;
    do
    {
      v15[v17] = (float *)DspLibBuffer::channel(*(DspLibBuffer **)(a1 + 1688), v17);
      ++v17;
    }
    while (v17 < DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)));
  }
  DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  vp::utility::CPU_Profiler::get_cycle_count(*(vp::utility::CPU_Profiler **)(a1 + 1688));
  v19 = a2[1];
  v18 = a2[2];
  v20 = *(_QWORD **)(a1 + 1664);
  v45 = *a2;
  v46 = v19;
  v47 = v18;
  v42 = v15;
  v43 = v19;
  v44 = v18;
  DspLib::Biquad::Filter::process(v20, (uint64_t)&v45, &v42);
  v21 = DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704));
  MEMORY[0x1E0C80A78](v21);
  v24 = (float **)((char *)&v30 - v23);
  if (v22 >= 0x200)
    v25 = 512;
  else
    v25 = v22;
  bzero((char *)&v30 - v23, v25);
  if (DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704)))
  {
    v26 = 0;
    do
    {
      v24[v26] = (float *)DspLibBuffer::channel(*(DspLibBuffer **)(a1 + 1704), v26);
      ++v26;
    }
    while (v26 < DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704)));
  }
  DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1704));
  vp::utility::CPU_Profiler::get_cycle_count(*(vp::utility::CPU_Profiler **)(a1 + 1704));
  v27 = *(_QWORD **)(a1 + 1672);
  v29 = a2[1];
  v28 = a2[2];
  v45 = *a2;
  v46 = v29;
  v47 = v28;
  v42 = v24;
  v43 = v29;
  v44 = v28;
  DspLib::Biquad::Filter::process(v27, (uint64_t)&v45, &v42);
  v41[0] = v15;
  v41[1] = v19;
  v41[2] = v18;
  DspLib::multiply(v41, a5);
  v40[0] = v24;
  v40[1] = v29;
  v40[2] = v28;
  DspLib::multiply(v40, a7);
  v39[0] = (uint64_t)v15;
  v39[1] = v19;
  v39[2] = v18;
  *(_QWORD *)&v37 = v24;
  *((_QWORD *)&v37 + 1) = v29;
  v38 = v28;
  DspLib::add(v39, &v37);
  v35 = *(_OWORD *)a2;
  v36 = a2[2];
  *(_QWORD *)&v33 = v15;
  *((_QWORD *)&v33 + 1) = v19;
  v34 = v18;
  DspLib::DynamicFilter::applyGain(&v35, &v33, v31, v32);
}

void DspLib::DynamicFilter::Algorithm::processWithoutCrossFade(uint64_t a1, _QWORD *a2, float *a3, vDSP_Length a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float **v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  float **v15;
  float **v16;
  uint64_t v17;
  __int128 v18;
  float **v19;
  __int128 v20;
  uint64_t v21;
  float **v22[3];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v8 = DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  MEMORY[0x1E0C80A78](v8);
  v11 = (float **)((char *)&v17 - v10);
  if (v9 >= 0x200)
    v12 = 512;
  else
    v12 = v9;
  bzero((char *)&v17 - v10, v12);
  if (DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)))
  {
    v13 = 0;
    do
    {
      v11[v13] = (float *)DspLibBuffer::channel(*(DspLibBuffer **)(a1 + 1688), v13);
      ++v13;
    }
    while (v13 < DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688)));
  }
  DspLibBuffer::numChannels(*(DspLibBuffer **)(a1 + 1688));
  vp::utility::CPU_Profiler::get_cycle_count(*(vp::utility::CPU_Profiler **)(a1 + 1688));
  v14 = (_QWORD *)(a1 + 1456);
  v15 = (float **)a2[1];
  v16 = (float **)a2[2];
  v23[0] = *a2;
  v23[1] = v15;
  v23[2] = v16;
  v22[0] = v11;
  v22[1] = v15;
  v22[2] = v16;
  DspLib::Biquad::Filter::process(v14, (uint64_t)v23, v22);
  v20 = *(_OWORD *)a2;
  v21 = a2[2];
  *(_QWORD *)&v18 = v11;
  *((_QWORD *)&v18 + 1) = v15;
  v19 = v16;
  DspLib::DynamicFilter::applyGain(&v20, &v18, a3, a4);
}

void DspLib::DynamicFilter::applyGain(__int128 *a1, __int128 *a2, float *__C, vDSP_Length __N)
{
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DspLib::add(__C, __N, -1.0);
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  DspLib::multiply(&v12, __C);
  v7 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  v8 = *(_QWORD *)a2;
  v9 = *(__int128 *)((char *)a2 + 8);
  v10 = v7;
  DspLib::add((uint64_t *)&v10, (__int128 *)&v8);
}

void DspLib::DynamicFilter::Algorithm::updateSidechainLevelForDisplay(DspLib::DynamicFilter::Algorithm *this)
{
  float v2;

  v2 = DspLib::SideChain::Algorithm::sideChainLevelLinear((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  if (*((float *)this + 430) >= v2)
    v2 = *((float *)this + 430);
  *((float *)this + 430) = v2;
}

uint64_t DspLib::DynamicFilter::Algorithm::status(uint64_t result, _DWORD *a2)
{
  int v2;

  if (*(_DWORD *)(result + 324))
    v2 = *(_DWORD *)(result + 1720);
  else
    v2 = 0;
  *a2 = v2;
  *(_DWORD *)(result + 1720) = 0;
  return result;
}

void DspLib::DynamicFilter::Algorithm::~Algorithm(DspLib::DynamicFilter::Algorithm *this)
{
  DspLib::DynamicFilter::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69C1D88;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 1704);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 1688);
  v6 = (void **)((char *)this + 1640);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::DynamicFilter::Algorithm *)((char *)this + 1608));
  v2 = (void *)*((_QWORD *)this + 198);
  if (v2)
  {
    *((_QWORD *)this + 199) = v2;
    operator delete(v2);
  }
  v6 = (void **)((char *)this + 1536);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::DynamicFilter::Algorithm *)((char *)this + 1504));
  v3 = (void *)*((_QWORD *)this + 185);
  if (v3)
  {
    *((_QWORD *)this + 186) = v3;
    operator delete(v3);
  }
  DspLib::SideChain::Algorithm::~Algorithm((DspLib::DynamicFilter::Algorithm *)((char *)this + 328));
  *(_QWORD *)this = off_1E69C47E8;
  v4 = (void *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 35) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(_QWORD *)this = off_1E69C46F0;
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
}

void DspLib::DynamicFilter::Algorithm::processBlock(DspLib::DynamicFilter::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t cycle_count;
  vDSP_Length v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  _QWORD v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  if (cycle_count)
  {
    v7 = cycle_count;
    v8 = DspLibBuffer::operator=((uint64_t)a3, a2);
    MEMORY[0x1E0C80A78](v8);
    v23[0] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23[1] = v7;
    v10 = (float *)MEMORY[0x1E0C80A78](v23[0]);
    v12 = (float *)((char *)v21 - v11);
    v22[0] = (char *)v21 - v11;
    v22[1] = v7;
    DspLib::ramp(v10, v7, 0, 0.0, 1.0);
    DspLib::ramp(v12, v7, 0, 1.0, 0.0);
    v13 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v13);
    v16 = (char *)v21 - v15;
    if (v14 >= 0x200)
      v17 = 512;
    else
      v17 = v14;
    bzero((char *)v21 - v15, v17);
    if (DspLibBuffer::numChannels(a3))
    {
      v18 = 0;
      do
      {
        *(_QWORD *)&v16[8 * v18] = DspLibBuffer::channel(a3, v18);
        ++v18;
      }
      while (v18 < DspLibBuffer::numChannels(a3));
    }
    v19 = DspLibBuffer::numChannels(a3);
    v20 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v21[0] = (uint64_t)v16;
    v21[1] = v19;
    v21[2] = v20;
    DspLib::DynamicFilter::Algorithm::processBlock((uint64_t)this, v21, (uint64_t)v23, (uint64_t)v22, 0);
  }
}

void DspLib::SideChain::Algorithm::~Algorithm(DspLib::SideChain::Algorithm *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  void **v7;

  v7 = (void **)((char *)this + 1080);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::SideChain::Algorithm *)((char *)this + 1048));
  v2 = (void *)*((_QWORD *)this + 128);
  if (v2)
  {
    *((_QWORD *)this + 129) = v2;
    operator delete(v2);
  }
  v7 = (void **)((char *)this + 976);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::SideChain::Algorithm *)((char *)this + 944));
  v3 = (void *)*((_QWORD *)this + 115);
  if (v3)
  {
    *((_QWORD *)this + 116) = v3;
    operator delete(v3);
  }
  v7 = (void **)((char *)this + 872);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::SideChain::Algorithm *)((char *)this + 840));
  v4 = (void *)*((_QWORD *)this + 102);
  if (v4)
  {
    *((_QWORD *)this + 103) = v4;
    operator delete(v4);
  }
  for (i = 0; i != -48; i -= 24)
  {
    v6 = *(void **)((char *)this + i + 24);
    if (v6)
    {
      *(_QWORD *)((char *)this + i + 32) = v6;
      operator delete(v6);
    }
  }
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,20ul>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
    return std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,20ul>,true>(a1, a2, v5);
  else
    return std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,20ul>,true>((uint64_t *)a1, a2, v5);
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,20ul>,true>(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = (uint64_t)*a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,20ul>,true>(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = *a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI12DspLibBufferNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B60A8ACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI12DspLibBufferNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C2000;
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)(a1 + 3));
  return a1;
}

void sub_1B60A8B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLibBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69C2000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLibBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69C2000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<DspLibBuffer>::__on_zero_shared(uint64_t a1)
{
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(a1 + 24));
}

DspLib::LoudspeakerSystemIDV2::Algorithm *DspLib::LoudspeakerSystemIDV2::Algorithm::Algorithm(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  uint64_t v2;
  char *v4;

  v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::LoudspeakerSystemIDV2::Parameters::kDefinition);
  *(_QWORD *)v2 = &off_1E69C2060;
  *(_BYTE *)(v2 + 384) = 0;
  *(_DWORD *)(v2 + 392) = 0;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_BYTE *)(v2 + 360) = 0;
  if (++DspLib::LoudspeakerSystemIDV2::gInstanceCounter >= 2)
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 23);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

void sub_1B60A8C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  if (*(_BYTE *)(v4 + 384))
  {
    v6 = *(void **)(v4 + 360);
    if (v6)
    {
      *(_QWORD *)(v4 + 368) = v6;
      operator delete(v6);
    }
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 + 344);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v4 + 328);
  std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters((DspLib::AlgorithmBaseNewParameters *)v4);
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::~Algorithm(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69C2060;
  --DspLib::LoudspeakerSystemIDV2::gInstanceCounter;
  if (*((_BYTE *)this + 384))
  {
    v2 = (void *)*((_QWORD *)this + 45);
    if (v2)
    {
      *((_QWORD *)this + 46) = v2;
      operator delete(v2);
    }
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  v5 = (void **)((char *)this + 296);
  std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C47E8;
  v3 = (void *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 35) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

{
  DspLib::LoudspeakerSystemIDV2::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::initialize(DspLib::LoudspeakerSystemIDV2::Algorithm *this, int a2, double a3)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  float v11;
  float v12;
  vDSP_Length v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  float v22;
  DspLibBuffer *v23;
  unint64_t instruction_count;
  float v25;
  _BYTE v28[4];
  unsigned int v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v29)
  {
    v5 = *((_QWORD *)this + 37);
    for (i = *((_QWORD *)this + 38);
          i != v5;
    *((_QWORD *)this + 38) = v5;
    std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::resize((DspLib::LoudspeakerSystemIDV2::Algorithm *)((char *)this + 296), (unint64_t)*((unsigned int *)this + 3) >> 1);
    v7 = *((_QWORD *)this + 37);
    if (*((_QWORD *)this + 38) != v7)
    {
      v8 = 0;
      v9 = 1;
      while (1)
      {
        v10 = *((double *)this + 3);
        v11 = v10 * 0.5;
        *(float *)(v7 + 40112 * v8 + 24) = v11;
        *(float *)&v10 = v10 / v11;
        v12 = fmaxf(roundf(*(float *)&v10), 1.0);
        v13 = (16 * v12) | 1;
        MEMORY[0x1E0C80A78](v6);
        v15 = &v28[-v14];
        v30[0] = &unk_1E69BFC40;
        v30[1] = DspLib::makeChebychevWindow;
        v31 = v30;
        v17.n128_f32[0] = DspLib::makeSincWindow((float *)&v28[-v14], v13, v16, 0x10u, (uint64_t)v30, 0.5);
        v18 = v31;
        if (v31 == v30)
          break;
        if (v31)
        {
          v19 = 5;
LABEL_10:
          (*(void (**)(__n128))(*v18 + 8 * v19))(v17);
        }
        v20 = (uint64_t *)(v7 + 40112 * v8);
        std::vector<std::vector<float>>::resize(v20 + 2906, 2uLL);
        v20 += 2900;
        DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)v20, (unint64_t)v12, *((unsigned int *)this + 8));
        DspLib::FIRDecimator::setCoefficients((uint64_t)v20, v15, v13);
        v21 = v12;
        v22 = *((double *)this + 3) / v21;
        DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::initialize((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v7 + 40112 * v8 + 32), v22);
        v23 = (DspLibBuffer *)(v7 + 40112 * v8 + 23280);
        DspLibBuffer::initialize(v23, 0x401uLL, 1u);
        instruction_count = vp::utility::CPU_Profiler::get_instruction_count(v23);
        DspLibBuffer::setNumFrames(v23, instruction_count);
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(v7 + 40112 * v8 + 23376), 0x400uLL);
        DspLib::LoudspeakerSystemIDV2::AveragePower::initialize((void **)(v7 + 40112 * v8 + 39840), *((double *)this + 3), (char *)0x20);
        DspLib::AverageRms::initialize(v7 + 40112 * v8 + 40000, *((double *)this + 3));
        DspLib::AverageRms::initialize(v7 + 40112 * v8 + 40056, *((double *)this + 3));
        v25 = *((double *)this + 3) / v21;
        DspLib::LoudspeakerSystemIDV2::ModelFit::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v7 + 40112 * v8 + 17352), v25);
        v8 = v9;
        v7 = *((_QWORD *)this + 37);
        if (0x12616AB58F0FD3E3 * ((*((_QWORD *)this + 38) - v7) >> 4) <= (unint64_t)v9++)
          goto LABEL_12;
      }
      v18 = v30;
      v19 = 4;
      goto LABEL_10;
    }
LABEL_12:
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *, char *, _QWORD))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0);
    (*(void (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v29;
}

void sub_1B60A9084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 128);
  if (v3 == (_QWORD *)(v1 - 152))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 152);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::resize(DspLib::LoudspeakerSystemIDV2::SystemID *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 1);
  v4 = 0x12616AB58F0FD3E3 * ((v3 - *(_QWORD *)a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 40112 * a2;
    while (v3 != v7)
      DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(v3 - 40112));
    *((_QWORD *)a1 + 1) = v7;
  }
}

void DspLib::LoudspeakerSystemIDV2::AveragePower::initialize(void **this, double a2, char *a3)
{
  DspLib::AveragingDecimator::setSrcFactor(this, a3, 0);
  DspLib::OnePoleSmoother::initialize((DspLib::OnePoleSmoother *)(this + 6), ceil(a2 / (double)(unint64_t)a3));
  DspLib::OnePoleSmoother::configure((DspLib::OnePoleSmoother *)(this + 6), *((float *)this + 37), *((float *)this + 36));
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::configureLogging(DspLib::LoudspeakerSystemIDV2::Algorithm *this, uint64_t a2)
{
  DspLib::Logger **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  DspLib::Logger **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  if (a2 == 1)
  {
    *((_BYTE *)this + 322) = 1;
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[18],void>("SysIDFrameLog.bin", &v11);
    v3 = (DspLib::Logger **)((char *)this + 328);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 328, &v11);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[19],void>("SysIDSignalLog.bin", &v11);
    v7 = (DspLib::Logger **)((char *)this + 344);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 344, &v11);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (*v3)
      DspLib::Logger::logData(*v3, (float)(unint64_t)(0x12616AB58F0FD3E3* ((uint64_t)(*((_QWORD *)this + 38) - *((_QWORD *)this + 37)) >> 4)));
    if (*v7)
      DspLib::Logger::logData(*v7, (float)(unint64_t)(0x12616AB58F0FD3E3* ((uint64_t)(*((_QWORD *)this + 38) - *((_QWORD *)this + 37)) >> 4)));
  }
  else
  {
    *((_BYTE *)this + 322) = 0;
    DspLib::LoudspeakerSystemIDV2::Algorithm::uninitializeLogging(this);
  }
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::uninitializeLogging(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  DspLib::Logger *v2;
  DspLib::Logger *v3;

  v2 = (DspLib::Logger *)*((_QWORD *)this + 41);
  if (v2)
  {
    DspLib::Logger::FlushLog(v2);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 41);
  }
  v3 = (DspLib::Logger *)*((_QWORD *)this + 43);
  if (v3)
  {
    DspLib::Logger::FlushLog(v3);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 43);
  }
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::uninitialize(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  uint64_t i;
  uint64_t v3;

  *((_BYTE *)this + 8) = 0;
  DspLib::LoudspeakerSystemIDV2::Algorithm::uninitializeLogging(this);
  v3 = *((_QWORD *)this + 37);
  for (i = *((_QWORD *)this + 38);
        i != v3;
  *((_QWORD *)this + 38) = v3;
}

uint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  float *v6;
  vDSP_Length cycle_count;

  v1 = *(_QWORD *)(this + 296);
  if (*(_QWORD *)(this + 304) != v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = v1 + 40112 * v3;
      *(_QWORD *)(v5 + 16) = 0;
      DspLib::FIRDecimator::reset((DspLib::FIRDecimator *)(v5 + 23200));
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::reset((float **)(v5 + 32));
      DspLib::LoudspeakerSystemIDV2::ModelFit::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v5 + 17352));
      DspLib::ComplexVector::operator=(v5 + 23376, 0.0);
      v6 = (float *)DspLibBuffer::channel((DspLibBuffer *)(v5 + 23280), 0);
      cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(v5 + 23280));
      DspLib::clear(v6, cycle_count);
      bzero((void *)(v5 + 23456), 0x4000uLL);
      DspLib::AveragingDecimator::reset((DspLib::AveragingDecimator *)(v5 + 39840));
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v5 + 39944));
      *(_DWORD *)(v5 + 39992) = 0;
      DspLib::AverageRms::reset(v5 + 40000);
      this = DspLib::AverageRms::reset(v5 + 40056);
      v3 = v4;
      v1 = *(_QWORD *)(v2 + 296);
    }
    while (0x12616AB58F0FD3E3 * ((*(_QWORD *)(v2 + 304) - v1) >> 4) > (unint64_t)v4++);
  }
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV2::Algorithm::numStatus(DspLib::LoudspeakerSystemIDV2::Algorithm *this)
{
  return 5205;
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::setParameters(DspLib::LoudspeakerSystemIDV2::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  DspLib::LoudspeakerSystemIDV2::Algorithm *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  float v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t *v15;
  DspLibBuffer *v16;
  float v17;
  float v18;
  vDSP_Length v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  __n128 v24;
  _QWORD *v25;
  uint64_t v26;
  double *v27;
  double v28;
  float v29;
  unint64_t instruction_count;
  float v31;
  uint64_t v32;
  float *v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  DspLib::LoudspeakerSystemIDV2::ModelFit *v39;
  DspLib::ComplexVector *v40;
  DspLib::LoudspeakerSystemIDV2::Algorithm *v41;
  uint64_t *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v3 = this;
  v45 = *MEMORY[0x1E0C80C00];
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((_BYTE *)v3 + 8))
  {
    v5 = *((_QWORD *)v3 + 37);
    v4 = *((_QWORD *)v3 + 38);
    v41 = v3;
    if (v4 != v5)
    {
      v6 = 0;
      v42 = (uint64_t *)((char *)v3 + 264);
      v7 = 2;
      v37 = &unk_1E69BFC40;
      while (1)
      {
        v8 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[](v42, v7 << 32));
        v9 = v5 + 40112 * v6;
        *(_DWORD *)(v9 + 8) = v8;
        v10 = (int *)(v9 + 8);
        v11 = DspLib::AlgorithmParametersInstance::operator[](v42, (7 * v8 + 2) | 0x500000000);
        v12 = v5 + 40112 * v6;
        v14 = *(float *)(v12 + 24);
        v13 = (float *)(v12 + 24);
        if (v14 != v11)
          break;
LABEL_11:
        DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setParameters((uint64_t)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord, v42, v7 - 2, *v10);
        DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::setParameters(v5 + 40112 * v6 + 32, v42, *v10, v7 - 2);
        DspLib::LoudspeakerSystemIDV2::ModelFit::setParameters(v5 + 40112 * v6 + 17352, v42, *v10, (unint64_t *)(v7 - 2));
        v33 = (float *)(v5 + 40112 * v6);
        DspLib::LoudspeakerSystemIDV2::AveragePower::configure((DspLib::LoudspeakerSystemIDV2::AveragePower *)(v33 + 9960), 1.0, v33[65] * v33[66]);
        DspLib::AverageRms::configure((uint64_t)(v33 + 10000), 1, 1.0, v33[66]);
        DspLib::AverageRms::configure((uint64_t)(v33 + 10014), 1, 1.0, v33[65]);
        v6 = (v7 - 1);
        v3 = v41;
        v5 = *((_QWORD *)v41 + 37);
        v7 = (v7 + 1);
        if (0x12616AB58F0FD3E3 * ((*((_QWORD *)v41 + 38) - v5) >> 4) <= v6)
          goto LABEL_12;
      }
      *v13 = v11;
      v15 = (uint64_t *)(v5 + 40112 * v6);
      std::vector<std::vector<float>>::resize(v15 + 2906, 0);
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::uninitialize((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v15 + 4));
      v16 = (DspLibBuffer *)(v15 + 2910);
      DspLibBuffer::uninitialize((DspLibBuffer *)(v15 + 2910));
      v40 = (DspLib::ComplexVector *)(v15 + 2922);
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(v15 + 2922), 0);
      v39 = (DspLib::LoudspeakerSystemIDV2::ModelFit *)(v15 + 2169);
      DspLib::LoudspeakerSystemIDV2::ModelFit::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v15 + 2169));
      v38 = &v36;
      v17 = *((double *)v41 + 3) / v11;
      v18 = fmaxf(roundf(v17), 1.0);
      v19 = (16 * v18) | 1;
      MEMORY[0x1E0C80A78](v20);
      v22 = (char *)&v36 - v21;
      v43[0] = v37;
      v43[1] = DspLib::makeChebychevWindow;
      v44 = v43;
      v24.n128_f32[0] = DspLib::makeSincWindow((float *)((char *)&v36 - v21), v19, v23, 0x10u, (uint64_t)v43, 0.5);
      v25 = v44;
      if (v44 == v43)
      {
        v25 = v43;
        v26 = 4;
      }
      else
      {
        if (!v44)
        {
LABEL_10:
          std::vector<std::vector<float>>::resize(v15 + 2906, 2uLL);
          DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)(v15 + 2900), (unint64_t)v18, *((unsigned int *)v41 + 8));
          DspLib::FIRDecimator::setCoefficients((uint64_t)(v15 + 2900), v22, v19);
          v27 = (double *)((char *)v41 + 24);
          v28 = v18;
          v29 = *((double *)v41 + 3) / v28;
          DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::initialize((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v5 + 40112 * v6 + 32), v29);
          DspLibBuffer::initialize(v16, 0x401uLL, 1u);
          instruction_count = vp::utility::CPU_Profiler::get_instruction_count(v16);
          DspLibBuffer::setNumFrames(v16, instruction_count);
          DspLib::ComplexVector::setLength(v40, 0x400uLL);
          v31 = *v27 / v28;
          DspLib::LoudspeakerSystemIDV2::ModelFit::initialize(v39, v31);
          LODWORD(v32) = vcvtad_u64_f64(*v27/ v28* DspLib::AlgorithmParametersInstance::operator[](v42, (7 * *v10 + 2) | 0x300000000));
          *(_QWORD *)(v5 + 40112 * v6) = v32;
          (*(void (**)(DspLib::LoudspeakerSystemIDV2::Algorithm *))(*(_QWORD *)v41 + 152))(v41);
          goto LABEL_11;
        }
        v26 = 5;
      }
      (*(void (**)(__n128))(*v25 + 8 * v26))(v24);
      goto LABEL_10;
    }
LABEL_12:
    v34 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v3 + 33, 0xA00000000) >= 0.5;
    *((_BYTE *)v41 + 321) = v34;
    v35 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v3 + 33, 0) >= 0.5;
    *((_BYTE *)v41 + 320) = v35;
  }
}

void sub_1B60A9970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 112);
  if (v3 == (_QWORD *)(v1 - 136))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 136);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setParameters(uint64_t a1, uint64_t *a2, unsigned int a3, int a4)
{
  float *v9;
  int v10;
  float *v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  unint64_t result;
  uint64_t v20;
  uint64_t v21;

  v9 = (float *)(a1 + 264 * a3);
  v9[63] = DspLib::AlgorithmParametersInstance::operator[](a2, 1) * 1000.0;
  v9[64] = DspLib::AlgorithmParametersInstance::operator[](a2, 0x100000001) * 1000.0;
  v10 = 7 * a4;
  v9[1] = DspLib::AlgorithmParametersInstance::operator[](a2, (7 * a4 + 3) | 0x300000000);
  v11 = v9 + 1;
  v12 = (7 * a4 + 5);
  v11[61] = DspLib::AlgorithmParametersInstance::operator[](a2, v12 | 0xB00000000);
  if (!*((_BYTE *)v11 + 8))
  {
    v13 = *(_DWORD *)v11;
    v14 = (_DWORD *)(a1 + 264 * a3);
    *v14 = *(_DWORD *)v11;
    v14[2] = v13;
  }
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(a1, a2, a3, v10 + 6, 0);
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(a1, a2, a3, v10 + 7, 1u);
  DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(a1, a2, a3, v10 + 8, 2u);
  v15 = DspLib::AlgorithmParametersInstance::operator[](a2, (v10 + 5));
  v16 = DspLib::AlgorithmParametersInstance::operator[](a2, v12 | 0x100000000);
  v17 = DspLib::AlgorithmParametersInstance::operator[](a2, v12 | 0x200000000);
  v18 = a1 + 264 * a3;
  *(float *)(v18 + 232) = v15;
  *(float *)(v18 + 236) = v16;
  *(float *)(v18 + 240) = v17;
  result = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v15, v16, v17);
  if (!*(_BYTE *)(v18 + 244))
  {
    v21 = a1 + 264 * a3;
    *(_QWORD *)(v21 + 216) = result;
    *(_BYTE *)(v21 + 228) = BYTE4(v20);
    *(_DWORD *)(v21 + 224) = v20;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::AveragePower::configure(DspLib::LoudspeakerSystemIDV2::AveragePower *this, double a2, float a3)
{
  float v4;

  v4 = a2;
  *((float *)this + 36) = a3;
  *((float *)this + 37) = v4;
  DspLib::OnePoleSmoother::configure((DspLib::LoudspeakerSystemIDV2::AveragePower *)((char *)this + 48), v4, a3);
  DspLib::AveragingDecimator::reset(this);
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerSystemIDV2::AveragePower *)((char *)this + 104));
  *((_DWORD *)this + 38) = 0;
}

float *DspLib::LoudspeakerSystemIDV2::Algorithm::parseTelemetryData(DspLib::LoudspeakerSystemIDV2::Algorithm *this, DspLibBuffer *a2, unsigned int a3, float **a4, float **a5)
{
  unint64_t v7;
  int v9;
  unint64_t v10;
  BOOL v11;
  float *result;

  LODWORD(v7) = a3;
  v9 = *((unsigned __int8 *)this + 384);
  if (*((_BYTE *)this + 384))
  {
    v10 = telemetry::Item::ItemFromEnum((telemetry::Item *)*(unsigned int *)(*((_QWORD *)this + 45) + 4 * a3));
    v7 = HIDWORD(v10);
    v9 = v10 == 1;
    v11 = v10 != 1;
  }
  else
  {
    v11 = 1;
  }
  *a4 = (float *)DspLibBuffer::channel(a2, v9 | (2 * v7));
  result = (float *)DspLibBuffer::channel(a2, v11 | (2 * v7));
  *a5 = result;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::processBlock(DspLib::LoudspeakerSystemIDV2::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  vp::utility::CPU_Profiler *v3;
  uint64_t cycle_count;
  vDSP_Length v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  vp::utility::CPU_Profiler *v17;
  unint64_t *v18;
  unint64_t v19;
  const DspLib::ComplexSpan *v20;
  BOOL v21;
  unint64_t v22;
  float *v23;
  float v24;
  const DspLib::ComplexSpan *v25;
  uint64_t v26;
  char v27;
  _DWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[3];
  float *v35;
  float *v36;
  _QWORD v37[2];
  float *v38;
  float *v39;
  uint64_t v40;

  v3 = a2;
  v40 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
    DspLibBuffer::operator=((uint64_t)a3, a2);
  if (!*((_BYTE *)this + 320))
  {
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v3);
    if (cycle_count)
    {
      v6 = cycle_count;
      if (*((_BYTE *)this + 40))
        DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
      *((_DWORD *)this + 81) = 0;
      if (*((_QWORD *)this + 38) != *((_QWORD *)this + 37))
      {
        v7 = 0;
        v8 = 0;
        v30 = v6;
        do
        {
          v35 = 0;
          v36 = 0;
          DspLib::LoudspeakerSystemIDV2::Algorithm::parseTelemetryData(this, v3, v8, &v36, &v35);
          v38 = v36;
          v39 = v35;
          v9 = *((_QWORD *)this + 37);
          v34[0] = &v38;
          v34[1] = 2;
          v34[2] = v6;
          *((float *)this + 81) = DspLib::LoudspeakerSystemIDV2::AveragePower::process(v9 + 40112 * v7 + 39840, (uint64_t)v34)+ *((float *)this + 81);
          if (*((_BYTE *)this + 321))
          {
            v10 = v9 + 40112 * v7;
            DspLib::AverageRms::process(v10 + 40000, (uint64_t)v38, v6);
            DspLib::AverageRms::process(v10 + 40056, (uint64_t)v39, v6);
          }
          v11 = MEMORY[0x1E0C80A78](v9 + 40112 * v7 + 23200);
          v37[0] = &v31[-v12 - 1];
          v37[1] = v37[0] + 4 * v12;
          v14 = *(_QWORD *)(v13 + 23200);
          v32[0] = v37;
          v32[1] = 2;
          v33 = v15 / v14 + 1;
          v31[0] = &v38;
          v31[1] = 2;
          v31[2] = v6;
          DspLib::FIRDecimator::process(v11, v31, v32);
          v16 = v33;
          if (v33)
            DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::process(v9 + 40112 * v7 + 32, *(float **)(v32[0] + 8), *(float **)v32[0], v33, v8, *(float *)(v9 + 40112 * v7 + 18080));
          v17 = v3;
          v18 = (unint64_t *)(*((_QWORD *)this + 37) + 40112 * v7);
          v19 = v18[2] + v16;
          v20 = (const DspLib::ComplexSpan *)(v9 + 23376 + 40112 * v7);
          v21 = v19 >= *v18;
          if (v19 >= *v18)
            v22 = 0;
          else
            v22 = v19;
          v18[2] = v22;
          if (v21)
          {
            v28 = (_DWORD *)(v9 + 40112 * v7);
            DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::impedance((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v28 + 8), (DSPSplitComplex *)(v9 + 23376 + 40112 * v7));
            DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::coherence((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v28 + 8), (DspLibBuffer *)(v28 + 5820));
            v28[4339] = 1;
            v3 = v17;
          }
          else
          {
            v23 = (float *)(v9 + 40112 * v7);
            v24 = v23[56];
            v25 = (const DspLib::ComplexSpan *)DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::voltagePowerSpectrum((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)(v23 + 8));
            v26 = *((_QWORD *)this + 37);
            v27 = *(_BYTE *)(v26 + 40112 * v7 + 220)
               && *(float *)(v26 + 40112 * v7 + 240) < *(float *)(v26 + 40112 * v7 + 256)
               && *(float *)(v26 + 40112 * v7 + 304) > *(float *)(v26 + 40112 * v7 + 216);
            DspLib::LoudspeakerSystemIDV2::ModelFit::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)(v23 + 4338), v20, (const DspLibBuffer *)(v23 + 5820), v24, v25, v27, v8);
          }
          DspLib::elapsedTimeInMilliseconds((DspLib *)((char *)&DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord + 264 * v7 + 16), v29);
          v7 = ((_DWORD)v8 + 1);
          v8 = (unint64_t *)v7;
        }
        while (0x12616AB58F0FD3E3 * ((uint64_t)(*((_QWORD *)this + 38) - *((_QWORD *)this + 37)) >> 4) > v7);
      }
      if (*((_BYTE *)this + 322))
        DspLib::LoudspeakerSystemIDV2::Algorithm::processLogging(this, v3);
      if (*((_BYTE *)this + 40))
        DspLib::CPUMeasure::stop((DspLib::LoudspeakerSystemIDV2::Algorithm *)((char *)this + 72), v6, *((double *)this + 3));
    }
  }
}

float DspLib::LoudspeakerSystemIDV2::AveragePower::process(uint64_t a1, uint64_t a2)
{
  float **v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v8;
  float *v9;
  float **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(float ***)(a2 + 16);
  if (v3)
  {
    MEMORY[0x1E0C80A78](a1);
    v5 = (float *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    v9 = v5;
    v10 = v3;
    DspLib::multiply(**(const float ***)v6, *(_QWORD *)(v6 + 16), *(const float **)(*(_QWORD *)v6 + 8), *(_QWORD *)(v6 + 16), v5);
    DspLib::AveragingDecimator::processKernel(a1, v5, (uint64_t)v3, (uint64_t)&v9, *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2, (void **)(a1 + 16));
    if (v10)
    {
      DspLib::OnePoleSmoother::process(a1 + 48, (uint64_t)v9, (uint64_t)v10, (uint64_t)v9, v10);
      *(float *)(a1 + 152) = v9[(_QWORD)v10 - 1];
    }
  }
  return *(float *)(a1 + 152);
}

void DspLib::LoudspeakerSystemIDV2::Algorithm::processLogging(DspLib::LoudspeakerSystemIDV2::Algorithm *this, DspLibBuffer *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t cycle_count;
  DspLib::Logger *v11;
  DspLib::Logger *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  float *v18;
  DspLib::Logger *v19;
  uint64_t v20;
  float *v21;
  DspLib::Logger *v22;
  DspLib::Logger *v23;
  DspLib::Logger *v24;
  DspLib::Logger *v25;
  DspLib::Logger *v26;
  DspLib::Logger *v27;
  uint64_t v28;
  _BOOL4 v29;
  DspLib::Logger *v30;
  DspLib::Logger *v31;
  DspLib::Logger *v32;
  DspLib::Logger *v33;
  DspLib::Logger *v34;
  DspLib::Logger *v35;
  DspLib::Logger *v36;
  DspLib::Logger *v37;
  uint64_t v38;
  _BOOL4 v39;
  DspLib::Logger *v40;
  DspLib::Logger *v41;
  DspLib::Logger *v42;
  DspLib::Logger *v43;
  DspLib::Logger *v44;
  DspLib::Logger *v45;
  uint64_t v46;
  _BOOL4 v47;
  DspLib::Logger *v48;
  DspLib::Logger *v49;
  DspLib::Logger *v50;
  DspLib::Logger *v51;
  DspLib::Logger *v52;
  uint64_t v53;
  _BOOL4 v54;
  float v55;
  DspLib::Logger *v56;
  float v57;
  float v58;
  BOOL v59;
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  v4 = DspLibBuffer::numChannels(a2);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v60 - v6;
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)v60 - v6, v8);
  if (DspLibBuffer::numChannels(a2))
  {
    v9 = 0;
    do
    {
      *(_QWORD *)&v7[8 * v9] = DspLibBuffer::channel(a2, v9);
      ++v9;
    }
    while (v9 < DspLibBuffer::numChannels(a2));
  }
  DspLibBuffer::numChannels(a2);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v11 = (DspLib::Logger *)*((_QWORD *)this + 41);
  if (v11)
    DspLib::Logger::logData(v11, (float)cycle_count);
  v12 = (DspLib::Logger *)*((_QWORD *)this + 43);
  if (v12)
    DspLib::Logger::logData(v12, (float)cycle_count);
  v13 = *((_QWORD *)this + 37);
  if (*((_QWORD *)this + 38) != v13)
  {
    v14 = 0;
    v15 = 1;
    v16 = 1;
    do
    {
      v17 = v13 + 40112 * v14;
      v18 = (float *)(v17 + 23456);
      DspLib::multiply(*(const float **)&v7[8 * v15 - 8], cycle_count, (float *)(v17 + 23456), *(float *)(v17 + 264));
      v19 = (DspLib::Logger *)*((_QWORD *)this + 43);
      if (v19)
        DspLib::Logger::logData(v19, v18, cycle_count);
      v20 = v13 + 40112 * v14;
      v21 = (float *)(v20 + 31648);
      DspLib::multiply(*(const float **)&v7[8 * v15], cycle_count, (float *)(v20 + 31648), *(float *)(v20 + 260));
      v22 = (DspLib::Logger *)*((_QWORD *)this + 43);
      if (v22)
        DspLib::Logger::logData(v22, v21, cycle_count);
      v23 = (DspLib::Logger *)*((_QWORD *)this + 41);
      if (v23)
      {
        DspLib::Logger::logData(v23, *(float *)(v13 + 40112 * v14 + 236));
        v24 = (DspLib::Logger *)*((_QWORD *)this + 41);
        if (v24)
        {
          DspLib::Logger::logData(v24, *(float *)(v13 + 40112 * v14 + 224));
          v25 = (DspLib::Logger *)*((_QWORD *)this + 41);
          if (v25)
          {
            DspLib::Logger::logData(v25, *(float *)(v13 + 40112 * v14 + 248));
            v26 = (DspLib::Logger *)*((_QWORD *)this + 41);
            if (v26)
            {
              DspLib::Logger::logData(v26, *(float *)(v13 + 40112 * v14 + 240));
              v27 = (DspLib::Logger *)*((_QWORD *)this + 41);
              if (v27)
              {
                v28 = *((_QWORD *)this + 37);
                v29 = *(_BYTE *)(v28 + 40112 * v14 + 220)
                   && *(float *)(v28 + 40112 * v14 + 240) < *(float *)(v28 + 40112 * v14 + 256);
                DspLib::Logger::logData(v27, (float)v29);
                v30 = (DspLib::Logger *)*((_QWORD *)this + 41);
                if (v30)
                {
                  DspLib::Logger::logData(v30, *(float *)(v13 + 40112 * v14 + 19680));
                  v31 = (DspLib::Logger *)*((_QWORD *)this + 41);
                  if (v31)
                  {
                    DspLib::Logger::logData(v31, *(float *)(v13 + 40112 * v14 + 19676));
                    v32 = (DspLib::Logger *)*((_QWORD *)this + 41);
                    if (v32)
                    {
                      DspLib::Logger::logData(v32, *(float *)(v13 + 40112 * v14 + 19672));
                      v33 = (DspLib::Logger *)*((_QWORD *)this + 41);
                      if (v33)
                      {
                        DspLib::Logger::logData(v33, *(float *)(v13 + 40112 * v14 + 19668));
                        v34 = (DspLib::Logger *)*((_QWORD *)this + 41);
                        if (v34)
                        {
                          DspLib::Logger::logData(v34, *(float *)(v13 + 40112 * v14 + 19664));
                          v35 = (DspLib::Logger *)*((_QWORD *)this + 41);
                          if (v35)
                          {
                            DspLib::Logger::logData(v35, *(float *)(v13 + 40112 * v14 + 19684));
                            v36 = (DspLib::Logger *)*((_QWORD *)this + 41);
                            if (v36)
                            {
                              DspLib::Logger::logData(v36, *(float *)(v13 + 40112 * v14 + 19112));
                              v37 = (DspLib::Logger *)*((_QWORD *)this + 41);
                              if (v37)
                              {
                                v38 = *((_QWORD *)this + 37);
                                v39 = *(_BYTE *)(v38 + 40112 * v14 + 19084)
                                   && *(_BYTE *)(v38 + 40112 * v14 + 19086)
                                   && *(float *)(v38 + 40112 * v14 + 19112) < *(float *)(v38 + 40112 * v14 + 19760);
                                DspLib::Logger::logData(v37, (float)v39);
                                v40 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                if (v40)
                                {
                                  DspLib::Logger::logData(v40, *(float *)(v13 + 40112 * v14 + 20840));
                                  v41 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                  if (v41)
                                  {
                                    DspLib::Logger::logData(v41, *(float *)(v13 + 40112 * v14 + 20832));
                                    v42 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                    if (v42)
                                    {
                                      DspLib::Logger::logData(v42, *(float *)(v13 + 40112 * v14 + 20828));
                                      v43 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                      if (v43)
                                      {
                                        DspLib::Logger::logData(v43, *(float *)(v13 + 40112 * v14 + 20844));
                                        v44 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                        if (v44)
                                        {
                                          DspLib::Logger::logData(v44, *(float *)(v13 + 40112 * v14 + 20272));
                                          v45 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                          if (v45)
                                          {
                                            v46 = *((_QWORD *)this + 37);
                                            v47 = *(_BYTE *)(v46 + 40112 * v14 + 20244)
                                               && *(_BYTE *)(v46 + 40112 * v14 + 20246)
                                               && *(float *)(v46 + 40112 * v14 + 20272) < *(float *)(v46 + 40112 * v14 + 20920);
                                            DspLib::Logger::logData(v45, (float)v47);
                                            v48 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                            if (v48)
                                            {
                                              DspLib::Logger::logData(v48, *(float *)(v13 + 40112 * v14 + 23128));
                                              v49 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                              if (v49)
                                              {
                                                DspLib::Logger::logData(v49, *(float *)(v13 + 40112 * v14 + 23124));
                                                v50 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                                if (v50)
                                                {
                                                  DspLib::Logger::logData(v50, *(float *)(v13 + 40112 * v14 + 23120));
                                                  v51 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                                  if (v51)
                                                  {
                                                    DspLib::Logger::logData(v51, *(float *)(v13 + 40112 * v14 + 22572));
                                                    v52 = (DspLib::Logger *)*((_QWORD *)this + 41);
                                                    if (v52)
                                                    {
                                                      v53 = *((_QWORD *)this + 37);
                                                      v54 = *(_BYTE *)(v53 + 40112 * v14 + 22564)
                                                         && *(_BYTE *)(v53 + 40112 * v14 + 22566)
                                                         && *(float *)(v53 + 40112 * v14 + 22572) < *(float *)(v53 + 40112 * v14 + 23168);
                                                      DspLib::Logger::logData(v52, (float)v54);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v55 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, (7 * *(_DWORD *)(v13 + 40112 * v14 + 8) + 2) | 0x500000000);
      v56 = (DspLib::Logger *)*((_QWORD *)this + 41);
      if (v56)
      {
        v57 = v55 * 0.00097656;
        v58 = logf(*(float *)(v13 + 40112 * v14 + 304));
        DspLib::Logger::logData(v56, -1.0 / (float)(v57 * v58));
      }
      v14 = v16;
      v13 = *((_QWORD *)this + 37);
      v59 = 0x12616AB58F0FD3E3 * ((*((_QWORD *)this + 38) - v13) >> 4) > (unint64_t)v16++;
      v15 += 2;
    }
    while (v59);
  }
}

float DspLib::LoudspeakerSystemIDV2::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  float result;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DspLib::clear((float *)a2, __N);
  if (*(_BYTE *)(a1 + 40))
  {
    v6 = *(unsigned int *)(a1 + 392);
    v7 = *(_QWORD *)(a1 + 296);
    if (0x12616AB58F0FD3E3 * ((*(_QWORD *)(a1 + 304) - v7) >> 4) > v6)
    {
      DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::status(v7 + 40112 * v6 + 32, a2);
      v8 = (const void *)DspLibBuffer::channel((DspLibBuffer *)(*(_QWORD *)(a1 + 296) + 40112 * *(unsigned int *)(a1 + 392) + 23280), 0);
      DspLib::FFT::amplitude(*(_QWORD *)(a1 + 296) + 40112 * *(unsigned int *)(a1 + 392) + 23376, (float *)(a2 + 312), 0x400uLL);
      v9 = *(_QWORD *)(a1 + 296) + 40112 * *(unsigned int *)(a1 + 392);
      v10 = *(_QWORD *)(v9 + 23392);
      v12 = *(_OWORD *)(v9 + 23376);
      v13 = v10;
      DspLib::FFT::phase((uint64_t)&v12, (float *)(a2 + 4408), 0x400uLL);
      memmove((void *)(a2 + 8504), v8, 0x1004uLL);
      DspLib::LoudspeakerSystemIDV2::ModelFit::status(*(_QWORD *)(a1 + 296) + 40112 * *(unsigned int *)(a1 + 392) + 17352);
      *(_DWORD *)(a2 + 308) = *(_DWORD *)(a1 + 324);
      v11 = *(_QWORD *)(a1 + 296) + 40112 * *(unsigned int *)(a1 + 392);
      *(_DWORD *)(a2 + 20812) = *(_DWORD *)(v11 + 40032);
      result = *(float *)(v11 + 40088);
      *(float *)(a2 + 20816) = result;
    }
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV2::Algorithm::speakerModel@<S0>(DspLib::LoudspeakerSystemIDV2::Algorithm *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  float v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  BOOL v22;
  _OWORD *v23;
  __int128 v24;
  float v25;
  uint64_t v26;
  float v27;
  char v28;
  BOOL v29;
  __int128 *v30;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v31;
  __int128 v32;
  float v33;
  uint64_t v34;
  float v35;
  char v36;
  BOOL v37;
  _OWORD *v38;
  __int128 v39;
  float v40;
  uint64_t v41;
  float v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  float result;

  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 9) = 0;
  *(_QWORD *)(a3 + 20) = 0;
  v5 = (_QWORD *)(a3 + 20);
  *(_QWORD *)(a3 + 25) = 0;
  *(_QWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 44) = 0;
  v6 = 52;
  *(_BYTE *)(a3 + 48) = 0;
  do
  {
    v7 = a3 + v6;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 28) = 0;
    *(_BYTE *)(v7 + 36) = 0;
    v6 += 44;
    *(_BYTE *)(v7 + 40) = 0;
  }
  while (v7 + 44 != a3 + 184);
  *(int32x2_t *)(a3 + 184) = vdup_n_s32(0xC2C80000);
  *(_DWORD *)(a3 + 192) = 1065353216;
  *(_BYTE *)(a3 + 196) = 0;
  v9 = *((_QWORD *)this + 37);
  v10 = v9 + 40112 * a2;
  v11 = *(_BYTE *)(v10 + 18656);
  *(_BYTE *)(v10 + 18656) = 0;
  *(_BYTE *)(a3 + 1) = v11;
  v12 = *(_DWORD *)(v10 + 248);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v10 + 224);
  *(_DWORD *)(a3 + 8) = v12;
  v13 = *(float *)(v10 + 240);
  *(float *)(a3 + 12) = v13;
  v14 = *(unsigned __int8 *)(v10 + 220);
  if (v14)
    LOBYTE(v14) = v13 < *(float *)(v9 + 40112 * a2 + 256);
  *(_BYTE *)(a3 + 16) = v14;
  v15 = (_QWORD *)(v9 + 40112 * a2);
  v16 = v15[2890];
  *(_QWORD *)((char *)v5 + 5) = *(_QWORD *)((char *)v15 + 23125);
  *v5 = v16;
  v17 = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)(v15 + 2770));
  v18 = *((_QWORD *)this + 37);
  v19 = v18 + 40112 * a2;
  v20 = *(float *)(v19 + 22572);
  *(float *)(a3 + 36) = v17;
  *(float *)(a3 + 40) = v20;
  v21 = *(unsigned __int8 *)(v19 + 22566);
  if (v21)
    v22 = v20 < *(float *)(v18 + 40112 * a2 + 23168);
  else
    v22 = 0;
  *(_BYTE *)(a3 + 44) = v22;
  *(_BYTE *)(a3 + 48) = v21;
  v23 = (_OWORD *)(v18 + 40112 * a2);
  v24 = v23[1229];
  *(_OWORD *)(a3 + 61) = *(_OWORD *)((char *)v23 + 19673);
  *(_OWORD *)(a3 + 52) = v24;
  v25 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)v23 + 18680));
  v26 = *((_QWORD *)this + 37);
  v27 = *(float *)(v26 + 40112 * a2 + 19112);
  *(float *)(a3 + 80) = v25;
  *(float *)(a3 + 84) = v27;
  v28 = *(_BYTE *)(v26 + 40112 * a2 + 19086);
  if (v28)
    v29 = v27 < *(float *)(v26 + 40112 * a2 + 19760);
  else
    v29 = 0;
  *(_BYTE *)(a3 + 88) = v29;
  *(_BYTE *)(a3 + 92) = v28;
  v30 = (__int128 *)(v26 + 40112 * a2);
  v31 = (DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(v30 + 1240);
  v30 = (__int128 *)((char *)v30 + 20824);
  v32 = *v30;
  *(_OWORD *)(a3 + 105) = *(__int128 *)((char *)v30 + 9);
  *(_OWORD *)(a3 + 96) = v32;
  v33 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin(v31);
  v34 = *((_QWORD *)this + 37);
  v35 = *(float *)(v34 + 40112 * a2 + 20272);
  *(float *)(a3 + 124) = v33;
  *(float *)(a3 + 128) = v35;
  v36 = *(_BYTE *)(v34 + 40112 * a2 + 20246);
  if (v36)
    v37 = v35 < *(float *)(v34 + 40112 * a2 + 20920);
  else
    v37 = 0;
  *(_BYTE *)(a3 + 132) = v37;
  *(_BYTE *)(a3 + 136) = v36;
  v38 = (_OWORD *)(v34 + 40112 * a2);
  v39 = v38[1374];
  *(_OWORD *)(a3 + 149) = *(_OWORD *)((char *)v38 + 21993);
  *(_OWORD *)(a3 + 140) = v39;
  v40 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)v38 + 21000));
  v41 = *((_QWORD *)this + 37);
  v42 = *(float *)(v41 + 40112 * a2 + 21432);
  *(float *)(a3 + 168) = v40;
  *(float *)(a3 + 172) = v42;
  v43 = *(_BYTE *)(v41 + 40112 * a2 + 21406);
  if (v43)
    v44 = v42 < *(float *)(v41 + 40112 * a2 + 22080);
  else
    v44 = 0;
  *(_BYTE *)(a3 + 176) = v44;
  *(_BYTE *)(a3 + 180) = v43;
  *(_BYTE *)a3 = DspLib::LoudspeakerSystemIDV2::gNonVolatileRecord[264 * a2 + 260];
  v45 = v41 + 40112 * a2;
  v46 = *(_DWORD *)(v45 + 40088);
  *(_DWORD *)(a3 + 184) = *(_DWORD *)(v45 + 40032);
  *(_DWORD *)(a3 + 188) = v46;
  result = *(float *)(v45 + 212);
  *(float *)(a3 + 192) = result;
  *(_BYTE *)(a3 + 196) = *((_BYTE *)this + 321);
  return result;
}

float *DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::setDefaultResonanceModel(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28[6];
  _BYTE v29[25];

  v9 = a4;
  v10 = DspLib::AlgorithmParametersInstance::operator[](a2, a4 | 0x2300000000);
  v11 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x400000000);
  v12 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x2400000000);
  v13 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x2500000000);
  if (v10 >= 0.5)
  {
    v18 = v11 * 0.001;
    v14 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x300000000);
    v15 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x400000000);
    v19 = v12 * 6.2832;
    v16 = (float)(v18 * (float)(v12 * 6.2832)) / v13;
    v17 = v18 * (float)(v19 * v19);
  }
  else
  {
    v14 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x300000000);
    v15 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x400000000);
    v16 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x500000000);
    v17 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x600000000);
  }
  v20 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x1F00000000);
  v21 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x1C00000000);
  v28[0] = v14;
  v28[1] = v15 * 0.001;
  v22 = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x1B00000000) >= 0.5;
  v28[2] = v16;
  v28[3] = v17;
  v28[4] = v20;
  v28[5] = v21;
  result = DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v28, v22, (uint64_t)v29);
  v24 = a1 + 264 * a3;
  v25 = v24 + 28 * a5;
  *(_OWORD *)(v25 + 124) = *(_OWORD *)v29;
  *(_OWORD *)(v25 + 133) = *(_OWORD *)&v29[9];
  if (!*(_BYTE *)(v24 + a5 + 208) || *(unsigned __int8 *)(a1 + 264 * a3 + 214) != v22)
  {
    v26 = a1 + 264 * a3;
    *(_BYTE *)(v26 + 214) = v22;
    v27 = v26 + 28 * a5;
    *(_OWORD *)(v27 + 40) = *(_OWORD *)(v25 + 124);
    *(_OWORD *)(v27 + 49) = *(_OWORD *)(v25 + 133);
  }
  return result;
}

float DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::takeRdcProcessTimeStamp(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, unint64_t *a2)
{
  return DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)((char *)this + 264 * a2 + 24), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeRdc(uint64_t this, float a2, float a3, unsigned int a4)
{
  uint64_t v4;

  v4 = this + 264 * a4;
  *(float *)v4 = a2;
  *(float *)(v4 + 8) = a3;
  *(_BYTE *)(v4 + 12) = 1;
  return this;
}

void DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readRdc(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, float *a2, float *a3, BOOL *a4, unsigned int a5)
{
  char *v10;
  unint64_t *v11;
  float v12;
  _BYTE *v13;
  BOOL v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;

  v10 = (char *)this + 264 * a5;
  v19 = *((_QWORD *)v10 + 3);
  v12 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v19, (unint64_t *)a2);
  v13 = v10 + 260;
  if (v12 >= *((float *)v10 + 63))
  {
    *v13 = 1;
    v15 = (float *)((char *)this + 264 * a5);
    v16 = v15[64];
    v19 = *((_QWORD *)v15 + 4);
    v17 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v19, v11);
    v18 = expf((float)-v17 / v16);
    v14 = 0;
    *a2 = v15[1] + (float)(v18 * (float)(*(float *)v10 - v15[1]));
  }
  else
  {
    *v13 = 0;
    *a2 = *(float *)v10;
    *a3 = *((float *)this + 66 * a5 + 2);
    v14 = 1;
  }
  *a4 = v14;
  DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *)((char *)this + 264 * a5 + 32), v11);
}

__n128 DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeResonanceModel(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;

  v5 = a1 + 264 * a4;
  v6 = v5 + 28 * a3;
  result = *(__n128 *)a2;
  *(_OWORD *)(v6 + 49) = *(_OWORD *)(a2 + 9);
  *(__n128 *)(v6 + 40) = result;
  v8 = v5 + a3;
  *(_BYTE *)(v8 + 208) = 1;
  *(_BYTE *)(v8 + 211) = a5;
  return result;
}

void DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readResonanceModel(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v4;
  char *v8;
  unint64_t *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  char *v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  int32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;

  v4 = a2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = (char *)this + 264 * a3;
  v20 = *((_QWORD *)v8 + 3);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v20, a2) >= *((float *)v8 + 63))
  {
    v10 = v4;
  }
  else
  {
    v10 = v4;
    if (!*((_BYTE *)this + 264 * a3 + v4 + 211))
    {
      v11 = (char *)this + 264 * a3 + 28 * v4;
      *(_OWORD *)a4 = *(_OWORD *)(v11 + 40);
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v11 + 7);
      *(_BYTE *)(a4 + 24) = 1;
      return;
    }
  }
  v12 = (char *)this + 264 * a3;
  v13 = &v12[28 * v10];
  v20 = *((_QWORD *)v12 + 2);
  v18 = *(float32x4_t *)(v13 + 124);
  v19 = vsubq_f32(*(float32x4_t *)(v13 + 40), v18);
  v14 = *(float32x2_t *)(v13 + 140);
  v15 = vsub_f32(*(float32x2_t *)(v13 + 56), v14);
  v16 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v20, v9);
  *(float *)v17.i32 = expf((float)-v16 / *((float *)v12 + 64));
  *(float32x4_t *)a4 = vmlaq_n_f32(v18, v19, *(float *)v17.i32);
  *(float32x2_t *)(a4 + 16) = vmla_f32(v14, v15, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v17, 0));
  *(_BYTE *)(a4 + 24) = 0;
}

uint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::writeInductanceModel(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;

  v4 = result + 264 * a4;
  *(_QWORD *)(v4 + 216) = a2;
  *(_DWORD *)(v4 + 224) = a3;
  *(_BYTE *)(v4 + 228) = BYTE4(a3);
  *(_BYTE *)(v4 + 244) = 1;
  return result;
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::readInductanceModel(DspLib::LoudspeakerSystemIDV2::NonVolatileMemory *this, unint64_t *a2)
{
  unsigned int v2;
  unsigned int v4;
  char *v5;
  unint64_t *v6;
  char *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v2 = a2;
  v4 = a2;
  v5 = (char *)this + 264 * a2;
  v15 = *((_QWORD *)v5 + 3);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v15, a2) < *((float *)v5 + 63))
    return *((_QWORD *)this + 33 * v4 + 27);
  v8 = (char *)this + 264 * v4;
  v9 = *((float *)v8 + 58);
  v10 = *((float *)v8 + 59);
  v11 = *((float *)v8 + 60);
  v12 = *((_QWORD *)v8 + 27);
  v13 = *((_QWORD *)v8 + 28);
  v15 = *((_QWORD *)v8 + 2);
  v14 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v15, v6);
  return DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::inductanceModelWithDecay((uint64_t)this, v12, v9, v10, v11, v14, v13, v2);
}

unint64_t DspLib::LoudspeakerSystemIDV2::NonVolatileMemory::inductanceModelWithDecay(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, uint64_t a7, unsigned int a8)
{
  float v12;
  float v13;
  float v14;
  float v15;

  v12 = expf((float)-a6 / *(float *)(a1 + 264 * a8 + 256));
  v13 = a3 + (float)(v12 * (float)(DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters(a2) - a3));
  return DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v13, a4 + (float)(v12 * (float)(v14 - a4)), a5 + (float)(v12 * (float)(v15 - a5)));
}

void std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(v4 - 40112));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID(DspLib::LoudspeakerSystemIDV2::SystemID *this)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 39944));
  v2 = (void **)((char *)this + 39856);
  v3 = (void *)*((_QWORD *)this + 4990);
  if (v3)
  {
    *((_QWORD *)this + 4991) = v3;
    operator delete(v3);
  }
  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)this + 4983) = v4;
    operator delete(v4);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23376));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23280));
  v6 = (void **)((char *)this + 23248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = (void *)*((_QWORD *)this + 2901);
  if (v5)
  {
    *((_QWORD *)this + 2902) = v5;
    operator delete(v5);
  }
  DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 17352));
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 32));
}

void DspLib::OnePoleSmoother::~OnePoleSmoother(DspLib::OnePoleSmoother *this)
{
  void *v2;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::OnePoleSmoother *)((char *)this + 56));
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::~LR2InductanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8));
}

void DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  void *v2;

  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 904));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 792));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17240));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17160));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17080));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17000));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16920));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16840));
  v2 = (void *)*((_QWORD *)this + 2099);
  if (v2)
  {
    *((_QWORD *)this + 2100) = v2;
    operator delete(v2);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 16752);
  v3 = (void *)*((_QWORD *)this + 2088);
  if (v3)
  {
    *((_QWORD *)this + 2089) = v3;
    operator delete(v3);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 16664);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 112));
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
}

DspLib::LoudspeakerSystemIDV2::SystemID *std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__append(DspLib::LoudspeakerSystemIDV2::SystemID *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)a1 + 2);
  v4 = (uint64_t)a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x12616AB58F0FD3E3 * ((v6 - v7) >> 4) >= a2)
    return std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__construct_at_end(a1, a2);
  v8 = 0x12616AB58F0FD3E3 * ((v7 - *(_QWORD *)a1) >> 4);
  v9 = v8 + a2;
  if (v8 + a2 > 0x1A2425FC8732FLL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v10 = 0x12616AB58F0FD3E3 * ((v5 - *(_QWORD *)a1) >> 4);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0xD1212FE43997)
    v11 = 0x1A2425FC8732FLL;
  else
    v11 = v9;
  v20 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>>(v4, v11);
  else
    v12 = 0;
  v14 = &v12[40112 * v8];
  v17[0] = v12;
  v17[1] = v14;
  v18 = v14;
  v19 = &v12[40112 * v11];
  v15 = 40112 * a2;
  v16 = &v14[40112 * a2];
  do
  {
    bzero(v14, 0x9CB0uLL);
    DspLib::LoudspeakerSystemIDV2::SystemID::SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)v14);
    v14 += 40112;
    v15 -= 40112;
  }
  while (v15);
  v18 = v16;
  std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__swap_out_circular_buffer((uint64_t *)a1, v17);
  return (DspLib::LoudspeakerSystemIDV2::SystemID *)std::__split_buffer<DspLib::LoudspeakerSystemIDV2::SystemID>::~__split_buffer((uint64_t)v17);
}

void sub_1B60AB558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::LoudspeakerSystemIDV2::SystemID>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

DspLib::LoudspeakerSystemIDV2::SystemID *std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__construct_at_end(DspLib::LoudspeakerSystemIDV2::SystemID *result, uint64_t a2)
{
  DspLib::LoudspeakerSystemIDV2::SystemID *v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v2 = result;
  v3 = (char *)*((_QWORD *)result + 1);
  if (a2)
  {
    v4 = &v3[40112 * a2];
    v5 = 40112 * a2;
    do
    {
      bzero(v3, 0x9CB0uLL);
      result = DspLib::LoudspeakerSystemIDV2::SystemID::SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)v3);
      v3 += 40112;
      v5 -= 40112;
    }
    while (v5);
    v3 = v4;
  }
  *((_QWORD *)v2 + 1) = v3;
  return result;
}

void sub_1B60AB5E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LoudspeakerSystemIDV2::SystemID>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

DspLib::LoudspeakerSystemIDV2::SystemID *DspLib::LoudspeakerSystemIDV2::SystemID::SystemID(DspLib::LoudspeakerSystemIDV2::SystemID *this)
{
  *(_QWORD *)this = 1;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 32));
  DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 17352));
  *((_QWORD *)this + 2900) = 1;
  *((_QWORD *)this + 2909) = 0;
  *(_OWORD *)((char *)this + 23208) = 0u;
  *(_OWORD *)((char *)this + 23224) = 0u;
  *(_OWORD *)((char *)this + 23240) = 0u;
  *(_OWORD *)((char *)this + 23256) = 0u;
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23280));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SystemID *)((char *)this + 23376), 0, 0);
  bzero((char *)this + 23456, 0x4000uLL);
  *((_QWORD *)this + 4980) = 1;
  *((_DWORD *)this + 9962) = 1065353216;
  *((_OWORD *)this + 2494) = 0u;
  *((_OWORD *)this + 2495) = 0u;
  *((_OWORD *)this + 2496) = 0u;
  *((_OWORD *)this + 2497) = 0u;
  *(_OWORD *)((char *)this + 39881) = 0u;
  *((_OWORD *)this + 2491) = 0u;
  *((_OWORD *)this + 2492) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 2498) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 4998) = _Q0;
  *((_DWORD *)this + 9998) = 0;
  *((_BYTE *)this + 40008) = 0;
  *((_DWORD *)this + 10003) = 1065353216;
  *((_OWORD *)this + 2501) = xmmword_1B66283E0;
  *((_DWORD *)this + 10008) = 0;
  *((_QWORD *)this + 5005) = 0;
  *((_DWORD *)this + 10012) = 0;
  *((_BYTE *)this + 40064) = 0;
  *((_DWORD *)this + 10017) = 1065353216;
  *(_OWORD *)((char *)this + 40072) = xmmword_1B66283E0;
  *((_DWORD *)this + 10022) = 0;
  *((_QWORD *)this + 5012) = 0;
  *((_DWORD *)this + 10026) = 0;
  return this;
}

void sub_1B60AB7A8(_Unwind_Exception *a1)
{
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *v1;
  DspLib::LoudspeakerSystemIDV2::ModelFit *v2;
  DspLib::FIRDecimator *v3;
  DspLibBuffer *v4;

  DspLibBuffer::~DspLibBuffer(v4);
  DspLib::FIRDecimator::~FIRDecimator(v3);
  DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit(v2);
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement(v1);
  _Unwind_Resume(a1);
}

DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *this)
{
  *(float *)this = DspLib::dB2Amp(this, -43.0);
  *((_QWORD *)this + 1) = 1;
  *((_DWORD *)this + 4) = 1065353216;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 49) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 136) = _Q0;
  *((_BYTE *)this + 152) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 183) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1092616192;
  *((_BYTE *)this + 212) = 0;
  *(_OWORD *)((char *)this + 216) = xmmword_1B66282F0;
  *((_QWORD *)this + 29) = 0x3F80000000000000;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 66) = 1065353216;
  *((_BYTE *)this + 268) = 1;
  *((_DWORD *)this + 68) = 0;
  *((_BYTE *)this + 276) = 0;
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 16664, (char *)this + 280, 2048, 1024, 0);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 16752, (char *)this + 8472, 2048, 1024, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16840), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 16920), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17000), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17080), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17160), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *)((char *)this + 17240), 0, 0);
  return this;
}

void sub_1B60AB990(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::FFT::BufferedForwardSTFT *v2;
  DspLib::FFT::BufferedForwardSTFT *v3;
  DspLib::ComplexVector *v4;
  DspLib::ComplexVector *v5;
  DspLib::ComplexVector *v6;
  DspLib::ComplexVector *v7;
  DspLib::ComplexVector *v8;
  void **v9;
  DspLib::ComplexVector *v10;
  void *v12;

  v10 = v6;
  DspLib::ComplexVector::~ComplexVector(v10);
  DspLib::ComplexVector::~ComplexVector(v8);
  DspLib::ComplexVector::~ComplexVector(v7);
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLib::ComplexVector::~ComplexVector(v4);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v3);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v2);
  DspLib::OnePoleSmoother::~OnePoleSmoother((DspLib::OnePoleSmoother *)(v1 + 56));
  v12 = *v9;
  if (*v9)
  {
    *(_QWORD *)(v1 + 32) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_1B60ABA10()
{
  JUMPOUT(0x1B60AB9E0);
}

void sub_1B60ABA18()
{
  JUMPOUT(0x1B60AB9E8);
}

void sub_1B60ABA20()
{
  JUMPOUT(0x1B60AB9F0);
}

DspLib::LoudspeakerSystemIDV2::ModelFit *DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  *((_DWORD *)this + 1) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648), 0, 0);
  *((_DWORD *)this + 182) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216), 0, 0);
  *((_BYTE *)this + 1304) = 0;
  *((_QWORD *)this + 162) = 0;
  *((_OWORD *)this + 82) = 0u;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2488));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3648));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4808));
  return this;
}

void sub_1B60ABC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::ComplexVector *a9, DspLib::ComplexVector *a10, DspLib::ComplexVector *a11, DspLib::ComplexVector *a12, DspLib::ComplexVector *a13, DspLib::ComplexVector *a14, DspLib::ComplexVector *a15, DspLib::ComplexVector *a16, DspLib::ComplexVector *a17, DspLib::ComplexVector *a18)
{
  DspLib::ComplexVector *v18;
  DspLib::ComplexVector *v19;
  DspLib::ComplexVector *v20;
  DspLib::ComplexVector *v21;
  DspLib::ComplexVector *v22;
  DspLib::ComplexVector *v23;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v24;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v25;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v26;

  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v26);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v25);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v24);
  DspLib::ComplexVector::~ComplexVector(v23);
  DspLib::ComplexVector::~ComplexVector(v22);
  DspLib::ComplexVector::~ComplexVector(v21);
  DspLib::ComplexVector::~ComplexVector(v20);
  DspLib::ComplexVector::~ComplexVector(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexVector::~ComplexVector(a9);
  DspLib::ComplexVector::~ComplexVector(a10);
  DspLib::ComplexVector::~ComplexVector(a11);
  DspLib::ComplexVector::~ComplexVector(a12);
  DspLib::ComplexVector::~ComplexVector(a13);
  DspLib::ComplexVector::~ComplexVector(a14);
  DspLib::ComplexVector::~ComplexVector(a15);
  DspLib::ComplexVector::~ComplexVector(a16);
  DspLib::ComplexVector::~ComplexVector(a17);
  DspLib::ComplexVector::~ComplexVector(a18);
  _Unwind_Resume(a1);
}

void sub_1B60ABCE8()
{
  JUMPOUT(0x1B60ABC70);
}

void sub_1B60ABCF0()
{
  JUMPOUT(0x1B60ABC78);
}

void sub_1B60ABCF8()
{
  JUMPOUT(0x1B60ABC80);
}

void sub_1B60ABD00()
{
  JUMPOUT(0x1B60ABC88);
}

void sub_1B60ABD08()
{
  JUMPOUT(0x1B60ABC90);
}

void sub_1B60ABD10()
{
  JUMPOUT(0x1B60ABC98);
}

void sub_1B60ABD18()
{
  JUMPOUT(0x1B60ABCA0);
}

void sub_1B60ABD20()
{
  JUMPOUT(0x1B60ABCA8);
}

void sub_1B60ABD28()
{
  JUMPOUT(0x1B60ABCB0);
}

void sub_1B60ABD30()
{
  JUMPOUT(0x1B60ABCB8);
}

void sub_1B60ABD38()
{
  JUMPOUT(0x1B60ABCC0);
}

void sub_1B60ABD40()
{
  JUMPOUT(0x1B60ABCC8);
}

void sub_1B60ABD48()
{
  JUMPOUT(0x1B60ABCD0);
}

void sub_1B60ABD50()
{
  JUMPOUT(0x1B60ABCD8);
}

DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *this)
{
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 320), 0, 0);
  *((_DWORD *)this + 102) = 0;
  *((_DWORD *)this + 100) = 0;
  *(_DWORD *)((char *)this + 403) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 52) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 440), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 520), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 616), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 696));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 792), 0, 0);
  *((_DWORD *)this + 223) = 0;
  *((_BYTE *)this + 896) = 0;
  *((_WORD *)this + 444) = 0;
  *(_OWORD *)((char *)this + 872) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)((char *)this + 904), 0, 0);
  *((_BYTE *)this + 1008) = 0;
  *((_QWORD *)this + 125) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_BYTE *)this + 1036) = 0;
  *(_QWORD *)((char *)this + 1012) = 0;
  *(_OWORD *)((char *)this + 1020) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_DWORD *)this + 288) = 0;
  return this;
}

void sub_1B60ABEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  DspLib::ComplexMatrix *v11;
  DspLib::ComplexVector *v12;
  DspLib::ComplexMatrix *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexVector *v16;
  DspLib::ComplexMatrix *v17;
  DspLib::ComplexVector *v18;
  DspLibBuffer *v19;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B60ABF60()
{
  JUMPOUT(0x1B60ABF28);
}

void sub_1B60ABF68()
{
  JUMPOUT(0x1B60ABF30);
}

void sub_1B60ABF70()
{
  JUMPOUT(0x1B60ABF38);
}

void sub_1B60ABF78()
{
  JUMPOUT(0x1B60ABF40);
}

void sub_1B60ABF80()
{
  JUMPOUT(0x1B60ABF48);
}

DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel(DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *this)
{
  *(_OWORD *)((char *)this + 30) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 320), 0, 0);
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 100) = 0;
  *(_DWORD *)((char *)this + 403) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 424), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 504), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 600), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 776), 0, 0);
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *)((char *)this + 880), 0, 0);
  *((_QWORD *)this + 120) = 0;
  *(_QWORD *)((char *)this + 965) = 0;
  *((_QWORD *)this + 122) = 0;
  *(_QWORD *)((char *)this + 981) = 0;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *(_OWORD *)((char *)this + 1020) = 0u;
  return this;
}

void sub_1B60AC0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  DspLib::ComplexMatrix *v11;
  DspLib::ComplexVector *v12;
  DspLib::ComplexMatrix *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexVector *v16;
  DspLib::ComplexMatrix *v17;
  DspLib::ComplexVector *v18;
  DspLibBuffer *v19;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B60AC168()
{
  JUMPOUT(0x1B60AC130);
}

void sub_1B60AC170()
{
  JUMPOUT(0x1B60AC138);
}

void sub_1B60AC178()
{
  JUMPOUT(0x1B60AC140);
}

void sub_1B60AC180()
{
  JUMPOUT(0x1B60AC148);
}

void sub_1B60AC188()
{
  JUMPOUT(0x1B60AC150);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1A2425FC87330)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40112 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerSystemIDV2::SystemID>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>,std::reverse_iterator<DspLib::LoudspeakerSystemIDV2::SystemID*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a7 - 40112;
  v11 = 40112;
  v12 = a7;
  while (a3 != a5)
  {
    a3 -= 2507;
    v11 -= 40112;
    v12 -= 40112;
    v13 = v10 - 40112;
    DspLib::LoudspeakerSystemIDV2::SystemID::SystemID(v10, a3);
    v10 = v13;
  }
  return a6;
}

void sub_1B60AC258(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 40112)
    DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SystemID::SystemID(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)a1 = v4;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement(a1 + 32, (uint64_t)(a2 + 2));
  DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit(a1 + 17352, (uint64_t)a2 + 17352);
  *(_QWORD *)(a1 + 23200) = *((_QWORD *)a2 + 2900);
  *(_QWORD *)(a1 + 23208) = 0;
  *(_QWORD *)(a1 + 23224) = 0;
  *(_QWORD *)(a1 + 23216) = 0;
  *(_QWORD *)(a1 + 23208) = *((_QWORD *)a2 + 2901);
  *(_QWORD *)(a1 + 23216) = *((_QWORD *)a2 + 2902);
  *(_QWORD *)(a1 + 23224) = *((_QWORD *)a2 + 2903);
  *((_QWORD *)a2 + 2903) = 0;
  *((_QWORD *)a2 + 2902) = 0;
  *((_QWORD *)a2 + 2901) = 0;
  *(_OWORD *)(a1 + 23232) = a2[1452];
  *(_QWORD *)(a1 + 23256) = 0;
  *(_QWORD *)(a1 + 23264) = 0;
  *(_QWORD *)(a1 + 23248) = 0;
  *(_OWORD *)(a1 + 23248) = a2[1453];
  *(_QWORD *)(a1 + 23264) = *((_QWORD *)a2 + 2908);
  *((_QWORD *)a2 + 2907) = 0;
  *((_QWORD *)a2 + 2906) = 0;
  *((_QWORD *)a2 + 2908) = 0;
  *(_QWORD *)(a1 + 23272) = *((_QWORD *)a2 + 2909);
  DspLibBuffer::DspLibBuffer(a1 + 23280, a2 + 1455);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 23376), (const DspLib::ComplexVector *)(a2 + 1461));
  memcpy((void *)(a1 + 23456), a2 + 1466, 0x4000uLL);
  v5 = *((_DWORD *)a2 + 9962);
  *(_QWORD *)(a1 + 39840) = *((_QWORD *)a2 + 4980);
  *(_DWORD *)(a1 + 39848) = v5;
  *(_QWORD *)(a1 + 39864) = 0;
  *(_QWORD *)(a1 + 39872) = 0;
  *(_QWORD *)(a1 + 39856) = 0;
  *(_OWORD *)(a1 + 39856) = a2[2491];
  v6 = *((_QWORD *)a2 + 4985);
  *(_QWORD *)(a1 + 39872) = *((_QWORD *)a2 + 4984);
  *((_QWORD *)a2 + 4983) = 0;
  *((_QWORD *)a2 + 4984) = 0;
  *((_QWORD *)a2 + 4982) = 0;
  *(_QWORD *)(a1 + 39880) = v6;
  *(_QWORD *)(a1 + 39888) = *((_QWORD *)a2 + 4986);
  *(_BYTE *)(a1 + 39896) = *((_BYTE *)a2 + 39896);
  *(_OWORD *)(a1 + 39904) = a2[2494];
  *(_QWORD *)(a1 + 39920) = 0;
  *(_QWORD *)(a1 + 39928) = 0;
  *(_QWORD *)(a1 + 39936) = 0;
  *(_OWORD *)(a1 + 39920) = a2[2495];
  *(_QWORD *)(a1 + 39936) = *((_QWORD *)a2 + 4992);
  *((_QWORD *)a2 + 4990) = 0;
  *((_QWORD *)a2 + 4991) = 0;
  *((_QWORD *)a2 + 4992) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 39944), (__n128 *)((char *)a2 + 39944));
  *(_OWORD *)(a1 + 39968) = a2[2498];
  v7 = *((_QWORD *)a2 + 4998);
  *(_DWORD *)(a1 + 39992) = *((_DWORD *)a2 + 9998);
  *(_QWORD *)(a1 + 39984) = v7;
  v8 = *(__int128 *)((char *)a2 + 40092);
  v9 = a2[2504];
  v10 = a2[2505];
  *(_OWORD *)(a1 + 40048) = a2[2503];
  *(_OWORD *)(a1 + 40092) = v8;
  *(_OWORD *)(a1 + 40080) = v10;
  *(_OWORD *)(a1 + 40064) = v9;
  v11 = a2[2500];
  v12 = a2[2501];
  *(_OWORD *)(a1 + 40032) = a2[2502];
  *(_OWORD *)(a1 + 40016) = v12;
  *(_OWORD *)(a1 + 40000) = v11;
  return a1;
}

void sub_1B60AC4A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement *v2;
  DspLib::LoudspeakerSystemIDV2::ModelFit *v3;
  DspLibBuffer *v4;
  DspLib::ComplexVector *v5;
  uint64_t v6;
  void **v7;
  void *v9;
  void *v10;

  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v6 + 72) = v9;
    operator delete(v9);
  }
  v10 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v10;
    operator delete(v10);
  }
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLibBuffer::~DspLibBuffer(v4);
  DspLib::FIRDecimator::~FIRDecimator((DspLib::FIRDecimator *)(v1 + 23200));
  DspLib::LoudspeakerSystemIDV2::ModelFit::~ModelFit(v3);
  DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::~ImpedanceMeasurement(v2);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ImpedanceMeasurement::ImpedanceMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  int v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 112), (__n128 *)(a2 + 112));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  memcpy((void *)(a1 + 152), (const void *)(a2 + 152), 0x4090uLL);
  *(_QWORD *)(a2 + 16672) = 0;
  v7 = *(_OWORD *)(a2 + 16680);
  *(_QWORD *)(a1 + 16696) = *(_QWORD *)(a2 + 16696);
  *(_OWORD *)(a1 + 16680) = v7;
  *(_QWORD *)(a1 + 16720) = 0;
  *(_QWORD *)(a1 + 16704) = 0;
  *(_QWORD *)(a1 + 16712) = 0;
  *(_OWORD *)(a1 + 16704) = *(_OWORD *)(a2 + 16704);
  *(_QWORD *)(a1 + 16720) = *(_QWORD *)(a2 + 16720);
  *(_QWORD *)(a2 + 16720) = 0;
  *(_QWORD *)(a2 + 16704) = 0;
  *(_QWORD *)(a2 + 16712) = 0;
  v8 = *(_DWORD *)(a2 + 16744);
  *(_OWORD *)(a1 + 16728) = *(_OWORD *)(a2 + 16728);
  *(_DWORD *)(a1 + 16744) = v8;
  *(_QWORD *)(a1 + 16752) = *(_QWORD *)(a2 + 16752);
  *(_QWORD *)(a1 + 16760) = *(_QWORD *)(a2 + 16760);
  *(_QWORD *)(a2 + 16760) = 0;
  v9 = *(_OWORD *)(a2 + 16768);
  *(_QWORD *)(a1 + 16784) = *(_QWORD *)(a2 + 16784);
  *(_OWORD *)(a1 + 16768) = v9;
  *(_QWORD *)(a1 + 16792) = 0;
  *(_QWORD *)(a1 + 16808) = 0;
  *(_QWORD *)(a1 + 16800) = 0;
  *(_QWORD *)(a1 + 16792) = *(_QWORD *)(a2 + 16792);
  *(_QWORD *)(a1 + 16800) = *(_QWORD *)(a2 + 16800);
  *(_QWORD *)(a1 + 16808) = *(_QWORD *)(a2 + 16808);
  *(_QWORD *)(a2 + 16800) = 0;
  *(_QWORD *)(a2 + 16792) = 0;
  *(_QWORD *)(a2 + 16808) = 0;
  v10 = *(_DWORD *)(a2 + 16832);
  *(_OWORD *)(a1 + 16816) = *(_OWORD *)(a2 + 16816);
  *(_DWORD *)(a1 + 16832) = v10;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 16840), (const DspLib::ComplexVector *)(a2 + 16840));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 16920), (const DspLib::ComplexVector *)(a2 + 16920));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17000), (const DspLib::ComplexVector *)(a2 + 17000));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17080), (const DspLib::ComplexVector *)(a2 + 17080));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17160), (const DspLib::ComplexVector *)(a2 + 17160));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 17240), (const DspLib::ComplexVector *)(a2 + 17240));
  return a1;
}

void sub_1B60AC754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DspLib::FFT::BufferedForwardSTFT *a10)
{
  uint64_t v10;
  DspLib::OnePoleSmoother *v11;
  DspLib::FFT::BufferedForwardSTFT *v12;
  void **v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexVector *v16;
  DspLib::ComplexVector *v17;
  DspLib::ComplexVector *v18;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  DspLib::ComplexVector::~ComplexVector(v16);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(a10);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v12);
  DspLib::OnePoleSmoother::~OnePoleSmoother(v11);
  v20 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 32) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B60AC7C8()
{
  JUMPOUT(0x1B60AC790);
}

void sub_1B60AC7D0()
{
  JUMPOUT(0x1B60AC798);
}

void sub_1B60AC7D8()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 96) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B60AC7B0);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ModelFit::ModelFit(uint64_t a1, uint64_t a2)
{
  const DspLib::ComplexVector *v4;
  DspLib::ComplexVector *v5;
  __int128 v6;

  v4 = (const DspLib::ComplexVector *)(a2 + 88);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (DspLib::ComplexVector *)(a1 + 88);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 8), (const DspLib::ComplexVector *)(a2 + 8));
  DspLib::ComplexVector::ComplexVector(v5, v4);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 168), (const DspLib::ComplexVector *)(a2 + 168));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 248), (const DspLib::ComplexVector *)(a2 + 248));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 328), (const DspLib::ComplexVector *)(a2 + 328));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 408), (const DspLib::ComplexVector *)(a2 + 408));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 488), (const DspLib::ComplexVector *)(a2 + 488));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 568), (const DspLib::ComplexVector *)(a2 + 568));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 648), (const DspLib::ComplexVector *)(a2 + 648));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 736), (const DspLib::ComplexVector *)(a2 + 736));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 816), (const DspLib::ComplexVector *)(a2 + 816));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 896), (const DspLib::ComplexVector *)(a2 + 896));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 976), (const DspLib::ComplexVector *)(a2 + 976));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 1056), (const DspLib::ComplexVector *)(a2 + 1056));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 1136), (const DspLib::ComplexVector *)(a2 + 1136));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 1216), (const DspLib::ComplexVector *)(a2 + 1216));
  v6 = *(_OWORD *)(a2 + 1296);
  *(_OWORD *)(a1 + 1312) = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1296) = v6;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(a1 + 1328, a2 + 1328);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(a1 + 2488, a2 + 2488);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(a1 + 3648, a2 + 3648);
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel(a1 + 4808, a2 + 4808);
  return a1;
}

void sub_1B60AC9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DspLib::ComplexVector *a10, DspLib::ComplexVector *a11, DspLib::ComplexVector *a12, DspLib::ComplexVector *a13, DspLib::ComplexVector *a14, DspLib::ComplexVector *a15, DspLib::ComplexVector *a16, DspLib::ComplexVector *a17, DspLib::ComplexVector *a18, DspLib::ComplexVector *a19, DspLib::ComplexVector *a20)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v20;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v21;
  DspLib::ComplexVector *v22;
  DspLib::ComplexVector *v23;
  DspLib::ComplexVector *v24;
  DspLib::ComplexVector *v25;
  DspLib::ComplexVector *v26;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *v27;

  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v21);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v20);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::~SingleResonanceModel(v27);
  DspLib::ComplexVector::~ComplexVector(v26);
  DspLib::ComplexVector::~ComplexVector(v25);
  DspLib::ComplexVector::~ComplexVector(v24);
  DspLib::ComplexVector::~ComplexVector(v23);
  DspLib::ComplexVector::~ComplexVector(v22);
  DspLib::ComplexVector::~ComplexVector(a10);
  DspLib::ComplexVector::~ComplexVector(a11);
  DspLib::ComplexVector::~ComplexVector(a12);
  DspLib::ComplexVector::~ComplexVector(a13);
  DspLib::ComplexVector::~ComplexVector(a14);
  DspLib::ComplexVector::~ComplexVector(a15);
  DspLib::ComplexVector::~ComplexVector(a16);
  DspLib::ComplexVector::~ComplexVector(a17);
  DspLib::ComplexVector::~ComplexVector(a18);
  DspLib::ComplexVector::~ComplexVector(a19);
  DspLib::ComplexVector::~ComplexVector(a20);
  _Unwind_Resume(a1);
}

void sub_1B60ACA80()
{
  JUMPOUT(0x1B60ACA08);
}

void sub_1B60ACA88()
{
  JUMPOUT(0x1B60ACA10);
}

void sub_1B60ACA90()
{
  JUMPOUT(0x1B60ACA18);
}

void sub_1B60ACA98()
{
  JUMPOUT(0x1B60ACA20);
}

void sub_1B60ACAA0()
{
  JUMPOUT(0x1B60ACA28);
}

void sub_1B60ACAA8()
{
  JUMPOUT(0x1B60ACA30);
}

void sub_1B60ACAB0()
{
  JUMPOUT(0x1B60ACA38);
}

void sub_1B60ACAB8()
{
  JUMPOUT(0x1B60ACA40);
}

void sub_1B60ACAC0()
{
  JUMPOUT(0x1B60ACA48);
}

void sub_1B60ACAC8()
{
  JUMPOUT(0x1B60ACA50);
}

void sub_1B60ACAD0()
{
  JUMPOUT(0x1B60ACA58);
}

void sub_1B60ACAD8()
{
  JUMPOUT(0x1B60ACA60);
}

void sub_1B60ACAE0()
{
  JUMPOUT(0x1B60ACA68);
}

void sub_1B60ACAE8()
{
  JUMPOUT(0x1B60ACA70);
}

uint64_t DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::SingleResonanceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 48), (const DspLib::ComplexMatrix *)(a2 + 48));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 144), (const DspLib::ComplexVector *)(a2 + 144));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 224), (const DspLib::ComplexMatrix *)(a2 + 224));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 320), (const DspLib::ComplexVector *)(a2 + 320));
  v5 = *(_OWORD *)(a2 + 400);
  v6 = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v5;
  *(_OWORD *)(a1 + 416) = v6;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 440), (const DspLib::ComplexVector *)(a2 + 440));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 520), (const DspLib::ComplexMatrix *)(a2 + 520));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 616), (const DspLib::ComplexVector *)(a2 + 616));
  DspLibBuffer::DspLibBuffer(a1 + 696, a2 + 696);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 792), (const DspLib::ComplexVector *)(a2 + 792));
  v7 = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 881) = *(_OWORD *)(a2 + 881);
  *(_OWORD *)(a1 + 872) = v7;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 904), (const DspLib::ComplexVector *)(a2 + 904));
  v8 = *(_OWORD *)(a2 + 984);
  v9 = *(_OWORD *)(a2 + 1016);
  *(_OWORD *)(a1 + 1000) = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 1016) = v9;
  *(_OWORD *)(a1 + 984) = v8;
  v10 = *(_OWORD *)(a2 + 1032);
  v11 = *(_OWORD *)(a2 + 1048);
  v12 = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1064) = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1080) = v12;
  *(_OWORD *)(a1 + 1032) = v10;
  *(_OWORD *)(a1 + 1048) = v11;
  v13 = *(_OWORD *)(a2 + 1096);
  v14 = *(_OWORD *)(a2 + 1112);
  v15 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1140) = *(_OWORD *)(a2 + 1140);
  *(_OWORD *)(a1 + 1112) = v14;
  *(_OWORD *)(a1 + 1128) = v15;
  *(_OWORD *)(a1 + 1096) = v13;
  return a1;
}

void sub_1B60ACC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::ComplexVector *a9, DspLib::ComplexMatrix *a10)
{
  uint64_t v10;
  DspLib::ComplexVector *v11;
  void **v12;
  DspLib::ComplexMatrix *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexMatrix *v16;
  DspLib::ComplexVector *v17;
  DspLibBuffer *v18;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v11);
  DspLibBuffer::~DspLibBuffer(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  DspLib::ComplexMatrix::~ComplexMatrix(v16);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(a9);
  DspLib::ComplexMatrix::~ComplexMatrix(a10);
  v20 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B60ACD04()
{
  JUMPOUT(0x1B60ACCCCLL);
}

void sub_1B60ACD0C()
{
  JUMPOUT(0x1B60ACCD4);
}

void sub_1B60ACD14()
{
  JUMPOUT(0x1B60ACCDCLL);
}

void sub_1B60ACD1C()
{
  JUMPOUT(0x1B60ACCE4);
}

void sub_1B60ACD24()
{
  JUMPOUT(0x1B60ACCECLL);
}

uint64_t DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::LR2InductanceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 38) = *(_QWORD *)(a2 + 38);
  *(_QWORD *)(a1 + 32) = v4;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 48), (const DspLib::ComplexMatrix *)(a2 + 48));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 144), (const DspLib::ComplexVector *)(a2 + 144));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 224), (const DspLib::ComplexMatrix *)(a2 + 224));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 320), (const DspLib::ComplexVector *)(a2 + 320));
  v5 = *(_OWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = v5;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 424), (const DspLib::ComplexVector *)(a2 + 424));
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::ComplexMatrix *)(a1 + 504), (const DspLib::ComplexMatrix *)(a2 + 504));
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 600), (const DspLib::ComplexVector *)(a2 + 600));
  DspLibBuffer::DspLibBuffer(a1 + 680, a2 + 680);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 776), (const DspLib::ComplexVector *)(a2 + 776));
  v6 = *(_OWORD *)(a2 + 856);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 856) = v6;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a1 + 880), (const DspLib::ComplexVector *)(a2 + 880));
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  v7 = *(_OWORD *)(a2 + 976);
  v8 = *(_OWORD *)(a2 + 992);
  v9 = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1020) = *(_OWORD *)(a2 + 1020);
  *(_OWORD *)(a1 + 992) = v8;
  *(_OWORD *)(a1 + 1008) = v9;
  *(_OWORD *)(a1 + 976) = v7;
  return a1;
}

void sub_1B60ACEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::ComplexVector *a9, DspLib::ComplexMatrix *a10)
{
  uint64_t v10;
  DspLib::ComplexVector *v11;
  void **v12;
  DspLib::ComplexMatrix *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  DspLib::ComplexMatrix *v16;
  DspLib::ComplexVector *v17;
  DspLibBuffer *v18;
  void *v20;

  DspLib::ComplexVector::~ComplexVector(v11);
  DspLibBuffer::~DspLibBuffer(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  DspLib::ComplexMatrix::~ComplexMatrix(v16);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(a9);
  DspLib::ComplexMatrix::~ComplexMatrix(a10);
  v20 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B60ACF28()
{
  JUMPOUT(0x1B60ACEF0);
}

void sub_1B60ACF30()
{
  JUMPOUT(0x1B60ACEF8);
}

void sub_1B60ACF38()
{
  JUMPOUT(0x1B60ACF00);
}

void sub_1B60ACF40()
{
  JUMPOUT(0x1B60ACF08);
}

void sub_1B60ACF48()
{
  JUMPOUT(0x1B60ACF10);
}

uint64_t std::__split_buffer<DspLib::LoudspeakerSystemIDV2::SystemID>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40112;
    DspLib::LoudspeakerSystemIDV2::SystemID::~SystemID((DspLib::LoudspeakerSystemIDV2::SystemID *)(i - 40112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t telemetry::Item::ItemFromEnum(telemetry::Item *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  switch((int)this)
  {
    case 1936738608:
      v2 = 0;
      goto LABEL_19;
    case 1936738609:
      v2 = 0x100000000;
      goto LABEL_19;
    case 1936738610:
      v2 = 0x200000000;
      goto LABEL_19;
    case 1936738611:
      v2 = 0x300000000;
      goto LABEL_19;
    case 1936738612:
      v2 = 0x400000000;
      goto LABEL_19;
    case 1936738613:
      v2 = 0x500000000;
      goto LABEL_19;
    case 1936738614:
      v2 = 0x600000000;
      goto LABEL_19;
    case 1936738615:
      v2 = 0x700000000;
LABEL_19:
      v1 = 1;
      break;
    default:
      v1 = 0;
      v2 = 0;
      switch((int)this)
      {
        case 1936741936:
          return v2 | v1;
        case 1936741937:
          v1 = 0;
          v2 = 0x100000000;
          break;
        case 1936741938:
          v1 = 0;
          v2 = 0x200000000;
          break;
        case 1936741939:
          v1 = 0;
          v2 = 0x300000000;
          break;
        case 1936741940:
          v1 = 0;
          v2 = 0x400000000;
          break;
        case 1936741941:
          v1 = 0;
          v2 = 0x500000000;
          break;
        case 1936741942:
          v1 = 0;
          v2 = 0x600000000;
          break;
        case 1936741943:
          v1 = 0;
          v2 = 0x700000000;
          break;
        default:
          __cxa_rethrow();
      }
      return result;
  }
  return v2 | v1;
}

_QWORD *std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[18],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[18],std::allocator<DspLib::Logger>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B60AD0F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[18],std::allocator<DspLib::Logger>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C16C8;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[18],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B60AD140(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[18],DspLib::Logger*>(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B60AD1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[19],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[19],std::allocator<DspLib::Logger>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B60AD200(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[19],std::allocator<DspLib::Logger>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C16C8;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[19],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B60AD248(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[19],DspLib::Logger*>(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B60AD2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DspLib::FFT::ForwardSTFT::process(uint64_t a1, char *__src, uint64_t a3, DSPSplitComplex *a4)
{
  char *v5;
  uint64_t v7;
  char *v8;
  char *v9;

  v5 = __src;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)a1 != v7)
  {
    __src = *(char **)(a1 + 40);
    v8 = *(char **)(a1 + 48);
    v9 = &__src[4 * v7];
    if (v8 != v9)
    {
      memmove(*(void **)(a1 + 40), &__src[4 * v7], v8 - v9);
      v7 = *(_QWORD *)(a1 + 16);
      __src = *(char **)(a1 + 40);
    }
    if (v7)
    {
      memmove(&__src[4 * (*(_QWORD *)a1 - v7)], v5, 4 * v7);
      __src = *(char **)(a1 + 40);
    }
    a3 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)__src) >> 2;
  }
  DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, (uint64_t)__src, a3, a4);
}

void DspLib::FFT::InverseSTFT::transformAndWOLA(float **this, const DSPSplitComplex *a2)
{
  uint64_t v3;
  const float *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;
  vDSP_Length v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (*this == this[2])
  {
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>((uint64_t)this, (uint64_t)a2, this[5]);
  }
  else
  {
    MEMORY[0x1E0C80A78](this);
    v4 = (const float *)((char *)v12 - v3);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>((uint64_t)this, v5, (float *)((char *)v12 - v3));
    v6 = this[2];
    v7 = this[5];
    v8 = this[6] - v7;
    v9 = (char *)*this - (char *)v6;
    v10 = v8 - (_QWORD)v6;
    if (v9 == -1)
      v11 = v10;
    else
      v11 = v9;
    DspLib::add(v4, v9, &v7[(_QWORD)v6], v11, v7);
    if (v6)
      memmove(&v7[v9], &v4[v9], 4 * (_QWORD)v6);
  }
}

void DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>(uint64_t a1, uint64_t a2, float *a3)
{
  vDSP_Length v5;
  _QWORD *v6;
  uint64_t v7;
  const float *v8;
  DSPSplitComplex *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)a1;
  v6 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v8 = (const float *)((char *)v10 - v7);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v6, v9, (DSPComplex *)((char *)v10 - v7));
  DspLib::multiply(v8, v5, *(const float **)(a1 + 24), *(_QWORD *)(a1 + 32), a3);
}

uint64_t DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(uint64_t a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4, int a5)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::STFTBase(a1, a2, a3, a4);
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  v8 = (_QWORD *)(v7 + 64);
  *(_DWORD *)(v7 + 80) = a5;
  DspLib::clear(*(float **)(v7 + 40), (uint64_t)(*(_QWORD *)(v7 + 48) - *(_QWORD *)(v7 + 40)) >> 2);
  *v8 = 0;
  v8[1] = 0;
  return a1;
}

void sub_1B60AD5B4(_Unwind_Exception *a1)
{
  DspLib::FFT::BufferedForwardSTFT *v1;

  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::BufferedForwardSTFT::reset(float **this)
{
  DspLib::clear(this[5], this[6] - this[5]);
  this[8] = 0;
  this[9] = 0;
}

unint64_t DspLib::FFT::BufferedForwardSTFT::addInput(uint64_t a1, void *__src, unint64_t a3, DSPSplitComplex *a4)
{
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;

  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 16);
  if (v8 == v9)
  {
    v10 = *(char **)(a1 + 40);
    v11 = *(_BYTE **)(a1 + 48);
    v12 = &v10[4 * v8];
    if (v11 != v12)
    {
      memmove(v10, v12, v11 - v12);
      v8 = *(_QWORD *)(a1 + 16);
    }
    *(_QWORD *)(a1 + 64) = 0;
    v9 = v8;
    v8 = 0;
  }
  *(_QWORD *)(a1 + 72) = 0;
  if (v8 >= v9)
    v13 = 0;
  else
    v13 = v8;
  v14 = v9 - v13;
  if (a3 >= v14)
    a3 = v14;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      v15 = *(char **)(a1 + 40);
      v16 = *(_BYTE **)(a1 + 48);
      v17 = &v15[4 * a3];
      if (v16 != v17)
      {
        memmove(v15, v17, v16 - v17);
        v17 = *(char **)(a1 + 48);
      }
      memmove(&v17[-4 * a3], __src, 4 * a3);
      DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2, a4);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = a3;
    }
    else
    {
      memmove((void *)(*(_QWORD *)(a1 + 48) - 4 * v9 + 4 * v8), __src, 4 * a3);
      v18 = *(_QWORD *)(a1 + 64) + a3;
      *(_QWORD *)(a1 + 64) = v18;
      if (v18 == *(_QWORD *)(a1 + 16))
      {
        DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>((uint64_t *)a1, *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2, a4);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
      }
    }
  }
  return a3;
}

__n128 DspLib::FFT::BufferedForwardSTFT::copyStatesFrom(__n128 *this, __n128 *a2)
{
  __n128 result;

  if (this != a2)
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(&this[2].n128_i8[8], (char *)a2[2].n128_u64[1], a2[3].n128_i64[0], (uint64_t)(a2[3].n128_u64[0] - a2[2].n128_u64[1]) >> 2);
  result = a2[4];
  this[4] = result;
  return result;
}

uint64_t DspLib::FFT::BufferedInverseSTFT::BufferedInverseSTFT(uint64_t a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4, int a5)
{
  uint64_t v7;

  v7 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::STFTBase(a1, a2, a3, a4);
  *(_QWORD *)(v7 + 64) = 0;
  *(_DWORD *)(v7 + 72) = a5;
  DspLib::clear(*(float **)(v7 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(v7 + 40)) >> 2);
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1B60AD7B4(_Unwind_Exception *a1)
{
  DspLib::FFT::InverseSTFT *v1;

  DspLib::FFT::InverseSTFT::~InverseSTFT(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::InverseSTFT::~InverseSTFT(DspLib::FFT::InverseSTFT *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)this);
}

void DspLib::FFT::BufferedInverseSTFT::doTransformIfReady(DspLib::FFT::BufferedInverseSTFT *this, const DSPSplitComplex *a2)
{
  void *v3;
  uint64_t v4;

  if (*((_QWORD *)this + 8) == *((_QWORD *)this + 2) || *((_DWORD *)this + 18) == 1)
  {
    v3 = (void *)*((_QWORD *)this + 5);
    DspLib::FFT::InverseSTFT::transformAndWOLA((float **)this, a2);
    v4 = *((_QWORD *)this + 2);
    if (v4)
      memmove(v3, *((const void **)this + 5), 4 * v4);
    *((_QWORD *)this + 8) = 0;
  }
}

char *DspLib::FFT::BufferedInverseSTFT::copyStatesFrom(char *result, uint64_t a2)
{
  char *v3;

  v3 = result;
  if (result != (char *)a2)
    result = std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(result + 40, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(a2 + 64);
  return result;
}

uint64_t DspLib::FFT::PartialFrameForwardSTFT::PartialFrameForwardSTFT(uint64_t a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  uint64_t v5;

  v5 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::STFTBase(a1, a2, a3, a4);
  *(_QWORD *)(v5 + 64) = 0;
  DspLib::clear(*(float **)(v5 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(v5 + 40)) >> 2);
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1B60AD8DC(_Unwind_Exception *a1)
{
  DspLib::FFT::BufferedForwardSTFT *v1;

  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::PartialFrameForwardSTFT::reset(float **this)
{
  DspLib::clear(this[5], this[6] - this[5]);
  this[8] = 0;
}

unint64_t DspLib::FFT::PartialFrameForwardSTFT::process(uint64_t *a1, char *__src, uint64_t a3, DSPSplitComplex *a4)
{
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  vDSP_Length v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  vDSP_Length v21;
  unint64_t v22;
  _QWORD v24[2];
  DSPSplitComplex *v25;
  uint64_t v26;

  v5 = a3;
  v7 = a1;
  v26 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[2];
  v10 = a1[8];
  if (a3 == v9)
  {
    if (!v10)
    {
      DspLib::FFT::ForwardSTFT::process((uint64_t)a1, __src, a3, a4);
      return v7[2];
    }
  }
  else if (!v10)
  {
    a1 = (uint64_t *)a1[5];
    v11 = (_BYTE *)v7[6];
    v12 = (char *)a1 + 4 * v9;
    if (v11 == v12)
    {
      v10 = 0;
    }
    else
    {
      a1 = (uint64_t *)memmove(a1, v12, v11 - v12);
      v9 = v7[2];
      v10 = v7[8];
    }
  }
  if (v9 - v10 < v5)
    v5 = v9 - v10;
  if (v5)
  {
    a1 = (uint64_t *)memmove((void *)(v7[5] + 4 * (v8 - v9 + v10)), __src, 4 * v5);
    v9 = v7[2];
    v10 = v7[8];
  }
  v13 = v9 - v10 - v5;
  if (v10)
  {
    v24[1] = v24;
    v25 = a4;
    MEMORY[0x1E0C80A78](a1);
    v15 = (char *)v24 - v14;
    DspLib::clear((float *)((char *)v24 - v14), v8 - v7[2] + v7[8]);
    v16 = v8 - v7[2] + v7[8];
    if (v5)
      memmove(&v15[4 * v16], __src, 4 * v5);
    if (v13 == -1)
      v17 = v8 - (v16 + v5);
    else
      v17 = v13;
    DspLib::clear((float *)&v15[4 * v16 + 4 * v5], v17);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>(v7, (uint64_t)v15, v8, v25);
  }
  else
  {
    v18 = v7[5];
    v19 = (v7[6] - v18) >> 2;
    v20 = v5 + v8 - v9;
    if (v13 == -1)
      v21 = v19 - v20;
    else
      v21 = v13;
    DspLib::clear((float *)(v18 + 4 * v20), v21);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::windowAndTransform<(DspLib::FFT::Direction)1>(v7, v18, v19, a4);
  }
  v22 = v7[8] + v5;
  if (v22 >= v7[2])
    v22 = 0;
  v7[8] = v22;
  return v5;
}

uint64_t DspLib::FFT::PartialFrameInverseSTFT::PartialFrameInverseSTFT(uint64_t a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  uint64_t v5;

  v5 = DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::STFTBase(a1, a2, a3, a4);
  *(_QWORD *)(v5 + 64) = 0;
  DspLib::clear(*(float **)(v5 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(v5 + 40)) >> 2);
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1B60ADB98(_Unwind_Exception *a1)
{
  DspLib::FFT::InverseSTFT *v1;

  DspLib::FFT::InverseSTFT::~InverseSTFT(v1);
  _Unwind_Resume(a1);
}

unint64_t DspLib::FFT::PartialFrameInverseSTFT::process(float **this, const DSPSplitComplex *a2, void *a3, unint64_t a4)
{
  uint64_t v7;
  const float *v8;
  uint64_t v9;
  float *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (this[8] >= this[2])
  {
    DspLib::FFT::InverseSTFT::transformAndWOLA(this, a2);
    v10 = 0;
    this[8] = 0;
  }
  else
  {
    MEMORY[0x1E0C80A78](this);
    v8 = (const float *)((char *)v12 - v7);
    DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::transformAndWindow<(DspLib::FFT::Direction)-1>((uint64_t)this, v9, (float *)((char *)v12 - v7));
    DspLib::add(this[5], this[6] - this[5], v8);
    v10 = this[8];
  }
  if (a4 >= (char *)this[2] - (char *)v10)
    a4 = (char *)this[2] - (char *)v10;
  if (a4)
  {
    memmove(a3, &this[5][(_QWORD)v10], 4 * a4);
    v10 = this[8];
  }
  this[8] = (float *)((char *)v10 + a4);
  return a4;
}

double DspLib::FFT::Filterbank::Filterbank(DspLib::FFT::Filterbank *this, char a2)
{
  uint64_t v3;
  double result;

  v3 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib3FFT10ParametersL8kDefaultE__0, 0xAuLL, (uint64_t)&_ZGRN6DspLib3FFT10ParametersL8kMinimumE_, 10, (uint64_t)&_ZGRN6DspLib3FFT10ParametersL8kMaximumE_, 10);
  *(_QWORD *)v3 = &off_1E69C3430;
  *(_BYTE *)(v3 + 216) = a2;
  result = 0.0;
  *(_OWORD *)(v3 + 236) = 0u;
  *(_OWORD *)(v3 + 252) = 0u;
  *(_OWORD *)(v3 + 220) = 0u;
  *(_OWORD *)(v3 + 268) = 0u;
  *(_OWORD *)(v3 + 284) = 0u;
  *(_OWORD *)(v3 + 300) = 0u;
  *(_OWORD *)(v3 + 316) = 0u;
  *(_OWORD *)(v3 + 332) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  return result;
}

void DspLib::FFT::Filterbank::~Filterbank(DspLib::FFT::Filterbank *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69C3430;
  DspLib::FFT::Filterbank::uninitialize(this);
  v5 = (void **)((char *)this + 336);
  std::vector<DspLib::FFT::BufferedInverseSTFT>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 312);
  std::vector<DspLib::FFT::BufferedForwardSTFT>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 288);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  if (v3)
  {
    *((_QWORD *)this + 31) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

{
  DspLib::FFT::Filterbank::~Filterbank(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::FFT::Filterbank::initialize(DspLib::FFT::Filterbank *this, int a2, double a3)
{
  uint64_t v4;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::FFT::Filterbank *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::FFT::Filterbank *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

void DspLib::FFT::Filterbank::uninitialize(DspLib::FFT::Filterbank *this)
{
  uint64_t v2;
  uint64_t v3;
  DspLib::FFT::BufferedForwardSTFT *i;
  DspLib::FFT::BufferedForwardSTFT *v5;
  DspLib::FFT::InverseSTFT *j;
  DspLib::FFT::InverseSTFT *v7;

  *((_BYTE *)this + 8) = 0;
  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 36);
  while (v2 != v3)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v2 - 80));
  *((_QWORD *)this + 37) = v3;
  v5 = (DspLib::FFT::BufferedForwardSTFT *)*((_QWORD *)this + 39);
  for (i = (DspLib::FFT::BufferedForwardSTFT *)*((_QWORD *)this + 40);
        i != v5;
        DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(i))
  {
    i = (DspLib::FFT::BufferedForwardSTFT *)((char *)i - 88);
  }
  *((_QWORD *)this + 40) = v5;
  v7 = (DspLib::FFT::InverseSTFT *)*((_QWORD *)this + 42);
  for (j = (DspLib::FFT::InverseSTFT *)*((_QWORD *)this + 43); j != v7; DspLib::FFT::InverseSTFT::~InverseSTFT(j))
    j = (DspLib::FFT::InverseSTFT *)((char *)j - 80);
  *((_QWORD *)this + 43) = v7;
  *((_QWORD *)this + 31) = *((_QWORD *)this + 30);
  *((_QWORD *)this + 34) = *((_QWORD *)this + 33);
  *((_QWORD *)this + 28) = 0;
}

void DspLib::FFT::Filterbank::reset(DspLib::FFT::Filterbank *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 36);
  v3 = *((_QWORD *)this + 37);
  while (v2 != v3)
  {
    DspLib::ComplexVector::operator=(v2, 0.0);
    v2 += 80;
  }
  v4 = *((_QWORD *)this + 39);
  v5 = *((_QWORD *)this + 40);
  while (v4 != v5)
  {
    DspLib::clear(*(float **)(v4 + 40), (uint64_t)(*(_QWORD *)(v4 + 48) - *(_QWORD *)(v4 + 40)) >> 2);
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    v4 += 88;
  }
  v7 = *((_QWORD *)this + 42);
  v6 = *((_QWORD *)this + 43);
  while (v7 != v6)
  {
    DspLib::clear(*(float **)(v7 + 40), (uint64_t)(*(_QWORD *)(v7 + 48) - *(_QWORD *)(v7 + 40)) >> 2);
    *(_QWORD *)(v7 + 64) = 0;
    v7 += 80;
  }
}

void DspLib::FFT::Filterbank::copyStatesFrom(DspLib::FFT::Filterbank *this, const DspLib::FFT::Filterbank *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (this != a2)
    std::vector<DspLib::ComplexVector>::__assign_with_size[abi:ne180100]<DspLib::ComplexVector*,DspLib::ComplexVector*>((uint64_t)this + 288, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 4));
  v4 = *((_QWORD *)this + 39);
  if (*((_QWORD *)this + 40) != v4)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      DspLib::FFT::BufferedForwardSTFT::copyStatesFrom((__n128 *)(v4 + 88 * v5), (__n128 *)(*((_QWORD *)a2 + 39) + 88 * v5));
      v5 = v6;
      v4 = *((_QWORD *)this + 39);
      v7 = 0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 40) - v4) >> 3) > (unint64_t)v6++;
    }
    while (v7);
  }
  v8 = *((_QWORD *)this + 42);
  if (*((_QWORD *)this + 43) != v8)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      DspLib::FFT::BufferedInverseSTFT::copyStatesFrom((char *)(v8 + 80 * v9), *((_QWORD *)a2 + 42) + 80 * v9);
      v9 = v10;
      v8 = *((_QWORD *)this + 42);
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 43) - v8) >> 4) > v10++;
    }
    while (v7);
  }
}

void DspLib::FFT::Filterbank::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  float v4;
  float *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  DspLib::FFT::BufferedForwardSTFT *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int i;
  uint64_t *v14;
  vDSP_Length *v15;
  vDSP_Length *v16;
  int *v17;
  unint64_t v18;
  DspLib::FFT::InverseSTFT *j;
  unsigned int v20;
  uint64_t *v21;
  vDSP_Length *v22;
  vDSP_Length *v23;
  int *v24;
  unsigned int v25;
  DspLib::ComplexVector *v26;
  unint64_t v27;
  float *v28;
  float *v29;
  unint64_t v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  unint64_t v38;

  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (!*(_BYTE *)(a1 + 8))
    return;
  v6 = *(float **)(a1 + 48);
  v7 = 1 << vcvtas_u32_f32(*v6);
  v8 = vcvtas_u32_f32((float)((float)(v6[1] / -100.0) + 1.0) * (float)v7);
  v9 = vcvtas_u32_f32(fmaxf(v6[3], 0.0));
  if (v7 != *(_QWORD *)(a1 + 224) || *(_QWORD *)(a1 + 232) != v8 || *(_DWORD *)(a1 + 220) != v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    *(_DWORD *)(a1 + 220) = v9;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 224) = v7;
    *(_QWORD *)(a1 + 232) = v8;
    std::vector<float>::resize(a1 + 240, v7);
    v10 = *(DspLib::FFT::BufferedForwardSTFT **)(a1 + 320);
    v11 = *(_QWORD *)(a1 + 312);
    while (v10 != (DspLib::FFT::BufferedForwardSTFT *)v11)
    {
      v10 = (DspLib::FFT::BufferedForwardSTFT *)((char *)v10 - 88);
      DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v10);
    }
    *(_QWORD *)(a1 + 320) = v11;
    v12 = *(_DWORD *)(a1 + 12);
    if (v12)
    {
      for (i = 0; i < v12; ++i)
      {
        v14 = (uint64_t *)(a1 + 312);
        v15 = (vDSP_Length *)(a1 + 240);
        v16 = (vDSP_Length *)(a1 + 232);
        v17 = (int *)(a1 + 220);
        if (v11 >= *(_QWORD *)(a1 + 328))
        {
          v11 = std::vector<DspLib::FFT::BufferedForwardSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(v14, v15, v16, v17);
        }
        else
        {
          std::vector<DspLib::FFT::BufferedForwardSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>((uint64_t)v14, v15, v16, v17);
          v11 += 88;
        }
        *(_QWORD *)(a1 + 320) = v11;
        v12 = *(_DWORD *)(a1 + 12);
      }
    }
    if (!*(_BYTE *)(a1 + 216))
      goto LABEL_24;
    std::vector<float>::resize(a1 + 264, *(_QWORD *)(a1 + 224));
    v18 = *(_QWORD *)(a1 + 336);
    for (j = *(DspLib::FFT::InverseSTFT **)(a1 + 344);
          j != (DspLib::FFT::InverseSTFT *)v18;
          DspLib::FFT::InverseSTFT::~InverseSTFT(j))
    {
      j = (DspLib::FFT::InverseSTFT *)((char *)j - 80);
    }
    *(_QWORD *)(a1 + 344) = v18;
    if (*(_DWORD *)(a1 + 12))
    {
      v20 = 0;
      do
      {
        v21 = (uint64_t *)(a1 + 336);
        v22 = (vDSP_Length *)(a1 + 264);
        v23 = (vDSP_Length *)(a1 + 232);
        v24 = (int *)(a1 + 220);
        if (v18 >= *(_QWORD *)(a1 + 352))
        {
          v18 = std::vector<DspLib::FFT::BufferedInverseSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(v21, v22, v23, v24);
        }
        else
        {
          std::vector<DspLib::FFT::BufferedInverseSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>((uint64_t)v21, v22, v23, v24);
          v18 += 80;
        }
        *(_QWORD *)(a1 + 344) = v18;
        ++v20;
        v12 = *(_DWORD *)(a1 + 12);
      }
      while (v20 < v12);
LABEL_24:
      if (v12)
      {
        v25 = 0;
        v26 = *(DspLib::ComplexVector **)(a1 + 296);
        do
        {
          v27 = *(_QWORD *)(a1 + 224) >> 1;
          v38 = v27;
          if ((unint64_t)v26 >= *(_QWORD *)(a1 + 304))
          {
            v26 = (DspLib::ComplexVector *)std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long>((uint64_t *)(a1 + 288), &v38);
          }
          else
          {
            DspLib::ComplexVector::ComplexVector(v26, v27, 0);
            v26 = (DspLib::ComplexVector *)((char *)v26 + 80);
            *(_QWORD *)(a1 + 296) = v26;
          }
          *(_QWORD *)(a1 + 296) = v26;
          ++v25;
        }
        while (v25 < *(_DWORD *)(a1 + 12));
      }
    }
  }
  v28 = *(float **)(a1 + 240);
  v29 = *(float **)(a1 + 248);
  v30 = v29 - v28;
  switch(vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 8)))
  {
    case 0u:
      v31 = 0.5 / (float)v30;
      goto LABEL_37;
    case 1u:
      v32 = *(_QWORD *)(a1 + 232);
      DspLib::makeSymmetricHannWindow(*(_QWORD *)(a1 + 240), v29 - v28);
      if (v29 == v28)
      {
        v34 = 0.0;
      }
      else
      {
        v33 = 0;
        v34 = 0.0;
        do
          v34 = v34 + v28[v33++];
        while (v30 > v33);
      }
      v37 = 0.5 / (float)v30;
      DspLib::multiply(v28, v29 - v28, v37 * (float)((float)v30 / v34));
      v4 = (float)((float)v32 / (float)((float)(v30 + 1) * 1.5)) / v37;
      break;
    case 2u:
      v31 = 0.5;
LABEL_37:
      DspLib::fill(*(float **)(a1 + 240), v29 - v28, v31);
      goto LABEL_39;
    case 3u:
      DspLib::makePeriodicHannWindow(*(_DWORD **)(a1 + 240), v29 - v28);
      DspLib::sqrt(v28, v29 - v28);
LABEL_39:
      v4 = 1.0;
      break;
    case 4u:
      DspLib::makeSymmetricHannWindow(*(_QWORD *)(a1 + 240), v29 - v28);
      if (v29 == v28)
      {
        v36 = 0.0;
      }
      else
      {
        v35 = 0;
        v36 = 0.0;
        do
        {
          v36 = v36 + (float)(v28[v35] * v28[v35]);
          ++v35;
        }
        while (v30 > v35);
      }
      v4 = 1.0;
      DspLib::multiply(v28, v29 - v28, 1.0 / sqrtf(v36));
      break;
    default:
      break;
  }
  if (*(_BYTE *)(a1 + 216))
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 264), *(char **)(a1 + 240), *(_QWORD *)(a1 + 248), (uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 2);
    DspLib::multiply(*(float **)(a1 + 264), (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 2, v4);
    DspLib::reverse(*(float **)(a1 + 264), (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 2);
  }
}

void sub_1B60AE4A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 296) = v2;
  _Unwind_Resume(a1);
}

unint64_t DspLib::FFT::Filterbank::audioInput(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  char *v8;
  unsigned __int128 v9;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      do
      {
        v9 = 0uLL;
        v9 = *(_OWORD *)(*(_QWORD *)(a1 + 288) + v5);
        result = DspLib::FFT::BufferedForwardSTFT::addInput(*(_QWORD *)(a1 + 312) + v4, *(void **)(*a2 + 8 * v6++), a2[2], (DSPSplitComplex *)&v9);
        v5 += 80;
        v4 += 88;
      }
      while (v6 < *(unsigned int *)(a1 + 12));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v8, 431);
    result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

unint64_t DspLib::FFT::Filterbank::audioInputOutput(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  DSPSplitComplex v15;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      do
      {
        v15.realp = 0;
        v15.imagp = 0;
        v15 = *(DSPSplitComplex *)(*(_QWORD *)(a1 + 288) + v7);
        if (*(_BYTE *)(a1 + 216))
          DspLib::FFT::BufferedInverseSTFT::doTransformIfReady((DspLib::FFT::BufferedInverseSTFT *)(*(_QWORD *)(a1 + 336) + v7), &v15);
        v9 = DspLib::FFT::BufferedForwardSTFT::addInput(*(_QWORD *)(a1 + 312) + v6, *(void **)(*a2 + 8 * v8), a2[2], &v15);
        if (*(_BYTE *)(a1 + 216))
        {
          v10 = (_QWORD *)(*(_QWORD *)(a1 + 336) + v7);
          v11 = v10[8];
          if (a3[2] >= (unint64_t)(v10[2] - v11))
            v12 = v10[2] - v11;
          else
            v12 = a3[2];
          if (v12)
          {
            memmove(*(void **)(*a3 + 8 * v8), (const void *)(v10[5] + 4 * v11), 4 * v12);
            v10[8] += v12;
          }
        }
        ++v8;
        v7 += 80;
        v6 += 88;
      }
      while (v8 < *(unsigned int *)(a1 + 12));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v14, 449);
    v9 = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return v9;
}

_QWORD *DspLib::FFT::Filterbank::processBlock(DspLib::FFT::Filterbank *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unsigned int cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float **v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float **v15;
  size_t v16;
  unsigned int i;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v24[3];
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v7 = DspLibBuffer::numChannels(a2);
  MEMORY[0x1E0C80A78](v7);
  v10 = (float **)((char *)&v24[-1] - v9);
  if (v8 >= 0x200)
    v11 = 512;
  else
    v11 = v8;
  bzero((char *)&v24[-1] - v9, v11);
  DspLibBuffer::channelsPtr((float *)a2, v10);
  v12 = DspLibBuffer::numChannels(a3);
  MEMORY[0x1E0C80A78](v12);
  v15 = (float **)((char *)&v24[-1] - v14);
  if (v13 >= 0x200)
    v16 = 512;
  else
    v16 = v13;
  bzero((char *)&v24[-1] - v14, v16);
  DspLibBuffer::channelsPtr((float *)a3, v15);
  if (cycle_count)
  {
    for (i = 0; i < cycle_count; i += v20)
    {
      v18 = DspLibBuffer::numChannels(a2);
      v25[0] = v10;
      v25[1] = v18;
      v25[2] = cycle_count - i;
      v19 = DspLibBuffer::numChannels(a3);
      v24[0] = v15;
      v24[1] = v19;
      v24[2] = cycle_count - i;
      v20 = DspLib::FFT::Filterbank::audioInputOutput((uint64_t)this, v25, v24);
      if (DspLibBuffer::numChannels(a2))
      {
        v21 = 0;
        do
        {
          v10[v21] += v20;
          v15[v21++] += v20;
        }
        while (v21 < DspLibBuffer::numChannels(a2));
      }
    }
  }
  return DspLibBuffer::setNumFrames(a3, cycle_count);
}

float DspLib::FFT::conjugateMultiply(DSPSplitComplex *__C, DSPSplitComplex *__B, const DspLib::ComplexSpan *a3)
{
  float v5;
  float v6;
  float *imagp;
  float *v8;
  float result;

  v5 = *__C->realp;
  v6 = *__C->imagp;
  vDSP_zvcmul(__C, 1, __B, 1, __C, 1, (vDSP_Length)__C[1].realp);
  imagp = __B->imagp;
  v8 = __C->imagp;
  *__C->realp = v5 * *__B->realp;
  result = v6 * *imagp;
  *v8 = result;
  return result;
}

float DspLib::FFT::divide(DSPSplitComplex *this, DSPSplitComplex *a2, DspLib::ComplexSpan *a3)
{
  float v5;
  float v6;
  float *imagp;
  float *v8;
  float result;

  v5 = *this->realp;
  v6 = *this->imagp;
  DspLib::operator/=(this, a2);
  imagp = a2->imagp;
  v8 = this->imagp;
  *this->realp = v5 / *a2->realp;
  result = v6 / *imagp;
  *v8 = result;
  return result;
}

void DspLib::FFT::coherence(uint64_t a1, uint64_t a2, const DSPSplitComplex *a3, float *a4, vDSP_Length a5)
{
  float *imagp;
  float *v11;
  float *v12;
  char *v13;

  if ((float *)a5 < (float *)((char *)a3[1].realp + 1))
  {
    v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v13, 541);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    vDSP_zcoher(*(const float **)a1, *(const float **)a2, a3, a4, a5 - 1);
    imagp = a3->imagp;
    v11 = *(float **)(a1 + 8);
    v12 = *(float **)(a2 + 8);
    *a4 = (float)(*a3->realp * *a3->realp) / (float)(**(float **)a1 * **(float **)a2);
    a4[(uint64_t)a3[1].realp] = (float)(*imagp * *imagp) / (float)(*v11 * *v12);
    DspLib::clip(a4, a5, 0.0, 1.0);
  }
}

float DspLib::FFT::powerSpectrum(DSPSplitComplex *this, DSPSplitComplex *a2, DSPSplitComplex *__C, DspLib::ComplexSpan *a4)
{
  const DspLib::ComplexSpan *v6;

  DspLib::ComplexSpan::operator=(__C, a2);
  return DspLib::FFT::conjugateMultiply(__C, this, v6);
}

float DspLib::FFT::amplitude(uint64_t a1, float *__C, vDSP_Length a3)
{
  vDSP_Length v3;
  float *v6;
  vDSP_Length v7;
  float result;
  DSPSplitComplex __A;
  vDSP_Length v10;

  v3 = a3;
  v6 = *(float **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (a3 > v7)
  {
    __C[v7] = fabsf(*v6);
    v3 = v7;
  }
  __A.realp = *(float **)a1;
  __A.imagp = v6;
  v10 = v3;
  vDSP_zvabs(&__A, 1, __C, 1, v3);
  result = fabsf(**(float **)a1);
  *__C = result;
  return result;
}

void DspLib::FFT::phase(uint64_t a1, float *__C, vDSP_Length a3)
{
  vDSP_Length v3;
  float *v6;
  vDSP_Length v7;
  float v8;
  float v9;
  DSPSplitComplex __A;
  vDSP_Length v11;

  v3 = a3;
  v6 = *(float **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (a3 > v7)
  {
    v8 = 3.1416;
    if (*v6 >= 0.0)
      v8 = 0.0;
    __C[v7] = v8;
    v3 = v7;
  }
  __A.realp = *(float **)a1;
  __A.imagp = v6;
  v11 = v3;
  vDSP_zvphas(&__A, 1, __C, 1, v3);
  v9 = 3.1416;
  if (**(float **)a1 >= 0.0)
    v9 = 0.0;
  *__C = v9;
}

void DspLib::FFT::multiply(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  float *v5;
  vDSP_Length v6;
  const float *v7;
  char *v8;

  v3 = *(_QWORD *)(a1 + 16) + 1;
  if (a3 > v3)
  {
    v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v8, 601);
    ++DspLibDebug::mAssertCounter;
  }
  else if (a3)
  {
    v5 = *(float **)a1;
    **(float **)a1 = *(float *)a2 * **(float **)a1;
    v6 = a3 - 1;
    if (a3 == v3)
    {
      **(float **)(a1 + 8) = *(float *)(a2 + 4 * v6) * **(float **)(a1 + 8);
      v6 = a3 - 2;
    }
    v7 = (const float *)(a2 + 4);
    DspLib::multiply(v5 + 1, v6, (const float *)(a2 + 4));
    DspLib::multiply((float *)(*(_QWORD *)(a1 + 8) + 4), v6, v7);
  }
}

void DspLib::FFT::addDelay(DspLib::FFT *this, DspLib::ComplexSpan *a2, float a3)
{
  unint64_t v3;
  float v4;
  float *v5;
  float *v6;
  unint64_t i;
  __float2 v8;
  float v9;
  float *v10;
  float v11;
  float v12;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = (float)(a3 * 3.1416) / (float)v3;
    v5 = *(float **)this;
    v6 = (float *)*((_QWORD *)this + 1);
    for (i = 1; i <= v3; i = (i + 1))
    {
      v8 = __sincosf_stret(v4 * (float)i);
      v9 = 0.0;
      if (v3 == i)
      {
        v10 = v6;
      }
      else
      {
        v10 = v5;
        if ((_DWORD)i)
        {
          v9 = v6[i];
          v10 = &v5[i];
        }
      }
      v11 = *v10;
      v12 = (float)(v8.__sinval * v9) + (float)(v8.__cosval * *v10);
      if ((_DWORD)i)
      {
        if (v3 == i)
        {
          *v6 = v12;
        }
        else if (v3 > i)
        {
          v5[i] = v12;
          v6[i] = (float)(v11 * (float)-v8.__sinval) + (float)(v8.__cosval * v9);
        }
      }
      else
      {
        *v5 = v12;
      }
    }
  }
}

float DspLib::FFT::impulseResponsePeakInMilliseconds(DspLib::FFT *this, const DspLib::ComplexSpan *a2, float a3, float *a4)
{
  vDSP_Length v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  float v12;
  DSPSplitComplex __Z;
  void *__p;
  _BYTE *v16;
  vDSP_Length v17[2];

  v7 = 2 * *((_QWORD *)this + 2);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v17, v7);
  std::vector<float>::vector(&__p, v7);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__Z, *((_QWORD *)this + 2), (const DSPSplitComplex *)this);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v17, &__Z, (DSPComplex *)__p);
  DspLib::maxmgvi((const float *)__p, (v16 - (_BYTE *)__p) >> 2);
  v9 = v8;
  v10 = *((_QWORD *)this + 2);
  if (a2)
    *(_DWORD *)a2 = *((_DWORD *)__p + v8);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__Z);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v9 <= v10)
    v11 = 0;
  else
    v11 = v7;
  v12 = (float)((float)((int)v9 - v11) * 1000.0) / a3;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v17);
  return v12;
}

void sub_1B60AEE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(v21 - 64);
  _Unwind_Resume(a1);
}

void DspLib::FFT::interpolate(DspLib *a1, float a2, float a3, float a4, float a5, float a6)
{
  float v11;
  DspLib *v12;
  float v13;
  DspLib *v14;
  float v15;
  float v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float v20;

  if ((int)a1 >= 1)
  {
    v11 = DspLib::power2dBSafe(a1, (float)(a3 * a3) + (float)(a2 * a2), 1.0e-24);
    v13 = DspLib::power2dBSafe(v12, (float)(a5 * a5) + (float)(a4 * a4), 1.0e-24);
    DspLib::dB2Amp(v14, v11 + (float)(a6 * (float)(v13 - v11)));
    v15 = atan2f(a3, a2);
    v16 = atan2f(a5, a4);
    *(float *)v17.i32 = v16 - v15;
    v18.i32[0] = 1086918619;
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    LODWORD(v20) = vbslq_s8(v19, v18, v17).u32[0];
    if (vabds_f32(v16, v15) <= 3.1416)
      v20 = 0.0;
    __sincosf_stret(v15 + (float)(a6 * (float)((float)(v16 - v20) - v15)));
  }
}

void DspLib::FFT::resample(DSPSplitComplex *a1, DspLib *a2, float a3, float a4)
{
  unint64_t realp;
  float v9;
  const DSPComplex *v10;
  float *v11;
  unsigned int v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  __float2 v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  float *imagp;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  DspLib::ComplexSpan *v37;
  __float2 v38;
  DSPSplitComplex *p_imagp;
  unint64_t v40;
  DSPSplitComplex __A;
  float *v42;

  realp = (unint64_t)a1[1].realp;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__A, realp, 0);
  v9 = 0.0;
  DspLib::ComplexVector::operator=(&__A, 0.0);
  v11 = 0;
  v12 = 0;
  v13 = (float)(a3 / (float)realp) * 0.5;
  v14 = (float)(a4 / (float)realp) * 0.5;
  v40 = 0;
  v15 = (unint64_t)a1[1].realp;
  v16 = 0.0;
  do
  {
    v17 = (float)(v14 * (float)v12) / v13;
    v18 = (unint64_t)v17;
    v19 = (unint64_t)v17 + 1;
    if (v19 > v15)
    {
      if ((int)a2 < 1)
      {
        v40 = 0;
        v23 = 0.0;
        v22 = 0.0;
        if (!v12)
          goto LABEL_5;
      }
      else
      {
        v9 = v16 + v9;
        v20 = fabsf(*a1->imagp);
        v21 = __sincosf_stret(v9);
        v22 = v21.__cosval * v20;
        v23 = v21.__sinval * v20;
        v40 = __PAIR64__(LODWORD(v23), LODWORD(v22));
        if (!v12)
          goto LABEL_5;
      }
      goto LABEL_20;
    }
    v27 = 0.0;
    if (v15 >= v18)
    {
      if (v15 == v18)
      {
        v28 = *a1->imagp;
      }
      else
      {
        imagp = a1->realp;
        if (!v18)
        {
          v28 = *imagp;
          if (v15 != v19)
          {
LABEL_17:
            imagp += v19;
            v30 = a1->imagp[v19];
            goto LABEL_19;
          }
LABEL_15:
          imagp = a1->imagp;
          goto LABEL_18;
        }
        v28 = imagp[v18];
        v27 = a1->imagp[v18];
      }
    }
    else
    {
      v28 = 0.0;
    }
    if (v15 == v19)
      goto LABEL_15;
    imagp = a1->realp;
    if (v18 != -1)
      goto LABEL_17;
LABEL_18:
    v30 = 0.0;
LABEL_19:
    DspLib::FFT::interpolate(a2, v28, v27, *imagp, v30, v17 - (float)v18);
    v22 = v31;
    v23 = v32;
    v40 = __PAIR64__(LODWORD(v32), LODWORD(v31));
    v33 = atan2f(v32, v31);
    v16 = v33 - v9;
    v9 = v33;
    if (!v12)
    {
LABEL_5:
      v24 = DspLib::abs((DspLib *)&v40, v10);
      v25 = v24 * DspLib::sign((DspLib *)1, *a1->realp);
      v26 = __A.realp;
LABEL_23:
      *v26 = v25;
      goto LABEL_30;
    }
LABEL_20:
    if (a1[1].realp == v11)
    {
      v34 = DspLib::abs((DspLib *)&v40, v10);
      v25 = v34 * DspLib::sign((DspLib *)1, *a1->imagp);
      if (v42 == v11)
      {
        v26 = __A.imagp;
        goto LABEL_23;
      }
      if (v42 > v11)
      {
        __A.realp[(_QWORD)v11] = v25;
        __A.imagp[(_QWORD)v11] = 0.0;
      }
    }
    else if (v42 == v11)
    {
      *__A.imagp = v22;
    }
    else if (v42 > v11)
    {
      __A.realp[(_QWORD)v11] = v22;
      __A.imagp[(_QWORD)v11] = v23;
    }
LABEL_30:
    v15 = (unint64_t)a1[1].realp;
    v11 = (float *)++v12;
  }
  while (v15 >= v12);
  if ((_DWORD)a2 == 2)
  {
    v35 = atan2f(*((float *)&v40 + 1), *(float *)&v40);
    v36 = (float)(v35 / 3.1416) - floorf(v35 / 3.1416);
    DspLib::FFT::addDelay((DspLib::FFT *)&__A, v37, v36);
    v38 = __sincosf_stret(v36 * 3.1416);
    if (v42)
      p_imagp = (DSPSplitComplex *)&__A.imagp;
    else
      p_imagp = &__A;
    *p_imagp->realp = (float)(*((float *)&v40 + 1) * v38.__sinval) + (float)(*(float *)&v40 * v38.__cosval);
  }
  DspLib::ComplexSpan::operator=(a1, &__A);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__A);
}

void sub_1B60AF2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)va);
  _Unwind_Resume(a1);
}

unint64_t DspLib::FFT::resampleFIRfilterSize(DspLib::FFT *this, float a2, float a3)
{
  return (unint64_t)(float)((float)((float)((float)(unint64_t)this * a3) / a2) + 1.0);
}

vDSP_Length DspLib::FFT::resampleFIRfilter(const void *a1, unint64_t a2, float *a3, float a4, float a5, uint64_t a6, DspLib *a7)
{
  float v13;
  vDSP_Length v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  vDSP_Length v20[2];
  void *__p[3];
  vDSP_Length v22[2];
  DSPSplitComplex __Z;
  DSPComplex *v24;
  DSPComplex *v25;

  v13 = (float)((float)a2 * a5) / a4;
  v14 = (unint64_t)(float)(v13 + 1.0);
  if (a2 <= v14)
    v15 = (unint64_t)(float)(v13 + 1.0);
  else
    v15 = a2;
  v16 = log10f((float)v15);
  if (a2)
  {
    if (v14)
    {
      v17 = vcvtas_u32_f32(v16 / 0.30103) + 3;
      if (v17)
      {
        v18 = (1 << v17);
        std::vector<float>::vector(&v24, v18);
        DspLib::clear((float *)v24, ((char *)v25 - (char *)v24) >> 2);
        memmove(v24, a1, 4 * a2);
        DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__Z, v18 >> 1, 0);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v22, v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v22, v24, ((char *)v25 - (char *)v24) >> 2, &__Z);
        DspLib::FFT::resample(&__Z, a7, a4, a5);
        std::vector<float>::vector(__p, v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v20, v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v20, &__Z, (DSPComplex *)__p[0]);
        DspLib::multiply((const float *)__p[0], v14, a3, 0.5 / (float)v18);
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v20);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)v22);
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__Z);
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
      }
    }
  }
  return v14;
}

void sub_1B60AF49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;

  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)&a14);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a16);
  v18 = *(void **)(v16 - 88);
  if (v18)
  {
    *(_QWORD *)(v16 - 80) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void DspLib::FFT::frequencyBinIndex(DspLib::FFT *this@<X0>, float a2@<S0>, float a3@<S1>, double a4@<D2>, unint64_t a5@<X1>, unint64_t **a6@<X8>)
{
  float v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;

  v9 = a4 / (double)(unint64_t)this;
  v10 = vcvtas_u32_f32((float)(a3 - a2) / (float)((float)a5 * v9));
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<unsigned long>::resize((uint64_t)a6, v10);
  if (v10)
  {
    v11 = vcvtas_u32_f32(a2 / v9);
    v12 = *a6;
    do
    {
      *v12++ = v11;
      v11 += a5;
      --v10;
    }
    while (v10);
  }
}

void sub_1B60AF594(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double DspLib::FFT::Filterbank::latencySamples(DspLib::FFT::Filterbank *this)
{
  return 0.0;
}

uint64_t DspLib::FFT::STFTBase<(DspLib::FFT::Direction)1>::STFTBase(uint64_t a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  vDSP_Length *v8;

  v8 = DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform((vDSP_Length *)a1, a3);
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  std::vector<float>::resize((uint64_t)(v8 + 5), *v8);
  DspLib::clear(*(float **)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  return a1;
}

void sub_1B60AF624(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::FFT::STFTBase<(DspLib::FFT::Direction)-1>::STFTBase(uint64_t a1, vDSP_Length a2, vDSP_Length a3, vDSP_Length a4)
{
  vDSP_Length *v8;

  v8 = DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform((vDSP_Length *)a1, a3);
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  std::vector<float>::resize((uint64_t)(v8 + 5), *v8);
  DspLib::clear(*(float **)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  return a1;
}

void sub_1B60AF6B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(v1);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::FFT::BufferedInverseSTFT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  DspLib::FFT::InverseSTFT *v2;
  DspLib::FFT::InverseSTFT *v4;
  void *v5;

  v1 = *a1;
  v2 = (DspLib::FFT::InverseSTFT *)**a1;
  if (v2)
  {
    v4 = (DspLib::FFT::InverseSTFT *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (DspLib::FFT::InverseSTFT *)((char *)v4 - 80);
        DspLib::FFT::InverseSTFT::~InverseSTFT(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DspLib::FFT::BufferedForwardSTFT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  DspLib::FFT::BufferedForwardSTFT *v2;
  DspLib::FFT::BufferedForwardSTFT *v4;
  void *v5;

  v1 = *a1;
  v2 = (DspLib::FFT::BufferedForwardSTFT *)**a1;
  if (v2)
  {
    v4 = (DspLib::FFT::BufferedForwardSTFT *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (DspLib::FFT::BufferedForwardSTFT *)((char *)v4 - 88);
        DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DspLib::ComplexVector>::__assign_with_size[abi:ne180100]<DspLib::ComplexVector*,DspLib::ComplexVector*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<DspLib::ComplexVector>::__vdeallocate((void **)a1);
    if (a4 > 0x333333333333333)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v10;
    std::vector<DspLib::ComplexVector>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DspLib::ComplexVector>,DspLib::ComplexVector*,DspLib::ComplexVector*,DspLib::ComplexVector*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,DspLib::ComplexVector *,DspLib::ComplexVector *,DspLib::ComplexVector *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DspLib::ComplexVector>,DspLib::ComplexVector*,DspLib::ComplexVector*,DspLib::ComplexVector*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,DspLib::ComplexVector *,DspLib::ComplexVector *,DspLib::ComplexVector *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v16 - 80));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B60AF910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B60AF918(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<DspLib::ComplexVector>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v3 - 80));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<DspLib::ComplexVector>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DspLib::ComplexVector>,DspLib::ComplexVector*,DspLib::ComplexVector*,DspLib::ComplexVector*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(a4 + v7), (const DspLib::ComplexVector *)(a2 + v7));
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B60AFA28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,DspLib::ComplexVector *,DspLib::ComplexVector *,DspLib::ComplexVector *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      DspLib::ComplexVector::operator=(a3, v4);
      v4 += 80;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::vector<DspLib::FFT::BufferedForwardSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  result = DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT(v5, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  *(_QWORD *)(a1 + 8) = v5 + 88;
  return result;
}

void sub_1B60AFAF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::FFT::BufferedForwardSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t *a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;

  v5 = *a1;
  v6 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x1745D1745D1745DLL)
    v13 = 0x2E8BA2E8BA2E8BALL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vp::vx::database::v1::syntax::Rule>>(v11, v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[88 * v6];
  v19 = (uint64_t)v18;
  v20 = &v14[88 * v13];
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((uint64_t)v18, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  v19 = (uint64_t)(v18 + 88);
  std::vector<DspLib::FFT::BufferedForwardSTFT>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<DspLib::FFT::BufferedForwardSTFT>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1B60AFC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::FFT::BufferedForwardSTFT>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::FFT::BufferedForwardSTFT>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedForwardSTFT>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedForwardSTFT>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedForwardSTFT*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 88) = *(_QWORD *)(a3 + v7 - 88);
      *(_QWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v9 - 80) = 0;
      v11 = *(_QWORD *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 72) = *(_OWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v8 - 56) = v11;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      result = *(__n128 *)(a3 + v7 - 24);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      *(__n128 *)(v8 - 24) = result;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<DspLib::FFT::BufferedForwardSTFT>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT((DspLib::FFT::BufferedForwardSTFT *)(i - 88));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<DspLib::FFT::BufferedInverseSTFT>::__construct_one_at_end[abi:ne180100]<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  result = DspLib::FFT::BufferedInverseSTFT::BufferedInverseSTFT(v5, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  *(_QWORD *)(a1 + 8) = v5 + 80;
  return result;
}

void sub_1B60AFDC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::FFT::BufferedInverseSTFT>::__emplace_back_slow_path<std::vector<float> &,unsigned long &,DspLib::FFT::Mode &>(uint64_t *a1, vDSP_Length *a2, vDSP_Length *a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 4);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x199999999999999)
    v13 = 0x333333333333333;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v11, v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[80 * v6];
  v19 = (uint64_t)v18;
  v20 = &v14[80 * v13];
  DspLib::FFT::BufferedInverseSTFT::BufferedInverseSTFT((uint64_t)v18, *a2, (uint64_t)(a2[1] - *a2) >> 2, *a3, *a4);
  v19 = (uint64_t)(v18 + 80);
  std::vector<DspLib::FFT::BufferedInverseSTFT>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<DspLib::FFT::BufferedInverseSTFT>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1B60AFEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::FFT::BufferedInverseSTFT>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::FFT::BufferedInverseSTFT>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedInverseSTFT>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::FFT::BufferedInverseSTFT>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>,std::reverse_iterator<DspLib::FFT::BufferedInverseSTFT*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v8 - 80) = *(_QWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 72) = v10;
      *(_QWORD *)(v9 - 72) = 0;
      v11 = *(_QWORD *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v8 - 48) = v11;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      result = *(__n128 *)(a3 + v7 - 40);
      *(__n128 *)(v8 - 40) = result;
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v13 = *(_QWORD *)(a3 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v8 - 16) = v13;
      v7 -= 80;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<DspLib::FFT::BufferedInverseSTFT>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    DspLib::FFT::InverseSTFT::~InverseSTFT((DspLib::FFT::InverseSTFT *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  DspLib::ComplexVector *v14;
  DspLib::ComplexVector *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (DspLib::ComplexVector *)&v10[80 * v4];
  v15 = v14;
  v16 = &v10[80 * v9];
  DspLib::ComplexVector::ComplexVector(v14, *a2, 0);
  v15 = (DspLib::ComplexVector *)((char *)v14 + 80);
  std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B60B0124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *DspLibChannelOrderForLayout@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  __int128 *v4;
  __int128 *v5;
  _QWORD *v6;
  int v7;
  _DWORD *v8;
  __int128 v9;

  if ((int)result <= 8388615)
  {
    if ((int)result > 7995397)
    {
      if ((int)result > 8126469)
      {
        switch((_DWORD)result)
        {
          case 0x7C0006:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            result = (char *)operator new(0x18uLL);
            v3 = result + 24;
            a2[2] = result + 24;
            *((_QWORD *)result + 2) = 0x400000006;
            v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_D_;
            goto LABEL_53;
          case 0x7E0008:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            result = (char *)operator new(0x20uLL);
            v3 = result + 32;
            a2[2] = result + 32;
            v5 = &_ZGRL29DspLibChannelOrder_MPEG_7_1_A_;
            break;
          case 0x7F0008:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            result = (char *)operator new(0x20uLL);
            v3 = result + 32;
            a2[2] = result + 32;
            v5 = &_ZGRL29DspLibChannelOrder_MPEG_7_1_B_;
            break;
          default:
            goto LABEL_55;
        }
LABEL_51:
        v9 = v5[1];
        *(_OWORD *)result = *v5;
        *((_OWORD *)result + 1) = v9;
        goto LABEL_54;
      }
      if ((_DWORD)result == 7995398)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x18uLL);
        v3 = result + 24;
        a2[2] = result + 24;
        *((_QWORD *)result + 2) = 0x400000003;
        v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_B_;
      }
      else
      {
        if ((_DWORD)result != 8060934)
          goto LABEL_55;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x18uLL);
        v3 = result + 24;
        a2[2] = result + 24;
        *((_QWORD *)result + 2) = 0x400000006;
        v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_C_;
      }
    }
    else
    {
      if ((int)result <= 7405570)
      {
        if ((_DWORD)result == 6553601)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          v8 = operator new(4uLL);
          *a2 = v8;
          *v8 = 3;
          result = (char *)(v8 + 1);
        }
        else
        {
          if ((_DWORD)result != 6619138)
            goto LABEL_55;
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          v6 = operator new(8uLL);
          *a2 = v6;
          *v6 = 0x200000001;
          result = (char *)(v6 + 1);
        }
        a2[1] = result;
        a2[2] = result;
        return result;
      }
      switch((_DWORD)result)
      {
        case 0x710003:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          result = (char *)operator new(0xCuLL);
          v3 = result + 12;
          a2[2] = result + 12;
          *(_QWORD *)result = 0x200000001;
          v7 = 3;
          goto LABEL_43;
        case 0x750005:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          result = (char *)operator new(0x14uLL);
          v3 = result + 20;
          a2[2] = result + 20;
          *((_DWORD *)result + 4) = 6;
          v4 = &_ZGRL29DspLibChannelOrder_Wave_5_0_A_;
          break;
        case 0x790006:
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          result = (char *)operator new(0x18uLL);
          v3 = result + 24;
          a2[2] = result + 24;
          *((_QWORD *)result + 2) = 0x600000005;
          v4 = &_ZGRL29DspLibChannelOrder_MPEG_5_1_A_;
          break;
        default:
          goto LABEL_55;
      }
    }
LABEL_53:
    *(_OWORD *)result = *v4;
    goto LABEL_54;
  }
  if ((int)result <= 12189700)
  {
    if ((int)result <= 8650755)
    {
      if ((_DWORD)result == 8388616)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x20uLL);
        v3 = result + 32;
        a2[2] = result + 32;
        v5 = &_ZGRL29DspLibChannelOrder_MPEG_7_1_C_;
      }
      else
      {
        if ((_DWORD)result != 8454152)
          goto LABEL_55;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x20uLL);
        v3 = result + 32;
        a2[2] = result + 32;
        v5 = &_ZGRL37DspLibChannelOrder_Emagic_Default_7_1_;
      }
      goto LABEL_51;
    }
    if ((_DWORD)result == 8650756)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      result = (char *)operator new(0x10uLL);
      v3 = result + 16;
      a2[2] = result + 16;
      v4 = &_ZGRL29DspLibChannelOrder_Wave_4_0_A_;
      goto LABEL_53;
    }
    if ((_DWORD)result != 8716291)
    {
      if ((_DWORD)result != 12124164)
        goto LABEL_55;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      result = (char *)operator new(0x10uLL);
      v3 = result + 16;
      a2[2] = result + 16;
      v4 = &_ZGRL29DspLibChannelOrder_Wave_4_0_B_;
      goto LABEL_53;
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = (char *)operator new(0xCuLL);
    v3 = result + 12;
    a2[2] = result + 12;
    *(_QWORD *)result = 0x200000001;
    v7 = 4;
LABEL_43:
    *((_DWORD *)result + 2) = v7;
    goto LABEL_54;
  }
  if ((int)result > 12386311)
  {
    switch((_DWORD)result)
    {
      case 0xBD0008:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x20uLL);
        v3 = result + 32;
        a2[2] = result + 32;
        v5 = &_ZGRL27DspLibChannelOrder_WAVE_7_1_;
        break;
      case 0xC0000C:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x30uLL);
        v3 = result + 48;
        a2[2] = result + 48;
        *(_OWORD *)result = _ZGRL30DspLibChannelOrder_Atmos_7_1_4_;
        *((_OWORD *)result + 1) = unk_1B6628704;
        *((_OWORD *)result + 2) = xmmword_1B6628714;
        goto LABEL_54;
      case 0xC20008:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = (char *)operator new(0x20uLL);
        v3 = result + 32;
        a2[2] = result + 32;
        v5 = &_ZGRL30DspLibChannelOrder_Atmos_5_1_2_;
        break;
      default:
        goto LABEL_55;
    }
    goto LABEL_51;
  }
  switch((_DWORD)result)
  {
    case 0xBA0005:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      result = (char *)operator new(0x14uLL);
      v3 = result + 20;
      a2[2] = result + 20;
      *((_DWORD *)result + 4) = 34;
      v4 = &_ZGRL29DspLibChannelOrder_Wave_5_0_B_;
      goto LABEL_53;
    case 0xBB0006:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      result = (char *)operator new(0x18uLL);
      v3 = result + 24;
      a2[2] = result + 24;
      *((_QWORD *)result + 2) = 0x2200000021;
      v4 = &_ZGRL29DspLibChannelOrder_Wave_5_1_B_;
      goto LABEL_53;
    case 0xBC0007:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      result = (char *)operator new(0x1CuLL);
      v3 = result + 28;
      a2[2] = result + 28;
      *(_OWORD *)result = _ZGRL27DspLibChannelOrder_Wave_6_1_;
      *(_OWORD *)(result + 12) = *(__int128 *)((char *)&_ZGRL27DspLibChannelOrder_Wave_6_1_ + 12);
LABEL_54:
      *a2 = result;
      a2[1] = v3;
      return result;
  }
LABEL_55:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void DspLib_ITU1770_channelWeightsForLayout(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  float v6;
  _DWORD *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  void *__p;
  _DWORD *v13;

  v4 = (unsigned __int16)a1;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((a1 & 0xFFFF0000) == 0xBE0000)
  {
    std::vector<float>::resize(a3, (unsigned __int16)a1);
    v6 = 0.0;
    if (a2)
      v6 = 1.0;
    DspLib::fill(*(float **)a3, (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2, v6);
    **(_DWORD **)a3 = 1065353216;
  }
  else
  {
    DspLibChannelOrderForLayout(a1, &__p);
    v7 = v13;
    if (v13 != __p)
    {
      std::vector<float>::resize(a3, v4);
      v7 = __p;
      if ((_DWORD)v4)
      {
        v8 = 0;
        v9 = *(float **)a3;
        do
        {
          v10 = 0;
          while (kITU1770ChannelNames[v10] != v7[v8])
          {
            if (++v10 == 17)
            {
              v11 = 0;
              goto LABEL_13;
            }
          }
          v11 = kITU1770ChannelWeights[v10];
LABEL_13:
          LODWORD(v9[v8++]) = v11;
        }
        while (v8 != v4);
      }
    }
    if (v7)
    {
      v13 = v7;
      operator delete(v7);
    }
  }
}

void sub_1B60B07B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLibFinalChannelLayout(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 1)
    return 6553601;
  if (a3 == 2)
    return 6619138;
  if ((_DWORD)result != -65536)
  {
    if (a3 == (unsigned __int16)result)
      return result;
    return a3 | 0xFFFF0000;
  }
  if ((_DWORD)a2 == -65536)
    return a3 | 0xFFFF0000;
  result = a2;
  if ((unsigned __int16)a2 != a3)
    return a3 | 0xFFFF0000;
  return result;
}

double DspLib::BassKoenig::Algorithm::Algorithm(DspLib::BassKoenig::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib10BassKoenig10ParametersL8kDefaultE_, 0x45uLL, (uint64_t)&_ZGRN6DspLib10BassKoenig10ParametersL8kMinimumE_, 69, (uint64_t)&_ZGRN6DspLib10BassKoenig10ParametersL8kMaximumE_, 69);
  *(_QWORD *)v1 = &off_1E69C3550;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_QWORD *)(v1 + 384) = 0x43C8000000000000;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_BYTE *)(v1 + 360) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_QWORD *)(v1 + 488) = 0;
  *(_DWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 504) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_DWORD *)(v1 + 424) = 0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_DWORD *)(v1 + 480) = 0;
  *(_DWORD *)(v1 + 528) = 730643660;
  *(_BYTE *)(v1 + 532) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_BYTE *)(v1 + 552) = 0;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_QWORD *)(v1 + 576) = 0x43C8000000000000;
  *(_QWORD *)(v1 + 680) = 0;
  *(_DWORD *)(v1 + 688) = 0;
  *(_QWORD *)(v1 + 712) = 0;
  *(_OWORD *)(v1 + 696) = 0u;
  *(_DWORD *)(v1 + 616) = 0;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_DWORD *)(v1 + 672) = 0;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_DWORD *)(v1 + 720) = 730643660;
  *(_BYTE *)(v1 + 724) = 0;
  *(_QWORD *)(v1 + 728) = 1;
  *(_DWORD *)(v1 + 736) = 1;
  *(_OWORD *)(v1 + 744) = 0u;
  *(_OWORD *)(v1 + 760) = 0u;
  *(_OWORD *)(v1 + 776) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_DWORD *)(v1 + 808) = 0;
  *(_QWORD *)(v1 + 1344) = 0;
  *(_QWORD *)(v1 + 1332) = 0;
  *(_OWORD *)(v1 + 1316) = 0u;
  *(_OWORD *)(v1 + 1300) = 0u;
  *(_OWORD *)(v1 + 1284) = 0u;
  *(_DWORD *)(v1 + 1352) = 0;
  *(_BYTE *)(v1 + 840) = 0;
  *(_QWORD *)(v1 + 832) = 0;
  *(_OWORD *)(v1 + 816) = 0u;
  *(_BYTE *)(v1 + 944) = 0;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_OWORD *)(v1 + 880) = 0u;
  *(_OWORD *)(v1 + 896) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_OWORD *)(v1 + 864) = 0u;
  *(_BYTE *)(v1 + 1048) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 1000) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 1193) = 0u;
  *(_OWORD *)(v1 + 1184) = 0u;
  *(_OWORD *)(v1 + 1168) = 0u;
  *(_OWORD *)(v1 + 1152) = 0u;
  *(_OWORD *)(v1 + 1136) = 0u;
  *(_OWORD *)(v1 + 1120) = 0u;
  *(_OWORD *)(v1 + 1104) = 0u;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_OWORD *)(v1 + 1056) = 0u;
  *(_BYTE *)(v1 + 1280) = 0;
  *(_OWORD *)(v1 + 1264) = 0u;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_OWORD *)(v1 + 1216) = 0u;
  *(_OWORD *)(v1 + 1376) = 0u;
  *(_OWORD *)(v1 + 1360) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v1 + 1392) = _D1;
  *(_OWORD *)(v1 + 1400) = 0u;
  *(_DWORD *)(v1 + 1416) = 1065353216;
  *(_OWORD *)(v1 + 1420) = 0u;
  *(_OWORD *)(v1 + 1436) = 0u;
  *(_DWORD *)(v1 + 1452) = -1;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(v1 + 1456) = 0xFFFFFFFFLL;
  return result;
}

uint64_t DspLib::BassKoenig::Algorithm::initialize(DspLib::BassKoenig::Algorithm *this, int a2, double a3)
{
  uint64_t v4;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  *((_DWORD *)this + 3) = 1;
  if ((_DWORD)v4)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)this + 98, 1uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 840), 1uLL, *((double *)this + 3), 2uLL);
    DspLib::Biquad::Filter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1048), 1uLL, 3uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 944), 1uLL, *((double *)this + 3), 5uLL);
    DspLib::FIR::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1144), 1uLL, *((unsigned int *)this + 8));
    DspLib::Biquad::Filter::initialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1208), 1uLL, 2uLL);
    *((_BYTE *)this + 8) = 1;
  }
  (*(void (**)(DspLib::BassKoenig::Algorithm *))(*(_QWORD *)this + 144))(this);
  return v4;
}

void DspLib::BassKoenig::Algorithm::uninitialize(DspLib::BassKoenig::Algorithm *this)
{
  DspLib::BassKoenig::Algorithm::HighpassChannel **v2;
  DspLib::BassKoenig::Algorithm::HighpassChannel **v3;

  *((_BYTE *)this + 8) = 0;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 840));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 944));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1048));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 98, 0);
  DspLib::FIR::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1144));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1208));
  DspLib::EnvelopeProcessor::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 1280));
  DspLib::RMS::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 344));
  DspLib::RMS::uninitialize((DspLib::BassKoenig::Algorithm *)((char *)this + 536));
  *((_QWORD *)this + 41) = *((_QWORD *)this + 40);
  *((_QWORD *)this + 29) = *((_QWORD *)this + 28);
  *((_QWORD *)this + 32) = *((_QWORD *)this + 31);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 34);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 37);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 170);
  v2 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)*((_QWORD *)this + 141);
  v3 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)*((_QWORD *)this + 140);
  while (v2 != v3)
    std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](--v2, 0);
  *((_QWORD *)this + 141) = v3;
  *((_DWORD *)this + 352) = 0;
  *((_DWORD *)this + 338) = 0;
}

double DspLib::BassKoenig::Algorithm::reset(DspLib::BassKoenig::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  DspLib::CircularDelay *v5;
  DspLib::CircularDelay *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  double result;

  DspLib::RMS::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 344));
  DspLib::RMS::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 536));
  *((_DWORD *)this + 183) = 0;
  v2 = *((_QWORD *)this + 98);
  v3 = *((_QWORD *)this + 99);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 != v4)
      bzero(*(void **)v2, (v4 - *(_QWORD *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    v2 += 24;
  }
  *((_DWORD *)this + 202) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 888));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 992));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1096));
  DspLib::FIR::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1144));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1256));
  DspLib::EnvelopeProcessor::reset((DspLib::BassKoenig::Algorithm *)((char *)this + 1280));
  v5 = (DspLib::CircularDelay *)*((_QWORD *)this + 170);
  v6 = (DspLib::CircularDelay *)*((_QWORD *)this + 171);
  while (v5 != v6)
  {
    DspLib::CircularDelay::reset(v5);
    v5 = (DspLib::CircularDelay *)((char *)v5 + 32);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 140);
  v8 = (uint64_t *)*((_QWORD *)this + 141);
  while (v7 != v8)
  {
    v9 = *v7++;
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v9 + 48));
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v9 + 152));
    DspLib::EnvelopeProcessor::reset((DspLib::EnvelopeProcessor *)(v9 + 176));
  }
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 174) = _D0;
  *((_DWORD *)this + 350) = 0;
  *((_DWORD *)this + 355) = 0;
  result = 0.0;
  *((_QWORD *)this + 178) = 0;
  *((_DWORD *)this + 359) = 0;
  *((_DWORD *)this + 54) = 0;
  return result;
}

double DspLib::BassKoenig::Algorithm::latencySamples(DspLib::BassKoenig::Algorithm *this)
{
  __n128 v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[96];
  void *__p;
  _BYTE *v10;
  _QWORD v11[183];

  v2.n128_f64[0] = DspLib::BassKoenig::Algorithm::Algorithm((DspLib::BassKoenig::Algorithm *)v11);
  DspLib::BassKoenig::Algorithm::setParameters((uint64_t)v11, *((const void **)this + 6), (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2, v2);
  DspLib::BassKoenig::Algorithm::initialize((DspLib::BassKoenig::Algorithm *)v11, 1, *((double *)this + 3));
  v3 = (_QWORD *)*((_QWORD *)this + 170);
  if (*((_QWORD **)this + 171) == v3)
    v4 = 0;
  else
    v4 = (uint64_t)(v3[1] - *v3) >> 2;
  std::vector<float>::vector(&__p, (unint64_t)(float)((float)((float)(v4 * (unint64_t)*((unsigned int *)this + 352)) + 64.5) + 200.0));
  DspLib::diracDelta((float *)__p, (v10 - (_BYTE *)__p) >> 2);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v8, (float *)__p, (v10 - (_BYTE *)__p) >> 2, 1u, 0);
  (*(void (**)(_QWORD *, _BYTE *, _BYTE *, uint64_t, uint64_t))(v11[0] + 160))(v11, v8, v8, 1, 1);
  DspLib::maxmgvi((const float *)__p, (v10 - (_BYTE *)__p) >> 2);
  v6 = v5;
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  DspLib::BassKoenig::Algorithm::~Algorithm((DspLib::BassKoenig::Algorithm *)v11);
  return (double)v6;
}

void sub_1B60B0E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&a9);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  DspLib::BassKoenig::Algorithm::~Algorithm((DspLib::BassKoenig::Algorithm *)&a24);
  _Unwind_Resume(a1);
}

void DspLib::BassKoenig::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  unint64_t v4;
  DspLib *v6;
  float v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  vDSP_Length v18;
  void *v19;
  const float *v20;
  uint64_t v21;
  char *v22;
  double v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t j;
  _BYTE *v32;
  uint64_t k;
  float *v34;
  double v35;
  float *v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  float v47;
  double v48;
  DspLib::Biquad::ParametricFilter *v49;
  unsigned int v50;
  unint64_t v51;
  _QWORD *v52;
  double v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  DspLib::CircularDelay *v58;
  DspLib::CircularDelay *v59;
  DspLib::BassKoenig::Algorithm::HighpassChannel **v60;
  DspLib::BassKoenig::Algorithm::HighpassChannel **v61;
  DspLib::BassKoenig::Algorithm::HighpassChannel *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  _BYTE v70[40];
  float v71[129];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    ++*(_DWORD *)(a1 + 216);
    DspLib::BassKoenig::Algorithm::setSystemParameters((DspLib::BassKoenig::Algorithm *)a1);
    v7 = DspLib::dB2Amp(v6, **(float **)(a1 + 48));
    *(float *)(a1 + 1416) = v7;
    v8 = *(_QWORD *)(a1 + 48);
    if (*(float *)(v8 + 196) > 0.5)
      *(float *)(a1 + 1416) = -v7;
    *(_DWORD *)(a1 + 1388) = *(_DWORD *)(v8 + 32);
    LODWORD(v4) = vcvtas_u32_f32(*(float *)(v8 + 12));
    v9 = logf(*(float *)(v8 + 20) / *(float *)(v8 + 16));
    *(float *)(a1 + 1404) = expf(v9 / (float)(v4 - 1));
    v10 = vcvtas_u32_f32(*(float *)(v8 + 24));
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    v12 = *(_DWORD *)(a1 + 32) / v11 + 1;
    std::vector<float>::resize(a1 + 224, v12);
    std::vector<float>::resize(a1 + 248, v12);
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 840), 1uLL, *(double *)(a1 + 24), 2uLL);
    v13 <<= 32;
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 840, v13, (double *)0x3F3504F300000000, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 840, v13, (double *)0x3F3504F300000000, 1, 0x41uLL);
    v14 = vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 264));
    if (v11 != *(_DWORD *)(a1 + 1408) || (_DWORD)v12 != *(_DWORD *)(a1 + 220) || *(_DWORD *)(a1 + 1460) != v14)
    {
      if (v14 < 2)
      {
        DspLib::multiply(DspLib::BassKoenig::kSRCcoeffs, 0x81uLL, v71, (float)v11 * 0.0625);
        *(_DWORD *)(a1 + 728) = v11;
        *(_DWORD *)(a1 + 732) = 0;
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 736), v11, *(_DWORD *)(a1 + 32) / v11 + 1);
        DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 736), (uint64_t)v71, 0x81uLL);
      }
      else if (v11 == 1)
      {
        *(_QWORD *)(a1 + 728) = 1;
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 736), 1, *(_DWORD *)(a1 + 32));
      }
      else
      {
        v15 = &DspLib::BassKoenig::kSRC4coeffs;
        v16 = 257;
        if (v11 < 9)
          v16 = 129;
        v17 = &DspLib::BassKoenig::kSRC16coeffs;
        if (v11 < 9)
          v17 = &DspLib::BassKoenig::kSRC8coeffs;
        if (v11 >= 5)
          v15 = v17;
        else
          v16 = 129;
        if (v11 == 2)
          v18 = 65;
        else
          v18 = v16;
        if (v11 == 2)
          v19 = &DspLib::BassKoenig::kSRC2coeffs;
        else
          v19 = v15;
        v20 = (const float *)MEMORY[0x1E0C80A78](v19);
        v22 = (char *)&v67 - v21;
        DspLib::multiply(v20, v18, (float *)((char *)&v67 - v21), (float)v11);
        *(_DWORD *)(a1 + 728) = v11;
        *(_DWORD *)(a1 + 732) = 0;
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 736), v11, *(_DWORD *)(a1 + 32) / v11 + 1);
        DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 736), (uint64_t)v22, v18);
      }
    }
    v23 = (double)v11;
    if (*(_BYTE *)(a1 + 40))
    {
      DspLib::RMS::initialize((DspLib::RMS *)(a1 + 344), 1u, *(double *)(a1 + 24) / (double)v11);
      DspLib::RMS::setParameters(a1 + 344, 1, 1000.0);
      DspLib::RMS::initialize((DspLib::RMS *)(a1 + 536), 1u, *(double *)(a1 + 24) / (double)v11);
      DspLib::RMS::setParameters(a1 + 536, 1, 1000.0);
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 944), 1uLL, (double)vcvtad_u64_f64(*(double *)(a1 + 24) / v23), 5uLL);
    v24 = 0;
    for (i = 0; i != 5; ++i)
    {
      v26 = *(_QWORD *)(a1 + 48) + v24;
      v27 = *(float *)(v26 + 96);
      v28 = *(unsigned int *)(v26 + 104);
      v29 = ((unint64_t)*(unsigned int *)(v26 + 100) << 32) | 3;
      v30 = *(unsigned int *)(v26 + 108);
      if (v27 < 0.5)
        v28 = 0;
      DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 944, v29, (double *)(v28 | (v30 << 32)), i, 0x41uLL);
      v24 += 16;
    }
    for (j = 0; j != 40; j += 20)
    {
      v32 = &v70[j];
      *(_DWORD *)v32 = 1065353216;
      *(_QWORD *)(v32 + 12) = 0;
      *(_QWORD *)(v32 + 4) = 0;
    }
    for (k = 0; k != 15; k += 5)
    {
      v34 = &v71[k];
      *v34 = 1.0;
      *(_QWORD *)(v34 + 3) = 0;
      *(_QWORD *)(v34 + 1) = 0;
    }
    v35 = *(double *)(a1 + 24) / v23;
    v36 = *(float **)(a1 + 48);
    v37 = (uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v36) >> 2;
    v38 = v35;
    if (vcvtas_u32_f32(v36[66]))
      DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsImproved(v36, v38, v37, (uint64_t)v70, 2, (uint64_t)v71, 3);
    else
      DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsLegacy(v36, v38, v37, (uint64_t)v70, 2, (uint64_t)v71, 3);
    *(_DWORD *)(a1 + 1412) = vcvtad_u64_f64(v35);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 1048), 1uLL, 3uLL);
    DspLib::Biquad::Filter::setCoefficients(a1 + 1048, (uint64_t)v71, 3, 0, 0x41uLL);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 1208), 1uLL, 2uLL);
    DspLib::Biquad::Filter::setCoefficients(a1 + 1208, (uint64_t)v70, 2, 0, 0x41uLL);
    v39 = *(_QWORD *)(a1 + 48);
    v40 = 0;
    if (*(float *)(v39 + 48) >= 0.5 && *(float *)(v39 + 56) < 0.5)
      v40 = *(_DWORD *)(v39 + 36);
    *(_DWORD *)(a1 + 1384) = v40;
    if (*(_DWORD *)(a1 + 1352) != (_DWORD)v4)
    {
      std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::resize(a1 + 1120, v4);
      v60 = *(DspLib::BassKoenig::Algorithm::HighpassChannel ***)(a1 + 1120);
      v61 = *(DspLib::BassKoenig::Algorithm::HighpassChannel ***)(a1 + 1128);
      while (v60 != v61)
      {
        v62 = (DspLib::BassKoenig::Algorithm::HighpassChannel *)operator new();
        DspLib::BassKoenig::Algorithm::HighpassChannel::HighpassChannel(v62);
        std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](v60, v62);
        DspLib::EnvelopeProcessor::initialize((DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)*v60++ + 176), 1u);
      }
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 272));
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 296));
      std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 272), v4);
      v63 = *(_QWORD *)(a1 + 272);
      v64 = *(_QWORD *)(a1 + 280);
      while (v63 != v64)
      {
        std::vector<float>::resize(v63, v12);
        v63 += 24;
      }
      std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 296), v4);
      v65 = *(_QWORD *)(a1 + 296);
      v66 = *(_QWORD *)(a1 + 304);
      while (v65 != v66)
      {
        std::vector<float>::resize(v65, v12);
        v65 += 24;
      }
    }
    std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 272), v4);
    v41 = *(_QWORD *)(a1 + 272);
    v42 = *(_QWORD *)(a1 + 280);
    while (v41 != v42)
    {
      std::vector<float>::resize(v41, v12);
      v41 += 24;
    }
    std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 296), v4);
    v43 = *(_QWORD *)(a1 + 296);
    v44 = *(_QWORD *)(a1 + 304);
    while (v43 != v44)
    {
      std::vector<float>::resize(v43, v12);
      v43 += 24;
    }
    v45 = *(uint64_t **)(a1 + 1120);
    v46 = *(uint64_t **)(a1 + 1128);
    if (v45 != v46)
    {
      v47 = *(float *)(*(_QWORD *)(a1 + 48) + 16);
      v48 = (double)vcvtad_u64_f64(*(double *)(a1 + 24) / v23);
      do
      {
        v49 = (DspLib::Biquad::ParametricFilter *)*v45;
        DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(*v45 + 104), 1uLL, 2uLL);
        DspLib::Biquad::ParametricFilter::initialize(v49, 1uLL, v48, 2uLL);
        DspLib::BassKoenig::Algorithm::HighpassChannel::setCoefficients(*v45, *(float *)(*(_QWORD *)(a1 + 48) + 40) >= 0.5, (uint64_t)v70, 2, v47, *(float *)(*(_QWORD *)(a1 + 48) + 60));
        v47 = v47 * *(float *)(a1 + 1404);
        ++v45;
      }
      while (v45 != v46);
    }
    v50 = vcvtad_u64_f64(*(double *)(a1 + 24) * (*(float *)(*(_QWORD *)(a1 + 48) + 28) * 0.001) / v23);
    if (v50 <= 1)
      v51 = 1;
    else
      v51 = v50;
    if (*(_DWORD *)(a1 + 1352) != (_DWORD)v4
      || (v52 = *(_QWORD **)(a1 + 1360), *(_QWORD **)(a1 + 1368) == v52)
      || v51 != (uint64_t)(v52[1] - *v52) >> 2)
    {
      std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)(a1 + 1360));
      std::vector<DspLib::CircularDelay>::resize((uint64_t *)(a1 + 1360), v4);
      v58 = *(DspLib::CircularDelay **)(a1 + 1360);
      v59 = *(DspLib::CircularDelay **)(a1 + 1368);
      while (v58 != v59)
      {
        DspLib::CircularDelay::setLength(v58, v51);
        v58 = (DspLib::CircularDelay *)((char *)v58 + 32);
      }
    }
    if (*(_QWORD *)(a1 + 1176) != v51)
    {
      std::vector<float>::vector(&v68, v51);
      DspLib::makeRaisedCosineWindow(v68, v69 - v68);
      DspLib::FIR::setCoefficients((_QWORD *)(a1 + 1144), v68, v69 - v68);
      DspLib::FIR::reset((DspLib::FIR *)(a1 + 1144));
      if (v68)
      {
        v69 = v68;
        operator delete(v68);
      }
    }
    v53 = *(double *)(a1 + 24) / v23;
    v54 = *(float **)(a1 + 48);
    v55 = -1.0 / (v53 * v54[44] / 1000.0);
    v56 = 1.0 - expf(v55);
    if (v56 > 0.102)
      v56 = 0.102;
    *(float *)(a1 + 1444) = v56;
    v57 = -1.0 / (v53 * v54[45] / 1000.0);
    *(float *)(a1 + 1448) = 1.0 - expf(v57);
    if (vcvtas_u32_f32(v54[11]))
    {
      if (*(_QWORD *)(a1 + 328) == *(_QWORD *)(a1 + 320))
      {
        std::vector<float>::resize(a1 + 320, 0x1F5uLL);
        DspLib::ramp(*(float **)(a1 + 320), (uint64_t)(*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320)) >> 2, 1, 10.0, 2000.0);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 320);
    }
    *(_DWORD *)(a1 + 1352) = v4;
    *(_DWORD *)(a1 + 220) = v12;
    *(_DWORD *)(a1 + 1408) = v11;
    *(_DWORD *)(a1 + 1460) = v14;
  }
}

void sub_1B60B1724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::BassKoenig::Algorithm::setMeteringIsEnabled(uint64_t this, int a2)
{
  double *v2;
  DspLib::RMS *v3;

  if (*(unsigned __int8 *)(this + 40) != a2)
  {
    v2 = (double *)this;
    *(_BYTE *)(this + 40) = a2;
    v3 = (DspLib::RMS *)(this + 344);
    if (a2)
    {
      DspLib::RMS::initialize(v3, 1u, v2[3]);
      DspLib::RMS::initialize((DspLib::RMS *)(v2 + 67), 1u, v2[3]);
      DspLib::EnvelopeProcessor::initialize((DspLib::EnvelopeProcessor *)(v2 + 160), 1u);
    }
    else
    {
      DspLib::RMS::uninitialize(v3);
      DspLib::RMS::uninitialize((DspLib::RMS *)(v2 + 67));
      DspLib::EnvelopeProcessor::uninitialize((DspLib::EnvelopeProcessor *)(v2 + 160));
    }
    return (*(uint64_t (**)(double *))(*(_QWORD *)v2 + 144))(v2);
  }
  return this;
}

void DspLib::BassKoenig::Algorithm::setParameter(DspLib::BassKoenig::Algorithm *this, unint64_t a2, float a3)
{
  uint64_t v4;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  char *v10;

  v4 = *((_QWORD *)this + 6);
  if ((*((_QWORD *)this + 7) - v4) >> 2 <= a2)
  {
    v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 151);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    *(float *)(v4 + 4 * a2) = a3;
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      *((_DWORD *)this + 349) = 0;
LABEL_10:
      (*(void (**)(DspLib::BassKoenig::Algorithm *))(*(_QWORD *)this + 144))(this);
      return;
    }
    if (a2 - 59 > 3)
      goto LABEL_10;
    (*(void (**)(DspLib::BassKoenig::Algorithm *, unint64_t))(*(_QWORD *)this + 120))(this, a2);
    v8 = *((_QWORD *)this + 6);
    v9 = *(float *)(v8 + 4 * a2);
    if (v7 >= v9)
      v7 = *(float *)(v8 + 4 * a2);
    if (v9 >= v6)
      v6 = v7;
    *(float *)(v8 + 4 * a2) = v6;
    DspLib::BassKoenig::Algorithm::setSystemParameters(this);
  }
}

void DspLib::BassKoenig::Algorithm::setSystemParameters(DspLib::BassKoenig::Algorithm *this)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;

  v2 = 0;
  *((_DWORD *)this + 350) = 0;
  *((_DWORD *)this + 363) = -1;
  v3 = (float *)*((_QWORD *)this + 6);
  v4 = 50;
  do
  {
    if (v3[v4] >= 0.5)
    {
      v5 = v3[v2 + 59];
      v6 = v3[v4 + 1];
      v7 = v3[v4 + 2];
      if ((float)(v6 + 5.0) > v7)
      {
        v6 = v7 + -5.0;
        v3[v4 + 1] = v7 + -5.0;
      }
      v8 = v3[4];
      v9 = v8;
      if (v5 >= v6)
      {
        v9 = v3[5];
        if (v5 <= v7)
          v9 = (float)(v8 - (float)((float)((float)(v9 - v8) / (float)(v7 - v6)) * v6))
             + (float)((float)((float)(v9 - v8) / (float)(v7 - v6)) * v5);
      }
      v10 = logf(v9 / v8);
      v11 = v10 / logf(*((float *)this + 351));
      v12 = *((_DWORD *)this + 338) - 1;
      if (v11 > (float)v12)
        v11 = (float)v12;
      if (v11 > *((float *)this + 350))
      {
        *((float *)this + 350) = v11;
        *((_DWORD *)this + 363) = v2;
      }
    }
    ++v2;
    v4 += 3;
  }
  while (v2 != 3);
  if (v3[63] >= 0.5)
  {
    v13 = v3[62];
    v14 = v3[64];
    v15 = v3[65];
    if ((float)(v14 + 5.0) < v15)
    {
      v15 = v14 + -5.0;
      v3[65] = v14 + -5.0;
    }
    v16 = v3[4];
    v17 = v16;
    if (v13 <= v14)
    {
      v17 = v3[5];
      if (v13 >= v15)
        v17 = (float)(v16 - (float)((float)((float)(v17 - v16) / (float)(v15 - v14)) * v14))
            + (float)((float)((float)(v17 - v16) / (float)(v15 - v14)) * v13);
    }
    v18 = logf(v17 / v16);
    v19 = v18 / logf(*((float *)this + 351));
    v20 = *((_DWORD *)this + 338) - 1;
    if (v19 > (float)v20)
      v19 = (float)v20;
    if (v19 > *((float *)this + 350))
    {
      *((float *)this + 350) = v19;
      *((_DWORD *)this + 363) = 3;
    }
  }
}

uint64_t DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsImproved(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v8;
  double v10;
  double v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  long double v44;
  long double v45;
  double v46;
  long double v47;
  long double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float v65;
  uint64_t result;
  char *v67;
  int v68;
  __int128 v69;
  int v70;

  v8 = (float)(a1[23] / 10000.0) * (float)(a1[23] / 10000.0);
  if (v8 == 0.0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 799;
LABEL_39:
    result = printf("DSP Sound assertion in %s at line %d\n", v67, v68);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  v10 = a1[21];
  v11 = v10 * v10;
  if (v10 * v10 == 0.0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 801;
    goto LABEL_39;
  }
  v12 = a1[20] / 1000.0;
  if (v12 == 0.0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 806;
    goto LABEL_39;
  }
  v13 = (float)(a1[22] / 1000.0) / 140002.31 / v8;
  if (v13 == 0.0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 807;
    goto LABEL_39;
  }
  v14 = (float)(a2 * a2);
  v15 = a2 * v14;
  v16 = a1[16] / v11;
  v17 = (float)(a1[17] / 1000.0) / v11;
  v18 = 1.0 / v13 + (float)(1.0 / v12);
  v19 = (float)(a1[18] / 1000.0);
  v20 = v17 * v19;
  v21 = a1[19];
  v22 = v17 * v21 + v16 * v19;
  v23 = v17 * v18 + v16 * v21 + 1.0;
  v24 = v16 * v18;
  v25 = v23 * (float)(a2 + a2);
  v26 = v14 * 4.0;
  v27 = v24 + v25 + v14 * 4.0 * v22 + v15 * 8.0 * v20;
  if (v27 == 0.0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 824;
    goto LABEL_39;
  }
  v32 = v24 - v25 + v26 * v22 - v15 * 8.0 * v20;
  v33 = v15 * 24.0;
  v34 = 1.0 / v27;
  v35 = (v25 + v24 * 3.0 - v26 * v22 - v33 * v20) * (1.0 / v27);
  v36 = (-(v25 - v24 * 3.0) - v26 * v22 + v33 * v20) * (1.0 / v27);
  v37 = (v36 - v35 * v35 / 3.0) * ((v36 - v35 * v35 / 3.0) * (v36 - v35 * v35 / 3.0));
  v38 = v32 * (1.0 / v27) + v35 * (v35 * (v35 + v35)) / 27.0 - v35 * v36 / 3.0;
  v39 = sqrt(fabs(v37 / 27.0 + v38 * v38 * 0.25));
  v40 = v38 * -0.5;
  v41 = v38 * -0.5 + v39;
  v42 = 0.0;
  v43 = 0.0;
  if (v41 != 0.0)
  {
    if (v41 < 0.0)
    {
      v44 = log(-v41);
      v43 = -exp(v44 * 0.333333343);
    }
    else
    {
      v45 = log(v41);
      v43 = exp(v45 * 0.333333343);
    }
  }
  v46 = v40 - v39;
  if (v40 - v39 != 0.0)
  {
    if (v40 - v39 < 0.0)
    {
      v47 = log(-v46);
      v42 = -exp(v47 * 0.333333343);
    }
    else
    {
      v48 = log(v46);
      v42 = exp(v48 * 0.333333343);
    }
  }
  v49 = v35 / -3.0 + v43 + v42;
  v50 = v35 / -3.0 - (v43 + v42) * 0.5;
  v51 = 0.9999;
  if (v49 <= 0.9999)
    v51 = v35 / -3.0 + v43 + v42;
  if (v49 >= -0.9999)
    v52 = v51;
  else
    v52 = -0.9999;
  v53 = 0.999;
  if (v50 <= 0.999)
    v53 = v35 / -3.0 - (v43 + v42) * 0.5;
  if (v50 >= -0.9999)
    v54 = v53;
  else
    v54 = -0.9999;
  v55 = v34 / v10 * 1000.0 * 8.0;
  v56 = v52;
  *(float *)a4 = v55;
  *(_QWORD *)(a4 + 4) = 0;
  *(float *)(a4 + 12) = -v56;
  v57 = v54 * -2.0;
  v58 = (v43 - v42) * 1.73205081 * 0.5 * ((v43 - v42) * 1.73205081 * 0.5) + v54 * v54;
  *(_OWORD *)(a4 + 16) = xmmword_1B66282F0;
  *(float *)(a4 + 32) = v57;
  *(float *)(a4 + 36) = v58;
  *(_DWORD *)a6 = 1065353216;
  *(float *)(a6 + 4) = -v56;
  *(_QWORD *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 16) = 0;
  v59 = *(float *)(a4 + 32);
  v60 = *(float *)(a4 + 36);
  *(_DWORD *)(a6 + 20) = 1065353216;
  *(float *)(a6 + 24) = v59;
  *(float *)(a6 + 28) = v60;
  *(_QWORD *)(a6 + 32) = 0;
  v61 = *(float *)a4
      / (*(float *)(a4 + 32) + 1.0 + *(float *)(a4 + 36))
      / (*(float *)(a4 + 12) + 1.0)
      / (float)(1.0 - v56)
      / (float)((float)(v59 + 1.0) + v60);
  v62 = v61 * DspLib::dB2Amp((DspLib *)a1, a1[67]);
  v63 = 100000000.0;
  if (v62 <= 100000000.0)
    v63 = v62;
  if (v62 >= 1.0)
    v64 = v63;
  else
    v64 = 1.0;
  *(float32x2_t *)a6 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)a6), v64));
  v65 = v64 * *(float *)(a6 + 8);
  *(float *)(a6 + 8) = v65;
  DspLib::Biquad::Design::integrator((DspLib::Biquad::Design *)2, a1[68], 45.0, a2, (uint64_t)&v69);
  *(_OWORD *)(a6 + 40) = v69;
  *(_DWORD *)(a6 + 56) = v70;
  if ((DspLib::Biquad::validate((__int128 *)a4, a5) & 1) == 0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 914;
    goto LABEL_39;
  }
  result = DspLib::Biquad::validate((__int128 *)a6, a7);
  if ((result & 1) == 0)
  {
    v67 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    v68 = 915;
    goto LABEL_39;
  }
  return result;
}

uint64_t DspLib::BassKoenig::calculateLoudspeakerModelCoefficientsLegacy(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  long double v43;
  long double v44;
  double v45;
  long double v46;
  long double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  uint64_t result;
  int v59;
  char *v60;

  v7 = (float)(a1[23] / 10000.0) * (float)(a1[23] / 10000.0);
  if (v7 == 0.0)
  {
    v59 = 654;
LABEL_29:
    v60 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassKoenig/dsp/DspLibBassKoenig.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v60, v59);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  v8 = a1[21];
  if ((float)(v8 * v8) == 0.0)
  {
    v59 = 656;
    goto LABEL_29;
  }
  v9 = a1[20] / 1000.0;
  if (v9 == 0.0)
  {
    v59 = 661;
    goto LABEL_29;
  }
  v10 = (float)(a1[22] / 1000.0) / 140002.31 / v7;
  if (v10 == 0.0)
  {
    v59 = 662;
    goto LABEL_29;
  }
  v11 = (float)(v8 * v8);
  v12 = (float)(a2 * a2);
  v13 = a2;
  v14 = a2 * v12;
  v15 = a1[16] / v11;
  v16 = (float)(a1[17] / 1000.0) / v11;
  v17 = 1.0 / v9 + 1.0 / v10;
  v18 = (float)(a1[18] / 1000.0);
  v19 = v16 * v18;
  v20 = a1[19];
  v21 = v16 * v20 + v15 * v18;
  v22 = v16 * v17 + v15 * v20 + 1.0;
  v23 = v15 * v17;
  v24 = (v13 + v13) * v22;
  v25 = v12 * 4.0;
  v26 = v23 + v24 + v12 * 4.0 * v21 + v14 * 8.0 * v19;
  if (v26 == 0.0)
  {
    v59 = 696;
    goto LABEL_29;
  }
  v31 = v23 - v24 + v25 * v21 - v14 * 8.0 * v19;
  v32 = v14 * 24.0;
  v33 = 1.0 / v26;
  v34 = (v24 + v23 * 3.0 - v25 * v21 - v32 * v19) * (1.0 / v26);
  v35 = (-(v24 - v23 * 3.0) - v25 * v21 + v32 * v19) * (1.0 / v26);
  v36 = (v35 - v34 * v34 / 3.0) * ((v35 - v34 * v34 / 3.0) * (v35 - v34 * v34 / 3.0));
  v37 = v31 * (1.0 / v26) + v34 * (v34 * (v34 + v34)) / 27.0 - v34 * v35 / 3.0;
  v38 = sqrt(fabs(v36 / 27.0 + v37 * v37 * 0.25));
  v39 = v37 * -0.5;
  v40 = v37 * -0.5 + v38;
  v41 = 0.0;
  v42 = 0.0;
  if (v40 != 0.0)
  {
    if (v40 < 0.0)
    {
      v43 = log(-v40);
      v42 = -exp(v43 * 0.333333333);
    }
    else
    {
      v44 = log(v40);
      v42 = exp(v44 * 0.333333333);
    }
  }
  v45 = v39 - v38;
  if (v39 - v38 != 0.0)
  {
    if (v39 - v38 < 0.0)
    {
      v46 = log(-v45);
      v41 = -exp(v46 * 0.333333333);
    }
    else
    {
      v47 = log(v45);
      v41 = exp(v47 * 0.333333333);
    }
  }
  v48 = v34 / -3.0 - (v42 + v41) * 0.5;
  v49 = (v42 - v41) * 1.73205081 * 0.5;
  v50 = 0.9999;
  if (v48 <= 0.9999)
    v50 = v34 / -3.0 - (v42 + v41) * 0.5;
  if (v48 >= -0.9999)
    v51 = v50;
  else
    v51 = -0.9999;
  v52 = v34 / -3.0 + v42 + v41;
  v53 = -v52;
  *(float32x2_t *)a4 = vcvt_f32_f64(vmulq_f64(vmulq_n_f64((float64x2_t)xmmword_1B6628750, v33 / v8), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)));
  *(_DWORD *)(a4 + 8) = 0;
  *(float *)(a4 + 12) = -v52;
  v54 = v51 * -2.0;
  v55 = v49 * v49 + v51 * v51;
  *(_OWORD *)(a4 + 16) = xmmword_1B6628760;
  *(float *)(a4 + 32) = v54;
  *(float *)(a4 + 36) = v55;
  v56 = cos(144.513262 / v13) * -1.91600001;
  *(_DWORD *)a6 = 1065353216;
  *(float *)(a6 + 4) = v53;
  *(_DWORD *)(a6 + 8) = 0;
  *(float *)(a6 + 12) = v56;
  *(_DWORD *)(a6 + 16) = 1063973525;
  v57 = *(_QWORD *)(a4 + 32);
  *(_DWORD *)(a6 + 20) = 1065353216;
  *(_QWORD *)(a6 + 24) = v57;
  *(_QWORD *)(a6 + 32) = 0;
  *(_DWORD *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = DspLib::Biquad::kBypassSection;
  if (!DspLib::Biquad::validate((__int128 *)a4, a5))
  {
    v59 = 779;
    goto LABEL_29;
  }
  result = DspLib::Biquad::validate((__int128 *)a6, a7);
  if ((result & 1) == 0)
  {
    v59 = 780;
    goto LABEL_29;
  }
  return result;
}

void std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::resize(uint64_t a1, unint64_t a2)
{
  DspLib::BassKoenig::Algorithm::HighpassChannel **v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(DspLib::BassKoenig::Algorithm::HighpassChannel ***)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (DspLib::BassKoenig::Algorithm::HighpassChannel **)v5)
        std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](--v3, 0);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__append((char **)a1, a2 - v4);
  }
}

void DspLib::BassKoenig::Algorithm::HighpassChannel::setCoefficients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  unint64_t v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;

  v10 = ((unint64_t)LODWORD(a5) << 32) | 0xF;
  v11 = (double *)((unint64_t)LODWORD(a6) << 32);
  DspLib::Biquad::ParametricFilter::setParametricEQ(a1, v10, v11, 0, 0x41uLL);
  if (a2)
    v12 = v10;
  else
    v12 = 0x447A000000000017;
  if (a2)
    v13 = (uint64_t)v11;
  else
    v13 = 0x3F80000000000000;
  DspLib::Biquad::ParametricFilter::setParametricEQ(a1, v12, (double *)v13, 1, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients(a1 + 104, a3, a4, 0, 0x41uLL);
}

void DspLib::BassKoenig::Algorithm::processBlock(DspLib::BassKoenig::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  void *v7;
  unint64_t v8;
  float v9;
  float v10;
  float *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  float *v16;
  float *v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  unint64_t v40;
  float *v41;
  float v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  __int128 v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  float *v73;
  _QWORD v74[2];

  v74[1] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v7 = (void *)DspLibBuffer::channel(a3, 0);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  if (cycle_count)
  {
    if (*((_BYTE *)this + 40))
    {
      LODWORD(v8) = *((_DWORD *)this + 352);
      v9 = -1.0
         / (*((double *)this + 3)
          / (double)v8
          / (double)cycle_count
          * *(float *)(*((_QWORD *)this + 6) + 184)
          / 1000.0);
      v10 = expf(v9);
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    }
    else
    {
      v10 = 0.0;
    }
    if (a2 != a3)
      DspLibBuffer::operator=((uint64_t)a3, a2);
    v11 = (float *)*((_QWORD *)this + 6);
    if (v11[2] >= 0.5 && v11[14] < 0.5)
    {
      DspLib::Biquad::Filter::process((_QWORD *)this + 105, (uint64_t)v7, cycle_count, (uint64_t)v7, (float **)cycle_count);
      v11 = (float *)*((_QWORD *)this + 6);
    }
    v12 = (void *)*((_QWORD *)this + 28);
    if (vcvtas_u32_f32(v11[6]) < 2)
    {
      v14 = memmove(v12, v7, 4 * cycle_count);
      v15 = cycle_count;
    }
    else
    {
      v13 = (uint64_t)(*((_QWORD *)this + 30) - (_QWORD)v12) >> 2;
      v73 = (float *)v7;
      v74[0] = v12;
      *(_QWORD *)&v71 = v74;
      *((_QWORD *)&v71 + 1) = 1;
      v72 = v13;
      *(_QWORD *)&v69 = &v73;
      *((_QWORD *)&v69 + 1) = 1;
      v70 = cycle_count;
      DspLib::DownSampler::process((unsigned int *)this + 182, &v69, &v71);
      v15 = v72;
    }
    v16 = (float *)*((_QWORD *)this + 28);
    v17 = (float *)*((_QWORD *)this + 31);
    if (*((_BYTE *)this + 40))
    {
      *((float *)this + 357) = v10 * *((float *)this + 357);
      DspLib::abs(v16, v15, v17);
      v18 = DspLib::maxv(v17, v15);
      if (v18 > *((float *)this + 357))
        *((float *)this + 357) = v18;
      *(_QWORD *)&v69 = v16;
      *(_QWORD *)&v71 = &v69;
      *((_QWORD *)&v71 + 1) = 1;
      v72 = v15;
      DspLib::RMS::process((uint64_t)this + 344, &v71, v17, v15);
      *((float *)this + 358) = *v17;
    }
    if (*(float *)(*((_QWORD *)this + 6) + 56) < 0.5)
    {
      DspLib::multiply(v16, v15, *((float *)this + 354));
      DspLib::Biquad::Filter::process((_QWORD *)this + 118, (uint64_t)v16, v15, (uint64_t)v16, (float **)v15);
      if (*(float *)(*((_QWORD *)this + 6) + 52) >= 0.5)
        DspLib::Biquad::Filter::process((_QWORD *)this + 131, (uint64_t)v16, v15, (uint64_t)v16, (float **)v15);
    }
    v67 = v7;
    v68 = cycle_count;
    v66 = (uint64_t)&v66;
    MEMORY[0x1E0C80A78](v14);
    v21 = (char *)&v66 - v20;
    if (v19 >= 0x200)
      v22 = 512;
    else
      v22 = v19;
    bzero((char *)&v66 - v20, v22);
    v24 = (uint64_t *)*((_QWORD *)this + 34);
    v25 = *((_QWORD *)this + 35) - (_QWORD)v24;
    v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
    if (v25)
    {
      v27 = 0;
      do
      {
        v28 = *v24;
        v24 += 3;
        *(_QWORD *)&v21[8 * v27++] = v28;
      }
      while (v26 > v27);
    }
    v30 = (uint64_t *)*((_QWORD *)this + 37);
    v29 = (_QWORD *)*((_QWORD *)this + 38);
    v31 = 0xAAAAAAAAAAAAAAABLL * (v29 - v30);
    MEMORY[0x1E0C80A78](v23);
    v34 = (char *)&v66 - v33;
    if (v32 >= 0x200)
      v35 = 512;
    else
      v35 = v32;
    bzero((char *)&v66 - v33, v35);
    if (v29 != v30)
    {
      v36 = 0;
      do
      {
        v37 = *v30;
        v30 += 3;
        *(_QWORD *)&v34[8 * v36++] = v37;
      }
      while (v31 > v36);
    }
    v39 = v67;
    v38 = v68;
    if (*((_DWORD *)this + 338))
    {
      v40 = 0;
      do
      {
        DspLib::BassKoenig::Algorithm::HighpassChannel::process(*(_QWORD **)(*((_QWORD *)this + 140) + 8 * v40), (uint64_t)v16, v15, *(_QWORD *)&v21[8 * v40], (float **)v15, *(_QWORD *)&v34[8 * v40], (float **)v15);
        ++v40;
      }
      while (v40 < *((unsigned int *)this + 338));
    }
    *(_QWORD *)&v71 = v21;
    *((_QWORD *)&v71 + 1) = v26;
    v72 = v15;
    *(_QWORD *)&v69 = v21;
    *((_QWORD *)&v69 + 1) = v26;
    v70 = v15;
    DspLib::MultiChannelCircularDelay::process((const void **)this + 170, &v71, &v69);
    *((_DWORD *)this + 349) = 0;
    v41 = (float *)*((_QWORD *)this + 6);
    if (v41[50] > 0.5 || v41[53] > 0.5 || v41[56] > 0.5 || (v42 = 0.0, v41[63] > 0.5))
      v42 = *((float *)this + 350);
    if (v15)
    {
      v43 = 0;
      v44 = (*((_DWORD *)this + 338) - 1);
      v45 = *((float *)this + 347) / *((float *)this + 346);
      while (1)
      {
        if ((_DWORD)v44)
        {
          v46 = (uint64_t *)*((_QWORD *)this + 37);
          v47 = 0.0;
          v48 = v44;
          do
          {
            v49 = *v46;
            v46 += 3;
            if (*(float *)(v49 + 4 * v43) > v45)
              v47 = v47 + 1.0;
            --v48;
          }
          while (v48);
        }
        else
        {
          v47 = 0.0;
        }
        v50 = *((float *)this + 348);
        if (v47 > v50)
          break;
        if (v47 < v50)
        {
          v51 = v47 - v50;
          v52 = *((float *)this + 362);
          goto LABEL_53;
        }
LABEL_54:
        if (v50 <= v42)
        {
          v53 = *((_DWORD *)this + 363);
          v50 = v42;
        }
        else
        {
          v53 = -1;
        }
        *((_DWORD *)this + 364) = v53;
        v16[v43] = v50;
        if (v50 > *((float *)this + 349))
          *((float *)this + 349) = v50;
        v43 = (v43 + 1);
        if (v15 <= v43)
          goto LABEL_60;
      }
      v51 = v47 - v50;
      v52 = *((float *)this + 361);
LABEL_53:
      v50 = v50 + (float)(v51 * v52);
      *((float *)this + 348) = v50;
      goto LABEL_54;
    }
LABEL_60:
    v73 = v16;
    v74[0] = v16;
    *(_QWORD *)&v71 = v74;
    *((_QWORD *)&v71 + 1) = 1;
    v72 = v15;
    *(_QWORD *)&v69 = &v73;
    *((_QWORD *)&v69 + 1) = 1;
    v70 = v15;
    DspLib::FIR::process((uint64_t)this + 1144, &v71, &v69);
    if (v15)
    {
      v54 = 0;
      v55 = *((unsigned int *)this + 338);
      do
      {
        v56 = v16[v54];
        v17[v54] = 0.0;
        if ((_DWORD)v55)
        {
          v57 = 0;
          v58 = 0.0;
          do
          {
            v59 = 1.0 - vabds_f32(v56, (float)v57);
            if (v59 < 0.0)
              v59 = 0.0;
            v58 = v58 + (float)(*(float *)(*(_QWORD *)&v21[8 * v57] + 4 * v54) * v59);
            v17[v54] = v58;
            ++v57;
          }
          while (v55 != v57);
        }
        ++v54;
      }
      while (v15 > v54);
    }
    if (*((_BYTE *)this + 40))
    {
      *(_QWORD *)&v69 = v17;
      *(_QWORD *)&v71 = &v69;
      *((_QWORD *)&v71 + 1) = 1;
      v72 = v15;
      DspLib::RMS::process((uint64_t)this + 536, &v71, v16, v15);
      *((float *)this + 360) = *v16;
    }
    if (vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6) + 24)) < 2)
    {
      if (v15)
        memmove(v39, v17, 4 * v15);
    }
    else
    {
      v73 = v17;
      v74[0] = v39;
      *(_QWORD *)&v71 = &v73;
      *((_QWORD *)&v71 + 1) = 1;
      v72 = v15;
      *(_QWORD *)&v69 = v74;
      *((_QWORD *)&v69 + 1) = 1;
      v70 = v38;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 184, &v71, &v69);
    }
    if (*((_BYTE *)this + 40))
    {
      DspLib::CPUMeasure::stop((DspLib::BassKoenig::Algorithm *)((char *)this + 72), v38, *((double *)this + 3));
      if (*((_BYTE *)this + 40))
      {
        v60 = 0;
        v61 = v10 * *((float *)this + 359);
        *((float *)this + 359) = v61;
        do
        {
          v62 = fabsf(*((float *)v39 + v60));
          if (v62 > v61)
          {
            *((float *)this + 359) = v62;
            v61 = v62;
          }
          ++v60;
        }
        while (v38 > v60);
        DspLib::Biquad::Filter::process((_QWORD *)this + 151, (uint64_t)v17, v15, (uint64_t)v17, (float **)v15);
        DspLib::multiply(v17, v15, *(float *)(*((_QWORD *)this + 6) + 36));
        v73 = v17;
        v74[0] = v17;
        *(_QWORD *)&v71 = v74;
        *((_QWORD *)&v71 + 1) = 1;
        v72 = v15;
        *(_QWORD *)&v69 = &v73;
        *((_QWORD *)&v69 + 1) = 1;
        v70 = v15;
        DspLib::EnvelopeProcessor::process((uint64_t)this + 1280, (uint64_t)&v71, &v69);
        v63 = v10 * *((float *)this + 355);
        *((float *)this + 355) = v63;
        if (v15)
        {
          v64 = 0;
          do
          {
            v65 = v17[v64];
            if (v65 > v63)
            {
              *((float *)this + 355) = v65;
              v63 = v65;
            }
            ++v64;
          }
          while (v15 > v64);
        }
        if (v63 > *((float *)this + 356))
          *((float *)this + 356) = v63;
      }
    }
  }
}

void DspLib::BassKoenig::Algorithm::HighpassChannel::process(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float **a5, uint64_t a6, float **a7)
{
  __int128 v12;
  float **v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  DspLib::Biquad::Filter::process(a1, a2, a3, a4, a5);
  DspLib::Biquad::Filter::process(a1 + 13, a4, (uint64_t)a5, a6, a7);
  v15 = a6;
  v16 = a6;
  v14[0] = &v16;
  v14[1] = 1;
  v14[2] = a7;
  *(_QWORD *)&v12 = &v15;
  *((_QWORD *)&v12 + 1) = 1;
  v13 = a7;
  DspLib::EnvelopeProcessor::process((uint64_t)(a1 + 22), (uint64_t)v14, &v12);
}

float DspLib::BassKoenig::Algorithm::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(float *)(a1 + 1396);
  v6 = 0.0;
  if (v5 >= 0.0)
  {
    v6 = *(float *)(v4 + 12);
    if (v6 >= v5)
      v6 = *(float *)(a1 + 1396);
  }
  *(float *)(a1 + 1396) = v6;
  *(float *)(a2 + 12) = log10f(*(float *)(a1 + 1428) + 0.000001) * 20.0;
  *(float *)(a2 + 24) = log10f(*(float *)(a1 + 1432) + 1.0e-12) * 10.0;
  *(float *)(a2 + 16) = log10f(*(float *)(a1 + 1436) + 0.000001) * 20.0;
  *(float *)(a2 + 32) = log10f(*(float *)(a1 + 1440) + 1.0e-12) * 10.0;
  *(float *)(a2 + 20) = *(float *)(a1 + 1436) * *(float *)(v4 + 36);
  *(float *)(a2 + 28) = sqrtf(*(float *)(a1 + 1440)) * *(float *)(v4 + 36);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 1396);
  v7 = *(float *)(v4 + 16);
  v8 = *(float *)(a1 + 1396);
  v9 = logf(*(float *)(a1 + 1404));
  *(float *)a2 = v7 * expf(v8 * v9);
  v10 = *(float *)(v4 + 16);
  v11 = *(float *)(a1 + 1392);
  v12 = logf(*(float *)(a1 + 1404));
  *(float *)(a2 + 64) = v10 * expf(v11 * v12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 1420);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 1424);
  *(float *)(a2 + 36) = (float)*(unsigned int *)(a1 + 216);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(v4 + 236);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v4 + 240);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(v4 + 244);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 + 248);
  v13 = *(double *)(a1 + 24);
  *(float *)(a2 + 60) = v13;
  result = (float)*(int *)(a1 + 1456);
  *(float *)(a2 + 68) = result;
  return result;
}

void DspLib::BassKoenig::Algorithm::~Algorithm(DspLib::BassKoenig::Algorithm *this)
{
  DspLib::BassKoenig::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void **v19;

  *(_QWORD *)this = &off_1E69C3550;
  v19 = (void **)((char *)this + 1360);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v19);
  v2 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v19 = (void **)((char *)this + 1312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 1288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 1256));
  v3 = (void *)*((_QWORD *)this + 154);
  if (v3)
  {
    *((_QWORD *)this + 155) = v3;
    operator delete(v3);
  }
  v19 = (void **)((char *)this + 1184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v4 = (void *)*((_QWORD *)this + 144);
  if (v4)
  {
    *((_QWORD *)this + 145) = v4;
    operator delete(v4);
  }
  v19 = (void **)((char *)this + 1120);
  std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__destroy_vector::operator()[abi:ne180100](&v19);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 1096));
  v5 = (void *)*((_QWORD *)this + 134);
  if (v5)
  {
    *((_QWORD *)this + 135) = v5;
    operator delete(v5);
  }
  v19 = (void **)((char *)this + 1024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 992));
  v6 = (void *)*((_QWORD *)this + 121);
  if (v6)
  {
    *((_QWORD *)this + 122) = v6;
    operator delete(v6);
  }
  v19 = (void **)((char *)this + 920);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm *)((char *)this + 888));
  v7 = (void *)*((_QWORD *)this + 108);
  if (v7)
  {
    *((_QWORD *)this + 109) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 102);
  if (v8)
  {
    *((_QWORD *)this + 103) = v8;
    operator delete(v8);
  }
  v19 = (void **)((char *)this + 784);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 752);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 696);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v9 = (void *)*((_QWORD *)this + 81);
  if (v9)
  {
    *((_QWORD *)this + 82) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 78);
  if (v10)
  {
    *((_QWORD *)this + 79) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 73);
  if (v11)
  {
    *((_QWORD *)this + 74) = v11;
    operator delete(v11);
  }
  v19 = (void **)((char *)this + 504);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v12 = (void *)*((_QWORD *)this + 57);
  if (v12)
  {
    *((_QWORD *)this + 58) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 54);
  if (v13)
  {
    *((_QWORD *)this + 55) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 49);
  if (v14)
  {
    *((_QWORD *)this + 50) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 40);
  if (v15)
  {
    *((_QWORD *)this + 41) = v15;
    operator delete(v15);
  }
  v19 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v16 = (void *)*((_QWORD *)this + 31);
  if (v16)
  {
    *((_QWORD *)this + 32) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 28);
  if (v17)
  {
    *((_QWORD *)this + 29) = v17;
    operator delete(v17);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v18 = (void *)*((_QWORD *)this + 6);
  if (v18)
  {
    *((_QWORD *)this + 7) = v18;
    operator delete(v18);
  }
}

uint64_t DspLib::BassKoenig::Algorithm::numStatus(DspLib::BassKoenig::Algorithm *this)
{
  return 18;
}

void DspLib::EnvelopeProcessor::~EnvelopeProcessor(DspLib::EnvelopeProcessor *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  DspLib::BassKoenig::Algorithm::HighpassChannel **v2;
  DspLib::BassKoenig::Algorithm::HighpassChannel **v4;
  void *v5;

  v1 = *a1;
  v2 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)**a1;
  if (v2)
  {
    v4 = (DspLib::BassKoenig::Algorithm::HighpassChannel **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100]((DspLib::BassKoenig::Algorithm::HighpassChannel **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

DspLib::BassKoenig::Algorithm::HighpassChannel *std::unique_ptr<DspLib::BassKoenig::Algorithm::HighpassChannel>::reset[abi:ne180100](DspLib::BassKoenig::Algorithm::HighpassChannel **a1, DspLib::BassKoenig::Algorithm::HighpassChannel *a2)
{
  DspLib::BassKoenig::Algorithm::HighpassChannel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::BassKoenig::Algorithm::HighpassChannel::~HighpassChannel(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void DspLib::BassKoenig::Algorithm::HighpassChannel::~HighpassChannel(DspLib::BassKoenig::Algorithm::HighpassChannel *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = (void **)((char *)this + 208);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)this + 152));
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)this + 48));
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

DspLib::BassKoenig::Algorithm::HighpassChannel *DspLib::BassKoenig::Algorithm::HighpassChannel::HighpassChannel(DspLib::BassKoenig::Algorithm::HighpassChannel *this)
{
  DspLib::Biquad::Filter *v2;

  *((_BYTE *)this + 104) = 0;
  v2 = (DspLib::BassKoenig::Algorithm::HighpassChannel *)((char *)this + 104);
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 196) = 0u;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_QWORD *)((char *)this + 228) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_BYTE *)this + 176) = 0;
  DspLib::Biquad::ParametricFilter::initialize(this, 1uLL, 44100.0, 2uLL);
  DspLib::Biquad::Filter::initialize(v2, 1uLL, 2uLL);
  return this;
}

void sub_1B60B34E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::Biquad::Filter *v2;

  DspLib::EnvelopeProcessor::~EnvelopeProcessor((DspLib::EnvelopeProcessor *)(v1 + 176));
  DspLib::Biquad::Filter::~Filter(v2);
  DspLib::Biquad::ParametricFilter::~ParametricFilter((DspLib::Biquad::ParametricFilter *)v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::initialize(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, double a2)
{
  *((double *)this + 1) = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8616), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8456), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8536), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8696), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8776), 0x200uLL);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8856), 0x200uLL);
  *(_BYTE *)this = 1;
  return DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset((float **)this);
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset(float **this)
{
  uint64_t result;

  DspLib::FFT::BufferedForwardSTFT::reset(this + 1035);
  DspLib::FFT::BufferedForwardSTFT::reset(this + 1046);
  DspLib::ComplexVector::operator=(this + 1077, 0.0);
  DspLib::ComplexVector::operator=(this + 1087, 0.0);
  DspLib::ComplexVector::operator=(this + 1097, 0.0);
  DspLib::ComplexVector::operator=(this + 1107, 0.0);
  DspLib::ComplexVector::operator=(this + 1057, 0.0);
  result = DspLib::ComplexVector::operator=(this + 1067, 0.0);
  *((_DWORD *)this + 11) = 1120403456;
  *((_BYTE *)this + 80) = 0;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::uninitialize(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8456), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8536), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8616), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8696), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8776), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8856), 0);
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setParameters(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, const DspLib::AlgorithmParametersInstance *a2)
{
  float v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;

  v4 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 5);
  v5 = *((double *)this + 1) * 0.0009765625;
  v6 = vcvtas_u32_f32(v4 / v5);
  if (v6 >= 0x1FF)
    v6 = 511;
  *((_QWORD *)this + 2) = v6;
  v7 = DspLib::AlgorithmParametersInstance::group(a2, 3u);
  v8 = *((double *)this + 1) * 0.001953125;
  *((float *)this + 18) = expf(-1.0 / (float)((float)((float)(*(float *)(v7 + 8) * 1000.0) * v8) / 1000.0));
  v9 = DspLib::AlgorithmParametersInstance::group(a2, 4u);
  v10 = *((double *)this + 1) * 0.001953125;
  *((float *)this + 19) = expf(-1.0 / (float)((float)((float)(*(float *)v9 * 1000.0) * v10) / 1000.0));
  if (!*((_BYTE *)this + 56))
  {
    *((_DWORD *)this + 16) = *(_DWORD *)(v7 + 4);
    *((_DWORD *)this + 15) = *(_DWORD *)v7;
  }
  v11 = 1.0;
  if (*(float *)(v7 + 16) >= 0.5)
    v11 = -1.0;
  *((float *)this + 17) = v11;
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setFftWindows(this, v11);
  *((_DWORD *)this + 6) = *(_DWORD *)(v9 + 16);
  *((_DWORD *)this + 7) = *(_DWORD *)(v9 + 20);
  *((_BYTE *)this + 34) = *(float *)(v9 + 4) >= 0.5;
  v12 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000000);
  if (v12 >= 0.5 && !*((_BYTE *)this + 33))
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset((float **)this);
  *((_BYTE *)this + 33) = v12 >= 0.5;
  v13 = 0;
  DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (float *)this + 9, (float *)this + 10, &v13);
  if (!v13)
    *((_DWORD *)this + 11) = 1120403456;
  *((_BYTE *)this + 48) = 1;
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setFftWindows(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, float a2)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v3 = (float *)((char *)this + 84);
  v4 = *((float *)this + 15) * a2;
  DspLib::makePeriodicHannWindow((_DWORD *)this + 21, 0x400uLL);
  v5 = DspLib::norm(v3, 0x400uLL);
  DspLib::multiply(v3, 0x400uLL, v4 / v5);
  v6 = *((float *)this + 16);
  DspLib::makePeriodicHannWindow((_DWORD *)this + 1045, 0x400uLL);
  v7 = v6 / DspLib::norm((const float *)this + 1045, 0x400uLL);
  DspLib::multiply((float *)this + 1045, 0x400uLL, v7);
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setSpVACalibration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 56) = 1;
  *(int32x2_t *)(a1 + 60) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setFftWindows((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)a1, *(float *)(a1 + 68));
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::process(uint64_t this, float *a2, float *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  char *v12;
  DspLib::ComplexSpan *v13;
  float v14;
  DspLib::ComplexSpan *v15;
  float v16;
  DspLib::ComplexSpan *v17;
  float v18;
  unint64_t v19;
  float v20;
  int v21;
  int v22;
  float v23;
  float v24;
  float v25;
  int v26;
  const DSPComplex *v27;
  float v28;
  const DSPComplex *v29;
  unint64_t *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  char *v35;
  int v36;
  _DWORD v38[2];
  BOOL v39[4];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)this)
  {
    v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceMeasurement.cpp");
    v36 = 142;
LABEL_20:
    this = printf("DSP Sound assertion in %s at line %d\n", v35, v36);
    ++DspLibDebug::mAssertCounter;
    return this;
  }
  v4 = this;
  if (!*(_BYTE *)(this + 48))
  {
    v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceMeasurement.cpp");
    v36 = 143;
    goto LABEL_20;
  }
  if (a4)
  {
    v39[0] = 0;
    DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readRdc((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (float *)(this + 36), (float *)(this + 40), v39);
    if (!v39[0])
      *(_DWORD *)(v4 + 44) = 1120403456;
    v9 = MEMORY[0x1E0C80A78](v8);
    v10 = (float *)((char *)&v38[-2] - ((4 * a4 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1E0C80A78](v9);
    v12 = (char *)&v38[-2] - v11;
    memcpy(v10, a2, 4 * a4);
    memcpy(v12, a3, 4 * a4);
    *v10 = *v10 + 0.000001;
    DspLib::FFT::BufferedForwardSTFT::addInput(v4 + 8280, v10, a4, (DSPSplitComplex *)(v4 + 8776));
    DspLib::FFT::BufferedForwardSTFT::addInput(v4 + 8368, v12, a4, (DSPSplitComplex *)(v4 + 8856));
    if (*(_QWORD *)(v4 + 8440))
    {
      DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v4 + 8856), (DSPSplitComplex *)(v4 + 8776), (DSPSplitComplex *)(v4 + 8696), v13);
      v14 = *(float *)(v4 + 72);
      DspLib::operator*=(v4 + 8616, v14);
      DspLib::operator*=(v4 + 8696, 1.0 - v14);
      DspLib::operator+=((DSPSplitComplex *)(v4 + 8616), (DSPSplitComplex *)(v4 + 8696));
      DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v4 + 8776), (DSPSplitComplex *)(v4 + 8776), (DSPSplitComplex *)(v4 + 8696), v15);
      v16 = *(float *)(v4 + 72);
      DspLib::operator*=(v4 + 8456, v16);
      DspLib::operator*=(v4 + 8696, 1.0 - v16);
      DspLib::operator+=((DSPSplitComplex *)(v4 + 8456), (DSPSplitComplex *)(v4 + 8696));
      DspLib::FFT::powerSpectrum((DSPSplitComplex *)(v4 + 8856), (DSPSplitComplex *)(v4 + 8856), (DSPSplitComplex *)(v4 + 8696), v17);
      v18 = *(float *)(v4 + 72);
      DspLib::operator*=(v4 + 8536, v18);
      DspLib::operator*=(v4 + 8696, 1.0 - v18);
      DspLib::operator+=((DSPSplitComplex *)(v4 + 8536), (DSPSplitComplex *)(v4 + 8696));
      if (*(_BYTE *)(v4 + 32))
      {
        v19 = *(_QWORD *)(v4 + 16);
        *(_BYTE *)(v4 + 80) = 1;
        v20 = DspLib::ComplexSpan::operator[]((_QWORD *)(v4 + 8856), v19);
        v22 = v21;
        v23 = DspLib::ComplexSpan::operator[]((_QWORD *)(v4 + 8776), *(_QWORD *)(v4 + 16));
        v24 = *(float *)(v4 + 24);
        v25 = *(float *)(v4 + 28);
        *(float *)v39 = v20;
        v40 = v22;
        *(float *)v38 = v23;
        v38[1] = v26;
        v28 = DspLib::abs((DspLib *)v39, v27);
        v31 = (float)(v28 + (float)(v24 * 0.000000001)) / (float)(DspLib::abs((DspLib *)v38, v29) + 0.000000001);
        if (v31 <= v25)
          v32 = v31;
        else
          v32 = v25;
        if (v31 >= v24)
          v33 = v32;
        else
          v33 = v24;
        v34 = v33 + (float)(*(float *)(v4 + 76) * (float)(*(float *)(v4 + 40) - v33));
        *(float *)(v4 + 36) = v33;
        *(float *)(v4 + 40) = v34;
        *(float *)(v4 + 44) = vabds_f32(v33, v34);
        DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::takeRdcProcessTimeStamp((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, v30);
      }
      else
      {
        *(_BYTE *)(v4 + 80) = 0;
      }
    }
    return DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeRdc((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, *(float *)(v4 + 36), *(float *)(v4 + 40));
  }
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::status(uint64_t result, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  float v5;
  char *v6;

  if (*(_BYTE *)result)
  {
    v2 = *(_DWORD *)(result + 40);
    v3 = *(double *)(result + 8) * 0.0009765625;
    *(float *)(a2 + 140) = (float)*(unint64_t *)(result + 16) * v3;
    if (*(_BYTE *)(result + 80))
      v4 = 1.0;
    else
      v4 = 0.0;
    *(_DWORD *)a2 = v2;
    *(float *)(a2 + 4) = v4;
    *(_DWORD *)(a2 + 104) = *(_DWORD *)(result + 44);
    if (*(_BYTE *)(result + 56))
      v5 = 1.0;
    else
      v5 = 0.0;
    *(float *)(a2 + 232) = v5;
    *(_DWORD *)(a2 + 236) = *(_DWORD *)(result + 60);
    *(_DWORD *)(a2 + 240) = *(_DWORD *)(result + 64);
  }
  else
  {
    v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceMeasurement.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v6, 194);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::coherence(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, DspLibBuffer *a2)
{
  char *v3;
  char *v4;
  const DSPSplitComplex *v5;
  float *v6;
  vDSP_Length cycle_count;

  v3 = (char *)this + 8536;
  v4 = (char *)this + 8456;
  v5 = (const DSPSplitComplex *)((char *)this + 8616);
  v6 = (float *)DspLibBuffer::channel(a2, 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLib::FFT::coherence((uint64_t)v3, (uint64_t)v4, v5, v6, cycle_count);
}

float DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::impedance(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this, DSPSplitComplex *__C)
{
  DspLib::ComplexSpan *v4;

  DspLib::ComplexSpan::operator=(__C, (DSPSplitComplex *)((char *)this + 8616));
  return DspLib::FFT::divide(__C, (DSPSplitComplex *)((char *)this + 8456), v4);
}

uint64_t DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::voltagePowerSpectrum(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  return (uint64_t)this + 8536;
}

double DspLib::LoudnessMeter::Algorithm::Algorithm(DspLib::LoudnessMeter::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::LoudnessMeter::Parameters::kDefault, 5uLL, (uint64_t)&DspLib::LoudnessMeter::Parameters::kMinimum, 5, (uint64_t)&DspLib::LoudnessMeter::Parameters::kMaximum, 5);
  *(_QWORD *)v1 = &off_1E69C3660;
  *(_BYTE *)(v1 + 216) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_DWORD *)(v1 + 288) = 1;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_DWORD *)(v1 + 360) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = xmmword_1B6629600;
  *(_DWORD *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 546) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_DWORD *)(v1 + 564) = -1031012352;
  return result;
}

uint64_t DspLib::LoudnessMeter::Algorithm::initialize(DspLib::LoudnessMeter::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  char v5;
  char *v6;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4 && *((_DWORD *)this + 3))
  {
    v5 = 1;
    if (*((_DWORD *)this + 5) >= 0xFFFF0000)
    {
      v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessMeter/dsp/DspLibLoudnessMeter.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v6, 30);
      v5 = 0;
      ++DspLibDebug::mAssertCounter;
    }
    *((_BYTE *)this + 468) = v5;
    DspLib::LoudnessMeter::Algorithm::configureLKFSPreFilter(this);
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::LoudnessMeter::Algorithm *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::LoudnessMeter::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

void DspLib::LoudnessMeter::Algorithm::configureLKFSPreFilter(DspLib::LoudnessMeter::Algorithm *this)
{
  unint64_t v2;
  char *v3;
  vDSP_Length v4;
  float v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  float *v10;
  float *v11;

  DspLib_ITU1770_channelWeightsForLayout((char *)*((unsigned int *)this + 5), 0, (uint64_t)&v10);
  v2 = *((unsigned int *)this + 3);
  if (v2 != v11 - v10)
  {
    std::vector<float>::resize((uint64_t)&v10, v2);
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessMeter/dsp/DspLibLoudnessMeter.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 205);
    ++DspLibDebug::mAssertCounter;
  }
  DspLib::Biquad::Design::kWeighting(*((double *)this + 3), (uint64_t)&v8);
  DspLib::Biquad::Filter::initialize((DspLib::LoudnessMeter::Algorithm *)((char *)this + 216), *((unsigned int *)this + 3), 2uLL);
  v6 = v8;
  v7 = v9;
  if (*((_DWORD *)this + 3))
  {
    v4 = 0;
    do
    {
      v9 = v7;
      v8 = v6;
      v5 = sqrtf(v10[v4]);
      *(float32x2_t *)&v8 = vmul_n_f32(*(float32x2_t *)&v6, v5);
      *((float *)&v8 + 2) = v5 * *((float *)&v6 + 2);
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 216, (uint64_t)&v8, 2, 0, v4++);
    }
    while (v4 < *((unsigned int *)this + 3));
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
}

void sub_1B60B40C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::LoudnessMeter::Algorithm::uninitialize(DspLib::LoudnessMeter::Algorithm *this)
{
  *((_BYTE *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::LoudnessMeter::Algorithm *)((char *)this + 216));
  *((_QWORD *)this + 62) = *((_QWORD *)this + 61);
  *((_QWORD *)this + 65) = *((_QWORD *)this + 64);
  *((_QWORD *)this + 68) = *((_QWORD *)this + 67);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 42, 0);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 49);
}

void DspLib::LoudnessMeter::Algorithm::reset(DspLib::LoudnessMeter::Algorithm *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessMeter::Algorithm *)((char *)this + 264));
  DspLib::clear(*((float **)this + 61), (uint64_t)(*((_QWORD *)this + 62) - *((_QWORD *)this + 61)) >> 2);
  *(_QWORD *)((char *)this + 436) = 0;
  *(_QWORD *)((char *)this + 428) = 0;
  *((_DWORD *)this + 111) = 0;
  DspLib::clear(*((float **)this + 67), (uint64_t)(*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 2);
  v2 = *((_DWORD *)this + 141);
  *((_DWORD *)this + 112) = v2;
  *((_DWORD *)this + 113) = v2;
  *((_DWORD *)this + 114) = 0;
  v3 = *((_QWORD *)this + 42);
  v4 = *((_QWORD *)this + 43);
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 != v5)
      bzero(*(void **)v3, (v5 - *(_QWORD *)v3) & 0xFFFFFFFFFFFFFFFCLL);
    v3 += 24;
  }
  *((_DWORD *)this + 90) = 0;
}

void DspLib::LoudnessMeter::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = vcvtas_u32_f32(fmaxf(*(float *)v5, 0.0));
    if (v6 == 3)
    {
      *(_DWORD *)(a1 + 456) = 0;
      v7 = *(_QWORD *)(a1 + 336);
      v8 = *(_QWORD *)(a1 + 344);
      while (v7 != v8)
      {
        v9 = *(_QWORD *)(v7 + 8);
        if (*(_QWORD *)v7 != v9)
          bzero(*(void **)v7, (v9 - *(_QWORD *)v7) & 0xFFFFFFFFFFFFFFFCLL);
        v7 += 24;
      }
      *(_DWORD *)(a1 + 360) = 0;
    }
    else if (!v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      v5 = *(_QWORD *)(a1 + 48);
    }
    *(_DWORD *)(a1 + 564) = *(_DWORD *)(v5 + 8);
    DspLib::LoudnessMeter::Algorithm::configureAveragingBuffer((DspLib::LoudnessMeter::Algorithm *)a1);
    DspLib::LoudnessMeter::Algorithm::configureTruePeakUpsampler((DspLib::LoudnessMeter::Algorithm *)a1);
    DspLib::LoudnessMeter::Algorithm::configureHistogram((DspLib::LoudnessMeter::Algorithm *)a1, v10);
  }
}

void DspLib::LoudnessMeter::Algorithm::configureAveragingBuffer(DspLib::LoudnessMeter::Algorithm *this)
{
  float v1;
  double v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;

  v1 = *(float *)(*((_QWORD *)this + 6) + 16);
  v2 = *((double *)this + 3);
  v3 = vcvtad_u64_f64(v2 / 10.0);
  if (v3 <= 1)
    v3 = 1;
  *((_BYTE *)this + 561) = v1 > 0.0;
  *((_DWORD *)this + 104) = v3;
  v4 = vcvtad_u64_f64(v2 * 0.400000006);
  *((_DWORD *)this + 105) = v4;
  v5 = vcvtad_u64_f64(v2 * 3.0);
  if (v1 <= 0.0)
    v6 = v4;
  else
    v6 = v5;
  std::vector<float>::resize((uint64_t)this + 488, v6);
}

void DspLib::LoudnessMeter::Algorithm::configureTruePeakUpsampler(DspLib::LoudnessMeter::Algorithm *this)
{
  float v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(float *)(*((_QWORD *)this + 6) + 4);
  *((_BYTE *)this + 560) = v2 > 0.0;
  v3 = (uint64_t *)((char *)this + 392);
  if (v2 <= 0.0)
  {
    std::vector<std::vector<float>>::resize(v3, 0);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 42, 0);
  }
  else
  {
    std::vector<std::vector<float>>::resize(v3, *((unsigned int *)this + 3));
    v4 = *((_QWORD *)this + 49);
    v5 = *((_QWORD *)this + 50);
    while (v4 != v5)
    {
      std::vector<float>::resize(v4, (4 * *((_DWORD *)this + 8)));
      v4 += 24;
    }
    std::vector<std::vector<float>>::resize((uint64_t *)this + 42, *((unsigned int *)this + 3));
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::LoudnessMeter::Algorithm *)((char *)this + 288), 4, *((_DWORD *)this + 8));
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 72, (uint64_t)&DspLib::kTruePeakFIRcoefficients, 0x30uLL);
  }
}

void DspLib::LoudnessMeter::Algorithm::configureHistogram(DspLib::LoudnessMeter::Algorithm *this, unint64_t a2)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  DspLib *v7;
  float *v8;
  float *i;
  unint64_t v10;

  v3 = *((_QWORD *)this + 6);
  v4 = (float)(*(float *)(v3 + 8) + -10.0) + -0.691;
  *((float *)this + 118) = v4;
  v5 = *(float *)(v3 + 12);
  *((float *)this + 119) = v5;
  v6 = v5 - v4;
  LODWORD(a2) = vcvtas_u32_f32((float)(v6 / 0.1) + 1.0);
  *((_DWORD *)this + 120) = a2;
  *((float *)this + 121) = (float)(1.0 / v6) + 10.0;
  if (a2 != (uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 2)
  {
    std::vector<float>::resize((uint64_t)this + 512, a2);
    DspLib::ramp(*((float **)this + 64), (uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 2, 0, *((float *)this + 118), *((float *)this + 119));
    v8 = (float *)*((_QWORD *)this + 64);
    for (i = (float *)*((_QWORD *)this + 65); v8 != i; ++v8)
      *v8 = DspLib::dB2Power(v7, *v8 + 0.691);
  }
  v10 = *((unsigned int *)this + 120);
  if (v10 != (uint64_t)(*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 2)
  {
    std::vector<float>::resize((uint64_t)this + 536, v10);
    DspLib::clear(*((float **)this + 67), (uint64_t)(*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 2);
  }
}

void DspLib::LoudnessMeter::Algorithm::processBlock(DspLib::LoudnessMeter::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t cycle_count;
  vDSP_Length v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  unint64_t v31;
  float **v32;
  size_t v33;
  float **v34;
  float **v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _BYTE *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  _QWORD v57[3];
  float **v58[3];
  _QWORD v59[3];
  _QWORD v60[3];
  _QWORD v61[3];
  _QWORD v62[5];

  v62[3] = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
    DspLibBuffer::operator=((uint64_t)a3, a2);
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  if (*((_BYTE *)this + 468) && vcvtas_u32_f32(**((float **)this + 6)) == 2)
  {
    v6 = DspLibBuffer::numChannels(a2);
    v55 = (uint64_t)&v55;
    MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v56[-1] - v8;
    if (v7 >= 0x200)
      v10 = 512;
    else
      v10 = v7;
    bzero((char *)&v56[-1] - v8, v10);
    if (DspLibBuffer::numChannels(a2))
    {
      v11 = 0;
      do
      {
        *(_QWORD *)&v9[8 * v11] = DspLibBuffer::channel(a2, v11);
        ++v11;
      }
      while (v11 < DspLibBuffer::numChannels(a2));
    }
    v12 = DspLibBuffer::numChannels(a2);
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
    v14 = cycle_count;
    if (*((_BYTE *)this + 560))
    {
      MEMORY[0x1E0C80A78](cycle_count);
      v17 = (char *)&v56[-1] - v16;
      if (v15 >= 0x200)
        v18 = 512;
      else
        v18 = v15;
      bzero((char *)&v56[-1] - v16, v18);
      v19 = (uint64_t *)*((_QWORD *)this + 49);
      v20 = *((_QWORD *)this + 50) - (_QWORD)v19;
      v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
      if (v20)
      {
        v22 = 0;
        do
        {
          v23 = *v19;
          v19 += 3;
          *(_QWORD *)&v17[8 * v22++] = v23;
        }
        while (v21 > v22);
      }
      v62[0] = v9;
      v62[1] = v12;
      v62[2] = v14;
      v61[0] = v17;
      v61[1] = v21;
      v61[2] = 4 * v14;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 72, v62, v61);
      v60[0] = v17;
      v60[1] = v21;
      v60[2] = 4 * v14;
      v24 = DspLib::maxMagnitude(v60);
      if (v24 <= *((float *)this + 114))
        v24 = *((float *)this + 114);
      *((float *)this + 114) = v24;
    }
    if (v14 <= 1)
      v25 = 1;
    else
      v25 = v14;
    v26 = (float **)*((unsigned int *)this + 3);
    if (v26 == (float **)1)
      v27 = v25;
    else
      v27 = ((v25 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v28 = MEMORY[0x1E0C80A78](cycle_count);
    v30 = (float *)((char *)&v56[-1] - v29);
    MEMORY[0x1E0C80A78](v28);
    v32 = (float **)((char *)&v56[-1] - ((v31 + 15) & 0xFFFFFFFF0));
    if (v31 >= 0x200)
      v33 = 512;
    else
      v33 = v31;
    bzero((char *)&v56[-1] - ((v31 + 15) & 0xFFFFFFFF0), v33);
    if ((_DWORD)v26)
    {
      v34 = v26;
      v35 = v32;
      do
      {
        *v35++ = v30;
        v30 += v27;
        v34 = (float **)((char *)v34 - 1);
      }
      while (v34);
    }
    v59[0] = v9;
    v59[1] = v12;
    v59[2] = v14;
    v58[0] = v32;
    v58[1] = v26;
    v58[2] = (float **)v14;
    DspLib::Biquad::Filter::process((_QWORD *)this + 27, (uint64_t)v59, v58);
    v57[0] = v32;
    v57[1] = v26;
    v57[2] = v14;
    DspLib::square(v57);
    v56[0] = v32;
    v56[1] = v26;
    v56[2] = v14;
    DspLib::sum((uint64_t)v56, *v32, v14);
    v36 = vp::utility::CPU_Profiler::get_cycle_count(a2);
    if (v36)
    {
      v37 = 0;
      v38 = *((_DWORD *)this + 107);
      do
      {
        v39 = (*((_DWORD *)this + 104) - v38);
        if (v36 - v37 >= v39)
          v40 = v39;
        else
          v40 = v36 - v37;
        v41 = (char *)*((_QWORD *)this + 61);
        v42 = (_BYTE *)*((_QWORD *)this + 62);
        v43 = &v41[4 * v40];
        if (v42 != v43)
          memmove(v41, v43, v42 - v43);
        if (v40)
          memmove((void *)(*((_QWORD *)this + 62) - 4 * v40), &(*v32)[v37], 4 * v40);
        v38 = *((_DWORD *)this + 107) + v40;
        *((_DWORD *)this + 107) = v38;
        if (*((_DWORD *)this + 104) == v38)
        {
          v45 = *((_QWORD *)this + 61);
          v44 = *((_QWORD *)this + 62);
          v46 = DspLib::sum((const float *)(v44 - 4 * *((unsigned int *)this + 105)), *((unsigned int *)this + 105));
          v47 = *((unsigned int *)this + 105);
          v48 = v46 / (float)v47;
          v49 = (float)(log10f(v48 + 1.0e-12) * 10.0) + -0.691;
          *((float *)this + 113) = v49;
          if (*((_BYTE *)this + 561))
          {
            v50 = (v44 - v45) >> 2;
            v51 = DspLib::sum(*((const float **)this + 61), v50 - v47);
            *((float *)this + 112) = (float)(log10f((float)((float)(v46 + v51) / (float)(unint64_t)v50) + 1.0e-12)
                                           * 10.0)
                                   + -0.691;
            v49 = *((float *)this + 113);
          }
          if (v49 > *((float *)this + 141))
          {
            *((double *)this + 54) = *((double *)this + 54) + v48;
            ++*((_QWORD *)this + 55);
            v52 = *((float *)this + 118);
            if (v52 > v49)
              v49 = *((float *)this + 118);
            v53 = vcvtas_u32_f32(*((float *)this + 121) * (float)(v49 - v52));
            if (*((_DWORD *)this + 120) - 1 < v53)
              v53 = *((_DWORD *)this + 120) - 1;
            *(float *)(*((_QWORD *)this + 67) + 4 * v53) = *(float *)(*((_QWORD *)this + 67) + 4 * v53) + 1.0;
          }
          v38 = 0;
          *((_DWORD *)this + 107) = 0;
        }
        v37 = (v40 + v37);
      }
      while (v37 < v36);
    }
  }
  if (*((_BYTE *)this + 40))
  {
    v54 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    DspLib::CPUMeasure::stop((DspLib::LoudnessMeter::Algorithm *)((char *)this + 72), v54, *((double *)this + 3));
  }
}

uint64_t DspLib::LoudnessMeter::Algorithm::numStatus(DspLib::LoudnessMeter::Algorithm *this)
{
  return 4;
}

void DspLib::LoudnessMeter::Algorithm::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  DspLib *v5;
  int v6;
  float v7;

  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 452);
  v4 = 448;
  if (!*(_BYTE *)(a1 + 561))
    v4 = 564;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + v4);
  DspLib::LoudnessMeter::Algorithm::integratedLoudness((DspLib::LoudnessMeter::Algorithm *)a1);
  *(_DWORD *)a2 = v6;
  if (*(_BYTE *)(a1 + 560))
    v7 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 456), 0.000001);
  else
    v7 = -120.0;
  *(float *)(a2 + 12) = v7;
}

void DspLib::LoudnessMeter::Algorithm::integratedLoudness(DspLib::LoudnessMeter::Algorithm *this)
{
  unint64_t v2;
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  vDSP_Length v9;
  float v10;
  float v11;
  float v12;

  v2 = *((_QWORD *)this + 55);
  if (v2)
  {
    v3 = log10(*((double *)this + 54) / (double)v2) * 10.0 + -0.690999985 + -10.0;
    v4 = *((float *)this + 118);
    if (v4 > v3)
      v3 = *((float *)this + 118);
    v5 = vcvtas_u32_f32(*((float *)this + 121) * (float)(v3 - v4));
    v6 = *((_DWORD *)this + 120) - 1;
    if (v6 >= v5)
      v7 = v5;
    else
      v7 = v6;
    v8 = *((_QWORD *)this + 67);
    v9 = ((*((_QWORD *)this + 68) - v8) >> 2) - v7;
    v10 = DspLib::sum((const float *)(v8 + 4 * v7), v9);
    if (v10 > 0.0)
    {
      v11 = v10;
      v12 = DspLib::dotProduct((const float *)(*((_QWORD *)this + 67) + 4 * v7), v9, (const float *)(*((_QWORD *)this + 64) + 4 * v7));
      log10f(v12 / v11);
    }
  }
}

void DspLib::LoudnessMeter::Algorithm::~Algorithm(DspLib::LoudnessMeter::Algorithm *this)
{
  DspLib::LoudnessMeter::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(_QWORD *)this = &off_1E69C3660;
  v2 = (void *)*((_QWORD *)this + 67);
  if (v2)
  {
    *((_QWORD *)this + 68) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 64);
  if (v3)
  {
    *((_QWORD *)this + 65) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 61);
  if (v4)
  {
    *((_QWORD *)this + 62) = v4;
    operator delete(v4);
  }
  v8 = (void **)((char *)this + 392);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = (void *)*((_QWORD *)this + 46);
  if (v5)
  {
    *((_QWORD *)this + 47) = v5;
    operator delete(v5);
  }
  v8 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 304);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessMeter::Algorithm *)((char *)this + 264));
  v6 = (void *)*((_QWORD *)this + 30);
  if (v6)
  {
    *((_QWORD *)this + 31) = v6;
    operator delete(v6);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
}

double DspLib::LoudnessMeter::Algorithm::latencySamples(DspLib::LoudnessMeter::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::LoudnessMeter::Algorithm::meteringIsEnabled(DspLib::LoudnessMeter::Algorithm *this)
{
  return 1;
}

DspLib::VolumeTaper::Algorithm *DspLib::VolumeTaper::Algorithm::Algorithm(DspLib::VolumeTaper::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;

  v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition);
  *(_QWORD *)v2 = off_1E69C3780;
  *(_QWORD *)(v2 + 516) = 0x4120000041200000;
  *(_OWORD *)(v2 + 500) = xmmword_1B6629720;
  *(_WORD *)(v2 + 524) = 0;
  *(_BYTE *)(v2 + 528) = 0;
  *(_QWORD *)(v2 + 532) = 0x3C23D70A3F800000;
  *(_BYTE *)(v2 + 540) = 0;
  *(_BYTE *)(v2 + 544) = 0;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 584) = 0u;
  *(_OWORD *)(v2 + 600) = 0u;
  *(_BYTE *)(v2 + 616) = 0;
  *(_DWORD *)(v2 + 620) = 1008981770;
  *(_WORD *)(v2 + 624) = 0;
  v3 = DspLib::parameterAddress((uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition, 6);
  v4 = (float *)DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition, v3);
  *((float *)this + 157) = DspLib::dB2Amp((DspLib *)v4, v4[3]);
  memset_pattern16((char *)this + 432, &unk_1B6629740, 0x44uLL);
  return this;
}

void sub_1B60B4D68(_Unwind_Exception *a1)
{
  DspLib::AlgorithmBaseNewParameters *v1;
  DspLib::Biquad::Filter *v2;

  DspLib::Biquad::Filter::~Filter(v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::VolumeTaper::Algorithm::initialize(uint64_t **this, uint64_t a2, double a3)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  int v7;
  float v8;
  double *v9;
  _BYTE v11[20];
  __int128 v12;

  v4 = DspLib::AlgorithmBaseNewParameters::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    *((_BYTE *)this + 8) = 1;
    v5 = *((double *)this + 3);
    DspLib::VolumeTaper::SlewRateLimiter::setSamplerate((uint64_t)this + 500, v5);
    *((_BYTE *)this + 625) = 0;
    v6 = DspLib::parameterAddress((uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition, 4);
    v7 = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::VolumeTaper::Parameters::kDefinition, v6)+ 12);
    *((_DWORD *)this + 127) = v7;
    *((_DWORD *)this + 126) = v7;
    *((_DWORD *)this + 128) = 0;
    *((_BYTE *)this + 524) = 1;
    v12 = xmmword_1B6629730;
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(this + 68), 1uLL, 1uLL);
    v8 = *((double *)this + 3);
    DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v12, v8, 0, v9, (uint64_t)v11);
    DspLib::Biquad::Filter::setCoefficients((uint64_t)(this + 68), (uint64_t)v11, 1, 0, 0x41uLL);
    ((void (*)(uint64_t **, char *, _QWORD))(*this)[32])(this, (char *)this + 264, 0);
    ((void (*)(uint64_t **))(*this)[19])(this);
  }
  return v4;
}

uint64_t DspLib::VolumeTaper::SlewRateLimiter::setSamplerate(uint64_t this, float a2)
{
  float v2;

  *(float *)this = a2;
  if (*(_BYTE *)(this + 25))
  {
    v2 = *(float *)(this + 8);
    *(_DWORD *)(this + 4) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_WORD *)(this + 24) = 0;
    return DspLib::VolumeTaper::SlewRateLimiter::setValue(this, v2);
  }
  return this;
}

uint64_t DspLib::VolumeTaper::Algorithm::uninitialize(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = this;
  v2 = *(uint64_t **)(this + 240);
  v3 = *(uint64_t **)(this + 248);
  while (v2 != v3)
  {
    v4 = *v2++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  *(_BYTE *)(v1 + 8) = 0;
  return this;
}

void DspLib::VolumeTaper::Algorithm::reset(DspLib::VolumeTaper::Algorithm *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::VolumeTaper::Algorithm *)((char *)this + 592));
  if (DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000000) != 0.0)
  {
    *((_DWORD *)this + 127) = *((_DWORD *)this + 126);
    *((_DWORD *)this + 128) = 0;
    *((_BYTE *)this + 524) = 0;
  }
  *((_BYTE *)this + 624) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) != 0.0;
}

uint64_t DspLib::VolumeTaper::Algorithm::numStatus(DspLib::VolumeTaper::Algorithm *this)
{
  return 3;
}

double DspLib::VolumeTaper::Algorithm::tailTimeSamples(DspLib::VolumeTaper::Algorithm *this)
{
  return (*(double (**)(DspLib::VolumeTaper::Algorithm *))(*(_QWORD *)this + 80))(this) + 0.0;
}

void DspLib::VolumeTaper::Algorithm::setParameter(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t *v7;

  if (!a3)
  {
    v7 = (uint64_t *)(a1 + 264);
    DspLib::AlgorithmParametersInstance::setValue((uint64_t *)(a1 + 264), a2, a4);
    if (a2 == 0x400000000)
    {
      if (DspLib::AlgorithmParametersInstance::operator[](v7, 0x100000000) == 0.0)
      {
        *(float *)(a1 + 508) = a4;
        *(float *)(a1 + 504) = a4;
        *(_DWORD *)(a1 + 512) = 0;
        *(_BYTE *)(a1 + 524) = 1;
      }
      else
      {
        DspLib::VolumeTaper::SlewRateLimiter::setValue(a1 + 500, a4);
      }
      if (*(_BYTE *)(a1 + 540))
      {
        if (DspLib::AlgorithmParametersInstance::operator[](v7, 0x100000000) == 0.0)
          *(_BYTE *)(a1 + 540) = 0;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 256))(a1, v7, 0);
    }
  }
}

uint64_t DspLib::VolumeTaper::SlewRateLimiter::setValue(uint64_t this, float a2)
{
  float v2;
  float v3;

  v2 = *(float *)this;
  if (*(float *)this <= 0.0)
  {
    *(float *)(this + 4) = a2;
    *(float *)(this + 8) = a2;
    *(_DWORD *)(this + 12) = 0;
    *(_WORD *)(this + 24) = 257;
  }
  else
  {
    if (*(float *)(this + 8) != a2)
    {
      *(_BYTE *)(this + 24) = 1;
      if ((COERCE_UNSIGNED_INT(a2 - *(float *)(this + 4)) & 0x80000000) != 0)
        v3 = -*(float *)(this + 20);
      else
        v3 = *(float *)(this + 16);
      *(float *)(this + 12) = v3 / v2;
    }
    *(float *)(this + 8) = a2;
  }
  return this;
}

void DspLib::VolumeTaper::Algorithm::setParameters(DspLib::VolumeTaper::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  float v4;
  _BYTE *v5;
  float v6;
  DspLib *v7;
  unsigned int v8;
  const void *v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t i;
  float v27;
  DspLib *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float v38;
  DspLib *v39;
  int v40;
  float v41;
  char v42;
  float v43;
  float v44;
  float v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (!*((_BYTE *)this + 8))
    return;
  v4 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000000);
  v5 = (char *)this + 540;
  if (v4 != 0.0)
    goto LABEL_3;
  if (!*v5)
  {
    v45 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x400000000);
    *((float *)this + 127) = v45;
    *((float *)this + 126) = v45;
    *((_DWORD *)this + 128) = 0;
    v5 = (char *)this + 524;
LABEL_3:
    *v5 = 1;
  }
  v6 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x600000000);
  *((float *)this + 157) = DspLib::dB2Amp(v7, v6);
  v8 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2));
  if (v8 == 2)
  {
    v10 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000002);
    v11 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x200000002);
    v12 = 0;
    v13 = 50.0;
    if (v10 <= 50.0)
      v13 = v10;
    if (v10 >= -30.0)
      v14 = v13;
    else
      v14 = -30.0;
    if (v11 <= 0.0)
      v15 = v11;
    else
      v15 = 0.0;
    if (v11 >= -100.0)
      v16 = v15;
    else
      v16 = -100.0;
    v17 = v16 - v14;
    v18 = v14 / 5.0;
    v19 = -v14;
    v20 = (float)(v14 + -70.0) / 3.0;
    do
    {
      v21 = (float)(v17 * 0.125) * (float)(v12 - 8);
      if (v17 > 0.0)
        v21 = 0.0;
      if (v12 <= 8)
        v21 = v19 + (float)((float)(v12 - 3) * v18);
      if (v12 <= 2)
        v21 = -70.0 - (float)((float)v12 * v20);
      *((float *)&v46 + v12++) = v21;
    }
    while (v12 != 17);
  }
  else
  {
    if (v8 != 1)
    {
      if (!v8)
      {
        v9 = (const void *)DspLib::AlgorithmParametersInstance::group((DspLib::VolumeTaper::Algorithm *)((char *)this + 264), 1u);
        memmove((char *)this + 296, v9, 0x44uLL);
      }
      goto LABEL_37;
    }
    v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000002);
    v23 = 10.0;
    if (v22 <= 10.0)
      v23 = v22;
    if (v22 >= 0.001)
      v24 = v23;
    else
      v24 = 0.001;
    LODWORD(v46) = -1027080192;
    v25 = expf(v24) + -1.0;
    for (i = 1; i != 17; ++i)
    {
      v27 = expf((float)(v24 * (float)i) * 0.0625);
      *((float *)&v46 + i) = DspLib::amp2dBSafe(v28, (float)(v27 + -1.0) / v25, 1.0e-20);
    }
  }
  *((_DWORD *)this + 90) = v50;
  v29 = v49;
  *(_OWORD *)((char *)this + 328) = v48;
  *(_OWORD *)((char *)this + 344) = v29;
  v30 = v47;
  *(_OWORD *)((char *)this + 296) = v46;
  *(_OWORD *)((char *)this + 312) = v30;
LABEL_37:
  v31 = DspLib::AlgorithmParametersInstance::group((DspLib::VolumeTaper::Algorithm *)((char *)this + 264), 3u);
  for (j = 0; j != 17; ++j)
    *((float *)&v46 + j) = DspLib::elementAtIndexWithInterpolation(v31, 5, (float)((float)j * 0.0625) * 4.0);
  v33 = 0;
  *((_DWORD *)this + 107) = v50;
  v34 = v49;
  *(_OWORD *)((char *)this + 396) = v48;
  *(_OWORD *)((char *)this + 412) = v34;
  v35 = v47;
  *(_OWORD *)((char *)this + 364) = v46;
  *(_OWORD *)((char *)this + 380) = v35;
  do
  {
    *(float *)((char *)&v46 + v33) = *(float *)((char *)this + v33 + 296) + *(float *)((char *)this + v33 + 364);
    v33 += 4;
  }
  while (v33 != 68);
  v36 = v49;
  *((_OWORD *)this + 29) = v48;
  *((_OWORD *)this + 30) = v36;
  *((_DWORD *)this + 124) = v50;
  v37 = v47;
  *((_OWORD *)this + 27) = v46;
  *((_OWORD *)this + 28) = v37;
  *((_BYTE *)this + 524) = 1;
  v38 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x500000000);
  *((float *)this + 133) = DspLib::dB2Amp(v39, v38);
  *((_BYTE *)this + 624) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) != 0.0;
  v40 = *((unsigned __int8 *)this + 528);
  if (v40 != (DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000000) != 0.0))
  {
    v41 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000000);
    *((_BYTE *)this + 528) = v41 != 0.0;
    if (v41 == 0.0)
    {
      v42 = 0;
      *((_DWORD *)this + 127) = *((_DWORD *)this + 126);
      *((_DWORD *)this + 128) = 0;
    }
    else
    {
      v42 = 1;
    }
    *((_BYTE *)this + 524) = v42;
  }
  v43 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x200000000);
  v44 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x300000000);
  if (DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x700000000) == 0.0)
  {
    *((float *)this + 129) = v43;
  }
  else
  {
    *((float *)this + 129) = 1.0 / (float)(v43 / 1000.0);
    v44 = 1.0 / (float)(v44 / 1000.0);
  }
  *((float *)this + 130) = v44;
}

void DspLib::VolumeTaper::Algorithm::processBlock(DspLib::VolumeTaper::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float Value;
  float v18;
  DspLib *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  const float *v23;
  float v24;
  DspLib *v25;
  float v26;
  DspLib *v27;
  uint64_t v29[3];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  if (cycle_count)
  {
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    DspLibBuffer::operator=((uint64_t)a3, a2);
    v7 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v7);
    v10 = (char *)&v29[-1] - v9;
    if (v8 >= 0x200)
      v11 = 512;
    else
      v11 = v8;
    bzero((char *)&v29[-1] - v9, v11);
    if (DspLibBuffer::numChannels(a3))
    {
      v12 = 0;
      do
      {
        *(_QWORD *)&v10[8 * v12] = DspLibBuffer::channel(a3, v12);
        ++v12;
      }
      while (v12 < DspLibBuffer::numChannels(a3));
    }
    v13 = DspLibBuffer::numChannels(a3);
    v14 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v15 = v14;
    v16 = *((float *)this + 134) <= *((float *)this + 157) || *((_BYTE *)this + 624) != 0;
    if (*((unsigned __int8 *)this + 625) == v16)
    {
      if (!*((_BYTE *)this + 524) && *((_BYTE *)this + 616))
      {
        v29[0] = (uint64_t)v10;
        v29[1] = v13;
        v29[2] = v14;
        DspLib::multiply(v29, *((float *)this + 155));
LABEL_21:
        if (*((_BYTE *)this + 40))
          DspLib::CPUMeasure::stop((DspLib::VolumeTaper::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
        return;
      }
    }
    else
    {
      *((_BYTE *)this + 625) = v16;
    }
    *((_BYTE *)this + 616) = 0;
    Value = DspLib::VolumeTaper::SlewRateLimiter::getValue((DspLib::VolumeTaper::Algorithm *)((char *)this + 500), cycle_count);
    v18 = *((float *)this + vcvtms_u32_f32(Value * 16.0) + 108);
    *((float *)this + 134) = DspLib::dB2Amp(v19, v18+ (float)((float)-(float)((float)floorf(Value * 16.0) - (float)(Value * 16.0))* (float)(*((float *)this + vcvtps_u32_f32(Value * 16.0) + 108) - v18)));
    v21 = MEMORY[0x1E0C80A78](v20);
    v23 = (const float *)((char *)&v29[-1] - v22);
    v24 = *(float *)&v21 * (float)(*((float *)this + 133) * *((float *)this + 134));
    DspLib::ramp((float *)((char *)&v29[-1] - v22), cycle_count, 0, *((float *)this + 155), v24);
    DspLib::Biquad::Filter::process((_QWORD *)this + 68, (uint64_t)v23, cycle_count, (uint64_t)v23, (float **)cycle_count);
    *((float *)this + 155) = v23[cycle_count - 1];
    v26 = DspLib::amp2dBSafe(v25, v24, 1.0e-20);
    if (vabds_f32(v26, DspLib::amp2dBSafe(v27, *((float *)this + 155), 1.0e-20)) < 0.01)
    {
      *((_BYTE *)this + 616) = 1;
      *((float *)this + 155) = v24;
    }
    v30[0] = v10;
    v30[1] = v13;
    v30[2] = v15;
    DspLib::multiply(v30, v23);
    goto LABEL_21;
  }
}

float DspLib::VolumeTaper::SlewRateLimiter::getValue(DspLib::VolumeTaper::SlewRateLimiter *this, unsigned int a2)
{
  float v2;
  float result;
  float v4;
  float v5;

  v2 = *((float *)this + 3);
  if (v2 == 0.0)
  {
    *((_BYTE *)this + 24) = 0;
    return *((float *)this + 2);
  }
  else
  {
    *((_BYTE *)this + 24) = 1;
    v5 = *((float *)this + 1);
    v4 = *((float *)this + 2);
    result = v5 + (float)(v2 * (float)a2);
    *((float *)this + 1) = result;
    if (((COERCE_UNSIGNED_INT(v4 - result) ^ COERCE_UNSIGNED_INT(v4 - v5)) & 0x80000000) != 0)
    {
      *((_DWORD *)this + 3) = 0;
      *((float *)this + 1) = v4;
      return v4;
    }
  }
  return result;
}

float DspLib::VolumeTaper::Algorithm::currentSliderPosition(DspLib::VolumeTaper::Algorithm *this)
{
  return *((float *)this + 126);
}

float DspLib::VolumeTaper::Algorithm::gainInDecibels(DspLib::VolumeTaper::Algorithm *this)
{
  return DspLib::amp2dBSafe(this, *((float *)this + 134), 1.0e-20);
}

float DspLib::VolumeTaper::Algorithm::isRamping(DspLib::VolumeTaper::Algorithm *this)
{
  float result;

  result = 0.0;
  if (*((_BYTE *)this + 524))
    return 1.0;
  return result;
}

unint64_t DspLib::VolumeTaper::Algorithm::sliderPositionForGainCalculator(DspLib::VolumeTaper::Algorithm *this, float a2)
{
  char *v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  DspLib *v9;
  BOOL v10;
  float v11;

  v3 = (char *)this + 432;
  v4 = 432;
  while (1)
  {
    v5 = *(float *)((char *)this + v4);
    if (v5 >= a2)
      break;
    v4 += 4;
    if (v4 == 500)
    {
      v6 = 1.0;
      goto LABEL_8;
    }
  }
  if (v4 == 432)
    v6 = 0.0;
  else
    v6 = (float)((float)((float)(a2 - *(float *)((char *)this + v4 - 4))
                       / (float)(v5 - *(float *)((char *)this + v4 - 4)))
               + (float)((v4 - 436) >> 2))
       * 0.0625;
LABEL_8:
  v7 = *(float *)&v3[4 * vcvtms_u32_f32(v6 * 16.0)];
  v8 = DspLib::dB2Amp(this, v7+ (float)((float)-(float)((float)floorf(v6 * 16.0) - (float)(v6 * 16.0))* (float)(*(float *)&v3[4 * vcvtps_u32_f32(v6 * 16.0)] - v7)));
  v10 = vabds_f32(a2, DspLib::amp2dBSafe(v9, v8, 1.0e-20)) < 1.0;
  v11 = 0.0;
  if (v10)
    v11 = v6;
  return LODWORD(v11) | ((unint64_t)v10 << 32);
}

float DspLib::VolumeTaper::Algorithm::gainInDecibelsForSliderPosition(DspLib::VolumeTaper::Algorithm *this, float a2)
{
  float v2;

  v2 = *((float *)this + vcvtms_u32_f32(a2 * 16.0) + 108);
  return v2
       + (float)((float)-(float)((float)floorf(a2 * 16.0) - (float)(a2 * 16.0))
               * (float)(*((float *)this + vcvtps_u32_f32(a2 * 16.0) + 108) - v2));
}

void DspLib::VolumeTaper::Algorithm::status(uint64_t a1, uint64_t a2)
{
  float v4;

  *(float *)a2 = DspLib::amp2dBSafe((DspLib *)a1, *(float *)(a1 + 536), 1.0e-20);
  v4 = 0.0;
  if (*(_BYTE *)(a1 + 524))
    v4 = 1.0;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 504);
  *(float *)(a2 + 8) = v4;
}

void DspLib::VolumeTaper::Algorithm::~Algorithm(DspLib::VolumeTaper::Algorithm *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = off_1E69C3780;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VolumeTaper::Algorithm *)((char *)this + 592));
  v2 = (void *)*((_QWORD *)this + 71);
  if (v2)
  {
    *((_QWORD *)this + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E69C47E8;
  v3 = (void *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 35) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = off_1E69C3780;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VolumeTaper::Algorithm *)((char *)this + 592));
  v2 = (void *)*((_QWORD *)this + 71);
  if (v2)
  {
    *((_QWORD *)this + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E69C47E8;
  v3 = (void *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 35) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  MEMORY[0x1BCC95CEC](this, 0x10E1C40317801A1);
}

DspLib::ThermalSpeakerProtection::SpeakerModel *DspLib::ThermalSpeakerProtection::SpeakerModel::SpeakerModel(DspLib::ThermalSpeakerProtection::SpeakerModel *this, unsigned int a2)
{
  float **v3;

  v3 = (float **)std::vector<float>::vector(this, a2);
  DspLib::clear(*v3, (uint64_t)(*((_QWORD *)this + 1) - (_QWORD)*v3) >> 2);
  *((_DWORD *)this + 6) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 15) = _D0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  return this;
}

void sub_1B60B5BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ThermalSpeakerProtection::SpeakerModel::resizeRmsBuffer(DspLib::ThermalSpeakerProtection::SpeakerModel *this, unsigned int a2)
{
  if (a2 != (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2)
    *((_DWORD *)this + 6) = 0;
  std::vector<float>::resize((uint64_t)this, a2);
  DspLib::clear(*(float **)this, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
}

float DspLib::ThermalSpeakerProtection::SpeakerModel::setParameters(uint64_t a1, uint64_t a2, float a3)
{
  double v6;
  long double v7;
  long double v8;
  float result;

  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 40);
  v6 = a3;
  v7 = exp(-1.0 / (*(float *)(a2 + 16) * 1000.0 * a3 / 1000.0));
  *(long double *)(a1 + 40) = v7;
  *(long double *)(a1 + 48) = 1.0 - v7;
  v8 = exp(-1.0 / (*(float *)(a2 + 20) * 1000.0 * v6 / 1000.0));
  *(long double *)(a1 + 64) = v8;
  *(long double *)(a1 + 72) = 1.0 - v8;
  *(float *)(a1 + 32) = 1.0 / *(float *)(a2 + 4);
  *(float *)(a1 + 84) = 1.0 - expf(-4.6052 / (float)((float)(*(float *)(a2 + 32) * a3) / 1000.0));
  result = 1.0 - expf(-4.6052 / (float)((float)(*(float *)(a2 + 36) * a3) / 1000.0));
  *(float *)(a1 + 88) = result;
  return result;
}

void DspLib::ThermalSpeakerProtection::SpeakerModel::doCalculations(DspLib::ThermalSpeakerProtection::SpeakerModel *this, const DspLib::ThermalSpeakerProtection::SpeakerModel *a2)
{
  const float *v3;
  uint64_t v5;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  float v12;
  double v13;
  double v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v3 = *(const float **)this;
  v5 = *((_QWORD *)this + 1) - (_QWORD)v3;
  if (!v5)
    goto LABEL_15;
  v7 = DspLib::rms(v3, v5 >> 2) * *((float *)this + 7);
  v8 = (float)(v7 * v7) * *((float *)this + 8);
  *((float *)this + 32) = v7;
  *((float *)this + 33) = v8;
  v9 = v8 * *((float *)this + 14);
  v10 = *((double *)this + 6) * (float)(v8 * *((float *)this + 9)) + *((double *)this + 14) * *((double *)this + 5);
  v11 = *((double *)this + 9) * v9 + *((double *)this + 13) * *((double *)this + 8);
  *((double *)this + 13) = v11;
  *((double *)this + 14) = v10;
  v12 = *((float *)this + 20);
  *(float *)&v11 = v10 + v11 + v12;
  *((_DWORD *)this + 34) = LODWORD(v11);
  if (!a2)
    goto LABEL_15;
  v13 = (float)(*((float *)this + 23) - v12);
  v14 = *((double *)a2 + 13);
  v15 = (v13 - v14) / (v10 + 1.0);
  v16 = 1.0;
  if (v15 <= 1.0)
    v16 = v15;
  v17 = v15 < 0.0;
  v18 = 0.0;
  if (!v17)
    v18 = v16;
  v19 = sqrtf(v18);
  v20 = *((float *)this + 30);
  if (v19 > v20)
  {
    v21 = v19 - v20;
    v22 = *((float *)this + 22);
LABEL_11:
    v20 = v20 + (float)(v21 * v22);
    goto LABEL_12;
  }
  if (v19 < v20)
  {
    v21 = v19 - v20;
    v22 = *((float *)this + 21);
    goto LABEL_11;
  }
LABEL_12:
  v23 = v14 + *((double *)a2 + 14) + *((float *)a2 + 20);
  v17 = (float)(*((float *)a2 + 23) + *((float *)a2 + 24)) < v23;
  v24 = 0.1;
  if (!v17)
    v24 = v20;
  *((float *)this + 30) = v24;
  *((float *)this + 31) = v24;
LABEL_15:
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 35) = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
}

void DspLib::ThermalSpeakerProtection::SpeakerModel::thermalDecay(DspLib::ThermalSpeakerProtection::SpeakerModel *this, float a2, float a3)
{
  double v4;
  long double v5;
  long double v6;

  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v4 = (float)(a2 * a3);
    v5 = log(*((long double *)this + 8));
    *((long double *)this + 13) = *((double *)this + 13) * exp(v5 * v4);
    v6 = log(*((long double *)this + 5));
    *((long double *)this + 14) = *((double *)this + 14) * exp(v6 * v4);
  }
}

double DspLib::ThermalSpeakerProtection::Algorithm::Algorithm(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::ThermalSpeakerProtection::Parameters::kDefault, 0x33uLL, (uint64_t)&DspLib::ThermalSpeakerProtection::Parameters::kMinimum, 51, (uint64_t)&DspLib::ThermalSpeakerProtection::Parameters::kMaximum, 51);
  *(_QWORD *)v1 = &off_1E69C3C68;
  *(_QWORD *)(v1 + 216) = 0;
  *(_DWORD *)(v1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_BYTE *)(v1 + 280) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_QWORD *)(v1 + 416) = 0;
  return result;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::initialize(DspLib::ThermalSpeakerProtection::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  char *v11;
  int v12;
  void *__p;
  void *v14;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  v5 = *((unsigned int *)this + 3);
  if (v5 >= 0x11)
  {
    v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    v12 = 175;
LABEL_14:
    printf("DSP Sound assertion in %s at line %d\n", v11, v12);
    ++DspLibDebug::mAssertCounter;
    return v4;
  }
  if (!(_DWORD)v5)
  {
    v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    v12 = 176;
    goto LABEL_14;
  }
  DspLib::ThermalSpeakerProtection::SpeakerModel::SpeakerModel((DspLib::ThermalSpeakerProtection::SpeakerModel *)&__p, 0);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::resize((uint64_t *)this + 29, v5, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v6 = *((unsigned int *)this + 3);
  DspLib::ThermalSpeakerProtection::SpeakerModel::SpeakerModel((DspLib::ThermalSpeakerProtection::SpeakerModel *)&__p, 0);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::resize((uint64_t *)this + 32, v6, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 48, *((unsigned int *)this + 3));
  v7 = *((_QWORD *)this + 48);
  v8 = *((_QWORD *)this + 49);
  while (v7 != v8)
  {
    std::vector<float>::resize(v7, *((unsigned int *)this + 8));
    v7 += 24;
  }
  DspLib::Biquad::ParametricFilter::initialize((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 280), *((unsigned int *)this + 3), *((double *)this + 3), 1uLL);
  *((_QWORD *)this + 53) = 0;
  *((_BYTE *)this + 8) = 1;
  (*(void (**)(DspLib::ThermalSpeakerProtection::Algorithm *, _QWORD))(*(_QWORD *)this + 200))(this, *((unsigned __int8 *)this + 40));
  (*(void (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(_QWORD *)this + 144))(this);
  (*(void (**)(DspLib::ThermalSpeakerProtection::Algorithm *))(*(_QWORD *)this + 152))(this);
  DspLib::elapsedTimeInMilliseconds((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 424), v9);
  return v4;
}

void sub_1B60B60F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 4);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 144 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 144);
        v9 -= 144;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 136) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::uninitialize(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  uint64_t v2;
  uint64_t result;

  *((_BYTE *)this + 8) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 48);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100]((uint64_t *)this + 29);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100]((uint64_t *)this + 32);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 280));
  v2 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::reset(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 29);
    v3 = *((_QWORD *)this + 30);
    if (v2 != v3)
    {
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        DspLib::clear(*(float **)v2, (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2);
        *(_DWORD *)(v2 + 24) = 0;
        *(_QWORD *)(v2 + 120) = _D8;
        *(_QWORD *)(v2 + 104) = 0;
        *(_QWORD *)(v2 + 112) = 0;
        *(_QWORD *)(v2 + 128) = 0;
        *(_QWORD *)(v2 + 136) = 0;
        v2 += 144;
      }
      while (v2 != v3);
    }
    v9 = *((_QWORD *)this + 32);
    v10 = *((_QWORD *)this + 33);
    if (v9 != v10)
    {
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        DspLib::clear(*(float **)v9, (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
        *(_DWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 120) = _D8;
        *(_QWORD *)(v9 + 104) = 0;
        *(_QWORD *)(v9 + 112) = 0;
        *(_QWORD *)(v9 + 128) = 0;
        *(_QWORD *)(v9 + 136) = 0;
        v9 += 144;
      }
      while (v9 != v10);
    }
    MEMORY[0x1E0C80A78](this);
    v14 = (char *)v26 - v13;
    if (v12 >= 0x200)
      v15 = 512;
    else
      v15 = v12;
    bzero((char *)v26 - v13, v15);
    v16 = (_QWORD *)*((_QWORD *)this + 48);
    v17 = (_QWORD *)*((_QWORD *)this + 49);
    v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - v16);
    if (v17 == v16)
      goto LABEL_16;
    v19 = 0;
    v20 = (uint64_t *)*((_QWORD *)this + 48);
    do
    {
      v21 = *v20;
      v20 += 3;
      *(_QWORD *)&v14[8 * v19++] = v21;
    }
    while (v18 > v19);
    if (v17 == v16)
LABEL_16:
      v22 = 0;
    else
      v22 = (uint64_t)(v16[1] - *v16) >> 2;
    v26[0] = v14;
    v26[1] = v18;
    v26[2] = v22;
    DspLib::clear(v26);
    DspLib::Biquad::SetupWrapper::reset((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 328));
    v23 = *((_QWORD *)this + 51);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 152))(v23);
    result = *((_QWORD *)this + 52);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
  }
  else
  {
    v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v25, 207);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::setMeteringIsEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  DspLib::AudioMeter::Algorithm *v3;
  double v4;
  uint64_t v5;
  DspLib::AudioMeter::Algorithm *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(this + 40) = a2;
  if (*(_BYTE *)(this + 8))
  {
    v2 = this;
    if (a2)
    {
      v3 = (DspLib::AudioMeter::Algorithm *)operator new();
      v4 = DspLib::AudioMeter::Algorithm::Algorithm(v3);
      v5 = *(_QWORD *)(v2 + 408);
      *(_QWORD *)(v2 + 408) = v3;
      if (v5)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 8))(v5, v4);
      v6 = (DspLib::AudioMeter::Algorithm *)operator new();
      v7 = DspLib::AudioMeter::Algorithm::Algorithm(v6);
      v8 = *(_QWORD *)(v2 + 416);
      *(_QWORD *)(v2 + 416) = v6;
      if (v8)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v8 + 8))(v8, v7);
      (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(v2 + 408) + 16))(*(_QWORD *)(v2 + 408), *(unsigned int *)(v2 + 12), *(double *)(v2 + 24));
      (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(v2 + 416) + 16))(*(_QWORD *)(v2 + 416), *(unsigned int *)(v2 + 16), *(double *)(v2 + 24));
      v9 = *(_QWORD *)(v2 + 48);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 408) + 144))(*(_QWORD *)(v2 + 408), v9, 8);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 416) + 144))(*(_QWORD *)(v2 + 416), v9, 8);
    }
    else
    {
      v10 = *(_QWORD *)(this + 408);
      *(_QWORD *)(v2 + 408) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v11 = *(_QWORD *)(v2 + 416);
      *(_QWORD *)(v2 + 416) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  }
  return this;
}

void sub_1B60B658C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C4016621F76);
  _Unwind_Resume(a1);
}

void DspLib::ThermalSpeakerProtection::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  float v5;
  float *v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  vDSP_Length v14;
  float v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  vDSP_Length v27;
  uint64_t v28;
  uint64_t v29;

  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(double *)(a1 + 24);
    v6 = *(float **)(a1 + 48);
    v7 = v6[9];
    v8 = vcvtas_u32_f32((float)(v7 * v5) / 1000.0);
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    v10 = *(_DWORD *)(a1 + 12);
    v11 = vcvtas_u32_f32(v6[23]) & ~(-1 << v10);
    v12 = vcvtas_u32_f32(v6[36]) & ~(-1 << v10);
    v13 = vcvtas_u32_f32(v6[49]) & ~(-1 << v10);
    if ((*(_DWORD *)(a1 + 216) != v11 || *(_DWORD *)(a1 + 220) != v12 || *(_DWORD *)(a1 + 224) != v13)
      && (v12 ^ v11 ^ v13) == ~(-1 << v10))
    {
      *(_DWORD *)(a1 + 216) = v11;
      *(_DWORD *)(a1 + 220) = v12;
      *(_DWORD *)(a1 + 224) = v13;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      v10 = *(_DWORD *)(a1 + 12);
    }
    if (v10)
    {
      v14 = 0;
      __asm { FMOV            V9.2S, #1.0 }
      v20 = 1000.0 / v7;
      do
      {
        v21 = 0;
        while (1)
        {
          v22 = DspLib::ThermalSpeakerProtection::kSpeakerTypeList[v21];
          if (v22 == 2)
          {
            v23 = *(_DWORD *)(a1 + 224);
          }
          else if (v22 == 1)
          {
            v23 = *(_DWORD *)(a1 + 220);
          }
          else
          {
            v23 = v22 ? 0 : *(_DWORD *)(a1 + 216);
          }
          if ((v23 & (1 << v14)) != 0)
            break;
          if (++v21 == 3)
            goto LABEL_24;
        }
        if (v22 == 4)
        {
LABEL_24:
          v24 = *(_QWORD *)(a1 + 232) + 144 * v14;
          DspLib::clear(*(float **)v24, (uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)v24) >> 2);
          *(_DWORD *)(v24 + 24) = 0;
          *(_QWORD *)(v24 + 120) = _D9;
          *(_QWORD *)(v24 + 104) = 0;
          *(_QWORD *)(v24 + 112) = 0;
          *(_QWORD *)(v24 + 128) = 0;
          *(_QWORD *)(v24 + 136) = 0;
          *(_OWORD *)(v24 + 28) = 0u;
          *(_OWORD *)(v24 + 44) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_DWORD *)(v24 + 96) = 0;
          v25 = *(_QWORD *)(a1 + 256) + 144 * v14;
          DspLib::clear(*(float **)v25, (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 2);
          *(_DWORD *)(v25 + 24) = 0;
          *(_QWORD *)(v25 + 120) = _D9;
          *(_QWORD *)(v25 + 104) = 0;
          *(_QWORD *)(v25 + 112) = 0;
          *(_QWORD *)(v25 + 128) = 0;
          *(_QWORD *)(v25 + 136) = 0;
          *(_OWORD *)(v25 + 28) = 0u;
          *(_OWORD *)(v25 + 44) = 0u;
          *(_OWORD *)(v25 + 64) = 0u;
          *(_OWORD *)(v25 + 80) = 0u;
          *(_DWORD *)(v25 + 96) = 0;
          goto LABEL_26;
        }
        v26 = *(_QWORD *)(a1 + 48) + 4 * (13 * v22 + 11);
        DspLib::ThermalSpeakerProtection::SpeakerModel::setParameters(*(_QWORD *)(a1 + 232) + 144 * v14, v26, v20);
        DspLib::ThermalSpeakerProtection::SpeakerModel::resizeRmsBuffer((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*(_QWORD *)(a1 + 232) + 144 * v14), v9);
        DspLib::ThermalSpeakerProtection::SpeakerModel::setParameters(*(_QWORD *)(a1 + 256) + 144 * v14, v26, v20);
        DspLib::ThermalSpeakerProtection::SpeakerModel::resizeRmsBuffer((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*(_QWORD *)(a1 + 256) + 144 * v14), v9);
LABEL_26:
        ++v14;
        v27 = *(unsigned int *)(a1 + 12);
      }
      while (v14 < v27);
    }
    else
    {
      v27 = 0;
    }
    v28 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 40);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 280), v27, *(double *)(a1 + 24), 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 280, v28 << 32, (double *)0x3F34FDF400000000, 0, 0x41uLL);
    if (*(_BYTE *)(a1 + 40))
    {
      v29 = *(_QWORD *)(a1 + 48);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 408) + 144))(*(_QWORD *)(a1 + 408), v29, 8);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 416) + 144))(*(_QWORD *)(a1 + 416), v29, 8);
    }
  }
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::updateGainLinkage(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  char *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  uint64_t v17;
  float *v18;

  v2 = *(_QWORD *)(result + 48);
  if (*(float *)(v2 + 200) <= 0.5)
  {
    v10 = (char *)&DspLib::ThermalSpeakerProtection::kSpeakerTypeList;
    do
    {
      v11 = *(_DWORD *)v10;
      if (*(float *)(v2 + 52 * *(unsigned int *)v10 + 88) > 0.5)
      {
        if (v11 == 2)
        {
          v12 = *(_DWORD *)(result + 224);
        }
        else if (v11 == 1)
        {
          v12 = *(_DWORD *)(result + 220);
        }
        else
        {
          v12 = v11 ? 0 : *(_DWORD *)(result + 216);
        }
        v13 = *(unsigned int *)(result + 12);
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = (float *)(*a2 + 120);
          v16 = 1.0;
          do
          {
            if (((v12 >> v14) & 1) != 0 && *v15 < v16)
              v16 = *v15;
            ++v14;
            v15 += 36;
          }
          while (v13 != v14);
          v17 = 0;
          v18 = (float *)(*a2 + 124);
          do
          {
            if (((v12 >> v17) & 1) != 0)
              *v18 = v16;
            ++v17;
            v18 += 36;
          }
          while (v13 != v17);
        }
      }
      v10 += 4;
    }
    while (v10 != "N6DspLib24ThermalSpeakerProtection9AlgorithmE");
  }
  else
  {
    v3 = *(unsigned int *)(result + 12);
    if ((_DWORD)v3)
    {
      v4 = (float *)(*a2 + 120);
      v5 = 1.0;
      v6 = *(unsigned int *)(result + 12);
      do
      {
        v7 = *v4;
        v4 += 36;
        v8 = v7;
        if (v7 < v5)
          v5 = v8;
        --v6;
      }
      while (v6);
      v9 = (float *)(*a2 + 124);
      do
      {
        *v9 = v5;
        v9 += 36;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

void DspLib::ThermalSpeakerProtection::Algorithm::calculateSpeakerModels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  vDSP_Length v15;
  float *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t j;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  const DspLib::ThermalSpeakerProtection::SpeakerModel *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  vDSP_Length v39;
  float *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;

  v8 = *(_DWORD *)(a2 + 16);
  if (a3)
  {
    v9 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = *(_DWORD *)(a3 + 16);
        v13 = &(*a4)[v10];
        v14 = *((_DWORD *)v13 + 35);
        if (v14 >= v12)
          v15 = v12;
        else
          v15 = v14;
        if ((_DWORD)v15)
        {
          v16 = *(float **)(*(_QWORD *)a3 + 8 * i);
          *((_DWORD *)v13 + 35) = v14 - v15;
          DspLib::fill(v16, v15, *((float *)v13 + 31));
          v9 = *(unsigned int *)(a1 + 12);
        }
        v10 += 18;
      }
    }
  }
  if (v8)
  {
    LODWORD(v17) = 0;
    v41 = v8;
    while (1)
    {
      v18 = *a4;
      v19 = v8 - v17;
      v20 = **a4;
      v21 = *((unsigned int *)*a4 + 6);
      if (((unint64_t)((*a4)[1] - v20) >> 2) - v21 >= v19)
        v22 = v8 - v17;
      else
        v22 = ((unint64_t)((*a4)[1] - v20) >> 2) - v21;
      if (v22)
      {
        memmove((void *)(v20 + 4 * v21), (const void *)(**(_QWORD **)a2 + 4 * *(_QWORD *)(a2 + 16) - 4 * v19), 4 * v22);
        LODWORD(v21) = *((_DWORD *)v18 + 6);
      }
      *((_DWORD *)v18 + 6) = v21 + v22;
      v23 = *(unsigned int *)(a1 + 12);
      v42 = v22;
      v43 = v17;
      if (v23 >= 2)
      {
        v24 = 0;
        for (j = 1; j < v23; ++j)
        {
          v26 = &(*a4)[v24];
          v27 = v26[18];
          v28 = *((unsigned int *)v26 + 42);
          if (((unint64_t)(v26[19] - v27) >> 2) - v28 >= v19)
            v29 = v19;
          else
            v29 = ((unint64_t)(v26[19] - v27) >> 2) - v28;
          if (v29)
          {
            memmove((void *)(v27 + 4 * v28), (const void *)(*(_QWORD *)(*(_QWORD *)a2 + 8 * j) + 4 * *(_QWORD *)(a2 + 16) - 4 * v19), 4 * v29);
            LODWORD(v28) = *((_DWORD *)v26 + 42);
            v23 = *(unsigned int *)(a1 + 12);
          }
          *((_DWORD *)v26 + 42) = v28 + v29;
          v24 += 18;
        }
      }
      v17 = v42 + v43;
      if (*((_DWORD *)*a4 + 6) == ((*a4)[1] - **a4) >> 2)
        break;
      v8 = v41;
      if (a3)
        goto LABEL_35;
LABEL_43:
      if (v8 <= v17)
        return;
    }
    v8 = v41;
    if (v23)
    {
      v30 = 0;
      v31 = 0;
      do
      {
        if (a3)
          v32 = (const DspLib::ThermalSpeakerProtection::SpeakerModel *)(*(_QWORD *)(a1 + 256) + v30 * 8);
        else
          v32 = 0;
        DspLib::ThermalSpeakerProtection::SpeakerModel::doCalculations((DspLib::ThermalSpeakerProtection::SpeakerModel *)&(*a4)[v30], v32);
        ++v31;
        v30 += 18;
      }
      while (v31 < *(unsigned int *)(a1 + 12));
    }
    if (!a3)
      goto LABEL_43;
    DspLib::ThermalSpeakerProtection::Algorithm::updateGainLinkage(a1, a4);
LABEL_35:
    v33 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 0;
      v36 = v8 - v17;
      do
      {
        v37 = &(*a4)[v34];
        v38 = *((_DWORD *)v37 + 35);
        if (v38 >= v36)
          v39 = v36;
        else
          v39 = v38;
        if ((_DWORD)v39)
        {
          v40 = (float *)(*(_QWORD *)(*(_QWORD *)a3 + 8 * v35) + 4 * v17);
          *((_DWORD *)v37 + 35) = v38 - v39;
          DspLib::fill(v40, v39, *((float *)v37 + 31));
          v33 = *(unsigned int *)(a1 + 12);
        }
        ++v35;
        v34 += 18;
      }
      while (v35 < v33);
    }
    goto LABEL_43;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::detectAudioProcessingPause(DspLib::ThermalSpeakerProtection::Algorithm *this, unint64_t *a2)
{
  float v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;

  v3 = DspLib::elapsedTimeInMilliseconds((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 424), a2);
  if (v3 > 100.0)
  {
    v4 = v3 <= 1000000000.0 ? v3 / 1000.0 : 1000000.0;
    if (*((_DWORD *)this + 3))
    {
      v5 = 0;
      v6 = 0;
      v7 = 1000.0 / *(float *)(*((_QWORD *)this + 6) + 36);
      v8 = *((_QWORD *)this + 29);
      do
      {
        DspLib::ThermalSpeakerProtection::SpeakerModel::thermalDecay((DspLib::ThermalSpeakerProtection::SpeakerModel *)(v8 + v5), v4, v7);
        DspLib::ThermalSpeakerProtection::SpeakerModel::thermalDecay((DspLib::ThermalSpeakerProtection::SpeakerModel *)(*((_QWORD *)this + 32) + v5), v4, v7);
        v8 = *((_QWORD *)this + 29);
        v9 = v8 + v5;
        if (*(_QWORD *)(v8 + v5 + 8) != *(_QWORD *)(v8 + v5))
        {
          v10 = 1.0 - *(float *)(v9 + 120);
          v11 = logf(1.0 - *(float *)(v9 + 88));
          *(float *)(v9 + 120) = 1.0 - (float)(v10 * expf((float)(v4 * v7) * v11));
        }
        ++v6;
        v5 += 144;
      }
      while (v6 < *((unsigned int *)this + 3));
    }
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::processBlock(DspLib::ThermalSpeakerProtection::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  float **v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float **v22;
  size_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD v37[3];
  float **v38;
  __int128 v39;
  _QWORD v40[3];
  _QWORD v41[3];
  float **v42;
  __int128 v43;
  uint64_t v44[3];
  float **v45;
  __int128 v46;
  float **v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
    DspLibBuffer::setNumFrames(a3, cycle_count);
    if (cycle_count)
    {
      if (*((_BYTE *)this + 40))
      {
        (*(void (**)(_QWORD, DspLibBuffer *))(**((_QWORD **)this + 51) + 168))(*((_QWORD *)this + 51), a2);
        DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
      }
      if (*(float *)(*((_QWORD *)this + 6) + 32) <= 0.5)
      {
        v7 = DspLibBuffer::numChannels(a2);
        v35 = (uint64_t)&v35;
        MEMORY[0x1E0C80A78](v7);
        v10 = (char *)&v36[-1] - v9;
        if (v8 >= 0x200)
          v11 = 512;
        else
          v11 = v8;
        bzero((char *)&v36[-1] - v9, v11);
        if (DspLibBuffer::numChannels(a2))
        {
          v12 = 0;
          do
          {
            *(_QWORD *)&v10[8 * v12] = DspLibBuffer::channel(a2, v12);
            ++v12;
          }
          while (v12 < DspLibBuffer::numChannels(a2));
        }
        v13 = DspLibBuffer::numChannels(a2);
        v14 = vp::utility::CPU_Profiler::get_cycle_count(a2);
        v44[0] = (uint64_t)v10;
        v44[1] = v13;
        v44[2] = v14;
        DspLib::clip(v44, -2.0, 2.0);
        DspLib::ThermalSpeakerProtection::Algorithm::detectAudioProcessingPause(this, v15);
        v16 = (float **)*((_QWORD *)this + 48);
        v17 = (_QWORD *)*((_QWORD *)this + 49);
        v18 = 0xAAAAAAAAAAAAAAABLL * ((float **)v17 - v16);
        MEMORY[0x1E0C80A78](v19);
        v22 = (float **)((char *)&v36[-1] - v21);
        if (v20 >= 0x200)
          v23 = 512;
        else
          v23 = v20;
        bzero((char *)&v36[-1] - v21, v23);
        if (v17 != v16)
        {
          v24 = 0;
          do
          {
            v25 = *v16;
            v16 += 3;
            v22[v24++] = v25;
          }
          while (v18 > v24);
        }
        v42 = v22;
        *(_QWORD *)&v43 = v18;
        *((_QWORD *)&v43 + 1) = cycle_count;
        v41[0] = v10;
        v41[1] = v13;
        v41[2] = v14;
        DspLib::ThermalSpeakerProtection::Algorithm::calculateSpeakerModels((uint64_t)this, (uint64_t)v41, (uint64_t)&v42, (uint64_t **)this + 29);
        v45 = v42;
        v46 = v43;
        v47 = v42;
        v48 = v43;
        DspLib::Biquad::Filter::process((_QWORD *)this + 35, (uint64_t)&v47, &v45);
        v26 = DspLibBuffer::numChannels(a3);
        MEMORY[0x1E0C80A78](v26);
        v29 = (char *)&v36[-1] - v28;
        if (v27 >= 0x200)
          v30 = 512;
        else
          v30 = v27;
        bzero((char *)&v36[-1] - v28, v30);
        if (DspLibBuffer::numChannels(a3))
        {
          v31 = 0;
          do
          {
            *(_QWORD *)&v29[8 * v31] = DspLibBuffer::channel(a3, v31);
            ++v31;
          }
          while (v31 < DspLibBuffer::numChannels(a3));
        }
        v32 = DspLibBuffer::numChannels(a3);
        v33 = vp::utility::CPU_Profiler::get_cycle_count(a3);
        v40[0] = v10;
        v40[1] = v13;
        v40[2] = v14;
        v38 = v42;
        v39 = v43;
        v37[0] = v29;
        v37[1] = v32;
        v37[2] = v33;
        DspLib::multiply(v40, &v38, v37);
        v36[0] = v29;
        v36[1] = v32;
        v36[2] = v33;
        DspLib::ThermalSpeakerProtection::Algorithm::calculateSpeakerModels((uint64_t)this, (uint64_t)v36, 0, (uint64_t **)this + 32);
      }
      else
      {
        DspLibBuffer::operator=((uint64_t)a3, a2);
      }
      if (*((_BYTE *)this + 40))
      {
        DspLib::CPUMeasure::stop((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
        (*(void (**)(_QWORD, DspLibBuffer *))(**((_QWORD **)this + 52) + 168))(*((_QWORD *)this + 52), a3);
      }
    }
  }
  else
  {
    v34 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v34, 437);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  DspLib *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  DspLib *v17;
  uint64_t v18;
  double v19;
  float v20;
  float v21;
  unint64_t v22;
  char *v23;

  if (*(_BYTE *)(a1 + 8))
  {
    DspLib::clear(a2, __N);
    v6 = *(double *)(a1 + 24);
    *a2 = (float)*(unsigned int *)(a1 + 12);
    a2[1] = v6;
    if (*(_BYTE *)(a1 + 40))
    {
      v7 = *(_QWORD *)(a1 + 408);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
      if (v8 == -1)
        v9 = __N - 114;
      else
        v9 = v8;
      (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v7 + 184))(v7, a2 + 114, v9);
      v10 = *(_QWORD *)(a1 + 416);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
      if (v11 == -1)
        v12 = __N - 146;
      else
        v12 = v11;
      v13 = (DspLib *)(*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v10 + 184))(v10, a2 + 146, v12);
      if (*(_DWORD *)(a1 + 12))
      {
        v14 = 0;
        v15 = 98;
        do
        {
          v16 = *(_QWORD *)(a1 + 232) + v14;
          a2[(v15 - 16)] = *(float *)(v16 + 132);
          a2[(v15 - 48)] = DspLib::amp2dBSafe(v13, *(float *)(v16 + 120), 0.000001);
          a2[(v15 - 32)] = DspLib::amp2dBSafe(v17, *(float *)(*(_QWORD *)(a1 + 232) + v14 + 124), 0.000001);
          v18 = *(_QWORD *)(a1 + 256) + v14;
          a2[v15] = *(float *)(v18 + 132);
          v19 = *(double *)(v18 + 112);
          v20 = *(double *)(v18 + 104);
          a2[(v15 - 96)] = v20;
          v21 = v19;
          a2[(v15 - 80)] = v21;
          a2[(v15 - 64)] = *(float *)(v18 + 136);
          v22 = v15 - 97;
          ++v15;
          v14 += 144;
        }
        while (v22 < *(unsigned int *)(a1 + 12));
      }
      a2[178] = DspLib::sum(*(const float **)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2);
    }
    else
    {
      DspLib::fill(a2 + 114, 0x10uLL, -100.0);
      DspLib::fill(a2 + 130, 0x10uLL, -100.0);
      DspLib::fill(a2 + 146, 0x10uLL, -100.0);
      DspLib::fill(a2 + 162, 0x10uLL, -100.0);
    }
  }
  else
  {
    v23 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ThermalSpeakerProtection/dsp/DspLibThermalSpeakerProtection.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v23, 478);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::ThermalSpeakerProtection::Algorithm::~Algorithm(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  DspLib::ThermalSpeakerProtection::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E69C3C68;
  v2 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v6 = (void **)((char *)this + 384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 360);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ThermalSpeakerProtection::Algorithm *)((char *)this + 328));
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 256);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 232);
  std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(_QWORD *)this = off_1E69C46F0;
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
}

double DspLib::ThermalSpeakerProtection::Algorithm::latencySamples(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::ThermalSpeakerProtection::Algorithm::numStatus(DspLib::ThermalSpeakerProtection::Algorithm *this)
{
  return 179;
}

_QWORD *std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (0x8E38E38E38E38E39 * ((v8 - v9) >> 4) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 144 * a2;
      v16 = (__int128 *)(a3 + 24);
      v17 = 144 * a2;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v18 = *v16;
        v19 = *(_OWORD *)(a3 + 40);
        v20 = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(v9 + 72) = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(v9 + 56) = v20;
        *(_OWORD *)(v9 + 40) = v19;
        *(_OWORD *)(v9 + 24) = v18;
        v21 = *(_OWORD *)(a3 + 88);
        v22 = *(_OWORD *)(a3 + 104);
        v23 = *(_OWORD *)(a3 + 120);
        *(_QWORD *)(v9 + 136) = *(_QWORD *)(a3 + 136);
        *(_OWORD *)(v9 + 120) = v23;
        *(_OWORD *)(v9 + 104) = v22;
        *(_OWORD *)(v9 + 88) = v21;
        v9 += 144;
        v17 -= 144;
      }
      while (v17);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0x8E38E38E38E38E39 * ((v9 - *a1) >> 4);
    v11 = v10 + a2;
    if (v10 + a2 > 0x1C71C71C71C71C7)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v12 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 4);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xE38E38E38E38E3)
      v13 = 0x1C71C71C71C71C7;
    else
      v13 = v11;
    v28 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>>((uint64_t)result, v13);
    else
      v14 = 0;
    v24 = v14;
    v25 = &v14[144 * v10];
    v26 = v25;
    v27 = &v14[144 * v13];
    std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__construct_at_end(&v24, a2, a3);
    std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__swap_out_circular_buffer(a1, &v24);
    return (_QWORD *)std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::~__split_buffer((uint64_t)&v24);
  }
  return result;
}

void sub_1B60B7570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = v4 + 144 * a2;
    v7 = (__int128 *)(a3 + 24);
    v8 = 144 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 = *v7;
      v10 = v7[1];
      v11 = v7[2];
      *(_OWORD *)(v4 + 72) = v7[3];
      *(_OWORD *)(v4 + 56) = v11;
      *(_OWORD *)(v4 + 40) = v10;
      *(_OWORD *)(v4 + 24) = v9;
      v12 = v7[4];
      v13 = v7[5];
      v14 = v7[6];
      *(_QWORD *)(v4 + 136) = *((_QWORD *)v7 + 14);
      *(_OWORD *)(v4 + 120) = v14;
      *(_OWORD *)(v4 + 104) = v13;
      *(_OWORD *)(v4 + 88) = v12;
      v4 += 144;
      v8 -= 144;
    }
    while (v8);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1B60B7640(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  __int128 v19;
  __int128 v20;

  v7 = a7;
  *(_QWORD *)&v20 = a6;
  *((_QWORD *)&v20 + 1) = a7;
  v19 = v20;
  v17[0] = a1;
  v17[1] = &v19;
  v17[2] = &v20;
  if (a3 == a5)
  {
    v15 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 144) = 0;
      *(_QWORD *)(v7 - 136) = 0;
      *(_QWORD *)(v7 - 128) = 0;
      v8 = *(_OWORD *)(a3 - 144);
      a3 -= 144;
      *(_OWORD *)(v7 - 144) = v8;
      *(_QWORD *)(v7 - 128) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      v9 = *(_OWORD *)(a3 + 104);
      v10 = *(_OWORD *)(a3 + 120);
      v11 = *(_QWORD *)(a3 + 136);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 40) = v9;
      v12 = *(_OWORD *)(a3 + 24);
      v13 = *(_OWORD *)(a3 + 40);
      v14 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(v7 - 88) = v14;
      *(_OWORD *)(v7 - 104) = v13;
      *(_OWORD *)(v7 - 120) = v12;
      v7 = *((_QWORD *)&v20 + 1) - 144;
      *((_QWORD *)&v20 + 1) -= 144;
    }
    while (a3 != a5);
    v15 = v20;
  }
  v18 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
  return v15;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::ThermalSpeakerProtection::SpeakerModel>,std::reverse_iterator<DspLib::ThermalSpeakerProtection::SpeakerModel*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 144;
  }
}

uint64_t std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 144);
    *(_QWORD *)(a1 + 16) = v2 - 144;
    if (v5)
    {
      *(_QWORD *)(v2 - 136) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 144;
    }
  }
}

void std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 144);
      v4 -= 144;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 136) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::ThermalSpeakerProtection::SpeakerModel>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t DspLib::BassQueen::Parameters::loudspeakerModelMode(uint64_t a1)
{
  return DspLib::LoudspeakerModel::Parameters::mode((float *)(a1 + 200));
}

float DspLib::BassQueen::Parameters::min(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;

  if (a3 <= 0x31)
    return DspLib::BassQueen::Parameters::kMinimum[a3];
  v5 = DspLib::LoudspeakerModel::Parameters::mode((float *)(a1 + 200));
  return DspLib::LoudspeakerModel::Parameters::min(v5, a3 - 50);
}

float DspLib::BassQueen::Parameters::max(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;

  if (a3 <= 0x31)
    return DspLib::BassQueen::Parameters::kMaximum[a3];
  v5 = DspLib::LoudspeakerModel::Parameters::mode((float *)(a1 + 200));
  return DspLib::LoudspeakerModel::Parameters::max(v5, a3 - 50);
}

void DspLib::BassQueen::Parameters::setBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  DspLib::LoudspeakerModel::Parameters::setBoundaries((float *)(a1 + 200), 39, a3 + 200, 39, a5 + 200);
}

void DspLib::LoudspeakerController::BiquadModel::initialize(DspLib::LoudspeakerController::BiquadModel *this, double a2, vDSP_Length a3)
{
  DspLib::Biquad::Filter::initialize(this, 1uLL, a3);
  DspLib::Biquad::Filter::initialize((DspLib::LoudspeakerController::BiquadModel *)((char *)this + 72), 1uLL, a3);
  *((_QWORD *)this + 18) = vcvtad_u64_f64(a2 * 0.00333333333);
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::BiquadModel *)((char *)this + 48));
}

void DspLib::LoudspeakerController::BiquadModel::zeroInputResponse(DspLib::Biquad::Filter *a1, uint64_t a2, float **a3)
{
  float **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a3 >= *((_QWORD *)a1 + 18))
    v5 = (float **)*((_QWORD *)a1 + 18);
  else
    v5 = a3;
  v6 = (_QWORD *)((char *)a1 + 72);
  DspLib::Biquad::Filter::copyStatesFrom((DspLib::Biquad::Filter *)((char *)a1 + 72), a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v10 - v8;
  DspLib::clear((float *)((char *)v10 - v8), (vDSP_Length)v5);
  DspLib::Biquad::Filter::process(v6, (uint64_t)v9, (uint64_t)v5, a2, v5);
  DspLib::clear((float *)(a2 + 4 * (_QWORD)a3 - 4 * ((char *)a3 - (char *)v5)), (char *)a3 - (char *)v5);
}

void DspLib::LoudspeakerController::ThermalModel::process(float32x2_t *a1, uint64_t a2, unint64_t a3, float *__C, vDSP_Length __N)
{
  float v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;

  v5 = a1[21].f32[0] + a1[21].f32[1];
  if (a3)
  {
    v6 = 0;
    v7 = a1[19];
    v8 = a1[20];
    do
    {
      v9 = vmla_f32(a1[18], vmla_n_f32(vneg_f32(a1[18]), v8, *(float *)(a2 + 4 * v6)), v7);
      a1[18] = v9;
      __C[v6++] = vaddv_f32(v9);
    }
    while (a3 > v6);
  }
  if (v5 != 0.0)
    DspLib::add(__C, __N, v5);
}

void DspLib::LoudspeakerController::ThermalModel::processNoUpdate(float32x2_t *a1, uint64_t a2, unint64_t a3, float *__C, vDSP_Length __N)
{
  float v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;

  v5 = a1[21].f32[0] + a1[21].f32[1];
  if (a3)
  {
    v6 = 0;
    v8 = a1[19];
    v7 = a1[20];
    v9 = a1[18];
    do
    {
      v9 = vmla_f32(v9, vmla_n_f32(vneg_f32(v9), v7, *(float *)(a2 + 4 * v6)), v8);
      __C[v6++] = vaddv_f32(v9);
    }
    while (a3 > v6);
  }
  if (v5 != 0.0)
    DspLib::add(__C, __N, v5);
}

vDSP_Length DspLib::LoudspeakerController::EfficiencyModel::processKernel(uint64_t a1, int a2, vDSP_Length a3, float *__C, vDSP_Length __N, float *a6, vDSP_Length a7, unint64_t a8)
{
  uint64_t v13;
  float v14;
  float *v15;
  uint64_t v18;
  float *v19;
  const float *v20;
  vDSP_Length v21;
  vDSP_Length v22;
  uint64_t v23;
  float v24;
  float *v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  float *v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 64))
  {
    MEMORY[0x1E0C80A78](a1);
    v19 = (float *)((char *)v36 - v18);
    DspLib::multiply(v20, v21, (float *)((char *)v36 - v18), *(float *)(a1 + 4));
    DspLib::abs(v19, a3);
    if (*(_BYTE *)(a1 + 44))
    {
      v22 = HIDWORD(a8);
      if (*(_BYTE *)(a1 + 24))
      {
        if (a3 > v22)
        {
          v23 = 0;
          while (1)
          {
            v24 = v19[v23];
            if (v24 <= *(float *)(a1 + 48))
            {
              if ((_DWORD)v22)
                v22 = (v22 - 1);
              else
                v22 = 0;
              if ((_DWORD)v22)
              {
LABEL_12:
                LODWORD(a8) = 0;
                __C[v23] = *(float *)(a1 + 56);
                v25 = (float *)(a1 + 60);
                goto LABEL_25;
              }
            }
            else
            {
              v22 = *(unsigned int *)(a1 + 52);
              if ((_DWORD)v22)
                goto LABEL_12;
            }
            if (v24 <= *(float *)(a1 + 28))
            {
              if ((_DWORD)a8)
                LODWORD(a8) = a8 - 1;
              else
                LODWORD(a8) = 0;
              if (!(_DWORD)a8)
              {
LABEL_24:
                __C[v23] = *(float *)(a1 + 16);
                v25 = (float *)(a1 + 20);
                goto LABEL_25;
              }
            }
            else
            {
              LODWORD(a8) = *(_DWORD *)(a1 + 32);
              if (!(_DWORD)a8)
                goto LABEL_24;
            }
            __C[v23] = *(float *)(a1 + 36);
            v25 = (float *)(a1 + 40);
LABEL_25:
            a6[v23++] = *v25;
            if (a3 <= v23)
              goto LABEL_67;
          }
        }
        DspLib::fill(__C, __N, *(float *)(a1 + 56));
        DspLib::fill(a6, a7, *(float *)(a1 + 60));
        v22 = (HIDWORD(a8) - a3);
        if (a3)
        {
          v34 = 0;
          v35 = &v19[a3 - 1];
          while (*v35 <= *(float *)(a1 + 48))
          {
            ++v34;
            --v35;
            if (v34 >= a3)
              goto LABEL_64;
          }
          LODWORD(a8) = 0;
          v22 = *(_DWORD *)(a1 + 52) - v34;
          goto LABEL_67;
        }
      }
      else if (a3)
      {
        v31 = 0;
        do
        {
          if (v19[v31] <= *(float *)(a1 + 48))
          {
            if ((_DWORD)v22)
              v22 = (v22 - 1);
            else
              v22 = 0;
          }
          else
          {
            v22 = *(unsigned int *)(a1 + 52);
          }
          if ((_DWORD)v22)
            v32 = 56;
          else
            v32 = 16;
          __C[v31] = *(float *)(a1 + v32);
          if ((_DWORD)v22)
            v33 = 60;
          else
            v33 = 20;
          a6[v31++] = *(float *)(a1 + v33);
        }
        while (a3 > v31);
      }
LABEL_64:
      LODWORD(a8) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 24))
      {
        if (a3)
        {
          v28 = 0;
          do
          {
            if (v19[v28] <= *(float *)(a1 + 28))
            {
              if ((_DWORD)a8)
                LODWORD(a8) = a8 - 1;
              else
                LODWORD(a8) = 0;
            }
            else
            {
              LODWORD(a8) = *(_DWORD *)(a1 + 32);
            }
            if ((_DWORD)a8)
              v29 = 36;
            else
              v29 = 16;
            __C[v28] = *(float *)(a1 + v29);
            if ((_DWORD)a8)
              v30 = 40;
            else
              v30 = 20;
            a6[v28++] = *(float *)(a1 + v30);
          }
          while (a3 > v28);
        }
      }
      else
      {
        DspLib::fill(__C, __N, *(float *)(a1 + 16));
        DspLib::fill(a6, a7, *(float *)(a1 + 20));
        LODWORD(a8) = 0;
      }
      v22 = 0;
    }
LABEL_67:
    DspLib::multiply(a6, a7, *(float *)(a1 + 4));
    return a8 | (v22 << 32);
  }
  v13 = 0;
  while (v13 != -36)
  {
    v14 = *(float *)(a1 + v13 + 92);
    v13 -= 12;
    if (*(float *)(a1 + 8) >= v14)
    {
      v15 = (float *)(a1 + v13 + 108);
      goto LABEL_28;
    }
  }
  v15 = (float *)(a1 + 16);
LABEL_28:
  DspLib::fill(__C, __N, *v15);
  v26 = DspLib::LoudspeakerController::EfficiencyModel::powerRatio((DspLib::LoudspeakerController::EfficiencyModel *)a1);
  DspLib::fill(a6, a7, v26);
  return 0;
}

float DspLib::LoudspeakerController::EfficiencyModel::powerRatio(DspLib::LoudspeakerController::EfficiencyModel *this)
{
  uint64_t v1;
  float v2;
  float *v3;

  if (*((_BYTE *)this + 64))
  {
    v1 = 0;
    while (v1 != -36)
    {
      v2 = *(float *)((char *)this + v1 + 92);
      v1 -= 12;
      if (*((float *)this + 2) >= v2)
      {
        v3 = (float *)((char *)this + v1 + 112);
        return *((float *)this + 1) * *v3;
      }
    }
    v3 = (float *)((char *)this + 20);
  }
  else if (*((_DWORD *)this + 27))
  {
    v3 = (float *)((char *)this + 60);
  }
  else if (*((_DWORD *)this + 26))
  {
    v3 = (float *)((char *)this + 40);
  }
  else
  {
    v3 = (float *)((char *)this + 20);
  }
  return *((float *)this + 1) * *v3;
}

void DspLib::LoudspeakerController::SpeakerSystemModel::initialize(DspLib::LoudspeakerController::SpeakerSystemModel *this, double a2, char *a3)
{
  DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 144), a2, 3uLL);
  DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 296), a2, 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 448), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 520), 1uLL, 1uLL);
  *((_DWORD *)this + 155) = 0;
  *((_QWORD *)this + 74) = 0;
  DspLib::AveragingDecimator::setSrcFactor((void **)this + 78, a3, (uint64_t)(a3 - 1));
  DspLib::AveragingDecimator::setSrcFactor((void **)this + 84, a3, (uint64_t)(a3 - 1));
  DspLib::LoudspeakerController::SpeakerSystemModel::reset(this);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::reset(DspLib::LoudspeakerController::SpeakerSystemModel *this)
{
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 192));
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 344));
  *((_DWORD *)this + 155) = 0;
  *((_QWORD *)this + 74) = 0;
  DspLib::AveragingDecimator::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 624));
  DspLib::AveragingDecimator::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 672));
}

void DspLib::LoudspeakerController::SpeakerSystemModel::process(uint64_t a1, uint64_t a2, vDSP_Length a3, const float *a4, vDSP_Length a5, __int128 *a6, uint64_t a7, float **a8, uint64_t a9, float **a10, float *a11, vDSP_Length a12, char a13)
{
  uint64_t v19;
  uint64_t v20;
  float *v21;
  DspLib::LoudspeakerController::EfficiencyModel *v22;
  float v23;
  uint64_t v24;
  float v25;
  float *v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  const float *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a13)
  {
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 144), a2, a3, a7, a8);
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 296), a2, a3, a9, a10);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePath((float32x2_t *)a1, (uint64_t)a4, a5, a11, a12);
  MEMORY[0x1E0C80A78](v19);
  v21 = (float *)((char *)&v33 - v20);
  v22 = (DspLib::LoudspeakerController::EfficiencyModel *)(a1 + 32);
  if (*(_BYTE *)(a1 + 96))
  {
    v23 = DspLib::LoudspeakerController::EfficiencyModel::powerRatio(v22);
    v24 = 0;
    while (v24 != -36)
    {
      v25 = *(float *)(a1 + v24 + 124);
      v24 -= 12;
      if (*(float *)(a1 + 40) >= v25)
      {
        v26 = (float *)(a1 + v24 + 140);
        goto LABEL_10;
      }
    }
    v26 = (float *)(a1 + 48);
LABEL_10:
    DspLib::multiplyAdd(a4, a5, v21, v23, *v26);
  }
  else
  {
    MEMORY[0x1E0C80A78](v22);
    v28 = (float *)((char *)&v33 - v27);
    MEMORY[0x1E0C80A78](v29);
    v31 = (const float *)((char *)&v33 - v30);
    *(_QWORD *)(a1 + 136) = DspLib::LoudspeakerController::EfficiencyModel::processKernel(v32, a2, a3, v28, a5, (float *)((char *)&v33 - v30), a5, *(_QWORD *)(a1 + 136));
    DspLib::multiplyAdd(a4, a5, v31, a5, v28, a5, v21);
  }
  v33 = *a6;
  v34 = *((_QWORD *)a6 + 2);
  DspLib::LoudspeakerController::SpeakerSystemModel::powerPath((float32x4_t *)a1, (uint64_t)v21, a5, (_QWORD **)&v33);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePath(float32x2_t *a1, uint64_t a2, uint64_t a3, float *a4, vDSP_Length a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](&a1[84]);
  v17 = (uint64_t)&v16 - v8;
  v18 = v9;
  DspLib::AveragingDecimator::processKernel(v10, v11, v12, (uint64_t)&v17, v13, v14, v15);
  if (v18)
    DspLib::LoudspeakerController::ThermalModel::process(a1 + 56, v17, v18, a4, a5);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::powerPath(float32x4_t *a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](&a1[39]);
  v23 = (char *)&v22 - v6;
  v24 = v7;
  DspLib::AveragingDecimator::processKernel(v8, v9, v10, (uint64_t)&v23, v11, v12, v13);
  v14 = v24;
  if (v24)
  {
    v15 = 0;
    v16 = v23;
    v17 = *a4;
    v18 = a1[1];
    do
    {
      v19 = (const float *)&v16[4 * v15];
      v20 = vld1q_dup_f32(v19);
      v21 = vmlaq_f32(*a1, vsubq_f32(v20, *a1), v18);
      *a1 = v21;
      *(_DWORD *)(*v17 + 4 * v15) = v21.i32[0];
      *(_DWORD *)(v17[1] + 4 * v15) = a1->i32[1];
      *(_DWORD *)(v17[2] + 4 * v15) = a1->i32[2];
      *(_DWORD *)(v17[3] + 4 * v15++) = a1->i32[3];
    }
    while (v14 > v15);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::powerPathZeroState(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v6 = (unint64_t)(float)(a1[39].f32[2] * (float)(unint64_t)(a3 + ((a1[40].i64[1] - a1[40].i64[0]) >> 2)));
  MEMORY[0x1E0C80A78](&a1[39]);
  v8 = (char *)v21 - v7;
  DspLib::AveragingDecimator::zeroStateResponse(v9, v10, v11, (uint64_t)v21 - v7, v6);
  if (v6)
  {
    v12 = 0;
    v13 = a1[1];
    v14 = **a4;
    v15 = (*a4)[1];
    v16 = (*a4)[2];
    v17 = (*a4)[3];
    v18 = 0uLL;
    do
    {
      v19 = (const float *)&v8[4 * v12];
      v20 = vld1q_dup_f32(v19);
      v18 = vmlaq_f32(v18, vsubq_f32(v20, v18), v13);
      *(_DWORD *)(v14 + 4 * v12) = v18.i32[0];
      *(_DWORD *)(v15 + 4 * v12) = v18.i32[1];
      *(_DWORD *)(v16 + 4 * v12) = v18.i32[2];
      *(_DWORD *)(v17 + 4 * v12++) = v18.i32[3];
    }
    while (v6 > v12);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePathZeroState(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = (unint64_t)(float)(a1[85].f32[0]
                               * (float)(unint64_t)(a3 + ((uint64_t)(*(_QWORD *)&a1[87] - *(_QWORD *)&a1[86]) >> 2)));
  MEMORY[0x1E0C80A78](&a1[84]);
  v8 = (char *)v16 - v7;
  DspLib::AveragingDecimator::zeroStateResponse(v9, v10, v11, (uint64_t)v16 - v7, v6);
  if (v6)
  {
    v12 = 0;
    v13 = a1[75];
    v14 = a1[76];
    v15 = 0;
    do
    {
      v15 = vmla_f32(v15, vmla_n_f32(vneg_f32(v15), v14, *(float *)&v8[4 * v12]), v13);
      *(float *)(a4 + 4 * v12++) = vaddv_f32(v15);
    }
    while (v6 > v12);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::temperatureZeroInput(float32x2_t *a1, float *a2, unint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  vDSP_Length v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v10 - v6;
  DspLib::AveragingDecimator::zeroInputResponse(v8 + 672, (float *)((char *)v10 - v6), v9);
  DspLib::LoudspeakerController::ThermalModel::processNoUpdate(a1 + 56, (uint64_t)v7, a3, a2, a3);
}

void DspLib::LoudspeakerController::SpeakerSystemModel::averagePowersZeroInput(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  float32x4_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v23 = (char *)&v22 - v7;
  v24 = v6;
  DspLib::AveragingDecimator::processKernel(v8 + 624, v9, v10, (uint64_t)&v23, a1[40].i64[0], (a1[40].i64[1] - a1[40].i64[0]) >> 2, 0);
  v11 = v24;
  if (v24)
  {
    v12 = 0;
    v13 = v23;
    v15 = *a1;
    v14 = a1[1];
    v16 = **a4;
    v17 = (*a4)[1];
    v18 = (*a4)[2];
    v19 = (*a4)[3];
    do
    {
      v20 = (const float *)&v13[4 * v12];
      v21 = vld1q_dup_f32(v20);
      v15 = vmlaq_f32(v15, vsubq_f32(v21, v15), v14);
      *(_DWORD *)(v16 + 4 * v12) = v15.i32[0];
      *(_DWORD *)(v17 + 4 * v12) = v15.i32[1];
      *(_DWORD *)(v18 + 4 * v12) = v15.i32[2];
      *(_DWORD *)(v19 + 4 * v12++) = v15.i32[3];
    }
    while (v11 > v12);
  }
}

void DspLib::LoudspeakerController::YoYoSmoother::configure(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v9;
  float v10;
  float v11;
  float v12;

  if (a2 != *(float *)(a1 + 8) || a3 != *(float *)(a1 + 12) || a4 != *(float *)(a1 + 16) || a5 != *(float *)(a1 + 20))
  {
    *(float *)(a1 + 8) = a2;
    *(float *)(a1 + 12) = a3;
    *(float *)(a1 + 16) = a4;
    *(float *)(a1 + 20) = a5;
    v9 = -(float)*(unint64_t *)a1;
    v10 = 1.0 - expf(v9 / a2);
    v11 = 1.0 - expf(v9 / a4);
    v12 = expf(v9 / a3);
    *(float *)(a1 + 24) = v10;
    *(float *)(a1 + 28) = v11;
    *(float *)(a1 + 32) = 1.0 - v12;
    *(float *)(a1 + 36) = 1.0 / a5;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
  }
}

void DspLib::LoudspeakerController::YoYoSmoother::process(DspLib::LoudspeakerController::YoYoSmoother *this, float a2, unint64_t a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;

  if (a3)
  {
    if (*(_QWORD *)this == a3)
    {
      v6 = *((float *)this + 6);
      v5 = *((float *)this + 7);
      v7 = *((float *)this + 8);
      v8 = *((float *)this + 10);
      v9 = *((float *)this + 11);
      if (v9 >= a2)
        v10 = *((float *)this + 8);
      else
        v10 = *((float *)this + 6);
      v11 = v9 + (float)(v10 * (float)(a2 - v9));
      v12 = *((float *)this + 12) + (float)(v5 * (float)(a2 - *((float *)this + 12)));
      *((float *)this + 11) = v11;
      *((float *)this + 12) = v12;
      if (v8 < a2)
      {
        v13 = (float)(v12 - v11) * *((float *)this + 9);
        if (v13 <= 1.0)
          v14 = (float)(v12 - v11) * *((float *)this + 9);
        else
          v14 = 1.0;
        v15 = v13 < 0.0;
        v16 = 0.0;
        if (!v15)
          v16 = v14;
        v7 = (float)(v6 * (float)(1.0 - v16)) + (float)(v16 * v5);
      }
      v17 = v8 + (float)(v7 * (float)(a2 - v8));
    }
    else
    {
      v18 = -(float)a3;
      v19 = 1.0 - expf(v18 / *((float *)this + 2));
      v20 = 1.0 - expf(v18 / *((float *)this + 4));
      v21 = 1.0 - expf(v18 / *((float *)this + 3));
      v22 = *((float *)this + 11);
      v23 = *((float *)this + 12) + (float)(v20 * (float)(a2 - *((float *)this + 12)));
      v24 = *((float *)this + 10);
      if (v22 >= a2)
        v25 = v21;
      else
        v25 = v19;
      v26 = v22 + (float)(v25 * (float)(a2 - v22));
      *((float *)this + 11) = v26;
      *((float *)this + 12) = v23;
      if (v24 < a2)
      {
        v27 = v23 - v26;
        v28 = v27 * *((float *)this + 9);
        if (v28 <= 1.0)
          v29 = v27 * *((float *)this + 9);
        else
          v29 = 1.0;
        v15 = v28 < 0.0;
        v30 = 0.0;
        if (!v15)
          v30 = v29;
        v21 = (float)(v19 * (float)(1.0 - v30)) + (float)(v30 * v20);
      }
      v17 = v24 + (float)(v21 * (float)(a2 - v24));
    }
    *((float *)this + 10) = v17;
  }
}

void DspLib::LoudspeakerController::MaskingEstimator::configure(DspLib::LoudspeakerController::MaskingEstimator *this, double a2, unint64_t a3, uint64_t a4)
{
  float *v6;
  vDSP_Length v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  char v13;
  unint64_t v14;
  vDSP_Length *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(double *)this != a2
    || a3 != (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2
    || *((_QWORD *)this + 1) != a4)
  {
    *((_QWORD *)this + 1) = a4;
    *(double *)this = a2;
    std::vector<float>::resize((uint64_t)this + 16, a3);
    DspLib::makePeriodicHannWindow(*((_DWORD **)this + 2), (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2);
    v6 = (float *)*((_QWORD *)this + 2);
    v7 = (uint64_t)(*((_QWORD *)this + 3) - (_QWORD)v6) >> 2;
    v8 = DspLib::norm(v6, v7);
    DspLib::multiply(v6, v7, 1.0 / v8);
    v9 = 0;
    v10 = 2 * a3;
    do
    {
      v11 = qword_1B6629C68[v9];
      v12 = (double)a3 / (double)v11;
      if (v12 <= 1.0)
        v13 = 0;
      else
        v13 = vcvtpd_u64_f64(log2(v12));
      v14 = v11 << v13;
      if (v14 < v10)
        v10 = v14;
      ++v9;
    }
    while (v9 != 4);
    *((_QWORD *)this + 5) = v10;
    std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 6, 0);
    v15 = (vDSP_Length *)operator new();
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v15, *((_QWORD *)this + 5));
    std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 6, (uint64_t)v15);
    v16 = (*((_QWORD *)this + 5) >> 1) + 1;
    *((_QWORD *)this + 7) = v16;
    std::vector<float>::resize((uint64_t)this + 464, v16);
    DspLib::fill(*((float **)this + 58), (uint64_t)(*((_QWORD *)this + 59) - *((_QWORD *)this + 58)) >> 2, 50.0);
    std::vector<unsigned long>::resize((uint64_t)this + 488, 0x64uLL);
    v17 = *((_QWORD *)this + 5);
    if (v17 == 640)
    {
      memcpy(*((void **)this + 61), DspLib::LoudspeakerController::MaskingEstimator::configure(double,unsigned long,unsigned long)::kBandLimits640, 0x320uLL);
      *((_QWORD *)this + 67) = 64;
      v18 = *((_QWORD *)this + 61);
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = (double)v17 / 640.0;
      *((_QWORD *)this + 67) = 0;
      v18 = *((_QWORD *)this + 61);
      do
      {
        v22 = v19 + 1;
        v23 = vcvtad_u64_f64(v21* (double)DspLib::LoudspeakerController::MaskingEstimator::configure(double,unsigned long,unsigned long)::kBandLimits640[v19]);
        if (v19 + 1 > v23)
          v23 = v19 + 1;
        *(_QWORD *)(v18 + 8 * v19) = v23;
        if (v23 - v20 == 1)
        {
          ++*((_QWORD *)this + 67);
          v23 = *(_QWORD *)(v18 + 8 * v19);
        }
        ++v19;
        v20 = v23;
      }
      while (v22 != 99);
      *(_QWORD *)(v18 + 792) = *((_QWORD *)this + 7);
    }
    std::vector<float>::resize((uint64_t)this + 512, (*((_QWORD *)this + 62) - v18) >> 3);
    v24 = *((_QWORD *)this + 61);
    v25 = *((_QWORD *)this + 62);
    v26 = v25 - v24;
    if (v25 != v24)
    {
      v27 = 0;
      v28 = 0;
      v29 = v26 >> 3;
      v30 = *((_QWORD *)this + 64);
      do
      {
        v31 = *(_QWORD *)(v24 + 8 * v27);
        *(float *)(v30 + 4 * v27++) = 1.0 / (float)(unint64_t)(v31 - v28);
        v28 = v31;
      }
      while (v29 > v27);
    }
    *((_QWORD *)this + 71) = 0x4040000041400000;
    v32 = *((_QWORD *)this + 1);
    if (*((_QWORD *)this + 73) != v32)
    {
      *((_QWORD *)this + 73) = v32;
      DspLib::LoudspeakerController::YoYoSmoother::configure((uint64_t)this + 584, 0.0, 0.0, 0.0, 1.0);
    }
    *((_DWORD *)this + 136) = 1065353216;
    *((_DWORD *)this + 144) = 0;
    *((_QWORD *)this + 78) = 0;
    *((_DWORD *)this + 158) = 0;
  }
}

void sub_1B60B8EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

DspLib::LoudspeakerController::MaskingEstimator *DspLib::LoudspeakerController::MaskingEstimator::setMaskFreqs(DspLib::LoudspeakerController::MaskingEstimator *this, float a2, float a3)
{
  DspLib::LoudspeakerController::MaskingEstimator *v4;
  unint64_t started;
  uint64_t v6;
  DspLib::LoudspeakerController::MaskingEstimator *v7;

  if (a2 <= a3)
  {
    v4 = this;
    started = DspLib::LoudspeakerController::MaskingEstimator::nearestStartBand(this, a2);
    if (started >= 0x62)
      v6 = 98;
    else
      v6 = started;
    *((_QWORD *)v4 + 69) = v6;
    this = (DspLib::LoudspeakerController::MaskingEstimator *)DspLib::LoudspeakerController::MaskingEstimator::nearestStopBand(v4, a3);
    if ((unint64_t)this <= v6 + 1)
      v7 = (DspLib::LoudspeakerController::MaskingEstimator *)(v6 + 1);
    else
      v7 = this;
    *((_QWORD *)v4 + 70) = v7;
  }
  return this;
}

uint64_t DspLib::LoudspeakerController::MaskingEstimator::nearestStartBand(DspLib::LoudspeakerController::MaskingEstimator *this, float a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  float v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  double v10;
  float v11;

  v3 = 0;
  v4 = 0;
  result = 0;
  v6 = fabsf(a2);
  v7 = *((_QWORD *)this + 61);
  v8 = *(double *)this;
  v9 = *((_QWORD *)this + 5);
  do
  {
    v10 = (double)v4;
    v4 = *(_QWORD *)(v7 + 8 * v3);
    *(float *)&v10 = v8 * v10 / (float)v9;
    v11 = vabds_f32(a2, *(float *)&v10);
    if (v11 < v6)
    {
      result = v3;
      v6 = v11;
    }
    ++v3;
  }
  while (v3 != 99);
  return result;
}

uint64_t DspLib::LoudspeakerController::MaskingEstimator::nearestStopBand(DspLib::LoudspeakerController::MaskingEstimator *this, float a2)
{
  uint64_t v3;
  uint64_t result;
  float v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  float v9;
  float v10;

  v3 = 0;
  result = 0;
  v5 = fabsf(a2);
  v6 = *((_QWORD *)this + 61);
  v7 = *(double *)this;
  v8 = *((_QWORD *)this + 5);
  do
  {
    v9 = v7 * (double)*(unint64_t *)(v6 + 8 * v3) / (float)v8;
    v10 = vabds_f32(a2, v9);
    if (v10 < v5)
    {
      v5 = v10;
      result = v3;
    }
    ++v3;
  }
  while (v3 != 99);
  return result;
}

void DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  DSPComplex *v7;
  int v8;
  DSPSplitComplex __Z;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v2);
  __Z.realp = v4;
  __Z.imagp = (float *)((char *)&__Z - v3);
  v10 = v5;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*(_QWORD **)(v6 + 48), v7, v8, &__Z);
  DspLib::FFT::amplitude((uint64_t)&__Z, *(float **)(a1 + 464), (uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 2);
  DspLib::multiply(*(float **)(a1 + 464), (uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 2, 0.5);
}

void DspLib::LoudspeakerController::MaskingEstimator::process(uint64_t a1, uint64_t a2, vDSP_Length a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  DSPComplex *v10;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  vDSP_Length v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  vDSP_Length v21;
  uint64_t v22;
  vDSP_Length v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float *v27;
  float *v28;
  uint64_t *v29;
  uint64_t v30;
  vDSP_Length v31;
  float v32;
  float v33;
  float v34;
  float v35;
  DspLib *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  DSPSplitComplex __Z;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  MEMORY[0x1E0C80A78](a1);
  v10 = (DSPComplex *)((char *)&__Z - v9);
  DspLib::multiply(v11, a3, (const float *)*(v8 - 3), a3, (float *)((char *)&__Z - v9));
  DspLib::clear((float *)v10 + v7 - (*v8 - a3), *v8 - a3);
  MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  __Z.realp = v15;
  __Z.imagp = (float *)((char *)&__Z - v14);
  v42 = v16;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*(_QWORD **)(a1 + 48), v10, v7, &__Z);
  v17 = *(_QWORD *)(a1 + 56);
  DspLib::FFT::amplitude((uint64_t)&__Z, (float *)v10, v17);
  DspLib::multiply((float *)v10, v17, *(const float **)(a1 + 464));
  v18 = *(float *)(a1 + 544);
  *(float *)(a1 + 544) = (float)(DspLib::peakiness((const float *)v10, v17) * 0.9) + (float)(v18 * 0.1);
  DspLib::square((float *)v10, v17);
  v19 = *(_QWORD *)(a1 + 488);
  v20 = *(_QWORD *)(a1 + 496) - v19;
  v21 = *(_QWORD *)(a1 + 536);
  v22 = *(_QWORD *)(a1 + 512);
  if (v17 >= v21)
    v23 = *(_QWORD *)(a1 + 536);
  else
    v23 = v17;
  if (v23)
    memcpy((void *)(a1 + 64), v10, 4 * v23);
  v24 = v20 >> 3;
  if (v21)
    v25 = *(_QWORD *)(v19 + 8 * v21 - 8);
  else
    v25 = 0;
  if (v24 >= v17)
    v24 = v17;
  v26 = v24 - v21;
  if (v24 > v21)
  {
    v27 = (float *)(v22 + 4 * v21);
    v28 = (float *)(a1 + 4 * v21 + 64);
    v29 = (uint64_t *)(v19 + 8 * v21);
    do
    {
      v30 = *v29;
      if (*v29 - v25 == -1)
        v31 = v17 - v25;
      else
        v31 = *v29 - v25;
      v32 = DspLib::sum((const float *)v10 + v25, v31);
      *v28 = v32;
      v33 = *v27++;
      *v28++ = v32 * v33;
      ++v29;
      v25 = v30;
      --v26;
    }
    while (v26);
  }
  v34 = *(float *)(a1 + 544);
  v35 = DspLib::median(a1 + 64 + 4 * *(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 560) - *(_QWORD *)(a1 + 552));
  v37 = DspLib::power2dBSafe(v36, v35, 1.0e-30) + 97.0;
  v38 = v34 + -1.0;
  if (v34 <= 1.0)
    v38 = 0.0;
  v39 = v37 + (float)(fminf(v38, 4.0) * -4.0);
  v40 = *(float *)(a1 + 576);
  if ((float)(v40 + *(float *)(a1 + 572)) < v39 || (v39 = v39 + *(float *)(a1 + 568), v39 < v40))
  {
    *(float *)(a1 + 576) = v39;
    v40 = v39;
  }
  DspLib::LoudspeakerController::YoYoSmoother::process((DspLib::LoudspeakerController::YoYoSmoother *)(a1 + 584), v40, a4);
}

void DspLib::LoudspeakerController::MaskingEstimator::status(uint64_t a1, char *__dst)
{
  uint64_t v3;
  float32x4_t v4;

  memmove(__dst, (const void *)(a1 + 64), 0x190uLL);
  v3 = 0;
  v4 = (float32x4_t)vdupq_n_s32(0xDA24260u);
  do
  {
    *(int8x16_t *)&__dst[v3] = vbslq_s8((int8x16_t)vcgtq_f32(v4, *(float32x4_t *)&__dst[v3]), (int8x16_t)v4, *(int8x16_t *)&__dst[v3]);
    v3 += 16;
  }
  while (v3 != 400);
  DspLib::power2dB((float *)__dst, 0x64uLL, 1.0);
  DspLib::add((float *)__dst, 0x64uLL, 97.0);
  *((_DWORD *)__dst + 99) = 0;
}

void DspLib::LoudspeakerController::TargetInterpolator::process(DspLib::LoudspeakerController::TargetInterpolator *this, float a2, vDSP_Length a3)
{
  int v5;
  float *v6;
  float *v8;
  float *v9;
  float *v10;
  float v11;

  if (a3)
  {
    v5 = *((unsigned __int8 *)this + 16);
    v6 = (float *)*((_QWORD *)this + 3);
    if (v5)
    {
      DspLib::fill(v6, (uint64_t)(*((_QWORD *)this + 4) - (_QWORD)v6) >> 2, a2);
      *((_BYTE *)this + 16) = 0;
    }
    else
    {
      v8 = &v6[a3];
      v9 = (float *)*((_QWORD *)this + 4);
      if (v9 != v8)
      {
        memmove(v6, v8, (char *)v9 - (char *)v8);
        v6 = (float *)*((_QWORD *)this + 3);
      }
      v10 = &v6[*(_QWORD *)this - a3 + *((_QWORD *)this + 1)];
      v11 = *(v10 - 1);
      if (v11 <= a2)
        DspLib::fill(v10, a3, a2);
      else
        DspLib::linSpace((uint64_t)(v10 - 1), a3 + 1, v11, a2);
    }
  }
}

DspLib::LoudspeakerController::Algorithm *DspLib::LoudspeakerController::Algorithm::Algorithm(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2;

  v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition);
  *(_QWORD *)v2 = &off_1E69C3D78;
  *(_BYTE *)(v2 + 296) = 1;
  *(_QWORD *)(v2 + 304) = 32;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_WORD *)(v2 + 408) = 0;
  *(_DWORD *)(v2 + 464) = 16843009;
  *(_WORD *)(v2 + 468) = 257;
  *(_QWORD *)(v2 + 512) = 0;
  *(_BYTE *)(v2 + 520) = 0;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_WORD *)(v2 + 504) = 0;
  *(_DWORD *)(v2 + 524) = 1065353216;
  *(_BYTE *)(v2 + 528) = 0;
  *(_DWORD *)(v2 + 532) = 0;
  *(_BYTE *)(v2 + 536) = 0;
  *(_QWORD *)(v2 + 560) = 0;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_BYTE *)(v2 + 584) = 0;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 608) = 0u;
  *(_OWORD *)(v2 + 624) = 0u;
  DspLib::LoudspeakerController::Algorithm::reset((DspLib::LoudspeakerController::Algorithm *)v2);
  return this;
}

void sub_1B60B9608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  DspLib::AlgorithmBaseNewParameters *v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void *v15;

  v13 = v11;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 624);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v10 + 608);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v12);
  a10 = v13;
  std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__destroy_vector::operator()[abi:ne180100](&a10);
  v15 = (void *)*((_QWORD *)v10 + 60);
  if (v15)
  {
    *((_QWORD *)v10 + 61) = v15;
    operator delete(v15);
  }
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(v10);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerController::Algorithm::initialize(DspLib::LoudspeakerController::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  DspLib::Biquad::Filter *v10;
  char *v11;
  BOOL v13;
  __int128 v14;
  int v15;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    v5 = *((double *)this + 3);
    if (v5 == 4000.0)
    {
      v6 = 3;
    }
    else if (v5 == 6000.0)
    {
      v6 = 4;
    }
    else if (v5 == 8000.0)
    {
      v6 = 6;
    }
    else
    {
      v6 = 8;
      if (v5 != 11025.0 && v5 != 12000.0)
      {
        if (v5 == 16000.0)
        {
          v6 = 12;
        }
        else
        {
          v6 = 16;
          if (v5 != 22050.0 && v5 != 24000.0)
          {
            if (v5 == 32000.0)
            {
              v6 = 24;
            }
            else
            {
              v6 = 32;
              if (v5 != 44100.0 && v5 != 48000.0)
              {
                v6 = 64;
                if (v5 != 88200.0 && v5 != 96000.0)
                {
                  v13 = v5 == 192000.0 || v5 == 176400.0;
                  v6 = 128;
                  if (!v13)
                    v6 = 1;
                }
              }
            }
          }
        }
      }
    }
    *((_QWORD *)this + 38) = v6;
    v7 = 8 * v6;
    *((_DWORD *)this + 8) = v7;
    *((_DWORD *)this + 9) = v7;
    *((_WORD *)this + 204) = 0;
    DspLib::clear((float *)this + 98, 4uLL);
    std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::resize((uint64_t)this + 480, *((unsigned int *)this + 3));
    std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::resize((uint64_t *)this + 68, *((unsigned int *)this + 3));
    v8 = (char *)*((_QWORD *)this + 68);
    v9 = (char *)*((_QWORD *)this + 69);
    if (v8 != v9)
    {
      v10 = (DspLib::Biquad::Filter *)(v8 + 4008);
      do
      {
        DspLib::Biquad::Filter::initialize(v10, 1uLL, 1uLL);
        v15 = 0;
        v14 = DspLib::Biquad::kBypassSection;
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v10, (uint64_t)&v14, 1, 0, 0x41uLL);
        DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::Biquad::Filter *)((char *)v10 - 3960), *((double *)this + 3), 3uLL);
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::Filter *)((char *)v10 - 3912));
        std::vector<DspLib::LinearDelay>::resize((uint64_t *)v10 - 366, 4uLL);
        DspLib::LoudspeakerController::BiquadModel::initialize((DspLib::Biquad::Filter *)((char *)v10 - 1064), *((double *)this + 3), 3uLL);
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::Filter *)((char *)v10 - 1016));
        DspLib::LoudspeakerController::SpeakerSystemModel::initialize((DspLib::Biquad::Filter *)((char *)v10 - 3800), *((double *)this + 3), *((char **)this + 38));
        DspLib::LoudspeakerController::SpeakerSystemModel::initialize((DspLib::Biquad::Filter *)((char *)v10 - 904), *((double *)this + 3), *((char **)this + 38));
        DspLib::LinearPhaseFilterbank::initialize((uint64_t)v10 - 1928, *((unsigned int *)this + 8));
        DspLib::BandCombiner::initialize((DspLib::Biquad::Filter *)((char *)v10 - 1600), *((unsigned int *)this + 8));
        DspLib::GainSmoother::initialize((DspLib::Biquad::Filter *)((char *)v10 - 1328), *((unsigned int *)this + 8));
        v11 = (char *)v10 + 136;
        v10 = (DspLib::Biquad::Filter *)((char *)v10 + 4144);
      }
      while (v11 != v9);
    }
    *((_BYTE *)this + 8) = 1;
    *((_BYTE *)this + 469) = 1;
    (*(void (**)(DspLib::LoudspeakerController::Algorithm *, char *, _QWORD))(*(_QWORD *)this + 256))(this, (char *)this + 264, 0);
  }
  (*(void (**)(DspLib::LoudspeakerController::Algorithm *))(*(_QWORD *)this + 152))(this);
  return v4;
}

void std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x2F71AAFF02F71ABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 4144 * a2;
    while (v3 != v7)
      DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(v3 - 4144));
    a1[1] = v7;
  }
}

void DspLib::LoudspeakerController::Algorithm::configureLogging(DspLib::LoudspeakerController::Algorithm *this, int a2)
{
  DspLib::Logger **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  DspLib::Logger **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  DspLib::Logger **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  *((_BYTE *)this + 584) = a2;
  if (a2)
  {
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[23],void>("ControllerFrameLog.bin", &v15);
    v3 = (DspLib::Logger **)((char *)this + 592);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 592, &v15);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[23],void>("ControllerPowerLog.bin", &v15);
    v7 = (DspLib::Logger **)((char *)this + 608);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 608, &v15);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[24],void>("ControllerSignalLog.bin", &v15);
    v11 = (DspLib::Logger **)((char *)this + 624);
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 624, &v15);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (*v3)
      DspLib::Logger::logData(*v3, (float)*((unsigned int *)this + 3));
    if (*v7)
      DspLib::Logger::logData(*v7, (float)*((unsigned int *)this + 3));
    if (*v11)
      DspLib::Logger::logData(*v11, (float)*((unsigned int *)this + 3));
  }
  else
  {
    DspLib::LoudspeakerController::Algorithm::uninitializeLogging(this);
  }
}

void DspLib::LoudspeakerController::Algorithm::uninitializeLogging(DspLib::LoudspeakerController::Algorithm *this)
{
  DspLib::Logger *v2;
  DspLib::Logger *v3;
  DspLib::Logger *v4;

  v2 = (DspLib::Logger *)*((_QWORD *)this + 74);
  if (v2)
  {
    DspLib::Logger::FlushLog(v2);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 74);
  }
  v3 = (DspLib::Logger *)*((_QWORD *)this + 76);
  if (v3)
  {
    DspLib::Logger::FlushLog(v3);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 76);
  }
  v4 = (DspLib::Logger *)*((_QWORD *)this + 78);
  if (v4)
  {
    DspLib::Logger::FlushLog(v4);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 78);
  }
}

void DspLib::LoudspeakerController::Algorithm::uninitialize(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 68);
  v3 = *((_QWORD *)this + 69);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = *((_QWORD *)this + 68);
    do
    {
      v6 = v2 + 4144 * v4;
      v7 = v6 + 2368;
      v8 = v6 + 2328;
      DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(v5 + 4008));
      DspLib::LinearDelay::setLength((float **)v5, 0);
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v5 + 1080));
      DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(v5 + 4088), 0);
      v9 = 2200;
      do
      {
        v10 = v5 + v9;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v5 + v9);
        v9 += 24;
      }
      while (v10 + 24 != v5 + 2320);
      *(_QWORD *)(v8 + 32) = 0;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      v5 += 4144;
      ++v4;
      *(_QWORD *)(v7 + 32) = 0;
    }
    while (v5 != v3);
  }
  DspLib::LoudspeakerController::Algorithm::uninitializeLogging(this);
  *((_BYTE *)this + 8) = 0;
}

uint64_t DspLib::LoudspeakerController::Algorithm::checkParameterConstraints(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t *v2;
  unint64_t v3;
  float v4;
  int v6;
  float *v7;
  uint64_t v8;
  char v9;
  char v10;
  float *v11;
  uint64_t v12;
  float v13;
  float *v14;
  float v15;

  v2 = (uint64_t *)((char *)this + 264);
  v3 = vcvtas_u32_f32(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 9u));
  if (v3 > *((unsigned int *)this + 3))
    return 0;
  v4 = DspLib::AlgorithmParametersInstance::operator[](v2, 0xCu);
  if (v4 < DspLib::AlgorithmParametersInstance::operator[](v2, 0xDu))
    return 0;
  if (*((_DWORD *)this + 3))
  {
    v6 = 0;
LABEL_6:
    v7 = (float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)v2, v6 + 10);
    if (v7[4] <= v7[3] && v7[5] <= v7[6])
    {
      v8 = 0;
      v9 = 1;
      while (1)
      {
        v10 = v9;
        v11 = &v7[v8];
        if (v11[9] > *(float *)((char *)v7 + ((4 * v8) | 0x28)) || *(float *)((char *)v7 + ((4 * v8) | 0x30)) > v11[13])
          break;
        v9 = 0;
        v8 = 1;
        if ((v10 & 1) == 0)
        {
          if (v7[14] <= v7[15])
          {
            v12 = 0;
            while (1)
            {
              v13 = v7[v12 + 18];
              if (v7[v12 + 17] > v13 || v13 > v7[v12 + 19])
                break;
              if (++v12 == 3)
              {
                if (v3 && v7[30] >= (float)v3)
                  return 0;
                if (++v6 < *((_DWORD *)this + 3))
                  goto LABEL_6;
                goto LABEL_20;
              }
            }
          }
          return 0;
        }
      }
    }
    return 0;
  }
LABEL_20:
  v14 = (float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)v2, 1u);
  if (v14[26] != 0.0)
  {
    v15 = v14[31];
    if (v14[28] >= v15 || v15 >= v14[34])
      return 0;
  }
  return 1;
}

void DspLib::LoudspeakerController::Algorithm::setParameters(DspLib::LoudspeakerController::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  float v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  double v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  float *v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  double v28;
  float v29;
  double v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float **v40;
  float **v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  double *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float32x2_t v59;
  float v60;
  DspLib *v61;
  DspLib *v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t i;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  DspLib *v88;
  uint64_t v89;
  uint64_t v90;
  float **v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  double v100;
  double v101;
  float v102;
  double v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  float v111;
  uint64_t v112;
  __n128 *v113;
  __n128 *v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  float v120;
  float v121;
  unint64_t v122;
  uint64_t v123;
  DspLib::AlgorithmParametersInstance *v124;
  unint64_t v125;
  unsigned __int32 v126;
  unsigned __int32 v127;
  unsigned __int32 v128;
  unsigned __int32 v129;
  unsigned __int32 v130;
  unsigned __int32 v131;
  unsigned __int32 v132;
  unsigned __int32 v133;
  unsigned __int32 v134;
  unsigned __int32 v135;
  unsigned __int32 v136;
  unsigned __int32 v137;
  unsigned __int32 v138;
  unsigned __int32 v139;
  unsigned __int32 v140;
  unsigned __int32 v141;
  unsigned __int32 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __n128 v147;
  __n128 v148;
  __int128 v149;
  uint64_t v150;
  _BYTE v151[60];

  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((_BYTE *)this + 8) && DspLib::LoudspeakerController::Algorithm::checkParameterConstraints(this))
  {
    *((_QWORD *)this + 59) = (unint64_t)DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 9u);
    *((_BYTE *)this + 504) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0xAu) != 0.0;
    *((_BYTE *)this + 536) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x13u) != 0.0;
    *((_BYTE *)this + 296) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 3u) >= 0.5;
    v124 = (DspLib::LoudspeakerController::Algorithm *)((char *)this + 264);
    v4 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0);
    v5 = 0;
    v6 = *((_QWORD *)this + 38);
    v7 = vcvtad_u64_f64(*((double *)this + 3) * v4 / 1000.0) / v6 - 1;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    v9 = (double)(v7 >> 1);
    do
    {
      v10 = qword_1B6629C68[v5];
      v11 = v9 / (double)v10;
      if (v11 <= 1.0)
        v12 = 0;
      else
        v12 = vcvtpd_u64_f64(log2(v11));
      v13 = v10 << v12;
      if (v13 < v8)
        v8 = v13;
      ++v5;
    }
    while (v5 != 4);
    v117 = *((_QWORD *)this + 41);
    v118 = v8;
    v14 = v8 + 1 + v8;
    *((_QWORD *)this + 41) = v8;
    *((_QWORD *)this + 42) = v8 * v6;
    *((_QWORD *)this + 43) = (v8 + 1) * v6;
    *((_QWORD *)this + 44) = v8 + 1;
    *((_QWORD *)this + 39) = v14;
    *((_QWORD *)this + 40) = v14 * v6;
    v15 = *((unsigned int *)this + 8);
    v16 = DspLib::AlgorithmParametersInstance::group(v124, 1u);
    v17 = v16;
    v18 = 0;
    v19 = 376;
    v20 = *((double *)this + 3) / (double)*((unint64_t *)this + 38);
    do
    {
      v21 = (float *)((char *)this + v19);
      *(v21 - 4) = *(float *)(v16 + v19 - 308);
      *v21 = *(float *)(v16 + v19 - 292) * 0.01;
      *(double *)&v151[v18 + 20] = v20 * *(float *)(v16 + v19 - 324);
      v19 += 4;
      v18 += 8;
    }
    while (v18 != 32);
    *((_BYTE *)this + 409) = *(float *)v16 != 0.0;
    *((_BYTE *)this + 520) = *(float *)(v16 + 104) != 0.0;
    *((_DWORD *)this + 131) = *(_DWORD *)(v16 + 108);
    *((_BYTE *)this + 464) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 4u) != 0.0;
    *((_BYTE *)this + 465) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 5u) != 0.0;
    *((_BYTE *)this + 466) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 6u) != 0.0;
    *((_BYTE *)this + 467) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 7u) != 0.0;
    *((_BYTE *)this + 468) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 8u) != 0.0;
    *((_BYTE *)this + 505) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0xBu) != 0.0;
    v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0xCu);
    v23 = vcvtad_u64_f64(*((double *)this + 3)/ (double)*((unint64_t *)this + 38)* (float)(v22 - DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0xDu))/ 1000.0);
    if (v23 <= 1)
      v23 = 1;
    *((_QWORD *)this + 64) = v23;
    *((_BYTE *)this + 528) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0xEu) != 0.0;
    v24 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0xFu);
    v25 = *((double *)this + 3);
    *((float *)this + 133) = expf(-1.0 / (float)((float)(v24 * v25) / 1000.0));
    v26 = *((_QWORD *)this + 43);
    v27 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 1u);
    v28 = *((double *)this + 3);
    v29 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0x12u);
    v30 = *((double *)this + 3);
    v31.n128_f32[0] = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 2u);
    if (*((_DWORD *)this + 3))
    {
      v32 = 0;
      v33 = 0;
      v125 = v15 / v6;
      v122 = v26 - v6;
      v34 = v28 * v27 / 1000.0;
      v35 = *((double *)this + 3) * v31.n128_f32[0] / 1000.0;
      v120 = v35;
      v121 = v34;
      v36 = v30 * v29 / 1000.0;
      v37 = v36 >= 0.0;
      if (v36 < 0.0)
        v36 = 0.0;
      v119 = LODWORD(v36) | (unint64_t)(v37 << 32);
      v143 = 2200;
      v123 = v17;
      do
      {
        v144 = v32;
        v38 = *((_QWORD *)this + 68);
        v39 = v38 + 4144 * v33;
        DspLib::LinearDelay::setLength((float **)v39, *((_QWORD *)this + 40) + *((unsigned int *)this + 8));
        DspLib::LinearDelay::setLength((float **)(v39 + 984), *((_QWORD *)this + 40) + *((unsigned int *)this + 8));
        DspLib::LinearDelay::setLength((float **)(v39 + 1008), *((_QWORD *)this + 40) + *((unsigned int *)this + 8));
        DspLib::LinearDelay::setLength((float **)(v39 + 1032), *((_QWORD *)this + 40) + *((unsigned int *)this + 8));
        DspLib::LinearDelay::setLength((float **)(v39 + 1056), *((_QWORD *)this + 39) + v125);
        v40 = *(float ***)(v39 + 1080);
        v41 = *(float ***)(v39 + 1088);
        if (v40 != v41)
        {
          v42 = *((_QWORD *)this + 39) + v125;
          do
          {
            DspLib::LinearDelay::setLength(v40, v42);
            v40 += 3;
          }
          while (v40 != v41);
        }
        v145 = v38;
        v43 = v38 + 4144 * v33;
        v44 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v124, 0xCu);
        DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(v43 + 4088), (unint64_t)(*((double *)this + 3) / (double)*((unint64_t *)this + 38) * (float)(v44 / 1000.0)));
        v45 = (double *)(v43 + 1104);
        DspLib::LoudspeakerController::MaskingEstimator::configure((DspLib::LoudspeakerController::MaskingEstimator *)(v43 + 1104), *((double *)this + 3), *((_QWORD *)this + 40) + *((unsigned int *)this + 8), *((unsigned int *)this + 8));
        v46 = DspLib::AlgorithmParametersInstance::group(v124, (int)v33 + 10);
        v47 = v46;
        v48 = *((_QWORD *)this + 60) + 16 * v33;
        *(_DWORD *)v48 = vcvtas_u32_f32(*(float *)(v46 + 116));
        *(_QWORD *)(v48 + 8) = (unint64_t)*(float *)(v46 + 120);
        *(_DWORD *)(v43 + 32) = *(_DWORD *)(v46 + 64);
        v49 = *(_DWORD *)v46;
        *(_DWORD *)(v43 + 40) = *(_DWORD *)v46;
        *(_DWORD *)(v43 + 2936) = v49;
        *(_DWORD *)(v43 + 928) = *(_DWORD *)(v46 + 8);
        v50 = *(_QWORD *)(v46 + 36);
        *(_DWORD *)(v43 + 940) = *(_DWORD *)(v46 + 44);
        *(_QWORD *)(v43 + 932) = v50;
        *(_OWORD *)(v43 + 944) = *(_OWORD *)(v46 + 48);
        v51 = *(float *)(v43 + 944);
        v52 = *(float *)(v43 + 948);
        v53 = 1.0;
        v54 = 1.0;
        if (v52 > v51)
          v54 = (float)(*(float *)(v43 + 936) - *(float *)(v43 + 932)) / (float)(v52 - v51);
        *(float *)(v43 + 960) = v54;
        v55 = *(float *)(v43 + 952);
        if (v55 > v52)
          v53 = (float)(*(float *)(v43 + 940) - *(float *)(v43 + 936)) / (float)(v55 - v52);
        *(float *)(v43 + 964) = v53;
        v57 = *(float *)(v43 + 952);
        v56 = *(float *)(v43 + 956);
        if (v56 <= v57)
          *(_DWORD *)(v43 + 956) = 1065353216;
        else
          *(float *)(v38 + 4144 * v33 + 968) = (float)(2.0 - *(float *)(v43 + 940)) / (float)(v56 - v57);
        DspLib::LoudspeakerController::MaskingEstimator::setMaskFreqs((DspLib::LoudspeakerController::MaskingEstimator *)(v43 + 1104), *(float *)(v46 + 20), *(float *)(v46 + 24));
        v58 = v38 + 4144 * v33;
        v59 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v47 + 28)), *v45));
        v60 = *v45 * *(float *)(v47 + 108) / 1000.0;
        DspLib::LoudspeakerController::YoYoSmoother::configure(v58 + 1688, v59.f32[0], v59.f32[1], v60, *(float *)(v47 + 112));
        *(float *)(v58 + 3876) = DspLib::dB2Amp(v61, -*(float *)(v47 + 88));
        *(_QWORD *)(v58 + 3880) = *(float *)(v47 + 92) != 0.0;
        v63 = 5;
        if (*(float *)(v47 + 96) != 0.0)
          v63 = 4;
        *(_QWORD *)(v58 + 3888) = v63;
        *(_QWORD *)(v58 + 3896) = vcvtad_u64_f64(*((double *)this + 3) * 0.00100000005);
        v64 = *(float *)(v47 + 12);
        *(float *)(v58 + 976) = v64;
        if (v64 >= *(float *)(v47 + 16))
          v64 = *(float *)(v47 + 16);
        *(float *)(v58 + 972) = v64;
        *(float *)(v58 + 3928) = DspLib::dB2Amp(v62, -*(float *)(v47 + 100));
        v65 = *((_QWORD *)this + 43);
        v66 = *((unsigned int *)this + 8);
        if (*(_QWORD *)(v58 + 1744) != v65 || *(_QWORD *)(v38 + 4144 * v33 + 1752) != v66)
        {
          *(_QWORD *)(v58 + 1744) = v65;
          v67 = v38 + 4144 * v33;
          *(_QWORD *)(v67 + 1752) = v66;
          std::vector<float>::resize(v67 + 1768, v65 + v66);
          *(_BYTE *)(v67 + 1760) = 1;
          v65 = *((_QWORD *)this + 43);
          v66 = *((unsigned int *)this + 8);
        }
        v68 = v38 + 4144 * v33;
        if (*(_QWORD *)(v68 + 1792) != v65 || *(_QWORD *)(v38 + 4144 * v33 + 1800) != v66)
        {
          *(_QWORD *)(v68 + 1792) = v65;
          v69 = v38 + 4144 * v33;
          *(_QWORD *)(v69 + 1800) = v66;
          std::vector<float>::resize(v69 + 1816, v65 + v66);
          *(_BYTE *)(v69 + 1808) = 1;
        }
        v70 = v38 + 4144 * v33;
        v71 = *((_QWORD *)this + 44);
        if (*(_QWORD *)(v70 + 1840) != v71 || *(_QWORD *)(v38 + 4144 * v33 + 1848) != 8)
        {
          *(_QWORD *)(v70 + 1840) = v71;
          v72 = v38 + 4144 * v33;
          *(_QWORD *)(v72 + 1848) = 8;
          std::vector<float>::resize(v72 + 1864, v71 + 8);
          *(_BYTE *)(v72 + 1856) = 1;
        }
        v73 = 0;
        v74 = v38 + v144;
        do
        {
          v75 = v74 + v73;
          v76 = *((_QWORD *)this + 44);
          if (*(_QWORD *)(v74 + v73 + 1888) != v76 || *(_QWORD *)(v75 + 1896) != 8)
          {
            *(_QWORD *)(v75 + 1888) = v76;
            *(_QWORD *)(v75 + 1896) = 8;
            std::vector<float>::resize(v75 + 1912, v76 + 8);
            *(_BYTE *)(v75 + 1904) = 1;
          }
          v73 += 48;
        }
        while (v73 != 192);
        v77 = 0;
        v78 = *((double *)this + 3);
        do
        {
          v79 = *(float *)(v47 + 68 + v77) / v78;
          *(float *)&v151[v77] = v79;
          v77 += 4;
        }
        while (v77 != 20);
        v80 = v145 + 4144 * v33;
        v81 = v145;
        DspLib::LinearPhaseFilterbank::configure(v80 + 2080, *((_QWORD *)this + 42), (uint64_t)v151, 5uLL);
        v82 = (uint64_t *)(v80 + 2176);
        v83 = (uint64_t *)(v145 + v143);
        for (i = 2368; i != 2408; i += 8)
        {
          v85 = *v82;
          if (*v82 <= (unint64_t)*((unsigned int *)this + 8))
            v85 = *((unsigned int *)this + 8);
          std::vector<float>::resize((uint64_t)v83, v85 + *((_QWORD *)this + 43));
          v86 = *v83;
          v83 += 3;
          *(_QWORD *)(v145 + v144 + i) = v86;
        }
        v87 = v145 + 4144 * v33;
        DspLib::BandCombiner::configure((unint64_t *)(v87 + 2408), 5uLL, v122, v119, v121);
        DspLib::GainSmoother::configure((DspLib::GainSmoother *)(v87 + 2680), v122, v120);
        if (*((_BYTE *)this + 520))
        {
          v89 = operator new();
          *(_OWORD *)v89 = 0u;
          *(_OWORD *)(v89 + 16) = 0u;
          *(_OWORD *)(v89 + 32) = 0u;
          *(_QWORD *)(v89 + 48) = 0;
          v90 = v145 + 4144 * v33;
          v91 = (float **)(v90 + 4120);
          v150 = 0;
          v92 = *(_QWORD *)(v90 + 4120);
          *(_QWORD *)(v90 + 4120) = v89;
          if (v92)
            std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100](v90 + 4120, v92);
          v93 = v150;
          v150 = 0;
          if (v93)
            std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100]((uint64_t)&v150, v93);
          v94 = *v91;
          v95 = (unint64_t)(*(double (**)(DspLib::LoudspeakerController::Algorithm *))(*(_QWORD *)this + 40))(this);
          DspLib::CircularDelay::setLength((DspLib::CircularDelay *)v94, v95);
          v94[9] = 1.0 / (float)v95;
          v81 = v145;
        }
        else
        {
          v96 = v145 + 4144 * v33;
          v97 = *(_QWORD *)(v96 + 4120);
          *(_QWORD *)(v96 + 4120) = 0;
          if (v97)
            std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100](v96 + 4120, v97);
        }
        v98 = *(float *)(v47 + 4);
        v99 = *(float *)(v17 + 12);
        v129 = *(_DWORD *)(v17 + 8);
        v130 = *(_DWORD *)(v17 + 4);
        v100 = *((double *)this + 3) / 1000.0;
        v127 = *(_DWORD *)(v17 + 24);
        v128 = *(_DWORD *)(v17 + 16);
        v101 = round(v100 * *(float *)(v17 + 20));
        v102 = *(float *)(v17 + 32);
        v126 = *(_DWORD *)(v17 + 36);
        v103 = round(v100 * *(float *)(v17 + 40));
        v141 = *(_DWORD *)(v17 + 44);
        v142 = *(_DWORD *)(v17 + 28);
        v139 = *(_DWORD *)(v17 + 112);
        v140 = *(_DWORD *)(v17 + 48);
        v137 = *(_DWORD *)(v17 + 120);
        v138 = *(_DWORD *)(v17 + 116);
        v135 = *(_DWORD *)(v17 + 128);
        v136 = *(_DWORD *)(v17 + 124);
        v133 = *(_DWORD *)(v17 + 136);
        v134 = *(_DWORD *)(v17 + 132);
        v131 = *(_DWORD *)(v17 + 144);
        v132 = *(_DWORD *)(v17 + 140);
        v104 = *(float *)(v17 + 104);
        v105 = DspLib::dB2Amp(v88, -*(float *)(v17 + 100));
        v106 = 0;
        v107 = v81 + 4144 * v33;
        v109 = *(_OWORD *)(v107 + 224);
        v108 = v107 + 224;
        v110 = v109;
        *(float *)(v108 + 3772) = v105;
        do
        {
          v146 = v110;
          v111 = 1.0 - exp(-1.0 / *(double *)&v151[8 * v106 + 20]);
          v149 = v146;
          *(float *)((unint64_t)&v149 & 0xFFFFFFFFFFFFFFF3 | (4 * (v106 & 3))) = v111;
          v110 = v149;
          ++v106;
        }
        while (v106 != 4);
        v112 = 0;
        *(_OWORD *)v108 = v149;
        v113 = (__n128 *)(v145 + 4144 * v33);
        v113[15].n128_f32[3] = v98;
        v113[16].n128_u32[0] = v130;
        v113[16].n128_u32[1] = v129;
        v113[16].n128_u8[8] = v99 != 0.0;
        v113[16].n128_u32[3] = v128;
        v113[17].n128_u32[0] = v101;
        v113[17].n128_u32[1] = v127;
        v113[17].n128_u32[2] = v142;
        v113[17].n128_u8[12] = v102 != 0.0;
        v113[18].n128_u32[0] = v126;
        v113[18].n128_u32[1] = v103;
        v113[18].n128_u32[2] = v141;
        v113[18].n128_u32[3] = v140;
        v113[19].n128_u8[0] = v104 != 0.0;
        v113[19].n128_u32[1] = v139;
        v113[19].n128_u32[2] = v138;
        v113[19].n128_u32[3] = v137;
        v113[20].n128_u32[0] = v136;
        v113[20].n128_u32[1] = v135;
        v113[20].n128_u32[2] = v134;
        v113[20].n128_u32[3] = v133;
        v113[21].n128_u32[0] = v132;
        v113[21].n128_u32[1] = v131;
        v113[15].n128_f32[1] = (float)(v98 * v113[15].n128_f32[0]) + 1.0;
        v113[21].n128_u64[1] = 0;
        v31 = v113[195];
        v114 = v113 + 195;
        do
        {
          v147 = v31;
          v115 = 1.0 - exp(-1.0 / *(double *)&v151[8 * v112 + 20]);
          v148 = v147;
          *(float *)((unint64_t)&v148 & 0xFFFFFFFFFFFFFFF3 | (4 * (v112 & 3))) = v115;
          v31 = v148;
          ++v112;
        }
        while (v112 != 4);
        *v114 = v148;
        v116 = v145 + 4144 * v33;
        *(float *)(v116 + 3148) = v98;
        *(_DWORD *)(v116 + 3152) = v130;
        *(_DWORD *)(v116 + 3156) = v129;
        *(_BYTE *)(v116 + 3160) = v99 != 0.0;
        *(_DWORD *)(v116 + 3164) = v128;
        *(_DWORD *)(v116 + 3168) = v101;
        *(_DWORD *)(v116 + 3172) = v127;
        *(_DWORD *)(v116 + 3176) = v142;
        *(_BYTE *)(v116 + 3180) = v102 != 0.0;
        *(_DWORD *)(v116 + 3184) = v126;
        *(_DWORD *)(v116 + 3188) = v103;
        *(_DWORD *)(v116 + 3192) = v141;
        *(_DWORD *)(v116 + 3196) = v140;
        *(_BYTE *)(v116 + 3200) = v104 != 0.0;
        *(_DWORD *)(v116 + 3204) = v139;
        *(_DWORD *)(v116 + 3208) = v138;
        *(_DWORD *)(v116 + 3212) = v137;
        *(_DWORD *)(v116 + 3216) = v136;
        *(_DWORD *)(v116 + 3220) = v135;
        *(_DWORD *)(v116 + 3224) = v134;
        *(_DWORD *)(v116 + 3228) = v133;
        *(_DWORD *)(v116 + 3232) = v132;
        *(_DWORD *)(v116 + 3236) = v131;
        *(float *)(v116 + 3140) = (float)(v98 * *(float *)(v116 + 3136)) + 1.0;
        *(_QWORD *)(v116 + 3240) = 0;
        v31.n128_u32[0] = *(_DWORD *)(v47 + 104);
        *(_DWORD *)(v116 + 4000) = v31.n128_u32[0];
        ++v33;
        v32 = v144 + 4144;
        v143 += 4144;
        v17 = v123;
      }
      while (v33 < *((unsigned int *)this + 3));
    }
    if (v118 != v117)
      (*(void (**)(DspLib::LoudspeakerController::Algorithm *, __n128))(*(_QWORD *)this + 152))(this, v31);
  }
}

void DspLib::LoudspeakerController::Algorithm::setSpeakerModel(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = (float *)a2;
  v8 = *(_QWORD *)(a1 + 544);
  switch(a4)
  {
    case 1:
      v9 = v8 + 4144 * a5;
      DspLib::Biquad::Filter::setCoefficients(v9 + 48, a2, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v9 + 120, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v9 + 2944, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v9 + 3016, (uint64_t)v7, a3, 0, 0x41uLL);
      v10 = 1.0;
      if (a3)
      {
        v11 = &v7[5 * a3];
        do
        {
          v10 = v10 * (float)((float)((float)(*v7 + v7[1]) + v7[2]) / (float)((float)(v7[3] + 1.0) + v7[4]));
          v7 += 5;
        }
        while (v7 != v11);
      }
      v12 = (float *)(v8 + 4144 * a5);
      v13 = (float)(v12[63] * v10) + 1.0;
      v12[60] = v10;
      v12[61] = v13;
      v12[784] = v10;
      v12[785] = (float)(v12[787] * v10) + 1.0;
      return;
    case 2:
      v14 = v8 + 4144 * a5;
      DspLib::Biquad::Filter::setCoefficients(v14 + 352, a2, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v14 + 424, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v14 + 3248, (uint64_t)v7, a3, 0, 0x41uLL);
      v15 = v14 + 3320;
      goto LABEL_9;
    case 3:
      v16 = v8 + 4144 * a5;
      DspLib::Biquad::Filter::setCoefficients(v16 + 504, a2, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v16 + 576, (uint64_t)v7, a3, 0, 0x41uLL);
      DspLib::Biquad::Filter::setCoefficients(v16 + 3400, (uint64_t)v7, a3, 0, 0x41uLL);
      v15 = v16 + 3472;
      goto LABEL_9;
    case 6:
      v15 = v8 + 4144 * a5 + 4008;
LABEL_9:
      DspLib::Biquad::Filter::setCoefficients(v15, (uint64_t)v7, a3, 0, 0x41uLL);
      break;
    default:
      return;
  }
}

float DspLib::LoudspeakerController::Algorithm::setVoiceCoilModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  float result;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 4);
  v6 = (float *)(*(_QWORD *)(a1 + 544) + 4144 * a3);
  v12 = *(float *)a2;
  v4 = v12;
  v13 = v5;
  v14 = *(_QWORD *)(a2 + 12);
  v10 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v6 + 182), (uint64_t)&v12, 1, 0, 0x41uLL);
  v6[202] = v10 + 1.0;
  v6[204] = (float)(v4 + v4) / (float)(v10 + 1.0);
  v8 = *(_QWORD *)(a2 + 4);
  v12 = *(float *)a2;
  v7 = v12;
  v13 = v8;
  v14 = *(_QWORD *)(a2 + 12);
  v11 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v6 + 906), (uint64_t)&v12, 1, 0, 0x41uLL);
  v6[926] = v11 + 1.0;
  result = (float)(v7 + v7) / (float)(v11 + 1.0);
  v6[928] = result;
  return result;
}

float DspLib::LoudspeakerController::Algorithm::setMagnetModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float result;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (float *)(*(_QWORD *)(a1 + 544) + 4144 * a3);
  v6 = *(_QWORD *)(a2 + 4);
  v12 = *(float *)a2;
  v5 = v12;
  v13 = v6;
  v14 = *(_QWORD *)(a2 + 12);
  v10 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v4 + 164), (uint64_t)&v12, 1, 0, 0x41uLL);
  v4[203] = v10 + 1.0;
  v4[205] = (float)(v5 + v5) / (float)(v10 + 1.0);
  v8 = *(_QWORD *)(a2 + 4);
  v12 = *(float *)a2;
  v7 = v12;
  v13 = v8;
  v14 = *(_QWORD *)(a2 + 12);
  v11 = *(float *)&v14;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(v4 + 888), (uint64_t)&v12, 1, 0, 0x41uLL);
  v4[927] = v11 + 1.0;
  result = (float)(v7 + v7) / (float)(v11 + 1.0);
  v4[929] = result;
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::setAmbientTemperature(uint64_t this, float a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 544) + 4144 * a3;
  *(float *)(v3 + 824) = a2;
  *(float *)(v3 + 3720) = a2;
  return this;
}

uint64_t DspLib::LoudspeakerController::Algorithm::findCLTempMatch(uint64_t this, float a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const float *v8;
  unint64_t v9;
  unint64_t v10;
  const void **v11;
  vDSP_Length v12;
  uint64_t v13;
  const float *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this + 544) + 4144 * a3;
  if (*(_QWORD *)(v3 + 4096) != *(_QWORD *)(v3 + 4088))
  {
    v5 = this;
    v6 = (const void **)MEMORY[0x1E0C80A78](v3 + 4088);
    v8 = (const float *)((char *)v15 - v7);
    v9 = *(_QWORD *)(v5 + 512);
    v11 = DspLib::CircularDelay::read(v6, v10, (char *)v15 - v7, v9);
    v12 = *(_QWORD *)(v5 + 512);
    MEMORY[0x1E0C80A78](v11);
    v14 = (const float *)((char *)v15 - v13);
    DspLib::add(v8, v9, (float *)((char *)v15 - v13), -a2);
    return DspLib::minmgvi(v14, v12);
  }
  return this;
}

uint64_t DspLib::LoudspeakerController::Algorithm::setClosedLoopTemperature(DspLib::LoudspeakerController::Algorithm *this, float a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  float v7;
  float v8;
  uint64_t v9;

  v5 = *((_QWORD *)this + 68);
  result = DspLib::LoudspeakerController::Algorithm::findCLTempMatch((uint64_t)this, a2, a3);
  if (vabds_f32(a2, v7) > 0.1)
  {
    v8 = a2 - v7;
    v9 = v5 + 4144 * a3;
    *(float *)(v9 + 828) = v8 + *(float *)(v9 + 828);
    *(float *)(v9 + 3724) = v8 + *(float *)(v9 + 3724);
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::decayClosedLoopTemperatureOffset(DspLib::LoudspeakerController::Algorithm *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  float *v8;

  v3 = *((_QWORD *)this + 68);
  v4 = v3 + 4144 * a2;
  v5 = *(_QWORD *)(v4 + 4080) + a3;
  *(_QWORD *)(v4 + 4080) = v5;
  v6 = *((_QWORD *)this + 38);
  if (v6 <= v5)
  {
    v7 = (unint64_t *)(v4 + 4080);
    v8 = (float *)(v3 + 4144 * a2);
    v8[207] = v8[207] * powf(1.0 - v8[203], (float)(v5 / v6));
    v8[931] = v8[931] * powf(1.0 - v8[927], (float)(v5 / v6));
    *v7 = v5 % v6;
  }
}

uint64_t DspLib::LoudspeakerController::Algorithm::resetClosedLoopTemperature(uint64_t this)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(this + 544);
  for (i = *(_QWORD *)(this + 552); v1 != i; v1 += 4144)
  {
    *(_DWORD *)(v1 + 828) = 0;
    *(_DWORD *)(v1 + 3724) = 0;
  }
  return this;
}

void DspLib::LoudspeakerController::Algorithm::setCPMSBudgets(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  vDSP_Length v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  float v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v2 = a1 + 392;
  *(_OWORD *)(a1 + 392) = *a2;
  *(_BYTE *)(a1 + 408) = 1;
  if (*(_BYTE *)(a1 + 467))
  {
    v4 = 0;
    v5 = a1 + 444;
    v6 = a1 + 412;
    v7 = 3980;
    do
    {
      if (*(float *)(v5 + 4 * v4) > *(float *)(v2 + 4 * v4))
      {
        MEMORY[0x1E0C80A78](a1);
        v9 = (char *)v20 - v8;
        v10 = *(unsigned int *)(a1 + 12);
        v11 = *(_QWORD *)(a1 + 544);
        if ((_DWORD)v10)
        {
          v12 = (_DWORD *)(v11 + v7);
          v13 = *(unsigned int *)(a1 + 12);
          v14 = v9;
          do
          {
            *v14++ = *v12;
            v12 += 1036;
            --v13;
          }
          while (v13);
        }
        v15 = (float)(*(float *)(v11 + 3996) * *(float *)(v11 + 3996)) * *(float *)(v6 + 4 * v4);
        if (*(float *)(v2 + 4 * v4) >= v15)
          v15 = *(float *)(v2 + 4 * v4);
        DspLib::waterFillingSolution((uint64_t)v9, v10, v15);
        if (*(_DWORD *)(a1 + 12))
        {
          v17 = 0;
          v18 = 3104;
          do
          {
            v19 = *(float *)&v9[4 * v17];
            if (v19 >= v16)
              v19 = v16;
            *(float *)(*(_QWORD *)(a1 + 544) + v18 + 4 * v4) = v19;
            ++v17;
            v18 += 4144;
          }
          while (v17 < *(unsigned int *)(a1 + 12));
        }
      }
      ++v4;
      v7 += 4;
    }
    while (v4 != 4);
  }
}

void DspLib::LoudspeakerController::Algorithm::reset(DspLib::LoudspeakerController::Algorithm *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 68);
    for (i = *((_QWORD *)this + 69); v2 != i; v2 += 4144)
    {
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 4056));
      DspLib::clear(*(float **)v2, (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2);
      *(_QWORD *)(v2 + 24) = (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2;
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 96));
      DspLib::LoudspeakerController::SpeakerSystemModel::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)(v2 + 208));
      DspLib::clear(*(float **)(v2 + 984), (uint64_t)(*(_QWORD *)(v2 + 992) - *(_QWORD *)(v2 + 984)) >> 2);
      DspLib::clear(*(float **)(v2 + 1008), (uint64_t)(*(_QWORD *)(v2 + 1016) - *(_QWORD *)(v2 + 1008)) >> 2);
      DspLib::clear(*(float **)(v2 + 1032), (uint64_t)(*(_QWORD *)(v2 + 1040) - *(_QWORD *)(v2 + 1032)) >> 2);
      DspLib::clear(*(float **)(v2 + 1056), (uint64_t)(*(_QWORD *)(v2 + 1064) - *(_QWORD *)(v2 + 1056)) >> 2);
      DspLib::MultiChannelLinearDelay::reset((DspLib::MultiChannelLinearDelay *)(v2 + 1080));
      *(_DWORD *)(v2 + 1648) = 1065353216;
      *(_DWORD *)(v2 + 1680) = 0;
      *(_QWORD *)(v2 + 1728) = 0;
      *(_DWORD *)(v2 + 1736) = 0;
      *(_BYTE *)(v2 + 1856) = 1;
      *(_BYTE *)(v2 + 1808) = 1;
      v4 = 1904;
      *(_BYTE *)(v2 + 1760) = 1;
      do
      {
        *(_BYTE *)(v2 + v4) = 1;
        v4 += 48;
      }
      while (v4 != 2096);
      DspLib::LinearPhaseFilterbank::reset((float **)(v2 + 2080));
      v5 = (_QWORD *)(v2 + 2320);
      v6 = 2200;
      do
      {
        v7 = v2 + v6;
        DspLib::clear(*(float **)(v2 + v6), (uint64_t)(*(_QWORD *)(v2 + v6 + 8) - *(_QWORD *)(v2 + v6)) >> 2);
        v6 += 24;
      }
      while ((_QWORD *)(v7 + 24) != v5);
      v8 = *((_QWORD *)this + 43);
      *v5 = v8;
      v9 = 2328;
      for (j = 2200; j != 2320; j += 24)
      {
        *(_QWORD *)(v2 + v9) = *(_QWORD *)(v2 + j) + 4 * v8;
        v9 += 8;
      }
      DspLib::BandCombiner::reset((float **)(v2 + 2408));
      DspLib::GainSmoother::reset((DspLib::GainSmoother *)(v2 + 2680));
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 2992));
      DspLib::LoudspeakerController::SpeakerSystemModel::reset((DspLib::LoudspeakerController::SpeakerSystemModel *)(v2 + 3104));
      DspLib::clear((float *)(v2 + 3932), 4uLL);
      DspLib::clear((float *)(v2 + 3948), 4uLL);
      DspLib::clear((float *)(v2 + 3980), 4uLL);
      DspLib::fill((float *)(v2 + 3964), 4uLL, 1.0);
      *(_QWORD *)(v2 + 3920) = 1065353216;
      *(_DWORD *)(v2 + 3872) = 1065353216;
      *(_OWORD *)(v2 + 3904) = 0u;
      *(_OWORD *)(v2 + 3856) = xmmword_1B6629CA0;
      *(_OWORD *)(v2 + 3824) = xmmword_1B6629CB0;
      *(_OWORD *)(v2 + 3840) = xmmword_1B6629CC0;
      *(_QWORD *)(v2 + 4080) = 0;
      v11 = *(_QWORD *)(v2 + 4120);
      if (v11)
      {
        DspLib::fill(*(float **)v11, (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2, 0.0);
        *(_DWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
      }
      *(_DWORD *)(v2 + 4128) = 1065353216;
    }
    if (*((_BYTE *)this + 469))
    {
      v12 = *((_QWORD *)this + 68);
      if (*((_QWORD *)this + 69) != v12)
      {
        v13 = 0;
        v14 = 1;
        do
        {
          DspLib::LoudspeakerController::ThermalNVM::read((uint64_t)&DspLib::LoudspeakerController::gThermalRecord, v12 + 4144 * v13 + 656, (float32x2_t *)(v12 + 4144 * v13 + 3552), v13, *((double *)this + 3) / (double)*((unint64_t *)this + 38));
          v13 = v14;
          v12 = *((_QWORD *)this + 68);
        }
        while (0x2F71AAFF02F71ABLL * ((*((_QWORD *)this + 69) - v12) >> 4) > (unint64_t)v14++);
      }
    }
    DspLib::LoudspeakerController::Algorithm::resetLogging(this);
  }
}

void DspLib::MultiChannelLinearDelay::reset(DspLib::MultiChannelLinearDelay *this)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  while (v1 != v2)
  {
    v3 = *(float **)v1;
    v4 = *(_QWORD *)(v1 + 8);
    v1 += 24;
    DspLib::clear(v3, (v4 - (uint64_t)v3) >> 2);
  }
}

void DspLib::LoudspeakerController::ThermalNVM::read(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, double a5)
{
  __int128 *v5;
  unint64_t v8;
  int32x2_t v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 y;
  float v18;
  __int128 v19;
  __int128 v20;

  v5 = (__int128 *)(a1 + 32 * a4);
  v19 = *v5;
  v20 = v5[1];
  if (*((_QWORD *)&v20 + 1))
  {
    v8 = vcvtad_u64_f64((float)(DspLib::elapsedTimeInMilliseconds((DspLib *)((char *)&v20 + 8), (unint64_t *)a2)
                              * 0.001) * a5);
    *(_QWORD *)(a2 + 144) = v19;
    *(float *)(a2 + 172) = *(float *)(a2 + 172)
                         + (float)((float)(*(float *)&v20 + *((float *)&v20 + 1))
                                 - (float)(*(float *)(a2 + 168) + *(float *)(a2 + 172)));
    __asm { FMOV            V9.2S, #1.0 }
    *(float *)v14.i32 = (float)v8;
    *(float32x2_t *)v15.f32 = vsub_f32(_D9, *(float32x2_t *)(a2 + 152));
    y = (simd_float4)vdupq_lane_s32(v14, 0).u64[0];
    v18 = (float)v8;
    *(float32x2_t *)(a2 + 144) = vmul_f32(*(float32x2_t *)(a2 + 144), (float32x2_t)*(_OWORD *)&_simd_pow_f4(v15, y));
    *(float *)(a2 + 172) = *(float *)(a2 + 172) * powf(1.0 - *(float *)(a2 + 156), v18);
    a3[18] = *(float32x2_t *)((char *)&v19 + 8);
    a3[21].f32[1] = a3[21].f32[1]
                  + (float)((float)(*(float *)&v20 + *((float *)&v20 + 1)) - (float)(a3[21].f32[0] + a3[21].f32[1]));
    *(float32x2_t *)v16.f32 = vsub_f32(_D9, a3[19]);
    a3[18] = vmul_f32(a3[18], (float32x2_t)*(_OWORD *)&_simd_pow_f4(v16, y));
    a3[21].f32[1] = a3[21].f32[1] * powf(1.0 - a3[19].f32[1], v18);
  }
}

void DspLib::LoudspeakerController::Algorithm::resetLogging(DspLib::LoudspeakerController::Algorithm *this)
{
  DspLib::Logger *v2;
  DspLib::Logger *v3;
  DspLib::Logger *v4;

  v2 = (DspLib::Logger *)*((_QWORD *)this + 74);
  if (v2)
    DspLib::Logger::FlushLog(v2);
  v3 = (DspLib::Logger *)*((_QWORD *)this + 76);
  if (v3)
    DspLib::Logger::FlushLog(v3);
  v4 = (DspLib::Logger *)*((_QWORD *)this + 78);
  if (v4)
    DspLib::Logger::FlushLog(v4);
}

void DspLib::LoudspeakerController::Algorithm::inputCompensation(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v5 = a2[1];
  if (*(_BYTE *)(a1 + 505))
  {
    if (v5)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        DspLib::Biquad::Filter::process((_QWORD *)(*(_QWORD *)(a1 + 544) + 4144 * v7 + 4008), *(_QWORD *)(*a2 + 8 * v7), a2[2], *(_QWORD *)(*(_QWORD *)a3 + 8 * v7), *(float ***)(a3 + 16));
        v7 = v8;
        v9 = a2[1] > (unint64_t)v8++;
      }
      while (v9);
    }
  }
  else if (v5)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = a2[2];
      if (v12)
      {
        memmove(*(void **)(*(_QWORD *)a3 + 8 * v10), *(const void **)(*a2 + 8 * v10), 4 * v12);
        v5 = a2[1];
      }
      v10 = v11;
      v9 = v5 > v11++;
    }
    while (v9);
  }
}

vDSP_Length DspLib::LoudspeakerController::Algorithm::inputAnalysis(uint64_t a1, uint64_t a2)
{
  float **v2;
  float v3;
  vDSP_Length v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  const void **v15;
  uint64_t *v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  char v34;
  uint64_t v35;
  char *v36;
  const float *v37;
  uint64_t v38;
  char *v39;
  int v40;
  float v41;
  uint64_t *v42;
  float v43;
  uint64_t v44;
  float v45;
  unint64_t v46;
  vDSP_Length v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  vDSP_Length v53;
  _BOOL4 v54;
  vDSP_Length v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float **v60;
  float **v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float **v66;
  float **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  vDSP_Length v75;
  vDSP_Length v76;
  uint64_t v77;
  uint64_t v78;
  vDSP_Length v79;
  vDSP_Length v80;
  unint64_t v81;
  _QWORD v83[4];
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  __int128 v91;
  vDSP_Length v92;
  _OWORD v93[2];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v2 = *(float ***)(a2 + 16);
  v3 = *(float *)(*(_QWORD *)(a1 + 544) + 840)
     * (float)((unint64_t)v2
             + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 856) - *(_QWORD *)(*(_QWORD *)(a1 + 544) + 848)) >> 2));
  v4 = (unint64_t)v3;
  *(_DWORD *)(a1 + 460) = -998637568;
  v85 = (_QWORD *)a2;
  v86 = a1;
  v5 = *(_QWORD *)(a2 + 8);
  v88 = (uint64_t)v2;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    if ((unint64_t)v2 <= 1)
      v8 = 1;
    else
      v8 = (uint64_t)v2;
    if (v4 <= 1)
      v9 = 1;
    else
      v9 = (unint64_t)v3;
    v10 = ((4 * (v9 - 1)) & 0xFFFFFFFFFFFFFFF0) + 16;
    v87 = 4 * v8;
    v83[2] = 4 * (4 * ((v9 - 1) & 0x3FFFFFFFFFFFFFFCLL) + 16);
    v83[1] = 4 * v9;
    while (1)
    {
      v84 = v7;
      v89 = *(_QWORD *)(a1 + 544);
      v11 = (uint64_t *)(v89 + 4144 * v6);
      v12 = v11 + 3;
      if (v11[3] >= (unint64_t)v2)
      {
        v16 = DspLib::LinearDelay::write(v11, *(char **)(*v85 + 8 * v6), v85[2]);
        *v12 -= v88;
      }
      else
      {
        MEMORY[0x1E0C80A78](v11);
        v14 = (char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
        DspLib::LinearDelay::process(v15, *(char **)(*v85 + 8 * v6), v85[2], v14);
        v16 = DspLib::LinearPhaseFilterbank::consumeInput(v89 + 4144 * v6 + 2080, v14, v88 - *v12);
        *v12 = 0;
      }
      v83[3] = v83;
      MEMORY[0x1E0C80A78](v16);
      v18 = (float *)((char *)v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1E0C80A78](v19);
      v21 = (const float *)((char *)v83 - v20);
      DspLib::multiply(*(const float **)(*v85 + 8 * v6), v85[2], v18, *(float *)(v89 + 4144 * v6 + 40));
      DspLib::Biquad::Filter::process((_QWORD *)(v89 + 4144 * v6 + 48), (uint64_t)v18, v88, (uint64_t)v21, (float **)v88);
      MEMORY[0x1E0C80A78](v22);
      v24 = (float *)((char *)v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
      DspLib::multiply(v18, v88, v21, v88, v24);
      MEMORY[0x1E0C80A78](v25);
      MEMORY[0x1E0C80A78](v26);
      MEMORY[0x1E0C80A78](v27);
      v30 = (char *)v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      v31 = 0;
      memset(v93, 0, sizeof(v93));
      do
      {
        *(_QWORD *)((char *)v93 + v31) = v30;
        v31 += 8;
        v30 += v10;
      }
      while (v31 != 32);
      MEMORY[0x1E0C80A78](v28);
      v33 = (float *)((char *)v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
      v34 = *(_DWORD *)(*(_QWORD *)(v86 + 480) + 16 * v6) != 2;
      *(_QWORD *)&v91 = v93;
      *((_QWORD *)&v91 + 1) = 4;
      v92 = v4;
      v36 = (char *)v35;
      v37 = v24;
      v39 = (char *)v38;
      DspLib::LoudspeakerController::SpeakerSystemModel::process(v89 + 4144 * v6 + 208, (uint64_t)v18, v88, v37, v88, &v91, v38, (float **)v88, v35, (float **)v88, v33, v4, v34);
      DspLib::LinearDelay::write((uint64_t *)(v89 + 4144 * v6 + 1056), (char *)v33, v4);
      if ((v34 & 1) != 0)
      {
        DspLib::LinearDelay::write((uint64_t *)(v89 + 4144 * v6 + 1008), v39, v88);
        DspLib::LinearDelay::write((uint64_t *)(v89 + 4144 * v6 + 1032), v36, v88);
      }
      v90[0] = v93;
      v90[1] = 4;
      v90[2] = v4;
      DspLib::MultiChannelLinearDelay::write((uint64_t *)(v89 + 4144 * v6 + 1080), v90);
      a1 = v86;
      v2 = (float **)v88;
      if (!*(_BYTE *)(v86 + 466))
        goto LABEL_27;
      v40 = *(_DWORD *)(*(_QWORD *)(v86 + 480) + 16 * v6);
      if (v40 == 2)
        break;
      if (v40 == 1)
      {
        v43 = -20.0;
        if (*(_BYTE *)(v86 + 40))
        {
          DspLib::LoudspeakerController::MaskingEstimator::process(v89 + 4144 * v6 + 1104, *(_QWORD *)(v89 + 4144 * v6 + 1032), (uint64_t)(*(_QWORD *)(v89 + 4144 * v6 + 1040) - *(_QWORD *)(v89 + 4144 * v6 + 1032)) >> 2, v88);
          goto LABEL_25;
        }
        goto LABEL_26;
      }
      if (!v40)
      {
        DspLib::LoudspeakerController::MaskingEstimator::process(v89 + 4144 * v6 + 1104, *(_QWORD *)(v89 + 4144 * v6 + 1032), (uint64_t)(*(_QWORD *)(v89 + 4144 * v6 + 1040) - *(_QWORD *)(v89 + 4144 * v6 + 1032)) >> 2, v88);
        goto LABEL_22;
      }
LABEL_27:
      v44 = v89 + 4144 * v6;
      v45 = *(float *)(a1 + 460);
      if (v45 < *(float *)(v44 + 3860))
        v45 = *(float *)(v44 + 3860);
      *(float *)(a1 + 460) = v45;
      v6 = (v84 + 1);
      v7 = v84 + 1;
      if (v85[1] <= v6)
        goto LABEL_30;
    }
    v42 = (uint64_t *)(v89 + 4144 * v6 + 984);
    DspLib::LinearDelay::write(v42, (char *)v18, v88);
    DspLib::LoudspeakerController::MaskingEstimator::process(v89 + 4144 * v6 + 1104, *v42, (v42[1] - *v42) >> 2, v88);
LABEL_22:
    v43 = v41;
LABEL_25:
    a1 = v86;
    v2 = (float **)v88;
LABEL_26:
    *(float *)(v89 + 4144 * v6 + 3860) = v43;
    goto LABEL_27;
  }
LABEL_30:
  if (*(_BYTE *)(a1 + 40) && *(_DWORD *)(a1 + 12))
  {
    v46 = 0;
    v47 = 8 - v4;
    v89 = 3948;
    do
    {
      v48 = (unsigned int *)(a1 + 32);
      v49 = *(_QWORD *)(a1 + 544);
      v50 = (uint64_t *)(v49 + 4144 * v46);
      v51 = *v50;
      v52 = *(unsigned int *)(a1 + 32) - (_QWORD)v2;
      v53 = ((v50[1] - *v50) >> 2) - v52;
      v54 = v2 == (float **)-1;
      if (v2 == (float **)-1)
        v55 = v53;
      else
        v55 = (vDSP_Length)v2;
      v56 = DspLib::maxMagnitude((const float *)(v51 + 4 * v52), v55);
      v57 = v49 + 4144 * v46;
      *(float *)(v57 + 3828) = v56;
      v58 = *(_QWORD *)(v57 + 1008);
      v59 = *v48 - v88;
      v60 = (float **)(((*(_QWORD *)(v57 + 1016) - v58) >> 2) - v59);
      if (v54)
        v61 = v60;
      else
        v61 = (float **)v88;
      v62 = DspLib::maxMagnitude((const float *)(v58 + 4 * v59), (vDSP_Length)v61);
      v63 = v49 + 4144 * v46;
      *(float *)(v63 + 3848) = v62;
      v64 = *(_QWORD *)(v63 + 1032);
      v65 = *v48 - v88;
      v66 = (float **)(((*(_QWORD *)(v63 + 1040) - v64) >> 2) - v65);
      if (v54)
        v67 = v66;
      else
        v67 = (float **)v88;
      *(float *)(v49 + 4144 * v46 + 3904) = DspLib::maxMagnitude((const float *)(v64 + 4 * v65), (vDSP_Length)v67);
      if (v4)
      {
        v68 = 0;
        v69 = 0;
        v70 = v49 + v89;
        do
        {
          v71 = *(_QWORD *)(v49 + 4144 * v46 + 1080);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 4144 * v46 + 1088) - v71) >> 3) <= v69)
          {
            v73 = 0;
            v74 = 0;
          }
          else
          {
            v72 = v71 + v68;
            v73 = *(_QWORD *)(v71 + v68);
            v74 = (*(_QWORD *)(v72 + 8) - v73) >> 2;
          }
          v75 = v74 - v47;
          if (v4 == -1)
            v76 = v75;
          else
            v76 = v4;
          *(float *)(v70 + 4 * v69++) = DspLib::maxv((const float *)(v73 + 4 * v47), v76);
          v68 += 24;
        }
        while (v69 != 4);
        v77 = v49 + 4144 * v46;
        v78 = *(_QWORD *)(v77 + 1056);
        v79 = ((*(_QWORD *)(v77 + 1064) - v78) >> 2) - v47;
        if (v4 == -1)
          v80 = v79;
        else
          v80 = v4;
        *(float *)(v49 + 4144 * v46 + 3916) = DspLib::maxv((const float *)(v78 + 4 * v47), v80);
      }
      ++v46;
      a1 = v86;
      v81 = *(unsigned int *)(v86 + 12);
      v2 = (float **)v88;
      v89 += 4144;
    }
    while (v46 < v81);
  }
  return v4;
}

uint64_t *DspLib::MultiChannelLinearDelay::write(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *result;
  if (result[1] != *result)
  {
    v4 = result;
    v5 = 0;
    v6 = 1;
    do
    {
      result = DspLib::LinearDelay::write((uint64_t *)(v2 + 24 * v5), *(char **)(*a2 + 8 * v5), a2[2]);
      v5 = v6;
      v2 = *v4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3) > v6++);
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::findAmplitudeTarget(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  float v18;
  unint64_t v19;

  for (i = 0; i != 96; i += 48)
  {
    v4 = (_OWORD *)(a2 + i);
    v4[1] = xmmword_1B6627DC0;
    v4[2] = xmmword_1B6629CD0;
    *v4 = xmmword_1B66282F0;
  }
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = (float *)(a2 + 8);
    v9 = 10;
    do
    {
      v10 = *((_QWORD *)this + 68);
      if (*((_BYTE *)this + 464) && *(_DWORD *)(*((_QWORD *)this + 60) + v6) != 2)
      {
        v12 = v10 + v7;
        v13 = *(float *)(v10 + v7 + 32) - *(float *)(v10 + v7 + 36);
        v14 = *(float *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, v9 | 0x1000000000)+ 16);
        if (v13 >= v14)
          v14 = v13;
        DspLib::LoudspeakerController::findTarget(*(const float **)v12, ((uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2) - *((_QWORD *)this + 42), 0, (float *)(v12 + 3824), v14, v14);
        *((_DWORD *)v8 - 2) = v15;
        *(v8 - 1) = v11;
        *(_DWORD *)v8 = v16;
        *(float *)(v12 + 3832) = v11;
        v5 = *((unsigned int *)this + 3);
      }
      else
      {
        *(_DWORD *)(v10 + v7 + 3832) = 1065353216;
        v11 = 1.0;
      }
      v17 = v10 + v7;
      v18 = *(float *)(v10 + v7 + 3836);
      v19 = v9 - 9;
      ++v9;
      v7 += 4144;
      if (v18 >= v11)
        v18 = v11;
      *(float *)(v17 + 3836) = v18;
      v6 += 16;
      v8 += 3;
    }
    while (v19 < v5);
  }
}

void DspLib::LoudspeakerController::findTarget(const float *a1, vDSP_Length a2, int a3, float *a4, float a5, float a6)
{
  float v9;

  if (a3)
    v9 = DspLib::maxv(a1, a2);
  else
    v9 = DspLib::maxMagnitude(a1, a2);
  *a4 = v9;
  if (v9 > a5)
    expf((float)-(float)(v9 - a5) / fmaxf(a6 - a5, 1.0e-15));
}

void DspLib::LoudspeakerController::Algorithm::findDisplacementTarget(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;

  for (i = 0; i != 96; i += 48)
  {
    v4 = (_OWORD *)(a2 + i);
    v4[1] = xmmword_1B6627DC0;
    v4[2] = xmmword_1B6629CD0;
    *v4 = xmmword_1B66282F0;
  }
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = (_DWORD *)(a2 + 8);
    v9 = 3852;
    do
    {
      v10 = *((_QWORD *)this + 68);
      if (*((_BYTE *)this + 465) && *(_DWORD *)(*((_QWORD *)this + 60) + v6) != 2)
      {
        v11 = (_DWORD *)(v10 + v9);
        DspLib::LoudspeakerController::findTarget(*(const float **)(v10 + v9 - 2844), ((uint64_t)(*(_QWORD *)(v10 + v9 - 2836) - *(_QWORD *)(v10 + v9 - 2844)) >> 2) - *((_QWORD *)this + 42), 0, (float *)(v10 + v9 - 8), *(float *)(v10 + v9 - 2924) * 0.99, *(float *)(v10 + v9 - 2924));
        *(v8 - 2) = v12;
        *(v8 - 1) = v13;
        *v8 = v14;
        *v11 = v13;
        v5 = *((unsigned int *)this + 3);
      }
      else
      {
        *(_DWORD *)(v10 + v9) = 1065353216;
      }
      ++v7;
      v6 += 16;
      v9 += 4144;
      v8 += 3;
    }
    while (v7 < v5);
  }
}

void DspLib::LoudspeakerController::Algorithm::findVelocityTarget(DspLib::LoudspeakerController::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;

  for (i = 0; i != 96; i += 48)
  {
    v4 = (_OWORD *)(a2 + i);
    v4[1] = xmmword_1B6627DC0;
    v4[2] = xmmword_1B6629CD0;
    *v4 = xmmword_1B66282F0;
  }
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (_DWORD *)(a2 + 8);
    do
    {
      v10 = *((_QWORD *)this + 68);
      if (*((_BYTE *)this + 466) && *(_DWORD *)(*((_QWORD *)this + 60) + v7) != 2)
      {
        v11 = *((float *)this + 115);
        v12 = (float *)(v10 + v6);
        v13 = *(float *)(v10 + v6 + 944);
        if (v13 >= v11)
        {
          v20 = v12[233];
        }
        else
        {
          v14 = v12[237];
          if (v14 >= v11)
          {
            v17 = v11 - v13;
            v18 = v12[233];
            v19 = v12[240];
          }
          else
          {
            v15 = (float *)(v10 + v6);
            v16 = *(float *)(v10 + v6 + 952);
            if (v16 >= v11)
            {
              v17 = v11 - v14;
              v18 = v15[234];
              v19 = v15[241];
            }
            else
            {
              v17 = v11 - v16;
              v18 = v15[235];
              v19 = v15[242];
            }
          }
          v20 = v18 + (float)(v19 * v17);
        }
        v21 = v10 + v6;
        *(float *)(v10 + v6 + 3864) = v20;
        DspLib::LoudspeakerController::findTarget(*(const float **)(v10 + v6 + 1032), ((uint64_t)(*(_QWORD *)(v10 + v6 + 1040) - *(_QWORD *)(v10 + v6 + 1032)) >> 2) - *((_QWORD *)this + 42), 0, (float *)(v10 + v6 + 3868), v20 * 0.95, v20);
        *(v9 - 2) = v22;
        *(v9 - 1) = v23;
        *v9 = v24;
        *(_DWORD *)(v21 + 3872) = v23;
        v5 = *((unsigned int *)this + 3);
      }
      else
      {
        *(_DWORD *)(v10 + v6 + 3872) = 1065353216;
      }
      ++v8;
      v7 += 16;
      v6 += 4144;
      v9 += 3;
    }
    while (v8 < v5);
  }
}

void DspLib::LoudspeakerController::Algorithm::findPowerTargets(uint64_t a1@<X0>, vDSP_Length a2@<X1>, uint64_t a3@<X2>, float *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t i;
  float *v10;
  vDSP_Length v11;
  uint64_t v12;
  uint64_t v13;
  float j;
  uint64_t v15;
  float v16;
  float *v17;
  unint64_t v18;
  uint64_t v19;
  vDSP_Length v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  vDSP_Length v32;
  vDSP_Length v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  float *v42;
  uint64_t v43;
  float *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t ii;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  vDSP_Length v62;
  unint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  vDSP_Length v70;
  vDSP_Length v71;
  float v72;
  unint64_t v73;
  uint64_t k;
  uint64_t v75;
  unint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  float *v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  float v88;
  float v89;
  uint64_t m;
  uint64_t n;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float *v96;
  uint64_t *v97;
  vDSP_Length v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  vDSP_Length v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v107 = a2;
  v6 = 0;
  v111 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 312);
  v8 = a4;
  do
  {
    for (i = 0; i != 24; i += 12)
    {
      v10 = &v8[i];
      *((_OWORD *)v10 + 1) = xmmword_1B6627DC0;
      *((_OWORD *)v10 + 2) = xmmword_1B6629CD0;
      *(_OWORD *)v10 = xmmword_1B66282F0;
    }
    ++v6;
    v8 += 24;
  }
  while (v6 != 4);
  v11 = v7 + v107;
  v12 = *(_QWORD *)(a1 + 544);
  v13 = *(_QWORD *)(a1 + 552);
  v105 = a3;
  for (j = 0.0; v12 != v13; v12 += 4144)
  {
    if (*(_BYTE *)(v12 + 3200))
    {
      v15 = 0;
      while (v15 != -36)
      {
        v16 = *(float *)(v12 + v15 + 3228);
        v15 -= 12;
        if (*(float *)(v12 + 3144) >= v16)
        {
          v17 = (float *)(v12 + v15 + 3244);
          goto LABEL_17;
        }
      }
      v17 = (float *)(v12 + 3152);
    }
    else if (*(_DWORD *)(v12 + 3244))
    {
      v17 = (float *)(v12 + 3192);
    }
    else if (*(_DWORD *)(v12 + 3240))
    {
      v17 = (float *)(v12 + 3172);
    }
    else
    {
      v17 = (float *)(v12 + 3152);
    }
LABEL_17:
    j = j + *v17;
  }
  v18 = 0;
  if (v11 <= 1)
    v19 = 1;
  else
    v19 = v11;
  v20 = 8 - v107;
  v103 = a1 + 392;
  v104 = a1 + 360;
  v101 = a1 + 412;
  v102 = a1 + 376;
  v99 = a1 + 428;
  v100 = a1 + 568;
  v110 = 3932;
  v21 = 3964;
  v106 = 4 * v19;
  do
  {
    v108 = &v95;
    v109 = v21;
    MEMORY[0x1E0C80A78](a1);
    v23 = (float *)((char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
    DspLib::clear(v23, v11);
    if (*(_DWORD *)(a1 + 12))
    {
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = *(_QWORD *)(a1 + 544) + v24;
        v27 = *(_QWORD *)(v26 + 1088);
        v28 = *(_QWORD *)(v26 + 1080);
        if (0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3) <= v18)
        {
          v30 = 0;
          v31 = 0;
        }
        else
        {
          v29 = (uint64_t *)(v28 + 24 * v18);
          v30 = *v29;
          v31 = (v29[1] - *v29) >> 2;
        }
        v32 = v31 - v20;
        if (v11 - *(_QWORD *)(a1 + 328) == -1)
          v33 = v32;
        else
          v33 = v11 - *(_QWORD *)(a1 + 328);
        v34 = DspLib::maxv((const float *)(v30 + 4 * v20), v33);
        v35 = *(_QWORD *)(a1 + 544) + v24;
        *(float *)(v35 + v110) = v34;
        v36 = *(_QWORD *)(v35 + 1088);
        v37 = *(_QWORD *)(v35 + 1080);
        if (0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3) <= v18)
          v38 = 0;
        else
          v38 = *(_QWORD *)(v37 + 24 * v18);
        DspLib::add(v23, v11, (const float *)(v38 + 4 * v20));
        ++v25;
        v24 += 4144;
      }
      while (v25 < *(unsigned int *)(a1 + 12));
    }
    if (v107 && *(_BYTE *)(a1 + 40))
    {
      v39 = DspLib::maxv(v23, v107);
      *(float *)(v99 + 4 * v18) = v39;
    }
    if (!*(_BYTE *)(a1 + 408) || (v40 = v103, *(_BYTE *)(a1 + 409)))
      v40 = v104;
    if (*(_BYTE *)(a1 + 467))
    {
      v41 = *(float *)(v40 + 4 * v18);
      v42 = (float *)(v101 + 4 * v18);
      DspLib::LoudspeakerController::findTarget(v23, v11 - *(_QWORD *)(a1 + 328), 1, v42, v41 * *(float *)(v102 + 4 * v18), v41);
      v43 = v105;
      v44 = (float *)(v105 + 12 * v18);
      *(_DWORD *)v44 = v45;
      *((_DWORD *)v44 + 1) = v46;
      *((_DWORD *)v44 + 2) = v47;
      *(_DWORD *)(v100 + 4 * v18) = v45;
      if (*(_BYTE *)(a1 + 504))
      {
        v48 = v43 + 12 * v18;
        v50 = *(float *)(v48 + 4);
        v49 = (float *)(v48 + 4);
        v51 = v50;
        if (v50 >= 1.0)
        {
          ii = v109;
        }
        else
        {
          v52 = (float)(v51 * v51) * *v42;
          v53 = 0.0;
          if (v52 > j)
            v53 = sqrtf((float)(v52 - j) / (float)(*v42 - j));
          v51 = v51 * 0.8414;
          if (v53 >= v51)
            v51 = v53;
          *v49 = v51;
          ii = v109;
        }
        for (k = 1; k != 25; k += 3)
          a4[k] = v51;
        v75 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v75)
        {
          v76 = 0;
          v77 = (_DWORD *)(*(_QWORD *)(a1 + 544) + ii);
          v78 = 12 * v75;
          do
          {
            *v77 = LODWORD(a4[v76 / 4 + 1]);
            v76 += 12;
            v77 += 1036;
          }
          while (v78 != v76);
        }
        goto LABEL_91;
      }
      v96 = v44;
      v97 = &v95;
      MEMORY[0x1E0C80A78](a1);
      v58 = (float *)((char *)&v95 - v57);
      MEMORY[0x1E0C80A78](v59);
      v61 = (float *)((char *)&v95 - v60);
      v98 = v62;
      if ((_DWORD)v62)
      {
        v63 = 0;
        v64 = 1088;
        v65 = a4;
        do
        {
          v66 = *(_QWORD *)(*(_QWORD *)(a1 + 544) + v64 - 8);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 544) + v64) - v66) >> 3) <= v18)
          {
            v68 = 0;
            v69 = 0;
          }
          else
          {
            v67 = (uint64_t *)(v66 + 24 * v18);
            v68 = *v67;
            v69 = (v67[1] - *v67) >> 2;
          }
          v70 = v69 - v20;
          if (v11 - *(_QWORD *)(a1 + 328) == -1)
            v71 = v70;
          else
            v71 = v11 - *(_QWORD *)(a1 + 328);
          v72 = DspLib::maxv((const float *)(v68 + 4 * v20), v71);
          v58[v63] = v72;
          *v65 = v72;
          v65 += 3;
          v61[v63++] = v72;
          v73 = *(unsigned int *)(a1 + 12);
          v64 += 4144;
        }
        while (v63 < v73);
      }
      else
      {
        v73 = 0;
      }
      if (*(float *)(v105 + 12 * v18 + 4) >= 1.0)
      {
        for (m = 1; m != 25; m += 3)
          a4[m] = 1.0;
      }
      else
      {
        DspLib::waterFillingSolution((uint64_t)v61, v98, *v96);
        v80 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v80)
        {
          v81 = 0;
          v82 = 12 * v80;
          v83 = v58;
          do
          {
            v84 = 1.0;
            if (*v83 > 0.0)
            {
              v85 = *v61;
              if (*v61 >= v79)
                v85 = v79;
              v84 = sqrtf(v85 / *v83);
            }
            a4[v81 / 4 + 1] = v84;
            ++v83;
            ++v61;
            v81 += 12;
          }
          while (v82 != v81);
        }
        DspLib::waterFillingSolution((uint64_t)v58, v98, v41);
        v73 = *(unsigned int *)(a1 + 12);
        if (!(_DWORD)v73)
        {
          v73 = 0;
          ii = v109;
          goto LABEL_86;
        }
        v87 = 0;
        do
        {
          v88 = *v58++;
          v89 = v88;
          if (v88 >= v86)
            v89 = v86;
          a4[v87] = v89;
          v87 += 3;
        }
        while (3 * v73 != v87);
      }
      ii = v109;
LABEL_86:
      for (n = 2; n != 26; n += 3)
        a4[n] = 0.0;
      if (v73)
      {
        v92 = 0;
        v93 = *(_QWORD *)(a1 + 544);
        v94 = 12 * v73;
        do
        {
          *(float *)(v93 + ii) = a4[v92 / 4 + 1];
          v92 += 12;
          v93 += 4144;
        }
        while (v94 != v92);
      }
      goto LABEL_91;
    }
    v55 = *(_QWORD *)(a1 + 544);
    v56 = *(_QWORD *)(a1 + 552);
    for (ii = v109; v55 != v56; v55 += 4144)
      *(_DWORD *)(v55 + ii) = 1065353216;
LABEL_91:
    ++v18;
    v110 += 4;
    a4 += 24;
    v21 = ii + 4;
  }
  while (v18 != 4);
}

void DspLib::LoudspeakerController::Algorithm::findTemperatureTarget(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  vDSP_Length v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x2_t v24;
  float v25;
  uint64_t v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float32x2_t v42;

  for (i = 0; i != 96; i += 48)
  {
    v5 = (_OWORD *)(a3 + i);
    v5[1] = xmmword_1B6627DC0;
    v5[2] = xmmword_1B6629CD0;
    *v5 = xmmword_1B66282F0;
  }
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 312) + a2;
    v10 = 8 - a2;
    v11 = (float *)(a3 + 8);
    v42 = (float32x2_t)vdup_n_s32(0x358637BDu);
    do
    {
      v12 = *(_QWORD *)(a1 + 544);
      if (*(_BYTE *)(a1 + 468))
      {
        v13 = (float *)(v12 + v7);
        v14 = *(_QWORD *)(v12 + v7 + 1056);
        if (v9 - *(_QWORD *)(a1 + 328) == -1)
          v15 = ((*(_QWORD *)(v12 + v7 + 1064) - v14) >> 2) - v10;
        else
          v15 = v9 - *(_QWORD *)(a1 + 328);
        v16 = DspLib::maxv((const float *)(v14 + 4 * v10), v15);
        v13[978] = v16;
        v17 = v13[243];
        v18 = v13[244];
        v19 = 1.0;
        if (v16 > v17)
        {
          v20 = v16;
          v21 = expf((float)-(float)(v16 - v17) / fmaxf(v18 - v17, 1.0e-15));
          v19 = 1.0;
          v22 = v17 + (float)((float)(v18 - v17) * (float)(1.0 - v21));
          if (v22 < v20)
          {
            v23 = *(float *)(v12 + v7 + 3700);
            v24 = vmaxnm_f32(*(float32x2_t *)(v12 + v7 + 816), v42);
            v25 = fminf(vdiv_f32(v24, vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1))).f32[0], 0.995);
            v26 = *(_QWORD *)(v12 + v7 + 800);
            v27 = v18 * (float)(1.0 - v25);
            v28 = v27 <= v23;
            v29 = fmaxf(v23 / v27, 0.0);
            if (v28)
              v29 = 1.0;
            v30 = *(float *)(v12 + v7 + 824) + *(float *)(v12 + v7 + 828);
            if (v30 >= v22)
              v31 = 0.0;
            else
              v31 = v22 - v30;
            v32 = fmaxf(*(float *)&v26, 0.001);
            v33 = v31 * fminf(v32 / (float)(v32 + fmaxf(*((float *)&v26 + 1), 0.001)), 0.995);
            v34 = v31 - v33;
            v35 = v31 * v25;
            v36 = v29 * v29;
            v37 = v33 + (float)(v36 * (float)(v35 - v33));
            v38 = v34 + (float)(v36 * (float)((float)(v31 - v35) - v34));
            v39 = v37 / *(float *)&v26;
            if (*(float *)&v26 <= v37)
              v39 = 1.0;
            if (*((float *)&v26 + 1) <= v38)
              v40 = 1.0;
            else
              v40 = v38 / *((float *)&v26 + 1);
            if (v40 >= v39)
              v40 = v39;
            v41 = fmaxf(v40, 0.0);
            v19 = sqrtf(v41);
            if (v41 >= 1.0)
              v19 = 1.0;
          }
        }
        *(v11 - 2) = v18 + v13[1000];
        *(v11 - 1) = v19;
        *v11 = 0.0;
        v13[980] = v19;
        v6 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        *(_DWORD *)(v12 + v7 + 3920) = 1065353216;
      }
      ++v8;
      v7 += 4144;
      v11 += 3;
    }
    while (v8 < v6);
  }
}

double DspLib::LoudspeakerController::Algorithm::findTargets@<D0>(DspLib::Logger **this@<X0>, vDSP_Length a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t i;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  DspLib::Logger *v11;
  unint64_t v12;
  uint64_t v13;
  DspLib::Logger *v14;
  unint64_t v15;
  uint64_t v16;
  DspLib::Logger *v17;
  unint64_t v18;
  uint64_t v19;
  DspLib::Logger *v20;
  _BOOL4 v21;
  float *v22;
  float v23;
  uint64_t j;
  DspLib::Logger *v25;
  float *v26;
  DspLib::Logger *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  DspLib::Logger *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  double result;
  __int128 v47;
  _OWORD v48[6];
  float __src[96];
  _OWORD v50[6];
  _OWORD v51[6];
  _OWORD v52[6];
  _OWORD v53[6];

  DspLib::LoudspeakerController::Algorithm::findAmplitudeTarget((DspLib::LoudspeakerController::Algorithm *)this, (uint64_t)v53);
  DspLib::LoudspeakerController::Algorithm::findDisplacementTarget((DspLib::LoudspeakerController::Algorithm *)this, (uint64_t)v52);
  DspLib::LoudspeakerController::Algorithm::findVelocityTarget((DspLib::LoudspeakerController::Algorithm *)this, (uint64_t)v51);
  for (i = 0; i != 6; i += 3)
  {
    v7 = &v50[i];
    v7[1] = xmmword_1B6627DC0;
    v7[2] = xmmword_1B6629CD0;
    *v7 = xmmword_1B66282F0;
  }
  DspLib::LoudspeakerController::Algorithm::findPowerTargets((uint64_t)this, a2, (uint64_t)v50, __src);
  DspLib::LoudspeakerController::Algorithm::findTemperatureTarget((uint64_t)this, a2, (uint64_t)v48);
  if (*((_BYTE *)this + 584))
  {
    v8 = *((unsigned int *)this + 3);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 3832;
      do
      {
        v11 = this[74];
        if (v11)
        {
          DspLib::Logger::logData(v11, *(float *)((char *)this[68] + v10));
          v8 = *((unsigned int *)this + 3);
        }
        ++v9;
        v10 += 4144;
      }
      while (v9 < v8);
      if (v8)
      {
        v12 = 0;
        v13 = 3852;
        do
        {
          v14 = this[74];
          if (v14)
          {
            DspLib::Logger::logData(v14, *(float *)((char *)this[68] + v13));
            v8 = *((unsigned int *)this + 3);
          }
          ++v12;
          v13 += 4144;
        }
        while (v12 < v8);
        if (v8)
        {
          v15 = 0;
          v16 = 3872;
          do
          {
            v17 = this[74];
            if (v17)
            {
              DspLib::Logger::logData(v17, *(float *)((char *)this[68] + v16));
              v8 = *((unsigned int *)this + 3);
            }
            ++v15;
            v16 += 4144;
          }
          while (v15 < v8);
          if (v8)
          {
            v18 = 0;
            v19 = 3864;
            do
            {
              v20 = this[74];
              if (v20)
              {
                DspLib::Logger::logData(v20, *(float *)((char *)this[68] + v19));
                v8 = *((unsigned int *)this + 3);
              }
              ++v18;
              v19 += 4144;
            }
            while (v18 < v8);
          }
        }
      }
    }
    if (*((_BYTE *)this + 408))
      v21 = *((_BYTE *)this + 409) == 0;
    else
      v21 = 0;
    v22 = (float *)(this + 45);
    v23 = 1.0;
    for (j = 4; j != 52; j += 12)
    {
      v25 = this[74];
      if (v25)
      {
        v26 = v22 + 8;
        if (!v21)
          v26 = v22;
        DspLib::Logger::logData(v25, *v26);
      }
      if (*(float *)((char *)v50 + j) < v23)
        v23 = *(float *)((char *)v50 + j);
      ++v22;
    }
    v27 = this[74];
    if (v27)
      DspLib::Logger::logData(v27, v23);
    v28 = *((unsigned int *)this + 3);
    if ((_DWORD)v28)
    {
      v29 = 0;
      v30 = 3920;
      do
      {
        v31 = this[74];
        if (v31)
        {
          DspLib::Logger::logData(v31, *(float *)((char *)this[68] + v30));
          v28 = *((unsigned int *)this + 3);
        }
        ++v29;
        v30 += 4144;
      }
      while (v29 < v28);
    }
  }
  v32 = v53[3];
  a3[2] = v53[2];
  a3[3] = v32;
  v33 = v53[5];
  a3[4] = v53[4];
  a3[5] = v33;
  v34 = v53[1];
  *a3 = v53[0];
  a3[1] = v34;
  v35 = v52[3];
  a3[8] = v52[2];
  a3[9] = v35;
  v36 = v52[5];
  a3[10] = v52[4];
  a3[11] = v36;
  v37 = v52[1];
  a3[6] = v52[0];
  a3[7] = v37;
  v38 = v51[1];
  a3[12] = v51[0];
  a3[13] = v38;
  v39 = v51[5];
  a3[16] = v51[4];
  a3[17] = v39;
  v40 = v51[3];
  a3[14] = v51[2];
  a3[15] = v40;
  v41 = v50[3];
  a3[20] = v50[2];
  a3[21] = v41;
  v42 = v50[5];
  a3[22] = v50[4];
  a3[23] = v42;
  v43 = v50[1];
  a3[18] = v50[0];
  a3[19] = v43;
  memcpy(a3 + 24, __src, 0x180uLL);
  v44 = v48[3];
  a3[50] = v48[2];
  a3[51] = v44;
  v45 = v48[5];
  a3[52] = v48[4];
  a3[53] = v45;
  result = *(double *)v48;
  v47 = v48[1];
  a3[48] = v48[0];
  a3[49] = v47;
  return result;
}

void DspLib::LoudspeakerController::Algorithm::findTargetActivity(uint64_t a1@<X0>, float *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t i;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t j;
  _OWORD *v13;
  uint64_t k;
  _OWORD *v15;
  __int128 v16;
  unint64_t v17;
  _OWORD *v18;
  float *v19;
  char *v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  float *v24;
  BOOL v25;
  BOOL v26;
  float v27;
  _BYTE *v28;
  char v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  BOOL isReleasing;
  BOOL v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  char v41;
  char v42;
  _OWORD v44[2];

  for (i = 0; i != 6; i += 3)
  {
    v6 = &a3[i];
    v6[1] = xmmword_1B6627DC0;
    v6[2] = xmmword_1B6629CD0;
    *v6 = xmmword_1B66282F0;
  }
  do
  {
    v7 = &a3[i];
    v7[1] = xmmword_1B6627DC0;
    v7[2] = xmmword_1B6629CD0;
    *v7 = xmmword_1B66282F0;
    i += 3;
  }
  while (i != 12);
  do
  {
    v8 = &a3[i];
    v8[1] = xmmword_1B6627DC0;
    v8[2] = xmmword_1B6629CD0;
    *v8 = xmmword_1B66282F0;
    i += 3;
  }
  while (i != 18);
  do
  {
    v9 = &a3[i];
    v9[1] = xmmword_1B6627DC0;
    v9[2] = xmmword_1B6629CD0;
    *v9 = xmmword_1B66282F0;
    i += 3;
  }
  while (i != 24);
  v10 = 0;
  v11 = a3 + 24;
  do
  {
    for (j = 0; j != 6; j += 3)
    {
      v13 = &v11[j];
      v13[1] = xmmword_1B6627DC0;
      v13[2] = xmmword_1B6629CD0;
      *v13 = xmmword_1B66282F0;
    }
    ++v10;
    v11 += 6;
  }
  while (v10 != 4);
  for (k = 48; k != 54; k += 3)
  {
    v15 = &a3[k];
    v15[1] = xmmword_1B6627DC0;
    v15[2] = xmmword_1B6629CD0;
    *v15 = xmmword_1B66282F0;
  }
  *(_QWORD *)&v16 = 0x101010101010101;
  *((_QWORD *)&v16 + 1) = 0x101010101010101;
  a3[58] = v16;
  a3[59] = v16;
  a3[56] = v16;
  a3[57] = v16;
  a3[54] = v16;
  a3[55] = v16;
  memcpy(a3, a2, 0x360uLL);
  memset(v44, 0, sizeof(v44));
  DspLib::LoudspeakerController::calculatePowerGain((uint64_t)(a2 + 96), *(unsigned int *)(a1 + 12), (float *)v44);
  if (*(_DWORD *)(a1 + 12))
  {
    v17 = 0;
    v18 = a3 + 54;
    v19 = a2 + 97;
    v20 = (char *)a3 + 870;
    do
    {
      v21 = *((float *)v44 + v17);
      v22 = v21 < 1.0 && *(_BYTE *)(a1 + 504) == 0;
      v23 = 0;
      *((_BYTE *)v18 + 12 * v17 + 5) = v22;
      v24 = v19;
      do
      {
        v25 = *v24 < 1.0 && *(_BYTE *)(a1 + 504) == 0;
        v20[v23++] = v25;
        v24 += 24;
      }
      while (v23 != 4);
      v26 = v21 < 1.0;
      v27 = a2[3 * v17 + 193];
      v28 = (char *)v18 + 12 * v17;
      v28[10] = v27 < 1.0;
      if (v27 < 1.0)
        v22 = 1;
      v28[4] = v22;
      v29 = v27 < 1.0 || v26;
      v28[11] = v29;
      v30 = a2[3 * v17 + 1];
      v31 = a2[3 * v17 + 25];
      v32 = a2[3 * v17 + 49];
      v33 = *(_QWORD *)(a1 + 544);
      isReleasing = DspLib::BandCombiner::isReleasing((const float **)(v33 + 4144 * v17 + 2408));
      v36 = v30 < 1.0 || v31 < 1.0 || v32 < 1.0;
      if (v36 || DspLib::BandCombiner::isReleasing((const float **)(v33 + 4144 * v17 + 2408)))
      {
        v37 = *(float *)(v33 + 4144 * v17 + 3824);
        v38 = *(float *)(*(_QWORD *)(a1 + 544) + 4144 * v17 + 32) - *(float *)(*(_QWORD *)(a1 + 544) + 4144 * v17 + 36);
        v39 = *(float *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, (v17 + 10) | 0x1000000000)+ 16);
        if (v38 >= v39)
          v39 = v38;
        v40 = v37 > (float)(v39 * 0.9);
        v41 = 1;
      }
      else
      {
        v41 = 0;
        v40 = 0;
      }
      if (*(_BYTE *)(a1 + 464))
      {
        if (v30 < 1.0)
          v40 = 1;
        if (*(_BYTE *)(a1 + 528))
          v40 = 0;
      }
      else
      {
        v40 = 0;
      }
      *((_BYTE *)v18 + 12 * v17 + 1) = v40;
      v42 = *(_BYTE *)(a1 + 465);
      if (v42)
      {
        v42 = *(float *)(v33 + 4144 * v17 + 3844) > (float)(*(float *)(v33 + 4144 * v17 + 928) * 0.9) ? v41 : 0;
        if (v31 < 1.0)
          v42 = 1;
      }
      *((_BYTE *)v18 + 12 * v17 + 2) = v42;
      if (*(_BYTE *)(a1 + 466))
      {
        if (*(float *)(v33 + 4144 * v17 + 3868) <= (float)(*(float *)(v33 + 4144 * v17 + 3864) * 0.9))
          v41 = 0;
        if (v32 < 1.0)
          v41 = 1;
      }
      else
      {
        v41 = 0;
      }
      *((_BYTE *)v18 + 12 * v17 + 3) = v41;
      *((_BYTE *)v18 + 12 * v17++) = v40 | v41 | v42 | isReleasing;
      v19 += 3;
      v20 += 12;
    }
    while (v17 < *(unsigned int *)(a1 + 12));
  }
}

void DspLib::LoudspeakerController::calculatePowerGain(uint64_t a1@<X0>, unint64_t a2@<X1>, float *a3@<X8>)
{
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;

  DspLib::fill(a3, 8uLL, 1.0);
  v6 = 0;
  v7 = (float *)(a1 + 4);
  do
  {
    if (a2)
    {
      v8 = 0;
      v9 = v7;
      do
      {
        v10 = *v9;
        v9 += 3;
        v11 = v10;
        if (v10 >= a3[v8])
          v11 = a3[v8];
        a3[v8++] = v11;
      }
      while (a2 > v8);
    }
    ++v6;
    v7 += 24;
  }
  while (v6 != 4);
}

void DspLib::LoudspeakerController::Algorithm::filterbankAnalysis(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v20;
  unint64_t j;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t k;
  _QWORD v30[3];
  _QWORD v31[3];

  v3 = *(_QWORD **)(a1 + 544);
  v4 = *(_QWORD **)(a1 + 552);
  if (v3 != v4)
  {
    v8 = 0;
    do
    {
      if (*(_BYTE *)(a3 + v8))
      {
        v9 = v3[3];
        v10 = *(_QWORD *)(a1 + 320);
        v11 = *(unsigned int *)(a1 + 32);
        if (v9 == v10 - a2 + v11)
        {
          if (a2 == -1)
            v12 = ((uint64_t)(v3[1] - *v3) >> 2) - v9;
          else
            v12 = a2;
          v13 = (char *)(*v3 + 4 * v9);
          v14 = v3[272];
          v31[0] = v3 + 291;
          v31[1] = 5;
          v31[2] = v14;
          DspLib::LinearPhaseFilterbank::process((uint64_t)(v3 + 260), v13, v12, v31);
          v3[3] += a2;
          v15 = v3[290] + a2;
          v3[290] = v15;
          v16 = 291;
          for (i = 275; i != 290; i += 3)
            v3[v16++] = v3[i] + 4 * v15;
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 336) + v11;
          if (v9 < v18 - a2 && v3[290] == 0)
          {
            do
            {
              if (v18 - (v9 + a2) >= v11)
                v20 = v11;
              else
                v20 = v18 - (v9 + a2);
              DspLib::LinearPhaseFilterbank::consumeInput((uint64_t)(v3 + 260), (char *)(*v3 + 4 * v9), v20);
              v9 = v3[3] + v20;
              v3[3] = v9;
              v11 = *(unsigned int *)(a1 + 32);
              v18 = *(_QWORD *)(a1 + 336) + v11;
            }
            while (v9 < v18 - a2 && v3[290] == 0);
            v10 = *(_QWORD *)(a1 + 320);
          }
          for (j = v10 + v11; v9 < j; j = *(_QWORD *)(a1 + 320) + v11)
          {
            if ((j - (v9 + a2)) % v11)
              v11 = (j - (v9 + a2)) % v11;
            v23 = j - v9;
            if (v23 >= v11)
              v24 = v11;
            else
              v24 = v23;
            v25 = v3[272];
            v26 = (char *)(*v3 + 4 * v9);
            v30[0] = v3 + 291;
            v30[1] = 5;
            v30[2] = v25;
            DspLib::LinearPhaseFilterbank::process((uint64_t)(v3 + 260), v26, v24, v30);
            v9 = v3[3] + v24;
            v3[3] = v9;
            v27 = v3[290] + v24;
            v3[290] = v27;
            v28 = 291;
            for (k = 275; k != 290; k += 3)
              v3[v28++] = v3[k] + 4 * v27;
            v11 = *(unsigned int *)(a1 + 32);
          }
        }
      }
      ++v8;
      v3 += 518;
    }
    while (v3 != v4);
  }
}

void DspLib::LoudspeakerController::Algorithm::calculateGains(uint64_t a1@<X0>, vDSP_Length a2@<X1>, float ***a3@<X2>, float *a4@<X8>)
{
  float ***v4;
  float ***v6;
  float **v8;
  float *v9;
  float *v10;
  float v11;
  unsigned int v12;
  float ***v13;
  float *v14;
  vDSP_Length v15;
  float **v16;
  DspLib::LoudspeakerController::TargetInterpolator *v17;
  uint64_t i;
  uint64_t v19;
  unsigned int v20;
  float *v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  float **v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float **v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  float **v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  float **v62;
  _QWORD *v63;
  DspLib::Biquad::SetupWrapper *v64;
  _QWORD *v65;
  DspLib::Biquad::SetupWrapper *v66;
  uint64_t v67;
  uint64_t v68;
  float **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float **v73;
  uint64_t v74;
  float **v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  float **v83;
  unsigned __int8 *v84;
  float *v85;
  int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  int v89;
  float v90;
  uint64_t v91;
  float **v92;
  unint64_t v93;
  float **v94;
  float **v95;
  int v96;
  float v97;
  float **v98;
  int v99;
  float **v100;
  uint64_t v101;
  float v102;
  float *v103;
  float v104;
  float v105;
  vDSP_Length v106;
  float *v107;
  float ***v108;
  float ***v109;
  float ***v110;
  float *v111;
  uint64_t v112;
  float ***v113;
  _BYTE *v114;
  vDSP_Length *v115;
  float ***v116;
  float *v117;
  float ***v118;
  float ***v119;
  __int128 v120;
  float ***v121;
  float ***v122;
  float **v123;
  uint64_t v124;
  _QWORD *v125;
  _BYTE *v126;
  _BYTE *v127;
  float *v128;
  __int128 v129;
  int v130;
  __int128 v131;
  int v132;
  __int128 v133;
  int v134;
  __int128 v135;
  int v136;
  _QWORD v137[10];
  __int128 v138;
  int v139;
  __int16 v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  __int16 v144;
  float ***v145[12];
  _QWORD v146[2];
  float **v147;
  _QWORD v148[2];
  float **v149;
  _QWORD v150[2];
  uint64_t v151;
  _QWORD v152[2];
  _QWORD v153[2];
  unint64_t v154;
  float **v155;
  unsigned int v156;
  _OWORD v157[2];
  vDSP_Length v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _OWORD v165[2];
  uint64_t v166;
  uint64_t v167;

  v4 = a3;
  v6 = (float ***)a1;
  v167 = *MEMORY[0x1E0C80C00];
  v158 = a2;
  memset(v157, 0, sizeof(v157));
  DspLib::LoudspeakerController::calculatePowerGain((uint64_t)(a3 + 48), *(unsigned int *)(a1 + 12), (float *)v157);
  v8 = v6[68];
  v9 = v8[469];
  v10 = v8[468];
  v11 = *((float *)v8 + 934);
  v156 = 0;
  if (*((_DWORD *)v6 + 3))
  {
    v12 = 0;
    v118 = v4 + 24;
    v119 = v4 + 12;
    v13 = v4 + 96;
    v14 = a4 + 8;
    v15 = (unint64_t)(float)(v11 * (float)(a2 + v9 - v10));
    v121 = v4 + 108;
    v120 = DspLib::LoudspeakerController::kUnityGains;
    v110 = v6;
    v111 = a4;
    v108 = v4 + 96;
    v109 = v4;
    v106 = v15;
    v107 = a4 + 8;
    do
    {
      v123 = v6[68];
      v124 = v12;
      v16 = &v123[518 * v12];
      DspLib::LoudspeakerController::TargetInterpolator::process((DspLib::LoudspeakerController::TargetInterpolator *)(v16 + 218), *((float *)v119 + 3 * v12), v158);
      DspLib::LoudspeakerController::TargetInterpolator::process((DspLib::LoudspeakerController::TargetInterpolator *)(v16 + 224), *((float *)v118 + 3 * v156), v158);
      v17 = (DspLib::LoudspeakerController::TargetInterpolator *)(v16 + 236);
      for (i = 384; i != 768; i += 96)
      {
        DspLib::LoudspeakerController::TargetInterpolator::process(v17, *(float *)((char *)v4 + 12 * v156 + i), v15);
        v17 = (DspLib::LoudspeakerController::TargetInterpolator *)((char *)v17 + 48);
      }
      v122 = (float ***)&v123[518 * v124];
      DspLib::LoudspeakerController::TargetInterpolator::process((DspLib::LoudspeakerController::TargetInterpolator *)(v122 + 230), *((float *)v13 + 3 * v156), v15);
      v20 = v156;
      a4[v156] = 1.0;
      v21 = &v14[5 * v20];
      v21[4] = 1.0;
      *(_OWORD *)v21 = v120;
      if (*((_BYTE *)v6 + 296))
      {
        v22 = (uint64_t)v121 + 12 * v20;
        v24 = *(unsigned __int8 *)(v22 + 11);
        v23 = (_BYTE *)(v22 + 11);
        if (v24 | *((unsigned __int8 *)v121 + 12 * v20))
        {
          v116 = (float ***)((char *)v121 + 12 * v20);
          v117 = &v14[5 * v20];
          v114 = v23;
          v115 = &v106;
          v155 = (float **)((char *)v6[43] + v158);
          v154 = 0;
          v25 = &v123[518 * v124];
          v154 = (unint64_t)(float)(*((float *)v25 + 934) * (float)((unint64_t)v155 + v25[469] - v25[468]));
          MEMORY[0x1E0C80A78](v19);
          v153[0] = (char *)&v106 - v27;
          v153[1] = v155;
          v31 = (uint64_t)v121 + 12 * v30;
          v32 = *(unsigned __int8 *)(v31 + 2);
          v127 = (_BYTE *)(v31 + 2);
          if (v32)
            DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)(v29 + 4144 * v28 + 3248), (uint64_t)&v106 - v27, v155);
          MEMORY[0x1E0C80A78](v26);
          v152[0] = (char *)&v106 - v35;
          v152[1] = v34;
          v112 = v36;
          v37 = (uint64_t)v121 + 12 * v36;
          v38 = *(unsigned __int8 *)(v37 + 3);
          v126 = (_BYTE *)(v37 + 3);
          if (v38)
            DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)&v123[518 * v124 + 425], (uint64_t)&v106 - v35, v34);
          v113 = (float ***)(v25 + 388);
          v128 = (float *)(v25 + 367);
          MEMORY[0x1E0C80A78](v33);
          v42 = (char *)&v106 - 4 * v41;
          v43 = 0;
          v166 = 0;
          memset(v165, 0, sizeof(v165));
          v45 = ((4 * v44) & 0xFFFFFFFFFFFFFFF0) + 16;
          do
          {
            *(_QWORD *)((char *)v165 + v43) = v42;
            v43 += 8;
            v42 += v45;
          }
          while (v43 != 40);
          v150[0] = v165;
          v150[1] = 5;
          v151 = v40;
          *(double *)&v50 = MEMORY[0x1E0C80A78](v39);
          v52 = (char *)&v106 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
          v53 = 0;
          v164 = 0;
          v162 = v50;
          v163 = v50;
          do
          {
            *(_QWORD *)(v49 + v53) = v52;
            v53 += 8;
            v52 += v48;
          }
          while (v53 != 40);
          v148[0] = v49;
          v148[1] = 5;
          v149 = v47;
          *(double *)&v57 = MEMORY[0x1E0C80A78](v46);
          v59 = (char *)&v106 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
          v60 = 0;
          v161 = 0;
          v159 = v57;
          v160 = v57;
          do
          {
            *(_QWORD *)(v56 + v60) = v59;
            v60 += 8;
            v59 += v55;
          }
          while (v60 != 40);
          v61 = 0;
          v62 = &v123[518 * v124];
          v63 = v62 + 296;
          v146[0] = v56;
          v146[1] = 5;
          v147 = v54;
          v125 = v62 + 415;
          v64 = (DspLib::Biquad::SetupWrapper *)(v62 + 421);
          v65 = v62 + 434;
          v66 = (DspLib::Biquad::SetupWrapper *)(v62 + 440);
          do
          {
            DspLib::multiply((const float *)v63[v61 / 8], (vDSP_Length)v155, *(float **)(v150[0] + v61), *v128);
            if (*v127)
            {
              v67 = v151;
              v68 = *(_QWORD *)(v150[0] + v61);
              v69 = v149;
              v70 = *(_QWORD *)(v148[0] + v61);
              DspLib::Biquad::SetupWrapper::reset(v64);
              DspLib::Biquad::Filter::process(v125, v68, v67, v70, v69);
            }
            if (*v126)
            {
              v71 = v151;
              v72 = *(_QWORD *)(v150[0] + v61);
              v73 = v147;
              v74 = *(_QWORD *)(v146[0] + v61);
              DspLib::Biquad::SetupWrapper::reset(v66);
              DspLib::Biquad::Filter::process(v65, v72, v71, v74, v73);
            }
            v61 += 8;
          }
          while (v61 != 40);
          v145[0] = &v155;
          v145[1] = v116;
          v145[2] = (float ***)v150;
          v145[3] = (float ***)v128;
          v145[4] = v122;
          v4 = v109;
          v6 = v110;
          v145[5] = v110;
          v145[6] = (float ***)&v158;
          v145[7] = (float ***)&v154;
          v145[8] = v113;
          v145[9] = (float ***)v157;
          v145[10] = (float ***)&v156;
          v145[11] = v109;
          v144 = 0;
          v75 = &v123[518 * v124];
          v143 = 0;
          DspLib::BandCombiner::gainEstimate((uint64_t)(v75 + 301), (uint64_t)&DspLib::LoudspeakerController::kUnityGains, 5, 0x100uLL, (uint64_t)&v143, 5, (uint64_t)&v141);
          v140 = 0;
          DspLib::GainSmoother::gainEstimate((uint64_t)(v75 + 335), 0x100uLL, (BOOL *)&v140, 1.0);
          v77 = v76;
          if (*v114)
          {
            v138 = v141;
            v139 = v142;
            v78 = DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_0::operator()(v145, (float *)&v138, v76);
            a4 = v111;
            v111[v112] = v78;
            DspLib::GainSmoother::gainEstimate((uint64_t)(v75 + 335), 0x100uLL, (BOOL *)&v140, v78);
            v77 = v79;
          }
          else
          {
            a4 = v111;
          }
          v13 = v108;
          v15 = v106;
          v137[0] = v116;
          v137[1] = v153;
          v137[2] = v148;
          v137[3] = v4;
          v137[4] = &v156;
          v137[5] = v122;
          v137[6] = v152;
          v137[7] = v146;
          v137[8] = &v155;
          v137[9] = v6;
          if (LODWORD(v6[60][2 * v156]) != 2)
          {
            v134 = 1065353216;
            v133 = v120;
            DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_1::operator()((uint64_t)v137, (uint64_t)&v133, (uint64_t)&v135, v77);
            v80 = v117;
            *(_OWORD *)v117 = v135;
            *((_DWORD *)v80 + 4) = v136;
          }
          DspLib::BandCombiner::gainEstimate((uint64_t)(v75 + 301), (uint64_t)v117, 5, 0x100uLL, (uint64_t)&v143, 5, (uint64_t)&v141);
          v81 = 0;
          v14 = v107;
          while (!*((_BYTE *)&v143 + v81))
          {
            v81 += 2;
            if (v81 == 10)
              goto LABEL_42;
          }
          v82 = 0;
          v83 = &v123[518 * v124 + 332];
          v84 = (unsigned __int8 *)&v143;
          v85 = v117;
          do
          {
            v86 = *v84;
            v84 += 2;
            if (!v86 || v85[v82] < (float)((*v83)[v82] * 1.4125))
              *(_DWORD *)((char *)&v141 + v82 * 4) = 1065353216;
            ++v82;
          }
          while (v82 != 5);
          v135 = v141;
          v136 = v142;
          v129 = v141;
          v130 = v142;
          DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_1::operator()((uint64_t)v137, (uint64_t)&v129, (uint64_t)&v131, v77);
          v87 = 0;
          v141 = v131;
          v142 = v132;
          v88 = (unsigned __int8 *)&v143;
          do
          {
            v89 = *v88;
            v88 += 2;
            v90 = *(float *)((char *)&v141 + v87 * 4);
            if (!v89 || v90 < *(float *)((char *)&v135 + v87 * 4))
              v85[v87] = v90;
            ++v87;
          }
          while (v87 != 5);
LABEL_42:
          v20 = v156;
        }
      }
      v12 = v20 + 1;
      v156 = v20 + 1;
      LODWORD(v91) = *((_DWORD *)v6 + 3);
    }
    while (v20 + 1 < v91);
  }
  else
  {
    LODWORD(v91) = 0;
  }
  if (*((_BYTE *)v6 + 504) && !*((_BYTE *)v6 + 536))
  {
    if ((_DWORD)v91)
    {
      v101 = v91;
      v102 = 1.0;
      v91 = v91;
      v103 = a4;
      do
      {
        v104 = *v103++;
        v105 = v104;
        if (v104 < v102)
          v102 = v105;
        --v91;
      }
      while (v91);
      do
      {
        *a4++ = v102;
        --v101;
      }
      while (v101);
    }
  }
  else
  {
    v92 = v6[59];
    if (v92)
    {
      v93 = 0;
      v94 = v6[60];
      v95 = v6[61];
      do
      {
        if (v94 != v95)
        {
          v96 = 0;
          v97 = 1.0;
          v98 = v94;
          do
          {
            if (v98[1] == (float *)v93 && a4[v96] < v97)
              v97 = a4[v96];
            ++v96;
            v98 += 2;
          }
          while (v98 != v95);
          if (v94 != v95)
          {
            v99 = 0;
            v100 = v94;
            do
            {
              if (v100[1] == (float *)v93)
                a4[v99] = v97;
              ++v99;
              v100 += 2;
            }
            while (v100 != v95);
          }
        }
        v93 = (v93 + 1);
      }
      while ((unint64_t)v92 > v93);
    }
  }
}

float DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_0::operator()(float ****a1, float *a2, float a3)
{
  float ***v6;
  vDSP_Length v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  float ***v13;
  float **v14;
  uint64_t v15;
  vDSP_Length v16;
  vDSP_Length v17;
  float **v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  float ***v22;
  float **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  const float *v33;
  uint64_t v34;
  vDSP_Length v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  float ***v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float **v61;
  uint64_t v62;
  uint64_t v63;
  const float *v64;
  uint64_t v65;
  uint64_t v66;
  vDSP_Length v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  double v77;
  float32x4_t *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  uint64_t v87;
  const float *v88;
  unint64_t v89;
  float ****v90;
  float ***v91;
  uint64_t v92;
  double v93;
  float v94;
  float v95;
  float v96;
  uint64_t v98;
  const float *v99;
  vDSP_Length v100;
  const float *v101;
  uint64_t *v102;
  float *v103;
  uint64_t *v104;
  uint64_t *v105[3];
  uint64_t *v106[3];
  uint64_t *v107[3];
  _OWORD v108[2];
  _OWORD v109[2];
  _QWORD v110[8];

  v110[5] = *MEMORY[0x1E0C80C00];
  v6 = a1[5];
  v7 = (vDSP_Length)**a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (float *)((char *)&v98 - v8);
  if (**(_BYTE **)(v10 + 8))
  {
    DspLib::multiply(**a1[2], (vDSP_Length)a1[2][2], v9, *a2);
    for (i = 1; i != 5; ++i)
      DspLib::multiplyAccumulate(v9, v7, (*a1[2])[i], a2[i]);
  }
  else
  {
    v13 = a1[4];
    v14 = *v13;
    v15 = *((unsigned int *)v6 + 8) - (_QWORD)*a1[6];
    v16 = (((char *)v13[1] - (char *)*v13) >> 2) - v15;
    if (v7 == -1)
      v17 = v16;
    else
      v17 = v7;
    DspLib::multiply((const float *)v14 + v15, v17, v9, *(float *)a1[3]);
  }
  v18 = **a1;
  MEMORY[0x1E0C80A78](v12);
  v21 = (const float *)((char *)&v98 - v20);
  if (*((_BYTE *)a1[1] + 4))
  {
    v22 = a1[3];
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v22 + 16));
    DspLib::Biquad::Filter::process(v22 + 10, (uint64_t)v9, v7, (uint64_t)v21, v18);
    v23 = **a1;
    MEMORY[0x1E0C80A78](v24);
    v27 = (float *)((char *)&v98 - v26);
    if (v28)
      DspLib::multiply(v9, v7, v21, (uint64_t)v18, (float *)((char *)&v98 - v26));
    v18 = v23;
  }
  else
  {
    MEMORY[0x1E0C80A78](v19);
    v27 = (float *)((char *)&v98 - v29);
  }
  MEMORY[0x1E0C80A78](v25);
  v33 = (const float *)((char *)&v98 - v32);
  LODWORD(v32) = *(unsigned __int8 *)(v34 + 10);
  v102 = v31;
  v101 = v33;
  if ((_DWORD)v32)
  {
    DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePathZeroState((float32x2_t *)a1[8], (uint64_t)v27, (uint64_t)v18, (uint64_t)v33);
    v104 = (uint64_t *)*a1[7];
  }
  else
  {
    v104 = v31;
  }
  v35 = (vDSP_Length)**a1;
  MEMORY[0x1E0C80A78](v30);
  v37 = (float *)((char *)&v98 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v38);
  v40 = (float *)((char *)&v98 - v39);
  MEMORY[0x1E0C80A78](v41);
  v103 = (float *)((char *)&v98 - v42);
  MEMORY[0x1E0C80A78](v43);
  v48 = &v98 - 2 * v47;
  v49 = 0;
  *v46 = 0u;
  v46[1] = 0u;
  do
  {
    *(_QWORD *)((char *)v46 + v49) = v48;
    v49 += 8;
    v48 = (uint64_t *)((char *)v48 + ((4 * v45) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  while (v49 != 32);
  MEMORY[0x1E0C80A78](v44);
  v53 = (char *)&v98 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = 0;
  memset(v109, 0, sizeof(v109));
  do
  {
    *(_QWORD *)((char *)v109 + v54) = v53;
    v54 += 8;
    v53 += (v51 & 0xFFFFFFFFFFFFFFF0) + 16;
  }
  while (v54 != 32);
  if (*((_BYTE *)a1[1] + 5))
  {
    v55 = *(unsigned int *)a1[10];
    v56 = a1[4];
    v57 = *((float *)a1[9] + v55);
    if (v57 < *((float *)v56 + 999))
      v57 = *((float *)v56 + 999);
    if (v57 >= a3)
      v57 = a3;
    v58 = *((float *)a1[11] + 3 * v55 + 193);
    if (v58 < *((float *)v56 + 982))
      v58 = *((float *)v56 + 982);
    if (v58 < v57)
      v57 = v58;
    DspLib::multiply(v9, v7, v37, v57);
    DspLib::LoudspeakerController::EfficiencyModel::processKernel((uint64_t)(a1[8] + 4), (int)v37, v35, v40, v35, v103, v35, (unint64_t)a1[8][17]);
    v59 = (float32x4_t *)a1[8];
    v107[0] = v110;
    v107[1] = (uint64_t *)4;
    v107[2] = v104;
    DspLib::LoudspeakerController::SpeakerSystemModel::averagePowersZeroInput(v59, (uint64_t)v40, v35, v107);
    DspLib::multiply(v27, (vDSP_Length)v18, v103);
    v60 = (float32x4_t *)a1[8];
    v106[0] = (uint64_t *)v109;
    v106[1] = (uint64_t *)4;
    v106[2] = v104;
    DspLib::LoudspeakerController::SpeakerSystemModel::powerPathZeroState(v60, (uint64_t)v27, (uint64_t)v18, v106);
    v61 = **a1;
  }
  else
  {
    v61 = (float **)v35;
  }
  MEMORY[0x1E0C80A78](v50);
  v64 = (const float *)((char *)&v98 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(v65 + 4))
  {
    DspLib::LoudspeakerController::BiquadModel::zeroInputResponse((DspLib::Biquad::Filter *)(a1[3] + 1), (uint64_t)v64, v61);
    DspLib::multiply(v9, v7, v64, (uint64_t)v61, v27);
  }
  MEMORY[0x1E0C80A78](v62);
  v70 = *(unsigned __int8 *)(v69 + 10);
  v100 = v67;
  v99 = (const float *)((char *)&v98 - v68);
  if (v70)
  {
    DspLib::LoudspeakerController::SpeakerSystemModel::temperaturePathZeroState((float32x2_t *)a1[8], (uint64_t)v27, (uint64_t)v18, (uint64_t)&v98 - v68);
    v71 = (uint64_t *)*a1[7];
  }
  else
  {
    v71 = (uint64_t *)v67;
  }
  MEMORY[0x1E0C80A78](v66);
  v75 = (char *)&v98 - ((v74 + 79) & 0xFFFFFFFFFFFFFFC0);
  v76 = 0;
  HIDWORD(v77) = 0;
  memset(v108, 0, sizeof(v108));
  do
  {
    *(_QWORD *)((char *)v108 + v76) = v75;
    v76 += 8;
    v75 += ((4 * v73) & 0xFFFFFFFFFFFFFFF0) + 16;
  }
  while (v76 != 32);
  if (*((_BYTE *)a1[1] + 5))
  {
    DspLib::multiply(v27, (vDSP_Length)v18, v103);
    v78 = (float32x4_t *)a1[8];
    v105[0] = (uint64_t *)v108;
    v105[1] = (uint64_t *)4;
    v105[2] = v71;
    DspLib::LoudspeakerController::SpeakerSystemModel::powerPathZeroState(v78, (uint64_t)v27, (uint64_t)v18, v105);
  }
  v79 = 0;
  v80 = 1.0;
  v81 = 240;
  v82 = 292;
  v83 = 384;
  do
  {
    if (*((_BYTE *)v6 + 504))
    {
      LODWORD(v77) = *(_DWORD *)((char *)a1[11] + v82);
    }
    else
    {
      if (!*((_BYTE *)a1[1] + v79 + 6))
        goto LABEL_48;
      v84 = (uint64_t)a1[11] + 12 * *(unsigned int *)a1[10] + v83;
      LODWORD(v77) = *(_DWORD *)v84;
      *(float *)&v77 = DspLib::LoudspeakerController::computeGainsSquared((const float *)v110[v79], (vDSP_Length)v104, *((const float **)v109 + v79), v77, *(float *)(v84 + 4), *(float *)(v84 + 8), (uint64_t)v104, *((const float **)v108 + v79), (vDSP_Length)v71, (uint64_t)a1[4][v81 - 1]);
    }
    if (*(float *)&v77 < v80)
      v80 = *(float *)&v77;
LABEL_48:
    ++v79;
    v81 += 6;
    v82 += 12;
    v83 += 96;
  }
  while (v79 != 4);
  v85 = 1.0;
  if (v80 <= 1.0)
    v85 = v80;
  if (v80 >= *((float *)a1[4] + 999))
    v86 = v85;
  else
    v86 = *((float *)a1[4] + 999);
  if (*((_BYTE *)a1[1] + 10))
  {
    MEMORY[0x1E0C80A78](v72);
    v88 = (const float *)((char *)&v98 - v87);
    v89 = (unint64_t)*a1[7];
    DspLib::LoudspeakerController::SpeakerSystemModel::temperatureZeroInput((float32x2_t *)a1[8], (float *)((char *)&v98 - v87), v89);
    v91 = a1[4];
    v90 = a1 + 4;
    v92 = (uint64_t)v90[7] + 12 * *(unsigned int *)v90[6];
    LODWORD(v93) = *(_DWORD *)(v92 + 768);
    v94 = DspLib::LoudspeakerController::computeGainsSquared(v88, v89, v101, v93, *(float *)(v92 + 772), *(float *)(v92 + 776), (uint64_t)v102, v99, v100, (uint64_t)v91[233]);
    v95 = 1.0;
    if (v94 <= 1.0)
      v95 = v94;
    if (v94 >= *((float *)*v90 + 982))
      v96 = v95;
    else
      v96 = *((float *)*v90 + 982);
    if (v96 < v86)
      return v96;
  }
  return v86;
}

void DspLib::LoudspeakerController::Algorithm::calculateGains(unsigned long,DspLib::LoudspeakerController::Algorithm::TargetActivity const&)::$_1::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  _BYTE *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  uint64_t *v32;
  _DWORD *v33;
  uint64_t v34;
  vDSP_Length v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  __int128 v40;
  int v41;
  uint64_t v42[3];
  __int128 v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;

  if (a4 == 0.0)
  {
    *(_DWORD *)(a3 + 16) = 1065353216;
    *(_OWORD *)a3 = DspLib::LoudspeakerController::kUnityGains;
  }
  else
  {
    v7 = *(_BYTE **)a1;
    if (**(_BYTE **)a1)
    {
      v9 = *(_QWORD *)(a1 + 72);
      if (v7[2])
      {
        v10 = *(uint64_t **)(a1 + 8);
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *v10;
        v13 = v10[1];
        v49 = *(_QWORD *)v11;
        v50 = *(_OWORD *)(v11 + 8);
        v14 = *(float *)(*(_QWORD *)(a1 + 24) + 12 * **(unsigned int **)(a1 + 32) + 104);
        v47 = *(_OWORD *)a2;
        v48 = *(_DWORD *)(a2 + 16);
        DspLib::LoudspeakerController::computeGainsSigned(v12, v13, &v49, &v47, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1768), 0, &v51, v14, a4);
        *(_OWORD *)a2 = v51;
        *(_DWORD *)(a2 + 16) = v52;
        v7 = *(_BYTE **)a1;
      }
      if (v7[3])
      {
        v51 = 0uLL;
        v52 = 0;
        v15 = *(_QWORD *)(a1 + 56);
        v45 = *(_QWORD *)v15;
        v16 = *(_QWORD *)(a1 + 24) + 12 * **(unsigned int **)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        v17 = *(uint64_t **)(a1 + 48);
        v19 = *v17;
        v20 = v17[1];
        v46 = *(_OWORD *)(v15 + 8);
        v21 = *(float *)(v16 + 200);
        v22 = *(_OWORD *)a2;
        v44 = *(_DWORD *)(a2 + 16);
        v43 = v22;
        DspLib::LoudspeakerController::computeGainsSigned(v19, v20, &v45, &v43, *(_QWORD *)(v18 + 1816), *(_QWORD *)(v18 + 3896), &v51, v21, a4);
        v23 = *(_QWORD *)(a1 + 40);
        v24 = *(_QWORD *)(v23 + 3880);
        v25 = *(_QWORD *)(v23 + 3888);
        v26 = v25 > v24;
        v27 = v25 - v24;
        if (v26)
        {
          v28 = (float *)&v51 + v24;
          v29 = (float *)(a2 + 4 * v24);
          do
          {
            v30 = *v28 * a4;
            if (v30 < *(float *)(v23 + 3876))
              v30 = *(float *)(v23 + 3876);
            v31 = v30 / a4;
            *v28 = v31;
            if (v31 < *v29)
              *v29 = v31;
            ++v28;
            ++v29;
            --v27;
          }
          while (v27);
        }
        v7 = *(_BYTE **)a1;
      }
      if (v7[1])
      {
        v33 = *(_DWORD **)(a1 + 32);
        v32 = *(uint64_t **)(a1 + 40);
        v34 = *v32;
        v35 = **(_QWORD **)(a1 + 64);
        v42[0] = (uint64_t)(v32 + 296);
        v42[1] = 5;
        v42[2] = v35;
        LODWORD(v32) = *v33;
        v40 = *(_OWORD *)a2;
        v41 = *(_DWORD *)(a2 + 16);
        v36 = *(_QWORD *)(v9 + 544) + 4144 * v32;
        v37 = *(float *)(v36 + 32) - *(float *)(v36 + 36);
        v38 = DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, ((_DWORD)v32 + 10) | 0x1000000000);
        if (v37 >= *(float *)(v38 + 16))
          v39 = v37;
        else
          v39 = *(float *)(v38 + 16);
        DspLib::LoudspeakerController::computeGainsAmplitude(v34, v35, v42, &v40, &v51, a4, v39);
        *(_OWORD *)a2 = v51;
        *(_DWORD *)(a2 + 16) = v52;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 16);
  }
}

void DspLib::LoudspeakerController::Algorithm::filterbankSynthesis(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  const float **v9;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];

  if (a3[1])
  {
    v5 = 0;
    v6 = 0;
    v7 = a3[2];
    v20 = a2 + 32;
    do
    {
      v8 = *(_QWORD *)(a1 + 544);
      v9 = (const float **)(v8 + 4144 * v5);
      v10 = (const float *)(v20 + 20 * v5);
      if (DspLib::BandCombiner::isReleasing(v9 + 301) || DspLib::minv(v10, 5uLL) < 1.0)
      {
        v22[0] = v8 + 4144 * v5 + 2368;
        v22[1] = 5;
        v22[2] = v7;
        DspLib::BandCombiner::process((DspLib::BandCombiner *)(v9 + 301), v22, (uint64_t)v10, 5, *(float **)(*a3 + 8 * v5), a3[2]);
      }
      else if (v7)
      {
        memmove(*(void **)(*a3 + 8 * v5), &(*v9)[*(unsigned int *)(a1 + 32) - v7], 4 * v7);
      }
      v11 = 4144 * v6;
      v12 = v8 + 4144 * v5;
      DspLib::GainSmoother::process(v12 + 2680, *(void **)(*a3 + 8 * v5), a3[2], *(void **)(*a3 + 8 * v5), a3[2], *(float *)(a2 + 4 * v5));
      v13 = (_QWORD *)(v12 + 2320);
      if (*(_QWORD *)(v12 + 2320) <= v7)
      {
        v16 = 0;
      }
      else
      {
        for (i = 0; i != 120; i += 24)
        {
          v15 = *(_QWORD *)(a1 + 344);
          if (v15)
            memmove(*(void **)(v8 + v11 + 2200 + i), (const void *)(*(_QWORD *)(v8 + v11 + 2200 + i) + 4 * v7), 4 * v15);
        }
        v16 = *v13 - v7;
      }
      v17 = 0;
      *v13 = v16;
      v18 = (uint64_t *)(v8 + v11 + 2200);
      do
      {
        v19 = *v18;
        v18 += 3;
        *(_QWORD *)(v8 + v11 + 2328 + v17) = v19 + 4 * v16;
        v17 += 8;
      }
      while (v17 != 40);
      v5 = ++v6;
    }
    while (a3[1] > (unint64_t)v6);
  }
}

void DspLib::LoudspeakerController::Algorithm::fastPeakLimiter(uint64_t a1, _QWORD *a2)
{
  double v4;
  uint64_t v5;
  float *v6;
  unint64_t v7;
  float v8;
  vDSP_Length v9;
  uint64_t v10;
  float *v11;
  float v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  int8x16_t v23;
  int8x16_t v24;
  float v25;
  _QWORD v26[2];
  int8x16_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 528))
  {
    if (*(_BYTE *)(a1 + 464))
    {
      if (*(_BYTE *)(a1 + 296))
      {
        v26[1] = v26;
        v4 = MEMORY[0x1E0C80A78](a1);
        v6 = (float *)((char *)v26 - v5);
        if (*(_DWORD *)(a1 + 12))
        {
          v7 = 0;
          v8 = 1.0 - *(float *)&v4;
          v9 = a2[2];
          do
          {
            v10 = *(_QWORD *)(a1 + 544);
            v11 = (float *)(v10 + 4144 * v7);
            v12 = v11[8] - v11[9];
            v13.i32[0] = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition, (v7 + 10) | 0x1000000000)+ 16);
            if (v12 >= *(float *)v13.i32)
              *(float *)v13.i32 = v12;
            v27 = v13;
            DspLib::abs(*(const float **)(*a2 + 8 * v7), a2[2], v6);
            if (v11[1032] != 1.0 || (*(float *)v14.i32 = DspLib::maxv(v6, v9), *(float *)v14.i32 > *(float *)v27.i32))
            {
              v15 = a2[2];
              if (v15)
              {
                v16 = 0;
                v17 = v11 + 1032;
                v18 = *(_QWORD *)(*a2 + 8 * v7);
                v19 = (float *)(v10 + 4144 * v7 + 4132);
                v20 = 4 * v15;
                do
                {
                  v21 = 1.0;
                  if (*v17 < 0.99)
                    v21 = v8 + (float)(*v17 * *(float *)(a1 + 532));
                  *v17 = v21;
                  v22 = v6[v16];
                  v23 = v27;
                  if ((float)(v21 * v22) <= *(float *)v27.i32)
                  {
                    *(float *)v14.i32 = v21 * *(float *)(v18 + 4 * v16);
                  }
                  else
                  {
                    *v17 = *(float *)v27.i32 / v22;
                    v14.i32[0] = *(_DWORD *)(v18 + 4 * v16);
                    v24.i64[0] = 0x8000000080000000;
                    v24.i64[1] = 0x8000000080000000;
                    v14.i32[0] = vbslq_s8(v24, v23, v14).u32[0];
                  }
                  *(_DWORD *)(v18 + 4 * v16) = v14.i32[0];
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1))
                  {
                    v25 = *v19;
                    if (*v19 >= *v17)
                      v25 = *v17;
                    *v19 = v25;
                  }
                  ++v16;
                  v20 -= 4;
                }
                while (v20);
              }
            }
            ++v7;
          }
          while (v7 < *(unsigned int *)(a1 + 12));
        }
      }
    }
  }
}

void DspLib::LoudspeakerController::Algorithm::outputAnalysis(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  const float *v37;
  vDSP_Length v38;
  float v39;
  const float *v40;
  float **v41;
  const float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  vDSP_Length v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  DspLib::Logger *v51;
  DspLib::Logger *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[4];
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  unint64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  __int128 v70;
  unint64_t v71;
  _OWORD v72[2];
  _OWORD v73[2];
  uint64_t v74;

  v2 = a1;
  v74 = *MEMORY[0x1E0C80C00];
  v61 = a2;
  v3 = *(_QWORD *)(a1 + 544);
  v4 = *(_QWORD *)(v3 + 3752) - *(_QWORD *)(v3 + 3744);
  v66 = a2[2];
  v5 = *(float *)(v3 + 3736) * (float)(v66 + (v4 >> 2));
  v6 = (unint64_t)v5;
  if ((unint64_t)v5 <= 1)
    v7 = 1;
  else
    v7 = (unint64_t)v5;
  MEMORY[0x1E0C80A78](a1);
  v9 = &v56[-2 * v8];
  v10 = 0;
  memset(v73, 0, sizeof(v73));
  do
  {
    *(_QWORD *)((char *)v73 + v10) = v9;
    v10 += 8;
    v9 = (_QWORD *)((char *)v9 + 4 * ((v7 - 1) & 0x3FFFFFFFFFFFFFFCLL) + 16);
  }
  while (v10 != 32);
  for (i = 0; i != 32; i += 8)
    DspLib::clear(*(float **)((char *)v73 + i), v6);
  if (v61[1])
  {
    LODWORD(v13) = 0;
    v14 = v66;
    if (v66 <= 1)
      v14 = 1;
    v15 = ((4 * (v7 - 1)) & 0xFFFFFFFFFFFFFFF0) + 16;
    v56[3] = 4 * v14;
    v56[2] = 16 * (((v7 - 1) & 0x3FFFFFFFFFFFFFFCLL) + 4);
    v56[1] = 4 * v7;
    v60 = v2;
    do
    {
      v58 = v56;
      v59 = v13;
      v57 = 4144 * v13;
      MEMORY[0x1E0C80A78](v12);
      v63 = (float *)((char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1E0C80A78](v17);
      v62 = (float *)((char *)v56 - v18);
      MEMORY[0x1E0C80A78](v19);
      v21 = (float *)((char *)v56 - v20);
      MEMORY[0x1E0C80A78](v22);
      v65 = (float *)((char *)v56 - v23);
      MEMORY[0x1E0C80A78](v24);
      v64 = (float *)((char *)v56 - v25);
      MEMORY[0x1E0C80A78](v26);
      v29 = (char *)v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      v30 = 0;
      memset(v72, 0, sizeof(v72));
      do
      {
        *(_QWORD *)((char *)v72 + v30) = v29;
        v30 += 8;
        v29 += v15;
      }
      while (v30 != 32);
      MEMORY[0x1E0C80A78](v27);
      v32 = (float *)((char *)v56 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
      v69 = v33;
      v35 = v33 + 4144 * v34;
      v36 = v61;
      v37 = *(const float **)(*v61 + 8 * v34);
      v38 = v61[2];
      v39 = *(float *)(v35 + 2936);
      v67 = v34;
      v40 = v63;
      v41 = (float **)v66;
      DspLib::multiply(v37, v38, v63, v39);
      v42 = v62;
      DspLib::Biquad::Filter::process((_QWORD *)(v35 + 2944), (uint64_t)v40, (uint64_t)v41, (uint64_t)v62, v41);
      DspLib::multiply(v40, (vDSP_Length)v41, v42, (uint64_t)v41, v21);
      LODWORD(v42) = *(_DWORD *)(*(_QWORD *)(v60 + 480) + 16 * v67);
      *(_QWORD *)&v70 = v72;
      *((_QWORD *)&v70 + 1) = 4;
      v71 = v6;
      v68 = v32;
      v43 = (uint64_t)v40;
      v44 = v67;
      DspLib::LoudspeakerController::SpeakerSystemModel::process(v35 + 3104, v43, (vDSP_Length)v41, v21, (vDSP_Length)v41, &v70, (uint64_t)v65, v41, (uint64_t)v64, v41, v32, v6, (_DWORD)v42 != 2);
      *(float *)(v35 + 3840) = DspLib::maxMagnitude(*(const float **)(*v36 + 8 * v44), v36[2]);
      v45 = v69;
      if ((_DWORD)v42 != 2)
      {
        v46 = v66;
        v47 = v69 + 4144 * v44;
        *(float *)(v47 + 3856) = DspLib::maxMagnitude(v65, v66);
        *(float *)(v47 + 3908) = DspLib::maxMagnitude(v64, v46);
      }
      v12 = (uint64_t *)v68;
      v2 = v60;
      if (v6)
      {
        v48 = 0;
        *(float *)(v45 + 4144 * v44 + 3924) = DspLib::maxv(v68, v6);
        v49 = v45 + v57 + 3980;
        do
        {
          *(float *)(v49 + 4 * v48) = DspLib::maxv(*((const float **)v72 + v48), v6);
          DspLib::add(*((float **)v73 + v48), v6, *((const float **)v72 + v48));
          ++v48;
        }
        while (v48 != 4);
        v45 = v69;
        v12 = DspLib::CircularDelay::write((uint64_t *)(v69 + 4144 * v44 + 4088), (char *)v68, v6);
      }
      if (*(_BYTE *)(v2 + 584))
      {
        if (v66)
        {
          v12 = *(uint64_t **)(v2 + 624);
          if (v12)
          {
            DspLib::Logger::logData((DspLib::Logger *)v12, v63, v66);
            v12 = *(uint64_t **)(v2 + 624);
            if (v12)
            {
              DspLib::Logger::logData((DspLib::Logger *)v12, v62, v66);
              v12 = *(uint64_t **)(v2 + 624);
              if (v12)
              {
                DspLib::Logger::logData((DspLib::Logger *)v12, v65, v66);
                v12 = *(uint64_t **)(v2 + 624);
                if (v12)
                  DspLib::Logger::logData((DspLib::Logger *)v12, v64, v66);
              }
            }
          }
        }
        if (v6)
        {
          for (j = 0; j != 32; j += 8)
          {
            v51 = *(DspLib::Logger **)(v2 + 608);
            if (v51)
              DspLib::Logger::logData(v51, *(float **)((char *)v72 + j), v6);
          }
          v52 = *(DspLib::Logger **)(v2 + 608);
          v53 = v68;
          if (v52)
            DspLib::Logger::logData(v52, v68, v6);
          DspLib::add(v53, v6, -*(float *)(v45 + 4144 * v44 + 3724));
          v12 = *(uint64_t **)(v2 + 608);
          if (v12)
            DspLib::Logger::logData((DspLib::Logger *)v12, v53, v6);
        }
      }
      v13 = (v59 + 1);
    }
    while (v61[1] > v13);
  }
  if (v6)
  {
    v54 = 0;
    v55 = v2 + 444;
    do
    {
      *(float *)(v55 + 4 * v54) = DspLib::maxv(*((const float **)v73 + v54), v6);
      ++v54;
    }
    while (v54 != 4);
  }
}

void DspLib::LoudspeakerController::Algorithm::processBlock(DspLib::LoudspeakerController::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, unsigned int a4)
{
  DspLibBuffer *v6;
  unint64_t cycle_count;
  DspLib::Logger *v9;
  DspLib::Logger *v10;
  DspLibBuffer *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  vDSP_Length v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  DspLib::LoudspeakerController::Algorithm *v24;
  uint64_t v25;
  uint64_t *v26;
  float v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  DspLib::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  DspLibBuffer *v60;
  DspLibBuffer **v61;
  __int128 v62;
  __int128 v63;
  _QWORD v64[3];
  _QWORD v65[3];
  _QWORD v66[3];
  float v67[50];
  _OWORD v68[54];
  _QWORD v69[3];
  _QWORD v70[3];
  _QWORD v71[3];
  int v72;
  const char *v73;
  __int16 v74;
  int v75;
  _QWORD v76[16];

  v6 = a2;
  v76[13] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  if (cycle_count)
  {
    if (*((_BYTE *)this + 584))
    {
      v9 = (DspLib::Logger *)*((_QWORD *)this + 74);
      if (v9)
        DspLib::Logger::logData(v9, (float)cycle_count);
      v10 = (DspLib::Logger *)*((_QWORD *)this + 78);
      if (v10)
        DspLib::Logger::logData(v10, (float)cycle_count);
    }
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    if (*((_BYTE *)this + 520))
    {
      if (a4 > 1)
      {
        *(_QWORD *)&v62 = a3;
        *(_QWORD *)&v63 = cycle_count;
        v60 = v6;
        v11 = (DspLibBuffer *)((char *)v6 + 96);
        v12 = DspLibBuffer::numChannels((DspLibBuffer *)((char *)v6 + 96));
        v61 = &v60;
        MEMORY[0x1E0C80A78](v12);
        v15 = (char *)&v60 - v14;
        if (v13 >= 0x200)
          v16 = 512;
        else
          v16 = v13;
        bzero((char *)&v60 - v14, v16);
        if (DspLibBuffer::numChannels(v11))
        {
          v17 = 0;
          do
          {
            *(_QWORD *)&v15[8 * v17] = DspLibBuffer::channel(v11, v17);
            ++v17;
          }
          while (v17 < DspLibBuffer::numChannels(v11));
        }
        DspLibBuffer::numChannels(v11);
        v18 = vp::utility::CPU_Profiler::get_cycle_count(v11);
        if (*((_DWORD *)this + 3))
        {
          v19 = v18;
          v20 = 0;
          if (v18 <= 1)
            v21 = 1;
          else
            v21 = v18;
          v22 = 4120;
          v23 = 4 * v21;
          do
          {
            v24 = this;
            v25 = *((_QWORD *)this + 68);
            MEMORY[0x1E0C80A78](v18);
            DspLib::multiply(*(const float **)&v15[8 * v20], v19, (float *)((char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0)), *((float *)v24 + 131));
            v26 = (uint64_t *)(v25 + v22);
            v27 = DspLib::DCTracker::process(*v26, (const float *)((char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0)), v19);
            *((float *)v26 - 968) = v27;
            v28 = (float *)(v26 - 122);
            this = v24;
            *v28 = v27;
            ++v20;
            v22 += 4144;
          }
          while (v20 < *((unsigned int *)v24 + 3));
        }
        a3 = (DspLibBuffer *)v62;
        cycle_count = v63;
        v6 = v60;
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v72 = 136315394;
        v73 = "DspLibLoudspeakerController.cpp";
        v74 = 1024;
        v75 = 2544;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d LoudspeakerController battery tracking is enabled, but no telemetry is present", (uint8_t *)&v72, 0x12u);
      }
    }
    v29 = DspLibBuffer::numChannels(v6);
    v61 = &v60;
    MEMORY[0x1E0C80A78](v29);
    v32 = (char *)&v60 - v31;
    if (v30 >= 0x200)
      v33 = 512;
    else
      v33 = v30;
    bzero((char *)&v60 - v31, v33);
    if (DspLibBuffer::numChannels(v6))
    {
      v34 = 0;
      do
      {
        *(_QWORD *)&v32[8 * v34] = DspLibBuffer::channel(v6, v34);
        ++v34;
      }
      while (v34 < DspLibBuffer::numChannels(v6));
    }
    v35 = DspLibBuffer::numChannels(v6);
    v36 = vp::utility::CPU_Profiler::get_cycle_count(v6);
    v37 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v37);
    v40 = (char *)&v60 - v39;
    if (v38 >= 0x200)
      v41 = 512;
    else
      v41 = v38;
    bzero((char *)&v60 - v39, v41);
    if (DspLibBuffer::numChannels(a3))
    {
      v42 = 0;
      do
      {
        *(_QWORD *)&v40[8 * v42] = DspLibBuffer::channel(a3, v42);
        ++v42;
      }
      while (v42 < DspLibBuffer::numChannels(a3));
    }
    v43 = DspLibBuffer::numChannels(a3);
    v44 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v71[0] = v32;
    v71[1] = v35;
    v71[2] = v36;
    v70[0] = v40;
    v70[1] = v43;
    v70[2] = v44;
    DspLib::LoudspeakerController::Algorithm::inputCompensation((uint64_t)this, v71, (uint64_t)v70);
    v69[0] = v40;
    v69[1] = v43;
    v69[2] = v44;
    v45 = DspLib::LoudspeakerController::Algorithm::inputAnalysis((uint64_t)this, (uint64_t)v69);
    if (*((_BYTE *)this + 584))
    {
      v46 = (DspLib::Logger *)*((_QWORD *)this + 76);
      if (v46)
        DspLib::Logger::logData(v46, (float)v45);
    }
    DspLib::LoudspeakerController::Algorithm::findTargets((DspLib::Logger **)this, v45, v68);
    DspLib::LoudspeakerController::Algorithm::findTargetActivity((uint64_t)this, (float *)v68, &v72);
    MEMORY[0x1E0C80A78](v47);
    if ((_DWORD)v48)
    {
      v49 = (char *)v76;
      v50 = v48;
      v51 = (char *)&v60 - ((v48 + 15) & 0x1FFFFFFF0);
      do
      {
        v52 = *v49;
        v49 += 12;
        *v51++ = v52;
        --v50;
      }
      while (v50);
    }
    DspLib::LoudspeakerController::Algorithm::filterbankAnalysis((uint64_t)this, cycle_count, (uint64_t)&v60 - ((v48 + 15) & 0x1FFFFFFF0));
    memset(v67, 0, 192);
    DspLib::LoudspeakerController::Algorithm::calculateGains((uint64_t)this, cycle_count, (float ***)&v72, v67);
    v66[0] = v40;
    v66[1] = v43;
    v66[2] = v44;
    DspLib::LoudspeakerController::Algorithm::filterbankSynthesis((uint64_t)this, (uint64_t)v67, v66);
    v65[0] = v40;
    v65[1] = v43;
    v65[2] = v44;
    DspLib::LoudspeakerController::Algorithm::fastPeakLimiter((uint64_t)this, v65);
    v64[0] = v40;
    v64[1] = v43;
    v64[2] = v44;
    DspLib::LoudspeakerController::Algorithm::outputAnalysis((uint64_t)this, v64);
    if (*((_BYTE *)this + 469) && *((_DWORD *)this + 3))
    {
      v54 = 0;
      v55 = 3720;
      v56 = &qword_1EF137648;
      do
      {
        v57 = (uint64_t *)(*((_QWORD *)this + 68) + v55);
        *(_QWORD *)&v53 = *(v57 - 365);
        v63 = v53;
        *(_QWORD *)&v53 = *(v57 - 3);
        v62 = v53;
        v58 = *v57;
        v59 = DspLib::currentTimeStamp();
        *(_QWORD *)&v53 = v63;
        *((_QWORD *)&v53 + 1) = v62;
        *(_OWORD *)(v56 - 3) = v53;
        *(v56 - 1) = v58;
        *v56 = v59;
        v56 += 4;
        ++v54;
        v55 += 4144;
      }
      while (v54 < *((unsigned int *)this + 3));
    }
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::stop((DspLib::LoudspeakerController::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
  }
}

float DspLib::DCTracker::process(uint64_t a1, const float *a2, vDSP_Length __N)
{
  vDSP_Length v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  vDSP_Length v8;
  float v9;
  uint64_t v11;

  v11 = a1;
  if (__N)
  {
    v4 = __N;
    v5 = (float *)a2;
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v6 + __N < v7 >> 2)
    {
LABEL_5:
      DspLib::DCTracker::process(std::span<float const,18446744073709551615ul>)::{lambda(std::span<float const,18446744073709551615ul>)#1}::operator()(&v11, v5, v4);
      return *(float *)(a1 + 32) * *(float *)(a1 + 36);
    }
    v8 = (v7 >> 2) - v6;
    v9 = *(float *)(a1 + 40);
    *(float *)(a1 + 32) = v9 + DspLib::sum(a2, v8);
    DspLib::CircularDelay::write((uint64_t *)a1, (char *)v5, v8);
    *(_DWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (v4 != v8)
    {
      v5 = &v5[v4 - (v4 - v8)];
      v4 -= v8;
      goto LABEL_5;
    }
  }
  return *(float *)(a1 + 32) * *(float *)(a1 + 36);
}

float DspLib::LoudspeakerController::Algorithm::channelStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  __int128 *v39;
  __int128 v40;
  float result;
  float32x4_t v42;
  __int128 v43;
  int v44;
  float32x4_t v45;
  __int128 v46;
  int v47;
  float32x4_t v48;
  __int128 v49;
  int v50;
  float32x4_t v51;
  __int128 v52;
  int v53;
  float32x4_t v54;
  __int128 v55;
  int v56;
  float32x4_t v57[2];

  v6 = *(double *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 408);
  *(float *)a3 = v6;
  *(float *)(a3 + 4) = (float)v7;
  if (!v7)
  {
    LODWORD(v9) = 0;
LABEL_7:
    v10 = a3 + 20 * v9 + 8;
    v11 = v9 + 1;
    do
    {
      v56 = 0;
      v55 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v55, v10);
      v10 += 20;
      v12 = (_DWORD)v11++ == 4;
    }
    while (!v12);
    goto LABEL_10;
  }
  v8 = 0;
  LODWORD(v9) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 352), v8, 0, v57);
    DspLib::Biquad::write((uint64_t)v57, a3 + 20 * v8 + 8);
    v9 = (v9 + 1);
    v8 = v9;
  }
  while (v7 > v9);
  if (v9 <= 3)
    goto LABEL_7;
LABEL_10:
  v13 = *(double *)(a1 + 24);
  v14 = *(_QWORD *)(a2 + 560);
  *(float *)(a3 + 88) = v13;
  *(float *)(a3 + 92) = (float)v14;
  if (!v14)
  {
    LODWORD(v16) = 0;
LABEL_16:
    v17 = a3 + 20 * v16 + 96;
    v18 = v16 + 1;
    do
    {
      v53 = 0;
      v52 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v52, v17);
      v17 += 20;
      v12 = (_DWORD)v18++ == 4;
    }
    while (!v12);
    goto LABEL_19;
  }
  v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 504), v15, 0, &v54);
    DspLib::Biquad::write((uint64_t)&v54, a3 + 20 * v15 + 96);
    v16 = (v16 + 1);
    v15 = v16;
  }
  while (v14 > v16);
  if (v16 <= 3)
    goto LABEL_16;
LABEL_19:
  v19 = *(double *)(a1 + 24);
  v20 = *(_QWORD *)(a2 + 104);
  *(float *)(a3 + 176) = v19;
  *(float *)(a3 + 180) = (float)v20;
  if (!v20)
  {
    LODWORD(v22) = 0;
LABEL_25:
    v23 = a3 + 20 * v22 + 184;
    v24 = v22 + 1;
    do
    {
      v50 = 0;
      v49 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v49, v23);
      v23 += 20;
      v12 = (_DWORD)v24++ == 4;
    }
    while (!v12);
    goto LABEL_28;
  }
  v21 = 0;
  LODWORD(v22) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 48), v21, 0, &v51);
    DspLib::Biquad::write((uint64_t)&v51, a3 + 20 * v21 + 184);
    v22 = (v22 + 1);
    v21 = v22;
  }
  while (v20 > v22);
  if (v22 <= 3)
    goto LABEL_25;
LABEL_28:
  v25 = *(double *)(a1 + 24) / (double)*(unint64_t *)(a1 + 304);
  *(float *)(a3 + 264) = v25;
  v26 = *(_QWORD *)(a2 + 784);
  *(float *)(a3 + 268) = (float)v26;
  if (!v26)
  {
    LODWORD(v28) = 0;
LABEL_34:
    v29 = a3 + 20 * v28 + 272;
    v30 = v28 + 1;
    do
    {
      v47 = 0;
      v46 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v46, v29);
      v29 += 20;
      v12 = (_DWORD)v30++ == 4;
    }
    while (!v12);
    goto LABEL_37;
  }
  v27 = 0;
  LODWORD(v28) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 728), v27, 0, &v48);
    DspLib::Biquad::write((uint64_t)&v48, a3 + 20 * v27 + 272);
    v28 = (v28 + 1);
    v27 = v28;
  }
  while (v26 > v28);
  if (v28 <= 3)
    goto LABEL_34;
LABEL_37:
  v31 = *(_QWORD *)(a2 + 712);
  *(float *)(a3 + 352) = (float)v31;
  if (!v31)
  {
    LODWORD(v33) = 0;
LABEL_43:
    v34 = a3 + 20 * v33 + 356;
    v35 = v33 + 1;
    do
    {
      v44 = 0;
      v43 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v43, v34);
      v34 += 20;
      v12 = (_DWORD)v35++ == 4;
    }
    while (!v12);
    goto LABEL_46;
  }
  v32 = 0;
  LODWORD(v33) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 656), v32, 0, &v45);
    DspLib::Biquad::write((uint64_t)&v45, a3 + 20 * v32 + 356);
    v33 = (v33 + 1);
    v32 = v33;
  }
  while (v31 > v33);
  if (v33 <= 3)
    goto LABEL_43;
LABEL_46:
  v36 = 0;
  v37 = a2 + 3980;
  do
  {
    v38 = (_DWORD *)(a3 + 436 + v36);
    *v38 = *(_DWORD *)(v37 + v36 - 32);
    v38[4] = *(_DWORD *)(v37 + v36 - 16);
    v38[8] = *(_DWORD *)(v37 + v36);
    v36 += 4;
  }
  while (v36 != 16);
  *(_DWORD *)(a3 + 484) = *(_DWORD *)(a2 + 3916);
  *(_DWORD *)(a3 + 488) = *(_DWORD *)(a2 + 3920);
  *(_DWORD *)(a3 + 492) = *(_DWORD *)(a2 + 3924);
  *(_DWORD *)(a3 + 496) = *(_DWORD *)(a2 + 3848);
  *(_DWORD *)(a3 + 500) = *(_DWORD *)(a2 + 3852);
  *(_DWORD *)(a3 + 504) = *(_DWORD *)(a2 + 3856);
  *(_DWORD *)(a3 + 908) = *(_DWORD *)(a2 + 3860);
  *(_DWORD *)(a3 + 912) = *(_DWORD *)(a2 + 3864);
  DspLib::LoudspeakerController::MaskingEstimator::status(a2 + 1104, (char *)(a3 + 508));
  *(_DWORD *)(a3 + 916) = *(_DWORD *)(a2 + 3904);
  *(_DWORD *)(a3 + 920) = *(_DWORD *)(a2 + 3872);
  *(_DWORD *)(a3 + 924) = *(_DWORD *)(a2 + 3908);
  *(_DWORD *)(a3 + 928) = *(_DWORD *)(a2 + 3828);
  *(_DWORD *)(a3 + 932) = *(_DWORD *)(a2 + 3836);
  *(_DWORD *)(a2 + 3836) = 1065353216;
  *(_DWORD *)(a3 + 936) = *(_DWORD *)(a2 + 3840);
  *(_DWORD *)(a3 + 940) = *(_DWORD *)(a2 + 4132);
  *(_DWORD *)(a2 + 4132) = 1065353216;
  v39 = *(__int128 **)(a2 + 2656);
  v40 = *v39;
  *(_DWORD *)(a3 + 960) = *((_DWORD *)v39 + 4);
  *(_OWORD *)(a3 + 944) = v40;
  DspLib::multiply((float *)(a3 + 944), 5uLL, *(float *)(a2 + 2928));
  DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a2 + 4008), 0, 0, &v42);
  result = DspLib::Biquad::write((uint64_t)&v42, a3 + 964);
  if (*(_QWORD *)(a2 + 4120))
  {
    result = *(float *)(a2 + 3144);
    *(float *)(a3 + 984) = result;
  }
  return result;
}

void DspLib::LoudspeakerController::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  uint64_t i;
  _DWORD *v6;
  int v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  DspLib::clear((float *)a2, __N);
  for (i = 0; i != 16; i += 4)
  {
    v6 = (_DWORD *)(a2 + 16 + i);
    *(v6 - 4) = *(_DWORD *)(a1 + i + 428);
    *v6 = *(_DWORD *)(a1 + i + 568);
    v6[4] = *(_DWORD *)(a1 + i + 444);
  }
  v7 = *(unsigned __int8 *)(a1 + 408);
  v8 = 0.0;
  if (*(_BYTE *)(a1 + 408))
    v8 = 1.0;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 460);
  *(float *)(a2 + 52) = v8;
  if (v7)
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 392);
  else
    DspLib::clear((float *)(a2 + 56), 4uLL);
  if (*(_DWORD *)(a1 + 12))
  {
    v9 = 0;
    v10 = 0;
    v11 = a2 + 72;
    do
    {
      DspLib::LoudspeakerController::Algorithm::channelStatus(a1, *(_QWORD *)(a1 + 544) + v9, v11);
      ++v10;
      v11 += 988;
      v9 += 4144;
    }
    while (v10 < *(unsigned int *)(a1 + 12));
  }
}

double DspLib::LoudspeakerController::Algorithm::resetNVM(DspLib::LoudspeakerController::Algorithm *this)
{
  double result;

  result = 0.0;
  xmmword_1EF137710 = 0u;
  unk_1EF137720 = 0u;
  xmmword_1EF1376F0 = 0u;
  unk_1EF137700 = 0u;
  xmmword_1EF1376D0 = 0u;
  unk_1EF1376E0 = 0u;
  xmmword_1EF1376B0 = 0u;
  unk_1EF1376C0 = 0u;
  xmmword_1EF137690 = 0u;
  unk_1EF1376A0 = 0u;
  xmmword_1EF137670 = 0u;
  unk_1EF137680 = 0u;
  xmmword_1EF137650 = 0u;
  unk_1EF137660 = 0u;
  DspLib::LoudspeakerController::gThermalRecord = 0u;
  unk_1EF137640 = 0u;
  return result;
}

void DspLib::LoudspeakerController::Algorithm::~Algorithm(DspLib::LoudspeakerController::Algorithm *this)
{
  DspLib::LoudspeakerController::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69C3D78;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 592);
  v5 = (void **)((char *)this + 544);
  std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 60);
  if (v2)
  {
    *((_QWORD *)this + 61) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E69C47E8;
  v3 = (void *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 35) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

double DspLib::LoudspeakerController::Algorithm::latencySamples(DspLib::LoudspeakerController::Algorithm *this)
{
  return (double)*((unint64_t *)this + 40);
}

uint64_t DspLib::LoudspeakerController::Algorithm::tailTimeSamples(DspLib::LoudspeakerController::Algorithm *this)
{
  return (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *))(*(_QWORD *)this + 80))(this);
}

uint64_t DspLib::LoudspeakerController::Algorithm::numStatus(DspLib::LoudspeakerController::Algorithm *this)
{
  return 1994;
}

void std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(v4 - 4144));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule(DspLib::LoudspeakerController::Algorithm::ChannelModule *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t j;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void **v27;

  v2 = *((_QWORD *)this + 515);
  *((_QWORD *)this + 515) = 0;
  if (v2)
    std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100]((uint64_t)this + 4120, v2);
  v3 = (void *)*((_QWORD *)this + 511);
  if (v3)
  {
    *((_QWORD *)this + 512) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 4056));
  v4 = (void *)*((_QWORD *)this + 504);
  if (v4)
  {
    *((_QWORD *)this + 505) = v4;
    operator delete(v4);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 3104));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 3064));
  v5 = (void *)*((_QWORD *)this + 380);
  if (v5)
  {
    *((_QWORD *)this + 381) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 2992));
  v6 = (void *)*((_QWORD *)this + 371);
  if (v6)
  {
    *((_QWORD *)this + 372) = v6;
    operator delete(v6);
  }
  DspLib::GainSmoother::~GainSmoother((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 2680));
  DspLib::BandCombiner::~BandCombiner((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 2408));
  for (i = 0; i != -120; i -= 24)
  {
    v8 = *(void **)((char *)this + i + 2296);
    if (v8)
    {
      *(_QWORD *)((char *)this + i + 2304) = v8;
      operator delete(v8);
    }
  }
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)this + 274, 0);
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 273, 0);
  v9 = (void *)*((_QWORD *)this + 269);
  if (v9)
  {
    *((_QWORD *)this + 270) = v9;
    operator delete(v9);
  }
  v27 = (void **)((char *)this + 2128);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v27);
  v10 = (void *)*((_QWORD *)this + 263);
  if (v10)
  {
    *((_QWORD *)this + 264) = v10;
    operator delete(v10);
  }
  for (j = 0; j != -192; j -= 48)
  {
    v12 = *(void **)((char *)this + j + 2056);
    if (v12)
    {
      *(_QWORD *)((char *)this + j + 2064) = v12;
      operator delete(v12);
    }
  }
  v13 = (void *)*((_QWORD *)this + 233);
  if (v13)
  {
    *((_QWORD *)this + 234) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 227);
  if (v14)
  {
    *((_QWORD *)this + 228) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 221);
  if (v15)
  {
    *((_QWORD *)this + 222) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 202);
  if (v16)
  {
    *((_QWORD *)this + 203) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 199);
  if (v17)
  {
    *((_QWORD *)this + 200) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 196);
  if (v18)
  {
    *((_QWORD *)this + 197) = v18;
    operator delete(v18);
  }
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 144, 0);
  v19 = (void *)*((_QWORD *)this + 140);
  if (v19)
  {
    *((_QWORD *)this + 141) = v19;
    operator delete(v19);
  }
  v27 = (void **)((char *)this + 1080);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v27);
  v20 = (void *)*((_QWORD *)this + 132);
  if (v20)
  {
    *((_QWORD *)this + 133) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 129);
  if (v21)
  {
    *((_QWORD *)this + 130) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 126);
  if (v22)
  {
    *((_QWORD *)this + 127) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 123);
  if (v23)
  {
    *((_QWORD *)this + 124) = v23;
    operator delete(v23);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 208));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 168));
  v24 = (void *)*((_QWORD *)this + 18);
  if (v24)
  {
    *((_QWORD *)this + 19) = v24;
    operator delete(v24);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::Algorithm::ChannelModule *)((char *)this + 96));
  v25 = (void *)*((_QWORD *)this + 9);
  if (v25)
  {
    *((_QWORD *)this + 10) = v25;
    operator delete(v25);
  }
  v26 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v26;
    operator delete(v26);
  }
}

void DspLib::LoudspeakerController::ElectricalModel::~ElectricalModel(DspLib::LoudspeakerController::ElectricalModel *this)
{
  void *v2;
  void *v3;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::ElectricalModel *)((char *)this + 128));
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::ElectricalModel *)((char *)this + 56));
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
}

void DspLib::LinearPhaseFilterbank::~LinearPhaseFilterbank(DspLib::LinearPhaseFilterbank *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)this + 14, 0);
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 13, 0);
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 48);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
}

void DspLib::LoudspeakerController::MaskingEstimator::~MaskingEstimator(DspLib::LoudspeakerController::MaskingEstimator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 64);
  if (v2)
  {
    *((_QWORD *)this + 65) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 61);
  if (v3)
  {
    *((_QWORD *)this + 62) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 58);
  if (v4)
  {
    *((_QWORD *)this + 59) = v4;
    operator delete(v4);
  }
  std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)this + 6, 0);
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel(DspLib::LoudspeakerController::SpeakerSystemModel *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 80);
  if (v3)
  {
    *((_QWORD *)this + 81) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 568));
  v4 = (void *)*((_QWORD *)this + 68);
  if (v4)
  {
    *((_QWORD *)this + 69) = v4;
    operator delete(v4);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 496));
  v5 = (void *)*((_QWORD *)this + 59);
  if (v5)
  {
    *((_QWORD *)this + 60) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 416));
  v6 = (void *)*((_QWORD *)this + 49);
  if (v6)
  {
    *((_QWORD *)this + 50) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 344));
  v7 = (void *)*((_QWORD *)this + 40);
  if (v7)
  {
    *((_QWORD *)this + 41) = v7;
    operator delete(v7);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 264));
  v8 = (void *)*((_QWORD *)this + 30);
  if (v8)
  {
    *((_QWORD *)this + 31) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 192));
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 22) = v9;
    operator delete(v9);
  }
}

void DspLib::GainSmoother::~GainSmoother(DspLib::GainSmoother *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 6) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 3) = v8;
    operator delete(v8);
  }
}

void DspLib::BandCombiner::~BandCombiner(DspLib::BandCombiner *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v10 = (void **)((char *)this + 168);
  std::vector<DspLib::BandCombiner::GainState>::__destroy_vector::operator()[abi:ne180100](&v10);
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
}

void std::vector<DspLib::BandCombiner::GainState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::BandCombiner::GainState>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<DspLib::BandCombiner::GainState>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::vector<DspLib::LoudspeakerController::Algorithm::SpeakerInfo>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if (0x2F71AAFF02F71ABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = &v7[4144 * a2];
      v14 = 4144 * a2;
      do
      {
        bzero(v7, 0x1030uLL);
        result = DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule((uint64_t)v7);
        v7 += 4144;
        v14 -= 4144;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x2F71AAFF02F71ABLL * ((uint64_t)&v7[-*a1] >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0xFD08E5500FD08)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x2F71AAFF02F71ABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x7E8472A807E84)
      v11 = 0xFD08E5500FD08;
    else
      v11 = v9;
    v18[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>>(result, v11);
    else
      v12 = 0;
    v15 = &v12[4144 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[4144 * v11];
    v16 = 4144 * a2;
    v17 = &v15[4144 * a2];
    do
    {
      bzero(v15, 0x1030uLL);
      DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule((uint64_t)v15);
      v15 += 4144;
      v16 -= 4144;
    }
    while (v16);
    v18[2] = v17;
    std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<DspLib::LoudspeakerController::Algorithm::ChannelModule>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1B60C0C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::LoudspeakerController::Algorithm::ChannelModule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LoudspeakerController::Algorithm::ChannelModule>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule(uint64_t this)
{
  uint64_t v1;
  uint64_t v8;

  v1 = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)this = 0u;
  *(_QWORD *)(this + 32) = 1065353216;
  *(_DWORD *)(this + 40) = 1091567616;
  *(_BYTE *)(this + 48) = 0;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_BYTE *)(this + 120) = 0;
  *(_OWORD *)(this + 128) = 0u;
  *(_OWORD *)(this + 144) = 0u;
  *(_OWORD *)(this + 160) = 0u;
  *(_OWORD *)(this + 176) = 0u;
  *(_QWORD *)(this + 192) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_DWORD *)(this + 212) = 0;
  *(_DWORD *)(this + 208) = 0;
  __asm { FMOV            V2.4S, #1.0 }
  *(_OWORD *)(this + 224) = _Q2;
  *(_OWORD *)(this + 240) = xmmword_1B6627BD0;
  *(_QWORD *)(this + 256) = 0x3F80000000000000;
  *(_BYTE *)(this + 264) = 0;
  *(_QWORD *)(this + 268) = 0;
  *(_QWORD *)(this + 276) = 0x3F80000000000000;
  *(_BYTE *)(this + 284) = 0;
  *(_QWORD *)(this + 288) = 0;
  *(_QWORD *)(this + 296) = 0x3F80000000000000;
  *(_BYTE *)(this + 304) = 0;
  *(_BYTE *)(this + 424) = 0;
  *(_OWORD *)(this + 408) = 0u;
  *(_OWORD *)(this + 392) = 0u;
  *(_OWORD *)(this + 376) = 0u;
  *(_OWORD *)(this + 360) = 0u;
  *(_OWORD *)(this + 512) = 0u;
  *(_OWORD *)(this + 528) = 0u;
  *(_OWORD *)(this + 544) = 0u;
  *(_OWORD *)(this + 560) = 0u;
  *(_BYTE *)(this + 576) = 0;
  *(_OWORD *)(this + 664) = 0u;
  *(_OWORD *)(this + 680) = 0u;
  *(_OWORD *)(this + 696) = 0u;
  *(_OWORD *)(this + 712) = 0u;
  *(_BYTE *)(this + 728) = 0;
  *(_OWORD *)(this + 736) = 0u;
  *(_OWORD *)(this + 752) = 0u;
  *(_OWORD *)(this + 768) = 0u;
  *(_OWORD *)(this + 784) = 0u;
  *(_QWORD *)(this + 800) = 0;
  *(_OWORD *)(this + 337) = 0u;
  *(_OWORD *)(this + 324) = 0u;
  *(_OWORD *)(this + 308) = 0u;
  *(_OWORD *)(this + 489) = 0u;
  *(_OWORD *)(this + 464) = 0u;
  *(_OWORD *)(this + 480) = 0u;
  *(_OWORD *)(this + 432) = 0u;
  *(_OWORD *)(this + 448) = 0u;
  *(_OWORD *)(this + 641) = 0u;
  *(_OWORD *)(this + 616) = 0u;
  *(_OWORD *)(this + 632) = 0u;
  *(_OWORD *)(this + 584) = 0u;
  *(_OWORD *)(this + 600) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(this + 808) = _D0;
  *(_QWORD *)(this + 816) = _D0;
  *(_QWORD *)(this + 824) = 0;
  *(_QWORD *)(this + 832) = 1;
  *(_DWORD *)(this + 840) = 1065353216;
  *(_OWORD *)(this + 848) = 0u;
  *(_OWORD *)(this + 864) = 0u;
  *(_QWORD *)(this + 880) = 1;
  *(_DWORD *)(this + 888) = 1065353216;
  *(_OWORD *)(this + 1632) = 0u;
  *(_OWORD *)(this + 1616) = 0u;
  *(_OWORD *)(this + 1600) = 0u;
  *(_OWORD *)(this + 1584) = 0u;
  *(_OWORD *)(this + 1568) = 0u;
  *(_DWORD *)(this + 976) = 0;
  *(_OWORD *)(this + 944) = 0u;
  *(_OWORD *)(this + 960) = 0u;
  *(_OWORD *)(this + 912) = 0u;
  *(_OWORD *)(this + 928) = 0u;
  *(_OWORD *)(this + 896) = 0u;
  *(_QWORD *)(this + 1160) = 0;
  *(_OWORD *)(this + 1128) = 0u;
  *(_OWORD *)(this + 1144) = 0u;
  *(_OWORD *)(this + 1096) = 0u;
  *(_OWORD *)(this + 1112) = 0u;
  *(_OWORD *)(this + 1064) = 0u;
  *(_OWORD *)(this + 1080) = 0u;
  *(_OWORD *)(this + 1032) = 0u;
  *(_OWORD *)(this + 1048) = 0u;
  *(_OWORD *)(this + 1000) = 0u;
  *(_OWORD *)(this + 1016) = 0u;
  *(_OWORD *)(this + 984) = 0u;
  *(_DWORD *)(this + 1648) = 1065353216;
  *(_OWORD *)(this + 1656) = 0u;
  *(_DWORD *)(this + 1680) = 0;
  *(_QWORD *)(this + 1672) = 0;
  *(_QWORD *)(this + 1688) = 1;
  *(_OWORD *)(this + 1696) = xmmword_1B6629CC0;
  *(_QWORD *)(this + 1712) = _D0;
  *(_DWORD *)(this + 1720) = 1065353216;
  *(_OWORD *)(this + 1724) = 0u;
  *(_OWORD *)(this + 1744) = 0u;
  *(_BYTE *)(this + 1760) = 1;
  *(_QWORD *)(this + 1800) = 0;
  *(_OWORD *)(this + 1784) = 0u;
  *(_OWORD *)(this + 1768) = 0u;
  *(_BYTE *)(this + 1808) = 1;
  *(_QWORD *)(this + 1848) = 0;
  *(_OWORD *)(this + 1832) = 0u;
  *(_OWORD *)(this + 1816) = 0u;
  *(_BYTE *)(this + 1856) = 1;
  *(_QWORD *)(this + 1872) = 0;
  *(_QWORD *)(this + 1864) = 0;
  *(_QWORD *)(this + 1880) = 0;
  do
  {
    v8 = this + v1;
    *(_OWORD *)(v8 + 1888) = 0uLL;
    *(_BYTE *)(v8 + 1904) = 1;
    *(_QWORD *)(v8 + 1912) = 0;
    *(_OWORD *)(v8 + 1920) = 0uLL;
    v1 += 48;
  }
  while (v1 != 192);
  *(_QWORD *)(this + 2624) = 0;
  *(_QWORD *)(this + 2616) = 0;
  *(_QWORD *)(this + 2632) = 0;
  *(_OWORD *)(this + 2408) = 0u;
  *(_OWORD *)(this + 2432) = 0u;
  *(_OWORD *)(this + 2448) = 0u;
  *(_OWORD *)(this + 2464) = 0u;
  *(_OWORD *)(this + 2480) = 0u;
  *(_OWORD *)(this + 2496) = 0u;
  *(_OWORD *)(this + 2512) = 0u;
  *(_OWORD *)(this + 2528) = 0u;
  *(_OWORD *)(this + 2544) = 0u;
  *(_OWORD *)(this + 2560) = 0u;
  *(_OWORD *)(this + 2576) = 0u;
  *(_QWORD *)(this + 2592) = 0;
  *(_QWORD *)(this + 2848) = 0;
  *(_QWORD *)(this + 2832) = 0;
  *(_QWORD *)(this + 2840) = 0;
  *(_QWORD *)(this + 2896) = 0;
  *(_QWORD *)(this + 2888) = 0;
  *(_QWORD *)(this + 2904) = 0;
  *(_OWORD *)(this + 2696) = 0u;
  *(_OWORD *)(this + 2712) = 0u;
  *(_OWORD *)(this + 2728) = 0u;
  *(_OWORD *)(this + 2744) = 0u;
  *(_OWORD *)(this + 2760) = 0u;
  *(_OWORD *)(this + 2776) = 0u;
  *(_OWORD *)(this + 2792) = 0u;
  *(_QWORD *)(this + 2808) = 0;
  *(_OWORD *)(this + 2080) = 0u;
  *(_OWORD *)(this + 2096) = 0u;
  *(_OWORD *)(this + 2112) = 0u;
  *(_OWORD *)(this + 2128) = 0u;
  *(_OWORD *)(this + 2144) = 0u;
  *(_OWORD *)(this + 2160) = 0u;
  *(_OWORD *)(this + 2176) = 0u;
  *(_OWORD *)(this + 2192) = 0u;
  *(_OWORD *)(this + 2208) = 0u;
  *(_OWORD *)(this + 2224) = 0u;
  *(_OWORD *)(this + 2240) = 0u;
  *(_OWORD *)(this + 2256) = 0u;
  *(_OWORD *)(this + 2272) = 0u;
  *(_OWORD *)(this + 2288) = 0u;
  *(_OWORD *)(this + 2304) = 0u;
  *(_OWORD *)(this + 2672) = 0u;
  *(_OWORD *)(this + 2656) = 0u;
  *(_DWORD *)(this + 2936) = 1091567616;
  *(_BYTE *)(this + 2944) = 0;
  *(_BYTE *)(this + 3016) = 0;
  *(_OWORD *)(this + 2952) = 0u;
  *(_OWORD *)(this + 2968) = 0u;
  *(_OWORD *)(this + 2984) = 0u;
  *(_OWORD *)(this + 3000) = 0u;
  *(_QWORD *)(this + 3088) = 0;
  *(_OWORD *)(this + 3072) = 0u;
  *(_OWORD *)(this + 3056) = 0u;
  *(_OWORD *)(this + 3040) = 0u;
  *(_OWORD *)(this + 3024) = 0u;
  *(_OWORD *)(this + 3104) = 0u;
  *(_OWORD *)(this + 3120) = _Q2;
  *(_OWORD *)(this + 3136) = xmmword_1B6627BD0;
  *(_QWORD *)(this + 3152) = 0x3F80000000000000;
  *(_BYTE *)(this + 3160) = 0;
  *(_QWORD *)(this + 3164) = 0;
  *(_QWORD *)(this + 3172) = 0x3F80000000000000;
  *(_BYTE *)(this + 3180) = 0;
  *(_QWORD *)(this + 3184) = 0;
  *(_QWORD *)(this + 3192) = 0x3F80000000000000;
  *(_BYTE *)(this + 3200) = 0;
  *(_BYTE *)(this + 3320) = 0;
  *(_OWORD *)(this + 3304) = 0u;
  *(_OWORD *)(this + 3288) = 0u;
  *(_OWORD *)(this + 3272) = 0u;
  *(_OWORD *)(this + 3256) = 0u;
  *(_BYTE *)(this + 3472) = 0;
  *(_OWORD *)(this + 3456) = 0u;
  *(_OWORD *)(this + 3440) = 0u;
  *(_OWORD *)(this + 3424) = 0u;
  *(_OWORD *)(this + 3408) = 0u;
  *(_BYTE *)(this + 3624) = 0;
  *(_OWORD *)(this + 3608) = 0u;
  *(_OWORD *)(this + 3592) = 0u;
  *(_OWORD *)(this + 3576) = 0u;
  *(_OWORD *)(this + 3560) = 0u;
  *(_QWORD *)(this + 3696) = 0;
  *(_OWORD *)(this + 3680) = 0u;
  *(_OWORD *)(this + 3664) = 0u;
  *(_OWORD *)(this + 3648) = 0u;
  *(_OWORD *)(this + 3632) = 0u;
  *(_OWORD *)(this + 3233) = 0u;
  *(_OWORD *)(this + 3220) = 0u;
  *(_OWORD *)(this + 3204) = 0u;
  *(_OWORD *)(this + 3385) = 0u;
  *(_OWORD *)(this + 3376) = 0u;
  *(_OWORD *)(this + 3360) = 0u;
  *(_OWORD *)(this + 3344) = 0u;
  *(_OWORD *)(this + 3328) = 0u;
  *(_OWORD *)(this + 3537) = 0u;
  *(_OWORD *)(this + 3512) = 0u;
  *(_OWORD *)(this + 3528) = 0u;
  *(_OWORD *)(this + 3480) = 0u;
  *(_OWORD *)(this + 3496) = 0u;
  *(_QWORD *)(this + 3704) = _D0;
  *(_QWORD *)(this + 3712) = _D0;
  *(_QWORD *)(this + 3720) = 0;
  *(_QWORD *)(this + 3728) = 1;
  *(_DWORD *)(this + 3736) = 1065353216;
  *(_OWORD *)(this + 3760) = 0u;
  *(_OWORD *)(this + 3744) = 0u;
  *(_QWORD *)(this + 3776) = 1;
  *(_DWORD *)(this + 3784) = 1065353216;
  *(_OWORD *)(this + 3808) = 0u;
  *(_OWORD *)(this + 3792) = 0u;
  *(_DWORD *)(this + 3924) = 0;
  *(_BYTE *)(this + 4008) = 0;
  *(_OWORD *)(this + 4112) = 0u;
  *(_OWORD *)(this + 4096) = 0u;
  *(_OWORD *)(this + 4080) = 0u;
  *(_OWORD *)(this + 4064) = 0u;
  *(_OWORD *)(this + 4048) = 0u;
  *(_OWORD *)(this + 4032) = 0u;
  *(_OWORD *)(this + 4016) = 0u;
  *(_QWORD *)(this + 4128) = _D0;
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xFD08E5500FD09)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LoudspeakerController::Algorithm::ChannelModule>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>,std::reverse_iterator<DspLib::LoudspeakerController::Algorithm::ChannelModule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a7 - 4144;
  v11 = 4144;
  v12 = a7;
  while (a3 != a5)
  {
    a3 -= 4144;
    v11 -= 4144;
    v12 -= 4144;
    v13 = v10 - 4144;
    DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule(v10, a3);
    v10 = v13;
  }
  return a6;
}

void sub_1B60C11A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 4144)
    DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerController::Algorithm::ChannelModule::ChannelModule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v4 = a1 + 40;
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 48, a2 + 48);
  DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(a1 + 208, a2 + 208);
  v5 = *(_OWORD *)(a2 + 928);
  v6 = *(_OWORD *)(a2 + 944);
  v7 = *(_OWORD *)(a2 + 960);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 944) = v6;
  *(_OWORD *)(a1 + 960) = v7;
  *(_OWORD *)(a1 + 928) = v5;
  *(_QWORD *)(v4 + 944) = 0;
  *(_OWORD *)(v4 + 952) = 0u;
  *(_OWORD *)(v4 + 944) = *(_OWORD *)(a2 + 984);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a2 + 1000) = 0;
  *(_OWORD *)(a2 + 984) = 0u;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a2 + 1024) = 0;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(v4 + 992) = 0u;
  *(_QWORD *)(v4 + 1008) = 0;
  *(_OWORD *)(v4 + 992) = *(_OWORD *)(a2 + 1032);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a2 + 1048) = 0;
  *(_OWORD *)(a2 + 1032) = 0u;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = 0;
  *(_OWORD *)(a2 + 1056) = 0u;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a2 + 1096) = 0;
  *(_OWORD *)(a2 + 1080) = 0u;
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a2 + 1136) = 0;
  *(_OWORD *)(a2 + 1120) = 0u;
  *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
  v8 = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a2 + 1152) = 0;
  *(_QWORD *)(a1 + 1152) = v8;
  memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x198uLL);
  v9 = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1568) = *(_OWORD *)(a2 + 1568);
  *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a2 + 1584);
  *(_OWORD *)(a2 + 1568) = 0u;
  *(_QWORD *)(a2 + 1584) = 0;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(a2 + 1608);
  *(_OWORD *)(a2 + 1592) = 0u;
  *(_QWORD *)(a2 + 1608) = 0;
  *(_QWORD *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1616) = *(_OWORD *)(a2 + 1616);
  *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a2 + 1632);
  *(_QWORD *)(a2 + 1632) = 0;
  *(_OWORD *)(a2 + 1616) = 0u;
  v11 = *(_OWORD *)(a2 + 1656);
  v10 = *(_OWORD *)(a2 + 1672);
  *(_OWORD *)(a1 + 1640) = *(_OWORD *)(a2 + 1640);
  *(_OWORD *)(a1 + 1656) = v11;
  *(_OWORD *)(a1 + 1672) = v10;
  v13 = *(_OWORD *)(a2 + 1688);
  v12 = *(_OWORD *)(a2 + 1704);
  v14 = *(_OWORD *)(a2 + 1720);
  *(_DWORD *)(a1 + 1736) = *(_DWORD *)(a2 + 1736);
  *(_OWORD *)(a1 + 1704) = v12;
  *(_OWORD *)(a1 + 1720) = v14;
  *(_OWORD *)(a1 + 1688) = v13;
  v15 = *(_OWORD *)(a2 + 1744);
  *(_BYTE *)(a1 + 1760) = *(_BYTE *)(a2 + 1760);
  *(_OWORD *)(a1 + 1744) = v15;
  *(_QWORD *)(v4 + 1736) = 0;
  *(_QWORD *)(v4 + 1744) = 0;
  *(_QWORD *)(v4 + 1728) = 0;
  *(_OWORD *)(v4 + 1728) = *(_OWORD *)(a2 + 1768);
  *(_QWORD *)(a1 + 1784) = *(_QWORD *)(a2 + 1784);
  *(_QWORD *)(a2 + 1768) = 0;
  *(_QWORD *)(a2 + 1776) = 0;
  *(_QWORD *)(a2 + 1784) = 0;
  v16 = *(_BYTE *)(a2 + 1808);
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(_BYTE *)(a1 + 1808) = v16;
  *(_QWORD *)(v4 + 1776) = 0;
  *(_QWORD *)(v4 + 1784) = 0;
  *(_QWORD *)(v4 + 1792) = 0;
  *(_OWORD *)(v4 + 1776) = *(_OWORD *)(a2 + 1816);
  *(_QWORD *)(a1 + 1832) = *(_QWORD *)(a2 + 1832);
  *(_QWORD *)(a2 + 1816) = 0;
  *(_QWORD *)(a2 + 1824) = 0;
  *(_QWORD *)(a2 + 1832) = 0;
  v17 = *(_OWORD *)(a2 + 1840);
  *(_BYTE *)(a1 + 1856) = *(_BYTE *)(a2 + 1856);
  *(_OWORD *)(a1 + 1840) = v17;
  *(_QWORD *)(v4 + 1824) = 0;
  *(_QWORD *)(v4 + 1832) = 0;
  *(_QWORD *)(v4 + 1840) = 0;
  *(_OWORD *)(v4 + 1824) = *(_OWORD *)(a2 + 1864);
  *(_QWORD *)(a1 + 1880) = *(_QWORD *)(a2 + 1880);
  *(_QWORD *)(a2 + 1864) = 0;
  *(_QWORD *)(a2 + 1872) = 0;
  *(_QWORD *)(a2 + 1880) = 0;
  do
  {
    v18 = a1 + v9;
    v19 = *(_OWORD *)(a2 + v9 + 1888);
    *(_BYTE *)(v18 + 1904) = *(_BYTE *)(a2 + v9 + 1904);
    *(_OWORD *)(v18 + 1888) = v19;
    v20 = (_OWORD *)(a2 + v9 + 1912);
    *(_QWORD *)(v18 + 1912) = 0;
    *(_OWORD *)(v18 + 1920) = 0uLL;
    *(_OWORD *)(a1 + v9 + 1912) = *v20;
    *(_QWORD *)(v18 + 1928) = *(_QWORD *)(a2 + v9 + 1928);
    *(_QWORD *)(a2 + v9 + 1928) = 0;
    *v20 = 0uLL;
    v9 += 48;
  }
  while (v9 != 192);
  v21 = 0;
  v22 = *(_OWORD *)(a2 + 2080);
  *(_QWORD *)(a1 + 2096) = *(_QWORD *)(a2 + 2096);
  *(_OWORD *)(a1 + 2080) = v22;
  *(_QWORD *)(a1 + 2104) = 0;
  *(_QWORD *)(a1 + 2120) = 0;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a2 + 2104);
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)(a2 + 2112);
  *(_QWORD *)(a1 + 2120) = *(_QWORD *)(a2 + 2120);
  *(_QWORD *)(a2 + 2112) = 0;
  *(_QWORD *)(a2 + 2104) = 0;
  *(_QWORD *)(a2 + 2120) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_OWORD *)(a1 + 2128) = *(_OWORD *)(a2 + 2128);
  *(_QWORD *)(a1 + 2144) = *(_QWORD *)(a2 + 2144);
  *(_QWORD *)(a2 + 2136) = 0;
  *(_QWORD *)(a2 + 2128) = 0;
  *(_QWORD *)(a2 + 2144) = 0;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_QWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2168) = 0;
  *(_QWORD *)(a1 + 2152) = *(_QWORD *)(a2 + 2152);
  *(_QWORD *)(a1 + 2160) = *(_QWORD *)(a2 + 2160);
  *(_QWORD *)(a1 + 2168) = *(_QWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2160) = 0;
  *(_QWORD *)(a2 + 2152) = 0;
  *(_QWORD *)(a2 + 2168) = 0;
  *(_QWORD *)(a1 + 2176) = *(_QWORD *)(a2 + 2176);
  v23 = *(_QWORD *)(a2 + 2184);
  *(_QWORD *)(a2 + 2184) = 0;
  *(_QWORD *)(a1 + 2184) = v23;
  v24 = *(_QWORD *)(a2 + 2192);
  *(_QWORD *)(a2 + 2192) = 0;
  *(_QWORD *)(a1 + 2192) = v24;
  do
  {
    v25 = a1 + v21;
    v26 = (_OWORD *)(a1 + v21 + 2200);
    v27 = (_OWORD *)(a2 + v21 + 2200);
    *(_QWORD *)(v25 + 2216) = 0;
    *v26 = 0uLL;
    *v26 = *v27;
    *(_QWORD *)(v25 + 2216) = *(_QWORD *)(a2 + v21 + 2216);
    *(_QWORD *)(a2 + v21 + 2216) = 0;
    *v27 = 0uLL;
    v21 += 24;
  }
  while (v21 != 120);
  v28 = *(_OWORD *)(a2 + 2320);
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a2 + 2336);
  *(_OWORD *)(a1 + 2320) = v28;
  v29 = *(_OWORD *)(a2 + 2352);
  v30 = *(_OWORD *)(a2 + 2368);
  v31 = *(_OWORD *)(a2 + 2384);
  *(_QWORD *)(a1 + 2400) = *(_QWORD *)(a2 + 2400);
  *(_OWORD *)(a1 + 2384) = v31;
  *(_OWORD *)(a1 + 2368) = v30;
  *(_OWORD *)(a1 + 2352) = v29;
  v32 = *(_OWORD *)(a2 + 2408);
  *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a2 + 2424);
  *(_OWORD *)(a1 + 2408) = v32;
  *(_QWORD *)(a1 + 2432) = 0;
  *(_QWORD *)(a1 + 2448) = 0;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a2 + 2432);
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a2 + 2448);
  *(_QWORD *)(a2 + 2440) = 0;
  *(_QWORD *)(a2 + 2432) = 0;
  *(_QWORD *)(a2 + 2448) = 0;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_QWORD *)(a1 + 2456) = 0;
  *(_QWORD *)(a1 + 2472) = 0;
  *(_QWORD *)(a1 + 2456) = *(_QWORD *)(a2 + 2456);
  *(_QWORD *)(a1 + 2464) = *(_QWORD *)(a2 + 2464);
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a2 + 2472);
  *(_QWORD *)(a2 + 2464) = 0;
  *(_QWORD *)(a2 + 2456) = 0;
  *(_QWORD *)(a2 + 2472) = 0;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2480) = 0;
  *(_QWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2480) = *(_OWORD *)(a2 + 2480);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a2 + 2496);
  *(_QWORD *)(a2 + 2488) = 0;
  *(_QWORD *)(a2 + 2480) = 0;
  *(_QWORD *)(a2 + 2496) = 0;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_QWORD *)(a1 + 2504) = 0;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_QWORD *)(a1 + 2504) = *(_QWORD *)(a2 + 2504);
  *(_QWORD *)(a1 + 2512) = *(_QWORD *)(a2 + 2512);
  *(_QWORD *)(a1 + 2520) = *(_QWORD *)(a2 + 2520);
  *(_QWORD *)(a2 + 2512) = 0;
  *(_QWORD *)(a2 + 2504) = 0;
  *(_QWORD *)(a2 + 2520) = 0;
  *(_QWORD *)(a1 + 2536) = 0;
  *(_QWORD *)(a1 + 2528) = 0;
  *(_QWORD *)(a1 + 2544) = 0;
  *(_OWORD *)(a1 + 2528) = *(_OWORD *)(a2 + 2528);
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a2 + 2544);
  *(_QWORD *)(a2 + 2536) = 0;
  *(_QWORD *)(a2 + 2528) = 0;
  *(_QWORD *)(a2 + 2544) = 0;
  *(_QWORD *)(a1 + 2560) = 0;
  *(_QWORD *)(a1 + 2552) = 0;
  *(_QWORD *)(a1 + 2568) = 0;
  *(_QWORD *)(a1 + 2552) = *(_QWORD *)(a2 + 2552);
  *(_QWORD *)(a1 + 2560) = *(_QWORD *)(a2 + 2560);
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a2 + 2568);
  *(_QWORD *)(a2 + 2560) = 0;
  *(_QWORD *)(a2 + 2552) = 0;
  *(_QWORD *)(a2 + 2568) = 0;
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_OWORD *)(a1 + 2576) = *(_OWORD *)(a2 + 2576);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a2 + 2592);
  *(_QWORD *)(a2 + 2592) = 0;
  *(_QWORD *)(a2 + 2584) = 0;
  *(_QWORD *)(a2 + 2576) = 0;
  *(_OWORD *)(a1 + 2600) = *(_OWORD *)(a2 + 2600);
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a2 + 2616);
  *(_QWORD *)(a1 + 2624) = *(_QWORD *)(a2 + 2624);
  *(_QWORD *)(a1 + 2632) = *(_QWORD *)(a2 + 2632);
  *(_QWORD *)(a2 + 2632) = 0;
  *(_QWORD *)(a2 + 2624) = 0;
  *(_QWORD *)(a2 + 2616) = 0;
  *(_OWORD *)(a1 + 2640) = *(_OWORD *)(a2 + 2640);
  *(_QWORD *)(a1 + 2664) = 0;
  *(_QWORD *)(a1 + 2672) = 0;
  *(_QWORD *)(a1 + 2656) = 0;
  *(_OWORD *)(a1 + 2656) = *(_OWORD *)(a2 + 2656);
  *(_QWORD *)(a1 + 2672) = *(_QWORD *)(a2 + 2672);
  *(_QWORD *)(a2 + 2672) = 0;
  *(_QWORD *)(a2 + 2664) = 0;
  *(_QWORD *)(a2 + 2656) = 0;
  *(_OWORD *)(a1 + 2680) = *(_OWORD *)(a2 + 2680);
  *(_QWORD *)(a1 + 2704) = 0;
  *(_QWORD *)(a1 + 2712) = 0;
  *(_QWORD *)(a1 + 2696) = 0;
  *(_QWORD *)(a1 + 2696) = *(_QWORD *)(a2 + 2696);
  *(_QWORD *)(a1 + 2704) = *(_QWORD *)(a2 + 2704);
  *(_QWORD *)(a1 + 2712) = *(_QWORD *)(a2 + 2712);
  *(_QWORD *)(a2 + 2704) = 0;
  *(_QWORD *)(a2 + 2696) = 0;
  *(_QWORD *)(a2 + 2712) = 0;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_QWORD *)(a1 + 2720) = 0;
  *(_QWORD *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2720) = *(_OWORD *)(a2 + 2720);
  *(_QWORD *)(a1 + 2736) = *(_QWORD *)(a2 + 2736);
  *(_QWORD *)(a2 + 2728) = 0;
  *(_QWORD *)(a2 + 2720) = 0;
  *(_QWORD *)(a2 + 2736) = 0;
  *(_QWORD *)(a1 + 2752) = 0;
  *(_QWORD *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 2760) = 0;
  *(_QWORD *)(a1 + 2744) = *(_QWORD *)(a2 + 2744);
  *(_QWORD *)(a1 + 2752) = *(_QWORD *)(a2 + 2752);
  *(_QWORD *)(a1 + 2760) = *(_QWORD *)(a2 + 2760);
  *(_QWORD *)(a2 + 2752) = 0;
  *(_QWORD *)(a2 + 2744) = 0;
  *(_QWORD *)(a2 + 2760) = 0;
  *(_QWORD *)(a1 + 2776) = 0;
  *(_QWORD *)(a1 + 2768) = 0;
  *(_QWORD *)(a1 + 2784) = 0;
  *(_OWORD *)(a1 + 2768) = *(_OWORD *)(a2 + 2768);
  *(_QWORD *)(a1 + 2784) = *(_QWORD *)(a2 + 2784);
  *(_QWORD *)(a2 + 2776) = 0;
  *(_QWORD *)(a2 + 2768) = 0;
  *(_QWORD *)(a2 + 2784) = 0;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_QWORD *)(a1 + 2792) = 0;
  *(_QWORD *)(a1 + 2808) = 0;
  *(_QWORD *)(a1 + 2792) = *(_QWORD *)(a2 + 2792);
  *(_QWORD *)(a1 + 2800) = *(_QWORD *)(a2 + 2800);
  *(_QWORD *)(a1 + 2808) = *(_QWORD *)(a2 + 2808);
  *(_QWORD *)(a2 + 2808) = 0;
  *(_QWORD *)(a2 + 2800) = 0;
  *(_QWORD *)(a2 + 2792) = 0;
  *(_OWORD *)(a1 + 2816) = *(_OWORD *)(a2 + 2816);
  *(_QWORD *)(a1 + 2840) = 0;
  *(_QWORD *)(a1 + 2848) = 0;
  *(_QWORD *)(a1 + 2832) = 0;
  *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
  *(_QWORD *)(a1 + 2848) = *(_QWORD *)(a2 + 2848);
  *(_QWORD *)(a2 + 2840) = 0;
  *(_QWORD *)(a2 + 2832) = 0;
  *(_QWORD *)(a2 + 2848) = 0;
  *(_OWORD *)(a1 + 2856) = *(_OWORD *)(a2 + 2856);
  *(_OWORD *)(a1 + 2872) = *(_OWORD *)(a2 + 2872);
  *(_QWORD *)(a1 + 2896) = 0;
  *(_QWORD *)(a1 + 2904) = 0;
  *(_QWORD *)(a1 + 2888) = 0;
  *(_QWORD *)(a1 + 2888) = *(_QWORD *)(a2 + 2888);
  *(_QWORD *)(a1 + 2896) = *(_QWORD *)(a2 + 2896);
  *(_QWORD *)(a1 + 2904) = *(_QWORD *)(a2 + 2904);
  *(_QWORD *)(a2 + 2896) = 0;
  *(_QWORD *)(a2 + 2888) = 0;
  *(_QWORD *)(a2 + 2904) = 0;
  *(_OWORD *)(a1 + 2912) = *(_OWORD *)(a2 + 2912);
  *(_DWORD *)(a1 + 2928) = *(_DWORD *)(a2 + 2928);
  *(_DWORD *)(a1 + 2936) = *(_DWORD *)(a2 + 2936);
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 2944, a2 + 2944);
  DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(a1 + 3104, a2 + 3104);
  v33 = *(_OWORD *)(a2 + 3824);
  v34 = *(_OWORD *)(a2 + 3840);
  v35 = *(_OWORD *)(a2 + 3856);
  *(_OWORD *)(a1 + 3872) = *(_OWORD *)(a2 + 3872);
  *(_OWORD *)(a1 + 3856) = v35;
  *(_OWORD *)(a1 + 3840) = v34;
  *(_OWORD *)(a1 + 3824) = v33;
  v36 = *(_OWORD *)(a2 + 3888);
  v37 = *(_OWORD *)(a2 + 3904);
  v38 = *(_OWORD *)(a2 + 3920);
  *(_OWORD *)(a1 + 3936) = *(_OWORD *)(a2 + 3936);
  *(_OWORD *)(a1 + 3920) = v38;
  *(_OWORD *)(a1 + 3904) = v37;
  *(_OWORD *)(a1 + 3888) = v36;
  v39 = *(_OWORD *)(a2 + 3952);
  v40 = *(_OWORD *)(a2 + 3968);
  v41 = *(_OWORD *)(a2 + 3984);
  *(_DWORD *)(a1 + 4000) = *(_DWORD *)(a2 + 4000);
  *(_OWORD *)(a1 + 3984) = v41;
  *(_OWORD *)(a1 + 3968) = v40;
  *(_OWORD *)(a1 + 3952) = v39;
  *(_BYTE *)(a1 + 4008) = *(_BYTE *)(a2 + 4008);
  *(_OWORD *)(a1 + 4016) = *(_OWORD *)(a2 + 4016);
  *(_QWORD *)(a1 + 4032) = 0;
  *(_QWORD *)(a1 + 4048) = 0;
  *(_QWORD *)(a1 + 4040) = 0;
  *(_OWORD *)(a1 + 4032) = *(_OWORD *)(a2 + 4032);
  *(_QWORD *)(a1 + 4048) = *(_QWORD *)(a2 + 4048);
  *(_QWORD *)(a2 + 4040) = 0;
  *(_QWORD *)(a2 + 4032) = 0;
  *(_QWORD *)(a2 + 4048) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 4056), (__n128 *)(a2 + 4056));
  *(_QWORD *)(a1 + 4080) = *(_QWORD *)(a2 + 4080);
  *(_QWORD *)(a1 + 4088) = 0;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_QWORD *)(a1 + 4088) = *(_QWORD *)(a2 + 4088);
  *(_QWORD *)(a1 + 4096) = *(_QWORD *)(a2 + 4096);
  *(_QWORD *)(a1 + 4104) = *(_QWORD *)(a2 + 4104);
  *(_QWORD *)(a2 + 4104) = 0;
  *(_OWORD *)(a2 + 4088) = 0u;
  *(_QWORD *)(a1 + 4112) = *(_QWORD *)(a2 + 4112);
  v42 = *(_QWORD *)(a2 + 4120);
  *(_QWORD *)(a2 + 4120) = 0;
  *(_QWORD *)(a1 + 4120) = v42;
  *(_QWORD *)(a1 + 4128) = *(_QWORD *)(a2 + 4128);
  return a1;
}

void sub_1B60C1AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DspLib::LinearPhaseFilterbank *a10, DspLib::LoudspeakerController::MaskingEstimator *a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, DspLib::LoudspeakerController::SpeakerSystemModel *a17, uint64_t a18)
{
  uint64_t v18;
  DspLib::LoudspeakerController::ElectricalModel *v19;
  void **v20;
  void **v21;
  void **v22;
  DspLib::BandCombiner *v23;
  DspLib::GainSmoother *v24;
  DspLib::LoudspeakerController::SpeakerSystemModel *v25;
  void **v26;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  v28 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v18 + 4040) = v28;
    operator delete(v28);
  }
  DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel(v25);
  DspLib::LoudspeakerController::ElectricalModel::~ElectricalModel((DspLib::LoudspeakerController::ElectricalModel *)(v18 + 2936));
  DspLib::GainSmoother::~GainSmoother(v24);
  DspLib::BandCombiner::~BandCombiner(v23);
  v29 = 0;
  while (1)
  {
    v30 = *(void **)(v18 + v29 + 2296);
    if (v30)
    {
      *(_QWORD *)(v18 + v29 + 2304) = v30;
      operator delete(v30);
    }
    v29 -= 24;
    if (v29 == -120)
    {
      DspLib::LinearPhaseFilterbank::~LinearPhaseFilterbank(a10);
      v31 = 0;
      while (1)
      {
        v32 = *(void **)(v18 + v31 + 2056);
        if (v32)
        {
          *(_QWORD *)(v18 + v31 + 2064) = v32;
          operator delete(v32);
        }
        v31 -= 48;
        if (v31 == -192)
        {
          v33 = *v20;
          if (*v20)
          {
            *(_QWORD *)(v18 + 1872) = v33;
            operator delete(v33);
          }
          v34 = *v21;
          if (*v21)
          {
            *(_QWORD *)(v18 + 1824) = v34;
            operator delete(v34);
          }
          v35 = *v22;
          if (*v22)
          {
            *(_QWORD *)(v18 + 1776) = v35;
            operator delete(v35);
          }
          DspLib::LoudspeakerController::MaskingEstimator::~MaskingEstimator(a11);
          a18 = a12;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
          v36 = *a13;
          if (*a13)
          {
            *(_QWORD *)(v18 + 1064) = v36;
            operator delete(v36);
          }
          v37 = *a14;
          if (*a14)
          {
            *(_QWORD *)(v18 + 1040) = v37;
            operator delete(v37);
          }
          v38 = *a15;
          if (*a15)
          {
            *(_QWORD *)(v18 + 1016) = v38;
            operator delete(v38);
          }
          v39 = *a16;
          if (*a16)
          {
            *(_QWORD *)(v18 + 992) = v39;
            operator delete(v39);
          }
          DspLib::LoudspeakerController::SpeakerSystemModel::~SpeakerSystemModel(a17);
          DspLib::LoudspeakerController::ElectricalModel::~ElectricalModel(v19);
          v40 = *(void **)v18;
          if (*(_QWORD *)v18)
          {
            *(_QWORD *)(v18 + 8) = v40;
            operator delete(v40);
          }
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 144, a2 + 144);
  DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1 + 296, a2 + 296);
  DspLib::LoudspeakerController::ThermalModel::ThermalModel(a1 + 448, a2 + 448);
  v10 = *(_QWORD *)(a2 + 624);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 624) = v10;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a2 + 648) = 0;
  *(_QWORD *)(a2 + 640) = 0;
  *(_QWORD *)(a2 + 656) = 0;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  v11 = *(_QWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 672) = v11;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 696) = 0;
  *(_QWORD *)(a2 + 688) = 0;
  *(_QWORD *)(a2 + 704) = 0;
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  return a1;
}

void sub_1B60C1D00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v1 + 52));
  DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel((uint64_t)v1);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v1 + 43));
  v3 = (void *)v1[40];
  if (v3)
  {
    v1[41] = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v1 + 33));
  v4 = (void *)v1[30];
  if (v4)
  {
    v1[31] = v4;
    operator delete(v4);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v1 + 24));
  DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerController::BiquadModel::BiquadModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 120), (__n128 *)(a2 + 120));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

void sub_1B60C1E34(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::Biquad::SetupWrapper *v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 104) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup(v2);
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerController::ThermalModel::ThermalModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 120), (__n128 *)(a2 + 120));
  v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  return a1;
}

void sub_1B60C1F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  DspLib::Biquad::SetupWrapper *v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 104) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup(v2);
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<DspLib::LoudspeakerController::Algorithm::ChannelModule>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 4144;
    DspLib::LoudspeakerController::Algorithm::ChannelModule::~ChannelModule((DspLib::LoudspeakerController::Algorithm::ChannelModule *)(i - 4144));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<DspLib::LinearDelay>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::LinearDelay>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<DspLib::LinearDelay>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<DspLib::LinearDelay>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B60C21B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::LinearDelay>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>,std::reverse_iterator<DspLib::LinearDelay*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::LinearDelay>,std::reverse_iterator<DspLib::LinearDelay*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

float DspLib::LoudspeakerController::computeGainsSquared(const float *a1, vDSP_Length a2, const float *a3, double a4, float a5, float a6, uint64_t a7, const float *a8, vDSP_Length a9, uint64_t a10)
{
  float v17;
  uint64_t v18;
  float *v19;
  const float *v20;
  vDSP_Length v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v17 = fminf(a5, 1.0);
  MEMORY[0x1E0C80A78](a1);
  v19 = (float *)((char *)v31 - v18);
  DspLib::multiply(v20, v21, (float *)((char *)v31 - v18), v17);
  DspLib::multiplyAccumulate(v19, a2, a3, v17 * v17);
  DspLib::add(v19, a2, a1);
  v22 = COERCE_FLOAT(DspLib::maxIndex(v19, a2));
  v24 = a6 + *(float *)(a10 + 4 * v23);
  if (v24 < v22)
  {
    while (1)
    {
      v25 = v24 - a1[v23];
      if (v25 <= 0.0)
        break;
      v26 = (float)(sqrtf(fmaxf((float)(v25 * (float)(a3[v23] * 4.0)) + (float)(a8[v23] * a8[v23]), 0.0)) - a8[v23])
          / (float)(a3[v23] + a3[v23]);
      if (v26 <= 1.0)
        v27 = v26;
      else
        v27 = 1.0;
      if (v26 >= 0.0)
        v28 = v27;
      else
        v28 = 0.0;
      if (v28 != 1.0)
      {
        v17 = v17 * v28;
        if (v17 != 0.0)
        {
          DspLib::multiply(a8, a9, v19, v17);
          DspLib::multiplyAccumulate(v19, a2, a3, v17 * v17);
          DspLib::add(v19, a2, a1);
          v29 = COERCE_FLOAT(DspLib::maxIndex(v19, a2));
          v24 = a6 + *(float *)(a10 + 4 * v23);
          if (v24 < v29)
            continue;
        }
      }
      return v17;
    }
    return 0.0;
  }
  return v17;
}

void DspLib::LoudspeakerController::computeGainsSigned(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, __int128 *a7@<X8>, float a8@<S2>, float a9@<S3>)
{
  vDSP_Length v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t i;
  float v39;
  uint64_t v40;
  const float *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  __int128 v50;
  int v51;
  __int128 v52;
  int v53;
  __int128 __C;
  int v55;
  uint64_t v56;

  v42 = a5;
  v43 = a1;
  v56 = *MEMORY[0x1E0C80C00];
  v15 = a2 - a6;
  MEMORY[0x1E0C80A78](a1);
  v17 = (float *)((char *)&v40 - v16);
  DspLib::clear((float *)((char *)&v40 - v16), v15);
  v18 = 0;
  *a7 = *a4;
  *((_DWORD *)a7 + 4) = *((_DWORD *)a4 + 4);
  do
  {
    DspLib::multiplyAccumulate(v17, v15, (const float *)(*(_QWORD *)(*a3 + 8 * v18) + 4 * a6), *((float *)a7 + v18) * a9);
    ++v18;
  }
  while (v18 != 5);
  v41 = (const float *)(v43 + 4 * a6);
  DspLib::add(v17, v15, v41);
  v19 = COERCE_FLOAT(DspLib::maxmgvi(v17, v15));
  v21 = v20 + a6;
  v22 = *(float *)(v42 + 4 * (v20 + a6));
  if ((float)(a8 + v22) < v19)
  {
    do
    {
      v23 = 0;
      if (v17[v20] <= 0.0)
      {
        v31 = (float)-v22 - *(float *)(v43 + 4 * v21);
        __C = 0uLL;
        v55 = 0;
        v46 = *a7;
        v47 = *((_DWORD *)a7 + 4);
        v32 = *a3;
        do
        {
          *((float *)&__C + v23) = *((float *)&v46 + v23) * *(float *)(*(_QWORD *)(v32 + 8 * v23) + 4 * v21);
          ++v23;
        }
        while (v23 != 5);
        DspLib::multiply((float *)&__C, 5uLL, a9);
        DspLib::negate((float *)&__C, 5uLL);
        v33 = -v31;
        if (v31 >= (float)-a8)
          v33 = a8;
        DspLib::waterFillingSolution((uint64_t)&__C, 5uLL, v33);
        v35 = 0;
        v44 = __C;
        v45 = v55;
        v51 = 1065353216;
        v50 = xmmword_1B6629C88;
        do
        {
          v36 = *(float *)((char *)&v44 + v35);
          v37 = 1.0;
          if (v36 > v34)
            v37 = fminf(v34 / v36, 1.0);
          *(float *)((char *)&v50 + v35) = v37;
          v35 += 4;
        }
        while (v35 != 20);
        if (DspLib::minv((const float *)&v50, 5uLL) >= 1.0)
          return;
      }
      else
      {
        v24 = v22 - *(float *)(v43 + 4 * v21);
        __C = 0uLL;
        v55 = 0;
        v52 = *a7;
        v53 = *((_DWORD *)a7 + 4);
        v25 = *a3;
        do
        {
          *((float *)&__C + v23) = *((float *)&v52 + v23) * *(float *)(*(_QWORD *)(v25 + 8 * v23) + 4 * v21);
          ++v23;
        }
        while (v23 != 5);
        if (a8 >= v24)
          v26 = a8;
        else
          v26 = v24;
        DspLib::multiply((float *)&__C, 5uLL, a9);
        DspLib::waterFillingSolution((uint64_t)&__C, 5uLL, v26);
        v28 = 0;
        v48 = __C;
        v49 = v55;
        v51 = 1065353216;
        v50 = xmmword_1B6629C88;
        do
        {
          v29 = *(float *)((char *)&v48 + v28);
          v30 = 1.0;
          if (v29 > v27)
            v30 = fminf(v27 / v29, 1.0);
          *(float *)((char *)&v50 + v28) = v30;
          v28 += 4;
        }
        while (v28 != 20);
        if (DspLib::minv((const float *)&v50, 5uLL) >= 1.0)
          return;
      }
      DspLib::multiply((float *)a7, 5uLL, (const float *)&v50);
      DspLib::clear(v17, v15);
      for (i = 0; i != 5; ++i)
        DspLib::multiplyAccumulate(v17, v15, (const float *)(*(_QWORD *)(*a3 + 8 * i) + 4 * a6), *((float *)a7 + i) * a9);
      DspLib::add(v17, v15, v41);
      v39 = COERCE_FLOAT(DspLib::maxmgvi(v17, v15));
      v21 = v20 + a6;
      v22 = *(float *)(v42 + 4 * (v20 + a6));
    }
    while ((float)(a8 + v22) < v39);
  }
}

void DspLib::LoudspeakerController::computeGainsAmplitude(uint64_t a1@<X0>, vDSP_Length a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  uint64_t v12;
  float *v13;
  vDSP_Length v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t j;
  float v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 __C;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *a5 = *a4;
  *((_DWORD *)a5 + 4) = *((_DWORD *)a4 + 4);
  MEMORY[0x1E0C80A78](a1);
  v13 = (float *)((char *)&v27 - v12);
  DspLib::clear((float *)((char *)&v27 - v12), v14);
  for (i = 0; i != 5; ++i)
    DspLib::multiplyAccumulate(v13, a2, *(const float **)(*a3 + 8 * i), *((float *)a5 + i) * a6);
  if (COERCE_FLOAT(DspLib::maxmgvi(v13, a2)) > a7)
  {
    v17 = v16;
    v27 = xmmword_1B6629C88;
    do
    {
      v18 = 0;
      __C = 0uLL;
      v35 = 0;
      v32 = *a5;
      v33 = *((_DWORD *)a5 + 4);
      v19 = *a3;
      do
      {
        *((float *)&__C + v18) = *((float *)&v32 + v18) * *(float *)(*(_QWORD *)(v19 + 8 * v18) + 4 * v17);
        ++v18;
      }
      while (v18 != 5);
      DspLib::multiply((float *)&__C, 5uLL, a6);
      if (v13[v17] < 0.0)
        DspLib::negate((float *)&__C, 5uLL);
      DspLib::waterFillingSolution((uint64_t)&__C, 5uLL, a7);
      v21 = 0;
      v28 = __C;
      v29 = v35;
      v31 = 1065353216;
      v30 = v27;
      do
      {
        v22 = *(float *)((char *)&v28 + v21);
        v23 = 1.0;
        if (v22 > v20)
          v23 = fminf(v20 / v22, 1.0);
        *(float *)((char *)&v30 + v21) = v23;
        v21 += 4;
      }
      while (v21 != 20);
      if (DspLib::minv((const float *)&v30, 5uLL) >= 1.0)
        break;
      DspLib::multiply((float *)a5, 5uLL, (const float *)&v30);
      DspLib::clear(v13, a2);
      for (j = 0; j != 5; ++j)
        DspLib::multiplyAccumulate(v13, a2, *(const float **)(*a3 + 8 * j), *((float *)a5 + j) * a6);
      v25 = COERCE_FLOAT(DspLib::maxmgvi(v13, a2));
      v17 = v26;
    }
    while (v25 > a7);
  }
}

void DspLib::DCTracker::process(std::span<float const,18446744073709551615ul>)::{lambda(std::span<float const,18446744073709551615ul>)#1}::operator()(uint64_t *a1, float *a2, vDSP_Length __N)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  const float *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = DspLib::sum(a2, __N);
  MEMORY[0x1E0C80A78](v7);
  v9 = (const float *)((char *)v10 - v8);
  DspLib::CircularDelay::process((const void **)v5, (char *)a2, __N, (char *)v10 - v8, __N);
  *(float *)(v5 + 32) = *(float *)(v5 + 32) + (float)(v6 - DspLib::sum(v9, __N));
  *(float *)(v5 + 40) = v6 + *(float *)(v5 + 40);
  *(_QWORD *)(v5 + 48) += __N;
}

_QWORD *std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[23],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[23],std::allocator<DspLib::Logger>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B60C2DE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[23],std::allocator<DspLib::Logger>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E69C16C8;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[23],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B60C2E30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[23],DspLib::Logger*>(uint64_t a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B60C2E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::default_delete<DspLib::DCTracker>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
}

void DspLib::LoudspeakerController::SpeakerSystemModel::SpeakerSystemModel(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(_QWORD *)(a1 + 400) = v2;
    operator delete(v2);
  }
}

__n128 DspLib::Biquad::SetupWrapper::SetupWrapper(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void DspLib::Biquad::SetupWrapper::initialize(vDSP_Length *a1, const double *__coeffs, int a3, vDSP_Length __M, vDSP_Length a5)
{
  vDSP_biquadm_SetupStruct *v7;
  vDSP_biquadm_Setup Setup;
  char *v9;
  vDSP_biquadm_SetupStruct *v10;

  *a1 = a5;
  a1[1] = __M;
  v7 = (vDSP_biquadm_SetupStruct *)a1[2];
  if (v7)
  {
    vDSP_biquadm_DestroySetup(v7);
    a1[2] = 0;
    __M = a1[1];
  }
  if (__M)
  {
    Setup = vDSP_biquadm_CreateSetup(__coeffs, __M, *a1);
    a1[2] = (vDSP_Length)Setup;
    if (!Setup)
    {
      v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v9, 43);
      ++DspLibDebug::mAssertCounter;
      v10 = (vDSP_biquadm_SetupStruct *)a1[2];
      if (v10)
      {
        vDSP_biquadm_DestroySetup(v10);
        a1[2] = 0;
      }
      *a1 = 0;
      a1[1] = 0;
    }
  }
}

void DspLib::Biquad::SetupWrapper::destroyvDSPSetup(DspLib::Biquad::SetupWrapper *this)
{
  vDSP_biquadm_SetupStruct *v2;

  v2 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 2);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((_QWORD *)this + 2) = 0;
  }
}

void DspLib::Biquad::SetupWrapper::reset(DspLib::Biquad::SetupWrapper *this)
{
  vDSP_biquadm_SetupStruct *v1;

  if (*(_QWORD *)this && *((_QWORD *)this + 1))
  {
    v1 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 2);
    if (v1)
      vDSP_biquadm_ResetState(v1);
  }
}

void DspLib::Biquad::Filter::initialize(DspLib::Biquad::Filter *this, vDSP_Length a2, vDSP_Length __M)
{
  vDSP_Length *v6;
  vDSP_biquadm_SetupStruct *v7;
  vDSP_Length v8;
  vDSP_Length v9;
  vDSP_Length v10;
  uint64_t v11;
  unsigned int v12;
  vDSP_Length v13;

  v6 = (vDSP_Length *)((char *)this + 48);
  if (*((_QWORD *)this + 6) == a2)
  {
    if (*((_QWORD *)this + 7) == __M)
      goto LABEL_13;
  }
  else
  {
    v7 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 8);
    if (v7)
    {
      vDSP_biquadm_DestroySetup(v7);
      *((_QWORD *)this + 8) = 0;
    }
    *v6 = 0;
    v6[1] = 0;
    *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_BYTE *)this = 0;
    if (!__M)
      goto LABEL_12;
  }
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = __M;
  std::vector<double>::resize((uint64_t)this + 24, 5 * a2 * __M);
  v8 = *((_QWORD *)this + 7);
  if (v8 < __M)
  {
    do
    {
      if (a2)
      {
        v9 = 0;
        v10 = *((_QWORD *)this + 1) * v8;
        v11 = *((_QWORD *)this + 3);
        v12 = 1;
        do
        {
          v13 = v11 + 40 * (v10 + v9);
          *(_QWORD *)v13 = 0x3FF0000000000000;
          v9 = v12;
          *(_OWORD *)(v13 + 8) = 0uLL;
          *(_OWORD *)(v13 + 24) = 0uLL;
          ++v12;
        }
        while (v9 < a2);
      }
      ++v8;
    }
    while (v8 != __M);
  }
LABEL_12:
  DspLib::Biquad::SetupWrapper::initialize(v6, *((const double **)this + 3), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3, __M, a2);
LABEL_13:
  *(_BYTE *)this = 1;
}

void DspLib::Biquad::Filter::uninitialize(DspLib::Biquad::Filter *this)
{
  vDSP_biquadm_SetupStruct *v2;

  v2 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 8);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((_QWORD *)this + 8) = 0;
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_BYTE *)this = 0;
}

void DspLib::Biquad::Filter::setNumberOfStages(vDSP_Length *this, vDSP_Length __M)
{
  char *v2;

  if (*(_BYTE *)this)
  {
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)this, this[6], __M);
  }
  else
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v2, 152);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::Biquad::Filter::initializeStates(DspLib::Biquad::Filter *this, float a2)
{
  unint64_t v2;
  unint64_t v4;
  vDSP_Length v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  vDSP_Length v10;
  unsigned int v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  float **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  float **v28;
  size_t v29;
  uint64_t v30;
  vDSP_Length v31;
  unsigned int v32;
  unint64_t v33;
  float **v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  double __coeffs;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v4 = *((_QWORD *)this + 7);
    if (v4)
    {
      if (*((_QWORD *)this + 8))
      {
        v6 = 0;
        v7 = 0;
        v8 = 1;
        v9 = 0uLL;
        do
        {
          if (v8)
          {
            v10 = 0;
            v11 = 1;
            do
            {
              v39 = v9;
              v40 = v9;
              __coeffs = 1.0;
              vDSP_biquadm_SetCoefficientsDouble(*((vDSP_biquadm_Setup *)this + 8), &__coeffs, v6, v10, 1uLL, 1uLL);
              v9 = 0uLL;
              v10 = v11;
              v2 = *((_QWORD *)this + 6);
            }
            while (v2 > v11++);
            v4 = *((_QWORD *)this + 7);
            v8 = *((_QWORD *)this + 6);
          }
          v6 = ++v7;
        }
        while (v4 > v7);
        v13 = 2 * (v2 != 1);
        v14 = MEMORY[0x1E0C80A78](this);
        v16 = (char *)&v35[-1] - v15;
        v17 = *((_QWORD *)this + 6);
        MEMORY[0x1E0C80A78](v14);
        v19 = (char *)&v35[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v18 >= 0x200)
          v20 = 512;
        else
          v20 = v18;
        bzero((char *)&v35[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
        if (v17)
        {
          v21 = 0;
          do
          {
            *(_QWORD *)&v19[8 * v21] = &v16[4 * (v21 << v13)];
            ++v21;
          }
          while (v17 > v21);
        }
        v37[0] = v19;
        v37[1] = v17;
        v37[2] = 1;
        DspLib::fill(v37, a2);
        v22 = (float **)*((_QWORD *)this + 6);
        v24 = MEMORY[0x1E0C80A78](v23);
        v26 = (char *)&v35[-1] - v25;
        MEMORY[0x1E0C80A78](v24);
        v28 = (float **)((char *)&v35[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v27 >= 0x200)
          v29 = 512;
        else
          v29 = v27;
        bzero((char *)&v35[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
        if (v22)
        {
          v30 = 0;
          do
          {
            v28[v30] = (float *)&v26[4 * (v30 << (2 * (v22 != (float **)1)))];
            ++v30;
          }
          while ((unint64_t)v22 > v30);
        }
        v31 = *((_QWORD *)this + 7);
        if ((v31 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          v32 = 1;
          do
          {
            v36[0] = v19;
            v36[1] = v17;
            v36[2] = 1;
            v35[0] = v28;
            v35[1] = v22;
            v35[2] = (float **)1;
            DspLib::Biquad::Filter::process(this, (uint64_t)v36, v35);
            v33 = v32;
            v31 = *((_QWORD *)this + 7);
            ++v32;
          }
          while (v33 < 2 * v31);
          v22 = (float **)*((_QWORD *)this + 6);
        }
        vDSP_biquadm_SetCoefficientsDouble(*((vDSP_biquadm_Setup *)this + 8), *((const double **)this + 3), 0, 0, v31, (vDSP_Length)v22);
      }
    }
  }
}

void DspLib::Biquad::Filter::process(_QWORD *a1, uint64_t a2, float ***a3)
{
  vDSP_biquadm_SetupStruct *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (a1[6] && a1[7] && (v5 = (vDSP_biquadm_SetupStruct *)a1[8]) != 0)
  {
    vDSP_biquadm(v5, *(const float ***)a2, 1, *a3, 1, *(_QWORD *)(a2 + 16));
  }
  else if (*(float ***)a2 != *a3)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
        {
          memmove((*a3)[v7], *(const void **)(*(_QWORD *)a2 + 8 * v7), 4 * v9);
          v6 = *(_QWORD *)(a2 + 8);
        }
        v7 = v8;
      }
      while (v6 > v8++);
    }
  }
}

void DspLib::Biquad::Filter::copyStatesFrom(DspLib::Biquad::Filter *this, const DspLib::Biquad::Filter *a2)
{
  vDSP_biquadm_SetupStruct *v2;
  const vDSP_biquadm_SetupStruct *v3;

  if (*((_QWORD *)this + 6))
  {
    if (*((_QWORD *)this + 7))
    {
      v2 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 8);
      if (v2)
      {
        if (*((_QWORD *)a2 + 6) && *((_QWORD *)a2 + 7))
        {
          v3 = (const vDSP_biquadm_SetupStruct *)*((_QWORD *)a2 + 8);
          if (v3)
            vDSP_biquadm_CopyState(v2, v3);
        }
      }
    }
  }
}

_QWORD *DspLib::Biquad::Filter::latencySamples(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24[130];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (this[7])
  {
    v1 = this;
    if (this[6])
    {
      v2 = 0;
      v3 = 0;
      v4 = 0.0;
      do
      {
        DspLib::clear(v24, 0x80uLL);
        v24[0] = 1.0;
        v5 = v1[7];
        if (v5)
        {
          v6 = 0;
          v7 = v1[1];
          v8 = v1[3];
          do
          {
            v9 = 0;
            v10 = (double *)(v8 + 40 * (v2 + v7 * v6));
            v11 = *v10;
            v12 = v10[1];
            v13 = v10[2];
            v14 = v10[3];
            v15 = v10[4];
            v16 = -v14;
            v17 = -v15;
            v18 = 0.0;
            v19 = 0.0;
            v20 = 0.0;
            v21 = 0.0;
            do
            {
              v22 = v18;
              v18 = v24[v9];
              v23 = (float)((float)((float)((float)(v22 * v12) + (float)(v11 * v18)) + (float)(v13 * v21))
                          + (float)(v16 * v20))
                  + (float)(v17 * v19);
              v24[v9++] = v23;
              v19 = v20;
              v20 = v23;
              v21 = v22;
            }
            while (v9 != 128);
            v6 = (v6 + 1);
          }
          while (v5 > v6);
        }
        this = (_QWORD *)DspLib::maxmgvi(v24, 0x80uLL);
        if (v4 < *(float *)&this)
          v4 = *(float *)&this;
        v2 = ++v3;
      }
      while (v1[6] > (unint64_t)v3);
    }
  }
  return this;
}

void DspLib::Biquad::Filter::process(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float **a5)
{
  float **v5[3];
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v7 = a4;
  v8 = a2;
  v6[0] = &v8;
  v6[1] = 1;
  v6[2] = a3;
  v5[0] = (float **)&v7;
  v5[1] = (float **)1;
  v5[2] = a5;
  DspLib::Biquad::Filter::process(a1, (uint64_t)v6, v5);
}

void DspLib::Biquad::Filter::setCoefficients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, vDSP_Length a5)
{
  vDSP_Length v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11[3];
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v11[0] = a1;
  v11[1] = (uint64_t)v13;
  v11[2] = (uint64_t)&v12;
  v12 = a4;
  if (a5 < 0x41)
  {
    DspLib::Biquad::Filter::setCoefficients(std::span<DspLib::Biquad::Section const,18446744073709551615ul>,unsigned long,unsigned long)::$_0::operator()(v11, a5);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    v6 = 0;
    v7 = 1;
    do
    {
      DspLib::Biquad::Filter::setCoefficients(std::span<DspLib::Biquad::Section const,18446744073709551615ul>,unsigned long,unsigned long)::$_0::operator()(v11, v6);
      v6 = v7;
      v8 = *(_QWORD *)(a1 + 48);
      v9 = v8 >= v7;
      v10 = v8 == v7++;
    }
    while (!v10 && v9);
  }
}

void DspLib::Biquad::Filter::setCoefficients(std::span<DspLib::Biquad::Section const,18446744073709551615ul>,unsigned long,unsigned long)::$_0::operator()(uint64_t *a1, vDSP_Length a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  float32x2_t *v8;
  __int128 v9;
  float v10;
  vDSP_Length v11;
  uint64_t v12;
  float64x2_t v13;
  char *v15;
  __int128 v16;
  __int32 v17;

  v2 = (_QWORD *)a1[1];
  if (v2[1])
  {
    v5 = 0;
    v6 = *a1;
    v7 = 1;
    while (1)
    {
      v8 = (float32x2_t *)(*v2 + 20 * v5);
      v9 = *(_OWORD *)v8->f32;
      v17 = v8[2].i32[0];
      v16 = v9;
      if ((DspLib::Biquad::validate((uint64_t)&v16) & 1) == 0)
        break;
      v10 = v8[2].f32[0];
      v11 = *(_QWORD *)a1[2] + v5;
      v12 = *(_QWORD *)(v6 + 24) + 40 * (a2 + *(_QWORD *)(v6 + 8) * v11);
      v13 = vcvtq_f64_f32(v8[1]);
      *(float64x2_t *)v12 = vcvtq_f64_f32(*v8);
      *(float64x2_t *)(v12 + 16) = v13;
      *(double *)(v12 + 32) = v10;
      vDSP_biquadm_SetCoefficientsDouble(*(vDSP_biquadm_Setup *)(v6 + 64), (const double *)v12, v11, a2, 1uLL, 1uLL);
      v5 = v7;
      v2 = (_QWORD *)a1[1];
      if (v2[1] <= (unint64_t)v7++)
        return;
    }
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 263);
    ++DspLibDebug::mAssertCounter;
  }
}

float32_t DspLib::Biquad::Filter::section@<S0>(DspLib::Biquad::Filter *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X8>)
{
  float64x2_t *v4;
  float32_t result;

  v4 = (float64x2_t *)(*((_QWORD *)this + 3) + 40 * (a3 + *((_QWORD *)this + 1) * a2));
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v4), v4[1]);
  result = v4[2].f64[0];
  a4[1].f32[0] = result;
  return result;
}

void DspLib::Biquad::ParametricFilter::initialize(DspLib::Biquad::ParametricFilter *this, vDSP_Length a2, double a3, vDSP_Length a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  vDSP_Length v12;
  unsigned int v13;
  uint64_t v14;

  DspLib::Biquad::Filter::initialize(this, a2, a4);
  std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::resize((uint64_t *)this + 10, *((_QWORD *)this + 6));
  v6 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 11);
  while (v6 != v7)
  {
    std::vector<DspLib::Biquad::Design::ParametricEQ>::resize(v6, *((_QWORD *)this + 7));
    v6 += 24;
  }
  if (*((double *)this + 9) != a3)
  {
    *((double *)this + 9) = a3;
    v8 = *((_QWORD *)this + 7);
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = *((_QWORD *)this + 6);
      do
      {
        if (v11)
        {
          v12 = 0;
          v13 = 1;
          do
          {
            v14 = *(_QWORD *)(*((_QWORD *)this + 10) + 24 * v12) + 16 * v9;
            DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this, *(_QWORD *)v14, *(double **)(v14 + 8), v9, v12);
            v12 = v13;
            v11 = *((_QWORD *)this + 6);
          }
          while (v11 > v13++);
          v8 = *((_QWORD *)this + 7);
        }
        v9 = ++v10;
      }
      while (v8 > v10);
    }
  }
}

void std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<DspLib::Biquad::Design::ParametricEQ>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<DspLib::Biquad::Design::ParametricEQ>::__append((void **)a1, a2 - v2);
  }
}

void DspLib::Biquad::ParametricFilter::setParametricEQ(uint64_t a1, unint64_t a2, double *a3, uint64_t a4, vDSP_Length a5)
{
  float v6;
  int v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  vDSP_Length v12;
  unsigned int v13;
  double v14;
  float v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  double v22;
  float v23;
  float v24;
  int v25;
  int v26;
  float *v27;
  int v28;
  float v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;

  v6 = *(float *)&a3;
  v7 = a2;
  v9 = HIDWORD(a2);
  v10 = (unint64_t)a3 >> 32;
  if (a5 < 0x41)
  {
    v22 = *(double *)(a1 + 72);
    v23 = v22 * 0.49000001;
    v24 = v23;
    if (*((float *)&a2 + 1) <= v23)
      v24 = *((float *)&a2 + 1);
    if (*((float *)&a2 + 1) < 1.0)
      v24 = 1.0;
    if (*(float *)&a3 <= 40.0)
      v25 = (int)a3;
    else
      v25 = 1109393408;
    if (*(float *)&a3 < -40.0)
      v25 = -1038090240;
    if (*((float *)&a3 + 1) <= 100.0)
      v26 = HIDWORD(a3);
    else
      v26 = 1120403456;
    v27 = (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * a5) + 16 * a4);
    *(_DWORD *)v27 = a2;
    v27[1] = v24;
    if (*((float *)&a3 + 1) >= 0.1)
      v28 = v26;
    else
      v28 = 1036831949;
    *((_DWORD *)v27 + 2) = v25;
    *((_DWORD *)v27 + 3) = v28;
    if ((_DWORD)a2 != 25)
    {
      v29 = v22;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)v27, v29, 0, a3, (uint64_t)&v32);
      v30 = v32;
      v31 = v33;
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)&v30, 1, a4, a5);
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = *(double *)(a1 + 72);
        v15 = v14 * 0.49000001;
        if (*(float *)&v9 <= v15)
          v15 = *(float *)&v9;
        if (*(float *)&v9 >= 1.0)
          *(float *)&v9 = v15;
        else
          LODWORD(v9) = 1065353216;
        if (v6 <= 40.0)
          *(float *)&v16 = v6;
        else
          *(float *)&v16 = 40.0;
        if (v6 >= -40.0)
          v6 = *(float *)&v16;
        else
          v6 = -40.0;
        if (*(float *)&v10 <= 100.0)
          v17 = v10;
        else
          v17 = 1120403456;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v12) + 16 * a4;
        *(_DWORD *)v18 = v7;
        *(_DWORD *)(v18 + 4) = v9;
        if (*(float *)&v10 >= 0.1)
          LODWORD(v10) = v17;
        else
          LODWORD(v10) = 1036831949;
        *(float *)(v18 + 8) = v6;
        *(_DWORD *)(v18 + 12) = v10;
        if (v7 != 25)
        {
          v19 = v14;
          DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)v18, v19, 0, a3, (uint64_t)&v32);
          v30 = v32;
          v31 = v33;
          DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)&v30, 1, a4, v12);
          v11 = *(_QWORD *)(a1 + 48);
        }
        v12 = v13;
      }
      while (v11 > v13++);
    }
  }
}

void DspLib::Biquad::ParametricFilter::uninitialize(DspLib::Biquad::ParametricFilter *this)
{
  vDSP_biquadm_SetupStruct *v2;

  v2 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 8);
  if (v2)
  {
    vDSP_biquadm_DestroySetup(v2);
    *((_QWORD *)this + 8) = 0;
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_BYTE *)this = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 10);
}

void DspLib::Biquad::ParametricFilter::setParametricEQs(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  vDSP_Length v7;
  unsigned int i;
  uint64_t v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v7 = 0;
    for (i = 0; i < v3; v7 = ++i)
    {
      if (a3)
      {
        v9 = 0;
        v10 = 1;
        do
        {
          DspLib::Biquad::ParametricFilter::setParametricEQ(a1, *(_QWORD *)(a2 + 16 * v9), *(double **)(a2 + 16 * v9 + 8), v9, v7);
          v9 = v10;
        }
        while (a3 > v10++);
        v3 = *(_QWORD *)(a1 + 48);
      }
    }
  }
}

void DspLib::Biquad::amplitudeResponse(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  DspLib::Biquad::frequencyResponse(a1, a2, a3, (uint64_t)v9, 0, a6, 0, a7, a8, a9);
}

void DspLib::Biquad::frequencyResponse(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, DspLib::ComplexVector *this, double a8, double a9, double a10)
{
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  double v22;
  unint64_t v23;
  float64x2_t *v24;
  float32x4_t v25;
  float v26;
  double v27;
  long double v28;
  long double v29;
  double v30;
  long double v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  char *v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  DSPComplex v41;

  if (a3 >= 0xF4241)
  {
    v37 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquad.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v37, 393);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if (a4)
      DspLib::fill(*(float **)a4, *(_QWORD *)(a4 + 8), 1.0);
    if (a5)
      DspLib::clear(*(float **)a5, *(_QWORD *)(a5 + 8));
    if (this)
    {
      DspLib::ComplexVector::setLength(this, a3);
      DspLib::ComplexVector::operator=(this, 1.0);
    }
    v18 = a1[7];
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = a8;
      v22 = (float)(6.2832 / v21);
      do
      {
        if (a3)
        {
          v23 = 0;
          v24 = (float64x2_t *)(a1[3] + 40 * (a6 + a1[1] * v19));
          v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v24), v24[1]);
          v38 = v25;
          v26 = v24[2].f64[0];
          do
          {
            v39 = v38;
            v40 = v26;
            v27 = DspLib::Biquad::frequencyResponse(v39.f32, 0, v22 * *(float *)(a2 + 4 * v23), *(double *)v25.i64, a10);
            v28 = v27;
            v29 = *(double *)v25.i64;
            if (a4)
            {
              v30 = sqrt(*(double *)v25.i64 * *(double *)v25.i64 + v27 * v27);
              *(double *)v25.i64 = *(float *)(*(_QWORD *)a4 + 4 * v23);
              *(float *)&v30 = v30 * *(double *)v25.i64;
              *(_DWORD *)(*(_QWORD *)a4 + 4 * v23) = LODWORD(v30);
            }
            if (a5)
            {
              v31 = atan2(v29, v28);
              *(double *)v25.i64 = *(float *)(*(_QWORD *)a5 + 4 * v23);
              *(float *)&v31 = v31 + *(double *)v25.i64;
              *(_DWORD *)(*(_QWORD *)a5 + 4 * v23) = LODWORD(v31);
            }
            if (this)
            {
              v32 = v28;
              v33 = v29;
              v34 = DspLib::ComplexSpan::operator[](this, v23);
              v36 = (float)(v34 * v32) - (float)(v35 * v33);
              v41.imag = (float)(v35 * v32) + (float)(v34 * v33);
              v41.real = v36;
              DspLib::ComplexSpan::setElement(this, v23, v41);
            }
            ++v23;
          }
          while (a3 != v23);
          v18 = a1[7];
        }
        v19 = ++v20;
      }
      while (v18 > v20);
    }
  }
}

void DspLib::Biquad::phaseResponse(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  DspLib::Biquad::frequencyResponse(a1, a2, a3, 0, (uint64_t)v9, a6, 0, a7, a8, a9);
}

void DspLib::Biquad::amplitudeAndPhaseResponse(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11)
{
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a4;
  v12[1] = a5;
  v11[0] = a6;
  v11[1] = a7;
  DspLib::Biquad::frequencyResponse(a1, a2, a3, (uint64_t)v12, (uint64_t)v11, a8, 0, a9, a10, a11);
}

void DspLib::Biquad::complexResponse(_QWORD *a1, uint64_t a2, unint64_t a3, DspLib::ComplexVector *this, uint64_t a5, double a6, double a7, double a8)
{
  DspLib::Biquad::frequencyResponse(a1, a2, a3, 0, 0, a5, this, a6, a7, a8);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B60C434C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DspLib::Biquad::Design::ParametricEQ>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Design::ParametricEQ>>,std::reverse_iterator<std::vector<DspLib::Biquad::Design::ParametricEQ>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<DspLib::Biquad::Design::ParametricEQ>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[16 * a2];
      do
      {
        *(_DWORD *)v7 = 23;
        *(_QWORD *)(v7 + 4) = 1148846080;
        *((_DWORD *)v7 + 3) = 1065353216;
        v7 += 16;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_DWORD *)v17 = 23;
      *(_QWORD *)(v17 + 4) = 1148846080;
      *((_DWORD *)v17 + 3) = 1065353216;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

double DspLib::PilotToneV2::PilotTone::initialize(DspLib::PilotToneV2::PilotTone *this, double a2)
{
  unint64_t v3;

  *((double *)this + 10) = a2;
  v3 = vcvtad_u64_f64(a2 * 5.0 / 1000.0);
  *((_QWORD *)this + 11) = v3;
  std::vector<float>::resize((uint64_t)this + 192, v3);
  DspLib::makeSecondHalfHannWindow(*((_QWORD *)this + 24), (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2);
  DspLib::Biquad::Filter::initialize((DspLib::PilotToneV2::PilotTone *)((char *)this + 8), 1uLL, 1uLL);
  *(_BYTE *)this = 1;
  return DspLib::PilotToneV2::PilotTone::reset(this);
}

double DspLib::PilotToneV2::PilotTone::reset(DspLib::PilotToneV2::PilotTone *this)
{
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  double result;

  *((_QWORD *)this + 12) = 0;
  v2 = 220;
  if (!*((_BYTE *)this + 256))
    v2 = 216;
  v3 = *(_DWORD *)((char *)this + v2);
  *((_BYTE *)this + 104) = 1;
  *((_DWORD *)this + 30) = v3;
  *((_QWORD *)this + 14) = ((uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2) - 1;
  *((_WORD *)this + 62) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::PilotToneV2::PilotTone *)((char *)this + 56));
  if (*((_BYTE *)this + 256))
    *((_DWORD *)this + 36) = 925353388;
  v4 = 512.0 / *((double *)this + 10);
  *((float *)this + 65) = expf(-1.0 / (float)((float)(v4 * 7.5) / 1000.0));
  v5 = expf(-1.0 / (float)((float)(v4 * 30.0) / 1000.0));
  *((float *)this + 66) = v5;
  *((float *)this + 68) = v5;
  *(_QWORD *)&result = 512;
  *(_OWORD *)((char *)this + 152) = xmmword_1B6629D00;
  return result;
}

_BYTE *DspLib::PilotToneV2::PilotTone::uninitialize(_BYTE *this)
{
  *this = 0;
  return this;
}

void DspLib::PilotToneV2::PilotTone::setParameters(uint64_t a1, float *a2)
{
  DspLib *v4;
  DspLib *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  DspLib *v11;
  void *__p;
  _BYTE *v13;

  DspLib::PilotToneV2::PilotTone::lookupTableNeedsUpdate(a1, a2);
  *(float *)(a1 + 216) = DspLib::dB2Power(v4, a2[3]);
  v6 = DspLib::dB2Power(v5, a2[4]);
  *(float *)(a1 + 220) = v6;
  if (*(_BYTE *)(a1 + 256))
    *(float *)(a1 + 120) = v6;
  v7 = *(double *)(a1 + 176) + *(double *)(a1 + 176);
  v8 = *(double *)(a1 + 80);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)2, v7, v8, 0, &__p);
  DspLib::Biquad::Filter::setCoefficients(a1 + 8, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (_BYTE *)__p) >> 2), 0, 0x41uLL);
  *(_QWORD *)(a1 + 152) = 512;
  v9 = 512.0 / *(double *)(a1 + 80);
  *(float *)(a1 + 260) = expf(-1.0 / (float)((float)(v9 * 7.5) / 1000.0));
  v10 = expf(-1.0 / (float)((float)(v9 * 30.0) / 1000.0));
  *(float *)(a1 + 264) = v10;
  *(float *)(a1 + 272) = v10;
  *(_DWORD *)(a1 + 268) = 1128792064;
  *(float *)(a1 + 224) = DspLib::dB2Amp(v11, -a2[7]);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 228) = *a2 != 0.0;
  *(_BYTE *)(a1 + 1) = 1;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_1B60C48A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double DspLib::PilotToneV2::PilotTone::lookupTableNeedsUpdate(uint64_t a1, float *a2)
{
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;
  DspLib::PilotToneV2 *v9;
  DspLib *v10;
  uint64_t v11;
  float v12;
  double v13;
  float v14;
  _BOOL8 isEqual;
  _BOOL8 v16;
  double v17;
  double v18;
  double result;
  float *v20;
  uint64_t v21;
  vDSP_Length v22;
  uint64_t v23;
  float v24;

  v4 = *(double *)(a1 + 176);
  v5 = DspLib::dB2Amp((DspLib *)a1, a2[2]);
  v6 = *(double *)(a1 + 80);
  v7 = v6 / fmaxf(roundf(v6 / a2[5]), 1.0);
  v8 = v7 * 0.00048828;
  v10 = (DspLib *)DspLib::PilotToneV2::pilotToneBestFftBinFit(v9, a2[1], v7);
  v12 = v8 * (float)v10;
  v13 = v12;
  if (v12 == 0.0)
    v11 = 0;
  else
    LODWORD(v11) = vcvtad_u64_f64(v6 / v13);
  *(_QWORD *)(a1 + 168) = v11 | ((_QWORD)v10 << 32);
  *(double *)(a1 + 176) = v13;
  v14 = a2[6];
  isEqual = DspLib::isEqual(v10, v5, *(float *)(a1 + 184), 1.0e-20);
  if (!isEqual)
    goto LABEL_12;
  v16 = DspLib::isEqual((DspLib *)isEqual, v4, *(double *)(a1 + 176), 1.0e-20);
  if (!v16)
    goto LABEL_12;
  v17 = 0.0;
  if (v14 < 0.5)
    v18 = 0.0;
  else
    v18 = 1.0;
  if (*(_BYTE *)(a1 + 256))
    v17 = 1.0;
  if (!DspLib::isEqual((DspLib *)v16, v18, v17, 1.0e-20))
  {
LABEL_12:
    *(float *)(a1 + 184) = v5;
    std::vector<float>::resize(a1 + 232, *(unsigned int *)(a1 + 168));
    v20 = *(float **)(a1 + 232);
    v21 = *(_QWORD *)(a1 + 240) - (_QWORD)v20;
    v22 = v21 >> 2;
    if (v21)
    {
      v23 = 0;
      do
      {
        v24 = (float)((float)v23 / (float)v22) * 6.28318531;
        v20[v23++] = sinf(v24);
      }
      while (v22 > v23);
    }
    if (v14 < 0.5)
      DspLib::multiply(v20, v22, v5);
    else
      v5 = 0.00001;
    *(float *)(a1 + 144) = v5;
    *(_BYTE *)(a1 + 256) = v14 >= 0.5;
    return DspLib::PilotToneV2::PilotTone::reset((DspLib::PilotToneV2::PilotTone *)a1);
  }
  return result;
}

void DspLib::PilotToneV2::PilotTone::process(uint64_t a1, float *a2, float **a3, uint64_t a4, vDSP_Length a5)
{
  BOOL v5;
  vDSP_Length v10;
  float v11;
  float v12;
  char *v13;

  if (*(_BYTE *)(a1 + 228))
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (*(_QWORD *)(a1 + 88) >= a5)
      v10 = a5;
    else
      v10 = *(_QWORD *)(a1 + 88);
    v11 = DspLib::meanSquare((const float *)(a4 + 4 * a5 - 4 * v10), v10);
    v12 = *(float *)(a1 + 120);
    *(_BYTE *)(a1 + 104) = v11 < v12;
    if (v11 >= v12 && !*(_BYTE *)(a1 + 125))
    {
      v13 = (char *)a3 + *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v13;
      *(_BYTE *)(a1 + 125) = (unint64_t)v13 >= a5;
    }
    DspLib::PilotToneV2::PilotTone::addPilotTone(a1, a2, a3, *(_QWORD *)(a1 + 232), (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2, *(_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2);
  }
}

void DspLib::PilotToneV2::PilotTone::addPilotTone(uint64_t a1, float *a2, float **a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(_BYTE *)(a1 + 256))
    DspLib::PilotToneV2::PilotTone::processAdaptivePilotTone(a1, a2, a3, a4, a5);
  else
    DspLib::PilotToneV2::PilotTone::processStaticPilotTone(a1, (uint64_t)a2, (vDSP_Length)a3, a4, a5, a6, a7);
}

uint64_t DspLib::PilotToneV2::PilotTone::status(uint64_t result, uint64_t a2)
{
  float v2;
  int v3;

  v2 = *(double *)(result + 176);
  *(float *)a2 = v2;
  *(float *)(a2 + 4) = (float)*(unsigned int *)(result + 172);
  if (*(_BYTE *)(result + 228))
    v3 = *(_DWORD *)(result + 144);
  else
    v3 = 925353388;
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

void DspLib::PilotToneV2::PilotTone::processAdaptivePilotTone(uint64_t a1, float *a2, float **a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v10 = MEMORY[0x1E0C80A78](a1);
    v12 = (float *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    v13 = 0;
    v14 = *(_QWORD *)(v10 + 96);
    do
    {
      if (a5 - v14 >= (unint64_t)a3 - v13)
        v15 = (char *)a3 - v13;
      else
        v15 = (char *)(a5 - v14);
      if (v15)
        memmove(&v12[v13], (const void *)(a4 + 4 * v14), 4 * (_QWORD)v15);
      if ((unint64_t)&v15[v14] >= a5)
        v14 = 0;
      else
        v14 += (uint64_t)v15;
      *(_QWORD *)(a1 + 96) = v14;
      v13 += (unint64_t)v15;
    }
    while (v13 < (unint64_t)a3);
    if (*(_BYTE *)(a1 + 104))
    {
      v16 = 0.00001;
    }
    else
    {
      v16 = DspLib::rms(a2, (vDSP_Length)a3);
      if (v16 < 0.00001)
        v16 = 0.00001;
    }
    if (*(float ***)(a1 + 152) == a3)
    {
      v17 = *(float *)(a1 + 260);
      v18 = *(float *)(a1 + 264);
    }
    else
    {
      v19 = (double)(unint64_t)a3 / *(double *)(a1 + 80);
      v17 = expf(-1.0 / (float)((float)(v19 * 7.5) / 1000.0));
      *(float *)(a1 + 260) = v17;
      v18 = expf(-1.0 / (float)((float)(v19 * 30.0) / 1000.0));
      *(float *)(a1 + 264) = v18;
      *(_QWORD *)(a1 + 152) = a3;
    }
    v20 = v16 + (float)(v17 * (float)(*(float *)(a1 + 136) - v16));
    v21 = v16 + (float)(v18 * (float)(*(float *)(a1 + 140) - v16));
    *(float *)(a1 + 136) = v20;
    *(float *)(a1 + 140) = v21;
    v22 = *(float *)(a1 + 268) * (float)((float)((float)(v21 - v20) / v16) * 100.0);
    if (v22 <= 1.0)
      v23 = v22;
    else
      v23 = 1.0;
    v24 = v22 < 0.0;
    v25 = 0.0;
    if (v24)
      v23 = 0.0;
    v26 = (float)(v18 * (float)(1.0 - (float)(v23 * v23))) + (float)((float)(v23 * v23) * v17);
    *(float *)(a1 + 272) = v26;
    v27 = (float)(v16 * *(float *)(a1 + 224))
        + (float)(v26 * (float)(*(float *)(a1 + 144) - (float)(v16 * *(float *)(a1 + 224))));
    *(float *)(a1 + 144) = v27;
    if (v27 >= 0.0)
    {
      v28 = 144;
      if (*(float *)(a1 + 276) < v27)
        v28 = 276;
      v25 = *(float *)(a1 + v28);
      *(float *)(a1 + 144) = v25;
      if (v25 >= 0.0001)
      {
        v29 = 0;
        *(_QWORD *)(a1 + 160) = 0;
LABEL_31:
        if (v29 >= (unint64_t)(*(double *)(a1 + 80) * 0.0399999991))
        {
          *(_QWORD *)(a1 + 96) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 56));
        }
        else
        {
          DspLib::multiply(v12, (vDSP_Length)a3, v12, v25);
          DspLib::Biquad::Filter::process((_QWORD *)(a1 + 8), (uint64_t)v12, (uint64_t)a3, (uint64_t)v12, a3);
          DspLib::add(a2, (vDSP_Length)a3, v12);
        }
        return;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 144) = 0;
    }
    v29 = (unint64_t)a3 + *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v29;
    goto LABEL_31;
  }
}

void DspLib::PilotToneV2::PilotTone::processStaticPilotTone(uint64_t a1, uint64_t a2, vDSP_Length a3, uint64_t a4, vDSP_Length a5, uint64_t a6, uint64_t a7)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  vDSP_Length v17;
  uint64_t v18;
  vDSP_Length v19;
  vDSP_Length v20;
  int v21;
  vDSP_Length v22;
  uint64_t v23;
  vDSP_Length v24;

  if (a3)
  {
    v14 = 0;
    v15 = a7 - 1;
    do
    {
      if (*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 124) || !*(_BYTE *)(a1 + 125))
      {
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 216);
        *(_BYTE *)(a1 + 125) = 0;
        v16 = *(_QWORD *)(a1 + 112);
        if (v16 >= v15)
        {
          *(_BYTE *)(a1 + 124) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_DWORD *)(a1 + 144) = 925353388;
          return;
        }
        if (a7 - v16 >= a3)
          v17 = a3;
        else
          v17 = a7 - v16;
        v18 = *(_QWORD *)(a1 + 96);
        if (a5 - v18 >= v17)
          v19 = v17;
        else
          v19 = a5 - v18;
        if (v19 == -1)
          v20 = a5 - v18;
        else
          v20 = v19;
        if (v19 == -1)
          v21 = a3 - v14;
        else
          v21 = v19;
        DspLib::multiplyAccumulate((float *)(a2 + 4 * v14), v21, (const float *)(a4 + 4 * v18), v20, (const float *)(a6 + 4 * v16));
        *(_QWORD *)(a1 + 112) += v19;
        *(_BYTE *)(a1 + 124) = 1;
        *(_QWORD *)(a1 + 128) = 0;
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 96);
        if (a5 - v23 >= a3 - v14)
          v19 = a3 - v14;
        else
          v19 = a5 - v23;
        if (v19 == -1)
          v24 = a3 - v14;
        else
          v24 = v19;
        DspLib::add((float *)(a2 + 4 * v14), v24, (const float *)(a4 + 4 * v23));
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 220);
        *(_QWORD *)(a1 + 112) = 0;
        *(_BYTE *)(a1 + 124) = 0;
        *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 184);
      }
      v22 = *(_QWORD *)(a1 + 96) + v19;
      if (v22 >= a5)
        v22 = 0;
      *(_QWORD *)(a1 + 96) = v22;
      v14 += v19;
    }
    while (v14 < a3);
  }
}

uint64_t DspLib::PilotToneV2::pilotToneBestFftBinFit(DspLib::PilotToneV2 *this, float a2, float a3)
{
  float v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  BOOL v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  unsigned int v16;

  v4 = a3 * 0.00048828;
  v5 = vcvtas_u32_f32(a2 / (float)(a3 * 0.00048828));
  if (v5 >= 0x3FF)
    v5 = 1023;
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  if (fmodf(a3, v4 * (float)v6) > 0.5)
  {
    if (v6 >= 3)
    {
      v10 = v6;
      do
      {
        v8 = v4 * (float)v10;
        v11 = a3 - (float)(v8 * floorf(a3 / v8));
        v9 = v11 >= 0.5;
        v12 = v10 + 1;
        if (v11 < 0.5)
          break;
        v13 = v10 - 2;
        ++v10;
      }
      while (v13 < 0x3FE);
      v7 = v12 - 1;
    }
    else
    {
      v7 = v6 - 1;
      v8 = 0.0;
      v9 = 1;
    }
    v14 = v6;
    while (v14 - 1023 >= 0xFFFFFC02)
    {
      v15 = v4 * (float)v14--;
      if ((float)(a3 - (float)(v15 * floorf(a3 / v15))) < 0.5)
      {
        v16 = v14 + 1;
        if (vabds_f32(v4 * (float)v6, v8) >= vabds_f32(v4 * (float)v6, v15))
          v7 = v16;
        if (v9)
          return v6;
        else
          return v7;
      }
    }
  }
  return v6;
}

BOOL DspLib::ToneMeister::Parameters::filterStateIsEnabled(DspLib::ToneMeister::Parameters *this)
{
  return this != 0;
}

unint64_t DspLib::ToneMeister::Parameters::filterStateIsActive(unint64_t this)
{
  return (this >> 1) & 1;
}

BOOL DspLib::ToneMeister::Parameters::isFilterParameter(DspLib::ToneMeister::Parameters *this)
{
  return (unint64_t)this - 16 < 0x1F4;
}

uint64_t DspLib::ToneMeister::Parameters::filterParameter(DspLib::ToneMeister::Parameters *this)
{
  return this - 10 * (((unint64_t)this - 16) / 0xA) - 16;
}

uint64_t DspLib::ToneMeister::Parameters::toneMeisterParameter(DspLib::ToneMeister::Parameters *this, int a2)
{
  return (a2 + 10 * (_DWORD)this + 16);
}

float DspLib::ToneMeister::Parameters::filterCenterFrequency(float *a1)
{
  unsigned int v1;
  int v2;

  v1 = a1[1];
  if (v1 > 0x15)
    abort();
  v2 = 1 << v1;
  if ((v2 & 0x17FDFE) != 0)
    return a1[3];
  if ((v2 & 0x280200) != 0)
    return 1000.0;
  return sqrtf(a1[4] * a1[5]);
}

uint64_t DspLib::ToneMeister::Parameters::automationParameterForSlot(DspLib::ToneMeister::Parameters *this, uint64_t a2)
{
  return a2 + 10 * (_QWORD)this + 518;
}

BOOL DspLib::ToneMeister::Parameters::isAutomatedFilterStateParameter(DspLib::ToneMeister::Parameters *this)
{
  unint64_t v1;

  if ((unint64_t)this - 518 > 0x63)
    return 0;
  HIDWORD(v1) = -858993459 * ((_BYTE)this - 6) + 858993459;
  LODWORD(v1) = HIDWORD(v1);
  return (v1 >> 1) < 0x1999999A;
}

float DspLib::ToneMeister::Parameters::automatedGain(float *a1, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v3 = a1[2];
  v4 = 0.0;
  if (v3 < a2)
  {
    v5 = a1[3];
    if (v5 <= a2)
    {
      v8 = a1[4];
    }
    else
    {
      if (a1[6] < 0.5)
      {
        v6 = (float)(a2 - v3) / (float)(v5 - v3);
        v7 = a1[4] - a3;
        return v6 * v7;
      }
      v10 = a1[7];
      v9 = a1[8];
      if (v10 >= a2)
      {
        v6 = (float)(a2 - v3) / (float)(v10 - v3);
        v7 = v9 - a3;
        return v6 * v7;
      }
      v8 = v9 + (float)((float)((float)(a2 - v10) / (float)(v5 - v10)) * (float)(a1[4] - v9));
    }
    return v8 - a3;
  }
  return v4;
}

float DspLib::ToneMeister::Parameters::automatedFrequency(float *a1, float a2, float a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v4 = a1[2];
  v5 = 1.0;
  if (v4 >= a2)
    return v5;
  v6 = a1[3];
  if (v6 <= a2)
  {
    v8 = a1[5];
    return v8 / a3;
  }
  if (a1[6] >= 0.5)
  {
    v9 = a1[7];
    v10 = a1[9];
    if (v9 >= a2)
    {
      v7 = (float)((float)(a2 - v4) / (float)(v9 - v4)) * logf(v10 / a3);
      return expf(v7);
    }
    v11 = (float)(a2 - v9) / (float)(v6 - v9);
    v12 = logf(a1[5] / v10);
    v8 = v10 * expf(v11 * v12);
    return v8 / a3;
  }
  v7 = (float)((float)(a2 - v4) / (float)(v6 - v4)) * logf(a1[5] / a3);
  return expf(v7);
}

BOOL DspLib::ToneMeister::Parameters::findAutomationForFilter@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  float *v7;
  unint64_t v8;
  float v9;

  LODWORD(a4) = vcvtas_u32_f32(fmaxf(*(float *)(a2 + 2072), 0.0));
  if (a4 == a1)
  {
    v5 = 0;
    result = 1;
    if (a3)
LABEL_3:
      *a3 = v5;
  }
  else
  {
    v7 = (float *)(a2 + 2112);
    v8 = -1;
    do
    {
      if (v8 == 8)
        return 0;
      v9 = *v7;
      v7 += 10;
      LODWORD(v4) = vcvtas_u32_f32(fmaxf(v9, 0.0));
      ++v8;
    }
    while (v4 != a1);
    result = v8 < 9;
    v5 = v8 + 1;
    if (a3)
      goto LABEL_3;
  }
  return result;
}

BOOL DspLib::ToneMeister::Parameters::isFilterFrequencyParameter(DspLib::ToneMeister::Parameters *this, int a2)
{
  if (this == (DspLib::ToneMeister::Parameters *)3 || !a2 && (unint64_t)this - 4 < 3)
    return 1;
  return this == (DspLib::ToneMeister::Parameters *)4 && a2 == 2;
}

uint64_t DspLib::ToneMeister::Parameters::categoryOfFilterType(DspLib::ToneMeister::Parameters *this)
{
  if ((unint64_t)this - 8 > 0xD)
    return 0;
  else
    return dword_1B6629D14[(_QWORD)this - 8];
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasQuality(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this < 0x11) & (0x1FD62u >> (char)this);
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasGain(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this < 0x16) & (0x2F9AA7u >> (char)this);
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasOrder(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this < 0x15) & (0x100118u >> (char)this);
}

uint64_t DspLib::ToneMeister::Parameters::filterTypeHasFrequency(DspLib::ToneMeister::Parameters *this)
{
  return ((unint64_t)this > 0x15) | (0x17FDFFu >> (char)this) & 1;
}

uint64_t DspLib::ToneMeister::Parameters::dynamicFilterParameter(DspLib::ToneMeister::Parameters *this, int a2)
{
  return (3 * (_DWORD)this + a2 + 618);
}

BOOL DspLib::isEqual(DspLib *this, double a2, double a3, double a4)
{
  if (a2 != 0.0)
    a3 = (a3 - a2) / a2;
  return fabs(a3) * 100.0 <= a4;
}

float DspLib::sign(DspLib *this, double a2)
{
  float v2;
  float result;

  if (a2 >= 0.0)
    v2 = 1.0;
  else
    v2 = -1.0;
  if (a2 == 0.0)
    v2 = 0.0;
  if (a2 >= 0.0)
    result = 1.0;
  else
    result = -1.0;
  if (!(_DWORD)this)
    return v2;
  return result;
}

float DspLib::dB2Amp(DspLib *this, float a2)
{
  return expf(a2 * 0.11513);
}

void DspLib::dB2Amp(float *__C, vDSP_Length __N)
{
  int v2;
  int v4;
  float __B;

  v2 = __N;
  __B = 0.11513;
  vDSP_vsmul(__C, 1, &__B, __C, 1, __N);
  v4 = v2;
  vvexpf(__C, __C, &v4);
}

void DspLib::multiply(float *__C, vDSP_Length __N, float a3)
{
  float __B;

  __B = a3;
  vDSP_vsmul(__C, 1, &__B, __C, 1, __N);
}

float DspLib::dB2Power(DspLib *this, float a2)
{
  return expf(a2 * 0.23026);
}

float DspLib::amp2dB(DspLib *this, float a2)
{
  return log10f(a2) * 20.0;
}

float DspLib::amp2dBSafe(DspLib *this, float a2, float a3)
{
  return log10f(fabsf(a2) + a3) * 20.0;
}

void DspLib::amp2dB(float *__C, vDSP_Length __N, float a3)
{
  float __B;

  __B = a3;
  vDSP_vdbcon(__C, 1, &__B, __C, 1, __N, 1u);
}

void DspLib::amp2dBSafe(float *__C, vDSP_Length __N, float a3)
{
  float __B;
  float v7;

  vDSP_vabs(__C, 1, __C, 1, __N);
  __B = a3;
  vDSP_vsadd(__C, 1, &__B, __C, 1, __N);
  v7 = 1.0;
  vDSP_vdbcon(__C, 1, &v7, __C, 1, __N, 1u);
}

void DspLib::abs(float *__C, vDSP_Length __N)
{
  vDSP_vabs(__C, 1, __C, 1, __N);
}

void DspLib::add(float *__C, vDSP_Length __N, float a3)
{
  float __B;

  __B = a3;
  vDSP_vsadd(__C, 1, &__B, __C, 1, __N);
}

void DspLib::amp2dBSafe(_QWORD *a1, float a2)
{
  uint64_t v4;
  unsigned int v5;

  if (a1[1])
  {
    v4 = 0;
    v5 = 1;
    do
    {
      DspLib::amp2dBSafe(*(float **)(*a1 + 8 * v4), a1[2], a2);
      v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

float DspLib::power2dBSafe(DspLib *this, float a2, float a3)
{
  return log10f(fabsf(a2) + a3) * 10.0;
}

void DspLib::power2dB(float *__C, vDSP_Length __N, float a3)
{
  float __B;

  __B = a3;
  vDSP_vdbcon(__C, 1, &__B, __C, 1, __N, 0);
}

double DspLib::bark2Hz(DspLib *this, double a2)
{
  double v2;
  double v3;

  if (a2 < 2.0)
  {
    v2 = a2 + -0.3;
    v3 = 0.85;
LABEL_5:
    a2 = v2 / v3;
    return (a2 + 0.53) * 1960.0 / (26.28 - a2);
  }
  if (a2 > 20.1)
  {
    v2 = a2 + 4.422;
    v3 = 1.22;
    goto LABEL_5;
  }
  return (a2 + 0.53) * 1960.0 / (26.28 - a2);
}

float DspLib::sum(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_sve(a1, 1, &__C, __N);
  return __C;
}

BOOL DspLib::isFinite(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  const float *v4;
  vDSP_Length v5;
  _BOOL8 result;
  float __C;

  if (!a1[1])
    return 1;
  v2 = 0;
  v3 = 1;
  do
  {
    v4 = *(const float **)(*a1 + 8 * v2);
    v5 = a1[2];
    __C = 0.0;
    vDSP_sve(v4, 1, &__C, v5);
    result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
      break;
    v2 = v3;
  }
  while (a1[1] > (unint64_t)v3++);
  return result;
}

float DspLib::maxMagnitude(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_maxmgv(a1, 1, &__C, __N);
  return __C;
}

BOOL DspLib::isSilent(__int128 *a1, float a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  return DspLib::maxMagnitude(&v3) < a2;
}

float DspLib::maxMagnitude(_QWORD *a1)
{
  uint64_t v2;
  float v3;
  unsigned int v4;
  const float *v5;
  vDSP_Length v6;
  float __C;

  if (!a1[1])
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  v4 = 1;
  do
  {
    v5 = *(const float **)(*a1 + 8 * v2);
    v6 = a1[2];
    __C = 0.0;
    vDSP_maxmgv(v5, 1, &__C, v6);
    if (v3 < __C)
      v3 = __C;
    v2 = v4;
  }
  while (a1[1] > (unint64_t)v4++);
  return v3;
}

float DspLib::copyWithStrides(DspLib *this, const float *a2, char *__dst, float *a4, unint64_t a5)
{
  DspLib *v5;
  float result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  DspLib *v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unsigned int v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  DspLib *v33;
  int *v34;
  int v35;
  int *v36;
  int v37;
  int *v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;

  v5 = this;
  if ((_DWORD)a2 == 1)
  {
    if ((_DWORD)a4 == 1)
    {
      memcpy(__dst, this, 4 * a5);
    }
    else
    {
      if (a5 >= 4)
      {
        v8 = 0;
        v21 = 4 * a4;
        do
        {
          v22 = __dst;
          result = *(float *)v5;
          v23 = *((_DWORD *)v5 + 1);
          v24 = *((_DWORD *)v5 + 2);
          v25 = *((_DWORD *)v5 + 3);
          *(_DWORD *)__dst = *(_DWORD *)v5;
          *(_DWORD *)&__dst[4 * a4] = v23;
          v26 = &__dst[v21 + v21];
          *(_DWORD *)v26 = v24;
          v27 = &v26[v21];
          *(_DWORD *)v27 = v25;
          v5 = (DspLib *)((char *)v5 + 16);
          v28 = v8 + 8;
          v8 += 4;
          __dst = &v27[v21];
        }
        while (v28 <= a5);
        __dst = &v22[16 * a4];
      }
      else
      {
        v8 = 0;
      }
      if (v8 < a5)
      {
        v29 = v8 + 1;
        do
        {
          v30 = *(float *)v5;
          v5 = (DspLib *)((char *)v5 + 4);
          result = v30;
          *(float *)__dst = v30;
          v31 = v29++;
          __dst += 4 * a4;
        }
        while (v31 < a5);
      }
    }
  }
  else if ((_DWORD)a4 == 1)
  {
    if (a5 >= 4)
    {
      v7 = 0;
      v10 = a2;
      do
      {
        v11 = v5;
        result = *(float *)v5;
        v12 = (int *)((char *)v5 + v10 * 4);
        v13 = *v12;
        v14 = &v12[v10];
        v15 = *v14;
        v16 = &v14[v10];
        v17 = *v16;
        *(float *)__dst = result;
        *((_DWORD *)__dst + 1) = v13;
        *((_DWORD *)__dst + 2) = v15;
        *((_DWORD *)__dst + 3) = v17;
        __dst += 16;
        v18 = v7 + 8;
        v7 += 4;
        v5 = (DspLib *)&v16[v10];
      }
      while (v18 <= a5);
      v5 = (DspLib *)((char *)v11 + 16 * a2);
    }
    else
    {
      v7 = 0;
    }
    if (v7 < a5)
    {
      v19 = v7 + 1;
      do
      {
        result = *(float *)v5;
        *(_DWORD *)__dst = *(_DWORD *)v5;
        __dst += 4;
        v20 = v19++;
        v5 = (DspLib *)((char *)v5 + 4 * a2);
      }
      while (v20 < a5);
    }
  }
  else
  {
    if (a5 >= 4)
    {
      v9 = 0;
      v32 = a2;
      do
      {
        v33 = v5;
        result = *(float *)v5;
        v34 = (int *)((char *)v5 + v32 * 4);
        v35 = *v34;
        v36 = &v34[v32];
        v37 = *v36;
        v38 = &v36[v32];
        v39 = *v38;
        *(float *)__dst = result;
        *(_DWORD *)&__dst[4 * a4] = v35;
        *(_DWORD *)&__dst[8 * (_DWORD)a4] = v37;
        *(_DWORD *)&__dst[12 * (_DWORD)a4] = v39;
        v40 = v9 + 8;
        v9 += 4;
        __dst += 4 * (4 * (_DWORD)a4);
        v5 = (DspLib *)&v38[v32];
      }
      while (v40 <= a5);
      v5 = (DspLib *)((char *)v33 + 16 * a2);
    }
    else
    {
      v9 = 0;
    }
    if (v9 < a5)
    {
      v41 = v9 + 1;
      do
      {
        v42 = v41;
        result = *(float *)v5;
        *(_DWORD *)__dst = *(_DWORD *)v5;
        __dst += 4 * a4;
        v5 = (DspLib *)((char *)v5 + 4 * a2);
        ++v41;
      }
      while (v42 < a5);
    }
  }
  return result;
}

float DspLib::sumOfSquares(_QWORD *a1)
{
  uint64_t v2;
  float v3;
  unsigned int v4;
  const float *v5;
  vDSP_Length v6;
  float __C;

  if (!a1[1])
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  v4 = 1;
  do
  {
    v5 = *(const float **)(*a1 + 8 * v2);
    v6 = a1[2];
    __C = 0.0;
    vDSP_svesq(v5, 1, &__C, v6);
    v3 = v3 + __C;
    v2 = v4;
  }
  while (a1[1] > (unint64_t)v4++);
  return v3;
}

void DspLib::fill(float *__C, vDSP_Length __N, float a3)
{
  float __A;

  __A = a3;
  if (__N)
    vDSP_vfill(&__A, __C, 1, __N);
}

void DspLib::fill(_QWORD *a1, float a2)
{
  unint64_t v2;
  uint64_t v5;
  unsigned int v6;
  float *v7;
  vDSP_Length v8;
  float __A;

  v2 = a1[1];
  if (v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(float **)(*a1 + 8 * v5);
      v8 = a1[2];
      __A = a2;
      if (v8)
      {
        vDSP_vfill(&__A, v7, 1, v8);
        v2 = a1[1];
      }
      v5 = v6;
    }
    while (v2 > v6++);
  }
}

void DspLib::clear(float *a1, vDSP_Length __N)
{
  vDSP_vclr(a1, 1, __N);
}

void DspLib::clear(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;

  if (a1[1])
  {
    v2 = 0;
    v3 = 1;
    do
    {
      vDSP_vclr(*(float **)(*a1 + 8 * v2), 1, a1[2]);
      v2 = v3;
    }
    while (a1[1] > (unint64_t)v3++);
  }
}

void DspLib::diracDelta(float *a1, vDSP_Length __N)
{
  vDSP_vclr(a1, 1, __N);
  *a1 = 1.0;
}

void DspLib::negate(float *__C, vDSP_Length __N)
{
  vDSP_vneg(__C, 1, __C, 1, __N);
}

void DspLib::negate(const float *a1, vDSP_Length __N, float *a3)
{
  vDSP_vneg(a1, 1, a3, 1, __N);
}

void DspLib::reverse(float *a1, vDSP_Length __N)
{
  vDSP_vrvrs(a1, 1, __N);
}

void DspLib::abs(const float *a1, vDSP_Length __N, float *a3)
{
  vDSP_vabs(a1, 1, a3, 1, __N);
}

void DspLib::abs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;

  if (a1[1])
  {
    v4 = 0;
    v5 = 1;
    do
    {
      vDSP_vabs(*(const float **)(*a1 + 8 * v4), 1, *(float **)(*a2 + 8 * v4), 1, a1[2]);
      v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

void DspLib::add(const float *a1, vDSP_Length __N, float *__C, float a4)
{
  float __B;

  __B = a4;
  vDSP_vsadd(a1, 1, &__B, __C, 1, __N);
}

void DspLib::add(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, float *a5)
{
  vDSP_vadd(a1, 1, a3, 1, a5, 1, __N);
}

void DspLib::add(float *__C, vDSP_Length __N, const float *a3)
{
  vDSP_vadd(__C, 1, a3, 1, __C, 1, __N);
}

void DspLib::add(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;

  if (a1[1])
  {
    v6 = 0;
    do
    {
      vDSP_vadd(*(const float **)(*a1 + 8 * v6), 1, *(const float **)(*a2 + 8 * v6), 1, *(float **)(*a3 + 8 * v6), 1, a1[2]);
      ++v6;
    }
    while (v6 < a1[1]);
  }
}

void DspLib::add(uint64_t *a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v6 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  v2 = *(_OWORD *)a1;
  v3 = a1[2];
  DspLib::add(&v6, &v4, &v2);
}

void DspLib::subtract(const float *__A, vDSP_Length __N, const float *__B, uint64_t a4, float *a5)
{
  vDSP_vsub(__B, 1, __A, 1, a5, 1, __N);
}

void DspLib::subtract(float *__C, vDSP_Length __N, const float *__B)
{
  vDSP_vsub(__B, 1, __C, 1, __C, 1, __N);
}

void DspLib::subtract(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;

  if (a1[1])
  {
    v4 = 0;
    v5 = 1;
    do
    {
      vDSP_vsub(*(const float **)(*a2 + 8 * v4), 1, *(const float **)(*a1 + 8 * v4), 1, *(float **)(*a1 + 8 * v4), 1, a1[2]);
      v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

void DspLib::multiply(const float *a1, vDSP_Length __N, float *__C, float a4)
{
  float __B;

  __B = a4;
  vDSP_vsmul(a1, 1, &__B, __C, 1, __N);
}

void DspLib::multiply(_QWORD *a1, _QWORD *a2, float a3)
{
  uint64_t v6;
  unsigned int v7;
  const float *v8;
  vDSP_Length v9;
  float *v10;
  float __B;

  if (a1[1])
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = *(const float **)(*a1 + 8 * v6);
      v9 = a1[2];
      v10 = *(float **)(*a2 + 8 * v6);
      __B = a3;
      vDSP_vsmul(v8, 1, &__B, v10, 1, v9);
      v6 = v7;
    }
    while (a1[1] > (unint64_t)v7++);
  }
}

void DspLib::multiply(uint64_t *a1, float a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *a1;
  v6 = *(_OWORD *)(a1 + 1);
  v3 = *(_OWORD *)a1;
  v4 = a1[2];
  v5 = v2;
  DspLib::multiply(&v5, &v3, a2);
}

void DspLib::multiply(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, float *a5)
{
  vDSP_vmul(a1, 1, a3, 1, a5, 1, __N);
}

void DspLib::multiply(float *__C, vDSP_Length __N, const float *a3)
{
  vDSP_vmul(__C, 1, a3, 1, __C, 1, __N);
}

void DspLib::multiply(_QWORD *a1, const float *__B)
{
  uint64_t v4;
  unsigned int v5;

  if (a1[1])
  {
    v4 = 0;
    v5 = 1;
    do
    {
      vDSP_vmul(*(const float **)(*a1 + 8 * v4), 1, __B, 1, *(float **)(*a1 + 8 * v4), 1, a1[2]);
      v4 = v5;
    }
    while (a1[1] > (unint64_t)v5++);
  }
}

void DspLib::multiply(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;

  if (a1[1])
  {
    v6 = 0;
    v7 = 1;
    do
    {
      vDSP_vmul(*(const float **)(*a1 + 8 * v6), 1, *(const float **)(*a2 + 8 * v6), 1, *(float **)(*a3 + 8 * v6), 1, a1[2]);
      v6 = v7;
    }
    while (a1[1] > (unint64_t)v7++);
  }
}

void DspLib::multiply(uint64_t a1, uint64_t a2, float **a3)
{
  vDSP_mmul(*(const float **)a1, 1, *(const float **)a2, 1, *a3, 1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a1 + 24));
}

void DspLib::svdiv(const float *__B, vDSP_Length __N, float *__C, float a4)
{
  float __A;

  __A = a4;
  vDSP_svdiv(&__A, __B, 1, __C, 1, __N);
}

void DspLib::svdiv(float *__B, vDSP_Length __N, float a3)
{
  float __A;

  __A = a3;
  vDSP_svdiv(&__A, __B, 1, __B, 1, __N);
}

void DspLib::divide(const float *__A, vDSP_Length __N, const float *__B, uint64_t a4, float *a5)
{
  vDSP_vdiv(__B, 1, __A, 1, a5, 1, __N);
}

void DspLib::divide(float *__C, vDSP_Length __N, const float *__B)
{
  vDSP_vdiv(__B, 1, __C, 1, __C, 1, __N);
}

void DspLib::clip(const float *a1, vDSP_Length __N, float *__D, float a4, float a5)
{
  float __C;
  float __B;

  __B = a4;
  __C = a5;
  vDSP_vclip(a1, 1, &__B, &__C, __D, 1, __N);
}

void DspLib::clip(float *__D, vDSP_Length __N, float a3, float a4)
{
  float __C;
  float __B;

  __B = a3;
  __C = a4;
  vDSP_vclip(__D, 1, &__B, &__C, __D, 1, __N);
}

void DspLib::clip(_QWORD *a1, _QWORD *a2, float a3, float a4)
{
  unint64_t v8;
  const float *v9;
  vDSP_Length v10;
  float *v11;
  float __C;
  float __B;

  if (a1[1])
  {
    v8 = 0;
    do
    {
      v9 = *(const float **)(*a1 + 8 * v8);
      v10 = a1[2];
      v11 = *(float **)(*a2 + 8 * v8);
      __C = a4;
      __B = a3;
      vDSP_vclip(v9, 1, &__B, &__C, v11, 1, v10);
      ++v8;
    }
    while (v8 < a1[1]);
  }
}

void DspLib::clip(uint64_t *a1, float a2, float a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v4 = *(_OWORD *)a1;
  v5 = a1[2];
  v6 = v3;
  DspLib::clip(&v6, &v4, a2, a3);
}

void DspLib::threshold(const float *a1, vDSP_Length __N, float *__C, float a4)
{
  float __B;

  __B = a4;
  vDSP_vthr(a1, 1, &__B, __C, 1, __N);
}

void DspLib::threshold(float *__C, vDSP_Length __N, float a3)
{
  float __B;

  __B = a3;
  vDSP_vthr(__C, 1, &__B, __C, 1, __N);
}

void DspLib::multiplyAccumulate(float *__D, int a2, const float *__A, vDSP_Length __N, const float *__B)
{
  vDSP_vma(__A, 1, __B, 1, __D, 1, __D, 1, __N);
}

void DspLib::multiplyAdd(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, const float *a5, uint64_t a6, float *a7)
{
  vDSP_vma(a1, 1, a3, 1, a5, 1, a7, 1, __N);
}

void DspLib::multiplyAccumulate(float *__C, vDSP_Length __N, const float *__A, float a4)
{
  float __B;

  __B = a4;
  vDSP_vsma(__A, 1, &__B, __C, 1, __C, 1, __N);
}

void DspLib::multiplyAdd(const float *a1, vDSP_Length __N, float *__D, float a4, float a5)
{
  float __C;
  float __B;

  __B = a4;
  __C = a5;
  vDSP_vsmsa(a1, 1, &__B, &__C, __D, 1, __N);
}

void DspLib::vmma(const float *a1, vDSP_Length a2, const float *a3, int a4, const float *a5, int a6, const float *a7, int a8, float *__E)
{
  vDSP_vmma(a1, 1, a3, 1, a5, 1, a7, 1, __E, 1, a2);
}

void DspLib::square(const float *a1, vDSP_Length __N, float *a3)
{
  vDSP_vsq(a1, 1, a3, 1, __N);
}

void DspLib::square(float *__C, vDSP_Length __N)
{
  vDSP_vsq(__C, 1, __C, 1, __N);
}

void DspLib::square(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;

  if (a1[1])
  {
    v2 = 0;
    v3 = 1;
    do
    {
      vDSP_vsq(*(const float **)(*a1 + 8 * v2), 1, *(float **)(*a1 + 8 * v2), 1, a1[2]);
      v2 = v3;
    }
    while (a1[1] > (unint64_t)v3++);
  }
}

void DspLib::sqrt(float *a1, int a2)
{
  int v2;

  v2 = a2;
  vvsqrtf(a1, a1, &v2);
}

void DspLib::poly(const float *a1, uint64_t a2, const float *a3, vDSP_Length __N, float *a5)
{
  vDSP_vpoly(a1, 1, a3, 1, a5, 1, __N, a2 - 1);
}

void DspLib::poly(_QWORD *a1, const float *__A, uint64_t a3)
{
  uint64_t v5;
  vDSP_Length v6;
  unsigned int v7;

  if (a1[1])
  {
    v5 = 0;
    v6 = a3 - 1;
    v7 = 1;
    do
    {
      vDSP_vpoly(__A, 1, *(const float **)(*a1 + 8 * v5), 1, *(float **)(*a1 + 8 * v5), 1, a1[2], v6);
      v5 = v7;
    }
    while (a1[1] > (unint64_t)v7++);
  }
}

void DspLib::vsin(const float *a1, int a2, float *a3)
{
  int v3;

  v3 = a2;
  vvsinf(a3, a1, &v3);
}

void DspLib::vsin(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  const float *v5;
  float *v6;
  int v7;

  if (a1[1])
  {
    v4 = 0;
    do
    {
      v5 = *(const float **)(*a1 + 8 * v4);
      v6 = *(float **)(*a2 + 8 * v4);
      v7 = a1[2];
      vvsinf(v6, v5, &v7);
      ++v4;
    }
    while (v4 < a1[1]);
  }
}

void DspLib::vtanh(const float *a1, int a2, float *a3)
{
  int v3;

  v3 = a2;
  vvtanhf(a3, a1, &v3);
}

void DspLib::runningSum(float *__C, vDSP_Length __N, float a3, float a4)
{
  float v6;
  float __S;
  float __B;

  __S = a3;
  v6 = a4 + (float)(a3 * *__C);
  vDSP_vrsum(__C, 1, &__S, __C, 1, __N);
  __B = v6;
  vDSP_vsadd(__C, 1, &__B, __C, 1, __N);
}

float DspLib::rms(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_rmsqv(a1, 1, &__C, __N);
  return __C;
}

float DspLib::minv(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_minv(a1, 1, &__C, __N);
  return __C;
}

float DspLib::maxv(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_maxv(a1, 1, &__C, __N);
  return __C;
}

uint64_t DspLib::maxIndex(const float *a1, vDSP_Length __N)
{
  uint64_t v3;
  vDSP_Length v4;

  LODWORD(v3) = 0;
  v4 = 0;
  vDSP_maxvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

uint64_t DspLib::maxmgvi(const float *a1, vDSP_Length __N)
{
  uint64_t v3;
  vDSP_Length v4;

  LODWORD(v3) = 0;
  v4 = 0;
  vDSP_maxmgvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

uint64_t DspLib::minmgvi(const float *a1, vDSP_Length __N)
{
  uint64_t v3;
  vDSP_Length v4;

  LODWORD(v3) = 0;
  v4 = 0;
  vDSP_minmgvi(a1, 1, (float *)&v3, &v4, __N);
  return v3;
}

void DspLib::vmax(const float *a1, vDSP_Length __N, const float *a3, uint64_t a4, float *a5)
{
  vDSP_vmax(a1, 1, a3, 1, a5, 1, __N);
}

void DspLib::vmax(float *__C, vDSP_Length __N, const float *a3)
{
  vDSP_vmax(__C, 1, a3, 1, __C, 1, __N);
}

void DspLib::vmin(float *__C, vDSP_Length __N, const float *a3)
{
  vDSP_vmin(__C, 1, a3, 1, __C, 1, __N);
}

void DspLib::vmaxmg(float *__C, vDSP_Length __N, const float *a3)
{
  vDSP_vmaxmg(__C, 1, a3, 1, __C, 1, __N);
}

void DspLib::slidingWindowMaxima(const float *a1, uint64_t a2, float *a3, vDSP_Length __N)
{
  vDSP_vswmax(a1, 1, a3, 1, __N, a2 - __N + 1);
}

void DspLib::sum(uint64_t a1, float *__A, vDSP_Length __N)
{
  float *v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = **(float ***)a1;
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 != __A && v7 != 0)
    memmove(__A, v6, 4 * v7);
  if (*(_QWORD *)(a1 + 8) >= 2uLL)
  {
    v9 = 2;
    v10 = 1;
    do
    {
      vDSP_vadd(__A, 1, *(const float **)(*(_QWORD *)a1 + 8 * v10), 1, __A, 1, __N);
      v10 = v9;
    }
    while (*(_QWORD *)(a1 + 8) > (unint64_t)v9++);
  }
}

float DspLib::sumOfSquares(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_svesq(a1, 1, &__C, __N);
  return __C;
}

float DspLib::mean(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_sve(a1, 1, &__C, __N);
  return __C / (float)__N;
}

float DspLib::median(uint64_t a1, unint64_t a2)
{
  size_t v3;
  char *v4;
  const void *v5;
  unint64_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1.0;
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  memmove(v4, v5, v3);
  std::__sort<std::__less<float,float> &,float *>();
  v6 = a2 >> 1;
  if ((a2 & 1) != 0)
    return *(float *)&v4[4 * v6];
  else
    return (float)(*(float *)&v4[4 * v6 - 4] + *(float *)&v4[4 * v6]) * 0.5;
}

float DspLib::meanSquare(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  if (!__N)
    return 0.0;
  vDSP_measqv(a1, 1, &__C, __N);
  return __C;
}

float DspLib::norm(const float *a1, vDSP_Length __N)
{
  float __C;

  __C = 0.0;
  vDSP_svesq(a1, 1, &__C, __N);
  return sqrtf(__C);
}

void DspLib::ramp(float *__C, vDSP_Length __N, int a3, float a4, float a5)
{
  double v8;
  uint64_t v9;
  double v10;
  float v11;
  float __B;
  float __A;

  __A = a4;
  if (a3)
  {
    v8 = pow((float)(a5 / a4), 1.0 / ((double)__N + -1.0));
    if (__N)
    {
      v9 = 0;
      v10 = a4;
      do
      {
        v11 = v10;
        __C[v9] = v11;
        v10 = v8 * v10;
        ++v9;
      }
      while (__N > v9);
    }
  }
  else
  {
    __B = (float)(a5 - a4) / (float)(__N - 1);
    vDSP_vramp(&__A, &__B, __C, 1, __N);
  }
}

void DspLib::makeTukeyWindow(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (a2)
  {
    v6 = 0;
    v7 = a3 * 0.5;
    v8 = 1.0 - (float)(a3 * 0.5);
    v9 = 6.28318531 / a3;
    v10 = (float)(a2 - 1);
    while (1)
    {
      v11 = (float)v6 / v10;
      if (v11 < v7)
        break;
      v13 = 1.0;
      if (v11 > v8)
      {
        v12 = (float)(v11 + -1.0) + (float)(a3 * 0.5);
        goto LABEL_7;
      }
LABEL_8:
      *(float *)(a1 + 4 * v6++) = v13;
      if (a2 <= v6)
        return;
    }
    v12 = v11 + (float)(a3 * -0.5);
LABEL_7:
    v13 = (float)(cosf(v12 * v9) + 1.0) * 0.5;
    goto LABEL_8;
  }
}

void DspLib::makeChebychevWindow(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE __dst[400];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_1B6629DF0, sizeof(__dst));
  if (a2)
  {
    v4 = 0;
    do
    {
      *(float *)(a1 + 4 * v4) = DspLib::elementAtIndexWithInterpolation((uint64_t)__dst, 100, (float)((float)v4 / (float)(a2 - 1)) * 99.0);
      ++v4;
    }
    while (a2 > v4);
  }
}

float DspLib::elementAtIndexWithInterpolation(uint64_t a1, uint64_t a2, float a3)
{
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;

  v3 = fmaxf(a3, 0.0);
  v4 = v3;
  v5 = v3 - (float)(v4 - 1);
  v6 = 2.0 - v5;
  if (v5 >= 1.0)
    v7 = v6 * (float)(v6 * (float)(v6 * 0.16667));
  else
    v7 = (float)((float)(v5 * (float)(v5 * -0.5)) * v6) + 0.66667;
  v8 = v4 + 1;
  v9 = v3 - (float)v4;
  v10 = 2.0 - v9;
  if (v9 >= 1.0)
    v11 = v10 * (float)(v10 * (float)(v10 * 0.16667));
  else
    v11 = (float)((float)(v9 * (float)(v9 * -0.5)) * v10) + 0.66667;
  v12 = v4 + 2;
  v13 = (float)v8 - v3;
  v14 = 2.0 - v13;
  if (v13 >= 1.0)
    v15 = v14 * (float)(v14 * (float)(v14 * 0.16667));
  else
    v15 = (float)((float)(v13 * (float)(v13 * -0.5)) * v14) + 0.66667;
  if (v8 >= a2 - 1)
    v8 = a2 - 1;
  v16 = (float)v12 - v3;
  v17 = 2.0 - v16;
  if (v16 >= 1.0)
    v18 = v17 * (float)(v17 * (float)(v17 * 0.16667));
  else
    v18 = (float)((float)(v16 * (float)(v16 * -0.5)) * v17) + 0.66667;
  v19 = (float)((float)(v11 * *(float *)(a1 + 4 * v4))
              + (float)(v7 * *(float *)(a1 + 4 * (((_DWORD)v4 - 1) & ~(((int)v4 - 1) >> 31)))))
      + (float)(v15 * *(float *)(a1 + 4 * v8));
  if (v12 >= a2 - 1)
    v20 = a2 - 1;
  else
    v20 = v4 + 2;
  return v19 + (float)(v18 * *(float *)(a1 + 4 * v20));
}

void DspLib::makeRaisedCosineWindow(float *__A, vDSP_Length __N)
{
  uint64_t v4;
  float v5;
  float __B;
  float __C;

  if (__N)
  {
    v4 = 0;
    do
    {
      v5 = sin((double)(v4 + 1) * 3.14159265 / (double)(__N + 1));
      __A[v4++] = v5;
    }
    while (__N > v4);
  }
  __C = 0.0;
  vDSP_sve(__A, 1, &__C, __N);
  __B = __C;
  vDSP_vsdiv(__A, 1, &__B, __A, 1, __N);
}

float *DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs(float *a1, uint64_t a2, int a3, vDSP_Length a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v7 = (2 * a3 - 1);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v19 - v9;
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v19 - v12;
  v14 = (v7 + 1) >> 1;
  *(_DWORD *)&v10[4 * v14 - 4] = 1065353216;
  if (v14 != 1)
  {
    v15 = 0;
    v16 = 4 * (v11 - 2);
    do
    {
      v17 = (float)(v15 + 1) / (float)v14;
      *(float *)&v10[4 * v15] = v17;
      *(float *)&v10[v16] = v17;
      v16 -= 4;
      ++v15;
    }
    while (v14 - 1 != v15);
  }
  DspLib::makeRaisedCosineWindow((float *)((char *)v19 - v12), a4);
  return DspLib::convolve(a1, a2, (uint64_t)v10, v7, (uint64_t)v13, a4);
}

float *DspLib::convolve(float *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v6;
  int v7;
  float v8;
  uint64_t v9;
  unint64_t v10;

  LODWORD(v6) = 0;
  v7 = 0;
  do
  {
    v8 = 0.0;
    v9 = v7;
    LODWORD(v10) = v6;
    do
    {
      v8 = v8 + (float)(*(float *)(a3 + 4 * v10) * *(float *)(a5 + 4 * v9));
      if (v9-- < 1)
        break;
      v10 = (v10 + 1);
    }
    while (a4 > v10);
    *result++ = v8;
    if (v7 + 1 < a6)
      v6 = v6;
    else
      v6 = (v6 + 1);
    if (v7 + 1 < a6)
      ++v7;
    else
      v7 = a6 - 1;
  }
  while (a4 > v6);
  return result;
}

float DspLib::makeSincWindow(float *a1, vDSP_Length a2, unsigned int a3, unsigned int a4, uint64_t a5, float a6)
{
  uint64_t v7;
  unsigned int v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  float *v17;
  float v18;
  double v19;
  float v20;
  float v21;
  _QWORD v23[2];

  v23[0] = a1;
  v23[1] = a2;
  v7 = *(_QWORD *)(a5 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = a4 * a3;
  v13 = a4 * a3 + 1;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v23);
  if ((_DWORD)v13)
  {
    v14 = 1.0 / ((double)a3 / a6);
    v15 = (double)v12 * -0.5 * v14;
    v16 = 0.0;
    v17 = a1;
    do
    {
      v18 = *v17;
      v19 = 1.0;
      if (fabs(v15) >= 0.000001)
        v19 = sin(v15 * 3.14159265) / (v15 * 3.14159265);
      v20 = v19 * v18;
      *v17++ = v20;
      v16 = v16 + v20;
      v15 = v14 + v15;
      --v13;
    }
    while (v13);
  }
  else
  {
    v16 = 0.0;
  }
  v21 = 1.0 / v16;
  *(float *)v23 = v21;
  vDSP_vsmul(a1, 1, (const float *)v23, a1, 1, a2);
  return (float)((float)a3 * (float)a4) * 0.5;
}

void DspLib::makeSymmetricHannWindow(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  double v5;
  float v6;

  if (a2)
  {
    v4 = 0;
    v5 = (double)(a2 - 1);
    do
    {
      v6 = cos((double)v4 * 6.28318531 / v5) * -0.5 + 0.5;
      *(float *)(a1 + 4 * v4++) = v6;
    }
    while (a2 > v4);
  }
}

void DspLib::makeSecondHalfHannWindow(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  double v5;
  float v6;

  if (a2)
  {
    v4 = 0;
    v5 = (float)((float)(a2 - 1) + (float)(a2 - 1));
    do
    {
      v6 = cos((double)(a2 + v4) * 6.28318531 / v5) * -0.5 + 0.5;
      *(float *)(a1 + 4 * v4++) = v6;
    }
    while (a2 > v4);
  }
}

void DspLib::makePeriodicHannWindow(_DWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  unsigned int v7;
  uint64_t v8;

  *a1 = 0;
  v4 = a2 >> 1;
  if (a2 >= 2)
  {
    v5 = 1;
    do
    {
      v6 = cos((double)v5 * 6.28318531 / (double)a2) * -0.5 + 0.5;
      *(float *)&a1[v5] = v6;
      v5 = (v5 + 1);
    }
    while (v4 >= v5);
  }
  if (a2 - v4 >= 2)
  {
    v7 = 2;
    v8 = 1;
    do
    {
      a1[v8 + v4] = a1[v4 - v8];
      v8 = v7;
    }
    while (a2 - v4 > v7++);
  }
}

float DspLib::dotProduct(const float *a1, vDSP_Length __N, const float *a3)
{
  float __C;

  __C = 0.0;
  vDSP_dotpr(a1, 1, a3, 1, &__C, __N);
  return __C;
}

uint64_t DspLib::linSpace(uint64_t result, unint64_t a2, float a3, float a4)
{
  uint64_t v4;
  float v5;

  if (a2)
  {
    v4 = 0;
    v5 = (float)(a4 - a3) / (float)(a2 - 1);
    do
    {
      *(float *)(result + 4 * v4) = a3 + (float)((float)v4 * v5);
      ++v4;
    }
    while (a2 > v4);
  }
  return result;
}

float DspLib::createInterpolationTable(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  uint64_t v5;
  float result;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  int v11;
  float v12;
  int v13;
  float32x4_t v14;

  if (a4 >= 4 * a2)
  {
    v4 = a2 - 1;
    if ((int)a2 >= 1)
    {
      v5 = 0;
      result = 0.5;
      do
      {
        if ((int)v5 <= 1)
          v7 = 1;
        else
          v7 = v5;
        v8 = *(float *)(a1 + 4 * (v7 - 1));
        v9 = *(float *)(a1 + 4 * v5);
        v10 = v5 + 1;
        if (v4 >= (int)v5 + 1)
          v11 = v5 + 1;
        else
          v11 = a2 - 1;
        v12 = *(float *)(a1 + 4 * v11);
        v13 = v5 + 2;
        if (v4 < (int)v5 + 2)
          v13 = a2 - 1;
        v14.f32[0] = v9 * 0.5;
        v14.f32[1] = -v9;
        *(float32x2_t *)&v14.u32[2] = vmul_n_f32((float32x2_t)0x3F2AAAAB00000000, v9);
        *(float32x4_t *)(a3 + 16 * v5++) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v14, (float32x4_t)xmmword_1B6629DC0, v8), (float32x4_t)xmmword_1B6629DD0, v12), (float32x4_t)xmmword_1B6629DE0, *(float *)(a1 + 4 * v13));
      }
      while (a2 != v10);
    }
  }
  return result;
}

void DspLib::elementAtIndexWithInterpolation(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4, uint64_t a5, vDSP_Length a6)
{
  uint64_t v10;
  float *v11;
  const float *v12;
  vDSP_Length v13;
  uint64_t v14;
  vDSP_Length v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  vDSP_Length v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v10 = 4 * a6;
    MEMORY[0x1E0C80A78](a1);
    v11 = (float *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    vDSP_vfrac(v12, 1, v11, 1, v13);
    MEMORY[0x1E0C80A78](v14);
    vDSP_vfixu32(a3, 1, (unsigned int *)v11, 1, a6);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = *v11;
LABEL_3:
    v20 = v16;
    do
    {
      if (LODWORD(v11[v15]) != LODWORD(v19))
      {
        v21 = v18;
        v18 = 1;
        vDSP_vpoly((const float *)(a1 + 4 * (4 * LODWORD(v19))), 1, &v11[v17], 1, (float *)(a5 + 4 * v17), 1, v21, 3uLL);
        v19 = v11[v15];
        v15 = v20 + 1;
        v16 = v20 + 1;
        v17 = v20;
        if (a6 > v15)
          goto LABEL_3;
        goto LABEL_10;
      }
      ++v18;
      v15 = ++v20;
    }
    while (a6 > v20);
    v20 = v17;
    if (!v18)
      return;
LABEL_10:
    vDSP_vpoly((const float *)(a1 + 4 * (4 * LODWORD(v19))), 1, &v11[v20], 1, (float *)(a5 + 4 * v20), 1, v18, 3uLL);
  }
}

float DspLib::inv3x3real(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float result;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = (float)(v4 * v8) - (float)(v5 * v7);
  v10 = (float)(v3 * v8) - (float)(v5 * v6);
  v11 = (float)(v3 * v7) - (float)(v4 * v6);
  v12 = (float)(v1 * v8) - (float)(v2 * v7);
  v13 = (float)(*a1 * v8) - (float)(v2 * v6);
  v14 = (float)(*a1 * v7) - (float)(v1 * v6);
  v15 = (float)(v1 * v5) - (float)(v2 * v4);
  v16 = (float)(*a1 * v5) - (float)(v2 * v3);
  v17 = (float)(*a1 * v4) - (float)(v1 * v3);
  v18 = 1.0 / (float)((float)((float)(*a1 * v9) - (float)(v10 * v1)) + (float)(v2 * v11));
  *a1 = v9 * v18;
  a1[1] = -(float)(v12 * v18);
  a1[2] = v15 * v18;
  a1[3] = -(float)(v10 * v18);
  a1[4] = v13 * v18;
  a1[5] = -(float)(v16 * v18);
  a1[6] = v11 * v18;
  a1[7] = -(float)(v14 * v18);
  result = v17 * v18;
  a1[8] = result;
  return result;
}

uint64_t DspLib::matNxNInv(uint64_t a1)
{
  __CLPK_real **v2;
  uint64_t v3;
  __CLPK_integer *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[12];
  __CLPK_integer __lwork;
  __CLPK_integer __lda;
  __CLPK_integer __info;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __lda = *(_QWORD *)(a1 + 16);
  __info = -1;
  v2 = (__CLPK_real **)MEMORY[0x1E0C80A78](a1);
  v4 = (__CLPK_integer *)&v8[-((v3 + 15) & 0x7FFFFFFF0)];
  v5 = sgetrf_(&__lda, &__lda, *v2, &__lda, v4, &__info);
  __lwork = __lda * __lda;
  MEMORY[0x1E0C80A78](v5);
  sgetri_(&__lda, *(__CLPK_real **)a1, &__lda, v4, (__CLPK_real *)&v8[-v6], &__lwork, &__info);
  return __info;
}

float DspLib::peakiness(const float *a1, vDSP_Length __N)
{
  float v4;
  float __C;
  float v7;

  __C = 0.0;
  vDSP_sve(a1, 1, &__C, __N);
  v4 = __C;
  v7 = 0.0;
  vDSP_svesq(a1, 1, &v7, __N);
  return (float)(sqrtf((float)__N) * sqrtf(v7)) / (float)(v4 + 0.000000001);
}

void DspLib::waterFillingSolution(uint64_t a1, vDSP_Length a2, float a3)
{
  const void *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unsigned int v9;
  float v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v7 = (float *)((char *)v12 - v6);
  if (a2)
  {
    memmove((char *)v12 - v6, v5, 4 * a2);
    vDSP_vsort(v7, a2, 1);
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = v7[v8];
      if ((float)(v10 * (float)(a2 - v8)) >= a3)
        break;
      a3 = a3 - v10;
      v8 = v9;
    }
    while (a2 > v9++);
  }
  else
  {
    vDSP_vsort((float *)((char *)v12 - v6), 0, 1);
  }
}

uint64_t DspLib::AverageRms::initialize(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_BYTE *)(this + 8) = 1;
  return this;
}

uint64_t DspLib::AverageRms::configure(uint64_t result, int a2, double a3, float a4)
{
  float v4;

  *(float *)(result + 12) = a4;
  *(double *)(result + 16) = a3;
  *(_DWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 40) = 0;
  v4 = -100.0;
  if (a2 != 1)
    v4 = 0.0;
  *(float *)(result + 32) = v4;
  return result;
}

uint64_t DspLib::AverageRms::reset(uint64_t this)
{
  float v1;

  *(_QWORD *)(this + 40) = 0;
  v1 = -100.0;
  if (*(_DWORD *)(this + 48) != 1)
    v1 = 0.0;
  *(float *)(this + 32) = v1;
  return this;
}

void DspLib::AverageRms::process(uint64_t a1, uint64_t a2, vDSP_Length a3)
{
  uint64_t v5;
  float *v6;
  const float *v7;
  float v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    MEMORY[0x1E0C80A78](a1);
    v6 = (float *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    HIDWORD(v11) = *(_DWORD *)(a1 + 12);
    vDSP_vsmul(v7, 1, (const float *)&v11 + 1, v6, 1, a3);
    HIDWORD(v11) = 0;
    vDSP_rmsqv(v6, 1, (float *)&v11 + 1, a3);
    v8 = *((float *)&v11 + 1);
    if (*(_DWORD *)(a1 + 48) == 1)
      v8 = log10f(*((float *)&v11 + 1) + 0.00001) * 20.0;
    if (a3 == *(_QWORD *)(a1 + 40))
    {
      v9 = *(double *)(a1 + 24);
    }
    else
    {
      v9 = exp(-1.0 / (*(double *)(a1 + 16) * 1000.0 * ceil(*(double *)a1 / (double)a3) / 1000.0));
      *(double *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 40) = a3;
    }
    v10 = v9;
    *(float *)(a1 + 32) = v8 + (float)(v10 * (float)(*(float *)(a1 + 32) - v8));
  }
}

void DspLib::SideChain::Algorithm::initialize(DspLib::SideChain::Algorithm *this, double a2, unint64_t a3)
{
  float v6;

  std::vector<float>::resize((uint64_t)this, a3);
  std::vector<float>::resize((uint64_t)this + 24, a3);
  *((_BYTE *)this + 48) = 1;
  v6 = a2;
  *((float *)this + 13) = v6;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::SideChain::Algorithm *)((char *)this + 792), 1uLL, v6, 1uLL);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::SideChain::Algorithm *)((char *)this + 896), 1uLL, *((float *)this + 13), 1uLL);
  *((_OWORD *)this + 69) = xmmword_1B6629F80;
  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 896, 0x41A0000000000000uLL, (double *)0x3F34FDF400000000, 0, 0x41uLL);
}

void DspLib::SideChain::Algorithm::uninitialize(DspLib::SideChain::Algorithm *this)
{
  *((_BYTE *)this + 48) = 0;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::SideChain::Algorithm *)((char *)this + 792));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::SideChain::Algorithm *)((char *)this + 896));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::SideChain::Algorithm *)((char *)this + 1000));
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
}

void DspLib::SideChain::Algorithm::reset(DspLib::SideChain::Algorithm *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::SideChain::Algorithm *)((char *)this + 840));
  DspLib::Biquad::SetupWrapper::reset((DspLib::SideChain::Algorithm *)((char *)this + 944));
  DspLib::Biquad::Filter::initializeStates((DspLib::SideChain::Algorithm *)((char *)this + 896), 1.0);
  DspLib::Biquad::SetupWrapper::reset((DspLib::SideChain::Algorithm *)((char *)this + 1048));
  *((_DWORD *)this + 277) = 0;
  *((_DWORD *)this + 279) = 0;
  *((_DWORD *)this + 190) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_QWORD *)this + 98) = 0;
}

void DspLib::SideChain::Algorithm::setParameters(uint64_t a1, unint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v7;

  DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 792, a2, a3, 0, 0x41uLL);
  if (*(_BYTE *)(a4 + 12))
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)(a1 + 1000));
  else
    DspLib::SideChain::Algorithm::configureHilbertTransform(a1, a2, *((float *)&a2 + 1));
  DspLib::SideChain::Algorithm::createGainTable((DspLib *)a1, *(float *)a4, *(float *)(a4 + 4), *(float *)(a4 + 8));
  v7 = *(_QWORD *)(a4 + 12);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a4 + 20);
  *(_QWORD *)(a1 + 764) = v7;
}

void DspLib::SideChain::Algorithm::configureHilbertTransform(uint64_t a1, int a2, float a3)
{
  float v4;
  uint64_t v5;
  float v6;
  float v7;

  if (a2 == 8)
  {
    v4 = 20.0;
  }
  else
  {
    if (a2 != 9)
      goto LABEL_6;
    v4 = 20000.0;
  }
  a3 = sqrtf(a3 * v4);
LABEL_6:
  v5 = a1 + 1000;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 1000), 2uLL, *(float *)(a1 + 52), 1uLL);
  v6 = 10000.0;
  if (a3 <= 10000.0)
    v6 = a3;
  if (a3 >= 40.0)
    v7 = v6;
  else
    v7 = 40.0;
  DspLib::Biquad::ParametricFilter::setParametricEQ(v5, ((unint64_t)COERCE_UNSIGNED_INT(v7 * 0.5) << 32) | 0xB, (double *)0x3EBD70A400000000, 0, 0);
  DspLib::Biquad::ParametricFilter::setParametricEQ(v5, ((unint64_t)COERCE_UNSIGNED_INT(v7 + v7) << 32) | 0xB, (double *)0x3EBD70A400000000, 0, 1uLL);
}

void DspLib::SideChain::Algorithm::createGainTable(DspLib *a1, float a2, float a3, float a4)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BYTE v15[176];
  uint64_t v16;

  v6 = 0;
  v16 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0.0)
    v7 = a3;
  else
    v7 = 0.0;
  v8 = fmaxf(a3, 0.0);
  v9 = (float)(1.0 / a4) + -1.0;
  if (a4 > 10.0)
    v9 = -0.9;
  if (a4 < 0.1)
    v9 = 9.0;
  if (a4 >= 9.9)
    v10 = -1.0;
  else
    v10 = v9;
  v11 = -100.0;
  do
  {
    v12 = (float)(v11 - a2) * v10;
    if (v8 >= v12)
      v13 = (float)(v11 - a2) * v10;
    else
      v13 = v8;
    if (v12 >= v7)
      v14 = v13;
    else
      v14 = v7;
    *(float *)&v15[v6] = DspLib::dB2Amp(a1, v14);
    v11 = v11 + 2.3256;
    v6 += 4;
  }
  while (v6 != 176);
  DspLib::createInterpolationTable((uint64_t)v15, 44, (uint64_t)a1 + 56, 0xB0uLL);
}

void DspLib::SideChain::Algorithm::process(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5)
{
  unint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  vDSP_Length v13;
  DSPSplitComplex *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD v20[3];
  DSPSplitComplex __A;
  unint64_t v22;
  DSPSplitComplex *v23;
  uint64_t v24;
  vDSP_Length v25;
  _QWORD v26[2];
  float *v27;
  float *v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 792), a2, a3, (uint64_t)a4, (float **)a5);
  if (*(_BYTE *)(a1 + 1000))
  {
    v8 = *(unsigned int *)(a1 + 1104);
    v29[0] = a4;
    v29[1] = a4;
    v9 = *(float **)(a1 + 24);
    v27 = *(float **)a1;
    v28 = v9;
    v23 = (DSPSplitComplex *)v29;
    v24 = 2;
    v10 = a5 / v8 + 1;
    v25 = a5;
    __A.realp = (float *)&v27;
    __A.imagp = (float *)2;
    v22 = a5;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 1000), (uint64_t)&v23, (float ***)&__A);
    MEMORY[0x1E0C80A78](v11);
    v26[0] = &v20[-v12 - 1];
    v26[1] = v26[0] + 4 * v12;
    v23 = (DSPSplitComplex *)v26;
    v24 = 2;
    v25 = v10;
    v20[0] = &v27;
    v20[1] = 2;
    v20[2] = a5;
    DspLib::DownSampler::process((unsigned int *)(a1 + 1104), v20, &v23);
    v13 = v25;
    v14 = v23;
    *(_QWORD *)(a1 + 784) = v25;
    __A = *v14;
    v22 = v13;
    vDSP_zvabs(&__A, 1, v28, 1, v13);
    DspLib::SideChain::Algorithm::gainForLevel(a1, v28, *(_QWORD *)(a1 + 784), v27, *(_QWORD *)(a1 + 784));
    DspLib::SampleAndHoldUpSampler::process((float *)(a1 + 1112), (uint64_t)v27, *(_QWORD *)(a1 + 784), (uint64_t)a4, a5);
  }
  else
  {
    v15 = DspLib::sumOfSquares(a4, a5);
    v16 = sqrtf((float)(v15 / (float)a5) + (float)(v15 / (float)a5));
    if (a5)
    {
      v17 = *(float *)(a1 + 776);
      v18 = 772;
      if (v17 < v16)
        v18 = 768;
      v16 = v17
          + (float)((float)(v16 - v17)
                  * (float)(1.0
                          - expf(-1.0/ (float)((float)(*(float *)(a1 + v18) * (float)(*(float *)(a1 + 52) / (float)a5)) / 1000.0))));
      *(float *)(a1 + 776) = v16;
    }
    *(float *)(a1 + 760) = v16;
    *(float *)&v23 = v16;
    LODWORD(__A.realp) = 0;
    DspLib::SideChain::Algorithm::gainForLevel(a1, (const float *)&v23, 1uLL, (float *)&__A, 1uLL);
    DspLib::fill(a4, a5, *(float *)&__A.realp);
  }
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 896), (uint64_t)a4, a5, (uint64_t)a4, (float **)a5);
}

void DspLib::SideChain::Algorithm::gainForLevel(uint64_t a1, const float *a2, vDSP_Length __N, float *__D, vDSP_Length a5)
{
  DspLib::clip(a2, __N, __D, 0.00001, 1.0);
  DspLib::amp2dB(__D, a5, 1.0);
  DspLib::add(__D, a5, 100.0);
  DspLib::multiply(__D, a5, 0.43);
  DspLib::elementAtIndexWithInterpolation(a1 + 56, 176, __D, a5, (uint64_t)__D, a5);
}

float DspLib::SideChain::Algorithm::gainForLevel(DspLib::SideChain::Algorithm *this, float a2)
{
  float __D;
  float v4;

  v4 = a2;
  __D = 0.0;
  DspLib::SideChain::Algorithm::gainForLevel((uint64_t)this, &v4, 1uLL, &__D, 1uLL);
  return __D;
}

float DspLib::SideChain::Algorithm::sideChainLevelLinear(DspLib::SideChain::Algorithm *this)
{
  vDSP_Length v1;

  if (!*((_BYTE *)this + 1000))
    return *((float *)this + 190);
  v1 = *((_QWORD *)this + 98);
  if (v1)
    return DspLib::mean(*((const float **)this + 3), v1);
  else
    return 0.0;
}

float DspLib::LoudspeakerSystemIDV1::PilotTone::initialize(DspLib::LoudspeakerSystemIDV1::PilotTone *this, double a2)
{
  float result;

  *((double *)this + 1) = a2;
  *(_BYTE *)this = 1;
  *((_DWORD *)this + 20) = 0;
  *((_WORD *)this + 42) = 257;
  *((_DWORD *)this + 22) = 0;
  result = *((float *)this + 10);
  *((float *)this + 8) = result;
  return result;
}

float DspLib::LoudspeakerSystemIDV1::PilotTone::reset(DspLib::LoudspeakerSystemIDV1::PilotTone *this)
{
  float result;

  *((_DWORD *)this + 20) = 0;
  *((_WORD *)this + 42) = 257;
  *((_DWORD *)this + 22) = 0;
  result = *((float *)this + 10);
  *((float *)this + 8) = result;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::PilotTone::setParameters(DspLib::LoudspeakerSystemIDV1::PilotTone *this, const DspLib::AlgorithmParametersInstance *a2)
{
  double v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  double v12;
  DspLib *v13;
  unsigned int v14;
  float v15;
  BOOL v16;
  unsigned int v17;
  float v18;
  unsigned int v19;
  float v20;
  double v21;
  unint64_t v22;
  _BOOL8 isEqual;
  float v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  DspLib *v32;
  float v33;
  char *v34;

  if (*(_BYTE *)this)
  {
    v3 = *((double *)this + 2);
    v4 = (float *)DspLib::AlgorithmParametersInstance::group(a2, 5u);
    v5 = DspLib::dB2Amp((DspLib *)v4, v4[1]);
    v6 = *v4;
    v7 = *((double *)this + 1);
    v8 = (float)(v7 / fmaxf(roundf(v7 / 2000.0), 1.0)) * 0.00097656;
    v9 = *v4 / v8;
    v10 = vcvtas_u32_f32(v9);
    *((_DWORD *)this + 6) = v10;
    v11 = v8 * (float)roundf(v9);
    v12 = v11;
    *((double *)this + 2) = v11;
    if (fmodf(v7, v11) > 0.5)
    {
      if (v10 - 513 >= 0xFFFFFE02)
      {
        v17 = v10;
        do
        {
          v15 = v8 * (float)v17;
          v18 = v7 - (float)(v15 * floorf(v7 / v15));
          v16 = v18 >= 0.5;
          v19 = v17 - 2;
          ++v17;
        }
        while (v19 <= 0x1FD && v18 >= 0.5);
        v14 = v17 - 1;
      }
      else
      {
        v14 = v10 - 1;
        v15 = 0.0;
        v16 = 1;
      }
      do
      {
        if (v10 - 511 < 0xFFFFFE02)
          goto LABEL_12;
        v20 = v8 * (float)v10--;
      }
      while ((float)(v7 - (float)(v20 * floorf(v7 / v20))) >= 0.5);
      if (v16)
      {
LABEL_12:
        v12 = (float)(v7 / floorf(v7 / v6));
        *((double *)this + 2) = v12;
        goto LABEL_18;
      }
      v21 = v15;
      if (vabdd_f64(v12, v15) >= vabdd_f64(v12, v20))
        v15 = v20;
      v12 = v15;
      *((double *)this + 2) = v15;
      if (vabdd_f64(v15, v21) >= vabdd_f64(v15, v20))
        v14 = v10 + 1;
      *((_DWORD *)this + 6) = v14;
    }
LABEL_18:
    if (v12 == 0.0)
      v22 = 0;
    else
      v22 = (v7 / v12);
    isEqual = DspLib::isEqual(v13, v5, *((float *)this + 7), 1.0e-20);
    if (!isEqual || (v24 = v3, !(v25 = DspLib::isEqual((DspLib *)isEqual, v24, *((double *)this + 2), 1.0e-20))))
    {
      *((float *)this + 7) = v5;
      *((float *)this + 23) = 1.0 - v5;
      std::vector<float>::resize((uint64_t)this + 56, v22);
      *((_DWORD *)this + 20) = 0;
      v26 = *((_QWORD *)this + 7);
      v27 = *((_QWORD *)this + 8) - v26;
      if (v27)
      {
        v28 = 0;
        v29 = v27 >> 2;
        v30 = (float)(unint64_t)(v27 >> 2);
        do
        {
          v31 = (float)((float)v28 / v30) * 6.28318531;
          *(float *)(v26 + 4 * v28++) = sinf(v31) * *((float *)this + 7);
        }
        while (v29 > v28);
      }
    }
    *((float *)this + 9) = DspLib::dB2Power((DspLib *)v25, v4[3]);
    *((float *)this + 10) = DspLib::dB2Power(v32, v4[4]);
    v33 = *((double *)this + 1);
    *((float *)this + 12) = expf(-1.0 / (float)((float)((float)(v4[2] * 1000.0) * v33) / 1000.0));
    *((float *)this + 11) = expf(-1.0 / (float)((float)((float)((float)(v4[2] + v4[2]) * 1000.0) * v33) / 1000.0));
    *((_BYTE *)this + 1) = 1;
  }
  else
  {
    v34 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v34, 41);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerSystemIDV1::PilotTone::process(uint64_t a1, float *a2, vDSP_Length a3)
{
  uint64_t v6;
  const float *v7;
  unsigned int v8;
  char *v9;
  int v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a1)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    v10 = 71;
LABEL_7:
    printf("DSP Sound assertion in %s at line %d\n", v9, v10);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!*(_BYTE *)(a1 + 1))
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    v10 = 72;
    goto LABEL_7;
  }
  MEMORY[0x1E0C80A78](a1);
  v7 = (const float *)((char *)v11 - v6);
  DspLib::LoudspeakerSystemIDV1::PilotTone::updatePilotToneVectorFromLookUpTable((float *)a1, (float *)((char *)v11 - v6), v8);
  *(_BYTE *)(a1 + 85) = DspLib::meanSquare(a2, a3) < *(float *)(a1 + 32);
  DspLib::multiply(a2, a3, *(float *)(a1 + 92));
  DspLib::add(a2, a3, v7);
}

float *DspLib::LoudspeakerSystemIDV1::PilotTone::updatePilotToneVectorFromLookUpTable(float *this, float *__dst, unsigned int a3)
{
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  float v22;
  float v23;
  float *v24;
  float v25;

  v4 = __dst;
  v5 = this;
  v6 = a3;
  v7 = *((_QWORD *)this + 7);
  v8 = *((_QWORD *)this + 8) - v7;
  v9 = v8 >> 2;
  if (v8 >> 2 >= (unint64_t)a3)
  {
    v18 = *((unsigned int *)this + 20);
    if (v9 - v18 >= (unint64_t)a3)
    {
      if (a3)
      {
        this = (float *)memmove(__dst, (const void *)(v7 + 4 * v18), 4 * a3);
        *(float *)&v18 = v5[20];
      }
      v21 = v18 + a3;
    }
    else
    {
      v19 = (unint64_t)v8 >> 2;
      this = __dst;
      v20 = v19 - v18;
      if ((_DWORD)v19 != (_DWORD)v18)
      {
        memmove(__dst, (const void *)(v7 + 4 * v18), 4 * (v19 - v18));
        this = &v4[v20];
      }
      v21 = a3 - v20;
      if (v21)
        this = (float *)memmove(this, *((const void **)v5 + 7), 4 * v21);
    }
    *((_DWORD *)v5 + 20) = v21;
  }
  else
  {
    v10 = vcvtps_u32_f32((float)a3 / (float)(unint64_t)v9);
    if (v10)
    {
      v11 = 0;
      v12 = *((_DWORD *)this + 20);
      v13 = __dst;
      do
      {
        v14 = *((_QWORD *)v5 + 7);
        v15 = (unint64_t)(*((_QWORD *)v5 + 8) - v14) >> 2;
        v16 = v15 - v12;
        v17 = a3 - v11;
        if (v15 - v12 <= a3 - v11)
        {
          if ((_DWORD)v15 != v12)
          {
            this = (float *)memmove(v13, (const void *)(v14 + 4 * v12), 4 * (v15 - v12));
            v13 += v16;
          }
          v17 = 0;
          v11 += v16;
        }
        else
        {
          if (v17)
          {
            this = (float *)memmove(v13, (const void *)(v14 + 4 * v12), 4 * (a3 - v11));
            v13 += v17;
          }
          v11 = a3;
        }
        *((_DWORD *)v5 + 20) = v17;
        v12 = v17;
        --v10;
      }
      while (v10);
    }
  }
  if (!*((_BYTE *)v5 + 84))
  {
    if (!*((_BYTE *)v5 + 85))
      return this;
    goto LABEL_26;
  }
  if (*((_BYTE *)v5 + 85))
  {
LABEL_26:
    v24 = v5 + 9;
    v22 = v5[12];
    v23 = 0.0;
    goto LABEL_27;
  }
  v22 = v5[11];
  v23 = 1.0 - v22;
  v24 = v5 + 10;
LABEL_27:
  v5[8] = *v24;
  v25 = v5[22];
  if (a3)
  {
    do
    {
      *v4 = v25 * *v4;
      ++v4;
      v25 = v23 + (float)(v5[22] * v22);
      v5[22] = v25;
      --v6;
    }
    while (v6);
  }
  *((_BYTE *)v5 + 84) = v25 < v22;
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::PilotTone::status(uint64_t result, uint64_t a2)
{
  float v2;
  char *v3;

  if (*(_BYTE *)result)
  {
    v2 = *(double *)(result + 16);
    *(float *)(a2 + 44) = v2;
    *(float *)(a2 + 136) = (float)*(unsigned int *)(result + 24);
  }
  else
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1PilotTone.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v3, 82);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerHealth::initialize(DspLib::LoudspeakerHealth *this, double a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  *(double *)this = a2;
  *((_DWORD *)this + 3) = a3;
  *((_QWORD *)this + 26) = vcvtad_u64_f64(a2 * 0.300000012);
  std::vector<DspLib::AverageRms>::resize((uint64_t)this + 16, a3);
  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  if (v4 != v5)
  {
    do
    {
      DspLib::AverageRms::initialize(v4, *(double *)this);
      v4 += 56;
    }
    while (v4 != v5);
    v6 = *((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 3);
    while (v6 != v7)
    {
      DspLib::AverageRms::configure(v6, 1, 1.0, 1.0);
      v6 += 56;
    }
  }
  std::vector<float>::resize((uint64_t)this + 40, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 5), (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  std::vector<float>::resize((uint64_t)this + 64, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 8), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
  std::vector<float>::resize((uint64_t)this + 88, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 11), (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2);
  std::vector<float>::resize((uint64_t)this + 112, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 14), (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 2);
  std::vector<float>::resize((uint64_t)this + 136, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 17), (uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 2);
  std::vector<float>::resize((uint64_t)this + 160, *((unsigned int *)this + 3));
  DspLib::clear(*((float **)this + 20), (uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 2);
  std::vector<unsigned long>::resize((uint64_t)this + 184, *((unsigned int *)this + 3));
  v8 = (void *)*((_QWORD *)this + 23);
  v9 = *((_QWORD *)this + 24) - (_QWORD)v8;
  if (v9 >= 1)
    bzero(v8, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
  *((_BYTE *)this + 8) = 1;
  DspLib::LoudspeakerHealth::reset(this);
}

void std::vector<DspLib::AverageRms>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::AverageRms>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 56 * a2;
  }
}

void DspLib::LoudspeakerHealth::reset(DspLib::LoudspeakerHealth *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  while (v2 != v3)
  {
    DspLib::AverageRms::reset(v2);
    v2 += 56;
  }
  v4 = (_BYTE *)*((_QWORD *)this + 11);
  v5 = (_BYTE *)*((_QWORD *)this + 12);
  if (v4 != v5)
    memset_pattern16(v4, &unk_1B6629FB0, ((v5 - v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  v6 = (_BYTE *)*((_QWORD *)this + 14);
  v7 = (_BYTE *)*((_QWORD *)this + 15);
  if (v6 != v7)
    memset_pattern16(v6, &unk_1B6629FB0, ((v7 - v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  v8 = (void *)*((_QWORD *)this + 23);
  v9 = *((_QWORD *)this + 24) - (_QWORD)v8;
  if (v9 >= 1)
    bzero(v8, 8 * (((unint64_t)v9 >> 3) - ((unint64_t)v9 > 7)) + 8);
}

uint64_t DspLib::LoudspeakerHealth::uninitialize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 16);
  v2 = *(_QWORD *)(this + 24);
  if (v1 != v2)
  {
    v3 = *(_QWORD *)(this + 16);
    do
    {
      *(_BYTE *)(v3 + 8) = 0;
      v3 += 56;
    }
    while (v3 != v2);
  }
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 48) = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 72) = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 96) = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 120) = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 144) = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 168) = *(_QWORD *)(this + 160);
  *(_QWORD *)(this + 192) = *(_QWORD *)(this + 184);
  *(_BYTE *)(this + 8) = 0;
  return this;
}

float DspLib::LoudspeakerHealth::setAmplifierVoltsPerFullScale(DspLib::LoudspeakerHealth *this, unsigned int a2, float a3)
{
  float result;

  *(float *)(*((_QWORD *)this + 17) + 4 * a2) = DspLib::amp2dB(this, a3) + -50.0;
  DspLib::AverageRms::configure(*((_QWORD *)this + 2) + 56 * a2, 1, 1.0, a3);
  result = *(float *)(*((_QWORD *)this + 17) + 4 * a2) + -3.0;
  *(float *)(*((_QWORD *)this + 5) + 4 * a2) = result;
  return result;
}

void DspLib::LoudspeakerHealth::process(uint64_t a1, uint64_t a2, vDSP_Length a3, uint64_t a4, unsigned int a5)
{
  int v5;
  uint64_t v10;
  uint64_t v11;
  DspLib *v12;
  uint64_t v13;
  uint64_t v14;
  vDSP_Length v15;
  float v16;
  uint64_t v17;
  float v18;

  v5 = *(unsigned __int8 *)(a4 + 196);
  *(_BYTE *)(a1 + 220) = v5;
  if (a3 && v5)
  {
    v10 = a5;
    v11 = 56 * a5;
    DspLib::AverageRms::process(*(_QWORD *)(a1 + 16) + v11, a2, a3);
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * a5) = *(_DWORD *)(a4 + 184);
    *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * a5) = *(_DWORD *)(a4 + 188);
    v13 = *(_QWORD *)(a1 + 136);
    v14 = *(_QWORD *)(a1 + 184);
    if (*(float *)(*(_QWORD *)(a1 + 16) + v11 + 32) <= *(float *)(v13 + 4 * a5))
      v15 = 0;
    else
      v15 = *(_QWORD *)(v14 + 8 * v10) + a3;
    *(_QWORD *)(v14 + 8 * v10) = v15;
    v16 = *(float *)(a4 + 192);
    v17 = *(_QWORD *)(a1 + 160);
    if (v16 != *(float *)(v17 + 4 * v10))
    {
      *(float *)(v17 + 4 * v10) = v16;
      v18 = *(float *)(v13 + 4 * v10);
      *(float *)(*(_QWORD *)(a1 + 64) + 4 * v10) = (float)(v18 - DspLib::amp2dB(v12, v16)) + -3.0;
    }
  }
}

uint64_t DspLib::LoudspeakerHealth::status(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  float v22;

  result = DspLib::LoudspeakerHealth::updateSpeakerHealthStatus(a1);
  v7 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(int **)(a1 + 136);
    v9 = *(int **)(a1 + 88);
    v10 = *(int **)(a1 + 112);
    v11 = *(int **)(a1 + 40);
    v12 = *(int **)(a1 + 64);
    v13 = (int *)(*(_QWORD *)(a1 + 16) + 32);
    v14 = (_DWORD *)(a2 + 12);
    do
    {
      v15 = *v13;
      v13 += 14;
      *(v14 - 3) = v15;
      v16 = *v8++;
      *(v14 - 2) = v16;
      v17 = *v9++;
      *(v14 - 1) = v17;
      v18 = *v10++;
      *v14 = v18;
      v19 = *v11++;
      v14[1] = v19;
      v20 = *v12++;
      v14[2] = v20;
      v14 += 6;
      --v7;
    }
    while (v7);
  }
  v21 = a2 + 4 * a3;
  v22 = 0.0;
  if (*(_BYTE *)(a1 + 220))
    v22 = 1.0;
  *(float *)(v21 - 8) = (float)*(unsigned int *)(a1 + 216);
  *(float *)(v21 - 4) = v22;
  return result;
}

uint64_t DspLib::LoudspeakerHealth::updateSpeakerHealthStatus(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  int v4;
  float v5;
  float v6;
  int v7;

  v1 = *(unsigned int *)(this + 12);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(this + 184) + 8 * v3) <= *(_QWORD *)(this + 208))
      {
        v7 = *(_DWORD *)(this + 216) & (3 << v2);
      }
      else
      {
        v5 = *(float *)(*(_QWORD *)(this + 88) + 4 * v3);
        v6 = *(float *)(*(_QWORD *)(this + 40) + 4 * v3);
        if (v5 >= v6 || *(float *)(*(_QWORD *)(this + 112) + 4 * v3) >= *(float *)(*(_QWORD *)(this + 64) + 4 * v3))
        {
          if ((v5 <= v6 || *(float *)(*(_QWORD *)(this + 112) + 4 * v3) >= *(float *)(*(_QWORD *)(this + 64) + 4 * v3))
            && (v5 >= v6 || *(float *)(*(_QWORD *)(this + 112) + 4 * v3) <= *(float *)(*(_QWORD *)(this + 64) + 4 * v3)))
          {
            v7 = 1 << v2;
          }
          else
          {
            v7 = 2 << v2;
          }
        }
        else
        {
          v7 = 3 << v2;
        }
      }
      v4 |= v7;
      ++v3;
      v2 += 2;
    }
    while (v1 != v3);
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(this + 216) = v4;
  return this;
}

uint64_t DspLib::LoudspeakerHealth::speakerHealthStatus(DspLib::LoudspeakerHealth *this)
{
  DspLib::LoudspeakerHealth::updateSpeakerHealthStatus((uint64_t)this);
  return *((unsigned int *)this + 54);
}

void std::vector<DspLib::AverageRms>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (_OWORD *)((char *)v7 + 56 * a2);
      do
      {
        *v7 = 0uLL;
        v7[1] = 0uLL;
        *((_QWORD *)v7 + 6) = 0;
        v7[2] = 0uLL;
        *((_DWORD *)v7 + 3) = 1065353216;
        *((_QWORD *)v7 + 2) = 0x4024000000000000;
        v7 = (_OWORD *)((char *)v7 + 56);
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v15 = &v14[56 * a2];
    v16 = v14;
    do
    {
      *(_OWORD *)v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_QWORD *)v16 + 6) = 0;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_DWORD *)v16 + 3) = 1065353216;
      *((_QWORD *)v16 + 2) = 0x4024000000000000;
      v16 += 56;
    }
    while (v16 != v15);
    v17 = &v12[56 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 56);
        v21 = *(_OWORD *)(v18 - 40);
        v22 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 56;
        v18 -= 56;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

uint64_t DspLib::BuzzKill::Algorithm::initialize(DspLib::BuzzKill::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void (**v10)(DspLib::AnalyticSignalTransformBiquad *__hidden);
  uint64_t v11;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 264), *((unsigned int *)this + 8));
    std::vector<std::vector<float>>::resize((uint64_t *)this + 27, *((unsigned int *)this + 3));
    v5 = *((_QWORD *)this + 27);
    v6 = *((_QWORD *)this + 28);
    while (v5 != v6)
    {
      std::vector<float>::resize(v5, *((unsigned int *)this + 8));
      v5 += 24;
    }
    std::vector<std::vector<float>>::resize((uint64_t *)this + 30, *((unsigned int *)this + 3));
    v7 = *((_QWORD *)this + 30);
    v8 = *((_QWORD *)this + 31);
    while (v7 != v8)
    {
      std::vector<float>::resize(v7, *((unsigned int *)this + 8));
      v7 += 24;
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 352), 1uLL, *((double *)this + 3), 1uLL);
    v9 = (_OWORD *)operator new();
    *v9 = 0u;
    v9[1] = 0u;
    v10 = &off_1E69C4398;
    *(_QWORD *)v9 = &off_1E69C4398;
    *(_OWORD *)((char *)v9 + 40) = 0u;
    *(_OWORD *)((char *)v9 + 56) = 0u;
    *(_OWORD *)((char *)v9 + 72) = 0u;
    *(_OWORD *)((char *)v9 + 24) = 0u;
    v11 = *((_QWORD *)this + 57);
    *((_QWORD *)this + 57) = v9;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v10 = (void (**)(DspLib::AnalyticSignalTransformBiquad *__hidden))**((_QWORD **)this + 57);
    }
    ((void (*)(void))v10[3])();
    DspLib::FFT::Filterbank::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 464), 1, 44100.0);
    DspLib::FFT::Filterbank::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 824), 1, 44100.0);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 287, *((unsigned int *)this + 3));
    DspLib::BuzzKill::MitigationFilterBank::initialize((uint64_t)this + 1504, *((unsigned int *)this + 3), *((double *)this + 3));
    std::vector<std::vector<float>>::resize((uint64_t *)this + 310, *((unsigned int *)this + 3));
    std::vector<std::vector<float>>::resize((uint64_t *)this + 297, *((unsigned int *)this + 3));
    DspLib::Biquad::ParametricFilter::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 2520), 1uLL, *((double *)this + 3), 1uLL);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 329, *((unsigned int *)this + 3));
    std::vector<float>::reserve((void **)this + 183, 0x64uLL);
    std::vector<float>::reserve((void **)this + 180, 0x64uLL);
    std::vector<float>::reserve((void **)this + 583, 0xAuLL);
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::BuzzKill::Algorithm *))(*(_QWORD *)this + 144))(this);
  }
  return v4;
}

void DspLib::BuzzKill::Algorithm::uninitialize(DspLib::BuzzKill::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_BYTE *)this + 8) = 0;
  DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 264), 0);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 27);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 30);
  std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  v2 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v2)
    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100]((uint64_t)this + 1184, v2);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 352));
  v3 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  DspLib::FFT::Filterbank::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
  DspLib::FFT::Filterbank::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
  DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 1280), 0);
  DspLib::ComplexVector::setLength((DspLib::BuzzKill::Algorithm *)((char *)this + 1360), 0);
  *((_QWORD *)this + 151) = *((_QWORD *)this + 150);
  *((_QWORD *)this + 157) = *((_QWORD *)this + 156);
  *((_QWORD *)this + 154) = *((_QWORD *)this + 153);
  *((_DWORD *)this + 298) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 310, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 297, 0);
  *((_QWORD *)this + 181) = *((_QWORD *)this + 180);
  *((_QWORD *)this + 184) = *((_QWORD *)this + 183);
  DspLib::BuzzKill::MitigationFilterBank::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 1504));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 287);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BuzzKill::Algorithm *)((char *)this + 2520));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 329);
  *((_DWORD *)this + 628) = 0;
  *((_DWORD *)this + 580) = 0;
  *((_QWORD *)this + 584) = *((_QWORD *)this + 583);
}

uint64_t *std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v2 + 392));
    DspLib::FFT::Filterbank::~Filterbank((DspLib::FFT::Filterbank *)(v2 + 24));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void DspLib::BuzzKill::Algorithm::reset(DspLib::BuzzKill::Algorithm *this)
{
  DspLib::BuzzKill::FFTForDisplay *v2;
  uint64_t v3;
  DspLib::FFT::Filterbank *v4;
  DspLib::CircularDelay *v5;
  DspLib::CircularDelay *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  DspLib::CircularDelay *v10;
  DspLib::CircularDelay *v11;
  char *v12;

  if (*((_BYTE *)this + 8))
  {
    v2 = (DspLib::BuzzKill::FFTForDisplay *)*((_QWORD *)this + 43);
    if (v2)
      DspLib::BuzzKill::FFTForDisplay::reset(v2);
    DspLib::Biquad::SetupWrapper::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 400));
    v3 = *((_QWORD *)this + 57);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    DspLib::FFT::Filterbank::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
    DspLib::FFT::Filterbank::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
    v4 = (DspLib::FFT::Filterbank *)*((_QWORD *)this + 148);
    if (v4)
      DspLib::FFT::Filterbank::reset(v4);
    DspLib::fill(*((float **)this + 156), (uint64_t)(*((_QWORD *)this + 157) - *((_QWORD *)this + 156)) >> 2, 1.0);
    DspLib::clear(*((float **)this + 183), (uint64_t)(*((_QWORD *)this + 184) - *((_QWORD *)this + 183)) >> 2);
    DspLib::clear(*((float **)this + 180), (uint64_t)(*((_QWORD *)this + 181) - *((_QWORD *)this + 180)) >> 2);
    DspLib::BuzzKill::MitigationFilterBank::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 1504));
    v5 = (DspLib::CircularDelay *)*((_QWORD *)this + 287);
    v6 = (DspLib::CircularDelay *)*((_QWORD *)this + 288);
    while (v5 != v6)
    {
      DspLib::CircularDelay::reset(v5);
      v5 = (DspLib::CircularDelay *)((char *)v5 + 32);
    }
    v7 = *((_QWORD *)this + 297);
    v8 = *((_QWORD *)this + 298);
    while (v7 != v8)
    {
      v9 = *(_QWORD *)(v7 + 8);
      if (*(_QWORD *)v7 != v9)
        bzero(*(void **)v7, (v9 - *(_QWORD *)v7) & 0xFFFFFFFFFFFFFFFCLL);
      v7 += 24;
    }
    *((_DWORD *)this + 600) = 0;
    DspLib::FIRDecimator::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 2432));
    DspLib::Biquad::SetupWrapper::reset((DspLib::BuzzKill::Algorithm *)((char *)this + 2568));
    *((_DWORD *)this + 657) = 0;
    v10 = (DspLib::CircularDelay *)*((_QWORD *)this + 329);
    v11 = (DspLib::CircularDelay *)*((_QWORD *)this + 330);
    while (v10 != v11)
    {
      DspLib::CircularDelay::reset(v10);
      v10 = (DspLib::CircularDelay *)((char *)v10 + 32);
    }
    *((_BYTE *)this + 2656) = 1;
  }
  else
  {
    v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v12, 143);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::BuzzKill::Algorithm::setMeteringIsEnabled(DspLib::BuzzKill::Algorithm *this, char a2)
{
  *((_BYTE *)this + 40) = a2;
  return (*(uint64_t (**)(DspLib::BuzzKill::Algorithm *))(*(_QWORD *)this + 144))(this);
}

void DspLib::BuzzKill::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  unsigned int v5;
  int v6;
  float v7;
  double v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  double v14;
  unsigned int v15;
  DspLib *v16;
  _BOOL8 isEqual;
  const void *v18;
  float v19;
  double v20;
  _BOOL8 v21;
  _BOOL8 v22;
  _BOOL8 v23;
  _BOOL8 v24;
  _BOOL8 v25;
  _BOOL8 v26;
  unint64_t v27;
  DspLib::BuzzKill::FFTForDisplay **v28;
  DspLib::BuzzKill::FFTForDisplay *v29;
  uint64_t v30;
  __n128 v31;
  const void *v32;
  __n128 v33;
  unsigned int v34;
  float v35;
  float v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  float v44;
  float v45;
  unint64_t v46;
  float v47;
  float *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  unsigned int v53;
  int v54;
  vDSP_Length v55;
  __n128 v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  DspLib::CircularDelay *v60;
  DspLib::CircularDelay *i;
  float *v62;
  float v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  float v68;
  unsigned int v69;
  DspLib::CircularDelay *v70;
  DspLib::CircularDelay *v71;
  unint64_t v72;
  float v73;
  uint64_t *v74;
  uint64_t v75;
  BOOL v76;
  DspLib::BuzzKill::HighBuzzKillFFT *v77;
  uint64_t v78;
  float *v79;
  float v80;
  _BOOL8 v81;
  _BOOL4 v82;
  uint64_t v83;
  _QWORD v84[3];
  _QWORD *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    DspLib::BuzzKill::Algorithm::setAlgorithmVersion((DspLib::BuzzKill::Algorithm *)a1, vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 68)));
    v5 = vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 64)) - 1;
    switch(v5)
    {
      case 0u:
        v6 = 1161527296;
        goto LABEL_5;
      case 1u:
        *(_DWORD *)(a1 + 4688) = 1165623296;
        v7 = 14700.0;
        break;
      case 2u:
        *(_DWORD *)(a1 + 4688) = 1169915904;
        v7 = 22050.0;
        break;
      case 3u:
        *(_DWORD *)(a1 + 4688) = 1184645120;
        v7 = 44100.0;
        break;
      default:
        v6 = 1159479296;
LABEL_5:
        *(_DWORD *)(a1 + 4688) = v6;
        v7 = 11025.0;
        break;
    }
    v8 = *(double *)(a1 + 24);
    v9 = v8;
    v10 = (float)(v9 / v7);
    if (v10 >= 0x3E8)
      v11 = 1000;
    else
      v11 = (float)(v9 / v7);
    if (v10)
      v12 = v11;
    else
      v12 = 1;
    *(_DWORD *)(a1 + 2512) = v12;
    if (v12)
    {
      *(_DWORD *)(a1 + 2624) = v12;
      *(_DWORD *)(a1 + 2628) = 0;
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 2520), 1uLL, v8, 1uLL);
    if (v5 > 3)
      v13 = 0x451C400000000008;
    else
      v13 = qword_1B662A0F0[v5];
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 2520, v13, (double *)0x3F33333300000000, 0, 0x41uLL);
    v14 = *(double *)(a1 + 24);
    v15 = *(_DWORD *)(a1 + 2512);
    isEqual = DspLib::isEqual(v16, *(float *)(*(_QWORD *)(a1 + 48) + 64), 0.0, 1.0e-20);
    if (isEqual)
    {
      v18 = &DspLib::BuzzKill::kPolynomial2k5kHz;
    }
    else
    {
      v19 = v14 / (double)v15;
      v20 = v19;
      v21 = DspLib::isEqual((DspLib *)isEqual, v19, 11025.0, 4.0);
      if (v21)
      {
        v18 = &DspLib::BuzzKill::kPolynomial3kHz1;
      }
      else
      {
        v22 = DspLib::isEqual((DspLib *)v21, v20, 12000.0, 4.0);
        if (v22)
        {
          v18 = &DspLib::BuzzKill::kPolynomial3kHz2;
        }
        else
        {
          v23 = DspLib::isEqual((DspLib *)v22, v20, 14700.0, 4.0);
          if (v23)
          {
            v18 = &DspLib::BuzzKill::kPolynomial4kHz1;
          }
          else
          {
            v24 = DspLib::isEqual((DspLib *)v23, v20, 16000.0, 4.0);
            if (v24)
            {
              v18 = &DspLib::BuzzKill::kPolynomial4kHz2;
            }
            else
            {
              v25 = DspLib::isEqual((DspLib *)v24, v20, 22050.0, 4.0);
              if (v25)
              {
                v18 = &DspLib::BuzzKill::kPolynomial6kHz1;
              }
              else
              {
                v26 = DspLib::isEqual((DspLib *)v25, v20, 24000.0, 4.0);
                if (!v26)
                {
                  v81 = DspLib::isEqual((DspLib *)v26, v20, 44100.0, 4.0);
                  if (v81)
                  {
                    v18 = &DspLib::BuzzKill::kPolynomial20kHz1;
                    v27 = 10;
                  }
                  else
                  {
                    v82 = DspLib::isEqual((DspLib *)v81, v20, 48000.0, 4.0);
                    if (v82)
                      v27 = 10;
                    else
                      v27 = 1;
                    if (v82)
                      v18 = &DspLib::BuzzKill::kPolynomial20kHz2;
                    else
                      v18 = &DspLib::BuzzKill::kPolynomialBypass;
                  }
LABEL_35:
                  std::vector<float>::resize(a1 + 4664, v27);
                  memmove(*(void **)(a1 + 4664), v18, 4 * v27);
                  v28 = (DspLib::BuzzKill::FFTForDisplay **)(a1 + 344);
                  if (*(_BYTE *)(a1 + 40))
                  {
                    v29 = *v28;
                    if (!*v28)
                    {
                      v30 = operator new();
                      *(_OWORD *)v30 = 0u;
                      *(_OWORD *)(v30 + 16) = 0u;
                      *(_OWORD *)(v30 + 32) = 0u;
                      *(_OWORD *)(v30 + 48) = 0u;
                      *(_OWORD *)(v30 + 64) = 0u;
                      *(_OWORD *)(v30 + 80) = 0u;
                      *(_OWORD *)(v30 + 96) = 0u;
                      *(_OWORD *)(v30 + 112) = 0u;
                      *(_OWORD *)(v30 + 128) = 0u;
                      *(_OWORD *)(v30 + 144) = 0u;
                      *(_OWORD *)(v30 + 160) = 0u;
                      *(_OWORD *)(v30 + 176) = 0u;
                      *(_OWORD *)(v30 + 192) = 0u;
                      *(_OWORD *)(v30 + 208) = 0u;
                      *(_OWORD *)(v30 + 224) = 0u;
                      *(_OWORD *)(v30 + 240) = 0u;
                      *(_OWORD *)(v30 + 256) = 0u;
                      *(_OWORD *)(v30 + 272) = 0u;
                      *(_OWORD *)(v30 + 288) = 0u;
                      *(_OWORD *)(v30 + 304) = 0u;
                      *(_OWORD *)(v30 + 320) = 0u;
                      *(_OWORD *)(v30 + 336) = 0u;
                      *(_OWORD *)(v30 + 352) = 0u;
                      *(_OWORD *)(v30 + 368) = 0u;
                      *(_OWORD *)(v30 + 384) = 0u;
                      *(_OWORD *)(v30 + 400) = 0u;
                      *(_OWORD *)(v30 + 416) = 0u;
                      *(_OWORD *)(v30 + 432) = 0u;
                      *(_OWORD *)(v30 + 448) = 0u;
                      *(_OWORD *)(v30 + 464) = 0u;
                      *(_DWORD *)(v30 + 16) = 1;
                      *(_OWORD *)(v30 + 480) = 0u;
                      DspLib::FFT::Filterbank::Filterbank((DspLib::FFT::Filterbank *)(v30 + 24), 0);
                      *(_DWORD *)(v30 + 384) = 0;
                      DspLibBuffer::DspLibBuffer((DspLibBuffer *)(v30 + 392));
                      *(_DWORD *)(v30 + 488) = 0;
                      v83 = 0;
                      std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)(a1 + 344), v30);
                      std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100](&v83, 0);
                      v29 = *v28;
                    }
                    DspLib::BuzzKill::FFTForDisplay::initialize(v29, *(double *)(a1 + 24), *(unsigned int *)(a1 + 12));
                    DspLib::BuzzKill::FFTForDisplay::setParameters(*(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 48), 10, *(float *)(*(_QWORD *)(a1 + 48) + 104));
                  }
                  else
                  {
                    std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)(a1 + 344), 0);
                  }
                  v32 = (const void *)(*(_QWORD *)(a1 + 48) + 120);
                  DspLib::FFT::Filterbank::setParameters(a1 + 464, v32, 10, v31);
                  DspLib::FFT::Filterbank::setParameters(a1 + 824, v32, 10, v33);
                  v34 = 1 << *(float *)(*(_QWORD *)(a1 + 48) + 120);
                  v35 = *(double *)(a1 + 24);
                  v36 = fmaxf((float)(v35 / (float)*(unsigned int *)(a1 + 2512)) / (float)v34, 0.001);
                  v37 = vcvtas_u32_f32(*(float *)(a1 + 4688) / v36);
                  *(_DWORD *)(a1 + 1196) = v34;
                  v38 = v34 >> 1;
                  if (v38 >= v37)
                    v38 = v37;
                  if (*(_DWORD *)(a1 + 1192) != v38)
                  {
                    *(_DWORD *)(a1 + 1192) = v38;
                    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1280), v38 + 1);
                    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1360), (*(_DWORD *)(a1 + 1192) + 1));
                    std::vector<float>::resize(a1 + 1200, (*(_DWORD *)(a1 + 1192) + 1));
                    std::vector<float>::resize(a1 + 1248, *(unsigned int *)(a1 + 1192));
                    DspLib::fill(*(float **)(a1 + 1248), (uint64_t)(*(_QWORD *)(a1 + 1256) - *(_QWORD *)(a1 + 1248)) >> 2, 1.0);
                    std::vector<void const*>::resize(a1 + 1224, *(unsigned int *)(a1 + 1192));
                    v38 = *(_DWORD *)(a1 + 1192);
                  }
                  v39 = __CFADD__(v38, 1);
                  LODWORD(v40) = v38 + 1;
                  if (!v39)
                  {
                    v41 = 0;
                    v42 = *(_QWORD *)(a1 + 1200);
                    v43 = vcvtas_u32_f32(v36 / 2.15);
                    v44 = v36 * 0.5;
                    do
                    {
                      v45 = v36 * (float)v41;
                      if (v40 >= v43)
                        LODWORD(v40) = v43;
                      if (v40 <= 2)
                        v46 = 2;
                      else
                        v46 = v40;
                      v47 = v45 - v44;
                      if ((float)(v45 - v44) < 0.0)
                        v47 = 0.0;
                      DspLib::BuzzKill::Algorithm::getThresholdSpectrum((DspLib::BuzzKill::Algorithm *)a1, *(float **)(a1 + 1368), v46, v47, v44 + v45, 0);
                      *(float *)(v42 + 4 * v41++) = DspLib::minv(*(const float **)(a1 + 1368), v46);
                      v40 = (*(_DWORD *)(a1 + 1192) + 1);
                    }
                    while (v41 < v40);
                  }
                  v48 = *(float **)(a1 + 48);
                  v49 = *(_DWORD *)(a1 + 2228) == vcvtas_u32_f32(v48[23]);
                  DspLib::BuzzKill::MitigationFilterBank::setParameters(a1 + 1504, v48, (float)*(unsigned int *)(a1 + 2512));
                  if (!v49)
                  {
                    std::vector<float>::resize(a1 + 1464, *(unsigned int *)(a1 + 2228));
                    std::vector<float>::resize(a1 + 1440, *(unsigned int *)(a1 + 2228));
                  }
                  MEMORY[0x1E0C80A78](v50);
                  v52 = (float *)((char *)&v84[-1] - v51);
                  v53 = *(_DWORD *)(a1 + 2512);
                  v55 = v54 | (24 * v53);
                  v84[0] = &unk_1E69BFC40;
                  v84[1] = DspLib::makeChebychevWindow;
                  v85 = v84;
                  v56.n128_f32[0] = DspLib::makeSincWindow((float *)((char *)&v84[-1] - v51), v55, v53, 0x18u, (uint64_t)v84, 0.75);
                  v57 = v85;
                  if (v85 == v84)
                  {
                    v58 = 4;
                    v57 = v84;
                  }
                  else
                  {
                    if (!v85)
                      goto LABEL_61;
                    v58 = 5;
                  }
                  (*(void (**)(__n128))(*v57 + 8 * v58))(v56);
LABEL_61:
                  v59 = *(_DWORD *)(a1 + 2512);
                  if (v59 != *(_DWORD *)(a1 + 2320))
                  {
                    *(_DWORD *)(a1 + 2320) = v59;
                    DspLib::multiply(v52, v55, sqrtf((float)v59));
                    DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)(a1 + 2432), *(unsigned int *)(a1 + 2320), *(unsigned int *)(a1 + 32));
                    DspLib::FIRDecimator::setCoefficients(a1 + 2432, v52, v55);
                    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 2328), *(_DWORD *)(a1 + 2320), *(_DWORD *)(a1 + 32) / *(_DWORD *)(a1 + 2320) + 1);
                    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 2328), (uint64_t)v52, v55);
                  }
                  v60 = *(DspLib::CircularDelay **)(a1 + 2632);
                  for (i = *(DspLib::CircularDelay **)(a1 + 2640);
                        v60 != i;
                        v60 = (DspLib::CircularDelay *)((char *)v60 + 32))
                  {
                    DspLib::CircularDelay::setLength(v60, v55 - 1);
                  }
                  v62 = *(float **)(a1 + 48);
                  v63 = exp2f(v62[20]) + -1.0;
                  *(float *)(a1 + 1496) = v63;
                  v64 = v63 + 1.0;
                  *(float *)(a1 + 1488) = v64;
                  *(float *)(a1 + 1492) = 1.0 / v64;
                  v65 = vcvtas_u32_f32((float)(v62[25] / v36) * 0.5);
                  *(_DWORD *)(a1 + 1272) = v65;
                  v66 = 3 * v65;
                  v67 = *(_DWORD *)(a1 + 1192);
                  if (v66 > v67)
                    *(_DWORD *)(a1 + 1272) = v67 / 3;
                  v68 = *(double *)(a1 + 24);
                  v69 = vcvtas_u32_f32((float)(v62[19] / 1000.0) * v68);
                  *(_DWORD *)(a1 + 2288) = v69;
                  v70 = *(DspLib::CircularDelay **)(a1 + 2296);
                  v71 = *(DspLib::CircularDelay **)(a1 + 2304);
                  if (v70 != v71)
                  {
                    v72 = (v69 - v55) & ~((int)(v69 - v55) >> 31);
                    do
                    {
                      DspLib::CircularDelay::setLength(v70, v72);
                      v70 = (DspLib::CircularDelay *)((char *)v70 + 32);
                    }
                    while (v70 != v71);
                    v62 = *(float **)(a1 + 48);
                  }
                  v73 = v62[28];
                  v74 = (uint64_t *)(a1 + 1184);
                  v75 = *(_QWORD *)(a1 + 1184);
                  if (v75)
                    v76 = v73 <= 0.5;
                  else
                    v76 = 0;
                  if (v76)
                  {
                    *v74 = 0;
                    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100](a1 + 1184, v75);
                  }
                  else
                  {
                    if (v75 || v73 <= 0.5)
                      goto LABEL_82;
                    v77 = (DspLib::BuzzKill::HighBuzzKillFFT *)operator new();
                    DspLib::BuzzKill::HighBuzzKillFFT::HighBuzzKillFFT(v77);
                    v78 = *v74;
                    *v74 = (uint64_t)v77;
                    if (v78)
                    {
                      std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100](a1 + 1184, v78);
                      v77 = (DspLib::BuzzKill::HighBuzzKillFFT *)*v74;
                    }
                    DspLib::BuzzKill::HighBuzzKillFFT::initialize(v77, *(_DWORD *)(a1 + 12));
                  }
                  v75 = *v74;
LABEL_82:
                  if (v75)
                  {
                    v79 = (float *)DspLibBuffer::channel((DspLibBuffer *)(v75 + 456), 0);
                    v80 = *(double *)(a1 + 24) * 0.5;
                    DspLib::BuzzKill::Algorithm::getThresholdSpectrum((DspLib::BuzzKill::Algorithm *)a1, v79, 0x21uLL, 0.0, v80, 0);
                    DspLib::multiply(v79, 0x21uLL, 0.5);
                    memset_pattern16(v79, &unk_1B6627B80, 0x18uLL);
                  }
                  return;
                }
                v18 = &DspLib::BuzzKill::kPolynomial6kHz2;
              }
            }
          }
        }
      }
    }
    v27 = 5;
    goto LABEL_35;
  }
}

void sub_1B60CA1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E0C40BA38D118);
  _Unwind_Resume(a1);
}

uint64_t DspLib::BuzzKill::Algorithm::setAlgorithmVersion(DspLib::BuzzKill::Algorithm *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  void (**v6)(DspLib::AnalyticSignalTransformBiquad *__hidden);
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 57) + 16))(*((_QWORD *)this + 57));
  if (a2)
  {
    if ((_DWORD)result == 2)
      goto LABEL_9;
    v5 = operator new();
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    v6 = &off_1E69C4468;
    *(_QWORD *)v5 = &off_1E69C4468;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_BYTE *)(v5 + 88) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_BYTE *)(v5 + 160) = 0;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_BYTE *)(v5 + 232) = 0;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 352) = 0u;
    *(_OWORD *)(v5 + 368) = 0u;
    *(_OWORD *)(v5 + 320) = 0u;
    *(_OWORD *)(v5 + 336) = 0u;
    *(_OWORD *)(v5 + 288) = 0u;
    *(_OWORD *)(v5 + 304) = 0u;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 384) = 0u;
    *(_OWORD *)(v5 + 400) = xmmword_1B6627BC0;
    *(_OWORD *)(v5 + 416) = xmmword_1B6627BC0;
    *(_QWORD *)(v5 + 432) = 1;
    *(_DWORD *)(v5 + 440) = 1;
    *(_DWORD *)(v5 + 540) = 0;
    *(_OWORD *)(v5 + 524) = 0u;
    *(_OWORD *)(v5 + 508) = 0u;
    *(_OWORD *)(v5 + 492) = 0u;
    *(_OWORD *)(v5 + 476) = 0u;
    *(_OWORD *)(v5 + 460) = 0u;
    *(_OWORD *)(v5 + 444) = 0u;
  }
  else
  {
    if (!(_DWORD)result)
      goto LABEL_9;
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    v6 = &off_1E69C4398;
    *(_QWORD *)v5 = &off_1E69C4398;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
  }
  v7 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = v5;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = (void (**)(DspLib::AnalyticSignalTransformBiquad *__hidden))**((_QWORD **)this + 57);
  }
  result = ((uint64_t (*)(void))v6[3])();
LABEL_9:
  *((_BYTE *)this + 1504) = a2 > 1;
  *((_BYTE *)this + 2658) = a2 > 2;
  return result;
}

void DspLib::BuzzKill::Algorithm::getThresholdSpectrum(DspLib::BuzzKill::Algorithm *this, float *a2, unint64_t a3, float a4, float a5, int a6)
{
  vDSP_Length v6;
  double v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  char *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v25 = 721;
LABEL_36:
    v26 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v26, v25);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  v6 = a3;
  if (a3 > 0xF4240)
  {
    v25 = 722;
    goto LABEL_36;
  }
  if (a4 < 0.0)
  {
    v25 = 723;
    goto LABEL_36;
  }
  if (a4 < 1.0 && (a6 & 1) != 0)
  {
    v25 = 724;
    goto LABEL_36;
  }
  if (a3 < 2)
  {
    v25 = 725;
    goto LABEL_36;
  }
  if (a5 < 1.0)
  {
    v25 = 726;
    goto LABEL_36;
  }
  if (a5 < a4)
  {
    v25 = 727;
    goto LABEL_36;
  }
  if (!*((_BYTE *)this + 8))
  {
    v25 = 728;
    goto LABEL_36;
  }
  v9 = *((double *)this + 3) * 0.5;
  if (v9 >= a4)
    v10 = a4;
  else
    v10 = v9;
  if (v9 >= a5)
    v11 = a5;
  else
    v11 = v9;
  if (a6)
  {
    v12 = powf(v11 / v10, 1.0 / (float)((float)a3 + -1.0));
    v13 = 0.0;
  }
  else
  {
    v13 = (float)(v11 - v10) / (float)(a3 - 1);
    v12 = 1.0;
  }
  v14 = DspLib::dB2Amp(this, *(float *)(*((_QWORD *)this + 6) + 40));
  DspLib::fill(a2, v6, v14);
  v15 = 0;
  if (v6 >= 0x1F5)
    v6 = 501;
  v16 = 1.0;
  do
  {
    *((float *)this + v15 + 665) = (float)(v13 * (float)v15) + (float)(v10 * v16);
    v16 = v12 * v16;
    ++v15;
  }
  while (v6 != v15);
  v17 = 0;
  v18 = 4 * v6;
  do
  {
    v19 = *((_QWORD *)this + 6) + v17;
    if (*(float *)(v19 + 224) > 0.5)
    {
      v20 = *(unsigned int *)(v19 + 228);
      v21 = *(double **)(v19 + 232);
      DspLib::Biquad::ParametricFilter::initialize((DspLib::BuzzKill::Algorithm *)((char *)this + 352), 1uLL, *((double *)this + 3), 1uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 352, (v20 << 32) | 3, v21, 0, 0x41uLL);
      MEMORY[0x1E0C80A78](v22);
      DspLib::Biquad::amplitudeResponse((_QWORD *)this + 44, (uint64_t)this + 2660, v6, (uint64_t)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v6, 0, *((double *)this + 53), v23, v24);
      DspLib::multiply(a2, v6, (const float *)((char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0)));
    }
    v17 += 16;
  }
  while (v17 != 160);
}

_QWORD *DspLib::BuzzKill::Algorithm::processBlock(DspLib::BuzzKill::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float **v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float **v13;
  size_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t j;
  float *v18;
  vDSP_Length v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int i;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  float **v29;
  float **v30;
  uint64_t v31;
  unint64_t v32;
  const void *v33;
  unsigned int v34;
  float *v35;
  const float *v36;
  DspLibBuffer *v38;
  uint64_t cycle_count;
  _QWORD v40[3];
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[3];
  float *v46;
  unsigned int v47[2];
  uint64_t v48;
  vDSP_Length v49;
  _QWORD v50[3];

  v38 = a3;
  v50[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  v5 = DspLibBuffer::numChannels(a2);
  MEMORY[0x1E0C80A78](v5);
  v8 = (float **)((char *)&v38 - v7);
  if (v6 >= 0x200)
    v9 = 512;
  else
    v9 = v6;
  bzero((char *)&v38 - v7, v9);
  DspLibBuffer::channelsPtr((float *)a2, v8);
  v10 = DspLibBuffer::numChannels(v38);
  MEMORY[0x1E0C80A78](v10);
  v13 = (float **)((char *)&v38 - v12);
  if (v11 >= 0x200)
    v14 = 512;
  else
    v14 = v11;
  bzero((char *)&v38 - v12, v14);
  DspLibBuffer::channelsPtr((float *)v38, v13);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  if (*(float *)(*((_QWORD *)this + 6) + 60) <= 0.5)
  {
    v18 = (float *)**((_QWORD **)this + 27);
    v19 = cycle_count;
    if ((_DWORD)cycle_count)
      memmove(**((void ***)this + 27), *v8, 4 * cycle_count);
    LODWORD(v20) = *((_DWORD *)this + 3);
    if (v20 >= 2)
    {
      v21 = 1;
      do
      {
        DspLib::add(v18, v19, v8[v21++]);
        v20 = *((unsigned int *)this + 3);
      }
      while (v21 < v20);
    }
    DspLib::multiply(v18, v19, 2.0 / (float)v20);
    if (*((_DWORD *)this + 628) <= 1u)
    {
      v22 = cycle_count;
    }
    else
    {
      DspLib::Biquad::Filter::process((_QWORD *)this + 315, (uint64_t)v18, v19, (uint64_t)v18, (float **)v19);
      v49 = v19;
      v50[0] = v18;
      *(_QWORD *)v47 = v50;
      v48 = 1;
      v45[2] = v19;
      v46 = v18;
      v45[0] = &v46;
      v45[1] = 1;
      DspLib::DownSampler::process((unsigned int *)this + 656, v45, v47);
      v19 = v49;
      v22 = v49;
    }
    (*(void (**)(_QWORD, float *, vDSP_Length, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 57)
                                                                                         + 56))(*((_QWORD *)this + 57), v18, v19, *((_QWORD *)this + 33), v22, *((_QWORD *)this + 34), v22);
    v47[0] = 0;
    v23 = DspLib::BuzzKill::Algorithm::processBuzzAnalysis(this, v22, v47, (const float *const *)this + 33, (const float *const *)this + 34);
    for (i = 0; v23; i += v27)
    {
      v25 = *((unsigned int *)this + 3);
      v26 = *((_DWORD *)this + 628) * v23;
      if (v26 + i <= cycle_count)
        v27 = v26;
      else
        v27 = cycle_count - i;
      v44[0] = v8;
      v44[1] = v25;
      v44[2] = v27;
      v43[0] = v13;
      v43[1] = v25;
      v43[2] = v27;
      DspLib::MultiChannelCircularDelay::process((const void **)this + 287, v44, v43);
      DspLib::BuzzKill::Algorithm::processFilterBank(this, v13, v13, v27);
      v28 = *((unsigned int *)this + 3);
      v29 = v13;
      v30 = v8;
      if ((_DWORD)v28)
      {
        do
        {
          *v30++ += v27;
          *v29++ += v27;
          --v28;
        }
        while (v28);
      }
      v23 = DspLib::BuzzKill::Algorithm::processBuzzAnalysis(this, v22, v47, (const float *const *)this + 33, (const float *const *)this + 34);
    }
    v15 = cycle_count;
    if (cycle_count > i)
    {
      v31 = *((unsigned int *)this + 3);
      v41[0] = v8;
      v41[1] = v31;
      v42 = cycle_count - i;
      v40[0] = v13;
      v40[1] = v31;
      v40[2] = v42;
      DspLib::MultiChannelCircularDelay::process((const void **)this + 287, v41, v40);
      DspLib::BuzzKill::Algorithm::processFilterBank(this, v13, v13, v15 - i);
      v15 = cycle_count;
    }
  }
  else
  {
    v15 = cycle_count;
    if (a2 != v38)
    {
      v16 = *((unsigned int *)this + 3);
      if ((_DWORD)v16)
      {
        for (j = 0; j < v16; ++j)
        {
          if (v15)
          {
            memmove(v13[j], v8[j], 4 * v15);
            v16 = *((unsigned int *)this + 3);
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 40))
  {
    v32 = v15;
    DspLib::CPUMeasure::stop((DspLib::BuzzKill::Algorithm *)((char *)this + 72), v15, *((double *)this + 3));
    if (*((_BYTE *)this + 40) && *((_QWORD *)this + 43))
    {
      v33 = (const void *)DspLibBuffer::channel(v38, 0);
      if ((_DWORD)cycle_count)
        memmove(**((void ***)this + 27), v33, 4 * cycle_count);
      if (*((_DWORD *)this + 3) >= 2u)
      {
        v34 = 1;
        do
        {
          v35 = (float *)**((_QWORD **)this + 27);
          v36 = (const float *)DspLibBuffer::channel(v38, v34);
          DspLib::add(v35, v15, v36);
          ++v34;
        }
        while (v34 < *((_DWORD *)this + 3));
      }
      DspLib::BuzzKill::FFTForDisplay::process(*((DspLib::BuzzKill::FFTForDisplay **)this + 43), **((float ***)this + 27), cycle_count);
    }
  }
  else
  {
    v32 = v15;
  }
  return DspLibBuffer::setNumFrames(v38, v32);
}

uint64_t DspLib::BuzzKill::Algorithm::processBuzzAnalysis(DspLib::BuzzKill::Algorithm *this, int a2, unsigned int *a3, const float *const *a4, const float *const *a5)
{
  uint64_t v8;
  const float *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  char v31;
  char *v33;
  _QWORD v35[3];
  _QWORD v36[3];
  const float *v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  v9 = &(*a4)[v8];
  v37 = &(*a5)[v8];
  v38[0] = v9;
  v36[0] = &v37;
  v36[1] = 1;
  v36[2] = (a2 - v8);
  DspLib::FFT::Filterbank::audioInput((uint64_t)this + 464, v36);
  v10 = a2 - *a3;
  v35[0] = v38;
  v35[1] = 1;
  v35[2] = v10;
  *a3 += DspLib::FFT::Filterbank::audioInput((uint64_t)this + 824, v35);
  v11 = *(_QWORD *)(*((_QWORD *)this + 97) + 72);
  if (v11 == *(_QWORD *)(*((_QWORD *)this + 142) + 72))
  {
    if (v11 && !*((_BYTE *)this + 2657))
    {
      if (!*((_BYTE *)this + 2656))
      {
        v12 = *((double *)this + 3);
        v13 = 1.0
            - expf(-1.0/ (float)((float)(*(float *)(*((_QWORD *)this + 6) + 88)* (float)(v12 / (float)(v11 * (unint64_t)*((unsigned int *)this + 628))))/ 1000.0));
        v14 = *((unsigned int *)this + 557);
        v15 = (float *)*((_QWORD *)this + 156);
        v16 = *((_QWORD *)this + 157) - (_QWORD)v15;
        if ((_DWORD)v14)
        {
          v17 = (float *)*((_QWORD *)this + 282);
          do
          {
            *v17 = *v17 + (float)((float)(1.0 - *v17) * v13);
            ++v17;
            --v14;
          }
          while (v14);
        }
        if ((v16 & 0x3FFFFFFFCLL) != 0)
        {
          v18 = (v16 >> 2);
          do
          {
            *v15 = *v15 + (float)((float)(1.0 - *v15) * v13);
            ++v15;
            --v18;
          }
          while (v18);
        }
      }
      DspLib::FFT::amplitude(*((_QWORD *)this + 94), *((float **)this + 161), *((_QWORD *)this + 162));
      MEMORY[0x1E0C80A78](v19);
      v21 = (float *)((char *)&v35[-1] - v20);
      DspLib::multiply(*((const float **)this + 161), *((unsigned int *)this + 298), *((const float **)this + 156), (uint64_t)(*((_QWORD *)this + 157) - *((_QWORD *)this + 156)) >> 2, (float *)((char *)&v35[-1] - v20));
      MEMORY[0x1E0C80A78](v22);
      v24 = (float *)((char *)&v35[-1] - v23);
      MEMORY[0x1E0C80A78](v25);
      v27 = (float *)((char *)&v35[-1] - ((v26 + 15) & 0x7FFFFFFF0));
      MEMORY[0x1E0C80A78](v28);
      v30 = (float *)((char *)&v35[-1] - v29);
      LODWORD(v21) = DspLib::BuzzKill::Algorithm::getPartialsBeyondThreshold(this, *((float **)this + 150), *((float **)this + 156), v21, (float *)((char *)&v35[-1] - v29), v27, v24);
      v31 = (DspLib::BuzzKill::MitigationFilterBank::numActiveFilters((DspLib::BuzzKill::Algorithm *)((char *)this + 1504)) | v21) == 0;
      *((_BYTE *)this + 2656) = v31;
      DspLib::BuzzKill::MitigationFilterBank::assignFilters((DspLib::BuzzKill::Algorithm *)((char *)this + 1504), v31, v30, v27, (int)v21, v24, *((float *)this + 374));
    }
  }
  else
  {
    v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v33, 500);
    ++DspLibDebug::mAssertCounter;
  }
  return v11;
}

void DspLib::BuzzKill::Algorithm::processFilterBank(DspLib::BuzzKill::Algorithm *this, float **a2, float **a3, unsigned int a4)
{
  unsigned int v8;
  DspLib::BuzzKill::HighBuzzKillFFT *v9;
  uint64_t v10;
  vDSP_Length v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float **v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float *const *v28;
  size_t v29;
  uint64_t v30;
  float *v31;
  DspLib::BuzzKill::HighBuzzKillFFT *v32;
  DspLib::BuzzKill::HighBuzzKillFFT *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  uint64_t v42;
  __int128 v43;
  _QWORD v44[3];
  __int128 v45;
  uint64_t v46;
  _BYTE v47[96];
  _BYTE v48[96];
  _QWORD v49[3];
  _BYTE v50[24];
  _BYTE v51[96];
  _BYTE v52[96];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 2656))
  {
    v8 = *((_DWORD *)this + 580);
    v9 = (DspLib::BuzzKill::HighBuzzKillFFT *)*((_QWORD *)this + 148);
    if (v8 < 2)
    {
      if (!v9)
        return;
    }
    else if (!v9)
    {
      v10 = *((unsigned int *)this + 3);
      v38[0] = a2;
      v38[1] = v10;
      v38[2] = a4;
      v37[0] = a3;
      v37[1] = v10;
      v37[2] = a4;
      DspLib::MultiChannelCircularDelay::process((const void **)this + 329, v38, v37);
      return;
    }
    DspLib::BuzzKill::HighBuzzKillFFT::process(v9, a2, a3, a4);
  }
  else
  {
    v11 = a4;
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)v52, a2, a4, *((_DWORD *)this + 3));
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)v51, a3, a4, *((_DWORD *)this + 4));
    if (*((_DWORD *)this + 580) < 2u)
    {
      DspLib::AlgorithmBase::process((DspLib::BuzzKill::Algorithm *)((char *)this + 1536), (DspLibBuffer *)v52, (DspLibBuffer *)v51, 1u, 1);
      v33 = (DspLib::BuzzKill::HighBuzzKillFFT *)*((_QWORD *)this + 148);
      if (v33)
        DspLib::BuzzKill::HighBuzzKillFFT::process(v33, a2, a3, a4);
    }
    else
    {
      v36 = (uint64_t)&v36;
      MEMORY[0x1E0C80A78](v12);
      v15 = (char *)&v37[-1] - v14;
      if (v13 >= 0x200)
        v16 = 512;
      else
        v16 = v13;
      bzero((char *)&v37[-1] - v14, v16);
      v17 = (uint64_t *)*((_QWORD *)this + 27);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 28) - (_QWORD)v17) >> 3);
      if (*((uint64_t **)this + 28) != v17)
      {
        v19 = 0;
        do
        {
          v20 = *v17;
          v17 += 3;
          *(_QWORD *)&v15[8 * v19++] = v20;
        }
        while (v18 > v19);
      }
      *(_QWORD *)v50 = v15;
      *(_QWORD *)&v50[8] = v18;
      *(_QWORD *)&v50[16] = a4;
      v21 = *((unsigned int *)this + 3);
      v49[0] = a2;
      v49[1] = v21;
      v49[2] = a4;
      DspLib::FIRDecimator::process((uint64_t)this + 2432, v49, v50);
      v23 = (float **)*((_QWORD *)this + 30);
      v22 = (_QWORD *)*((_QWORD *)this + 31);
      v24 = 0xAAAAAAAAAAAAAAABLL * ((float **)v22 - v23);
      MEMORY[0x1E0C80A78](v25);
      v28 = (float *const *)((char *)&v37[-1] - v27);
      if (v26 >= 0x200)
        v29 = 512;
      else
        v29 = v26;
      bzero((char *)&v37[-1] - v27, v29);
      if (v22 != v23)
      {
        v30 = 0;
        do
        {
          v31 = *v23;
          v23 += 3;
          v28[v30++] = v31;
        }
        while (v24 > v30);
      }
      DspLibBuffer::DspLibBuffer((DspLibBuffer *)v48, *(float *const **)v50, *(uint64_t *)&v50[16], *((_DWORD *)this + 3));
      DspLibBuffer::DspLibBuffer((DspLibBuffer *)v47, v28, a4, *((_DWORD *)this + 3));
      DspLib::AlgorithmBase::process((DspLib::BuzzKill::Algorithm *)((char *)this + 1536), (DspLibBuffer *)v48, (DspLibBuffer *)v47, 1u, 1);
      v45 = *(_OWORD *)v50;
      v46 = *(_QWORD *)&v50[16];
      v44[0] = v28;
      v44[1] = v24;
      v44[2] = *(_QWORD *)&v50[16];
      DspLib::subtract(&v45, v44);
      v41[2] = a4;
      v42 = *(_QWORD *)v50;
      v43 = *(_OWORD *)&v50[8];
      v41[0] = v28;
      v41[1] = v24;
      DspLib::PolyPhaseInterpolator::process((unsigned int *)this + 582, &v42, v41);
      v32 = (DspLib::BuzzKill::HighBuzzKillFFT *)*((_QWORD *)this + 148);
      if (v32)
      {
        DspLib::BuzzKill::HighBuzzKillFFT::process(v32, a2, a3, a4);
      }
      else
      {
        v34 = *((unsigned int *)this + 3);
        v40[0] = a2;
        v40[1] = v34;
        v40[2] = a4;
        v39[0] = a3;
        v39[1] = v34;
        v39[2] = a4;
        DspLib::MultiChannelCircularDelay::process((const void **)this + 329, v40, v39);
      }
      if (*((_DWORD *)this + 3))
      {
        v35 = 0;
        do
        {
          DspLib::subtract(a3[v35], v11, v28[v35]);
          ++v35;
        }
        while (v35 < *((unsigned int *)this + 3));
      }
      DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v47);
      DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v48);
    }
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v51);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v52);
  }
}

void sub_1B60CB298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 + 296));
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 + 440));
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v2 - 200));
  _Unwind_Resume(a1);
}

uint64_t DspLib::BuzzKill::Algorithm::getPartialsBeyondThreshold(DspLib::BuzzKill::Algorithm *this, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  uint64_t v8;
  float *v9;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  float v20;
  float v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  const float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  double v33;
  long double v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;

  v8 = *((unsigned int *)this + 298);
  if (v8 >= 2)
  {
    v9 = a4;
    v12 = 0;
    v13 = *((_QWORD *)this + 153);
    for (i = 1; i != v8; ++i)
    {
      if (a4[i] > a2[i])
      {
        v15 = v13 + 8 * v12;
        *(float *)v15 = a3[i];
        *(_DWORD *)(v15 + 4) = i;
        ++v12;
      }
    }
    if (v12)
    {
      DspLib::BuzzKill::quicksort();
      v16 = *((_QWORD *)this + 162);
      if (v16)
        memmove(*((void **)this + 171), *((const void **)this + 161), 4 * v16);
      DspLib::FFT::amplitude(*((_QWORD *)this + 139), *((float **)this + 170), *((_QWORD *)this + 172));
      DspLib::BuzzKill::BuzzKillFFT::processWithDifference((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
      DspLib::BuzzKill::BuzzKillFFT::processWithDifference((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
      DspLib::FFT::amplitude(*((_QWORD *)this + 139), *((float **)this + 160), *((_QWORD *)this + 162));
      DspLib::FFT::amplitude(*((_QWORD *)this + 94), *((float **)this + 161), *((_QWORD *)this + 162));
      v17 = 0;
      v44 = 0;
      v45 = v12;
      while (1)
      {
        v18 = *(unsigned int *)(*((_QWORD *)this + 153) + 8 * v17 + 4);
        v19 = v9;
        v20 = a2[v18] / (float)(v9[v18] + COERCE_FLOAT(71362));
        a3[v18] = a3[v18] * v20;
        v21 = sqrtf(v20);
        v22 = (v18 - 1);
        a3[v22] = a3[v22] * v21;
        v23 = v18 + 1;
        if ((v18 + 1) < *((_DWORD *)this + 298))
          a3[v23] = v21 * a3[v23];
        v24 = DspLib::ComplexSpan::operator[]((_QWORD *)this + 160, v18);
        v26 = v25;
        v27 = DspLib::ComplexSpan::operator[]((_QWORD *)this + 170, v18);
        v28 = (const float *)*((_QWORD *)this + 583);
        v29 = (uint64_t)(*((_QWORD *)this + 584) - (_QWORD)v28) >> 2;
        v30 = *((double *)this + 3);
        v32 = sqrtf((float)(v26 * v26) + (float)(v24 * v24))
            / (float)(sqrtf((float)(v31 * v31) + (float)(v27 * v27)) + COERCE_FLOAT(71362));
        v33 = (float)(v30 / (float)*((unsigned int *)this + 628)) / 6.28318531 * (float)(v32 * v32);
        v34 = cos(v32);
        *(float *)&v34 = v33 / sqrt(1.0 - v34 + 1.0 - v34);
        v47 = *(float *)&v34;
        v46 = 1.0;
        DspLib::poly(v28, v29, &v47, 1uLL, &v46);
        v35 = v47 * v46;
        if ((float)(v47 * v46) <= *(float *)(*((_QWORD *)this + 6) + 84) || v35 >= *((float *)this + 1172))
        {
          v9 = v19;
        }
        else if ((_DWORD)v44)
        {
          v36 = 0;
          v37 = v44;
          v9 = v19;
          while (v35 <= *(float *)(*((_QWORD *)this + 183) + v36) || v35 >= *(float *)(*((_QWORD *)this + 180) + v36))
          {
            v36 += 4;
            if (4 * v44 == v36)
              goto LABEL_22;
          }
        }
        else
        {
          v37 = 0;
          v9 = v19;
LABEL_22:
          a5[v37] = v35;
          a6[v37] = v20;
          if (*((_BYTE *)this + 2658))
          {
            v38 = *((_QWORD *)this + 171);
            v39 = a2[v18]
                / (float)((float)(sqrtf((float)((float)(*(float *)(v38 + 4 * v18) * *(float *)(v38 + 4 * v18))+ (float)(*(float *)(v38 + 4 * v22) * *(float *)(v38 + 4 * v22)))+ (float)(*(float *)(v38 + 4 * v23) * *(float *)(v38 + 4 * v23)))* 0.82)+ 1.0e-20);
          }
          else
          {
            v39 = a3[v18];
          }
          a7[v37] = v39;
          *(float *)(*((_QWORD *)this + 180) + 4 * v37) = v35 * *((float *)this + 372);
          *(float *)(*((_QWORD *)this + 183) + 4 * v37) = v35 * *((float *)this + 373);
          v44 = (v44 + 1);
          if ((_DWORD)v44 == *((_DWORD *)this + 557))
            return v44;
        }
        if (++v17 == v45)
          return v44;
      }
    }
  }
  return 0;
}

double DspLib::BuzzKill::Algorithm::latencySamples(DspLib::BuzzKill::Algorithm *this, double a2)
{
  char *v4;

  if (!*((_BYTE *)this + 8))
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 533);
    ++DspLibDebug::mAssertCounter;
  }
  LODWORD(a2) = *((_DWORD *)this + 572);
  return (double)*(unint64_t *)&a2;
}

void DspLib::BuzzKill::Algorithm::status(double *a1, uint64_t a2, vDSP_Length __N)
{
  float v6;
  double v7;
  float v8;
  uint64_t v9;
  char *v10;

  if (*((_BYTE *)a1 + 8))
  {
    DspLib::clear((float *)a2, __N);
    v6 = a1[3];
    *(float *)(a2 + 12) = v6;
    v7 = (*(double (**)(double *))(*(_QWORD *)a1 + 80))(a1);
    v8 = a1[3];
    *(float *)&v7 = v7 / v8 * 1000.0;
    *(_DWORD *)(a2 + 16) = LODWORD(v7);
    DspLib::BuzzKill::Algorithm::getThresholdSpectrum((DspLib::BuzzKill::Algorithm *)a1, (float *)(a2 + 40), 0x1F5uLL, *(float *)(*((_QWORD *)a1 + 6) + 48), *(float *)(*((_QWORD *)a1 + 6) + 52), 1);
    DspLib::amp2dB((float *)(a2 + 40), 0x1F5uLL, 1.0);
    DspLib::BuzzKill::MitigationFilterBank::status((uint64_t)(a1 + 188), a2, *(float *)(*((_QWORD *)a1 + 6) + 48), *(float *)(*((_QWORD *)a1 + 6) + 52), __N, *(float *)(*((_QWORD *)a1 + 6) + 60) > 0.5);
    if (*((_BYTE *)a1 + 40) && (v9 = *((_QWORD *)a1 + 43)) != 0)
      DspLib::BuzzKill::FFTForDisplay::status(v9, a2);
    else
      DspLib::fill((float *)(a2 + 4048), 0x1F5uLL, -100.0);
  }
  else
  {
    v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BuzzKill/dsp/DspLibBuzzKill.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 787);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::BuzzKill::Algorithm::~Algorithm(DspLib::BuzzKill::Algorithm *this)
{
  DspLib::BuzzKill::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void **v17;

  *(_QWORD *)this = &off_1E69C3EB8;
  v2 = (void *)*((_QWORD *)this + 583);
  if (v2)
  {
    *((_QWORD *)this + 584) = v2;
    operator delete(v2);
  }
  v17 = (void **)((char *)this + 2632);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 2600);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BuzzKill::Algorithm *)((char *)this + 2568));
  v3 = (void *)*((_QWORD *)this + 318);
  if (v3)
  {
    *((_QWORD *)this + 319) = v3;
    operator delete(v3);
  }
  v17 = (void **)((char *)this + 2480);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v4 = (void *)*((_QWORD *)this + 305);
  if (v4)
  {
    *((_QWORD *)this + 306) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 301);
  if (v5)
  {
    *((_QWORD *)this + 302) = v5;
    operator delete(v5);
  }
  v17 = (void **)((char *)this + 2376);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 2344);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 2296);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v17);
  v6 = (void *)*((_QWORD *)this + 282);
  if (v6)
  {
    *((_QWORD *)this + 283) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 279);
  if (v7)
  {
    *((_QWORD *)this + 280) = v7;
    operator delete(v7);
  }
  DspLib::NotchFilterBank::FilterBank::~FilterBank((DspLib::BuzzKill::Algorithm *)((char *)this + 1536));
  v8 = (void *)*((_QWORD *)this + 183);
  if (v8)
  {
    *((_QWORD *)this + 184) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 180);
  if (v9)
  {
    *((_QWORD *)this + 181) = v9;
    operator delete(v9);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::BuzzKill::Algorithm *)((char *)this + 1360));
  DspLib::ComplexVector::~ComplexVector((DspLib::BuzzKill::Algorithm *)((char *)this + 1280));
  v10 = (void *)*((_QWORD *)this + 156);
  if (v10)
  {
    *((_QWORD *)this + 157) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 153);
  if (v11)
  {
    *((_QWORD *)this + 154) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 150);
  if (v12)
  {
    *((_QWORD *)this + 151) = v12;
    operator delete(v12);
  }
  v13 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v13)
    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100]((uint64_t)this + 1184, v13);
  DspLib::FFT::Filterbank::~Filterbank((DspLib::BuzzKill::Algorithm *)((char *)this + 824));
  DspLib::FFT::Filterbank::~Filterbank((DspLib::BuzzKill::Algorithm *)((char *)this + 464));
  v14 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v17 = (void **)((char *)this + 432);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BuzzKill::Algorithm *)((char *)this + 400));
  v15 = (void *)*((_QWORD *)this + 47);
  if (v15)
  {
    *((_QWORD *)this + 48) = v15;
    operator delete(v15);
  }
  std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100]((uint64_t *)this + 43, 0);
  DspLib::ComplexVector::~ComplexVector((DspLib::BuzzKill::Algorithm *)((char *)this + 264));
  v17 = (void **)((char *)this + 240);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 216);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  *(_QWORD *)this = off_1E69C46F0;
  v16 = (void *)*((_QWORD *)this + 6);
  if (v16)
  {
    *((_QWORD *)this + 7) = v16;
    operator delete(v16);
  }
}

uint64_t DspLib::BuzzKill::Algorithm::numStatus(DspLib::BuzzKill::Algorithm *this)
{
  return 2214;
}

uint64_t DspLib::BuzzKill::quicksort()
{
  uint64_t v0;
  uint64_t result;
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  float *v11;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v0 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  result = MEMORY[0x1E0C80A78](v0);
  v5 = (_DWORD *)((char *)v22 - v4);
  if ((v2 & 0x80000000) == 0)
  {
    v6 = 0;
    *v3 = 0;
    *v5 = v2;
    do
    {
      while (1)
      {
        v7 = (int)v3[v6];
        v8 = v5[v6];
        if ((int)v7 < v8)
          break;
        if (--v6 < 0)
          return result;
      }
      v9 = v8 + v7;
      if (v8 + (int)v7 < 0 != __OFADD__(v8, (_DWORD)v7))
        ++v9;
      v10 = v9 >> 1;
      v11 = (float *)(result + 8 * v7);
      v12 = *(_QWORD *)v11;
      *(_QWORD *)v11 = *(_QWORD *)(result + 8 * v10);
      *(_QWORD *)(result + 8 * v10) = v12;
      v13 = v7 + 1;
      v14 = *v11;
      v15 = v8;
      do
      {
        if (v13 <= v8)
        {
          v16 = v8 + 1 - v13;
          v17 = (float *)(result + 8 * v13);
          while (*v17 <= v14)
          {
            ++v13;
            v17 += 2;
            if (!--v16)
            {
              v13 = v8 + 1;
              break;
            }
          }
        }
        if (v15 >= (int)v7)
        {
          v18 = v15 + 1;
          v19 = (float *)(result + 8 * v15);
          while (*v19 > v14)
          {
            --v15;
            --v18;
            v19 -= 2;
            if (v18 <= v7)
            {
              v15 = v7 - 1;
              break;
            }
          }
        }
        if (v13 < v15)
        {
          v20 = *(_QWORD *)(result + 8 * v13);
          *(_QWORD *)(result + 8 * v13) = *(_QWORD *)(result + 8 * v15);
          *(_QWORD *)(result + 8 * v15) = v20;
        }
      }
      while (v13 <= v15);
      v21 = *(_QWORD *)v11;
      *(_QWORD *)v11 = *(_QWORD *)(result + 8 * v15);
      *(_QWORD *)(result + 8 * v15) = v21;
      v5[v6++] = v15 - 1;
      v3[v6] = v15 + 1;
      v5[v6] = v8;
    }
    while ((v6 & 0x80000000) == 0);
  }
  return result;
}

void std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(a2 + 456));
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(a2 + 360));
    DspLib::FFT::Filterbank::~Filterbank((DspLib::FFT::Filterbank *)a2);
    JUMPOUT(0x1BCC95CECLL);
  }
}

DspLib::BuzzKill::HighBuzzKillFFT *DspLib::BuzzKill::HighBuzzKillFFT::HighBuzzKillFFT(DspLib::BuzzKill::HighBuzzKillFFT *this)
{
  uint64_t v2;

  DspLib::FFT::Filterbank::Filterbank(this, 1);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)(v2 + 360));
  DspLibBuffer::DspLibBuffer((DspLib::BuzzKill::HighBuzzKillFFT *)((char *)this + 456));
  return this;
}

void sub_1B60CBCF0(_Unwind_Exception *a1)
{
  DspLib::FFT::Filterbank *v1;
  DspLibBuffer *v2;

  DspLibBuffer::~DspLibBuffer(v2);
  DspLib::FFT::Filterbank::~Filterbank(v1);
  _Unwind_Resume(a1);
}

float DspLib::Biquad::read@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(float *)(a1 + 16);
  *(float *)(a2 + 16) = result;
  return result;
}

float DspLib::Biquad::read(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  float *v4;
  float *v5;
  unsigned int v6;
  float result;

  if (a4)
  {
    v4 = (float *)(a1 + 16);
    v5 = (float *)(a3 + 16);
    v6 = 1;
    do
    {
      result = *v4;
      *((_OWORD *)v5 - 1) = *((_OWORD *)v4 - 1);
      *v5 = result;
      v5 += 5;
      v4 += 5;
    }
    while (a4 > v6++);
  }
  return result;
}

float DspLib::Biquad::write(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  result = *(float *)(a1 + 16);
  *(float *)(a2 + 16) = result;
  return result;
}

float DspLib::Biquad::write(uint64_t a1, unint64_t a2, uint64_t a3)
{
  float *v3;
  float *v4;
  unsigned int v5;
  float result;

  if (a2)
  {
    v3 = (float *)(a3 + 16);
    v4 = (float *)(a1 + 16);
    v5 = 1;
    do
    {
      result = *v4;
      *((_OWORD *)v3 - 1) = *((_OWORD *)v4 - 1);
      *v3 = result;
      v3 += 5;
      v4 += 5;
    }
    while (a2 > v5++);
  }
  return result;
}

uint64_t DspLib::Biquad::validate(uint64_t a1)
{
  BOOL v2;
  float v3;
  BOOL v4;
  double v5;
  unsigned int v7;
  double v8;
  double v9;
  double v10;

  v2 = (*(_DWORD *)a1 & 0x7FFFFFFFu) < 0x7F800000
    && (*(_DWORD *)(a1 + 4) & 0x7FFFFFFFu) < 0x7F800000
    && (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu) < 0x7F800000;
  v3 = *(float *)(a1 + 16);
  v4 = v2 && (*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) < 0x7F800000;
  v5 = v3;
  v7 = v4 && (LODWORD(v3) & 0x7FFFFFFFu) < 0x7F800000;
  v8 = *(float *)(a1 + 12) * -0.5;
  v9 = -(v5 - v8 * v8);
  v10 = fabs(v8) + sqrt(v9);
  if (v9 >= 0.0)
    v5 = v10;
  if (v5 < 1.0)
    return v7;
  else
    return 0;
}

uint64_t DspLib::Biquad::validate(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v6;
  int v7;

  if (!a2)
    return 1;
  v2 = a2;
  LODWORD(v4) = 1;
  do
  {
    v6 = *a1;
    v7 = *((_DWORD *)a1 + 4);
    v4 = v4 & DspLib::Biquad::validate((uint64_t)&v6);
    a1 = (__int128 *)((char *)a1 + 20);
    --v2;
  }
  while (v2);
  return v4;
}

double DspLib::Biquad::frequencyResponse(float *a1, int a2, double a3, double a4, double a5)
{
  double sinval;
  __double2 v7;
  double cosval;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  double v21;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  if (a2 == 1)
  {
    v17 = 0.0 - a3 * a3;
    v18 = a3 * 0.0 + a3 * 0.0;
    v19 = a1[2];
    if (v19 == 0.0)
    {
      v20 = a1[1];
      v21 = *a1;
      v22 = v20 == 0.0;
      v23 = v21 * 0.0 + v20;
      if (v20 == 0.0)
        v24 = 0.0;
      else
        v24 = v21 * a3;
      if (!v22)
        v21 = v23;
    }
    else
    {
      v25 = *a1;
      v26 = a1[1];
      v27 = v17 * v25 + v26 * 0.0;
      v24 = v18 * v25 + v26 * a3;
      v21 = v27 + v19;
    }
    v29 = a1[3];
    v28 = a1[4];
    v30 = v18 + v29 * a3;
    v31 = v17 + v29 * 0.0 + v28;
    a5 = 1.0;
    v22 = v29 == 0.0;
    v32 = v29 + 0.0;
    if (v22)
    {
      v32 = 1.0;
      v33 = 0.0;
    }
    else
    {
      v33 = a3;
    }
    if (v28 == 0.0)
      v34 = v32;
    else
      v34 = v31;
    if (v28 == 0.0)
      v30 = v33;
    v35 = v30 * v30 + v34 * v34;
    if (v35 != 0.0)
      return (v24 * v30 + v21 * v34) * (1.0 / v35);
  }
  else if (!a2)
  {
    v7 = __sincos_stret(a3);
    sinval = v7.__sinval;
    cosval = v7.__cosval;
    v9 = cosval * cosval - sinval * sinval;
    v10 = -(sinval * cosval) - cosval * sinval;
    v11 = a1[3];
    v12 = a1[4];
    v13 = v9 * v12;
    v14 = v10 * v12 - v7.__sinval * v11;
    a5 = 1.0;
    v15 = v7.__cosval * v11 + v13 + 1.0;
    v16 = v14 * v14 + v15 * v15;
    if (v16 != 0.0)
      return (v14 * (v10 * a1[2] - v7.__sinval * a1[1]) + (v7.__cosval * a1[1] + v9 * a1[2] + *a1) * v15) / v16;
  }
  return a5;
}

uint64_t DspLib::ToneMeister::Algorithm::initialize(vDSP_Length *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v4 = DspLib::AlgorithmBase::initialize((DspLib::AlgorithmBase *)this, a2, a3);
  v5 = v4;
  v6 = (unsigned int *)this + 3;
  v7 = *((_DWORD *)this + 3);
  v8 = (int *)&DspLib::ToneMeister::Parameters::kMaxNumChannels;
  if (v7)
  {
    if (v7 > 0x10)
      v6 = (unsigned int *)&DspLib::ToneMeister::Parameters::kMaxNumChannels;
    v9 = *v6;
  }
  else
  {
    v9 = 1;
  }
  v10 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 3) = v9;
  if (v10)
  {
    if (v10 <= 0x10)
      v8 = (int *)(this + 2);
    v11 = *v8;
  }
  else
  {
    v11 = 1;
  }
  *((_DWORD *)this + 4) = v11;
  if ((_DWORD)v4)
  {
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(this + 411), v9, this[418]);
    DspLibBuffer::initialize((DspLibBuffer *)(this + 501), *((unsigned int *)this + 3), 1u);
    DspLibBuffer::setNumFrames(this + 501, *((unsigned int *)this + 3));
    *((_BYTE *)this + 8) = 1;
    DspLib::ToneMeister::Algorithm::setMaxFrequencies((DspLib::ToneMeister::Algorithm *)this);
    (*(void (**)(vDSP_Length *, _QWORD))(*this + 200))(this, *((unsigned __int8 *)this + 40));
  }
  (*(void (**)(vDSP_Length *))(*this + 144))(this);
  return v5;
}

uint64_t DspLib::ToneMeister::Algorithm::setMaxFrequencies(DspLib::ToneMeister::Algorithm *this)
{
  DspLib::ToneMeister::Parameters *v1;
  float v2;
  float v3;
  float v4;
  char *v5;
  uint64_t result;

  v1 = 0;
  v2 = *((double *)this + 3);
  v3 = v2 * 0.49;
  if (v3 <= 20000.0)
    v4 = v3;
  else
    v4 = 20000.0;
  v5 = (char *)this + 216;
  do
  {
    *(float *)&v5[4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 3)] = v4;
    *(float *)&v5[4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 4)] = v4;
    *(float *)&v5[4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 5)] = v4;
    result = DspLib::ToneMeister::Parameters::toneMeisterParameter(v1, 6);
    *(float *)&v5[4 * result] = v4;
    v1 = (DspLib::ToneMeister::Parameters *)((char *)v1 + 1);
  }
  while (v1 != (DspLib::ToneMeister::Parameters *)50);
  return result;
}

void DspLib::ToneMeister::Algorithm::uninitialize(DspLib::ToneMeister::Algorithm *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 4008));
  DspLib::Biquad::Filter::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3288));
  DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3360));
  DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3456));
  DspLib::FFT::Filterbank::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3552));
  DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3912));
  v2 = (_QWORD *)*((_QWORD *)this + 521);
  v3 = (_QWORD *)*((_QWORD *)this + 520);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 521) = v3;
  std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 516);
  std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 518);
  *((_BYTE *)this + 8) = 0;
}

void DspLib::ToneMeister::Algorithm::reset(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  DspLib::ToneMeister::Algorithm::resetBiquadChainsAndRTA((DspLib::ToneMeister::Algorithm *)this);
  v2 = this[520];
  v3 = this[521];
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4);
  }
  v5 = this[523];
  if (v5)
  {
    v5[2] = 0;
    *((_BYTE *)v5 + 32) = 0;
  }
}

void DspLib::ToneMeister::Algorithm::resetBiquadChainsAndRTA(DspLib::ToneMeister::Algorithm *this)
{
  float *v2;
  vDSP_Length cycle_count;
  float *v4;
  vDSP_Length v5;

  DspLib::Biquad::SetupWrapper::reset((DspLib::ToneMeister::Algorithm *)((char *)this + 3336));
  DspLib::FFT::Filterbank::reset((DspLib::ToneMeister::Algorithm *)((char *)this + 3552));
  v2 = (float *)DspLibBuffer::channel((DspLib::ToneMeister::Algorithm *)((char *)this + 3456), 0);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((DspLib::ToneMeister::Algorithm *)((char *)this + 3456));
  DspLib::clear(v2, cycle_count);
  v4 = (float *)DspLibBuffer::channel((DspLib::ToneMeister::Algorithm *)((char *)this + 3912), 0);
  v5 = vp::utility::CPU_Profiler::get_cycle_count((DspLib::ToneMeister::Algorithm *)((char *)this + 3912));
  DspLib::clear(v4, v5);
  *((_BYTE *)this + 4112) = 1;
}

void DspLib::ToneMeister::Algorithm::copyStatesFrom(DspLib::ToneMeister::Algorithm *this, const DspLib::ToneMeister::Algorithm *a2)
{
  BOOL v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  DspLib::DynamicFilter::Algorithm **v10;
  DspLib::DynamicFilter::Algorithm **v11;
  unsigned int v13;
  DspLib::DynamicFilter::Algorithm *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*((_BYTE *)this + 40))
    v4 = *((_BYTE *)a2 + 40) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    DspLibBuffer::operator=((uint64_t)this + 3456, (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3456));
    DspLib::FFT::Filterbank::copyStatesFrom((DspLib::ToneMeister::Algorithm *)((char *)this + 3552), (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3552));
    DspLibBuffer::operator=((uint64_t)this + 3912, (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3912));
    v5 = *(_OWORD *)((char *)a2 + 72);
    v6 = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)this + 88) = v6;
    *(_OWORD *)((char *)this + 72) = v5;
    v7 = *(_OWORD *)((char *)a2 + 120);
    v8 = *(_OWORD *)((char *)a2 + 136);
    v9 = *(_OWORD *)((char *)a2 + 152);
    *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a2 + 168);
    *(_OWORD *)((char *)this + 152) = v9;
    *(_OWORD *)((char *)this + 136) = v8;
    *(_OWORD *)((char *)this + 120) = v7;
  }
  v10 = (DspLib::DynamicFilter::Algorithm **)*((_QWORD *)this + 521);
  v11 = (DspLib::DynamicFilter::Algorithm **)*((_QWORD *)this + 520);
  if ((char *)v10 - (char *)v11 == *((_QWORD *)a2 + 521) - *((_QWORD *)a2 + 520) && v11 != v10)
  {
    v13 = 0;
    do
    {
      v14 = *v11++;
      v15 = v13 + 1;
      DspLib::DynamicFilter::Algorithm::copyStatesFrom(v14, *(const DspLib::DynamicFilter::Algorithm **)(*((_QWORD *)a2 + 520) + 8 * v13));
      v13 = v15;
    }
    while (v11 != v10);
  }
  v16 = *((_QWORD *)this + 523);
  if (v16)
  {
    v17 = *((_QWORD *)a2 + 523);
    if (v17)
    {
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
      *(_BYTE *)(v16 + 32) = *(_QWORD *)(v17 + 16) != 0;
    }
  }
  v18 = *((_QWORD *)this + 418);
  if (v18)
  {
    if (v18 == *((_QWORD *)a2 + 418))
      DspLib::Biquad::Filter::copyStatesFrom((DspLib::ToneMeister::Algorithm *)((char *)this + 3288), (const DspLib::ToneMeister::Algorithm *)((char *)a2 + 3288));
  }
}

double DspLib::DynamicFilter::Algorithm::copyStatesFrom(DspLib::DynamicFilter::Algorithm *this, const DspLib::DynamicFilter::Algorithm *a2)
{
  DspLib::Biquad::Filter *v4;
  const DspLib::Biquad::Filter *v5;
  uint64_t v6;
  DspLib::Biquad::Filter *v7;
  const DspLib::Biquad::Filter *v8;
  uint64_t v9;
  double result;
  _DWORD v11[4];

  DspLib::SideChain::Algorithm::copyStatesFrom((DspLib::DynamicFilter::Algorithm *)((char *)this + 328), (const DspLib::DynamicFilter::Algorithm *)((char *)a2 + 328));
  v4 = (DspLib::Biquad::Filter *)*((_QWORD *)this + 208);
  v5 = (const DspLib::Biquad::Filter *)*((_QWORD *)a2 + 208);
  if (*((_QWORD *)v4 + 7) == *((_QWORD *)v5 + 7))
  {
    v6 = *((_QWORD *)v4 + 6);
    if (v6)
    {
      if (v6 == *((_QWORD *)v5 + 6))
        DspLib::Biquad::Filter::copyStatesFrom(v4, v5);
    }
  }
  v7 = (DspLib::Biquad::Filter *)*((_QWORD *)this + 209);
  v8 = (const DspLib::Biquad::Filter *)*((_QWORD *)a2 + 209);
  if (*((_QWORD *)v7 + 7) == *((_QWORD *)v8 + 7))
  {
    v9 = *((_QWORD *)v7 + 6);
    if (v9)
    {
      if (v9 == *((_QWORD *)v8 + 6))
        DspLib::Biquad::Filter::copyStatesFrom(v7, v8);
    }
  }
  (*(void (**)(const DspLib::DynamicFilter::Algorithm *, _DWORD *, uint64_t))(*(_QWORD *)a2 + 184))(a2, v11, 1);
  *((_DWORD *)this + 430) = v11[0];
  *((_BYTE *)this + 1680) = *((_BYTE *)a2 + 1680);
  *((_DWORD *)this + 431) = *((_DWORD *)a2 + 431);
  result = *((double *)a2 + 216);
  *((double *)this + 216) = result;
  return result;
}

_DWORD *DspLib::ToneMeister::Algorithm::setChannelLinkMode(_DWORD *result, int a2)
{
  if (result[1029] != a2)
  {
    result[1029] = a2;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 144))(result);
  }
  return result;
}

void DspLib::ToneMeister::Algorithm::setMeteringIsEnabled(DspLib::ToneMeister::Algorithm *this, int a2)
{
  DspLibBuffer *v3;
  DspLibBuffer *v4;
  float *v5;
  vDSP_Length cycle_count;
  unsigned int v7;
  float v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *((_BYTE *)this + 40) = a2;
  v3 = (DspLib::ToneMeister::Algorithm *)((char *)this + 3360);
  v4 = (DspLib::ToneMeister::Algorithm *)((char *)this + 3456);
  if (a2)
  {
    DspLibBuffer::initialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3360), 0x65uLL, 1u);
    DspLibBuffer::initialize(v4, 0x2001uLL, 1u);
    DspLibBuffer::setNumFrames(v3, 0x65uLL);
    DspLibBuffer::setNumFrames(v4, 0x2001uLL);
    DspLib::FFT::Filterbank::initialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3552), 1, *((double *)this + 3));
    DspLibBuffer::initialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3912), 0x2001uLL, 1u);
    DspLibBuffer::setNumFrames((_QWORD *)this + 489, 0x2001uLL);
    v5 = (float *)DspLibBuffer::channel(v3, 0);
    cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v3);
    v7 = DspLib::ToneMeister::Parameters::toneMeisterParameter(0, 3);
    (*(void (**)(DspLib::ToneMeister::Algorithm *, _QWORD))(*(_QWORD *)this + 120))(this, v7);
    DspLib::ramp(v5, cycle_count, 1, 20.0, v8);
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v9 = xmmword_1B662A110;
    DspLib::FFT::Filterbank::setParameters((uint64_t)this + 3552, &v9, 10, (__n128)xmmword_1B662A110);
  }
  else
  {
    DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3360));
    DspLibBuffer::uninitialize(v4);
    DspLib::FFT::Filterbank::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3552));
    DspLibBuffer::uninitialize((DspLib::ToneMeister::Algorithm *)((char *)this + 3912));
  }
}

void DspLib::ToneMeister::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  vDSP_Length v19;
  vDSP_Length v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v31;
  __int128 v32;
  int v33;
  void *__p;
  _BYTE *v35;
  void **v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((v5 & 1) != 0)
  {
    *(_BYTE *)(a1 + 4120) = **(float **)(a1 + 48) >= 0.5;
    if (*(_DWORD *)(a1 + 12))
    {
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = 0.0;
        if (((1 << v6) & vcvtas_u32_f32(*(float *)(v7 + 48))) == 0)
          v8 = DspLib::dB2Amp((DspLib *)v5, *(float *)(v7 + 16));
        v5 = DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 4008), v6);
        *(float *)v5 = v8;
        if (((1 << v6) & vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 40))) != 0)
        {
          v5 = DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 4008), v6);
          *(float *)v5 = -*(float *)v5;
        }
        ++v6;
        v9 = *(unsigned int *)(a1 + 12);
      }
      while (v6 < v9);
      v10 = (unsigned int *)(a1 + 4108);
      *(_QWORD *)(a1 + 4104) = 0;
      if ((_DWORD)v9)
      {
        v11 = 0;
        do
        {
          v12 = 0;
          v13 = 0;
          v36 = 0;
          v37 = 0;
          v38 = 0;
          do
          {
            if (DspLib::ToneMeister::Algorithm::channelHasBiquads((DspLib::ToneMeister::Algorithm *)a1, v12, v11))
            {
              DspLib::ToneMeister::Algorithm::designFilter((DspLib::ToneMeister::Algorithm *)a1, v12, v11, (uint64_t)&__p);
              if (DspLib::Biquad::validate((__int128 *)__p, 0xCCCCCCCCCCCCCCCDLL * ((v35 - (_BYTE *)__p) >> 2)))
              {
                v14 = v37;
                if ((unint64_t)v37 >= v38)
                {
                  v15 = (_QWORD *)std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<std::vector<DspLib::Biquad::Section>&>((uint64_t *)&v36, (uint64_t)&__p);
                }
                else
                {
                  *v37 = 0;
                  v14[1] = 0;
                  v14[2] = 0;
                  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(v14, __p, (uint64_t)v35, 0xCCCCCCCCCCCCCCCDLL * ((v35 - (_BYTE *)__p) >> 2));
                  v15 = v14 + 3;
                }
                v37 = v15;
                v13 -= 858993459 * ((*(v15 - 2) - *(v15 - 3)) >> 2);
              }
              if (__p)
              {
                v35 = __p;
                operator delete(__p);
              }
            }
            ++v12;
          }
          while (v12 != 50);
          *(_DWORD *)(a1 + 4104) += v13;
          v16 = *(_DWORD *)(a1 + 4108);
          if (v16 <= v13)
            v16 = v13;
          *(_DWORD *)(a1 + 4108) = v16;
          v17 = v40;
          if ((unint64_t)v40 >= v41)
          {
            v18 = std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__emplace_back_slow_path<std::vector<std::vector<DspLib::Biquad::Section>>&>(&v39, (uint64_t *)&v36);
          }
          else
          {
            *v40 = 0;
            v17[1] = 0;
            v17[2] = 0;
            std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v17, (uint64_t)v36, (uint64_t)v37, 0xAAAAAAAAAAAAAAABLL * ((void **)v37 - v36));
            v18 = (uint64_t)(v17 + 3);
          }
          v40 = (_QWORD *)v18;
          __p = &v36;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          ++v11;
        }
        while (v11 < *(_DWORD *)(a1 + 12));
        v19 = *v10;
      }
      else
      {
        v19 = 0;
      }
    }
    else
    {
      v19 = 0;
      v10 = (unsigned int *)(a1 + 4108);
      *(_QWORD *)(a1 + 4104) = 0;
    }
    DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)(a1 + 3288), v19);
    if (*(_DWORD *)(a1 + 12))
    {
      v20 = 0;
      v31 = v10;
      do
      {
        v21 = v39;
        v22 = (uint64_t *)(v39 + 24 * v20);
        v23 = *v22;
        if (v22[1] == *v22)
        {
          LODWORD(v25) = 0;
        }
        else
        {
          v24 = 0;
          LODWORD(v25) = 0;
          v26 = 1;
          do
          {
            v27 = (uint64_t *)(v23 + 24 * v24);
            v28 = v27[1];
            v29 = v28 - *v27;
            if (v28 != *v27)
            {
              DspLib::Biquad::Filter::setCoefficients(a1 + 3288, *v27, 0xCCCCCCCCCCCCCCCDLL * (v29 >> 2), v25, v20);
              LODWORD(v25) = v25 - 858993459 * ((unint64_t)(v27[1] - *v27) >> 2);
              v21 = v39;
            }
            v24 = v26;
            v23 = *(_QWORD *)(v21 + 24 * v20);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v21 + 24 * v20 + 8) - v23) >> 3) > v26++);
        }
        if (v25 < *v31)
        {
          v25 = v25;
          do
          {
            v33 = 0;
            v32 = DspLib::Biquad::kBypassSection;
            DspLib::Biquad::Filter::setCoefficients(a1 + 3288, (uint64_t)&v32, 1, v25++, v20);
          }
          while (v25 < *v31);
        }
        ++v20;
      }
      while (v20 < *(unsigned int *)(a1 + 12));
    }
    *(_BYTE *)(a1 + 4112) = 0;
    DspLib::ToneMeister::Algorithm::setupDynamicFilters((DspLib::ToneMeister::Algorithm *)a1);
  }
  v36 = (void **)&v39;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v36);
}

void sub_1B60CCAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  a17 = &a20;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

BOOL DspLib::ToneMeister::Algorithm::channelHasBiquads(DspLib::ToneMeister::Algorithm *this, unsigned int a2, char a3)
{
  DspLib::ToneMeister::Algorithm *v5;
  uint64_t v6;
  DspLib::ToneMeister::Parameters *v7;
  uint64_t v8;
  int v10;
  int v11;
  int v12;

  v5 = this;
  v6 = 10 * a2 + 17;
  LODWORD(this) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)this + 6) + 4 * v6), 0.0));
  v7 = (DspLib::ToneMeister::Parameters *)DspLib::ToneMeister::Parameters::categoryOfFilterType(this);
  if ((_DWORD)v7 == 4)
    return 0;
  LODWORD(v7) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)v5 + 6) + 4 * v6), 0.0));
  v10 = DspLib::ToneMeister::Parameters::categoryOfFilterType(v7);
  v11 = DspLib::ToneMeister::Algorithm::filterAndGroupAreActive(v5, (DspLib::ToneMeister::Parameters *)a2);
  if (v10 == 5)
  {
    if (v11)
      return *((_DWORD *)v5 + 1029) == 0;
    return 0;
  }
  if (!v11)
    return 0;
  v8 = 1;
  if (*((_DWORD *)v5 + 1029) != 1)
  {
    v12 = 1 << a3;
    if ((v12 & vcvtas_u32_f32(*(float *)(*((_QWORD *)v5 + 6)
                                        + 4
                                        * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 7)))) == 0)return (v12 & vcvtas_u32_f32(*(float *)(*((_QWORD *)v5 + 6)+ 4* DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 8)))) != 0;
  }
  return v8;
}

void DspLib::ToneMeister::Algorithm::designFilter(DspLib::ToneMeister::Algorithm *this@<X0>, unsigned int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  _BOOL8 v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  DspLib *v27;
  float v28;
  float v29;
  DspLib::ToneMeister *v30;
  float v31;
  double *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  DspLib::Biquad::Design *v37;
  float v38;
  double *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  _DWORD *v46;
  __int128 v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  DspLib::Biquad::Design *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double *v66;
  float v67;
  float v68;
  DspLib::Biquad::Design *v69;
  float v70;
  unint64_t v71;
  float v72;
  double *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  _DWORD *v78;
  __int128 v79;
  _DWORD *v80;
  int v81;
  _BOOL4 v82;
  int v83;
  void *v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  __int128 v93;
  _BYTE v94[20];
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  float v99;
  float v100;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v7 = a2;
  v8 = 10 * a2;
  v9 = *((_QWORD *)this + 6);
  v10 = vcvtas_u32_f32(fmaxf(*(float *)(v9 + 4 * (v8 + 17)), 0.0));
  v11 = v10 > 0xE;
  v12 = (1 << v10) & 0x78FF;
  v13 = v11 || v12 == 0;
  if (v13 || *((_DWORD *)this + 1029))
  {
    v14 = 0;
  }
  else
  {
    v15 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 7);
    v9 = *((_QWORD *)this + 6);
    if (((vcvtas_u32_f32(*(float *)(v9 + 4 * v15)) >> a3) & 1) != 0)
    {
      v16 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8);
      v9 = *((_QWORD *)this + 6);
      v14 = vcvtas_u32_f32(*(float *)(v9 + 4 * v16)) != 0;
    }
    else
    {
      v14 = 1;
    }
  }
  switch(vcvtas_u32_f32(fmaxf(*(float *)(v9 + 4 * (v8 + 17)), 0.0)))
  {
    case 0u:
      v17 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v18 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      v19 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5);
      v20 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)6);
      v21 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v22 = *((double *)this + 3);
      DspLib::Biquad::Design::fractionalOrderBandShelf((DspLib::Biquad::Design *)v14, v17, v18, v19, v20, v21, *(float *)(*((_QWORD *)this + 6) + 24), v22, (void **)&v93);
      goto LABEL_69;
    case 1u:
      v23 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      if (v23 <= 19.9)
        v24 = v23;
      else
        v24 = 19.9;
      if (v23 >= 0.1)
        v25 = v24;
      else
        v25 = 0.1;
      v26 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v28 = v25 * DspLib::dB2Amp(v27, fabsf(v26) * 0.5);
      if (*(float *)(*((_QWORD *)this + 6) + 52) < 0.5)
      {
        v29 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
        DspLib::ToneMeister::makeGunnesQ(v30, v28, v29);
        v28 = v31;
      }
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      LODWORD(v98) = 16;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      if (v28 <= 19.9)
        v34 = v28;
      else
        v34 = 19.9;
      if (v28 < 0.1)
        v34 = 0.1;
      goto LABEL_61;
    case 2u:
      v53 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v54 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      v55 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v56 = *((double *)this + 3);
      DspLib::Biquad::Design::fractionalOrderShelf((DspLib::Biquad::Design *)v14, v53, v54, v55, v56, *(float *)(*((_QWORD *)this + 6) + 24), &v93);
      goto LABEL_69;
    case 3u:
      v57 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5);
      v58 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      LODWORD(v59) = vcvtas_u32_f32(fmaxf(v57, 1.0));
      v60 = *((double *)this + 3);
      DspLib::Biquad::Design::butterworthLowPass(v59, v58, v60, v14, &v93);
      goto LABEL_69;
    case 4u:
      v35 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5);
      v36 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      LODWORD(v37) = vcvtas_u32_f32(fmaxf(v35, 1.0));
      v38 = *((double *)this + 3);
      DspLib::Biquad::Design::butterworthHighPass(v37, v36, v38, v14, (float **)&v93);
      goto LABEL_69;
    case 5u:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      LODWORD(v98) = 14;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v99 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v40 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      v41 = 19.9;
      if (v40 <= 19.9)
        v41 = v40;
      if (v40 >= 0.1)
        v42 = v41;
      else
        v42 = 0.1;
      goto LABEL_66;
    case 6u:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      LODWORD(v98) = 2;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v99 = 0.0;
      v61 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      v62 = 19.9;
      if (v61 <= 19.9)
        v62 = v61;
      if (v61 >= 0.1)
        v42 = v62;
      else
        v42 = 0.1;
      goto LABEL_66;
    case 7u:
      v63 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v64 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v65 = *((double *)this + 3);
      DspLib::Biquad::Design::easttyBaxandallToneTilt((DspLib::Biquad::Design *)v14, LODWORD(v63), LODWORD(v64), v65, v66, (uint64_t)&v93);
      std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)a4, (char *)&v93, (uint64_t)&v96, 2uLL);
      break;
    case 8u:
      v67 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v68 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v69) = vcvtas_u32_f32(fmaxf(DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)5), 1.0));
      v70 = *((double *)this + 3);
      DspLib::Biquad::Design::allpass(v69, LODWORD(v67), LODWORD(v68), v70, v71, &v93);
      goto LABEL_69;
    case 9u:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      v98 = 26;
      v99 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v100 = 0.0;
      v72 = *((double *)this + 3);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v98, v72, 0, v73, (uint64_t)&v93);
      goto LABEL_67;
    case 0xAu:
      if (*((_DWORD *)this + 1029) == 1)
        break;
      if (((1 << a3) & vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                                + 4
                                                * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 7)))) != 0)
      {
        v43 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
        v44 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
        v45 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)6);
        DspLib::Biquad::Design::phaseEqualizer(v43, v44, v45, *((double *)this + 3), (uint64_t)&v93);
        std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
        v46 = *(_DWORD **)a4;
        v47 = *(_OWORD *)&v94[4];
        v46[4] = v95;
        *(_OWORD *)v46 = v47;
      }
      if (((1 << a3) & vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                                + 4
                                                * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8)))) == 0)break;
      v48 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v49 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      v50 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)6);
      DspLib::Biquad::Design::phaseEqualizer(v48, v49, v50, *((double *)this + 3), (uint64_t)&v93);
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      goto LABEL_67;
    case 0xBu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      v74 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v98) = 19;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v34 = 19.9;
      if (v74 <= 19.9)
        v34 = v74;
      if (v74 < 0.1)
        v34 = 0.1;
      goto LABEL_61;
    case 0xCu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      v51 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v98) = 17;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v33 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v34 = 19.9;
      if (v51 <= 19.9)
        v34 = v51;
      if (v51 < 0.1)
        v34 = 0.1;
LABEL_61:
      v99 = v33;
      v100 = v34;
      v75 = *((double *)this + 3);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v98, v75, v14, v32, (uint64_t)&v93);
      goto LABEL_67;
    case 0xDu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      v52 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)4);
      LODWORD(v98) = 0;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v99 = 0.0;
      v42 = 19.9;
      if (v52 <= 19.9)
        v42 = v52;
      if (v52 < 0.1)
        v42 = 0.1;
      goto LABEL_66;
    case 0xEu:
      std::vector<DspLib::Biquad::Section>::resize(a4, 1uLL);
      v76 = *(float *)(*((_QWORD *)this + 6) + 4 * v8 + 80);
      LODWORD(v98) = 1;
      HIDWORD(v98) = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)3);
      v99 = 0.0;
      v42 = 19.9;
      if (v76 <= 19.9)
        v42 = v76;
      if (v76 < 0.1)
        v42 = 0.1;
LABEL_66:
      v100 = v42;
      v77 = *((double *)this + 3);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v98, v77, v14, v39, (uint64_t)&v93);
LABEL_67:
      v78 = *(_DWORD **)a4;
      v79 = v93;
      v78[4] = *(_DWORD *)v94;
      *(_OWORD *)v78 = v79;
      break;
    case 0x14u:
      DspLib::ToneMeister::Algorithm::designLinkwitzRileyCrossover(this, v7, a3, &v93);
LABEL_69:
      v80 = *(_DWORD **)a4;
      if (*(_QWORD *)a4)
      {
        *(_QWORD *)(a4 + 8) = v80;
        operator delete(v80);
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
      }
      *(_OWORD *)a4 = v93;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)v94;
      break;
    case 0x15u:
      v85 = v9 + 4 * v8;
      v86 = *(float *)(v85 + 80);
      v87 = *(float *)(v85 + 84);
      v88 = *(float *)(v9 + 12);
      v89 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v7, (DspLib::ToneMeister::Parameters *)2);
      v90 = 30.0;
      if (v87 <= 30.0)
        v90 = v87;
      v91 = 1.0;
      if (v87 >= 1.0)
        v91 = v90;
      v92 = -1.0;
      if (v86 <= -1.0)
        v92 = v86;
      if (v86 < -30.0)
        v92 = -30.0;
      DspLib::Biquad::Design::iso226LoudnessEQ(v88 - v89, v92, v91, *((double *)this + 3), (uint64_t)&v93);
      std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)a4, (char *)&v93, (uint64_t)&v97, 3uLL);
      break;
    default:
      break;
  }
  if (v14)
  {
    v81 = 1 << a3;
    v82 = (v81 & vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                         + 4
                                         * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 7)))) != 0&& vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)+ 4* DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8)))&& *((_DWORD *)this + 1029) == 0;
    v83 = (v81 & vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                         + 4
                                         * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v7, 8)))) == 0|| v82;
    if (v83 == 1)
    {
      if (!v82)
        return;
      DspLib::ToneMeister::makeSquaredFilter(*(const void **)a4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2), &v93);
    }
    else
    {
      if (*((_DWORD *)this + 1029))
        return;
      DspLib::Biquad::Design::allpassFromPoles(*(_QWORD *)a4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2), 1, &v93);
    }
    v84 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v84;
      operator delete(v84);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = v93;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)v94;
  }
}

void sub_1B60CD710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ToneMeister::Algorithm::setupDynamicFilters(DspLib::ToneMeister::Algorithm *this)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  uint64_t v48;
  float v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  char IsNeeded;
  _QWORD **v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *__p[2];
  char *v65;
  char *v66;

  v2 = 0;
  v3 = 0;
  do
    v3 += DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v2++);
  while (v2 != 50);
  if (v3 >= 0x32)
    v4 = 50;
  else
    v4 = v3;
  if ((_DWORD)v4)
  {
    DspLib::ToneMeister::Algorithm::createSharedBuffers(this);
  }
  else
  {
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 516);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 518);
  }
  v5 = (int64x2_t *)((char *)this + 4160);
  v6 = *((_QWORD *)this + 521);
  v7 = (v6 - *((_QWORD *)this + 520)) >> 3;
  if (v7 > v4)
  {
    v8 = (uint64_t *)(v6 - 8);
    v9 = v6 - 8;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      *((_QWORD *)this + 521) = v8;
      v7 = (v9 - *((_QWORD *)this + 520)) >> 3;
      v9 -= 8;
      --v8;
    }
    while (v7 > v4);
  }
  if (v7 < v4)
  {
    do
    {
      std::make_unique[abi:ne180100]<DspLib::DynamicFilter::Algorithm,std::shared_ptr<DspLibBuffer> &,std::shared_ptr<DspLibBuffer> &>((uint64_t *)this + 516, (uint64_t *)this + 518, &v62);
      v11 = (uint64_t *)*((_QWORD *)this + 521);
      v12 = *((_QWORD *)this + 522);
      if ((unint64_t)v11 >= v12)
      {
        v15 = ((uint64_t)v11 - v5->i64[0]) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v16 = v12 - v5->i64[0];
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v66 = (char *)this + 4176;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)this + 4176, v18);
        else
          v19 = 0;
        v20 = (uint64_t *)&v19[8 * v15];
        v21 = &v19[8 * v18];
        v65 = v21;
        v22 = v62;
        v62 = 0;
        *v20 = v22;
        v14 = v20 + 1;
        __p[1] = v20 + 1;
        v23 = (_QWORD *)*((_QWORD *)this + 521);
        v24 = (_QWORD *)*((_QWORD *)this + 520);
        if (v23 == v24)
        {
          v26 = vdupq_n_s64((unint64_t)v23);
        }
        else
        {
          do
          {
            v25 = *--v23;
            *v23 = 0;
            *--v20 = v25;
          }
          while (v23 != v24);
          v26 = *v5;
          v14 = __p[1];
          v21 = v65;
        }
        *((_QWORD *)this + 520) = v20;
        *((_QWORD *)this + 521) = v14;
        *(int64x2_t *)__p = v26;
        v27 = (char *)*((_QWORD *)this + 522);
        *((_QWORD *)this + 522) = v21;
        v65 = v27;
        v63 = v26.i64[0];
        std::__split_buffer<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>::~__split_buffer((uint64_t)&v63);
      }
      else
      {
        v13 = v62;
        v62 = 0;
        *v11 = v13;
        v14 = v11 + 1;
      }
      *((_QWORD *)this + 521) = v14;
      v28 = v62;
      v62 = 0;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v14 = (void *)*((_QWORD *)this + 521);
      }
    }
    while (v4 > ((uint64_t)v14 - v5->i64[0]) >> 3);
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  do
  {
    if (DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v29) && v31 <= 0x31)
    {
      v33 = ~(-1 << *((_DWORD *)this + 3));
      if (*((_DWORD *)this + 1029) == 1)
      {
        v34 = ~(-1 << *((_DWORD *)this + 3));
      }
      else
      {
        v34 = vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                      + 4
                                      * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v29, 7)));
        if (*((_DWORD *)this + 1029) != 1)
          v33 = vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                        + 4
                                        * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v29, 8)));
      }
      v35 = 0;
      v36 = -1;
      do
        v36 += DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v35++);
      while (v32 != v35);
      v37 = *(float *)(*((_QWORD *)this + 6)
                     + 4
                     * DspLib::ToneMeister::Parameters::dynamicFilterParameter((DspLib::ToneMeister::Parameters *)v36, 0));
      v38 = *(float *)(*((_QWORD *)this + 6)
                     + 4
                     * DspLib::ToneMeister::Parameters::dynamicFilterParameter((DspLib::ToneMeister::Parameters *)v36, 1));
      v39 = *(float *)(*((_QWORD *)this + 6)
                     + 4
                     * DspLib::ToneMeister::Parameters::dynamicFilterParameter((DspLib::ToneMeister::Parameters *)v36, 2));
      DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(&v63, &DspLib::DynamicFilter::Parameters::kDefinition);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 9, (float)v34);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 10, (float)v33);
      v40 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v29, (DspLib::ToneMeister::Parameters *)2);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 4, v40);
      v41 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v29, (DspLib::ToneMeister::Parameters *)3);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 0, v41);
      v42 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v29, 4);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 1, *(float *)(*((_QWORD *)this + 6) + 4 * v42));
      v43 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v29, 5);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 5, *(float *)(*((_QWORD *)this + 6) + 4 * v43));
      v44 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v29, 6);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 2, *(float *)(*((_QWORD *)this + 6) + 4 * v44));
      v45 = 10 * v29 + 17;
      v46 = 0.0;
      v47 = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)this + 6) + 4 * v45), 0.0)) - 16;
      if (v47 <= 3)
        v46 = flt_1B662A130[v47];
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 3, v46);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 6, v37);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 7, v38);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)&v63, 8, v39);
      v48 = *(_QWORD *)(*((_QWORD *)this + 520) + 8 * v31);
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v48 + 16))(v48, *((unsigned int *)this + 3), *((double *)this + 3));
      (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(v5->i64[0] + 8 * v31) + 256))(*(_QWORD *)(v5->i64[0] + 8 * v31), &v63, 0);
      v49 = *(float *)(*((_QWORD *)this + 6) + 4 * v45);
      v50 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v29, (DspLib::ToneMeister::Parameters *)2);
      v51 = vcvtas_u32_f32(fmaxf(v49, 0.0));
      v52 = v51 & 0xFFFFFFFC;
      v53 = v51 - 15;
      if (v52 == 16)
        v54 = v53;
      else
        v54 = 0;
      IsNeeded = DspLib::DynamicFilter::crossFadeIsNeeded(v54, v50);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v31;
      v30 |= IsNeeded;
    }
    ++v29;
    ++v32;
  }
  while (v29 != 50);
  v56 = (_QWORD **)((char *)this + 4184);
  v57 = (_QWORD *)*((_QWORD *)this + 523);
  if ((v30 & 1) != 0)
  {
    if (!v57)
    {
      v58 = operator new();
      v59 = *((unsigned int *)this + 8);
      v60 = *((_QWORD *)this + 3);
      *(_OWORD *)(v58 + 40) = 0u;
      *(_OWORD *)(v58 + 56) = 0u;
      *(_OWORD *)(v58 + 72) = 0u;
      *(_QWORD *)v58 = v60;
      *(_QWORD *)(v58 + 16) = 0;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      *(_BYTE *)(v58 + 32) = 0;
      v61 = (_QWORD *)*((_QWORD *)this + 523);
      *((_QWORD *)this + 523) = v58;
      if (v61)
      {
        std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 4184, v61);
        v57 = *v56;
      }
      else
      {
        v57 = (_QWORD *)v58;
      }
    }
    DspLib::ToneMeister::CrossFade::setParameters((uint64_t)v57, 0x241A00000uLL);
  }
  else
  {
    *v56 = 0;
    if (v57)
      std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 4184, v57);
  }
}

void sub_1B60CDD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

_QWORD *DspLib::ToneMeister::Algorithm::latencySamples(DspLib::ToneMeister::Algorithm *this)
{
  return DspLib::Biquad::Filter::latencySamples((_QWORD *)this + 411);
}

void DspLib::ToneMeister::Algorithm::processBlock(DspLib::ToneMeister::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  unint64_t cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float **v10;
  size_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  vDSP_Length v19;
  float *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  DspLib::DynamicFilter::Algorithm **v33;
  DspLib::DynamicFilter::Algorithm **v34;
  DspLib::DynamicFilter::Algorithm *v35;
  _QWORD v36[3];
  uint64_t v37[3];
  uint64_t v38[3];
  float **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  v7 = DspLibBuffer::numChannels(a3);
  MEMORY[0x1E0C80A78](v7);
  v10 = (float **)((char *)v36 - v9);
  if (v8 >= 0x200)
    v11 = 512;
  else
    v11 = v8;
  bzero((char *)v36 - v9, v11);
  if (DspLibBuffer::numChannels(a3))
  {
    v12 = 0;
    do
    {
      v10[v12] = (float *)DspLibBuffer::channel(a3, v12);
      ++v12;
    }
    while (v12 < DspLibBuffer::numChannels(a3));
  }
  v13 = DspLibBuffer::numChannels(a3);
  v14 = vp::utility::CPU_Profiler::get_cycle_count(a3);
  if (cycle_count)
  {
    v15 = v14;
    if (a2 != a3)
      DspLibBuffer::operator=((uint64_t)a3, a2);
    v16 = v13;
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    if (!*((_BYTE *)this + 4120))
    {
      if (*((_DWORD *)this + 3))
      {
        v17 = 0;
        do
        {
          v18 = (float *)DspLibBuffer::channel(a3, v17);
          v19 = vp::utility::CPU_Profiler::get_cycle_count(a3);
          v20 = (float *)DspLibBuffer::operator[]((DspLib::ToneMeister::Algorithm *)((char *)this + 4008), v17);
          DspLib::multiply(v18, v19, *v20);
          ++v17;
        }
        while (v17 < *((unsigned int *)this + 3));
      }
      v42 = (uint64_t)v10;
      v43 = v13;
      v44 = v15;
      v39 = v10;
      v40 = v13;
      v41 = v15;
      DspLib::Biquad::Filter::process((_QWORD *)this + 411, (uint64_t)&v42, &v39);
      v21 = *((_QWORD *)this + 523);
      v22 = (uint64_t *)*((_QWORD *)this + 520);
      v23 = (uint64_t *)*((_QWORD *)this + 521);
      if (v21)
      {
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)this + 523);
            v25 = *(_QWORD *)(v24 + 16);
            v42 = *(_QWORD *)(v24 + 40) + 4 * v25;
            v43 = cycle_count;
            v39 = (float **)(*(_QWORD *)(v24 + 64) + 4 * v25);
            v40 = cycle_count;
            v26 = *v22++;
            v38[0] = (uint64_t)v10;
            v38[1] = v16;
            v38[2] = v15;
            DspLib::DynamicFilter::Algorithm::processBlock(v26, v38, (uint64_t)&v42, (uint64_t)&v39, *(_BYTE *)(v24 + 32));
          }
          while (v22 != v23);
          v21 = *((_QWORD *)this + 523);
        }
        v27 = *(_QWORD *)(v21 + 24);
        v28 = *(_QWORD *)(v21 + 16) + cycle_count;
        v29 = v28 >= v27;
        v30 = v28 < v27;
        if (v29)
          v28 = 0;
        *(_QWORD *)(v21 + 16) = v28;
        *(_BYTE *)(v21 + 32) = v30;
      }
      else
      {
        while (v22 != v23)
        {
          v31 = *v22++;
          v37[0] = (uint64_t)v10;
          v37[1] = v16;
          v37[2] = v15;
          DspLib::DynamicFilter::Algorithm::processBlock(v31, v37, 0, 0, 0);
        }
      }
    }
    if (*((_BYTE *)this + 40))
    {
      v32 = vp::utility::CPU_Profiler::get_cycle_count(a3);
      DspLib::CPUMeasure::stop((DspLib::ToneMeister::Algorithm *)((char *)this + 72), v32, *((double *)this + 3));
      v33 = (DspLib::DynamicFilter::Algorithm **)*((_QWORD *)this + 520);
      v34 = (DspLib::DynamicFilter::Algorithm **)*((_QWORD *)this + 521);
      while (v33 != v34)
      {
        v35 = *v33++;
        DspLib::DynamicFilter::Algorithm::updateSidechainLevelForDisplay(v35);
      }
      v36[0] = v10;
      v36[1] = v16;
      v36[2] = v15;
      DspLib::ToneMeister::Algorithm::processRTA((uint64_t)this, v36, (DspLib::ToneMeister::Algorithm *)((char *)this + 3456));
    }
  }
}

void DspLib::ToneMeister::Algorithm::processRTA(uint64_t a1, _QWORD *a2, DspLibBuffer *a3)
{
  vDSP_Length v6;
  uint64_t v7;
  float *v8;
  unint64_t v9;
  unint64_t i;
  vDSP_Length j;
  int v12;
  unint64_t v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  float *v18;
  float *v19;
  const float *v20;
  _QWORD v22[3];
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v6 = a2[2];
  MEMORY[0x1E0C80A78](a1);
  v8 = (float *)((char *)&v22[-1] - v7);
  DspLib::clear((float *)((char *)&v22[-1] - v7), v6);
  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      if (((vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 28)) >> i) & 1) != 0)
      {
        DspLib::add(v8, v6, *(const float **)(*a2 + 8 * i));
        v9 = *(unsigned int *)(a1 + 12);
      }
    }
  }
  DspLibBuffer::setNumFrames(a3, 0x2001uLL);
  DspLib::multiply(v8, v6, 2.0 / (float)*(unsigned int *)(a1 + 12));
  if (v6)
  {
    for (j = 0; j < v6; j = (v12 + j))
    {
      v22[0] = v23;
      v22[1] = 1;
      v22[2] = v6 - j;
      v23[0] = &v8[j];
      v12 = DspLib::FFT::Filterbank::audioInput(a1 + 3552, v22);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 3864) + 72);
      if (v13)
      {
        v14 = *(double *)(a1 + 24) / (double)v13 * *(float *)(*(_QWORD *)(a1 + 48) + 36) / 1000.0;
        v15 = expf(-1.0 / v14);
        v16 = (float *)DspLibBuffer::channel(a3, 0);
        DspLib::multiply(v16, 0x2001uLL, v15);
        v17 = *(_QWORD *)(a1 + 3840);
        v18 = (float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 3912), 0);
        DspLib::FFT::amplitude(v17, v18, 0x2001uLL);
        v19 = (float *)DspLibBuffer::channel(a3, 0);
        v20 = (const float *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 3912), 0);
        DspLib::vmax(v19, 0x2001uLL, v20);
      }
    }
  }
}

void DspLib::ToneMeister::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  int v5;
  float v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  float v10;
  unsigned int v11;
  float v12;
  float v13;
  unsigned int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  float v21;
  float *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;

  v5 = *(unsigned __int8 *)(a1 + 40);
  DspLib::clear((float *)a2, __N);
  if (v5)
  {
    *(_DWORD *)(a2 + 12) = 0;
    *(int32x2_t *)(a2 + 16) = vrev64_s32((int32x2_t)vcvt_f32_u32(*(uint32x2_t *)(a1 + 4104)));
    v6 = *(double *)(a1 + 24);
    memset_pattern16((void *)(a2 + 32), &unk_1B662A120, 0x194uLL);
    v7 = 0;
    v8 = 0;
    LODWORD(v9) = 0;
    v10 = v6 * 0.000061035;
    while (1)
    {
      v11 = v9;
      v9 = v7;
      v12 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v7) / v10;
      v13 = (float)(unint64_t)(vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 3456))
                                    - 2);
      if (v12 <= v13)
        v13 = v12;
      v14 = v13;
      v15 = v13 - (float)v13;
      v16 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3456), v13);
      *(float *)(a2 + 32 + 4 * v9) = (float)((float)(*(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3456), v14 + 1)* v15)+ (float)((float)(1.0 - v15) * v16))+ 0.00001;
      v17 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v9);
      if ((float)(v17 - *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v11)) > v10)
        break;
      v7 = v9 + 1;
      v8 = v14;
      if (v9 == 100)
        goto LABEL_18;
    }
    if (v9 <= 0x64)
    {
      do
      {
        v18 = (float)(*(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3360), v9) / v10) + 0.5;
        v19 = (float)(unint64_t)(vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(a1 + 3456))
                                      - 1);
        if (v18 <= v19)
          v19 = v18;
        v20 = v19;
        v21 = *(float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3456), v19);
        while (v8 <= v20)
        {
          v22 = (float *)DspLibBuffer::operator[]((DspLibBuffer *)(a1 + 3456), v8);
          if (*v22 > v21)
            v21 = *v22;
          ++v8;
        }
        *(float *)(a2 + 4 * v9++ + 32) = v21 + 0.00001;
      }
      while (v9 != 101);
    }
LABEL_18:
    DspLib::amp2dBSafe((float *)(a2 + 32), 0x65uLL, 1.0e-20);
    v23 = *(uint64_t **)(a1 + 4160);
    v24 = *(uint64_t **)(a1 + 4168);
    if (v23 != v24)
    {
      v25 = 109;
      do
      {
        v26 = *v23++;
        (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v26 + 184))(v26, &v27, 1);
        *(_DWORD *)(a2 + 4 * v25++) = v27;
      }
      while (v23 != v24);
    }
  }
  else
  {
    memset_pattern16((void *)(a2 + 32), &unk_1B6629FB0, 0x194uLL);
  }
}

float DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(DspLib::ToneMeister::Algorithm *this, uint64_t a2, DspLib::ToneMeister::Parameters *a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float *v12;
  unint64_t v13;
  float v14;

  v6 = 10 * a2;
  v7 = 10 * a2 + 16;
  v8 = *(float *)(*((_QWORD *)this + 6) + 4 * ((_QWORD)a3 + v7));
  if (DspLib::ToneMeister::Algorithm::filterIsAutomated(this, a2))
  {
    v9 = *((_QWORD *)this + 6);
    v10 = *(float *)(v9 + 4 * v6 + 68);
    v11 = *(float *)(v9 + 12);
    v12 = (float *)DspLib::ToneMeister::Algorithm::automationForFilter(this, a2);
    v13 = DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)a2, 0);
    LODWORD(v13) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)this + 6) + 4 * v13), 0.0));
    if (DspLib::ToneMeister::Parameters::filterStateIsActive(v13))
    {
      if (v12[1] == 2.0)
      {
        if (a3 == (DspLib::ToneMeister::Parameters *)2)
        {
          return v8 + DspLib::ToneMeister::Parameters::automatedGain(v12, v11, v8);
        }
        else if (DspLib::ToneMeister::Parameters::isFilterFrequencyParameter(a3, vcvtas_u32_f32(fmaxf(v10, 0.0))))
        {
          v14 = DspLib::ToneMeister::Parameters::filterCenterFrequency((float *)(*((_QWORD *)this + 6) + 4 * v7));
          return v8 * DspLib::ToneMeister::Parameters::automatedFrequency(v12, v11, v14);
        }
      }
    }
  }
  return v8;
}

void DspLib::ToneMeister::makeGunnesQ(DspLib::ToneMeister *this, float a2, float a3)
{
  DspLib::dB2Amp(this, a3);
}

void DspLib::ToneMeister::Algorithm::designLinkwitzRileyCrossover(DspLib::ToneMeister::Algorithm *this@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  DspLib::Biquad::Design *v4;
  uint64_t v6;
  int v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  float *v19;
  void *__p[2];
  uint64_t v21;
  void *__dst[2];
  uint64_t v23;

  v6 = a2;
  __dst[0] = 0;
  __dst[1] = 0;
  v23 = 0;
  LODWORD(v4) = vcvtas_u32_f32(fmaxf(DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, a2, (DspLib::ToneMeister::Parameters *)5), 1.0));
  v9 = 1 << a3;
  v10 = v9 & vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                     + 4
                                     * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v6, 7)));
  v11 = v9 & vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                     + 4
                                     * DspLib::ToneMeister::Parameters::toneMeisterParameter((DspLib::ToneMeister::Parameters *)v6, 8)));
  v12 = DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v6, (DspLib::ToneMeister::Parameters *)3);
  if ((v4 & 1) != 0)
  {
    v14 = *((double *)this + 3);
    if (v10)
      DspLib::Biquad::Design::butterworthLowPass(v4, v12, v14, 0, __p);
    else
      DspLib::Biquad::Design::butterworthHighPass(v4, v12, v14, 0, (float **)__p);
    v16 = *(_OWORD *)__p;
    v17 = v21;
    if ((v10 != 0) == (v11 != 0))
    {
      *(float32x2_t *)__p[0] = vneg_f32(*(float32x2_t *)__p[0]);
      *(float *)(v16 + 8) = -*(float *)(v16 + 8);
    }
    goto LABEL_24;
  }
  LODWORD(v6) = vcvtas_u32_f32(DspLib::ToneMeister::Algorithm::valueForFilterParameterWithAutomation(this, v6, (DspLib::ToneMeister::Parameters *)5)* 0.5);
  if ((v10 != 0) != (v11 != 0))
  {
    v13 = *((double *)this + 3);
    if (v10)
      DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)v6, v12, v13, 0, __p);
    else
      DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)v6, v12, v13, 0, (float **)__p);
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)__dst, 0x999999999999999ALL * (((char *)__p[1] - (char *)__p[0]) >> 2));
    if (__p[1] != __p[0])
    {
      memmove(__dst[0], __p[0], (char *)__p[1] - (char *)__p[0]);
      if (__p[1] != __p[0])
        memmove((char *)__dst[0] + (char *)__p[1] - (char *)__p[0], __p[0], (char *)__p[1] - (char *)__p[0]);
    }
    if (v11)
      v18 = (v6 & 1) == 0;
    else
      v18 = 1;
    if (!v18)
    {
      v19 = (float *)__dst[0];
      *(float32x2_t *)__dst[0] = vneg_f32(*(float32x2_t *)__dst[0]);
      v19[2] = -v19[2];
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v16 = *(_OWORD *)__dst;
    v17 = v23;
LABEL_24:
    *(_OWORD *)a4 = v16;
    a4[2] = v17;
    return;
  }
  v15 = *((double *)this + 3);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)v6, v12, v15, 0, __p);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)__p[0], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 2), 0, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B60CE9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void DspLib::ToneMeister::makeSquaredFilter(const void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p;
  char *v7;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section const*>,std::__wrap_iter<DspLib::Biquad::Section const*>>(a3, a1, (uint64_t)a1 + 20 * a2, 0xCCCCCCCCCCCCCCCDLL * ((20 * a2) >> 2));
  DspLib::Biquad::Design::phaseComplement(a1, a2, (uint64_t *)&__p);
  std::vector<DspLib::Biquad::Section>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section*>,std::__wrap_iter<DspLib::Biquad::Section*>>((uint64_t)a3, a3[1], (char *)__p, v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v7 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B60CEA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL DspLib::ToneMeister::Algorithm::filterIsEnabled(DspLib::ToneMeister::Algorithm *this, DspLib::ToneMeister::Parameters *a2)
{
  DspLib::ToneMeister::Parameters *v3;

  v3 = (DspLib::ToneMeister::Parameters *)DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 0);
  LODWORD(v3) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)this + 6) + 4 * v3), 0.0));
  return DspLib::ToneMeister::Parameters::filterStateIsEnabled(v3);
}

unint64_t DspLib::ToneMeister::Algorithm::filterAndGroupAreActive(DspLib::ToneMeister::Algorithm *this, DspLib::ToneMeister::Parameters *a2)
{
  unint64_t v4;
  unint64_t result;

  v4 = DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 0);
  LODWORD(v4) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)this + 6) + 4 * v4), 0.0));
  result = DspLib::ToneMeister::Parameters::filterStateIsActive(v4);
  if ((_DWORD)result)
    return ((vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6) + 4)) >> vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                                                                                + 4
                                                                                                * DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 9)))) & 1) == 0;
  return result;
}

unsigned int DspLib::ToneMeister::Algorithm::filterGroup(DspLib::ToneMeister::Algorithm *this, DspLib::ToneMeister::Parameters *a2)
{
  return vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6)
                                 + 4 * DspLib::ToneMeister::Parameters::toneMeisterParameter(a2, 9)));
}

BOOL DspLib::ToneMeister::Algorithm::filterIsAutomated(DspLib::ToneMeister::Algorithm *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  DspLib::ToneMeister::Parameters *v8;

  v8 = 0;
  v4 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(_QWORD *)this + 136))(this);
  result = DspLib::ToneMeister::Parameters::findAutomationForFilter(a2, v4, (unint64_t *)&v8, v5);
  if ((_DWORD)result)
  {
    v7 = (*(uint64_t (**)(DspLib::ToneMeister::Algorithm *))(*(_QWORD *)this + 136))(this);
    return vcvtas_u32_f32(*(float *)(v7 + 4 * DspLib::ToneMeister::Parameters::automationParameterForSlot(v8, 1))) == 2;
  }
  return result;
}

unint64_t DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(DspLib::ToneMeister::Algorithm *this, unsigned int a2)
{
  DspLib::ToneMeister::Algorithm *v3;

  v3 = this;
  LODWORD(this) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)this + 6) + 40 * a2 + 68), 0.0));
  if (DspLib::ToneMeister::Parameters::categoryOfFilterType(this) == 4)
    return DspLib::ToneMeister::Algorithm::filterAndGroupAreActive(v3, (DspLib::ToneMeister::Parameters *)a2);
  else
    return 0;
}

uint64_t DspLib::ToneMeister::Algorithm::dynamicFilterIndex(DspLib::ToneMeister::Algorithm *this, unint64_t a2)
{
  DspLib::ToneMeister::Algorithm *v3;
  unint64_t v4;
  int v5;
  unsigned int v6;

  v3 = this;
  v4 = 0;
  v5 = -1;
  v6 = 1;
  do
  {
    LODWORD(this) = vcvtas_u32_f32(fmaxf(*(float *)(*((_QWORD *)v3 + 6) + 40 * v4 + 68), 0.0));
    this = (DspLib::ToneMeister::Algorithm *)DspLib::ToneMeister::Parameters::categoryOfFilterType(this);
    if ((_DWORD)this == 4)
      ++v5;
    v4 = v6++;
  }
  while (v4 <= a2);
  return v5;
}

uint64_t DspLib::ToneMeister::Algorithm::automationForFilter(DspLib::ToneMeister::Algorithm *this, uint64_t a2)
{
  _BOOL4 AutomationForFilter;
  uint64_t result;
  DspLib::ToneMeister::Parameters *v5;

  v5 = 0;
  AutomationForFilter = DspLib::ToneMeister::Parameters::findAutomationForFilter(a2, *((_QWORD *)this + 6), (unint64_t *)&v5, a2);
  result = 0;
  if (AutomationForFilter)
    return *((_QWORD *)this + 6) + 4 * DspLib::ToneMeister::Parameters::automationParameterForSlot(v5, 0);
  return result;
}

void DspLib::ToneMeister::Algorithm::createSharedBuffers(DspLib::ToneMeister::Algorithm *this)
{
  unsigned int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v2 = 0;
  v3 = 0;
  do
    v3 += DspLib::ToneMeister::Algorithm::filterIsDynamicAndActive(this, v2++);
  while (v2 != 50);
  if (v3)
  {
    if (!*((_QWORD *)this + 516))
    {
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 4128, &v10);
      v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      DspLibBuffer::initialize(*((DspLibBuffer **)this + 516), *((unsigned int *)this + 8), *((_DWORD *)this + 3));
    }
    if (!*((_QWORD *)this + 518))
    {
      _ZNSt3__115allocate_sharedB8ne180100I12DspLibBufferNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 4144, &v10);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      DspLibBuffer::initialize(*((DspLibBuffer **)this + 518), *((unsigned int *)this + 8), *((_DWORD *)this + 3));
    }
  }
  else
  {
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 516);
    std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::reset[abi:ne180100]((_QWORD *)this + 518);
  }
}

void std::make_unique[abi:ne180100]<DspLib::DynamicFilter::Algorithm,std::shared_ptr<DspLibBuffer> &,std::shared_ptr<DspLibBuffer> &>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  DspLib::DynamicFilter::Algorithm::Algorithm(v6, &v22, &v20);
  *a3 = v7;
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B60CEFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1BCC95CEC](v11, 0x10E1C40E2FACC36);
  _Unwind_Resume(a1);
}

void DspLib::ToneMeister::CrossFade::setParameters(uint64_t a1, unint64_t a2)
{
  vDSP_Length v2;
  uint64_t v5;
  unint64_t v6;
  const float **v7;
  float **v8;
  unint64_t v9;
  float v10;

  LODWORD(v2) = vcvtad_u64_f64(*(double *)a1 * (float)(*(float *)&a2 / 1000.0));
  v5 = (v2 + 1);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a1 + 8) + v5 - 1;
  v7 = (const float **)(a1 + 40);
  std::vector<float>::resize(a1 + 40, v6);
  v8 = (float **)(a1 + 64);
  std::vector<float>::resize(a1 + 64, v6);
  DspLib::fill(*(float **)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2, 1.0);
  DspLib::clear(*(float **)(a1 + 64), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2);
  if ((_DWORD)v2)
  {
    v9 = HIDWORD(a2);
    v10 = 0.0;
    if ((_DWORD)v9 == 1)
      v10 = 1.0 / (float)v2;
    DspLib::ramp(*(float **)(a1 + 40), *(_QWORD *)(a1 + 24), v9 == 1, v10, 1.0);
    if ((_DWORD)v9 == 2)
      DspLib::square(*(float **)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
    DspLib::multiply(*v7, v2, *v8, -1.0);
    DspLib::add(*v8, v2, 1.0);
  }
}

void DspLib::ToneMeister::Algorithm::~Algorithm(DspLib::ToneMeister::Algorithm *this)
{
  DspLib::ToneMeister::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _QWORD *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E69C3FC8;
  v2 = (_QWORD *)*((_QWORD *)this + 523);
  *((_QWORD *)this + 523) = 0;
  if (v2)
    std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100]((uint64_t)this + 4184, v2);
  v5 = (void **)((char *)this + 4160);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 4144);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 4128);
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 4008));
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3912));
  DspLib::FFT::Filterbank::~Filterbank((DspLib::ToneMeister::Algorithm *)((char *)this + 3552));
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3456));
  DspLibBuffer::~DspLibBuffer((DspLib::ToneMeister::Algorithm *)((char *)this + 3360));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ToneMeister::Algorithm *)((char *)this + 3336));
  v3 = (void *)*((_QWORD *)this + 414);
  if (v3)
  {
    *((_QWORD *)this + 415) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
}

float DspLib::ToneMeister::Algorithm::parameterBounds(DspLib::ToneMeister::Algorithm *this, uint64_t a2)
{
  return DspLib::ToneMeister::Parameters::kMinimum[a2];
}

uint64_t DspLib::ToneMeister::Algorithm::numStatus(DspLib::ToneMeister::Algorithm *this)
{
  return 159;
}

void DspLib::SideChain::Algorithm::copyStatesFrom(DspLib::SideChain::Algorithm *this, const DspLib::SideChain::Algorithm *a2)
{
  BOOL v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 48))
    v2 = *((_BYTE *)a2 + 48) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    *((_QWORD *)this + 98) = *((_QWORD *)a2 + 98);
    *((_DWORD *)this + 190) = *((_DWORD *)a2 + 190);
    *((_DWORD *)this + 194) = *((_DWORD *)a2 + 194);
    *((_DWORD *)this + 277) = *((_DWORD *)a2 + 277);
    *((_DWORD *)this + 279) = *((_DWORD *)a2 + 279);
    *((_DWORD *)this + 280) = *((_DWORD *)a2 + 280);
    if (*((_QWORD *)this + 119) == *((_QWORD *)a2 + 119))
    {
      v5 = *((_QWORD *)this + 118);
      if (v5)
      {
        if (v5 == *((_QWORD *)a2 + 118))
          DspLib::Biquad::Filter::copyStatesFrom((DspLib::SideChain::Algorithm *)((char *)this + 896), (const DspLib::SideChain::Algorithm *)((char *)a2 + 896));
      }
    }
    if (*((_QWORD *)this + 106) == *((_QWORD *)a2 + 106))
    {
      v6 = *((_QWORD *)this + 105);
      if (v6)
      {
        if (v6 == *((_QWORD *)a2 + 105))
          DspLib::Biquad::Filter::copyStatesFrom((DspLib::SideChain::Algorithm *)((char *)this + 792), (const DspLib::SideChain::Algorithm *)((char *)a2 + 792));
      }
    }
    if (*((_QWORD *)this + 132) == *((_QWORD *)a2 + 132))
    {
      v7 = *((_QWORD *)this + 131);
      if (v7)
      {
        if (v7 == *((_QWORD *)a2 + 131))
          DspLib::Biquad::Filter::copyStatesFrom((DspLib::SideChain::Algorithm *)((char *)this + 1000), (const DspLib::SideChain::Algorithm *)((char *)a2 + 1000));
      }
    }
  }
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::__emplace_back_slow_path<std::vector<DspLib::Biquad::Section>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  v15 += 24;
  std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B60CF398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B60CF408(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__emplace_back_slow_path<std::vector<std::vector<DspLib::Biquad::Section>>&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::~__split_buffer(v14);
  return v12;
}

void sub_1B60CF530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B60CF5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<DspLib::Biquad::Section*,DspLib::Biquad::Section*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B60CF670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DspLib::Biquad::Section>>,std::vector<DspLib::Biquad::Section>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<DspLib::Biquad::Section>>>,std::reverse_iterator<std::vector<std::vector<DspLib::Biquad::Section>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<DspLib::Biquad::Section>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<DspLib::Biquad::Section>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section*>,std::__wrap_iter<DspLib::Biquad::Section*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 2)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 2);
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 2);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x666666666666666)
      v18 = 0xCCCCCCCCCCCCCCCLL;
    else
      v18 = v17;
    v37 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(v9, v18);
    else
      v19 = 0;
    v28 = &v19[20 * v15];
    __p = v19;
    v34 = v28;
    v36 = &v19[20 * v18];
    v29 = &v28[20 * a5];
    v30 = 20 * a5;
    do
    {
      v31 = *(_OWORD *)v7;
      *((_DWORD *)v28 + 4) = *((_DWORD *)v7 + 4);
      *(_OWORD *)v28 = v31;
      v28 += 20;
      v7 += 20;
      v30 -= 20;
    }
    while (v30);
    v35 = v29;
    v5 = (char *)std::vector<DspLib::Biquad::Section>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 = &v34[(v35 - v34 - 20) % 0x14uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 2)) >= a5)
  {
    v21 = &__src[20 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[20 * a5];
    v25 = &v23[-20 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        *((_DWORD *)v26 + 4) = *((_DWORD *)v25 + 4);
        *(_OWORD *)v26 = v27;
        v26 += 20;
        v25 += 20;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[20 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * ((uint64_t)(v12 - __dst) >> 2)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * ((uint64_t)(v12 - __dst) >> 2)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1B60CFB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<DspLib::Biquad::Section>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 20);
      v7 = (void *)(v9 - 20);
      *(_DWORD *)(v9 - 4) = *((_DWORD *)v8 - 1);
      *(_OWORD *)(v9 - 20) = v10;
      v8 -= 20;
      v9 -= 20;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::__split_buffer<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::default_delete<DspLib::ToneMeister::CrossFade>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[8];
    if (v3)
    {
      a2[9] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::initialize(DspLib::LoudspeakerSystemIDV1::ModelFit *this, double a2)
{
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *v4;

  *((double *)this + 22) = a2;
  v4 = (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184);
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184), a2);
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::initialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240), a2);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8), *((_QWORD *)this + 79));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88), *((_QWORD *)this + 210));
  *(_BYTE *)this = 1;
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset(v4);
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
  *((_BYTE *)this + 170) = 0;
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::reset(DspLib::LoudspeakerSystemIDV1::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184));
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
  *((_BYTE *)this + 170) = 0;
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::uninitialize(DspLib::LoudspeakerSystemIDV1::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::uninitialize((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88), 0);
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::setParameters(DspLib::LoudspeakerSystemIDV1::ModelFit *this, const DspLib::AlgorithmParametersInstance *a2)
{
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *v4;
  float v5;
  BOOL v6;
  char *v7;

  if (*(_BYTE *)this)
  {
    v4 = (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184);
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184), a2);
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::setParameters((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240), a2);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8), *((_QWORD *)this + 79));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 88), *((_QWORD *)this + 210));
    *((_BYTE *)this + 168) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 7) >= 0.5;
    *((_BYTE *)this + 169) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000006) >= 0.5;
    v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000000);
    v6 = v5 >= 0.5;
    if (v5 >= 0.5 && !*((_BYTE *)this + 2))
    {
      DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset(v4);
      DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
      *((_BYTE *)this + 170) = 0;
    }
    *((_BYTE *)this + 2) = v6;
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::readFromNvm(v4);
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
    *((_BYTE *)this + 1) = 1;
  }
  else
  {
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v7, 47);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::LoudspeakerSystemIDV1::ModelFit::process(DspLib::LoudspeakerSystemIDV1::ModelFit *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, int a6)
{
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *v12;
  int v13;
  uint64_t result;
  char *v15;

  if (*((_BYTE *)this + 1))
  {
    v12 = (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184);
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 184));
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
    if (a6)
    {
      *((_BYTE *)this + 588) = 0;
      *((_BYTE *)this + 1644) = 0;
    }
    else
    {
      v13 = *((_DWORD *)this + 1);
      if (v13 == 2)
      {
        if (*((_BYTE *)this + 169))
        {
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel((uint64_t)v12, (DSPSplitComplex *)((char *)this + 88), (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1744), (float *)this + 288);
          DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::process((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240), a2, a3, a4, a5, (DSPSplitComplex *)((char *)this + 88));
        }
        else
        {
          *((_BYTE *)this + 1644) = 0;
        }
        *((_BYTE *)this + 170) = 1;
        *((_DWORD *)this + 1) = 0;
      }
      else if (v13 == 1)
      {
        if (*((_BYTE *)this + 168))
        {
          DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel((uint64_t)this + 1240, (DSPSplitComplex *)((char *)this + 8), (DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 696), (float *)this + 550);
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::process(v12, a2, a3, a4, a5, (DSPSplitComplex *)((char *)this + 8));
        }
        else
        {
          *((_BYTE *)this + 588) = 0;
        }
        *((_DWORD *)this + 1) = 2;
      }
    }
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::writeToNvm(v12);
    return DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 1240));
  }
  else
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ModelFit.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v15, 84);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

uint64_t DspLib::LoudspeakerSystemIDV1::updateEstimatedModel(DspLib::LoudspeakerSystemIDV1 *this, DSPSplitComplex *a2, float a3, DspLib::ComplexSpan *a4, float a5, const DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *a6, const DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  DspLib::ComplexMatrixSpan *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  DSPSplitComplex *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  DSPSplitComplex __B;
  uint64_t v29;
  DSPSplitComplex __A;
  uint64_t v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x1E0C80C00];
  v11 = MEMORY[0x1E0C80A78](this);
  v12 = MEMORY[0x1E0C80A78](v11);
  v32[0] = v14;
  v32[1] = (char *)&__B - v13;
  v32[2] = 2 * v12;
  v32[3] = 2;
  v32[4] = v12;
  DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV1 *)v32, 0.0, v16, v15);
  v18 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  __A.realp = v20;
  __A.imagp = (float *)((char *)&__B - v19);
  v31 = v21;
  v22 = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel((uint64_t)a4, &__A, (DspLib::ComplexMatrixSpan *)v32, (float *)a4 + 242);
  v23 = MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78](v23);
  __B.realp = v25;
  __B.imagp = (float *)((char *)&__B - v24);
  v29 = v26;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel((uint64_t)a6, &__B, (DspLib::ComplexMatrixSpan *)v32, (float *)a6 + 240);
  DspLib::ComplexSpan::operator=(a2, &__A);
  DspLib::operator+=(a2, &__B);
  return DspLib::operator+=((uint64_t)a2, a5);
}

void DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector(DspLib::LoudspeakerSystemIDV1 *this, float a2, float a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  DSPSplitComplex __C;
  uint64_t v22;
  DSPSplitComplex __A;
  unint64_t v24;
  uint64_t v25;
  DSPComplex v26;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](this);
  v8 = (_QWORD *)MEMORY[0x1E0C80A78](v7);
  __A.realp = v10;
  __A.imagp = (float *)((char *)&v20 - v9);
  v24 = v11;
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v26.imag = (float)(a2 + (float)((float)v13 * a3)) * 6.2832;
      v26.real = 0.0;
      v8 = DspLib::ComplexSpan::setElement(&__A, v12, v26);
      v12 = ++v13;
    }
    while (v24 > v13);
  }
  v14 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v14);
  __C.realp = v16;
  __C.imagp = (float *)((char *)&v20 - v15);
  v22 = v17;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::ComplexMatrixSpan::setRow(this, 0, &__C);
  if (*((_QWORD *)this + 3) >= 2uLL)
  {
    v18 = 3;
    do
    {
      DspLib::operator*=(&__C, &__A);
      DspLib::ComplexMatrixSpan::setRow(this, v18 - 2, &__C);
    }
    while (*((_QWORD *)this + 3) >= (unint64_t)v18++);
  }
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::status(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  const DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *v4;
  float v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *v10;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *v11;
  uint64_t v12;
  char *v13;
  DSPSplitComplex __A;
  vDSP_Length v15;
  char v16;
  char v17;
  uint64_t v18;

  v1 = MEMORY[0x1E0C80A78](a1);
  v18 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)v1)
  {
    v6 = v5;
    v7 = v3;
    v8 = v2;
    v9 = *(double *)(v1 + 176) * 0.0009765625;
    __A.realp = (float *)&v17;
    __A.imagp = (float *)&v16;
    v15 = 513;
    v10 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)(v1 + 184);
    v11 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)(v1 + 1240);
    DspLib::LoudspeakerSystemIDV1::updateEstimatedModel((DspLib::LoudspeakerSystemIDV1 *)0x201, &__A, v9, (DspLib::ComplexSpan *)(v1 + 184), v6, (const DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)(v1 + 1240), v4);
    vDSP_zvabs(&__A, 1, (float *)(v8 + 6556), 1, v15);
    vDSP_zvphas(&__A, 1, (float *)(v8 + 8608), 1, v15);
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::status(v10, v8);
    DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::status(v11, v8);
    if (v7)
    {
      v12 = 0;
      do
      {
        if ((*(_DWORD *)(v8 + 4 * v12) & 0x7FFFFFFFu) >= 0x7F800000)
          *(_DWORD *)(v8 + 4 * v12) = 0;
        ++v12;
      }
      while (v7 > v12);
    }
  }
  else
  {
    v13 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v13, 150);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::SingleSampleDelay::process(float *a1, _DWORD *a2, uint64_t a3, _DWORD *a4)
{
  int v6;
  float result;

  if (a3)
  {
    v6 = a2[a3 - 1];
    if (4 * a3 != 4)
      memmove(&a4[a3 + 1 - a3], a2, 4 * a3 - 4);
    result = *a1;
    *a4 = *(_DWORD *)a1;
    *(_DWORD *)a1 = v6;
  }
  return result;
}

void DspLib::CircularDelay::setLength(DspLib::CircularDelay *this, unint64_t a2)
{
  if (a2 != (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2)
  {
    std::vector<float>::resize((uint64_t)this, a2);
    *((_QWORD *)this + 3) = 0;
    DspLib::clear(*(float **)this, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  }
}

void DspLib::CircularDelay::reset(DspLib::CircularDelay *this)
{
  *((_QWORD *)this + 3) = 0;
  DspLib::clear(*(float **)this, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
}

const void **DspLib::CircularDelay::read(const void **result, unint64_t a2, char *__dst, unint64_t a4)
{
  const void **v5;
  char *v6;
  unint64_t v7;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v16;

  if (a4)
  {
    v5 = result;
    v6 = (char *)*result;
    v7 = ((_BYTE *)result[1] - (_BYTE *)*result) >> 2;
    if (v7 >= a2 && a4 <= v7)
    {
      v10 = (unint64_t)result[3] + v7 - a2;
      if (v10 >= v7)
        v11 = ((_BYTE *)result[1] - (_BYTE *)*result) >> 2;
      else
        v11 = 0;
      v12 = v10 - v11;
      v13 = v7 - v12;
      if (a4 <= v7 - v12)
      {
        v14 = &v6[4 * v12];
        v15 = 4 * a4;
        v16 = __dst;
      }
      else
      {
        if (v7 != v12)
          result = (const void **)memmove(__dst, &v6[4 * v12], 4 * v13);
        if (a4 == v13)
          return result;
        v14 = (char *)*v5;
        v15 = 4 * (a4 - v13);
        v16 = &__dst[4 * v13];
      }
      return (const void **)memmove(v16, v14, v15);
    }
  }
  return result;
}

uint64_t *DspLib::CircularDelay::write(uint64_t *result, char *__src, unint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (a3)
  {
    v5 = result;
    v7 = result;
    result = (uint64_t *)*result;
    v6 = (uint64_t *)v7[1];
    v8 = (char *)v6 - (char *)result;
    v9 = ((char *)v6 - (char *)result) >> 2;
    if (a3 <= v9)
    {
      v15 = v5[3];
      v16 = v9 - v15;
      if (a3 >= v9 - v15)
      {
        if (v9 != v15)
          result = (uint64_t *)memmove((char *)result + 4 * v15, __src, 4 * v16);
        v17 = a3 - v16;
        if (v17)
          result = (uint64_t *)memmove((void *)*v5, &__src[4 * v16], 4 * v17);
      }
      else
      {
        result = (uint64_t *)memmove((char *)result + 4 * v15, __src, 4 * a3);
        v17 = v5[3] + a3;
      }
      v5[3] = v17;
    }
    else if (v6 != result)
    {
      v10 = &__src[4 * a3 + -4 * v9];
      v11 = v5[3];
      if (!v11)
      {
        v14 = &__src[4 * a3 + -4 * v9];
        return (uint64_t *)memmove(result, v14, v8);
      }
      v12 = v9 - v11;
      if (v9 == v11)
      {
LABEL_8:
        v14 = &v10[4 * v12];
        return (uint64_t *)memmove(result, v14, v8);
      }
      result = (uint64_t *)memmove((char *)result + 4 * v11, v10, 4 * v12);
      v13 = v5[3];
      if (v13)
      {
        result = (uint64_t *)*v5;
        v8 = 4 * v13;
        goto LABEL_8;
      }
    }
  }
  return result;
}

const void **DspLib::CircularDelay::process(const void **result, char *a2, unint64_t a3, char *__dst, unint64_t a5)
{
  const void **v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  const void *v14;
  unint64_t v15;
  void *v16;
  char *v17;
  size_t v18;
  const void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  const void *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  size_t v30;
  char *v31;
  size_t v32;
  const void *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return result;
  v8 = result;
  v10 = *result;
  v9 = result[1];
  v11 = v9 - (_BYTE *)*result;
  v12 = v11 >> 2;
  if (a3 <= v11 >> 2)
  {
    if (__dst == a2)
    {
      v32 = 4 * a3;
      MEMORY[0x1E0C80A78](result);
      DspLib::CircularDelay::read(v8, v12, (char *)v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
      v33 = v8[3];
      v34 = v12 - (_QWORD)v33;
      if (a3 >= v12 - (unint64_t)v33)
      {
        if ((const void *)v12 != v33)
          memmove((char *)*v8 + 4 * (_QWORD)v33, a2, 4 * v34);
        v35 = a3 - v34;
        if (v35)
          memmove((void *)*v8, &a2[4 * v34], 4 * v35);
      }
      else
      {
        memmove((char *)*v8 + 4 * (_QWORD)v33, a2, 4 * a3);
        v35 = (unint64_t)v8[3] + a3;
      }
      v8[3] = (const void *)v35;
      return (const void **)memmove(a2, (char *)v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v32);
    }
    else
    {
      result = DspLib::CircularDelay::read(result, v11 >> 2, __dst, a5);
      v19 = v8[3];
      v20 = v12 - (_QWORD)v19;
      if (a3 >= v12 - (unint64_t)v19)
      {
        if ((const void *)v12 != v19)
          result = (const void **)memmove((char *)*v8 + 4 * (_QWORD)v19, a2, 4 * v20);
        v21 = a3 - v20;
        if (v21)
          result = (const void **)memmove((void *)*v8, &a2[4 * v20], 4 * v21);
      }
      else
      {
        result = (const void **)memmove((char *)*v8 + 4 * (_QWORD)v19, a2, 4 * a3);
        v21 = (unint64_t)v8[3] + a3;
      }
      v8[3] = (const void *)v21;
    }
    return result;
  }
  if (__dst == a2)
  {
    if (v9 == v10)
      return result;
    MEMORY[0x1E0C80A78](result);
    v23 = (char *)v36 - v22;
    DspLib::CircularDelay::read(v8, v11 >> 2, (char *)v36 - v22, v11 >> 2);
    v24 = &a2[4 * a3];
    v25 = &v24[-4 * v12];
    v26 = v8[3];
    if (v26)
    {
      v27 = v11 >> 2;
      v28 = v12 - (_QWORD)v26;
      if ((const void *)v12 != v26)
      {
        memmove((char *)*v8 + 4 * (_QWORD)v26, v25, 4 * v28);
        v27 = (uint64_t)v8[3];
        if (!v27)
          goto LABEL_33;
      }
      v29 = (void *)*v8;
      v30 = 4 * v27;
      v31 = &v25[4 * v28];
    }
    else
    {
      v29 = (void *)*v8;
      v31 = &v24[-4 * v12];
      v30 = v11;
    }
    memmove(v29, v31, v30);
LABEL_33:
    if (a3 != v12)
      memmove(&a2[4 * v12], a2, 4 * (a3 - v12));
    return (const void **)memmove(a2, v23, v11);
  }
  DspLib::CircularDelay::read(result, v11 >> 2, __dst, v11 >> 2);
  result = (const void **)memmove(&__dst[4 * v12], a2, 4 * (a3 - v12));
  if (v9 == v10)
    return result;
  v13 = &a2[4 * a3 + -4 * v12];
  v14 = v8[3];
  if (!v14)
  {
    v16 = (void *)*v8;
    v17 = v13;
    v18 = v11;
    return (const void **)memmove(v16, v17, v18);
  }
  v15 = v12 - (_QWORD)v14;
  if ((const void *)v12 == v14
    || (result = (const void **)memmove((char *)*v8 + 4 * (_QWORD)v14, v13, 4 * v15),
        (v12 = (unint64_t)v8[3]) != 0))
  {
    v16 = (void *)*v8;
    v17 = &v13[4 * v15];
    v18 = 4 * v12;
    return (const void **)memmove(v16, v17, v18);
  }
  return result;
}

const void **DspLib::MultiChannelCircularDelay::read(const void **result, unint64_t a2, _QWORD *a3)
{
  const void **v3;
  const void **v6;
  unint64_t v7;
  unsigned int v8;

  v3 = (const void **)*result;
  if (result[1] != *result)
  {
    v6 = result;
    v7 = 0;
    v8 = 1;
    do
    {
      result = DspLib::CircularDelay::read(&v3[4 * v7], a2, *(char **)(*a3 + 8 * v7), a3[2]);
      v7 = v8;
      v3 = (const void **)*v6;
      ++v8;
    }
    while (v7 < ((_BYTE *)v6[1] - (_BYTE *)*v6) >> 5);
  }
  return result;
}

uint64_t *DspLib::MultiChannelCircularDelay::write(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;

  v2 = *result;
  if (result[1] != *result)
  {
    v4 = result;
    v5 = 0;
    v6 = 1;
    do
    {
      result = DspLib::CircularDelay::write((uint64_t *)(v2 + 32 * v5), *(char **)(*a2 + 8 * v5), a2[2]);
      v5 = v6;
      v2 = *v4;
      ++v6;
    }
    while (v5 < (v4[1] - *v4) >> 5);
  }
  return result;
}

const void **DspLib::MultiChannelCircularDelay::process(const void **result, _QWORD *a2, _QWORD *a3)
{
  const void **v3;
  const void **v6;
  unint64_t v7;
  unsigned int v8;

  v3 = (const void **)*result;
  if (result[1] != *result)
  {
    v6 = result;
    v7 = 0;
    v8 = 1;
    do
    {
      result = DspLib::CircularDelay::process(&v3[4 * v7], *(char **)(*a2 + 8 * v7), a2[2], *(char **)(*a3 + 8 * v7), a3[2]);
      v7 = v8;
      v3 = (const void **)*v6;
      ++v8;
    }
    while (v7 < ((_BYTE *)v6[1] - (_BYTE *)*v6) >> 5);
  }
  return result;
}

void DspLib::LinearDelay::setLength(float **this, unint64_t a2)
{
  if (a2 != this[1] - *this)
  {
    std::vector<float>::resize((uint64_t)this, a2);
    DspLib::clear(*this, this[1] - *this);
  }
}

const void **DspLib::LinearDelay::process(const void **result, char *a2, unint64_t a3, char *a4)
{
  const void **v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = result;
    v9 = *result;
    v8 = result[1];
    v10 = v8 - (_BYTE *)*result;
    if (a3 <= v10 >> 2)
    {
      v15 = 4 * a3;
      MEMORY[0x1E0C80A78](result);
      memcpy((char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a2, 4 * a3);
      memmove(a4, *v7, 4 * a3);
      v16 = v7[1];
      v17 = (char *)*v7 + 4 * a3;
      if (v16 != v17)
      {
        memmove((void *)*v7, v17, v16 - v17);
        v17 = (char *)v7[1];
      }
      return (const void **)memmove(&v17[-4 * a3], (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * a3);
    }
    else
    {
      result = (const void **)MEMORY[0x1E0C80A78](result);
      v13 = (char *)v18 - v12;
      v14 = (uint64_t)&a2[4 * a3 + -4 * v11];
      if (v8 != v9)
        result = (const void **)memcpy((char *)v18 - v12, &a2[4 * a3 + -4 * v11], v10);
      if ((char *)v14 != a2)
        result = (const void **)memmove(&a4[4 * a3 - (v14 - (_QWORD)a2)], a2, v14 - (_QWORD)a2);
      if (v8 != v9)
      {
        memmove(a4, *v7, v10);
        return (const void **)memcpy((void *)*v7, v13, v10);
      }
    }
  }
  return result;
}

uint64_t *DspLib::LinearDelay::write(uint64_t *result, char *__src, unint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;
  char *v9;
  uint64_t *v10;

  if (a3)
  {
    v5 = result;
    v7 = result;
    result = (uint64_t *)*result;
    v6 = (uint64_t *)v7[1];
    v8 = (char *)v6 - (char *)result;
    if (a3 <= ((char *)v6 - (char *)result) >> 2)
    {
      v10 = (uint64_t *)((char *)result + 4 * a3);
      if (v6 != v10)
      {
        memmove(result, v10, (char *)v6 - (char *)v10);
        v6 = (uint64_t *)v5[1];
      }
      result = (uint64_t *)((char *)v6 - 4 * a3);
      v8 = 4 * a3;
      v9 = __src;
      return (uint64_t *)memmove(result, v9, v8);
    }
    if (v6 != result)
    {
      v9 = &__src[4 * a3 + -4 * (v8 >> 2)];
      return (uint64_t *)memmove(result, v9, v8);
    }
  }
  return result;
}

double DspLib::FourBandRandomOrderLrFilterBank::FilterBank::FilterBank(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 512;
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 93) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_BYTE *)this + 176) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 248) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_BYTE *)this + 320) = 0;
  *((_BYTE *)this + 392) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_BYTE *)this + 464) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  result = *(double *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kDefault;
  *(_OWORD *)((char *)this + 72) = *(__int128 *)((char *)&xmmword_1B662A20C + 12);
  *(_OWORD *)((char *)this + 60) = xmmword_1B662A20C;
  *(_OWORD *)((char *)this + 44) = unk_1B662A1FC;
  *(_OWORD *)((char *)this + 28) = DspLib::FourBandRandomOrderLrFilterBank::Parameters::kDefault;
  return result;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setPhaseCompensationOnlyMode(uint64_t this, char a2)
{
  char *v2;

  if (*(_BYTE *)(this + 24))
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v2, 19);
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    *(_BYTE *)(this + 100) = a2;
  }
  return this;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::initialize(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, unsigned __int16 a2, double a3)
{
  BOOL v3;
  uint64_t v4;
  _BOOL4 isEqual;
  char *v9;
  int v10;

  if (*((_BYTE *)this + 24))
    v3 = *((_DWORD *)this + 2) == a2;
  else
    v3 = 0;
  v4 = !v3;
  if (a2 >= 0x41u)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    v10 = 29;
LABEL_17:
    printf("DSP Sound assertion in %s at line %d\n", v9, v10);
    ++DspLibDebug::mAssertCounter;
    return v4;
  }
  if (!a2)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    v10 = 30;
    goto LABEL_17;
  }
  *((_DWORD *)this + 2) = a2;
  if (a3 <= 0.0)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    v10 = 32;
    goto LABEL_17;
  }
  isEqual = DspLib::isEqual(this, *(double *)this, a3, 1.0e-20);
  *(double *)this = a3;
  if ((v4 | !isEqual) != 1)
    return 0;
  std::vector<std::vector<DspLib::Biquad::Section>>::reserve((uint64_t *)this + 67, 3uLL);
  std::vector<std::vector<DspLib::Biquad::Section>>::reserve((uint64_t *)this + 70, 3uLL);
  v4 = 1;
  *((_BYTE *)this + 24) = 1;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setParameters((uint64_t)this, (char *)this + 28, 15);
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::reset(this);
  return v4;
}

uint64_t std::vector<std::vector<DspLib::Biquad::Section>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<DspLib::Biquad::Section>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B60D13CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::setParameters(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;
  float v6;
  _DWORD *v7;
  char *v8;
  float32x4_t v9;
  int16x8_t v10;
  char v11;
  uint8x8_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  DspLib::Biquad::Design *v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  DspLib::Biquad::Design *v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  float v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  vDSP_Length v51;
  char *v52;
  BOOL v53;
  uint64_t *v54[3];
  uint64_t *v55[3];
  __int128 v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (a3 == 15)
  {
    v4 = a1 + 28;
    if ((const void *)(a1 + 28) != a2)
      memmove((void *)(a1 + 28), a2, 0x3CuLL);
    for (i = 0; i != 60; i += 4)
    {
      v6 = *(float *)(v4 + i);
      v7 = (_DWORD *)((char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMinimum + i);
      v8 = (char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMaximum + i;
      if (*(float *)((char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMaximum + i) >= v6)
        v8 = (char *)(v4 + i);
      if (v6 >= *(float *)((char *)&DspLib::FourBandRandomOrderLrFilterBank::Parameters::kMinimum + i))
        v7 = v8;
      *(_DWORD *)(v4 + i) = *v7;
    }
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 52);
      v9.i64[0] = 0x3F0000003F000000;
      v9.i64[1] = 0x3F0000003F000000;
      v10 = (int16x8_t)vcgeq_f32(*(float32x4_t *)(a1 + 72), v9);
      v11 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1B6625FE0));
      *(int8x8_t *)v10.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v10), (int8x8_t)0x1000100010001);
      *(int8x8_t *)v10.i8 = vmovn_s16(v10);
      *(_DWORD *)(a1 + 108) = v10.i32[0];
      v10.i32[0] = v11 & 0xF;
      v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v10.i8);
      v12.i16[0] = vaddlv_u8(v12);
      v13 = v12.i32[0];
      if (!*(_BYTE *)(a1 + 100))
      {
        v14 = v12.i32[0] <= 2u ? 2 : v12.i32[0];
        std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 128), (*(_DWORD *)(a1 + 8) * v14));
        v16 = *(_QWORD *)(a1 + 128);
        v15 = *(_QWORD *)(a1 + 136);
        if (v16 == v15)
        {
          v17 = *(_QWORD *)(a1 + 128);
        }
        else
        {
          do
          {
            std::vector<float>::resize(v16, *(_QWORD *)(a1 + 16));
            v16 += 24;
          }
          while (v16 != v15);
          v16 = *(_QWORD *)(a1 + 128);
          v17 = *(_QWORD *)(a1 + 136);
        }
        std::vector<void const*>::resize(a1 + 152, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
        v18 = *(_QWORD *)(a1 + 128);
        if (*(_QWORD *)(a1 + 136) != v18)
        {
          v19 = 0;
          v20 = 1;
          do
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v19) = *(_QWORD *)(v18 + 24 * v19);
            v19 = v20;
            v18 = *(_QWORD *)(a1 + 128);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 136) - v18) >> 3) > v20++);
        }
      }
      if ((v13 & 0xF) > 1)
      {
        v22 = v13 - 1;
        v53 = *(_DWORD *)(a1 + 104) != v13;
        std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)(a1 + 536), v22);
        std::vector<std::vector<DspLib::Biquad::Section>>::resize((uint64_t *)(a1 + 560), v22);
        v23 = 0;
        do
        {
          v24 = 0;
          v25 = 0;
          do
          {
            if (*(_BYTE *)(a1 + v24 + 108))
            {
              if (v23 == v25)
                goto LABEL_31;
              ++v25;
            }
            ++v24;
          }
          while (v24 != 4);
          LODWORD(v24) = 0;
LABEL_31:
          v26 = vcvtas_u32_f32(*(float *)(v4 + 4 * ((2 * (_DWORD)v24) | 1u)) * 0.5);
          v27 = a1 + 4 * v23;
          v29 = *(_DWORD *)(v27 + 88);
          v28 = (unsigned int *)(v27 + 88);
          if (v29 != v26)
          {
            *v28 = v26;
            v53 = 1;
          }
          std::vector<DspLib::Biquad::Section>::resize(*(_QWORD *)(a1 + 560) + 24 * v23, 1uLL);
          v30 = (DspLib::Biquad::Design *)*v28;
          v31 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)a1, v24);
          v32 = *(double *)a1;
          DspLib::Biquad::Design::butterworthLowPass(v30, v31, v32, 0, &v56);
          v33 = *(_QWORD *)(a1 + 536);
          v34 = v33 + 24 * v23;
          v35 = *(void **)v34;
          if (*(_QWORD *)v34)
          {
            *(_QWORD *)(v33 + 24 * v23 + 8) = v35;
            operator delete(v35);
            *(_QWORD *)v34 = 0;
            *(_QWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 16) = 0;
          }
          *(_OWORD *)v34 = v56;
          *(_QWORD *)(v33 + 24 * v23 + 16) = v57;
          v36 = (DspLib::Biquad::Design *)*v28;
          v37 = DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)a1, v24);
          v38 = *(double *)a1;
          DspLib::Biquad::Design::butterworthHighPass(v36, v37, v38, 0, (float **)&v56);
          v39 = *(_QWORD *)(a1 + 560);
          v40 = v39 + 24 * v23;
          v41 = *(void **)v40;
          if (*(_QWORD *)v40)
          {
            *(_QWORD *)(v39 + 24 * v23 + 8) = v41;
            operator delete(v41);
            *(_QWORD *)v40 = 0;
            *(_QWORD *)(v40 + 8) = 0;
            *(_QWORD *)(v40 + 16) = 0;
          }
          *(_OWORD *)v40 = v56;
          *(_QWORD *)(v39 + 24 * v23 + 16) = v57;
          *(&v61 + v23) = -858993459
                        * ((*(_QWORD *)(*(_QWORD *)(a1 + 536) + 24 * v23 + 8)
                          - *(_QWORD *)(*(_QWORD *)(a1 + 536) + 24 * v23)) >> 2);
          ++v23;
        }
        while (v23 != v22);
        v42 = 0;
        if (v13 <= 1)
          v43 = 1;
        else
          v43 = v13;
        v44 = a1 + 112;
        do
        {
          v45 = 0;
          v46 = 0;
          do
          {
            if (*(_BYTE *)(a1 + v45 + 108))
            {
              if (v42 == v46)
                goto LABEL_48;
              ++v46;
            }
            ++v45;
          }
          while (v45 != 4);
          LODWORD(v45) = 0;
LABEL_48:
          v47 = 0.0;
          if (*(float *)(v44 + 4 * v45) != -100.0)
          {
            v47 = DspLib::dB2Amp((DspLib *)v41, *(float *)(v44 + 4 * v45));
            v44 = a1 + 112;
          }
          *(&v58 + v42++) = v47;
        }
        while (v42 != v43);
        if ((*(_BYTE *)(a1 + 88) & 1) != 0)
          v59 = -v59;
        if ((_DWORD)v22 == 3)
        {
          if ((*(_BYTE *)(a1 + 96) & 1) != 0)
            v60 = -v60;
          v48 = v62;
          if (v61 <= v63)
            v49 = v63;
          else
            v49 = v61;
          v50 = v61 + v62 + v63;
        }
        else if ((v13 & 0xF) == 3)
        {
          v49 = v61;
          v48 = v62;
          v50 = v61 + v62;
        }
        else
        {
          v49 = 0;
          v48 = v61;
          v50 = v61;
        }
        if (v53)
        {
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 176));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 248));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 320));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 392));
          DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 464));
          v51 = *(unsigned int *)(a1 + 8);
          if (*(_BYTE *)(a1 + 100))
          {
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 464), v51, v50);
          }
          else
          {
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 176), (2 * v51), v48);
            DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 320), (2 * *(_DWORD *)(a1 + 8)), v48);
            if (v13 == 3)
            {
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 248), (2 * *(_DWORD *)(a1 + 8)), v49);
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 392), (3 * *(_DWORD *)(a1 + 8)), v49);
            }
            else if (v13 == 4)
            {
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 248), (4 * *(_DWORD *)(a1 + 8)), v49);
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 392), (4 * *(_DWORD *)(a1 + 8)), v49);
              DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 464), (2 * *(_DWORD *)(a1 + 8)), v49);
            }
          }
        }
        memset(v55, 0, sizeof(v55));
        std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v55, *(_QWORD *)(a1 + 536), *(_QWORD *)(a1 + 544), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3));
        memset(v54, 0, sizeof(v54));
        std::vector<std::vector<DspLib::Biquad::Section>>::__init_with_size[abi:ne180100]<std::vector<DspLib::Biquad::Section>*,std::vector<DspLib::Biquad::Section>*>(v54, *(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3));
        DspLib::FourBandRandomOrderLrFilterBank::FilterBank::assignCoeffsToBiquadStages(a1, v55, v54, &v61, &v58, v13);
        *(_QWORD *)&v56 = v54;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
        *(_QWORD *)&v56 = v55;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      }
      else
      {
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 176));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 248));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 320));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 392));
        DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 464));
      }
      *(_DWORD *)(a1 + 104) = v13;
    }
  }
  else
  {
    v52 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FourBandRandomOrderLrFilterBank/dsp/DspLibFourBandRandomOrderLrFilterBank.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v52, 151);
    ++DspLibDebug::mAssertCounter;
  }
}

void sub_1B60D1AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a21);
  a21 = (void **)&a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::reset(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 224));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 296));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 368));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 440));
  DspLib::Biquad::SetupWrapper::reset((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 512));
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::uninitialize(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this)
{
  *((_BYTE *)this + 24) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 176));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 248));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 320));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 392));
  DspLib::Biquad::Filter::uninitialize((DspLib::FourBandRandomOrderLrFilterBank::FilterBank *)((char *)this + 464));
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 16);
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  *((_DWORD *)this + 26) = 0;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::numActiveBands(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, uint8x8_t a2)
{
  a2.i32[0] = *((_DWORD *)this + 27);
  return vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a2)));
}

unint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::buffer(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, unsigned int a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;

  if (a2)
  {
    v2 = 0;
    v3 = (unsigned __int8 *)this + 108;
    v4 = a2;
    do
    {
      v5 = *v3++;
      v2 += v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    v2 = 0;
  }
  return *((_QWORD *)this + 19) + 8 * v2 * (unint64_t)*((unsigned int *)this + 2);
}

float DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverFrequency(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, int a2)
{
  float result;

  if (a2 == 2)
    return *((float *)this + 11);
  if (a2 == 1)
  {
    result = *((float *)this + 11) / 1.25;
    if (result >= *((float *)this + 9))
      return *((float *)this + 9);
  }
  else
  {
    result = 0.0;
    if (!a2)
    {
      result = *((float *)this + 9) / 1.25;
      if (result >= *((float *)this + 7))
        result = *((float *)this + 7);
      if ((float)((float)(*((float *)this + 11) / 1.25) / 1.25) < result)
        return (float)(*((float *)this + 11) / 1.25) / 1.25;
    }
  }
  return result;
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::xOverOrder(DspLib::FourBandRandomOrderLrFilterBank::FilterBank *this, unsigned int a2)
{
  int v2;

  if (a2 >= 2)
    v2 = 2;
  else
    v2 = a2;
  return *((float *)this + ((2 * v2) | 1u) + 7);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::assignCoeffsToBiquadStages(uint64_t a1, uint64_t **a2, uint64_t **a3, _DWORD *a4, float *a5, unsigned int a6)
{
  vDSP_Length v10;
  uint64_t v11;
  DspLib::FourBandRandomOrderLrFilterBank *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  vDSP_Length v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  DspLib::FourBandRandomOrderLrFilterBank *v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  DspLib::FourBandRandomOrderLrFilterBank *v29;
  DspLib::FourBandRandomOrderLrFilterBank *v32;
  DspLib::FourBandRandomOrderLrFilterBank *v33;
  _BOOL4 v34;
  uint64_t v35;
  void *__p;
  _BYTE *v37;

  if (*(_DWORD *)(a1 + 8))
  {
    v10 = 0;
    v11 = a1 + 464;
    v32 = (DspLib::FourBandRandomOrderLrFilterBank *)(a1 + 320);
    v33 = (DspLib::FourBandRandomOrderLrFilterBank *)(a1 + 176);
    v12 = (DspLib::FourBandRandomOrderLrFilterBank *)(a1 + 248);
    v34 = a6 > 2;
    v35 = a1 + 392;
    v13 = (8 * (a6 > 2)) | (16 * (a6 > 2));
    while (1)
    {
      if (*(_BYTE *)(a1 + 100))
      {
        DspLib::Biquad::Design::allpassFromPoles((*a2)[3 * v34], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[3 * v34 + 1] - (*a2)[3 * v34]) >> 2), 0, &__p);
        DspLib::Biquad::Filter::setCoefficients(v11, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v37 - (_BYTE *)__p) >> 2), 0, v10);
        if (__p)
        {
          v37 = __p;
          operator delete(__p);
        }
      }
      else
      {
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v33, *(uint64_t *)((char *)*a2 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a2 + v13 + 8) - *(uint64_t *)((char *)*a2 + v13)) >> 2), 0, v10);
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v33, *(uint64_t *)((char *)*a3 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a3 + v13 + 8) - *(uint64_t *)((char *)*a3 + v13)) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v32, *(uint64_t *)((char *)*a2 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a2 + v13 + 8) - *(uint64_t *)((char *)*a2 + v13)) >> 2), 0, v10);
        DspLib::Biquad::Filter::setCoefficients((uint64_t)v32, *(uint64_t *)((char *)*a3 + v13), 0xCCCCCCCCCCCCCCCDLL * ((*(uint64_t *)((char *)*a3 + v13 + 8) - *(uint64_t *)((char *)*a3 + v13)) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
      }
      if (a6 >= 3)
      {
        DspLib::Biquad::Design::allpassFromPoles(**a2, 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 2), 0, &__p);
        if (*(_BYTE *)(a1 + 100))
        {
          v14 = __p;
          v15 = v37 - (_BYTE *)__p;
          v16 = a4[1];
          v17 = v11;
          v18 = v10;
        }
        else
        {
          DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, **a2, 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 2), 0, v10);
          DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, **a3, 0xCCCCCCCCCCCCCCCDLL * (((*a3)[1] - **a3) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
          DspLib::Biquad::Filter::setCoefficients(v35, **a2, 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 2), 0, v10);
          DspLib::Biquad::Filter::setCoefficients(v35, **a3, 0xCCCCCCCCCCCCCCCDLL * (((*a3)[1] - **a3) >> 2), 0, (v10 + *(_DWORD *)(a1 + 8)));
          v14 = __p;
          v15 = v37 - (_BYTE *)__p;
          v19 = *(_DWORD *)(a1 + 8);
          v16 = 0;
          if (a6 == 4)
          {
            v18 = (v10 + v19);
            v17 = v11;
          }
          else
          {
            v18 = (v10 + 2 * v19);
            v17 = v35;
          }
        }
        DspLib::Biquad::Filter::setCoefficients(v17, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * (v15 >> 2), v16, v18);
        if (__p)
        {
          v37 = __p;
          operator delete(__p);
        }
        if (a6 == 4)
          break;
      }
      if (*(_BYTE *)(a1 + 100))
        goto LABEL_34;
      if (a6 == 2)
      {
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v33, 0, v10, *a5, *(unsigned int *)(a1 + 8));
        v27 = a5[1];
        v28 = *(unsigned int *)(a1 + 8);
        v29 = v33;
LABEL_33:
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v29, (DspLib::Biquad::Filter *)1, v10, v27, v28);
        goto LABEL_34;
      }
      if (a6 == 3)
      {
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, 0, v10, *a5, *(unsigned int *)(a1 + 8));
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, (DspLib::Biquad::Filter *)1, v10, a5[1], *(unsigned int *)(a1 + 8));
        v23 = a5[2];
        v24 = *(unsigned int *)(a1 + 8);
        v25 = v33;
        v26 = 1;
LABEL_30:
        DspLib::FourBandRandomOrderLrFilterBank::applyGain(v25, (DspLib::Biquad::Filter *)v26, v10, v23, v24);
        goto LABEL_31;
      }
      if (a6 < 3)
        goto LABEL_34;
LABEL_31:
      if ((*(_BYTE *)(a1 + 92) & 1) != 0)
      {
        v28 = *(unsigned int *)(a1 + 8);
        v27 = -1.0;
        v29 = v32;
        goto LABEL_33;
      }
LABEL_34:
      if (++v10 >= *(unsigned int *)(a1 + 8))
        return;
    }
    DspLib::Biquad::Design::allpassFromPoles((*a2)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[7] - (*a2)[6]) >> 2), 0, &__p);
    if (*(_BYTE *)(a1 + 100))
    {
      v20 = __p;
      v21 = v37 - (_BYTE *)__p;
      v22 = (*a4 + a4[1]);
    }
    else
    {
      DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, (*a2)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[7] - (*a2)[6]) >> 2), 0, (v10 + 2 * *(_DWORD *)(a1 + 8)));
      DspLib::Biquad::Filter::setCoefficients((uint64_t)v12, (*a3)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a3)[7] - (*a3)[6]) >> 2), 0, (v10 + 3 * *(_DWORD *)(a1 + 8)));
      DspLib::Biquad::Filter::setCoefficients(v35, (*a2)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[7] - (*a2)[6]) >> 2), 0, (v10 + 2 * *(_DWORD *)(a1 + 8)));
      DspLib::Biquad::Filter::setCoefficients(v35, (*a3)[6], 0xCCCCCCCCCCCCCCCDLL * (((*a3)[7] - (*a3)[6]) >> 2), 0, (v10 + 3 * *(_DWORD *)(a1 + 8)));
      v22 = 0;
      v20 = __p;
      v21 = v37 - (_BYTE *)__p;
    }
    DspLib::Biquad::Filter::setCoefficients(v11, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * (v21 >> 2), v22, v10);
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    if (*(_BYTE *)(a1 + 100))
      goto LABEL_34;
    DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, 0, v10, *a5, *(unsigned int *)(a1 + 8));
    DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, (DspLib::Biquad::Filter *)1, v10, a5[1], *(unsigned int *)(a1 + 8));
    DspLib::FourBandRandomOrderLrFilterBank::applyGain(v12, (DspLib::Biquad::Filter *)2, v10, a5[2], *(unsigned int *)(a1 + 8));
    v23 = a5[3];
    v24 = *(unsigned int *)(a1 + 8);
    v25 = v12;
    v26 = 3;
    goto LABEL_30;
  }
}

void sub_1B60D21C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *a2;
  v7 = *(_OWORD *)(a2 + 1);
  v4 = *(_OWORD *)a2;
  v5 = a2[2];
  v6 = v2;
  return DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(a1, (__int128 *)&v6, &v4);
}

uint64_t DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processBlock(uint64_t a1, __int128 *a2, __int128 *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  float v17;
  _QWORD v19[3];
  float **v20[3];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  *((_QWORD *)a3 + 2) = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(a1 + 100))
  {
    if (*(_DWORD *)(a1 + 104) < 2u)
    {
      v16 = 0;
      while (!*(_BYTE *)(a1 + 108 + v16))
      {
        if (++v16 == 4)
        {
          v16 = 0;
          break;
        }
      }
      v17 = 0.0;
      if (*(float *)(a1 + 112 + 4 * v16) != -100.0)
        v17 = DspLib::dB2Amp((DspLib *)a1, *(float *)(a1 + 112 + 4 * v16));
      v23 = *a2;
      v24 = *((_QWORD *)a2 + 2);
      v21 = *a3;
      v22 = *((_QWORD *)a3 + 2);
      DspLib::multiply(&v23, &v21, v17);
    }
    else
    {
      v27 = *a2;
      v28 = *((_QWORD *)a2 + 2);
      v25 = *a3;
      v26 = *((_QWORD *)a3 + 2);
      DspLib::Biquad::Filter::process((_QWORD *)(a1 + 464), (uint64_t)&v27, (float ***)&v25);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 8))
    {
      v6 = 0;
      do
      {
        v7 = *((_QWORD *)a2 + 2);
        if (v7)
          memmove(*(void **)(*(_QWORD *)(a1 + 152) + 8 * v6), *(const void **)(*(_QWORD *)a2 + 8 * v6), 4 * v7);
        if (*(_DWORD *)(a1 + 104) >= 2u)
        {
          v8 = *((_QWORD *)a2 + 2);
          if (v8)
            memmove(*(void **)(*(_QWORD *)(a1 + 152) + 8 * (v6 + *(unsigned int *)(a1 + 8))), *(const void **)(*(_QWORD *)a2 + 8 * v6), 4 * v8);
        }
        ++v6;
      }
      while (v6 < *(unsigned int *)(a1 + 8));
    }
    v9 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3;
    v10 = (float **)*((_QWORD *)a2 + 2);
    v20[0] = *(float ***)(a1 + 152);
    v20[1] = (float **)v9;
    v20[2] = v10;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processAnalysisKernel(a1, v20);
    v11 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3;
    v12 = *((_QWORD *)a2 + 2);
    v19[0] = *(_QWORD *)(a1 + 152);
    v19[1] = v11;
    v19[2] = v12;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processSynthesisKernel(a1, (uint64_t)v19);
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        if (*(_DWORD *)(a1 + 104) < 2u)
        {
          v15 = *((_QWORD *)a2 + 2);
          if (v15)
            memmove(*(void **)(*(_QWORD *)a3 + 8 * i), *(const void **)(*(_QWORD *)(a1 + 152) + 8 * i), 4 * v15);
        }
        else
        {
          DspLib::add(*(const float **)(*(_QWORD *)(a1 + 152) + 8 * i), *((_QWORD *)a2 + 2), *(const float **)(*(_QWORD *)(a1 + 152) + 8 * (i + v13)), *((_QWORD *)a2 + 2), *(float **)(*(_QWORD *)a3 + 8 * i));
        }
        v13 = *(unsigned int *)(a1 + 8);
      }
    }
  }
  return *((_QWORD *)a2 + 2);
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processAnalysisKernel(uint64_t a1, float ***a2)
{
  uint64_t v4;
  float **v5;
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float **v12;
  float **v13;
  uint64_t v14;
  float **v15;
  float **v16;
  uint64_t v17;
  float **v18;
  float **v19;
  uint64_t v20;
  float **v21;

  if (*(_DWORD *)(a1 + 104) < 2u)
  {
    v6 = 0;
    while (!*(_BYTE *)(a1 + 108 + v6))
    {
      if (++v6 == 4)
      {
        v6 = 0;
        break;
      }
    }
    v7 = *(float *)(a1 + 112 + 4 * v6);
    v8 = 0.0;
    if (v7 != -100.0)
      v8 = DspLib::dB2Amp((DspLib *)a1, v7);
    if ((*(_DWORD *)(a1 + 8) & 0x7FFFFFFF) != 0)
    {
      v9 = 0;
      do
        DspLib::multiply((*a2)[v9++], (vDSP_Length)a2[2], v8);
      while (v9 < (2 * *(_DWORD *)(a1 + 8)));
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 224);
    v5 = a2[2];
    v19 = *a2;
    v20 = v4;
    v21 = v5;
    v16 = v19;
    v17 = v4;
    v18 = v5;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 176), (uint64_t)&v19, &v16);
  }
  if (*(_DWORD *)(a1 + 104) >= 3u)
  {
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 0;
      while (1)
      {
        v12 = a2[2];
        if (*(_DWORD *)(a1 + 104) != 4)
          goto LABEL_18;
        if (v12)
          break;
LABEL_21:
        if (++v11 >= v10)
          goto LABEL_22;
      }
      memmove((&(*a2)[3 * v10])[v11], (&(*a2)[v11])[v10], 4 * (_QWORD)v12);
      v12 = a2[2];
      v10 = *(unsigned int *)(a1 + 8);
LABEL_18:
      if (v12)
      {
        memmove((&(*a2)[2 * v10])[v11], (&(*a2)[v11])[v10], 4 * (_QWORD)v12);
        v13 = a2[2];
        v10 = *(unsigned int *)(a1 + 8);
        if (v13)
        {
          memmove((&(*a2)[v11])[v10], (*a2)[v11], 4 * (_QWORD)v13);
          v10 = *(unsigned int *)(a1 + 8);
        }
      }
      goto LABEL_21;
    }
LABEL_22:
    v14 = *(_QWORD *)(a1 + 296);
    v15 = a2[2];
    v19 = *a2;
    v20 = v14;
    v21 = v15;
    v16 = v19;
    v17 = v14;
    v18 = v15;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 248), (uint64_t)&v19, &v16);
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processSynthesisKernel(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float **v15;
  uint64_t v16;
  uint64_t v17;
  float **v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD *)(a1 + 104);
  if (v4 >= 3)
  {
    v5 = *(_QWORD *)(a1 + 440);
    v6 = *(_QWORD *)(a2 + 16);
    v18 = *(float ***)a2;
    v19 = v5;
    v20 = v6;
    v15 = v18;
    v16 = v5;
    v17 = v6;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 392), (uint64_t)&v18, &v15);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      for (i = 0; i < v7; ++i)
      {
        DspLib::add(*(float **)(*(_QWORD *)a2 + 8 * i), *(_QWORD *)(a2 + 16), *(const float **)(*(_QWORD *)a2 + 8 * (i + v7)));
        v9 = *(_DWORD *)(a1 + 104);
        if (v9 == 3)
        {
          v10 = *(_QWORD *)(a2 + 16);
          if (v10)
            memmove(*(void **)(*(_QWORD *)a2 + 8 * (i + *(unsigned int *)(a1 + 8))), *(const void **)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a1 + 8) + 8 * i), 4 * v10);
        }
        else if (v9 == 4)
        {
          DspLib::add(*(const float **)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a1 + 8) + 8 * i), *(_QWORD *)(a2 + 16), *(const float **)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a1 + 8) + 8 * i), *(_QWORD *)(a2 + 16), *(float **)(*(_QWORD *)a2 + 8 * (i + *(unsigned int *)(a1 + 8))));
        }
        v7 = *(unsigned int *)(a1 + 8);
      }
    }
    v4 = *(_DWORD *)(a1 + 104);
  }
  if (v4 >= 2)
  {
    v11 = *(_QWORD *)(a1 + 368);
    v12 = *(_QWORD *)(a2 + 16);
    v18 = *(float ***)a2;
    v19 = v11;
    v20 = v12;
    v15 = v18;
    v16 = v11;
    v17 = v12;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 320), (uint64_t)&v18, &v15);
    if (*(_DWORD *)(a1 + 104) == 4)
    {
      v13 = *(_QWORD *)(a1 + 512);
      v14 = *(_QWORD *)(a2 + 16);
      v18 = *(float ***)a2;
      v19 = v13;
      v20 = v14;
      v15 = v18;
      v16 = v13;
      v17 = v14;
      DspLib::Biquad::Filter::process((_QWORD *)(a1 + 464), (uint64_t)&v18, &v15);
    }
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::analyze(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float **v8;
  float **v9[3];

  if (!*(_BYTE *)(a1 + 100))
  {
    if (*(_DWORD *)(a1 + 8))
    {
      v4 = 0;
      do
      {
        v5 = a2[2];
        if (v5)
          memmove(*(void **)(*(_QWORD *)(a1 + 152) + 8 * v4), *(const void **)(*a2 + 8 * v4), 4 * v5);
        if (*(_DWORD *)(a1 + 104) >= 2u)
        {
          v6 = a2[2];
          if (v6)
            memmove(*(void **)(*(_QWORD *)(a1 + 152) + 8 * (v4 + *(unsigned int *)(a1 + 8))), *(const void **)(*a2 + 8 * v4), 4 * v6);
        }
        ++v4;
      }
      while (v4 < *(unsigned int *)(a1 + 8));
    }
    v7 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3;
    v8 = (float **)a2[2];
    v9[0] = *(float ***)(a1 + 152);
    v9[1] = (float **)v7;
    v9[2] = v8;
    DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processAnalysisKernel(a1, v9);
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::FilterBank::synthesize(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  _QWORD v9[3];

  v4 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3;
  v5 = a2[2];
  v9[0] = *(_QWORD *)(a1 + 152);
  v9[1] = v4;
  v9[2] = v5;
  DspLib::FourBandRandomOrderLrFilterBank::FilterBank::processSynthesisKernel(a1, (uint64_t)v9);
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    for (i = 0; i < v6; ++i)
    {
      if (*(_DWORD *)(a1 + 104) < 2u)
      {
        v8 = a2[2];
        if (v8)
          memmove(*(void **)(*a2 + 8 * i), *(const void **)(*(_QWORD *)(a1 + 152) + 8 * i), 4 * v8);
      }
      else
      {
        DspLib::add(*(const float **)(*(_QWORD *)(a1 + 152) + 8 * i), a2[2], *(const float **)(*(_QWORD *)(a1 + 152) + 8 * (i + v6)), a2[2], *(float **)(*a2 + 8 * i));
      }
      v6 = *(unsigned int *)(a1 + 8);
    }
  }
}

void DspLib::FourBandRandomOrderLrFilterBank::applyGain(DspLib::FourBandRandomOrderLrFilterBank *this, DspLib::Biquad::Filter *a2, unsigned int a3, float a4, uint64_t a5)
{
  vDSP_Length v6;
  float32x4_t v8;
  int v9;
  float32x4_t v10;
  int v11;

  v6 = a2 * a5 + a3;
  DspLib::Biquad::Filter::section(this, 0, v6, &v10);
  *(float32x2_t *)v10.f32 = vmul_n_f32(*(float32x2_t *)v10.f32, a4);
  v10.f32[2] = v10.f32[2] * a4;
  v9 = v11;
  v8 = v10;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)&v8, 1, 0, v6);
}

DspLib::VirtualBass::Algorithm *DspLib::VirtualBass::Algorithm::Algorithm(DspLib::VirtualBass::Algorithm *this)
{
  uint64_t v2;

  v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::VirtualBass::Parameters::kDefault, 0x30uLL, (uint64_t)&DspLib::VirtualBass::Parameters::kMinimum, 48, (uint64_t)&DspLib::VirtualBass::Parameters::kMaximum, 48);
  *(_QWORD *)v2 = &off_1E69C40D8;
  *(_WORD *)(v2 + 216) = 0;
  *(_BYTE *)(v2 + 218) = 1;
  *(_DWORD *)(v2 + 220) = 1;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 832) = 0u;
  *(_OWORD *)(v2 + 848) = 0u;
  *(_OWORD *)(v2 + 864) = 0u;
  *(_OWORD *)(v2 + 880) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  *(_BYTE *)(v2 + 464) = 0;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_BYTE *)(v2 + 536) = 0;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_BYTE *)(v2 + 608) = 0;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 560) = 0u;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(_BYTE *)(v2 + 680) = 0;
  *(_BYTE *)(v2 + 752) = 0;
  *(_OWORD *)(v2 + 720) = 0u;
  *(_OWORD *)(v2 + 736) = 0u;
  *(_OWORD *)(v2 + 688) = 0u;
  *(_OWORD *)(v2 + 704) = 0u;
  *(_OWORD *)(v2 + 760) = 0u;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 792) = 0u;
  *(_OWORD *)(v2 + 808) = 0u;
  *(_BYTE *)(v2 + 824) = 0;
  *(_OWORD *)(v2 + 896) = xmmword_1B6627BD0;
  *(_DWORD *)(v2 + 912) = 0;
  *(_QWORD *)&_Q0 = 0x100000001;
  *((_QWORD *)&_Q0 + 1) = 0x100000001;
  *(_OWORD *)(v2 + 916) = _Q0;
  *(_DWORD *)(v2 + 932) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 117) = _Q0;
  DspLib::NonLinearDevice::Algorithm::Algorithm((DspLib::NonLinearDevice::Algorithm *)(v2 + 944));
  *((_DWORD *)this + 334) = 10;
  *(_QWORD *)((char *)this + 1340) = 0;
  *(_OWORD *)((char *)this + 1348) = 0u;
  *((_DWORD *)this + 341) = 981668463;
  *((_QWORD *)this + 171) = 0x3A83126F00000000;
  *((_QWORD *)this + 172) = 0;
  *((_QWORD *)this + 175) = 0x3A83126F00000000;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *((_QWORD *)this + 176) = 0x3A83126F00000000;
  *((_DWORD *)this + 354) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 90) = xmmword_1B662A2A0;
  *((_DWORD *)this + 364) = 0;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_QWORD *)this + 189) = 981668463;
  *((_DWORD *)this + 380) = 981668463;
  *((_OWORD *)this + 106) = 0u;
  *(_OWORD *)((char *)this + 1684) = 0u;
  *(_OWORD *)((char *)this + 1668) = 0u;
  *(_OWORD *)((char *)this + 1652) = 0u;
  *(_OWORD *)((char *)this + 1636) = 0u;
  *(_OWORD *)((char *)this + 1620) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 1540) = 0u;
  *(_OWORD *)((char *)this + 1524) = 0u;
  *((_OWORD *)this + 107) = xmmword_1B662A2B0;
  return this;
}

void sub_1B60D2BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  _QWORD *v10;
  DspLib::Biquad::Filter *v11;
  DspLib::Biquad::Filter *v12;
  DspLib::Biquad::Filter *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 103));
  DspLib::Biquad::Filter::~Filter(v13);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 85));
  DspLib::Biquad::Filter::~Filter(v12);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 67));
  DspLib::Biquad::Filter::~Filter(v11);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 49));
  v14 = (void *)v10[46];
  if (v14)
  {
    v10[47] = v14;
    operator delete(v14);
  }
  v15 = (void *)v10[43];
  if (v15)
  {
    v10[44] = v15;
    operator delete(v15);
  }
  v16 = (void *)v10[40];
  if (v16)
  {
    v10[41] = v16;
    operator delete(v16);
  }
  v17 = (void *)v10[37];
  if (v17)
  {
    v10[38] = v17;
    operator delete(v17);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *v10 = off_1E69C46F0;
  v18 = (void *)v10[6];
  if (v18)
  {
    v10[7] = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t DspLib::VirtualBass::Algorithm::initialize(DspLib::VirtualBass::Algorithm *this, int a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  DspLib::Biquad::Filter *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  float *v74;
  float v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  double v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  char *v84;
  int v85;
  unsigned int v86;
  char **v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  _BYTE *v95;
  uint64_t v96;
  void *__p;
  _BYTE *v98;
  char *v99;
  char *v100;
  char *v101;

  v5 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  v6 = *((unsigned int *)this + 3);
  if (v6 >= 9)
  {
    v84 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    v85 = 83;
LABEL_105:
    printf("DSP Sound assertion in %s at line %d\n", v84, v85);
    ++DspLibDebug::mAssertCounter;
    return v5;
  }
  if (!(_DWORD)v6)
  {
    v84 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    v85 = 84;
    goto LABEL_105;
  }
  *((_BYTE *)this + 8) = 1;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 28, v6);
  v7 = *((_QWORD *)this + 28);
  v8 = *((_QWORD *)this + 29);
  while (v7 != v8)
  {
    std::vector<float>::resize(v7, *((unsigned int *)this + 8));
    v7 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 31, *((unsigned int *)this + 3));
  v9 = *((_QWORD *)this + 31);
  v10 = *((_QWORD *)this + 32);
  while (v9 != v10)
  {
    std::vector<float>::resize(v9, *((unsigned int *)this + 8));
    v9 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 34, *((unsigned int *)this + 3));
  v11 = *((_QWORD *)this + 34);
  v12 = *((_QWORD *)this + 35);
  while (v11 != v12)
  {
    std::vector<float>::resize(v11, *((unsigned int *)this + 8));
    v11 += 24;
  }
  std::vector<float>::resize((uint64_t)this + 296, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 320, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 344, *((unsigned int *)this + 8));
  std::vector<float>::resize((uint64_t)this + 368, *((unsigned int *)this + 8));
  for (i = 1648; i != 1696; i += 24)
    std::vector<float>::resize((uint64_t)this + i, *((unsigned int *)this + 8));
  v14 = *((unsigned int *)this + 8);
  LODWORD(__p) = 0;
  std::vector<float>::assign((char **)this + 183, v14, &__p);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 392), *((unsigned int *)this + 3), 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 464), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 536), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 608), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 752), *((unsigned int *)this + 3), 1uLL);
  v15 = (DspLib::VirtualBass::Algorithm *)((char *)this + 824);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 824), 1uLL, 0);
  *((_QWORD *)this + 195) = *((_QWORD *)this + 194);
  *((_QWORD *)this + 192) = *((_QWORD *)this + 191);
  v17 = (_QWORD *)*((_QWORD *)this + 201);
  v18 = (_QWORD *)*((_QWORD *)this + 200);
  while (v17 != v18)
  {
    v17 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v17);
  }
  *((_QWORD *)this + 201) = v18;
  v19 = (_QWORD *)*((_QWORD *)this + 204);
  v20 = (_QWORD *)*((_QWORD *)this + 203);
  while (v19 != v20)
  {
    v19 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v19);
  }
  *((_QWORD *)this + 204) = v20;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  DspLib::VirtualBass::Algorithm::populateSRClowpassCoeffs(v16, a3, 8000, (uint64_t)&v94, &v91, (uint64_t)&v88);
  v21 = (v95 - (_BYTE *)v94) >> 2;
  *((_DWORD *)this + 430) = v21;
  std::vector<unsigned long>::resize((uint64_t)this + 1576, v21);
  if (*((_DWORD *)this + 430))
  {
    v86 = v5;
    v22 = 0;
    v23 = (char **)((char *)this + 1528);
    v24 = (_QWORD *)((char *)this + 1600);
    v25 = (_QWORD *)((char *)this + 1624);
    v87 = (char **)((char *)this + 1552);
    do
    {
      v26 = (_QWORD *)*((_QWORD *)this + 195);
      v27 = *((_QWORD *)this + 196);
      if ((unint64_t)v26 >= v27)
      {
        v29 = ((char *)v26 - *v87) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v30 = v27 - (_QWORD)*v87;
        v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v29 + 1))
          v31 = v29 + 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)this + 1568, v32);
        else
          v33 = 0;
        v34 = &v33[8 * v29];
        *(_QWORD *)v34 = 1;
        v28 = v34 + 8;
        v35 = (char *)*((_QWORD *)this + 195);
        v36 = (char *)*((_QWORD *)this + 194);
        if (v35 != v36)
        {
          do
          {
            v37 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *((_QWORD *)v34 - 1) = v37;
            v34 -= 8;
          }
          while (v35 != v36);
          v35 = *v87;
        }
        *((_QWORD *)this + 194) = v34;
        *((_QWORD *)this + 195) = v28;
        *((_QWORD *)this + 196) = &v33[8 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v26 = 1;
        v28 = v26 + 1;
      }
      *((_QWORD *)this + 195) = v28;
      v38 = (_QWORD *)*((_QWORD *)this + 192);
      v39 = *((_QWORD *)this + 193);
      if ((unint64_t)v38 >= v39)
      {
        v41 = ((char *)v38 - *v23) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v42 = v39 - (_QWORD)*v23;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)this + 1544, v44);
        else
          v45 = 0;
        v46 = &v45[8 * v41];
        *(_QWORD *)v46 = 1;
        v40 = v46 + 8;
        v47 = (char *)*((_QWORD *)this + 192);
        v48 = (char *)*((_QWORD *)this + 191);
        if (v47 != v48)
        {
          do
          {
            v49 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *((_QWORD *)v46 - 1) = v49;
            v46 -= 8;
          }
          while (v47 != v48);
          v47 = *v23;
        }
        *((_QWORD *)this + 191) = v46;
        *((_QWORD *)this + 192) = v40;
        *((_QWORD *)this + 193) = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v38 = 1;
        v40 = v38 + 1;
      }
      *((_QWORD *)this + 192) = v40;
      v50 = *((_QWORD *)this + 201);
      v51 = *((_QWORD *)this + 202);
      if (v50 >= v51)
      {
        v53 = 0x8E38E38E38E38E39 * ((uint64_t)(v50 - *v24) >> 3);
        v54 = v53 + 1;
        if (v53 + 1 > 0x38E38E38E38E38ELL)
          goto LABEL_106;
        v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v51 - *v24) >> 3);
        if (2 * v55 > v54)
          v54 = 2 * v55;
        if (v55 >= 0x1C71C71C71C71C7)
          v56 = 0x38E38E38E38E38ELL;
        else
          v56 = v54;
        v101 = (char *)this + 1616;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>>((uint64_t)this + 1616, v56);
        else
          v57 = 0;
        v58 = &v57[72 * v53];
        __p = v57;
        v98 = v58;
        v100 = &v57[72 * v56];
        *(_OWORD *)v58 = 0u;
        *((_OWORD *)v58 + 1) = 0u;
        *((_OWORD *)v58 + 2) = 0u;
        *((_OWORD *)v58 + 3) = 0u;
        *((_QWORD *)v58 + 8) = 0;
        v99 = v58 + 72;
        std::vector<DspLib::Biquad::Filter>::__swap_out_circular_buffer((uint64_t *)this + 200, &__p);
        v52 = *((_QWORD *)this + 201);
        std::__split_buffer<DspLib::Biquad::Filter>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *(_QWORD *)(v50 + 64) = 0;
        *(_OWORD *)(v50 + 32) = 0u;
        *(_OWORD *)(v50 + 48) = 0u;
        *(_OWORD *)v50 = 0u;
        *(_OWORD *)(v50 + 16) = 0u;
        v52 = v50 + 72;
        *((_QWORD *)this + 201) = v50 + 72;
      }
      *((_QWORD *)this + 201) = v52;
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(*((_QWORD *)this + 200) + 72 * v22), 1uLL, 1uLL);
      v59 = *((_QWORD *)this + 204);
      v60 = *((_QWORD *)this + 205);
      if (v59 >= v60)
      {
        v62 = 0x8E38E38E38E38E39 * ((uint64_t)(v59 - *v25) >> 3);
        v63 = v62 + 1;
        if (v62 + 1 > 0x38E38E38E38E38ELL)
LABEL_106:
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v64 = 0x8E38E38E38E38E39 * ((uint64_t)(v60 - *v25) >> 3);
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x1C71C71C71C71C7)
          v65 = 0x38E38E38E38E38ELL;
        else
          v65 = v63;
        v101 = (char *)this + 1640;
        if (v65)
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>>((uint64_t)this + 1640, v65);
        else
          v66 = 0;
        v67 = &v66[72 * v62];
        __p = v66;
        v98 = v67;
        v100 = &v66[72 * v65];
        *(_OWORD *)v67 = 0u;
        *((_OWORD *)v67 + 1) = 0u;
        *((_OWORD *)v67 + 2) = 0u;
        *((_OWORD *)v67 + 3) = 0u;
        *((_QWORD *)v67 + 8) = 0;
        v99 = v67 + 72;
        std::vector<DspLib::Biquad::Filter>::__swap_out_circular_buffer((uint64_t *)this + 203, &__p);
        v61 = *((_QWORD *)this + 204);
        std::__split_buffer<DspLib::Biquad::Filter>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        *(_QWORD *)(v59 + 64) = 0;
        *(_OWORD *)(v59 + 32) = 0u;
        *(_OWORD *)(v59 + 48) = 0u;
        *(_OWORD *)v59 = 0u;
        *(_OWORD *)(v59 + 16) = 0u;
        v61 = v59 + 72;
        *((_QWORD *)this + 204) = v59 + 72;
      }
      *((_QWORD *)this + 204) = v61;
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(*((_QWORD *)this + 203) + 72 * v22++), 1uLL, 1uLL);
      v68 = *((unsigned int *)this + 430);
    }
    while (v22 < v68);
    *((_DWORD *)this + 429) = 1;
    if ((_DWORD)v68)
    {
      v69 = 0;
      v70 = 0;
      v71 = 0;
      do
      {
        v72 = *((_DWORD *)v94 + v71);
        v73 = *((unsigned int *)v88 + v71);
        std::vector<DspLib::Biquad::Section>::vector(&__p, v73);
        DspLib::Biquad::read(*((_QWORD *)v91 + v71), 5 * v73, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v98 - (_BYTE *)__p) >> 2));
        DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)(*v24 + v70), v73);
        DspLib::Biquad::Filter::setCoefficients(*v24 + v70, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v98 - (_BYTE *)__p) >> 2), 0, 0x41uLL);
        v74 = (float *)__p;
        *(float32x2_t *)__p = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)__p), (double)v72));
        v75 = (double)v72 * v74[2];
        v74[2] = v75;
        DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)(*v25 + v70), v73);
        DspLib::Biquad::Filter::setCoefficients(*v25 + v70, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v98 - (_BYTE *)__p) >> 2), 0, 0x41uLL);
        if (v72)
        {
          v77 = (unsigned int *)&(*v87)[v69];
          *v77 = v72;
          v77[1] = 0;
          v78 = (unsigned int *)&(*v23)[v69];
          *v78 = v72;
          v78[1] = 0;
        }
        *((_DWORD *)this + 429) *= v72;
        if (__p)
        {
          v98 = __p;
          operator delete(__p);
        }
        ++v71;
        v70 += 72;
        v69 += 8;
      }
      while (v71 < *((unsigned int *)this + 430));
      LODWORD(v76) = *((_DWORD *)this + 429);
      v79 = (double)v76;
    }
    else
    {
      v79 = 1.0;
    }
    v5 = v86;
    v15 = (DspLib::VirtualBass::Algorithm *)((char *)this + 824);
  }
  else
  {
    *((_DWORD *)this + 429) = 1;
    v79 = 1.0;
  }
  v80 = (*((double *)this + 3) / v79);
  *((_DWORD *)this + 428) = v80;
  DspLib::NonLinearDevice::Algorithm::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 944), 1, (double)v80);
  DspLib::Biquad::Filter::initialize((DspLib::VirtualBass::Algorithm *)((char *)this + 680), 1uLL, 1uLL);
  DspLib::Biquad::Filter::initialize(v15, 1uLL, 0);
  (*(void (**)(DspLib::VirtualBass::Algorithm *, _QWORD))(*(_QWORD *)this + 200))(this, *((unsigned __int8 *)this + 40));
  v81 = *((_QWORD *)this + 212);
  if (*((_BYTE *)this + 40))
  {
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v81 + 16))(v81, *((unsigned int *)this + 3), *((double *)this + 3));
    (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 213) + 16))(*((_QWORD *)this + 213), *((unsigned int *)this + 4), *((double *)this + 3));
  }
  else
  {
    *((_QWORD *)this + 212) = 0;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    v82 = *((_QWORD *)this + 213);
    *((_QWORD *)this + 213) = 0;
    if (v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  }
  (*(void (**)(DspLib::VirtualBass::Algorithm *))(*(_QWORD *)this + 144))(this);
  (*(void (**)(DspLib::VirtualBass::Algorithm *))(*(_QWORD *)this + 152))(this);
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  return v5;
}

void sub_1B60D35B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_1B60D3620(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1B60D35E8);
}

void DspLib::VirtualBass::Algorithm::populateSRClowpassCoeffs(uint64_t a1, unsigned int a2, int a3, uint64_t a4, void **a5, uint64_t a6)
{
  uint64_t v9;
  float v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int *v26;
  char *v27;
  unsigned int v28;
  char *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;

  if (a2 >= 2 * a3)
  {
    v9 = 0;
    v10 = (float)a2;
    v11 = 1000;
    v12 = 1000000.0;
    do
    {
      v13 = DspLib::VirtualBass::kStartFrequency[v9];
      v14 = v13 - v10;
      v15 = vabds_f32(v13, v10);
      if (v15 < v12 && v14 <= 0.0)
      {
        v12 = v15;
        v11 = v9;
      }
      ++v9;
    }
    while (v9 != 9);
    v16 = DspLib::VirtualBass::kSRCFactors[v11];
    v17 = *(_QWORD *)(a4 + 16);
    v18 = *(unsigned int **)(a4 + 8);
    if ((unint64_t)v18 >= v17)
    {
      v20 = *(unsigned int **)a4;
      v21 = ((uint64_t)v18 - *(_QWORD *)a4) >> 2;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 1 > v22)
        v22 = v23 >> 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a4 + 16, v24);
        v20 = *(unsigned int **)a4;
        v18 = *(unsigned int **)(a4 + 8);
      }
      else
      {
        v25 = 0;
      }
      v26 = (unsigned int *)&v25[4 * v21];
      v27 = &v25[4 * v24];
      *v26 = v16;
      v19 = v26 + 1;
      while (v18 != v20)
      {
        v28 = *--v18;
        *--v26 = v28;
      }
      *(_QWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = v19;
      *(_QWORD *)(a4 + 16) = v27;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v18 = v16;
      v19 = v18 + 1;
    }
    *(_QWORD *)(a4 + 8) = v19;
    v29 = (char *)&DspLib::VirtualBass::kEllipticalCoeff + 80 * v11;
    v30 = (unint64_t)a5[2];
    v31 = a5[1];
    if ((unint64_t)v31 >= v30)
    {
      v33 = ((char *)v31 - (_BYTE *)*a5) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v34 = v30 - (_QWORD)*a5;
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(a5 + 2), v36);
      else
        v37 = 0;
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      *(_QWORD *)v38 = v29;
      v32 = v38 + 8;
      v41 = (char *)*a5;
      v40 = (char *)a5[1];
      if (v40 != *a5)
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v40 != v41);
        v40 = (char *)*a5;
      }
      *a5 = v38;
      a5[1] = v32;
      a5[2] = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v31 = v29;
      v32 = v31 + 1;
    }
    a5[1] = v32;
    v43 = *(_QWORD *)(a6 + 16);
    v44 = *(_DWORD **)(a6 + 8);
    if ((unint64_t)v44 >= v43)
    {
      v46 = *(_DWORD **)a6;
      v47 = ((uint64_t)v44 - *(_QWORD *)a6) >> 2;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 62)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v49 = v43 - (_QWORD)v46;
      if (v49 >> 1 > v48)
        v48 = v49 >> 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
        v50 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a6 + 16, v50);
        v46 = *(_DWORD **)a6;
        v44 = *(_DWORD **)(a6 + 8);
      }
      else
      {
        v51 = 0;
      }
      v52 = &v51[4 * v47];
      v53 = &v51[4 * v50];
      *(_DWORD *)v52 = 4;
      v45 = v52 + 4;
      while (v44 != v46)
      {
        v54 = *--v44;
        *((_DWORD *)v52 - 1) = v54;
        v52 -= 4;
      }
      *(_QWORD *)a6 = v52;
      *(_QWORD *)(a6 + 8) = v45;
      *(_QWORD *)(a6 + 16) = v53;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v44 = 4;
      v45 = v44 + 1;
    }
    *(_QWORD *)(a6 + 8) = v45;
  }
}

void DspLib::VirtualBass::Algorithm::uninitialize(DspLib::VirtualBass::Algorithm *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  *((_BYTE *)this + 8) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 28);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 31);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 34);
  *((_QWORD *)this + 38) = *((_QWORD *)this + 37);
  *((_QWORD *)this + 41) = *((_QWORD *)this + 40);
  *((_QWORD *)this + 44) = *((_QWORD *)this + 43);
  *((_QWORD *)this + 47) = *((_QWORD *)this + 46);
  v2 = (_QWORD *)((char *)this + 1648);
  do
  {
    v2[1] = *v2;
    v2 += 3;
  }
  while (v2 != (_QWORD *)((char *)this + 1696));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 392));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 464));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 536));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 608));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 680));
  DspLib::NonLinearDevice::Algorithm::uninitialize((uint64_t)this + 944);
  v3 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 195) = *((_QWORD *)this + 194);
  *((_QWORD *)this + 192) = *((_QWORD *)this + 191);
  *((_QWORD *)this + 198) = *((_QWORD *)this + 197);
  v5 = (_QWORD *)*((_QWORD *)this + 201);
  v6 = (_QWORD *)*((_QWORD *)this + 200);
  while (v5 != v6)
  {
    v5 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v5);
  }
  *((_QWORD *)this + 201) = v6;
  v7 = (_QWORD *)*((_QWORD *)this + 204);
  v8 = (_QWORD *)*((_QWORD *)this + 203);
  while (v7 != v8)
  {
    v7 -= 9;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v7);
  }
  *((_QWORD *)this + 204) = v8;
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 752));
  DspLib::Biquad::Filter::uninitialize((DspLib::VirtualBass::Algorithm *)((char *)this + 824));
}

void DspLib::VirtualBass::Algorithm::reset(DspLib::VirtualBass::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;

  if (*((_BYTE *)this + 8))
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 440));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 512));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 584));
    DspLib::NonLinearDevice::Algorithm::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 944));
    v2 = *((_QWORD *)this + 212);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2);
    v3 = *((_QWORD *)this + 213);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 656));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 728));
    *((_DWORD *)this + 341) = 981668463;
    *(_QWORD *)((char *)this + 1372) = 981668463;
    *((_DWORD *)this + 351) = 981668463;
    *(_QWORD *)((char *)this + 1412) = 981668463;
    *((_DWORD *)this + 378) = 981668463;
    *((_QWORD *)this + 190) = 981668463;
    v4 = *((_QWORD *)this + 194);
    if (*((_QWORD *)this + 195) != v4)
    {
      v5 = 0;
      v6 = 1;
      do
      {
        *(_DWORD *)(v4 + 8 * v5 + 4) = 0;
        *(_DWORD *)(*((_QWORD *)this + 191) + 8 * v5 + 4) = 0;
        v7 = 9 * v5;
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(*((_QWORD *)this + 200) + 72 * v5 + 48));
        DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(*((_QWORD *)this + 203) + 8 * v7 + 48));
        v5 = v6;
        v4 = *((_QWORD *)this + 194);
        ++v6;
      }
      while (v5 < (*((_QWORD *)this + 195) - v4) >> 3);
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 800));
    DspLib::Biquad::SetupWrapper::reset((DspLib::VirtualBass::Algorithm *)((char *)this + 872));
  }
  else
  {
    v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v8, 259);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::VirtualBass::Algorithm::setMeteringIsEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  DspLib::AudioMeter::Algorithm *v3;
  double v4;
  uint64_t v5;
  DspLib::AudioMeter::Algorithm *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(this + 40) = a2;
  if (*(_BYTE *)(this + 8))
  {
    v2 = this;
    if (a2)
    {
      v3 = (DspLib::AudioMeter::Algorithm *)operator new();
      v4 = DspLib::AudioMeter::Algorithm::Algorithm(v3);
      v5 = *(_QWORD *)(v2 + 1696);
      *(_QWORD *)(v2 + 1696) = v3;
      if (v5)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 8))(v5, v4);
      v6 = (DspLib::AudioMeter::Algorithm *)operator new();
      v7 = DspLib::AudioMeter::Algorithm::Algorithm(v6);
      v8 = *(_QWORD *)(v2 + 1704);
      *(_QWORD *)(v2 + 1704) = v6;
      if (v8)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v8 + 8))(v8, v7);
      (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(v2 + 1696) + 16))(*(_QWORD *)(v2 + 1696), *(unsigned int *)(v2 + 12), *(double *)(v2 + 24));
      (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(v2 + 1704) + 16))(*(_QWORD *)(v2 + 1704), *(unsigned int *)(v2 + 16), *(double *)(v2 + 24));
    }
    else
    {
      v9 = *(_QWORD *)(this + 1696);
      *(_QWORD *)(v2 + 1696) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = *(_QWORD *)(v2 + 1704);
      *(_QWORD *)(v2 + 1704) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  }
  return this;
}

void sub_1B60D3CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C4016621F76);
  _Unwind_Resume(a1);
}

uint64_t DspLib::VirtualBass::Algorithm::latencySamples(DspLib::VirtualBass::Algorithm *this)
{
  uint64_t result;
  char *v3;

  if (*((_BYTE *)this + 8))
  {
    DspLib::Biquad::Filter::latencySamples((_QWORD *)this + 49);
    return (uint64_t)DspLib::Biquad::Filter::latencySamples((_QWORD *)this + 94);
  }
  else
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v3, 311);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::VirtualBass::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  float v5;
  char *v6;

  if (*(_BYTE *)(a1 + 8))
  {
    DspLib::clear(a2, __N);
    if (*(_BYTE *)(a1 + 40))
    {
      (*(void (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(a1 + 1696) + 184))(*(_QWORD *)(a1 + 1696), a2 + 3, 32);
      (*(void (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(a1 + 1704) + 184))(*(_QWORD *)(a1 + 1704), a2 + 35, 32);
    }
    else
    {
      DspLib::fill(a2 + 3, 0x40uLL, -100.0);
    }
    v5 = *(double *)(a1 + 24);
    a2[1] = v5;
  }
  else
  {
    v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 319);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::VirtualBass::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  DspLib *v5;
  float *v6;
  float v7;
  DspLib *v8;
  DspLib *v9;
  DspLib *v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint32x4_t v27;

  v5 = (DspLib *)DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(float **)(a1 + 48);
    v7 = v6[1];
    *(_BYTE *)(a1 + 218) = *v6 > 0.5;
    *(_DWORD *)(a1 + 220) = vcvtas_u32_f32(v7);
    *(_BYTE *)(a1 + 217) = v6[17] > 0.5;
    *(_BYTE *)(a1 + 216) = v6[24] > 0.5;
    *(float *)(a1 + 940) = DspLib::dB2Amp(v5, v6[10]);
    *(float *)(a1 + 936) = DspLib::dB2Amp(v8, *(float *)(*(_QWORD *)(a1 + 48) + 44));
    *(float *)(a1 + 896) = DspLib::dB2Amp(v9, *(float *)(*(_QWORD *)(a1 + 48) + 48));
    *(float *)(a1 + 900) = DspLib::dB2Amp(v10, *(float *)(*(_QWORD *)(a1 + 48) + 52));
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(float *)(v11 + 100);
    v13 = vcvtas_u32_f32(v12);
    if (*(_DWORD *)(a1 + 1336) != v13)
    {
      *(_DWORD *)(a1 + 1336) = v13;
      *(_DWORD *)(a1 + 1404) = 981668463;
      *(_QWORD *)(a1 + 1412) = 981668463;
      v12 = *(float *)(v11 + 100);
    }
    DspLib::AlgorithmBase::setParameter((DspLib::AlgorithmBase *)(a1 + 944), 0, v12);
    v14 = *(float **)(a1 + 48);
    v15 = v14[15];
    v16 = v14[16];
    v17 = v14[44];
    v18 = v14[45];
    v19 = (float)*(unsigned int *)(a1 + 1712);
    *(float *)(a1 + 1348) = v15;
    *(float *)(a1 + 1352) = v16;
    *(float *)(a1 + 1360) = v19;
    *(float *)(a1 + 1340) = expf(-1.0 / (float)(v15 * v19));
    *(float *)(a1 + 1344) = expf(-1.0 / (float)(v16 * v19));
    *(float *)(a1 + 1368) = expf(-1.0 / (float)(v18 * v19));
    *(float *)(a1 + 1356) = (float)((float)(v17 * v19) + 1);
    v20 = v14[15];
    v21 = v14[16];
    v22 = v14[44];
    v23 = v14[45];
    *(float *)(a1 + 1388) = v20;
    *(float *)(a1 + 1392) = v21;
    *(float *)(a1 + 1400) = v19;
    *(float *)(a1 + 1380) = expf(-1.0 / (float)(v20 * v19));
    *(float *)(a1 + 1384) = expf(-1.0 / (float)(v21 * v19));
    *(float *)(a1 + 1408) = expf(-1.0 / (float)(v23 * v19));
    *(float *)(a1 + 1396) = (float)((float)(v22 * v19) + 1);
    DspLib::VirtualBass::Compressor::setParameters((DspLib::VirtualBass::Compressor *)(a1 + 1424), v14[22], v14[23], v14[46], v14[18], v14[19], v14[20], v14[21], v14[47], v19);
    v24 = *(_QWORD *)(a1 + 48);
    v25.i32[0] = *(_DWORD *)(v24 + 20);
    v25.i32[1] = *(_DWORD *)(v24 + 36);
    v25.i64[1] = *(_QWORD *)(v24 + 28);
    v26.i64[0] = 0x3F0000003F000000;
    v26.i64[1] = 0x3F0000003F000000;
    v27 = vcvtq_u32_f32(vmlaq_f32(v26, v26, vcvtq_f32_u32(vcvtq_u32_f32(vrndaq_f32(v25)))));
    *(_DWORD *)(a1 + 916) = v27.i32[1];
    *(uint32x4_t *)(a1 + 920) = v27;
    *(_DWORD *)(a1 + 904) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(a1 + 908) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(a1 + 912) = *(_DWORD *)(v24 + 16);
    DspLib::VirtualBass::Algorithm::setupFilters((DspLib::VirtualBass::Algorithm *)a1);
  }
}

float DspLib::VirtualBass::Compressor::setParameters(DspLib::VirtualBass::Compressor *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  float result;

  *(float *)this = a5;
  *((float *)this + 1) = a6;
  *((float *)this + 2) = a7;
  *((float *)this + 3) = a8;
  *((float *)this + 4) = (float)(1.0 / a6) + -1.0;
  *((float *)this + 5) = a8 * 0.5;
  *((float *)this + 6) = 1.0 / (float)(a8 + a8);
  *((float *)this + 7) = 1.0 / a6;
  *((float *)this + 8) = a10;
  *((float *)this + 18) = a2;
  *((float *)this + 19) = a3;
  *((float *)this + 21) = a10;
  *((float *)this + 16) = expf(-1.0 / (float)(a2 * a10));
  *((float *)this + 17) = expf(-1.0 / (float)(a3 * a10));
  *((float *)this + 23) = expf(-1.0 / (float)(a9 * a10));
  result = (float)((float)(a4 * a10) + 1);
  *((float *)this + 20) = result;
  return result;
}

void DspLib::VirtualBass::Algorithm::setupFilters(DspLib::VirtualBass::Algorithm *this)
{
  unsigned int v2;
  vDSP_Length v3;
  char *v4;
  float32x2_t *v5;
  float v6;
  unsigned int v7;
  vDSP_Length v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  vDSP_Length *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  void *__p;
  _BYTE *v29;
  void *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  float32x2_t *v34;
  float32x2_t *v35;
  float *v36;
  float *v37;

  v2 = *((_DWORD *)this + 232) + 1;
  v3 = (*((_DWORD *)this + 233) + 1) >> 1;
  v4 = (char *)this + 824;
  DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)this + 103, v3 + (v2 >> 1));
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)*((unsigned int *)this + 232), *((float *)this + 227), (float)*((unsigned int *)this + 428), 0, &v36);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * (v37 - v36), 1, &v34);
  v5 = v34;
  v6 = *((float *)this + 234);
  *v34 = vmul_n_f32(*v34, v6);
  v5[1].f32[0] = v6 * v5[1].f32[0];
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v4, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (char *)v5) >> 2), 0, 0x41uLL);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)*((unsigned int *)this + 233), *((float *)this + 228), (float)*((unsigned int *)this + 428), 0, &v34);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (char *)v34) >> 2), 1, &v32);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v4, (uint64_t)v32, 0xCCCCCCCCCCCCCCCDLL * ((v33 - v32) >> 2), v2 >> 1, 0x41uLL);
  v7 = *((_DWORD *)this + 229) + 1;
  v8 = v7 & 0xFFFFFFFE;
  DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)this + 49, v8);
  v9 = *((double *)this + 3);
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)*((unsigned int *)this + 229), *((float *)this + 227), v9, 0, (float **)&v30);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 392, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v31 - (_BYTE *)v30) >> 2), 0, 0x41uLL);
  v10 = v7 >> 1;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 392, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v31 - (_BYTE *)v30) >> 2), v10, 0x41uLL);
  DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)this + 58, v8);
  v11 = *((double *)this + 3);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)*((unsigned int *)this + 229), *((float *)this + 227), v11, 0, &__p);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 464, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)__p) >> 2), 0, 0x41uLL);
  v12 = -1.0;
  if ((*((_DWORD *)this + 229) & 1) == 0)
    v12 = 1.0;
  v13 = v12 / (float)*((unsigned int *)this + 3);
  v14 = (float *)__p;
  *(float32x2_t *)__p = vmul_n_f32(*(float32x2_t *)__p, v13);
  v14[2] = v13 * v14[2];
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 464, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)v14) >> 2), v10, 0x41uLL);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)this + 67, v3 + (v2 & 0xFFFFFFFE));
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 536, (uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * (v37 - v36), 0, 0x41uLL);
  DspLib::Biquad::Design::phaseComplement(v36, 0xCCCCCCCCCCCCCCCDLL * (v37 - v36), (uint64_t *)&__p);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 536, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)__p) >> 2), v2 >> 1, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 536, (uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (char *)v34) >> 2), v2 & 0xFFFFFFFE, 0x41uLL);
  DspLib::Biquad::Filter::setNumberOfStages((vDSP_Length *)this + 76, v3);
  DspLib::Biquad::Design::phaseComplement(v34, 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (char *)v34) >> 2), (uint64_t *)&v26);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 608, (uint64_t)v26, 0xCCCCCCCCCCCCCCCDLL * ((v27 - (_BYTE *)v26) >> 2), 0, 0x41uLL);
  v15 = *((double *)this + 3);
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)*((unsigned int *)this + 232), *((float *)this + 227), v15, 0, (float **)&v24);
  v16 = *((double *)this + 3);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)*((unsigned int *)this + 233), *((float *)this + 228), v16, 0, &v22);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * ((v25 - (_BYTE *)v24) >> 2), 1, &v20);
  DspLib::Biquad::Design::allpassFromPoles((uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v23 - (_BYTE *)v22) >> 2), 1, &v18);
  v17 = (vDSP_Length *)((char *)this + 752);
  DspLib::Biquad::Filter::setNumberOfStages(v17, v3 + (v2 >> 1));
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v17, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * ((v21 - (_BYTE *)v20) >> 2), 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v17, (uint64_t)v18, 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)v18) >> 2), v2 >> 1, 0x41uLL);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_1B60D4678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);
  v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(_QWORD *)(v28 - 144) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(v28 - 128);
  if (v31)
  {
    *(_QWORD *)(v28 - 120) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v28 - 104);
  if (v32)
  {
    *(_QWORD *)(v28 - 96) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::VirtualBass::Algorithm::multiRateDownsample(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  const void **v22;
  uint64_t v23;
  unint64_t v24;
  const void *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if (*(_DWORD *)(a1 + 1720))
  {
    *(_DWORD *)(a1 + 1724) = 0;
    v6 = a1 + 1648;
    std::vector<float>::resize(a1 + 1648, (uint64_t)(*(_QWORD *)(a1 + 1664) - *(_QWORD *)(a1 + 1648)) >> 2);
    v7 = (uint64_t *)(v6 + 24 * *(unsigned int *)(a1 + 1724));
    v8 = *v7;
    v9 = *(unsigned int **)(a1 + 1552);
    v28 = (v7[1] - *v7) >> 2;
    v29 = v8;
    v26 = &v29;
    v27 = 1;
    v24 = a3;
    v25 = a2;
    v22 = &v25;
    v23 = 1;
    DspLib::DownSampler::process(v9, &v22, &v26);
    std::vector<float>::resize(v6 + 24 * *(unsigned int *)(a1 + 1724), v28);
    **(_QWORD **)(a1 + 1576) = a3;
    result = *(unsigned int *)(a1 + 1724);
    if (*(_DWORD *)(a1 + 1720) >= 2u)
    {
      v11 = 8;
      v12 = 1;
      do
      {
        v13 = (uint64_t *)(v6 + 24 * ((_DWORD)result == 0));
        v14 = *v13;
        v15 = (v13[1] - *v13) >> 2;
        v16 = (unsigned int *)(*(_QWORD *)(a1 + 1552) + v11);
        v17 = (const void **)(v6 + 24 * result);
        v18 = *v17;
        v19 = ((_BYTE *)v17[1] - (_BYTE *)*v17) >> 2;
        v28 = v15;
        v29 = v14;
        v26 = &v29;
        v27 = 1;
        v24 = v19;
        v25 = v18;
        v22 = &v25;
        v23 = 1;
        DspLib::DownSampler::process(v16, &v22, &v26);
        std::vector<float>::resize(v6 + 24 * (*(_DWORD *)(a1 + 1724) == 0), v28);
        v20 = *(unsigned int *)(a1 + 1724);
        *(_QWORD *)(*(_QWORD *)(a1 + 1576) + v11) = (uint64_t)(*(_QWORD *)(v6 + 24 * v20 + 8)
                                                            - *(_QWORD *)(v6 + 24 * v20)) >> 2;
        result = v20 == 0;
        *(_DWORD *)(a1 + 1724) = result;
        ++v12;
        v11 += 8;
      }
      while (v12 < *(unsigned int *)(a1 + 1720));
    }
  }
  else
  {
    v21 = (void **)(a1 + 1648);
    std::vector<float>::resize(a1 + 1648, a3);
    if (a3)
      memmove(*v21, a2, 4 * a3);
    return 0;
  }
  return result;
}

void DspLib::VirtualBass::Algorithm::multiRateUpsample(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_DWORD *)(a1 + 1720);
  if (v4)
  {
    v6 = (v4 - 1);
    if ((_DWORD)v6)
    {
      v7 = a1 + 1648;
      v8 = 8 * v6;
      v9 = 72 * v6;
      v10 = v6 - 1;
      v11 = *(_DWORD *)(a1 + 1724);
      do
      {
        std::vector<float>::resize(v7 + 24 * (v11 == 0), *(_QWORD *)(*(_QWORD *)(a1 + 1576) + v8));
        v12 = (uint64_t *)(v7 + 24 * (*(_DWORD *)(a1 + 1724) == 0));
        v13 = *v12;
        v14 = (v12[1] - *v12) >> 2;
        v15 = (unsigned int *)(*(_QWORD *)(a1 + 1528) + v8);
        v16 = (uint64_t *)(v7 + 24 * *(unsigned int *)(a1 + 1724));
        v17 = *v16;
        v18 = (v16[1] - *v16) >> 2;
        v34 = v17;
        v35 = v13;
        v31 = &v34;
        v32 = 1;
        v33 = v18;
        v28 = &v35;
        v29 = 1;
        v30 = v14;
        DspLib::UpSampler::process(v15, &v31, &v28);
        DspLib::Biquad::Filter::process((_QWORD *)(*(_QWORD *)(a1 + 1624) + v9), v13, v14, v13, (float **)v14);
        v11 = *(_DWORD *)(a1 + 1724) == 0;
        *(_DWORD *)(a1 + 1724) = v11;
        v8 -= 8;
        v9 -= 72;
      }
      while ((_DWORD)v10--);
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 1724);
    }
    v21 = **(_QWORD **)(a1 + 1576);
    v22 = *a4;
    a4[1] = v21;
    v23 = *(unsigned int **)(a1 + 1528);
    v24 = a1 + 24 * v11;
    v25 = *(_QWORD *)(v24 + 1648);
    v26 = (*(_QWORD *)(v24 + 1656) - v25) >> 2;
    v34 = v25;
    v35 = v22;
    v31 = &v34;
    v32 = 1;
    v33 = v26;
    v28 = &v35;
    v29 = 1;
    v30 = v21;
    DspLib::UpSampler::process(v23, &v31, &v28);
    DspLib::Biquad::Filter::process(*(_QWORD **)(a1 + 1624), *a4, a4[1], *a4, (float **)a4[1]);
  }
  else
  {
    v20 = a4[1];
    if (v20)
      memmove((void *)*a4, a2, 4 * v20);
  }
}

void DspLib::VirtualBass::Algorithm::processBlock(DspLib::VirtualBass::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t cycle_count;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *const *v9;
  size_t v10;
  uint64_t v11;
  float **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  _QWORD *v17;
  float **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float *const *v22;
  size_t v23;
  uint64_t v24;
  float *v25;
  const void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t i;
  float v30;
  unint64_t v31;
  uint64_t v32;
  float **v33;
  size_t v34;
  float **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  float *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t j;
  uint64_t v46;
  unint64_t v47;
  unint64_t k;
  const float *v49;
  char *v50;
  uint64_t v51;
  float *v52;
  _QWORD *v53;
  float **v54;
  const float *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t m;
  uint64_t v62;
  unint64_t v63;
  float v64;
  unint64_t v65;
  float *v66;
  void *v67;
  char *v68;
  _QWORD v69[2];
  uint64_t v70;
  const float *v71;
  float *v72;
  uint64_t v73;
  _QWORD *v74;
  float *v75;
  uint64_t v76;
  float **v77;
  DspLibBuffer *v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83[3];
  _QWORD v84[3];
  float **v85[3];
  _QWORD v86[3];
  uint64_t v87[3];
  const float *v88;
  _QWORD v89[3];

  v78 = a3;
  v89[1] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 8))
  {
    v68 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibVirtualBass.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v68, 552);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v73 = (uint64_t)this + 320;
  std::vector<float>::resize((uint64_t)this + 320, cycle_count);
  v74 = v69;
  MEMORY[0x1E0C80A78](v6);
  v9 = (float *const *)((char *)v69 - v8);
  if (v7 >= 0x200)
    v10 = 512;
  else
    v10 = v7;
  bzero((char *)v69 - v8, v10);
  v12 = (float **)*((_QWORD *)this + 28);
  v13 = *((_QWORD *)this + 29) - (_QWORD)v12;
  v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
  if (v13)
  {
    v15 = 0;
    do
    {
      v16 = *v12;
      v12 += 3;
      v9[v15++] = v16;
    }
    while (v14 > v15);
  }
  v76 = v14;
  v18 = (float **)*((_QWORD *)this + 31);
  v17 = (_QWORD *)*((_QWORD *)this + 32);
  v19 = 0xAAAAAAAAAAAAAAABLL * ((float **)v17 - v18);
  MEMORY[0x1E0C80A78](v11);
  v22 = (float *const *)((char *)v69 - v21);
  if (v20 >= 0x200)
    v23 = 512;
  else
    v23 = v20;
  bzero((char *)v69 - v21, v23);
  if (v17 != v18)
  {
    v24 = 0;
    do
    {
      v25 = *v18;
      v18 += 3;
      v22[v24++] = v25;
    }
    while (v19 > v24);
  }
  v26 = DspLibBuffer::setNumFrames(v78, cycle_count);
  if (*((_DWORD *)this + 3))
  {
    v27 = 0;
    do
    {
      v26 = (const void *)DspLibBuffer::channel(a2, v27);
      if (cycle_count)
        v26 = memmove(v9[v27], v26, 4 * cycle_count);
      ++v27;
    }
    while (v27 < *((unsigned int *)this + 3));
  }
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  if (*((_BYTE *)this + 216))
  {
    v28 = *((unsigned int *)this + 3);
    if (!(_DWORD)v28)
      goto LABEL_74;
    for (i = 0; i < v28; ++i)
    {
      if (cycle_count)
      {
        memmove(v22[i], v9[i], 4 * cycle_count);
        v28 = *((unsigned int *)this + 3);
      }
    }
    if (!v28)
      goto LABEL_74;
  }
  else
  {
    v30 = *((float *)this + 224);
    if (v30 != 1.0)
    {
      v87[0] = (uint64_t)v9;
      v87[1] = v76;
      v87[2] = cycle_count;
      DspLib::multiply(v87, v30);
    }
    v69[1] = v69;
    MEMORY[0x1E0C80A78](v26);
    v33 = (float **)((char *)v69 - v32);
    if (v31 >= 0x200)
      v34 = 512;
    else
      v34 = v31;
    bzero((char *)v69 - v32, v34);
    v35 = (float **)*((_QWORD *)this + 34);
    v36 = *((_QWORD *)this + 35) - (_QWORD)v35;
    v37 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 3);
    if (v36)
    {
      v38 = 0;
      do
      {
        v39 = *v35;
        v35 += 3;
        v33[v38++] = v39;
      }
      while (v37 > v38);
    }
    v86[0] = v9;
    v86[1] = v76;
    v86[2] = cycle_count;
    v77 = v33;
    v85[0] = v33;
    v85[1] = (float **)v37;
    v85[2] = (float **)cycle_count;
    DspLib::Biquad::Filter::process((_QWORD *)this + 49, (uint64_t)v86, v85);
    *(_QWORD *)&v81 = v77;
    *((_QWORD *)&v81 + 1) = v37;
    v82 = cycle_count;
    *(_QWORD *)&v79 = v77;
    *((_QWORD *)&v79 + 1) = v37;
    v80 = cycle_count;
    DspLib::Biquad::Filter::process((_QWORD *)this + 94, (uint64_t)&v81, (float ***)&v79);
    v84[0] = v9;
    v84[1] = v76;
    v84[2] = cycle_count;
    DspLib::sum((uint64_t)v84, *((float **)this + 40), (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2);
    DspLib::Biquad::Filter::process((_QWORD *)this + 58, *((_QWORD *)this + 40), (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2, *((_QWORD *)this + 40), (float **)((uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2));
    v40 = DspLib::VirtualBass::Algorithm::multiRateDownsample((uint64_t)this, *((const void **)this + 40), (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2);
    v41 = v40;
    v42 = *((_DWORD *)this + 55);
    if (!v42)
    {
      v43 = (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2;
      *(_QWORD *)&v81 = *((_QWORD *)this + 40);
      *((_QWORD *)&v81 + 1) = v43;
      DspLib::VirtualBass::Algorithm::multiRateUpsample((uint64_t)this, *((const void **)this + 3 * v40 + 206), (uint64_t)(*((_QWORD *)this + 3 * v40 + 207) - *((_QWORD *)this + 3 * v40 + 206)) >> 2, (uint64_t *)&v81);
      std::vector<float>::resize(v73, *((unint64_t *)&v81 + 1));
      v44 = *((unsigned int *)this + 3);
      if ((_DWORD)v44)
      {
        for (j = 0; j < v44; ++j)
        {
          if (cycle_count)
          {
            memmove(v22[j], v9[j], 4 * cycle_count);
            v44 = *((unsigned int *)this + 3);
          }
        }
      }
      v42 = *((_DWORD *)this + 55);
    }
    if (v42 == 2)
    {
      v46 = (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2;
      *(_QWORD *)&v81 = *((_QWORD *)this + 40);
      *((_QWORD *)&v81 + 1) = v46;
      DspLib::VirtualBass::Algorithm::multiRateUpsample((uint64_t)this, *((const void **)this + 3 * v41 + 206), (uint64_t)(*((_QWORD *)this + 3 * v41 + 207) - *((_QWORD *)this + 3 * v41 + 206)) >> 2, (uint64_t *)&v81);
      std::vector<float>::resize(v73, *((unint64_t *)&v81 + 1));
      v47 = *((unsigned int *)this + 3);
      if ((_DWORD)v47)
      {
        for (k = 0; k < v47; ++k)
        {
          if (cycle_count)
          {
            memmove(v22[k], *((const void **)this + 40), 4 * cycle_count);
            v47 = *((unsigned int *)this + 3);
          }
        }
      }
    }
    v49 = (const float *)*((_QWORD *)this + 37);
    v50 = (char *)this + 24 * v41;
    v51 = *((_QWORD *)v50 + 206);
    v70 = (*((_QWORD *)v50 + 207) - v51) >> 2;
    v71 = v49;
    DspLib::Biquad::Filter::process((_QWORD *)this + 103, v51, v70, (uint64_t)v49, (float **)v70);
    v52 = (float *)*((_QWORD *)this + 43);
    v53 = v50 + 1656;
    v54 = (float **)(v50 + 1648);
    v55 = (const float *)*((_QWORD *)v50 + 206);
    v56 = (uint64_t)(*((_QWORD *)v50 + 207) - (_QWORD)v55) >> 2;
    v75 = (float *)*((_QWORD *)this + 46);
    v57 = *((unsigned __int8 *)this + 218);
    v72 = v52;
    if (v57)
    {
      DspLib::VirtualBass::PeakFollower::process((uint64_t)this + 1340, v55, v56, v52);
      DspLib::clip(v72, v56, v75, *(float *)(*((_QWORD *)this + 6) + 56), 1000.0);
      DspLib::svdiv(v75, v56, 1.0);
      DspLib::multiply(*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, v75);
      DspLib::clip(*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, -1.2, 1.2);
      v55 = *v54;
      v58 = (uint64_t)(*v53 - (_QWORD)*v54) >> 2;
    }
    else
    {
      v58 = v56;
    }
    v88 = v55;
    v89[0] = v55;
    *(_QWORD *)&v81 = v89;
    *((_QWORD *)&v81 + 1) = 1;
    v82 = v58;
    *(_QWORD *)&v79 = &v88;
    *((_QWORD *)&v79 + 1) = 1;
    v80 = v58;
    DspLib::NonLinearDevice::Algorithm::process((uint64_t)this + 944, &v81, &v79);
    DspLib::Biquad::Filter::process((_QWORD *)this + 67, (uint64_t)*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, (uint64_t)*v54, (float **)((uint64_t)(*v53 - (_QWORD)*v54) >> 2));
    if (*((_BYTE *)this + 218))
    {
      DspLib::VirtualBass::PeakFollower::process((uint64_t)this + 1380, *v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, v75);
      DspLib::clip(v75, v56, *(float *)(*((_QWORD *)this + 6) + 56), 1000.0);
      DspLib::divide(v72, v56, v75, v56, v75);
      DspLib::multiply(*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, v75);
    }
    DspLib::multiply(*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, *((float *)this + 235));
    if (*((_BYTE *)this + 217))
      DspLib::VirtualBass::Compressor::process((uint64_t)this + 1424, *v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, *v54);
    DspLib::Biquad::Filter::process((_QWORD *)this + 76, (uint64_t)*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, (uint64_t)*v54, (float **)((uint64_t)(*v53 - (_QWORD)*v54) >> 2));
    if (*((_DWORD *)this + 55) == 3)
    {
      v59 = (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2;
      *(_QWORD *)&v81 = *((_QWORD *)this + 40);
      *((_QWORD *)&v81 + 1) = v59;
      DspLib::VirtualBass::Algorithm::multiRateUpsample((uint64_t)this, *v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, (uint64_t *)&v81);
      std::vector<float>::resize(v73, *((unint64_t *)&v81 + 1));
      v60 = *((unsigned int *)this + 3);
      if ((_DWORD)v60)
      {
        for (m = 0; m < v60; ++m)
        {
          if (cycle_count)
          {
            memmove(v22[m], *((const void **)this + 40), 4 * cycle_count);
            v60 = *((unsigned int *)this + 3);
          }
        }
      }
    }
    DspLib::add(*v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, v71);
    if (*((_DWORD *)this + 55) == 1)
    {
      v62 = (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2;
      *(_QWORD *)&v81 = *((_QWORD *)this + 40);
      *((_QWORD *)&v81 + 1) = v62;
      DspLib::VirtualBass::Algorithm::multiRateUpsample((uint64_t)this, *v54, (uint64_t)(*v53 - (_QWORD)*v54) >> 2, (uint64_t *)&v81);
      std::vector<float>::resize(v73, *((unint64_t *)&v81 + 1));
      if (*((_DWORD *)this + 3))
      {
        v63 = 0;
        do
        {
          DspLib::add(*((const float **)this + 40), (uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2, v77[v63], cycle_count, v22[v63]);
          ++v63;
        }
        while (v63 < *((unsigned int *)this + 3));
      }
    }
    v64 = *((float *)this + 225);
    if (v64 != 1.0)
    {
      v83[0] = (uint64_t)v22;
      v83[1] = v19;
      v83[2] = cycle_count;
      DspLib::multiply(v83, v64);
    }
    if (!*((_DWORD *)this + 3))
      goto LABEL_74;
  }
  v65 = 0;
  do
  {
    v66 = v22[v65];
    v67 = (void *)DspLibBuffer::channel(v78, v65);
    if (cycle_count)
      memmove(v67, v66, 4 * cycle_count);
    ++v65;
  }
  while (v65 < *((unsigned int *)this + 3));
LABEL_74:
  if (*((_BYTE *)this + 40))
  {
    DspLib::CPUMeasure::stop((DspLib::VirtualBass::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v81, v9, cycle_count, v76);
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 212) + 168))(*((_QWORD *)this + 212), &v81);
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v79, v22, cycle_count, v19);
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 213) + 168))(*((_QWORD *)this + 213), &v79);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v79);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v81);
  }
}

void sub_1B60D5448(_Unwind_Exception *a1)
{
  uint64_t v1;

  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 + 88));
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 + 184));
  _Unwind_Resume(a1);
}

float DspLib::VirtualBass::PeakFollower::process(uint64_t a1, const float *a2, vDSP_Length __N, float *a4)
{
  float result;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;

  DspLib::abs(a2, __N, a4);
  if (__N)
  {
    v8 = 0;
    result = 1.0;
    do
    {
      v9 = a4[v8];
      v11 = *(float *)(a1 + 24);
      v10 = *(float *)(a1 + 28);
      if (v9 <= v11)
      {
        v12 = *(float *)(a1 + 4);
        if (v9 < v11)
        {
          v13 = *(_DWORD *)(a1 + 36);
          if (*(float *)(a1 + 16) > (float)v13)
          {
            *(_DWORD *)(a1 + 36) = v13 + 1;
            v12 = 1.0;
            if (v9 >= (float)(v11 * 0.9))
              *(_DWORD *)(a1 + 36) = 0;
          }
        }
      }
      else
      {
        v12 = *(float *)a1;
        *(_DWORD *)(a1 + 36) = 0;
        if (v11 > *(float *)(a1 + 32))
          v10 = v12;
      }
      v14 = (float)(v9 * (float)(1.0 - v12)) + (float)(v12 * v11);
      *(float *)(a1 + 24) = v14;
      v15 = (float)((float)(1.0 - v10) * v14) + (float)(v10 * *(float *)(a1 + 32));
      *(float *)(a1 + 32) = v15;
      a4[v8++] = v15;
    }
    while (__N > v8);
  }
  return result;
}

void DspLib::VirtualBass::Compressor::process(uint64_t a1, const float *a2, vDSP_Length __N, float *a4)
{
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v8 = *(float **)(a1 + 40);
  DspLib::abs(a2, __N, v8);
  DspLib::add(v8, __N, 0.000001);
  DspLib::amp2dB(v8, __N, 1.0);
  if (__N)
  {
    v9 = 0;
    do
    {
      v10 = v8[v9];
      v11 = v10 - *(float *)a1;
      v12 = *(float *)(a1 + 20);
      v13 = 0.0;
      if (v11 > v12)
        v13 = v10 - (float)(*(float *)a1 + (float)(v11 * *(float *)(a1 + 28)));
      if (fabsf(v11) <= v12)
        v13 = *(float *)(a1 + 24)
            * (float)((float)(v11 + v12) * (float)-(float)(*(float *)(a1 + 16) * (float)(v11 + v12)));
      v8[v9++] = v13 - *(float *)(a1 + 8);
    }
    while (__N > v9);
  }
  DspLib::VirtualBass::PeakFollower::process(a1 + 64, v8, __N, v8);
  DspLib::negate(v8, __N);
  DspLib::dB2Amp(v8, __N);
  DspLib::multiply(a2, __N, v8, __N, a4);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void DspLib::VirtualBass::Algorithm::~Algorithm(DspLib::VirtualBass::Algorithm *this)
{
  DspLib::VirtualBass::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;

  *(_QWORD *)this = &off_1E69C40D8;
  v2 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  for (i = 0; i != -48; i -= 24)
  {
    v5 = *(void **)((char *)this + i + 1672);
    if (v5)
    {
      *(_QWORD *)((char *)this + i + 1680) = v5;
      operator delete(v5);
    }
  }
  v23 = (void **)((char *)this + 1624);
  std::vector<DspLib::Biquad::Filter>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)((char *)this + 1600);
  std::vector<DspLib::Biquad::Filter>::__destroy_vector::operator()[abi:ne180100](&v23);
  v6 = (void *)*((_QWORD *)this + 197);
  if (v6)
  {
    *((_QWORD *)this + 198) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 194);
  if (v7)
  {
    *((_QWORD *)this + 195) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 191);
  if (v8)
  {
    *((_QWORD *)this + 192) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 183);
  if (v9)
  {
    *((_QWORD *)this + 184) = v9;
    operator delete(v9);
  }
  *((_QWORD *)this + 118) = off_1E69C46F0;
  v10 = (void *)*((_QWORD *)this + 124);
  if (v10)
  {
    *((_QWORD *)this + 125) = v10;
    operator delete(v10);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 872));
  v11 = (void *)*((_QWORD *)this + 106);
  if (v11)
  {
    *((_QWORD *)this + 107) = v11;
    operator delete(v11);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 800));
  v12 = (void *)*((_QWORD *)this + 97);
  if (v12)
  {
    *((_QWORD *)this + 98) = v12;
    operator delete(v12);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 728));
  v13 = (void *)*((_QWORD *)this + 88);
  if (v13)
  {
    *((_QWORD *)this + 89) = v13;
    operator delete(v13);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 656));
  v14 = (void *)*((_QWORD *)this + 79);
  if (v14)
  {
    *((_QWORD *)this + 80) = v14;
    operator delete(v14);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 584));
  v15 = (void *)*((_QWORD *)this + 70);
  if (v15)
  {
    *((_QWORD *)this + 71) = v15;
    operator delete(v15);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 512));
  v16 = (void *)*((_QWORD *)this + 61);
  if (v16)
  {
    *((_QWORD *)this + 62) = v16;
    operator delete(v16);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::VirtualBass::Algorithm *)((char *)this + 440));
  v17 = (void *)*((_QWORD *)this + 52);
  if (v17)
  {
    *((_QWORD *)this + 53) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 46);
  if (v18)
  {
    *((_QWORD *)this + 47) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 43);
  if (v19)
  {
    *((_QWORD *)this + 44) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 40);
  if (v20)
  {
    *((_QWORD *)this + 41) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 37);
  if (v21)
  {
    *((_QWORD *)this + 38) = v21;
    operator delete(v21);
  }
  v23 = (void **)((char *)this + 272);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)((char *)this + 248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)((char *)this + 224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v23);
  *(_QWORD *)this = off_1E69C46F0;
  v22 = (void *)*((_QWORD *)this + 6);
  if (v22)
  {
    *((_QWORD *)this + 7) = v22;
    operator delete(v22);
  }
}

uint64_t DspLib::VirtualBass::Algorithm::numStatus(DspLib::VirtualBass::Algorithm *this)
{
  return 67;
}

void std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(_QWORD *a1)
{
  void *v2;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 6));
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
}

uint64_t std::vector<DspLib::Biquad::Filter>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::Filter>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>,std::reverse_iterator<DspLib::Biquad::Filter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 72;
    std::construct_at[abi:ne180100]<DspLib::Biquad::Filter,DspLib::Biquad::Filter,DspLib::Biquad::Filter*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Biquad::Filter,DspLib::Biquad::Filter,DspLib::Biquad::Filter*>(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  return a1;
}

void sub_1B60D59BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<DspLib::Biquad::Filter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>((_QWORD *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<DspLib::Biquad::Filter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        std::__destroy_at[abi:ne180100]<DspLib::Biquad::Filter,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double DspLib::ControlFreak::Algorithm::Algorithm(DspLib::ControlFreak::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::ControlFreak::Parameters::kDefault, 0x1BuLL, (uint64_t)&DspLib::ControlFreak::Parameters::kMinimum, 27, (uint64_t)&DspLib::ControlFreak::Parameters::kMaximum, 27);
  *(_QWORD *)v1 = &off_1E69C41E8;
  *(_DWORD *)(v1 + 244) = 0;
  *(_WORD *)(v1 + 248) = 0;
  *(_BYTE *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 240) = 0;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_QWORD *)(v1 + 357) = 0;
  *(_OWORD *)(v1 + 368) = xmmword_1B662A860;
  *(_DWORD *)(v1 + 384) = 0x40000000;
  *(_QWORD *)(v1 + 392) = 0;
  *(_DWORD *)(v1 + 400) = 0;
  *(_BYTE *)(v1 + 404) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_BYTE *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 432) = 897988541;
  *(_QWORD *)(v1 + 440) = 0;
  *(_QWORD *)(v1 + 448) = 0;
  *(_BYTE *)(v1 + 456) = 0;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_OWORD *)(v1 + 544) = 0u;
  *(_BYTE *)(v1 + 560) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_BYTE *)(v1 + 664) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_OWORD *)(v1 + 720) = 0u;
  *(_OWORD *)(v1 + 736) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 764) = 0u;
  *(_QWORD *)(v1 + 784) = 1;
  *(_QWORD *)(v1 + 856) = 0;
  *(_OWORD *)(v1 + 840) = 0u;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_DWORD *)(v1 + 864) = 1;
  *(_QWORD *)(v1 + 952) = 0;
  *(_QWORD *)(v1 + 944) = 0;
  *(_QWORD *)(v1 + 960) = 0;
  *(_DWORD *)(v1 + 936) = 0;
  *(_OWORD *)(v1 + 920) = 0u;
  *(_OWORD *)(v1 + 904) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_QWORD *)(v1 + 968) = 1;
  *(_DWORD *)(v1 + 976) = 1;
  *(_QWORD *)(v1 + 1064) = 0;
  *(_QWORD *)(v1 + 1056) = 0;
  *(_QWORD *)(v1 + 1072) = 0;
  *(_DWORD *)(v1 + 1048) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 1000) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_DWORD *)(v1 + 1080) = 1;
  *(_DWORD *)(v1 + 1152) = 0;
  *(_OWORD *)(v1 + 1136) = 0u;
  *(_OWORD *)(v1 + 1120) = 0u;
  *(_OWORD *)(v1 + 1104) = 0u;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_QWORD *)(v1 + 1236) = 0;
  *(_OWORD *)(v1 + 1220) = 0u;
  *(_OWORD *)(v1 + 1204) = 0u;
  *(_OWORD *)(v1 + 1188) = 0u;
  *(_QWORD *)(v1 + 1288) = 0;
  *(_QWORD *)(v1 + 1280) = 0;
  *(_DWORD *)(v1 + 1296) = 0;
  *(_QWORD *)(v1 + 1168) = 0;
  *(_QWORD *)(v1 + 1160) = 0;
  *(_BYTE *)(v1 + 1184) = 0;
  *(_QWORD *)(v1 + 1176) = 0;
  *(_QWORD *)(v1 + 1256) = 0;
  *(_QWORD *)(v1 + 1248) = 0;
  *(_BYTE *)(v1 + 1272) = 0;
  *(_QWORD *)(v1 + 1264) = 0;
  *(_DWORD *)(v1 + 1300) = 1137180672;
  *(_QWORD *)(v1 + 1400) = 0;
  *(_DWORD *)(v1 + 1408) = 0;
  *(_QWORD *)(v1 + 1424) = 0;
  *(_QWORD *)(v1 + 1416) = 0;
  *(_QWORD *)(v1 + 1432) = 0;
  *(_DWORD *)(v1 + 1336) = 0;
  *(_OWORD *)(v1 + 1304) = 0u;
  *(_OWORD *)(v1 + 1320) = 0u;
  *(_DWORD *)(v1 + 1392) = 0;
  *(_OWORD *)(v1 + 1376) = 0u;
  *(_OWORD *)(v1 + 1360) = 0u;
  *(_OWORD *)(v1 + 1344) = 0u;
  *(_DWORD *)(v1 + 1440) = 730643660;
  *(_BYTE *)(v1 + 1444) = 0;
  *(_QWORD *)(v1 + 1489) = 0;
  *(_QWORD *)(v1 + 1484) = 0;
  *(_BYTE *)(v1 + 1480) = 0;
  *(_OWORD *)(v1 + 1448) = 0u;
  *(_OWORD *)(v1 + 1464) = 0u;
  *(_OWORD *)(v1 + 1500) = xmmword_1B6627BD0;
  *(_BYTE *)(v1 + 1516) = 1;
  *(_DWORD *)(v1 + 1520) = 0;
  *(_QWORD *)(v1 + 1608) = 0;
  *(_OWORD *)(v1 + 1576) = 0u;
  *(_OWORD *)(v1 + 1592) = 0u;
  *(_OWORD *)(v1 + 1544) = 0u;
  *(_OWORD *)(v1 + 1560) = 0u;
  *(_OWORD *)(v1 + 1528) = 0u;
  result = 7.42284587e-51;
  *(_OWORD *)(v1 + 1616) = xmmword_1B662A870;
  return result;
}

uint64_t DspLib::ControlFreak::Algorithm::initialize(DspLib::ControlFreak::Algorithm *this, int a2, double a3)
{
  uint64_t v4;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4 && *((_DWORD *)this + 3))
  {
    DspLib::FIR::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1528), 1uLL, *((unsigned int *)this + 8));
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 199, *((unsigned int *)this + 3));
    DspLib::EnvelopeProcessor::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1184), 1u);
    DspLib::RMS::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1256), 1u, *((double *)this + 3) / 40.0);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 104, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 114, 1uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 128, 1uLL);
    DspLib::FIRDecimator::setSrcParameters((DspLib::ControlFreak::Algorithm *)((char *)this + 784), 4uLL, *((unsigned int *)this + 8));
    DspLib::FIRDecimator::setCoefficients((uint64_t)this + 784, &DspLib::ControlFreak::kDownSampler4coeffs, 0x20uLL);
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::ControlFreak::Algorithm *)((char *)this + 864), 4, (*((_DWORD *)this + 8) >> 2) + 1);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 216, (uint64_t)&DspLib::ControlFreak::kUpSampler4coeffs, 4uLL);
    *((_QWORD *)this + 121) = 10;
    DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::ControlFreak::Algorithm *)((char *)this + 976), 10, *((_DWORD *)this + 8) / 0xAu + 1);
    DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 244, (uint64_t)&DspLib::ControlFreak::kUpSampler10coeffs, 0xAuLL);
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::ControlFreak::Algorithm *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::ControlFreak::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

void DspLib::ControlFreak::Algorithm::uninitialize(DspLib::ControlFreak::Algorithm *this)
{
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 28) = *((_QWORD *)this + 27);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 104, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 114, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 128, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 141, 0);
  DspLib::EnvelopeProcessor::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1184));
  DspLib::RMS::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1256));
  DspLib::FIR::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 1528));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 199);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 256));
  DspLib::Biquad::Filter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 664));
  *((_BYTE *)this + 416) = 0;
}

void DspLib::ControlFreak::Algorithm::reset(float **this)
{
  float *v2;
  float *v3;
  uint64_t v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;

  DspLib::clear(this[27], this[28] - this[27]);
  *((_DWORD *)this + 376) = 1065353216;
  *((_BYTE *)this + 1516) = 1;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 1480) = 0;
  *((_DWORD *)this + 367) = *((_DWORD *)this + 368);
  *((_BYTE *)this + 1496) = 0;
  *((_DWORD *)this + 371) = *((_DWORD *)this + 372);
  this[182] = 0;
  this[202] = (float *)vdup_n_s32(0x358637BDu);
  *((_DWORD *)this + 406) = 1065353216;
  DspLib::FIR::reset((DspLib::FIR *)(this + 191));
  DspLib::ControlFreak::Algorithm::clearAudioBuffers((DspLib::ControlFreak::Algorithm *)this);
  DspLib::EnvelopeProcessor::reset((DspLib::EnvelopeProcessor *)(this + 148));
  DspLib::FIRDecimator::reset((DspLib::FIRDecimator *)(this + 98));
  v2 = this[114];
  v3 = this[115];
  while (v2 != v3)
  {
    v4 = *((_QWORD *)v2 + 1);
    if (*(_QWORD *)v2 != v4)
      bzero(*(void **)v2, (v4 - *(_QWORD *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    v2 += 6;
  }
  *((_DWORD *)this + 234) = 0;
  *((_DWORD *)this + 243) = 0;
  v5 = this[128];
  v6 = this[129];
  while (v5 != v6)
  {
    v7 = *((_QWORD *)v5 + 1);
    if (*(_QWORD *)v5 != v7)
      bzero(*(void **)v5, (v7 - *(_QWORD *)v5) & 0xFFFFFFFFFFFFFFFCLL);
    v5 += 6;
  }
  *((_DWORD *)this + 262) = 0;
  DspLib::RMS::reset((DspLib::RMS *)(this + 157));
  v8 = this[141];
  v9 = this[142];
  while (v8 != v9)
  {
    v10 = *((_QWORD *)v8 + 1);
    if (*(_QWORD *)v8 != v10)
      bzero(*(void **)v8, (v10 - *(_QWORD *)v8) & 0xFFFFFFFFFFFFFFFCLL);
    v8 += 6;
  }
  *((_DWORD *)this + 288) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(this + 38));
  DspLib::Saturation::SmartSaturation::reset((DspLib::Saturation::SmartSaturation *)(this + 45));
}

void DspLib::ControlFreak::Algorithm::clearAudioBuffers(DspLib::ControlFreak::Algorithm *this)
{
  DspLib::CircularDelay *v2;
  DspLib::CircularDelay *v3;

  v2 = (DspLib::CircularDelay *)*((_QWORD *)this + 199);
  v3 = (DspLib::CircularDelay *)*((_QWORD *)this + 200);
  while (v2 != v3)
  {
    DspLib::CircularDelay::reset(v2);
    v2 = (DspLib::CircularDelay *)((char *)v2 + 32);
  }
  if (*((_BYTE *)this + 416))
    DspLib::Saturation::SmartSaturation::reset((DspLib::ControlFreak::Algorithm *)((char *)this + 360));
}

void DspLib::Saturation::SmartSaturation::reset(DspLib::Saturation::SmartSaturation *this)
{
  DspLib::Saturation::OversampledProcess *v2;

  *(_OWORD *)((char *)this + 60) = xmmword_1B662A880;
  *((_QWORD *)this + 10) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 352));
  DspLib::CircularDelay::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 384));
  DspLib::Biquad::SetupWrapper::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 144));
  DspLib::Biquad::SetupWrapper::reset((DspLib::Saturation::SmartSaturation *)((char *)this + 248));
  v2 = (DspLib::Saturation::OversampledProcess *)*((_QWORD *)this + 47);
  if (v2)
    DspLib::Saturation::OversampledProcess::reset(v2);
}

uint64_t DspLib::ControlFreak::Algorithm::numStatus(DspLib::ControlFreak::Algorithm *this)
{
  return 9;
}

double DspLib::ControlFreak::Algorithm::latencySamples(DspLib::ControlFreak::Algorithm *this)
{
  double v2;
  double v3;
  uint64_t v4;
  char *v6;

  if (!*((_BYTE *)this + 8))
  {
    v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/ControlFreak/dsp/DspLibControlFreak.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v6, 123);
    ++DspLibDebug::mAssertCounter;
  }
  v2 = 0.0;
  v3 = 0.0;
  if (*((_BYTE *)this + 249))
  {
    LODWORD(v3) = *((_DWORD *)this + 380);
    v3 = (double)*(unint64_t *)&v3;
  }
  v4 = *((_QWORD *)this + 92);
  if (v4)
    v2 = (float)(*(float *)(v4 + 24) / (float)*(unsigned int *)(v4 + 16))
       + (float)(*(float *)(v4 + 24) / (float)*(unsigned int *)(v4 + 16));
  return v3 + v2;
}

void DspLib::ControlFreak::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  DspLib *v5;
  float *v6;
  BOOL v7;
  DspLib *isEqual;
  unint64_t v9;
  float *v10;
  char v11;
  DspLib::CircularDelay *v12;
  DspLib::CircularDelay *v13;
  float v14;
  float v15;
  DspLib *v16;
  float v17;
  DspLib *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float **v32;
  size_t v33;
  uint64_t v34;
  float **v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  DspLib *v44;
  float v45;
  double v46;
  float *v47;
  float v48;
  DspLib *v49;
  float *v50;
  float *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    DspLib::ControlFreak::Algorithm::setParameterInputGain((DspLib::ControlFreak::Algorithm *)a1);
    DspLib::ControlFreak::Algorithm::configureInputHPF((DspLib::ControlFreak::Algorithm *)a1);
    v6 = *(float **)(a1 + 48);
    v7 = v6[11] >= 0.5 && *v6 < 0.5;
    *(_BYTE *)(a1 + 249) = v7;
    *(float *)(a1 + 244) = DspLib::dB2Amp(v5, v6[13]);
    v10 = *(float **)(a1 + 48);
    if (v10[18] < 0.5 || *v10 >= 0.5)
    {
      v11 = 0;
    }
    else
    {
      isEqual = (DspLib *)DspLib::isEqual(isEqual, v10[13], 0.0, 1.0e-20);
      v11 = isEqual ^ 1;
      v10 = *(float **)(a1 + 48);
    }
    *(_BYTE *)(a1 + 248) = v11;
    LODWORD(v9) = vcvtad_u64_f64(*(double *)(a1 + 24) * v10[2] / 1000.0);
    *(_DWORD *)(a1 + 1520) = v9;
    if (*(_QWORD *)(a1 + 1560) != v9)
    {
      std::vector<float>::vector(&v50, v9);
      DspLib::makeRaisedCosineWindow(v50, v51 - v50);
      DspLib::FIR::setCoefficients((_QWORD *)(a1 + 1528), v50, v51 - v50);
      DspLib::FIR::reset((DspLib::FIR *)(a1 + 1528));
      isEqual = (DspLib *)v50;
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
    }
    v12 = *(DspLib::CircularDelay **)(a1 + 1592);
    v13 = *(DspLib::CircularDelay **)(a1 + 1600);
    while (v12 != v13)
    {
      DspLib::CircularDelay::setLength(v12, *(unsigned int *)(a1 + 1520));
      v12 = (DspLib::CircularDelay *)((char *)v12 + 32);
    }
    v14 = *(float *)(a1 + 1468);
    v15 = DspLib::dB2Amp(isEqual, *(float *)(*(_QWORD *)(a1 + 48) + 16) + -0.00002);
    if (!DspLib::isEqual(v16, v14, v15, 1.0e-20) && *(float *)(*(_QWORD *)(a1 + 48) + 80) == 0.0)
    {
      v17 = DspLib::maxv(*(const float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2);
      if (!DspLib::isEqual(v18, v17, 0.0, 1.0e-20))
        DspLib::FIR::scaleHistory((DspLib::FIR *)(a1 + 1528), (float)(v15 / v17) / (float)(v14 / v17));
    }
    DspLib::ControlFreak::Algorithm::RampedValue::set((DspLib::ControlFreak::Algorithm::RampedValue *)(a1 + 1468), v15, vcvtad_u64_f64(*(double *)(a1 + 24) * *(float *)(*(_QWORD *)(a1 + 48) + 80) * 0.00100000005));
    v19 = (uint64_t *)(a1 + 1128);
    if (*(float *)(*(_QWORD *)(a1 + 48) + 32) >= 0.5)
    {
      if (*(_QWORD *)(a1 + 1136) == *(_QWORD *)(a1 + 1128))
      {
        std::vector<std::vector<float>>::resize(v19, *(unsigned int *)(a1 + 12));
        DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 1080), 4, *(_DWORD *)(a1 + 32));
        DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 1080), (uint64_t)&DspLib::kTruePeakFIRcoefficients, 0x30uLL);
      }
    }
    else
    {
      std::vector<std::vector<float>>::resize(v19, 0);
    }
    v20 = *(_QWORD *)(a1 + 216);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = ((*(_DWORD *)(a1 + 1520) + vcvtad_u64_f64(*(double *)(a1 + 24) * *(float *)(v21 + 12) / 1000.0)) & 0xFFFFFFFE)
        + 2;
    *(_DWORD *)(a1 + 776) = v22;
    v23 = *(_DWORD *)(a1 + 32) + v22 - 1;
    if (v23 != (*(_QWORD *)(a1 + 224) - v20) >> 2)
    {
      std::vector<float>::resize(a1 + 216, v23);
      DspLib::clear(*(float **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2);
      LODWORD(v25) = *(_DWORD *)(a1 + 1520);
      if (v25 <= 1)
        v25 = 1;
      else
        v25 = v25;
      if (*(_DWORD *)(a1 + 12) == 1)
        v26 = v25;
      else
        v26 = 4 * (((v25 - 1) >> 2) + 1);
      MEMORY[0x1E0C80A78](v24);
      v28 = (float *)((char *)&v50 - v27);
      v29 = *(unsigned int *)(a1 + 12);
      MEMORY[0x1E0C80A78](v30);
      v32 = (float **)((char *)&v50 - ((v31 + 15) & 0xFFFFFFFF0));
      if (v31 >= 0x200)
        v33 = 512;
      else
        v33 = v31;
      bzero((char *)&v50 - ((v31 + 15) & 0xFFFFFFFF0), v33);
      if ((_DWORD)v29)
      {
        v34 = v29;
        v35 = v32;
        do
        {
          *v35++ = v28;
          v28 += v26;
          --v34;
        }
        while (v34);
        v36 = *(unsigned int *)(a1 + 1520);
        v37 = 0;
        v38 = 0;
        do
        {
          DspLib::CircularDelay::read((const void **)(*(_QWORD *)(a1 + 1592) + v37), *(unsigned int *)(a1 + 1520), (char *)v32[v38++], v36);
          v37 += 32;
        }
        while (v38 < *(unsigned int *)(a1 + 12));
      }
      else
      {
        v36 = *(unsigned int *)(a1 + 1520);
      }
      v39 = *v32;
      DspLib::abs(*v32, v36);
      if (*(_DWORD *)(a1 + 12) >= 2u)
      {
        v40 = 1;
        do
          DspLib::vmaxmg(v39, v36, v32[v40++]);
        while (v40 < *(unsigned int *)(a1 + 12));
      }
      v41 = *(char **)(a1 + 216);
      v42 = *(unsigned int *)(a1 + 1520);
      if ((_DWORD)v42)
      {
        memmove(&v41[4 * *(unsigned int *)(a1 + 776) - 4], v39, 4 * v42);
        v43 = *(unsigned int *)(a1 + 1520);
      }
      else
      {
        v43 = 0;
      }
      if (4 * *(unsigned int *)(a1 + 776) != 4)
        memmove(v41, &v41[4 * v43], 4 * *(unsigned int *)(a1 + 776) - 4);
      v21 = *(_QWORD *)(a1 + 48);
    }
    DspLib::RMS::setParameters(a1 + 1256, 1, *(float *)(v21 + 28));
    v45 = DspLib::dB2Amp(v44, *(float *)(*(_QWORD *)(a1 + 48) + 64) * 0.5);
    *(float *)(a1 + 1448) = v45;
    *(float *)(a1 + 1452) = 1.0 / v45;
    v46 = *(double *)(a1 + 24);
    v47 = *(float **)(a1 + 48);
    *(_DWORD *)(a1 + 1464) = vcvtad_u64_f64(v46 * 0.25 / 10.0 * v47[19] / 1000.0);
    v48 = v46;
    *(float *)(a1 + 1508) = 1.0 - expf(-1.0 / (float)((float)(v47[14] * v48) / 1000.0));
    *(float *)(a1 + 1512) = 1.0 - expf(-1.0 / (float)((float)(v47[17] * v48) / 1000.0));
    *(float *)(a1 + 1500) = DspLib::dB2Amp(v49, -v47[21]);
    DspLib::ControlFreak::Algorithm::configureSaturation((DspLib::ControlFreak::Algorithm *)a1);
  }
}

void sub_1B60D69A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::ControlFreak::Algorithm::setParameterInputGain(DspLib::ControlFreak::Algorithm *this)
{
  double v2;
  float *v3;
  float v4;
  float v5;

  v2 = *((double *)this + 3);
  v3 = (float *)*((_QWORD *)this + 6);
  v4 = v3[20];
  v5 = 1.0;
  if (v3[6] >= 0.5)
    v5 = DspLib::dB2Amp(this, v3[15]);
  DspLib::ControlFreak::Algorithm::RampedValue::set((DspLib::ControlFreak::Algorithm *)((char *)this + 1484), v5, vcvtad_u64_f64(v2 * v4 * 0.00100000005));
}

void DspLib::ControlFreak::Algorithm::configureInputHPF(DspLib::ControlFreak::Algorithm *this)
{
  char *v1;

  v1 = (char *)this + 256;
  if (*(float *)(*((_QWORD *)this + 6) + 36) >= 0.5)
  {
    DspLib::Biquad::ParametricFilter::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 256), *((unsigned int *)this + 3), *((double *)this + 3), 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v1, ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 6) + 40) << 32) | 9, (double *)0x3F3504F300000000, 0, 0x41uLL);
  }
  else
  {
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 256));
  }
}

void DspLib::ControlFreak::Algorithm::RampedValue::set(DspLib::ControlFreak::Algorithm::RampedValue *this, float a2, unsigned int a3)
{
  _BOOL8 isEqual;
  float v6;
  float v7;
  DspLib *v8;

  *((float *)this + 1) = a2;
  isEqual = DspLib::isEqual(this, a2, *(float *)this, 1.0e-20);
  if (!isEqual)
  {
    v6 = *((float *)this + 1);
    if (a3)
    {
      v7 = DspLib::amp2dBSafe((DspLib *)isEqual, v6 / *(float *)this, 0.000001);
      *((float *)this + 2) = DspLib::dB2Amp(v8, v7 / (float)a3);
      *((_BYTE *)this + 12) = 1;
    }
    else
    {
      *(float *)this = v6;
    }
  }
}

void DspLib::ControlFreak::Algorithm::configureSaturation(DspLib::ControlFreak::Algorithm *this)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  float32x2x2_t v8;
  float *v9;
  unint64_t v10;
  float32x2x2_t v11;
  __int128 v12;

  v2 = *((_QWORD *)this + 6);
  if (*(float *)(v2 + 88) < 0.5 || *(float *)v2 >= 0.5)
  {
    DspLib::Biquad::Filter::uninitialize((DspLib::ControlFreak::Algorithm *)((char *)this + 664));
    *((_BYTE *)this + 416) = 0;
  }
  else
  {
    v3 = vcvtas_u32_f32(*(float *)(v2 + 20));
    v4 = v3 != 0;
    v5 = v3 - 2;
    if (v5 > 5)
      v6 = 1183621120;
    else
      v6 = dword_1B662AB5C[v5];
    v7 = llroundf(*(float *)(v2 + 48));
    v8 = *(float32x2x2_t *)(v2 + 92);
    if (!*((_BYTE *)this + 416))
    {
      v11 = *(float32x2x2_t *)(v2 + 92);
      DspLib::Saturation::SmartSaturation::initialize((DspLib::ControlFreak::Algorithm *)((char *)this + 360), *((_DWORD *)this + 3), *((double *)this + 3), *((unsigned int *)this + 8));
      v8 = v11;
    }
    LODWORD(v12) = v7;
    BYTE4(v12) = v4;
    DWORD2(v12) = v6;
    v9 = (float *)&v12 + 3;
    v10 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    vst2_f32(v9, v8);
    DspLib::Saturation::SmartSaturation::configure((uint64_t)this + 360, &v12);
  }
}

void DspLib::ControlFreak::Algorithm::processBlock(DspLib::ControlFreak::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t cycle_count;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float **v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  _QWORD v28[3];
  uint64_t v29[3];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  __int128 v33;
  unint64_t v34;
  uint64_t v35[3];
  _QWORD v36[3];
  __int128 v37;
  unint64_t v38;
  float **v39;
  uint64_t v40;
  unint64_t v41;
  float **v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD v46[3];

  v46[1] = *MEMORY[0x1E0C80C00];
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  if (*((_BYTE *)this + 40))
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
  if (a2 != a3)
    DspLibBuffer::operator=((uint64_t)a3, a2);
  v7 = DspLibBuffer::numChannels(a3);
  MEMORY[0x1E0C80A78](v7);
  v10 = (float **)((char *)&v28[-1] - v9);
  if (v8 >= 0x200)
    v11 = 512;
  else
    v11 = v8;
  bzero((char *)&v28[-1] - v9, v11);
  if (DspLibBuffer::numChannels(a3))
  {
    v12 = 0;
    do
    {
      v10[v12] = (float *)DspLibBuffer::channel(a3, v12);
      ++v12;
    }
    while (v12 < DspLibBuffer::numChannels(a3));
  }
  v13 = DspLibBuffer::numChannels(a3);
  v14 = vp::utility::CPU_Profiler::get_cycle_count(a3);
  v15 = v14;
  if (cycle_count)
  {
    MEMORY[0x1E0C80A78](v14);
    v17 = (char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)&v37 = v10;
    *((_QWORD *)&v37 + 1) = v13;
    v38 = v15;
    DspLib::ControlFreak::Algorithm::processInputGain((uint64_t)this, &v37);
    if (*((_BYTE *)this + 256))
    {
      v39 = v10;
      v40 = v13;
      v41 = v15;
      v42 = v10;
      v43 = v13;
      v44 = v15;
      DspLib::Biquad::Filter::process((_QWORD *)this + 32, (uint64_t)&v42, &v39);
    }
    if (*((_BYTE *)this + 40))
    {
      v36[0] = v10;
      v36[1] = v13;
      v36[2] = v15;
      v18 = DspLib::maxMagnitude(v36);
      if (*((float *)this + 404) >= v18)
        v18 = *((float *)this + 404);
      *((float *)this + 404) = v18;
    }
    if (*((_BYTE *)this + 416))
    {
      v35[0] = (uint64_t)v10;
      v35[1] = v13;
      v35[2] = v15;
      DspLib::Saturation::SmartSaturation::process((uint64_t)this + 360, v35);
    }
    if (!*((_BYTE *)this + 249))
      goto LABEL_28;
    *(_QWORD *)&v33 = v10;
    *((_QWORD *)&v33 + 1) = v13;
    v34 = v15;
    if (DspLib::ControlFreak::Algorithm::processPeakSampleDetector((uint64_t)this, &v33, (float *)v17, cycle_count) > *((float *)this + 367)
      || *((_BYTE *)this + 1480))
    {
      *((_BYTE *)this + 240) = 0;
    }
    else if (*((_BYTE *)this + 240))
    {
LABEL_25:
      if (*((_DWORD *)this + 3))
      {
        v19 = 0;
        v20 = 0;
        do
        {
          DspLib::CircularDelay::process((const void **)(*((_QWORD *)this + 199) + v19), (char *)v10[v20], v15, (char *)v10[v20], v15);
          ++v20;
          v19 += 32;
        }
        while (v20 < *((unsigned int *)this + 3));
      }
LABEL_28:
      v21 = (float *)*((_QWORD *)this + 6);
      if (v21[1] >= 0.5 && *((_BYTE *)this + 249))
      {
        v31[0] = v10;
        v31[1] = v13;
        v31[2] = v15;
        DspLib::ControlFreak::Algorithm::outputModulator((uint64_t)this, v17, cycle_count, (uint64_t)v31);
      }
      else
      {
        if (!*((_BYTE *)this + 240) && *v21 < 0.5 && *((_BYTE *)this + 249))
        {
          v30[0] = v10;
          v30[1] = v13;
          v30[2] = v15;
          DspLib::multiply(v30, (const float *)v17);
        }
        if (*((_BYTE *)this + 248))
        {
          v29[0] = (uint64_t)v10;
          v29[1] = v13;
          v29[2] = v15;
          DspLib::multiply(v29, *((float *)this + 61));
        }
      }
      if (!*((_BYTE *)this + 240) && *((_BYTE *)this + 249) && DspLib::minv((const float *)v17, cycle_count) > 0.99)
      {
        if (*((_DWORD *)this + 3))
        {
          v23 = 0;
          v24 = 0;
          v25 = 0.0;
          do
          {
            v26 = DspLib::maxMagnitude(*(const float **)(*((_QWORD *)this + 199) + v23), (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 199) + v23 + 8) - *(_QWORD *)(*((_QWORD *)this + 199) + v23)) >> 2);
            if (v25 < v26)
              v25 = v26;
            ++v24;
            v23 += 32;
          }
          while (v24 < *((unsigned int *)this + 3));
        }
        else
        {
          v25 = 0.0;
        }
        if (v25 <= *((float *)this + 367))
          *((_BYTE *)this + 240) = 1;
      }
      goto LABEL_38;
    }
    DspLib::ControlFreak::Algorithm::computeModulator((uint64_t)this, v17, cycle_count);
    v32[0] = v10;
    v32[1] = v13;
    v32[2] = v15;
    DspLib::ControlFreak::Algorithm::processAutorelease((uint64_t)this, (uint64_t)v32, (float *)v17, cycle_count);
    v45 = v17;
    v46[0] = v17;
    v42 = (float **)v46;
    v43 = 1;
    v44 = cycle_count;
    v39 = (float **)&v45;
    v40 = 1;
    v41 = cycle_count;
    DspLib::FIR::process((uint64_t)this + 1528, &v42, &v39);
    goto LABEL_25;
  }
LABEL_38:
  if (*((_BYTE *)this + 40))
  {
    DspLib::CPUMeasure::stop((DspLib::ControlFreak::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
    if (*(float *)(*((_QWORD *)this + 6) + 4) < 0.5)
    {
      v28[0] = v10;
      v28[1] = v13;
      v28[2] = v15;
      v22 = DspLib::maxMagnitude(v28);
      if (*((float *)this + 405) >= v22)
        v22 = *((float *)this + 405);
      *((float *)this + 405) = v22;
    }
  }
}

void DspLib::ControlFreak::Algorithm::processInputGain(uint64_t a1, __int128 *a2)
{
  float *v3;
  uint64_t v4;
  const float *v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (float *)(a1 + 1484);
  if (*(_BYTE *)(a1 + 1496))
  {
    MEMORY[0x1E0C80A78](a1);
    v5 = (const float *)((char *)&v7 - v4);
    DspLib::ControlFreak::Algorithm::RampedValue::ramp((uint64_t)v3, (uint64_t)&v7 - v4, *((_QWORD *)a2 + 2));
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
    DspLib::multiply(&v9, v5);
  }
  else if (!DspLib::isEqual((DspLib *)a1, *v3, 1.0, 1.0e-20) && **(float **)(a1 + 48) < 0.5)
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    DspLib::multiply((uint64_t *)&v7, *v3);
  }
}

void DspLib::Saturation::SmartSaturation::process(uint64_t a1, uint64_t *a2)
{
  float v4;
  float v5;
  __int128 v6;
  float v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  vDSP_Length v14;
  _QWORD *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = *a2;
  v29 = *(_OWORD *)(a2 + 1);
  DspLib::Saturation::SmartSaturation::processAnalysis(a1, (__int128 *)&v28);
  v5 = v4;
  if (*(_BYTE *)(a1 + 96))
  {
    v6 = *(_OWORD *)(a2 + 1);
    v30 = *(_OWORD *)a2;
    v31 = a2[2];
    v32 = v30;
    v33 = v6;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 96), (uint64_t)&v32, (float ***)&v30);
  }
  v26 = *(_OWORD *)a2;
  v27 = a2[2];
  DspLib::multiply((uint64_t *)&v26, v5);
  if (*(_BYTE *)(a1 + 44))
  {
    v24 = *a2;
    v25 = *(_OWORD *)(a2 + 1);
    v7 = DspLib::maxMagnitude(&v24);
    if (*(float *)(a1 + 72) >= v7)
      v7 = *(float *)(a1 + 72);
    *(float *)(a1 + 72) = v7;
  }
  v8 = *(_QWORD *)(a1 + 376);
  v9 = 1.0 / v5;
  if (!v8)
  {
    v20 = *(_OWORD *)a2;
    v21 = a2[2];
    DspLib::Saturation::process(&v20, *(_DWORD *)a1);
    v18 = *(_OWORD *)a2;
    v19 = a2[2];
    DspLib::multiply((uint64_t *)&v18, v9);
    goto LABEL_15;
  }
  v34[0] = &off_1E69C42F8;
  v34[1] = a1;
  v35 = v34;
  DspLib::Saturation::OversampledProcess::processWith(v8, a2, (uint64_t)v34);
  v10 = v35;
  if (v35 == v34)
  {
    v11 = 4;
    v10 = v34;
    goto LABEL_13;
  }
  if (v35)
  {
    v11 = 5;
LABEL_13:
    v10 = (_QWORD *)(*(uint64_t (**)(void))(*v10 + 8 * v11))();
  }
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v18 - v12;
  v14 = a2[2];
  DspLib::fill((float *)((char *)&v18 - v12), v14, v9);
  DspLib::CircularDelay::process((const void **)(a1 + 384), v13, v14, v13, v14);
  v22 = *(_OWORD *)a2;
  v23 = a2[2];
  DspLib::multiply(&v22, (const float *)v13);
LABEL_15:
  v16 = *(unsigned __int8 *)(a1 + 200);
  v15 = (_QWORD *)(a1 + 200);
  if (v16)
  {
    v17 = *(_OWORD *)(a2 + 1);
    v30 = *(_OWORD *)a2;
    v31 = a2[2];
    v32 = v30;
    v33 = v17;
    DspLib::Biquad::Filter::process(v15, (uint64_t)&v32, (float ***)&v30);
  }
}

void sub_1B60D7428(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 96);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 120);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float DspLib::ControlFreak::Algorithm::processPeakSampleDetector(uint64_t a1, __int128 *a2, float *a3, vDSP_Length a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float **v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  vDSP_Length v20;
  DspLib *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  float v27;
  unint64_t v28;
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(float *)(*(_QWORD *)(a1 + 48) + 32) >= 0.5)
  {
    v9 = 4 * *((_QWORD *)a2 + 2);
    if (v9 <= 1)
      v9 = 1;
    if (*((_QWORD *)a2 + 1) == 1)
      v10 = v9;
    else
      v10 = ((v9 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    MEMORY[0x1E0C80A78](a1);
    v12 = (float *)((char *)&v31[-1] - v11);
    v13 = *((_QWORD *)a2 + 1);
    MEMORY[0x1E0C80A78](v14);
    v16 = (float **)((char *)&v31[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v15 >= 0x200)
      v17 = 512;
    else
      v17 = v15;
    bzero((char *)&v31[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
    if (v13)
    {
      v18 = 0;
      do
      {
        v16[v18++] = v12;
        v12 += v10;
      }
      while (v13 > v18);
    }
    v19 = *((_QWORD *)a2 + 2);
    v20 = 4 * v19;
    v32 = *a2;
    v33 = v19;
    v31[0] = v16;
    v31[1] = v13;
    v31[2] = 4 * v19;
    DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 1080), &v32, v31);
    if (*(_DWORD *)(a1 + 12) >= 2u)
    {
      v22 = 1;
      do
        DspLib::vmaxmg(*v16, v20, v16[v22++]);
      while (v22 < *(unsigned int *)(a1 + 12));
    }
    if (*((_QWORD *)a2 + 2))
    {
      v23 = 0;
      v24 = 0;
      v25 = 1;
      do
      {
        a3[v24] = DspLib::maxMagnitude(&(*v16)[v23], 4uLL);
        v24 = v25;
        v26 = *((_QWORD *)a2 + 2) > (unint64_t)v25++;
        v23 += 4;
      }
      while (v26);
    }
    v27 = DspLib::dB2Amp(v21, 0.688);
    DspLib::multiply(a3, a4, v27);
    if (*(_DWORD *)(a1 + 12))
    {
      v28 = 0;
      do
        DspLib::vmaxmg(a3, a4, *(const float **)(*(_QWORD *)a2 + 8 * v28++));
      while (v28 < *(unsigned int *)(a1 + 12));
    }
  }
  else
  {
    DspLib::abs(**(const float ***)a2, *((_QWORD *)a2 + 2), a3);
    if (*(_DWORD *)(a1 + 12) >= 2u)
    {
      v8 = 1;
      do
        DspLib::vmaxmg(a3, a4, *(const float **)(*(_QWORD *)a2 + 8 * v8++));
      while (v8 < *(unsigned int *)(a1 + 12));
    }
  }
  return DspLib::maxv(a3, a4);
}

void DspLib::ControlFreak::Algorithm::computeModulator(uint64_t a1, void *a2, vDSP_Length a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  void *v13;
  float *v14;
  char *v15;
  uint64_t v16;
  float v17;
  float v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  if (a3 <= 1)
    v6 = 1;
  else
    v6 = a3;
  v7 = 4 * v6;
  MEMORY[0x1E0C80A78](a1);
  v9 = (float *)((char *)v19 - v8);
  v11 = *(float **)(v10 + 216);
  if (v12)
    memmove(&v11[*(unsigned int *)(a1 + 776) - 1], a2, 4 * a3);
  DspLib::slidingWindowMaxima(v11, a3 + *(unsigned int *)(a1 + 776) - 1, v9, a3);
  if (4 * *(unsigned int *)(a1 + 776) != 4)
    v13 = memmove(v11, &v11[a3], 4 * *(unsigned int *)(a1 + 776) - 4);
  v14 = (float *)(a1 + 1468);
  if (*(_BYTE *)(a1 + 1480))
  {
    MEMORY[0x1E0C80A78](v13);
    v15 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    DspLib::ControlFreak::Algorithm::RampedValue::ramp((uint64_t)v14, (uint64_t)v15, a3);
    if (a3)
    {
      v16 = 0;
      do
      {
        v17 = *(float *)&v15[4 * v16];
        v18 = v9[v16];
        if (v18 < v17)
          v18 = *(float *)&v15[4 * v16];
        *((float *)a2 + v16++) = v17 / v18;
      }
      while (a3 > v16);
    }
  }
  else
  {
    DspLib::threshold(v9, a3, (float *)a2, *v14);
    DspLib::svdiv((float *)a2, a3, *v14);
  }
}

void DspLib::ControlFreak::Algorithm::processAutorelease(uint64_t a1, uint64_t a2, float *a3, vDSP_Length a4)
{
  vDSP_Length v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  vDSP_Length v12;
  uint64_t v13;
  uint64_t v14;
  vDSP_Length v15;
  uint64_t v16;
  float *v17;
  vDSP_Length v18;
  float v19;
  float v20;
  uint64_t v21;
  __int128 v22;
  vDSP_Length v23;
  float *v24;
  __int128 v25;
  vDSP_Length v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v21 - v9;
  if (v8)
    memmove(v10, **(const void ***)a2, 4 * v8);
  if (*(_DWORD *)(a1 + 12) >= 2u)
  {
    v11 = 1;
    do
      DspLib::add((float *)v10, v8, *(const float **)(*(_QWORD *)a2 + 8 * v11++));
    while (v11 < *(unsigned int *)(a1 + 12));
  }
  v26 = v8;
  v27[0] = v10;
  *(_QWORD *)&v25 = v27;
  *((_QWORD *)&v25 + 1) = 1;
  v23 = v8;
  v24 = (float *)v10;
  *(_QWORD *)&v22 = &v24;
  *((_QWORD *)&v22 + 1) = 1;
  DspLib::FIRDecimator::process(a1 + 784, &v22, &v25);
  v12 = v26;
  v27[0] = v10;
  v24 = (float *)v10;
  *(_QWORD *)&v25 = v27;
  *((_QWORD *)&v25 + 1) = 1;
  *(_QWORD *)&v22 = &v24;
  *((_QWORD *)&v22 + 1) = 1;
  v23 = v26;
  DspLib::EnvelopeProcessor::process(a1 + 1184, (uint64_t)&v25, &v22);
  v26 = v12;
  v27[0] = v10;
  *(_QWORD *)&v25 = v27;
  *((_QWORD *)&v25 + 1) = 1;
  v23 = v12;
  v24 = (float *)v10;
  *(_QWORD *)&v22 = &v24;
  *((_QWORD *)&v22 + 1) = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 968), &v22, &v25);
  v13 = v26;
  *(_QWORD *)&v22 = v10;
  *(_QWORD *)&v25 = &v22;
  *((_QWORD *)&v25 + 1) = 1;
  DspLib::RMS::process(a1 + 1256, &v25, (const float *)v10, v26);
  v14 = DspLib::ControlFreak::Algorithm::audioActivityDetector(a1, (float *)v10, v13);
  v15 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](v14);
  v17 = (float *)((char *)&v21 - v16);
  v26 = v13;
  v27[0] = (char *)&v21 - v16;
  v24 = (float *)v10;
  *(_QWORD *)&v25 = &v24;
  *((_QWORD *)&v25 + 1) = 1;
  *(_QWORD *)&v22 = v27;
  *((_QWORD *)&v22 + 1) = 1;
  v23 = v12;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 976), &v25, &v22);
  v18 = *(_QWORD *)(a2 + 16);
  v26 = v12;
  v27[0] = v10;
  v24 = v17;
  *(_QWORD *)&v25 = &v24;
  *((_QWORD *)&v25 + 1) = 1;
  *(_QWORD *)&v22 = v27;
  *((_QWORD *)&v22 + 1) = 1;
  v23 = v18;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 864), &v25, &v22);
  DspLib::ControlFreak::Algorithm::computeSlowGain(a1, a3, a4, (uint64_t)v10, v18, v17, v15);
  DspLib::clip(a3, a4, *(float *)(a1 + 1500), 1.0);
  if (*(_BYTE *)(a1 + 40))
  {
    v19 = DspLib::minv(a3, a4);
    if (v19 >= *(float *)(a1 + 1628))
      v19 = *(float *)(a1 + 1628);
    *(float *)(a1 + 1628) = v19;
  }
  DspLib::multiply(a3, a4, v17);
  if (*(_BYTE *)(a1 + 40))
  {
    v20 = DspLib::minv(a3, a4);
    if (v20 >= *(float *)(a1 + 1624))
      v20 = *(float *)(a1 + 1624);
    *(float *)(a1 + 1624) = v20;
  }
}

void DspLib::ControlFreak::Algorithm::outputModulator(uint64_t a1, void *__src, uint64_t a3, uint64_t a4)
{
  vDSP_Length v7;
  unint64_t v8;

  v7 = *(_QWORD *)(a4 + 16);
  if (*(_BYTE *)(a1 + 240))
  {
    DspLib::fill(**(float ***)a4, v7, 1.0);
  }
  else if (v7)
  {
    memmove(**(void ***)a4, __src, 4 * v7);
  }
  if (*(_DWORD *)(a1 + 12) >= 2u)
  {
    v8 = 1;
    do
      DspLib::clear(*(float **)(*(_QWORD *)a4 + 8 * v8++), *(_QWORD *)(a4 + 16));
    while (v8 < *(unsigned int *)(a1 + 12));
  }
}

void DspLib::ControlFreak::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib *v5;
  DspLib *v6;
  DspLib *v7;
  DspLib *v8;
  DspLib *v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;

  DspLib::clear((float *)a2, __N);
  if (*(_BYTE *)(a1 + 40))
  {
    *(float *)a2 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 1628), 0.000001);
    *(float *)(a2 + 12) = DspLib::amp2dBSafe(v6, *(float *)(a1 + 1624), 0.000001);
    *(float *)(a2 + 16) = DspLib::amp2dBSafe(v7, *(float *)(a1 + 1616), 0.000001);
    *(float *)(a2 + 20) = DspLib::amp2dBSafe(v8, *(float *)(a1 + 1620), 0.000001);
    if (*(_BYTE *)(a1 + 416))
    {
      v10 = *(float *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = 897988541;
      v11 = *(_DWORD *)(a1 + 428);
      v12 = *(_QWORD *)(a1 + 420);
      v13 = DspLib::amp2dBSafe(v9, v10, 0.000001);
      *(_QWORD *)(a2 + 24) = v12;
      *(_DWORD *)(a2 + 32) = v11;
      *(float *)(a2 + 4) = v13;
    }
    *(_OWORD *)(a1 + 1616) = xmmword_1B662A870;
  }
  else
  {
    *(int32x2_t *)(a2 + 16) = vdup_n_s32(0xC2C80000);
    *(_DWORD *)(a2 + 4) = -1027080192;
  }
}

uint64_t DspLib::ControlFreak::Algorithm::RampedValue::ramp(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;

  if (a3)
  {
    v3 = 0;
    do
    {
      v4 = *(float *)(result + 8);
      v5 = v4 * *(float *)result;
      *(float *)result = v5;
      if (v4 > 1.0 && (v6 = *(float *)(result + 4), v5 >= v6) || v4 < 1.0 && (v6 = *(float *)(result + 4), v5 <= v6))
      {
        *(float *)result = v6;
        *(_BYTE *)(result + 12) = 0;
        v5 = v6;
      }
      *(float *)(a2 + 4 * v3++) = v5;
    }
    while (a3 > v3);
  }
  return result;
}

uint64_t DspLib::ControlFreak::Algorithm::audioActivityDetector(uint64_t result, float *a2, uint64_t a3)
{
  int v3;
  float v4;
  float v5;
  int v6;

  if (a3)
  {
    v3 = *(_DWORD *)(result + 1460);
    do
    {
      v4 = *a2;
      v5 = *(float *)(result + 1456);
      if (*a2 > (float)(v5 * *(float *)(result + 1448)))
      {
        *(float *)(result + 1456) = v4;
        v3 += *(_DWORD *)(result + 1464);
        *(_DWORD *)(result + 1460) = v3;
        v5 = v4;
      }
      if (v4 < (float)(v5 * *(float *)(result + 1452)))
        *(float *)(result + 1456) = v4;
      if (v3)
      {
        v6 = *(_DWORD *)(result + 1508);
        *(_DWORD *)(result + 1460) = --v3;
      }
      else
      {
        v6 = *(_DWORD *)(result + 1512);
      }
      *(_DWORD *)a2++ = v6;
      --a3;
    }
    while (a3);
  }
  return result;
}

void DspLib::ControlFreak::Algorithm::computeSlowGain(uint64_t a1, const float *a2, vDSP_Length __N, uint64_t a4, int a5, float *__C, vDSP_Length a7)
{
  uint64_t v11;
  float v12;
  float v13;

  DspLib::multiply(a2, __N, __C, 1.0 / *(float *)(a1 + 1500));
  DspLib::clip(__C, a7, 0.0, 1.0);
  if (DspLib::minv(__C, a7) < 0.99)
  {
    *(_BYTE *)(a1 + 1516) = 1;
LABEL_6:
    if (a7)
    {
      v11 = 0;
      do
      {
        v12 = __C[v11];
        v13 = *(float *)(a1 + 1504);
        if (v12 >= v13)
          v12 = v13 + (float)((float)(v12 - v13) * *(float *)(a4 + 4 * v11));
        *(float *)(a1 + 1504) = v12;
        __C[v11++] = v12;
      }
      while (a7 > v11);
    }
    return;
  }
  if (*(float *)(a1 + 1504) > 0.99)
  {
    *(_BYTE *)(a1 + 1516) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 1516))
    goto LABEL_6;
}

void DspLib::Saturation::SmartSaturation::initialize(DspLib::Saturation::SmartSaturation *this, int a2, double a3, uint64_t a4)
{
  _OWORD v5[2];

  *((_DWORD *)this + 10) = a2;
  *((double *)this + 4) = a3;
  *((_QWORD *)this + 6) = a4;
  DspLib::Saturation::SmartSaturation::configureAnalysisFilter(this);
  DspLib::Saturation::SmartSaturation::reset(this);
  *((_BYTE *)this + 56) = 1;
  v5[0] = *(_OWORD *)this;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)this + 12);
  DspLib::Saturation::SmartSaturation::configure((uint64_t)this, v5);
}

void DspLib::Saturation::SmartSaturation::configure(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  uint64_t *v4;
  DspLib::Saturation::OversampledProcess *v5;
  uint64_t v6;

  v3 = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(a1 + 376);
  v5 = *(DspLib::Saturation::OversampledProcess **)(a1 + 376);
  if (*(_BYTE *)(a1 + 4))
  {
    if (!v5)
    {
      v5 = (DspLib::Saturation::OversampledProcess *)operator new();
      DspLib::Saturation::OversampledProcess::OversampledProcess(v5, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), *(double *)(a1 + 32), 2u, 24);
      v6 = *v4;
      *v4 = (uint64_t)v5;
      if (v6)
      {
        std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100]((uint64_t)v4, v6);
        v5 = (DspLib::Saturation::OversampledProcess *)*v4;
      }
    }
    DspLib::Saturation::OversampledProcess::setCutoffFrequency(v5, *(float *)(a1 + 8));
    DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(a1 + 384), (unint64_t)((float)(*(float *)(*(_QWORD *)(a1 + 376) + 24)/ (float)*(unsigned int *)(*(_QWORD *)(a1 + 376) + 16))+ (float)(*(float *)(*(_QWORD *)(a1 + 376) + 24)/ (float)*(unsigned int *)(*(_QWORD *)(a1 + 376) + 16))));
  }
  else
  {
    *v4 = 0;
    if (v5)
      std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100](a1 + 376, (uint64_t)v5);
  }
  if (*(float *)(a1 + 16) <= 0.0)
  {
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)(a1 + 96));
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)(a1 + 200));
  }
  else
  {
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 96), *(unsigned int *)(a1 + 40), *(double *)(a1 + 32), 1uLL);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 200), *(unsigned int *)(a1 + 40), *(double *)(a1 + 32), 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 96, ((unint64_t)*(unsigned int *)(a1 + 20) << 32) | 0x10, (double *)(*(_DWORD *)(a1 + 16) ^ 0x80000000 | ((unint64_t)*(unsigned int *)(a1 + 24) << 32)), 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 200, ((unint64_t)*(unsigned int *)(a1 + 20) << 32) | 0x10, (double *)(*(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32)), 0, 0x41uLL);
  }
}

void sub_1B60D80A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10A0C40D6B359F6);
  _Unwind_Resume(a1);
}

void DspLib::ControlFreak::Algorithm::~Algorithm(DspLib::ControlFreak::Algorithm *this)
{
  DspLib::ControlFreak::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;

  *(_QWORD *)this = &off_1E69C41E8;
  v14 = (void **)((char *)this + 1592);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 1568);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v2 = (void *)*((_QWORD *)this + 192);
  if (v2)
  {
    *((_QWORD *)this + 193) = v2;
    operator delete(v2);
  }
  v14 = (void **)((char *)this + 1416);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v3 = (void *)*((_QWORD *)this + 171);
  if (v3)
  {
    *((_QWORD *)this + 172) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 168);
  if (v4)
  {
    *((_QWORD *)this + 169) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 163);
  if (v5)
  {
    *((_QWORD *)this + 164) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v14 = (void **)((char *)this + 1216);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 1192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = (void *)*((_QWORD *)this + 145);
  if (v7)
  {
    *((_QWORD *)this + 146) = v7;
    operator delete(v7);
  }
  v14 = (void **)((char *)this + 1128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 1096);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v8 = (void *)*((_QWORD *)this + 132);
  if (v8)
  {
    *((_QWORD *)this + 133) = v8;
    operator delete(v8);
  }
  v14 = (void **)((char *)this + 1024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 992);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v9 = (void *)*((_QWORD *)this + 118);
  if (v9)
  {
    *((_QWORD *)this + 119) = v9;
    operator delete(v9);
  }
  v14 = (void **)((char *)this + 912);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 880);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 832);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v10 = (void *)*((_QWORD *)this + 99);
  if (v10)
  {
    *((_QWORD *)this + 100) = v10;
    operator delete(v10);
  }
  DspLib::Saturation::SmartSaturation::~SmartSaturation((DspLib::ControlFreak::Algorithm *)((char *)this + 360));
  v14 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ControlFreak::Algorithm *)((char *)this + 304));
  v11 = (void *)*((_QWORD *)this + 35);
  if (v11)
  {
    *((_QWORD *)this + 36) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 27);
  if (v12)
  {
    *((_QWORD *)this + 28) = v12;
    operator delete(v12);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v13 = (void *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 7) = v13;
    operator delete(v13);
  }
}

uint64_t DspLib::ControlFreak::Algorithm::setMeteringIsEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 40) = a2;
  *(_BYTE *)(this + 404) = a2;
  return this;
}

void DspLib::Saturation::OversampledProcess::reset(DspLib::Saturation::OversampledProcess *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 != v4)
      bzero(*(void **)v2, (v4 - *(_QWORD *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    v2 += 24;
  }
  *((_DWORD *)this + 26) = 0;
  DspLib::FIRDecimator::reset((DspLib::Saturation::OversampledProcess *)((char *)this + 136));
}

void DspLib::Saturation::SmartSaturation::processAnalysis(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float **v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  float **v13;
  size_t v14;
  float **v15;
  float **v16;
  float v17;
  float v18;
  float v19;
  DspLib *v20;
  DspLib *v21;
  float v22;
  float v23;
  DspLib *v24;
  DspLib *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _QWORD v34[3];
  float **v35[3];
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = *((_QWORD *)a2 + 2);
  v7 = (float **)*(unsigned int *)(a1 + 40);
  if (v7 == (float **)1)
    v8 = v6;
  else
    v8 = ((v6 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  MEMORY[0x1E0C80A78](a1);
  v10 = (float *)((char *)v34 - v9);
  MEMORY[0x1E0C80A78](v11);
  v13 = (float **)((char *)v34 - ((v12 + 15) & 0xFFFFFFFF0));
  if (v12 >= 0x200)
    v14 = 512;
  else
    v14 = v12;
  bzero((char *)v34 - ((v12 + 15) & 0xFFFFFFFF0), v14);
  if ((_DWORD)v7)
  {
    v15 = v7;
    v16 = v13;
    do
    {
      *v16++ = v10;
      v10 += v8;
      v15 = (float **)((char *)v15 - 1);
    }
    while (v15);
  }
  v40 = *a2;
  v41 = *((_QWORD *)a2 + 2);
  v17 = DspLib::maxMagnitude(&v40);
  v38 = *a2;
  v39 = *((_QWORD *)a2 + 2);
  v18 = (float)(v5 * v4);
  v19 = sqrtf(DspLib::sumOfSquares(&v38) / v18);
  v22 = DspLib::dB2Amp(v20, *(float *)(a1 + 12)) / v17;
  if (v22 > 1.0)
    v22 = 1.0;
  *(float *)(a1 + 64) = DspLib::amp2dBSafe(v21, v22, 0.000001);
  v36 = *a2;
  v37 = *((_QWORD *)a2 + 2);
  v35[0] = v13;
  v35[1] = v7;
  v35[2] = (float **)v4;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 304), (uint64_t)&v36, v35);
  v34[0] = v13;
  v34[1] = v7;
  v34[2] = v4;
  v23 = DspLib::sumOfSquares(v34);
  v26 = DspLib::amp2dBSafe(v24, sqrtf(v23 / v18) / (float)(v19 + 0.000001), 0.000001);
  if (v4 == *(_QWORD *)(a1 + 80))
  {
    v28 = *(float *)(a1 + 88);
    v27 = *(float *)(a1 + 92);
  }
  else
  {
    v29 = *(double *)(a1 + 32) / (double)v4;
    v27 = 1.0 - expf(-1.0 / (float)((float)(v29 * 100.0) / 1000.0));
    *(float *)(a1 + 88) = v27;
    *(float *)(a1 + 92) = v27;
    v28 = v27;
  }
  v30 = *(float *)(a1 + 60);
  if (v26 < v30)
    v27 = v28;
  v31 = v30 + (float)((float)(v26 - v30) * v27);
  *(float *)(a1 + 60) = v31;
  v32 = -40.0;
  if (v31 >= -40.0)
  {
    v32 = -30.0;
    if (v31 <= -30.0)
      v32 = v31;
  }
  v33 = (float)(v32 * 0.5) + 15.0;
  *(float *)(a1 + 68) = v33;
  DspLib::dB2Amp(v25, v33 + *(float *)(a1 + 64));
}

void DspLib::Saturation::OversampledProcess::processWith(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  _QWORD v24[3];
  _BYTE v25[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v6 = a2[2];
  v8 = v6 * *(unsigned int *)(a1 + 16);
  if (v8 <= 1)
    v9 = 1;
  else
    v9 = v6 * *(unsigned int *)(a1 + 16);
  if (v7 == 1)
    v10 = v9;
  else
    v10 = ((v9 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v19 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v14 >= 0x200)
    v16 = 512;
  else
    v16 = v14;
  bzero((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  if (v7)
  {
    v17 = 0;
    do
    {
      *(_QWORD *)&v15[8 * v17++] = v12;
      v12 += 4 * v10;
    }
    while (v7 > v17);
  }
  *(_QWORD *)v25 = v15;
  *(_QWORD *)&v25[8] = v7;
  *(_QWORD *)&v25[16] = v8;
  v24[0] = *a2;
  v24[1] = v7;
  v24[2] = v6;
  v23 = v8;
  v22 = *(_OWORD *)v25;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 32), v24, &v22);
  v18 = *(_QWORD *)(a3 + 24);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 48))(v18, v25);
  v20 = *(_QWORD *)v25;
  v21 = *(_OWORD *)&v25[8];
  DspLib::FIRDecimator::process(a1 + 136, &v20, a2);
}

void std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69C42F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69C42F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::operator()(uint64_t a1, uint64_t a2)
{
  int *v2;
  __int128 v3;
  uint64_t v4;

  v2 = *(int **)(a1 + 8);
  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  DspLib::Saturation::process(&v3, *v2);
}

uint64_t std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1},std::allocator<DspLib::Saturation::SmartSaturation::process(DspLib::MultiSpan<float>)::{lambda(DspLib::MultiSpan<float>&)#1}>,void ()(DspLib::MultiSpan<float>&)>::target_type()
{
}

void DspLib::Saturation::SmartSaturation::configureAnalysisFilter(DspLib::Saturation::SmartSaturation *this)
{
  float v2;
  float v3;
  void *__p;
  _BYTE *v5;
  void *v6;
  _BYTE *v7;

  v2 = *((double *)this + 4);
  DspLib::Biquad::Design::butterworthHighPass((DspLib::Biquad::Design *)4, 7000.0, v2, 0, (float **)&v6);
  v3 = *((double *)this + 4);
  DspLib::Biquad::Design::butterworthLowPass((DspLib::Biquad::Design *)2, 13000.0, v3, 0, &__p);
  DspLib::Biquad::Filter::initialize((DspLib::Saturation::SmartSaturation *)((char *)this + 304), *((unsigned int *)this + 10), 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)v6) >> 2) - 0x3333333333333333 * ((v5 - (_BYTE *)__p) >> 2));
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 304, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)v6) >> 2), 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 304, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)__p) >> 2), -858993459 * ((unint64_t)(v7 - (_BYTE *)v6) >> 2), 0x41uLL);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
}

void sub_1B60D8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DspLib::Saturation::OversampledProcess::setCutoffFrequency(DspLib::Saturation::OversampledProcess *this, float a2)
{
  vDSP_Length v3;
  double v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (*((_DWORD *)this + 5) * *((_DWORD *)this + 4) + 1);
  v4 = MEMORY[0x1E0C80A78](this);
  v6 = (char *)&v15[-1] - v5;
  v15[0] = &unk_1E69BFC40;
  v15[1] = DspLib::makeChebychevWindow;
  v16 = v15;
  *((float *)this + 6) = DspLib::makeSincWindow((float *)((char *)&v15[-1] - v5), v3, v7, v8, (uint64_t)v15, *(float *)&v4);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  DspLib::FIRDecimator::setCoefficients((uint64_t)this + 136, v6, v3);
  DspLib::FIRDecimator::reset((DspLib::Saturation::OversampledProcess *)((char *)this + 136));
  DspLib::multiply((float *)v6, v3, (float)*((unsigned int *)this + 4));
  DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)this + 8, (uint64_t)v6, v3);
  v11 = *((_QWORD *)this + 10);
  v12 = *((_QWORD *)this + 11);
  while (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if (*(_QWORD *)v11 != v13)
      bzero(*(void **)v11, (v13 - *(_QWORD *)v11) & 0xFFFFFFFFFFFFFFFCLL);
    v11 += 24;
  }
  *((_DWORD *)this + 26) = 0;
}

void sub_1B60D8934(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

DspLib::Saturation::OversampledProcess *DspLib::Saturation::OversampledProcess::OversampledProcess(DspLib::Saturation::OversampledProcess *this, unsigned int a2, int a3, double a4, unsigned int a5, int a6)
{
  DspLib::PolyPhaseInterpolator *v9;
  DspLib::FIRDecimator *v10;

  *((_DWORD *)this + 8) = 1;
  v9 = (DspLib::Saturation::OversampledProcess *)((char *)this + 32);
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 17) = 1;
  v10 = (DspLib::Saturation::OversampledProcess *)((char *)this + 136);
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 26) = 0;
  *(_DWORD *)this = a2;
  *((double *)this + 1) = a4;
  *((_DWORD *)this + 4) = a5;
  *((_DWORD *)this + 5) = a6;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 10, a2);
  DspLib::PolyPhaseInterpolator::setSrcParameters(v9, a5, a3);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 23, *(unsigned int *)this);
  DspLib::FIRDecimator::setSrcParameters(v10, a5, (*((_DWORD *)this + 4) * a3));
  return this;
}

void sub_1B60D8A38(_Unwind_Exception *a1)
{
  DspLib::PolyPhaseInterpolator *v1;
  DspLib::FIRDecimator *v2;

  DspLib::FIRDecimator::~FIRDecimator(v2);
  DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 184);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v3 = *(void **)(a2 + 144);
    if (v3)
    {
      *(_QWORD *)(a2 + 152) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 112);
    if (v4)
    {
      *(_QWORD *)(a2 + 120) = v4;
      operator delete(v4);
    }
    v5 = (void **)(a2 + 80);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(a2 + 48);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1BCC95CEC](a2, 0x10A0C40D6B359F6);
  }
}

void DspLib::Saturation::SmartSaturation::~SmartSaturation(DspLib::Saturation::SmartSaturation *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
    std::default_delete<DspLib::Saturation::OversampledProcess>::operator()[abi:ne180100]((uint64_t)this + 376, v3);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Saturation::SmartSaturation *)((char *)this + 352));
  v4 = (void *)*((_QWORD *)this + 41);
  if (v4)
  {
    *((_QWORD *)this + 42) = v4;
    operator delete(v4);
  }
  v7 = (void **)((char *)this + 280);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Saturation::SmartSaturation *)((char *)this + 248));
  v5 = (void *)*((_QWORD *)this + 28);
  if (v5)
  {
    *((_QWORD *)this + 29) = v5;
    operator delete(v5);
  }
  v7 = (void **)((char *)this + 176);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Saturation::SmartSaturation *)((char *)this + 144));
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
}

uint64_t DspLib::LinearPhaseFilterbank::initialize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

void DspLib::LinearPhaseFilterbank::configure(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  double v13;
  char v14;
  unint64_t v15;
  vDSP_Length *v16;
  vDSP_Length *v17;
  DspLib::ComplexVector *v18;
  DspLib::ComplexVector *v19;

  if (*(_QWORD *)a1 != 2 * a2)
    goto LABEL_7;
  if (*(_QWORD *)(a1 + 8) != a4)
    goto LABEL_7;
  if (a4)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v7 |= *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) != vcvtas_u32_f32(*(float *)(a3 + 4 * v6) * (float)*(unint64_t *)a1);
      ++v6;
    }
    while (a4 > v6);
    if ((v7 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)a1 = 2 * a2;
      *(_QWORD *)(a1 + 8) = a4;
      std::vector<unsigned long>::resize(a1 + 24, a4);
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 16) + *(_QWORD *)a1;
      v10 = 2 * v9;
      v11 = (double)v9;
      do
      {
        v12 = qword_1B662AB88[v8];
        v13 = v11 / (double)v12;
        if (v13 <= 1.0)
          v14 = 0;
        else
          v14 = vcvtpd_u64_f64(log2(v13));
        v15 = v12 << v14;
        if (v15 < v10)
          v10 = v15;
        ++v8;
      }
      while (v8 != 4);
      *(_QWORD *)(a1 + 96) = v10;
      v16 = (vDSP_Length *)operator new();
      DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v16, *(_QWORD *)(a1 + 96));
      std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), (uint64_t)v16);
      v17 = (vDSP_Length *)operator new();
      DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v17, *(_QWORD *)(a1 + 96));
      std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)(a1 + 112), (uint64_t)v17);
      DspLib::LinearDelay::setLength((float **)(a1 + 72), *(_QWORD *)(a1 + 96));
      std::vector<DspLib::ComplexVector>::resize((uint64_t *)(a1 + 48), *(_QWORD *)(a1 + 8) - 1);
      v18 = *(DspLib::ComplexVector **)(a1 + 48);
      v19 = *(DspLib::ComplexVector **)(a1 + 56);
      while (v18 != v19)
      {
        DspLib::ComplexVector::setLength(v18, *(_QWORD *)(a1 + 96) >> 1);
        v18 = (DspLib::ComplexVector *)((char *)v18 + 80);
      }
      DspLib::LinearPhaseFilterbank::calculateCoeffsFromCenterFrequencies(a1, a3);
      DspLib::clear(*(float **)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
    }
  }
}

void sub_1B60D8F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::ComplexVector>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::ComplexVector>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 80 * a2;
    while (v3 != v7)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v3 - 80));
    a1[1] = v7;
  }
}

void DspLib::LinearPhaseFilterbank::calculateCoeffsFromCenterFrequencies(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  vDSP_Length v26;
  uint64_t v27;
  DSPComplex *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void **v34;
  void **v35;
  uint64_t v36;
  vDSP_Length v37[2];
  DSPComplex **v38;
  uint64_t v39;
  uint64_t v40;
  DSPSplitComplex __Z;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 24);
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = vcvtas_u32_f32(*(float *)(a2 + 4 * v4) * (float)*(unint64_t *)a1);
      v3[v4] = v6;
      if (v5 != 1)
      {
        v7 = v3[v5 - 2];
        if (v7 + 1 > v6)
          v6 = v7 + 1;
        v3[v4] = v6;
      }
      v4 = v5;
      v8 = *(_QWORD *)(a1 + 8) > (unint64_t)v5++;
    }
    while (v8);
  }
  v9 = v3[1] - *v3;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<float>::resize((uint64_t)&v43, 2 * v9);
  DspLib::makePeriodicHannWindow(v43, (v44 - v43) >> 2);
  MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v12 = *(_QWORD *)a1 >> 1;
  __Z.realp = v14;
  __Z.imagp = (float *)((char *)&v33 - v13);
  v42 = v12;
  DspLib::ComplexSpan::operator=((uint64_t)&__Z, 0.0);
  DspLib::fill(__Z.realp, **(_QWORD **)(a1 + 24), 1.0);
  if (v9)
    memmove(&__Z.realp[**(_QWORD **)(a1 + 24)], &v43[4 * v9], 4 * v9);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)&v38, *(_QWORD *)(a1 + 8));
  v15 = (uint64_t)v38;
  v16 = v39;
  while (v15 != v16)
  {
    std::vector<float>::resize(v15, *(_QWORD *)a1);
    v15 += 24;
  }
  v17 = DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v37, *(_QWORD *)a1);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v17, &__Z, *v38);
  DspLib::FFT::shift((char *)*v38);
  if ((unint64_t)(*(_QWORD *)(a1 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v20 = v9;
  }
  else
  {
    v18 = 2;
    v19 = 1;
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v18) - *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v19);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      std::vector<float>::resize((uint64_t)&v34, 2 * v20);
      DspLib::makePeriodicHannWindow(v34, ((char *)v35 - (char *)v34) >> 2);
      DspLib::ComplexSpan::operator=((uint64_t)&__Z, 0.0);
      if (v9)
        memmove(&__Z.realp[*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v19) - v9], v43, 4 * v9);
      if (v20)
        memmove(&__Z.realp[*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v19)], (char *)v34 + 4 * v20, 4 * v20);
      DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v37, &__Z, v38[3 * v19]);
      DspLib::FFT::shift((char *)v38[3 * v19]);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v43, (char *)v34, (uint64_t)v35, ((char *)v35 - (char *)v34) >> 2);
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      v19 = v18++;
      v9 = v20;
    }
    while (*(_QWORD *)(a1 + 8) - 1 > v19);
  }
  DspLib::ComplexSpan::operator=((uint64_t)&__Z, 0.0);
  if (v20)
    memmove(&__Z.realp[*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 8) - 8) - v20], v43, 4 * v20);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 8) - 8);
  DspLib::fill(&__Z.realp[v21], (*(_QWORD *)a1 >> 1) - v21, 1.0);
  *__Z.imagp = 1.0;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v37, &__Z, v38[3 * *(_QWORD *)(a1 + 8) - 3]);
  DspLib::FFT::shift((char *)v38[3 * *(_QWORD *)(a1 + 8) - 3]);
  if (*(_QWORD *)(a1 + 8))
  {
    v23 = 0;
    v24 = 1;
    do
    {
      DspLib::multiply((float *)v38[3 * v23], ((char *)v38[3 * v23 + 1] - (char *)v38[3 * v23]) >> 2, 1.0 / (float)*(unint64_t *)a1);
      v23 = v24;
      v8 = *(_QWORD *)(a1 + 8) > (unint64_t)v24++;
    }
    while (v8);
    v26 = *(_QWORD *)(a1 + 96);
    MEMORY[0x1E0C80A78](v25);
    v28 = (DSPComplex *)((char *)&v33 - v27);
    if (v29 == 1)
      goto LABEL_36;
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 96);
    MEMORY[0x1E0C80A78](v22);
    v28 = (DSPComplex *)((char *)&v33 - v30);
  }
  v31 = 0;
  v32 = 1;
  do
  {
    DspLib::clear((float *)v28, v26);
    if (*(_QWORD *)a1)
      memmove((char *)v28 + 4 * *(_QWORD *)(a1 + 16), v38[3 * v31], 4 * *(_QWORD *)a1);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(*(_QWORD **)(a1 + 104), v28, v26, (DSPSplitComplex *)(*(_QWORD *)(a1 + 48) + 80 * v31));
    DspLib::operator*=(*(_QWORD *)(a1 + 48) + 80 * v31, 0.25 / (float)*(unint64_t *)(a1 + 96));
    v31 = v32;
    v8 = *(_QWORD *)(a1 + 8) - 1 > (unint64_t)v32++;
  }
  while (v8);
LABEL_36:
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v37);
  v34 = (void **)&v38;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_1B60D9588(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  *(_QWORD *)(v1 - 200) = v1 - 160;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 200));
  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void DspLib::LinearPhaseFilterbank::reset(float **this)
{
  DspLib::clear(this[9], this[10] - this[9]);
}

uint64_t *DspLib::LinearPhaseFilterbank::consumeInput(uint64_t a1, char *a2, unint64_t a3)
{
  return DspLib::LinearDelay::write((uint64_t *)(a1 + 72), a2, a3);
}

void DspLib::LinearPhaseFilterbank::process(uint64_t a1, char *a2, unint64_t a3, _QWORD *a4)
{
  const void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  vDSP_Length v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  const DSPSplitComplex *v22;
  unint64_t v23;
  _QWORD v25[2];
  size_t v26;
  DSPSplitComplex __C;
  uint64_t v28;
  DSPSplitComplex __A;
  vDSP_Length v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    DspLib::LinearDelay::write((uint64_t *)(a1 + 72), a2, a3);
    v7 = (const void *)(*(_QWORD *)(a1 + 72) + 4 * *(_QWORD *)(a1 + 96) - 4 * (*(_QWORD *)a1 >> 1) - 4 * a3);
    v8 = *(void **)(*a4 + 8 * *(_QWORD *)(a1 + 8) - 8);
    v26 = 4 * a3;
    v9 = memmove(v8, v7, 4 * a3);
    v25[1] = v25;
    MEMORY[0x1E0C80A78](v9);
    MEMORY[0x1E0C80A78](v10);
    v11 = *(_QWORD **)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 96) >> 1;
    __A.realp = v14;
    __A.imagp = (float *)((char *)v25 - v13);
    v30 = v12;
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v11, *(DSPComplex **)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2, &__A);
    if (*(_QWORD *)(a1 + 8) != 1)
    {
      v16 = 0;
      v17 = 1;
      do
      {
        MEMORY[0x1E0C80A78](v15);
        MEMORY[0x1E0C80A78](v18);
        v19 = *(_QWORD *)(a1 + 96) >> 1;
        __C.realp = v21;
        __C.imagp = (float *)((char *)v25 - v20);
        v28 = v19;
        v22 = (const DSPSplitComplex *)(*(_QWORD *)(a1 + 48) + 80 * v16);
        vDSP_zvmul(&__A, 1, v22, 1, &__C, 1, v30, 1);
        *__C.realp = *__A.realp * *v22->realp;
        *__C.imagp = *__A.imagp * *v22->imagp;
        DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(*(_QWORD **)(a1 + 112), &__C, *(DSPComplex **)(*a4 + 8 * v16));
        v23 = *(_QWORD *)(a1 + 16);
        if (a3 < v23)
          memmove(*(void **)(*a4 + 8 * v16), (const void *)(*(_QWORD *)(*a4 + 8 * v16) + 4 * v23 - 4 * a3), v26);
        DspLib::subtract(*(float **)(*a4 + 8 * *(_QWORD *)(a1 + 8) - 8), a3, *(const float **)(*a4 + 8 * v16));
        v16 = v17;
      }
      while (*(_QWORD *)(a1 + 8) - 1 > (unint64_t)v17++);
    }
  }
}

void DspLib::FFT::shift(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)v8 - v3;
  if (v5 >= 2)
  {
    v6 = 4 * v2;
    v7 = &a1[4 * v2];
    memcpy((char *)v8 - v3, v7, 4 * v2);
    memmove(v7, a1, v6);
    memcpy(a1, v4, v6);
  }
}

void DspLib::GainSmoother::initialize(DspLib::GainSmoother *this, unint64_t a2)
{
  if (*(_QWORD *)this != a2)
  {
    *(_QWORD *)this = a2;
    std::vector<float>::resize((uint64_t)this + 112, a2);
  }
}

void DspLib::GainSmoother::configure(DspLib::GainSmoother *this, unint64_t a2, float a3)
{
  float v4;
  float v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __double2 v17;
  float v18;
  float v19;
  float sinval;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;

  v4 = 4.60517021 / a3;
  v5 = fminf(v4, 1.0);
  v6 = (float *)*((_QWORD *)this + 14);
  v7 = *((_QWORD *)this + 15) - (_QWORD)v6;
  *v6 = v5;
  if ((unint64_t)v7 >= 5)
  {
    v8 = 0;
    v9 = v7 >> 2;
    v10 = 1;
    do
    {
      v6[v10] = v5 + (float)((float)(1.0 - v5) * v6[v8]);
      v10 = (v8++ + 2);
    }
    while (v9 > v10);
  }
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this >= a2)
    v11 = a2;
  if (v11 != *((_QWORD *)this + 1))
  {
    *((_QWORD *)this + 1) = v11;
    std::vector<float>::resize((uint64_t)this + 16, v11 + 1);
    std::vector<float>::resize((uint64_t)this + 40, *((_QWORD *)this + 1) + 1);
    std::vector<float>::resize((uint64_t)this + 64, *((_QWORD *)this + 1) + 1);
    v12 = *((_QWORD *)this + 1);
    if (v12 != -1)
    {
      v13 = 0;
      v14 = *((_QWORD *)this + 2);
      v15 = *((_QWORD *)this + 5);
      v16 = *((_QWORD *)this + 8);
      do
      {
        v17 = __sincos_stret(3.14159265 / (double)v12 * (double)v13);
        v18 = v17.__cosval + 1.0;
        *(float *)(v14 + 4 * v13) = v18;
        v19 = 1.0 / (v17.__cosval + 1.0);
        *(float *)(v15 + 4 * v13) = v19;
        sinval = v17.__sinval;
        *(float *)(v16 + 4 * v13++) = sinval;
      }
      while (v12 + 1 > v13);
    }
    std::vector<float>::resize((uint64_t)this + 88, v12);
    v21 = *((_QWORD *)this + 1);
    if (v21)
    {
      v22 = 0;
      v23 = *((_QWORD *)this + 11);
      do
      {
        v24 = tan(3.14159265 / ((double)v21 + (double)v21) * (double)v22);
        *(float *)(v23 + 4 * v22++) = v24;
      }
      while (v21 > v22);
    }
    std::vector<float>::resize((uint64_t)this + 152, v21);
    std::vector<float>::resize((uint64_t)this + 208, *((_QWORD *)this + 1));
    DspLib::GainSmoother::reset(this);
  }
}

void DspLib::GainSmoother::reset(DspLib::GainSmoother *this)
{
  *((_DWORD *)this + 62) = 1065353216;
  *((_QWORD *)this + 17) = 0x3F80000000000000;
  *((_QWORD *)this + 18) = *((_QWORD *)this + 1);
  DspLib::fill(*((float **)this + 19), (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2, 1.0);
  *((_QWORD *)this + 22) = *((_QWORD *)this + 1);
  *((_QWORD *)this + 23) = 0;
}

void DspLib::GainSmoother::gainEstimate(uint64_t a1, vDSP_Length a2, BOOL *a3, float a4)
{
  float v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = *(float *)(a1 + 248);
  *a3 = v7 < a4;
  a3[1] = v7 > a4;
  if (*(float *)(a1 + 140) < v7 || v7 != a4 && (v7 <= a4 || *(_QWORD *)(a1 + 8) >= a2) && v7 >= a4)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 136);
    v8 = std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 208), *(char **)(a1 + 152), *(_QWORD *)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a1 + 176);
    MEMORY[0x1E0C80A78](v8);
    DspLib::GainSmoother::generateGainCurve((DspLib::GainSmoother *)a1, a1 + 192, *(const float **)(a1 + 112), (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2, (float *)((char *)v10 - v9), a2, *(float *)(a1 + 248), a4, 1.0);
  }
}

void DspLib::GainSmoother::generateGainCurve(DspLib::GainSmoother *this, uint64_t a2, const float *a3, int a4, float *__D, vDSP_Length __N, float a7, float a8, float a9)
{
  float v14;
  float v15;
  unint64_t Offset;
  unint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  vDSP_Length v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;

  v14 = *(float *)(a2 + 4);
  if (v14 > a8)
  {
    v14 = a8 * a9;
    v15 = a7 - (float)(a8 * a9);
    Offset = DspLib::GainSmoother::findOffset(this, v15, *(float *)a2);
    *(_QWORD *)(a2 + 48) = Offset;
    v17 = *((_QWORD *)this + 1) - Offset;
    *(_QWORD *)(a2 + 8) = v17;
    std::vector<float>::resize(a2 + 16, v17);
    DspLib::multiplyAdd((const float *)(*((_QWORD *)this + 2) + 4 * *(_QWORD *)(a2 + 48) + 4), *(_QWORD *)(a2 + 8), *(float **)(a2 + 16), v15 * *(float *)(*((_QWORD *)this + 5) + 4 * *(_QWORD *)(a2 + 48)), v14);
    v18 = *(_QWORD *)(a2 + 8);
    if (__N >= v18)
    {
      if (v18)
      {
        memmove(__D, *(const void **)(a2 + 16), 4 * v18);
        v18 = *(_QWORD *)(a2 + 8);
      }
      DspLib::fill(&__D[__N - (__N - v18)], __N - v18, v14);
      v24 = *((_QWORD *)this + 1);
      *(_QWORD *)(a2 + 8) = v24;
      *(_QWORD *)(a2 + 40) = v24;
      *(_QWORD *)(a2 + 48) = 0;
      v19 = 0.0;
    }
    else
    {
      if (__N)
        memmove(__D, *(const void **)(a2 + 16), 4 * __N);
      *(_QWORD *)(a2 + 40) = __N;
      v19 = (float)(v15 * *(float *)(*((_QWORD *)this + 8) + 4 * (__N + *(_QWORD *)(a2 + 48)) + 4))
          * *(float *)(*((_QWORD *)this + 5) + 4 * *(_QWORD *)(a2 + 48));
    }
    *(float *)a2 = v19;
    goto LABEL_19;
  }
  if (v14 >= a7)
  {
    DspLib::multiplyAdd(a3, __N, __D, a8 - a7, a7);
    v25 = *((_QWORD *)this + 1);
    *(_QWORD *)(a2 + 8) = v25;
    *(_QWORD *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)a2 = 0;
    v14 = __D[__N - 1];
LABEL_19:
    *(float *)(a2 + 4) = v14;
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = __N - (v21 - v22);
  if (__N >= v21 - v22)
  {
    if (v21 != v22)
    {
      memmove(__D, (const void *)(*(_QWORD *)(a2 + 16) + 4 * v22), 4 * (v21 - v22));
      v14 = *(float *)(a2 + 4);
    }
    v26 = &__D[__N];
    DspLib::multiplyAdd(a3, v23, &v26[-v23], a8 - v14, v14);
    v27 = *((_QWORD *)this + 1);
    *(_QWORD *)(a2 + 8) = v27;
    *(_QWORD *)(a2 + 40) = v27;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)a2 = 0;
    v14 = *(v26 - 1);
    goto LABEL_19;
  }
  if (__N)
  {
    memmove(__D, (const void *)(*(_QWORD *)(a2 + 16) + 4 * v22), 4 * __N);
    v22 = *(_QWORD *)(a2 + 40);
    v14 = *(float *)(a2 + 4);
  }
  *(float *)a2 = *(float *)a2
               * (float)(*(float *)(*((_QWORD *)this + 8) + 4 * (v22 + *(_QWORD *)(a2 + 48) + __N))
                       / *(float *)(*((_QWORD *)this + 8) + 4 * (v22 + *(_QWORD *)(a2 + 48))));
  *(_QWORD *)(a2 + 40) = v22 + __N;
LABEL_20:
  if (v14 > 0.99885)
    *(_DWORD *)(a2 + 4) = 1065353216;
}

unint64_t DspLib::GainSmoother::findOffset(DspLib::GainSmoother *this, float a2, float a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;

  result = 0;
  if (a2 > 0.0 && a3 > 0.0)
  {
    v5 = *((_QWORD *)this + 1) - 1;
    v6 = *((_QWORD *)this + 11);
    v7 = a3 / a2;
    if (v5 < 2)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = vcvtad_u64_f64((double)(v8 + v5) * 0.5);
        if (v7 > *(float *)(v6 + 4 * v9))
          v8 = v9;
        else
          v5 = v9;
      }
      while (v5 - v8 > 1);
    }
    if (vabds_f32(*(float *)(v6 + 4 * v8), v7) <= vabds_f32(*(float *)(v6 + 4 * v5), v7))
      return v8;
    else
      return v5;
  }
  return result;
}

void DspLib::GainSmoother::process(uint64_t a1, void *__src, vDSP_Length a3, void *__dst, vDSP_Length a5, float a6)
{
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (a6 >= 1.0 && *(float *)(a1 + 140) >= 1.0)
    {
      memmove(__dst, __src, 4 * a5);
    }
    else
    {
      MEMORY[0x1E0C80A78](a1);
      v11 = (float *)((char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      v13 = (float *)(v12 + 248);
      DspLib::GainSmoother::generateGainCurve((DspLib::GainSmoother *)v12, v12 + 136, *(const float **)(v12 + 112), (uint64_t)(*(_QWORD *)(v12 + 120) - *(_QWORD *)(v12 + 112)) >> 2, v11, a5, *(float *)(v12 + 248), v14, 0.99);
      v15 = v11[a5 - 1];
      if (v15 > 0.99885)
        v15 = 1.0;
      *v13 = v15;
      DspLib::multiply((const float *)__src, a3, v11, a5, (float *)__dst);
    }
  }
}

void DspLib::BandCombiner::initialize(DspLib::BandCombiner *this, unint64_t a2)
{
  if (*((_QWORD *)this + 1) != a2)
  {
    *((_QWORD *)this + 1) = a2;
    std::vector<float>::resize((uint64_t)this + 120, a2);
  }
}

void DspLib::BandCombiner::configure(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, float a5)
{
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __double2 v29;
  float v30;
  float v31;
  float sinval;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  unint64_t v37;
  unint64_t v38;

  if (*a1 != a2)
  {
    *a1 = a2;
    std::vector<DspLib::BandCombiner::GainState>::resize((uint64_t *)a1 + 21, a2);
    std::vector<float>::resize((uint64_t)(a1 + 31), *a1);
    DspLib::BandCombiner::reset((float **)a1);
  }
  v9 = 4.60517021 / a5;
  v10 = fminf(v9, 1.0);
  v11 = (float *)a1[15];
  v12 = a1[16] - (_QWORD)v11;
  *v11 = v10;
  if ((unint64_t)v12 >= 5)
  {
    v13 = 0;
    v14 = v12 >> 2;
    v15 = 1;
    do
    {
      v11[v15] = v10 + (float)((float)(1.0 - v10) * v11[v13]);
      v15 = (v13++ + 2);
    }
    while (v14 > v15);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    v16 = 4.60517021 / *(float *)&a4;
    v17 = fminf(v16, 1.0);
    std::vector<float>::resize((uint64_t)(a1 + 18), a1[1]);
    v18 = (float *)a1[18];
    v19 = a1[19] - (_QWORD)v18;
    *v18 = v17;
    if ((unint64_t)v19 >= 5)
    {
      v20 = 0;
      v21 = v19 >> 2;
      v22 = 1;
      do
      {
        v18[v22] = v17 + (float)((float)(1.0 - v17) * v18[v20]);
        v22 = (v20++ + 2);
      }
      while (v21 > v22);
    }
  }
  else
  {
    a1[19] = a1[18];
  }
  v23 = a1[1];
  if (v23 >= a3)
    v23 = a3;
  if (v23 != a1[2])
  {
    a1[2] = v23;
    std::vector<float>::resize((uint64_t)(a1 + 3), v23 + 1);
    std::vector<float>::resize((uint64_t)(a1 + 6), a1[2] + 1);
    std::vector<float>::resize((uint64_t)(a1 + 9), a1[2] + 1);
    v24 = a1[2];
    if (v24 != -1)
    {
      v25 = 0;
      v26 = a1[3];
      v27 = a1[6];
      v28 = a1[9];
      do
      {
        v29 = __sincos_stret(3.14159265 / (double)v24 * (double)v25);
        v30 = v29.__cosval + 1.0;
        *(float *)(v26 + 4 * v25) = v30;
        v31 = 1.0 / (v29.__cosval + 1.0);
        *(float *)(v27 + 4 * v25) = v31;
        sinval = v29.__sinval;
        *(float *)(v28 + 4 * v25++) = sinval;
      }
      while (v24 + 1 > v25);
    }
    std::vector<float>::resize((uint64_t)(a1 + 12), v24);
    v33 = a1[2];
    if (v33)
    {
      v34 = 0;
      v35 = a1[12];
      do
      {
        v36 = tan(3.14159265 / ((double)v33 + (double)v33) * (double)v34);
        *(float *)(v35 + 4 * v34++) = v36;
      }
      while (v33 > v34);
    }
    v37 = a1[21];
    v38 = a1[22];
    if (v37 != v38)
    {
      do
      {
        std::vector<float>::resize(v37 + 16, a1[2]);
        v37 += 56;
      }
      while (v37 != v38);
      v33 = a1[2];
    }
    std::vector<float>::resize((uint64_t)(a1 + 26), v33);
    DspLib::BandCombiner::reset((float **)a1);
  }
}

void std::vector<DspLib::BandCombiner::GainState>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::BandCombiner::GainState>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 40);
      if (v8)
      {
        *(_QWORD *)(v3 - 32) = v8;
        operator delete(v8);
      }
      v3 -= 56;
    }
    a1[1] = v7;
  }
}

void DspLib::BandCombiner::reset(float **this)
{
  float *v2;
  float *v3;
  float *v4;

  DspLib::fill(this[31], this[32] - this[31], 1.0);
  v2 = this[21];
  v3 = this[22];
  if (v2 != v3)
  {
    v4 = this[2];
    do
    {
      *(_QWORD *)v2 = 0x3F80000000000000;
      *((_QWORD *)v2 + 1) = v4;
      DspLib::fill(*((float **)v2 + 2), (uint64_t)(*((_QWORD *)v2 + 3) - *((_QWORD *)v2 + 2)) >> 2, 1.0);
      v4 = this[2];
      *((_QWORD *)v2 + 5) = v4;
      *((_QWORD *)v2 + 6) = 0;
      v2 += 14;
    }
    while (v2 != v3);
  }
}

BOOL DspLib::BandCombiner::isReleasing(const float **this)
{
  return DspLib::minv(this[31], this[32] - this[31]) < 1.0;
}

void DspLib::BandCombiner::gainEstimate(uint64_t a1, uint64_t a2, uint64_t a3, vDSP_Length a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  float *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float v20;
  BOOL *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  vDSP_Length v36;
  vDSP_Length v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = a4 - 1;
  v37 = a4;
  MEMORY[0x1E0C80A78](a1);
  v12 = (float *)((char *)&v31 - v11);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v34 = a1 + 120;
    v35 = a1 + 144;
    v16 = (_OWORD *)(a1 + 192);
    v32 = (char *)(a1 + 208);
    v33 = (_OWORD *)(a1 + 232);
    v17 = 1;
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 248);
      v19 = *(float *)(v18 + 4 * v15);
      v20 = *(float *)(a2 + 4 * v15);
      v21 = (BOOL *)(a5 + 2 * v15);
      *v21 = v19 < v20;
      v21[1] = v20 < v19;
      v22 = *(_QWORD *)(a1 + 168);
      v23 = v22 + 56 * v15;
      if (*(float *)(v23 + 4) < v19)
        goto LABEL_4;
      if (v20 != v19 && (v20 >= v19 || *(_QWORD *)(a1 + 16) >= v37))
        break;
      *(float *)(a7 + 4 * v15) = v20;
LABEL_13:
      v15 = v17;
      if (v14 <= v17++)
        return;
    }
    if (v19 < v20)
    {
      v29 = *(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 144) && v17 == 1;
      v30 = 120;
      if (v29)
        v30 = 144;
      *(float *)(a7 + 4 * v15) = v19 + (float)((float)(v20 - v19) * *(float *)(*(_QWORD *)(a1 + v30) + 4 * v36));
      goto LABEL_13;
    }
LABEL_4:
    *v16 = *(_OWORD *)v23;
    if (v16 != (_OWORD *)v23)
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v32, *(char **)(v22 + 56 * v15 + 16), *(_QWORD *)(v22 + 56 * v15 + 24), (uint64_t)(*(_QWORD *)(v22 + 56 * v15 + 24) - *(_QWORD *)(v22 + 56 * v15 + 16)) >> 2);
      v18 = *(_QWORD *)(a1 + 248);
    }
    v24 = v34;
    *v33 = *(_OWORD *)(v22 + 56 * v15 + 40);
    v25 = *(float *)(v18 + 4 * v15);
    v26 = 120;
    if (v17 == 1 && *(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 144))
      v26 = 144;
    v27 = v35;
    if (v17 != 1 || *(_QWORD *)(a1 + 152) == *(_QWORD *)(a1 + 144))
      v27 = v24;
    DspLib::BandCombiner::generateGainCurve((DspLib::BandCombiner *)a1, a1 + 192, *(const float **)(a1 + v26), (uint64_t)(*(_QWORD *)(v27 + 8) - *(_QWORD *)(a1 + v26)) >> 2, v12, v37, v25, *(float *)(a2 + 4 * v15), 1.0);
    *(float *)(a7 + 4 * v15) = v12[v36];
    v14 = *(_QWORD *)a1;
    goto LABEL_13;
  }
}

void DspLib::BandCombiner::generateGainCurve(DspLib::BandCombiner *this, uint64_t a2, const float *a3, int a4, float *__D, vDSP_Length __N, float a7, float a8, float a9)
{
  float v14;
  float v15;
  unint64_t Offset;
  unint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  vDSP_Length v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;

  v14 = *(float *)(a2 + 4);
  if (v14 > a8)
  {
    v14 = a8 * a9;
    v15 = a7 - (float)(a8 * a9);
    Offset = DspLib::BandCombiner::findOffset(this, v15, *(float *)a2);
    *(_QWORD *)(a2 + 48) = Offset;
    v17 = *((_QWORD *)this + 2) - Offset;
    *(_QWORD *)(a2 + 8) = v17;
    std::vector<float>::resize(a2 + 16, v17);
    DspLib::multiplyAdd((const float *)(*((_QWORD *)this + 3) + 4 * *(_QWORD *)(a2 + 48) + 4), *(_QWORD *)(a2 + 8), *(float **)(a2 + 16), v15 * *(float *)(*((_QWORD *)this + 6) + 4 * *(_QWORD *)(a2 + 48)), v14);
    v18 = *(_QWORD *)(a2 + 8);
    if (__N >= v18)
    {
      if (v18)
      {
        memmove(__D, *(const void **)(a2 + 16), 4 * v18);
        v18 = *(_QWORD *)(a2 + 8);
      }
      DspLib::fill(&__D[__N - (__N - v18)], __N - v18, v14);
      v24 = *((_QWORD *)this + 2);
      *(_QWORD *)(a2 + 8) = v24;
      *(_QWORD *)(a2 + 40) = v24;
      *(_QWORD *)(a2 + 48) = 0;
      v19 = 0.0;
    }
    else
    {
      if (__N)
        memmove(__D, *(const void **)(a2 + 16), 4 * __N);
      *(_QWORD *)(a2 + 40) = __N;
      v19 = (float)(v15 * *(float *)(*((_QWORD *)this + 9) + 4 * (__N + *(_QWORD *)(a2 + 48)) + 4))
          * *(float *)(*((_QWORD *)this + 6) + 4 * *(_QWORD *)(a2 + 48));
    }
    *(float *)a2 = v19;
    goto LABEL_19;
  }
  if (v14 >= a7)
  {
    DspLib::multiplyAdd(a3, __N, __D, a8 - a7, a7);
    v25 = *((_QWORD *)this + 2);
    *(_QWORD *)(a2 + 8) = v25;
    *(_QWORD *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)a2 = 0;
    v14 = __D[__N - 1];
LABEL_19:
    *(float *)(a2 + 4) = v14;
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = __N - (v21 - v22);
  if (__N >= v21 - v22)
  {
    if (v21 != v22)
    {
      memmove(__D, (const void *)(*(_QWORD *)(a2 + 16) + 4 * v22), 4 * (v21 - v22));
      v14 = *(float *)(a2 + 4);
    }
    v26 = &__D[__N];
    DspLib::multiplyAdd(a3, v23, &v26[-v23], a8 - v14, v14);
    v27 = *((_QWORD *)this + 2);
    *(_QWORD *)(a2 + 8) = v27;
    *(_QWORD *)(a2 + 40) = v27;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)a2 = 0;
    v14 = *(v26 - 1);
    goto LABEL_19;
  }
  if (__N)
  {
    memmove(__D, (const void *)(*(_QWORD *)(a2 + 16) + 4 * v22), 4 * __N);
    v22 = *(_QWORD *)(a2 + 40);
    v14 = *(float *)(a2 + 4);
  }
  *(float *)a2 = *(float *)a2
               * (float)(*(float *)(*((_QWORD *)this + 9) + 4 * (v22 + *(_QWORD *)(a2 + 48) + __N))
                       / *(float *)(*((_QWORD *)this + 9) + 4 * (v22 + *(_QWORD *)(a2 + 48))));
  *(_QWORD *)(a2 + 40) = v22 + __N;
LABEL_20:
  if (v14 > 0.99885)
    *(_DWORD *)(a2 + 4) = 1065353216;
}

unint64_t DspLib::BandCombiner::findOffset(DspLib::BandCombiner *this, float a2, float a3)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;

  result = 0;
  if (a2 > 0.0 && a3 > 0.0)
  {
    v5 = *((_QWORD *)this + 2) - 1;
    v6 = *((_QWORD *)this + 12);
    v7 = a3 / a2;
    if (v5 < 2)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = vcvtad_u64_f64((double)(v8 + v5) * 0.5);
        if (v7 > *(float *)(v6 + 4 * v9))
          v8 = v9;
        else
          v5 = v9;
      }
      while (v5 - v8 > 1);
    }
    if (vabds_f32(*(float *)(v6 + 4 * v8), v7) <= vabds_f32(*(float *)(v6 + 4 * v5), v7))
      return v8;
    else
      return v5;
  }
  return result;
}

void DspLib::BandCombiner::process(DspLib::BandCombiner *a1, _QWORD *a2, uint64_t a3, int a4, float *a5, vDSP_Length __N)
{
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (__N)
  {
    DspLib::clear(a5, __N);
    v23[1] = v23;
    MEMORY[0x1E0C80A78](v11);
    v13 = (float *)((char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (*(_QWORD *)a1)
    {
      v14 = 0;
      v24 = (_QWORD *)((char *)a1 + 144);
      v15 = 1;
      do
      {
        v16 = *(float *)(a3 + 4 * v14);
        v17 = *((_QWORD *)a1 + 21);
        if (v16 >= 1.0 && *(float *)(v17 + 56 * v14 + 4) >= 1.0)
        {
          DspLib::add(a5, __N, *(const float **)(*a2 + 8 * v14));
        }
        else
        {
          v18 = v17 + 56 * v14;
          v19 = 120;
          if (v15 == 1 && *((_QWORD *)a1 + 19) != *((_QWORD *)a1 + 18))
            v19 = 144;
          v20 = v24;
          if (v15 != 1 || *((_QWORD *)a1 + 19) == *((_QWORD *)a1 + 18))
            v20 = (_QWORD *)((char *)a1 + 120);
          DspLib::BandCombiner::generateGainCurve(a1, v18, *(const float **)((char *)a1 + v19), (uint64_t)(v20[1] - *(_QWORD *)((char *)a1 + v19)) >> 2, v13, __N, *(float *)(*((_QWORD *)a1 + 31) + 4 * v14), v16, 0.99);
          v21 = v13[__N - 1];
          if (v21 > 0.99885)
            v21 = 1.0;
          *(float *)(*((_QWORD *)a1 + 31) + 4 * v14) = v21;
          DspLib::multiplyAccumulate(a5, __N, v13, __N, *(const float **)(*a2 + 8 * v14));
        }
        v14 = v15;
      }
      while (*(_QWORD *)a1 > (unint64_t)v15++);
    }
  }
}

uint64_t std::vector<DspLib::ComplexVector>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  DspLib::ComplexVector *v14;
  uint64_t v15;
  DspLib::ComplexVector *v16;
  uint64_t v17;
  _QWORD v18[2];
  DspLib::ComplexVector *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
    return std::vector<DspLib::ComplexVector>::__construct_at_end((uint64_t)a1, a2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
  v9 = v8 + a2;
  if (v8 + a2 > 0x333333333333333)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x199999999999999)
    v11 = 0x333333333333333;
  else
    v11 = v9;
  v21 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v4, v11);
  else
    v12 = 0;
  v14 = (DspLib::ComplexVector *)&v12[80 * v8];
  v18[0] = v12;
  v18[1] = v14;
  v19 = v14;
  v20 = &v12[80 * v11];
  v15 = 5 * a2;
  v16 = (DspLib::ComplexVector *)((char *)v14 + 80 * a2);
  v17 = 16 * v15;
  do
  {
    DspLib::ComplexVector::ComplexVector(v14, 0, 0);
    v14 = (DspLib::ComplexVector *)((char *)v14 + 80);
    v17 -= 80;
  }
  while (v17);
  v19 = v16;
  std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(a1, v18);
  return std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)v18);
}

void sub_1B60DAE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::ComplexVector>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  DspLib::ComplexVector *v3;
  DspLib::ComplexVector *v4;
  uint64_t v5;

  v2 = result;
  v3 = *(DspLib::ComplexVector **)(result + 8);
  if (a2)
  {
    v4 = (DspLib::ComplexVector *)((char *)v3 + 80 * a2);
    v5 = 80 * a2;
    do
    {
      result = DspLib::ComplexVector::ComplexVector(v3, 0, 0);
      v3 = (DspLib::ComplexVector *)((char *)v3 + 80);
      v5 -= 80;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_1B60DAE9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<DspLib::BandCombiner::GainState>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[56 * v8];
    v18 = &v12[56 * v11];
    v14 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<DspLib::BandCombiner::GainState>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<DspLib::BandCombiner::GainState>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1B60DB034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DspLib::BandCombiner::GainState>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::BandCombiner::GainState>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v13 + 1) - 56;
      *((_QWORD *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::BandCombiner::GainState>,std::reverse_iterator<DspLib::BandCombiner::GainState*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<DspLib::BandCombiner::GainState>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DspLib::BandCombiner::GainState>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<DspLib::BandCombiner::GainState>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(_QWORD *)(v2 - 32) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

float32x2_t DspLib::LowFlow::EnergyToVelocityLimit::setParameters(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float32x2_t v9;
  BOOL v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t result;

  v2 = 24 * *(_DWORD *)a1;
  v3 = *(float *)(a2 + 4 * (v2 + 12));
  v4 = *(float *)(a2 + 4 * (v2 + 14));
  v5 = *(float *)(a2 + 4 * (v2 + 16));
  v6 = v3 > v4 || v4 > v5;
  if (!v6 && v5 <= *(float *)(a1 + 44))
  {
    *(float *)(a1 + 20) = v3;
    *(float *)(a1 + 24) = v4;
    *(float *)(a1 + 28) = v5;
  }
  v7 = *(float *)(a2 + 4 * (v2 + 13));
  v8 = *(float *)(a2 + 4 * (v2 + 15));
  v9 = *(float32x2_t *)(a2 + 4 * (v2 + 17));
  v10 = v7 < v8 && v8 < v9.f32[0];
  if (v10 && (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v9, 1), v9).u8[0] & 1) != 0)
  {
    *(float *)(a1 + 4) = v7;
    *(float *)(a1 + 8) = v8;
    *(float32x2_t *)(a1 + 12) = v9;
  }
  else
  {
    v7 = *(float *)(a1 + 4);
    v8 = *(float *)(a1 + 8);
    v9 = *(float32x2_t *)(a1 + 12);
  }
  v11 = v8 - v7;
  v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0);
  v12.f32[0] = v8;
  v13 = vsub_f32(v9, v12);
  v14 = *(float32x2_t *)(a1 + 24);
  v15.i32[0] = vdup_lane_s32((int32x2_t)v14, 1).u32[0];
  *(float *)(a1 + 32) = (float)(v14.f32[0] - *(float *)(a1 + 20)) / v11;
  v15.i32[1] = *(_DWORD *)(a1 + 44);
  result = vdiv_f32(vsub_f32(v15, v14), v13);
  *(float32x2_t *)(a1 + 36) = result;
  return result;
}

float DspLib::LowFlow::EnergyToVelocityLimit::process(DspLib::LowFlow::EnergyToVelocityLimit *this, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v2 = *((float *)this + 1);
  if (v2 >= a2)
    return *((float *)this + 5);
  v3 = *((float *)this + 2);
  if (v3 >= a2)
  {
    v5 = a2 - v2;
    v6 = *((float *)this + 5);
    v7 = *((float *)this + 8);
  }
  else
  {
    v4 = *((float *)this + 3);
    if (v4 >= a2)
    {
      v5 = a2 - v3;
      v6 = *((float *)this + 6);
      v7 = *((float *)this + 9);
    }
    else
    {
      v5 = a2 - v4;
      v6 = *((float *)this + 7);
      v7 = *((float *)this + 10);
    }
  }
  return v6 + (float)(v7 * v5);
}

float DspLib::LowFlow::Controller::setAttenuationLimit(float *a1, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v2 = 24 * *(_DWORD *)a1;
  v3 = *(float *)(a2 + 4 * (v2 + 21));
  v4 = *(float *)(a2 + 4 * (v2 + 25));
  if (v4 <= v3)
  {
    a1[13] = v3;
    a1[14] = v4;
  }
  v5 = *(float *)(a2 + 16);
  v6 = *(float *)(a2 + 4 * (v2 + 26));
  v7 = a1[14];
  if (v5 > v6)
    v7 = v7 + (float)((float)((float)(v5 - v6) / (float)-v6) * (float)(a1[13] - v7));
  return DspLib::dB2Amp((DspLib *)a1, -v7);
}

uint32x2_t DspLib::LowFlow::Controller::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v7;
  float32x2_t v8;
  float v9;
  uint32x2_t result;

  *(float *)(a1 + 60) = DspLib::LowFlow::Controller::setAttenuationLimit((float *)a1, a2);
  DspLib::LowFlow::EnergyToVelocityLimit::setParameters(a1 + 4, a2);
  v7 = 24 * *(_DWORD *)a1;
  v8.i32[0] = *(_DWORD *)(a2 + 4 * (v7 + 23));
  v9 = *(float *)(a2 + 4 * (v7 + 24));
  if (v8.f32[0] >= v9)
  {
    v8 = *(float32x2_t *)(a1 + 68);
  }
  else
  {
    *(_DWORD *)(a1 + 68) = v8.i32[0];
    *(float *)(a1 + 72) = v9;
    v8.f32[1] = v9;
  }
  result = vcvt_u32_f32(vrnda_f32(vdiv_f32(vmul_n_f32(v8, (float)a4), (float32x2_t)vdup_n_s32(0x473B8000u))));
  *(uint32x2_t *)(a1 + 76) = result;
  return result;
}

float DspLib::LowFlow::Controller::process(uint64_t a1, uint64_t a2, DspLib::LowFlow *a3, uint64_t a4, float *a5, vDSP_Length a6)
{
  float *v11;
  int32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float v15;
  float result;
  int v17;

  *(float *)v12.i32 = DspLib::LowFlow::EnergyToVelocityLimit::process((DspLib::LowFlow::EnergyToVelocityLimit *)(a1 + 4), *(float *)(a2 + 4));
  *(_DWORD *)(a1 + 88) = v12.i32[0];
  v13 = (float32x2_t)vdup_lane_s32(v12, 0);
  v14 = vdiv_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, *(float32x2_t *)(a1 + 92)), (int8x8_t)v13, *(int8x8_t *)(a1 + 92)), v13);
  if (v14.f32[0] < v14.f32[1])
    v14.f32[0] = v14.f32[1];
  v15 = 1.0 / v14.f32[0];
  if (v15 < *(float *)(a1 + 60))
    v15 = *(float *)(a1 + 60);
  *(float *)(a1 + 64) = v15;
  DspLib::LowFlow::velocityClipper(a3, (const float *)*(unsigned int *)(a1 + 76), *(_DWORD *)(a1 + 80), v15, a5, a6, v11);
  result = *(float *)(a1 + 92);
  v17 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)a2;
  *(float *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 84) = v17;
  return result;
}

void DspLib::LowFlow::velocityClipper(DspLib::LowFlow *this, const float *a2, unsigned int a3, float a4, float *a5, vDSP_Length a6, float *a7)
{
  unsigned int v10;
  const float *v12;
  vDSP_Length v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  uint64_t v32;

  v10 = a2;
  v32 = *MEMORY[0x1E0C80C00];
  v12 = (const float *)((char *)this + 4 * a2);
  v13 = a3 - a2;
  v14 = DspLib::rms(v12, v13);
  if (a4 >= 1.0 || v14 <= 0.0)
  {
    DspLib::fill(a5, a6, 1.0);
  }
  else
  {
    v15 = DspLib::maxv(v12, v13);
    v16 = v15 * a4;
    MEMORY[0x1E0C80A78](v17);
    v19 = (float *)((char *)&v30 - v18);
    DspLib::clip(v12, v13, (float *)((char *)&v30 - v18), -1.0, v15 * a4);
    v20 = DspLib::rms(v19, v13);
    if (fabsf(v20 - (float)(a4 * v14)) > (float)(v14 * 0.01))
    {
      v21 = v14 * a4;
      v30 = -a4;
      v31 = a4;
      v22 = v20 <= (float)(v14 * a4);
      if (v20 <= (float)(v14 * a4))
        v23 = v15 * a4;
      else
        v23 = 0.0;
      if (v20 <= (float)(v14 * a4))
        v24 = v20;
      else
        v24 = 0.0;
      if (v20 <= (float)(v14 * a4))
        v25 = v15;
      else
        v25 = v15 * a4;
      if (v22)
        v26 = v14;
      else
        v26 = v20;
      v27 = 20;
      do
      {
        v16 = v23
            + (float)((float)((float)-(float)(v24 - (float)(v31 * v14)) / (float)(v26 - v24)) * (float)(v25 - v23));
        DspLib::clip(v12, v13, v19, -1.0, v16);
        v28 = DspLib::rms(v19, v13);
        if (!--v27)
          break;
        if (v28 <= v21)
        {
          v24 = v28;
        }
        else
        {
          v26 = v28;
          v25 = v16;
        }
        if (v28 <= v21)
          v23 = v16;
      }
      while (fabsf(v28 + (float)(v30 * v14)) > (float)(v14 * 0.01));
    }
    DspLib::fill(a5, v10, 1.0);
    v29 = &a5[v10];
    DspLib::svdiv(v12, v13, v29, v16);
    DspLib::clip(v29, v13, 0.0, 1.0);
    DspLib::fill(&a5[a3], a6 - a3, 1.0);
  }
}

float DspLib::LowFlow::Controller::status(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  DspLib *v5;
  float v6;
  int v7;
  int v8;
  float result;

  v4 = 750 * *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4 * v4) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a2 + 4 * (v4 + 425)) = *(_DWORD *)(a1 + 88);
  *(float *)(a2 + 4 * (750 * *(_DWORD *)a1 + 426)) = -DspLib::amp2dBSafe((DspLib *)a1, *(float *)(a1 + 64), 0.000001);
  v6 = DspLib::amp2dBSafe(v5, *(float *)(a1 + 60), 0.000001);
  v7 = *(_DWORD *)(a1 + 4);
  v8 = 750 * *(_DWORD *)a1;
  *(float *)(a2 + 4 * (v8 + 427)) = -v6;
  *(_DWORD *)(a2 + 4 * (v8 + 424)) = *(_DWORD *)(a1 + 84);
  result = *(float *)(a1 + 48);
  *(float *)(a2 + 4 * ((750 * v7) | 1u)) = result;
  return result;
}

void DspLib::LowFlow::Mitigator::initialize(DspLib::LowFlow::Mitigator *this, int a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  *(_DWORD *)this = a2;
  *((_BYTE *)this + 16) = a3;
  *((_DWORD *)this + 14) = a2;
  *((_DWORD *)this + 15) = a2;
  if (a3)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    v5 = *((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v4;
    if (v5)
      std::default_delete<DspLib::LinearDelay>::operator()[abi:ne180100]((uint64_t)this + 224, v5);
  }
  DspLib::LowFlow::Mitigator::reset(this);
}

void DspLib::LowFlow::Mitigator::reset(DspLib::LowFlow::Mitigator *this)
{
  float **v2;
  float **v3;
  uint64_t v4;

  v2 = (float **)*((_QWORD *)this + 6);
  if (v2)
    DspLib::FFT::PartialFrameForwardSTFT::reset(v2);
  *((_QWORD *)this + 18) = 1067030938;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  v3 = (float **)*((_QWORD *)this + 23);
  if (v3)
    DspLib::FFT::PartialFrameForwardSTFT::reset(v3);
  DspLib::fill(*((float **)this + 24), (uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2, 1.0);
  v4 = *((_QWORD *)this + 28);
  if (v4)
    DspLib::clear(*(float **)v4, (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
}

void DspLib::LowFlow::Mitigator::uninitialize(DspLib::LowFlow::Mitigator *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 6);
  v2 = (_QWORD *)((char *)this + 48);
  v3 = v4;
  *(v2 - 5) = 0;
  *((_BYTE *)v2 - 32) = 0;
  *v2 = 0;
  if (v4)
    std::default_delete<DspLib::FFT::PartialFrameForwardSTFT>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
    std::default_delete<DspLib::FFT::PartialFrameInverseSTFT>::operator()[abi:ne180100]((uint64_t)this + 184, v5);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
  *((_QWORD *)this + 25) = *((_QWORD *)this + 24);
}

uint32x2_t DspLib::LowFlow::Mitigator::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v4 = a4;
  if (*(_QWORD *)(a1 + 8) != a4)
  {
    *(_QWORD *)(a1 + 8) = a4;
    std::vector<float>::resize(a1 + 24, a4);
    DspLib::makePeriodicHannWindow(*(_DWORD **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    DspLib::multiply(*(float **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, 256.0 / (float)*(unint64_t *)(a1 + 8));
    DspLib::sqrt(*(float **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    v8 = operator new();
    DspLib::FFT::PartialFrameForwardSTFT::PartialFrameForwardSTFT();
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    if (v9)
      std::default_delete<DspLib::FFT::PartialFrameForwardSTFT>::operator()[abi:ne180100](a1 + 48, v9);
    std::vector<float>::resize(a1 + 160, *(_QWORD *)(a1 + 8));
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 160), *(char **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    DspLib::multiply(*(float **)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 2, 0.5 / (float)*(unint64_t *)(a1 + 8));
    v10 = operator new();
    DspLib::FFT::PartialFrameInverseSTFT::PartialFrameInverseSTFT();
    v11 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v10;
    if (v11)
      std::default_delete<DspLib::FFT::PartialFrameInverseSTFT>::operator()[abi:ne180100](a1 + 184, v11);
    v12 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 16))
    {
      DspLib::LinearDelay::setLength(*(float ***)(a1 + 224), v12 - 128);
      v12 = *(_QWORD *)(a1 + 8);
    }
    std::vector<float>::resize(a1 + 192, (v12 >> 1) + 1);
    v4 = *(_QWORD *)(a1 + 8);
  }
  v13 = 24 * *(_DWORD *)a1;
  *(_BYTE *)(a1 + 220) = *(float *)(a2 + 4 * (v13 + 8)) != 0.0;
  *(_BYTE *)(a1 + 221) = *(float *)(a2 + 4 * (v13 + 9)) != 0.0;
  *(float *)(a1 + 216) = 1.0
                       - expf(-1.0/ (float)((float)((float)(*(float *)(a2 + 4 * (v13 + 22)) * 1000.0) * 375.0)/ 1000.0));
  return DspLib::LowFlow::Controller::setParameters(a1 + 56, a2, a3, v4);
}

void sub_1B60DBBEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E0C40EA884CA1);
  _Unwind_Resume(a1);
}

void DspLib::LowFlow::Mitigator::releaseSmooth(float **this, const float *a2, vDSP_Length a3)
{
  uint64_t v6;
  const float *v7;
  uint64_t v8;
  const float *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](this);
  v7 = (const float *)((char *)v10 - v6);
  vDSP_vsbsm(v9, 1, *(const float **)(v8 + 192), 1, (const float *)(v8 + 216), (float *)((char *)v10 - v6), 1, a3);
  DspLib::add(this[24], this[25] - this[24], v7);
  DspLib::vmin(this[24], this[25] - this[24], a2);
}

void DspLib::LowFlow::Mitigator::process(uint64_t a1, char *a2, int a3, int a4, vDSP_Length a5, float *a6, vDSP_Length __N, int a8, char *a9, float *a10)
{
  unsigned int v10;
  uint64_t v15;
  const float *v16;
  uint64_t v17;
  DspLib::LowFlow *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  DSPSplitComplex v23;
  uint64_t v24;
  uint64_t v25;

  v10 = __N;
  v25 = *MEMORY[0x1E0C80C00];
  if (a8)
  {
    MEMORY[0x1E0C80A78](a1);
    v16 = (const float *)((char *)&v23 - v15);
    DspLib::LowFlow::Controller::process(a1 + 56, v17, v18, (uint64_t)v18, (float *)((char *)&v23 - v15), a5);
    if (*(_BYTE *)(a1 + 220))
      DspLib::LowFlow::Mitigator::releaseSmooth((float **)a1, v16, a5);
    else
      DspLib::fill(*(float **)(a1 + 192), (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2, 1.0);
  }
  if (*(_BYTE *)(a1 + 221))
  {
    DspLib::clear(a6, v10);
    if (a10)
      DspLib::clear(a10, v10);
  }
  else
  {
    MEMORY[0x1E0C80A78](a1);
    MEMORY[0x1E0C80A78](v19);
    v20 = *(_QWORD *)(a1 + 8) >> 1;
    v23.realp = v22;
    v23.imagp = (float *)((char *)&v23 - v21);
    v24 = v20;
    DspLib::FFT::PartialFrameForwardSTFT::process(*(uint64_t **)(a1 + 48), a2, v10, &v23);
    DspLib::FFT::multiply((uint64_t)&v23, *(_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 2);
    DspLib::FFT::PartialFrameInverseSTFT::process(*(float ***)(a1 + 184), &v23, a6, v10);
    if (a9 && a10)
      DspLib::LinearDelay::process(*(const void ***)(a1 + 224), a9, v10, (char *)a10);
  }
}

float DspLib::LowFlow::Mitigator::status(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;

  v4 = *(_BYTE **)(a1 + 192);
  v5 = *(_BYTE **)(a1 + 200);
  if (v5 != v4)
    memmove((void *)(a2 + 4 * (750 * *(_DWORD *)a1 + 428)), v4, v5 - v4);
  return DspLib::LowFlow::Controller::status(a1 + 56, a2);
}

void std::default_delete<DspLib::LinearDelay>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
}

void std::default_delete<DspLib::FFT::PartialFrameForwardSTFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(_QWORD *)(a2 + 48) = v3;
      operator delete(v3);
    }
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(a2);
    JUMPOUT(0x1BCC95CECLL);
  }
}

void std::default_delete<DspLib::FFT::PartialFrameInverseSTFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(_QWORD *)(a2 + 48) = v3;
      operator delete(v3);
    }
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(a2);
    JUMPOUT(0x1BCC95CECLL);
  }
}

BOOL DspLib::AnalyticSignalTransformBase::initialize(DspLib::AnalyticSignalTransformBase *this, unsigned int a2)
{
  int v3;
  int v4;
  BOOL v5;
  char *v7;
  int v8;

  v3 = *((unsigned __int8 *)this + 8);
  v4 = *((_DWORD *)this + 3);
  if (a2 >= 0x41)
  {
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    v8 = 15;
  }
  else
  {
    if (a2)
    {
      *((_DWORD *)this + 3) = a2;
      goto LABEL_4;
    }
    v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    v8 = 16;
  }
  printf("DSP Sound assertion in %s at line %d\n", v7, v8);
  ++DspLibDebug::mAssertCounter;
LABEL_4:
  if (v3)
    v5 = v4 == a2;
  else
    v5 = 0;
  return !v5;
}

BOOL DspLib::AnalyticSignalTransformBiquad::initialize(DspLib::AnalyticSignalTransformBiquad *this, unsigned int a2)
{
  _BOOL8 v3;
  vDSP_Length v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v3 = DspLib::AnalyticSignalTransformBase::initialize(this, a2);
  v8[0] = xmmword_1B662ABC0;
  v8[1] = unk_1B662ABD0;
  v9 = 0x3D81CD60BF567621;
  v6[0] = xmmword_1B662ABE8;
  v6[1] = unk_1B662ABF8;
  v7 = 0x3F5EE547BFEF2B02;
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 16), (2 * *((_DWORD *)this + 3)), 2uLL);
  if (*((_DWORD *)this + 3))
  {
    v4 = 0;
    do
    {
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v8, 2, 0, v4);
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v6, 2, 0, (v4++ + *((_DWORD *)this + 3)));
    }
    while (v4 < *((unsigned int *)this + 3));
  }
  *((_BYTE *)this + 8) = 1;
  (*(void (**)(DspLib::AnalyticSignalTransformBiquad *))(*(_QWORD *)this + 40))(this);
  return v3;
}

void DspLib::AnalyticSignalTransformBiquad::uninitialize(DspLib::AnalyticSignalTransformBiquad *this)
{
  *((_BYTE *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 16));
}

void DspLib::AnalyticSignalTransformBiquad::reset(DspLib::AnalyticSignalTransformBiquad *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 64));
}

void DspLib::AnalyticSignalTransformBiquad::process(uint64_t a1, uint64_t a2, const void **a3, const void **a4)
{
  unint64_t v8;
  uint64_t v9;
  float ***v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  const void *v17;
  float **v18;
  char *v19;
  uint64_t v20;
  float **v21[3];
  float ***v22;
  float **v23;
  float **v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)(a2 + 16))
    {
      MEMORY[0x1E0C80A78](a1);
      v10 = &v21[-v9 - 1];
      if (v8 >= 0x200)
        v11 = 512;
      else
        v11 = v8;
      bzero(&v21[-v9 - 1], v11);
      v12 = *(unsigned int *)(a1 + 12);
      v13 = (2 * v12);
      MEMORY[0x1E0C80A78](v14);
      if (v15 >= 0x200)
        v16 = 512;
      else
        v16 = v15;
      bzero(&v21[-v13 - 1], v16);
      if ((_DWORD)v12)
      {
        v17 = *(const void **)a2;
        v20 = (uint64_t)&v20;
        memmove(v10, v17, 8 * v12);
        memmove(&v10[v12], v17, 8 * v12);
        memmove(&v21[-v13 - 1], *a3, 8 * v12);
        memmove(&(&v21[v12 - 1])[-v13], *a4, 8 * v12);
      }
      v18 = *(float ***)(a2 + 16);
      v22 = v10;
      v23 = (float **)(2 * v12);
      v24 = v18;
      v21[0] = (float **)&v21[-v13 - 1];
      v21[1] = v23;
      v21[2] = v18;
      DspLib::Biquad::Filter::process((_QWORD *)(a1 + 16), (uint64_t)&v22, v21);
    }
  }
  else
  {
    v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v19, 81);
    ++DspLibDebug::mAssertCounter;
  }
}

BOOL DspLib::AnalyticSignalTransformAllpass::initialize(DspLib::AnalyticSignalTransformAllpass *this, unsigned int a2)
{
  _BOOL8 v3;
  vDSP_Length v4;
  vDSP_Length v5;
  unint64_t v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v3 = DspLib::AnalyticSignalTransformBase::initialize(this, a2);
  v9[2] = xmmword_1B662AC30;
  v9[3] = unk_1B662AC40;
  v9[4] = xmmword_1B662AC50;
  v9[0] = xmmword_1B662AC10;
  v9[1] = unk_1B662AC20;
  v8[2] = xmmword_1B662AC80;
  v8[3] = unk_1B662AC90;
  v8[4] = xmmword_1B662ACA0;
  v4 = (2 * *((_DWORD *)this + 3));
  v8[0] = xmmword_1B662AC60;
  v8[1] = unk_1B662AC70;
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 16), v4, 4uLL);
  if (*((_DWORD *)this + 3))
  {
    v5 = 0;
    do
    {
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v9, 4, 0, v5);
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v8, 4, 0, (v5++ + *((_DWORD *)this + 3)));
      v6 = *((unsigned int *)this + 3);
    }
    while (v5 < v6);
  }
  else
  {
    v6 = 0;
  }
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 88, v6);
  *((_BYTE *)this + 8) = 1;
  (*(void (**)(DspLib::AnalyticSignalTransformAllpass *))(*(_QWORD *)this + 40))(this);
  return v3;
}

void std::vector<DspLib::SingleSampleDelay>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<DspLib::SingleSampleDelay>::__append((char **)a1, a2 - v2);
  }
}

void DspLib::AnalyticSignalTransformAllpass::uninitialize(DspLib::AnalyticSignalTransformAllpass *this)
{
  *((_BYTE *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 16));
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
}

void DspLib::AnalyticSignalTransformAllpass::reset(DspLib::AnalyticSignalTransformAllpass *this)
{
  _BYTE *v2;
  _BYTE *v3;

  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 64));
  v2 = (_BYTE *)*((_QWORD *)this + 11);
  v3 = (_BYTE *)*((_QWORD *)this + 12);
  if (v2 != v3)
    bzero(v2, ((v3 - v2 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
}

void DspLib::AnalyticSignalTransformAllpass::process(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  unint64_t v8;
  uint64_t v9;
  float ***v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  const void *v17;
  float **v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  float **v23[3];
  float ***v24;
  float **v25;
  float **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)(a2 + 16))
    {
      MEMORY[0x1E0C80A78](a1);
      v10 = &v23[-v9 - 1];
      if (v8 >= 0x200)
        v11 = 512;
      else
        v11 = v8;
      bzero(&v23[-v9 - 1], v11);
      v12 = *(unsigned int *)(a1 + 12);
      v13 = (2 * v12);
      MEMORY[0x1E0C80A78](v14);
      if (v15 >= 0x200)
        v16 = 512;
      else
        v16 = v15;
      bzero(&v23[-v13 - 1], v16);
      if ((_DWORD)v12)
      {
        v17 = *(const void **)a2;
        v22 = (uint64_t)&v22;
        memmove(v10, v17, 8 * v12);
        memmove(&v10[v12], v17, 8 * v12);
        memmove(&v23[-v13 - 1], *(const void **)a3, 8 * v12);
        memmove(&(&v23[v12 - 1])[-v13], *a4, 8 * v12);
      }
      v18 = *(float ***)(a2 + 16);
      v24 = v10;
      v25 = (float **)(2 * v12);
      v26 = v18;
      v23[0] = (float **)&v23[-v13 - 1];
      v23[1] = v25;
      v23[2] = v18;
      DspLib::Biquad::Filter::process((_QWORD *)(a1 + 16), (uint64_t)&v24, v23);
      if (*(_DWORD *)(a1 + 12))
      {
        v19 = 0;
        v20 = 0;
        do
        {
          DspLib::SingleSampleDelay::process((float *)(*(_QWORD *)(a1 + 88) + v19), *(_DWORD **)(*(_QWORD *)a3 + 8 * v20), *(_QWORD *)(a3 + 16), *(_DWORD **)(*(_QWORD *)a3 + 8 * v20));
          ++v20;
          v19 += 4;
        }
        while (v20 < *(unsigned int *)(a1 + 12));
      }
    }
  }
  else
  {
    v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 182);
    ++DspLibDebug::mAssertCounter;
  }
}

BOOL DspLib::AnalyticSignalTransformPolyPhase::initialize(DspLib::AnalyticSignalTransformPolyPhase *this, unsigned int a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  v3 = DspLib::AnalyticSignalTransformBase::initialize(this, a2);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 56, *((unsigned int *)this + 3));
  v4 = *((_QWORD *)this + 56);
  v5 = *((_QWORD *)this + 57);
  while (v4 != v5)
  {
    std::vector<float>::resize(v4, 0x21uLL);
    v4 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 59, *((unsigned int *)this + 3));
  v6 = *((_QWORD *)this + 59);
  v7 = *((_QWORD *)this + 60);
  while (v6 != v7)
  {
    std::vector<float>::resize(v6, 0x21uLL);
    v6 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 62, *((unsigned int *)this + 3));
  v8 = *((_QWORD *)this + 62);
  v9 = *((_QWORD *)this + 63);
  while (v8 != v9)
  {
    std::vector<float>::resize(v8, 0x40uLL);
    v8 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 65, *((unsigned int *)this + 3));
  v10 = *((_QWORD *)this + 65);
  v11 = *((_QWORD *)this + 66);
  while (v10 != v11)
  {
    std::vector<float>::resize(v10, 0x40uLL);
    v10 += 24;
  }
  v15[0] = xmmword_1B662ACB0;
  v15[1] = unk_1B662ACC0;
  v16 = 0x3F79623EBFFCAF34;
  v13[0] = xmmword_1B662ACD8;
  v13[1] = unk_1B662ACE8;
  v14 = 0x3F6FBC03BFF7CD2CLL;
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 16), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 88), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 160), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::initialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 232), *((unsigned int *)this + 3), 2uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 16, (uint64_t)v15, 2, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 88, (uint64_t)v15, 2, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 160, (uint64_t)v13, 2, 0, 0x41uLL);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 232, (uint64_t)v13, 2, 0, 0x41uLL);
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 304, *((unsigned int *)this + 3));
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 328, *((unsigned int *)this + 3));
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 352, *((unsigned int *)this + 3));
  std::vector<DspLib::SingleSampleDelay>::resize((uint64_t)this + 376, *((unsigned int *)this + 3));
  *((_OWORD *)this + 25) = xmmword_1B662ABB0;
  *((_OWORD *)this + 26) = xmmword_1B662ABB0;
  *((_OWORD *)this + 27) = xmmword_1B662ABB0;
  *((_BYTE *)this + 8) = 1;
  (*(void (**)(DspLib::AnalyticSignalTransformPolyPhase *))(*(_QWORD *)this + 40))(this);
  return v3;
}

void DspLib::AnalyticSignalTransformPolyPhase::uninitialize(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  *((_BYTE *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 16));
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 88));
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 160));
  DspLib::Biquad::Filter::uninitialize((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 232));
  *((_QWORD *)this + 39) = *((_QWORD *)this + 38);
  *((_QWORD *)this + 42) = *((_QWORD *)this + 41);
  *((_QWORD *)this + 45) = *((_QWORD *)this + 44);
  *((_QWORD *)this + 48) = *((_QWORD *)this + 47);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 56);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 59);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 62);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 65);
}

void DspLib::AnalyticSignalTransformPolyPhase::reset(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;

  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 64));
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 136));
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 208));
  DspLib::Biquad::SetupWrapper::reset((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 280));
  v2 = (_BYTE *)*((_QWORD *)this + 38);
  v3 = (_BYTE *)*((_QWORD *)this + 39);
  if (v2 != v3)
    bzero(v2, ((v3 - v2 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  v4 = (_BYTE *)*((_QWORD *)this + 41);
  v5 = (_BYTE *)*((_QWORD *)this + 42);
  if (v4 != v5)
    bzero(v4, ((v5 - v4 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  v6 = (_BYTE *)*((_QWORD *)this + 44);
  v7 = (_BYTE *)*((_QWORD *)this + 45);
  if (v6 != v7)
    bzero(v6, ((v7 - v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  v8 = (_BYTE *)*((_QWORD *)this + 47);
  v9 = (_BYTE *)*((_QWORD *)this + 48);
  if (v8 != v9)
    bzero(v8, ((v9 - v8 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  *((_DWORD *)this + 101) = 0;
  *((_DWORD *)this + 103) = 0;
  *((_DWORD *)this + 105) = 0;
  *((_DWORD *)this + 107) = 0;
  *((_DWORD *)this + 109) = 0;
  *((_DWORD *)this + 111) = 0;
}

void DspLib::AnalyticSignalTransformPolyPhase::process(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  unint64_t v5;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD v32[3];
  uint64_t v33[3];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v29 = a3;
  v30 = a4;
  v36 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      for (i = 0; i < v5; i = (v8 + i))
      {
        if (v5 - i >= 0x40)
          v8 = 64;
        else
          v8 = v5 - i;
        if (v8)
        {
          v31 = &v28;
          MEMORY[0x1E0C80A78](a1);
          v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFF0);
          v11 = 512;
          if (v9 >= 0x200)
            v12 = 512;
          else
            v12 = v9;
          bzero((char *)&v28 - ((v9 + 15) & 0xFFFFFFFF0), v12);
          v13 = *(unsigned int *)(a1 + 12);
          MEMORY[0x1E0C80A78](v14);
          v15 = (8 * v13 + 15) & 0xFFFFFFFF0;
          if ((unint64_t)(8 * v13) < 0x200)
            v11 = 8 * v13;
          bzero((char *)&v28 - v15, v11);
          MEMORY[0x1E0C80A78](v16);
          bzero((char *)&v28 - v15, v11);
          if ((_DWORD)v13)
          {
            v17 = *(uint64_t **)a2;
            v18 = *v29;
            v19 = v13;
            v20 = (uint64_t *)((char *)&v28 - v15);
            v21 = (uint64_t *)((char *)&v28 - v15);
            v22 = v10;
            v23 = *v30;
            do
            {
              v24 = *v17++;
              *v22++ = v24 + 4 * i;
              v25 = *v18++;
              *v21++ = v25 + 4 * i;
              v26 = *v23++;
              *v20++ = v26 + 4 * i;
              --v19;
            }
            while (v19);
          }
          *(_QWORD *)&v34 = v10;
          *((_QWORD *)&v34 + 1) = v13;
          v35 = v8;
          v33[0] = (uint64_t)&v28 - v15;
          v33[1] = v13;
          v33[2] = v8;
          v32[0] = (char *)&v28 - v15;
          v32[1] = v13;
          v32[2] = v8;
          DspLib::AnalyticSignalTransformPolyPhase::processBlock(a1, &v34, v33, v32);
          v5 = *(_QWORD *)(a2 + 16);
        }
      }
    }
  }
  else
  {
    v27 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v27, 321);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::AnalyticSignalTransformPolyPhase::processBlock(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float **v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float **v37;
  size_t v38;
  uint64_t v39;
  float *v40;
  _QWORD *v41;
  float **v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float **v47;
  size_t v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float **v54;
  float **v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  float **v65;
  float **v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[3];
  _QWORD v72[3];
  __int128 v73;
  uint64_t v74;
  _QWORD v75[3];
  float **v76[3];
  char *v77;
  __int128 v78;
  float **v79[3];
  char *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _QWORD v86[3];
  _QWORD v87[3];
  __int128 v88;
  uint64_t v89;
  _QWORD v90[3];
  float **v91[3];
  char *v92;
  __int128 v93;
  float **v94[3];
  char *v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(a1 + 448);
  v9 = *(uint64_t **)(a1 + 456);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v62 - v11;
  if (v10 >= 0x200)
    v13 = 512;
  else
    v13 = v10;
  bzero((char *)&v62 - v11, v13);
  if (v9 == v8)
    goto LABEL_9;
  v14 = 0;
  v15 = v8;
  do
  {
    v16 = *v15;
    v15 += 3;
    *(_QWORD *)&v12[8 * v14++] = v16;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v9 - v8) > v14);
  if (v9 == v8)
LABEL_9:
    v17 = 0;
  else
    v17 = (v8[1] - *v8) >> 2;
  v103 = v12;
  *(_QWORD *)&v104 = 0xAAAAAAAAAAAAAAABLL * (v9 - v8);
  *((_QWORD *)&v104 + 1) = v17;
  v101 = *a2;
  v102 = *((_QWORD *)a2 + 2);
  DspLib::DownSampler::process((unsigned int *)(a1 + 400), &v101, &v103);
  if (*(_DWORD *)(a1 + 12))
  {
    v19 = 0;
    v20 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(_QWORD *)(a1 + 304) + v19), *(_DWORD **)(*(_QWORD *)a2 + 8 * v20), *((_QWORD *)a2 + 2), *(_DWORD **)(*a3 + 8 * v20));
      ++v20;
      v19 += 4;
    }
    while (v20 < *(unsigned int *)(a1 + 12));
  }
  v21 = *(uint64_t **)(a1 + 472);
  v22 = *(uint64_t **)(a1 + 480);
  MEMORY[0x1E0C80A78](v18);
  v25 = (char *)&v62 - v24;
  if (v23 >= 0x200)
    v26 = 512;
  else
    v26 = v23;
  bzero((char *)&v62 - v24, v26);
  v64 = a4;
  if (v22 == v21)
    goto LABEL_21;
  v27 = 0;
  v28 = v21;
  do
  {
    v29 = *v28;
    v28 += 3;
    *(_QWORD *)&v25[8 * v27++] = v29;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v22 - v21) > v27);
  if (v22 == v21)
LABEL_21:
    v30 = 0;
  else
    v30 = (v21[1] - *v21) >> 2;
  v99 = v25;
  *(_QWORD *)&v100 = 0xAAAAAAAAAAAAAAABLL * (v22 - v21);
  *((_QWORD *)&v100 + 1) = v30;
  v97 = *a3;
  v98 = *(_OWORD *)(a3 + 1);
  DspLib::DownSampler::process((unsigned int *)(a1 + 408), &v97, &v99);
  v32 = *(float ***)(a1 + 496);
  v31 = *(_QWORD **)(a1 + 504);
  v33 = 0xAAAAAAAAAAAAAAABLL * ((float **)v31 - v32);
  MEMORY[0x1E0C80A78](v34);
  v37 = (float **)((char *)&v62 - v36);
  if (v35 >= 0x200)
    v38 = 512;
  else
    v38 = v35;
  bzero((char *)&v62 - v36, v38);
  if (v31 != v32)
  {
    v39 = 0;
    do
    {
      v40 = *v32;
      v32 += 3;
      v37[v39++] = v40;
    }
    while (v33 > v39);
  }
  v95 = v103;
  v96 = v104;
  v94[0] = v37;
  v94[1] = (float **)v33;
  v66 = (float **)*((_QWORD *)&v104 + 1);
  v94[2] = *((float ***)&v104 + 1);
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 16), (uint64_t)&v95, v94);
  v41 = *(_QWORD **)(a1 + 528);
  v42 = *(float ***)(a1 + 520);
  v43 = 0xAAAAAAAAAAAAAAABLL * ((float **)v41 - v42);
  MEMORY[0x1E0C80A78](v44);
  v47 = (float **)((char *)&v62 - v46);
  if (v45 >= 0x200)
    v48 = 512;
  else
    v48 = v45;
  bzero((char *)&v62 - v46, v48);
  if (v41 != v42)
  {
    v49 = 0;
    do
    {
      v50 = *v42;
      v42 += 3;
      v47[v49++] = v50;
    }
    while (v43 > v49);
  }
  v91[2] = *((float ***)&v104 + 1);
  v92 = v99;
  v93 = v100;
  v91[0] = v47;
  v91[1] = (float **)v43;
  v65 = (float **)*((_QWORD *)&v104 + 1);
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 88), (uint64_t)&v92, v91);
  v90[0] = v37;
  v90[1] = v33;
  v90[2] = v66;
  v88 = *(_OWORD *)a3;
  v89 = a3[2];
  DspLib::UpSampler::process((unsigned int *)(a1 + 416), v90, &v88);
  if (*(_DWORD *)(a1 + 12))
  {
    v51 = 0;
    v52 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(_QWORD *)(a1 + 328) + v51), *(_DWORD **)(*a3 + 8 * v52), a3[2], *(_DWORD **)(*a3 + 8 * v52));
      ++v52;
      v51 += 4;
    }
    while (v52 < *(unsigned int *)(a1 + 12));
  }
  v53 = *((_QWORD *)a2 + 2);
  v87[0] = v47;
  v87[1] = v43;
  v54 = v65;
  v87[2] = v65;
  v86[0] = v37;
  v86[1] = v33;
  v86[2] = v53;
  DspLib::UpSampler::process((unsigned int *)(a1 + 424), v87, v86);
  v84 = *(_OWORD *)a3;
  v85 = a3[2];
  *(_QWORD *)&v82 = v37;
  *((_QWORD *)&v82 + 1) = v33;
  v63 = v53;
  v83 = v53;
  DspLib::add((uint64_t *)&v84, &v82);
  v81 = v104;
  v79[0] = v37;
  v79[1] = (float **)v33;
  v55 = v66;
  v79[2] = v66;
  v80 = v103;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 160), (uint64_t)&v80, v79);
  v76[2] = v54;
  v77 = v99;
  v78 = v100;
  v76[0] = v47;
  v76[1] = (float **)v43;
  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 232), (uint64_t)&v77, v76);
  v75[0] = v37;
  v75[1] = v33;
  v75[2] = v55;
  v56 = v64;
  v73 = *(_OWORD *)v64;
  v74 = v64[2];
  DspLib::UpSampler::process((unsigned int *)(a1 + 432), v75, &v73);
  if (*(_DWORD *)(a1 + 12))
  {
    v57 = 0;
    v58 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(_QWORD *)(a1 + 352) + v57), *(_DWORD **)(*v56 + 8 * v58), v56[2], *(_DWORD **)(*v56 + 8 * v58));
      ++v58;
      v57 += 4;
    }
    while (v58 < *(unsigned int *)(a1 + 12));
  }
  v72[0] = v47;
  v72[1] = v43;
  v72[2] = v65;
  v71[0] = v37;
  v71[1] = v33;
  v59 = v63;
  v71[2] = v63;
  DspLib::UpSampler::process((unsigned int *)(a1 + 440), v72, v71);
  v69 = *(_OWORD *)v56;
  v70 = v56[2];
  *(_QWORD *)&v67 = v37;
  *((_QWORD *)&v67 + 1) = v33;
  v68 = v59;
  DspLib::add((uint64_t *)&v69, &v67);
  if (*(_DWORD *)(a1 + 12))
  {
    v60 = 0;
    v61 = 0;
    do
    {
      DspLib::SingleSampleDelay::process((float *)(*(_QWORD *)(a1 + 376) + v60), *(_DWORD **)(*a3 + 8 * v61), a3[2], *(_DWORD **)(*a3 + 8 * v61));
      ++v61;
      v60 += 4;
    }
    while (v61 < *(unsigned int *)(a1 + 12));
  }
}

BOOL DspLib::EnvelopeProcessor::initialize(DspLib::EnvelopeProcessor *this, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v17;
  int v18;

  v3 = *(unsigned __int8 *)this;
  v4 = *((_DWORD *)this + 1);
  if (a2 >= 0x41)
  {
    v17 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    v18 = 415;
LABEL_28:
    printf("DSP Sound assertion in %s at line %d\n", v17, v18);
    ++DspLibDebug::mAssertCounter;
    goto LABEL_20;
  }
  if (!a2)
  {
    v17 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    v18 = 416;
    goto LABEL_28;
  }
  *((_DWORD *)this + 1) = a2;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 1, a2);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    std::vector<float>::resize(v6, 0x40uLL);
    v6 += 24;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 4, *((unsigned int *)this + 1));
  v8 = *((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 5);
  while (v8 != v9)
  {
    std::vector<float>::resize(v8, 0x40uLL);
    v8 += 24;
  }
  v10 = *((_DWORD *)this + 14);
  switch(v10)
  {
    case 0:
      v11 = operator new();
      v12 = 0uLL;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_QWORD *)v11 = &off_1E69C4398;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
LABEL_15:
      *(_OWORD *)(v11 + 24) = v12;
LABEL_16:
      v13 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v11;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      break;
    case 1:
      v11 = operator new();
      v12 = 0uLL;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_QWORD *)v11 = &off_1E69C4400;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_QWORD *)(v11 + 104) = 0;
      goto LABEL_15;
    case 2:
      v11 = operator new();
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 176) = 0u;
      *(_OWORD *)(v11 + 192) = 0u;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      *(_QWORD *)v11 = &off_1E69C4468;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_BYTE *)(v11 + 88) = 0;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_BYTE *)(v11 + 160) = 0;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_BYTE *)(v11 + 232) = 0;
      *(_OWORD *)(v11 + 216) = 0u;
      *(_OWORD *)(v11 + 200) = 0u;
      *(_OWORD *)(v11 + 184) = 0u;
      *(_OWORD *)(v11 + 168) = 0u;
      *(_OWORD *)(v11 + 352) = 0u;
      *(_OWORD *)(v11 + 368) = 0u;
      *(_OWORD *)(v11 + 320) = 0u;
      *(_OWORD *)(v11 + 336) = 0u;
      *(_OWORD *)(v11 + 288) = 0u;
      *(_OWORD *)(v11 + 304) = 0u;
      *(_OWORD *)(v11 + 256) = 0u;
      *(_OWORD *)(v11 + 272) = 0u;
      *(_OWORD *)(v11 + 240) = 0u;
      *(_OWORD *)(v11 + 384) = 0u;
      *(_OWORD *)(v11 + 400) = xmmword_1B6627BC0;
      *(_OWORD *)(v11 + 416) = xmmword_1B6627BC0;
      *(_QWORD *)(v11 + 432) = 1;
      *(_DWORD *)(v11 + 440) = 1;
      *(_DWORD *)(v11 + 540) = 0;
      *(_OWORD *)(v11 + 524) = 0u;
      *(_OWORD *)(v11 + 508) = 0u;
      *(_OWORD *)(v11 + 492) = 0u;
      *(_OWORD *)(v11 + 476) = 0u;
      *(_OWORD *)(v11 + 460) = 0u;
      *(_OWORD *)(v11 + 444) = 0u;
      goto LABEL_16;
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), *((unsigned int *)this + 1));
  *(_BYTE *)this = 1;
  v14 = *((_QWORD *)this + 8);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
LABEL_20:
  if (v3)
    v15 = v4 == a2;
  else
    v15 = 0;
  return !v15;
}

uint64_t DspLib::EnvelopeProcessor::reset(DspLib::EnvelopeProcessor *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t DspLib::EnvelopeProcessor::uninitialize(DspLib::EnvelopeProcessor *this)
{
  uint64_t result;

  *(_BYTE *)this = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 1);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 4);
  result = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void DspLib::EnvelopeProcessor::process(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    if (*(_QWORD *)(a2 + 16) > 0x40uLL)
    {
      MEMORY[0x1E0C80A78](a1);
      v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFF0);
      if (v6 >= 0x200)
        v8 = 512;
      else
        v8 = v6;
      bzero((char *)v24 - ((v6 + 15) & 0xFFFFFFFF0), v8);
      v10 = *(unsigned int *)(a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = memmove(v7, *(const void **)a2, 8 * v10);
        MEMORY[0x1E0C80A78](v12);
        v13 = (char *)v24 - ((8 * v10 + 15) & 0xFFFFFFFF0);
        if ((unint64_t)(8 * v10) >= 0x200)
          v14 = 512;
        else
          v14 = 8 * v10;
        bzero((char *)v24 - ((v11 + 15) & 0xFFFFFFFF0), v14);
        memmove((char *)v24 - ((v11 + 15) & 0xFFFFFFFF0), *(const void **)a3, 8 * v10);
      }
      else
      {
        MEMORY[0x1E0C80A78](v9);
        v13 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFF0);
        bzero(v13, v15);
      }
      v16 = *(_QWORD *)(a2 + 16);
      if (v16)
      {
        v17 = 0;
        do
        {
          v18 = v16 - v17;
          if (v18 >= 0x40)
            v19 = 64;
          else
            v19 = v18;
          *(_QWORD *)&v25 = v7;
          *((_QWORD *)&v25 + 1) = v10;
          v26 = v19;
          v24[0] = v13;
          v24[1] = v10;
          v24[2] = v19;
          DspLib::EnvelopeProcessor::processBlock(a1, &v25, v24);
          v10 = *(unsigned int *)(a1 + 4);
          v20 = v10;
          v21 = v13;
          v22 = v7;
          if ((_DWORD)v10)
          {
            do
            {
              *v22++ += 4 * v19;
              *v21++ += 4 * v19;
              --v20;
            }
            while (v20);
          }
          v17 += v19;
          v16 = *(_QWORD *)(a2 + 16);
        }
        while (v17 < v16);
      }
    }
    else
    {
      v29 = *(_OWORD *)a2;
      v30 = *(_QWORD *)(a2 + 16);
      v27 = *a3;
      v28 = *((_QWORD *)a3 + 2);
      DspLib::EnvelopeProcessor::processBlock(a1, &v29, &v27);
    }
  }
  else
  {
    v23 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v23, 471);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::EnvelopeProcessor::processBlock(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float *v29;
  vDSP_Length v30;
  char *v31;
  uint64_t v32;
  DSPSplitComplex __A;
  vDSP_Length v34;
  _QWORD v35[3];
  _QWORD v36[3];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    if (*((_QWORD *)a2 + 2))
    {
      v32 = (uint64_t)&v32;
      MEMORY[0x1E0C80A78](a1);
      v8 = (char *)&v32 - v7;
      if (v6 >= 0x200)
        v9 = 512;
      else
        v9 = v6;
      bzero((char *)&v32 - v7, v9);
      v11 = *(uint64_t **)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16) - (_QWORD)v11;
      v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
      if (v12)
      {
        v14 = 0;
        do
        {
          v15 = *v11;
          v11 += 3;
          *(_QWORD *)&v8[8 * v14++] = v15;
        }
        while (v13 > v14);
      }
      v16 = *((_QWORD *)a2 + 2);
      v18 = *(uint64_t **)(a1 + 32);
      v17 = *(_QWORD **)(a1 + 40);
      v19 = 0xAAAAAAAAAAAAAAABLL * (v17 - v18);
      MEMORY[0x1E0C80A78](v10);
      v22 = (char *)&v32 - v21;
      if (v20 >= 0x200)
        v23 = 512;
      else
        v23 = v20;
      bzero((char *)&v32 - v21, v23);
      if (v17 != v18)
      {
        v24 = 0;
        do
        {
          v25 = *v18;
          v18 += 3;
          *(_QWORD *)&v22[8 * v24++] = v25;
        }
        while (v19 > v24);
      }
      v26 = *(_QWORD *)(a1 + 64);
      v37 = *a2;
      v38 = *((_QWORD *)a2 + 2);
      v36[0] = v8;
      v36[1] = v13;
      v36[2] = v16;
      v35[0] = v22;
      v35[1] = v19;
      v35[2] = v16;
      (*(void (**)(uint64_t, __int128 *, _QWORD *, _QWORD *))(*(_QWORD *)v26 + 48))(v26, &v37, v36, v35);
      if (*(_DWORD *)(a1 + 4))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = *(float **)(*(_QWORD *)(a1 + 32) + v27);
          v30 = *((_QWORD *)a2 + 2);
          __A.realp = *(float **)(*(_QWORD *)(a1 + 8) + v27);
          __A.imagp = v29;
          v34 = v30;
          vDSP_zvabs(&__A, 1, *(float **)(*a3 + 8 * v28++), 1, v30);
          v27 += 24;
        }
        while (v28 < *(unsigned int *)(a1 + 4));
      }
    }
  }
  else
  {
    v31 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/HilbertTransform/dsp/DspLibHilbertTransform.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v31, 502);
    ++DspLibDebug::mAssertCounter;
  }
}

uint64_t DspLib::AnalyticSignalTransformBase::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a4;
  v13 = a2;
  v11 = a6;
  v10[0] = &v13;
  v10[1] = 1;
  v10[2] = a3;
  v9[0] = &v12;
  v9[1] = 1;
  v9[2] = a5;
  v8[0] = &v11;
  v8[1] = 1;
  v8[2] = a7;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 48))(a1, v10, v9, v8);
}

void DspLib::AnalyticSignalTransformBiquad::~AnalyticSignalTransformBiquad(DspLib::AnalyticSignalTransformBiquad *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69C4398;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69C4398;
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformBiquad *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t DspLib::AnalyticSignalTransformBiquad::mode(DspLib::AnalyticSignalTransformBiquad *this)
{
  return 0;
}

uint64_t DspLib::AnalyticSignalTransformAllpass::mode(DspLib::AnalyticSignalTransformAllpass *this)
{
  return 1;
}

void DspLib::AnalyticSignalTransformPolyPhase::~AnalyticSignalTransformPolyPhase(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  DspLib::AnalyticSignalTransformPolyPhase::~AnalyticSignalTransformPolyPhase(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = &off_1E69C4468;
  v10 = (void **)((char *)this + 520);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 496);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 472);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 44);
  if (v3)
  {
    *((_QWORD *)this + 45) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 41);
  if (v4)
  {
    *((_QWORD *)this + 42) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 38);
  if (v5)
  {
    *((_QWORD *)this + 39) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 280));
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 208));
  v7 = (void *)*((_QWORD *)this + 23);
  if (v7)
  {
    *((_QWORD *)this + 24) = v7;
    operator delete(v7);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 136));
  v8 = (void *)*((_QWORD *)this + 14);
  if (v8)
  {
    *((_QWORD *)this + 15) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformPolyPhase *)((char *)this + 64));
  v9 = (void *)*((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 6) = v9;
    operator delete(v9);
  }
}

uint64_t DspLib::AnalyticSignalTransformPolyPhase::mode(DspLib::AnalyticSignalTransformPolyPhase *this)
{
  return 2;
}

void std::vector<DspLib::SingleSampleDelay>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

DspLib::LoudnessNormalizer::Algorithm *DspLib::LoudnessNormalizer::Algorithm::Algorithm(DspLib::LoudnessNormalizer::Algorithm *this)
{
  _OWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  float v5;

  v2 = (_OWORD *)((char *)this + 340);
  v3 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::LoudnessNormalizer::Parameters::kParameterDefault, 0x3AuLL, (uint64_t)&DspLib::LoudnessNormalizer::Parameters::kMinimum, 58, (uint64_t)&DspLib::LoudnessNormalizer::Parameters::kParameterMaxima, 58);
  *(_QWORD *)v3 = &off_1E69C44D0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_DWORD *)(v3 + 336) = 0;
  *v2 = xmmword_1B6627BC0;
  v2[1] = xmmword_1B6627BC0;
  *(_QWORD *)(v3 + 372) = 1;
  *(_DWORD *)(v3 + 380) = 0;
  *(_QWORD *)(v3 + 384) = 1;
  *(_QWORD *)(v3 + 392) = 0x100000000;
  *(_QWORD *)(v3 + 400) = 0;
  *(_BYTE *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 536) = 1;
  *(_DWORD *)(v3 + 616) = 0;
  *(_BYTE *)(v3 + 624) = 0;
  *(_BYTE *)(v3 + 768) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 0;
  *((_BYTE *)this + 728) = 0;
  *(_OWORD *)(v3 + 712) = 0u;
  *(_OWORD *)(v3 + 696) = 0u;
  *(_OWORD *)(v3 + 680) = 0u;
  *(_OWORD *)(v3 + 664) = 0u;
  *(_OWORD *)(v3 + 648) = 0u;
  *(_OWORD *)(v3 + 632) = 0u;
  *(_DWORD *)(v3 + 735) = 0;
  *((_DWORD *)this + 183) = 0;
  *(_QWORD *)(v3 + 756) = 0;
  *(_OWORD *)(v3 + 740) = 0u;
  bzero((void *)(v3 + 776), 0x209uLL);
  *((_DWORD *)this + 325) = 1065353216;
  *((_QWORD *)this + 164) = 0;
  *((_DWORD *)this + 330) = 0;
  *((_WORD *)this + 662) = 256;
  *((_BYTE *)this + 1326) = 1;
  *((_BYTE *)this + 1304) = 1;
  v5 = DspLib::elapsedTimeInMilliseconds((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1312), v4);
  *((_DWORD *)this + 330) = 0;
  *((_BYTE *)this + 1324) = 1;
  *((_DWORD *)this + 340) = 0;
  *((_BYTE *)this + 1364) = 0;
  *((_QWORD *)this + 173) = 0;
  *((_QWORD *)this + 166) = 0;
  *((_QWORD *)this + 168) = 0;
  *((_QWORD *)this + 167) = 0;
  *(_QWORD *)((char *)this + 1350) = 0;
  *((_QWORD *)this + 171) = 0;
  *(_QWORD *)((char *)this + 1373) = 0;
  DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::IntegratedLoudnessProcessor((char *)this + 1408, 0, v5);
  *((_BYTE *)this + 9560) = 0;
  *(_OWORD *)((char *)this + 9628) = 0u;
  *((_OWORD *)this + 598) = 0u;
  *((_OWORD *)this + 599) = 0u;
  *((_OWORD *)this + 600) = 0u;
  *((_OWORD *)this + 601) = 0u;
  *((_OWORD *)this + 603) = 0u;
  *((_BYTE *)this + 9664) = 0;
  *((_DWORD *)this + 2418) = 0;
  *((_QWORD *)this + 1219) = 0;
  *((_OWORD *)this + 596) = 0u;
  *((_DWORD *)this + 2388) = 0;
  *((_OWORD *)this + 605) = 0u;
  *((_OWORD *)this + 606) = 0u;
  *((_BYTE *)this + 9712) = 0;
  *(_OWORD *)((char *)this + 9720) = 0u;
  *((_DWORD *)this + 2436) = 0;
  *((_QWORD *)this + 1217) = 0;
  DspLibBuffer::DspLibBuffer((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
  *((_OWORD *)this + 622) = 0u;
  *((_OWORD *)this + 621) = 0u;
  *((_OWORD *)this + 620) = 0u;
  *((_OWORD *)this + 619) = 0u;
  *((_OWORD *)this + 618) = 0u;
  *((_OWORD *)this + 617) = 0u;
  *((_OWORD *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 9961) = 0u;
  *(_OWORD *)((char *)this + 9980) = 0u;
  *(_OWORD *)((char *)this + 9996) = 0u;
  *(_OWORD *)((char *)this + 10012) = 0u;
  *(_OWORD *)((char *)this + 10028) = 0u;
  *(_OWORD *)((char *)this + 10044) = 0u;
  *(_OWORD *)((char *)this + 10060) = 0u;
  *(_OWORD *)((char *)this + 10076) = 0u;
  return this;
}

void sub_1B60DE0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v10;
  DspLib::Biquad::ParametricFilter *v11;
  DspLib::Biquad::ParametricFilter *v12;
  DspLib::LoudnessNormalizer::ShapingFilter *v13;
  uint64_t *v14;
  void **v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v17 = *v15;
  if (*v15)
  {
    v10[1211] = v17;
    operator delete(v17);
  }
  DspLib::LoudnessNormalizer::ShapingFilter::~ShapingFilter(v13);
  v18 = *v14;
  *v14 = 0;
  if (v18)
    MEMORY[0x1BCC95CE0](v18, 64);
  v19 = v10[161];
  v10[161] = 0;
  if (v19)
    std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)(v10 + 161), v19);
  a10 = v10 + 158;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  DspLib::Biquad::Filter::~Filter((DspLib::Biquad::Filter *)(v10 + 96));
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v12);
  vp::vx::io::Direction_Pair<std::vector<std::tuple<unsigned int,vp::services::Audio_Issue_Detector_Node_ID>>>::~Direction_Pair((uint64_t)(v10 + 69));
  v20 = (void *)v10[64];
  if (v20)
  {
    v10[65] = v20;
    operator delete(v20);
  }
  DspLib::Biquad::ParametricFilter::~ParametricFilter((DspLib::Biquad::ParametricFilter *)(v10 + 51));
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v11);
  *v10 = off_1E69C46F0;
  v21 = (void *)v10[6];
  if (v21)
  {
    v10[7] = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void DspLib::LoudnessNormalizer::ShapingFilter::~ShapingFilter(DspLib::LoudnessNormalizer::ShapingFilter *this)
{
  void *v2;

  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::ShapingFilter *)((char *)this + 48));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::initialize(DspLib::LoudnessNormalizer::Algorithm *this, int a2, double a3)
{
  uint64_t v6;
  float v7;
  char *v9;
  int v10;

  v6 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (!a2)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    v10 = 29;
LABEL_7:
    printf("DSP Sound assertion in %s at line %d\n", v9, v10);
    ++DspLibDebug::mAssertCounter;
    return v6;
  }
  if (a3 == 0.0)
  {
    v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    v10 = 30;
    goto LABEL_7;
  }
  std::vector<float>::resize((uint64_t)this + 9680, *((unsigned int *)this + 8));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 1232, *((unsigned int *)this + 3));
  **((_DWORD **)this + 1210) = 1065353216;
  *((_QWORD *)this + 1213) = 0;
  *((_DWORD *)this + 80) = 0;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), 1uLL, *((double *)this + 3), 1uLL);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 216), 1uLL, *((double *)this + 3), 1uLL);
  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 216, 0x4348000000000006uLL, (double *)0x3F80000000000000, 0, 0x41uLL);
  std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 158, *((unsigned int *)this + 3));
  *((_BYTE *)this + 8) = 1;
  (*(void (**)(DspLib::LoudnessNormalizer::Algorithm *))(*(_QWORD *)this + 144))(this);
  (*(void (**)(DspLib::LoudnessNormalizer::Algorithm *, _QWORD))(*(_QWORD *)this + 200))(this, *((unsigned __int8 *)this + 40));
  DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
  DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v7);
  DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
  return v6;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::resetLoudnessHistory(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, a2);
  return DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
}

void DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(DspLib::LoudnessNormalizer::Algorithm *this)
{
  int v2;
  int v3;

  if (!DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(8, *((float *)this + 186)))
  {
    v2 = *((_DWORD *)this + 188);
    v3 = *((_DWORD *)this + 183);
    DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    if (v2 == 1)
    {
      if (v3 == 1)
        DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
      else
        DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0xD);
      DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
    }
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::uninitialize(DspLib::LoudnessNormalizer::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *((_BYTE *)this + 40) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 1232);
  *((_QWORD *)this + 1236) = *((_QWORD *)this + 1235);
  *((_QWORD *)this + 1239) = *((_QWORD *)this + 1238);
  *((_QWORD *)this + 1242) = *((_QWORD *)this + 1241);
  *((_QWORD *)this + 1245) = *((_QWORD *)this + 1244);
  *((_QWORD *)this + 1211) = *((_QWORD *)this + 1210);
  *((_QWORD *)this + 1213) = 0;
  DspLibBuffer::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
  DspLib::LinearDelay::setLength((float **)this + 64, 0);
  v2 = *((_QWORD *)this + 1192);
  *((_QWORD *)this + 1192) = 0;
  if (v2)
    MEMORY[0x1BCC95CE0](v2, 64);
  DspLib::FastMedianFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 552));
  v3 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v3)
    std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)this + 1288, v3);
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 216));
  DspLib::Biquad::Filter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 768));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 158);
  v4 = *((_QWORD *)this + 1254);
  *((_QWORD *)this + 1254) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = *((_QWORD *)this + 1255);
  *((_QWORD *)this + 1255) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_BYTE *)this + 8) = 0;
  return result;
}

double DspLib::LoudnessNormalizer::Algorithm::reset(DspLib::LoudnessNormalizer::Algorithm *this)
{
  float v2;
  DspLib::CircularDelay *v3;
  DspLib::CircularDelay *v4;
  double result;

  if (!DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(1, *((float *)this + 186)))
  {
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v2);
    DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
  }
  v3 = (DspLib::CircularDelay *)*((_QWORD *)this + 158);
  v4 = (DspLib::CircularDelay *)*((_QWORD *)this + 159);
  while (v3 != v4)
  {
    DspLib::CircularDelay::reset(v3);
    v3 = (DspLib::CircularDelay *)((char *)v3 + 32);
  }
  *((_BYTE *)this + 9712) = 0;
  *((_DWORD *)this + 2436) = 0;
  *((_DWORD *)this + 340) = 0;
  *((_BYTE *)this + 1364) = 0;
  *((_QWORD *)this + 1260) = 0;
  *((_DWORD *)this + 2522) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 9720) = 0u;
  *((_DWORD *)this + 2434) = 0;
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  DspLib *v4;
  float v5;
  DspLib *v6;
  float v7;
  float v8;
  DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *v9;
  float v10;
  DspLib::LoudnessNormalizer::ShapingFilter *v11;
  uint64_t v12;
  float v13;
  DspLib *v14;
  float v15;
  float *v16;
  vDSP_Length v17;
  DspLib *v18;
  float v19;
  unint64_t *v20;
  DspLib::CircularDelay *v21;
  DspLib::CircularDelay *v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  float __D;

  if (*((_BYTE *)this + 8))
  {
    if (*((_BYTE *)this + 768))
      DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 816));
    if (*((_BYTE *)this + 624))
      DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 672));
    DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 456));
    if (*((_DWORD *)this + 183) < 2u)
    {
      v8 = DspLib::dB2Power(v4, a2 + 0.691);
      DspLib::Biquad::Filter::initializeStates((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), v8);
      DspLib::fill(*((float **)this + 64), (uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 2, v8);
    }
    else
    {
      v5 = DspLib::dB2Power(v4, -70.0);
      DspLib::Biquad::Filter::initializeStates((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), v5);
      v7 = DspLib::dB2Power(v6, -70.0);
      DspLib::fill(*((float **)this + 64), (uint64_t)(*((_QWORD *)this + 65) - *((_QWORD *)this + 64)) >> 2, v7);
      *((float *)this + 95) = a2;
    }
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1408), a2);
    *((_DWORD *)this + 2386) = 0;
    v9 = (DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)*((_QWORD *)this + 1192);
    if (v9)
      DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset(v9, a2);
    *((float *)this + 2387) = a2;
    if (*((_BYTE *)this + 737))
      v10 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - *((float *)this + 2387);
    else
      v10 = 0.0;
    v11 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9560);
    *((float *)this + 2388) = v10;
    v12 = *((_QWORD *)this + 161);
    if (v12)
      DspLib::fill(*(float **)v12, (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2, a2);
    *((float *)this + 152) = a2;
    DspLib::FastMedianFilter::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 552));
    *((float *)this + 342) = a2;
    *((float *)this + 343) = a2;
    DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 264));
    *((float *)this + 2497) = a2;
    __D = *((float *)this + 2388) + a2;
    DspLib::LoudnessNormalizer::GainTable::gainForLevel((uint64_t)this + 840, &__D, 1uLL);
    v13 = __D;
    *((float *)this + 2495) = __D;
    v15 = DspLib::dB2Amp(v14, v13);
    DspLib::Biquad::Filter::initializeStates((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 216), v15);
    v16 = (float *)*((_QWORD *)this + 1210);
    v17 = *((_QWORD *)this + 1213);
    v19 = DspLib::dB2Amp(v18, *((float *)this + 2495));
    DspLib::fill(v16, v17, v19);
    *((_DWORD *)this + 344) = 0;
    *((_BYTE *)this + 1380) = 0;
    *((_DWORD *)this + 346) = 0;
    *((_BYTE *)this + 1304) = 1;
    DspLib::elapsedTimeInMilliseconds((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1312), v20);
    *((_DWORD *)this + 330) = 0;
    *((_BYTE *)this + 1324) = 1;
    *((_BYTE *)this + 9664) = 0;
    *((_QWORD *)this + 1207) = 0;
    v21 = (DspLib::CircularDelay *)*((_QWORD *)this + 158);
    v22 = (DspLib::CircularDelay *)*((_QWORD *)this + 159);
    while (v21 != v22)
    {
      DspLib::CircularDelay::reset(v21);
      v21 = (DspLib::CircularDelay *)((char *)v21 + 32);
    }
    if (*(_BYTE *)v11)
    {
      DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9608));
      *((_DWORD *)this + 2410) = -1054867456;
      DspLib::LoudnessNormalizer::ShapingFilter::setGain(v11, 0.0);
    }
    *((_DWORD *)this + 2418) = 1148846080;
    *((_QWORD *)this + 1252) = 1148846080;
    v23 = *((_QWORD *)this + 1254);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 152))(v23);
    result = *((_QWORD *)this + 1255);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
    *((float *)this + 2496) = *((float *)this + 2495) + *((float *)this + 2388);
    *(int32x4_t *)((char *)this + 9992) = vdupq_n_s32(0xC2C80000);
    *((_QWORD *)this + 1251) = 0xC2C8000000000000;
    *((_QWORD *)this + 1253) = 0;
    *((_BYTE *)this + 9976) = 1;
  }
  else
  {
    v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v25, 141);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters(uint64_t this)
{
  char *v1;

  if (*(_BYTE *)(this + 8))
  {
    *(_DWORD *)(this + 344) = 0;
    *(_DWORD *)(this + 352) = 0;
    *(_DWORD *)(this + 360) = 0;
    *(_DWORD *)(this + 368) = 0;
    *(_DWORD *)(this + 376) = 0;
    *(_DWORD *)(this + 388) = 0;
    *(_DWORD *)(this + 400) = 0;
    *(_QWORD *)(this + 544) = 0;
  }
  else
  {
    v1 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudnessNormalizer/dsp/DspLibLoudnessNormalizer.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v1, 126);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

float DspLib::LoudnessNormalizer::Algorithm::targetLoudness(DspLib::LoudnessNormalizer::Algorithm *this)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  BOOL v7;
  float v8;
  float *v9;
  float *v10;
  float v12;

  if (*((_DWORD *)this + 188) != 2)
    return *(float *)(*((_QWORD *)this + 6) + 20);
  v1 = *((_QWORD *)this + 6);
  v3 = *(float *)(v1 + 200);
  v2 = (float *)(v1 + 200);
  v4 = v3;
  v5 = (float)((float)(*((float *)this + 2436) - *(v2 - 4)) - *(v2 - 3)) + *(v2 - 2);
  v6 = v2[1];
  v12 = v5;
  v7 = v6 < v3;
  if (v6 >= v3)
    v8 = v6;
  else
    v8 = v4;
  if (v7)
    v9 = v2;
  else
    v9 = v2 + 1;
  if (v7)
  {
    v4 = v6;
    ++v2;
  }
  v10 = &v12;
  if (v8 < v5)
    v10 = v9;
  if (v5 >= v4)
    v2 = v10;
  return *v2;
}

double DspLib::LoudnessNormalizer::Algorithm::latencySamples(DspLib::LoudnessNormalizer::Algorithm *this)
{
  float v2;
  float v3;
  float v4;

  v2 = *(float *)(*((_QWORD *)this + 6) + 40);
  if (*((_DWORD *)this + 183) >= 2u)
  {
    (*(void (**)(DspLib::LoudnessNormalizer::Algorithm *, uint64_t))(*(_QWORD *)this + 120))(this, 10);
    v4 = 3.0;
    if (v2 <= 3.0)
      v4 = v2;
    if (v2 >= v3)
      v2 = v4;
    else
      v2 = v3;
  }
  return round(*((double *)this + 3) * v2 / 1000.0);
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::setMeteringIsEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  DspLib::LoudnessMeter::Algorithm *v3;
  uint64_t v4;
  uint64_t v5;
  DspLib::LoudnessMeter::Algorithm *v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(this + 40) = a2;
  if (*(_BYTE *)(this + 8))
  {
    v2 = this;
    this = *(_QWORD *)(this + 10032);
    if (a2)
    {
      if (!this)
      {
        v3 = (DspLib::LoudnessMeter::Algorithm *)operator new();
        DspLib::LoudnessMeter::Algorithm::Algorithm(v3);
        v4 = *(_QWORD *)(v2 + 10032);
        *(_QWORD *)(v2 + 10032) = v3;
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
          v3 = *(DspLib::LoudnessMeter::Algorithm **)(v2 + 10032);
        }
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
        (*(void (**)(DspLib::LoudnessMeter::Algorithm *, uint64_t, double))(*(_QWORD *)v3 + 16))(v3, v5, *(double *)(v2 + 24));
        this = (*(uint64_t (**)(_QWORD, _QWORD, float))(**(_QWORD **)(v2 + 10032) + 128))(*(_QWORD *)(v2 + 10032), 0, *(float *)(*(_QWORD *)(v2 + 48) + 44));
      }
      if (!*(_QWORD *)(v2 + 10040))
      {
        v6 = (DspLib::LoudnessMeter::Algorithm *)operator new();
        DspLib::LoudnessMeter::Algorithm::Algorithm(v6);
        v7 = *(_QWORD *)(v2 + 10040);
        *(_QWORD *)(v2 + 10040) = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v6 = *(DspLib::LoudnessMeter::Algorithm **)(v2 + 10040);
        }
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
        (*(void (**)(DspLib::LoudnessMeter::Algorithm *, uint64_t, double))(*(_QWORD *)v6 + 16))(v6, v8, *(double *)(v2 + 24));
        return (*(uint64_t (**)(_QWORD, _QWORD, float))(**(_QWORD **)(v2 + 10040) + 128))(*(_QWORD *)(v2 + 10040), 0, *(float *)(*(_QWORD *)(v2 + 48) + 48));
      }
    }
    else
    {
      *(_QWORD *)(v2 + 10032) = 0;
      if (this)
        (*(void (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      this = *(_QWORD *)(v2 + 10040);
      *(_QWORD *)(v2 + 10040) = 0;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void sub_1B60DEBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C4041E411AFLL);
  _Unwind_Resume(a1);
}

void DspLib::LoudnessNormalizer::Algorithm::setEnvironmentalNoiseSPL(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  *((float *)this + 2436) = a2;
  DspLib::LoudnessNormalizer::Algorithm::configureGainTable(this);
}

void DspLib::LoudnessNormalizer::Algorithm::configureGainTable(DspLib::LoudnessNormalizer::Algorithm *this)
{
  int v2;
  float v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  float v9;
  _BOOL4 v10;
  float v11;
  _BOOL4 v12;
  char *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  uint64_t v22;

  v2 = *((_DWORD *)this + 188);
  if (v2 == 2)
  {
    v3 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    v14 = (float *)*((_QWORD *)this + 6);
    v5 = v14[4];
    v6 = *((float *)this + 189);
    v7 = *((float *)this + 185);
    v9 = v14[38];
    v10 = v14[37] != 0.0;
    v11 = v14[42];
    v12 = v14[43] >= 0.5;
    v13 = (char *)this + 840;
    v8 = 0;
  }
  else if (v2 == 1)
  {
    v15 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    v16 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)4);
    v17 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0xD);
    v18 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
    v19 = *((_QWORD *)this + 6);
    v20 = llroundf(*(float *)(v19 + 128));
    v21 = *(float *)(v19 + 148) != 0.0;
    v9 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0x26);
    v22 = *((_QWORD *)this + 6);
    v11 = *(float *)(v22 + 168);
    v12 = *(float *)(v22 + 172) >= 0.5;
    v13 = (char *)this + 840;
    v3 = v15;
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v20;
    v10 = v21;
  }
  else
  {
    if (v2)
      return;
    v3 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
    v4 = (float *)*((_QWORD *)this + 6);
    v5 = v4[4];
    v6 = *((float *)this + 189);
    v7 = *((float *)this + 185);
    v8 = llroundf(v4[32]);
    v9 = v4[38];
    v10 = v4[37] != 0.0;
    v11 = v4[42];
    v12 = v4[43] >= 0.5;
    v13 = (char *)this + 840;
  }
  DspLib::LoudnessNormalizer::GainTable::setParameters((uint64_t)v13, v8, v10, v12, v3, v5, v6, v7, v9, v11);
}

float DspLib::LoudnessNormalizer::Algorithm::processEnvironmentalNoiseSmoothing(DspLib::LoudnessNormalizer::Algorithm *this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  float v7;
  BOOL v8;
  float v9;

  v2 = *((_QWORD *)this + 1215);
  v3 = *((_QWORD *)this + 1216);
  *((float *)this + 2435) = a2;
  *((_QWORD *)this + 1216) = v2;
  v4 = v2 - v3;
  if (v4)
  {
    v5 = *((double *)this + 3);
    *((float *)this + 2434) = *((float *)this + 2434)
                            + (float)((float)((float)(v5 / (float)v4) - *((float *)this + 2434)) * 0.05);
  }
  if (*((_BYTE *)this + 736) || *((_BYTE *)this + 1364))
    return *((float *)this + 2522);
  v7 = (float)((float)(*(float *)(*((_QWORD *)this + 6) + 204) + *(float *)(*((_QWORD *)this + 6) + 184))
             + *(float *)(*((_QWORD *)this + 6) + 188))
     - *(float *)(*((_QWORD *)this + 6) + 192);
  if (v7 >= a2)
    v7 = a2;
  v8 = a2 < 0.0;
  v9 = 0.0;
  if (!v8)
    v9 = v7;
  return DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::process((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 10048), v9, *((_QWORD *)this + 1219) > 0);
}

float DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::process(DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother *this, float a2, int a3)
{
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float result;

  v3 = *((float *)this + 9);
  v4 = *((float *)this + 8)
     + (float)(*((float *)this + (*((float *)this + 8) >= a2)) * (float)(a2 - *((float *)this + 8)));
  v5 = 12;
  if (v3 < a2)
    v5 = 8;
  v6 = v3 + (float)(*(float *)((char *)this + v5) * (float)(a2 - v3));
  *((float *)this + 8) = v4;
  *((float *)this + 9) = v6;
  v7 = *((float *)this + 10);
  if (v7 >= a2)
  {
    v12 = 24;
    if (a3)
      v12 = 28;
    v11 = *(float *)((char *)this + v12);
  }
  else
  {
    v8 = (float)(v4 - v6) * 0.08;
    v9 = 1.0 - v8;
    if (v8 > 1.0)
      v9 = 0.0;
    if (v8 >= 0.0)
      v10 = v9;
    else
      v10 = 1.0;
    v11 = (float)((float)(1.0 - (float)(v10 * v10)) * *((float *)this + 5))
        + (float)((float)(v10 * v10) * *((float *)this + 4));
  }
  result = v7 + (float)(v11 * (float)(a2 - v7));
  *((float *)this + 10) = result;
  return result;
}

void DspLib::LoudnessNormalizer::Algorithm::setParameter(DspLib::LoudnessNormalizer::Algorithm *this, uint64_t a2, float a3)
{
  int v5;

  switch(a2)
  {
    case 47:
      if (!DspLib::isEqual(this, a3, *(float *)(*((_QWORD *)this + 6) + 188), 1.0e-20))
      {
        *(float *)(*((_QWORD *)this + 6) + 188) = a3;
        if (*((_DWORD *)this + 188) == 2)
        {
          *((_QWORD *)this + 1219) = vcvtad_u64_f64(*((double *)this + 3) * 0.25);
          DspLib::LoudnessNormalizer::Algorithm::configureGainTable(this);
        }
      }
      break;
    case 34:
      *(float *)(*((_QWORD *)this + 6) + 136) = a3;
      *((float *)this + 2376) = a3;
      break;
    case 1:
      *(float *)(*((_QWORD *)this + 6) + 4) = a3;
      *((float *)this + 190) = a3;
      DspLib::LoudnessNormalizer::Algorithm::configureGainTable(this);
      DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
      *((_DWORD *)this + 152) = v5;
      break;
    default:
      DspLib::AlgorithmBase::setParameter(this, a2, a3);
      break;
  }
}

float DspLib::LoudnessNormalizer::GainTable::setParameters(uint64_t a1, unsigned int a2, int a3, int a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  uint64_t v17;
  float v18;
  float v19;
  uint64_t i;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;

  v35 = a7 + a8;
  v36 = a5 - (float)(a7 + a8);
  v34 = a5 + a6;
  v17 = a1 + 4;
  v18 = 1.0 - (float)(1.0 / a9);
  if (a9 > 100.0)
    v18 = 0.99;
  if (a9 < 1.0)
    v18 = 0.0;
  v33 = v18;
  v19 = -100.0;
  for (i = 4; i != 88; i += 4)
  {
    if (a2)
    {
      if (a2 > 2)
        goto LABEL_25;
      v21 = (float)(a5 - v19) * 0.8;
      v22 = v21 * -0.03125;
      if (v21 < 0.0)
      {
        v23 = 12.0;
      }
      else
      {
        v22 = v21 / 22.0;
        v23 = 9.0;
      }
      v24 = logf(v22);
      v25 = expf(v24 * v23);
      v26 = logf(v25 + 1.0);
      v27 = v21 / expf(v26 / v23);
      if (v27 > 0.0 && a2 == 2)
        v27 = v27 * 0.66;
    }
    else
    {
      v27 = a8;
      if (v19 >= v36)
      {
        if (v19 >= a5)
        {
          if (a3)
          {
            v29 = a5 - v19;
            v30 = v33;
          }
          else
          {
            v29 = 1.0 - (float)(v19 / a5);
            v30 = v34;
          }
          v27 = v30 * v29;
        }
        else
        {
          v27 = (float)((float)(a5 - v19) * a8) / v35;
        }
      }
    }
    *(float *)(a1 + i) = v27;
LABEL_25:
    if (a4)
    {
      v31 = a10 - v19;
      if ((float)(a10 - v19) >= *(float *)(a1 + i))
        v31 = *(float *)(a1 + i);
      *(float *)(a1 + i) = v31;
    }
    v19 = v19 + 5.5;
  }
  return DspLib::createInterpolationTable(v17, 21, a1 + 88, 0x54uLL);
}

float DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(DspLib::LoudnessNormalizer::Algorithm *this, DspLib::LoudnessNormalizer::Parameters *a2)
{
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v4 = *(float *)(*((_QWORD *)this + 6)
                + 4
                * DspLib::LoudnessNormalizer::Parameters::automationVolumeForParameterAndPoint(a2, 0));
  v5 = *(float *)(*((_QWORD *)this + 6)
                + 4
                * DspLib::LoudnessNormalizer::Parameters::automationVolumeForParameterAndPoint(a2, 1));
  v6 = *(float *)(*((_QWORD *)this + 6)
                + 4 * DspLib::LoudnessNormalizer::Parameters::automationParameter(a2, 0));
  v7 = DspLib::LoudnessNormalizer::Parameters::automationParameter(a2, 1);
  if (v5 >= v4)
    v8 = v4;
  else
    v8 = v5;
  if (v4 >= v5)
    v9 = v4;
  else
    v9 = v5;
  v10 = *((float *)this + 190);
  if (v9 >= v10)
    v11 = *((float *)this + 190);
  else
    v11 = v9;
  if (v10 >= v8)
    v12 = v11;
  else
    v12 = v8;
  return v6
       + (float)((float)(*(float *)(*((_QWORD *)this + 6) + 4 * v7) - v6)
               * (float)((float)(v12 - v8) / (float)((float)(v9 - v8) + 1.0)));
}

float DspLib::LoudnessNormalizer::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  DspLib *v6;
  float result;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  float v11;
  float v12;
  DspLib *v13;
  DspLib *v14;
  _BOOL8 isEqual;
  DspLibBuffer *v16;
  float v17;
  unsigned int v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  float v24;
  double v25;
  DspLib::CircularDelay *v26;
  DspLib::CircularDelay *v27;
  unint64_t v28;

  v6 = (DspLib *)DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (!*(_BYTE *)(a1 + 8))
    return result;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = vcvtas_u32_f32(*(float *)(v8 + 68));
  v10 = *(float *)(v8 + 160) >= 0.5;
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(v8 + 176);
  v11 = *(float *)(v8 + 24);
  v12 = *(float *)(v8 + 28);
  *(_DWORD *)(a1 + 732) = v9;
  *(_BYTE *)(a1 + 736) = v10;
  *(_BYTE *)(a1 + 737) = v11 >= 0.5;
  *(_BYTE *)(a1 + 738) = v12 >= 0.5;
  *(_DWORD *)(a1 + 740) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(v8 + 64);
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(a1 + 752) = vcvtas_u32_f32(*(float *)(v8 + 76));
  *(_DWORD *)(a1 + 756) = *(_DWORD *)(v8 + 52);
  *(_DWORD *)(a1 + 760) = *(_DWORD *)(v8 + 4);
  *(_BYTE *)(a1 + 728) = *(float *)v8 < 0.5;
  *(float *)(a1 + 1348) = DspLib::dB2Amp(v6, *(float *)(v8 + 220));
  *(float *)(a1 + 1352) = DspLib::dB2Amp(v13, *(float *)(*(_QWORD *)(a1 + 48) + 224));
  isEqual = DspLib::isEqual(v14, *(float *)(*(_QWORD *)(a1 + 48) + 220), 0.0, 1.0e-20);
  *(_BYTE *)(a1 + 1356) = !isEqual;
  *(_BYTE *)(a1 + 1357) = !DspLib::isEqual((DspLib *)isEqual, *(float *)(*(_QWORD *)(a1 + 48) + 224), 0.0, 1.0e-20);
  v16 = (DspLibBuffer *)(a1 + 9760);
  if (*(_BYTE *)(a1 + 1356))
    DspLibBuffer::initialize(v16, *(unsigned int *)(a1 + 32), *(_DWORD *)(a1 + 12));
  else
    DspLibBuffer::uninitialize(v16);
  if (DspLib::LoudnessNormalizer::Algorithm::computeSRCFactors((DspLib::LoudnessNormalizer::Algorithm *)a1))
  {
    v17 = *(float *)(a1 + 328);
    v18 = vcvtas_u32_f32(v17 * 0.8);
    LODWORD(v4) = vcvtas_u32_f32(v17 / *(float *)(a1 + 336));
    DspLib::LoudnessNormalizer::Algorithm::configureSamplerateConverters(a1);
    DspLib::LoudnessNormalizer::Algorithm::resizeTempBuffers((DspLib::LoudnessNormalizer::Algorithm *)a1);
    if (v18 <= 1)
      v19 = 1;
    else
      v19 = v18;
    DspLib::LinearDelay::setLength((float **)(a1 + 512), v19);
    *(_QWORD *)(a1 + 536) = v4;
    v20 = *(float *)(a1 + 336);
    *(float *)(a1 + 9448) = v20;
    *(float *)(a1 + 9480) = 1.0 - expf(-1.0 / (float)((float)(v20 * (float)(*(float *)(a1 + 9476) * 1000.0)) / 1000.0));
    DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters(a1);
  }
  v21 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 9504) = *(_DWORD *)(v21 + 136);
  *(_BYTE *)(a1 + 9496) = *(float *)(v21 + 140) >= 0.5;
  *(_DWORD *)(a1 + 9500) = *(_DWORD *)(a1 + 732);
  v22 = *(float *)(v21 + 180);
  *(float *)(a1 + 9476) = v22;
  *(float *)(a1 + 9480) = 1.0 - expf(-1.0 / (float)((float)((float)(v22 * 1000.0) * *(float *)(a1 + 9448)) / 1000.0));
  DspLib::LoudnessNormalizer::Algorithm::configureSideChainLowPassFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  v23 = vcvtas_u32_f32(*(float *)(*(_QWORD *)(a1 + 48) + 144));
  if (!v23)
  {
    v24 = 1.0e10;
    goto LABEL_15;
  }
  if (v23 == 1)
  {
    v24 = 2000.0;
LABEL_15:
    *(float *)(a1 + 1388) = 1.0 - expf(-1.0 / (float)((float)(v24 * *(float *)(a1 + 328)) / 1000.0));
  }
  DspLib::LoudnessNormalizer::Algorithm::configureHysteresisAndOffsets((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureWeightingFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configurePeakPowerFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  if (*(_DWORD *)(a1 + 732) >= 2u)
    *(double *)(a1 + 9648) = *(float *)(a1 + 328);
  DspLib::LoudnessNormalizer::Algorithm::configureIntegratedLoudnessDelay((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureGainTable((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureMedianFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureAGC((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureShapingFilter((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureMeters((DspLib::LoudnessNormalizer::Algorithm *)a1);
  DspLib::LoudnessNormalizer::Algorithm::configureAutoReset((DspLib::LoudnessNormalizer::Algorithm *)a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v26 = *(DspLib::CircularDelay **)(a1 + 1264);
  v27 = *(DspLib::CircularDelay **)(a1 + 1272);
  if (v26 != v27)
  {
    v28 = (unint64_t)v25;
    do
    {
      DspLib::CircularDelay::setLength(v26, v28);
      v26 = (DspLib::CircularDelay *)((char *)v26 + 32);
    }
    while (v26 != v27);
  }
  return DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::setParameters((float *)(a1 + 10048), *(float *)(*(_QWORD *)(a1 + 48) + 196), *(float *)(*(_QWORD *)(a1 + 48) + 208), *(float *)(*(_QWORD *)(a1 + 48) + 212), *(float *)(*(_QWORD *)(a1 + 48) + 216));
}

BOOL DspLib::LoudnessNormalizer::Algorithm::computeSRCFactors(DspLib::LoudnessNormalizer::Algorithm *this)
{
  double v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  float v7;
  float v8;

  v1 = *((double *)this + 3);
  if (v1 >= 50000.0)
    v2 = 4;
  else
    v2 = 2;
  v3 = vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6) + 8));
  if (v1 < 30000.0)
    v2 = 1;
  v4 = 2 * v2;
  if (v3 == 3)
    v2 = 1;
  if (v3 >= 2)
    v5 = v2;
  else
    v5 = v4;
  v6 = v5 != *((_DWORD *)this + 80);
  *((_DWORD *)this + 80) = v5;
  v7 = v1 / (double)v5;
  v8 = roundf(v7);
  *((float *)this + 81) = v8;
  *((float *)this + 82) = v8 / (float)(0x40 / v5);
  *((float *)this + 83) = v8 / (float)(0x200 / v5);
  *((float *)this + 84) = v8 / (float)(0x1000 / v5);
  return v6;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::configureSamplerateConverters(uint64_t this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_DWORD *)(this + 320);
  v2 = 0x40 / v1;
  v3 = 0x200 / v1;
  *(_DWORD *)(this + 340) = v1;
  *(_DWORD *)(this + 344) = 0;
  if (v1 <= 0x40)
  {
    *(_DWORD *)(this + 348) = v2;
    *(_DWORD *)(this + 352) = 0;
  }
  if (v2 <= v3)
  {
    v4 = v3 / v2;
    *(_QWORD *)(this + 356) = v4;
    *(_QWORD *)(this + 364) = v4;
  }
  v5 = *(float *)(this + 332);
  v6 = vcvtas_u32_f32(v5 / *(float *)(this + 336));
  if (v6)
  {
    *(_DWORD *)(this + 372) = v6;
    *(_DWORD *)(this + 376) = 0;
  }
  v7 = *(float *)(this + 328);
  v8 = vcvtas_u32_f32(v7 / v5);
  if (v8)
  {
    *(_DWORD *)(this + 384) = v8;
    *(_DWORD *)(this + 388) = 0;
  }
  v9 = vcvtad_u64_f64(*(double *)(this + 24) / v7);
  if (v9)
  {
    *(_DWORD *)(this + 396) = v9;
    *(_DWORD *)(this + 400) = 0;
  }
  return this;
}

void DspLib::LoudnessNormalizer::Algorithm::resizeTempBuffers(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)this + 8);
  v3 = v2 / *((_DWORD *)this + 80) + 1;
  v4 = *((_QWORD *)this + 1232);
  v5 = *((_QWORD *)this + 1233);
  while (v4 != v5)
  {
    std::vector<float>::resize(v4, v3);
    v4 += 24;
  }
  std::vector<float>::resize((uint64_t)this + 9880, v3);
  std::vector<float>::resize((uint64_t)this + 9904, (v2 >> 6) + 1);
  std::vector<float>::resize((uint64_t)this + 9928, (v2 >> 9) + 1);
  std::vector<float>::resize((uint64_t)this + 9952, (v2 >> 9) + 1);
}

void DspLib::LoudnessNormalizer::Algorithm::configureSideChainLowPassFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 6);
  if (*(float *)(v2 + 156) >= 0.5)
  {
    v3 = *(unsigned int *)(v2 + 164);
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624));
    DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624), *((unsigned int *)this + 3), round(*((double *)this + 3)), 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 624, (v3 << 32) | 8, (double *)0x3F80000000000000, 0, 0x41uLL);
  }
  else
  {
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 624));
  }
}

double DspLib::LoudnessNormalizer::Algorithm::configureHysteresisAndOffsets(DspLib::LoudnessNormalizer::Algorithm *this)
{
  double result;
  unsigned int v2;
  unsigned int v3;

  LODWORD(result) = *(_DWORD *)(*((_QWORD *)this + 6) + 144);
  v2 = vcvtas_u32_f32(*(float *)&result);
  if (v2 == 1)
  {
    result = -131072.094;
    *((_QWORD *)this + 166) = 0xC1000000C0E00000;
    *(_QWORD *)((char *)this + 1340) = 0xC100000040400000;
  }
  else if (!v2)
  {
    v3 = *((_DWORD *)this + 183);
    if (v3 < 2)
    {
      *((_QWORD *)this + 166) = 0xC0800000BFD872B0;
      result = -131072.031;
      *(_QWORD *)((char *)this + 1340) = 0xC100000040400000;
    }
    else
    {
      *((_QWORD *)this + 166) = 0xC1000000C0A00000;
      *((_DWORD *)this + 335) = 0;
      *(_QWORD *)&result = COERCE_UNSIGNED_INT(-7.0) | 0xC100000000000000;
      if (v3 == 2)
        *(float *)&result = -10.0;
      *((_DWORD *)this + 336) = LODWORD(result);
    }
  }
  return result;
}

void DspLib::LoudnessNormalizer::Algorithm::configureWeightingFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unsigned int v2;
  double *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  vDSP_Length v11;
  char *v12;
  float *v13;
  float v14;
  void *__p[5];
  uint64_t v16;
  int v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v2 = vcvtas_u32_f32(*(float *)(*((_QWORD *)this + 6) + 144));
  if (v2 == 1)
  {
    DspLib::Biquad::Design::aWeighting(*((float *)this + 81), __p);
    std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)&v23, (char *)__p, (uint64_t)&v17, 3uLL);
    v6 = *((_QWORD *)this + 6);
    if (*(float *)(v6 + 56) >= 0.5)
    {
      v20 = 9;
      v21 = *(_DWORD *)(v6 + 60);
      v22 = 0x3F80000000000000;
      std::vector<DspLib::Biquad::Section>::resize((uint64_t)&v23, 0xCCCCCCCCCCCCCCCDLL * ((v24 - v23) >> 2) + 1);
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v20, *((float *)this + 81), 0, v7, (uint64_t)&v18);
      v8 = v24;
      v9 = v18;
      *((_DWORD *)v24 - 1) = v19;
      *(_OWORD *)(v8 - 20) = v9;
    }
  }
  else if (!v2)
  {
    DspLib::Biquad::Design::kWeighting(*((float *)this + 81), (uint64_t)__p);
    std::vector<DspLib::Biquad::Section>::__assign_with_size[abi:ne180100]<DspLib::Biquad::Section const*,DspLib::Biquad::Section const*>((char *)&v23, (char *)__p, (uint64_t)&v16, 2uLL);
    v4 = *((_QWORD *)this + 6);
    if (*(float *)(v4 + 56) >= 0.5)
    {
      v20 = 9;
      v21 = *(_DWORD *)(v4 + 60);
      v22 = 0x3F80000000000000;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v20, *((float *)this + 81), 0, v3, (uint64_t)&v18);
      v5 = v23;
      *(_OWORD *)(v23 + 20) = v18;
      *((_DWORD *)v5 + 9) = v19;
    }
  }
  DspLib_ITU1770_channelWeightsForLayout((char *)*((unsigned int *)this + 5), *(float *)(*((_QWORD *)this + 6) + 68) < 4.0, (uint64_t)__p);
  v10 = *((unsigned int *)this + 3);
  if (v10 != ((char *)__p[1] - (char *)__p[0]) >> 2)
  {
    std::vector<float>::resize((uint64_t)__p, v10);
    *((_BYTE *)this + 728) = 1;
    v10 = *((unsigned int *)this + 3);
  }
  DspLib::Biquad::Filter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 768), v10, 0xCCCCCCCCCCCCCCCDLL * ((v24 - v23) >> 2));
  v18 = *(_OWORD *)v23;
  v19 = *((_DWORD *)v23 + 4);
  if (*((_DWORD *)this + 3))
  {
    v11 = 0;
    do
    {
      v12 = v23;
      *(_OWORD *)v23 = v18;
      *((_DWORD *)v12 + 4) = v19;
      v13 = (float *)v23;
      v14 = sqrtf(*((float *)__p[0] + v11));
      *(float32x2_t *)v23 = vmul_n_f32(*(float32x2_t *)v23, v14);
      v13[2] = v14 * v13[2];
      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 768, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v24 - (char *)v13) >> 2), 0, v11++);
    }
    while (v11 < *((unsigned int *)this + 3));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_1B60DFB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 56);
  if (v12)
  {
    *(_QWORD *)(v10 - 48) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::LoudnessNormalizer::Algorithm::configurePeakPowerFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unint64_t v1;
  char *v2;

  if (*((_DWORD *)this + 183) <= 1u)
    v1 = ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 6) + 72) << 32) | 0x1B;
  else
    v1 = 0x41F000000000001BLL;
  v2 = (char *)this + 408;
  DspLib::Biquad::ParametricFilter::initialize((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 408), 1uLL, roundf(*((float *)this + 81)), 1uLL);
  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v2, v1, (double *)0x3F80000000000000, 0, 0x41uLL);
}

void DspLib::LoudnessNormalizer::Algorithm::configureIntegratedLoudnessDelay(DspLib::LoudnessNormalizer::Algorithm *this)
{
  unint64_t v1;
  uint64_t *v2;
  DspLib::CircularDelay *v3;
  DspLib::CircularDelay *v4;
  uint64_t v5;

  LODWORD(v1) = vcvtas_u32_f32(*((float *)this + 84) * 0.25);
  v2 = (uint64_t *)((char *)this + 1288);
  v3 = (DspLib::CircularDelay *)*((_QWORD *)this + 161);
  if ((_DWORD)v1)
  {
    if (!v3)
    {
      v4 = (DspLib::CircularDelay *)operator new();
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      v5 = *v2;
      *v2 = (uint64_t)v4;
      if (v5)
      {
        std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)v2, v5);
        v3 = (DspLib::CircularDelay *)*v2;
      }
      else
      {
        v3 = v4;
      }
    }
    DspLib::CircularDelay::setLength(v3, v1);
  }
  else
  {
    *v2 = 0;
    if (v3)
      std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)this + 1288, (uint64_t)v3);
  }
}

void DspLib::LoudnessNormalizer::Algorithm::configureMedianFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  DspLib::FastMedianFilter *v2;
  int v3;
  float v4;

  v2 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 552);
  DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
  *((_DWORD *)this + 152) = v3;
  DspLib::FastMedianFilter::initialize(v2, vcvtas_u32_f32(*((float *)this + 83)));
  v4 = 1.0;
  if (*((_DWORD *)this + 183) >= 2u)
    v4 = 1.0 - expf(-1.0 / (float)((float)(*((float *)this + 83) * 2316.0) / 1000.0));
  *((float *)this + 154) = v4;
}

void DspLib::LoudnessNormalizer::Algorithm::configureAGC(DspLib::LoudnessNormalizer::Algorithm *this)
{
  int v2;
  uint64_t v3;
  DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *v4;
  float v5;
  uint64_t v6;
  float v7;
  float *v8;
  float v9;
  int v10;
  float v11;

  v2 = *((unsigned __int8 *)this + 737);
  v3 = *((_QWORD *)this + 1192);
  if (v2)
  {
    if (v3)
      return;
    v4 = (DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)operator new(0x1FC0uLL, (std::align_val_t)0x40uLL);
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::IntegratedLoudnessProcessor(v4, 1, v5);
    v6 = *((_QWORD *)this + 1192);
    *((_QWORD *)this + 1192) = v4;
    if (v6)
    {
      MEMORY[0x1BCC95CE0](v6, 64);
      v4 = (DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)*((_QWORD *)this + 1192);
    }
    *((_DWORD *)v4 + 2023) = *((_DWORD *)this + 183);
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::reset(v4, v7);
    v8 = (float *)*((_QWORD *)this + 1192);
    v9 = *((float *)this + 84);
    v8[2010] = v9;
    v8[2018] = 1.0 - expf(-1.0 / (float)((float)(v9 * (float)(v8[2017] * 1000.0)) / 1000.0));
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    *((_DWORD *)this + 2387) = v10;
    v11 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - *((float *)this + 2387);
  }
  else
  {
    *((_QWORD *)this + 1192) = 0;
    v11 = 0.0;
    if (v3)
      MEMORY[0x1BCC95CE0](v3, 64);
  }
  *((float *)this + 2388) = v11;
}

void sub_1B60DFE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CE0](v1, 64);
  _Unwind_Resume(a1);
}

void DspLib::LoudnessNormalizer::Algorithm::configureShapingFilter(DspLib::LoudnessNormalizer::Algorithm *this)
{
  _BOOL4 v2;
  DspLib::LoudnessNormalizer::ShapingFilter *v3;

  v2 = DspLib::LoudnessNormalizer::Parameters::shapingFilterIsOn(*((float **)this + 6));
  v3 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9560);
  if (v2)
    DspLib::LoudnessNormalizer::ShapingFilter::initialize(v3, *((_DWORD *)this + 3), *((double *)this + 3));
  else
    DspLib::Biquad::Filter::uninitialize(v3);
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::configureMeters(DspLib::LoudnessNormalizer::Algorithm *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  DspLib *v5;
  double v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  DspLib *v10;
  double v11;

  v2 = *((_QWORD *)this + 1254);
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v4 = *((unsigned int *)this + 5);
    if (v3 == (_DWORD)v4)
    {
      v5 = (DspLib *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1254) + 40))(*((_QWORD *)this + 1254));
      if (DspLib::isEqual(v5, v6, *((double *)this + 3), 1.0e-20))
      {
LABEL_6:
        (*(void (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 1254) + 128))(*((_QWORD *)this + 1254), 0, *(float *)(*((_QWORD *)this + 6) + 44));
        goto LABEL_7;
      }
      v4 = *((unsigned int *)this + 5);
    }
    (*(void (**)(_QWORD, uint64_t, double))(**((_QWORD **)this + 1254) + 16))(*((_QWORD *)this + 1254), v4, *((double *)this + 3));
    goto LABEL_6;
  }
LABEL_7:
  result = *((_QWORD *)this + 1255);
  if (!result)
    return result;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  v9 = *((unsigned int *)this + 5);
  if (v8 != (_DWORD)v9)
    goto LABEL_11;
  v10 = (DspLib *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1255) + 40))(*((_QWORD *)this + 1255));
  if (!DspLib::isEqual(v10, v11, *((double *)this + 3), 1.0e-20))
  {
    v9 = *((unsigned int *)this + 5);
LABEL_11:
    (*(void (**)(_QWORD, uint64_t, double))(**((_QWORD **)this + 1255) + 16))(*((_QWORD *)this + 1255), v9, *((double *)this + 3));
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 1255) + 128))(*((_QWORD *)this + 1255), 0, *(float *)(*((_QWORD *)this + 6) + 48));
}

BOOL DspLib::LoudnessNormalizer::Algorithm::configureAutoReset(DspLib::LoudnessNormalizer::Algorithm *this)
{
  float v2;
  _BOOL8 result;

  if (DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(2, *((float *)this + 186)))
  {
    DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
    DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v2);
    DspLib::LoudnessNormalizer::Algorithm::resetSampleRateConverters((uint64_t)this);
  }
  result = DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(4, *((float *)this + 186));
  if (result && (result = DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(1, *((float *)this + 186))))
  {
    *((_DWORD *)this + 325) = *(_DWORD *)(*((_QWORD *)this + 6) + 36);
    *((_BYTE *)this + 1296) = 1;
  }
  else
  {
    *((_BYTE *)this + 1296) = 0;
  }
  *((_BYTE *)this + 1326) = *((_DWORD *)this + 183) > 1u;
  return result;
}

float DspLib::LoudnessNormalizer::Algorithm::EnvironmentalNoiseSmoother::setParameters(float *a1, float a2, float a3, float a4, float a5)
{
  float v10;
  float result;

  v10 = 1.0 - expf(-1.0 / (float)(a5 * 0.0));
  *a1 = v10;
  a1[1] = 1.0 - expf(-1.0 / (float)(a5 * 0.8));
  a1[2] = 1.0 - expf(-1.0 / (float)(a5 * 0.2));
  a1[3] = v10;
  a1[4] = 1.0 - expf(-1.0 / (float)(a5 * 0.5));
  a1[5] = 1.0 - expf(-1.0 / (float)(a2 * a5));
  a1[6] = 1.0 - expf(-1.0 / (float)(a3 * a5));
  result = 1.0 - expf(-1.0 / (float)(a4 * a5));
  a1[7] = result;
  return result;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::sidechainFilterAndDownsample(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  float **v10;
  uint64_t v11;
  unint64_t v12;
  float **v13;
  size_t v14;
  float **v15;
  float **v16;
  float **v17;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  float **v22[3];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 624))
  {
    v6 = *((_QWORD *)a2 + 2);
    if (v6 <= 1)
      v6 = 1;
    if (*(_DWORD *)(a1 + 12) == 1)
      v7 = v6;
    else
      v7 = ((v6 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    MEMORY[0x1E0C80A78](a1);
    v9 = (float *)((char *)&v19 - v8);
    v10 = (float **)*(unsigned int *)(a1 + 12);
    MEMORY[0x1E0C80A78](v11);
    v13 = (float **)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFF0));
    if (v12 >= 0x200)
      v14 = 512;
    else
      v14 = v12;
    bzero((char *)&v19 - ((v12 + 15) & 0xFFFFFFFF0), v14);
    if ((_DWORD)v10)
    {
      v15 = v10;
      v16 = v13;
      do
      {
        *v16++ = v9;
        v9 += v7;
        v15 = (float **)((char *)v15 - 1);
      }
      while (v15);
    }
    v17 = (float **)*((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_QWORD *)a2 + 2);
    v22[0] = v13;
    v22[1] = v10;
    v22[2] = v17;
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 624), (uint64_t)&v23, v22);
    v21[0] = v13;
    v21[1] = v10;
    v21[2] = v17;
    DspLib::DownSampler::process((unsigned int *)(a1 + 340), v21, a3);
  }
  else
  {
    v19 = *a2;
    v20 = *((_QWORD *)a2 + 2);
    DspLib::DownSampler::process((unsigned int *)(a1 + 340), &v19, a3);
  }
  return a3[2];
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::calculatePeakPower(uint64_t a1, uint64_t a2, float **a3, uint64_t a4, uint64_t a5)
{
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 408), a2, (uint64_t)a3, a2, a3);
  v14 = a5;
  v15 = a4;
  v13[0] = &v15;
  v13[1] = 1;
  v11[2] = a3;
  v12 = a2;
  v11[0] = &v12;
  v11[1] = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 348), v11, v13);
  return v14;
}

void DspLib::LoudnessNormalizer::Algorithm::audioActivityShift(uint64_t a1, const float *a2, vDSP_Length a3, float *a4, vDSP_Length a5)
{
  int32x2_t v8;
  float v9;
  uint64_t v10;
  float v11;

  *(float *)v8.i32 = DspLib::AudioActivityDetector::process(a1 + 9648, a2, a3, *(float *)(a1 + 9468));
  if (*(float *)v8.i32 > 0.0)
  {
    v9 = *(float *)v8.i32;
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::shift((DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor *)(a1 + 1408), v8);
    v10 = *(_QWORD *)(a1 + 1288);
    if (v10)
      DspLib::add(*(float **)v10, (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 2, -v9);
    DspLib::add(a4, a5, -v9);
    *(float *)(a1 + 380) = *(float *)(a1 + 380) - v9;
    v11 = *(float *)(a1 + 392) - v9;
    *(float *)(a1 + 1376) = *(float *)(a1 + 1376) - v9;
    *(float *)(a1 + 392) = v11 - v9;
  }
}

float DspLib::AudioActivityDetector::process(uint64_t a1, const float *a2, vDSP_Length __N, float a4)
{
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  int v14;
  float result;

  if (!__N)
    return 0.0;
  v7 = DspLib::maxv(a2, __N);
  v8 = fmaxf(v7, -70.0);
  v9 = *(float *)(a1 + 8);
  v10 = *(double *)a1 * (float)(v8 - *(float *)(a1 + 12)) / (double)__N / 100.0;
  v11 = v8 > (float)(v9 + 4.0);
  if (v10 >= 1.0)
    v11 = 0;
  v12 = *(double *)a1;
  v13 = v9 + (float)((float)((float)((float)(v8 - v9) * 10.0) / v12) * (float)__N);
  if (v8 < v9)
    v13 = v8;
  if (v11)
    v13 = v8;
  *(float *)(a1 + 8) = v13;
  *(float *)(a1 + 12) = v8;
  v14 = v7 < (float)(a4 + -10.0) && v11;
  result = 0.0;
  if (v14)
    result = 1.5;
  *(_BYTE *)(a1 + 16) |= v14;
  return result;
}

vDSP_Length DspLib::LoudnessNormalizer::Algorithm::medianLevelWithHysteresis(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unint64_t a5)
{
  vDSP_Length v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _QWORD v16[3];
  uint64_t v17;
  _QWORD v18[2];
  vDSP_Length v19;
  float *v20;

  v20 = a4;
  v18[0] = &v20;
  v18[1] = 1;
  v19 = a5;
  v16[2] = a3;
  v17 = a2;
  v16[0] = &v17;
  v16[1] = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 356), v16, v18);
  v7 = v19;
  DspLib::FastMedianFilter::process((const void **)(a1 + 552), (uint64_t)a4, v19, (uint64_t)a4);
  DspLib::add(a4, v7, *(float *)(a1 + 1328));
  if (!v7)
    return v7;
  v8 = *(float *)(a1 + 616);
  v9 = 4 * v7;
  v10 = a4;
  do
  {
    v11 = *v10;
    v12 = *(float *)(a1 + 1372);
    if (*v10 <= (float)(v12 + 0.0))
    {
      v13 = v11 + 5.0;
      if (v13 >= v12)
        goto LABEL_7;
      v11 = v12 + (float)((float)(v13 - v12) * v8);
    }
    *(float *)(a1 + 1372) = v11;
    v12 = v11;
LABEL_7:
    *v10++ = v12;
    v9 -= 4;
  }
  while (v9);
  if (*(_BYTE *)(a1 + 40))
  {
    v14 = DspLib::maxv(a4, v7);
    if (*(float *)(a1 + 10000) >= v14)
      v14 = *(float *)(a1 + 10000);
    *(float *)(a1 + 10000) = v14;
  }
  return v7;
}

vDSP_Length DspLib::LoudnessNormalizer::Algorithm::gatingAndModifiedPeakLevel(uint64_t a1, float *__C, vDSP_Length __N, const float *a4, vDSP_Length a5)
{
  vDSP_Length v10;
  float v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  vDSP_Length v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float **v35;
  uint64_t v36;
  vDSP_Length v37;
  float *v38;
  const float **v39;
  uint64_t v40;
  vDSP_Length __Na;
  const float *v42;

  if (*(_DWORD *)(a1 + 732) >= 2u)
  {
    __Na = a5;
    v42 = a4;
    v39 = &v42;
    v40 = 1;
    v37 = __N;
    v38 = __C;
    v35 = &v38;
    v36 = 1;
    DspLib::DownSampler::process((unsigned int *)(a1 + 364), &v35, &v39);
    v10 = __Na;
    if (!__N)
      return v10;
    v11 = DspLib::maxv(__C, __N);
    v12 = *(float **)(a1 + 9904);
    *v12 = v11;
    v13 = v11 + (float)(*(float *)(a1 + 1332) + *(float *)(a1 + 1336));
    *v12 = v13;
    if (v13 <= -70.0)
    {
      v15 = *(float *)(a1 + 9672);
      v14 = *(float *)(a1 + 324) / (float)__N;
    }
    else
    {
      v14 = *(float *)(a1 + 324) / (float)__N;
      v15 = *(float *)(a1 + 9672) + (float)((float)((float)(1.0 - *(float *)(a1 + 9672)) * 100.0) / v14);
      *(float *)(a1 + 9672) = v15;
    }
    v24 = *(float *)(a1 + 1368);
    v25 = *(float *)(a1 + 9992);
    if (v25 < *(float *)(a1 + 10000))
      v25 = *(float *)(a1 + 10000);
    v26 = v24 - v25;
    v27 = 0.0;
    if (v26 <= 12.0)
      v27 = 1.0 - (float)(v26 / 12.0);
    if (v26 >= 0.0)
      v28 = v27;
    else
      v28 = 1.0;
    v29 = (float)((float)(v28 * v28) * 99.0) + 1.0;
    if (v29 >= v15)
      v15 = v29;
    *(float *)(a1 + 10016) = v15;
    v30 = expf(-1.0 / (float)((float)(v14 * v15) / 1000.0));
    v31 = *__C;
    if (*__C <= (float)(*(float *)(a1 + 1340) + v24))
    {
      v32 = v31 - *(float *)(a1 + 1344);
      if (v32 >= v24)
      {
LABEL_31:
        *__C = v24;
        if (*(_BYTE *)(a1 + 40))
        {
          v33 = *(float *)(a1 + 10004);
          if (v33 < *v12)
            v33 = *v12;
          *(float *)(a1 + 10004) = v33;
        }
        DspLib::fill(__C, __N, *v12);
        return v10;
      }
      v31 = v24 + (float)((float)(v32 - v24) * (float)(1.0 - v30));
    }
    *(float *)(a1 + 1368) = v31;
    v24 = v31;
    goto LABEL_31;
  }
  DspLib::add(__C, __N, *(float *)(a1 + 1332));
  if (__N)
  {
    v16 = *(float *)(a1 + 1340);
    v17 = *(float *)(a1 + 1344);
    v18 = 4 * __N;
    v19 = __C;
    while (1)
    {
      v20 = *v19;
      v21 = *(float *)(a1 + 1368);
      if (*v19 > (float)(v16 + v21))
        goto LABEL_10;
      v22 = v20 - v17;
      if (v22 < v21)
        break;
LABEL_11:
      *v19++ = v21;
      v18 -= 4;
      if (!v18)
        goto LABEL_12;
    }
    v20 = v21 + (float)(v22 - v21);
LABEL_10:
    *(float *)(a1 + 1368) = v20;
    v21 = v20;
    goto LABEL_11;
  }
LABEL_12:
  __Na = a5;
  v42 = a4;
  v39 = &v42;
  v40 = 1;
  v37 = __N;
  v38 = __C;
  v35 = &v38;
  v36 = 1;
  DspLib::DownSampler::process((unsigned int *)(a1 + 364), &v35, &v39);
  v10 = __Na;
  if (*(_BYTE *)(a1 + 40) && __Na)
  {
    v23 = DspLib::maxv(a4, __Na);
    if (*(float *)(a1 + 10004) >= v23)
      v23 = *(float *)(a1 + 10004);
    *(float *)(a1 + 10004) = v23;
  }
  return v10;
}

void DspLib::LoudnessNormalizer::Algorithm::gateIntegratedLoudness(uint64_t a1, const float *a2, vDSP_Length a3, float *__C, vDSP_Length __N)
{
  float v10;
  BOOL v11;
  float v12;
  float v13;

  v10 = -2.0;
  if (*(_DWORD *)(a1 + 732) <= 1u)
    v10 = -4.0 - *(float *)(a1 + 1332);
  DspLib::add(__C, __N, v10);
  if (*(_BYTE *)(a1 + 40))
    v11 = __N == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = DspLib::maxv(__C, __N);
    if (*(float *)(a1 + 10012) >= v12)
      v12 = *(float *)(a1 + 10012);
    *(float *)(a1 + 10012) = v12;
  }
  DspLib::LoudnessNormalizer::AGatingBProcessor::process(a1 + 1376, (uint64_t)__C, __N, (uint64_t)a2);
  if (*(_BYTE *)(a1 + 40) && a3)
  {
    v13 = DspLib::maxv(a2, a3);
    if (*(float *)(a1 + 9992) >= v13)
      v13 = *(float *)(a1 + 9992);
    *(float *)(a1 + 9992) = v13;
  }
}

uint64_t DspLib::LoudnessNormalizer::AGatingBProcessor::process(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  float v6;
  float v7;
  char v8;

  if (a3)
  {
    v4 = 0;
    v5 = *(_BYTE *)(result + 4);
    do
    {
      v6 = *(float *)(a2 + 4 * v4);
      v7 = *(float *)(a4 + 4 * v4);
      v8 = v5;
      v5 = v6 > v7;
      if (v7 >= *(float *)result && v6 <= v7)
      {
        if (v8)
        {
          if (v7 >= *(float *)(result + 8))
            v7 = *(float *)(result + 8);
        }
        else
        {
          v7 = *(float *)result + (float)((float)(v7 - *(float *)result) * *(float *)(result + 12));
        }
      }
      *(float *)result = v7;
      *(float *)(result + 8) = v6;
      *(float *)(a4 + 4 * v4++) = v7;
    }
    while (a3 > v4);
    *(_BYTE *)(result + 4) = v5;
  }
  return result;
}

void DspLib::LoudnessNormalizer::Algorithm::applyGain(uint64_t a1, __int128 *a2, __int128 *a3, const float *a4, float **a5)
{
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  DspLib::Biquad::Filter::process((_QWORD *)(a1 + 216), (uint64_t)a4, (uint64_t)a5, (uint64_t)a4, a5);
  if (*(_BYTE *)(a1 + 9560))
  {
    v21 = *a2;
    v22 = *((_QWORD *)a2 + 2);
    v19 = *a3;
    v20 = *((_QWORD *)a3 + 2);
    DspLib::Biquad::Filter::process((_QWORD *)(a1 + 9560), (uint64_t)&v21, (float ***)&v19);
    v9 = (const void **)(a1 + 1264);
    v10 = *((_QWORD *)a3 + 1);
    v11 = *((_QWORD *)a3 + 2);
    *(_QWORD *)&v21 = *(_QWORD *)a3;
    *((_QWORD *)&v21 + 1) = v10;
    v22 = v11;
    *(_QWORD *)&v19 = v21;
    *((_QWORD *)&v19 + 1) = v10;
    v20 = v11;
    v12 = &v21;
    v13 = &v19;
  }
  else
  {
    v9 = (const void **)(a1 + 1264);
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v15 = *a3;
    v16 = *((_QWORD *)a3 + 2);
    v12 = &v17;
    v13 = &v15;
  }
  DspLib::MultiChannelCircularDelay::process(v9, v12, v13);
  if (*(_DWORD *)(a1 + 12))
  {
    v14 = 0;
    do
      DspLib::multiply(*(float **)(*(_QWORD *)a3 + 8 * v14++), *((_QWORD *)a3 + 2), a4);
    while (v14 < *(unsigned int *)(a1 + 12));
  }
}

void DspLib::LoudnessNormalizer::Algorithm::applyAGC(DspLib::LoudnessNormalizer::Algorithm *this, float *a2, vDSP_Length a3, unint64_t a4)
{
  float v8;
  float *v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  if (*((_BYTE *)this + 737))
  {
    v8 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - *((float *)this + 2387);
    v9 = (float *)((char *)this + 9552);
    *((float *)this + 2388) = v8;
    if (v8 > 24.0)
      v9 = (float *)&DspLib::LoudnessNormalizer::Algorithm::kAGCMaxGain;
    if (v8 < -24.0)
      v9 = (float *)&DspLib::LoudnessNormalizer::Algorithm::kAGCMinGain;
    v10 = *v9;
    *((float *)this + 2388) = *v9;
    v11 = *((float *)this + 2386);
    if (v11 < 1.0 && a3 != 0)
    {
      v13 = (double)a4 / (*((double *)this + 3) * 10.0);
      v14 = v11 + v13;
      v15 = 0.0;
      if (v14 >= 0.0)
      {
        v15 = 1.0;
        if (v14 <= 1.0)
          v15 = v14;
      }
      *((float *)this + 2386) = v15;
      v16 = DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this);
      v17 = v16 - DspLib::maxv(a2, a3);
      v18 = 24.0;
      if (v17 <= 24.0)
        v18 = v17;
      if (v17 >= -24.0)
        v19 = v18;
      else
        v19 = -24.0;
      v10 = (float)((float)(1.0 - *((float *)this + 2386)) * v19)
          + (float)(*((float *)this + 2388) * *((float *)this + 2386));
      *((float *)this + 2388) = v10;
    }
    DspLib::add(a2, a3, v10);
  }
  else
  {
    *((_DWORD *)this + 2388) = 0;
  }
}

void DspLib::LoudnessNormalizer::Algorithm::applyCompressor(uint64_t a1, float *__D, vDSP_Length __N)
{
  BOOL v6;

  if (*(_BYTE *)(a1 + 738))
    DspLib::LoudnessNormalizer::GainTable::gainForLevel(a1 + 840, __D, __N);
  else
    DspLib::clear(__D, __N);
  if (*(_BYTE *)(a1 + 40))
    v6 = __N == 0;
  else
    v6 = 1;
  if (!v6)
    *(float *)(a1 + 9980) = DspLib::mean(__D, __N);
}

void DspLib::LoudnessNormalizer::GainTable::gainForLevel(uint64_t a1, float *__D, vDSP_Length __N)
{
  if (__N)
  {
    DspLib::clip(__D, __N, -100.0, 10.0);
    DspLib::add(__D, __N, 100.0);
    DspLib::multiply(__D, __N, 0.18182);
    DspLib::elementAtIndexWithInterpolation(a1 + 88, 84, __D, __N, (uint64_t)__D, __N);
  }
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::processBlock(DspLib::LoudnessNormalizer::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, unsigned int a4)
{
  unint64_t cycle_count;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  DspLibBuffer *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float **v24;
  size_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float **v34;
  size_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  __n128 v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float **v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  float **v50;
  float *v51;
  uint64_t v52;
  float **v53;
  float v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char **v61;
  const void **v62;
  uint64_t v63;
  float **v64;
  unint64_t v65;
  vDSP_Length v66;
  float *v67;
  vDSP_Length v68;
  float *v69;
  _BOOL4 v70;
  int v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  const float *v79;
  uint64_t v80;
  vDSP_Length v81;
  float *v82;
  uint64_t *v83;
  float **v84;
  float *v85;
  float **v86;
  float *v87;
  DspLib::LoudnessNormalizer::ShapingFilter *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92[3];
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[3];
  __int128 v98;
  uint64_t v99;
  uint64_t v100[3];
  _QWORD v101[3];
  _QWORD v102[3];
  _QWORD v103[3];
  _QWORD v104[3];
  DspLibBuffer **v105;
  _QWORD v106[3];
  uint64_t v107[3];
  DspLibBuffer *v108;
  float **v109;
  unint64_t v110;
  float **v111;
  float **v112;
  unint64_t v113;
  float **v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v108 = a2;
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, cycle_count);
  result = vp::utility::CPU_Profiler::get_cycle_count(a3);
  if (result)
  {
    if (*((_DWORD *)this + 188) == 2)
    {
      *((_QWORD *)this + 1215) += cycle_count;
      v10 = *((_QWORD *)this + 1219);
      if (v10 <= 0)
        v11 = 0;
      else
        v11 = v10 - cycle_count;
      *((_QWORD *)this + 1219) = v11;
    }
    if (*((_BYTE *)this + 1356))
    {
      v12 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760);
      DspLibBuffer::operator=((uint64_t)this + 9760, a2);
      v13 = DspLibBuffer::numChannels((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
      MEMORY[0x1E0C80A78](v13);
      v16 = (char *)&v80 - v15;
      if (v14 >= 0x200)
        v17 = 512;
      else
        v17 = v14;
      bzero((char *)&v80 - v15, v17);
      if (DspLibBuffer::numChannels((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760)))
      {
        v18 = 0;
        do
        {
          *(_QWORD *)&v16[8 * v18] = DspLibBuffer::channel((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760), v18);
          ++v18;
        }
        while (v18 < DspLibBuffer::numChannels((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760)));
      }
      v19 = DspLibBuffer::numChannels((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
      v20 = vp::utility::CPU_Profiler::get_cycle_count((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
      v107[0] = (uint64_t)v16;
      v107[1] = v19;
      v107[2] = v20;
      DspLib::multiply(v107, *((float *)this + 337));
    }
    else
    {
      v12 = a2;
    }
    v21 = DspLibBuffer::numChannels(v12);
    v89 = &v80;
    MEMORY[0x1E0C80A78](v21);
    v24 = (float **)((char *)&v80 - v23);
    if (v22 >= 0x200)
      v25 = 512;
    else
      v25 = v22;
    bzero((char *)&v80 - v23, v25);
    if (DspLibBuffer::numChannels(v12))
    {
      v26 = 0;
      do
      {
        v24[v26] = (float *)DspLibBuffer::channel(v12, v26);
        ++v26;
      }
      while (v26 < DspLibBuffer::numChannels(v12));
    }
    v27 = DspLibBuffer::numChannels(v12);
    v91 = vp::utility::CPU_Profiler::get_cycle_count(v12);
    v90 = v27;
    v28 = *((_QWORD *)this + 1254);
    if (v28)
    {
      (*(void (**)(uint64_t, DspLibBuffer *))(*(_QWORD *)v28 + 168))(v28, v12);
      v106[0] = v24;
      v106[1] = v90;
      v106[2] = v91;
      v29 = DspLib::maxMagnitude(v106);
      if (*((float *)this + 2502) >= v29)
        v29 = *((float *)this + 2502);
      *((float *)this + 2502) = v29;
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 72));
    }
    v105 = &v108;
    v30 = DspLib::LoudnessNormalizer::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()((uint64_t)&v105, a4);
    v88 = (DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9560);
    *((_BYTE *)this + 9712) = v30;
    v31 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1E0C80A78](v31);
    v34 = (float **)((char *)&v80 - v33);
    if (v32 >= 0x200)
      v35 = 512;
    else
      v35 = v32;
    bzero((char *)&v80 - v33, v35);
    if (DspLibBuffer::numChannels(a3))
    {
      v36 = 0;
      do
      {
        v34[v36] = (float *)DspLibBuffer::channel(a3, v36);
        ++v36;
      }
      while (v36 < DspLibBuffer::numChannels(a3));
    }
    v37 = DspLibBuffer::numChannels(a3);
    v38 = vp::utility::CPU_Profiler::get_cycle_count(a3);
    if (*((_BYTE *)this + 728))
    {
      v104[0] = v24;
      v104[1] = v90;
      v104[2] = v91;
      v103[0] = v34;
      v103[1] = v37;
      v103[2] = v38;
      DspLib::MultiChannelCircularDelay::process((const void **)this + 158, v104, v103);
    }
    else if (*((_BYTE *)this + 736) || *((_BYTE *)v88 + 152))
    {
      if (*(_BYTE *)v88)
      {
        v112 = v24;
        v113 = v90;
        v114 = (float **)v91;
        v109 = v34;
        v110 = v37;
        v111 = (float **)v38;
        DspLib::Biquad::Filter::process(v88, (uint64_t)&v112, &v109);
        v112 = v34;
        v113 = v37;
        v114 = (float **)v38;
        v109 = v34;
        v110 = v37;
        v111 = (float **)v38;
        DspLib::MultiChannelCircularDelay::process((const void **)this + 158, &v112, &v109);
      }
      else
      {
        v102[0] = v24;
        v102[1] = v90;
        v102[2] = v91;
        v101[0] = v34;
        v101[1] = v37;
        v101[2] = v38;
        DspLib::MultiChannelCircularDelay::process((const void **)this + 158, v102, v101);
      }
      v41 = *((_QWORD *)this + 1213);
      if (v41)
      {
        v100[0] = (uint64_t)v34;
        v100[1] = v37;
        v100[2] = v38;
        DspLib::multiply(v100, *(float *)(*((_QWORD *)this + 1210) + 4 * v41 - 4));
      }
      v39.n128_f32[0] = DspLib::elapsedTimeInMilliseconds((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 1312), v40);
    }
    else
    {
      v83 = &v80;
      MEMORY[0x1E0C80A78](v88);
      v44 = (float **)((char *)&v80 - v43);
      if (v42 >= 0x200)
        v45 = 512;
      else
        v45 = v42;
      bzero((char *)&v80 - v43, v45);
      v46 = (_QWORD *)*((_QWORD *)this + 1233);
      v47 = (_QWORD *)*((_QWORD *)this + 1232);
      v48 = 0xAAAAAAAAAAAAAAABLL * (v46 - v47);
      if (v46 == v47)
        goto LABEL_57;
      v49 = 0;
      v50 = (float **)*((_QWORD *)this + 1232);
      do
      {
        v51 = *v50;
        v50 += 3;
        v44[v49++] = v51;
      }
      while (v48 > v49);
      if (v46 == v47)
LABEL_57:
        v52 = 0;
      else
        v52 = (uint64_t)(v47[1] - *v47) >> 2;
      *(_QWORD *)&v98 = v24;
      *((_QWORD *)&v98 + 1) = v90;
      v99 = v91;
      v86 = v44;
      v97[0] = v44;
      v97[1] = v48;
      v97[2] = v52;
      v84 = (float **)DspLib::LoudnessNormalizer::Algorithm::sidechainFilterAndDownsample((uint64_t)this, &v98, v97);
      if (*((_BYTE *)this + 768))
      {
        v112 = v86;
        v113 = v48;
        v114 = v84;
        v109 = v86;
        v110 = v48;
        v111 = v84;
        DspLib::Biquad::Filter::process((_QWORD *)this + 96, (uint64_t)&v112, &v109);
      }
      v87 = (float *)*((_QWORD *)this + 1235);
      v112 = v86;
      v113 = v48;
      v53 = v84;
      v114 = v84;
      DspLib::square(&v112);
      v109 = v86;
      v110 = v48;
      v111 = v53;
      DspLib::sum((uint64_t)&v109, v87, (vDSP_Length)v53);
      DspLib::threshold(v87, (vDSP_Length)v53, 1.0e-12);
      if (DspLib::LoudnessNormalizer::AutoReset::process((uint64_t)this + 1296, *((const float **)this + 1235), (vDSP_Length)v53))
      {
        DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(this);
        DspLib::LoudnessNormalizer::Algorithm::resetLoudnessComputation(this, v54);
      }
      v55 = (float *)*((_QWORD *)this + 1238);
      v56 = *((_QWORD *)this + 1235);
      v57 = (uint64_t)(*((_QWORD *)this + 1239) - (_QWORD)v55) >> 2;
      v85 = v55;
      v87 = (float *)DspLib::LoudnessNormalizer::Algorithm::calculatePeakPower((uint64_t)this, v56, v84, (uint64_t)v55, v57);
      v58 = DspLib::MovingAverageProcessor::process((uint64_t)this + 512, (uint64_t)v85, (unint64_t)v87, (uint64_t)*v86);
      DspLib::power2dB(v85, (vDSP_Length)v87, 1.0);
      v59 = (uint64_t *)v86;
      if (v58)
      {
        v60 = *((_QWORD *)this + 1192);
        if (v60)
        {
          DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::process(v60, (uint64_t)*v86, v58, *((_QWORD *)this + 1235));
          *((_DWORD *)this + 2387) = **((_DWORD **)this + 1235);
          v59 = (uint64_t *)v86;
        }
        DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::process((uint64_t)this + 1408, *v59, v58, *v59);
        v61 = (char **)v86;
        if (*((_BYTE *)this + 40))
          *((float *)this + 2499) = **v86;
        v62 = (const void **)*((_QWORD *)this + 161);
        if (v62)
          DspLib::CircularDelay::process(v62, *v61, v58, *v61, v58);
      }
      if (*((_DWORD *)this + 183) >= 2u)
      {
        v63 = *((_QWORD *)this + 6);
        if (*(float *)(v63 + 140) < 0.5 || *(float *)(v63 + 136) > 0.1)
          DspLib::LoudnessNormalizer::Algorithm::audioActivityShift((uint64_t)this, v85, (vDSP_Length)v87, *v86, v58);
      }
      v64 = (float **)*((_QWORD *)this + 1244);
      v65 = (uint64_t)(*((_QWORD *)this + 1245) - (_QWORD)v64) >> 2;
      v84 = v64;
      v66 = DspLib::LoudnessNormalizer::Algorithm::medianLevelWithHysteresis((uint64_t)this, (uint64_t)v85, (uint64_t)v87, (float *)v64, v65);
      v67 = (float *)*((_QWORD *)this + 1241);
      v68 = (uint64_t)(*((_QWORD *)this + 1242) - (_QWORD)v67) >> 2;
      v82 = v67;
      v81 = DspLib::LoudnessNormalizer::Algorithm::gatingAndModifiedPeakLevel((uint64_t)this, v85, (vDSP_Length)v87, v67, v68);
      DspLib::SampleAndHoldUpSampler::process((float *)this + 93, (uint64_t)*v86, v58, *((_QWORD *)this + 1235), v66);
      DspLib::LoudnessNormalizer::Algorithm::gateIntegratedLoudness((uint64_t)this, *((const float **)this + 1235), v66, v82, v81);
      DspLib::vmax(*((float **)this + 1235), v66, (const float *)v84);
      DspLib::SampleAndHoldUpSampler::process((float *)this + 96, *((_QWORD *)this + 1235), v66, (uint64_t)*v86, (unint64_t)v87);
      v69 = (float *)*((_QWORD *)this + 1235);
      DspLib::vmax(v85, (vDSP_Length)v87, *v86, (uint64_t)v87, v69);
      if (*((_BYTE *)this + 40) && v87)
        *((float *)this + 2497) = DspLib::mean(v69, (vDSP_Length)v87);
      v70 = v87 == 0;
      DspLib::LoudnessNormalizer::Algorithm::applyAGC(this, v69, (vDSP_Length)v87, cycle_count);
      v71 = *((_DWORD *)this + 188) != 2 || v70;
      if (v71 == 1)
      {
        DspLib::LoudnessNormalizer::Algorithm::applyCompressor((uint64_t)this, v69, (vDSP_Length)v87);
      }
      else
      {
        v72 = (float *)*((_QWORD *)this + 6);
        v73 = DspLib::mean(v69, (vDSP_Length)v87);
        v74 = v72[57];
        v75 = v72[46];
        v76 = v72[47];
        DspLib::LoudnessNormalizer::Algorithm::applyCompressor((uint64_t)this, v69, (vDSP_Length)v87);
        v77 = fmaxf((float)((float)(v74 - v73) - v75) - v76, 0.0);
        *((float *)this + 2505) = v77;
        DspLib::clip(v69, (vDSP_Length)v87, -100.0, v77);
      }
      if (*(_BYTE *)v88 && v87)
      {
        v78 = DspLib::mean(v69, (vDSP_Length)v87);
        DspLib::LoudnessNormalizer::ShapingFilter::setGain(v88, v78);
      }
      if (*((_BYTE *)this + 737))
        DspLib::add(v69, (vDSP_Length)v87, *((float *)this + 2388));
      if (*((_BYTE *)this + 40) && v87)
        *((float *)this + 2496) = DspLib::mean(v69, (vDSP_Length)v87);
      DspLib::dB2Amp(v69, (vDSP_Length)v87);
      *((_QWORD *)this + 1213) = cycle_count;
      v79 = (const float *)*((_QWORD *)this + 1210);
      DspLib::SampleAndHoldUpSampler::process((float *)this + 99, (uint64_t)v69, (uint64_t)v87, (uint64_t)v79, cycle_count);
      *(_QWORD *)&v95 = v24;
      *((_QWORD *)&v95 + 1) = v90;
      v96 = v91;
      *(_QWORD *)&v93 = v34;
      *((_QWORD *)&v93 + 1) = v37;
      v94 = v38;
      DspLib::LoudnessNormalizer::Algorithm::applyGain((uint64_t)this, &v95, &v93, v79, (float **)cycle_count);
    }
    if (*((_BYTE *)this + 1357))
    {
      v92[0] = (uint64_t)v34;
      v92[1] = v37;
      v92[2] = v38;
      DspLib::multiply(v92, *((float *)this + 338));
    }
    if (*((_BYTE *)this + 40))
      DspLib::CPUMeasure::stop((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 72), cycle_count, *((double *)this + 3));
    result = *((_QWORD *)this + 1255);
    if (result)
      return (*(uint64_t (**)(uint64_t, DspLibBuffer *, __n128))(*(_QWORD *)result + 168))(result, a3, v39);
  }
  return result;
}

BOOL DspLib::LoudnessNormalizer::Algorithm::processBlock(DspLibBuffer *,DspLibBuffer *,unsigned int,unsigned int)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t cycle_count;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 < 2)
    return 0;
  v4 = DspLibBuffer::numChannels((DspLibBuffer *)(**(_QWORD **)a1 + 96));
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v12 - v6;
  if (v5 >= 0x200)
    v8 = 512;
  else
    v8 = v5;
  bzero((char *)&v12 - v6, v8);
  if (DspLibBuffer::numChannels((DspLibBuffer *)(**(_QWORD **)a1 + 96)))
  {
    v9 = 0;
    do
    {
      *(_QWORD *)&v7[8 * v9] = DspLibBuffer::channel((DspLibBuffer *)(**(_QWORD **)a1 + 96), v9);
      ++v9;
    }
    while (v9 < DspLibBuffer::numChannels((DspLibBuffer *)(**(_QWORD **)a1 + 96)));
  }
  v10 = DspLibBuffer::numChannels((DspLibBuffer *)(**(_QWORD **)a1 + 96));
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)(**(_QWORD **)a1 + 96));
  *(_QWORD *)&v12 = v7;
  *((_QWORD *)&v12 + 1) = v10;
  v13 = cycle_count;
  return !DspLib::isSilent(&v12, 0.000001);
}

BOOL DspLib::LoudnessNormalizer::AutoReset::process(uint64_t a1, const float *a2, vDSP_Length __N)
{
  _BOOL8 v4;
  BOOL v5;
  float v6;
  unint64_t *v7;
  DspLib *v8;
  float v9;
  DspLib *v10;
  float v11;

  if (*(_BYTE *)(a1 + 30))
    v4 = *(_BYTE *)(a1 + 29) != 0;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 29) = 0;
  if (*(_BYTE *)a1)
    v5 = __N == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = DspLib::mean(a2, __N);
    v9 = DspLib::elapsedTimeInMilliseconds((DspLib *)(a1 + 16), v7) / 1000.0;
    if (v9 <= 0.2 && v6 >= DspLib::dB2Power(v8, -100.0))
    {
      if (v6 > DspLib::dB2Power(v10, -70.0))
        *(_BYTE *)(a1 + 8) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 8))
      {
        if (*(_BYTE *)(a1 + 28))
          return v4;
      }
      else
      {
        *(_DWORD *)(a1 + 24) = 0;
        *(_BYTE *)(a1 + 28) = 0;
        *(_BYTE *)(a1 + 8) = 1;
      }
      v11 = v9 + *(float *)(a1 + 24);
      *(float *)(a1 + 24) = v11;
      if (v11 >= *(float *)(a1 + 4))
      {
        v4 = 1;
        *(_BYTE *)(a1 + 28) = 1;
      }
    }
  }
  return v4;
}

uint64_t DspLib::MovingAverageProcessor::process(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (!a3)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 32);
  do
  {
    if (!v10)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
      *(float *)(a4 + 4 * v9++) = DspLib::mean(*(const float **)a1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
      v10 = *(_QWORD *)(a1 + 32);
    }
    v11 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v10 >= a3 - v8)
      v10 = a3 - v8;
    if (v10 >= v11 >> 2)
      v12 = v11 >> 2;
    else
      v12 = v10;
    if (v12 == -1)
      v13 = a3 - v8;
    else
      v13 = v12;
    DspLib::LinearDelay::write((uint64_t *)a1, (char *)(a2 + 4 * v8), v13);
    v10 = *(_QWORD *)(a1 + 32) - v12;
    *(_QWORD *)(a1 + 32) = v10;
    v8 += v12;
  }
  while (v8 < a3);
  return v9;
}

void DspLib::LoudnessNormalizer::ShapingFilter::setGain(DspLib::LoudnessNormalizer::ShapingFilter *this, float a2)
{
  float v3;
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  _DWORD v20[5];
  _DWORD v21[5];

  if (vabds_f32(a2, *((float *)this + 20)) > 0.1)
  {
    *((float *)this + 20) = a2;
    v3 = DspLib::dB2Amp(this, a2);
    v4 = *((double *)this + 9);
    v5 = 2.0;
    v6 = 0.25;
    v7 = 3.5;
    v8 = 2.1991;
    v9 = 0.62;
    if (v4 <= 16000.0)
    {
      v12 = 0;
      v11 = 0.94;
      v10 = -0.994;
    }
    else
    {
      v10 = -0.997;
      if (v4 <= 24000.0)
      {
        v12 = 0;
        v11 = 0.96;
      }
      else if (v4 <= 32000.0)
      {
        v12 = 1;
        v11 = 0.97;
      }
      else if (v4 <= 48000.0)
      {
        v5 = 1.5;
        v7 = 4.0;
        v12 = 1;
        v11 = 0.98;
        v10 = -0.999;
        v8 = 1.2566;
        v6 = 0.4;
        v9 = 0.87;
      }
      else
      {
        if (v4 <= 64000.0)
          v9 = 0.75;
        else
          v9 = 0.1;
        v6 = flt_1B662ADE8[v4 > 64000.0];
        v8 = flt_1B662ADF0[v4 > 64000.0];
        v10 = -1.0;
        if (v4 <= 64000.0)
          v10 = -0.9995;
        v11 = flt_1B662ADF8[v4 > 64000.0];
        v7 = 6.0;
        v12 = 1;
        v5 = 1.2;
      }
    }
    v13 = v3 + -1.0;
    v21[0] = 1065353216;
    *(float *)&v21[1] = -(float)(v11
                               - (float)((float)((float)(v10 + v11) / (float)(39.0 / (float)(v5 + 39.0)))
                                       * (float)((float)(v3 + -1.0) / (float)((float)(v3 + -1.0) + v5))));
    v21[2] = 0;
    *(float *)&v21[3] = -v11;
    v21[4] = 0;
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)v21, 1, 0, 0x41uLL);
    if (v12)
    {
      v14 = (float)(v6 * cosf(v8)) * -2.0;
      v15 = v14
          + (float)((float)((float)(v9 - v14) / (float)(39.0 / (float)(v7 + 39.0))) * (float)(v13 / (float)(v13 + v7)));
      v16 = 1.0
          / (float)((float)((float)(v15 + 1.0) + (float)(v6 * v6)) / (float)((float)(v14 + 1.0) + (float)(v6 * v6)));
      v17 = v15 * v16;
      v18 = v6 * (float)(v6 * v16);
      v19 = v6 * v6;
    }
    else
    {
      v16 = 1.0;
      v17 = 0.0;
      v18 = 0.0;
      v14 = 0.0;
      v19 = 0.0;
    }
    *(float *)v20 = v16;
    *(float *)&v20[1] = v17;
    *(float *)&v20[2] = v18;
    *(float *)&v20[3] = v14;
    *(float *)&v20[4] = v19;
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this, (uint64_t)v20, 1, 1, 0x41uLL);
  }
}

float DspLib::LoudnessNormalizer::Algorithm::totalMomentaryGainIndB(float **this)
{
  DspLib *v2;

  v2 = (DspLib *)(*((uint64_t (**)(float **))*this + 4))(this);
  if ((_DWORD)v2)
    return DspLib::amp2dBSafe(v2, *this[1210], 0.000001);
  else
    return 0.0;
}

uint64_t DspLib::LoudnessNormalizer::Algorithm::numStatus(DspLib::LoudnessNormalizer::Algorithm *this)
{
  return 133;
}

float DspLib::LoudnessNormalizer::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  DspLib::clear((float *)a2, __N);
  if (**(float **)(a1 + 48) >= 0.5)
  {
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 9552);
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 9980);
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 9984);
  }
  v5 = *(DspLib **)(a1 + 10032);
  if (v5 && *(_QWORD *)(a1 + 10040))
  {
    v6 = (*(uint64_t (**)(DspLib *))(*(_QWORD *)v5 + 176))(v5);
    v7 = MEMORY[0x1E0C80A78](v6);
    v9 = (_DWORD *)((char *)v22 - v8);
    v10 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 10032) + 176))(*(_QWORD *)(a1 + 10032), v7);
    (*(void (**)(_QWORD, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 10032) + 184))(*(_QWORD *)(a1 + 10032), v9, v10);
    *(_DWORD *)(a2 + 4) = *v9;
    *(_DWORD *)(a2 + 8) = v9[3];
    v5 = (DspLib *)(*(uint64_t (**)(_QWORD, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 10040) + 184))(*(_QWORD *)(a1 + 10040), v9, v10);
    *(_DWORD *)(a2 + 12) = *v9;
    *(_DWORD *)(a2 + 16) = v9[3];
  }
  else
  {
    *(int32x4_t *)(a2 + 4) = vdupq_n_s32(0xC28C0000);
  }
  v11 = (_BYTE *)(a1 + 9664);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 9988);
  v12 = 0.0;
  v13 = 1.0;
  if (!*(_BYTE *)(a1 + 9976))
    v13 = 0.0;
  *(float *)(a2 + 24) = *(float *)(a1 + 9988) + *(float *)(a1 + 9984);
  *(float *)(a2 + 28) = v13;
  *(_BYTE *)(a1 + 9976) = 0;
  if (*(_BYTE *)(a1 + 1296) && !*(_BYTE *)(a1 + 1324) && *(_BYTE *)(a1 + 1304))
    v12 = (float)(*(float *)(a1 + 1300) - *(float *)(a1 + 1320));
  *(float *)(a2 + 32) = v12;
  v14 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v14 + 136);
  if (*(_DWORD *)(a1 + 732) < 2u)
  {
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 9996);
  }
  else
  {
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 9468);
    v15 = 0.0;
    if (*v11)
      v15 = 1.0;
    *(float *)(a2 + 64) = v15;
    *v11 = 0;
    *(float *)(a2 + 68) = DspLib::amp2dBSafe(v5, *(float *)(a1 + 10008), 0.000001);
    *(_DWORD *)(a1 + 10008) = 0;
    *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 9460);
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 9464);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 10012);
    *(_DWORD *)(a1 + 10012) = -1027080192;
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 10016);
    DspLib::LoudnessNormalizer::IntegratedLoudnessProcessor::histogram(a1 + 1408, a2 + 92, 0x64u);
    v16 = *(_QWORD *)(a1 + 10024);
    *(_QWORD *)(a1 + 10024) = v16 + 1;
    *(float *)(a2 + 72) = (float)v16;
    v17 = 0.0;
    if (*(_BYTE *)(a1 + 9712))
      v18 = 1.0;
    else
      v18 = 0.0;
    *(float *)(a2 + 492) = v18;
    if (*(_BYTE *)(a1 + 736))
      v17 = 1.0;
    *(float *)(a2 + 496) = v17;
    v14 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 9992);
  *(_DWORD *)(a1 + 9992) = -1027080192;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 10000);
  *(_DWORD *)(a1 + 10000) = -1027080192;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 10004);
  *(_DWORD *)(a1 + 10004) = -1027080192;
  *(_DWORD *)(a2 + 500) = *(_DWORD *)(v14 + 188);
  *(_DWORD *)(a2 + 504) = *(_DWORD *)(a1 + 9736);
  *(_DWORD *)(a2 + 508) = *(_DWORD *)(a1 + 1360);
  v19 = 0.0;
  if (*(_BYTE *)(a1 + 1364))
    v20 = 1.0;
  else
    v20 = 0.0;
  *(float *)(a2 + 512) = v20;
  *(_DWORD *)(a2 + 516) = *(_DWORD *)(a1 + 9740);
  *(_DWORD *)(a2 + 520) = *(_DWORD *)(a1 + 9744);
  if (*(uint64_t *)(a1 + 9752) > 0)
    v19 = 1.0;
  *(float *)(a2 + 524) = v19;
  result = *(float *)(a1 + 10020);
  *(float *)(a2 + 528) = result;
  return result;
}

float DspLib::LoudnessNormalizer::Algorithm::maxGainKneePoint(DspLib::LoudnessNormalizer::Algorithm *this)
{
  float v2;
  float v3;

  if (*((_DWORD *)this + 188) == 1)
  {
    v2 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)3);
    v3 = DspLib::LoudnessNormalizer::Algorithm::automatedValueForParameter(this, (DspLib::LoudnessNormalizer::Parameters *)0xD);
  }
  else
  {
    v2 = *((float *)this + 185);
    v3 = *((float *)this + 189);
  }
  return (float)(DspLib::LoudnessNormalizer::Algorithm::targetLoudness(this) - v3) - v2;
}

void DspLib::LoudnessNormalizer::ShapingFilter::initialize(DspLib::LoudnessNormalizer::ShapingFilter *this, unsigned int a2, double a3)
{
  *((double *)this + 9) = a3;
  DspLib::Biquad::Filter::initialize(this, a2, 2uLL);
  DspLib::Biquad::SetupWrapper::reset((DspLib::LoudnessNormalizer::ShapingFilter *)((char *)this + 48));
  *((_DWORD *)this + 20) = -1054867456;
  DspLib::LoudnessNormalizer::ShapingFilter::setGain(this, 0.0);
}

void DspLib::LoudnessNormalizer::Algorithm::~Algorithm(DspLib::LoudnessNormalizer::Algorithm *this)
{
  DspLib::LoudnessNormalizer::Algorithm::~Algorithm(this);
  JUMPOUT(0x1BCC95CE0);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(_QWORD *)this = &off_1E69C44D0;
  v2 = *((_QWORD *)this + 1255);
  *((_QWORD *)this + 1255) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1254);
  *((_QWORD *)this + 1254) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 1244);
  if (v4)
  {
    *((_QWORD *)this + 1245) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1241);
  if (v5)
  {
    *((_QWORD *)this + 1242) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1238);
  if (v6)
  {
    *((_QWORD *)this + 1239) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1235);
  if (v7)
  {
    *((_QWORD *)this + 1236) = v7;
    operator delete(v7);
  }
  v20 = (void **)((char *)this + 9856);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLibBuffer::~DspLibBuffer((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9760));
  v8 = (void *)*((_QWORD *)this + 1210);
  if (v8)
  {
    *((_QWORD *)this + 1211) = v8;
    operator delete(v8);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 9608));
  v9 = (void *)*((_QWORD *)this + 1198);
  if (v9)
  {
    *((_QWORD *)this + 1199) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 1192);
  *((_QWORD *)this + 1192) = 0;
  if (v10)
    MEMORY[0x1BCC95CE0](v10, 64);
  v11 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v11)
    std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100]((uint64_t)this + 1288, v11);
  v20 = (void **)((char *)this + 1264);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 816));
  v12 = (void *)*((_QWORD *)this + 99);
  if (v12)
  {
    *((_QWORD *)this + 100) = v12;
    operator delete(v12);
  }
  v20 = (void **)((char *)this + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 672));
  v13 = (void *)*((_QWORD *)this + 81);
  if (v13)
  {
    *((_QWORD *)this + 82) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 72);
  if (v14)
  {
    *((_QWORD *)this + 73) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 69);
  if (v15)
  {
    *((_QWORD *)this + 70) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 64);
  if (v16)
  {
    *((_QWORD *)this + 65) = v16;
    operator delete(v16);
  }
  v20 = (void **)((char *)this + 488);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 456));
  v17 = (void *)*((_QWORD *)this + 54);
  if (v17)
  {
    *((_QWORD *)this + 55) = v17;
    operator delete(v17);
  }
  v20 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudnessNormalizer::Algorithm *)((char *)this + 264));
  v18 = (void *)*((_QWORD *)this + 30);
  if (v18)
  {
    *((_QWORD *)this + 31) = v18;
    operator delete(v18);
  }
  *(_QWORD *)this = off_1E69C46F0;
  v19 = (void *)*((_QWORD *)this + 6);
  if (v19)
  {
    *((_QWORD *)this + 7) = v19;
    operator delete(v19);
  }
}

void std::default_delete<DspLib::CircularDelay>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
}

double DspLib::NonLinearDevice::Algorithm::Algorithm(DspLib::NonLinearDevice::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &_ZGRN6DspLib15NonLinearDevice10Parameters8kDefaultE_, 0x13uLL, (uint64_t)&_ZGRN6DspLib15NonLinearDevice10Parameters8kMinimumE_, 19, (uint64_t)&_ZGRN6DspLib15NonLinearDevice10Parameters8kMaximumE_, 19);
  *(_QWORD *)v1 = &off_1E69C45E0;
  *(_QWORD *)(v1 + 216) = 0x3F80000000000000;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 240) = 0;
  *(_DWORD *)(v1 + 248) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 316) = 0u;
  *(_OWORD *)(v1 + 332) = 0u;
  *(_OWORD *)(v1 + 348) = 0u;
  *(_OWORD *)(v1 + 364) = 0u;
  *(_QWORD *)(v1 + 380) = 0;
  return result;
}

uint64_t DspLib::NonLinearDevice::Algorithm::initialize(DspLib::NonLinearDevice::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  char *v8;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  v5 = v4;
  if (*((_DWORD *)this + 3) >= 9u)
  {
    v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibNonLinearDevice.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v8, 20);
    ++DspLibDebug::mAssertCounter;
  }
  else if ((_DWORD)v4)
  {
    v6 = 0.00999999978 / *((double *)this + 3) * 44100.0;
    *((float *)this + 55) = v6;
    *((_BYTE *)this + 8) = 1;
    (*(void (**)(DspLib::NonLinearDevice::Algorithm *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::NonLinearDevice::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v5;
}

uint64_t DspLib::NonLinearDevice::Algorithm::uninitialize(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  return this;
}

void DspLib::NonLinearDevice::Algorithm::reset(DspLib::NonLinearDevice::Algorithm *this)
{
  char *v2;

  if (*((_BYTE *)this + 8))
  {
    DspLib::clear((float *)this + 63, 8uLL);
    DspLib::clear((float *)this + 71, 8uLL);
  }
  else
  {
    v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibNonLinearDevice.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v2, 40);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::NonLinearDevice::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  float v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v12;
  float *v13;
  float result;

  DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  v5 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 216) = vcvtas_u32_f32(*(float *)v5);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(v5 + 32);
  v6 = logf(*(float *)(v5 + 28) + 0.000001);
  *(_DWORD *)(a1 + 348) = 1065353216;
  v7 = (float *)(a1 + 344);
  v8 = -8;
  v9 = 1.0;
  v10 = 1.0;
  do
  {
    v10 = v6 * v10;
    v9 = v9 * (float)(v8 + 9);
    *v7-- = v10 * (float)(1.0 / v9);
  }
  while (!__CFADD__(v8++, 1));
  v12 = 0;
  v13 = (float *)(a1 + 384);
  do
  {
    result = *(float *)(v5 + 36 + v12);
    *v13-- = result;
    v12 += 4;
  }
  while (v12 != 36);
  return result;
}

void DspLib::NonLinearDevice::Algorithm::process(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  if (*(_BYTE *)(a1 + 8))
  {
    switch(*(_DWORD *)(a1 + 216))
    {
      case 0:
        v31 = *a2;
        v32 = *((_QWORD *)a2 + 2);
        v29 = *a3;
        v30 = *((_QWORD *)a3 + 2);
        DspLib::clip(&v31, &v29, 0.0, 1000.0);
        break;
      case 1:
        v27 = *a2;
        v28 = *((_QWORD *)a2 + 2);
        v25 = *a3;
        v26 = *((_QWORD *)a3 + 2);
        DspLib::abs(&v27, &v25);
        break;
      case 2:
        v6 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v6)
        {
          v7 = 0;
          v8 = *((_QWORD *)a2 + 2);
          v9 = *(_QWORD *)a2;
          v10 = *(_QWORD *)a3;
          do
          {
            if (v8)
            {
              v11 = 0;
              v12 = *(_QWORD *)(v10 + 8 * v7);
              v13 = *(_QWORD *)(v9 + 8 * v7);
              v14 = a1 + 4 * v7;
              v15 = (float *)(v14 + 252);
              v16 = (float *)(v14 + 284);
              do
              {
                v17 = *v15;
                if (*(float *)(v13 + 4 * v11) <= 0.0 || (v18 = 0.0, v17 > 0.0))
                  v18 = *v16 + (float)(*(float *)(a1 + 220) * fabsf(v17));
                *v16 = v18;
                *v15 = *(float *)(v13 + 4 * v11);
                *(float *)(v12 + 4 * v11++) = v18;
              }
              while (v8 > v11);
            }
            ++v7;
          }
          while (v7 != v6);
        }
        break;
      case 3:
        if (*(_DWORD *)(a1 + 12))
        {
          v19 = 0;
          do
          {
            DspLib::NonLinearDevice::tanhNonlinearity(*(const float **)(*(_QWORD *)a2 + 8 * v19), *((_QWORD *)a2 + 2), *(float **)(*(_QWORD *)a3 + 8 * v19), *((_QWORD *)a3 + 2), *(float *)(a1 + 224), *(float *)(a1 + 228));
            ++v19;
          }
          while (v19 < *(unsigned int *)(a1 + 12));
        }
        break;
      case 4:
        if (*(_DWORD *)(a1 + 12))
        {
          v20 = 0;
          do
          {
            DspLib::add(*(const float **)(*(_QWORD *)a2 + 8 * v20), *((_QWORD *)a2 + 2), *(float **)(*(_QWORD *)a3 + 8 * v20), *(float *)(a1 + 232));
            DspLib::NonLinearDevice::tanhNonlinearity(*(const float **)(*(_QWORD *)a3 + 8 * v20), *((_QWORD *)a3 + 2), *(float **)(*(_QWORD *)a3 + 8 * v20), *((_QWORD *)a3 + 2), *(float *)(a1 + 224), *(float *)(a1 + 228));
            ++v20;
          }
          while (v20 < *(unsigned int *)(a1 + 12));
        }
        break;
      case 5:
        if (*(_DWORD *)(a1 + 12))
        {
          v21 = 0;
          do
          {
            DspLib::add(*(const float **)(*(_QWORD *)a2 + 8 * v21), *((_QWORD *)a2 + 2), *(float **)(*(_QWORD *)a3 + 8 * v21), *(float *)(a1 + 244));
            DspLib::NonLinearDevice::tanhNonlinearity(*(const float **)(*(_QWORD *)a3 + 8 * v21), *((_QWORD *)a3 + 2), *(float **)(*(_QWORD *)a3 + 8 * v21), *((_QWORD *)a3 + 2), *(float *)(a1 + 236), *(float *)(a1 + 240));
            ++v21;
          }
          while (v21 < *(unsigned int *)(a1 + 12));
        }
        break;
      case 6:
        if (*(_DWORD *)(a1 + 12))
        {
          v22 = 0;
          do
          {
            DspLib::poly((const float *)(a1 + 316), 9, *(const float **)(*(_QWORD *)a2 + 8 * v22), *((_QWORD *)a2 + 2), *(float **)(*(_QWORD *)a3 + 8 * v22));
            DspLib::multiply(*(float **)(*(_QWORD *)a3 + 8 * v22), *((_QWORD *)a3 + 2), *(float *)(a1 + 248));
            DspLib::add(*(float **)(*(_QWORD *)a3 + 8 * v22++), *((_QWORD *)a3 + 2), -1.0);
          }
          while (v22 < *(unsigned int *)(a1 + 12));
        }
        break;
      case 7:
        if (*(_DWORD *)(a1 + 12))
        {
          v23 = 0;
          do
          {
            DspLib::poly((const float *)(a1 + 352), 9, *(const float **)(*(_QWORD *)a2 + 8 * v23), *((_QWORD *)a2 + 2), *(float **)(*(_QWORD *)a3 + 8 * v23));
            ++v23;
          }
          while (v23 < *(unsigned int *)(a1 + 12));
        }
        break;
      default:
        return;
    }
  }
  else
  {
    v24 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/VirtualBass/dsp/DspLibNonLinearDevice.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v24, 87);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::NonLinearDevice::tanhNonlinearity(const float *a1, vDSP_Length a2, float *a3, vDSP_Length a4, float a5, float a6)
{
  DspLib::multiply(a1, a2, a3, a5);
  DspLib::vtanh(a3, a4, a3);
  DspLib::multiply(a3, a4, a6);
}

void DspLib::NonLinearDevice::Algorithm::~Algorithm(DspLib::NonLinearDevice::Algorithm *this)
{
  void *v2;

  *(_QWORD *)this = off_1E69C46F0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E69C46F0;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void DspLib::NonLinearDevice::Algorithm::process(DspLib::NonLinearDevice::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t cycle_count;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = DspLibBuffer::numChannels(a2);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23 - v8;
  if (v7 >= 0x200)
    v10 = 512;
  else
    v10 = v7;
  bzero((char *)&v23 - v8, v10);
  if (DspLibBuffer::numChannels(a2))
  {
    v11 = 0;
    do
    {
      *(_QWORD *)&v9[8 * v11] = DspLibBuffer::channel(a2, v11);
      ++v11;
    }
    while (v11 < DspLibBuffer::numChannels(a2));
  }
  v12 = DspLibBuffer::numChannels(a2);
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  v14 = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLibBuffer::setNumFrames(a3, v14);
  v15 = DspLibBuffer::numChannels(a3);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v23 - v17;
  if (v16 >= 0x200)
    v19 = 512;
  else
    v19 = v16;
  bzero((char *)&v23 - v17, v19);
  if (DspLibBuffer::numChannels(a3))
  {
    v20 = 0;
    do
    {
      *(_QWORD *)&v18[8 * v20] = DspLibBuffer::channel(a3, v20);
      ++v20;
    }
    while (v20 < DspLibBuffer::numChannels(a3));
  }
  v21 = DspLibBuffer::numChannels(a3);
  v22 = vp::utility::CPU_Profiler::get_cycle_count(a3);
  *(_QWORD *)&v26 = v9;
  *((_QWORD *)&v26 + 1) = v12;
  v27 = cycle_count;
  *(_QWORD *)&v24 = v18;
  *((_QWORD *)&v24 + 1) = v21;
  v25 = v22;
  DspLib::NonLinearDevice::Algorithm::process((uint64_t)this, &v26, &v24);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::initialize(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, double a2)
{
  _BOOL8 result;

  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 784), 0);
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_WORD *)this + 202) = 0;
  *(_QWORD *)((char *)this + 420) = 1120403456;
  result = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  *((_BYTE *)this + 40) = 1;
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t j;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  DspLib::ComplexSpan *v25;
  _BYTE v28[4];
  float v29;
  float v30;
  int v31;
  _QWORD v32[3];
  _QWORD v33[5];
  DSPSplitComplex __A;
  uint64_t v35;
  _QWORD v36[5];
  char v37;
  char v38;
  uint64_t v39;
  DSPComplex v40;
  DSPComplex v41;
  DSPComplex v42;

  v39 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 10) <= 4uLL)
    v1 = 4;
  else
    v1 = *((_QWORD *)this + 10);
  v2 = MEMORY[0x1E0C80A78](this);
  MEMORY[0x1E0C80A78](v2);
  v3 = 0;
  v4 = 0;
  v36[0] = v6;
  v36[1] = &v28[-v5];
  v36[2] = 3 * v1;
  v36[3] = 3;
  *(_QWORD *)(v7 + 32) = v1;
  __A.realp = (float *)&v38;
  __A.imagp = (float *)&v37;
  v35 = 3;
  do
  {
    for (i = 0; i != 3; ++i)
    {
      v9 = (float)rand() * 4.6566e-10;
      v40.imag = (float)rand() * 4.6566e-10;
      v40.real = v9;
      DspLib::ComplexSpan::setElement(&__A, i, v40);
    }
    DspLib::ComplexMatrixSpan::setColumn((DspLib::ComplexMatrixSpan *)v36, v3, &__A);
    v3 = ++v4;
  }
  while (v1 > v4);
  v11 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v12 = 0;
  v13 = 0;
  v33[0] = v14;
  v33[1] = &v28[-v15];
  v33[2] = 3 * v1;
  v33[3] = v1;
  v33[4] = 3;
  do
  {
    for (j = 0; j != 3; ++j)
    {
      v17 = (float)rand() * 4.6566e-10;
      v41.imag = (float)rand() * 4.6566e-10;
      v41.real = v17;
      DspLib::ComplexSpan::setElement(&__A, j, v41);
    }
    DspLib::ComplexMatrixSpan::setRow((DspLib::ComplexMatrixSpan *)v33, v12, &__A);
    v12 = ++v13;
  }
  while (v1 > v13);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  v20 = 0;
  v32[0] = v22;
  v32[1] = &v28[-v21];
  v23 = 1;
  v32[2] = v1;
  do
  {
    v24 = (float)rand() * 4.6566e-10;
    v42.imag = (float)rand() * 4.6566e-10;
    v42.real = v24;
    DspLib::ComplexSpan::setElement(v32, v20, v42);
    v20 = v23;
  }
  while (v1 > v23++);
  v31 = 0;
  v30 = 0.0;
  return DspLib::LoudspeakerSystemIDV1::updateModelParameters((DspLib::LoudspeakerSystemIDV1 *)&v31, &v30, &v29, (float *)v36, (DspLib::ComplexMatrixSpan *)v33, (DspLib::ComplexMatrixSpan *)v32, v25, 0.0);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::reset(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_WORD *)this + 202) = 0;
  *(_QWORD *)((char *)this + 420) = 1120403456;
  return DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
}

BOOL DspLib::LoudspeakerSystemIDV1::updateModelParameters(DspLib::LoudspeakerSystemIDV1 *this, float *a2, float *a3, float *a4, DspLib::ComplexMatrixSpan *a5, DspLib::ComplexMatrixSpan *a6, DspLib::ComplexSpan *a7, float a8)
{
  float *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int8 *v17;
  uint64_t v18;
  __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float *v24;
  float v25;
  int64x2_t v28;
  int64x2_t *v29;
  float *v30;
  float *v31;
  float *v32;
  int64x2_t v33;
  uint64_t v34;
  _QWORD v35[4];
  _QWORD v36[4];
  float *v37;
  int64x2_t v38;
  uint64_t v39;
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[3];
  float *v43;
  int64x2_t v44;
  uint64_t v45;
  _QWORD v46[5];
  float *v47;
  __int128 v48;
  uint64_t v49;
  float v50[4];
  float __C[4];
  float v52[10];
  uint64_t v53;

  v30 = a3;
  v31 = a2;
  v53 = *MEMORY[0x1E0C80C00];
  v12 = v52;
  v28 = (int64x2_t)xmmword_1B66273A0;
  v48 = xmmword_1B66273A0;
  v47 = v52;
  v49 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesX((uint64_t)&v47, a4, a5);
  for (i = 0; i != 3; ++i)
  {
    *v12 = *v12 + a8;
    v12 += 4;
  }
  DspLib::inv3x3real(v52);
  v29 = &v28;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = &v28.i8[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v28.i8[-v18];
  v20 = *((_QWORD *)a4 + 4);
  v46[0] = v17;
  v46[1] = (char *)&v28 - v18;
  v46[2] = 3 * v20;
  v46[3] = 3;
  v46[4] = v20;
  v44 = v28;
  v43 = v52;
  v45 = 3;
  DspLib::LoudspeakerSystemIDV2::updateMTimesXTimesM((uint64_t)v46, &v43, a4);
  v42[0] = __C;
  v42[1] = v50;
  v42[2] = 3;
  v41[0] = v17;
  v41[1] = 3 * v20;
  v41[2] = 3;
  v41[3] = v20;
  v21 = *((_QWORD *)a6 + 2);
  v40[0] = *(_QWORD *)a6;
  v40[1] = v21;
  v40[2] = v21;
  v40[3] = 1;
  v37 = __C;
  v28 = vdupq_n_s64(3uLL);
  v38 = v28;
  v39 = 1;
  DspLib::multiply((uint64_t)v41, (uint64_t)v40, &v37);
  v36[0] = v19;
  v36[1] = 3 * v20;
  v36[2] = 3;
  v36[3] = v20;
  v22 = *((_QWORD *)a6 + 2);
  v35[0] = *((_QWORD *)a6 + 1);
  v35[1] = v22;
  v35[2] = v22;
  v35[3] = 1;
  v32 = v50;
  v33 = v28;
  v34 = 1;
  DspLib::multiply((uint64_t)v36, (uint64_t)v35, &v32);
  DspLib::add(__C, 3uLL, v50);
  *(float *)this = DspLib::ComplexSpan::operator[](v42, 0);
  v23 = DspLib::ComplexSpan::operator[](v42, 1uLL);
  v24 = v31;
  *v31 = v23;
  v25 = DspLib::ComplexSpan::operator[](v42, 2uLL);
  *v30 = v25;
  if ((*(_DWORD *)this & 0x7FFFFFFFu) >= 0x7F800000)
    return 0;
  return (*(_DWORD *)v24 & 0x7FFFFFFFu) < 0x7F800000 && (LODWORD(v25) & 0x7FFFFFFFu) < 0x7F800000;
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::uninitialize(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 888), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 784), 0);
}

uint64_t DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::setParameters(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, const DspLib::AlgorithmParametersInstance *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  DspLib *v8;
  DspLib *v9;
  float v10;
  float v11;
  float v12;
  int8x16_t v13;
  float32x2_t v14;
  DspLib::ComplexMatrixSpan *v15;
  void *v16;
  float v17;
  uint64_t result;
  char *v19;
  __int128 v20;
  uint64_t v21;

  if (*((_BYTE *)this + 40))
  {
    v4 = DspLib::AlgorithmParametersInstance::group(a2, 7u);
    v5 = v4;
    v6 = *(float *)(v4 + 24);
    if (*(float *)(v4 + 28) + *(double *)this * 0.0009765625 * -2.0 > v6)
    {
      *((float *)this + 218) = v6;
      *((_DWORD *)this + 219) = *(_DWORD *)(v4 + 28);
    }
    v7 = DspLib::dB2Amp((DspLib *)v4, *(float *)(v4 + 44));
    *((float *)this + 248) = v7 / (float)(v7 + 1.0);
    *((float *)this + 249) = *(float *)(v5 + 48) / 100.0;
    *((float *)this + 250) = DspLib::dB2Amp(v8, *(float *)(v5 + 40));
    v10 = DspLib::dB2Amp(v9, *(float *)(v5 + 56));
    *((float *)this + 251) = v10 / (float)(v10 + 1.0);
    *((_DWORD *)this + 252) = *(_DWORD *)(v5 + 32);
    *((float *)this + 253) = *(float *)(v5 + 12) * 0.001;
    *((float *)this + 254) = *(float *)(v5 + 60) * 0.001;
    *((float *)this + 255) = *(float *)(v5 + 64) * 0.001;
    *((_DWORD *)this + 256) = *(_DWORD *)(v5 + 76);
    *((_DWORD *)this + 257) = *(_DWORD *)(v5 + 80);
    *((_DWORD *)this + 258) = *(_DWORD *)(v5 + 68);
    *((_DWORD *)this + 259) = *(_DWORD *)(v5 + 72);
    *((_BYTE *)this + 880) = *(float *)(v5 + 4) != 0.0;
    v11 = *(float *)(v5 + 92);
    *((_BYTE *)this + 881) = v11 != 0.0;
    *((_DWORD *)this + 260) = *(_DWORD *)(v5 + 8);
    *((_DWORD *)this + 261) = *(_DWORD *)(v5 + 84);
    *((_DWORD *)this + 262) = *(_DWORD *)(v5 + 88);
    if (v11 != 0.0)
      *((_BYTE *)this + 880) = 0;
    v12 = *(double *)this * 0.0009765625;
    v13.i64[0] = 0xFFFFFFFFLL;
    v13.i64[1] = 0xFFFFFFFFLL;
    v14 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 872)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v12), 0)))), v13)), v12));
    *((float32x2_t *)this + 108) = v14;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 2, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v14, 1), v14).f32[0] / v12));
    DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), *((float *)this + 216), v12, v15);
    std::vector<unsigned long>::resize((uint64_t)this + 8, *((_QWORD *)this + 68));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x400, *((float *)this + 216), *((float *)this + 217), *(double *)this, 1uLL, (unint64_t **)&v20);
    v16 = (void *)*((_QWORD *)this + 1);
    if (v16)
    {
      *((_QWORD *)this + 2) = v16;
      operator delete(v16);
    }
    *(_OWORD *)((char *)this + 8) = v20;
    *((_QWORD *)this + 3) = v21;
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), *((_QWORD *)this + 68));
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688), *((_QWORD *)this + 68), 1u);
    DspLibBuffer::setNumFrames((_QWORD *)this + 86, *((_QWORD *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 784), *((_QWORD *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 888), *((_QWORD *)this + 68));
    DspLib::ComplexVector::operator=((char *)this + 888, 0.0);
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48), 3, *((_QWORD *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144), *((_QWORD *)this + 68));
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224), *((_QWORD *)this + 68), 3);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), *((_QWORD *)this + 68));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432), *((_QWORD *)this + 68));
    *((_DWORD *)this + 104) = *(float *)(v5 + 32);
    v17 = *(double *)this
        / (double)(unint64_t)round(*(double *)this* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000003));
    *((float *)this + 8) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 36) * 1000.0) * v17) / 1000.0));
    *((float *)this + 9) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 52) * 1000.0) * v17) / 1000.0));
    *((_BYTE *)this + 41) = 1;
    return DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  }
  else
  {
    v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v19, 116);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  char v2;

  v2 = 0;
  DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readSingleResonanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t)this + 968, &v2);
  if (!v2)
  {
    *((_DWORD *)this + 100) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_WORD *)this + 202) = 0;
    *(_QWORD *)((char *)this + 420) = 1120403456;
    DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions(this);
  }
}

uint64_t DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  return DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeSingleResonanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t *)this + 121);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::process(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  const DspLib::ComplexSpan *v10;
  uint64_t *v11;
  float v12;
  DspLib::ComplexSpan *v13;
  float v14;
  _BOOL8 result;
  unsigned int v16;
  DSPSplitComplex *v17;
  float *v18;
  DspLib::ComplexSpan *v19;
  DSPSplitComplex *v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex *v23;
  DspLib::ComplexMatrixSpan *v24;
  DspLib::ComplexMatrix *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  DspLib::ComplexSpan *v31;
  uint64_t v32;
  const DspLib::ComplexSpan *v33;
  float *v34;
  char *v35;
  uint64_t v36;
  int v37;
  float *v38;
  DspLib::LoudspeakerSystemIDV1 *v39;
  DspLib::ComplexVector *v40;
  DSPSplitComplex *v41;
  char *v42;
  DspLib::ComplexMatrixSpan *v43;
  DSPSplitComplex *v44;
  const DspLib::ComplexSpan *v45;
  DspLib::LoudspeakerSystemIDV2 *v46;
  float *v47;
  DspLib::ComplexSpan *v48;
  uint64_t v49;
  int v50;
  DSPSplitComplex __B;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 41))
  {
    v10 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688);
    v11 = (uint64_t *)((char *)this + 8);
    v46 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608);
    DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (_QWORD *)this + 76, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688), (uint64_t *)this + 1);
    v12 = *((float *)this + 248);
    v44 = (DSPSplitComplex *)((char *)this + 888);
    v45 = v10;
    DspLib::LoudspeakerSystemIDV2::updateWeights(v10, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 888), v13, v12);
    *((float *)this + 102) = v14;
    result = DspLib::LoudspeakerSystemIDV1::safeToAdapt((uint64_t *)a5, (float *)this + 100, v11, (float *)this + 106, v14, *((float *)this + 248), *((float *)this + 249), *((float *)this + 250));
    if (result)
    {
      if (*((_DWORD *)this + 104))
      {
        v37 = 0;
        v16 = 0;
        v47 = (float *)((char *)this + 968);
        v42 = (char *)this + 432;
        v43 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48);
        v40 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224);
        v41 = (DSPSplitComplex *)((char *)this + 144);
        v38 = (float *)&v50;
        v39 = (DspLib::LoudspeakerSystemIDV1 *)((char *)&v49 + 4);
        v48 = (DspLib::ComplexSpan *)a6;
        v17 = (DSPSplitComplex *)((char *)this + 432);
        do
        {
          v18 = v47;
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel(result, (DSPSplitComplex *)this + 49, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v47);
          DspLib::operator+=((char *)this + 784, a6);
          DspLib::operator+=((uint64_t)this + 784, a4);
          DspLib::LoudspeakerSystemIDV2::updateModelFitData(v46, v45, a6, a4, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 784), v17, v19);
          v21 = (float *)v43;
          v20 = v44;
          DspLib::LoudspeakerSystemIDV1::updateMInResonanceModel((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v18, v44, v43);
          v22 = (uint64_t)v18;
          v23 = v41;
          DspLib::LoudspeakerSystemIDV1::updateAInverseInResonanceModel((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v22, (uint64_t)v41, (uint64_t)v20);
          v24 = v40;
          DspLib::LoudspeakerSystemIDV1::updateXInResonanceModel(v17, v23, v40, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), v25);
          v27 = MEMORY[0x1E0C80A78](v26);
          MEMORY[0x1E0C80A78](v27);
          v28 = *((_QWORD *)this + 68);
          __B.realp = v30;
          __B.imagp = (float *)((char *)&v36 - v29);
          v52 = v28;
          DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 1uLL, &__B);
          DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, v17);
          DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
          DspLib::operator*=((DSPSplitComplex *)this + 20, v23);
          v49 = 0;
          v50 = 0;
          result = DspLib::LoudspeakerSystemIDV1::updateModelParameters(v39, v38, (float *)&v49, v21, v24, (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), v31, 1.0e-15);
          if (result)
          {
            result = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::parametersAreValid((uint64_t)this, (uint64_t)&v49, (uint64_t)v48, a4, v32, v33);
            if (result)
            {
              v34 = v47;
              *(_QWORD *)v47 = v49;
              *((_DWORD *)v34 + 2) = v50;
              v37 = 1;
            }
          }
          ++v16;
          a6 = (DSPSplitComplex *)v48;
        }
        while (v16 < *((_DWORD *)this + 104));
      }
      else
      {
        v37 = 0;
      }
      return v37 & 1;
    }
    else
    {
      *((_BYTE *)this + 404) = 0;
    }
  }
  else
  {
    v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v35, 214);
    result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

BOOL DspLib::LoudspeakerSystemIDV1::safeToAdapt(uint64_t *a1, float *a2, uint64_t *a3, float *a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v18;
  float v19;
  _BOOL4 v20;

  *a2 = 0.0;
  v8 = *a3;
  v9 = a3[1] - *a3;
  if (!v9)
    return 0;
  v10 = 0;
  v11 = v9 >> 3;
  v12 = *a1;
  v13 = 0.0;
  v14 = 0.0;
  do
  {
    v15 = *(_QWORD *)(v8 + 8 * v10);
    if (v15 >= 0x1FF)
      v15 = 511;
    v16 = *(float *)(v12 + 4 * v15);
    v14 = v16 + v14;
    *a2 = v14;
    if (v16 > v13)
      v13 = v16;
    ++v10;
  }
  while (v11 > v10);
  if (v14 == 0.0)
    return 0;
  v18 = v13 / v14;
  *a4 = v18;
  v19 = *a2 / (float)v11;
  *a2 = v19;
  v20 = a5 >= a6;
  if (v18 <= a7)
    v20 = 1;
  return v19 > a8 && v20;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel(uint64_t a1, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  DSPSplitComplex __B;
  uint64_t v23;
  DSPSplitComplex v24;
  uint64_t v25;
  DSPSplitComplex __A;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v7);
  __A.realp = v9;
  __A.imagp = (float *)((char *)&__B - v8);
  v27 = v10;
  DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
  v12 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  v24.realp = v14;
  v24.imagp = (float *)((char *)&__B - v13);
  v25 = v15;
  DspLib::ComplexMatrixSpan::row(a3, 0, &v24);
  DspLib::operator*=((uint64_t)&__A, *a4);
  DspLib::operator*=((uint64_t)&v24, a4[2]);
  v16 = DspLib::operator+=((uint64_t)&v24, a4[1]);
  v17 = MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  __B.realp = v19;
  __B.imagp = (float *)((char *)&__B - v18);
  v23 = v20;
  DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
  DspLib::operator+=(&v24, &__B);
  DspLib::ComplexSpan::operator=(a2, &__A);
  return DspLib::operator/=(a2, &v24);
}

void DspLib::LoudspeakerSystemIDV1::updateMInResonanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  DspLib::ComplexMatrixSpan *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  DSPSplitComplex *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex __C;
  uint64_t v24;
  DSPSplitComplex __B;
  uint64_t v26;
  DSPSplitComplex __A;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = MEMORY[0x1E0C80A78](v8);
  __A.realp = v11;
  __A.imagp = (float *)((char *)&__C - v10);
  v28 = v12;
  v13 = MEMORY[0x1E0C80A78](v9);
  v14 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v13);
  __B.realp = v16;
  __B.imagp = (float *)((char *)&__C - v15);
  v26 = v17;
  DspLib::ComplexMatrixSpan::row(v14, 0, &__B);
  DspLib::operator*=((uint64_t)&__B, a2[2]);
  DspLib::operator+=((uint64_t)&__B, a2[1]);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator+=(&__B, &__A);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  v18 = DspLib::operator*=(&__A, a3);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  __C.realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  v24 = v22;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::operator*=((uint64_t)&__A, -*a2);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -*a2);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
}

uint64_t DspLib::LoudspeakerSystemIDV1::updateAInverseInResonanceModel(DspLib::ComplexMatrixSpan *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  DspLib::ComplexMatrixSpan *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v19;
  DSPSplitComplex __B;
  uint64_t v21;
  DSPSplitComplex __A;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v8);
  __A.realp = v11;
  __A.imagp = (float *)((char *)&v19 - v10);
  v23 = v12;
  DspLib::ComplexMatrixSpan::row(v9, 0, &__A);
  DspLib::operator*=((uint64_t)&__A, *(float *)(a2 + 8));
  v13 = DspLib::operator+=((uint64_t)&__A, *(float *)(a2 + 4));
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  __B.realp = v16;
  __B.imagp = (float *)((char *)&v19 - v15);
  v21 = v17;
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__B);
  DspLib::operator+=(&__A, &__B);
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &__A);
}

void DspLib::LoudspeakerSystemIDV1::updateXInResonanceModel(DSPSplitComplex *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  DSPSplitComplex __B;
  uint64_t v20;
  DSPSplitComplex __C;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v9 = MEMORY[0x1E0C80A78](this);
  MEMORY[0x1E0C80A78](v9);
  __C.realp = v11;
  __C.imagp = (float *)((char *)&v18 - v10);
  v22 = v12;
  DspLib::ComplexSpan::operator=(&__C, this);
  DspLib::operator*=((uint64_t)&__C, -1.0);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
  DspLib::ComplexSpan::operator=(&__C, this);
  v13 = DspLib::operator*=((uint64_t)&__C, -1.0);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  __B.realp = v16;
  __B.imagp = (float *)((char *)&v18 - v15);
  v20 = v17;
  DspLib::ComplexMatrixSpan::row(a4, 0, &__B);
  DspLib::operator*=(&__C, &__B);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 0, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
}

BOOL DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::parametersAreValid(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  DspLib::LoudspeakerSystemIDV2 *v10;
  DSPSplitComplex *v11;
  const DspLib::ComplexSpan *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  int32x2_t v21;
  uint64_t v22;
  const DspLib::ComplexSpan *v23;
  float v24;
  float v25;
  char v26;
  _BOOL8 result;
  float v28;
  float v29;
  float32x2_t v30;

  v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 608);
  v11 = (DSPSplitComplex *)(a1 + 784);
  v12 = (const DspLib::ComplexSpan *)(a1 + 432);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 608), *(const DspLib::ComplexSpan **)(a1 + 888), (float *)(a1 + 784), (const DspLib::ComplexSpan *)(a1 + 432), a6);
  *(_DWORD *)(a1 + 420) = v13;
  v14 = 36;
  if (*(float *)(a1 + 408) > *(float *)(a1 + 1004))
    v14 = 32;
  v15 = *(float *)(a1 + v14);
  v16 = *(float *)(a2 + 8) + (float)(v15 * (float)(*(float *)(a1 + 976) - *(float *)(a2 + 8)));
  *(float *)(a2 + 8) = v16;
  v17 = vmla_n_f32(*(float32x2_t *)a2, vsub_f32(*(float32x2_t *)(a1 + 968), *(float32x2_t *)a2), v15);
  *(float32x2_t *)a2 = v17;
  v18 = *(float *)(a1 + 1040);
  if (*(_BYTE *)(a1 + 880))
  {
    if (v17.f32[0] <= 0.00001)
      v19 = *(float *)(a1 + 1020);
    else
      v19 = (float)(v18 * v18) / v17.f32[0];
  }
  else
  {
    v19 = *(float *)(a1 + 1012);
    v20 = sqrtf(v17.f32[0] * v19);
    if (v17.f32[0] > 0.0)
      v18 = v20;
  }
  v28 = v18;
  v29 = v19;
  v30.f32[0] = v16 * v19;
  v30.i32[1] = vmuls_lane_f32(v19, v17, 1);
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::clipTsParameters((float *)a1, &v28);
  *(float *)v21.i32 = v29;
  *(float *)a2 = (float)(v28 * v28) / v29;
  *(int32x2_t *)(a2 + 4) = vrev64_s32((int32x2_t)vdiv_f32(v30, (float32x2_t)vdup_lane_s32(v21, 0)));
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::calculateEstimatedResonanceModel(v22, v11, (DspLib::ComplexMatrixSpan *)(a1 + 512), (float *)a2);
  DspLib::operator+=(v11, a3);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 888), (float *)v11, v12, v23);
  v25 = *(float *)(a1 + 420);
  if (v24 >= v25)
  {
    v26 = 0;
  }
  else
  {
    *(float *)(a1 + 420) = v24;
    v26 = 1;
  }
  result = v24 < v25;
  *(_BYTE *)(a1 + 405) = v26;
  *(_BYTE *)(a1 + 404) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::status(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int32x2_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  char *v15;

  if (*((_BYTE *)this + 40))
  {
    if (*((_BYTE *)this + 880))
    {
      v4 = *((float *)this + 242);
      if (v4 == 0.0)
        v5 = 0.0;
      else
        v5 = (float)(*((float *)this + 260) * *((float *)this + 260)) / v4;
      v7 = v5 * 1000.0;
    }
    else
    {
      v5 = *((float *)this + 253);
      v6 = *((float *)this + 242);
      if (v6 <= 0.0)
        v7 = *((float *)this + 260);
      else
        v7 = sqrtf(v5 * v6);
    }
    *(float *)(a2 + 8) = v7;
    v8 = (int32x2_t)vmul_n_f32(*(float32x2_t *)((char *)this + 972), v5);
    *(_DWORD *)(a2 + 144) = *((_DWORD *)this + 100);
    *(int32x2_t *)(a2 + 12) = vrev64_s32(v8);
    *(float *)v8.i32 = sqrtf(*((float *)this + 243));
    v9 = *(float *)v8.i32 / 6.2832;
    v10 = *((float *)this + 244);
    v11 = *(float *)v8.i32 / v10;
    if (v10 == 0.0)
      v11 = 0.0;
    v12 = (float)(unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
    *(float *)(a2 + 20) = v9;
    *(float *)(a2 + 24) = v11;
    v13 = 1.0;
    if (*((_BYTE *)this + 404))
      v14 = 1.0;
    else
      v14 = 0.0;
    *(float *)(a2 + 28) = v12;
    *(float *)(a2 + 32) = v14;
    *(float *)(a2 + 36) = v14;
    *(float *)(a2 + 40) = v14;
    if (!*((_BYTE *)this + 405))
      v13 = 0.0;
    *(float *)(a2 + 124) = v13;
    *(float *)(a2 + 128) = v13;
    *(float *)(a2 + 132) = v13;
    *(_DWORD *)(a2 + 148) = *((_DWORD *)this + 106);
    *(_DWORD *)(a2 + 152) = *((_DWORD *)this + 102);
    *(float *)(a2 + 156) = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::coherenceMin(this);
    *(_DWORD *)(a2 + 168) = *((_DWORD *)this + 105);
    *(_DWORD *)(a2 + 160) = *((_DWORD *)this + 216);
    *(_DWORD *)(a2 + 164) = *((_DWORD *)this + 217);
    *(_QWORD *)(a2 + 220) = 0;
    *(_OWORD *)(a2 + 204) = 0u;
    *(_OWORD *)(a2 + 188) = 0u;
    *(_OWORD *)(a2 + 172) = 0u;
  }
  else
  {
    v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 257);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::clipTsParameters(float *a1, float *a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float result;

  v2 = a1 + 261;
  v3 = a1 + 262;
  if (a1[262] >= *a2)
    v3 = a2;
  if (*a2 >= a1[261])
    v2 = v3;
  *a2 = *v2;
  v4 = a1 + 254;
  v5 = a1 + 255;
  v6 = a2[1];
  if (a1[255] >= v6)
    v5 = a2 + 1;
  if (v6 >= a1[254])
    v4 = v5;
  a2[1] = *v4;
  v7 = a1 + 256;
  v8 = a1 + 257;
  v9 = a2[3];
  if (a1[257] >= v9)
    v8 = a2 + 3;
  if (v9 >= a1[256])
    v7 = v8;
  a2[3] = *v7;
  v10 = a1 + 258;
  v11 = a1 + 259;
  v13 = a2[2];
  v12 = a2 + 2;
  v14 = v13;
  if (a1[259] >= v13)
    v11 = v12;
  if (v14 >= a1[258])
    v10 = v11;
  result = *v10;
  *v12 = *v10;
  return result;
}

float DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(float a1, float a2)
{
  return (float)(a1 * a1) / a2;
}

double DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::initialize(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, double a2)
{
  double result;

  *(double *)this = a2;
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600), 0);
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 776), 0);
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 102) = 0;
  *((_WORD *)this + 202) = 0;
  *(_QWORD *)&result = 1120403456;
  *((_QWORD *)this + 52) = 1120403456;
  *((_BYTE *)this + 44) = 1;
  return result;
}

double DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::reset(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  double result;

  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 102) = 0;
  *((_WORD *)this + 202) = 0;
  *(_QWORD *)&result = 1120403456;
  *((_QWORD *)this + 52) = 1120403456;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::setParameters(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, const DspLib::AlgorithmParametersInstance *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  DspLib *v8;
  DspLib *v9;
  float v10;
  float v11;
  int8x16_t v12;
  float32x2_t v13;
  float v14;
  DspLib::ComplexMatrixSpan *v15;
  void *v16;
  float v17;
  float v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  if (*((_BYTE *)this + 44))
  {
    v4 = DspLib::AlgorithmParametersInstance::group(a2, 6u);
    v5 = v4;
    v6 = *(float *)(v4 + 20);
    if (*(float *)(v4 + 24) + *(double *)this * 0.0009765625 * -2.0 * *(float *)(v4 + 68) > v6)
    {
      *((float *)this + 216) = v6;
      *((_DWORD *)this + 217) = *(_DWORD *)(v4 + 24);
      *((_DWORD *)this + 218) = *(_DWORD *)(v4 + 68);
    }
    v7 = DspLib::dB2Amp((DspLib *)v4, *(float *)(v4 + 56));
    *((float *)this + 246) = v7 / (float)(v7 + 1.0);
    *((float *)this + 247) = *(float *)(v5 + 60) * 0.01;
    *((float *)this + 248) = DspLib::dB2Amp(v8, *(float *)(v5 + 64));
    v10 = DspLib::dB2Amp(v9, *(float *)(v5 + 76));
    *((float *)this + 249) = v10 / (float)(v10 + 1.0);
    *((_DWORD *)this + 250) = *(_DWORD *)(v5 + 32);
    *((_DWORD *)this + 251) = *(_DWORD *)(v5 + 36);
    *((_DWORD *)this + 252) = *(_DWORD *)(v5 + 40);
    *((_DWORD *)this + 253) = *(_DWORD *)(v5 + 44);
    *((_DWORD *)this + 254) = *(_DWORD *)(v5 + 48);
    *((_DWORD *)this + 255) = *(_DWORD *)(v5 + 52);
    v11 = *(double *)this * 0.0009765625;
    v12.i64[0] = 0xFFFFFFFFLL;
    v12.i64[1] = 0xFFFFFFFFLL;
    v13 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 864)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v11), 0)))), v12)), v11));
    *((float32x2_t *)this + 107) = v13;
    v14 = *((float *)this + 218) * v11;
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), 2, vcvtas_u32_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v13, 1), v13).f32[0] / v14));
    DspLib::LoudspeakerSystemIDV1::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), *((float *)this + 214), v14, v15);
    std::vector<unsigned long>::resize((uint64_t)this + 8, *((_QWORD *)this + 67));
    DspLib::FFT::frequencyBinIndex((DspLib::FFT *)0x400, *((float *)this + 214), *((float *)this + 215), *(double *)this, (unint64_t)*((float *)this + 218), (unint64_t **)&v20);
    v16 = (void *)*((_QWORD *)this + 1);
    if (v16)
    {
      *((_QWORD *)this + 2) = v16;
      operator delete(v16);
    }
    *(_OWORD *)((char *)this + 8) = v20;
    *((_QWORD *)this + 3) = v21;
    v17 = *(double *)this * 0.0009765625 * *((float *)this + 218);
    *((float *)this + 10) = v17;
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600), *((_QWORD *)this + 67));
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680), *((_QWORD *)this + 67), 1u);
    DspLibBuffer::setNumFrames((_QWORD *)this + 85, *((_QWORD *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 776), *((_QWORD *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 880), *((_QWORD *)this + 67));
    DspLib::ComplexVector::operator=((char *)this + 880, 0.0);
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48), 3, *((_QWORD *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 144), *((_QWORD *)this + 67));
    DspLib::ComplexMatrix::setDimensions((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224), *((_QWORD *)this + 67), 3);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320), *((_QWORD *)this + 67));
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 424), *((_QWORD *)this + 67));
    *((_DWORD *)this + 103) = *(float *)(v5 + 16);
    v18 = *(double *)this
        / (double)(unint64_t)round(*(double *)this* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000003));
    *((float *)this + 8) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 28) * 1000.0) * v18) / 1000.0));
    *((float *)this + 9) = expf(-1.0 / (float)((float)((float)(*(float *)(v5 + 72) * 1000.0) * v18) / 1000.0));
    *((_BYTE *)this + 45) = 1;
  }
  else
  {
    v19 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v19, 539);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::readFromNvm(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  double result;
  char v3;

  v3 = 0;
  DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readInductanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t)this + 960, &v3);
  if (!v3)
  {
    *((_DWORD *)this + 100) = 0;
    *((_DWORD *)this + 102) = 0;
    *((_WORD *)this + 202) = 0;
    *(_QWORD *)&result = 1120403456;
    *((_QWORD *)this + 52) = 1120403456;
  }
  return result;
}

uint64_t DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::writeToNvm(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  return DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeInductanceModel((uint64_t)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (uint64_t *)this + 120);
}

BOOL DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::process(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, DSPSplitComplex *a6)
{
  const DspLib::ComplexSpan *v10;
  uint64_t *v11;
  float v12;
  DspLib::ComplexSpan *v13;
  float v14;
  _BOOL8 result;
  unsigned int v16;
  DSPSplitComplex *v17;
  float *v18;
  DspLib::ComplexSpan *v19;
  DSPSplitComplex *v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex *v23;
  DspLib::ComplexMatrixSpan *v24;
  DspLib::ComplexMatrix *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  DspLib::ComplexSpan *v31;
  uint64_t v32;
  const DspLib::ComplexSpan *v33;
  float *v34;
  char *v35;
  uint64_t v36;
  int v37;
  DspLib::LoudspeakerSystemIDV1 *v38;
  float *v39;
  DspLib::ComplexVector *v40;
  DSPSplitComplex *v41;
  char *v42;
  DspLib::ComplexMatrixSpan *v43;
  DSPSplitComplex *v44;
  const DspLib::ComplexSpan *v45;
  DspLib::LoudspeakerSystemIDV2 *v46;
  float *v47;
  DspLib::ComplexSpan *v48;
  float32x2_t v49;
  int v50;
  DSPSplitComplex __B;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 45))
  {
    v10 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680);
    v11 = (uint64_t *)((char *)this + 8);
    v46 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600);
    DspLib::LoudspeakerSystemIDV2::updateLocalSearchVariables(a2, a3, (_QWORD *)this + 75, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680), (uint64_t *)this + 1);
    v12 = *((float *)this + 246);
    v44 = (DSPSplitComplex *)((char *)this + 880);
    v45 = v10;
    DspLib::LoudspeakerSystemIDV2::updateWeights(v10, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 880), v13, v12);
    *((float *)this + 102) = v14;
    result = DspLib::LoudspeakerSystemIDV1::safeToAdapt((uint64_t *)a5, (float *)this + 100, v11, (float *)this + 105, v14, *((float *)this + 246), *((float *)this + 247), *((float *)this + 248));
    if (result)
    {
      if (*((_DWORD *)this + 103))
      {
        v37 = 0;
        v16 = 0;
        v47 = (float *)((char *)this + 960);
        v42 = (char *)this + 424;
        v43 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48);
        v40 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224);
        v41 = (DSPSplitComplex *)((char *)this + 144);
        v38 = (DspLib::LoudspeakerSystemIDV1 *)&v50;
        v39 = (float *)&v49 + 1;
        v48 = (DspLib::ComplexSpan *)a6;
        v17 = (DSPSplitComplex *)((char *)this + 424);
        do
        {
          v18 = v47;
          DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel(result, (DSPSplitComplex *)((char *)this + 776), (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), v47);
          DspLib::operator+=((char *)this + 776, a6);
          DspLib::operator+=((uint64_t)this + 776, a4);
          DspLib::LoudspeakerSystemIDV2::updateModelFitData(v46, v45, a6, a4, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 776), v17, v19);
          v21 = (float *)v43;
          v20 = v44;
          DspLib::LoudspeakerSystemIDV1::updateMInInductanceModel((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), v18, v44, v43);
          v22 = (uint64_t)v18;
          v23 = v41;
          DspLib::LoudspeakerSystemIDV1::updateAInverseInInductanceModel((uint64_t)this + 504, v22, (uint64_t)v41, (uint64_t)v20);
          v24 = v40;
          DspLib::LoudspeakerSystemIDV1::updateXInInductanceModel((DspLib::LoudspeakerSystemIDV1 *)v17, v23, v40, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), v25);
          v27 = MEMORY[0x1E0C80A78](v26);
          MEMORY[0x1E0C80A78](v27);
          v28 = *((_QWORD *)this + 67);
          __B.realp = v30;
          __B.imagp = (float *)((char *)&v36 - v29);
          v52 = v28;
          DspLib::ComplexMatrixSpan::row((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), 0, &__B);
          DspLib::ComplexSpan::operator=((DSPSplitComplex *)this + 20, v17);
          DspLib::operator*=((DSPSplitComplex *)this + 20, &__B);
          DspLib::operator*=((DSPSplitComplex *)this + 20, v23);
          v49 = 0;
          v50 = 0;
          result = DspLib::LoudspeakerSystemIDV1::updateModelParameters(v38, (float *)&v49, v39, v21, v24, (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320), v31, 1.0e-10);
          if (result)
          {
            result = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::parametersAreValid((uint64_t)this, &v49, (uint64_t)v48, a4, v32, v33);
            if (result)
            {
              v34 = v47;
              *(float32x2_t *)v47 = v49;
              *((_DWORD *)v34 + 2) = v50;
              v37 = 1;
            }
          }
          ++v16;
          a6 = (DSPSplitComplex *)v48;
        }
        while (v16 < *((_DWORD *)this + 103));
      }
      else
      {
        v37 = 0;
      }
      return v37 & 1;
    }
    else
    {
      *((_BYTE *)this + 404) = 0;
    }
  }
  else
  {
    v35 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v35, 628);
    result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel(uint64_t a1, DSPSplitComplex *a2, DspLib::ComplexMatrixSpan *a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v17;
  DSPSplitComplex __B;
  uint64_t v19;
  DSPSplitComplex __A;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v7);
  __A.realp = v9;
  __A.imagp = (float *)((char *)&v17 - v8);
  v21 = v10;
  DspLib::ComplexMatrixSpan::row(a3, 0, &__A);
  v12 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  __B.realp = v14;
  __B.imagp = (float *)((char *)&v17 - v13);
  v19 = v15;
  DspLib::ComplexMatrixSpan::row(a3, 1uLL, &__B);
  DspLib::operator*=((uint64_t)&__A, *a4);
  DspLib::operator*=((uint64_t)&__B, a4[1]);
  DspLib::operator+=(&__A, &__B);
  DspLib::ComplexMatrixSpan::row(a3, 0, &__B);
  DspLib::operator+=((uint64_t)&__B, a4[2]);
  if (fabsf(*__B.realp) < 0.00000011921)
    *__B.realp = 0.00000011921;
  DspLib::ComplexSpan::operator=(a2, &__A);
  return DspLib::operator/=(a2, &__B);
}

void DspLib::LoudspeakerSystemIDV1::updateMInInductanceModel(DspLib::ComplexMatrixSpan *a1, float *a2, DSPSplitComplex *a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v8;
  DspLib::ComplexMatrixSpan *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  DSPSplitComplex *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  DSPSplitComplex __C;
  uint64_t v24;
  DSPSplitComplex __A;
  uint64_t v26;
  DSPSplitComplex __B;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1);
  v9 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v8);
  __B.realp = v11;
  __B.imagp = (float *)((char *)&__C - v10);
  v28 = v12;
  DspLib::ComplexMatrixSpan::row(v9, 0, &__B);
  v13 = DspLib::operator+=((uint64_t)&__B, a2[2]);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  __A.realp = v16;
  __A.imagp = (float *)((char *)&__C - v15);
  v26 = v17;
  DspLib::ComplexMatrixSpan::row(a1, 0, &__A);
  v18 = DspLib::operator*=(&__A, a3);
  v19 = MEMORY[0x1E0C80A78](v18);
  MEMORY[0x1E0C80A78](v19);
  __C.realp = v21;
  __C.imagp = (float *)((char *)&__C - v20);
  v24 = v22;
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=(&__A, a3);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 2uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a1, 0, &__C);
  DspLib::operator*=((uint64_t)&__C, -*a2);
  DspLib::ComplexMatrixSpan::row(a1, 1uLL, &__A);
  DspLib::operator*=((uint64_t)&__A, -a2[1]);
  DspLib::operator+=(&__A, &__C);
  DspLib::operator*=(&__A, a3);
  DspLib::operator*=(&__B, &__B);
  DspLib::ComplexSpan::operator=(&__C, &__A);
  DspLib::operator/=(&__C, &__B);
  DspLib::ComplexMatrixSpan::setRow(a4, 0, &__C);
}

uint64_t DspLib::LoudspeakerSystemIDV1::updateAInverseInInductanceModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  DspLib::ComplexMatrixSpan *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  DSPSplitComplex v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](a1);
  v8 = (DspLib::ComplexMatrixSpan *)MEMORY[0x1E0C80A78](v7);
  v13.realp = v10;
  v13.imagp = (float *)((char *)&v13 - v9);
  v14 = v11;
  DspLib::ComplexMatrixSpan::row(v8, 0, &v13);
  DspLib::operator+=((uint64_t)&v13, *(float *)(a2 + 8));
  DspLib::ComplexVector::operator=(a3, a4);
  return DspLib::operator/=(a3, &v13);
}

void DspLib::LoudspeakerSystemIDV1::updateXInInductanceModel(DspLib::LoudspeakerSystemIDV1 *this, DSPSplitComplex *a2, DspLib::ComplexVector *a3, DspLib::ComplexMatrix *a4, DspLib::ComplexMatrix *a5)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  DSPSplitComplex *v12;
  DSPSplitComplex __C;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](this);
  MEMORY[0x1E0C80A78](v8);
  __C.realp = v10;
  __C.imagp = (float *)((char *)&__C - v9);
  v14 = v11;
  DspLib::ComplexSpan::operator=(&__C, v12);
  DspLib::operator*=((uint64_t)&__C, -1.0);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 0, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 0, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 1uLL, &__C);
  DspLib::ComplexMatrixSpan::row(a4, 1uLL, &__C);
  DspLib::operator*=(&__C, a2);
  DspLib::ComplexMatrixSpan::setColumn(a3, 2uLL, &__C);
}

BOOL DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::parametersAreValid(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4, uint64_t a5, const DspLib::ComplexSpan *a6)
{
  DspLib::LoudspeakerSystemIDV2 *v10;
  DSPSplitComplex *v11;
  const DspLib::ComplexSpan *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v18;
  float v24;
  float v25;
  float32_t v26;
  uint64_t v27;
  const DspLib::ComplexSpan *v28;
  float v29;
  float v30;
  char v31;
  _BOOL8 result;
  float v33;
  float v34;
  float v35;

  v10 = (DspLib::LoudspeakerSystemIDV2 *)(a1 + 600);
  v11 = (DSPSplitComplex *)(a1 + 776);
  v12 = (const DspLib::ComplexSpan *)(a1 + 424);
  DspLib::LoudspeakerSystemIDV2::calculateError((DspLib::LoudspeakerSystemIDV2 *)(a1 + 600), *(const DspLib::ComplexSpan **)(a1 + 880), (float *)(a1 + 776), (const DspLib::ComplexSpan *)(a1 + 424), a6);
  v14 = 36;
  if (*(float *)(a1 + 408) > *(float *)(a1 + 996))
    v14 = 32;
  v15 = *(float *)(a1 + v14);
  *(_DWORD *)(a1 + 416) = v13;
  _S0 = a2[1].f32[0] + (float)(v15 * (float)(*(float *)(a1 + 968) - a2[1].f32[0]));
  a2[1].f32[0] = _S0;
  _D2 = vmla_n_f32(*a2, vsub_f32(*(float32x2_t *)(a1 + 960), *a2), v15);
  *a2 = _D2;
  v18 = *(float *)(a1 + 1012);
  __asm { FMLS            S3, S0, V2.S[1] }
  v33 = _D2.f32[1];
  if (_S0 == 1.0e-12)
    v24 = v18;
  else
    v24 = _S3 / _S0;
  v34 = v24;
  v35 = _S3;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::clipTsParameters((float *)a1, &v33);
  v25 = v33;
  v26 = v35 / v34;
  a2->f32[0] = v35 + (float)((float)(v33 * v35) / v34);
  a2->f32[1] = v25;
  a2[1].f32[0] = v26;
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::calculateEstimatedInductanceModel(v27, v11, (DspLib::ComplexMatrixSpan *)(a1 + 504), (float *)a2);
  DspLib::operator+=(v11, a3);
  DspLib::operator+=((uint64_t)v11, a4);
  DspLib::LoudspeakerSystemIDV2::calculateError(v10, *(const DspLib::ComplexSpan **)(a1 + 880), (float *)v11, v12, v28);
  v30 = *(float *)(a1 + 416);
  if (v29 >= v30)
  {
    v31 = 0;
  }
  else
  {
    *(float *)(a1 + 416) = v29;
    v31 = 1;
  }
  result = v29 < v30;
  *(_BYTE *)(a1 + 405) = v31;
  *(_BYTE *)(a1 + 404) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::status(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  char *v10;

  if (*((_BYTE *)this + 44))
  {
    v4 = *((float *)this + 241);
    v5 = *((float *)this + 242);
    v6 = *((float *)this + 240) - (float)(v4 * v5);
    if (v5 == 0.0)
      v7 = *((float *)this + 253);
    else
      v7 = v6 / v5;
    *(float *)(a2 + 52) = v4;
    *(float *)(a2 + 56) = v7;
    if (*((_BYTE *)this + 404))
      v8 = 1.0;
    else
      v8 = 0.0;
    *(float *)(a2 + 60) = v6;
    *(float *)(a2 + 64) = v8;
    *(float *)(a2 + 68) = v8;
    *(float *)(a2 + 72) = v8;
    if (*((_BYTE *)this + 405))
      v9 = 1.0;
    else
      v9 = 0.0;
    *(float *)(a2 + 112) = v9;
    *(float *)(a2 + 116) = v9;
    *(float *)(a2 + 120) = v9;
    *(float *)(a2 + 76) = (float)*((unint64_t *)this + 67);
    *(_DWORD *)(a2 + 80) = *((_DWORD *)this + 10);
    *(_DWORD *)(a2 + 96) = *((_DWORD *)this + 214);
    *(_DWORD *)(a2 + 100) = *((_DWORD *)this + 215);
    *(_DWORD *)(a2 + 48) = *((_DWORD *)this + 100);
    *(_DWORD *)(a2 + 84) = *((_DWORD *)this + 105);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)this + 102);
    *(float *)(a2 + 92) = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin(this);
    *(_DWORD *)(a2 + 108) = *((_DWORD *)this + 104);
  }
  else
  {
    v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1ImpedanceModels.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 671);
    ++DspLibDebug::mAssertCounter;
  }
}

float DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::clipTsParameters(float *a1, float *a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float result;

  v2 = a1 + 250;
  v3 = a1 + 251;
  if (a1[251] >= *a2)
    v3 = a2;
  if (*a2 >= a1[250])
    v2 = v3;
  *a2 = *v2;
  v4 = a1 + 252;
  v5 = a1 + 253;
  v6 = a2[1];
  if (a1[253] >= v6)
    v5 = a2 + 1;
  if (v6 >= a1[252])
    v4 = v5;
  a2[1] = *v4;
  v7 = a1 + 254;
  v8 = a1 + 255;
  v10 = a2[2];
  v9 = a2 + 2;
  v11 = v10;
  if (a1[255] >= v10)
    v8 = v9;
  if (v11 >= a1[254])
    v7 = v8;
  result = *v7;
  *v9 = *v7;
  return result;
}

float DspLib::LoudspeakerSystemIDV1::coeffsToTsParameters(double a1, float a2)
{
  return a2;
}

float DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(float a1, float a2, float a3)
{
  return a3 + (float)((float)(a1 * a3) / a2);
}

uint64_t DspLib::AlgorithmBase::AlgorithmBase(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void **v14;

  *(_QWORD *)a1 = off_1E69C46F0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x40E5888000000000;
  *(_QWORD *)(a1 + 32) = 0x20000000200;
  *(_BYTE *)(a1 + 40) = 0;
  v14 = (void **)std::vector<float>::vector((_QWORD *)(a1 + 48), a3);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = a4;
  *(_QWORD *)(a1 + 192) = a5;
  *(_QWORD *)(a1 + 200) = a6;
  *(_QWORD *)(a1 + 208) = a7;
  if (a3)
    memmove(*v14, a2, 4 * a3);
  return a1;
}

uint64_t DspLib::AlgorithmBase::initialize(DspLib::AlgorithmBase *this, int a2, double a3)
{
  unsigned int v5;
  int v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  DspLib *v12;
  int v13;
  int v14;
  uint64_t result;
  char *v16;

  v5 = (unsigned __int16)a2;
  if ((unsigned __int16)a2 == 2)
  {
    v6 = *((_DWORD *)this + 5);
    v7 = 6619138;
    goto LABEL_5;
  }
  if ((unsigned __int16)a2 == 1)
  {
    v6 = *((_DWORD *)this + 5);
    v7 = 6553601;
LABEL_5:
    v8 = v6 != v7;
    *((_DWORD *)this + 5) = v7;
    goto LABEL_7;
  }
  v8 = *((_DWORD *)this + 5) != a2;
  *((_DWORD *)this + 5) = a2;
LABEL_7:
  v9 = *((unsigned __int8 *)this + 8);
  v10 = (*(uint64_t (**)(DspLib::AlgorithmBase *))(*(_QWORD *)this + 64))(this);
  v11 = (*(uint64_t (**)(DspLib::AlgorithmBase *))(*(_QWORD *)this + 72))(this);
  v12 = (DspLib *)DspLib::AlgorithmBase::setNumberOfAudioChannels(this, v5, v5);
  if (a3 <= 0.0)
  {
    v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v16, 59);
    result = 0;
    ++DspLibDebug::mAssertCounter;
  }
  else
  {
    if (v9)
      v13 = v8;
    else
      v13 = 1;
    if (v10 != v5)
      v13 = 1;
    if (v11 == v5)
      v14 = v13;
    else
      v14 = 1;
    result = v14 | !DspLib::isEqual(v12, *((double *)this + 3), a3, 1.0e-20);
    *((double *)this + 3) = a3;
  }
  return result;
}

uint64_t DspLib::AlgorithmBase::setNumberOfAudioChannels(DspLib::AlgorithmBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  char *v4;
  int v5;

  if (a2 >= 0x41)
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    v5 = 157;
LABEL_11:
    printf("DSP Sound assertion in %s at line %d\n", v4, v5);
    result = 0;
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  if (a3 >= 0x41)
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    v5 = 158;
    goto LABEL_11;
  }
  if (!a2)
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    v5 = 159;
    goto LABEL_11;
  }
  if (!a3)
  {
    v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    v5 = 160;
    goto LABEL_11;
  }
  *((_DWORD *)this + 3) = a2;
  *((_DWORD *)this + 4) = a3;
  return 1;
}

uint64_t DspLib::AlgorithmBase::setParameter(DspLib::AlgorithmBase *this, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  *(float *)(v3 + 4 * a2) = a3;
  return (*(uint64_t (**)(DspLib::AlgorithmBase *, uint64_t, uint64_t))(*(_QWORD *)this + 144))(this, v3, (v4 - v3) >> 2);
}

void *DspLib::AlgorithmBase::setParameters(_QWORD *a1, const void *a2, uint64_t a3, __n128 a4)
{
  void *result;
  unint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  float v11;

  result = (void *)a1[6];
  if (result != a2 && a3 != 0)
  {
    memmove(result, a2, 4 * a3);
    result = (void *)a1[6];
  }
  if ((void *)a1[7] != result)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      a4.n128_u32[0] = *((_DWORD *)result + v7);
      (*(void (**)(_QWORD *, unint64_t, __n128))(*a1 + 120))(a1, v7, a4);
      result = (void *)a1[6];
      v10 = a1[7];
      v11 = *((float *)result + v7);
      if (v9 >= v11)
        v9 = *((float *)result + v7);
      if (v11 >= a4.n128_f32[0])
        a4.n128_f32[0] = v9;
      *((_DWORD *)result + v7) = a4.n128_u32[0];
      v7 = v8++;
    }
    while (v7 < (v10 - (uint64_t)result) >> 2);
  }
  return result;
}

unint64_t DspLib::AlgorithmBase::process(DspLib::AlgorithmBase *this, DspLibBuffer *a2, DspLibBuffer *a3, unsigned int a4, uint64_t a5)
{
  DspLibBuffer *v7;
  unint64_t cycle_count;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t result;
  int v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  DspLib::AlgorithmBase *v27;
  unint64_t v28;
  unsigned int v30;

  if (!a2)
  {
    v23 = 98;
LABEL_35:
    v24 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBase.cpp");
    result = printf("DSP Sound assertion in %s at line %d\n", v24, v23);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  v7 = a2;
  cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  if (a3)
  {
    v10 = *((_QWORD *)a3 + 2);
  }
  else
  {
    v10 = 0;
    a3 = v7;
  }
  v11 = *((_QWORD *)v7 + 2);
  if (DspLibBuffer::numChannels(v7) < *((_DWORD *)this + 3))
  {
    v23 = 108;
    goto LABEL_35;
  }
  if (!DspLibBuffer::numChannels(v7))
  {
    v23 = 109;
    goto LABEL_35;
  }
  if (DspLibBuffer::numChannels(a3) < *((_DWORD *)this + 4))
  {
    v23 = 110;
    goto LABEL_35;
  }
  if (!DspLibBuffer::numChannels(a3))
  {
    v23 = 111;
    goto LABEL_35;
  }
  if (!*((_BYTE *)this + 8))
  {
    v23 = 112;
    goto LABEL_35;
  }
  v25 = v11;
  v26 = v10;
  v12 = a4;
  v13 = a4;
  v14 = a5;
  if (cycle_count <= *((unsigned int *)this + 8))
  {
    (*(void (**)(DspLib::AlgorithmBase *, DspLibBuffer *, DspLibBuffer *, _QWORD, uint64_t))(*(_QWORD *)this + 224))(this, v7, a3, a4, a5);
    result = vp::utility::CPU_Profiler::get_cycle_count(a3);
    v16 = result;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v30 = a5;
    v27 = this;
    v28 = cycle_count;
    do
    {
      if (cycle_count - v15 >= *((unsigned int *)this + 8))
        v17 = *((unsigned int *)this + 8);
      else
        v17 = cycle_count - v15;
      if (v12)
      {
        v18 = a4;
        v19 = (unint64_t *)v7;
        do
        {
          DspLibBuffer::setFrameOffset(v19, v15 + v25);
          DspLibBuffer::setNumFrames(v19, v17);
          v19 += 12;
          --v18;
        }
        while (v18);
      }
      if (v30)
      {
        v20 = v14;
        v21 = (unint64_t *)a3;
        do
        {
          DspLibBuffer::setFrameOffset(v21, v16 + v26);
          v21 += 12;
          --v20;
        }
        while (v20);
      }
      v12 = a4;
      LODWORD(a5) = v30;
      (*(void (**)(DspLib::AlgorithmBase *, DspLibBuffer *, DspLibBuffer *, _QWORD, _QWORD))(*(_QWORD *)v27 + 224))(v27, v7, a3, a4, v30);
      result = vp::utility::CPU_Profiler::get_cycle_count(a3);
      v16 += result;
      v15 += v17;
      this = v27;
      cycle_count = v28;
    }
    while (v15 < v28);
  }
  if (v12)
  {
    do
    {
      DspLibBuffer::setFrameOffset((unint64_t *)v7, v25);
      result = (unint64_t)DspLibBuffer::setNumFrames(v7, cycle_count);
      v7 = (DspLibBuffer *)((char *)v7 + 96);
      --v13;
    }
    while (v13);
  }
  if ((_DWORD)a5)
  {
    do
    {
      DspLibBuffer::setFrameOffset((unint64_t *)a3, v26);
      result = (unint64_t)DspLibBuffer::setNumFrames(a3, v16);
      a3 = (DspLibBuffer *)((char *)a3 + 96);
      --v14;
    }
    while (v14);
  }
  return result;
}

_QWORD *DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  DspLib::PowerGuard::Algorithm **v19;
  char *v20;
  DspLib::PowerGuard::Algorithm *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  DspLib::PowerGuard::Algorithm *v25;
  int64x2_t v26;
  DspLib::PowerGuard::Algorithm *v27;
  char *v28;
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;
  DspLib::PowerGuard::Algorithm *v34;

  v4 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)a1, 0, 0, 0, 0, 0, 0);
  *(_QWORD *)v4 = off_1E69C47E8;
  v5 = *((_QWORD *)a2 + 2);
  v6 = *a2;
  *(_QWORD *)(v4 + 240) = 0;
  v7 = (int64x2_t *)(v4 + 240);
  *(_OWORD *)(v4 + 216) = v6;
  *(_QWORD *)(v4 + 232) = v5;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(v4 + 264, *(_QWORD *)(v4 + 216));
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 232))(a1);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(uint64_t **)(v8 + 8);
    v11 = &v10[v9];
    do
    {
      DspLib::algorithmFactory(*v10, &v34);
      v13 = (_QWORD *)a1[31];
      v12 = a1[32];
      if ((unint64_t)v13 >= v12)
      {
        v14 = ((uint64_t)v13 - v7->i64[0]) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v16 = v12 - v7->i64[0];
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v33 = a1 + 32;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(a1 + 32), v17);
        else
          v18 = 0;
        v19 = (DspLib::PowerGuard::Algorithm **)&v18[8 * v14];
        v20 = &v18[8 * v17];
        v32 = v20;
        v21 = v34;
        v34 = 0;
        *v19 = v21;
        v22 = v19 + 1;
        v31.i64[1] = (uint64_t)(v19 + 1);
        v24 = (_QWORD *)a1[30];
        v23 = (_QWORD *)a1[31];
        if (v23 == v24)
        {
          v27 = 0;
          v26 = vdupq_n_s64((unint64_t)v23);
        }
        else
        {
          do
          {
            v25 = (DspLib::PowerGuard::Algorithm *)*--v23;
            *v23 = 0;
            *--v19 = v25;
          }
          while (v23 != v24);
          v26 = *v7;
          v22 = (_QWORD *)v31.i64[1];
          v20 = v32;
          v27 = v34;
        }
        a1[30] = v19;
        a1[31] = v22;
        v31 = v26;
        v28 = (char *)a1[32];
        a1[32] = v20;
        v32 = v28;
        v30 = v26.i64[0];
        std::__split_buffer<std::unique_ptr<DspLib::DynamicFilter::Algorithm>>::~__split_buffer((uint64_t)&v30);
        a1[31] = v22;
        if (v27)
          (*(void (**)(DspLib::PowerGuard::Algorithm *))(*(_QWORD *)v27 + 8))(v27);
      }
      else
      {
        *v13 = v34;
        a1[31] = v13 + 1;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  return a1;
}

void sub_1B60E5F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a6);
  v8 = (void *)v6[34];
  if (v8)
  {
    v6[35] = v8;
    operator delete(v8);
  }
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *v6 = off_1E69C46F0;
  v9 = (void *)v6[6];
  if (v9)
  {
    v6[7] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t DspLib::algorithmFactory@<X0>(uint64_t a1@<X0>, DspLib::PowerGuard::Algorithm **a2@<X8>)
{
  DspLib::PowerGuard::Algorithm *v4;
  uint64_t result;

  if (DspLib::operator==(a1, (uint64_t)&DspLib::PowerGuard::Parameters::kDefinition))
  {
    v4 = (DspLib::PowerGuard::Algorithm *)operator new();
    result = DspLib::PowerGuard::Algorithm::Algorithm(v4);
  }
  else if (DspLib::operator==(a1, (uint64_t)&DspLib::LoudspeakerSystemIDV1::Parameters::kDefinition))
  {
    v4 = (DspLib::PowerGuard::Algorithm *)operator new();
    result = DspLib::LoudspeakerSystemIDV1::Algorithm::Algorithm(v4);
  }
  else if (DspLib::operator==(a1, (uint64_t)&DspLib::LoudspeakerSystemIDV2::Parameters::kDefinition))
  {
    v4 = (DspLib::PowerGuard::Algorithm *)operator new();
    result = DspLib::LoudspeakerSystemIDV2::Algorithm::Algorithm(v4);
  }
  else
  {
    if (!DspLib::operator==(a1, (uint64_t)&DspLib::LoudspeakerController::Parameters::kDefinition))
      abort();
    v4 = (DspLib::PowerGuard::Algorithm *)operator new();
    result = DspLib::LoudspeakerController::Algorithm::Algorithm(v4);
  }
  *a2 = v4;
  return result;
}

void sub_1B60E60C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C40A6028CC2);
  _Unwind_Resume(a1);
}

uint64_t DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = DspLib::AlgorithmBase::AlgorithmBase(a1, 0, 0, 0, 0, 0, 0);
  *(_QWORD *)v4 = off_1E69C47E8;
  *(_QWORD *)(v4 + 216) = a2;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_QWORD *)(v4 + 256) = 0;
  DspLib::AlgorithmParametersInstance::AlgorithmParametersInstance(v4 + 264, a2);
  return a1;
}

void sub_1B60E61A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  a10 = (void **)(v10 + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(_QWORD *)v10 = off_1E69C46F0;
  v12 = *(void **)(v10 + 48);
  if (v12)
  {
    *(_QWORD *)(v10 + 56) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t DspLib::AlgorithmBaseNewParameters::initialize(uint64_t **this, uint64_t a2, double a3)
{
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v6 = DspLib::AlgorithmBase::initialize((DspLib::AlgorithmBase *)this, a2, a3);
  v8 = this[30];
  v7 = this[31];
  while (v8 != v7)
  {
    v9 = *v8++;
    v6 |= (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 16))(v9, a2, a3);
  }
  return v6 & 1;
}

uint64_t DspLib::AlgorithmBaseNewParameters::parameters(DspLib::AlgorithmBaseNewParameters *this, int a2)
{
  unint64_t v2;
  uint64_t v3;

  if (!a2)
    return (uint64_t)this + 264;
  v2 = (a2 - 1);
  v3 = *((_QWORD *)this + 30);
  if (v2 >= (*((_QWORD *)this + 31) - v3) >> 3)
    abort();
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v2) + 248))(*(_QWORD *)(v3 + 8 * v2), 0);
}

uint64_t DspLib::AlgorithmBaseNewParameters::subAlgorithm(uint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = (a2 - 1);
    v3 = *(_QWORD *)(this + 240);
    if (v2 >= (*(_QWORD *)(this + 248) - v3) >> 3)
      abort();
    return *(_QWORD *)(v3 + 8 * v2);
  }
  return this;
}

char *DspLib::AlgorithmBaseNewParameters::setParameters(char *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;

  if (a3)
  {
    v3 = (a3 - 1);
    v4 = *((_QWORD *)this + 30);
    if (v3 >= (*((_QWORD *)this + 31) - v4) >> 3)
      abort();
    return (char *)(*(uint64_t (**)(_QWORD, const DspLib::AlgorithmParametersInstance *, _QWORD))(**(_QWORD **)(v4 + 8 * v3) + 256))(*(_QWORD *)(v4 + 8 * v3), a2, 0);
  }
  else
  {
    *((_QWORD *)this + 33) = *(_QWORD *)a2;
    if (this + 264 != (char *)a2)
      return std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(this + 272, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

float DspLib::AlgorithmBaseNewParameters::parameter(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  float result;

  if (!a3)
    return DspLib::AlgorithmParametersInstance::operator[](a1 + 33, a2);
  v3 = (a3 - 1);
  v4 = a1[30];
  if (v3 >= (a1[31] - v4) >> 3)
    abort();
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8 * v3) + 264))(*(_QWORD *)(v4 + 8 * v3), a2, 0);
  return result;
}

uint64_t DspLib::AlgorithmBaseNewParameters::parameter(DspLib::AlgorithmBaseNewParameters *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __int128 v7;

  v4 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(_QWORD *)this + 232))(this);
  *(_QWORD *)&v7 = DspLib::parameterAddress(v4, a2);
  DWORD2(v7) = v5;
  return (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *, _QWORD, _QWORD))(*(_QWORD *)this + 264))(this, *(_QWORD *)((char *)&v7 + 4), v7);
}

uint64_t DspLib::AlgorithmBaseNewParameters::setParameter(uint64_t *a1, uint64_t a2, int a3, float a4)
{
  unint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v5 = (a3 - 1);
    v6 = a1[30];
    if (v5 >= (a1[31] - v6) >> 3)
      abort();
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 8 * v5) + 272))(*(_QWORD *)(v6 + 8 * v5), a2, 0);
  }
  else
  {
    DspLib::AlgorithmParametersInstance::setValue(a1 + 33, a2, a4);
    return (*(uint64_t (**)(uint64_t *, uint64_t *, _QWORD))(*a1 + 256))(a1, a1 + 33, 0);
  }
}

uint64_t DspLib::AlgorithmBaseNewParameters::setParameter(DspLib::AlgorithmBaseNewParameters *this, uint64_t a2, float a3)
{
  uint64_t v6;
  int v7;
  __int128 v9;

  v6 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(_QWORD *)this + 232))(this);
  *(_QWORD *)&v9 = DspLib::parameterAddress(v6, a2);
  DWORD2(v9) = v7;
  return (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *, _QWORD, _QWORD, float))(*(_QWORD *)this + 272))(this, *(_QWORD *)((char *)&v9 + 4), v9, a3);
}

uint64_t DspLib::AlgorithmBaseNewParameters::setMeteringIsEnabled(uint64_t this, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  *(_BYTE *)(this + 40) = a2;
  v2 = *(uint64_t **)(this + 240);
  v3 = *(uint64_t **)(this + 248);
  if (v2 != v3)
  {
    v4 = this;
    do
    {
      this = *v2;
      if (*v2)
        this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 200))(this, *(unsigned __int8 *)(v4 + 40));
      ++v2;
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t DspLib::operator==(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;

  v4 = *(const char **)a1;
  v5 = strlen(*(const char **)a1);
  if (v5 == strlen(*(const char **)a2) && !memcmp(v4, *(const void **)a2, v5))
    return DspLib::operator==(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8));
  else
    return 0;
}

{
  const char *v4;
  size_t v5;

  v4 = *(const char **)a1;
  v5 = strlen(*(const char **)a1);
  if (v5 == strlen(*(const char **)a2) && !memcmp(v4, *(const void **)a2, v5))
    return DspLib::operator==(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8));
  else
    return 0;
}

uint64_t DspLib::AlgorithmBaseNewParameters::uninitialize(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 240);
  v2 = *(uint64_t **)(this + 248);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  return this;
}

uint64_t DspLib::AlgorithmBaseNewParameters::reset(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 240);
  v2 = *(uint64_t **)(this + 248);
  while (v1 != v2)
  {
    v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
  }
  return this;
}

uint64_t DspLib::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = a1[1];
  if (v2 != a2[1])
    return 0;
  if (!v2)
    return 1;
  v5 = 0;
  v6 = 1;
  LODWORD(v7) = 1;
  do
  {
    v7 = v7 & DspLib::operator==(*a1 + 16 * v5, *a2 + 16 * v5);
    v5 = v6;
  }
  while (a1[1] > (unint64_t)v6++);
  return v7;
}

{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = a1[1];
  if (v2 != a2[1])
    return 0;
  if (!v2)
    return 1;
  v5 = 0;
  v6 = 1;
  LODWORD(v7) = 1;
  do
  {
    v7 = v7 & DspLib::operator==(*a1 + 24 * v5, *a2 + 24 * v5);
    v5 = v6;
  }
  while (a1[1] > (unint64_t)v6++);
  return v7;
}

BOOL DspLib::operator==(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;

  v4 = *(const char **)a1;
  v5 = strlen(*(const char **)a1);
  if (v5 != strlen(*(const char **)a2)
    || memcmp(v4, *(const void **)a2, v5)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(float *)(a1 + 12) != *(float *)(a2 + 12))
  {
    return 0;
  }
  if (*(float *)(a1 + 20) == *(float *)(a2 + 20))
    return *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return 0;
}

float DspLib::MozartCompressor::Curve::setParameters(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float result;

  v2 = *(float *)(a2 + 164);
  v3 = *(float *)(a2 + 96);
  v4 = *(float *)(a2 + 28);
  v5 = *(float *)(a2 + 12);
  v6 = v5 < 0.5;
  if (v5 < 0.5)
    v4 = *(float *)(a2 + 96);
  v7 = *(float *)(a2 + 4);
  if (v6)
    v7 = *(float *)(a2 + 164);
  v8 = 1.0 / *(float *)(a2 + 8);
  v9 = *(float *)(a2 + 48);
  v10 = (float)(v7 * (float)(1.0 - v8)) - (float)(*(float *)(a2 + 44) * (float)(v9 - v8));
  v11 = (float)((float)(v10 - (float)(v2 * (float)(1.0 - v8))) / (float)(v8 - v9)) - (float)(v10 / (float)(1.0 - v9));
  v12 = v9 + -1.0;
  *(float *)(a1 + 12) = v12;
  v13 = -(float)(v12 * *(float *)(a2 + 44));
  *(float *)(a1 + 24) = v13;
  *(float *)(a1 + 16) = *(float *)(a2 + 44) - v11;
  *(float *)(a1 + 20) = v11 + *(float *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 44);
  v14 = (float)(1.0 / *(float *)(a2 + 8)) + -1.0;
  *(float *)(a1 + 44) = v14;
  v15 = (float)(1.0 / *(float *)(a2 + 8)) + -1.0;
  *(float *)(a1 + 48) = v15;
  v16 = v14 * (float)(*(float *)(a2 + 44) - v7);
  *(float *)(a1 + 52) = v16;
  *(float *)(a1 + 56) = -(float)(v7 * v14);
  v17 = -(float)(v2 * v15);
  *(float *)(a1 + 60) = v17;
  *(float *)(a1 + 64) = v7 - (float)(v2 - v7);
  *(float *)(a1 + 68) = v7 + (float)(v2 - v7);
  *(float *)(a1 + 36) = v2;
  *(float *)(a1 + 40) = v11;
  *(float *)(a1 + 28) = (float)((float)(v17 - v16) - v13) / (float)(v12 - v15);
  *(float *)(a1 + 32) = v7;
  *(float *)(a1 + 76) = v3;
  *(float *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 92);
  v18 = (float)(1.0 / *(float *)(a2 + 88)) + -1.0;
  *(float *)(a1 + 84) = v18;
  *(float *)(a1 + 88) = -(float)(v18 * v4);
  *(float *)(a1 + 92) = -(float)(v18 * v3);
  result = *(float *)(a2 + 80);
  *(float *)(a1 + 72) = result;
  return result;
}

void DspLib::MozartCompressor::Curve::vectCurve(float *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t i;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  DspLib::MozartCompressor *v19;
  float v20;
  float v21;
  float v23;
  DspLib::MozartCompressor *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v11 = *(float *)(a2 + 4 * i);
      v12 = a1[2];
      if (v12 > v11)
      {
        v14 = a1[14];
        v15 = (float)(a1[13] + (float)(a1[3] * v11)) + a1[6];
        v13 = a1[11];
      }
      else
      {
        v13 = a1[11];
        v14 = a1[14];
        if (a1[8] > v11)
          v15 = v14 + (float)(v13 * v11);
        else
          v15 = 0.0;
      }
      v16 = a1[13];
      v17 = a1[3];
      v18 = a1[6];
      v20 = DspLib::MozartCompressor::curveInterpolate((DspLib::MozartCompressor *)a1, a1[4], (float)(v16 + (float)(v17 * a1[4])) + v18, a1[5], v14 + (float)(v13 * a1[5]), v15, *(float *)(a2 + 4 * i));
      if (v20 < 0.0)
        v20 = 0.0;
      v21 = a1[18];
      if (v20 >= v21 || v12 <= v11)
        v23 = v20;
      else
        v23 = a1[18];
      v25 = DspLib::MozartCompressor::curveInterpolate(v19, a1[16], v14 + (float)(v13 * a1[16]), a1[17], 0.0, v23, v11);
      v26 = a1[7];
      v27 = a1[12];
      v28 = a1[15];
      if (v26 <= v11)
      {
        if (a1[9] > v11)
          v29 = v28 + (float)(v27 * v11);
        else
          v29 = 0.0;
      }
      else
      {
        v29 = (float)(v16 + (float)(v17 * v11)) + v18;
      }
      v30 = DspLib::MozartCompressor::curveInterpolate(v24, v26 - a1[10], v18 + (float)(v16 + (float)(v17 * (float)(v26 - a1[10]))), v26 + a1[10], v28 + (float)(v27 * (float)(v26 + a1[10])), v29, v11);
      v31 = 0.0;
      if (v30 < 0.0)
        v30 = 0.0;
      if (v30 < v21 && v12 > v11)
        v30 = v21;
      v33 = a1[20];
      if (v33 <= v11)
        v31 = a1[22] + (float)(a1[21] * v11);
      v34 = a1[24];
      v35 = v33 + v34;
      v36 = v33 - v34;
      if (v36 < v11 && v35 > v11)
      {
        v39 = (float)((float)((float)(v36 + v35) * 0.5) - v11) / (float)(v36 - v35);
        if (v39 < 0.0)
          v39 = -v39;
        v38 = a1[22] + (float)(a1[21] * v35);
        v31 = (float)((float)(1.0 - (float)(v39 + 0.5))
                    * (float)((float)(v38 - (float)((float)(v38 / (float)(v35 - v36)) * v35))
                            + (float)((float)(v38 / (float)(v35 - v36)) * v11)))
            + (float)((float)(v39 + 0.5) * v31);
      }
      v40 = a1[19];
      v41 = 0.0;
      if (v40 < v11)
        v41 = a1[23] + (float)(a1[21] * v11);
      v42 = v40 - v34;
      if ((float)(v40 - v34) < v11)
      {
        v43 = v34 + v40;
        if (v43 > v11)
        {
          v45 = (float)((float)((float)(v42 + v43) * 0.5) - v11) / (float)(v42 - v43);
          if (v45 < 0.0)
            v45 = -v45;
          v44 = a1[23] + (float)(a1[21] * v43);
          v41 = (float)((float)(1.0 - (float)(v45 + 0.5))
                      * (float)((float)(v44 - (float)((float)(v44 / (float)(v43 - v42)) * v43))
                              + (float)((float)(v44 / (float)(v43 - v42)) * v11)))
              + (float)((float)(v45 + 0.5) * v41);
        }
      }
      if (a4)
        *(float *)(*a4 + 4 * i) = a1[1] + (float)((float)(v25 + v31) * *a1);
      if (a5)
        *(float *)(*a5 + 4 * i) = a1[1] + (float)((float)(v30 + v41) * *a1);
    }
  }
}

float *DspLib::MozartCompressor::AttackReleaseFilter::process(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  float v10;
  uint64_t v11;
  int v12;
  float v13;

  v10 = result[7];
  if (a10)
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)result;
    do
    {
      v13 = *(float *)(a2 + 4 * v11);
      if (v13 < v10)
        v10 = v10 + (float)((float)(v13 - v10) * result[5]);
      if (*(float *)(a4 + 4 * v11) > v10)
        v10 = v10 * (float)((float)(result[2] * *(float *)(a9 + 4 * v11)) + 1.0);
      if (!v12)
        v10 = 1.0;
      *(float *)(a6 + 4 * v11++) = v10;
    }
    while (a10 > v11);
  }
  result[7] = v10;
  return result;
}

void DspLib::MozartCompressor::Limiter::autoThresholdCompressorGain(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  float v18;
  DspLib *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;

  if (a4)
  {
    v12 = 0;
    v13 = *(float *)(a2 + 60);
    v14 = *(float *)(a2 + 48) + 1.0;
    v15 = -v14;
    v16 = 1.0 - v14;
    v17 = 1;
    while (1)
    {
      v18 = *(float *)(a5 + 4 * v12);
      v20 = *(float *)(a1 + 44)
          + (float)((float)((float)(v13 + (float)(v15 * DspLib::amp2dBSafe((DspLib *)a1, v18, 0.000001))) / v16)
                  * *(float *)(a1 + 40));
      if (v20 < -40.0)
        v20 = -40.0;
      v21 = DspLib::dB2Amp(v19, -v20);
      v22 = v21 * (float)(v18 * *(float *)(a3 + 4 * v12));
      v23 = *(float *)(a1 + 4);
      if (v22 > v23)
        break;
      v26 = *(float *)(a1 + 48) * v22;
      if (v26 < v23)
      {
        if (*(_BYTE *)a1)
        {
          v24 = v26 - v23;
          v25 = *(float *)(a1 + 16);
LABEL_10:
          v23 = v23 + (float)(v24 * v25);
        }
        else
        {
          v23 = v23 * (float)(1.0 - *(float *)(a1 + 16));
        }
        *(float *)(a1 + 4) = v23;
      }
      v27 = v18 / *(float *)(a1 + 36);
      if (v27 < 1.0)
      {
        v23 = v27 * v23;
        *(float *)(a1 + 4) = v23;
      }
      *(float *)(a1 + 36) = v18;
      if (v23 < 1.0)
      {
        *(_DWORD *)(a1 + 4) = 1065353216;
        v23 = 1.0;
      }
      v28 = *(float *)(a1 + 8);
      v29 = (float)(3.0 - (float)(v28 * v23)) * 0.5;
      if (v29 < 0.01)
        v29 = 0.01;
      v30 = v28 * v29;
      *(float *)(a1 + 8) = v30;
      *(float *)(a7 + 4 * v12) = v18 * v30;
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 8);
      v12 = v17;
      if (a4 <= v17++)
      {
        *(float *)(a1 + 56) = v21;
        return;
      }
    }
    v24 = v22 - v23;
    v25 = *(float *)(a1 + 28);
    goto LABEL_10;
  }
}

void DspLib::MozartCompressor::Limiter::setParameters(uint64_t a1, uint64_t a2, float a3)
{
  float v6;
  float v7;

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 108);
  *(float *)(a1 + 48) = DspLib::dB2Amp((DspLib *)a1, *(float *)(a2 + 140));
  *(_BYTE *)a1 = *(float *)(a2 + 148) != 0.0;
  v6 = expf(-1.0 / (float)((float)((float)(*(float *)(a2 + 40) / 2.2) * a3) / 1000.0));
  *(float *)(a1 + 12) = v6;
  *(float *)(a1 + 16) = 1.0 - v6;
  v7 = expf(-1.0 / (float)((float)((float)(*(float *)(a2 + 56) / 2.2) * a3) / 1000.0));
  *(float *)(a1 + 24) = v7;
  *(float *)(a1 + 28) = 1.0 - v7;
}

double DspLib::MozartCompressor::Algorithm::Algorithm(DspLib::MozartCompressor::Algorithm *this)
{
  uint64_t v1;
  double result;

  v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::MozartCompressor::Parameters::kDefault, 0x35uLL, (uint64_t)&DspLib::MozartCompressor::Parameters::kMinimum, 53, (uint64_t)&DspLib::MozartCompressor::Parameters::kMaximum, 53);
  *(_QWORD *)v1 = &off_1E69C4938;
  *(_BYTE *)(v1 + 288) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_DWORD *)(v1 + 392) = 1;
  *(_QWORD *)(v1 + 472) = 0;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_DWORD *)(v1 + 464) = 0;
  *(_QWORD *)(v1 + 496) = 1;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_BYTE *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_QWORD *)(v1 + 552) = 0x43C8000000000000;
  *(_QWORD *)(v1 + 656) = 0;
  *(_DWORD *)(v1 + 664) = 0;
  *(_QWORD *)(v1 + 688) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_DWORD *)(v1 + 592) = 0;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_DWORD *)(v1 + 648) = 0;
  *(_DWORD *)(v1 + 696) = 730643660;
  *(_BYTE *)(v1 + 700) = 0;
  *(_BYTE *)(v1 + 720) = 0;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_QWORD *)(v1 + 744) = 0x43C8000000000000;
  *(_QWORD *)(v1 + 848) = 0;
  *(_DWORD *)(v1 + 856) = 0;
  *(_QWORD *)(v1 + 880) = 0;
  *(_OWORD *)(v1 + 864) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_DWORD *)(v1 + 840) = 0;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_DWORD *)(v1 + 888) = 730643660;
  *(_BYTE *)(v1 + 892) = 0;
  *(_QWORD *)(v1 + 1208) = 0;
  *(_OWORD *)(v1 + 1192) = 0u;
  *(_DWORD *)(v1 + 1228) = 0;
  return result;
}

uint64_t DspLib::MozartCompressor::Algorithm::initialize(DspLib::MozartCompressor::Algorithm *this, int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((_DWORD)v4)
  {
    std::vector<std::vector<float>>::resize((uint64_t *)this + 28, *((unsigned int *)this + 3));
    v5 = *((_QWORD *)this + 28);
    v6 = *((_QWORD *)this + 29);
    while (v5 != v6)
    {
      std::vector<float>::resize(v5, *((unsigned int *)this + 8));
      v5 += 24;
    }
    std::vector<std::vector<float>>::resize((uint64_t *)this + 31, *((unsigned int *)this + 3));
    v7 = *((_QWORD *)this + 31);
    v8 = *((_QWORD *)this + 32);
    while (v7 != v8)
    {
      std::vector<float>::resize(v7, *((unsigned int *)this + 8));
      v7 += 24;
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 288), *((unsigned int *)this + 3), *((double *)this + 3), 3uLL);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 55, 1uLL);
    DspLib::RMS::initialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 512), *((_DWORD *)this + 3), *((double *)this + 3));
    DspLib::RMS::initialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 704), *((_DWORD *)this + 3), *((double *)this + 3));
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 149, *((unsigned int *)this + 3));
    *((_BYTE *)this + 8) = 1;
    *((_DWORD *)this + 126) = 1;
    *((_DWORD *)this + 297) = 0;
    DspLib::RMS::setExcludeChannelMask((uint64_t)this + 512, *((_DWORD *)this + 307));
    DspLib::RMS::setExcludeChannelMask((uint64_t)this + 704, *((_DWORD *)this + 307));
    (*(void (**)(DspLib::MozartCompressor::Algorithm *))(*(_QWORD *)this + 144))(this);
    (*(void (**)(DspLib::MozartCompressor::Algorithm *))(*(_QWORD *)this + 152))(this);
  }
  return v4;
}

uint64_t DspLib::MozartCompressor::Algorithm::setExcludeChannelMask(DspLib::MozartCompressor::Algorithm *this, unsigned int a2)
{
  *((_DWORD *)this + 307) = a2;
  DspLib::RMS::setExcludeChannelMask((uint64_t)this + 512, a2);
  return DspLib::RMS::setExcludeChannelMask((uint64_t)this + 704, *((_DWORD *)this + 307));
}

void DspLib::MozartCompressor::Algorithm::reset(DspLib::MozartCompressor::Algorithm *this)
{
  float v2;
  DspLib *v3;
  float v4;
  float v5;
  DspLib::CircularDelay *v11;
  DspLib::CircularDelay *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  if (*((_BYTE *)this + 8))
  {
    v2 = DspLib::dB2Amp(this, *(float *)(*((_QWORD *)this + 6) + 80));
    v4 = DspLib::dB2Amp(v3, *(float *)(*((_QWORD *)this + 6) + 32));
    *(_QWORD *)((char *)this + 900) = 0;
    v5 = v2 * v4;
    *((float *)this + 279) = v5;
    *((float *)this + 278) = v5;
    *((float *)this + 275) = v5;
    *((_DWORD *)this + 229) = 814313567;
    *((_DWORD *)this + 232) = 814313567;
    *((_DWORD *)this + 235) = 814313567;
    *((_DWORD *)this + 241) = 0;
    *((_BYTE *)this + 968) = 0;
    *(_QWORD *)((char *)this + 972) = 0;
    *((_BYTE *)this + 984) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)this + 141) = _D0;
    *((_DWORD *)this + 290) = 1065353216;
    *((_QWORD *)this + 147) = 1065353216;
    *((_DWORD *)this + 296) = 1065353216;
    *((_QWORD *)this + 152) = _D0;
    *((_DWORD *)this + 306) = 0;
    DspLib::MozartCompressor::Algorithm::clearAudioBuffers(this);
    DspLib::RMS::reset((DspLib::MozartCompressor::Algorithm *)((char *)this + 512));
    DspLib::RMS::reset((DspLib::MozartCompressor::Algorithm *)((char *)this + 704));
    v11 = (DspLib::CircularDelay *)*((_QWORD *)this + 149);
    v12 = (DspLib::CircularDelay *)*((_QWORD *)this + 150);
    while (v11 != v12)
    {
      DspLib::CircularDelay::reset(v11);
      v11 = (DspLib::CircularDelay *)((char *)v11 + 32);
    }
    *((_DWORD *)this + 125) = 0;
    v13 = *((_QWORD *)this + 55);
    v14 = *((_QWORD *)this + 56);
    while (v13 != v14)
    {
      v15 = *(_QWORD *)(v13 + 8);
      if (*(_QWORD *)v13 != v15)
        bzero(*(void **)v13, (v15 - *(_QWORD *)v13) & 0xFFFFFFFFFFFFFFFCLL);
      v13 += 24;
    }
    *((_DWORD *)this + 116) = 0;
    DspLib::Biquad::SetupWrapper::reset((DspLib::MozartCompressor::Algorithm *)((char *)this + 336));
  }
  else
  {
    v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MozartCompressor/dsp/DspLibMozartCompressor.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v16, 373);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MozartCompressor::Algorithm::clearAudioBuffers(DspLib::MozartCompressor::Algorithm *this)
{
  DspLib::CircularDelay *v1;
  DspLib::CircularDelay *v2;
  char *v3;

  if (*((_BYTE *)this + 8))
  {
    v1 = (DspLib::CircularDelay *)*((_QWORD *)this + 149);
    v2 = (DspLib::CircularDelay *)*((_QWORD *)this + 150);
    while (v1 != v2)
    {
      DspLib::CircularDelay::reset(v1);
      v1 = (DspLib::CircularDelay *)((char *)v1 + 32);
    }
  }
  else
  {
    v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MozartCompressor/dsp/DspLibMozartCompressor.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 414);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MozartCompressor::Algorithm::uninitialize(DspLib::MozartCompressor::Algorithm *this)
{
  *((_BYTE *)this + 8) = 0;
  DspLib::RMS::uninitialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 512));
  DspLib::RMS::uninitialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 704));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 55, 0);
  *((_DWORD *)this + 125) = 0;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::MozartCompressor::Algorithm *)((char *)this + 288));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 149);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 28);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 31);
}

void DspLib::MozartCompressor::Algorithm::setParameters(uint64_t a1, const void *a2, uint64_t a3, __n128 a4)
{
  DspLib *v5;
  uint64_t v6;
  int v7;
  DspLib *v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  DspLib::CircularDelay *v20;
  DspLib::CircularDelay *v21;
  uint64_t v22;
  char *v23;
  int v24;
  vDSP_Length v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  DspLib *v36;
  DspLib *v37;
  DspLib *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  DspLib *v43;
  DspLib *v44;
  float v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  v5 = (DspLib *)DspLib::AlgorithmBase::setParameters((_QWORD *)a1, a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (*(float *)(v6 + 64) <= 0.5 || *(float *)(v6 + 72) >= 0.5)
    {
      *(_BYTE *)(a1 + 1088) = 0;
      *(_QWORD *)(a1 + 988) = 0;
      *(float *)(a1 + 272) = DspLib::dB2Amp(v5, *(float *)(v6 + 36));
      v9 = 1.0;
    }
    else
    {
      *(_BYTE *)(a1 + 1088) = 1;
      v7 = *(_DWORD *)(v6 + 32);
      *(_DWORD *)(a1 + 988) = 1065353216;
      *(_DWORD *)(a1 + 992) = v7;
      *(float *)(a1 + 272) = DspLib::dB2Amp(v5, *(float *)v6);
      v9 = DspLib::dB2Amp(v8, *(float *)(*(_QWORD *)(a1 + 48) + 184));
    }
    *(float *)(a1 + 276) = v9;
    v10 = *(_QWORD *)(a1 + 48);
    if (*(float *)(v10 + 68) <= 0.5 || (v11 = *(float *)(v10 + 72), v11 >= 0.5))
    {
      *(_BYTE *)(a1 + 1120) = 0;
      *(_DWORD *)(a1 + 1176) = 1065353216;
      v11 = *(float *)(v10 + 72);
    }
    else
    {
      *(_BYTE *)(a1 + 1120) = 1;
    }
    *(_BYTE *)(a1 + 216) = v11 < 0.5;
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 288), *(unsigned int *)(a1 + 12), *(double *)(a1 + 24), 3uLL);
    v12 = *(_QWORD *)(a1 + 48);
    *(_BYTE *)(a1 + 280) = (float)(*(float *)(v12 + 112) + 0.5) != 0;
    v14 = *(unsigned int *)(v12 + 188);
    v13 = (double *)*(unsigned int *)(v12 + 192);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 288, ((unint64_t)*(unsigned int *)(v12 + 156) << 32) | 1, (double *)0x3F11EB8500000000, 0, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 288, 0x44D200000000000CuLL, (double *)0x40800000, 1, 0x41uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 288, (v14 << 32) | 0xC, v13, 2, 0x41uLL);
    v16 = *(float **)(a1 + 48);
    v17 = vcvtas_u32_f32(v16[44]);
    if (v17 <= 1)
      v17 = 1;
    v18 = v17 + vcvtad_u64_f64(*(double *)(a1 + 24) * v16[15] / 1000.0) - 1;
    if (v18 <= 1)
      v19 = 1;
    else
      v19 = v18;
    if (*(_DWORD *)(a1 + 1188) != (_DWORD)v19 || *(_DWORD *)(a1 + 504) != v17)
    {
      *(_DWORD *)(a1 + 1188) = v19;
      *(_DWORD *)(a1 + 504) = v17;
      v20 = *(DspLib::CircularDelay **)(a1 + 1192);
      v21 = *(DspLib::CircularDelay **)(a1 + 1200);
      if (v20 == v21)
        goto LABEL_20;
      do
      {
        DspLib::CircularDelay::setLength(v20, v19);
        v20 = (DspLib::CircularDelay *)((char *)v20 + 32);
      }
      while (v20 != v21);
      v17 = *(_DWORD *)(a1 + 504);
      if (v17)
      {
LABEL_20:
        *(_DWORD *)(a1 + 496) = v17;
        *(_DWORD *)(a1 + 500) = 0;
      }
      MEMORY[0x1E0C80A78](v15);
      v23 = (char *)v46 - v22;
      v24 = *(_DWORD *)(a1 + 504);
      v25 = *(unsigned int *)(a1 + 1188);
      v26 = v25 + (2 * v24) - 2;
      DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs((float *)((char *)v46 - v22), v26, v24, v25);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 392), *(_DWORD *)(a1 + 504), *(_DWORD *)(a1 + 32) / *(_DWORD *)(a1 + 504) + 1);
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 392), (uint64_t)v23, v26);
      v16 = *(float **)(a1 + 48);
    }
    v27 = v16[1];
    if (v16[41] < v27)
      v16[41] = v27;
    DspLib::MozartCompressor::Curve::setParameters(a1 + 988, (uint64_t)v16);
    v28 = *(double *)(a1 + 24);
    v29 = v28 / (float)*(unsigned int *)(a1 + 504);
    v30 = *(_QWORD *)(a1 + 48);
    v31 = *(float *)(v30 + 20) / 2.2;
    v32 = expf(-1.0 / (float)((float)(v29 * (float)(*(float *)(v30 + 16) / 2.2)) / 1000.0));
    *(float *)(a1 + 1104) = v32;
    *(float *)(a1 + 1108) = 1.0 - v32;
    v33 = expf(-1.0 / (float)((float)(v29 * v31) / 1000.0));
    *(float *)(a1 + 1092) = v33;
    *(float *)(a1 + 1096) = 1.0 - v33;
    DspLib::MozartCompressor::Limiter::setParameters(a1 + 1124, v30, v29);
    LODWORD(v34) = *(_DWORD *)(a1 + 504);
    DspLib::RMS::initialize((DspLib::RMS *)(a1 + 704), *(_DWORD *)(a1 + 12), *(double *)(a1 + 24) / (double)v34);
    DspLib::RMS::setParameters(a1 + 704, 1, *(float *)(*(_QWORD *)(a1 + 48) + 84));
    v35 = *(_QWORD *)(a1 + 48);
    *(_BYTE *)(a1 + 896) = *(float *)(v35 + 116) != 0.0;
    *(float *)(a1 + 952) = DspLib::dB2Power(v36, *(float *)(v35 + 132));
    *(float *)(a1 + 944) = DspLib::dB2Power(v37, *(float *)(*(_QWORD *)(a1 + 48) + 136));
    *(float *)(a1 + 948) = DspLib::dB2Power(v38, -*(float *)(*(_QWORD *)(a1 + 48) + 136));
    v39 = *(float **)(a1 + 48);
    if (v39[3] < 0.5)
      *(_BYTE *)(a1 + 896) = 0;
    v40 = expf(-1.0 / (float)((float)(v29 * v39[31]) / 1000.0));
    *(float *)(a1 + 908) = v40;
    *(float *)(a1 + 912) = 1.0 - v40;
    v41 = expf(-1.0 / (float)((float)(v29 * v39[36]) / 1000.0));
    *(float *)(a1 + 924) = 1.0 - v41;
    *(float *)(a1 + 920) = (float)(v41 * v41) * (float)(v41 * v41);
    v42 = expf(-1.0 / (float)((float)(v29 * v39[32]) / 1000.0));
    *(float *)(a1 + 932) = v42;
    *(float *)(a1 + 936) = 1.0 - v42;
    *(_DWORD *)(a1 + 980) = (float)((float)((float)(v39[40] / 1000.0) * v29) + 0.5);
    *(float *)(a1 + 956) = DspLib::dB2Power(v43, v39[42] * 0.5);
    *(float *)(a1 + 960) = DspLib::dB2Power(v44, *(float *)(*(_QWORD *)(a1 + 48) + 168) * -0.5);
    DspLib::RMS::initialize((DspLib::RMS *)(a1 + 512), *(_DWORD *)(a1 + 12), (double)v29);
    DspLib::RMS::setParameters(a1 + 512, *(float *)(*(_QWORD *)(a1 + 48) + 120) > 0.5, *(float *)(*(_QWORD *)(a1 + 48) + 24));
    if (*(float *)(*(_QWORD *)(a1 + 48) + 52) > 0.5)
    {
      v45 = *(float *)(a1 + 1116) * *(float *)(a1 + 1176);
      *(float *)(a1 + 1216) = v45;
      *(float *)(a1 + 1220) = v45;
    }
  }
}

