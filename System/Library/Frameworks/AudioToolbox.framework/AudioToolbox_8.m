void aec_v5::get_EchoEst_Err(DSPComplex *__C, float *a2, float *a3, float *a4, const float *a5, uint64_t a6)
{
  DSPSplitComplex v10;

  v10.realp = a3;
  v10.imagp = a4;
  vDSP_ztoc(&v10, 1, __C, 2, *(int *)(a6 + 36));
  vDSP_vsub((const float *)__C, 1, a5, 1, a2, 1, *(int *)(a6 + 28));
}

void aec_v5::run_aec(float **a1, _DWORD *a2, float *a3, _DWORD *a4, _DWORD *a5, const float *a6, void *a7, float *a8, _DWORD *a9, int a10, _DWORD *a11, _DWORD *a12)
{
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float *v17;
  DSPComplex *v18;
  vDSP_Length v19;
  unsigned int v20;
  float *v21;
  float v22;
  int v23;
  float *v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  vDSP_Length v29;
  float v30;
  vDSP_Length v31;
  float *v32;
  void *v33;
  float *v34;
  const void *v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  const float *v47;
  float v48;
  int *v49;
  uint64_t v50;
  float v51;
  float *v52;
  int v53;
  int v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  int v75;
  size_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  int v80;
  uint64_t v81;
  char *v82;
  int v83;
  char *v84;
  float *v85;
  int v87;
  char *v88;
  char *v89;
  float *v90;
  char v91;
  int v92;
  char *v93;
  char *v94;
  char *v95;
  float *v96;
  char v97;
  char *v98;
  char *v99;
  float *v100;
  char v101;
  int v102;
  _BOOL4 v103;
  const BOOL *v104;
  vDSP_Length v105;
  int v106;
  char *v107;
  uint64_t v108;
  BOOL v109;
  char *v110;
  vDSP_Length v111;
  const BOOL *v112;
  int *v113;
  float *v114;
  vDSP_Length v115;
  float *v116;
  char **v117;
  vDSP_Length v118;
  vDSP_Length v119;
  int v120;
  char *v121;
  char *v122;
  float *v123;
  char *v124;
  char *v125;
  int v126;
  char *v127;
  float *v128;
  float *v129;
  float *v130;
  int v131;
  float *v132;
  float *v133;
  float v134;
  MultiRadixRealFFT *v135;
  float v136;
  uint64_t v137;
  int v138;
  int *v139;
  vDSP_Length v140;
  float v141;
  uint64_t v142;
  float *v143;
  float *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  char **v148;
  int v149;
  int v150;
  int v151;
  float v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  float v156;
  int v157;
  uint64_t v158;
  float v159;
  int v160;
  int v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  void *v167;
  DSPSplitComplex *v168;
  char *v169;
  float *v170;
  DSPComplex *v171;
  const float *v172;
  float *v173;
  char *v174;
  size_t v175;
  float *v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  float v180;
  lmsfilt_v5 *v181;
  float *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  const float *v187;
  int v188;
  uint64_t v189;
  float v190;
  uint64_t v191;
  int v192;
  int v193;
  float v194;
  uint64_t v195;
  int v196;
  float v197;
  float *v198;
  int v199;
  float *v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  DSPComplex *v207;
  const float *v208;
  vDSP_Length v209;
  DSPSplitComplex v210;
  float *v211;
  int v212;
  int v213;
  float v214;
  int v215;
  float *v216;
  int v217;
  float *v218;
  float *v219;
  float v220;
  double v221;
  float v222;
  float v223;
  float v224;
  int *v225;
  float *v226;
  int v227;
  float v228;
  int v229;
  float v230;
  uint64_t v231;
  float v232;
  float v233;
  float v234;
  int v235;
  int v236;
  float v237;
  int v238;
  int v239;
  int v240;
  float v241;
  float v242;
  int v243;
  int v244;
  float *v245;
  const float *v246;
  vDSP_Length v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  int v253;
  float v254;
  uint64_t v255;
  uint64_t v256;
  float v257;
  int v258;
  float v259;
  float v260;
  float v261;
  __int128 v262;
  __int128 v263;
  const void **v264;
  int v265;
  int v266;
  int v267;
  int v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  uint64_t v274;
  float v275;
  unsigned int v276;
  float v277;
  float v278;
  int v279;
  vDSP_Length v280;
  uint64_t v281;
  _DWORD *v282;
  _DWORD *v283;
  _DWORD *v284;
  int v285;
  float v286;
  float v287;
  float v288;
  double v289;
  float v290;
  double v291;
  double v292;
  double v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  int v300;
  float *v301;
  float *v302;
  _BOOL4 *v303;
  float *v304;
  _DWORD *v305;
  _DWORD *v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  _DWORD *v313;
  _DWORD *v314;
  _BOOL4 *v315;
  float *v316;
  float *v317;
  float *v318;
  float v320;
  _BOOL4 v321;
  _BOOL4 v322;
  _BOOL4 *v323;
  int v324;
  int v325;
  uint64_t v326;
  int v327;
  unsigned int v328;
  BOOL v329;
  BOOL v330;
  size_t v331;
  int v332;
  size_t v333;
  size_t v334;
  size_t v335;
  size_t v336;
  int *v337;
  int v338;
  int v339;
  int *v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  int v350;
  float v351;
  BOOL v352;
  BOOL v353;
  int v355;
  size_t v356;
  size_t v357;
  int v358;
  int v359;
  int v360;
  int *v361;
  uint64_t v362;
  int v363;
  DSPComplex *v364;
  DSPComplex *v365;
  DSPComplex *v366;
  uint64_t v367;
  int v368;
  DSPSplitComplex v369;
  vDSP_Length v370;
  float *v371;
  uint64_t v372;
  float *v373;
  float *imagp;
  float *realp;
  uint64_t v376;
  float *v377;
  float *v378;
  float *v379;
  float *v380;
  float *v381;
  float *v382;
  float *v383;
  float v384;
  float v385;
  vDSP_Length v386;
  int v387;
  float v388;
  float v389;
  uint64_t v390;
  int v391;
  vDSP_Length v392;
  const float *v393;
  float *v394;
  float *v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v407;
  float v408;
  float v409;
  int v410;
  char **v411;
  float *v412;
  float *v413;
  float *v414;
  float v415;
  _BOOL4 v416;
  _BOOL4 v417;
  int v418;
  float *v419;
  uint64_t v420;
  uint64_t v421;
  float v422;
  float *v423;
  vDSP_Length v424;
  char *v425;
  int v426;
  uint64_t v427;
  float v428;
  uint64_t v429;
  int v430;
  float v431;
  uint64_t j;
  float v433;
  int v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  vDSP_Length v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  vDSP_Length v454;
  uint64_t v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  float v459;
  float v460;
  size_t v461;
  float *v462;
  char *v463;
  size_t v464;
  uint64_t v465;
  uint64_t v466;
  float v467;
  float v468;
  float v469;
  float v470;
  float *v471;
  char *v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  vDSP_Length v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  float *v481;
  uint64_t v482;
  uint64_t i;
  BOOL v484;
  uint64_t v485;
  float *v486;
  float v487;
  float *v488;
  vDSP_Length v489;
  float v490;
  float v491;
  int v492;
  float *v493;
  int v494;
  signed int v495;
  unsigned int v496;
  int *v497;
  float v498;
  float *v499;
  __int128 v500;
  __int128 v501;
  uint64_t v502;
  float v503;
  float v504;
  float *v505;
  float v506;
  float v507;
  float v508;
  const float **v509;
  vDSP_Length v510;
  DSPSplitComplex *v511;
  DSPSplitComplex *v512;
  float **v513;
  DSPComplex *v514;
  DSPComplex *v515;
  float *v516;
  float *v517;
  DSPComplex *v518;
  float *v519;
  float *v520;
  float *v521;
  const float *v522;
  DSPComplex *v523;
  float *v524;
  const float *v525;
  float *v526;
  int v527;
  unsigned int v528;
  unsigned int v529;
  signed int v530;
  int v531;
  int v532;
  unsigned int v533;
  int v534;
  int v535;
  float *v536;
  uint64_t v537;
  size_t v538;
  int v539;
  float v540;
  float *v541;
  float v542;
  char v543;
  vDSP_Length v544;
  int v545;
  float v546;
  double v547;
  float v548;
  float v549;
  float v550;
  float v552;
  size_t v553;
  float v554;
  char v555;
  float v556;
  float *v557;
  float *v558;
  float *v559;
  float *v560;
  float *v561;
  float *v562;
  int *v563;
  int *v564;
  uint64_t v565;
  uint64_t v566;
  const BOOL *v567;
  const BOOL *v568;
  DSPSplitComplex *v569;
  DSPSplitComplex *v570;
  const unsigned int *v571;
  const unsigned int *v572;
  _BOOL8 v573;
  BOOL v574;
  float *v577;
  float *v578;
  float *v579;
  float *v580;
  DSPComplex *v581;
  int v582;
  int v583;
  int v584;
  float *v585;
  void *__dst;
  char *__dsta;
  _BOOL4 v588;
  float v589;
  float *v590;
  uint64_t v591;
  float v592;
  unsigned int v593;
  float *v594;
  float **v598;
  DSPSplitComplex *v599;
  char *v600;
  DSPSplitComplex *v601;
  lmsfilt_v5 *v602;
  float *v603;
  DSPComplex *v605;
  float *v606;
  vDSP_Length v607;
  DSPComplex *v608;
  float *v609;
  float *v610;
  uint64_t v611;
  float *v612;
  float *v613;
  uint64_t v614;
  int v615;
  _OWORD *v616;
  int v617;
  uint64_t v618;
  float *v619;
  uint64_t v620;
  char *v621;
  uint64_t v622;
  uint64_t v623;
  float *__Ba;
  float __Bb;
  float *__Bc;
  size_t __n;
  int __na;
  float __nb;
  float *__nc;
  size_t __nd;
  float __ne;
  size_t v634;
  float *v635;
  float v636;
  size_t v637[2];
  float *v638;
  size_t v639[2];
  uint64_t v640;
  int v641;
  size_t __len;
  float *__lena;
  float __lenb;
  float *__lenc;
  int __lend;
  size_t __lene[2];
  uint64_t v648;
  float *v649;
  float *v650;
  float *v651;
  uint64_t __D;
  float *__Da;
  float *__Db[2];
  float *__D_8;
  vDSP_Length v656;
  uint64_t v657;
  vDSP_Length v658[2];
  vDSP_Length v659[2];
  float *v660;
  int v661;
  float v662;
  int v663;
  float *v664;
  int v665;
  float *v666;
  uint64_t v667;
  vDSP_Length __Aa;
  float *__Ab[2];
  float *__Ac[2];
  uint64_t __Ad;
  float *__Ae;
  float **__Af;
  vDSP_Length __N;
  vDSP_Length __Nh;
  uint64_t __Na;
  vDSP_Length __Nb[2];
  vDSP_Length __Nc[2];
  uint64_t __Nd;
  unsigned int __Ne;
  char *__Nf;
  DSPSplitComplex *__Ng;
  const DSPComplex *v684;
  vDSP_Length v685;
  vDSP_Length v686;
  vDSP_Length v687;
  vDSP_Length v688;
  DSPSplitComplex *v689;
  float v690;
  float *v691;
  char **v692;
  unsigned __int8 v693;
  DSPSplitComplex v694;
  uint64_t v695;
  float v696;
  float v697;
  DSPSplitComplex v698;
  DSPSplitComplex v699;
  DSPSplitComplex __Z;
  DSPSplitComplex __C;

  v13 = *a1;
  v12 = a1[1];
  v15 = (uint64_t)a1[6];
  v14 = a1[7];
  v16 = a1[8];
  v640 = (uint64_t)a1[9];
  v17 = a1[2];
  v590 = a1[3];
  v609 = (float *)*((_QWORD *)v14 + 1);
  v610 = *(float **)v14;
  v612 = (float *)*((_QWORD *)v14 + 9);
  v613 = (float *)*((_QWORD *)v14 + 8);
  v605 = (DSPComplex *)*((_QWORD *)v14 + 10);
  v594 = (float *)*((_QWORD *)v14 + 12);
  v577 = a1[4];
  v578 = (float *)*((_QWORD *)v14 + 13);
  v579 = (float *)*((_QWORD *)v14 + 15);
  v18 = (DSPComplex *)*((_QWORD *)v14 + 16);
  v580 = (float *)*((_QWORD *)v14 + 17);
  v581 = (DSPComplex *)*((_QWORD *)v14 + 11);
  v19 = *((int *)*a1 + 4);
  v614 = *((int *)*a1 + 34);
  v20 = *((_DWORD *)*a1 + 7);
  v618 = *((int *)*a1 + 9);
  v21 = (float *)*((unsigned int *)*a1 + 32);
  *(_DWORD *)(v15 + 604) = 0;
  v22 = *(float *)(v15 + 568);
  v607 = v19;
  v608 = v18;
  v589 = (float)(int)v19;
  v606 = (float *)(v15 + 28);
  if (v22 < 100.0 && (float)(*v606 / v589) > 0.00000001)
    *(float *)(v15 + 568) = v22 + v13[5];
  v23 = *((_DWORD *)v13 + 40);
  v692 = (char **)v12;
  v667 = v15;
  v650 = v17;
  v651 = v14;
  v593 = v20;
  v619 = v21;
  v603 = v16;
  if (v23 < 1)
  {
    v55 = (float *)a6;
    goto LABEL_86;
  }
  if ((int)v21 >= 1)
  {
    v24 = 0;
    v25 = (char *)*((_QWORD *)v12 + 15);
    v26 = (char *)*((_QWORD *)v12 + 18);
    do
    {
      if (*((_BYTE *)v24 + (_QWORD)v25))
      {
        *(_DWORD *)&v26[4 * (_QWORD)v24] = 0;
        *((_BYTE *)v24 + *((_QWORD *)v12 + 16)) = 1;
      }
      else
      {
        v27 = *(_DWORD *)&v26[4 * (_QWORD)v24];
        v28 = *((_DWORD *)v13 + 11) - 1;
        if (v27 == v28)
          *((_BYTE *)v24 + *((_QWORD *)v12 + 16)) = 0;
        if (v27 < v28)
          *(_DWORD *)&v26[4 * (_QWORD)v24] = v27 + 1;
      }
      v24 = (float *)((char *)v24 + 1);
    }
    while (v21 != v24);
  }
  if (*((_BYTE *)v13 + 178))
  {
    v29 = *((int *)v13 + 4);
    LODWORD(__C.realp) = 0;
    vDSP_svesq(a6, 1, (float *)&__C, v29);
    v30 = (float)(*(float *)&__C.realp / (float)(int)v29) + 1.0e-20;
    *(float *)&__C.realp = log10f(v30) * 10.0;
    v31 = *((int *)v17 + 9);
    v32 = (float *)*((_QWORD *)v17 + 12);
    v33 = (void *)*((_QWORD *)v17 + 13);
    v34 = (float *)*((_QWORD *)v17 + 14);
    LODWORD(__Z.realp) = 0;
    LODWORD(v699.realp) = 0;
    LODWORD(v698.realp) = 0;
    v35 = (const void *)*((_QWORD *)v17 + 6);
    v36 = v17;
    v37 = 4 * v31;
    memcpy(v33, v35, 4 * v31);
    vDSP_vsub(v32, 1, (const float *)v33, 1, v34, 1, v31);
    vDSP_svesq(v32, 1, (float *)&__Z, v31);
    vDSP_svesq((const float *)v33, 1, (float *)&v699, v31);
    vDSP_svesq(v34, 1, (float *)&v698, v31);
    v38 = *(float *)&v698.realp;
    v39 = *(float *)&v699.realp;
    v40 = *(float *)&__Z.realp;
    memcpy(v32, v33, 4 * v31);
    LODWORD(v694.realp) = 0;
    v41 = (float *)*((_QWORD *)v36 + 15);
    v42 = *((_DWORD *)v13 + 32);
    if (v42 < 1)
    {
      v54 = 0;
      v51 = 0.0;
      v15 = v667;
    }
    else
    {
      v43 = 0;
      v44 = 0;
      v45 = *((_DWORD *)v13 + 11);
      do
      {
        if (v45 < 1)
        {
          v48 = 0.0;
        }
        else
        {
          v46 = 0;
          v47 = (const float *)(*((_QWORD *)v650 + 6) + v43);
          v48 = 0.0;
          do
          {
            vDSP_svesq(v47, 1, (float *)&v694, v29);
            if (*(float *)&v694.realp > v48)
              v48 = *(float *)&v694.realp;
            ++v46;
            v45 = *((_DWORD *)v13 + 11);
            v47 += v29;
          }
          while (v46 < v45);
          v42 = *((_DWORD *)v13 + 32);
        }
        v41[v44++] = v48;
        v43 += v37;
      }
      while (v44 < v42);
      v15 = v667;
      if (v42 >= 1)
      {
        v49 = (int *)*((_QWORD *)v12 + 20);
        v50 = v42;
        v51 = 0.0;
        v52 = v41;
        v21 = v619;
        do
        {
          v53 = *v49++;
          if (v53 && *v52 > v51)
            v51 = *v52;
          ++v52;
          --v50;
        }
        while (v50);
        v54 = 1;
LABEL_36:
        v56 = *v41 / (v51 + 1.0e-20) + 1.0e-20;
        v57 = log10f(v56);
        v14 = v651;
        if (*(_DWORD *)(v15 + 148) != 1)
        {
LABEL_75:
          v16 = v603;
          goto LABEL_76;
        }
        v58 = v57;
        v59 = v38 / (v40 * 0.8 + v39 * 0.2 + 1.0e-20);
        v690 = v13[48];
        v60 = *((_DWORD *)v13 + 49);
        v62 = v13[45];
        v61 = v13[46];
        v63 = *(float *)(v15 + 140) + 1.0e-20;
        v64 = log10f(v63) * 10.0;
        v65 = v13[47];
        v66 = *(float *)(v15 + 24) / (*(float *)(v15 + 28) + 1.0e-20) + 1.0e-20;
        v67 = log10f(v66) * 10.0;
        if (*(float *)&__C.realp > -70.0 && v67 > v65 || v64 > v62 || v61 < v59)
        {
          if (v54)
          {
            v71 = 0;
            v72 = (char *)*((_QWORD *)v12 + 20);
            do
            {
              if (*(_DWORD *)&v72[4 * v71])
                *(_BYTE *)(*((_QWORD *)v12 + 16) + v71) = 0;
              ++v71;
            }
            while (v42 != v71);
            v73 = 0;
            *(_DWORD *)(v15 + 640) = -1110651699;
            do
            {
              if (*(_DWORD *)(*((_QWORD *)v12 + 20) + 4 * v73) == 1)
              {
                v74 = *((_DWORD *)v650 + 9);
                v75 = v74 * v73;
                v76 = 4 * v74;
                bzero((void *)(*(_QWORD *)v650 + 4 * v74 * (int)v73), v76);
                bzero((void *)(*((_QWORD *)v650 + 1) + 4 * v75), v76);
                bzero((void *)(*((_QWORD *)v650 + 2) + 4 * v75), v76);
                bzero((void *)(*((_QWORD *)v650 + 3) + 4 * v75), v76);
                bzero((void *)(*((_QWORD *)v650 + 6) + 4 * v75), v76);
                v42 = *((_DWORD *)v13 + 32);
              }
              ++v73;
            }
            while (v73 < v42);
            goto LABEL_75;
          }
        }
        else
        {
          if ((float)(v58 * 10.0) <= v690)
          {
            v80 = -1110651699;
            if (v54)
            {
              v81 = 0;
              v82 = (char *)*((_QWORD *)v12 + 20);
              do
              {
                if (*(_DWORD *)&v82[4 * v81])
                  *(_BYTE *)(*((_QWORD *)v12 + 16) + v81) = 1;
                ++v81;
              }
              while (v42 != v81);
            }
            goto LABEL_74;
          }
          if (v54)
          {
            v77 = 0;
            v78 = (char *)*((_QWORD *)v12 + 20);
            do
            {
              if (*(_DWORD *)&v78[4 * v77])
                *(_BYTE *)(*((_QWORD *)v12 + 16) + v77) = 1;
              ++v77;
            }
            while (v42 != v77);
          }
          v79 = *(_DWORD *)(v15 + 644);
          if (v79 == v60)
          {
            v80 = 1059481190;
LABEL_74:
            *(_DWORD *)(v15 + 640) = v80;
            goto LABEL_75;
          }
          *(_DWORD *)(v15 + 644) = v79 + 1;
        }
        v80 = -1110651699;
        goto LABEL_74;
      }
      v54 = 0;
      v51 = 0.0;
    }
    v21 = v619;
    goto LABEL_36;
  }
LABEL_76:
  v12[38] = 0.0;
  v55 = (float *)a6;
  if ((int)v21 < 1)
    goto LABEL_83;
  v83 = 0;
  v84 = (char *)*((_QWORD *)v12 + 16);
  v85 = v21;
  do
  {
    if (*v84++)
      *((_DWORD *)v12 + 38) = ++v83;
    v85 = (float *)((char *)v85 - 1);
  }
  while (v85);
  if (v83 < 1)
  {
LABEL_83:
    v87 = *((_DWORD *)v13 + 42);
    if (v87 <= 1)
      *((_DWORD *)v13 + 42) = v87 + 1;
  }
  else
  {
    v13[42] = 0.0;
  }
  v23 = *((_DWORD *)v13 + 40);
LABEL_86:
  if (v23 < 2)
  {
    v93 = (char *)*((_QWORD *)v12 + 17);
    *v93 = 1;
    v92 = (_DWORD)v21 - 1;
    if ((int)v21 > 1)
      goto LABEL_95;
  }
  else if (v23 == 2)
  {
    if ((int)v21 >= 1)
    {
      v94 = (char *)*((_QWORD *)v12 + 16);
      v95 = (char *)*((_QWORD *)v12 + 17);
      v96 = v21;
      do
      {
        v97 = *v94++;
        *v95++ = v97;
        v96 = (float *)((char *)v96 - 1);
      }
      while (v96);
    }
  }
  else if (v23 == 3)
  {
    if ((int)v21 >= 1)
    {
      v88 = (char *)*((_QWORD *)v12 + 16);
      v89 = (char *)*((_QWORD *)v12 + 17);
      v90 = v21;
      do
      {
        v91 = *v88++;
        *v89++ = v91;
        v90 = (float *)((char *)v90 - 1);
      }
      while (v90);
    }
    v92 = *((_DWORD *)v13 + 41);
    if (v92 >= 1)
    {
      v93 = (char *)*((_QWORD *)v12 + 17);
LABEL_95:
      bzero(v93 + 1, v92);
    }
  }
  else if ((int)v21 >= 1)
  {
    v98 = (char *)*((_QWORD *)v12 + 16);
    v99 = (char *)*((_QWORD *)v12 + 17);
    v100 = v21;
    do
    {
      v101 = *v98++;
      *v99++ = v101;
      v100 = (float *)((char *)v100 - 1);
    }
    while (v100);
  }
  v611 = v15 + 284;
  v102 = *((_DWORD *)v13 + 26);
  if (v102 < 1 || *((int *)v12 + 38) < 1)
  {
    v588 = 0;
  }
  else
  {
    v103 = v102 > 1 || *(float *)(v15 + 568) < (float)(*(float *)(v15 + 552) + 2.0);
    v588 = v103;
  }
  *(_BYTE *)v15 = a10 == 0;
  *(_DWORD *)(v15 + 516) = *(_DWORD *)(v15 + 40);
  *(_DWORD *)(v15 + 556) = *(_DWORD *)(v15 + 408);
  *(_QWORD *)(v15 + 532) = *(_QWORD *)(v15 + 524);
  *(_DWORD *)(v15 + 592) = 0;
  v691 = v13;
  if (*((_DWORD *)v13 + 25) || *(_DWORD *)(v15 + 148))
  {
    *(_DWORD *)(v15 + 376) = *(_DWORD *)(v15 + 4);
    memcpy(*((void **)v14 + 21), v55, 4 * *((int *)v13 + 4));
    v105 = v607;
    goto LABEL_113;
  }
  v160 = *((_DWORD *)v13 + 18);
  v161 = *((_DWORD *)v13 + 33);
  __na = v160;
  if (v161 < 1)
  {
    *((float *)&v571 + 1) = v13[33];
  }
  else
  {
    v162 = 0;
    v163 = v160 - v607;
    v685 = v160 - (int)v607;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)v12 + 17) + v162))
      {
        v164 = *(_QWORD *)(*((_QWORD *)v12 + 8) + 8 * v162);
        v165 = *(_QWORD *)(*((_QWORD *)v12 + 7) + 8 * v162);
        if (v160 != (_DWORD)v607)
        {
          v166 = 0;
          do
          {
            memcpy((void *)(v165 + 4 * v166), (const void *)(v165 + 4 * (v607 + v166)), (4 * v607));
            memcpy((void *)(v164 + 4 * v166), (const void *)(v164 + 4 * (v607 + v166)), (4 * v607));
            v166 += v607;
          }
          while (v166 < v163);
        }
        v167 = (void *)(v165 + 4 * v685);
        memcpy(v167, v55, (4 * v607));
        vDSP_vsq((const float *)v167, 1, (float *)(v164 + 4 * v685), 1, v607);
        v161 = *((_DWORD *)v13 + 33);
        v12 = (float *)v692;
        v160 = __na;
      }
      v55 += v607;
      ++v162;
    }
    while (v162 < v161);
    HIDWORD(v571) = v161;
    __na = *((_DWORD *)v13 + 18);
    v15 = v667;
    v14 = v651;
  }
  v621 = (char *)*((_QWORD *)v12 + 7);
  v600 = (char *)*((_QWORD *)v12 + 8);
  v602 = (lmsfilt_v5 *)*((_QWORD *)v12 + 17);
  v168 = (DSPSplitComplex *)*((int *)v13 + 4);
  v686 = *(int *)(v640 + 16);
  HIDWORD(v695) = *(_DWORD *)(v15 + 372);
  *(float *)&v695 = 1.0 - *((float *)&v695 + 1);
  __Nh = *(int *)(v15 + 356);
  v169 = (char *)*((_QWORD *)v14 + 22);
  v170 = (float *)*((_QWORD *)v14 + 30);
  v694 = *(DSPSplitComplex *)(v14 + 54);
  v171 = (DSPComplex *)*((_QWORD *)v14 + 24);
  v172 = (const float *)*((_QWORD *)v14 + 36);
  v173 = v14;
  v569 = v168;
  v174 = &v169[4 * (_QWORD)v168];
  v175 = 4 * (int)v168;
  memcpy(v169, v174, v175);
  v567 = (const BOOL *)v175;
  memcpy(v174, a7, v175);
  v176 = (float *)*((_QWORD *)v173 + 34);
  vDSP_vmul((const float *)v169, 1, v172, 1, (float *)v171, 1, v686);
  dft_v5::dftGenericAnalysis2ndHalf(v171, v694.realp, v694.imagp, v640, 0);
  vDSP_zvmags(&v694, 1, v170, 1, __Nh);
  vDSP_vsmul(v170, 1, (const float *)&v695, v170, 1, __Nh);
  v635 = v170;
  v573 = (_BOOL8)v176;
  vDSP_vsma(v176, 1, (const float *)&v695 + 1, v170, 1, v176, 1, __Nh);
  if ((uint64_t)v571 <= 0)
  {
    v227 = 0;
    v225 = *(int **)(v667 + 328);
    v230 = 0.0;
    v15 = v667;
    v14 = v651;
    v105 = v607;
    v16 = v603;
    v21 = v619;
    v55 = (float *)a6;
LABEL_195:
    v229 = __na;
    v234 = sqrtf(v230);
    if (v234 <= 1.0)
      v228 = v234;
    else
      v228 = 1.0;
    v225 += v227;
    goto LABEL_199;
  }
  v177 = 0;
  v178 = 0;
  __dst = (void *)*((_QWORD *)v651 + 23);
  v179 = HIDWORD(v571);
  v584 = __na - v686;
  v582 = (int)(float)((float)((float)(__na - (int)v686) / 3.0) + (float)((float)(__na - (int)v686) / 3.0));
  v180 = 0.0;
  v15 = v667;
  v14 = v651;
  v55 = (float *)a6;
  v181 = v602;
  do
  {
    if (*((_BYTE *)v181 + v177))
    {
      v661 = v178;
      v182 = v13;
      v183 = *(_QWORD *)&v621[8 * v177];
      v184 = *(_QWORD *)&v600[8 * v177];
      __Da = *(float **)(*((_QWORD *)v14 + 33) + 8 * v177);
      v657 = v177;
      v185 = *((_QWORD *)v14 + 35) + 16 * v177;
      __lena = *(float **)v185;
      v649 = *(float **)(v185 + 8);
      v186 = *((_DWORD *)v182 + 17);
      v187 = (const float *)*((_QWORD *)v14 + 22);
      v188 = v584 - v186;
      LODWORD(__C.realp) = 0;
      LODWORD(__Z.realp) = 0;
      LODWORD(v699.realp) = 0;
      if (v584 - v186 >= v582)
        v189 = (v188 - v582 + 1) & ~((v188 - v582 + 1) >> 31);
      else
        v189 = 0;
      __Na = v184;
      vDSP_sve((const float *)(v184 + 4 * v189), 1, (float *)&__Z, v686);
      vDSP_dotpr(v187, 1, v187, 1, (float *)&__C, v686);
      v190 = *(float *)&__Z.realp;
      v191 = (v188 + 2);
      if ((int)v189 >= (int)v191)
      {
        v196 = v189;
      }
      else
      {
        v192 = v189 + v686 - v186;
        v193 = v189 - v186;
        v194 = 0.0;
        v195 = v189;
        v196 = v189;
        do
        {
          vDSP_dotpr((const float *)(v183 + 4 * v195), 1, v187, 1, (float *)&v699, v686);
          if (v195 <= v189)
          {
            v197 = *(float *)&__Z.realp;
          }
          else
          {
            v197 = *(float *)&__Z.realp;
            if (v195 >= v186 && v186 >= 1)
            {
              v198 = (float *)(__Na + 4 * v193);
              v199 = v186;
              v200 = (float *)(__Na + 4 * v192);
              do
              {
                v201 = *v198++;
                v202 = v197 - v201;
                v203 = *v200++;
                v197 = v202 + v203;
                --v199;
              }
              while (v199);
              *(float *)&__Z.realp = v197;
            }
          }
          v204 = *(float *)&v699.realp / (sqrtf(v197 * *(float *)&__C.realp) + 2.2204e-16);
          v205 = fabsf(v204);
          if (v205 > v194)
          {
            v190 = v197;
            v194 = v205;
            v196 = v195;
          }
          v195 += v186;
          v192 += v186;
          v193 += v186;
        }
        while (v195 < v191);
      }
      memcpy(__dst, (const void *)(v183 + 4 * v196), 4 * v686);
      v15 = v667;
      *(float *)(v667 + 376) = v190;
      *(_DWORD *)(v667 + 324) = v196;
      __C.realp = __lena;
      __C.imagp = v649;
      v14 = v651;
      v207 = (DSPComplex *)*((_QWORD *)v651 + 23);
      v208 = (const float *)*((_QWORD *)v651 + 36);
      v209 = *(int *)(v640 + 16);
      v210 = *(DSPSplitComplex *)(v651 + 54);
      v699 = *(DSPSplitComplex *)(v651 + 50);
      __Z = v210;
      v211 = (float *)*((_QWORD *)v651 + 29);
      v698 = *(DSPSplitComplex *)(v651 + 62);
      v212 = *(_DWORD *)(v667 + 352);
      v213 = *(_DWORD *)(v667 + 356);
      v697 = *(float *)(v667 + 372);
      v696 = 1.0 - v697;
      vDSP_vmul((const float *)v207, 1, v208, 1, (float *)v207, 1, v209);
      dft_v5::dftGenericAnalysis2ndHalf(v207, v699.realp, v699.imagp, v640, 0);
      vDSP_zvmags(&v699, 1, v211, 1, v213);
      vDSP_zvcmul(&__Z, 1, &v699, 1, &v698, 1, v213);
      vDSP_vsmul(v211, 1, &v696, v211, 1, v213);
      vDSP_vsma(__Da, 1, &v697, v211, 1, __Da, 1, v213);
      vDSP_vsmul(v698.realp, 1, &v696, v698.realp, 1, v213);
      vDSP_vsmul(v698.imagp, 1, &v696, v698.imagp, 1, v213);
      vDSP_vsmul(__lena, 1, &v697, __lena, 1, v213);
      vDSP_vsmul(v649, 1, &v697, v649, 1, v213);
      vDSP_zvadd(&__C, 1, &v698, 1, &__C, 1, v213);
      vDSP_zvabs(&__C, 1, v635, 1, v213);
      v214 = 0.0;
      v215 = v213 - v212;
      if (v213 >= v212)
      {
        v216 = &__Da[v212 - 1];
        v217 = v215 + 1;
        v218 = (float *)(v573 + 4 * (v212 - 1));
        v219 = &v635[v212 - 1];
        do
        {
          v220 = *v219++;
          v221 = v220;
          v222 = *v218++;
          v223 = v222;
          v224 = *v216++;
          v214 = v221 / (sqrtf(v223 * v224) + 0.00000001) + v214;
          --v217;
        }
        while (v217);
      }
      v180 = v180 + v190;
      v178 = v661 + 1;
      v206 = v214 / (float)(v215 + 1);
      v12 = (float *)v692;
      v13 = v691;
      v55 = (float *)a6;
      v181 = v602;
      v179 = HIDWORD(v571);
      v177 = v657;
    }
    else
    {
      v196 = 0;
      v206 = 0.0;
    }
    v225 = *(int **)(v15 + 328);
    v225[v177] = v196;
    v226 = *(float **)(v15 + 312);
    v226[v177++] = v206;
  }
  while (v177 != v179);
  v105 = v607;
  v16 = v603;
  v21 = v619;
  if (v178 >= 2)
    *(float *)(v15 + 376) = v180 / (float)v178;
  if (HIDWORD(v571) != 1)
  {
    v231 = 0;
    v227 = 0;
    v232 = 0.0;
    v230 = 0.0;
    do
    {
      if (*((_BYTE *)v181 + v231))
      {
        v233 = v226[v231];
        if (v233 > v232)
        {
          v227 = v231;
          v232 = v226[v231];
        }
        v230 = v230 + (float)(v233 * v233);
      }
      ++v231;
    }
    while (v179 != v231);
    goto LABEL_195;
  }
  v227 = 0;
  v228 = *v226;
  v229 = __na;
LABEL_199:
  v235 = v229 - (_DWORD)v569;
  v236 = *v225;
  if (v236 >= v235)
    v236 = v235;
  memcpy(*((void **)v14 + 21), (const void *)(*(_QWORD *)&v621[8 * v227] + 4 * v236), (size_t)v567);
  *(float *)(v15 + 320) = v228;
LABEL_113:
  v599 = (DSPSplitComplex *)(v14 + 8);
  v601 = (DSPSplitComplex *)(v14 + 4);
  v598 = (float **)(v14 + 12);
  v106 = *((_DWORD *)v12 + 20);
  v107 = (char *)*((_QWORD *)v12 + 4);
  v108 = *((_QWORD *)v14 + 18);
  v109 = v106 == 0;
  if (v106)
    v110 = &v107[4 * v614];
  else
    v110 = (char *)*((_QWORD *)v12 + 4);
  if (v109)
  {
    v107 += 4 * v614;
    v111 = *((_QWORD *)v14 + 18);
  }
  else
  {
    v111 = v108 + 4 * v105;
  }
  if (v109)
    v108 += 4 * v105;
  *((_QWORD *)v12 + 5) = v110;
  *((_QWORD *)v12 + 6) = v107;
  *((_QWORD *)v14 + 19) = v111;
  *((_QWORD *)v14 + 20) = v108;
  lmsfilt_v5::preemphasisFilter((lmsfilt_v5 *)v55, (const float *)*((unsigned int *)v13 + 4), *(float **)v16, *((float **)v12 + 5), v21, *((unsigned __int8 **)v12 + 15), v104);
  v693 = 1;
  lmsfilt_v5::preemphasisFilter((lmsfilt_v5 *)a7, (const float *)*((unsigned int *)v13 + 4), v16 + 2, *((float **)v14 + 19), (float *)1, &v693, v112);
  v113 = (int *)*((unsigned int *)v12 + 18);
  *((_DWORD *)v12 + 19) = (_DWORD)v113;
  dft_v3::GetIndexSequence(*((signed int **)v12 + 11), v113, *((_DWORD *)v13 + 11), *((_DWORD *)v13 + 12));
  v684 = (const DSPComplex *)*((_QWORD *)v12 + 5);
  v114 = *(float **)(v15 + 56);
  v115 = *((int *)v13 + 4);
  v116 = (float *)*((unsigned int *)v13 + 32);
  v117 = (char **)v12;
  v119 = *((int *)v13 + 9);
  v118 = *((int *)v13 + 10);
  v120 = *((_DWORD *)v117 + 19);
  v121 = v117[2];
  v122 = v117[3];
  v123 = v13;
  v124 = *v117;
  v125 = v117[1];
  v126 = *((_DWORD *)v123 + 11);
  v127 = v117[12];
  v128 = (float *)v117[13];
  LODWORD(v699.realp) = 1065353216;
  v660 = v116;
  if ((int)v116 >= 1)
  {
    v129 = 0;
    v130 = (float *)&v127[4 * v120 * (int)v118];
    __N = v115;
    v131 = v120 * v115;
    v132 = (float *)&v122[4 * v131];
    __n = 4 * (int)v119;
    v634 = 4 * v119;
    v620 = (int)v118 - 1;
    __Ba = v123 + 22;
    v641 = v126;
    v648 = v126 - 1;
    __len = 4 * v648;
    v615 = v118 - 2;
    v133 = (float *)&v121[4 * v131];
    v656 = v118;
    __D = 4 * v118;
    __Aa = v119;
    do
    {
      if (*((_BYTE *)v129 + (_QWORD)v692[16]))
      {
        memcpy(v133, v124, __n);
        memcpy(v132, v125, __n);
        __Z.realp = &v133[__Aa];
        __Z.imagp = &v132[__Aa];
        vDSP_ctoz(v684, 2, &__Z, 1, __Aa);
        memcpy(v124, &v133[__Aa], v634);
        memcpy(v125, &v132[__Aa], v634);
        __Z.realp = v133;
        __Z.imagp = v132;
        v135 = (MultiRadixRealFFT *)*((_QWORD *)v691 + 1);
        if (v135)
          MultiRadixRealFFT::RealInPlaceTransform(v135, &__Z, 1, v134);
        vDSP_vsmul(v133, 1, __Ba, v133, 1, (uint64_t)*(int *)v691 >> 1);
        vDSP_vsmul(v132, 1, __Ba, v132, 1, (uint64_t)*(int *)v691 >> 1);
        __C.realp = v133;
        __C.imagp = v132;
        vDSP_zvmags(&__C, 1, v114, 1, __N);
        *v114 = *v133 * *v133;
        v114[__N] = *v132 * *v132;
        v136 = v691[43];
        *v130 = v136 + *v114;
        v130[v620] = v136 + v114[v620];
        if ((int)v656 >= 3)
        {
          v137 = 1;
          v138 = v615;
          do
          {
            v130[v137] = v136 + (float)((float)((float)(v114[v137] + v114[v137 - 1]) + v114[v137 + 1]) * 0.33333);
            ++v137;
            --v138;
          }
          while (v138);
        }
        if (v641 == 1)
        {
          vDSP_vfill((const float *)&v699, v128, 1, 1uLL);
        }
        else
        {
          LODWORD(__C.realp) = 0;
          vDSP_sve(v130, 1, (float *)&__C, v656);
          v141 = log10f(*(float *)&__C.realp) * 10.0;
          memmove(v128, v128 + 1, __len);
          v128[v648] = v141;
        }
        v139 = (int *)v691;
        v140 = __Aa;
      }
      else
      {
        v139 = (int *)v691;
        vDSP_vclr(v133, 1, *((int *)v691 + 4));
        vDSP_vclr(v132, 1, *((int *)v691 + 4));
        v140 = __Aa;
        vDSP_vclr((float *)v124, 1, __Aa);
        vDSP_vclr((float *)v125, 1, __Aa);
        vDSP_vclr(v114, 1, v656);
        vDSP_vclr(v130, 1, *((int *)v691 + 10));
        memmove(v128, v128 + 1, __len);
        v128[v648] = -90.458;
      }
      v142 = v139[15];
      v133 += v142;
      v132 += v142;
      v124 += 4 * v140;
      v125 += 4 * v140;
      v684 = (const DSPComplex *)((char *)v684 + 4 * __N);
      v114 = (float *)((char *)v114 + __D);
      v130 += v139[14];
      v129 = (float *)((char *)v129 + 1);
      v128 += v139[11];
    }
    while (v129 != v660);
    v126 = v139[11];
    v105 = v607;
  }
  v143 = v650;
  v144 = v651;
  v145 = v667;
  v147 = v618;
  v146 = (int)v619;
  v148 = v692;
  if (*((_DWORD *)v650 + 17) == 1)
  {
    if (*(_DWORD *)(v667 + 148) != 1)
    {
LABEL_233:
      if (*((int *)v691 + 26) >= 1)
        *((_QWORD *)a1[5] + 9) = *((_QWORD *)v143 + 9);
      goto LABEL_235;
    }
    v149 = v126;
    LODWORD(__C.realp) = 0;
    v151 = *((_DWORD *)v650 + 18);
    v150 = *((_DWORD *)v650 + 19);
    v152 = 1.0;
    if (v126 < 1)
    {
      v154 = 0;
      v157 = 0;
      v156 = 0.0;
LABEL_207:
      v237 = *(float *)(v667 + 608) * 0.95;
      *(float *)(v667 + 608) = v237;
      if ((float)(v156 * 0.9) <= v237)
      {
        v154 = *(_DWORD *)(v667 + 612);
      }
      else
      {
        *(_DWORD *)(v667 + 612) = v154;
        *(float *)(v667 + 608) = v156;
      }
      v238 = (v154 - *((_DWORD *)v650 + 20)) & ~((v154 - *((_DWORD *)v650 + 20)) >> 31);
      if (v238 + *((_DWORD *)v650 + 21) >= v126)
        v239 = v126;
      else
        v239 = v238 + *((_DWORD *)v650 + 21);
      vDSP_sve((const float *)(*(_QWORD *)(v667 + 120) + 4 * v238), 1, (float *)&__C, v239 - v238);
      v240 = v239 - 1 - v238 + v157;
      if (v240 <= 1)
        v240 = 1;
      v241 = v156 / (float)((float)(v152 * (float)(*(float *)&__C.realp - v156)) / (float)v240);
      v242 = *(float *)(v667 + 568);
      if (v242 <= 2.0 || v241 <= 5.0)
      {
        v105 = v607;
        v146 = (int)v619;
        if (v242 <= 2.0)
        {
          v148 = v692;
          v145 = v667;
          v144 = v651;
          v147 = v618;
        }
        else
        {
          v148 = v692;
          v145 = v667;
          v144 = v651;
          v147 = v618;
          if (v241 < 3.0)
          {
            ++v150;
            --v151;
          }
        }
      }
      else
      {
        if (v151 <= v238)
          v243 = 0;
        else
          v243 = -1;
        if (v151 < v238)
          v243 = 1;
        v151 += v243;
        if (v150 >= v239 - 1)
          v150 -= v150 >= v239;
        else
          ++v150;
        v148 = v692;
        v145 = v667;
        v144 = v651;
        v105 = v607;
        v147 = v618;
        v146 = (int)v619;
      }
      v244 = v149 - 1;
      if (v150 < v149)
        v244 = v150;
      v143 = v650;
      *((_DWORD *)v650 + 18) = v151 & ~(v151 >> 31);
      *((_DWORD *)v650 + 19) = v244;
      goto LABEL_233;
    }
    v153 = 0;
    v154 = 0;
    v155 = *(_QWORD *)(v667 + 120);
    v156 = 0.0;
    do
    {
      if (*(float *)(v155 + 4 * v153) > v156)
      {
        v154 = v153;
        v156 = *(float *)(v155 + 4 * v153);
      }
      ++v153;
    }
    while (v126 != v153);
    v157 = 0;
    if (v126 < 4 || v691[6] >= 12.0)
      goto LABEL_207;
    v158 = v154 + 1;
    if ((_DWORD)v158 == v126)
    {
      v159 = *(float *)(v155 + 4 * v154 - 4);
    }
    else
    {
      if (v154)
      {
        v156 = v156 + (float)((float)(*(float *)(v155 + 4 * v154 - 4) + *(float *)(v155 + 4 * v158)) * 0.5);
LABEL_206:
        v152 = 2.0;
        v157 = -1;
        goto LABEL_207;
      }
      v159 = *(float *)(v155 + 4);
    }
    v156 = v156 + v159;
    goto LABEL_206;
  }
LABEL_235:
  *((float *)&v557 + 1) = v691[15];
  *(float *)&v563 = v143[9];
  LODWORD(v557) = v146;
  lmsfilt_v5::runLmsFilter_v5(v601, v599, (DSPSplitComplex *)*((unsigned int *)v691 + 4), *((_QWORD *)v143 + 2), *((_QWORD *)v143 + 3), (uint64_t)v148[2], (float *)v148[3], (float *)v148[11], *((float **)v143 + 9), v557, v563, (unsigned __int8 *)v148[16], v598, v148[20], *((_BYTE *)v148 + 168), v565, v567, v569, v571,
    v573);
  dft_v5::dftSynthesis(*((float **)v144 + 4), *((float **)v144 + 5), (uint64_t)v691);
  aec_v5::get_EchoEst_Err(v605, (float *)v608, (float *)(*((_QWORD *)v144 + 4) + 4 * v147), (float *)(*((_QWORD *)v144 + 5) + 4 * v147), *((const float **)v144 + 19), (uint64_t)v691);
  if (*((_BYTE *)v148 + 168))
  {
    dft_v5::dftSynthesis(*((float **)v144 + 6), *((float **)v144 + 7), (uint64_t)v691);
    aec_v5::get_EchoEst_Err(v581, v580, (float *)(*((_QWORD *)v144 + 6) + 4 * v147), (float *)(*((_QWORD *)v144 + 7) + 4 * v147), *((const float **)v144 + 19), (uint64_t)v691);
  }
  v245 = (float *)(v145 + 4);
  v246 = (const float *)*((_QWORD *)v144 + 19);
  v247 = *((int *)v691 + 4);
  vDSP_svesq((const float *)v148[5], 1, (float *)(v145 + 4), v247);
  vDSP_svesq(v246, 1, v606, v247);
  v248 = *(_DWORD **)(v145 + 8);
  *v248 = *(_DWORD *)(v145 + 4);
  v249 = *((unsigned int *)v691 + 33);
  if ((int)v249 <= 1)
  {
    if (v146 > 1)
      bzero(v248 + 1, 4 * (v146 - 1));
  }
  else
  {
    v250 = 0;
    v251 = 0;
    v252 = 0;
    v253 = 0;
    v254 = 0.0;
    v255 = 4 * v249;
    v256 = 4 * v105;
    do
    {
      if (v148[17][v252])
      {
        ++v253;
        vDSP_svesq((const float *)&v148[5][v250], 1, (float *)&v248[v251 / 4], *((int *)v691 + 4));
        v248 = *(_DWORD **)(v667 + 8);
        v254 = v254 + *(float *)&v248[v251 / 4];
      }
      else
      {
        v248[v251 / 4] = 0;
      }
      ++v252;
      v251 += 4;
      v250 += v256;
    }
    while (v255 != v251);
    *v245 = v254 / (float)v253;
    v145 = v667;
    v144 = v651;
  }
  v257 = *(float *)(v145 + 28);
  v258 = *((_DWORD *)v691 + 4);
  v259 = log10((float)(*(float *)(v145 + 4) / (float)v258) + 1.0e-20) * 10.0;
  *(float *)(v145 + 16) = v259;
  learnrate_v4::updateStatistics_echo(v258, (const float *)v608, (const float *)v605, (float *)v145);
  v260 = *(float *)(v145 + 24);
  v261 = (v260 + 1.0e-13) / (*(float *)(v145 + 36) + 1.0e-13);
  *(float *)(v145 + 604) = log10f(v261) * 10.0;
  v262 = *((_OWORD *)v144 + 8);
  v263 = *((_OWORD *)v144 + 5);
  v264 = (const void **)v650;
  v616 = v144 + 74;
  if (*((int *)v148 + 38) >= 1)
  {
    *(_OWORD *)__Ab = *((_OWORD *)v144 + 5);
    *(_OWORD *)__Nb = *((_OWORD *)v144 + 8);
    v265 = 0;
    *(_OWORD *)__Db = *(_OWORD *)(v144 + 78);
    *(_OWORD *)v658 = *(_OWORD *)(v144 + 74);
    v266 = *((_DWORD *)v691 + 32);
    v267 = *((_DWORD *)v650 + 9);
    v268 = *((_DWORD *)v691 + 15);
    v269 = *(float *)(v145 + 260);
    v270 = *(float *)(v145 + 264);
    v271 = *(float *)(v145 + 268);
    v272 = *(float *)(v145 + 272);
    v273 = *(float *)(v145 + 276);
    v274 = *((int *)v691 + 9);
    v275 = v691[8];
    v590[15] = 0.0;
    v276 = *(_DWORD *)(v145 + 232);
    if (v276 <= 1)
    {
      if (v276 != 1)
        goto LABEL_251;
      v265 = 2;
    }
    *(_DWORD *)(v145 + 232) = v265;
LABEL_251:
    v277 = v275 * v260;
    if (*((_DWORD *)v590 + 14) == 1)
    {
      *((_QWORD *)v590 + 7) = 0x100000000;
      **(_DWORD **)(v145 + 192) = 1;
      v278 = 0.0;
    }
    else
    {
      __Bb = v270;
      __nb = v271;
      v636 = v272;
      v662 = v275 * v260;
      LODWORD(v564) = v267;
      lmsfilt_v5::runLmsFilter_v5((DSPSplitComplex *)(v144 + 82), (DSPSplitComplex *)(v144 + 86), (DSPSplitComplex *)*((unsigned int *)v691 + 4), *((_QWORD *)v590 + 2), *((_QWORD *)v590 + 3), (uint64_t)v148[2], (float *)v148[3], (float *)v148[11], *((float **)v590 + 9), (float *)__PAIR64__(v268, v266), v564, (unsigned __int8 *)v148[16], (float **)v144 + 45, v148[20], *((_BYTE *)v148 + 168), v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v144 + 43), *((float **)v144 + 44), (uint64_t)v691);
      aec_v5::get_EchoEst_Err((DSPComplex *)v658[0], __Db[0], (float *)(*((_QWORD *)v144 + 43) + 4 * v274), (float *)(*((_QWORD *)v144 + 44) + 4 * v274), *((const float **)v144 + 19), (uint64_t)v691);
      if (*((_BYTE *)v148 + 168))
      {
        dft_v5::dftSynthesis(*((float **)v144 + 45), *((float **)v144 + 46), (uint64_t)v691);
        aec_v5::get_EchoEst_Err((DSPComplex *)v658[1], __Db[1], (float *)(*((_QWORD *)v144 + 45) + 4 * v274), (float *)(*((_QWORD *)v144 + 46) + 4 * v274), *((const float **)v144 + 19), (uint64_t)v691);
      }
      v286 = v273;
      vDSP_svesq(__Db[0], 1, (float *)(v145 + 216), *((int *)v691 + 4));
      v287 = *(float *)(v145 + 216);
      *(float *)(v145 + 220) = v287;
      v288 = (float)((float)*(int *)v691 * 100.0) * 9.3132e-10;
      if (v287 < v288)
        *(float *)(v145 + 216) = v287 + v288;
      LODWORD(__C.realp) = 0;
      vDSP_svesq((const float *)v658[0], 1, (float *)&__C, *((int *)v691 + 4));
      v289 = *(float *)(v145 + 220) + 1.0e-13;
      v290 = (*(float *)&__C.realp + 1.0e-13) / v289;
      __lenb = log10f(v290);
      v291 = *(float *)(v145 + 36) + 1.0e-13;
      v292 = *(float *)(v145 + 28) + 0.000000001;
      v293 = v269;
      v294 = v291 / v292 + v269;
      v295 = log10f(v294) * 10.0;
      v296 = v289 / v292 + v293;
      v297 = log10f(v296) * 10.0;
      v298 = v291 / (*(float *)(v145 + 24) + 0.000000001) + v293;
      v299 = log10f(v298) * 10.0;
      v300 = *(_DWORD *)(v145 + 236);
      v302 = *(float **)(v145 + 160);
      v301 = *(float **)(v145 + 168);
      v304 = *(float **)(v145 + 176);
      v303 = *(_BOOL4 **)(v145 + 184);
      v306 = *(_DWORD **)(v145 + 192);
      v305 = *(_DWORD **)(v145 + 200);
      v307 = v300 - 1;
      if (v300 != 1)
      {
        v308 = 0;
        v309 = *(_QWORD *)(v145 + 208);
        v310 = v309 + 4 * v307;
        v311 = v300 - 2;
        v312 = v307 - 1;
        v313 = &v305[v307];
        v314 = &v306[v307];
        v315 = &v303[v307];
        v316 = &v304[v307];
        v317 = &v301[v307];
        v318 = &v302[v307];
        do
        {
          v318[v308] = v302[(v311 + v308)];
          v317[v308] = v301[(v311 + v308)];
          v316[v308] = v304[(v311 + v308)];
          v315[v308] = v303[(v311 + v308)];
          v314[v308] = v306[(v311 + v308)];
          v313[v308] = v305[(v311 + v308)];
          *(_DWORD *)(v310 + 4 * v308) = *(_DWORD *)(v309 + 4 * (v311 + v308));
        }
        while (v312 + (_DWORD)v308--);
      }
      *v302 = v295 - v297;
      *v301 = v295;
      *v304 = v299;
      v320 = *v302;
      v321 = (float)(__Bb + *v302) < 0.0;
      v273 = v286;
      v277 = v662;
      if (v662 < v273)
        v321 = 1;
      *v303 = v321;
      *v306 = v320 < __nb;
      *v305 = *(float *)(v145 + 36) > *(float *)(v145 + 220);
      v322 = v299 < v636 && *(float *)(v145 + 16) < -9.0;
      v323 = *(_BOOL4 **)(v145 + 208);
      *v323 = v322;
      v324 = *(_DWORD *)(v145 + 252);
      if (v324 > *(_DWORD *)(v145 + 236))
        goto LABEL_294;
      if (v324 < 1)
      {
        v325 = 0;
      }
      else
      {
        v325 = 0;
        v326 = *(unsigned int *)(v145 + 252);
        do
        {
          v327 = *v303++;
          v325 += v327;
          --v326;
        }
        while (v326);
      }
      v328 = *(_DWORD *)(v145 + 228);
      v329 = v328 >= 2 && v325 == 0;
      v330 = v329 || v328 >= v324;
      if (v330 && *(_BYTE *)v145)
      {
        v331 = 4 * *((_DWORD *)v650 + 22);
        memcpy(*(void **)v650, *(const void **)v590, v331);
        memcpy(*((void **)v650 + 1), *((const void **)v590 + 1), v331);
        memcpy(*((void **)v650 + 2), *((const void **)v590 + 2), v331);
        memcpy(*((void **)v650 + 3), *((const void **)v590 + 3), v331);
        memcpy(*((void **)v650 + 6), *((const void **)v590 + 6), v331);
        *((_QWORD *)v650 + 9) = *((_QWORD *)v590 + 9);
        *(_DWORD *)(v145 + 232) = 1;
        *(_OWORD *)v637 = *(_OWORD *)(v144 + 78);
        *(_OWORD *)__Ab = *v616;
        v332 = 4 * *((_DWORD *)v691 + 34);
        v333 = 4 * *((_DWORD *)v691 + 4);
        memcpy((void *)__Nb[0], __Db[0], v333);
        memcpy((void *)__Nb[1], __Db[1], v333);
        v334 = v332;
        v144 = v651;
        memcpy(*((void **)v651 + 2), *((const void **)v651 + 41), v334);
        v335 = v334;
        v264 = (const void **)v650;
        memcpy(*((void **)v144 + 3), *((const void **)v144 + 42), v335);
        memcpy(*((void **)v144 + 4), *((const void **)v144 + 43), v333);
        memcpy(*((void **)v144 + 5), *((const void **)v144 + 44), v333);
        memcpy(*((void **)v144 + 6), *((const void **)v144 + 45), v333);
        memcpy(*((void **)v144 + 7), *((const void **)v144 + 46), v333);
        *(_QWORD *)(v145 + 88) = *(_QWORD *)v611;
        v336 = 4 * *((_DWORD *)v691 + 10);
        memcpy(*(void **)(v145 + 72), *(const void **)(v145 + 296), v336);
        memcpy(*(void **)(v145 + 80), *(const void **)(v145 + 304), v336);
        **(_DWORD **)(v145 + 184) = 1;
        *(_DWORD *)(v145 + 228) = 0;
        *(_OWORD *)__Nb = *(_OWORD *)v637;
      }
      else
      {
LABEL_294:
        v337 = *(int **)(v145 + 192);
        v338 = *(_DWORD *)(v145 + 244);
        if (v338 < 1)
        {
          v339 = 0;
          v264 = (const void **)v650;
        }
        else
        {
          v339 = 0;
          v340 = *(int **)(v145 + 192);
          v341 = *(unsigned int *)(v145 + 244);
          v264 = (const void **)v650;
          do
          {
            v342 = *v340++;
            v339 += v342;
            --v341;
          }
          while (v341);
        }
        v343 = *(_DWORD *)(v145 + 248);
        if (v343 < 1)
        {
          v344 = 0;
        }
        else
        {
          v344 = 0;
          v345 = *(unsigned int *)(v145 + 248);
          do
          {
            v346 = *v337++;
            v344 += v346;
            --v345;
          }
          while (v345);
        }
        v347 = *(_DWORD *)(v145 + 256);
        if (v347 < 1)
        {
          v348 = 0;
        }
        else
        {
          v348 = 0;
          v349 = *(unsigned int *)(v145 + 256);
          do
          {
            v350 = *v323++;
            v348 += v350;
            --v349;
          }
          while (v349);
        }
        v351 = v301[1];
        if (*v301 < v351 || v351 < v301[2])
        {
          v352 = *(_BYTE *)v145 && v339 == v338;
          v353 = v352 && v348 == v347;
          if (v353 && (float)((float)v344 * 1.5) > (float)v343)
            *((_DWORD *)v590 + 15) = 1;
        }
      }
      v278 = __lenb * 10.0;
    }
    v355 = *((_DWORD *)v590 + 15);
    if (v355 == 1)
    {
      *(_DWORD *)(v145 + 224) = 0;
      v356 = 4 * *((_DWORD *)v590 + 22);
      memcpy(*(void **)v590, *v264, v356);
      memcpy(*((void **)v590 + 1), v264[1], v356);
      memcpy(*((void **)v590 + 2), v264[2], v356);
      memcpy(*((void **)v590 + 3), v264[3], v356);
      memcpy(*((void **)v590 + 6), v264[6], v356);
      *((_QWORD *)v590 + 9) = v264[9];
      *(_QWORD *)v611 = *(_QWORD *)(v145 + 88);
      v357 = 4 * *((_DWORD *)v691 + 10);
      memcpy(*(void **)(v145 + 296), *(const void **)(v145 + 72), v357);
      memcpy(*(void **)(v145 + 304), *(const void **)(v145 + 80), v357);
      **(_DWORD **)(v145 + 184) = 0;
      **(_DWORD **)(v145 + 192) = 0;
      **(_DWORD **)(v145 + 200) = 0;
      **(_DWORD **)(v145 + 208) = 0;
      v358 = *(_DWORD *)(v145 + 624);
      if (v358 <= 3)
        *(_DWORD *)(v145 + 624) = v358 + 1;
    }
    else
    {
      if (!*(_BYTE *)v145)
        goto LABEL_329;
      *(float *)(v145 + 224) = *(float *)(v145 + 224) + 1.0;
    }
    v355 = *((_DWORD *)v590 + 15);
LABEL_329:
    if (!v355)
    {
      v359 = *(_DWORD *)(v145 + 240);
      if (v359 < 1)
      {
        v360 = 0;
      }
      else
      {
        v360 = 0;
        v361 = *(int **)(v145 + 200);
        v362 = *(unsigned int *)(v145 + 240);
        do
        {
          v363 = *v361++;
          v360 += v363;
          --v362;
        }
        while (v362);
      }
      if (v360 == v359)
      {
        *(_DWORD *)(v145 + 36) = *(_DWORD *)(v145 + 220);
        if (v277 >= v273 && *(_BYTE *)v145)
          ++*(_DWORD *)(v145 + 228);
        *(_DWORD *)(v145 + 232) = 1;
        *(float *)(v145 + 604) = v278;
        goto LABEL_342;
      }
      *(_DWORD *)(v145 + 228) = 0;
    }
    *(_OWORD *)__Db = *(_OWORD *)__Nb;
    *(_OWORD *)v658 = *(_OWORD *)__Ab;
    goto LABEL_342;
  }
  v279 = *((_DWORD *)v691 + 42);
  if (v279 == 1)
  {
    *(_OWORD *)__Ac = *((_OWORD *)v144 + 5);
    *(_OWORD *)__Nc = *((_OWORD *)v144 + 8);
    v280 = *(int *)(v145 + 236);
    vDSP_vclr(*(float **)(v145 + 160), 1, v280);
    vDSP_vclr(*(float **)(v145 + 168), 1, v280);
    vDSP_vclr(*(float **)(v145 + 176), 1, v280);
    if ((int)v280 >= 1)
    {
      v281 = v280;
      v282 = *(_DWORD **)(v145 + 192);
      v283 = *(_DWORD **)(v145 + 200);
      v284 = *(_DWORD **)(v145 + 208);
      do
      {
        *v282++ = 1;
        *v283++ = 1;
        *v284++ = 1;
        --v281;
      }
      while (v281);
    }
    v285 = *(_DWORD *)(v145 + 236);
    if (v285 <= *(_DWORD *)(v145 + 252))
      v285 = *(_DWORD *)(v145 + 252);
    if (v285 >= 1)
      memset_pattern16(*(void **)(v145 + 184), &unk_1B66A2BB0, 4 * v285);
    vDSP_vclr(*(float **)v148[7], 1, *((int *)v691 + 19));
    vDSP_vclr(*(float **)v148[8], 1, *((int *)v691 + 19));
    vDSP_vclr(*((float **)v144 + 22), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v144 + 33), 1, *((int *)v691 + 32) * (uint64_t)*((int *)v691 + 20));
    vDSP_vclr(*((float **)v144 + 34), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v144 + 35), 1, 2 * *((int *)v691 + 20) * (uint64_t)*((int *)v691 + 32));
    v279 = *((_DWORD *)v691 + 42);
    v263 = *(_OWORD *)__Ac;
    v262 = *(_OWORD *)__Nc;
  }
  if (v279 >= 1)
  {
    *(_DWORD *)(v145 + 568) = 0;
    *(_QWORD *)(v145 + 148) = 0;
  }
  *(_OWORD *)__Db = v262;
  *(_OWORD *)v658 = v263;
LABEL_342:
  v638 = (float *)(v145 + 408);
  dft_v5::dftGenericAnalysis2ndHalf(v608, v613, v612, (uint64_t)v691, 1);
  dft_v5::dftGenericAnalysis2ndHalf_dsc((const void *)(*((_QWORD *)v144 + 4) + 4 * v147), (const void *)(*((_QWORD *)v144 + 5) + 4 * v147), v610, v609, (int *)v691);
  __Nd = (uint64_t)a1[10];
  v365 = (DSPComplex *)*((_QWORD *)v144 + 57);
  v364 = (DSPComplex *)*((_QWORD *)v144 + 58);
  v366 = (DSPComplex *)*((_QWORD *)v144 + 59);
  v367 = *((int *)v691 + 4);
  v368 = *(_DWORD *)(v145 + 424) - v367;
  v369 = *(DSPSplitComplex *)(v144 + 102);
  v699 = *(DSPSplitComplex *)(v144 + 106);
  __Z = v369;
  v698 = *(DSPSplitComplex *)(v144 + 110);
  __Ad = *(int *)(v145 + 432);
  v663 = *(_DWORD *)(v145 + 436);
  v370 = *(int *)(v145 + 444);
  v371 = *(float **)(v145 + 496);
  __lenc = *(float **)(v145 + 504);
  __nc = *(float **)(v145 + 480);
  v372 = v145;
  v373 = *(float **)(v145 + 488);
  LODWORD(v694.realp) = *(_DWORD *)(v372 + 416);
  v697 = 1.0 - *(float *)&v694.realp;
  if (v368 >= 1)
  {
    memmove(v365, (char *)v365 + 4 * v367, 4 * v368);
    memmove(v364, (char *)v364 + 4 * v367, 4 * v368);
    memmove(v366, (char *)v366 + 4 * v367, 4 * v368);
  }
  memcpy((char *)v365 + 4 * v368, *((const void **)v651 + 19), 4 * v367);
  memcpy((char *)v364 + 4 * v368, *((const void **)v651 + 10), 4 * v367);
  memcpy((char *)v366 + 4 * v368, *((const void **)v651 + 16), 4 * v367);
  dft_v5::dftGenericAnalysis2ndHalf(v365, __Z.realp, __Z.imagp, __Nd, 0);
  dft_v5::dftGenericAnalysis2ndHalf(v364, v699.realp, v699.imagp, __Nd, 0);
  realp = v698.realp;
  imagp = v698.imagp;
  vDSP_zvmags(&__Z, 1, v371, 1, v370);
  vDSP_vsmul(v371, 1, &v697, realp, 1, v370);
  vDSP_vsmul(__lenc, 1, (const float *)&v694, imagp, 1, v370);
  vDSP_vadd(realp, 1, imagp, 1, __lenc, 1, v370);
  vDSP_zvcmul(&__Z, 1, &v699, 1, &v698, 1, v370);
  vDSP_zvabs(&v698, 1, __nc, 1, v370);
  vDSP_vsmul(__nc, 1, &v697, realp, 1, v370);
  vDSP_vsmul(v373, 1, (const float *)&v694, imagp, 1, v370);
  vDSP_vadd(realp, 1, imagp, 1, v373, 1, v370);
  v696 = 2.2204e-16;
  vDSP_vsadd(__lenc, 1, &v696, realp, 1, v370);
  vDSP_vdiv(realp, 1, v373, 1, imagp, 1, v370);
  vDSP_meanv(&imagp[__Ad], 1, v638, v663 - (int)__Ad + 1);
  v376 = v667;
  *(float *)(v667 + 408) = fmaxf(fminf(*(float *)(v667 + 408), 1.0), 0.0);
  dft_v5::dftGenericAnalysis2ndHalf(v366, v698.realp, v698.imagp, __Nd, 0);
  v377 = v698.realp;
  v378 = v698.imagp;
  v379 = v699.realp;
  v380 = v699.imagp;
  v381 = *(float **)(v667 + 448);
  v382 = *(float **)(v667 + 456);
  v383 = *(float **)(v667 + 472);
  __Ae = *(float **)(v667 + 464);
  v695 = 0;
  v384 = *(float *)(v667 + 412);
  v385 = *(float *)(v667 + 420);
  v386 = *(int *)(v667 + 424);
  v387 = *(_DWORD *)(v667 + 428);
  __Ne = *(_DWORD *)(v667 + 440);
  __C = v698;
  vDSP_zvmags(&__C, 1, v382, 1, v386);
  *v382 = *v377 * *v377;
  v382[v386] = *v378 * *v378;
  __C.realp = v379;
  __C.imagp = v380;
  vDSP_zvmags(&__C, 1, v381, 1, v386);
  *v381 = *v379 * *v379;
  v381[v386] = *v380 * *v380;
  learnrate_v3::crossCorrSpec_raw((learnrate_v3 *)v382, v383, v381, __Ae, (const float *)&v695 + 1, (float *)&v695, (float *)((v387 >> 1) + 1));
  v388 = sqrtf(*(float *)&v695);
  v389 = (float)(*((float *)&v695 + 1) / v388) / (float)(v388 + v696);
  if (v389 <= 0.001)
    v389 = 0.001;
  *(float *)(v667 + 400) = v389;
  *(float *)(v667 + 404) = (float)((float)(1.0 - v384) * v389) + (float)(v384 * *(float *)(v667 + 404));
  VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)v383, v382, (const float *)__Ne, v385);
  VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)__Ae, v381, (const float *)__Ne, v385);
  *a11 = *(_DWORD *)(v667 + 408);
  v390 = (uint64_t)v691;
  v391 = *(_DWORD *)v691;
  LODWORD(__Z.realp) = 0;
  LODWORD(v699.realp) = 0;
  v392 = *((int *)v691 + 4);
  v393 = (const float *)*((unsigned int *)v691 + 10);
  v394 = *(float **)(v667 + 48);
  __C.realp = v613;
  __C.imagp = v612;
  vDSP_zvmags(&__C, 1, v394, 1, v392);
  *v394 = *v613 * *v613;
  v394[v392] = *v612 * *v612;
  v395 = *(float **)(v667 + 64);
  __C.realp = v610;
  __C.imagp = v609;
  vDSP_zvmags(&__C, 1, v395, 1, v392);
  *v395 = *v610 * *v610;
  v395[v392] = *v609 * *v609;
  learnrate_v3::crossCorrSpec_raw(*(learnrate_v3 **)(v667 + 48), *(const float **)(v667 + 72), *(const float **)(v667 + 64), *(const float **)(v667 + 80), (const float *)&__Z, (float *)&v699, (float *)((v391 >> 1) + 1));
  v396 = sqrtf(*(float *)&v699.realp);
  v397 = *(float *)(v667 + 24);
  v398 = *(float *)(v667 + 136);
  v399 = *(float *)(v667 + 132) * v397;
  v400 = *(float *)(v667 + 32);
  if (v399 > (float)(v398 * v400))
    v399 = v398 * v400;
  v401 = v399 / v400;
  if (v400 < 9.3132e-19)
    v401 = *(float *)(v667 + 136);
  v402 = (float)((float)(*(float *)&__Z.realp / v396) * v401) + (float)((float)(1.0 - v401) * *(float *)(v667 + 88));
  v403 = (float)(v401 * v396) + (float)((float)(1.0 - v401) * *(float *)(v667 + 92));
  if (v403 < 9.3132e-10)
    v403 = 9.3132e-10;
  if (v402 >= (float)(v403 * 0.005))
    v404 = v402;
  else
    v404 = v403 * 0.005;
  if (v404 <= v403)
    v405 = v404;
  else
    v405 = v403;
  *(float *)&v699.realp = v396;
  *(float *)&__Z.realp = *(float *)&__Z.realp / v396;
  *(float *)(v667 + 88) = v402;
  *(float *)(v667 + 92) = v403;
  if (v402 < (float)(v403 * 0.005) || v404 > v403)
    *(float *)(v667 + 88) = v405;
  v407 = v405 / v403;
  v408 = (float)((float)(v397 * (float)(v407 * 3.0)) + (float)(*(float *)(v667 + 4) * 0.0001)) / v400;
  v409 = (float)(*(float *)(v667 + 20) * *(float *)(v667 + 20)) / (float)((float)(v400 * v397) + 8.6736e-19);
  if (v408 >= v409)
    v409 = v408;
  if (v409 > 0.5)
    v409 = 0.5;
  *(float *)(v667 + 140) = v407;
  *(float *)(v667 + 144) = v409;
  v410 = *(_DWORD *)(v667 + 148);
  v411 = v692;
  v412 = v650;
  if (v410)
  {
    v413 = v651;
    if (v410 != 1)
      goto LABEL_377;
    if (*(float *)(v667 + 404) < *(float *)(v667 + 392) && *(float *)(v667 + 408) < *(float *)(v667 + 396))
      *(_DWORD *)(v667 + 144) = 0;
  }
  else
  {
    v413 = v651;
    if (*(float *)(v667 + 152) <= (float)*((int *)v691 + 11))
      goto LABEL_377;
    *(_DWORD *)(v667 + 148) = 1;
  }
  if (*((_DWORD *)v691 + 26) == 3 && v407 > 0.0631)
  {
    *(_QWORD *)(v667 + 148) = 0;
    vDSP_vclr(*(float **)v692[8], 1, *((int *)v691 + 19));
    vDSP_vclr(*(float **)v692[7], 1, *((int *)v691 + 19));
    vDSP_vclr(*((float **)v413 + 22), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v413 + 33), 1, *((int *)v691 + 32) * (uint64_t)*((int *)v691 + 20));
    vDSP_vclr(*((float **)v413 + 34), 1, *((int *)v691 + 20));
    vDSP_vclr(**((float ***)v413 + 35), 1, 2 * *((int *)v691 + 20) * (uint64_t)*((int *)v691 + 32));
  }
LABEL_377:
  learnrate_v4::getAdaptationRate4_v6(v667);
  VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v667 + 72), *(const float **)(v667 + 48), v393, *(float *)(v667 + 128));
  VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v667 + 80), *(const float **)(v667 + 64), v393, *(float *)(v667 + 128));
  if (!a10)
  {
    v419 = *(float **)(v667 + 104);
    v420 = *((unsigned int *)v691 + 11);
    v421 = (int)v420;
    if (*((_DWORD *)v691 + 25))
    {
      v422 = -0.1;
    }
    else if (*(_DWORD *)(v667 + 148))
    {
      if (*(float *)(v667 + 404) <= 2.6)
        v422 = *(float *)(v667 + 640);
      else
        v422 = 0.65;
    }
    else
    {
      v422 = 0.65;
    }
    v423 = (float *)v692[13];
    v687 = *((int *)v691 + 4);
    v424 = *((int *)v691 + 39);
    v425 = *(char **)(v667 + 632);
    __Nf = v692[16];
    v426 = *((_DWORD *)v692 + 38);
    v427 = *(_QWORD *)(v667 + 120);
    v428 = v691[6];
    v429 = *((int *)v650 + 9);
    LODWORD(__C.realp) = 0;
    LODWORD(__Z.realp) = 0;
    LODWORD(v698.realp) = 1065353216;
    if ((_DWORD)v420 == 1)
    {
      vDSP_vfill((const float *)&v698, v419, 1, v424);
      *a3 = v428 * 0.5;
LABEL_450:
      v688 = *(int *)(v390 + 56);
      v477 = *(int *)(v390 + 40);
      v478 = *(int *)(v390 + 44);
      v479 = *(unsigned int *)(v390 + 128);
      LODWORD(__C.realp) = 0;
      v480 = v411[12];
      v481 = *(float **)(v667 + 96);
      v482 = *(_QWORD *)(v667 + 104);
      vDSP_vclr(v481, 1, v477);
      if ((int)v479 >= 1)
      {
        for (i = 0; i != v479; ++i)
        {
          if (v692[16][i])
            v484 = (int)v478 < 1;
          else
            v484 = 1;
          if (!v484)
          {
            v485 = 0;
            do
            {
              LODWORD(__C.realp) = *(_DWORD *)(v482 + v485);
              if (*(float *)&__C.realp != 0.0)
                vDSP_vsma((const float *)&v480[4 * *(_DWORD *)&v692[11][v485] * (int)v477], 1, (const float *)&__C, v481, 1, v481, 1, v477);
              v485 += 4;
            }
            while (4 * v478 != v485);
          }
          v480 += 4 * v688;
          v482 += 4 * v478;
        }
      }
      LODWORD(__Z.realp) = 1065353216;
      vDSP_svdiv((const float *)&__Z, v481, 1, v481, 1, v477);
      v411 = v692;
      v390 = (uint64_t)v691;
      if (*((int *)v692 + 38) >= 1)
      {
        v416 = *(float *)(v667 + 568) < *(float *)(v667 + 552) || *(_DWORD *)(v667 + 148) == 0;
        v417 = *(float *)(v667 + 404) > 0.15 && *v638 > 0.65;
        v418 = v417;
        if (*((_DWORD *)v691 + 26) == 3)
          v418 = *v638 > 0.9 || v417;
        if ((v588 & (v416 | v418)) == 1)
        {
          a1[2] = v577;
          a1[4] = v650;
          learnrate_v5::adaptLmsFilter_v4((uint64_t)v613);
          v415 = *(float *)(v667 + 36);
          v664 = v650;
          v412 = v577;
          goto LABEL_474;
        }
      }
      v376 = v667;
      learnrate_v5::adaptLmsFilter_v4((uint64_t)v613);
      v415 = *(float *)(v667 + 36);
      v413 = v651;
LABEL_490:
      v500 = *(_OWORD *)__Db;
      v501 = *(_OWORD *)v658;
      goto LABEL_491;
    }
    if ((int)v420 <= 1)
    {
      v430 = 0;
      v433 = *v423;
    }
    else
    {
      v430 = 0;
      v431 = *v419;
      for (j = 1; j != v420; ++j)
      {
        if (v419[j] >= v431)
        {
          v430 = j;
          v431 = v419[j];
        }
      }
      v433 = v423[v430];
      v434 = v430 - 1;
      if (v430 >= 1)
      {
        v435 = v423[v434];
        if (v430 == 1)
        {
          v430 = 1;
          v556 = v423[v434];
        }
        else
        {
          v556 = v423[v430 - 2];
        }
        goto LABEL_400;
      }
    }
    v435 = v433;
    v556 = v433;
LABEL_400:
    v436 = v433;
    if (v430 < (int)v421 - 1)
      v436 = v423[v430 + 1];
    v437 = v436;
    if (v430 < (int)v421 - 2)
      v437 = v423[v430 + 2];
    v438 = vabds_f32(v556, v435);
    v439 = vabds_f32(v435, v433);
    v440 = vabds_f32(v433, v436);
    v441 = vabds_f32(v436, v437);
    v442 = vabds_f32(v436, v435);
    v443 = vabds_f32(v556, v433);
    if (vabds_f32(v433, v437) <= 10.0
      && v443 <= 10.0
      && v442 <= 10.0
      && v441 <= 8.0
      && v440 <= 8.0
      && v439 <= 8.0
      && v438 <= 8.0)
    {
      v622 = v429;
      v583 = v426;
      v591 = v421;
      __dsta = v425;
      LODWORD(v699.realp) = 0;
      v450 = *((unsigned int *)v650 + 18);
      __nd = (int)v450;
      __lend = *((_DWORD *)v650 + 19);
      v451 = v427;
      if (*((_DWORD *)v650 + 17) == 1 && (int)v619 >= 1)
      {
        v452 = 0;
        v453 = 4 * v421;
        v454 = (v421 - (__lend + 1));
        v455 = v427 + 4 * (__lend + 1);
        v456 = (int)v619;
        do
        {
          if ((int)v450 >= 1)
          {
            vDSP_vfill((const float *)&v699, (float *)((char *)v419 + v452), 1, v450);
            v412 = v650;
            vDSP_vfill((const float *)&v699, (float *)(v451 + v452), 1, v450);
          }
          if ((int)v454 >= 1)
          {
            vDSP_vfill((const float *)&v699, (float *)((char *)&v419[__lend + 1] + v452), 1, v454);
            vDSP_vfill((const float *)&v699, (float *)(v455 + v452), 1, v454);
          }
          v452 += v453;
          --v456;
        }
        while (v456);
      }
      v665 = v450;
      v585 = v419;
      v457 = *(_QWORD *)v412;
      v458 = *((_QWORD *)v412 + 1);
      ++learnrate_v5::adjustProp_v5(float *,float *,float *,float *,LMS_FILTER5 *,float *,int,float,int,int,int,float,int,int,float *,BOOL *,int,float)::count;
      v459 = 0.0;
      v460 = 0.0;
      v461 = (int)v450;
      if ((int)v619 >= 1)
      {
        v462 = 0;
        v463 = &__dsta[4 * __nd];
        v464 = v451 + 4 * __nd;
        v623 = 4 * v622;
        __Bc = (float *)(4 * v591);
        do
        {
          if ((int)v461 <= __lend)
          {
            v465 = 0;
            v466 = 4 * (int)__nd * (int)v687;
            do
            {
              vDSP_svesq((const float *)(v457 + v466), 1, (float *)&__C, v687);
              vDSP_svesq((const float *)(v458 + v466), 1, (float *)&__Z, v687);
              v467 = *(float *)&__C.realp + *(float *)&__Z.realp;
              *(float *)(v464 + 4 * v465) = (float)(*(float *)&__C.realp + *(float *)&__Z.realp) + 1.0e-20;
              v468 = sqrtf((float)(1.0 / (float)(int)v687) * v467) + 0.02;
              *(float *)&v463[4 * v465] = v468;
              if (!v462)
              {
                v460 = v460 + (float)((float)(v665 + v465) * v467);
                *(float *)&v699.realp = v467 + *(float *)&v699.realp;
              }
              if (!*((_BYTE *)v462 + (_QWORD)__Nf))
                v468 = -0.0;
              v459 = v459 + v468;
              ++v465;
              v466 += 4 * v687;
            }
            while (v665 + ~__lend + (_DWORD)v465);
          }
          v462 = (float *)((char *)v462 + 1);
          v461 = __nd;
          v463 = (char *)__Bc + (_QWORD)v463;
          v464 += (size_t)__Bc;
          v458 += v623;
          v457 += v623;
        }
        while (v462 != v619);
      }
      v469 = *(float *)&v699.realp;
      *a2 = v699.realp;
      v470 = (float)((float)((float)(int)v591 + -0.5) - (float)(v460 * (float)(1.0 / (float)(v469 + 1.0e-20)))) * v428;
      if (v470 < 0.0)
        v470 = 0.0;
      *a3 = v470;
      v411 = v692;
      v390 = (uint64_t)v691;
      v471 = v585;
      v472 = __dsta;
      if ((int)v619 >= 1)
      {
        v473 = 0;
        v474 = 4 * v591;
        do
        {
          if ((int)v461 <= __lend)
          {
            v475 = v461;
            v476 = __lend - v665 + 1;
            do
            {
              v471[v475] = (float)((float)(1.0 - v422) / (float)((float)(v583 * v591) + (float)(v583 * v591)))
                         + (float)((float)((float)(v422 + 1.0) / (float)(v459 + v459)) * *(float *)&v472[v475 * 4]);
              ++v475;
              --v476;
            }
            while (v476);
          }
          ++v473;
          v471 = (float *)((char *)v471 + v474);
          v472 += v474;
        }
        while (v473 != (_DWORD)v619);
      }
    }
    goto LABEL_450;
  }
  v415 = *(float *)(v667 + 36);
  if (!v588)
    goto LABEL_490;
  v416 = 0;
  v417 = 0;
  LOBYTE(v418) = 0;
  v664 = v577;
LABEL_474:
  *(_OWORD *)__lene = v616[6];
  *(_OWORD *)v639 = v616[5];
  v486 = v651;
  *(_QWORD *)(v667 + 576) = 0;
  v487 = *(float *)(v667 + 40) + 1.0e-20;
  *(float *)(v667 + 540) = log10f(v487 / (float)(*(float *)(v667 + 28) + 1.0e-20)) * 10.0;
  *(_DWORD *)(v667 + 548) = 0;
  __Af = (float **)(v651 + 90);
  HIDWORD(v558) = *(_DWORD *)(v390 + 60);
  *(float *)&v564 = v412[9];
  LODWORD(v558) = (_DWORD)v619;
  v689 = (DSPSplitComplex *)(v651 + 82);
  __Ng = (DSPSplitComplex *)(v651 + 86);
  lmsfilt_v5::runLmsFilter_v5((DSPSplitComplex *)(v651 + 82), (DSPSplitComplex *)(v651 + 86), (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((_QWORD *)v412 + 2), *((_QWORD *)v412 + 3), (uint64_t)v692[2], (float *)v692[3], (float *)v692[11], *((float **)v412 + 9), v558, v564, (unsigned __int8 *)v692[16], (float **)v651 + 45, v692[20], 0, v566, v568, v570, v572,
    v574);
  dft_v5::dftSynthesis(*((float **)v486 + 43), *((float **)v486 + 44), v390);
  aec_v5::get_EchoEst_Err((DSPComplex *)v639[0], (float *)__lene[0], (float *)(*((_QWORD *)v486 + 43) + 4 * v618), (float *)(*((_QWORD *)v486 + 44) + 4 * v618), *((const float **)v486 + 19), v390);
  v488 = v412;
  v489 = *(int *)(v390 + 16);
  vDSP_svesq((const float *)__lene[0], 1, (float *)(v667 + 512), v489);
  vDSP_svesq((const float *)v639[0], 1, (float *)(v667 + 564), v489);
  v490 = *(float *)(v667 + 512);
  *(float *)(v667 + 544) = log10f((float)(v490 + 1.0e-20) / (float)(*(float *)(v667 + 28) + 1.0e-20)) * 10.0;
  v491 = log10f((float)(v490 + 1.0e-20) / v487) * -10.0;
  *(float *)(v667 + 596) = v491;
  v492 = *(_DWORD *)(v667 + 40);
  *(float *)(v667 + 40) = v490;
  if (*(_DWORD *)(v667 + 148) == 1 && *(float *)(v667 + 568) > *(float *)(v667 + 552))
  {
    v493 = v488;
    if (*(float *)(v667 + 540) < -20.0 && v491 < -2.0)
    {
      *(_DWORD *)(v667 + 580) = 1;
      v495 = *(_DWORD *)(v390 + 48);
      if (v495 <= 1)
        v496 = 1;
      else
        v496 = *(_DWORD *)(v390 + 48);
      v494 = *((_DWORD *)v692 + 18) - 1;
      LODWORD(v497) = v494
                    + v495
                    + v495
                    * (((v494 & ~(v494 >> 31)) - (v494 + (v494 >> 31))) / v496 + (v494 >> 31));
      do
        v497 = (int *)((_DWORD)v497 - v495);
      while ((int)v497 >= v495);
      *((_DWORD *)v692 + 19) = (_DWORD)v497;
      dft_v3::GetIndexSequence((signed int *)v692[11], v497, *(_DWORD *)(v390 + 44), v495);
      HIDWORD(v559) = *(_DWORD *)(v390 + 60);
      *(float *)&v564 = v488[9];
      LODWORD(v559) = (_DWORD)v619;
      lmsfilt_v5::runLmsFilter_v5(v689, __Ng, (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((_QWORD *)v488 + 2), *((_QWORD *)v488 + 3), (uint64_t)v692[2], (float *)v692[3], (float *)v692[11], *((float **)v488 + 9), v559, v564, (unsigned __int8 *)v692[16], __Af, v692[20], 0, v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v651 + 43), *((float **)v651 + 44), v390);
      aec_v5::get_EchoEst_Err((DSPComplex *)v639[0], (float *)__lene[0], (float *)(*((_QWORD *)v651 + 43) + 4 * v618), (float *)(*((_QWORD *)v651 + 44) + 4 * v618), *((const float **)v651 + 20), v390);
      LODWORD(__C.realp) = 0;
      vDSP_svesq((const float *)__lene[0], 1, (float *)&__C, v607);
      v498 = log10f((float)(*(float *)&__C.realp + 1.0e-20) / (float)(*(float *)(v667 + 516) + 1.0e-20)) * -10.0;
      *(float *)(v667 + 600) = v498;
      if (v498 >= -0.5)
      {
        v499 = v488;
      }
      else
      {
        *(_DWORD *)(v667 + 576) = 1;
        v499 = v664;
        a1[2] = v664;
        a1[4] = v488;
        *(_DWORD *)(v667 + 40) = v492;
        *(_DWORD *)(v667 + 512) = v492;
      }
      v500 = *(_OWORD *)__Db;
      v501 = *(_OWORD *)v658;
      v493 = v499;
      v411 = v692;
      goto LABEL_487;
    }
  }
  else
  {
    v493 = v488;
  }
  v411 = v692;
  v500 = *(_OWORD *)__Db;
  v501 = *(_OWORD *)v658;
LABEL_487:
  v502 = v667;
  *(_DWORD *)(v667 + 584) = 0;
  v650 = v493;
  if (*(_DWORD *)(v667 + 580))
  {
LABEL_488:
    *(_DWORD *)(v502 + 588) = 1;
    v376 = v502;
    v413 = v651;
    goto LABEL_491;
  }
  if (v416)
  {
    v502 = v667;
    if (*(float *)(v667 + 404) <= 0.02 && *(_DWORD *)(v390 + 104) != 3)
      goto LABEL_488;
  }
  else
  {
    v502 = v667;
    if ((v418 & 1) == 0)
      goto LABEL_488;
  }
  __ne = v415;
  *(_DWORD *)(v502 + 584) = 1;
  v536 = a1[5];
  v537 = v502;
  if (*(_DWORD *)(v502 + 588) == 1)
  {
    *(_DWORD *)(v502 + 588) = 0;
    v538 = 4 * *((_DWORD *)v536 + 22);
    memcpy(*(void **)v536, *(const void **)v493, v538);
    memcpy(*((void **)v536 + 1), *((const void **)v493 + 1), v538);
    memcpy(*((void **)v536 + 2), *((const void **)v493 + 2), v538);
    memcpy(*((void **)v536 + 3), *((const void **)v493 + 3), v538);
    memcpy(*((void **)v536 + 6), *((const void **)v493 + 6), v538);
    *((_QWORD *)v536 + 9) = *((_QWORD *)v493 + 9);
  }
  v539 = *(unsigned __int8 *)(v390 + 176);
  v540 = 2.5;
  if (v539)
    v540 = 1.25;
  v592 = v540;
  v666 = (float *)(v537 + 520);
  v541 = (float *)(v537 + 560);
  v617 = !v417;
  v542 = 1.0;
  v543 = 1;
  do
  {
    *((float *)&v562 + 1) = v691[15];
    *(float *)&v564 = v493[9];
    LODWORD(v562) = (_DWORD)v619;
    lmsfilt_v5::runLmsFilter_v5(v689, __Ng, (DSPSplitComplex *)*((unsigned int *)v691 + 4), *((_QWORD *)v536 + 2), *((_QWORD *)v536 + 3), (uint64_t)v692[2], (float *)v692[3], (float *)v692[11], *((float **)v536 + 9), v562, v564, (unsigned __int8 *)v692[16], __Af, v692[20], *((_BYTE *)v692 + 168), v566, v568, v570, v572,
      v574);
    dft_v5::dftSynthesis(*((float **)v651 + 43), *((float **)v651 + 44), (uint64_t)v691);
    aec_v5::get_EchoEst_Err((DSPComplex *)v639[0], (float *)__lene[0], (float *)(*((_QWORD *)v651 + 43) + 4 * v618), (float *)(*((_QWORD *)v651 + 44) + 4 * v618), *((const float **)v651 + 19), (uint64_t)v691);
    if (*((_BYTE *)v692 + 168))
    {
      dft_v5::dftSynthesis(*((float **)v651 + 45), *((float **)v651 + 46), (uint64_t)v691);
      aec_v5::get_EchoEst_Err((DSPComplex *)v639[1], (float *)__lene[1], (float *)(*((_QWORD *)v651 + 45) + 4 * v618), (float *)(*((_QWORD *)v651 + 46) + 4 * v618), *((const float **)v651 + 19), (uint64_t)v691);
    }
    v544 = *((int *)v691 + 4);
    v545 = 1;
    vDSP_svesq((const float *)__lene[0], 1, v666, v544);
    vDSP_svesq((const float *)v639[0], 1, v541, v544);
    v546 = *(float *)(v667 + 520);
    v547 = v546 + 1.0e-20;
    v548 = log10(v547 / (*(float *)(v667 + 36) + 1.0e-20)) * 10.0;
    *(float *)(v667 + 524) = v548;
    v549 = log10(v547 / (*(float *)(v667 + 220) + 1.0e-20)) * 10.0;
    *(float *)(v667 + 528) = v549;
    *(_DWORD *)(v667 + 548) = 0;
    v550 = 0.0;
    if (v548 < -1.0 && v549 < -1.0)
    {
      if (*(float *)(v611 + 248) >= 0.0
        || *(float *)(v667 + 536) >= 0.0
        || (float)(*v541 / v589) <= 0.0000001
        || *v541 >= (float)(*(float *)(v667 + 24) * 10.0))
      {
        v545 = 1;
      }
      else
      {
        v545 = 0;
        *(_DWORD *)(v667 + 548) = 1065353216;
        v550 = 1.0;
      }
    }
    if (*((_DWORD *)v691 + 26) == 3
      && v548 < -0.25
      && v550 == 0.0
      && v549 < -0.25
      && *(float *)(v611 + 248) < 0.0
      && *(float *)(v667 + 536) < 0.0)
    {
      *(_DWORD *)(v667 + 548) = 1065353216;
    }
    else if (v550 != v542)
    {
      goto LABEL_556;
    }
    v552 = (*(float *)(v667 + 560) + 1.0e-13) / (v546 + 1.0e-13);
    *(float *)(v667 + 604) = log10f(v552) * 10.0;
    *(_DWORD *)(v667 + 592) = 1;
    __ne = v546;
    *(_OWORD *)__Db = *(_OWORD *)__lene;
    *(_OWORD *)v658 = *(_OWORD *)v639;
LABEL_556:
    if (v548 <= 4.0)
    {
      learnrate_v4::updateStatistics_echo(*((_DWORD *)v691 + 4), (const float *)__lene[0], (const float *)v639[0], (float *)v667);
      dft_v5::dftGenericAnalysis2ndHalf((const DSPComplex *)__lene[0], v613, v612, (uint64_t)v691, 1);
      dft_v5::dftGenericAnalysis2ndHalf_dsc((const void *)(*((_QWORD *)v651 + 43) + 4 * v618), (const void *)(*((_QWORD *)v651 + 44) + 4 * v618), v610, v609, (int *)v691);
      v554 = fminf(fmaxf(v592 * *(float *)(v667 + 144), 0.5), 1.0);
      v542 = 1.0;
      *(float *)(v667 + 140) = fminf(v592 * *(float *)(v667 + 140), 1.0);
      *(float *)(v667 + 144) = v554;
      learnrate_v4::getAdaptationRate4_v6(v667);
      learnrate_v5::adaptLmsFilter_v4((uint64_t)v613);
      v493 = v650;
    }
    else
    {
      v493 = v650;
      if (((v545 | v617) & 1) == 0)
      {
        v553 = 4 * *((_DWORD *)v536 + 22);
        memcpy(*(void **)v536, *(const void **)v650, v553);
        memcpy(*((void **)v536 + 1), *((const void **)v650 + 1), v553);
        memcpy(*((void **)v536 + 2), *((const void **)v650 + 2), v553);
        memcpy(*((void **)v536 + 3), *((const void **)v650 + 3), v553);
        memcpy(*((void **)v536 + 6), *((const void **)v650 + 6), v553);
        *((_QWORD *)v536 + 9) = *((_QWORD *)v650 + 9);
      }
    }
    v555 = (v539 != 0) & v543;
    v543 = 0;
  }
  while ((v555 & 1) != 0);
  v411 = v692;
  v390 = (uint64_t)v691;
  v376 = v667;
  v413 = v651;
  v500 = *(_OWORD *)__Db;
  v501 = *(_OWORD *)v658;
  v415 = __ne;
LABEL_491:
  v503 = *v606;
  v504 = *v606 * 3.0;
  v505 = (float *)v500;
  if (v415 > v504)
    v505 = (float *)*((_QWORD *)v413 + 19);
  __D_8 = (float *)*((_QWORD *)&v500 + 1);
  *(_OWORD *)v659 = v501;
  if (*(int *)(v390 + 124) >= 1)
  {
    if (*(float *)(v376 + 40) <= v504
      || *(float *)(v376 + 604) <= -3.0
      || *(float *)(v376 + 16) <= -70.0
      || (v506 = *(float *)(v376 + 24), v506 <= (float)(v503 * 8.0))
      || (float)(v257 / v589) <= 0.00000001
      || *(int *)(v376 + 624) < 2)
    {
      *(_QWORD *)(v376 + 616) = 0;
    }
    else
    {
      v507 = *(float *)(v390 + 24);
      v508 = v507 + *(float *)(v376 + 616);
      *(float *)(v376 + 616) = v508;
      if (v506 > (float)(v503 * 32.0))
        *(float *)(v376 + 620) = v507 + *(float *)(v376 + 620);
      if (v508 > 100.0)
      {
        LODWORD(__C.realp) = 1056964608;
        if (*(float *)(v376 + 620) > 100.0)
          LODWORD(__C.realp) = 1048576000;
        v509 = (const float **)v650;
        v510 = *((int *)v650 + 22);
        vDSP_vsmul(*(const float **)v650, 1, (const float *)&__C, *(float **)v650, 1, v510);
        vDSP_vsmul(v509[1], 1, (const float *)&__C, (float *)v509[1], 1, v510);
        vDSP_vsmul(v509[2], 1, (const float *)&__C, (float *)v509[2], 1, v510);
        vDSP_vsmul(v509[3], 1, (const float *)&__C, (float *)v509[3], 1, v510);
        vDSP_vsmul(v509[6], 1, (const float *)&__C, (float *)v509[6], 1, v510);
        *(_QWORD *)(v376 + 616) = 0;
        *(_QWORD *)&v501 = v659[0];
      }
    }
  }
  if (*(_BYTE *)(v390 + 177))
  {
    if (*(float *)(v376 + 548) == 1.0)
    {
      v511 = (DSPSplitComplex *)(v413 + 82);
      v512 = (DSPSplitComplex *)(v413 + 86);
      v513 = (float **)(v413 + 90);
      v514 = (DSPComplex *)*((_QWORD *)v651 + 47);
      v515 = (DSPComplex *)*((_QWORD *)v651 + 48);
      v516 = (float *)*((_QWORD *)v651 + 49);
      v517 = (float *)*((_QWORD *)v651 + 50);
      HIDWORD(v560) = *(_DWORD *)(v390 + 60);
      *(float *)&v564 = v650[9];
      LODWORD(v560) = (_DWORD)v619;
      lmsfilt_v5::runLmsFilter_v5(v511, v512, (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((_QWORD *)a1[5] + 2), *((_QWORD *)a1[5] + 3), (uint64_t)v411[2], (float *)v411[3], (float *)v411[11], *((float **)a1[5] + 9), v560, v564, (unsigned __int8 *)v411[16], v513, v411[20], *((_BYTE *)v411 + 168), v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v651 + 43), *((float **)v651 + 44), v390);
      v518 = v514;
      v413 = v651;
      v519 = v516;
      v376 = v667;
      aec_v5::get_EchoEst_Err(v518, v519, (float *)(*((_QWORD *)v651 + 43) + 4 * v618), (float *)(*((_QWORD *)v651 + 44) + 4 * v618), *((const float **)v651 + 19), v390);
      *(_QWORD *)&v501 = v659[0];
      if (*((_BYTE *)v411 + 168))
      {
        dft_v5::dftSynthesis(*((float **)v651 + 45), *((float **)v651 + 46), v390);
        v520 = (float *)(*((_QWORD *)v651 + 45) + 4 * v618);
        v521 = (float *)(*((_QWORD *)v651 + 46) + 4 * v618);
        v522 = (const float *)*((_QWORD *)v651 + 19);
        v523 = v515;
        v524 = v517;
        goto LABEL_513;
      }
    }
    else
    {
      HIDWORD(v561) = *(_DWORD *)(v390 + 60);
      *(float *)&v564 = v650[9];
      LODWORD(v561) = (_DWORD)v619;
      lmsfilt_v5::runLmsFilter_v5(v601, v599, (DSPSplitComplex *)*(unsigned int *)(v390 + 16), *((_QWORD *)v650 + 2), *((_QWORD *)v650 + 3), (uint64_t)v411[2], (float *)v411[3], (float *)v411[11], *((float **)v650 + 9), v561, v564, (unsigned __int8 *)v411[16], v598, v411[20], *((_BYTE *)v411 + 168), v566, v568, v570, v572,
        v574);
      dft_v5::dftSynthesis(*((float **)v413 + 4), *((float **)v413 + 5), v390);
      aec_v5::get_EchoEst_Err(v605, (float *)v608, (float *)(*((_QWORD *)v413 + 4) + 4 * v618), (float *)(*((_QWORD *)v413 + 5) + 4 * v618), *((const float **)v413 + 19), v390);
      *(_QWORD *)&v501 = v659[0];
      if (*((_BYTE *)v411 + 168))
      {
        dft_v5::dftSynthesis(*((float **)v413 + 6), *((float **)v413 + 7), v390);
        v520 = (float *)(*((_QWORD *)v413 + 6) + 4 * v618);
        v521 = (float *)(*((_QWORD *)v413 + 7) + 4 * v618);
        v522 = (const float *)*((_QWORD *)v413 + 19);
        v524 = v580;
        v523 = v581;
LABEL_513:
        aec_v5::get_EchoEst_Err(v523, v524, v520, v521, v522, v390);
        *(_QWORD *)&v501 = v659[0];
      }
    }
  }
  v525 = (const float *)v501;
  lmsfilt_v5::deemphasisFilterDuo((lmsfilt_v5 *)v593, (float *)v501, v603 + 4, v594, v505, v603 + 3, a8, v414);
  if (*((_BYTE *)v411 + 168))
  {
    lmsfilt_v5::deemphasisFilterDuo((lmsfilt_v5 *)v593, (float *)v659[1], v603 + 5, v578, __D_8, v603 + 7, v579, v526);
    vDSP_vsub((const float *)v659[1], 1, v525, 1, *((float **)v413 + 14), 1, v607);
  }
  *a4 = *(_DWORD *)(v376 + 148);
  *a5 = *(_DWORD *)(v376 + 376);
  *a9 = *(_DWORD *)(v376 + 604);
  *a12 = *(_DWORD *)(v376 + 140);
  v528 = *(_DWORD *)(v390 + 48);
  if (v528 <= 1)
    v529 = 1;
  else
    v529 = *(_DWORD *)(v390 + 48);
  v527 = *((_DWORD *)v411 + 18) + 1;
  v530 = v527
       + v528
       + v528 * (((v527 & ~(v527 >> 31)) - (v527 + (v527 >> 31))) / v529 + (v527 >> 31));
  do
    v530 -= v528;
  while (v530 >= (int)v528);
  *((_DWORD *)v411 + 18) = v530;
  v531 = *((_DWORD *)v411 + 20);
  v532 = v531 + 1;
  v533 = (((v531 + 1) & ~((v531 + 1) >> 31))
        - (v531
         + 1
         + ((v531 + 1) >> 31))
        + 2 * ((v531 + 1) >> 31)) & 0xFFFFFFFE;
  v534 = v531 + v533;
  v535 = v533 + v532;
  if (v535 >= 1)
    v535 = 1;
  *((_DWORD *)v411 + 20) = v534 - ((v534 - v535 + 2) & 0xFFFFFFFE) + 1;
}

void CartesianPannerNN::panAtmos906Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _OWORD v10[2];
  _OWORD v11[2];
  _DWORD v12[5];
  __int128 v13;
  int v14;
  float v15;
  float v16[8];
  float v17[120];
  _OWORD v18[2];
  float v19[15];
  float __dst[150];
  _OWORD v21[2];
  _OWORD v22[2];
  float v23[10];
  _OWORD v24[12];
  uint64_t v25;
  _OWORD v26[2];
  unint64_t v27;
  float __C[5];
  _OWORD v29[5];
  __int128 __B;
  int v31;
  float __D[4];
  float __A[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v12[0] = 4;
  *(_OWORD *)&v12[1] = xmmword_1B66A12B0;
  v13 = xmmword_1B66A12C0;
  v14 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v12[1], 1, (const float *)&v13, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v14, __D, 1, 4uLL);
  v31 = 1074682858;
  v29[2] = xmmword_1B6649D7C;
  v29[3] = unk_1B6649D8C;
  v29[4] = xmmword_1B6649D9C;
  __B = xmmword_1B6649D48;
  v29[0] = xmmword_1B6649D5C;
  v29[1] = unk_1B6649D6C;
  vDSP_mmul((const float *)v29, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v26[0] = xmmword_1B6649DAC;
  v26[1] = unk_1B6649DBC;
  v27 = 0xC1A9E704C1278D50;
  v24[10] = xmmword_1B6649E74;
  v24[11] = unk_1B6649E84;
  v25 = 0x3F168251C0AB6EC1;
  v24[6] = xmmword_1B6649E34;
  v24[7] = unk_1B6649E44;
  v24[8] = xmmword_1B6649E54;
  v24[9] = unk_1B6649E64;
  v24[2] = xmmword_1B6649DF4;
  v24[3] = unk_1B6649E04;
  v24[4] = xmmword_1B6649E14;
  v24[5] = unk_1B6649E24;
  v24[0] = xmmword_1B6649DD4;
  v24[1] = unk_1B6649DE4;
  vDSP_mmul((const float *)v24, 1, __C, 1, v23, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v23, 1, (const float *)v26, 1, v23, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v23[j] = (float)(2.0 / (float)(expf(v23[j] * -2.0) + 1.0)) + -1.0;
  v21[0] = xmmword_1B6649E9C;
  v21[1] = unk_1B6649EAC;
  v22[0] = xmmword_1B6649EBC;
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)&xmmword_1B6649EBC + 12);
  memcpy(__dst, &unk_1B6649ED8, sizeof(__dst));
  vDSP_mmul(__dst, 1, v23, 1, v19, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v19, 1, (const float *)v21, 1, v19, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v19[k] = (float)(2.0 / (float)(expf(v19[k] * -2.0) + 1.0)) + -1.0;
  v18[0] = xmmword_1B664A130;
  v18[1] = unk_1B664A140;
  memcpy(v17, &unk_1B664A150, sizeof(v17));
  vDSP_mmul(v17, 1, v19, 1, v16, 1, 8uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v16, 1, (const float *)v18, 1, v16, 1, 8uLL);
  v10[0] = xmmword_1B664A39C;
  v10[1] = unk_1B664A3AC;
  v11[0] = xmmword_1B664A3BC;
  v11[1] = unk_1B664A3CC;
  v15 = 1.0;
  vDSP_vsadd(v16, 1, &v15, (float *)this, 1, 8uLL);
  vDSP_vdiv((const float *)v10, 1, (const float *)this, 1, (float *)this, 1, 8uLL);
  vDSP_vadd((const float *)this, 1, (const float *)v11, 1, (float *)this, 1, 8uLL);
}

void sub_1B624CB00(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos704Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _DWORD v14[5];
  __int128 v15;
  int v16;
  float v17;
  float v18[6];
  float v19[90];
  __int128 v20;
  unint64_t v21;
  float v22[15];
  float __dst[150];
  _OWORD v24[2];
  _OWORD v25[2];
  float v26[10];
  _OWORD v27[12];
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  float __C[5];
  _OWORD v32[5];
  __int128 __B;
  int v34;
  float __D[4];
  float __A[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v14[0] = 4;
  *(_OWORD *)&v14[1] = xmmword_1B66A12B0;
  v15 = xmmword_1B66A12C0;
  v16 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v14[1], 1, (const float *)&v15, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v16, __D, 1, 4uLL);
  v34 = 1066657309;
  v32[2] = xmmword_1B6649814;
  v32[3] = unk_1B6649824;
  v32[4] = xmmword_1B6649834;
  __B = xmmword_1B66497E0;
  v32[0] = xmmword_1B66497F4;
  v32[1] = unk_1B6649804;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1B6649844;
  v29[1] = unk_1B6649854;
  v30 = 0x42515653416462B7;
  v27[10] = xmmword_1B664990C;
  v27[11] = unk_1B664991C;
  v28 = 0x3CD09C65C271BBCDLL;
  v27[6] = xmmword_1B66498CC;
  v27[7] = unk_1B66498DC;
  v27[8] = xmmword_1B66498EC;
  v27[9] = unk_1B66498FC;
  v27[2] = xmmword_1B664988C;
  v27[3] = unk_1B664989C;
  v27[4] = xmmword_1B66498AC;
  v27[5] = unk_1B66498BC;
  v27[0] = xmmword_1B664986C;
  v27[1] = unk_1B664987C;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1B6649934;
  v24[1] = unk_1B6649944;
  v25[0] = xmmword_1B6649954;
  *(_OWORD *)((char *)v25 + 12) = *(__int128 *)((char *)&xmmword_1B6649954 + 12);
  memcpy(__dst, &unk_1B6649970, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  v20 = xmmword_1B6649BC8;
  v21 = 0xC09B02F3C1175C7DLL;
  memcpy(v19, &unk_1B6649BE0, sizeof(v19));
  vDSP_mmul(v19, 1, v22, 1, v18, 1, 6uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v18, 1, (const float *)&v20, 1, v18, 1, 6uLL);
  v10 = xmmword_1B664A36C;
  v11 = 0x4001C5824001C582;
  v12 = xmmword_1B664A384;
  v13 = 0x381098ED381098EDLL;
  v17 = 1.0;
  vDSP_vsadd(v18, 1, &v17, (float *)this, 1, 6uLL);
  vDSP_vdiv((const float *)&v10, 1, (const float *)this, 1, (float *)this, 1, 6uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v12, 1, (float *)this, 1, 6uLL);
}

void sub_1B624CF8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos702Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  _DWORD v14[5];
  __int128 v15;
  int v16;
  float v17;
  float v18[5];
  float v19[75];
  __int128 v20;
  int v21;
  float v22[15];
  float __dst[150];
  _OWORD v24[2];
  _OWORD v25[2];
  float v26[10];
  _OWORD v27[12];
  unint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  float __C[5];
  _OWORD v32[5];
  __int128 __B;
  int v34;
  float __D[4];
  float __A[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v14[0] = 4;
  *(_OWORD *)&v14[1] = xmmword_1B66A12B0;
  v15 = xmmword_1B66A12C0;
  v16 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v14[1], 1, (const float *)&v15, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v16, __D, 1, 4uLL);
  v34 = 1067328649;
  v32[2] = xmmword_1B66492EC;
  v32[3] = unk_1B66492FC;
  v32[4] = xmmword_1B664930C;
  __B = xmmword_1B66492B8;
  v32[0] = xmmword_1B66492CC;
  v32[1] = unk_1B66492DC;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1B664931C;
  v29[1] = unk_1B664932C;
  v30 = 0x3E703B823F0C02E2;
  v27[10] = xmmword_1B66493E4;
  v27[11] = unk_1B66493F4;
  v28 = 0xBFF32CA5BFB925EELL;
  v27[6] = xmmword_1B66493A4;
  v27[7] = unk_1B66493B4;
  v27[8] = xmmword_1B66493C4;
  v27[9] = unk_1B66493D4;
  v27[2] = xmmword_1B6649364;
  v27[3] = unk_1B6649374;
  v27[4] = xmmword_1B6649384;
  v27[5] = unk_1B6649394;
  v27[0] = xmmword_1B6649344;
  v27[1] = unk_1B6649354;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1B664940C;
  v24[1] = unk_1B664941C;
  v25[0] = xmmword_1B664942C;
  *(_OWORD *)((char *)v25 + 12) = *(__int128 *)((char *)&xmmword_1B664942C + 12);
  memcpy(__dst, &unk_1B6649448, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  v21 = 1043507737;
  v20 = xmmword_1B66496A0;
  memcpy(v19, &unk_1B66496B4, sizeof(v19));
  vDSP_mmul(v19, 1, v22, 1, v18, 1, 5uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v18, 1, (const float *)&v20, 1, v18, 1, 5uLL);
  v11 = 1074619650;
  v10 = xmmword_1B664A344;
  v13 = 940611821;
  v12 = xmmword_1B664A358;
  v17 = 1.0;
  vDSP_vsadd(v18, 1, &v17, (float *)this, 1, 5uLL);
  vDSP_vdiv((const float *)&v10, 1, (const float *)this, 1, (float *)this, 1, 5uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v12, 1, (float *)this, 1, 5uLL);
}

void sub_1B624D424(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos700Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _DWORD v10[5];
  __int128 v11;
  int v12;
  _DWORD v13[5];
  __int128 v14;
  int v15;
  float v16;
  float v17[4];
  _OWORD v18[15];
  __int128 v19;
  float v20[15];
  float __dst[150];
  _OWORD v22[2];
  _OWORD v23[2];
  float v24[10];
  _OWORD v25[12];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  float __C[5];
  _OWORD v30[5];
  __int128 __B;
  int v32;
  float __D[4];
  float __A[4];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v13[0] = 4;
  *(_OWORD *)&v13[1] = xmmword_1B66A12B0;
  v14 = xmmword_1B66A12C0;
  v15 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v13[1], 1, (const float *)&v14, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v15, __D, 1, 4uLL);
  v32 = -1086603607;
  v30[2] = xmmword_1B6648E14;
  v30[3] = unk_1B6648E24;
  v30[4] = xmmword_1B6648E34;
  __B = xmmword_1B6648DE0;
  v30[0] = xmmword_1B6648DF4;
  v30[1] = unk_1B6648E04;
  vDSP_mmul((const float *)v30, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v27[0] = xmmword_1B6648E44;
  v27[1] = unk_1B6648E54;
  v28 = 0x40102D0E404A0A52;
  v25[10] = xmmword_1B6648F0C;
  v25[11] = unk_1B6648F1C;
  v26 = 0x40B9ADD63F32ECD0;
  v25[6] = xmmword_1B6648ECC;
  v25[7] = unk_1B6648EDC;
  v25[8] = xmmword_1B6648EEC;
  v25[9] = unk_1B6648EFC;
  v25[2] = xmmword_1B6648E8C;
  v25[3] = unk_1B6648E9C;
  v25[4] = xmmword_1B6648EAC;
  v25[5] = unk_1B6648EBC;
  v25[0] = xmmword_1B6648E6C;
  v25[1] = unk_1B6648E7C;
  vDSP_mmul((const float *)v25, 1, __C, 1, v24, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v24, 1, (const float *)v27, 1, v24, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v24[j] = (float)(2.0 / (float)(expf(v24[j] * -2.0) + 1.0)) + -1.0;
  v22[0] = xmmword_1B6648F34;
  v22[1] = unk_1B6648F44;
  v23[0] = xmmword_1B6648F54;
  *(_OWORD *)((char *)v23 + 12) = *(__int128 *)((char *)&xmmword_1B6648F54 + 12);
  memcpy(__dst, &unk_1B6648F70, sizeof(__dst));
  vDSP_mmul(__dst, 1, v24, 1, v20, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v20, 1, (const float *)v22, 1, v20, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v20[k] = (float)(2.0 / (float)(expf(v20[k] * -2.0) + 1.0)) + -1.0;
  v18[12] = xmmword_1B6649288;
  v18[13] = unk_1B6649298;
  v18[14] = xmmword_1B66492A8;
  v19 = xmmword_1B66A2A60;
  v18[8] = xmmword_1B6649248;
  v18[9] = unk_1B6649258;
  v18[10] = xmmword_1B6649268;
  v18[11] = unk_1B6649278;
  v18[4] = xmmword_1B6649208;
  v18[5] = unk_1B6649218;
  v18[6] = xmmword_1B6649228;
  v18[7] = unk_1B6649238;
  v18[0] = xmmword_1B66491C8;
  v18[1] = unk_1B66491D8;
  v18[2] = xmmword_1B66491E8;
  v18[3] = unk_1B66491F8;
  vDSP_mmul((const float *)v18, 1, v20, 1, v17, 1, 4uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v17, 1, (const float *)&v19, 1, v17, 1, 4uLL);
  *(_OWORD *)&v10[1] = xmmword_1B66A12D0;
  v11 = xmmword_1B66A12E0;
  v12 = 940611821;
  v16 = 1.0;
  vDSP_vsadd(v17, 1, &v16, (float *)this, 1, 4uLL);
  vDSP_vdiv((const float *)&v10[2], 1, (const float *)this, 1, (float *)this, 1, 4uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v11 + 1, 1, (float *)this, 1, 4uLL);
}

void sub_1B624D8C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos504Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  _DWORD v14[5];
  __int128 v15;
  int v16;
  float v17;
  float v18[5];
  float v19[75];
  __int128 v20;
  int v21;
  float v22[15];
  float __dst[150];
  _OWORD v24[2];
  _OWORD v25[2];
  float v26[10];
  _OWORD v27[12];
  uint64_t v28;
  _OWORD v29[2];
  unint64_t v30;
  float __C[5];
  _OWORD v32[5];
  __int128 __B;
  int v34;
  float __D[4];
  float __A[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v14[0] = 4;
  *(_OWORD *)&v14[1] = xmmword_1B66A12B0;
  v15 = xmmword_1B66A12C0;
  v16 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v14[1], 1, (const float *)&v15, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v16, __D, 1, 4uLL);
  v34 = 1069091767;
  v32[2] = xmmword_1B66488EC;
  v32[3] = unk_1B66488FC;
  v32[4] = xmmword_1B664890C;
  __B = xmmword_1B66488B8;
  v32[0] = xmmword_1B66488CC;
  v32[1] = unk_1B66488DC;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1B664891C;
  v29[1] = unk_1B664892C;
  v30 = 0xC185B40541A38275;
  v27[10] = xmmword_1B66489E4;
  v27[11] = unk_1B66489F4;
  v28 = 0x42018241C11ACAACLL;
  v27[6] = xmmword_1B66489A4;
  v27[7] = unk_1B66489B4;
  v27[8] = xmmword_1B66489C4;
  v27[9] = unk_1B66489D4;
  v27[2] = xmmword_1B6648964;
  v27[3] = unk_1B6648974;
  v27[4] = xmmword_1B6648984;
  v27[5] = unk_1B6648994;
  v27[0] = xmmword_1B6648944;
  v27[1] = unk_1B6648954;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1B6648A0C;
  v24[1] = unk_1B6648A1C;
  v25[0] = xmmword_1B6648A2C;
  *(_OWORD *)((char *)v25 + 12) = *(__int128 *)((char *)&xmmword_1B6648A2C + 12);
  memcpy(__dst, &unk_1B6648A48, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  v21 = -1059880803;
  v20 = xmmword_1B6648CA0;
  memcpy(v19, &unk_1B6648CB4, sizeof(v19));
  vDSP_mmul(v19, 1, v22, 1, v18, 1, 5uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v18, 1, (const float *)&v20, 1, v18, 1, 5uLL);
  v11 = 1075454526;
  v10 = xmmword_1B664A330;
  v13 = 940611821;
  v12 = xmmword_1B664A358;
  v17 = 1.0;
  vDSP_vsadd(v18, 1, &v17, (float *)this, 1, 5uLL);
  vDSP_vdiv((const float *)&v10, 1, (const float *)this, 1, (float *)this, 1, 5uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v12, 1, (float *)this, 1, 5uLL);
}

void sub_1B624DD5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos502Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _DWORD v10[5];
  __int128 v11;
  int v12;
  _DWORD v13[5];
  __int128 v14;
  int v15;
  float v16;
  float v17[4];
  _OWORD v18[15];
  __int128 v19;
  float v20[15];
  float __dst[150];
  _OWORD v22[2];
  _OWORD v23[2];
  float v24[10];
  _OWORD v25[12];
  unint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  float __C[5];
  _OWORD v30[5];
  __int128 __B;
  int v32;
  float __D[4];
  float __A[4];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v13[0] = 4;
  *(_OWORD *)&v13[1] = xmmword_1B66A12B0;
  v14 = xmmword_1B66A12C0;
  v15 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v13[1], 1, (const float *)&v14, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v15, __D, 1, 4uLL);
  v32 = 1059530213;
  v30[2] = xmmword_1B6648414;
  v30[3] = unk_1B6648424;
  v30[4] = xmmword_1B6648434;
  __B = xmmword_1B66483E0;
  v30[0] = xmmword_1B66483F4;
  v30[1] = unk_1B6648404;
  vDSP_mmul((const float *)v30, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v27[0] = xmmword_1B6648444;
  v27[1] = unk_1B6648454;
  v28 = 0x405C1284408482D4;
  v25[10] = xmmword_1B664850C;
  v25[11] = unk_1B664851C;
  v26 = 0xBEBA8390BF73FF9BLL;
  v25[6] = xmmword_1B66484CC;
  v25[7] = unk_1B66484DC;
  v25[8] = xmmword_1B66484EC;
  v25[9] = unk_1B66484FC;
  v25[2] = xmmword_1B664848C;
  v25[3] = unk_1B664849C;
  v25[4] = xmmword_1B66484AC;
  v25[5] = unk_1B66484BC;
  v25[0] = xmmword_1B664846C;
  v25[1] = unk_1B664847C;
  vDSP_mmul((const float *)v25, 1, __C, 1, v24, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v24, 1, (const float *)v27, 1, v24, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v24[j] = (float)(2.0 / (float)(expf(v24[j] * -2.0) + 1.0)) + -1.0;
  v22[0] = xmmword_1B6648534;
  v22[1] = unk_1B6648544;
  v23[0] = xmmword_1B6648554;
  *(_OWORD *)((char *)v23 + 12) = *(__int128 *)((char *)&xmmword_1B6648554 + 12);
  memcpy(__dst, &unk_1B6648570, sizeof(__dst));
  vDSP_mmul(__dst, 1, v24, 1, v20, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v20, 1, (const float *)v22, 1, v20, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v20[k] = (float)(2.0 / (float)(expf(v20[k] * -2.0) + 1.0)) + -1.0;
  v18[12] = xmmword_1B6648888;
  v18[13] = unk_1B6648898;
  v18[14] = xmmword_1B66488A8;
  v19 = xmmword_1B66A2A50;
  v18[8] = xmmword_1B6648848;
  v18[9] = unk_1B6648858;
  v18[10] = xmmword_1B6648868;
  v18[11] = unk_1B6648878;
  v18[4] = xmmword_1B6648808;
  v18[5] = unk_1B6648818;
  v18[6] = xmmword_1B6648828;
  v18[7] = unk_1B6648838;
  v18[0] = xmmword_1B66487C8;
  v18[1] = unk_1B66487D8;
  v18[2] = xmmword_1B66487E8;
  v18[3] = unk_1B66487F8;
  vDSP_mmul((const float *)v18, 1, v20, 1, v17, 1, 4uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v17, 1, (const float *)&v19, 1, v17, 1, 4uLL);
  *(_OWORD *)&v10[1] = xmmword_1B66A12F0;
  v11 = xmmword_1B66A1300;
  v12 = 940611821;
  v16 = 1.0;
  vDSP_vsadd(v17, 1, &v16, (float *)this, 1, 4uLL);
  vDSP_vdiv((const float *)&v10[2], 1, (const float *)this, 1, (float *)this, 1, 4uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v11 + 1, 1, (float *)this, 1, 4uLL);
}

void sub_1B624E1FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CartesianPannerNN::panAtmos500Side(CartesianPannerNN *this, float a2, float a3, float a4, float a5, float *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _DWORD v10[5];
  int32x2_t v11;
  int v12;
  _DWORD v13[5];
  __int128 v14;
  int v15;
  float v16;
  float v17[3];
  _OWORD v18[11];
  int v19;
  uint64_t v20;
  int v21;
  float v22[15];
  float __dst[150];
  _OWORD v24[2];
  _OWORD v25[2];
  float v26[10];
  _OWORD v27[12];
  uint64_t v28;
  _OWORD v29[2];
  unint64_t v30;
  float __C[5];
  _OWORD v32[5];
  __int128 __B;
  int v34;
  float __D[4];
  float __A[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  __A[0] = a2;
  __A[1] = a3;
  __A[2] = a4;
  __A[3] = a5;
  v13[0] = 4;
  *(_OWORD *)&v13[1] = xmmword_1B66A12B0;
  v14 = xmmword_1B66A12C0;
  v15 = -1082130432;
  vDSP_vsbm(__A, 1, (const float *)&v13[1], 1, (const float *)&v14, 1, __D, 1, 4uLL);
  vDSP_vsadd(__D, 1, (const float *)&v15, __D, 1, 4uLL);
  v34 = 1049795033;
  v32[2] = xmmword_1B6647F6C;
  v32[3] = unk_1B6647F7C;
  v32[4] = xmmword_1B6647F8C;
  __B = xmmword_1B6647F38;
  v32[0] = xmmword_1B6647F4C;
  v32[1] = unk_1B6647F5C;
  vDSP_mmul((const float *)v32, 1, __D, 1, __C, 1, 5uLL, 1uLL, 4uLL);
  vDSP_vadd(__C, 1, (const float *)&__B, 1, __C, 1, 5uLL);
  for (i = 0; i != 5; ++i)
    __C[i] = (float)(2.0 / (float)(expf(__C[i] * -2.0) + 1.0)) + -1.0;
  v29[0] = xmmword_1B6647F9C;
  v29[1] = unk_1B6647FAC;
  v30 = 0xC05DFE33BFBCF4C7;
  v27[10] = xmmword_1B6648064;
  v27[11] = unk_1B6648074;
  v28 = 0x4144C2F8C02AF1FELL;
  v27[6] = xmmword_1B6648024;
  v27[7] = unk_1B6648034;
  v27[8] = xmmword_1B6648044;
  v27[9] = unk_1B6648054;
  v27[2] = xmmword_1B6647FE4;
  v27[3] = unk_1B6647FF4;
  v27[4] = xmmword_1B6648004;
  v27[5] = unk_1B6648014;
  v27[0] = xmmword_1B6647FC4;
  v27[1] = unk_1B6647FD4;
  vDSP_mmul((const float *)v27, 1, __C, 1, v26, 1, 0xAuLL, 1uLL, 5uLL);
  vDSP_vadd(v26, 1, (const float *)v29, 1, v26, 1, 0xAuLL);
  for (j = 0; j != 10; ++j)
    v26[j] = (float)(2.0 / (float)(expf(v26[j] * -2.0) + 1.0)) + -1.0;
  v24[0] = xmmword_1B664808C;
  v24[1] = unk_1B664809C;
  v25[0] = xmmword_1B66480AC;
  *(_OWORD *)((char *)v25 + 12) = *(__int128 *)((char *)&xmmword_1B66480AC + 12);
  memcpy(__dst, &unk_1B66480C8, sizeof(__dst));
  vDSP_mmul(__dst, 1, v26, 1, v22, 1, 0xFuLL, 1uLL, 0xAuLL);
  vDSP_vadd(v22, 1, (const float *)v24, 1, v22, 1, 0xFuLL);
  for (k = 0; k != 15; ++k)
    v22[k] = (float)(2.0 / (float)(expf(v22[k] * -2.0) + 1.0)) + -1.0;
  v18[7] = unk_1B664839C;
  v18[8] = xmmword_1B66483AC;
  v18[9] = unk_1B66483BC;
  v18[10] = xmmword_1B66483CC;
  v18[3] = unk_1B664835C;
  v18[4] = xmmword_1B664836C;
  v18[5] = unk_1B664837C;
  v18[6] = xmmword_1B664838C;
  v18[0] = xmmword_1B664832C;
  v18[1] = unk_1B664833C;
  v21 = -1061062149;
  v20 = 0x420055813FD26D48;
  v18[2] = xmmword_1B664834C;
  v19 = 1053414079;
  vDSP_mmul((const float *)v18, 1, v22, 1, v17, 1, 3uLL, 1uLL, 0xFuLL);
  vDSP_vadd(v17, 1, (const float *)&v20, 1, v17, 1, 3uLL);
  *(_OWORD *)&v10[1] = xmmword_1B66A1310;
  v11 = vdup_n_s32(0x381098EDu);
  v12 = 940611821;
  v16 = 1.0;
  vDSP_vsadd(v17, 1, &v16, (float *)this, 1, 3uLL);
  vDSP_vdiv((const float *)&v10[2], 1, (const float *)this, 1, (float *)this, 1, 3uLL);
  vDSP_vadd((const float *)this, 1, (const float *)&v11, 1, (float *)this, 1, 3uLL);
}

void sub_1B624E6A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CDSPSplitComplex::resize(CDSPSplitComplex *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = 2 * a2;
  if (v2)
  {
    std::valarray<float>::resize((uint64_t)this + 16, v2, 0.0);
    v4 = *((_QWORD *)this + 2);
    v5 = v4 + 4 * ((*((_QWORD *)this + 3) - v4) >> 3);
    *(_QWORD *)this = v4;
    *((_QWORD *)this + 1) = v5;
  }
}

void FreqDomainConvolver::Reset(FreqDomainConvolver *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = (void *)*((_QWORD *)this + 17);
  v3 = *((_QWORD *)this + 18) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  v4 = (void *)*((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 15) - (_QWORD)v4;
  if (v5 >= 1)
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = (void *)*((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 9) - (_QWORD)v6;
  if (v7 >= 1)
    bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
}

void CDSPSplitComplex::~CDSPSplitComplex(CDSPSplitComplex *this)
{
  _BYTE *v2;
  _QWORD *v3;
  _BYTE *v4;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = (_BYTE *)*((_QWORD *)this + 2);
  if (v2)
  {
    v4 = (_BYTE *)v3[1];
    if (v4 != v2)
      *((_QWORD *)this + 3) = &v4[(v2 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *v3 = 0;
    v3[1] = 0;
  }
}

void FreqDomainConvolver::FreqDomainConvolver(FreqDomainConvolver *this, unsigned int a2)
{
  CDSPSplitComplex *v3;
  CDSPSplitComplex *v4;
  CDSPSplitComplex *v5;
  char *v6;
  char *v7;
  uint8x8_t v8;
  _BOOL4 v9;
  unsigned int v10;
  unint64_t v11;
  const DSPComplex *v12;
  float v13;
  float v14;
  CAXException *exception;
  CAXException *v16;
  float v17[4];
  _BYTE __p[18];
  __int16 v19;
  float *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 1) = 0u;
  v3 = (FreqDomainConvolver *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  v4 = (FreqDomainConvolver *)((char *)this + 48);
  *((_OWORD *)this + 5) = 0u;
  v5 = (FreqDomainConvolver *)((char *)this + 80);
  *((_OWORD *)this + 7) = 0u;
  v6 = (char *)this + 112;
  v7 = (char *)this + 136;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 40) = a2;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.i32[0] > 1u;
  if (v8.i32[0] >= 2u)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v17, v9);
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "FreqDomainConvolver.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 30;
      v19 = 2080;
      v20 = v17;
      v21 = 2080;
      v22 = "Block size must be power of 2";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", __p, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Block size must be power of 2", v9);
  }
  v10 = MultiRadixRealFFT::Initialize(this, 2 * a2);
  if (v10)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v17, v10);
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = "FreqDomainConvolver.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 31;
      v19 = 2080;
      v20 = v17;
      v21 = 2080;
      v22 = "FFT initialization failed";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", __p, 0x26u);
    }
    v16 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v16, "FFT initialization failed", v10);
  }
  CDSPSplitComplex::resize(v4, *((unsigned int *)this + 40));
  CDSPSplitComplex::resize(v5, *((unsigned int *)this + 40));
  CDSPSplitComplex::resize(v3, *((unsigned int *)this + 40));
  std::vector<float>::resize((uint64_t)v7, (2 * *((_DWORD *)this + 40)));
  std::vector<float>::resize((uint64_t)v6, *((unsigned int *)this + 40));
  v11 = *((unsigned int *)this + 40);
  v17[0] = 0.0;
  std::vector<float>::vector(__p, v11, v17);
  v12 = *(const DSPComplex **)__p;
  if (*(_QWORD *)&__p[8] == *(_QWORD *)__p)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  **(_DWORD **)__p = 1065353216;
  vDSP_ctoz(v12, 2, (const DSPSplitComplex *)v3, 1, (unint64_t)*((unsigned int *)this + 40) >> 1);
  if (*(_QWORD *)this)
    v13 = (float)**(unsigned int **)this;
  else
    v13 = 0.0;
  v17[0] = 1.0 / v13;
  vDSP_vsmul(*((const float **)this + 2), 1, v17, *((float **)this + 2), 1, *((unsigned int *)this + 40));
  vDSP_vsmul(*((const float **)this + 3), 1, v17, *((float **)this + 3), 1, *((unsigned int *)this + 40));
  MultiRadixRealFFT::RealInPlaceTransform(this, (DSPSplitComplex *)v3, 1, v14);
  FreqDomainConvolver::Reset(this);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
}

void sub_1B624EB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  CDSPSplitComplex *v13;
  CDSPSplitComplex *v14;
  CDSPSplitComplex *v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;

  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v12 + 144) = v19;
    operator delete(v19);
  }
  v20 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v12 + 120) = v20;
    operator delete(v20);
  }
  CDSPSplitComplex::~CDSPSplitComplex(v15);
  CDSPSplitComplex::~CDSPSplitComplex(v14);
  CDSPSplitComplex::~CDSPSplitComplex(v13);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void FreqDomainConvolver::Initialize(DSPSplitComplex *this, DSPComplex *__C, unint64_t a3)
{
  float *realp;
  uint64_t v7;
  unint64_t realp_low;
  _BOOL4 v9;
  float v10;
  float v11;
  CAXException *exception;
  CAXException *v14;
  _BYTE v15[16];
  float __B;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  _BYTE *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  realp = this[2].realp;
  v7 = (char *)this[2].imagp - (char *)realp;
  if (v7 >= 1)
    bzero(realp, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  if ((a3 & 1) != 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, a3 & 1);
      __B = 4.8153e-34;
      v17 = "FreqDomainConvolver.cpp";
      v18 = 1024;
      v19 = 57;
      v20 = 2080;
      v21 = v15;
      v22 = 2080;
      v23 = "Filter length must be even";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&__B, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Filter length must be even", a3 & 1);
  }
  realp_low = LODWORD(this[10].realp);
  v9 = realp_low < a3;
  if (realp_low < a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, v9);
      __B = 4.8153e-34;
      v17 = "FreqDomainConvolver.cpp";
      v18 = 1024;
      v19 = 58;
      v20 = 2080;
      v21 = v15;
      v22 = 2080;
      v23 = "Filter length must be less than or equal to block size";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&__B, 0x26u);
    }
    v14 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v14, "Filter length must be less than or equal to block size", v9);
  }
  vDSP_ctoz(__C, 2, this + 1, 1, a3 >> 1);
  if (this->realp)
    v10 = (float)*(unsigned int *)this->realp;
  else
    v10 = 0.0;
  __B = 1.0 / v10;
  vDSP_vsmul(this[1].realp, 1, &__B, this[1].realp, 1, LODWORD(this[10].realp));
  vDSP_vsmul(this[1].imagp, 1, &__B, this[1].imagp, 1, LODWORD(this[10].realp));
  MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)this, this + 1, 1, v11);
  FreqDomainConvolver::Reset((FreqDomainConvolver *)this);
}

void sub_1B624EEC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void FreqDomainConvolver::Process(DSPSplitComplex *this, const float *__src, float *a3, unint64_t a4, void **a5, DSPSplitComplex *a6)
{
  float *imagp;
  float *realp;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  const DSPComplex *v18;
  float v19;
  float v20;
  DSPComplex *v21;
  vDSP_Length v22;
  float *v23;
  float *v24;
  unint64_t v25;
  DSPSplitComplex v26;

  if (LODWORD(this[10].realp) >= a4)
  {
    imagp = this[8].imagp;
    realp = this[9].realp;
    v14 = a4;
    v15 = realp - imagp;
    v16 = &imagp[a4];
    if (v15 > a4 && realp != v16)
    {
      memmove(imagp, v16, (char *)realp - (char *)v16);
      imagp = this[8].imagp;
      v15 = this[9].realp - imagp;
    }
    if (v15 <= v15 - v14
      || (memcpy(&imagp[v15 - v14], __src, 4 * v14),
          v18 = (const DSPComplex *)this[8].imagp,
          (const DSPComplex *)this[9].realp == v18))
    {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    vDSP_ctoz(v18, 2, this + 3, 1, LODWORD(this[10].realp));
    MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)this, this + 3, 1, v19);
    if (a5)
    {
      memcpy(*a5, this[3].realp, 4 * LODWORD(this[10].realp));
      memcpy(a5[1], this[3].imagp, 4 * LODWORD(this[10].realp));
    }
    vDSP_zvmul(this + 3, 1, this + 1, 1, this + 5, 1, LODWORD(this[10].realp), 1);
    *this[5].realp = *this[3].realp * *this[1].realp;
    v20 = *this[3].imagp * *this[1].imagp;
    *this[5].imagp = v20;
    if (a3)
    {
      MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)this, this + 5, -1, v20);
      v21 = (DSPComplex *)this[7].realp;
      v22 = (unint64_t)LODWORD(this[10].realp) >> 1;
      v23 = &this[5].imagp[v22];
      v26.realp = &this[5].realp[v22];
      v26.imagp = v23;
      if ((DSPComplex *)this[7].imagp == v21
        || (vDSP_ztoc(&v26, 1, v21, 2, v22), v24 = this[7].realp, v25 = this[7].imagp - v24, v25 <= v25 - a4))
      {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      memcpy(a3, &v24[v25 - a4], 4 * a4);
    }
  }
}

void sub_1B624F1CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B624F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VPEmergencyCallStateObserver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B624F450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B624F550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B624F5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t Cns::deallocate_memory(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_DWORD *)this)
  {
    v1 = this;
    *(_DWORD *)this = 0;
    if (*(_QWORD *)(this + 208))
    {
      v2 = 0;
      v3 = 1;
      do
      {
        v4 = v3;
        v5 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 8 * v2);
        if (v5)
          MEMORY[0x1BCC95CC8](v5, 0x1000C8052888210);
        v3 = 0;
        v2 = 1;
      }
      while ((v4 & 1) != 0);
      v6 = *(_QWORD *)(v1 + 208);
      if (v6)
        MEMORY[0x1BCC95CC8](v6, 0x10C80436913F5);
      *(_QWORD *)(v1 + 208) = 0;
    }
    if (*(_QWORD *)(v1 + 328))
    {
      if (*(_DWORD *)(v1 + 4) + *(_DWORD *)(v1 + 28) < 1)
        goto LABEL_33;
      v7 = 0;
      v8 = 64;
      do
      {
        v9 = *(_QWORD *)(v1 + 328);
        v10 = *(_QWORD *)(v9 + v8 - 64);
        if (v10)
        {
          MEMORY[0x1BCC95CC8](v10, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v11 = *(_QWORD *)(v9 + v8 - 56);
        if (v11)
        {
          MEMORY[0x1BCC95CC8](v11, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v12 = *(_QWORD *)(v9 + v8 - 48);
        if (v12)
        {
          MEMORY[0x1BCC95CC8](v12, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v13 = *(_QWORD *)(v9 + v8 - 40);
        if (v13)
        {
          MEMORY[0x1BCC95CC8](v13, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v14 = *(_QWORD *)(v9 + v8 - 32);
        if (v14)
        {
          MEMORY[0x1BCC95CC8](v14, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v15 = *(_QWORD *)(v9 + v8 - 24);
        if (v15)
        {
          MEMORY[0x1BCC95CC8](v15, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v16 = *(_QWORD *)(v9 + v8 - 16);
        if (v16)
        {
          MEMORY[0x1BCC95CC8](v16, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v17 = *(_QWORD *)(v9 + v8 - 8);
        if (v17)
        {
          MEMORY[0x1BCC95CC8](v17, 0x1000C8052888210);
          v9 = *(_QWORD *)(v1 + 328);
        }
        v18 = *(_QWORD *)(v9 + v8);
        if (v18)
          MEMORY[0x1BCC95CC8](v18, 0x1000C8052888210);
        ++v7;
        v8 += 112;
      }
      while (v7 < *(int *)(v1 + 4) + (uint64_t)*(int *)(v1 + 28));
      if (*(_QWORD *)(v1 + 328))
LABEL_33:
        MEMORY[0x1BCC95CC8]();
      *(_QWORD *)(v1 + 328) = 0;
    }
    v19 = *(_QWORD *)(v1 + 104);
    if (v19)
      MEMORY[0x1BCC95CC8](v19, 0x1000C8052888210);
    *(_QWORD *)(v1 + 104) = 0;
    v20 = *(_QWORD *)(v1 + 72);
    if (v20)
      MEMORY[0x1BCC95CC8](v20, 0x1000C8052888210);
    *(_QWORD *)(v1 + 72) = 0;
    v21 = *(_QWORD *)(v1 + 80);
    if (v21)
      MEMORY[0x1BCC95CC8](v21, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
    v22 = *(_QWORD *)(v1 + 88);
    if (v22)
      MEMORY[0x1BCC95CC8](v22, 0x1000C8052888210);
    v23 = *(_QWORD *)(v1 + 96);
    if (v23)
      MEMORY[0x1BCC95CC8](v23, 0x1000C8052888210);
    *(_QWORD *)(v1 + 96) = 0;
    v24 = *(_QWORD *)(v1 + 112);
    if (v24)
      MEMORY[0x1BCC95CC8](v24, 0x1000C8052888210);
    *(_QWORD *)(v1 + 112) = 0;
    v25 = *(_QWORD *)(v1 + 120);
    if (v25)
      MEMORY[0x1BCC95CC8](v25, 0x1000C8052888210);
    *(_QWORD *)(v1 + 120) = 0;
    v26 = *(_QWORD *)(v1 + 128);
    if (v26)
      MEMORY[0x1BCC95CC8](v26, 0x1000C8052888210);
    *(_QWORD *)(v1 + 128) = 0;
    v27 = *(_QWORD *)(v1 + 224);
    if (v27)
      MEMORY[0x1BCC95CC8](v27, 0x1000C8052888210);
    *(_QWORD *)(v1 + 224) = 0;
    v28 = *(_QWORD *)(v1 + 232);
    if (v28)
      MEMORY[0x1BCC95CC8](v28, 0x1000C8052888210);
    *(_QWORD *)(v1 + 232) = 0;
    v29 = *(_QWORD *)(v1 + 240);
    if (v29)
      MEMORY[0x1BCC95CC8](v29, 0x1000C8052888210);
    *(_QWORD *)(v1 + 240) = 0;
    v30 = *(_QWORD *)(v1 + 248);
    if (v30)
      MEMORY[0x1BCC95CC8](v30, 0x1000C8052888210);
    *(_QWORD *)(v1 + 248) = 0;
    v31 = *(_QWORD *)(v1 + 8);
    if (v31)
      MEMORY[0x1BCC95CC8](v31, 0x1000C8052888210);
    *(_QWORD *)(v1 + 8) = 0;
    v32 = *(_QWORD *)(v1 + 144);
    if (v32)
      MEMORY[0x1BCC95CC8](v32, 0x1000C8052888210);
    *(_QWORD *)(v1 + 144) = 0;
    v33 = *(_QWORD *)(v1 + 152);
    if (v33)
      MEMORY[0x1BCC95CC8](v33, 0x1000C8052888210);
    *(_QWORD *)(v1 + 152) = 0;
    this = *(_QWORD *)(v1 + 288);
    if (this)
      this = MEMORY[0x1BCC95CC8](this, 0x1000C8052888210);
    *(_QWORD *)(v1 + 288) = 0;
  }
  return this;
}

uint64_t Cns::init(Cns *this)
{
  int v2;
  size_t v3;
  void *v4;
  int v5;
  size_t v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  size_t v13;
  void *v14;
  size_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  float v20;
  float v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  int v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  size_t v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  int v42;
  float v43;
  int v44;
  uint64_t v45;
  size_t v46;
  float *v47;
  float *v48;
  float v49;
  int v50;
  int v51;
  size_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  int32x2_t v58;
  unsigned int v59;
  void *v60;
  size_t v61;
  double v62;
  float v63;
  float v64;
  float v65;
  float v66;
  int v67;
  int64x2_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  __int32 v73;
  float v74;
  int **v75;
  int **v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  size_t v90;
  int *v91;
  int *v92;
  int *v93;
  int *v94;
  int *v95;
  int *v96;
  unsigned int v97;
  int *v98;
  int *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  size_t v105;
  float *v106;
  float *v107;
  int *v108;
  int *v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  void *v123;
  size_t v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  size_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  size_t v132;
  const std::nothrow_t *v133;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  void *v137;
  _DWORD **v138;
  void *v139;
  uint64_t v140;
  _DWORD **v141;
  void *v142;
  uint64_t v143;
  _DWORD **v144;
  const std::nothrow_t *v145;
  uint64_t v146;
  void *v147;
  _DWORD **v148;
  uint64_t v149;
  size_t v150;
  void *v151;
  _DWORD *v152;
  _DWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  uint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  size_t v160;
  void *v161;
  void *v162;
  size_t v163;
  _DWORD *v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  const std::nothrow_t *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD **v173;
  void *v174;
  uint64_t v175;
  _DWORD **v176;
  _DWORD *v177;
  _DWORD *v178;
  _DWORD *v179;
  uint64_t v180;
  uint64_t result;
  int v182;
  unint64_t v183;
  int32x2_t v184;
  size_t v185;
  float v186;
  int32x2_t v187;
  uint64_t v188;
  uint64_t v189;

  if (*(_DWORD *)this)
    Cns::deallocate_memory((uint64_t)this);
  *(_DWORD *)this = 1;
  v2 = *((_DWORD *)this + 1) + *((_DWORD *)this + 7);
  if (v2 < 0)
    v3 = -1;
  else
    v3 = 4 * v2;
  v4 = operator new[](v3, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 1) = v4;
  if (!v4)
    return 4294967294;
  if (v2 >= 1)
    memset_pattern16(v4, &unk_1B66A2BB0, 4 * (v2 - 1) + 4);
  v5 = *((_DWORD *)this + 6);
  v6 = v5 < -2 ? -1 : 4 * (v5 + 2);
  v7 = operator new[](v6, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 14) = v7;
  if (!v7)
    return 4294967294;
  if (v5 >= -1)
    bzero(v7, 4 * (v5 + 1) + 4);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = v5 + 1;
  v9 = v8 >> 1;
  v10 = (v8 >> 1) - 1;
  *((_DWORD *)this + 8) = v10;
  v11 = (v8 >> 1) - 2;
  if (v5 >= 104)
    v11 = 50;
  *((_DWORD *)this + 10) = v11;
  v12 = v9 + 1;
  v13 = v5 < -3 ? -1 : 4 * v12;
  v14 = operator new[](v13, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 29) = v14;
  if (!v14)
    return 4294967294;
  v15 = v5 < 2 ? -1 : 4 * v10;
  v16 = operator new[](v15, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 15) = v16;
  if (!v16)
    return 4294967294;
  v17 = v16;
  v18 = (int *)operator new[](v15, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 16) = v18;
  if (!v18)
    return 4294967294;
  if (v5 > -2)
  {
    v22 = v18;
    v19 = 0;
    v23 = 0;
    v24 = 2;
    v25 = 1;
    do
    {
      v26 = v25;
      v27 = (double)v24 / 21.4;
      v28 = __exp10f(v27);
      v20 = *((float *)this + 4);
      v5 = *((_DWORD *)this + 6);
      v21 = (float)v5;
      v29 = (float)(v28 + -1.0) / 0.00437;
      do
        v30 = v23++;
      while (v29 > (float)((float)(v20 * (float)v23) / v21));
      if (v23 >= v12)
        v31 = v9 + 1;
      else
        v31 = v23;
      v22[v19++] = v31 - 1;
      v24 += 2;
      v25 = v26 + 1;
    }
    while (v30 < v9);
    *v17 = 0;
    if (v19 >= 2)
    {
      v32 = v26 - 1;
      v33 = v17 + 1;
      do
      {
        v34 = *v22++;
        *v33++ = v34 + 1;
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    LODWORD(v19) = 0;
    *v17 = 0;
    v20 = *((float *)this + 4);
    v21 = (float)v5;
  }
  v35 = (int)(float)((float)(1625.0 / v20) * v21);
  *((_DWORD *)this + 9) = v19;
  *((_DWORD *)this + 11) = v35;
  v36 = (v35 + 1);
  v37 = v35 < -1 ? -1 : 4 * (int)v36;
  v38 = (float *)operator new[](v37, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 30) = v38;
  if (!v38)
    return 4294967294;
  v39 = v38;
  if (*((_DWORD *)this + 16))
  {
    if (v35 <= 0x7FFFFFFE && (float)(v20 / v21) > 0.0)
    {
      v40 = 0;
      do
      {
        v41 = (float)((float)(v20 / v21) * (float)(int)v40) / 125.0;
        v42 = vcvtps_s32_f32(v41);
        v43 = 0.35481;
        if (v42 <= 13)
        {
          v44 = vcvtms_s32_f32(v41);
          if (v42 == v44)
            v43 = preemph16x128[v44];
          else
            v43 = preemph16x128[v44]
                + (float)((float)(v41 - (float)v44)
                        * (float)((float)(preemph16x128[v42] - preemph16x128[v44]) / (float)(v42 - v44)));
        }
        v38[v40++] = v43;
      }
      while ((_DWORD)v36 != (_DWORD)v40);
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    memset_pattern16(v38, &unk_1B6627B80, 4 * (v35 + 1));
  }
  v45 = *((int *)this + 8);
  v46 = (int)v45 < 0 ? -1 : 4 * v45;
  v47 = (float *)operator new[](v46, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 31) = v47;
  if (!v47)
    return 4294967294;
  v48 = v47;
  if ((int)v45 >= 1)
    memset_pattern16(v47, &unk_1B6627B80, 4 * v45);
  if ((v35 & 0x80000000) == 0)
  {
    do
    {
      v49 = *v39++;
      *v48++ = 1.0 / v49;
      --v36;
    }
    while (v36);
  }
  v50 = v5 >= 0 ? v5 : v5 + 1;
  *((float *)this + 12) = (float)(500 / (v50 >> 1));
  *((_DWORD *)this + 34) = 1055439407;
  *((float *)this + 35) = v21 * 0.09375;
  v51 = *((_DWORD *)this + 1) + *((_DWORD *)this + 7);
  v52 = v51 < 0 ? -1 : 4 * v51;
  v53 = operator new[](v52, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 18) = v53;
  if (!v53)
    return 4294967294;
  v54 = v53;
  v55 = operator new[](v52, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 19) = v55;
  if (!v55)
    return 4294967294;
  v56 = v55;
  v57 = operator new[](v52, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 36) = v57;
  if (!v57)
    return 4294967294;
  v59 = v51 - 1;
  if (v51 >= 1)
  {
    v60 = v57;
    v61 = 4 * (v51 - 1) + 4;
    memset_pattern16(v54, &unk_1B66A2A70, 4 * v59 + 4);
    memset_pattern16(v56, &unk_1B66A2A80, v61);
    memset_pattern16(v60, &unk_1B66A2A80, v61);
  }
  *(float *)v58.i32 = (float)*((int *)this + 5);
  v186 = *((float *)this + 4);
  v187 = v58;
  v62 = (float)(v186 / *(float *)v58.i32);
  v63 = exp(-1.0 / (v62 * 0.004));
  *((float *)this + 40) = v63;
  v64 = exp(-1.0 / (v62 * 0.015));
  *((float *)this + 41) = v64;
  v65 = exp(-1.0 / (v62 * 7.0));
  *((float *)this + 42) = v65;
  v66 = exp(-1.0 / (v62 * 0.05));
  *((float *)this + 43) = v66;
  *(_QWORD *)((char *)this + 180) = 0x3600000000000000;
  *((float *)this + 48) = v21 * 0.1875;
  *((_DWORD *)this + 47) = 905969664;
  *((_DWORD *)this + 64) = (int)(float)((float)((float)(v186 * 200.0) / *(float *)v187.i32) / 1000.0);
  *((_DWORD *)this + 65) = 1068960317;
  v184 = vcvt_s32_f32(vdiv_f32(vdiv_f32(vmul_n_f32((float32x2_t)0x4320000043A00000, v186), (float32x2_t)vdup_lane_s32(v187, 0)), (float32x2_t)vdup_n_s32(0x447A0000u)));
  *((int32x2_t *)this + 33) = v184;
  v67 = (int)(float)((float)((float)(v186 * 40.0) / *(float *)v187.i32) / 1000.0);
  *((_DWORD *)this + 68) = v67;
  v68.i64[0] = v184.i32[0];
  v68.i64[1] = v184.i32[1];
  *(float32x2_t *)((char *)this + 276) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v68), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)));
  v69 = (double)v67 * 0.5;
  *((float *)this + 71) = v69;
  *((_DWORD *)this + 74) = 1050728607;
  v70 = exp(-1.0 / (v62 * 0.24));
  *((float *)this + 75) = v70;
  v71 = exp(-1.0 / (v62 * 0.16));
  *((float *)this + 76) = v71;
  v72 = exp(-1.0 / (v62 * 0.04));
  *((float *)this + 77) = v72;
  *((float *)this + 78) = v72;
  *((float *)this + 79) = v72;
  v73 = v184.i32[1];
  if (v184.i32[0] > v184.i32[1])
    v73 = v184.i32[0];
  *((_DWORD *)this + 80) = v73;
  v74 = exp(-1.0 / (v62 * 0.5));
  *((float *)this + 49) = v74;
  *((_QWORD *)this + 25) = 0x3840000000000000;
  v75 = (int **)operator new[](0x10uLL, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 26) = v75;
  if (!v75)
    return 4294967294;
  v76 = v75;
  *v75 = 0;
  v75[1] = 0;
  v77 = (int *)*((_QWORD *)this + 16);
  if (*v77 <= 0)
  {
    v79 = 0;
    v78 = *((_DWORD *)this + 9) & ~(*((int *)this + 9) >> 31);
    while (v78 != v79)
    {
      v80 = v79 + 1;
      v81 = v77[++v79];
      if (v81 >= 1)
      {
        LODWORD(v78) = v80;
        break;
      }
    }
  }
  else
  {
    LODWORD(v78) = 0;
  }
  v82 = *((_DWORD *)this + 8);
  v83 = v78 + v82 - 1;
  if (*v77 >= v83)
  {
    LODWORD(v85) = 0;
  }
  else
  {
    v84 = 0;
    v85 = *((_DWORD *)this + 9) & ~(*((int *)this + 9) >> 31);
    while (v85 != v84)
    {
      v86 = v84 + 1;
      v87 = v77[++v84];
      if (v87 >= v83)
      {
        LODWORD(v85) = v86;
        break;
      }
    }
  }
  v88 = v85 - v78;
  v89 = v85 - v78 + 1;
  *((_DWORD *)this + 54) = v89;
  v90 = (int)v85 - (int)v78 < -1 ? -1 : 4 * v89;
  v91 = (int *)operator new[](v90, MEMORY[0x1E0DE4E10]);
  *v76 = v91;
  if (!v91)
    return 4294967294;
  v92 = v91;
  v93 = (int *)operator new[](v90, MEMORY[0x1E0DE4E10]);
  v76[1] = v93;
  if (!v93)
    return 4294967294;
  v94 = v93;
  if (v85 >= v78)
  {
    v95 = &v77[v78];
    v96 = (int *)(*((_QWORD *)this + 15) + 4 * v78);
    v97 = v78 - 1;
    v98 = v92;
    v99 = v93;
    do
    {
      v100 = *v96++;
      v101 = v100 - 1;
      if (v100 <= 1)
        v101 = 0;
      *v98++ = v101;
      v102 = *v95++;
      v103 = v102 - 1;
      if (v102 <= 1)
        v103 = 0;
      *v99++ = v103;
      ++v97;
    }
    while (v85 > v97);
  }
  v93[v88] = v78 + v82 - 2;
  v104 = *((int *)this + 9);
  v105 = (int)v104 < 0 ? -1 : 4 * v104;
  v106 = (float *)operator new[](v105, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 28) = v106;
  if (!v106)
    return 4294967294;
  v107 = v106;
  if ((int)v104 >= 1)
    bzero(v106, 4 * v104);
  if ((v88 & 0x80000000) == 0)
  {
    v108 = v94;
    v109 = v92;
    v110 = (v88 + 1);
    do
    {
      v112 = *v108++;
      v111 = v112;
      v113 = *v109++;
      v114 = sqrtf((float)(v111 - v113) + 1.0);
      if (v114 >= 1.4)
        v114 = 1.4;
      *v107++ = v114;
      --v110;
    }
    while (v110);
    v115 = 0;
    do
    {
      v116 = v92[v115];
      if ((int)v116 <= v94[v115])
      {
        v117 = *((_QWORD *)this + 29);
        do
          *(_DWORD *)(v117 + 4 * v116) = v115;
        while (v116++ < v94[v115]);
        v89 = *((_DWORD *)this + 54);
      }
      ++v115;
    }
    while (v115 < v89);
  }
  v119 = v94[v89 - 1];
  if ((int)v119 < *((_DWORD *)this + 6) / 2)
  {
    v120 = *((_QWORD *)this + 29);
    do
      *(_DWORD *)(v120 + 4 + 4 * v119++) = *(_DWORD *)(v120 + 4 * v94[*((int *)this + 54) - 1]);
    while (v119 < *((_DWORD *)this + 6) / 2);
  }
  v121 = *((int *)this + 8);
  v122 = (int)v121 < 0 ? -1 : 8 * v121;
  v123 = operator new[](v122, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 12) = v123;
  if (!v123)
    return 4294967294;
  v124 = (int)v121 < 0 ? -1 : 4 * v121;
  v125 = operator new[](v124, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 9) = v125;
  if (!v125)
    return 4294967294;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v126 = *((int *)this + 1);
  v127 = v126 + *((int *)this + 7);
  v128 = is_mul_ok(v127, 0x70uLL) ? 112 * v127 : -1;
  v129 = operator new[](v128, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 41) = v129;
  if (!v129)
    return 4294967294;
  v182 = v126;
  bzero(v129, 112 * (int)v127);
  v183 = v127;
  if ((int)v127 >= 1)
  {
    v130 = 0;
    v131 = *((int *)this + 9);
    if ((int)v131 < 0)
      v132 = -1;
    else
      v132 = 4 * v131;
    v188 = *((unsigned int *)this + 9);
    v133 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v185 = v132;
    do
    {
      v134 = operator new[](v132, v133);
      v135 = *((_QWORD *)this + 41);
      *(_QWORD *)(v135 + 112 * v130) = v134;
      if (!v134)
        return 4294967294;
      v136 = (_QWORD *)(v135 + 112 * v130);
      v136[5] = 0;
      v136[6] = 0;
      v137 = operator new[](v132, v133);
      v136[1] = v137;
      v138 = (_DWORD **)(v136 + 1);
      if (!v137)
        return 4294967294;
      v139 = operator new[](v132, v133);
      v140 = v135 + 112 * v130;
      *(_QWORD *)(v140 + 56) = v139;
      v141 = (_DWORD **)(v140 + 56);
      if (!v139)
        return 4294967294;
      v142 = operator new[](v132, v133);
      v143 = v135 + 112 * v130;
      *(_QWORD *)(v143 + 16) = v142;
      v144 = (_DWORD **)(v143 + 16);
      if (!v142)
        return 4294967294;
      v145 = v133;
      v146 = v135 + 112 * v130;
      *(_QWORD *)(v146 + 64) = 0;
      v147 = operator new[](v132, v145);
      *(_QWORD *)(v146 + 24) = v147;
      v148 = (_DWORD **)(v146 + 24);
      if (!v147)
        return 4294967294;
      v149 = *((int *)this + 80);
      v150 = (int)v149 < 0 ? -1 : 4 * v149;
      v151 = operator new[](v150, v145);
      *(_QWORD *)(v135 + 112 * v130 + 32) = v151;
      if (!v151)
        return 4294967294;
      if ((int)v188 >= 1)
      {
        v152 = *(_DWORD **)(v135 + 112 * v130);
        v153 = *v138;
        v154 = *v141;
        v155 = *v144;
        v156 = v188;
        v157 = *v148;
        do
        {
          *v152++ = 0;
          *v153++ = *((_DWORD *)this + 12);
          *v154++ = 966787072;
          *v155++ = 1065353216;
          *v157++ = 0;
          --v156;
        }
        while (v156);
      }
      if ((int)v149 >= 1)
        bzero(v151, 4 * v149);
      v158 = v135 + 112 * v130;
      *(float *)(v158 + 72) = (float)*((int *)this + 6);
      *(_DWORD *)(v158 + 76) = 1065353216;
      *(_QWORD *)(v158 + 92) = 0;
      *(_QWORD *)(v158 + 84) = 0;
      *(_QWORD *)(v158 + 100) = 0x3F800000000000C8;
      ++v130;
      v132 = v185;
      v133 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    }
    while (v130 != v183);
  }
  if (!v182)
    goto LABEL_177;
  v159 = *((int *)this + 8);
  if ((int)v159 < 0)
    v160 = -1;
  else
    v160 = 4 * v159;
  v161 = operator new[](v160, MEMORY[0x1E0DE4E10]);
  *((_QWORD *)this + 10) = v161;
  if (v161)
  {
    v162 = operator new[](v160, MEMORY[0x1E0DE4E10]);
    *((_QWORD *)this + 11) = v162;
    if (v162)
    {
      v163 = (v183 & 0x80000000) != 0 ? -1 : 4 * v183;
      v164 = operator new[](v163, MEMORY[0x1E0DE4E10]);
      *((_QWORD *)this + 13) = v164;
      if (v164)
      {
        if ((int)v183 >= 1)
        {
          v165 = v164;
          v166 = 0;
          v167 = *((int *)this + 9);
          if ((int)v167 < 0)
            v168 = -1;
          else
            v168 = 4 * v167;
          v189 = *((unsigned int *)this + 9);
          v169 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          do
          {
            v170 = operator new[](v168, v169);
            v171 = *((_QWORD *)this + 41);
            v172 = v171 + 112 * v166;
            *(_QWORD *)(v172 + 40) = v170;
            v173 = (_DWORD **)(v172 + 40);
            if (!v170)
              return 4294967294;
            v174 = operator new[](v168, v169);
            v175 = v171 + 112 * v166;
            *(_QWORD *)(v175 + 48) = v174;
            v176 = (_DWORD **)(v175 + 48);
            if (!v174)
              return 4294967294;
            v177 = operator new[](v168, v169);
            *(_QWORD *)(v171 + 112 * v166 + 64) = v177;
            if (!v177)
              return 4294967294;
            if ((int)v189 >= 1)
            {
              v178 = *v173;
              v179 = *v176;
              v180 = v189;
              do
              {
                *v178++ = 0;
                *v179++ = 0;
                *v177++ = 1036831949;
                --v180;
              }
              while (v180);
            }
            v165[v166++] = 0;
          }
          while (v166 != v183);
        }
LABEL_177:
        result = 0;
        *((_QWORD *)this + 7) = 0x3F33333339687B18;
        return result;
      }
    }
  }
  return 4294967294;
}

uint64_t Cns::process(uint64_t this, float **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float *v11;
  float v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float *v25;
  unsigned int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  float v38;
  int v39;
  int v40;
  float *v41;
  float v42;
  float *v43;
  float v44;
  float *v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float *v50;
  float v51;
  float **v52;
  unint64_t v53;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  float v65;
  float v66;
  int v67;
  uint64_t v68;
  int *v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  float *v77;
  float **v78;
  float *v79;
  float *v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  int *v85;
  int *v86;
  float v87;
  float *v88;
  uint64_t v89;
  float v90;
  float v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  float *v96;
  float v97;
  float v98;
  BOOL v99;
  float v100;
  uint64_t v101;
  float *v102;
  float v103;
  BOOL v104;
  float *v105;
  float *v106;
  uint64_t v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;
  float v112;
  float *v113;
  uint64_t v114;
  float *v115;
  float *v116;
  float *v117;
  float *v118;
  int *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  int v131;
  int v132;
  int v133;
  float v134;
  float v135;
  uint64_t v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  float *v145;
  float *v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  uint64_t v151;
  float v152;
  float *v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;

  if (!*(_DWORD *)(this + 4))
  {
    v158 = *(int *)(this + 28);
    if ((int)v158 >= 1)
    {
      v2 = 0;
      v3 = *(_QWORD *)(this + 112);
      v4 = v3 + 8;
      v5 = *(unsigned int *)(this + 44);
      v6 = *(unsigned int *)(this + 32);
      v7 = *(float **)(this + 72);
      v8 = *(unsigned int *)(this + 216);
      v9 = *(_QWORD *)(this + 328);
      v10 = *(unsigned int *)(this + 320);
      v11 = *(float **)(this + 96);
      v157 = *(_QWORD *)(this + 288);
      v156 = *(_DWORD *)(this + 52);
      v12 = (float)(int)v6;
      v13 = (float *)(v3 + 12);
      v14 = v5 & ~((int)v5 >> 31);
      v155 = v6 - v14;
      v154 = 2 * v14;
      v15 = 4 * v8;
      v153 = v13;
      do
      {
        v16 = a2[v2];
        if ((int)v5 < 1)
        {
          v24 = 0;
        }
        else
        {
          v17 = (float *)(*(_QWORD *)(this + 240) + 4);
          v18 = v16 + 3;
          v19 = v13;
          v20 = v5;
          do
          {
            *(v19 - 1) = *(v18 - 1) * *v17;
            v21 = *v17++;
            v22 = v21;
            v23 = *v18;
            v18 += 2;
            *v19 = v23 * v22;
            v19 += 2;
            --v20;
          }
          while (v20);
          v24 = v5;
        }
        v25 = v16 + 2;
        v26 = v154;
        v27 = v155;
        if (v24 < (int)v6)
        {
          do
          {
            *(float *)(v4 + 4 * v26) = v25[v26];
            *(float *)(v4 + 4 * (v26 + 1)) = v25[v26 + 1];
            v26 += 2;
            --v27;
          }
          while (v27);
        }
        if ((int)v6 >= 1)
        {
          v28 = v13;
          v29 = v7;
          v30 = v6;
          do
          {
            *v29++ = fabsf(*(v28 - 1)) + fabsf(*v28);
            v28 += 2;
            --v30;
          }
          while (v30);
        }
        if ((int)v8 >= 1)
        {
          v31 = 0;
          v32 = *(uint64_t **)(this + 208);
          v33 = *v32;
          v34 = v32[1];
          do
          {
            v35 = *(int *)(v33 + 4 * v31);
            v36 = *(_DWORD *)(v34 + 4 * v31);
            if ((int)v35 <= v36)
            {
              v39 = v36 + 1;
              v40 = v39 - v35;
              v41 = &v7[v35];
              v38 = 0.0;
              do
              {
                v42 = *v41++;
                v38 = v38 + v42;
                --v40;
              }
              while (v40);
              v37 = v39 - v35;
            }
            else
            {
              v37 = 0;
              v38 = 0.0;
            }
            v7[v31++] = v38 / (float)v37;
          }
          while (v31 != v8);
          v43 = *(float **)(v9 + 112 * v2);
          v44 = *(float *)(this + 180);
          v45 = v7;
          v46 = v8;
          do
          {
            v47 = *v45++;
            v48 = v47 + (float)(*(float *)(this + 160 + 4 * (v47 <= *v43)) * (float)(*v43 - v47));
            if (v48 <= v44)
              v48 = v44;
            *v43++ = v48;
            --v46;
          }
          while (v46);
        }
        v49 = v9 + 112 * (int)v2;
        v51 = *(float *)(v49 + 88);
        v50 = (float *)(v49 + 88);
        if (v51 < *(float *)(this + 280))
          *(_DWORD *)(v9 + 112 * (int)v2 + 100) = *(_DWORD *)(this + 256);
        v52 = (float **)(v9 + 112 * (int)v2);
        if ((int)v8 <= 0)
        {
          v55 = *v52;
          *(float *)(v9 + 112 * (int)v2 + 96) = 0.0 / (float)(int)v6;
          v66 = 0.0 / (float)(int)v6;
        }
        else
        {
          v53 = 0;
          v54 = *(_QWORD *)(v9 + 112 * (int)v2 + 24);
          v55 = *v52;
          v56 = 0.0;
          do
          {
            v57 = *(float *)(v54 + v53);
            v58 = v55[v53 / 4];
            if (v57 <= v58)
              v59 = v55[v53 / 4];
            else
              v59 = *(float *)(v54 + v53);
            v60 = fmaxf(v59, 0.000030518);
            if (v57 >= v58)
              v57 = v55[v53 / 4];
            v56 = v56
                + (float)((float)(v60 / fmaxf(v57, 0.000030518))
                        * (float)(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 208) + 8) + v53)
                                - *(_DWORD *)(**(_QWORD **)(this + 208) + v53)
                                + 1));
            v53 += 4;
          }
          while (v15 != v53);
          v61 = 0;
          v62 = v9 + 112 * (int)v2;
          *(float *)(v62 + 96) = v56 / v12;
          v63 = (float *)(v62 + 96);
          v64 = *(float *)(this + 180);
          do
          {
            v65 = v55[v61 / 4]
                + (float)(*(float *)(this + 312 + 4 * (v55[v61 / 4] <= *(float *)(v54 + v61)))
                        * (float)(*(float *)(v54 + v61) - v55[v61 / 4]));
            if (v65 <= v64)
              v65 = v64;
            *(float *)(v54 + v61) = v65;
            v61 += 4;
          }
          while (v15 != v61);
          v66 = *v63;
        }
        if (v66 <= *(float *)(this + 260))
        {
          v68 = v9 + 112 * (int)v2;
          v71 = *(_DWORD *)(v68 + 100);
          v69 = (int *)(v68 + 100);
          v70 = v71;
          if (v71)
          {
            if (*(float *)(v9 + 112 * (int)v2 + 92) <= *(float *)(this + 284))
            {
              v67 = 1;
            }
            else
            {
              v72 = __OFSUB__(v70, 1);
              v73 = v70 - 1;
              if ((v73 < 0) ^ v72 | (v73 == 0))
                v67 = 0;
              else
                v67 = v73;
              *v69 = v67;
            }
          }
          else
          {
            v67 = 0;
          }
        }
        else
        {
          v67 = *(_DWORD *)(this + 256);
          *(_DWORD *)(v9 + 112 * (int)v2 + 100) = v67;
        }
        if ((int)v10 > 1)
        {
          v74 = *(_QWORD *)(v9 + 112 * (int)v2 + 32);
          v75 = v10;
          do
          {
            *(_DWORD *)(v74 + 4 * (v75 - 1)) = *(_DWORD *)(v74 + 4 * (v75 - 2));
            v104 = v75-- > 2;
          }
          while (v104);
        }
        v76 = v9 + 112 * (int)v2;
        v79 = *(float **)(v76 + 8);
        v78 = (float **)(v76 + 8);
        v77 = v79;
        if ((int)v8 < 1)
        {
          v87 = 0.0;
        }
        else
        {
          v80 = v11;
          v81 = v8;
          do
          {
            v82 = *v55++;
            v83 = v82;
            v84 = *v77++;
            *v80++ = v83 / v84;
            --v81;
          }
          while (v81);
          v86 = **(int ***)(this + 208);
          v85 = *(int **)(*(_QWORD *)(this + 208) + 8);
          v87 = 0.0;
          v88 = v11;
          v89 = v8;
          do
          {
            v90 = *v88++;
            v91 = v90;
            v93 = *v85++;
            v92 = v93;
            v94 = *v86++;
            v87 = v87 + (float)(v91 * (float)(v92 - v94 + 1));
            --v89;
          }
          while (v89);
        }
        v95 = v9 + 112 * (int)v2;
        v96 = *(float **)(v95 + 32);
        if ((float)((float)(v87 / v12) * *(float *)(v157 + 4 * (int)v2)) <= *(float *)(this + 296))
          v97 = 0.0;
        else
          v97 = 1.0;
        *v96 = v97;
        v98 = v97 + (float)(*(float *)(this + 300) * *(float *)(v95 + 84));
        *(float *)(v95 + 84) = v98;
        *v50 = *v96 + (float)(*(float *)(this + 304) * *v50);
        *(float *)(v95 + 92) = *v96 + (float)(*(float *)(this + 308) * *(float *)(v95 + 92));
        if (v67)
          v99 = v98 < *(float *)(this + 276);
        else
          v99 = 1;
        if (v99)
          v100 = 0.0;
        else
          v100 = 1.0;
        *(float *)(v95 + 104) = v100;
        v101 = v9 + 112 * v2;
        v103 = *(float *)(v101 + 104);
        v102 = (float *)(v101 + 104);
        if ((int)v103)
          v104 = 1;
        else
          v104 = (int)v8 < 1;
        if (!v104)
        {
          v105 = (float *)*((_QWORD *)v102 - 12);
          v106 = v7;
          v107 = v8;
          do
          {
            v108 = *v106++;
            v109 = v108;
            v110 = *v105 - v108;
            if (v108 <= *v105)
              v111 = 172;
            else
              v111 = 168;
            v112 = v109 + (float)(*(float *)(this + v111) * v110);
            *v105 = v112;
            if (v112 <= *(float *)(this + 184))
              v112 = *(float *)(this + 184);
            *v105++ = v112;
            --v107;
          }
          while (v107);
        }
        v113 = *v52;
        v114 = v9 + 112 * (int)v2;
        *(_DWORD *)(v114 + 72) = 0;
        v115 = (float *)(v114 + 72);
        if ((int)v8 < 1)
        {
          v135 = 0.0;
        }
        else
        {
          v116 = *(float **)(this + 224);
          v117 = *v78;
          v118 = *(float **)(v9 + 112 * (int)v2 + 16);
          v120 = **(int ***)(this + 208);
          v119 = *(int **)(*(_QWORD *)(this + 208) + 8);
          v122 = *(_QWORD *)(this + 144);
          v121 = *(_QWORD *)(this + 152);
          v123 = v8;
          do
          {
            v124 = *v113++;
            v125 = v124;
            v126 = *v116++;
            v127 = v125 * (float)(*(float *)(v121 + 4 * (int)v2) * v126);
            v128 = *v117++;
            v129 = v128;
            if (v128 <= *(float *)(this + 188))
              v129 = *(float *)(this + 188);
            v130 = v127 / v129;
            if (v130 > 1.0)
              v130 = 1.0;
            v132 = *v119++;
            v131 = v132;
            v133 = *v120++;
            *v118 = v130;
            *v115 = *v115 + (float)(v130 * (float)(v131 - v133 + 1));
            v134 = *v118;
            if (*v118 <= *(float *)(v122 + 4 * (int)v2))
              v134 = *(float *)(v122 + 4 * (int)v2);
            if (v134 > 1.0)
              v134 = 1.0;
            *v118++ = v134;
            --v123;
          }
          while (v123);
          v135 = *v115;
          v13 = v153;
        }
        v136 = v9 + 112 * (int)v2;
        v138 = *(float *)(v136 + 76);
        v137 = (float *)(v136 + 76);
        v139 = v138 * v135;
        *v115 = v138 * v135;
        v140 = 1.0;
        if (v139 <= *(float *)(this + 140))
          v140 = *(float *)(this + 136);
        *v137 = v140;
        if ((int)v8 >= 1)
        {
          v141 = *(_QWORD *)(v9 + 112 * (int)v2 + 16);
          v142 = *(float *)(v141 + 4 * (v8 - 1));
          v143 = 4 * (v8 - 1);
          do
          {
            v142 = *(float *)(v141 + v143) + (float)((float)(v142 - *(float *)(v141 + v143)) * 0.5);
            *(float *)(v141 + v143) = v142;
            v143 -= 4;
          }
          while (v143 != -4);
        }
        if (!v156 && !(int)*v102 && (int)v8 >= 1)
        {
          v145 = *(float **)(v9 + 112 * v2 + 56);
          v146 = v7;
          v147 = v8;
          do
          {
            v148 = *v146++;
            v149 = v148;
            v150 = *v145 - v148;
            if (v148 <= *v145)
              v151 = 172;
            else
              v151 = 168;
            v152 = v149 + (float)(*(float *)(this + v151) * v150);
            *v145 = v152;
            if (v152 <= *(float *)(this + 184))
              v152 = *(float *)(this + 184);
            *v145++ = v152;
            --v147;
          }
          while (v147);
        }
        ++v2;
      }
      while (v2 != v158);
    }
  }
  return this;
}

uint64_t Cns::setMinGain(uint64_t this, float a2)
{
  uint64_t v2;
  double v3;
  float v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  float v10;
  float *v11;
  float *v12;
  float *v13;

  v2 = (*(_DWORD *)(this + 4) + *(_DWORD *)(this + 28));
  if ((int)v2 >= 1)
  {
    v3 = a2;
    v4 = fmaxf(a2, 0.25);
    v5 = v3 / 0.3548;
    v6 = fmax(v5, 0.717);
    v7 = v5 * 0.0549999997;
    v8 = v5 <= 0.717;
    v9 = 0.0394349998;
    if (!v8)
      v9 = v7;
    if (v6 >= 1.0)
      v9 = 0.0549999997;
    v10 = v9;
    v11 = *(float **)(this + 288);
    v12 = *(float **)(this + 144);
    v13 = *(float **)(this + 152);
    do
    {
      *v12++ = v4;
      *v11++ = v10;
      *v13++ = v10;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t Cns::setMinGain(uint64_t this, float a2, int a3)
{
  double v3;
  float v4;
  int v5;
  uint64_t v6;
  double v7;
  _BOOL4 v8;
  _BOOL4 v9;
  float v10;
  float v11;

  v3 = a2;
  v4 = fmaxf(a2, 0.25);
  v5 = *(_DWORD *)(this + 28) + *(_DWORD *)(this + 4) - 1;
  if (v5 >= a3)
    v5 = a3;
  v6 = *(_QWORD *)(this + 152);
  *(float *)(*(_QWORD *)(this + 144) + 4 * v5) = v4;
  v7 = v3 / 0.3548;
  v8 = v3 / 0.3548 <= 0.717;
  v9 = v3 / 0.3548 < 1.0 || v3 / 0.3548 <= 0.717;
  if (v7 >= 1.0)
    v8 = 1;
  v10 = 0.055;
  if (v9)
    v10 = 0.039435;
  v11 = v7 * 0.0549999997;
  if (v8)
    v11 = v10;
  *(float *)(*(_QWORD *)(this + 288) + 4 * v5) = v11;
  *(float *)(v6 + 4 * v5) = v11;
  return this;
}

uint64_t Cns::add_comf_noise(uint64_t this, DSPSplitComplex *a2, const DSPSplitComplex *a3, float *a4, float *a5, float *a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;

  v7 = *(unsigned int *)(this + 40);
  if ((int)v7 >= 1)
  {
    v8 = *(_QWORD *)(this + 144);
    v9 = *(_QWORD *)(*(_QWORD *)(this + 328) + 112 * a7 + 56);
    v10 = *(int **)(this + 232);
    v11 = (float *)(*(_QWORD *)(this + 248) + 4);
    v12 = 0x100000000;
    do
    {
      v13 = *a6++;
      v14 = *(float *)(v8 + 4 * a7);
      v15 = 1.0 - v13;
      v16 = v13 < v14;
      v17 = v14 * *(float *)(this + 56);
      v18 = *v10++;
      v19 = *(float *)(v9 + 4 * v18);
      if (!v16)
        v15 = 0.0;
      v20 = *v11++;
      v21 = v15 * (float)((float)(v17 * (float)(v19 - *(float *)(this + 184))) * v20);
      v22 = *a4++;
      v23 = v12 >> 30;
      *(float *)((char *)&a2->realp + v23) = *(float *)((char *)&a2->realp + (v12 >> 30)) + (float)(v21 * v22);
      v24 = *a5++;
      *(float *)((char *)&a3->realp + v23) = *(float *)((char *)&a3->realp + (v12 >> 30)) + (float)(v21 * v24);
      v12 += 0x100000000;
      --v7;
    }
    while (v7);
  }
  return this;
}

float *Cns::comf_noise(float *this, float *a2)
{
  float *v2;
  uint64_t v3;
  float v4;

  if ((int)a2 >= 1)
  {
    v2 = this;
    v3 = a2;
    do
    {
      this = (float *)rand();
      v4 = ((float)((float)(int)this * 4.6566e-10) + -0.5) * 32767.0;
      *v2++ = v4;
      --v3;
    }
    while (v3);
  }
  return this;
}

void AUSpatialProbability::~AUSpatialProbability(AUSpatialProbability *this)
{
  AUSpatialProbability::~AUSpatialProbability(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E69CC4C0;
  AUSpatialProbability::Cleanup(this);
  v2 = (void *)*((_QWORD *)this + 117);
  if (v2)
  {
    *((_QWORD *)this + 118) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 114);
  if (v3)
  {
    *((_QWORD *)this + 115) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 111);
  if (v4)
  {
    *((_QWORD *)this + 112) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 108);
  if (v5)
  {
    *((_QWORD *)this + 109) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 105);
  if (v6)
  {
    *((_QWORD *)this + 106) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 102);
  if (v7)
  {
    *((_QWORD *)this + 103) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 99);
  if (v8)
  {
    *((_QWORD *)this + 100) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 96);
  if (v9)
  {
    *((_QWORD *)this + 97) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 93);
  if (v10)
  {
    *((_QWORD *)this + 94) = v10;
    operator delete(v10);
  }
  std::unique_ptr<stvPlistHolder>::reset[abi:ne180100]((uint64_t *)this + 92, 0);
  v11 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSpatialProbability::Initialize(AUSpatialProbability *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  _BOOL4 v15;
  uint64_t result;
  int v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 136315394;
    v19 = "AUSpatialProbability.cpp";
    v20 = 1024;
    v21 = 124;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize\n", (uint8_t *)&v18, 0x12u);
  }
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 80), 0);
  v4 = *(_QWORD *)(Element + 80);
  *((_DWORD *)this + 148) = *(_DWORD *)(Element + 108);
  *((_QWORD *)this + 73) = v4;
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_17;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v18 = 136315394;
    v19 = "AUSpatialProbability.cpp";
    v20 = 1024;
    v21 = 132;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Check input format\n", (uint8_t *)&v18, 0x12u);
  }
LABEL_17:
  v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 80), 0) + 108);
  v7 = *((_DWORD *)this + 148);
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (v6 == v7)
  {
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_29;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v18 = 136315394;
      v19 = "AUSpatialProbability.cpp";
      v20 = 1024;
      v21 = 142;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Check output form\n", (uint8_t *)&v18, 0x12u);
    }
LABEL_29:
    v10 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 128), 0) + 108);
    if (v10 == *((_DWORD *)this + 148))
    {
      *((_DWORD *)this + 145) = *((_DWORD *)this + 84);
      v11 = *((_QWORD *)this + 66);
      AUSpatialProbability::UpdateState(this);
      *((_QWORD *)this + 67) = v11;
      AUSpatialProbability::InitializeSpatialProbabilityClasses(this);
      (*(void (**)(AUSpatialProbability *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
      if (AUSpatialProbabilityLogScope(void)::once != -1)
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        v12 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
          return 0;
      }
      else
      {
        v12 = MEMORY[0x1E0C81028];
      }
      v15 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v15)
        return result;
      v18 = 136315394;
      v19 = "AUSpatialProbability.cpp";
      v20 = 1024;
      v21 = 166;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Successfully initialized.\n", (uint8_t *)&v18, 0x12u);
      return 0;
    }
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        return 4294956421;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v17 = *((_DWORD *)this + 148);
      v18 = 136315906;
      v19 = "AUSpatialProbability.cpp";
      v20 = 1024;
      v21 = 147;
      v22 = 1024;
      v23 = v10;
      v24 = 1024;
      v25 = v17;
      v14 = "%25s:%-5d Number of channel in the output stream (%u) not equal to the expected number of channels (%u).\n";
      goto LABEL_50;
    }
    return 4294956421;
  }
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      return 4294956421;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v13 = *((_DWORD *)this + 148);
    v18 = 136315906;
    v19 = "AUSpatialProbability.cpp";
    v20 = 1024;
    v21 = 137;
    v22 = 1024;
    v23 = v6;
    v24 = 1024;
    v25 = v13;
    v14 = "%25s:%-5d Number of channel in the input stream (%u) not equal to the expected number of channels (%u).\n";
LABEL_50:
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, 0x1Eu);
  }
  return 4294956421;
}

uint64_t AUSpatialProbability::Cleanup(AUSpatialProbability *this)
{
  NSObject *v2;
  uint64_t result;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUSpatialProbability.cpp";
    v6 = 1024;
    v7 = 177;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cleanup.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  result = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t AUSpatialProbability::Reset(AUSpatialProbability *this)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315394;
    v6 = "AUSpatialProbability.cpp";
    v7 = 1024;
    v8 = 187;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reset.\n", (uint8_t *)&v5, 0x12u);
  }
LABEL_9:
  v3 = *((_QWORD *)this + 91);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return 0;
}

uint64_t AUSpatialProbability::GetPropertyInfo(AUSpatialProbability *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned __int16 v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 7402)
  {
    if (a2 > 107400)
    {
      if (a2 == 107401 || a2 == 107402)
      {
LABEL_15:
        *a6 = 0;
        v9 = 8;
        goto LABEL_17;
      }
      v8 = -23669;
LABEL_14:
      if (a2 != (v8 | 0x10000))
        return result;
      goto LABEL_15;
    }
    if (a2 != 7403)
    {
      v8 = -23765;
      goto LABEL_14;
    }
LABEL_16:
    *a6 = 0;
    v9 = 4 * *((_DWORD *)this + 145) + 4;
    goto LABEL_17;
  }
  if (a2 > 7400)
    goto LABEL_16;
  if (a2 == 21 || a2 == 3700)
  {
    *a6 = 1;
    v9 = 4;
LABEL_17:
    result = 0;
    *a5 = v9;
  }
  return result;
}

uint64_t AUSpatialProbability::GetProperty(AUSpatialProbability *this, int a2, int a3, unsigned int a4, CFArrayRef *__dst)
{
  uint64_t result;
  char *v8;
  int v9;
  const void *v10;
  CFArrayRef CFArray;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 7402)
  {
    if (a2 > 107400)
    {
      switch(a2)
      {
        case 107401:
          v8 = (char *)this + 888;
          break;
        case 107402:
          v8 = (char *)this + 912;
          break;
        case 107403:
          v8 = (char *)this + 936;
          break;
        default:
          return result;
      }
LABEL_20:
      CFArray = applesauce::CF::details::make_CFArrayRef<float>(v8);
      result = 0;
      *__dst = CFArray;
      return result;
    }
    if (a2 != 7403)
    {
      if (a2 != 107307)
        return result;
      v8 = (char *)this + 864;
      goto LABEL_20;
    }
    v10 = (const void *)*((_QWORD *)this + 117);
    goto LABEL_25;
  }
  if (a2 > 7400)
  {
    if (a2 == 7401)
      v10 = (const void *)*((_QWORD *)this + 111);
    else
      v10 = (const void *)*((_QWORD *)this + 114);
LABEL_25:
    memcpy(__dst, v10, 4 * (*((_DWORD *)this + 145) + 1));
    return 0;
  }
  if (a2 == 21)
  {
    result = 0;
    v9 = *((unsigned __int8 *)this + 576);
  }
  else
  {
    if (a2 != 3700)
      return result;
    result = 0;
    v9 = *((unsigned __int8 *)this + 376);
  }
  *(_DWORD *)__dst = v9;
  return result;
}

uint64_t AUSpatialProbability::SetProperty(AUSpatialProbability *this, int a2, int a3, unsigned int a4, const __CFDictionary **__src, size_t __n)
{
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const __CFNumber *ValueAtIndex;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const __CFNumber *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const __CFNumber *v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  unint64_t v31;
  const __CFNumber *v32;
  size_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  unint64_t v37;
  const __CFNumber *v38;
  size_t v39;
  CFIndex Count;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  const __CFNumber *v45;
  const char *v46;
  uint64_t v47;
  const __CFDictionary *v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  NSObject *v56;
  _BOOL4 v57;
  int v58;
  const char *v59;
  _BOOL4 v60;
  int v61;
  _BOOL4 v62;
  int v63;
  _BOOL4 v64;
  int v65;
  NSObject *v66;
  uint32_t v67;
  _BOOL4 v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  std::string *v74;
  __int128 v75;
  void **v76;
  CFStringRef v77;
  const __CFDictionary *Value;
  NSObject *v79;
  _BOOL4 v80;
  int v81;
  _BOOL4 v82;
  int v83;
  _BOOL4 v84;
  int v85;
  _BOOL4 v86;
  int v87;
  int v88;
  NSObject *v89;
  uint32_t v90;
  _BOOL4 v91;
  int v92;
  NSObject *v93;
  void **v94;
  const __CFDictionary *v95;
  NSObject *v96;
  NSObject *v97;
  uint64_t v98;
  unint64_t v99;
  std::string *v100;
  __int128 v101;
  const char *v102;
  const __CFString *v103;
  int VectorFromDictionary;
  const __CFDictionary *v105;
  NSObject *v106;
  void **v107;
  NSObject *v108;
  const char *v109;
  uint64_t v110;
  unint64_t v111;
  std::string *v112;
  __int128 v113;
  const char *v114;
  const __CFString *v115;
  int v116;
  const char *v117;
  void *__p[2];
  int64_t v119;
  int v120;
  unsigned int v121;
  int v122;
  _BYTE buf[30];
  std::string v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 107300)
  {
    switch(a2)
    {
      case 7301:
        if (__n != 8 * (*((_DWORD *)this + 145) + 1))
        {
          if (AUSpatialProbabilityLogScope(void)::once != -1)
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              return 4294956445;
          }
          else
          {
            v26 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 497;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 7301;
            v46 = "%25s:%-5d Input size of SpatialProbabilityInputSubbandDOA is not equal to the expected size (prop id: %u).\n";
            goto LABEL_259;
          }
          return 4294956445;
        }
        (*(void (**)(_QWORD, const __CFDictionary **, size_t))(**((_QWORD **)this + 91) + 80))(*((_QWORD *)this + 91), __src, __n);
        if (!*((_DWORD *)this + 150))
          return 0;
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 0;
        }
        else
        {
          v9 = MEMORY[0x1E0C81028];
        }
        v57 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v57)
        {
          v58 = *((_DWORD *)this + 150);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 507;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v58;
          v59 = "%25s:%-5d Subband DOA is only used for the DOA mode. Current mode is (%d)";
          goto LABEL_329;
        }
        return result;
      case 7302:
      case 7305:
        goto LABEL_13;
      case 7303:
LABEL_66:
        if (__n != 8
                                * *((unsigned int *)this + 148)
                                * (unint64_t)(*((_DWORD *)this + 145) + 1))
        {
          if (AUSpatialProbabilityLogScope(void)::once != -1)
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              return 4294956445;
          }
          else
          {
            v26 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 544;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 7303;
            v46 = "%25s:%-5d Input size of SpatialProbabilityInputSteeringVector is not equal to the expected size (prop id: %u).\n";
            goto LABEL_259;
          }
          return 4294956445;
        }
        (*(void (**)(_QWORD, const __CFDictionary **, size_t))(**((_QWORD **)this + 91) + 112))(*((_QWORD *)this + 91), __src, __n);
        v25 = *((_DWORD *)this + 150);
        if (v25 == 1)
        {
          if (AUSpatialProbabilityLogScope(void)::once != -1)
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              return 0;
          }
          else
          {
            v9 = MEMORY[0x1E0C81028];
          }
          v62 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v62)
          {
            v63 = *((_DWORD *)this + 150);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 558;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v63;
            v59 = "%25s:%-5d Steering vector loaded from plist will be overwritten in the current mode. Current mode is (%d)";
            goto LABEL_329;
          }
        }
        else
        {
          if (v25)
            return 0;
          if (AUSpatialProbabilityLogScope(void)::once != -1)
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              return 0;
          }
          else
          {
            v9 = MEMORY[0x1E0C81028];
          }
          v60 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v60)
          {
            v61 = *((_DWORD *)this + 150);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 554;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v61;
            v59 = "%25s:%-5d Steering vector is not used in the current mode. Current mode is (%d)";
            goto LABEL_329;
          }
        }
        return result;
      case 7304:
LABEL_58:
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (__src)
        {
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v24 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              goto LABEL_157;
          }
          else
          {
            v24 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 611;
            _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Steering vector to be loaded from a plist.", buf, 0x12u);
            v47 = AUSpatialProbabilityLogScope(void)::once;
            v48 = *__src;
            v49 = *((_QWORD *)this + 92);
            v50 = *((_DWORD *)this + 177);
            *(_BYTE *)(v49 + 60) = 0;
            v51 = (_BYTE *)(v49 + 60);
            v122 = 0;
            if (v47 != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
LABEL_158:
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v52 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                goto LABEL_164;
            }
            else
            {
              v52 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 220;
              _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_INFO, "%25s:%-5d Loading sampleRate from topLevelDict.\n", buf, 0x12u);
            }
LABEL_164:
            if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v49 + 64), v48, CFSTR("SampleRate"), &v122))
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v53 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  goto LABEL_317;
              }
              else
              {
                v53 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                goto LABEL_317;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 225;
              v55 = "%25s:%-5d Failed to load the sampling rate from the plist.\n";
LABEL_316:
              _os_log_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, v55, buf, 0x12u);
              goto LABEL_317;
            }
            v121 = 0;
            if (AUSpatialProbabilityLogScope(void)::once != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v54 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                goto LABEL_219;
            }
            else
            {
              v54 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 231;
              _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nMicsUsed from topLevelDict.\n", buf, 0x12u);
            }
LABEL_219:
            if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v49 + 64), v48, CFSTR("nMicsUsed"), &v121))
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v53 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  goto LABEL_317;
              }
              else
              {
                v53 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                goto LABEL_317;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 236;
              v55 = "%25s:%-5d Failed to load the number of mics from the plist.\n";
              goto LABEL_316;
            }
            v120 = 0;
            if (AUSpatialProbabilityLogScope(void)::once != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v56 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                goto LABEL_268;
            }
            else
            {
              v56 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 242;
              _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nCoefficients from topLevelDict.\n", buf, 0x12u);
            }
LABEL_268:
            if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v49 + 64), v48, CFSTR("nCoefficients"), &v120))
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v53 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                {
LABEL_317:
                  if (AUSpatialProbabilityLogScope(void)::once != -1)
                    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                  if (AUSpatialProbabilityLogScope(void)::scope)
                  {
                    v27 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                      return 4294956445;
                  }
                  else
                  {
                    v27 = MEMORY[0x1E0C81028];
                  }
                  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 622;
                    v46 = "%25s:%-5d Loading SteeringVectorDictionary was not successful.\n";
                    goto LABEL_325;
                  }
                  return 4294956445;
                }
              }
              else
              {
                v53 = MEMORY[0x1E0C81028];
              }
              if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                goto LABEL_317;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 247;
              v55 = "%25s:%-5d Failed to load the number of filter coefficients from the plist.\n";
              goto LABEL_316;
            }
            v72 = v120;
            v71 = v121;
            *(_DWORD *)(v49 + 48) = v121;
            v73 = v122;
            *(_DWORD *)(v49 + 52) = v72;
            *(_DWORD *)(v49 + 56) = v73;
            std::vector<std::vector<float>>::resize((uint64_t *)v49, v71);
            std::vector<std::vector<float>>::resize((uint64_t *)(v49 + 24), *(unsigned int *)(v49 + 48));
            std::to_string((std::string *)buf, v50);
            v74 = std::string::insert((std::string *)buf, 0, "Beam", 4uLL);
            v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v119 = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (v119 >= 0)
              v76 = __p;
            else
              v76 = (void **)__p[0];
            v77 = CFStringCreateWithCString(0, (const char *)v76, 0x8000100u);
            Value = (const __CFDictionary *)CFDictionaryGetValue(v48, v77);
            if (Value)
            {
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v79 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  goto LABEL_343;
              }
              else
              {
                v79 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
              {
                v94 = __p;
                if (v119 < 0)
                  v94 = (void **)__p[0];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 275;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v94;
                _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
              }
LABEL_343:
              CFRelease(v77);
              v95 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("RealCoefficients"));
              if (!v95)
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1)
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  v97 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                    goto LABEL_427;
                }
                else
                {
                  v97 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 284;
                  v109 = "%25s:%-5d Missing dictionary RealCoefficients.\n";
LABEL_419:
                  _os_log_impl(&dword_1B5ED0000, v97, OS_LOG_TYPE_ERROR, v109, buf, 0x12u);
                }
LABEL_426:
                LOBYTE(v97) = 0;
                goto LABEL_427;
              }
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v96 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  goto LABEL_357;
              }
              else
              {
                v96 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 289;
                _os_log_impl(&dword_1B5ED0000, v96, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary RealCoefficients.\n", buf, 0x12u);
              }
LABEL_357:
              if (v121)
              {
                v98 = 0;
                v99 = 0;
                while (1)
                {
                  std::to_string(&v124, v99);
                  v100 = std::string::insert(&v124, 0, "Mic", 3uLL);
                  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                  *(_QWORD *)&buf[16] = *((_QWORD *)&v100->__r_.__value_.__l + 2);
                  *(_OWORD *)buf = v101;
                  v100->__r_.__value_.__l.__size_ = 0;
                  v100->__r_.__value_.__r.__words[2] = 0;
                  v100->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v124.__r_.__value_.__l.__data_);
                  v102 = buf[23] >= 0 ? buf : *(const char **)buf;
                  v103 = CFStringCreateWithCString(0, v102, 0x8000100u);
                  VectorFromDictionary = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v49 + 64), v95, v103, (char **)(*(_QWORD *)v49 + v98));
                  CFRelease(v103);
                  if (VectorFromDictionary)
                    break;
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  ++v99;
                  v98 += 24;
                  if (v99 >= v121)
                    goto LABEL_368;
                }
                if (AUSpatialProbabilityLogScope(void)::once != -1)
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  v108 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                    goto LABEL_424;
                }
                else
                {
                  v108 = MEMORY[0x1E0C81028];
                }
                if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
                  goto LABEL_424;
                LODWORD(v124.__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SVBasedProbability.cpp";
                WORD2(v124.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v124.__r_.__value_.__r.__words[1] + 6) = 301;
                v117 = "%25s:%-5d Error loading RealCoefficients.\n";
                goto LABEL_423;
              }
LABEL_368:
              v105 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("ImagCoefficients"));
              if (v105)
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1)
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  v106 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  {
LABEL_396:
                    if (!v121)
                    {
LABEL_407:
                      LOBYTE(v97) = 1;
                      *v51 = 1;
                      goto LABEL_427;
                    }
                    v110 = 0;
                    v111 = 0;
                    while (1)
                    {
                      std::to_string(&v124, v111);
                      v112 = std::string::insert(&v124, 0, "Mic", 3uLL);
                      v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                      *(_QWORD *)&buf[16] = *((_QWORD *)&v112->__r_.__value_.__l + 2);
                      *(_OWORD *)buf = v113;
                      v112->__r_.__value_.__l.__size_ = 0;
                      v112->__r_.__value_.__r.__words[2] = 0;
                      v112->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v124.__r_.__value_.__l.__data_);
                      v114 = buf[23] >= 0 ? buf : *(const char **)buf;
                      v115 = CFStringCreateWithCString(0, v114, 0x8000100u);
                      v116 = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v49 + 64), v105, v115, (char **)(*(_QWORD *)(v49 + 24) + v110));
                      CFRelease(v115);
                      if (v116)
                        break;
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      ++v111;
                      v110 += 24;
                      if (v111 >= v121)
                        goto LABEL_407;
                    }
                    if (AUSpatialProbabilityLogScope(void)::once != -1)
                      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                    if (AUSpatialProbabilityLogScope(void)::scope)
                    {
                      v108 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                      {
LABEL_424:
                        if ((buf[23] & 0x80000000) != 0)
                          operator delete(*(void **)buf);
                        goto LABEL_426;
                      }
                    }
                    else
                    {
                      v108 = MEMORY[0x1E0C81028];
                    }
                    if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
                      goto LABEL_424;
                    LODWORD(v124.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SVBasedProbability.cpp";
                    WORD2(v124.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&v124.__r_.__value_.__r.__words[1] + 6) = 329;
                    v117 = "%25s:%-5d Error loading ImagCoefficients.\n";
LABEL_423:
                    _os_log_impl(&dword_1B5ED0000, v108, OS_LOG_TYPE_ERROR, v117, (uint8_t *)&v124, 0x12u);
                    goto LABEL_424;
                  }
                }
                else
                {
                  v106 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 317;
                  _os_log_impl(&dword_1B5ED0000, v106, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary ImagCoefficients.\n", buf, 0x12u);
                }
                goto LABEL_396;
              }
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v97 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                {
LABEL_427:
                  if (SHIBYTE(v119) < 0)
                    operator delete(__p[0]);
                  if ((v97 & 1) != 0)
                    return 0;
                  goto LABEL_317;
                }
              }
              else
              {
                v97 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 312;
                v109 = "%25s:%-5d Missing dictionary ImagCoefficients.\n";
                goto LABEL_419;
              }
              goto LABEL_426;
            }
            if (AUSpatialProbabilityLogScope(void)::once != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v93 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              {
LABEL_379:
                CFRelease(v77);
                goto LABEL_426;
              }
            }
            else
            {
              v93 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              v107 = __p;
              if (v119 < 0)
                v107 = (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "SVBasedProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 268;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v107;
              _os_log_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
            }
            goto LABEL_379;
          }
LABEL_157:
          v48 = *__src;
          v49 = *((_QWORD *)this + 92);
          v50 = *((_DWORD *)this + 177);
          *(_BYTE *)(v49 + 60) = 0;
          v51 = (_BYTE *)(v49 + 60);
          v122 = 0;
          goto LABEL_158;
        }
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v27 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v27 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 606;
          v46 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n";
LABEL_325:
          v66 = v27;
          v67 = 18;
          goto LABEL_260;
        }
        break;
      case 7306:
LABEL_64:
        if (__n == 4 * (*((_DWORD *)this + 145) + 1))
        {
          memcpy(*((void **)this + 105), __src, __n);
          return 0;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v26 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          return 4294956445;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 681;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 7306;
        v46 = "%25s:%-5d Input size of SpatialProbabilityInputPostMask is not equal to the expected size (prop id: %u).\n";
        goto LABEL_259;
      default:
        if (a2 == 21)
        {
          result = 0;
          *((_BYTE *)this + 576) = *(_DWORD *)__src != 0;
        }
        else if (a2 == 3700)
        {
          result = 4294956445;
          if (__n >= 4)
          {
            if (*(_BYTE *)__src)
              return 0;
            else
              return 4294956445;
          }
        }
        return result;
    }
    return 4294956445;
  }
  switch(a2)
  {
    case 107301:
LABEL_14:
      if ((_DWORD)__n != 8
        || (v10 = *((_QWORD *)this + 94) - *((_QWORD *)this + 93), CFArrayGetCount(*__src) != v10 >> 2))
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v26 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 518;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 107301;
          v46 = "%25s:%-5d Input size of SpatialProbabilityInputSubbandDOA_CF is not equal to the expected size (prop id: %u).\n";
          goto LABEL_259;
        }
        return 4294956445;
      }
      if (*((_QWORD *)this + 94) != *((_QWORD *)this + 93))
      {
        v11 = 0;
        v12 = 0;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v12);
          CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 93) + v11));
          ++v12;
          v11 += 4;
        }
        while (v12 < (uint64_t)(*((_QWORD *)this + 94) - *((_QWORD *)this + 93)) >> 2);
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 91) + 80))(*((_QWORD *)this + 91));
      if (!*((_DWORD *)this + 150))
        return 0;
      if (AUSpatialProbabilityLogScope(void)::once != -1)
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
          return 0;
      }
      else
      {
        v9 = MEMORY[0x1E0C81028];
      }
      v64 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v64)
      {
        v65 = *((_DWORD *)this + 150);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 532;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v65;
        v59 = "%25s:%-5d Subband DOA is only used for the DOA mode. Current mode is (%d)";
        goto LABEL_329;
      }
      return result;
    case 107302:
    case 107305:
    case 107307:
LABEL_13:
      ++*((_QWORD *)this + 70);
      switch(a2)
      {
        case 107301:
          goto LABEL_14;
        case 107302:
          if ((_DWORD)__n != 8
            || (v28 = *((_QWORD *)this + 97) - *((_QWORD *)this + 96), CFArrayGetCount(*__src) != v28 >> 2))
          {
            if (AUSpatialProbabilityLogScope(void)::once != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                return 4294956445;
            }
            else
            {
              v26 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 469;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 107302;
              v46 = "%25s:%-5d Input size of SpatialProbabilityInputSourceProbability_CF is not equal to the expected siz"
                    "e (prop id: %u).\n";
              goto LABEL_259;
            }
            return 4294956445;
          }
          v29 = (const void *)*((_QWORD *)this + 97);
          if (v29 == *((const void **)this + 96))
          {
            v33 = 0;
          }
          else
          {
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v31);
              CFNumberGetValue(v32, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 96) + v30));
              ++v31;
              v29 = (const void *)*((_QWORD *)this + 96);
              v30 += 4;
            }
            while (v31 < (uint64_t)(*((_QWORD *)this + 97) - (_QWORD)v29) >> 2);
            v33 = (*((_DWORD *)this + 194) - (_DWORD)v29);
          }
          memcpy(*(void **)(*((_QWORD *)this + 91) + 280), v29, v33);
          if (*((_DWORD *)this + 160) == 1 && *((_DWORD *)this + 157) == 1)
            return 0;
          if (AUSpatialProbabilityLogScope(void)::once != -1)
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v14 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              return 0;
          }
          else
          {
            v14 = MEMORY[0x1E0C81028];
          }
          v86 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v86)
          {
            v87 = *((_DWORD *)this + 160);
            v88 = *((_DWORD *)this + 157);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 484;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v87;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v88;
            v59 = "%25s:%-5d ExternalSourceProbability is not used in the current mode: (%d, %d)";
LABEL_312:
            v89 = v14;
            v90 = 30;
            goto LABEL_330;
          }
          return result;
        case 107303:
          goto LABEL_40;
        case 107304:
          return result;
        case 107305:
          if ((_DWORD)__n != 8
            || (v34 = *((_QWORD *)this + 94) - *((_QWORD *)this + 93), CFArrayGetCount(*__src) != v34 >> 2))
          {
            if (AUSpatialProbabilityLogScope(void)::once != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                return 4294956445;
            }
            else
            {
              v26 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 654;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 107305;
              v46 = "%25s:%-5d Input size of SpatialProbabilityInputCDR_CF is not equal to the expected size (prop id: %u).\n";
              goto LABEL_259;
            }
            return 4294956445;
          }
          v35 = (const void *)*((_QWORD *)this + 103);
          if (v35 == *((const void **)this + 102))
          {
            v39 = 0;
          }
          else
          {
            v36 = 0;
            v37 = 0;
            do
            {
              v38 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v37);
              CFNumberGetValue(v38, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 102) + v36));
              ++v37;
              v35 = (const void *)*((_QWORD *)this + 102);
              v36 += 4;
            }
            while (v37 < (uint64_t)(*((_QWORD *)this + 103) - (_QWORD)v35) >> 2);
            v39 = (*((_DWORD *)this + 206) - (_DWORD)v35);
          }
          memcpy(*(void **)(*((_QWORD *)this + 91) + 368), v35, v39);
          if (*((_DWORD *)this + 157) == 2)
            return 0;
          if (AUSpatialProbabilityLogScope(void)::once != -1)
            dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
          if (AUSpatialProbabilityLogScope(void)::scope)
          {
            v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
            if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
              return 0;
          }
          else
          {
            v9 = MEMORY[0x1E0C81028];
          }
          v91 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v91)
          {
            v92 = *((_DWORD *)this + 157);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 669;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v92;
            v59 = "%25s:%-5d External CDR is not used in the current mode. Current mode is (%d)";
            goto LABEL_329;
          }
          return result;
        case 107306:
          goto LABEL_52;
        case 107307:
          if ((_DWORD)__n != 8)
          {
            if (AUSpatialProbabilityLogScope(void)::once != -1)
              dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
            if (AUSpatialProbabilityLogScope(void)::scope)
            {
              v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
              if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                return 4294956445;
            }
            else
            {
              v26 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 716;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 107307;
              v46 = "%25s:%-5d Pointer size of SpatialProbabilityInputShapeParameterPerFrequency_CF is not equal to the e"
                    "xpected size (prop id: %u).\n";
              goto LABEL_259;
            }
            return 4294956445;
          }
          Count = CFArrayGetCount(*__src);
          v41 = *((_QWORD *)this + 109);
          v42 = *((_QWORD *)this + 108);
          if (Count != (v41 - v42) >> 2)
          {
            std::vector<float>::resize((uint64_t)this + 864, Count);
            v41 = *((_QWORD *)this + 109);
            v42 = *((_QWORD *)this + 108);
          }
          if (v41 != v42)
          {
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v44);
              CFNumberGetValue(v45, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 108) + v43));
              result = 0;
              ++v44;
              v43 += 4;
            }
            while (v44 < (uint64_t)(*((_QWORD *)this + 109) - *((_QWORD *)this + 108)) >> 2);
            return result;
          }
          break;
        default:
          switch(a2)
          {
            case 7302:
              if (__n != 4 * (*((_DWORD *)this + 145) + 1))
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1)
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                    return 4294956445;
                }
                else
                {
                  v26 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 448;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 7302;
                  v46 = "%25s:%-5d Input size of SpatialProbabilityInputSourceProbability is not equal to the expected si"
                        "ze (prop id: %u).\n";
                  goto LABEL_259;
                }
                return 4294956445;
              }
              memcpy(*(void **)(*((_QWORD *)this + 91) + 280), __src, __n);
              if (*((_DWORD *)this + 160) == 1 && *((_DWORD *)this + 157) == 1)
                return 0;
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v14 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  return 0;
              }
              else
              {
                v14 = MEMORY[0x1E0C81028];
              }
              v68 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              result = 0;
              if (v68)
              {
                v69 = *((_DWORD *)this + 160);
                v70 = *((_DWORD *)this + 157);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 458;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v69;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v70;
                v59 = "%25s:%-5d ExternalSourceProbability is not used in the current mode: (%d, %d)";
                goto LABEL_312;
              }
              return result;
            case 7303:
              goto LABEL_66;
            case 7304:
              goto LABEL_58;
            case 7305:
              if (__n != 4 * (*((_DWORD *)this + 145) + 1))
              {
                if (AUSpatialProbabilityLogScope(void)::once != -1)
                  dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
                if (AUSpatialProbabilityLogScope(void)::scope)
                {
                  v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                  if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                    return 4294956445;
                }
                else
                {
                  v26 = MEMORY[0x1E0C81028];
                }
                if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 633;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 7305;
                  v46 = "%25s:%-5d Input size of SpatialProbabilityInputCDR is not equal to the expected size (prop id: %u).\n";
                  goto LABEL_259;
                }
                return 4294956445;
              }
              memcpy(*(void **)(*((_QWORD *)this + 91) + 368), __src, __n);
              if (*((_DWORD *)this + 157) == 2)
                return 0;
              if (AUSpatialProbabilityLogScope(void)::once != -1)
                dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
              if (AUSpatialProbabilityLogScope(void)::scope)
              {
                v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
                if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
                  return 0;
              }
              else
              {
                v9 = MEMORY[0x1E0C81028];
              }
              v84 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
              result = 0;
              if (v84)
              {
                v85 = *((_DWORD *)this + 157);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 643;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v85;
                v59 = "%25s:%-5d External CDR is not used in the current mode. Current mode is (%d)";
                goto LABEL_329;
              }
              break;
            case 7306:
              goto LABEL_64;
            default:
              return result;
          }
          return result;
      }
      return 0;
    case 107303:
LABEL_40:
      if ((_DWORD)__n != 8
        || (v15 = *((_QWORD *)this + 100) - *((_QWORD *)this + 99), CFArrayGetCount(*__src) != v15 >> 2))
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 4294956445;
        }
        else
        {
          v26 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 569;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 107303;
          v46 = "%25s:%-5d Input size of SpatialProbabilityInputSteeringVector_CF is not equal to the expected size (prop id: %u).\n";
          goto LABEL_259;
        }
        return 4294956445;
      }
      if (*((_QWORD *)this + 100) != *((_QWORD *)this + 99))
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v17);
          CFNumberGetValue(v18, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 99) + v16));
          ++v17;
          v16 += 4;
        }
        while (v17 < (uint64_t)(*((_QWORD *)this + 100) - *((_QWORD *)this + 99)) >> 2);
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 91) + 112))(*((_QWORD *)this + 91));
      v19 = *((_DWORD *)this + 150);
      if (v19)
      {
        if (v19 != 1)
          return 0;
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 0;
        }
        else
        {
          v9 = MEMORY[0x1E0C81028];
        }
        v80 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v80)
        {
          v81 = *((_DWORD *)this + 150);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 588;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v81;
          v59 = "%25s:%-5d Steering vector loaded from plist will be overwritten in the current mode. Current mode is (%d)";
          goto LABEL_329;
        }
      }
      else
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return 0;
        }
        else
        {
          v9 = MEMORY[0x1E0C81028];
        }
        v82 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v82)
        {
          v83 = *((_DWORD *)this + 150);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 584;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v83;
          v59 = "%25s:%-5d Steering vector is not used in the current mode. Current mode is (%d)";
LABEL_329:
          v89 = v9;
          v90 = 24;
LABEL_330:
          _os_log_impl(&dword_1B5ED0000, v89, OS_LOG_TYPE_DEFAULT, v59, buf, v90);
          return 0;
        }
      }
      return result;
    case 107306:
LABEL_52:
      if ((_DWORD)__n == 8)
      {
        v20 = *((_QWORD *)this + 106) - *((_QWORD *)this + 105);
        if (CFArrayGetCount(*__src) == v20 >> 2)
        {
          if (*((_QWORD *)this + 106) == *((_QWORD *)this + 105))
            return 0;
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v22);
            CFNumberGetValue(v23, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 105) + v21));
            result = 0;
            ++v22;
            v21 += 4;
          }
          while (v22 < (uint64_t)(*((_QWORD *)this + 106) - *((_QWORD *)this + 105)) >> 2);
          return result;
        }
      }
      if (AUSpatialProbabilityLogScope(void)::once != -1)
        dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
      if (AUSpatialProbabilityLogScope(void)::scope)
      {
        v26 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
        if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 697;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 107306;
        v46 = "%25s:%-5d Input size of SpatialProbabilityInputPostMask_CF is not equal to the expected size (prop id: %u).\n";
LABEL_259:
        v66 = v26;
        v67 = 24;
LABEL_260:
        _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_ERROR, v46, buf, v67);
      }
      return 4294956445;
    default:
      return result;
  }
}

void sub_1B6253A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialProbability::SetParameter(AUSpatialProbability *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_QWORD *)this + 66);
  if (a2 <= 0x19 && ((1 << a2) & 0x20C5B80) != 0)
  {
    result = 0;
    ++*((_QWORD *)this + 68);
  }
  return result;
}

uint64_t AUSpatialProbability::CanScheduleParameters(AUSpatialProbability *this)
{
  return 0;
}

uint64_t AUSpatialProbability::ProcessMultipleBufferLists(AUSpatialProbability *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v11;
  int *v12;
  int v13;
  vDSP_Length v14;
  NSObject *v15;
  NSObject *v17;
  NSObject *v18;
  int v19;
  const char *v20;
  vDSP_Length v21;
  const void **v22;
  int v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int *v31;
  AudioBufferList *v32;
  int v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  BOOL *v43;
  unint64_t v44;
  vDSP_Length v45;
  vDSP_Length v46;
  uint64_t v47;
  NSObject *v48;
  AudioBufferList **v49;
  __int16 v50;
  uint64_t v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  AudioBufferList v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v11)
  {
    AUSpatialProbability::UpdateState(this);
    *((_QWORD *)this + 67) = v11;
  }
  if (*((_QWORD *)this + 91)
    && (*((_QWORD *)this + 68) != *((_QWORD *)this + 69) || *((_QWORD *)this + 70) != *((_QWORD *)this + 71)))
  {
    AUSpatialProbability::UpdateKappaState(this);
  }
  if (*((_DWORD *)this + 145) != a3)
    return 4294956422;
  v12 = (int *)*a5;
  if (!*a5)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v17 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v57.mNumberBuffers = 136315394;
      *(_QWORD *)(&v57.mNumberBuffers + 1) = "AUSpatialProbability.cpp";
      LOWORD(v57.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v57.mBuffers[0].mDataByteSize + 2) = 1671;
      _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d InputSignals cannot be NULL. It is a required input.\n", (uint8_t *)&v57, 0x12u);
    }
    return 4294956420;
  }
  v13 = *v12;
  if (*v12 != *((_DWORD *)this + 148))
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v18 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = *((_DWORD *)this + 148);
      v57.mNumberBuffers = 136315650;
      *(_QWORD *)(&v57.mNumberBuffers + 1) = "AUSpatialProbability.cpp";
      LOWORD(v57.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v57.mBuffers[0].mDataByteSize + 2) = 1678;
      WORD1(v57.mBuffers[0].mData) = 1024;
      HIDWORD(v57.mBuffers[0].mData) = v19;
      v20 = "%25s:%-5d Number of channels on the input bus in not matching the expected number of channels (%u).\n";
LABEL_52:
      _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v57, 0x18u);
    }
    return 4294956428;
  }
  if (*a7 && (*a7)->mNumberBuffers != v13)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v18 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v23 = *((_DWORD *)this + 148);
      v57.mNumberBuffers = 136315650;
      *(_QWORD *)(&v57.mNumberBuffers + 1) = "AUSpatialProbability.cpp";
      LOWORD(v57.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v57.mBuffers[0].mDataByteSize + 2) = 1689;
      WORD1(v57.mBuffers[0].mData) = 1024;
      HIDWORD(v57.mBuffers[0].mData) = v23;
      v20 = "%25s:%-5d Number of channels on the output bus in not matching the expected number of channels (%u).\n";
      goto LABEL_52;
    }
    return 4294956428;
  }
  v49 = a7;
  v50 = 0;
  *(_QWORD *)&v57.mNumberBuffers = *((_QWORD *)this + 73);
  v57.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
  v58 = 4;
  v59 = v13;
  v60 = 32;
  AudioDSP::Utility::DetectNonFinites((AudioDSP::Utility *)(2 * a3), v12, &v57, (const AudioStreamBasicDescription *)((char *)&v50 + 1), (BOOL *)a5);
  if (!*((_BYTE *)this + 576) && (!HIBYTE(v50) || !*((_BYTE *)this + 596)))
  {
    v21 = (*((_DWORD *)this + 145) + 1);
    v22 = (const void **)*((_QWORD *)this + 91);
    if (*((_BYTE *)this + 696))
    {
      memcpy(*((void **)this + 111), v22[35], 4 * (*((_DWORD *)this + 145) + 1));
      vDSP_vclr(*((float **)this + 114), 1, v21);
      vDSP_meanv(*((const float **)this + 111), 1, (float *)this + 171, v21);
      *((_DWORD *)this + 172) = 0;
      *((float *)this + 173) = 1.0 - *((float *)this + 171);
      memcpy(*((void **)this + 117), *((const void **)this + 105), 4 * v21);
    }
    else
    {
      (*((void (**)(const void **, _QWORD))*v22 + 6))(v22, *a5);
      memcpy(*((void **)this + 111), *(const void **)(*((_QWORD *)this + 91) + 304), 4 * v21);
      memcpy(*((void **)this + 114), *(const void **)(*((_QWORD *)this + 91) + 328), 4 * v21);
      v24 = *((_QWORD *)this + 91);
      *(_QWORD *)((char *)this + 684) = *(_QWORD *)(v24 + 352);
      *((_DWORD *)this + 173) = *(_DWORD *)(v24 + 360);
      v25 = *((_DWORD *)this + 167);
      switch(v25)
      {
        case 2:
          HIDWORD(v51) = 1065353216;
          vDSP_vfill((const float *)&v51 + 1, *((float **)this + 117), 1, v21);
          vDSP_vsub(*((const float **)this + 114), 1, *((const float **)this + 117), 1, *((float **)this + 117), 1, v21);
          vDSP_vthr(*((const float **)this + 117), 1, (const float *)this + 168, *((float **)this + 117), 1, v21);
          break;
        case 1:
          HIDWORD(v51) = 0;
          vDSP_meanv(*((const float **)this + 111), 1, (float *)&v51 + 1, *((unsigned int *)this + 145));
          v26 = *((float *)&v51 + 1);
          v27 = *((float *)this + 180);
          v28 = 0.0;
          if (v27 != 0.0)
          {
            v29 = *((double *)this + 73);
            v28 = expf((float)((float)-(float)*((unsigned int *)this + 145) / v29) / v27);
          }
          v30 = (float)(v28
                      * *(float *)&AUSpatialProbability::UpdateProbabilitiesAndPostMask(AudioBufferList const&)::SPPHangover)
              + (float)((float)(1.0 - v28) * v26);
          if (v26 >= *(float *)&AUSpatialProbability::UpdateProbabilitiesAndPostMask(AudioBufferList const&)::SPPHangover)
            v30 = v26;
          AUSpatialProbability::UpdateProbabilitiesAndPostMask(AudioBufferList const&)::SPPHangover = LODWORD(v30);
          if (v30 >= *((float *)this + 179))
            vDSP_vthr(*((const float **)this + 111), 1, (const float *)this + 168, *((float **)this + 117), 1, v21);
          else
            vDSP_vfill((const float *)this + 178, *((float **)this + 117), 1, v21);
          break;
        case 0:
          HIDWORD(v51) = 1065353216;
          vDSP_vfill((const float *)&v51 + 1, *((float **)this + 117), 1, v21);
          break;
      }
      vDSP_vthr(*((const float **)this + 111), 1, (const float *)this + 175, *((float **)this + 111), 1, v21);
    }
    v31 = (int *)*a5;
    v32 = *v49;
    v33 = *((_DWORD *)this + 145);
    v34 = *((_QWORD *)this + 9);
    if (v34)
    {
      v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
    }
    else
    {
      v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v36)
        v35 = 0;
      else
        v35 = *v36;
    }
    ausdk::AUElement::SetParameter(v35, 0x14u, *((float *)this + 171), 0);
    v37 = *((_QWORD *)this + 9);
    if (v37)
    {
      v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
    }
    else
    {
      v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v39)
        v38 = 0;
      else
        v38 = *v39;
    }
    ausdk::AUElement::SetParameter(v38, 0x15u, *((float *)this + 172), 0);
    v40 = *((_QWORD *)this + 9);
    if (v40)
    {
      v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
    }
    else
    {
      v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v42)
        v41 = 0;
      else
        v41 = *v42;
    }
    ausdk::AUElement::SetParameter(v41, 0x16u, *((float *)this + 173), 0);
    if (v32->mNumberBuffers)
    {
      v44 = 0;
      v45 = (v33 + 1);
      v46 = (v33 - 1);
      v47 = 4;
      do
      {
        vDSP_vmul(*((const float **)this + 117), 1, *(const float **)&v31[v47], 1, *(float **)((char *)&v32->mNumberBuffers + v47 * 4), 1, v45);
        vDSP_vmul((const float *)(*((_QWORD *)this + 117) + 4), 1, (const float *)(*(_QWORD *)&v31[v47] + 4 * v45), 1, (float *)(*(_QWORD *)((char *)&v32->mNumberBuffers + v47 * 4) + 4 * v45), 1, v46);
        ++v44;
        v47 += 4;
      }
      while (v44 < v32->mNumberBuffers);
    }
    AudioDSP::Utility::DetectNonFinites((AudioDSP::Utility *)(2 * a3), *v49, &v57, (const AudioStreamBasicDescription *)&v50, v43);
    if (!(_BYTE)v50 || !*((_BYTE *)this + 596))
      return 0;
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v48 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      {
LABEL_95:
        AUSpatialProbability::InitializeSpatialProbabilityClasses(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *v49);
        return 0;
      }
    }
    else
    {
      v48 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v51) = 136315650;
      v52 = "AUSpatialProbability.cpp";
      v53 = 1024;
      v54 = 1735;
      v55 = 1024;
      v56 = v50;
      _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d (OutputSignals) is NOT finite: (%u)\n", (uint8_t *)&v51 + 4, 0x18u);
    }
    goto LABEL_95;
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  v51 = 0x3F80000000000000;
  v14 = (*((_DWORD *)this + 145) + 1);
  vDSP_vfill((const float *)&v51 + 1, *((float **)this + 117), 1, v14);
  vDSP_vfill((const float *)&v51 + 1, *((float **)this + 111), 1, v14);
  vDSP_vfill((const float *)&v51, *((float **)this + 114), 1, v14);
  if (HIBYTE(v50))
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v15 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        return 0;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v51) = 136315650;
      v52 = "AUSpatialProbability.cpp";
      v53 = 1024;
      v54 = 1716;
      v55 = 1024;
      v56 = HIBYTE(v50);
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d (InputSignals) is NOT finite: (%u)\n", (uint8_t *)&v51 + 4, 0x18u);
    }
  }
  return 0;
}

uint64_t AUSpatialProbability::Render(AUSpatialProbability *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUIOElement *v10;
  uint64_t v11;
  ausdk::AUIOElement *v12;
  uint64_t BufferList;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (ausdk::AUBase::HasInput(this, 0))
  {
    Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 80), 0);
    result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
    if (!(_DWORD)result)
    {
      v10 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 128), 0);
      v14[0] = ausdk::AUIOElement::PrepareBuffer(v10, a4);
      v11 = ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 80), 0);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
      return (*(uint64_t (**)(AUSpatialProbability *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &BufferList, 1, v14);
    }
  }
  else
  {
    v12 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUSpatialProbability *)((char *)this + 128), 0);
    ausdk::AUIOElement::PrepareBuffer(v12, a4);
    return 0;
  }
  return result;
}

uint64_t AUSpatialProbability::GetParameterList(AUSpatialProbability *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_QWORD *)a3 + 14) = 0x1D0000001CLL;
  }
  result = 0;
  *a4 = 30;
  return result;
}

uint64_t AUSpatialProbability::GetParameterInfo(AUSpatialProbability *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterOptions flags;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  AudioUnitParameterValue v12;
  AudioUnitParameterValue v13;
  UInt32 v14;
  AudioUnitParameterUnit v15;
  const __CFString *v16;
  AudioUnitParameterOptions v17;
  AudioUnitParameterOptions v18;
  const __CFString *v19;
  const __CFString *v20;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Target definition mode. Used to define the centroid for the target model.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Target definition mode. Used to define the centroid for the target model."), buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      buffer->defaultValue = 0.0;
      flags = buffer->flags;
      v7 = -1056964608;
      goto LABEL_49;
    case 1:
      buffer->cfNameString = CFSTR("Target azimuth, used for DOA mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Target azimuth, used for DOA mode."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      v8 = 0x43340000C3340000;
      goto LABEL_45;
    case 2:
      buffer->cfNameString = CFSTR("Target elevation, used for DOA mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Target elevation, used for DOA mode."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      v8 = 0x42B40000C2B40000;
      goto LABEL_45;
    case 3:
      buffer->cfNameString = CFSTR("Target distance, used for DOA mode.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Target distance, used for DOA mode."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      v9 = 0x41A0000000000000;
      goto LABEL_30;
    case 4:
      v10 = CFSTR("DOA-based target source model (used for TargetDefinitionMode: DOA).");
      goto LABEL_13;
    case 5:
      buffer->cfNameString = CFSTR("Steering vector-based target source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Steering vector-based target source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v11 = 0x40A0000000000000;
      goto LABEL_22;
    case 6:
      buffer->cfNameString = CFSTR("Steering vector-based interfering source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Steering vector-based interfering source model (used for TargetDefinitionMode: SteeringVectorDictionary and ExternalSteeringVector)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x40A0000000000000;
      v12 = 1.0;
      goto LABEL_25;
    case 7:
      v10 = CFSTR("Shape parameter for the target model (fixed or frequency weighted).");
LABEL_13:
      buffer->cfNameString = v10;
      buffer->flags = 0x8000000;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v11 = 0x4080000000000000;
      goto LABEL_22;
    case 8:
      buffer->cfNameString = CFSTR("Maximum value of the shape parameter for the target model.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Maximum value of the shape parameter for the target model."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x424800003F800000;
      v13 = 10.0;
      goto LABEL_47;
    case 9:
      buffer->cfNameString = CFSTR("Minimum value of the shape parameter for the target model.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Minimum value of the shape parameter for the target model."), buffer->name, 52, 0x8000100u);
      v14 = 2;
      goto LABEL_43;
    case 10:
      buffer->cfNameString = CFSTR("Prior probability mode for the target and interferer (fixed or weighted).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Prior probability mode for the target and interferer (fixed or weighted)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      v15 = kAudioUnitParameterUnit_Indexed;
      goto LABEL_21;
    case 11:
      v16 = CFSTR("Prior probability of a source (either target or interfererer).");
      goto LABEL_19;
    case 12:
      v16 = CFSTR("Conditional prior probability of the target source.");
LABEL_19:
      buffer->cfNameString = v16;
      buffer->flags = 0x8000000;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v13 = 0.5;
      goto LABEL_47;
    case 13:
      buffer->cfNameString = CFSTR("Smooth subband DOA estimates? (used for TargetDefinitionMode: DOA)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Smooth subband DOA estimates? (used for TargetDefinitionMode: DOA)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      flags = buffer->flags;
      v15 = kAudioUnitParameterUnit_Boolean;
LABEL_21:
      buffer->unit = v15;
      v11 = 0x3F80000000000000;
LABEL_22:
      *(_QWORD *)&buffer->minValue = v11;
      buffer->defaultValue = 0.0;
      goto LABEL_26;
    case 14:
      buffer->cfNameString = CFSTR("Temporal smoothing of the subband DOA estimates (time constant, in seconds).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Temporal smoothing of the subband DOA estimates (time constant, in seconds)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      v17 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x40A0000000000000;
      buffer->defaultValue = 0.0;
      v18 = v17 | 0xC0100000;
      goto LABEL_50;
    case 15:
      buffer->cfNameString = CFSTR("Frequency smoothing of the subband DOA estimates (bandwith, in octaves).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Frequency smoothing of the subband DOA estimates (bandwith, in octaves)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      v12 = 0.5;
LABEL_25:
      buffer->defaultValue = v12;
LABEL_26:
      v7 = -1055916032;
      goto LABEL_49;
    case 16:
      buffer->cfNameString = CFSTR("Post-mask definition mode. Used to define computation of the real-vaued gain.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Post-mask definition mode. Used to define computation of the real-vaued gain."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v8 = 0x4000000000000000;
      goto LABEL_45;
    case 17:
      v19 = CFSTR("Minimum gain for the post-mask (in dB).");
      goto LABEL_38;
    case 18:
      buffer->cfNameString = CFSTR("Scaling parameter for sigmoid mapping from CDR to shape parameter.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Scaling parameter for sigmoid mapping from CDR to shape parameter."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v9 = 0x40A0000000000000;
LABEL_30:
      *(_QWORD *)&buffer->minValue = v9;
      v13 = 1.0;
      goto LABEL_47;
    case 19:
      buffer->cfNameString = CFSTR("Offset parameter for sigmoid mapping from CDR to shape parameter (in dB).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Offset parameter for sigmoid mapping from CDR to shape parameter (in dB)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v8 = 0x41A00000C1A00000;
      goto LABEL_45;
    case 20:
      v20 = CFSTR("Average presence probability of the target source for the current frame (averaged across subbands).");
      goto LABEL_35;
    case 21:
      v20 = CFSTR("Average presence probability of an interfering source for the current frame (averaged across subbands).");
      goto LABEL_35;
    case 22:
      v20 = CFSTR("Average presence probability of the background noise component for the current frame (averaged across subbands).");
LABEL_35:
      buffer->cfNameString = v20;
      buffer->flags = 0x8000000;
      CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      v7 = 1074823168;
      goto LABEL_49;
    case 23:
      buffer->cfNameString = CFSTR("Bypass with external probability as the target probability estimate?");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Bypass with external probability as the target probability estimate?"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      goto LABEL_44;
    case 24:
      v19 = CFSTR("Lower bound for the estimated target probability (in dB).");
LABEL_38:
      buffer->cfNameString = v19;
      buffer->flags = 0x8000000;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3281387520;
      v13 = -300.0;
      goto LABEL_47;
    case 25:
      buffer->cfNameString = CFSTR("Cutoff frequency to start decaying concentration parameter (in Hz).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Cutoff frequency to start decaying concentration parameter (in Hz)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(_QWORD *)&buffer->minValue = 0x461C4000447A0000;
      v13 = 4000.0;
      goto LABEL_47;
    case 26:
      buffer->cfNameString = CFSTR("Target beam index for steering vector-based models.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Target beam index for steering vector-based models."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v8 = 0x428E000000000000;
      goto LABEL_45;
    case 27:
      buffer->cfNameString = CFSTR("Minimum gain for the post-mask in noise (in dB).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Minimum gain for the post-mask in noise (in dB)."), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3281387520;
      v13 = -20.0;
      goto LABEL_47;
    case 28:
      buffer->cfNameString = CFSTR("Apply extra suppression if average SPP is lower than this threshold (constant probability).");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Apply extra suppression if average SPP is lower than this threshold (constant probability)."), buffer->name, 52, 0x8000100u);
      v14 = 5;
LABEL_43:
      buffer->clumpID = v14;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
LABEL_44:
      v8 = 0x3F80000000000000;
LABEL_45:
      *(_QWORD *)&buffer->minValue = v8;
      buffer->defaultValue = 0.0;
      goto LABEL_48;
    case 29:
      buffer->cfNameString = CFSTR("Hangover time of the decision of identifying a speech frame based on the SPP value (time constant, in seconds)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Hangover time of the decision of identifying a speech frame based on the SPP value (time constant, in seconds)"), buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v13 = 0.05;
LABEL_47:
      buffer->defaultValue = v13;
LABEL_48:
      v7 = -1072693248;
LABEL_49:
      v18 = flags | v7;
LABEL_50:
      result = 0;
      buffer->flags = v18;
      break;
    default:
      result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUSpatialProbability::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
  return result;
}

uint64_t AUSpatialProbability::GetParameterValueStrings(AUSpatialProbability *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  const __CFArray *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  result = 0;
  switch(a3)
  {
    case 0:
      v7 = &xmmword_1E69CC700;
      goto LABEL_13;
    case 4:
      v8 = &xmmword_1E69CC718;
      goto LABEL_11;
    case 5:
    case 6:
      v11 = xmmword_1E69CC740;
      v12 = *(_OWORD *)&off_1E69CC750;
      v13 = xmmword_1E69CC760;
      v6 = 6;
      goto LABEL_14;
    case 7:
      v8 = &xmmword_1E69CC780;
LABEL_11:
      v9 = v8[1];
      v11 = *v8;
      v12 = v9;
      *(_QWORD *)&v13 = *((_QWORD *)v8 + 4);
      v6 = 5;
      goto LABEL_14;
    case 10:
      v11 = xmmword_1E69CC770;
      v6 = 2;
      goto LABEL_14;
    case 16:
      v7 = &xmmword_1E69CC7A8;
LABEL_13:
      v11 = *v7;
      *(_QWORD *)&v12 = *((_QWORD *)v7 + 2);
      v6 = 3;
LABEL_14:
      v10 = CFArrayCreate(0, (const void **)&v11, v6, 0);
      result = 0;
      *a4 = v10;
      break;
    default:
      return result;
  }
  return result;
}

double AUSpatialProbability::GetLatency(AUSpatialProbability *this)
{
  return 0.0;
}

double AUSpatialProbability::GetTailTime(AUSpatialProbability *this)
{
  return 0.05;
}

uint64_t AUSpatialProbability::SupportsTail(AUSpatialProbability *this)
{
  return 1;
}

BOOL AUSpatialProbability::StreamFormatWritable(AUSpatialProbability *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpatialProbability::SupportedNumChannels(AUSpatialProbability *this, const AUChannelInfo **a2)
{
  uint64_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  __int16 *v6;
  int16x8x2_t v8;

  v2 = 0;
  v3 = (int16x8_t)xmmword_1B66A1330;
  v4.i64[0] = 0x1000100010001;
  v4.i64[1] = 0x1000100010001;
  v5.i64[0] = 0x8000800080008;
  v5.i64[1] = 0x8000800080008;
  do
  {
    v8.val[0] = vaddq_s16(v3, v4);
    v8.val[1] = v8.val[0];
    v6 = (__int16 *)((char *)&AUSpatialProbability::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs
                   + v2);
    vst2q_s16(v6, v8);
    v3 = vaddq_s16(v3, v5);
    v2 += 32;
  }
  while (v2 != 64);
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSpatialProbability::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 16;
}

uint64_t AUSpatialProbability::ValidFormat(AUSpatialProbability *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUSpatialProbability::ChangeStreamFormat(AUSpatialProbability *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (a4->mSampleRate != a5->mSampleRate)
    *((_QWORD *)this + 73) = *(_QWORD *)&a5->mSampleRate;
  return 0;
}

uint64_t AUSpatialProbability::SetMaxFramesPerSlice(AUSpatialProbability *this, int a2)
{
  uint64_t result;

  result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 145) != a2)
    *((_DWORD *)this + 145) = a2;
  return result;
}

uint64_t AUSpatialProbability::UpdateState(AUSpatialProbability *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  float Parameter;
  float v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  float v79;
  float v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  float v90;
  float v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  float v101;
  float v102;
  float v103;
  uint64_t result;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_DWORD *)this + 150) = (int)ausdk::AUElement::GetParameter(v3, 0);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v6, 1u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v9, 2u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v12, 3u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  *((_DWORD *)this + 154) = (int)ausdk::AUElement::GetParameter(v15, 4u);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  *((_DWORD *)this + 155) = (int)ausdk::AUElement::GetParameter(v18, 5u);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  *((_DWORD *)this + 156) = (int)ausdk::AUElement::GetParameter(v21, 6u);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  *((_DWORD *)this + 157) = (int)ausdk::AUElement::GetParameter(v24, 7u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  *((float *)this + 158) = ausdk::AUElement::GetParameter(v27, 8u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  *((float *)this + 159) = ausdk::AUElement::GetParameter(v30, 9u);
  v32 = *((_QWORD *)this + 9);
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  *((_DWORD *)this + 160) = (int)ausdk::AUElement::GetParameter(v33, 0xAu);
  v35 = *((_QWORD *)this + 9);
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  *((float *)this + 161) = ausdk::AUElement::GetParameter(v36, 0xBu);
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  *((float *)this + 162) = ausdk::AUElement::GetParameter(v39, 0xCu);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  *((_BYTE *)this + 652) = ausdk::AUElement::GetParameter(v42, 0xDu) != 0.0;
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v45, 0xEu);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v48, 0xFu);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  *((_DWORD *)this + 167) = (int)ausdk::AUElement::GetParameter(v51, 0x10u);
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  Parameter = ausdk::AUElement::GetParameter(v54, 0x11u);
  v57 = 1.0;
  if (Parameter != 0.0)
    v57 = __exp10f(Parameter / 20.0);
  *((float *)this + 168) = v57;
  v58 = *((_QWORD *)this + 9);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v59, 0x12u);
  v61 = *((_QWORD *)this + 9);
  if (v61)
  {
    v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
  }
  else
  {
    v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v63)
      v62 = 0;
    else
      v62 = *v63;
  }
  *((float *)this + 170) = ausdk::AUElement::GetParameter(v62, 0x13u);
  v64 = *((_QWORD *)this + 9);
  if (v64)
  {
    v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
  }
  else
  {
    v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v66)
      v65 = 0;
    else
      v65 = *v66;
  }
  *((float *)this + 171) = ausdk::AUElement::GetParameter(v65, 0x14u);
  v67 = *((_QWORD *)this + 9);
  if (v67)
  {
    v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
  }
  else
  {
    v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v69)
      v68 = 0;
    else
      v68 = *v69;
  }
  *((float *)this + 172) = ausdk::AUElement::GetParameter(v68, 0x15u);
  v70 = *((_QWORD *)this + 9);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  *((float *)this + 173) = ausdk::AUElement::GetParameter(v71, 0x16u);
  v73 = *((_QWORD *)this + 9);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  *((_BYTE *)this + 696) = ausdk::AUElement::GetParameter(v74, 0x17u) != 0.0;
  v76 = *((_QWORD *)this + 9);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  v79 = ausdk::AUElement::GetParameter(v77, 0x18u);
  v80 = 1.0;
  if (v79 != 0.0)
    v80 = __exp10f(v79 / 20.0);
  *((float *)this + 175) = v80;
  v81 = *((_QWORD *)this + 9);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  *((float *)this + 176) = ausdk::AUElement::GetParameter(v82, 0x19u);
  v84 = *((_QWORD *)this + 9);
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  *((_DWORD *)this + 177) = ausdk::AUElement::GetParameter(v85, 0x1Au);
  v87 = *((_QWORD *)this + 9);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  v90 = ausdk::AUElement::GetParameter(v88, 0x1Bu);
  v91 = 1.0;
  if (v90 != 0.0)
    v91 = __exp10f(v90 / 20.0);
  *((float *)this + 178) = v91;
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  *((float *)this + 179) = ausdk::AUElement::GetParameter(v93, 0x1Cu);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v96, 0x1Du);
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  v101 = ausdk::AUElement::GetParameter(v99, 0xEu);
  v102 = 0.0;
  if (v101 != 0.0)
  {
    v103 = *((double *)this + 73);
    v102 = expf((float)((float)-(float)*((unsigned int *)this + 145) / v103) / v101);
  }
  *((float *)this + 165) = v102;
  result = *((_QWORD *)this + 91);
  if (result)
  {
    (*(void (**)(uint64_t, float))(*(_QWORD *)result + 56))(result, *((float *)this + 151));
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 91) + 64))(*((_QWORD *)this + 91), *((float *)this + 152));
    result = (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 91) + 72))(*((_QWORD *)this + 91), *((float *)this + 153));
    if (*((_QWORD *)this + 91))
    {
      if (*((_QWORD *)this + 68) != *((_QWORD *)this + 69) || *((_QWORD *)this + 70) != *((_QWORD *)this + 71))
        return AUSpatialProbability::UpdateKappaState(this);
    }
  }
  return result;
}

uint64_t AUSpatialProbability::UpdateKappaState(AUSpatialProbability *this)
{
  uint64_t v2;
  float v3;
  NSObject *v4;
  double v5;
  double v6;
  uint64_t v7;
  float v8;
  NSObject *v9;
  double v10;
  double v11;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  float v15;
  unsigned int v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 91);
  *(_OWORD *)(v2 + 16) = *((_OWORD *)this + 34);
  *(_OWORD *)(v2 + 32) = *((_OWORD *)this + 35);
  v3 = *((float *)this + 158);
  if (v3 >= 0.0 && *(float *)(v2 + 56) <= v3)
  {
    *(float *)(v2 + 52) = v3;
  }
  else
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v4 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_12;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(float *)(v2 + 52);
      v6 = *(float *)(v2 + 56);
      v17 = 136316162;
      v18 = "SpatialProbabilityBase.cpp";
      v19 = 1024;
      v20 = 300;
      v21 = 2048;
      v22 = v3;
      v23 = 2048;
      v24 = v5;
      v25 = 2048;
      v26 = v6;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SpatialProbabilityBase: Shape parameter max not set to (%f), it remains at the current value (%f). KappaMax should be >= (%f).\n", (uint8_t *)&v17, 0x30u);
    }
  }
LABEL_12:
  v7 = *((_QWORD *)this + 91);
  v8 = *((float *)this + 159);
  if (v8 >= 0.0 && *(float *)(v7 + 52) >= v8)
  {
    *(float *)(v7 + 56) = v8;
    goto LABEL_23;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v9 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_23;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(float *)(v7 + 56);
    v11 = *(float *)(v7 + 52);
    v17 = 136316162;
    v18 = "SpatialProbabilityBase.cpp";
    v19 = 1024;
    v20 = 315;
    v21 = 2048;
    v22 = v8;
    v23 = 2048;
    v24 = v10;
    v25 = 2048;
    v26 = v11;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SpatialProbabilityBase: Shape parameter min not set to (%f), it remains at the current value (%f). KappaMin should be in range [0, %f].\n", (uint8_t *)&v17, 0x30u);
  }
LABEL_23:
  SpatialProbabilityBase::SetPriorProbabilities(*((SpatialProbabilityBase **)this + 91), *((float *)this + 161), *((float *)this + 162));
  result = (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 91) + 88))(*((_QWORD *)this + 91), *((float *)this + 165));
  v13 = *((_QWORD *)this + 91);
  *(_QWORD *)(v13 + 392) = *(_QWORD *)((char *)this + 676);
  v14 = *((_DWORD *)this + 145);
  v15 = (float)*((double *)this + 73) / ((float)v14 + (float)v14);
  v16 = vcvtas_u32_f32(fabsf(*((float *)this + 176) / v15));
  if (v16 >= v14)
    v16 = *((_DWORD *)this + 145);
  *(_DWORD *)(v13 + 88) = v16;
  *((_QWORD *)this + 69) = *((_QWORD *)this + 68);
  *((_QWORD *)this + 71) = *((_QWORD *)this + 70);
  return result;
}

void AUSpatialProbability::InitializeSpatialProbabilityClasses(AUSpatialProbability *this)
{
  NSObject *v2;
  int v3;
  unint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _DWORD *v16;
  double v17;
  NSObject *v18;
  unsigned int v19;
  float v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  uint32_t v43;
  double v44;
  double v45;
  int v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  float v50;
  NSObject *v51;
  int v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  NSObject *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  int64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  signed int v93;
  int v94;
  int v95;
  float *v96;
  double v97;
  double v98;
  float v99;
  double v100;
  double v101;
  double v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t *v121;
  uint64_t v122;
  float v123;
  float v124;
  float v125;
  float *v126;
  float *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  float *v133;
  int v134;
  float *v135;
  uint64_t v136;
  char *v137;
  int64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  float *v145;
  char *v146;
  char *v147;
  char *v148;
  int v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  int v155;
  char *v156;
  char *v157;
  int v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  void *v163;
  uint64_t v164;
  char *v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  int64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  int v194;
  sparse_m_float *v195;
  sparse_m_float *v196;
  char *v197;
  sparse_dimension v198;
  sparse_m_float *v199;
  unint64_t v200;
  sparse_m_float **v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  NSObject *v210;
  sparse_m_float **v211;
  char *v212;
  sparse_m_float *v213;
  NSObject *v214;
  _QWORD *v215;
  size_t v216;
  uint8_t *v217;
  const void *v218;
  uint64_t v219;
  _QWORD *v220;
  size_t v221;
  uint8_t *v222;
  const void *v223;
  uint64_t v224;
  NSObject *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  NSObject *v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  _BYTE *v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  size_t v243;
  NSObject *v244;
  NSObject *v245;
  int v246;
  const char *v247;
  NSObject *v248;
  os_log_type_t v249;
  uint32_t v250;
  uint64_t v251;
  const char *v252;
  int v253;
  uint64_t *v254;
  char **v255;
  int v256;
  char **v257;
  float *v258;
  uint64_t *v259;
  uint64_t v260;
  unint64_t v261;
  signed int v262;
  float v263;
  float v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  size_t v268;
  unsigned __int8 v269;
  float __B;
  float __C;
  float *__A;
  float *v273;
  float *v274;
  void *__p;
  char *v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  char *v280;
  uint8_t buf[40];
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2028;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize Spatial Probability Classes.\n", buf, 0x12u);
  }
LABEL_9:
  v3 = *((_DWORD *)this + 145);
  (*(void (**)(AUSpatialProbability *))(*(_QWORD *)this + 64))(this);
  v4 = (v3 + 1);
  v5 = *((_DWORD *)this + 150);
  if (v5 == 2)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v8 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_44;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2120;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Create SV-based estimator (external SV)\n", buf, 0x12u);
    }
LABEL_44:
    v19 = *((_DWORD *)this + 145);
    v20 = (float)*((double *)this + 73) / ((float)v19 + (float)v19);
    v21 = vcvtas_u32_f32(fabsf(*((float *)this + 176) / v20));
    if (v21 >= v19)
      v22 = *((_DWORD *)this + 145);
    else
      v22 = v21;
    v23 = operator new();
    SVBasedProbability::SVBasedProbability(v23, *((_DWORD *)this + 148), v4, *((_DWORD *)this + 155), *((_DWORD *)this + 156), *((_DWORD *)this + 157), *((_DWORD *)this + 160), v22, *((float *)this + 158), *((float *)this + 159), *((float *)this + 161), *((float *)this + 162), *((float *)this + 169), *((float *)this + 170));
    v24 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v23;
    if (v24)
    {
LABEL_388:
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      goto LABEL_389;
    }
    goto LABEL_389;
  }
  if (v5 != 1)
  {
    if (v5)
      goto LABEL_389;
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v6 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_52;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2039;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Create DOA-based estimator\n", buf, 0x12u);
    }
LABEL_52:
    v25 = *((_DWORD *)this + 145);
    v26 = (float)*((double *)this + 73) / ((float)v25 + (float)v25);
    v27 = vcvtas_u32_f32(fabsf(*((float *)this + 176) / v26));
    if (v27 >= v25)
      v28 = *((_DWORD *)this + 145);
    else
      v28 = v27;
    v29 = operator new();
    v30 = *((float *)this + 151);
    v31 = *((float *)this + 152);
    v32 = *((float *)this + 153);
    v33 = *((_DWORD *)this + 154);
    v34 = v4;
    v35 = *((_BYTE *)this + 652);
    v36 = *(_QWORD *)((char *)this + 660);
    v261 = v34;
    SpatialProbabilityBase::SpatialProbabilityBase(v29, v34, *((_DWORD *)this + 157), *((_DWORD *)this + 160), v28, *((float *)this + 158), *((float *)this + 159), *((float *)this + 161), *((float *)this + 162), *((float *)this + 169), *((float *)this + 170));
    *(_QWORD *)v29 = &off_1E69CA778;
    *(_QWORD *)(v29 + 440) = 0;
    *(_DWORD *)(v29 + 448) = 1065353216;
    *(_BYTE *)(v29 + 452) = 0;
    *(_DWORD *)(v29 + 456) = v33;
    v259 = (uint64_t *)(v29 + 464);
    *(_QWORD *)(v29 + 472) = 0;
    *(_QWORD *)(v29 + 480) = 0;
    *(_QWORD *)(v29 + 464) = 0;
    *(_BYTE *)(v29 + 488) = v35;
    *(_QWORD *)(v29 + 492) = v36;
    v37 = *(_DWORD *)(v29 + 8) - 1;
    *(_DWORD *)(v29 + 504) = 0;
    *(_QWORD *)(v29 + 512) = 0;
    *(_QWORD *)(v29 + 528) = 0;
    *(_QWORD *)(v29 + 520) = 0;
    v38 = v29;
    SubbandDOA::Reset((char **)(v29 + 504), v37);
    *(_QWORD *)(v29 + 536) = 0;
    std::vector<float>::vector((_QWORD *)(v29 + 544), *(unsigned int *)(v29 + 8), (_DWORD *)(v29 + 400));
    v4 = v261;
    std::vector<float>::vector((_QWORD *)(v29 + 568), *(unsigned int *)(v29 + 8), (_DWORD *)(v29 + 400));
    (*(void (**)(uint64_t, float))(*(_QWORD *)v29 + 56))(v29, v30);
    (*(void (**)(uint64_t, float))(*(_QWORD *)v29 + 64))(v29, v31);
    (*(void (**)(uint64_t, float))(*(_QWORD *)v29 + 72))(v29, v32);
    if (!*(_BYTE *)(v29 + 488))
    {
LABEL_381:
      CircularModelDOAFactory::CreateModel((uint64_t *)buf, *(_DWORD *)(v38 + 456), *(_DWORD *)(v38 + 8), *(float *)(v38 + 440), *(float *)(v38 + 444), *(float *)(v38 + 448));
      v230 = *v259;
      *v259 = *(_QWORD *)buf;
      if (v230)
        (*(void (**)(uint64_t))(*(_QWORD *)v230 + 24))(v230);
      v231 = complementaryModelType(*(_DWORD *)(v38 + 456));
      CircularModelDOAFactory::CreateModel((uint64_t *)buf, v231, *(_DWORD *)(v38 + 8), *(float *)(v38 + 440), *(float *)(v38 + 444), *(float *)(v38 + 448));
      v232 = *(_QWORD *)(v38 + 472);
      *(_QWORD *)(v38 + 472) = *(_QWORD *)buf;
      if (v232)
        (*(void (**)(uint64_t))(*(_QWORD *)v232 + 24))(v232);
      CircularModelDOAFactory::CreateModel((uint64_t *)buf, 4, *(_DWORD *)(v38 + 8), *(float *)(v38 + 440), *(float *)(v38 + 444), *(float *)(v38 + 448));
      v233 = *(_QWORD *)(v38 + 480);
      *(_QWORD *)(v38 + 480) = *(_QWORD *)buf;
      if (v233)
        (*(void (**)(uint64_t))(*(_QWORD *)v233 + 24))(v233);
      v24 = *((_QWORD *)this + 91);
      *((_QWORD *)this + 91) = v38;
      if (v24)
        goto LABEL_388;
      goto LABEL_389;
    }
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v39 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_70;
    }
    else
    {
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      v44 = *(float *)(v29 + 496);
      v45 = *(float *)(v29 + 492);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DOABasedProbability.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 56;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v44;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v45;
      _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initialize DOAConditioner with time smoothing (%f) and frequency smoothing (%f).\n", buf, 0x26u);
    }
LABEL_70:
    v46 = *(_DWORD *)(v29 + 8);
    v47 = *(_DWORD *)(v29 + 496);
    v258 = (float *)operator new(4uLL);
    *(_DWORD *)v258 = v47;
    v48 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v267, "/tmp/");
    *(_QWORD *)v48 = &off_1E69CA800;
    *(_BYTE *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 12) = 0;
    *(_QWORD *)(v48 + 24) = 0;
    *(_DWORD *)(v48 + 20) = v46;
    *(_BYTE *)(v48 + 32) = 1;
    *(_DWORD *)(v48 + 36) = 0;
    *(_WORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 44) = 0;
    *(_OWORD *)(v48 + 56) = 0u;
    v254 = (uint64_t *)(v48 + 56);
    *(_QWORD *)(v48 + 176) = 0;
    *(_QWORD *)(v48 + 184) = 0;
    *(_QWORD *)(v48 + 168) = 0;
    *(_OWORD *)(v48 + 72) = 0u;
    *(_OWORD *)(v48 + 84) = 0u;
    *(_QWORD *)(v48 + 104) = 0;
    *(_DWORD *)(v48 + 128) = 0;
    *(_DWORD *)(v48 + 160) = 0;
    *(_QWORD *)(v48 + 136) = 0;
    *(_QWORD *)(v48 + 112) = 0;
    *(_QWORD *)(v48 + 120) = 0;
    *(_QWORD *)(v48 + 144) = 0;
    *(_QWORD *)(v48 + 152) = 0;
    v257 = (char **)(v48 + 160);
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
      {
        v49 = *(NSObject **)SCLogScope(void)::scope;
        if (*(_QWORD *)SCLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)SCLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "DOAConditioner.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 31;
            _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---", buf, 0x12u);
          }
        }
      }
    }
    v50 = *v258;
    if (SCLogScope(void)::once != -1)
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
    if (SCLogScope(void)::scope)
    {
      if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
      {
        v51 = *(NSObject **)SCLogScope(void)::scope;
        if (*(_QWORD *)SCLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)SCLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            v52 = *(_DWORD *)(v48 + 20);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "DOAConditioner.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 34;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v52;
            *(_WORD *)&buf[24] = 2048;
            *(double *)&buf[26] = v50;
            _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating log Hann matrix mNumFreqBins=%u frequencySmoothing=%f", buf, 0x22u);
          }
        }
      }
    }
    v53 = *(unsigned int *)(v48 + 20);
    memset(buf, 0, 24);
    v278 = 0;
    v279 = 0;
    v280 = 0;
    __p = 0;
    v276 = 0;
    v277 = 0;
    std::vector<long long>::reserve((void **)buf, v53);
    std::vector<long long>::reserve((void **)&v278, v53);
    std::vector<float>::reserve(&__p, v53);
    v265 = v48;
    v54 = *(char **)&buf[8];
    v260 = v38;
    if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
    {
      v56 = *(char **)buf;
      v57 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v59 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
      if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2 > v58)
        v58 = v59 >> 2;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&buf[16], v60);
        v56 = *(char **)buf;
        v54 = *(char **)&buf[8];
      }
      else
      {
        v61 = 0;
      }
      v63 = &v61[8 * v57];
      v64 = &v61[8 * v60];
      *(_QWORD *)v63 = 0;
      v55 = v63 + 8;
      while (v54 != v56)
      {
        v65 = *((_QWORD *)v54 - 1);
        v54 -= 8;
        *((_QWORD *)v63 - 1) = v65;
        v63 -= 8;
      }
      *(_QWORD *)buf = v63;
      *(_QWORD *)&buf[8] = v55;
      *(_QWORD *)&buf[16] = v64;
      if (v56)
        operator delete(v56);
    }
    else
    {
      **(_QWORD **)&buf[8] = 0;
      v55 = v54 + 8;
    }
    *(_QWORD *)&buf[8] = v55;
    v66 = v279;
    if (v279 >= (uint64_t *)v280)
    {
      v68 = v278;
      v69 = v279 - v278;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v71 = v280 - (char *)v278;
      if ((v280 - (char *)v278) >> 2 > v70)
        v70 = v71 >> 2;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v280, v72);
        v68 = v278;
        v66 = v279;
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[8 * v69];
      v75 = &v73[8 * v72];
      *(_QWORD *)v74 = 0;
      v67 = (uint64_t *)(v74 + 8);
      while (v66 != v68)
      {
        v76 = *--v66;
        *((_QWORD *)v74 - 1) = v76;
        v74 -= 8;
      }
      v278 = (uint64_t *)v74;
      v279 = v67;
      v280 = v75;
      if (v68)
        operator delete(v68);
    }
    else
    {
      *v279 = 0;
      v67 = v66 + 1;
    }
    v279 = v67;
    v77 = v276;
    if ((unint64_t)v276 >= v277)
    {
      v79 = (char *)__p;
      v80 = (v276 - (_BYTE *)__p) >> 2;
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 62)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v82 = v277 - (_QWORD)__p;
      if ((uint64_t)(v277 - (_QWORD)__p) >> 1 > v81)
        v81 = v82 >> 1;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
        v83 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83)
      {
        v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v277, v83);
        v79 = (char *)__p;
        v77 = v276;
      }
      else
      {
        v84 = 0;
      }
      v85 = &v84[4 * v80];
      v86 = &v84[4 * v83];
      *(_DWORD *)v85 = 1065353216;
      v78 = v85 + 4;
      while (v77 != v79)
      {
        v87 = *((_DWORD *)v77 - 1);
        v77 -= 4;
        *((_DWORD *)v85 - 1) = v87;
        v85 -= 4;
      }
      __p = v85;
      v276 = v78;
      v277 = (unint64_t)v86;
      if (v79)
        operator delete(v79);
    }
    else
    {
      *(_DWORD *)v276 = 1065353216;
      v78 = v77 + 4;
    }
    v255 = (char **)(v48 + 128);
    v256 = v46;
    v276 = v78;
    v266 = v53;
    if (v50 <= 0.0)
    {
      if (v53 >= 2)
      {
        v164 = 1;
        do
        {
          v165 = *(char **)&buf[8];
          if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
          {
            v167 = *(char **)buf;
            v168 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
            v169 = v168 + 1;
            if ((unint64_t)(v168 + 1) >> 61)
              goto LABEL_441;
            v170 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
            if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2 > v169)
              v169 = v170 >> 2;
            if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
              v171 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v171 = v169;
            if (v171)
            {
              v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&buf[16], v171);
              v167 = *(char **)buf;
              v165 = *(char **)&buf[8];
            }
            else
            {
              v172 = 0;
            }
            v173 = (uint64_t *)&v172[8 * v168];
            *v173 = v164;
            v166 = v173 + 1;
            while (v165 != v167)
            {
              v174 = *((_QWORD *)v165 - 1);
              v165 -= 8;
              *--v173 = v174;
            }
            *(_QWORD *)buf = v173;
            *(_QWORD *)&buf[8] = v166;
            *(_QWORD *)&buf[16] = &v172[8 * v171];
            if (v167)
              operator delete(v167);
          }
          else
          {
            **(_QWORD **)&buf[8] = v164;
            v166 = v165 + 8;
          }
          *(_QWORD *)&buf[8] = v166;
          v175 = v279;
          if (v279 >= (uint64_t *)v280)
          {
            v177 = v278;
            v178 = v279 - v278;
            v179 = v178 + 1;
            if ((unint64_t)(v178 + 1) >> 61)
LABEL_441:
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v180 = v280 - (char *)v278;
            if ((v280 - (char *)v278) >> 2 > v179)
              v179 = v180 >> 2;
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
              v181 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v181 = v179;
            if (v181)
            {
              v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v280, v181);
              v177 = v278;
              v175 = v279;
            }
            else
            {
              v182 = 0;
            }
            v183 = (uint64_t *)&v182[8 * v178];
            *v183 = v164;
            v176 = v183 + 1;
            while (v175 != v177)
            {
              v184 = *--v175;
              *--v183 = v184;
            }
            v278 = v183;
            v279 = v176;
            v280 = &v182[8 * v181];
            if (v177)
              operator delete(v177);
          }
          else
          {
            *v279 = v164;
            v176 = v175 + 1;
          }
          v279 = v176;
          v185 = v276;
          if ((unint64_t)v276 >= v277)
          {
            v187 = (char *)__p;
            v188 = (v276 - (_BYTE *)__p) >> 2;
            v189 = v188 + 1;
            if ((unint64_t)(v188 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v190 = v277 - (_QWORD)__p;
            if ((uint64_t)(v277 - (_QWORD)__p) >> 1 > v189)
              v189 = v190 >> 1;
            if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
              v191 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v191 = v189;
            if (v191)
            {
              v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v277, v191);
              v187 = (char *)__p;
              v185 = v276;
            }
            else
            {
              v192 = 0;
            }
            v193 = &v192[4 * v188];
            *(_DWORD *)v193 = 1065353216;
            v186 = v193 + 4;
            while (v185 != v187)
            {
              v194 = *((_DWORD *)v185 - 1);
              v185 -= 4;
              *((_DWORD *)v193 - 1) = v194;
              v193 -= 4;
            }
            __p = v193;
            v276 = v186;
            v277 = (unint64_t)&v192[4 * v191];
            if (v187)
              operator delete(v187);
          }
          else
          {
            *(_DWORD *)v276 = 1065353216;
            v186 = v185 + 4;
          }
          v276 = v186;
          ++v164;
          v53 = v266;
        }
        while (v164 != v266);
      }
    }
    else if (v53 >= 2)
    {
      v264 = exp2f(v50 * -0.5);
      v263 = exp2f(v50 * 0.5);
      v262 = v53 - 1;
      v88 = 1;
      do
      {
        v89 = v263 * (float)v88;
        v90 = logf(v264 * (float)v88);
        v91 = logf(v89);
        LODWORD(v92) = vcvtps_s32_f32(v264 * (float)v88);
        v93 = vcvtms_s32_f32(v89);
        if (v262 >= v93)
          v94 = v93;
        else
          v94 = v262;
        v95 = v94 + 1;
        __A = 0;
        v273 = 0;
        v274 = 0;
        std::vector<float>::reserve((void **)&__A, v94 + 1 - (int)v92);
        if (v94 >= (int)v92)
        {
          v92 = (int)v92;
          v97 = v90;
          v98 = (float)(v91 - v90);
          do
          {
            v99 = (log((double)v92) - v97) / v98;
            v100 = cos(v99 * 6.28318531);
            v101 = log((double)v92 + 0.5);
            v102 = log((double)v92 + -0.5);
            v103 = *(char **)&buf[8];
            if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
            {
              v105 = *(char **)buf;
              v106 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 61)
                goto LABEL_439;
              v108 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
              if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2 > v107)
                v107 = v108 >> 2;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
                v109 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&buf[16], v109);
                v105 = *(char **)buf;
                v103 = *(char **)&buf[8];
              }
              else
              {
                v110 = 0;
              }
              v111 = (uint64_t *)&v110[8 * v106];
              *v111 = v88;
              v104 = v111 + 1;
              while (v103 != v105)
              {
                v112 = *((_QWORD *)v103 - 1);
                v103 -= 8;
                *--v111 = v112;
              }
              *(_QWORD *)buf = v111;
              *(_QWORD *)&buf[8] = v104;
              *(_QWORD *)&buf[16] = &v110[8 * v109];
              if (v105)
                operator delete(v105);
            }
            else
            {
              **(_QWORD **)&buf[8] = v88;
              v104 = v103 + 8;
            }
            *(_QWORD *)&buf[8] = v104;
            v113 = v279;
            if (v279 >= (uint64_t *)v280)
            {
              v115 = v278;
              v116 = v279 - v278;
              v117 = v116 + 1;
              if ((unint64_t)(v116 + 1) >> 61)
LABEL_439:
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v118 = v280 - (char *)v278;
              if ((v280 - (char *)v278) >> 2 > v117)
                v117 = v118 >> 2;
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                v119 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v119 = v117;
              if (v119)
              {
                v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v280, v119);
                v115 = v278;
                v113 = v279;
              }
              else
              {
                v120 = 0;
              }
              v121 = (uint64_t *)&v120[8 * v116];
              *v121 = v92;
              v114 = v121 + 1;
              while (v113 != v115)
              {
                v122 = *--v113;
                *--v121 = v122;
              }
              v278 = v121;
              v279 = v114;
              v280 = &v120[8 * v119];
              if (v115)
                operator delete(v115);
            }
            else
            {
              *v279 = v92;
              v114 = v113 + 1;
            }
            v123 = v100 * -0.5 + 0.5;
            v124 = v101 - v102;
            v125 = v124 * v123;
            v279 = v114;
            v126 = v273;
            if (v273 >= v274)
            {
              v127 = __A;
              v128 = v273 - __A;
              v129 = v128 + 1;
              if ((unint64_t)(v128 + 1) >> 62)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v130 = (char *)v274 - (char *)__A;
              if (((char *)v274 - (char *)__A) >> 1 > v129)
                v129 = v130 >> 1;
              if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                v131 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v131 = v129;
              if (v131)
              {
                v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v274, v131);
                v127 = __A;
                v126 = v273;
              }
              else
              {
                v132 = 0;
              }
              v133 = (float *)&v132[4 * v128];
              *v133 = v125;
              v96 = v133 + 1;
              while (v126 != v127)
              {
                v134 = *((_DWORD *)v126-- - 1);
                *((_DWORD *)v133-- - 1) = v134;
              }
              __A = v133;
              v273 = v96;
              v274 = (float *)&v132[4 * v131];
              if (v127)
                operator delete(v127);
            }
            else
            {
              *v273 = v125;
              v96 = v126 + 1;
            }
            v273 = v96;
            ++v92;
          }
          while (v92 < v95);
        }
        else
        {
          v96 = v273;
        }
        __C = 0.0;
        vDSP_sve(__A, 1, &__C, v96 - __A);
        if (fabsf(__C) <= 1.0e-12)
          __assert_rtn("CreateLogHannMat", "SubbandXYZ.cpp", 60, "fabs(wSum) > 1e-12");
        __B = 1.0 / __C;
        vDSP_vsmul(__A, 1, &__B, __A, 1, v273 - __A);
        v135 = __A;
        if ((char *)v273 - (char *)__A >= 1)
        {
          v136 = v273 - __A;
          v137 = v276;
          if (v136 <= (uint64_t)(v277 - (_QWORD)v276) >> 2)
          {
            if (v136 <= 0)
            {
              v145 = &__A[v136];
              v146 = v276;
              v147 = &v276[-4 * v136];
              v148 = v276;
              while (v147 < v137)
              {
                v149 = *(_DWORD *)v147;
                v147 += 4;
                *(_DWORD *)v148 = v149;
                v148 += 4;
              }
              v150 = &v137[4 * v136];
              v276 = v148;
              if (v146 != v150)
                memmove(&v146[-4 * ((v146 - v150) >> 2)], v137, v146 - v150);
              if (v145 != v135)
                memmove(v137, v135, (char *)v145 - (char *)v135);
            }
            else
            {
              v144 = (char *)v273 - (char *)__A;
              if (v273 != __A)
                memmove(v276, __A, (char *)v273 - (char *)__A);
              v276 = &v137[v144];
            }
          }
          else
          {
            v138 = (v276 - (_BYTE *)__p) >> 2;
            if ((unint64_t)(v138 + v136) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v139 = (uint64_t)(v277 - (_QWORD)__p) >> 1;
            if (v139 <= v138 + v136)
              v139 = v138 + v136;
            if (v277 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
              v140 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v140 = v139;
            if (v140)
            {
              v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v277, v140);
              v143 = v142;
            }
            else
            {
              v141 = 0;
              v143 = 0;
            }
            v151 = &v141[4 * v138];
            v152 = &v151[4 * v136];
            v153 = 4 * v136;
            v154 = v151;
            do
            {
              v155 = *(_DWORD *)v135++;
              *(_DWORD *)v154 = v155;
              v154 += 4;
              v153 -= 4;
            }
            while (v153);
            v156 = (char *)__p;
            if (__p != v137)
            {
              v157 = v137;
              do
              {
                v158 = *((_DWORD *)v157 - 1);
                v157 -= 4;
                *((_DWORD *)v151 - 1) = v158;
                v151 -= 4;
              }
              while (v157 != v156);
            }
            v159 = (char *)(v276 - v137);
            if (v276 != v137)
            {
              v160 = v137;
              v161 = (char *)(v276 - v137);
              v162 = v152;
              memmove(v152, v160, (size_t)v161);
              v152 = v162;
            }
            v163 = __p;
            __p = v151;
            v276 = &v159[(_QWORD)v152];
            v277 = (unint64_t)&v141[4 * v143];
            if (v163)
              operator delete(v163);
          }
        }
        if (__A)
        {
          v273 = __A;
          operator delete(__A);
        }
        ++v88;
        v53 = v266;
        v48 = v265;
      }
      while (v88 != v266);
    }
    v195 = sparse_matrix_create_float(v53, v53);
    v196 = v195;
    v4 = v261;
    v197 = (char *)&xmmword_1EF135FF8 + 8;
    if (!v195)
      goto LABEL_286;
    v198 = (v276 - (_BYTE *)__p) >> 2;
    if (v198 == (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3)
    {
      if (v198 == v279 - v278)
      {
        if (sparse_insert_entries_float(v195, v198, (const float *)__p, *(const sparse_index **)buf, v278) == SPARSE_SUCCESS)
        {
          if (sparse_commit(v196))
            v199 = 0;
          else
            v199 = v196;
LABEL_290:
          if (__p)
          {
            v276 = (char *)__p;
            operator delete(__p);
          }
          if (v278)
          {
            v279 = v278;
            operator delete(v278);
          }
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          if (!v199)
          {
            if (SCLogScope(void)::once != -1)
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
            if (SCLogScope(void)::scope)
            {
              v210 = *(NSObject **)SCLogScope(void)::scope;
              if (!*(_QWORD *)SCLogScope(void)::scope)
                goto LABEL_297;
            }
            else
            {
              v210 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "DOAConditioner.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 38;
              _os_log_impl(&dword_1B5ED0000, v210, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create frequency smoothing matrix!", buf, 0x12u);
            }
          }
LABEL_297:
          v201 = *(sparse_m_float ***)(v48 + 80);
          v200 = *(_QWORD *)(v48 + 88);
          if ((unint64_t)v201 >= v200)
          {
            v204 = *(_QWORD **)(v48 + 72);
            v205 = v201 - (sparse_m_float **)v204;
            v206 = v205 + 1;
            if ((unint64_t)(v205 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v207 = v200 - (_QWORD)v204;
            if (v207 >> 2 > v206)
              v206 = v207 >> 2;
            if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF8)
              v208 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v208 = v206;
            if (v208)
            {
              if (v208 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v209 = (char *)operator new(8 * v208);
            }
            else
            {
              v209 = 0;
            }
            v211 = (sparse_m_float **)&v209[8 * v205];
            v212 = &v209[8 * v208];
            *v211 = v199;
            v202 = v211 + 1;
            if (v201 == v204)
            {
              v203 = v260;
              v197 = (char *)&xmmword_1EF135FF8 + 8;
            }
            else
            {
              v203 = v260;
              v197 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
              do
              {
                v213 = *--v201;
                *--v211 = v213;
              }
              while (v201 != v204);
              v201 = *(sparse_m_float ***)(v48 + 72);
            }
            *(_QWORD *)(v48 + 72) = v211;
            *(_QWORD *)(v48 + 80) = v202;
            *(_QWORD *)(v48 + 88) = v212;
            if (v201)
              operator delete(v201);
          }
          else
          {
            *v201 = v199;
            v202 = v201 + 1;
            v203 = v260;
          }
          *(_QWORD *)(v48 + 80) = v202;
          if (*(unsigned int *)(v48 + 36) >= (unint64_t)(((uint64_t)v202 - *(_QWORD *)(v48 + 72)) >> 3))
            __assert_rtn("DOAConditioner", "DOAConditioner.h", 42, "mFrequencySmoothingSelection < mFrequencySmoothingMatrixOptions.size()");
          SubbandDOA::Reset(v257 - 8, v256 - 1);
          SubbandXYZ::Reset(v255, v256 - 1);
          SubbandXYZ::Reset(v257, v256 - 1);
          if (!CACFPreferencesGetAppBooleanValue(CFSTR("log_spatial_capture_doa"), CFSTR("com.apple.coreaudio"), 0))
          {
LABEL_361:
            if (*((_QWORD *)v197 + 358) != -1)
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
            if (SCLogScope(void)::scope)
            {
              if ((*(_BYTE *)(SCLogScope(void)::scope + 8) & 1) != 0)
              {
                v225 = *(NSObject **)SCLogScope(void)::scope;
                if (*(_QWORD *)SCLogScope(void)::scope)
                {
                  if (os_log_type_enabled(*(os_log_t *)SCLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "DOAConditioner.h";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 57;
                    _os_log_impl(&dword_1B5ED0000, v225, OS_LOG_TYPE_DEBUG, "%25s:%-5d Done", buf, 0x12u);
                  }
                }
              }
            }
            if ((char)v269 < 0)
              operator delete(v267);
            v226 = *(_QWORD *)(v203 + 536);
            *(_QWORD *)(v203 + 536) = v48;
            if (v226)
              (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
            operator delete(v258);
            v227 = v203;
            v228 = *(_QWORD *)(v203 + 536);
            *(_DWORD *)(v228 + 12) = *(_DWORD *)(v227 + 492);
            *(_BYTE *)(v228 + 8) = *(_BYTE *)(v227 + 488);
            if (*((_QWORD *)v197 + 358) != -1)
              dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
            if (SCLogScope(void)::scope)
            {
              v229 = *(NSObject **)SCLogScope(void)::scope;
              if (!*(_QWORD *)SCLogScope(void)::scope)
              {
LABEL_380:
                *(_BYTE *)(v228 + 32) = 0;
                v38 = v260;
                goto LABEL_381;
              }
            }
            else
            {
              v229 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v229, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "DOAConditioner.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 83;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 0;
              _os_log_impl(&dword_1B5ED0000, v229, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adapt orientation set to %i", buf, 0x18u);
            }
            goto LABEL_380;
          }
          if (*((_QWORD *)v197 + 358) != -1)
            dispatch_once(&SCLogScope(void)::once, &__block_literal_global_11993);
          if (SCLogScope(void)::scope)
          {
            v214 = *(NSObject **)SCLogScope(void)::scope;
            if (!*(_QWORD *)SCLogScope(void)::scope)
            {
LABEL_331:
              v215 = (_QWORD *)operator new();
              if ((v269 & 0x80u) == 0)
                v216 = v269;
              else
                v216 = v268;
              std::string::basic_string[abi:ne180100]((uint64_t)buf, v216 + 32);
              if ((buf[23] & 0x80u) == 0)
                v217 = buf;
              else
                v217 = *(uint8_t **)buf;
              if (v216)
              {
                if ((v269 & 0x80u) == 0)
                  v218 = &v267;
                else
                  v218 = v267;
                memmove(v217, v218, v216);
              }
              strcpy((char *)&v217[v216], "auspatialcapture-raw-doa-log.txt");
              std::ofstream::basic_ofstream(v215);
              v219 = *v254;
              *v254 = (uint64_t)v215;
              if (v219)
                (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              v220 = (_QWORD *)operator new();
              if ((v269 & 0x80u) == 0)
                v221 = v269;
              else
                v221 = v268;
              std::string::basic_string[abi:ne180100]((uint64_t)buf, v221 + 40);
              if ((buf[23] & 0x80u) == 0)
                v222 = buf;
              else
                v222 = *(uint8_t **)buf;
              if (v221)
              {
                if ((v269 & 0x80u) == 0)
                  v223 = &v267;
                else
                  v223 = v267;
                memmove(v222, v223, v221);
              }
              strcpy((char *)&v222[v221], "auspatialcapture-conditioned-doa-log.txt");
              v203 = v260;
              std::ofstream::basic_ofstream(v220);
              v224 = *(_QWORD *)(v48 + 64);
              *(_QWORD *)(v48 + 64) = v220;
              if (v224)
                (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              goto LABEL_361;
            }
          }
          else
          {
            v214 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "DOAConditioner.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 51;
            _os_log_impl(&dword_1B5ED0000, v214, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Logging DoA to files -- this is not real-time safe! Use only for debugging", buf, 0x12u);
          }
          goto LABEL_331;
        }
LABEL_286:
        v199 = 0;
        goto LABEL_290;
      }
      v252 = "val.size() == jndx.size()";
      v253 = 79;
    }
    else
    {
      v252 = "val.size() == indx.size()";
      v253 = 78;
    }
    __assert_rtn("CreateLogHannMat", "SubbandXYZ.cpp", v253, v252);
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v7 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_30;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2064;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Create SV-based estimator (SV dictionary)\n", buf, 0x12u);
  }
LABEL_30:
  v9 = *((_DWORD *)this + 145);
  v10 = (float)*((double *)this + 73) / ((float)v9 + (float)v9);
  v11 = vcvtas_u32_f32(fabsf(*((float *)this + 176) / v10));
  if (v11 >= v9)
    v12 = *((_DWORD *)this + 145);
  else
    v12 = v11;
  v13 = operator new();
  SVBasedProbability::SVBasedProbability(v13, *((_DWORD *)this + 148), v4, *((_DWORD *)this + 155), *((_DWORD *)this + 156), *((_DWORD *)this + 157), *((_DWORD *)this + 160), v12, *((float *)this + 158), *((float *)this + 159), *((float *)this + 161), *((float *)this + 162), *((float *)this + 169), *((float *)this + 170));
  v15 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v13;
  if (v15)
    v14 = ((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)v15 + 32))(v15);
  v16 = (_DWORD *)*((_QWORD *)this + 92);
  v14.n128_u32[0] = v16[14];
  v17 = (double)v14.n128_u64[0];
  if (*((double *)this + 73) != (double)v14.n128_u64[0])
  {
    *((_BYTE *)this + 576) = 1;
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v18 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_406;
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v40 = *((_QWORD *)this + 73);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2086;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v40;
      v41 = "%25s:%-5d Sampling rate in the plist (%g Hz) does not match the actual sample rate (%g Hz). Setting the AU in bypass mode.";
      v42 = v18;
      v43 = 38;
LABEL_405:
      _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEFAULT, v41, buf, v43);
      goto LABEL_406;
    }
    goto LABEL_406;
  }
  if (v16[12] != *((_DWORD *)this + 148))
  {
    *((_BYTE *)this + 576) = 1;
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v62 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_406;
    }
    else
    {
      v62 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      goto LABEL_406;
    v234 = *(_DWORD *)(*((_QWORD *)this + 92) + 48);
    v235 = *((_DWORD *)this + 148);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2091;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v234;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v235;
    v41 = "%25s:%-5d Number of microphones in the plist (%d) does not match the actual number of microphones (%d). Settin"
          "g the AU in bypass mode.";
LABEL_404:
    v42 = v62;
    v43 = 30;
    goto LABEL_405;
  }
  if (v16[13] == (_DWORD)v4)
  {
    (*(void (**)(_QWORD, _DWORD *, _DWORD *, unint64_t))(**((_QWORD **)this + 91) + 104))(*((_QWORD *)this + 91), v16, v16 + 6, v4);
    goto LABEL_406;
  }
  *((_BYTE *)this + 576) = 1;
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v62 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_406;
  }
  else
  {
    v62 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    v236 = *(_DWORD *)(*((_QWORD *)this + 92) + 52);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2096;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v236;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v4;
    v41 = "%25s:%-5d Number of subbbands in the plist (%d) does not match the actual number of subbands (%d). Setting the"
          " AU in bypass mode.";
    goto LABEL_404;
  }
LABEL_406:
  v237 = (_BYTE *)*((_QWORD *)this + 109);
  v238 = (_BYTE *)*((_QWORD *)this + 108);
  if (*((_DWORD *)this + 157) != 4)
  {
    if (v237 == v238)
      goto LABEL_389;
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v244 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        goto LABEL_389;
    }
    else
    {
      v244 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
      goto LABEL_389;
    v246 = *((_DWORD *)this + 157);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2112;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v246;
    v247 = "%25s:%-5d External Shape Parameter Per Frequency property was set, but it is not used in the current mode. Cu"
           "rrent mode is (%d)";
    v248 = v244;
    v249 = OS_LOG_TYPE_DEFAULT;
    v250 = 24;
LABEL_430:
    _os_log_impl(&dword_1B5ED0000, v248, v249, v247, buf, v250);
    goto LABEL_389;
  }
  v239 = v237 - v238;
  if (v4 == v239 >> 2)
  {
    v240 = *((_QWORD *)this + 91);
    v241 = *(void **)(v240 + 64);
    v242 = *(_QWORD *)(v240 + 72) - (_QWORD)v241;
    if (v242 >> 2 != (unint64_t)v239 >> 2)
      __assert_rtn("SetKappaSubband", "SpatialProbabilityBase.hpp", 166, "mKappaSubband.size() == (inDataByteSize / sizeof(Float32))");
    if (v242 >= (unint64_t)v239)
      v243 = v239;
    else
      v243 = v242;
    memcpy(v241, v238, v243);
    goto LABEL_389;
  }
  *((_BYTE *)this + 576) = 1;
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (AUSpatialProbabilityLogScope(void)::scope)
  {
    v245 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
    if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
      goto LABEL_389;
  }
  else
  {
    v245 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
  {
    v251 = (*((_QWORD *)this + 109) - *((_QWORD *)this + 108)) >> 2;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AUSpatialProbability.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2109;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v251;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v4;
    v247 = "%25s:%-5d Number of subbbands in the externalShapeParameterPerFrequency (%d) does not match the actual number"
           " of subbands (%d). Setting the AU in bypass mode.";
    v248 = v245;
    v249 = OS_LOG_TYPE_ERROR;
    v250 = 30;
    goto LABEL_430;
  }
LABEL_389:
  *((_QWORD *)this + 94) = *((_QWORD *)this + 93);
  std::vector<float>::resize((uint64_t)this + 744, (2 * v4));
  *((_QWORD *)this + 97) = *((_QWORD *)this + 96);
  std::vector<float>::resize((uint64_t)this + 768, v4);
  *((_QWORD *)this + 100) = *((_QWORD *)this + 99);
  std::vector<float>::resize((uint64_t)this + 792, (*((_DWORD *)this + 148) * 2 * v4));
  *((_QWORD *)this + 103) = *((_QWORD *)this + 102);
  std::vector<float>::resize((uint64_t)this + 816, v4);
  *((_QWORD *)this + 106) = *((_QWORD *)this + 105);
  std::vector<float>::resize((uint64_t)this + 840, v4);
  *((_QWORD *)this + 112) = *((_QWORD *)this + 111);
  std::vector<float>::resize((uint64_t)this + 888, v4);
  *((_QWORD *)this + 115) = *((_QWORD *)this + 114);
  std::vector<float>::resize((uint64_t)this + 912, v4);
  *((_QWORD *)this + 118) = *((_QWORD *)this + 117);
  std::vector<float>::resize((uint64_t)this + 936, v4);
}

void sub_1B6257D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, uint64_t *a12, void **a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t *a20,SpatialProbabilityBase *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  _QWORD *v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v45 = *a10;
  if (*a10)
  {
    v43[22] = v45;
    operator delete(v45);
  }
  v46 = *a9;
  if (*a9)
  {
    v43[18] = v46;
    operator delete(v46);
  }
  v47 = *a11;
  if (*a11)
  {
    v43[14] = v47;
    operator delete(v47);
  }
  v48 = (void *)v43[9];
  if (v48)
  {
    v43[10] = v48;
    operator delete(v48);
  }
  v49 = v43[8];
  v43[8] = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *a12;
  *a12 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  if (a37 < 0)
    operator delete(__p);
  MEMORY[0x1BCC95CEC](v43, 0x10A1C403A5A1335);
  operator delete(a19);
  v51 = *a13;
  if (*a13)
  {
    *((_QWORD *)a21 + 72) = v51;
    operator delete(v51);
  }
  v52 = *a14;
  if (*a14)
  {
    *((_QWORD *)a21 + 69) = v52;
    operator delete(v52);
  }
  v53 = *((_QWORD *)a21 + 67);
  *((_QWORD *)a21 + 67) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *a15;
  if (*a15)
  {
    *((_QWORD *)a21 + 65) = v54;
    operator delete(v54);
  }
  v55 = *((_QWORD *)a21 + 60);
  *((_QWORD *)a21 + 60) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
  v56 = *((_QWORD *)a21 + 59);
  *((_QWORD *)a21 + 59) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
  v57 = *a20;
  *a20 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
  SpatialProbabilityBase::~SpatialProbabilityBase(a21);
  MEMORY[0x1BCC95CEC](a21, 0x10A1C400B54FBFBLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<stvPlistHolder>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v3)
      MEMORY[0x1BCC95CEC](v3, 0x60C4044C4A2DFLL);
    v4 = (void **)(v2 + 24);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)v2;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AUOneChannelNSV4::~AUOneChannelNSV4(AUOneChannelNSV4 *this)
{
  AUOneChannelNSV4::~AUOneChannelNSV4(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E69CC7D0;
  AUOneChannelNSV4::Cleanup(this);
  v2 = *((_QWORD *)this + 70);
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x1000C8052888210);
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 70) = 0;
  v3 = *((_QWORD *)this + 72);
  if (v3)
    MEMORY[0x1BCC95CC8](v3, 0x1000C8052888210);
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 72) = 0;
  v4 = (void *)*((_QWORD *)this + 76);
  if (v4)
    free(v4);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUOneChannelNSV4::Initialize(AUOneChannelNSV4 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  double v9;
  int v10;
  double v11;
  int v12;
  BlockProcessor *v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  float Parameter;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  (*(void (**)(AUOneChannelNSV4 *))(*(_QWORD *)this + 64))(this);
  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  *((_DWORD *)this + 156) = v3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 24))(*((_QWORD *)this + 21));
    LODWORD(v3) = *((_DWORD *)this + 156);
  }
  else
  {
    v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  }
  *((_DWORD *)this + 157) = v5;
  v6 = v3 - 4;
  result = 4294956421;
  if (v6 >= 0xFFFFFFFD && (_DWORD)v5 && v5 <= 3)
  {
    *((_BYTE *)this + 548) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0) + 88) == 1718773105;
    *((_BYTE *)this + 549) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 88) == 1718773105;
    v9 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 80);
    if (*((_BYTE *)this + 376))
    {
      v10 = *((_DWORD *)this + 84);
    }
    else
    {
      v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 80);
      if (v11 >= 16000.0)
        v12 = 512;
      else
        v12 = 256;
      if (v11 >= 32000.0)
        v10 = 1024;
      else
        v10 = v12;
      v21 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0) + 108);
      v20 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 108);
      v13 = (BlockProcessor *)operator new();
      BlockProcessor::BlockProcessor(v13, 1, &v21, 1, &v20, v10, (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUOneChannelNSV4::BlockProcessClassFunc, this);
      v19 = 0;
      std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, (uint64_t)v13);
      std::unique_ptr<BlockProcessor>::reset[abi:ne180100](&v19, 0);
    }
    v14 = *((_QWORD *)this + 9);
    if (v14)
    {
      v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
    }
    else
    {
      v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v16)
        v15 = 0;
      else
        v15 = *v16;
    }
    Parameter = ausdk::AUElement::GetParameter(v15, 0xAu);
    v18 = CNoiseSuppressorV4::speex_preprocess_state_init(v10, v9, 0, 1, (int)Parameter, 1, 0);
    *((_QWORD *)this + 77) = v18;
    if (v18)
    {
      *(_DWORD *)(v18 + 460) = *((_DWORD *)this + 147) == 1;
      *(_QWORD *)(v18 + 104) = *((_QWORD *)this + 74);
      if (*((_QWORD *)this + 70))
      {
        CNoiseSuppressorV4::speex_preprocess_load_known_noise((void **)v18, (uint64_t)this + 552, 1);
        v18 = *((_QWORD *)this + 77);
      }
      if (*((_QWORD *)this + 72))
      {
        CNoiseSuppressorV4::speex_preprocess_load_known_noise((void **)v18, (uint64_t)this + 568, 2);
        v18 = *((_QWORD *)this + 77);
      }
      *(_DWORD *)(v18 + 456) = *((_DWORD *)this + 146);
      *((_DWORD *)this + 136) = *((_DWORD *)this + 135);
      AUOneChannelNSV4::UpdateParameters(this);
      return 0;
    }
    else
    {
      return 4294956421;
    }
  }
  return result;
}

void sub_1B6258530(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t *AUOneChannelNSV4::Cleanup(AUOneChannelNSV4 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 77);
  if (v2)
  {
    CNoiseSuppressorV4::speex_preprocess_state_destroy(v2);
    *((_QWORD *)this + 77) = 0;
  }
  return std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
}

uint64_t AUOneChannelNSV4::GetPropertyInfo(AUOneChannelNSV4 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v8;
  char v9;

  if (a3)
    return 4294956417;
  v8 = 4;
  v9 = 1;
  result = 4294956417;
  if (a2 > 4520)
  {
    if (a2 != 4521)
    {
      if (a2 != 4522)
      {
        if (a2 != 4523)
          return result;
        v8 = 24;
      }
      v9 = *((_BYTE *)this + 17) ^ 1;
    }
    goto LABEL_11;
  }
  if (a2 == 21 || a2 == 3700)
  {
LABEL_11:
    result = 0;
    *a6 = v9;
    *a5 = v8;
  }
  return result;
}

uint64_t AUOneChannelNSV4::GetProperty(AUOneChannelNSV4 *this, int a2, int a3, unsigned int a4, _QWORD *a5)
{
  uint64_t result;
  __int128 v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 4520)
  {
    if (a2 == 21)
    {
      v9 = (*(uint64_t (**)(AUOneChannelNSV4 *))(*(_QWORD *)this + 576))(this);
      result = 0;
    }
    else
    {
      if (a2 != 3700)
        return result;
      result = 0;
      v9 = *((unsigned __int8 *)this + 376);
    }
    goto LABEL_14;
  }
  switch(a2)
  {
    case 4521:
      result = 0;
      v9 = *((_DWORD *)this + 146);
LABEL_14:
      *(_DWORD *)a5 = v9;
      return result;
    case 4522:
      result = 0;
      v9 = *((_DWORD *)this + 147);
      goto LABEL_14;
    case 4523:
      result = 0;
      v8 = *((_OWORD *)this + 37);
      a5[2] = *((_QWORD *)this + 76);
      *(_OWORD *)a5 = v8;
      break;
  }
  return result;
}

uint64_t AUOneChannelNSV4::SetProperty(AUOneChannelNSV4 *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  float v9;
  uint64_t v10;
  CFDictionaryRef v11;
  size_t v12;
  void *v13;
  int v14;
  int v15;
  const __CFDictionary *v16;
  const void *Value;
  _BOOL4 v18;
  BOOL v19;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 4520)
  {
    if (a2 != 21)
    {
      if (a2 == 3700)
      {
        if (a6 >= 4)
        {
          result = 0;
          *((_BYTE *)this + 376) = *(_BYTE *)a5;
          return result;
        }
      }
      else
      {
        if (a2 != 4520)
          return result;
        if (*((_BYTE *)this + 17))
          return 4294956447;
        if (a5)
        {
          v16 = *a5;
          Value = CFDictionaryGetValue(*a5, CFSTR("NoiseUpperBound"));
          v18 = Value != 0;
          if (!Value || (result = AUOneChannelNSV4::SetNoiseBound((uint64_t)this, 0, Value), !(_DWORD)result))
          {
            result = (uint64_t)CFDictionaryGetValue(v16, CFSTR("NoiseLowerBound"));
            if (result)
            {
              LODWORD(result) = AUOneChannelNSV4::SetNoiseBound((uint64_t)this, 1, (CFTypeRef)result);
              if (Value)
                v19 = 1;
              else
                v19 = (_DWORD)result == 0;
              v18 = v19;
            }
            if (v18)
              return result;
            else
              return 4294956445;
          }
          return result;
        }
      }
      return 4294956445;
    }
    if (a6 < 4)
      return 4294956445;
    v14 = *(_DWORD *)a5;
    v15 = *(_DWORD *)a5 != 0;
    if (v15 != (*(unsigned int (**)(AUOneChannelNSV4 *))(*(_QWORD *)this + 576))(this))
      (*(void (**)(AUOneChannelNSV4 *, BOOL))(*(_QWORD *)this + 584))(this, v14 != 0);
    return 0;
  }
  if ((a2 - 4521) >= 2)
  {
    if (a2 != 4523)
      return result;
    if (a5)
    {
      result = 4294956445;
      if (*(float *)a5 < 0.0)
        return result;
      v9 = *((float *)a5 + 1);
      if (v9 < 0.0)
        return result;
      v10 = *((unsigned int *)a5 + 2);
      v11 = a5[2];
      *((_DWORD *)this + 148) = *(_DWORD *)a5;
      *((float *)this + 149) = v9;
      *((_DWORD *)this + 150) = v10;
      if ((_DWORD)v10)
      {
        v12 = 8 * v10;
        v13 = malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
        *((_QWORD *)this + 76) = v13;
        memcpy(v13, v11, v12);
      }
    }
    return 0;
  }
  result = 4294956445;
  if (a6 == 4)
  {
    v8 = *(_DWORD *)a5;
    if (*(_DWORD *)a5 <= 1u)
    {
      result = 0;
      if (a2 == 4521)
        *((_DWORD *)this + 146) = v8;
      else
        *((_DWORD *)this + 147) = v8;
    }
  }
  return result;
}

uint64_t AUOneChannelNSV4::SetParameter(AUOneChannelNSV4 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v10;
  ausdk::AUElement *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (!a3)
  {
    v10 = *((_QWORD *)this + 9);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
    }
    else
    {
      v12 = (_QWORD *)*((_QWORD *)this + 6);
      v11 = *((_QWORD **)this + 7) == v12 ? 0 : (ausdk::AUElement *)*v12;
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    ++*((_DWORD *)this + 135);
    if (a2 == 10)
    {
      v13 = *((_QWORD *)this + 77);
      if (v13)
      {
        v14 = a5 == 1.0 && a5 != 0.0;
        CNoiseSuppressorV4::SetNoiseEstimator(v13, v14);
      }
    }
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUOneChannelNSV4::CanScheduleParameters(AUOneChannelNSV4 *this)
{
  return 0;
}

uint64_t AUOneChannelNSV4::ProcessMultipleBufferLists(AUOneChannelNSV4 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  AudioBufferList *v13;
  float *mData;
  AudioBufferList *v15;
  float *v16;
  void *v17;
  void *v18;
  size_t mDataByteSize;
  uint64_t result;
  int v21;
  const AudioBufferList *v22;
  void *v23;
  float *v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  float Parameter;
  const float *v29;
  const AudioBufferList *v30;
  const float *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  char *v46;
  AudioBufferList *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  const void *v52;
  float *v53;
  AudioBufferList *v54;
  size_t v55;
  void *v56;
  float *v57;
  AudioBufferList *v58;
  void *v59;
  uint64_t v60;
  const float *v61[2];

  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != a3)
    return 4294956422;
  if (*((_DWORD *)this + 156) != a4 || *((_DWORD *)this + 157) != a6)
    return 4294956419;
  if ((*(unsigned int (**)(AUOneChannelNSV4 *, unsigned int *))(*(_QWORD *)this + 576))(this, a2))
  {
    if (a6 >= 2)
    {
      v13 = a7[1];
      if (v13)
      {
        mData = (float *)v13->mBuffers[0].mData;
        LODWORD(v61[0]) = 1065353216;
        if (mData)
          vDSP_vfill((const float *)v61, mData, 1, (unint64_t)v13->mBuffers[0].mDataByteSize >> 2);
      }
      if (a6 >= 3)
      {
        v15 = a7[2];
        if (v15)
        {
          v16 = (float *)v15->mBuffers[0].mData;
          LODWORD(v61[0]) = 0;
          if (v16)
            vDSP_vfill((const float *)v61, v16, 1, (unint64_t)v15->mBuffers[0].mDataByteSize >> 2);
        }
      }
    }
    if (*((unsigned __int8 *)this + 548) != *((unsigned __int8 *)this + 549))
    {
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
      return 0;
    }
    v17 = (*a5)->mBuffers[0].mData;
    v18 = (*a7)->mBuffers[0].mData;
    if (v17 == v18)
      return 0;
    mDataByteSize = (*a7)->mBuffers[0].mDataByteSize;
LABEL_17:
    memcpy(v18, v17, mDataByteSize);
    return 0;
  }
  v21 = *((_DWORD *)this + 135);
  if (v21 != *((_DWORD *)this + 136))
  {
    AUOneChannelNSV4::UpdateParameters(this);
    *((_DWORD *)this + 136) = v21;
  }
  if (a4 >= 2 && (v22 = a5[1]) != 0)
    v23 = v22->mBuffers[0].mData;
  else
    v23 = 0;
  v24 = (float *)(*a5)->mBuffers[0].mData;
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  Parameter = ausdk::AUElement::GetParameter(v26, 8u);
  v29 = 0;
  if (a4 >= 3 && Parameter)
  {
    v30 = a5[2];
    if (v30)
      v29 = (const float *)v30->mBuffers[0].mData;
    else
      v29 = 0;
  }
  if (!*((_BYTE *)this + 376))
  {
    *(_QWORD *)(*((_QWORD *)this + 77) + 600) = v23;
    return BlockProcessor::Process(*((BlockProcessor **)this + 66), a3, a5, a7);
  }
  if (*((_BYTE *)this + 548))
  {
    v31 = &v24[*((unsigned int *)this + 84)];
    v61[0] = v24;
    v61[1] = v31;
    v32 = *((_QWORD *)this + 77);
    *(_QWORD *)(v32 + 600) = v23;
    CNoiseSuppressorV4::speex_preprocess_run_freq(v32, v61, 0, v29);
  }
  else
  {
    v34 = *((_QWORD *)this + 77);
    *(_QWORD *)(v34 + 600) = v23;
    v33.n128_f32[0] = CNoiseSuppressorV4::speex_preprocess_run((int *)v34, (char *)v24, 0, v24);
  }
  v35 = *((_QWORD *)this + 77);
  if (v35)
    v36 = *(float *)(v35 + 332);
  else
    v36 = 0.0;
  v37 = *((_QWORD *)this + 9);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v37 + 32))(v37, 0, v33);
  }
  else
  {
    v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 1u, v36, 0);
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 2u, *(float *)(*((_QWORD *)this + 77) + 336), 0);
  v43 = *((_QWORD *)this + 9);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  ausdk::AUElement::SetParameter(v44, 5u, *(float *)(*((_QWORD *)this + 77) + 340), 0);
  v46 = (char *)(*a7)->mBuffers[0].mData;
  if (*((_BYTE *)this + 549))
  {
    if (a6 >= 2 && (v47 = a7[1]) != 0)
      v48 = (char *)v47->mBuffers[0].mData;
    else
      v48 = 0;
    v49 = *((unsigned int *)this + 84);
    v50 = &v46[4 * v49];
    v51 = *((_QWORD *)this + 77);
    if (v51)
    {
      v52 = *(const void **)(v51 + 584);
      v53 = *(float **)(v51 + 592);
    }
    else
    {
      v52 = 0;
      v53 = 0;
    }
    memcpy((*a7)->mBuffers[0].mData, v52, 4 * v49);
    v55 = 4 * *((unsigned int *)this + 84);
    v56 = v50;
    v57 = v53;
  }
  else
  {
    if (a6 >= 2 && (v54 = a7[1]) != 0)
      v48 = (char *)v54->mBuffers[0].mData;
    else
      v48 = 0;
    v55 = 4 * *((unsigned int *)this + 84);
    v56 = (*a7)->mBuffers[0].mData;
    v57 = v24;
  }
  memcpy(v56, v57, v55);
  if (v48 && v48 != v46)
    memcpy(v48, *(const void **)(*((_QWORD *)this + 77) + 168), 4 * *(int *)(*((_QWORD *)this + 77) + 4));
  if (a6 < 3)
    return 0;
  v58 = a7[2];
  if (!v58)
    return 0;
  result = 0;
  v59 = v58->mBuffers[0].mData;
  if (v59 && v59 != (*a7)->mBuffers[0].mData)
  {
    v60 = *((_QWORD *)this + 77);
    if (!v60)
      return 0;
    v17 = *(void **)(v60 + 192);
    mDataByteSize = 4 * *(int *)(v60 + 4);
    v18 = v59;
    goto LABEL_17;
  }
  return result;
}

uint64_t AUOneChannelNSV4::Render(AUOneChannelNSV4 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v10;
  uint64_t BufferList;
  ausdk::AUInputElement *v12;
  uint64_t v13;
  uint64_t v14;
  ausdk::AUBufferList *v15;
  _QWORD v16[3];
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  if (ausdk::AUBase::HasInput(this, 0))
  {
    Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
    result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
    if ((_DWORD)result)
      return result;
    v10 = ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
  }
  else
  {
    BufferList = 0;
  }
  if (ausdk::AUBase::HasInput(this, 1u))
  {
    v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 1u);
    result = ausdk::AUInputElement::PullInput(v12, a2, a3, 1, a4);
    if ((_DWORD)result)
      return result;
    v13 = ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 80), 1u);
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
  }
  else
  {
    v14 = 0;
  }
  v17[0] = BufferList;
  v17[1] = v14;
  v17[2] = BufferList;
  v15 = (ausdk::AUBufferList *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 144);
  v16[0] = ausdk::AUBufferList::GetBufferList(v15);
  v16[1] = ausdk::AUBufferList::GetBufferList(v15);
  v16[2] = ausdk::AUBufferList::GetBufferList(v15);
  return (*(uint64_t (**)(AUOneChannelNSV4 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 3, v17, 3, v16);
}

BOOL AUOneChannelNSV4::BusCountWritable(AUOneChannelNSV4 *this, int a2)
{
  return (a2 - 1) <= 1 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUOneChannelNSV4::SetBusCount(AUOneChannelNSV4 *this, int a2, unsigned int a3)
{
  int64x2_t *v4;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    if (a3 - 1 <= 2)
    {
      v4 = (int64x2_t *)((char *)this + 128);
      goto LABEL_7;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 4294956445;
    v8 = 136315650;
    v9 = "AUOneChannelNSV4.cpp";
    v10 = 1024;
    v11 = 286;
    v12 = 1024;
    v13 = a3;
    v6 = MEMORY[0x1E0C81028];
    v7 = "%25s:%-5d Invalid number (%u) of output buses requested. We only support 1–3 buses.";
    goto LABEL_13;
  }
  if (a2 != 1)
    return 4294956430;
  if (a3 - 1 <= 2)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v8 = 136315650;
    v9 = "AUOneChannelNSV4.cpp";
    v10 = 1024;
    v11 = 277;
    v12 = 1024;
    v13 = a3;
    v6 = MEMORY[0x1E0C81028];
    v7 = "%25s:%-5d Invalid number (%u) of input buses requested. We only support 1–3 buses.";
LABEL_13:
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v8, 0x18u);
  }
  return 4294956445;
}

uint64_t AUOneChannelNSV4::GetParameterList(AUOneChannelNSV4 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;

  if (a2)
  {
    v4 = 0;
  }
  else
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
      *((_QWORD *)a3 + 4) = 0x900000008;
      a3[10] = 10;
    }
    v4 = 11;
  }
  *a4 = v4;
  return 0;
}

uint64_t AUOneChannelNSV4::GetParameterInfo(AUOneChannelNSV4 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  AudioUnitParameterValue v6;
  uint64_t v7;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  AudioUnitParameterOptions v10;
  uint64_t v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("noise supp level");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("noise supp level"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42C80000C2C80000;
      v6 = -18.0;
      goto LABEL_14;
    case 1:
      buffer->cfNameString = CFSTR("speech prob");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("speech prob"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v7 = 0x3F80000000000000;
      goto LABEL_8;
    case 2:
      v8 = CFSTR("noise SPL (gated PS)");
      goto LABEL_11;
    case 3:
      buffer->cfNameString = CFSTR("AGC dynamic gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("AGC dynamic gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v7 = 0x41A00000C1A00000;
LABEL_8:
      *(_QWORD *)&buffer->minValue = v7;
      v9 = buffer->flags | 0x8000;
      goto LABEL_20;
    case 4:
      buffer->cfNameString = CFSTR("AGC post gain");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("AGC post gain"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A00000C1A00000;
      buffer->defaultValue = 0.0;
      return result;
    case 5:
      v8 = CFSTR("noise SPL (one mic)");
LABEL_11:
      buffer->cfNameString = v8;
      buffer->flags = 1207959552;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000041A00000;
      v6 = 40.0;
      v10 = buffer->flags | 0x8000;
      goto LABEL_17;
    case 6:
      buffer->cfNameString = CFSTR("SPL Meter Calibration");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("SPL Meter Calibration"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42C80000C1C80000;
      v6 = 80.0;
      goto LABEL_14;
    case 7:
      buffer->cfNameString = CFSTR("SPL Time Constant");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("SPL Time Constant"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      v6 = 5.0;
LABEL_14:
      v10 = buffer->flags | 0x80000000;
      goto LABEL_17;
    case 8:
      buffer->cfNameString = CFSTR("LPC Mode");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("LPC Mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v11 = 0x4080000000000000;
      goto LABEL_19;
    case 9:
      buffer->cfNameString = CFSTR("LPC VAD Clip Threshold");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("LPC VAD Clip Threshold"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x447A000000000000;
      v6 = 1000.0;
      v10 = buffer->flags | 0x84000000;
LABEL_17:
      buffer->defaultValue = v6;
      buffer->flags = v10;
      break;
    case 10:
      buffer->cfNameString = CFSTR("Noise Estimator");
      buffer->flags = 1207959552;
      CFStringGetCString(CFSTR("Noise Estimator"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v11 = 0x3F80000000000000;
LABEL_19:
      *(_QWORD *)&buffer->minValue = v11;
      v9 = buffer->flags | 0x84000000;
LABEL_20:
      buffer->defaultValue = 0.0;
      buffer->flags = v9;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUOneChannelNSV4::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 135);
  return result;
}

uint64_t AUOneChannelNSV4::GetParameterValueStrings(AUOneChannelNSV4 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  CFIndex v6;
  const __CFArray *v7;
  __int128 v8;
  __int128 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
    return 4294956430;
  if (a3 == 8 && a4)
  {
    v8 = xmmword_1E69CCA20;
    v9 = *(_OWORD *)&off_1E69CCA30;
    v10 = CFSTR("LPC Noise");
    v6 = 5;
LABEL_9:
    v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
    result = 0;
    *a4 = v7;
    return result;
  }
  result = 0;
  if (a3 == 10 && a4)
  {
    v8 = xmmword_1E69CCA48;
    v9 = unk_1E69CCA58;
    v10 = 0;
    v6 = 2;
    goto LABEL_9;
  }
  return result;
}

double AUOneChannelNSV4::GetLatency(AUOneChannelNSV4 *this)
{
  double v2;
  unint64_t v3;
  double v4;

  v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUOneChannelNSV4 *)((char *)this + 128), 0) + 80);
  if (*((_BYTE *)this + 376))
  {
    LODWORD(v3) = *((_DWORD *)this + 84);
    v4 = (double)v3;
  }
  else
  {
    v4 = 1024.0;
    if (v2 < 16000.0)
      v4 = 512.0;
    if (v2 >= 32000.0)
      v4 = 2048.0;
  }
  return v4 / v2;
}

double AUOneChannelNSV4::GetTailTime(AUOneChannelNSV4 *this)
{
  return 0.0;
}

uint64_t AUOneChannelNSV4::SupportsTail(AUOneChannelNSV4 *this)
{
  return 1;
}

BOOL AUOneChannelNSV4::StreamFormatWritable(AUOneChannelNSV4 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUOneChannelNSV4::SupportedNumChannels(AUOneChannelNSV4 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUOneChannelNSV4::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUOneChannelNSV4::ValidFormat(AUOneChannelNSV4 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  uint64_t result;
  int v7;
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerPacket;
  UInt32 mBytesPerFrame;
  UInt32 mBitsPerChannel;
  BOOL v12;
  BOOL v14;
  AudioFormatFlags mFormatFlags;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((v5 - 1) <= 1)
  {
    if (a4->mFormatID == 1718773105)
      v7 = result;
    else
      v7 = 1;
    if (v7 == 1)
    {
      mChannelsPerFrame = a4->mChannelsPerFrame;
    }
    else
    {
      mBytesPerPacket = a4->mBytesPerPacket;
      mBytesPerFrame = a4->mBytesPerFrame;
      mChannelsPerFrame = a4->mChannelsPerFrame;
      mBitsPerChannel = a4->mBitsPerChannel;
      v12 = a4->mFramesPerPacket == 1 && mBytesPerFrame == mBytesPerPacket;
      v14 = !v12 || mBitsPerChannel >> 3 > mBytesPerFrame || mChannelsPerFrame == 0;
      if (!v14
        && ((mFormatFlags = a4->mFormatFlags, (mFormatFlags & 0x20) != 0)
         || (v12 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame,
             mBytesPerPacket /= mChannelsPerFrame,
             v12)))
      {
        v16 = 8 * mBytesPerPacket;
        v17 = mBytesPerPacket == 8 && (a4->mFormatFlags & 0x1F84) == 0;
        if ((mFormatFlags & 1) != 0)
        {
          v18 = (a4->mFormatFlags & 0x1F84) == 0;
        }
        else
        {
          v17 = 0;
          v18 = 1;
        }
        v19 = v16 == mBitsPerChannel;
        v20 = v16 == mBitsPerChannel && v17;
        v21 = !v19 || v18;
        if ((mFormatFlags & 2) != 0)
        {
          v20 = 0;
          v21 = 1;
        }
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      LODWORD(result) = v20 & v21;
    }
    if (mChannelsPerFrame == 1)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUOneChannelNSV4::ShouldBypassEffect(AUOneChannelNSV4 *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t AUOneChannelNSV4::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 536) = a2;
  return this;
}

BOOL ausdk::ASBD::IsCommonFloat32(ausdk::ASBD *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v7;

  if (*((_DWORD *)this + 2) != 1819304813 || *((_DWORD *)this + 5) != 1)
    return 0;
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 != *((_DWORD *)this + 6))
    return 0;
  v4 = *((_DWORD *)this + 3);
  if ((v4 & 1) == 0 || (v4 & 0x20) == 0 && *((_DWORD *)this + 7) != 1)
    return 0;
  v5 = 0;
  if ((v4 & 2) == 0 && *((_DWORD *)this + 8) == 32)
  {
    if ((v4 & 0x20) != 0)
      v7 = 1;
    else
      v7 = *((_DWORD *)this + 7);
    return v3 == 4 * v7;
  }
  return v5;
}

void AUOneChannelNSV4::UpdateParameters(AUOneChannelNSV4 *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  __n128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  float Parameter;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  v5.n128_f32[0] = ausdk::AUElement::GetParameter(v3, 0);
  v6 = *((_QWORD *)this + 77);
  if (v6)
  {
    v7 = (int)v5.n128_f32[0];
    if ((int)v5.n128_f32[0] >= 0)
      v7 = -v7;
    *(_DWORD *)(v6 + 52) = v7;
    *(_DWORD *)(v6 + 472) = 1;
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v8 + 32))(v8, 0, v5);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  Parameter = ausdk::AUElement::GetParameter(v9, 6u);
  *(float *)(*((_QWORD *)this + 77) + 356) = Parameter;
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  v15 = ausdk::AUElement::GetParameter(v13, 7u);
  v16 = *((_QWORD *)this + 77);
  *(float *)(v16 + 360) = 1.0 - expf(-1.0 / (float)(v15 * (float)((float)*(int *)(v16 + 8) / (float)*(int *)(v16 + 4))));
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  v20 = ausdk::AUElement::GetParameter(v18, 8u);
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  v24 = ausdk::AUElement::GetParameter(v22, 9u);
  v25 = *((_QWORD *)this + 77);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 688);
    if (v26)
    {
      *(_DWORD *)(v26 + 212) = v20;
      if (v24 <= 400.0)
        v27 = v24 / 20.0;
      else
        v27 = 20.0;
      v28 = __exp10(v27);
      *(float *)(v26 + 164) = v28;
      *(float *)(*(_QWORD *)(*((_QWORD *)this + 77) + 688) + 148) = Parameter;
    }
  }
}

uint64_t AUOneChannelNSV4::SetNoiseBound(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v4;
  uint64_t v5;
  const __CFBoolean *v6;
  char v7;
  char v8;
  double v9;
  double v10;
  unsigned int *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  std::runtime_error *exception;
  std::runtime_error *v26;
  void *__p;
  uint64_t v28;
  char v29;
  CFTypeRef cfa;
  _BYTE buf[18];
  __int16 v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 552;
  if (a2)
    v4 = a1 + 568;
  if (a2 == 1)
    v5 = a1 + 568;
  else
    v5 = v4;
  CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v6 = applesauce::CF::details::find_at_key_or_optional<double,char const(&)[11]>((const __CFDictionary *)cfa, "SampleRate");
  v8 = v7;
  if (!cfa)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }
  v9 = *(double *)&v6;
  applesauce::CF::details::find_at_key_or_optional<std::vector<unsigned char>,char const(&)[13]>(&__p, (const __CFDictionary *)cfa, "NoiseProfile");
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUOneChannelNSV4.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 657;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d Sample rate is not present in the dictionary.";
LABEL_18:
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    }
LABEL_19:
    v15 = 4294956445;
    goto LABEL_29;
  }
  v10 = v9;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUOneChannelNSV4.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 655;
    v32 = 1024;
    v33 = v9;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved sample rate (%iHz).", buf, 0x18u);
  }
  if (!v29)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUOneChannelNSV4.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 664;
      v13 = MEMORY[0x1E0C81028];
      v14 = "%25s:%-5d Profile vector is not present in the dictionary.";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v11 = (unsigned int *)__p;
    v12 = v28 - (_QWORD)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUOneChannelNSV4.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 662;
    v32 = 1024;
    v33 = v28 - (_DWORD)__p;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved profile vector (length %i).", buf, 0x18u);
  }
  else
  {
    v11 = (unsigned int *)__p;
    v12 = v28 - (_QWORD)__p;
  }
  v16 = v12 >> 2;
  std::vector<float>::vector(buf, v12 >> 2);
  if (v12 >= 4)
  {
    v17 = *(_DWORD **)buf;
    v18 = v11;
    do
    {
      v19 = *v18++;
      *v17++ = bswap32(v19);
      --v16;
    }
    while (v16);
  }
  v20 = *(_QWORD *)(v5 + 8);
  if (v20)
    MEMORY[0x1BCC95CC8](v20, 0x1000C8052888210);
  *(_QWORD *)(v5 + 8) = 0;
  v21 = (void *)operator new[]();
  *(_QWORD *)(v5 + 8) = v21;
  v22 = *(void **)buf;
  v23 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
  *(_DWORD *)v5 = (*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2;
  *(_DWORD *)(v5 + 4) = (int)v10;
  memcpy(v21, v22, (v23 << 30 >> 30) & 0xFFFFFFFFFFFFFFFCLL);
  if (v22)
  {
    *(_QWORD *)&buf[8] = v22;
    operator delete(v22);
  }
  v15 = 0;
LABEL_29:
  if (v29 && __p)
    operator delete(__p);
  if (cfa)
    CFRelease(cfa);
  return v15;
}

void sub_1B6259DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16)
{
  void *v16;

  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v16)
    operator delete(v16);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a14);
  _Unwind_Resume(a1);
}

const __CFBoolean *applesauce::CF::details::find_at_key_or_optional<double,char const(&)[11]>(const __CFDictionary *a1, char *a2)
{
  const __CFBoolean *result;

  result = (const __CFBoolean *)applesauce::CF::details::at_key<char const(&)[11]>(a1, a2);
  if (result)
    return applesauce::CF::convert_as<double,0>(result);
  return result;
}

const void *applesauce::CF::details::find_at_key_or_optional<std::vector<unsigned char>,char const(&)[13]>(_BYTE *a1, const __CFDictionary *a2, char *a3)
{
  const void *result;

  result = applesauce::CF::details::at_key<char const(&)[13]>(a2, a3);
  if (result)
    return (const void *)applesauce::CF::convert_as<std::vector<unsigned char>,0>((uint64_t)a1, result);
  *a1 = 0;
  a1[24] = 0;
  return result;
}

CFTypeID applesauce::CF::convert_as<std::vector<unsigned char>,0>(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  CFTypeID result;
  const UInt8 *BytePtr;
  CFIndex Length;
  __int128 v8;
  uint64_t v9;

  TypeID = CFDataGetTypeID();
  result = CFGetTypeID(a2);
  if (TypeID == result)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    Length = CFDataGetLength((CFDataRef)a2);
    v8 = 0uLL;
    v9 = 0;
    result = (CFTypeID)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v8, BytePtr, (uint64_t)&BytePtr[Length], Length);
    *(_OWORD *)a1 = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t AUOneChannelNSV4::BlockProcessClassFunc(int **this, void *a2, uint64_t a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6;
  char *v8;
  __n128 v9;
  int *v10;
  float v11;
  int *v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  int *v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  int *v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;

  v6 = a2;
  v8 = *(char **)(*(_QWORD *)a3 + 16);
  v9.n128_f32[0] = CNoiseSuppressorV4::speex_preprocess_run(this[77], v8, 0, (const float *)v8);
  v10 = this[77];
  if (v10)
    v11 = *((float *)v10 + 83);
  else
    v11 = 0.0;
  v12 = this[9];
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(int *, _QWORD, __n128))(*(_QWORD *)v12 + 32))(v12, 0, v9);
  }
  else
  {
    v14 = (ausdk::AUElement **)this[6];
    if (this[7] == (int *)v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 1u, v11, 0);
  v15 = this[9];
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)this[6];
    if (this[7] == (int *)v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 2u, *((float *)this[77] + 84), 0);
  v18 = this[9];
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)this[6];
    if (this[7] == (int *)v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 5u, *((float *)this[77] + 85), 0);
  memcpy((*a4)->mBuffers[0].mData, v8, 4 * v6);
  return 0;
}

uint64_t *std::map<std::pair<unsigned int,unsigned int>,double>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t *v18;

  qword_1EF135990 = 0;
  qword_1EF135988 = 0;
  GetVPPreferredClientSampleRateInfoMap(void)::infoMap = (uint64_t)&qword_1EF135988;
  if (a2)
  {
    v2 = (unsigned int *)result;
    v3 = 0;
    v4 = (unsigned int *)&result[2 * a2];
    v5 = &qword_1EF135988;
    while (1)
    {
      if (v5 == &qword_1EF135988)
      {
        v7 = &qword_1EF135988;
      }
      else
      {
        v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          v8 = &qword_1EF135988;
          do
          {
            v7 = (uint64_t *)v8[2];
            v10 = *v7 == (_QWORD)v8;
            v8 = v7;
          }
          while (v10);
        }
        v9 = *((_DWORD *)v7 + 8);
        v10 = v9 == *v2;
        if (v9 >= *v2)
          v11 = 1;
        else
          v11 = -1;
        if (v10)
        {
          v12 = *((_DWORD *)v7 + 9);
          v13 = v2[1];
          v14 = v12 == v13;
          v11 = v12 >= v13 ? 1 : -1;
          if (v14)
            v11 = 0;
        }
        if ((v11 & 0x80) == 0)
        {
          result = std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,double>>>::__find_equal<std::pair<unsigned int,unsigned int>>(&v18, *v2, v2[1]);
          v15 = result;
          goto LABEL_25;
        }
      }
      if (v3)
      {
        v18 = v7;
        v15 = v7 + 1;
      }
      else
      {
        v18 = &qword_1EF135988;
        v15 = &qword_1EF135988;
      }
LABEL_25:
      if (!*v15)
      {
        v16 = operator new(0x30uLL);
        v16[2] = *(_OWORD *)v2;
        v17 = v18;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v17;
        *v15 = (uint64_t)v16;
        if (*(_QWORD *)GetVPPreferredClientSampleRateInfoMap(void)::infoMap)
        {
          GetVPPreferredClientSampleRateInfoMap(void)::infoMap = *(_QWORD *)GetVPPreferredClientSampleRateInfoMap(void)::infoMap;
          v16 = (_OWORD *)*v15;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF135988, (uint64_t *)v16);
        ++qword_1EF135990;
      }
      v2 += 4;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)GetVPPreferredClientSampleRateInfoMap(void)::infoMap;
      v3 = qword_1EF135988;
    }
  }
  return result;
}

void sub_1B625A2E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::pair<unsigned int,unsigned int>,double>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,double>>>::__find_equal<std::pair<unsigned int,unsigned int>>(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  char v10;

  v3 = &qword_1EF135988;
  v4 = qword_1EF135988;
  if (qword_1EF135988)
  {
    v5 = &qword_1EF135988;
    while (1)
    {
      v3 = (uint64_t *)v4;
      v6 = *(_DWORD *)(v4 + 32);
      if (v6 == a2)
      {
        v7 = *((_DWORD *)v3 + 9);
        v8 = v7 == a3;
        if (v7 <= a3)
        {
          if (v7 >= a3)
            v9 = 1;
          else
            v9 = -1;
          if (v8)
            v9 = 0;
          if ((v9 & 0x80) == 0)
            goto LABEL_22;
          goto LABEL_19;
        }
LABEL_13:
        v4 = *v3;
        v5 = v3;
        if (!*v3)
          goto LABEL_22;
      }
      else
      {
        if (v6 > a2)
          goto LABEL_13;
        if (v6 >= a2)
          v10 = 1;
        else
          v10 = -1;
        if ((v10 & 0x80) == 0)
          goto LABEL_22;
LABEL_19:
        v5 = v3 + 1;
        v4 = v3[1];
        if (!v4)
          goto LABEL_22;
      }
    }
  }
  v5 = &qword_1EF135988;
LABEL_22:
  *a1 = v3;
  return v5;
}

uint64_t GetVPPreferredClientSampleRate(unsigned int a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11[21];

  v11[20] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v3 = a1 - 125;
  if (v3 > 0x37)
    goto LABEL_6;
  if (((1 << (a1 - 125)) & 0x10FFFFE1E600) == 0)
  {
    if (((1 << (a1 - 125)) & 0x10000000000001) != 0)
      goto LABEL_13;
    if (v3 == 55)
    {
LABEL_8:
      v4 = 5;
      goto LABEL_9;
    }
LABEL_6:
    if (a1 > 0x2E)
      goto LABEL_14;
    if (((1 << a1) & 0x40FF9C060600) != 0)
      goto LABEL_8;
    if (((1 << a1) & 0x3000000) == 0)
    {
LABEL_14:
      v4 = 2;
      goto LABEL_9;
    }
LABEL_13:
    v4 = 0;
    goto LABEL_9;
  }
  v4 = 1;
LABEL_9:
  if ((v5 & 1) == 0)
  {
    v8 = a2;
    v10 = v4;
    v4 = v10;
    a2 = v8;
    if (v9)
    {
      v11[0] = (uint64_t *)0x600000000;
      v11[1] = (uint64_t *)0x40CF400000000000;
      v11[2] = (uint64_t *)0x500000000;
      v11[3] = (uint64_t *)0x40CF400000000000;
      v11[4] = (uint64_t *)0x600000001;
      v11[5] = (uint64_t *)0x40D7700000000000;
      v11[6] = (uint64_t *)0x500000001;
      v11[7] = (uint64_t *)0x40D7700000000000;
      v11[8] = (uint64_t *)0x600000002;
      v11[9] = (uint64_t *)0x40D7700000000000;
      v11[10] = (uint64_t *)0x500000002;
      v11[11] = (uint64_t *)0x40D7700000000000;
      v11[12] = (uint64_t *)0x600000003;
      v11[13] = (uint64_t *)0x40D7700000000000;
      v11[14] = (uint64_t *)0x500000003;
      v11[15] = (uint64_t *)0x40D7700000000000;
      v11[16] = (uint64_t *)0x600000005;
      v11[17] = (uint64_t *)0x40DF400000000000;
      v11[18] = (uint64_t *)0x500000005;
      v11[19] = (uint64_t *)0x40DF400000000000;
      std::map<std::pair<unsigned int,unsigned int>,double>::map[abi:ne180100]((uint64_t *)v11, 10);
      __cxa_atexit((void (*)(void *))std::map<std::pair<unsigned int,unsigned int>,double>::~map[abi:ne180100], &GetVPPreferredClientSampleRateInfoMap(void)::infoMap, &dword_1B5ED0000);
      a2 = v8;
      v4 = v10;
    }
  }
  v6 = *std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,double>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,double>>>::__find_equal<std::pair<unsigned int,unsigned int>>(v11, v4, a2);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return *(_QWORD *)(v6 + 40);
}

void sub_1B625A5DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B625A46CLL);
  }
  _Unwind_Resume(exception_object);
}

float DirectionalStatistics::DirectionalMean(float *a1, float *a2)
{
  float *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  __float2 v7;

  if (a2 == a1)
  {
    v5 = 0.0;
    v4 = 0.0;
  }
  else
  {
    v2 = a1;
    if ((unint64_t)(a2 - a1) <= 1)
      v3 = 1;
    else
      v3 = a2 - a1;
    v4 = 0.0;
    v5 = 0.0;
    do
    {
      v6 = *v2++;
      v7 = __sincosf_stret(v6);
      v4 = v4 + v7.__cosval;
      v5 = v5 + v7.__sinval;
      --v3;
    }
    while (v3);
  }
  return atan2f(v5, v4);
}

void ZoomCurveValue::ZoomCurveValue(ZoomCurveValue *this)
{
  std::vector<std::string> *v2;
  uint64_t i;
  __int128 v4;
  uint64_t v5;
  void **v6;
  char v7;
  __int128 v8;
  _QWORD v9[3];
  __int128 v10;

  *(_QWORD *)&v10 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v2 = (std::vector<std::string> *)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 6) = *(_QWORD *)"FOVToBeamMix";
  *(_QWORD *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_BYTE *)this + 71) = 12;
  *((_DWORD *)this + 14) = 2020167021;
  std::string::basic_string[abi:ne180100]<0>(&v8, "focused");
  std::string::basic_string[abi:ne180100]<0>(v9, "wide");
  v4 = 0uLL;
  v5 = 0;
  v6 = (void **)&v4;
  v7 = 0;
  *(_QWORD *)&v4 = operator new(0x30uLL);
  *((_QWORD *)&v4 + 1) = v4;
  v5 = v4 + 48;
  *((_QWORD *)&v4 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, &v8, &v10, (std::string *)v4);
  std::vector<std::__fs::filesystem::path>::__vdeallocate(v2);
  *(_OWORD *)((char *)this + 24) = v4;
  *((_QWORD *)this + 5) = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v9[i + 2]) < 0)
      operator delete((void *)v9[i]);
  }
}

void sub_1B625A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  _QWORD **v26;
  void **v27;
  uint64_t v29;

  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a12);
  v29 = 0;
  while (1)
  {
    if (*(&a25 + v29) < 0)
      operator delete(*(void **)((char *)&a20 + v29));
    v29 -= 24;
    if (v29 == -48)
    {
      if (*(char *)(v25 + 71) < 0)
        operator delete(*v27);
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v26);
      _Unwind_Resume(a1);
    }
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B625A938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZoomCurveValue::ZoomCurveValue(uint64_t a1, uint64_t a2, std::string *__str)
{
  std::vector<std::string> *v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (std::vector<std::string> *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::operator=((std::string *)(a1 + 48), __str);
  if (v5 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  return a1;
}

void sub_1B625A9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v3);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*v4);
  _Unwind_Resume(a1);
}

void ZoomCurveValue::SaveToDictionary(ZoomCurveValue *this, __CFDictionary *a2)
{
  __CFDictionary *v3;
  ZoomCurveValue *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  double v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *i;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  void *v17;
  ZoomCurveValue *v18;
  ZoomCurveValue **v19;
  BOOL v20;
  __CFDictionary *v21;
  ZoomCurveValue **v22;
  ZoomCurveValue *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  std::string v30;
  void *__p;
  uint64_t *v32;

  v3 = a2;
  v23 = this;
  v4 = *(ZoomCurveValue **)this;
  v21 = v3;
  v22 = (ZoomCurveValue **)((char *)this + 8);
  if (*(ZoomCurveValue **)this != (ZoomCurveValue *)((char *)this + 8))
  {
    v24 = (_QWORD *)((char *)this + 48);
    do
    {
      std::pair<std::string const,PiecewiseLinearTransform>::pair[abi:ne180100](&v30, (__int128 *)v4 + 2);
      v5 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v5 = (std::string *)v30.__r_.__value_.__r.__words[0];
      v6 = v24;
      if (*((char *)v23 + 71) < 0)
        v6 = (_QWORD *)*v24;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%s"), v5, v6);
      v7 = objc_claimAutoreleasedReturnValue();
      v27 = 0;
      v28 = 0;
      v29 = 0;
      std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v27, (uint64_t *)__p, v32, ((char *)v32 - (_BYTE *)__p) >> 3);
      v25 = (void *)v7;
      v26 = (void *)objc_opt_new();
      v8 = (void *)objc_opt_new();
      v11 = v27;
      v10 = v28;
      for (i = v27; i != v10; i += 2)
      {
        v13 = (void *)MEMORY[0x1E0C99D20];
        LODWORD(v9) = *i;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v15) = i[1];
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "arrayWithObjects:", v14, v16, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v17);

      }
      objc_msgSend(v26, "setObject:forKeyedSubscript:", v8, CFSTR("Breakpoints"));

      if (v11)
      {
        v28 = v11;
        operator delete(v11);
      }
      if (v26)
        -[__CFDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v26, v25);

      if (__p)
      {
        v32 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      v18 = (ZoomCurveValue *)*((_QWORD *)v4 + 1);
      if (v18)
      {
        do
        {
          v19 = (ZoomCurveValue **)v18;
          v18 = *(ZoomCurveValue **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (ZoomCurveValue **)*((_QWORD *)v4 + 2);
          v20 = *v19 == v4;
          v4 = (ZoomCurveValue *)v19;
        }
        while (!v20);
      }
      v4 = (ZoomCurveValue *)v19;
    }
    while (v19 != v22);
  }

}

void sub_1B625AC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;

  std::pair<std::string const,PiecewiseLinearTransform>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,PiecewiseLinearTransform>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

float PiecewiseLinearTransform::ApplyFunctionToChangeXValues(char **a1, uint64_t a2, double a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  int v12;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v8 = (float *)*a1;
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)v3;
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        std::__throw_bad_function_call[abi:ne180100]();
      *(float *)&a3 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, &v12);
      *(_DWORD *)v3 = LODWORD(a3);
      v3 += 8;
    }
    while (v3 != v4);
    v8 = (float *)*a1;
    v3 = a1[1];
  }
  v9 = 126 - 2 * __clz((v3 - (char *)v8) >> 3);
  if (v3 == (char *)v8)
    v10 = 0;
  else
    v10 = v9;
  return _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(v8, (unint64_t)v3, v10, 1, a3);
}

float _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(float *a1, unint64_t a2, uint64_t a3, char a4, double a5)
{
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  double v15;
  double v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  int v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  _QWORD *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  unint64_t v40;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  int v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float v74;
  int v75;
  float *v76;
  float *v78;
  float *v79;
  float v80;
  int v81;
  float *v82;
  float *v83;
  int v84;

float _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(float *a1, float *a2, float *a3)
{
  float result;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float *v8;
  int v9;
  float v10;
  int v11;

  result = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 >= result)
    {
      *a1 = result;
      *a2 = v4;
      v11 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v11;
      result = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = result;
      v7 = a3 + 1;
      v6 = a2 + 1;
    }
    else
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
    }
    v8 = v7;
    goto LABEL_10;
  }
  if (v5 < result)
  {
    *a2 = v5;
    *a3 = result;
    v8 = a2 + 1;
    v9 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v9;
    result = *a2;
    v10 = *a1;
    if (*a2 < *a1)
    {
      *a1 = result;
      v6 = a1 + 1;
      *a2 = v10;
LABEL_10:
      result = *v6;
      *v6 = *v8;
      *v8 = result;
    }
  }
  return result;
}

float _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  float v9;
  int v10;
  float v11;
  int v12;
  float v13;

  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1, (float *)a2, (float *)a3);
  result = *(float *)a4;
  v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3)
  {
    *(float *)a3 = result;
    *(float *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    result = *(float *)a3;
    v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2)
    {
      *(float *)a2 = result;
      *(float *)a3 = v11;
      v12 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      result = *(float *)a2;
      v13 = *a1;
      if (*(float *)a2 < *a1)
      {
        *a1 = result;
        *(float *)a2 = v13;
        result = a1[1];
        a1[1] = *(float *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

float _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float result;
  float v11;
  int v12;
  float v13;
  int v14;
  float v15;
  int v16;
  float v17;

  _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result = *a5;
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = result;
    *a5 = v11;
    v12 = *((_DWORD *)a4 + 1);
    a4[1] = a5[1];
    *((_DWORD *)a5 + 1) = v12;
    result = *a4;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = result;
      *a4 = v13;
      v14 = *((_DWORD *)a3 + 1);
      a3[1] = a4[1];
      *((_DWORD *)a4 + 1) = v14;
      result = *a3;
      v15 = *a2;
      if (*a3 < *a2)
      {
        *a2 = result;
        *a3 = v15;
        v16 = *((_DWORD *)a2 + 1);
        a2[1] = a3[1];
        *((_DWORD *)a3 + 1) = v16;
        result = *a2;
        v17 = *a1;
        if (*a2 < *a1)
        {
          *a1 = result;
          *a2 = v17;
          result = a1[1];
          a1[1] = a2[1];
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEbT1_SC_S5_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24), (float *)(a2 - 8));
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)v10;
    v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      v15 = *(_DWORD *)(v10 + 4);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          v19 = a1 + v16 + 24;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(float *)v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::__clone()
{
  return 0;
}

void *std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69D78E0;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<float({block_pointer} {__strong})(float),std::allocator<float({block_pointer} {__strong})(float)>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(float))(*(_QWORD *)(a1 + 8) + 16))(*a2);
}

void ZoomCurveValue::LoadFromDictionary(ZoomCurveValue *this, const __CFDictionary *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  std::string **v10;
  char v11;
  __int128 v12;
  _QWORD v13[3];
  __int128 v14;

  *(_QWORD *)&v14 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v12, "focused");
  std::string::basic_string[abi:ne180100]<0>(v13, "wide");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = &v7;
  v11 = 0;
  v7 = (std::string *)operator new(0x30uLL);
  v8 = v7;
  v9 = (__int128 *)&v7[2];
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v12, &v14, v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "FOVToBeamMix");
  ZoomCurveValue::LoadFromDictionary((uint64_t)this, a2, (__int128 **)&v7, (uint64_t *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  v10 = &v7;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v13[i + 2]) < 0)
      operator delete((void *)v13[i]);
  }
}

void sub_1B625BA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  a19 = &a16;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  v33 = 0;
  while (1)
  {
    if (*(&a32 + v33) < 0)
      operator delete(*(void **)((char *)&a27 + v33));
    v33 -= 24;
    if (v33 == -48)
      _Unwind_Resume(a1);
  }
}

void ZoomCurveValue::LoadFromDictionary(uint64_t a1, void *a2, __int128 **a3, uint64_t *a4)
{
  id v5;
  __int128 *v6;
  uint64_t *v7;
  __int128 v8;
  std::string *v9;
  uint64_t *v10;
  void *v11;
  BOOL v12;
  id v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  int v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  double v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  char v42;
  __int128 *v44;
  void *v46;
  id v47;
  __int128 *v48;
  void *v49;
  std::string v50;
  std::string v51;
  void *v52;
  uint64_t *v53;
  std::string v54;
  std::string __str;
  std::string v56;
  void *__p;
  void *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  std::string *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  memset(&v56, 0, sizeof(v56));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v56, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (*((char *)a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)*a4, a4[1]);
  else
    __str = *(std::string *)a4;
  ZoomCurveValue::ZoomCurveValue(a1, (uint64_t)&v56, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v64 = &v56;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (a2)
  {
    v5 = a2;
    v44 = a3[1];
    if (*a3 == v44)
    {

    }
    else
    {
      v6 = *a3;
      v46 = v5;
      v42 = 1;
      v7 = a4;
      do
      {
        v48 = v6;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v8 = *v6;
          v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
        }
        v9 = &v54;
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v9 = (std::string *)v54.__r_.__value_.__r.__words[0];
        v10 = v7;
        if (*((char *)v7 + 23) < 0)
          v10 = (uint64_t *)*v7;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%s"), v9, v10);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "objectForKeyedSubscript:");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11 == 0;

        if (v12)
        {
          v42 = 0;
        }
        else
        {
          objc_msgSend(v46, "objectForKeyedSubscript:", v49);
          v13 = (id)objc_claimAutoreleasedReturnValue();
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          v47 = v13;
          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Breakpoints"));
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = 0;
          v16 = 0;
          v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v60, &v64, 16);
          if (v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)v61;
            do
            {
              for (i = 0; i != v17; ++i)
              {
                if (*(_QWORD *)v61 != v19)
                  objc_enumerationMutation(v14);
                v21 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
                if ((unint64_t)objc_msgSend(v21, "count") >= 2)
                {
                  objc_msgSend(v21, "objectAtIndexedSubscript:", 0);
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v22, "floatValue");
                  v24 = v23;
                  objc_msgSend(v21, "objectAtIndexedSubscript:", 1);
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v25, "floatValue");
                  v27 = v26;
                  if ((unint64_t)v16 >= v18)
                  {
                    v28 = (v16 - v15) >> 3;
                    v29 = v28 + 1;
                    if ((unint64_t)(v28 + 1) >> 61)
                      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                    if ((uint64_t)(v18 - (_QWORD)v15) >> 2 > v29)
                      v29 = (uint64_t)(v18 - (_QWORD)v15) >> 2;
                    if (v18 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
                      v30 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v30 = v29;
                    if (v30)
                      v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v30);
                    else
                      v31 = 0;
                    v32 = (_DWORD *)(v30 + 8 * v28);
                    *v32 = v24;
                    v32[1] = v27;
                    v33 = v32;
                    while (v16 != v15)
                    {
                      v34 = *((_QWORD *)v16 - 1);
                      v16 -= 8;
                      *((_QWORD *)v33 - 1) = v34;
                      v33 -= 2;
                    }
                    v18 = v30 + 8 * v31;
                    v16 = (char *)(v32 + 2);
                    if (v15)
                      operator delete(v15);
                    v15 = (char *)v33;
                  }
                  else
                  {
                    *(_DWORD *)v16 = v24;
                    *((_DWORD *)v16 + 1) = v26;
                    v16 += 8;
                  }

                }
              }
              v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v60, &v64, 16);
            }
            while (v17);
          }

          __p = 0;
          v58 = 0;
          v59 = 0;
          std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&__p, (uint64_t *)v15, (uint64_t *)v16, (v16 - v15) >> 3);
          PiecewiseLinearTransform::PiecewiseLinearTransform((uint64_t **)&v52, (uint64_t **)&__p, v35);
          if (__p)
          {
            v58 = __p;
            operator delete(__p);
          }
          if (v15)
            operator delete(v15);

          v64 = &v54;
          v36 = std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)&v54.__r_.__value_.__l.__data_, (__int128 **)&v64)+ 7;
          if (v36 != (uint64_t *)&v52)
            std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(v36, (uint64_t *)v52, v53, ((char *)v53 - (_BYTE *)v52) >> 3);
          if (v52)
          {
            v53 = (uint64_t *)v52;
            operator delete(v52);
          }
        }

        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        v6 = (__int128 *)((char *)v48 + 24);
        v7 = a4;
      }
      while ((__int128 *)((char *)v48 + 24) != v44);

      if ((v42 & 1) == 0)
      {
        memset(&v51, 0, sizeof(v51));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
        if (*((char *)a4 + 23) < 0)
          std::string::__init_copy_ctor_external(&v50, (const std::string::value_type *)*a4, a4[1]);
        else
          v50 = *(std::string *)a4;
        ZoomCurveValue::ZoomCurveValue((uint64_t)&v64, (uint64_t)&v51, &v50);
        v37 = a1 + 8;
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 8));
        v38 = v65;
        *(_QWORD *)a1 = v64;
        *(_QWORD *)(a1 + 8) = v38;
        v39 = v66;
        *(_QWORD *)(a1 + 16) = v66;
        if (v39)
        {
          v38[2] = v37;
          v64 = (std::string *)&v65;
          v65 = 0;
          v66 = 0;
        }
        else
        {
          *(_QWORD *)a1 = v37;
        }
        std::vector<std::__fs::filesystem::path>::__vdeallocate((std::vector<std::string> *)(a1 + 24));
        *(_OWORD *)(a1 + 24) = v67;
        *(_QWORD *)(a1 + 40) = v68;
        v68 = 0;
        v67 = 0uLL;
        v40 = (void **)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          operator delete(*v40);
        *(_OWORD *)v40 = v69;
        *(_QWORD *)(a1 + 64) = v70;
        HIBYTE(v70) = 0;
        LOBYTE(v69) = 0;
        *(_QWORD *)&v60 = &v67;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v65);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        *(_QWORD *)&v60 = &v51;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
      }
    }
  }
}

void sub_1B625C038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,char *a54)
{
  a54 = &a28;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  ZoomCurveValue::~ZoomCurveValue(a14);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    v13 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1B625C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,PiecewiseLinearTransform>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZoomCurveValue::ApplyToGraph(uint64_t a1, _QWORD *a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __p;
  void *v16[2];
  int64_t v17;
  std::string v18;

  if (*a2)
  {
    v3 = *(__int128 **)(a1 + 24);
    v4 = *(__int128 **)(a1 + 32);
    while (v3 != v4)
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        __p = v18;
      v6 = *(char *)(a1 + 71);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)(a1 + 48);
      else
        v7 = *(const std::string::value_type **)(a1 + 48);
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(a1 + 71);
      else
        v8 = *(_QWORD *)(a1 + 56);
      v9 = std::string::append(&__p, v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v17 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)v16 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v17 >= 0)
        v11 = (char *)v16;
      else
        v11 = (char *)v16[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, v11);
      v12 = DSPGraph::Graph::box();
      v13 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v13)
        {
LABEL_24:
          if (std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__count_unique<std::string>(*(void ***)(a1 + 8), (void **)&v18.__r_.__value_.__l.__data_))
          {
            v14 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, &__p, (void **)&v18.__r_.__value_.__l.__data_);
            if (!v14)
              std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v13 + 312))(v13, 0, 0, 0, 24, v14 + 56);
            __p.__r_.__value_.__s.__data_[0] = 1;
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, std::string *))(*(_QWORD *)v13 + 312))(v13, 1, 0, 0, 1, &__p);
          }
        }
      }
      else if (v12)
      {
        goto LABEL_24;
      }
      if (SHIBYTE(v17) < 0)
        operator delete(v16[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v3 = (__int128 *)((char *)v3 + 24);
    }
  }
}

void sub_1B625C458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B625C4AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1B625C484);
}

uint64_t std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__count_unique<std::string>(void **a1, void **a2)
{
  void **v3;
  uint64_t v4;

  if (a1)
  {
    v3 = a1;
    v4 = 1;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v3 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2) & 0x80) == 0)
          return v4;
        ++v3;
      }
      v3 = (void **)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t *ZoomCurveValue::operator[](uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  void *v5;
  _QWORD *v6;
  __int128 *v8;

  if (!std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__count_unique<std::string>(*(void ***)(a1 + 8), (void **)a2))
  {
    v8 = a2;
    v4 = std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)a2, &v8);
    v6 = v4 + 7;
    v5 = (void *)v4[7];
    if (v5)
    {
      v4[8] = (uint64_t)v5;
      operator delete(v5);
    }
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  v8 = a2;
  return std::__tree<std::__value_type<std::string,PiecewiseLinearTransform>,std::__map_value_compare<std::string,std::__value_type<std::string,PiecewiseLinearTransform>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,PiecewiseLinearTransform>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)a2, &v8)+ 7;
}

uint64_t **PiecewiseLinearTransform::PiecewiseLinearTransform(uint64_t **a1, uint64_t **a2, double a3)
{
  float *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 == a2)
  {
    v5 = 0;
    v4 = 0;
  }
  else
  {
    std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(a1, *a2, a2[1], a2[1] - *a2);
    v4 = (float *)*a1;
    v5 = (unint64_t)a1[1];
  }
  v6 = 126 - 2 * __clz((uint64_t)(v5 - (_QWORD)v4) >> 3);
  if ((float *)v5 == v4)
    v7 = 0;
  else
    v7 = v6;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEELb0EEEvT1_SC_S5_NS_15iterator_traitsISC_E15difference_typeEb(v4, v5, v7, 1, a3);
  return a1;
}

void sub_1B625C630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AUsubMAEC::myAecBuffers::~myAecBuffers(AUsubMAEC::myAecBuffers *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (this)
  {
    v2 = *(void **)this;
    if (*(_QWORD *)this)
    {
      free(v2);
      *(_QWORD *)this = 0;
    }
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 6) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 2) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 4) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 8) = 0;
  }
}

void AUsubMAEC::myAecBuffers::myAecBuffersInit(uint64_t a1, _DWORD *a2, int a3)
{
  int v5;
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  char *v11;
  char *v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  void *v23;
  void *v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;

  v5 = a2[6];
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = a2[3];
  *(_DWORD *)(a1 + 84) = a2[2];
  *(_DWORD *)(a1 + 80) = a2[5];
  v6 = 8 * v5;
  v7 = 8 * v5;
  v8 = (char *)malloc_type_malloc(8 * v5, 0x2C8E6D5CuLL);
  if (v6)
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
    goto LABEL_18;
  v10 = v8;
  bzero(v8, v6);
  v11 = &v10[4 * *(int *)(a1 + 72)];
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  v12 = (char *)malloc_type_malloc(v6, 0x2C8E6D5CuLL);
  if (v7 && v12 == 0)
    goto LABEL_18;
  v14 = v12;
  bzero(v12, v6);
  v15 = &v14[4 * *(int *)(a1 + 72)];
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v15;
  if (a3)
  {
    v16 = (char *)malloc_type_malloc(v6, 0x2C8E6D5CuLL);
    v17 = v16;
    if (v7 && !v16)
      goto LABEL_18;
    bzero(v16, v6);
    v18 = &v17[4 * *(int *)(a1 + 72)];
    *(_QWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = v18;
  }
  v19 = (char *)malloc_type_malloc(v6, 0x2C8E6D5CuLL);
  v20 = v19;
  if (v7)
  {
    if (!v19)
      goto LABEL_18;
  }
  bzero(v19, v6);
  v21 = &v20[4 * *(int *)(a1 + 72)];
  *(_QWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = v21;
  v22 = 4 * *(_DWORD *)(a1 + 84);
  v23 = malloc_type_malloc(v22, 0x2C8E6D5CuLL);
  v24 = v23;
  if (v22)
  {
    if (!v23)
    {
LABEL_18:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
    }
  }
  bzero(v23, v22);
  *(_QWORD *)(a1 + 64) = v24;
}

void AUSpatialMixerV2OcclusionFilter::processInplace(AUSpatialMixerV2OcclusionFilter *this, float *a2, unsigned int a3)
{
  float v4;
  float v5;
  float v6;
  unsigned int v8;
  uint64_t v10;
  float v11;
  _DWORD v12[4];
  float *v13;

  if (*(_QWORD *)this)
  {
    v4 = COERCE_FLOAT(atomic_load((unsigned int *)this + 4));
    v5 = v4;
    v6 = *((float *)this + 3);
    if (v6 <= -0.2 || v6 != v4)
    {
      v8 = a3;
      v12[0] = 1;
      for (v12[2] = 1; v8; v8 -= v10)
      {
        if (v8 >= 0x100)
          v10 = 256;
        else
          v10 = v8;
        v13 = a2;
        v12[3] = 4 * v10;
        v11 = *((float *)this + 3);
        if (v11 != v5)
        {
          AUSpatialMixerV2OcclusionFilter::updateFilter(this, v5);
          v11 = *((float *)this + 3);
        }
        if (v11 < -0.2)
          (*(void (**)(_QWORD, uint64_t, _DWORD *, _DWORD *))(**(_QWORD **)this + 32))(*(_QWORD *)this, v10, v12, v12);
        a2 += v10;
      }
    }
  }
}

void AUSpatialMixerV2OcclusionFilter::updateFilter(AUSpatialMixerV2OcclusionFilter *this, float a2)
{
  double v3;
  double v4;
  double v5;
  long double v6;
  double v11;
  double v12;
  float v13;
  unsigned int v14;
  float64x2_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  if (vabds_f32(*((float *)this + 3)+ (float)((float)(a2 - *((float *)this + 3)) * flt_1B662D138[*((float *)this + 3) < -40.0]), a2) >= 0.4)a2 = *((float *)this + 3)+ (float)((float)(a2 - *((float *)this + 3)) * flt_1B662D138[*((float *)this + 3) < -40.0]);
  *((float *)this + 3) = a2;
  if (a2 <= -0.2)
  {
    v3 = a2 * 0.5;
    v4 = __exp10(v3 * 0.25 * 0.05);
    v5 = __exp10(v3 * 0.75 * 0.05);
    v6 = cos(31415.9265 / *((float *)this + 2));
    __asm { FMOV            V2.2D, #-2.0 }
    _Q2.f64[1] = (1.0 - v5 * v6 - sqrt(-(v5 * v5) * (1.0 - v6 * v6) + (v5 + v5) * (1.0 - v6))) / (1.0 - v5);
    v17 = vmulq_n_f64(_Q2, _Q2.f64[1]);
    v18 = v4 * (_Q2.f64[1] * -2.0 + 1.0 + _Q2.f64[1] * _Q2.f64[1]);
    v19 = 0;
    v20 = 0;
    if (*(_QWORD *)this)
    {
      v11 = (*(double (**)(_QWORD, uint64_t, float64x2_t *))(**(_QWORD **)this + 16))(*(_QWORD *)this, 1, &v17);
      BiquadCoefficients::GetT((BiquadCoefficients *)&v17, v11);
      v13 = v12;
      v14 = v13;
      if ((SLODWORD(v13) <= -1 || ((LODWORD(v13) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F)
        && (LODWORD(v13) - 1) >= 0x7FFFFF)
      {
        v14 = 0;
      }
      *((_DWORD *)this + 5) = v14;
    }
  }
}

void NoiseSuppression::Noise::HendriksSPP::~HendriksSPP(NoiseSuppression::Noise::HendriksSPP *this)
{
  NoiseSuppression::Noise::HendriksSPP::~HendriksSPP(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E69E6538;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  NoiseSuppression::Noise::NoiseEstimator::~NoiseEstimator(this);
}

float NoiseSuppression::Noise::HendriksSPP::Init(NoiseSuppression::Noise::HendriksSPP *this)
{
  float v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float result;
  float v9;
  int v10;

  v2 = *((float *)this + 4);
  *((float *)this + 24) = expf(-1.0 / (float)(*((float *)this + 22) * v2));
  *((float *)this + 25) = expf(-1.0 / (float)(v2 * *((float *)this + 23)));
  std::vector<float>::resize((uint64_t)this + 112, *((unsigned int *)this + 3));
  v3 = *((unsigned int *)this + 3);
  v10 = 0;
  std::vector<float>::assign((char **)this + 14, v3, &v10);
  std::vector<float>::resize((uint64_t)this + 136, *((unsigned int *)this + 3));
  v4 = *((unsigned int *)this + 3);
  v10 = 0;
  std::vector<float>::assign((char **)this + 17, v4, &v10);
  std::vector<float>::resize((uint64_t)this + 32, *((unsigned int *)this + 3));
  v5 = *((unsigned int *)this + 3);
  v10 = 0;
  std::vector<float>::assign((char **)this + 4, v5, &v10);
  std::vector<float>::resize((uint64_t)this + 160, *((unsigned int *)this + 3));
  v6 = *((unsigned int *)this + 3);
  v10 = 0;
  std::vector<float>::assign((char **)this + 20, v6, &v10);
  std::vector<BOOL>::resize((uint64_t)this + 200, *((unsigned int *)this + 3), 0);
  v7 = *((unsigned int *)this + 3);
  LOBYTE(v10) = 0;
  std::vector<BOOL>::assign((uint64_t)this + 200, v7, &v10);
  result = 1.0 - *((float *)this + 24);
  v9 = -*((float *)this + 47);
  *((float *)this + 48) = result;
  *((float *)this + 49) = v9;
  *((_BYTE *)this + 24) = 1;
  return result;
}

void **NoiseSuppression::Noise::HendriksSPP::Process(void **this, const float *__src, float *a3, vDSP_Length __N)
{
  unsigned int v4;
  uint64_t v7;
  vDSP_Length v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float __D;
  int v14;
  float __B;

  if (*((_BYTE *)this + 24))
  {
    v4 = __N;
    v7 = (uint64_t)this;
    v8 = __N;
    if (!*((_DWORD *)this + 5))
    {
      memcpy(this[4], __src, 4 * __N);
      __B = (*(float (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      vDSP_vthr(*(const float **)(v7 + 32), 1, &__B, *(float **)(v7 + 32), 1, v4);
    }
    vDSP_vthr(*(const float **)(v7 + 32), 1, &NoiseSuppression::EPS, *(float **)(v7 + 112), 1, v8);
    vDSP_vdiv(*(const float **)(v7 + 112), 1, __src, 1, *(float **)(v7 + 112), 1, v8);
    vDSP_vmul(*(const float **)(v7 + 112), 1, (const float *)(v7 + 196), 0, *(float **)(v7 + 112), 1, v8);
    v14 = v4;
    vvexpf(*(float **)(v7 + 112), *(const float **)(v7 + 112), &v14);
    vDSP_vsmsa(*(const float **)(v7 + 112), 1, (const float *)(v7 + 184), &NoiseSuppression::Noise::HendriksSPP::one, *(float **)(v7 + 112), 1, v8);
    vDSP_svdiv(&NoiseSuppression::Noise::HendriksSPP::one, *(const float **)(v7 + 112), 1, *(float **)(v7 + 112), 1, v8);
    vDSP_vmma(*(const float **)(v7 + 136), 1, (const float *)(v7 + 96), 0, *(const float **)(v7 + 112), 1, (const float *)(v7 + 192), 0, *(float **)(v7 + 136), 1, v8);
    if (v4)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v7 + 136);
      do
      {
        v11 = *(float *)(v7 + 104);
        if (*(float *)(v10 + 4 * v9) > v11)
        {
          v12 = *(_QWORD *)(v7 + 112);
          if (*(float *)(v12 + 4 * v9) < v11)
            v11 = *(float *)(v12 + 4 * v9);
          *(float *)(v12 + 4 * v9) = v11;
        }
        ++v9;
      }
      while (v8 != v9);
    }
    vDSP_vsub(*(const float **)(v7 + 112), 1, &NoiseSuppression::Noise::HendriksSPP::one, 0, *(float **)(v7 + 160), 1, v8);
    vDSP_vmul(*(const float **)(v7 + 160), 1, __src, 1, *(float **)(v7 + 160), 1, v8);
    vDSP_vma(*(const float **)(v7 + 112), 1, *(const float **)(v7 + 32), 1, *(const float **)(v7 + 160), 1, *(float **)(v7 + 160), 1, v8);
    __D = 1.0 - *(float *)(v7 + 100);
    vDSP_vmma(*(const float **)(v7 + 32), 1, (const float *)(v7 + 100), 0, *(const float **)(v7 + 160), 1, &__D, 0, *(float **)(v7 + 32), 1, v8);
    this = (void **)memcpy(a3, *(const void **)(v7 + 32), 4 * v8);
    ++*(_DWORD *)(v7 + 20);
  }
  return this;
}

char *NoiseSuppression::Noise::HendriksSPP::GetNoiseBins(NoiseSuppression::Noise::HendriksSPP *this)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v8;

  v2 = (char *)this + 200;
  v3 = *((_QWORD *)this + 26);
  v8 = 0;
  std::vector<BOOL>::assign((uint64_t)this + 200, v3, &v8);
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 17);
    do
    {
      if (*(float *)(v6 + 4 * v5) < 0.4)
      {
        *(_QWORD *)(*((_QWORD *)this + 25) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
        v4 = *((_QWORD *)this + 26);
      }
      ++v5;
    }
    while (v4 > v5);
  }
  return v2;
}

NoiseSuppression::Noise::HendriksSPP *NoiseSuppression::Noise::HendriksSPP::HendriksSPP(NoiseSuppression::Noise::HendriksSPP *this, float a2, int a3, float a4)
{
  float v5;

  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((float *)this + 4) = a4;
  *((_DWORD *)this + 5) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 7) = 981668463;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)this = &off_1E69E6538;
  *((_DWORD *)this + 20) = 1097859072;
  *((_QWORD *)this + 11) = 0x3CF5C28F3E19999ALL;
  *((_DWORD *)this + 26) = 1065185444;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  v5 = __exp10f(1.5);
  *((float *)this + 21) = v5;
  *((float *)this + 46) = v5 + 1.0;
  *((float *)this + 47) = v5 / (float)(v5 + 1.0);
  return this;
}

void AUHearingLossCompensator::~AUHearingLossCompensator(AUHearingLossCompensator *this)
{
  AUHearingLossCompensator::~AUHearingLossCompensator(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E69CCBC0;
  v2 = (void *)*((_QWORD *)this + 82);
  if (v2)
  {
    *((_QWORD *)this + 83) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 79);
  if (v3)
  {
    *((_QWORD *)this + 80) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 608);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 584);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<HearingLossCompensator_Core>::reset[abi:ne180100]((uint64_t *)this + 72, 0);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 71, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUHearingLossCompensator::Initialize(AUHearingLossCompensator *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  double v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unsigned int v24;
  BlockProcessor *v25;
  AUHearingLossCompensator *v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  float v33;
  unsigned int v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int *v51;
  unsigned int *v52;
  float *v53;
  float *v54;
  uint64_t v55;
  unsigned int v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  float v60;
  float v61;
  unsigned int v62;
  float *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  float v69;
  int v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  float v77;
  float v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  MicSenseUtils::GainsToFIR *v83;
  unsigned int v84;
  VPTimeFreqConverter *v85;
  VPTimeFreqConverter **v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  VPTimeFreqConverter **v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  VPTimeFreqConverter *v99;
  int64x2_t v100;
  uint64_t v101;
  VPTimeFreqConverter *v102;
  VPTimeFreqConverter **v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  VPTimeFreqConverter **v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  VPTimeFreqConverter *v115;
  int64x2_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  float v129;
  uint64_t *v130;
  float v131;
  uint64_t i;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v141;
  int *v142;
  _DWORD *v143;
  unint64_t v144;
  int v145;
  uint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t v156;
  int64x2_t v157;
  FrequencyDomainCompressor *v158;
  FrequencyDomainCompressor **v159;
  FrequencyDomainCompressor **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  float v165;
  uint64_t v166;
  uint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t *v176;
  char *v177;
  uint64_t v178;
  uint64_t *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  int v183;
  unint64_t v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  float *v196;
  float v197;
  float v198;
  float *v199;
  uint64_t *v200;
  unint64_t v201;
  unsigned int v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  uint64_t *v209;
  _QWORD *v210;
  uint64_t v211;
  int64x2_t v212;
  HlcSuppressor *v213;
  HlcSuppressor **v214;
  HlcSuppressor **v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t j;
  unsigned int k;
  NSObject *v221;
  float v222;
  NSObject *v223;
  NSObject *v224;
  unsigned int v225;
  NSObject *v226;
  int v227;
  NSObject *v228;
  int v229;
  NSObject *v230;
  int v231;
  NSObject *v232;
  int v233;
  NSObject *v234;
  double v235;
  NSObject *v236;
  int v237;
  NSObject *v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  BOOL v245;
  BOOL v247;
  BOOL v248;
  unsigned int v249;
  unsigned int *v250;
  char **v251;
  char **v252;
  AUHearingLossCompensator *v253;
  _QWORD *v254;
  int64x2_t *v255;
  unsigned int v256;
  void *v257;
  void *v258;
  uint64_t v259;
  FrequencyDomainCompressor *v260;
  void *__src;
  _BYTE *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  void *__p;
  _BYTE *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  int v271;
  _BYTE buf[32];
  uint64_t v273;
  uint64_t v274;

  v274 = *MEMORY[0x1E0C80C00];
  if (AUHearingLossCompensatorLogScope(void)::once != -1)
    dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 128;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUHearingLossCompensator::Initialize()\n", buf, 0x12u);
  }
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 128), 0);
  v5 = *(_DWORD *)(Element + 88);
  v6 = v5 == 1718773105;
  *((_BYTE *)this + 560) = v5 == 1718773105;
  v7 = *(_DWORD *)(Element + 108);
  v253 = this;
  *((_DWORD *)this + 139) = v7;
  if (v5 != 1819304813 && v5 != 1718773105)
    return 4294956428;
  if (v7 != *(_DWORD *)(v4 + 108))
    return 4294956428;
  v8 = *(double *)(Element + 80);
  if (v8 != *(double *)(v4 + 80))
    return 4294956428;
  v250 = (unsigned int *)((char *)this + 556);
  *((double *)this + 66) = v8;
  v10 = *((_DWORD *)this + 84);
  v249 = v10;
  if (*((_BYTE *)this + 376))
  {
    if (v5 == 1718773105)
    {
      *((_BYTE *)this + 561) = 0;
      *((_DWORD *)this + 138) = v10;
      v11 = v10;
      goto LABEL_59;
    }
    v12 = vcvtmd_u64_f64(v8 * 0.003);
    v13 = vcvtpd_u64_f64(v8 * 0.01);
    v14 = v8 * 0.005;
    v15 = vcvtpd_u64_f64(v14);
    if (v12 <= v13)
    {
      v11 = 0;
      v16 = 2 * v12;
      v17 = v12;
      v18 = v13;
      v19 = -2 * v12;
      do
      {
        if (v10 % v17)
          v20 = 1;
        else
          v20 = v19 == 0;
        if (!v20)
        {
          if ((v16 & (v16 - 1)) == 0)
            goto LABEL_29;
          if (v19 == -3 * (v16 / 3) && v16 >= 3)
          {
            LODWORD(v14) = v16 / 3;
            v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
            LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
            if (LODWORD(v14) <= 1)
            {
              v14 = log2((double)(v16 / 3));
              v10 = v249;
              if (v14 >= 4.0)
                goto LABEL_29;
            }
          }
          LODWORD(v14) = v16 / 5;
          v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
          LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
          v22 = v19 == -5 * (v16 / 5) && v16 >= 5;
          v23 = !v22 || LODWORD(v14) > 1;
          if (!v23 && (v14 = log2((double)(v16 / 5)), v10 = v249, v14 >= 4.0)
            || v19 == -15 * (v16 / 0xF)
            && v16 >= 0xF
            && (LODWORD(v14) = v16 / 0xF,
                v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14)),
                LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14),
                LODWORD(v14) <= 1)
            && (v14 = log2((double)(v16 / 0xF)), v10 = v249, v14 >= 4.0))
          {
LABEL_29:
            v21 = v17 - v15;
            if ((int)(v17 - v15) < 0)
              v21 = v15 - v17;
            if (v21 < v18)
            {
              v18 = v21;
              v11 = v17;
            }
          }
        }
        ++v17;
        v16 += 2;
        v19 -= 2;
      }
      while (v17 <= v13);
      if (v11)
      {
        *((_DWORD *)v253 + 138) = v11;
        *((_BYTE *)v253 + 561) = 0;
        goto LABEL_59;
      }
    }
    *((_BYTE *)v253 + 561) = 1;
  }
  else
  {
    *((_BYTE *)this + 561) = 1;
    if (v5 == 1718773105)
      return 4294956428;
    v12 = vcvtmd_u64_f64(v8 * 0.003);
    v13 = vcvtpd_u64_f64(v8 * 0.01);
    v14 = v8 * 0.005;
    v15 = vcvtpd_u64_f64(v14);
  }
  if (v12 <= v13)
  {
    v24 = 0;
    v240 = -v15;
    v241 = 2 * v12;
    v242 = v13;
    v243 = -2 * v12;
    do
    {
      if (v243)
      {
        if ((v241 & (v241 - 1)) == 0)
          goto LABEL_325;
        LODWORD(v14) = v241 / 3;
        v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
        LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
        v245 = v243 == -3 * (v241 / 3) && v241 >= 3;
        if (v245 && LODWORD(v14) <= 1)
        {
          v14 = log2((double)(v241 / 3));
          if (v14 >= 4.0)
            goto LABEL_325;
        }
        LODWORD(v14) = v241 / 5;
        v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14));
        LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14);
        v247 = v243 == -5 * (v241 / 5) && v241 >= 5;
        v248 = !v247 || LODWORD(v14) > 1;
        if (!v248 && (v14 = log2((double)(v241 / 5)), v14 >= 4.0)
          || v243 == -15 * (v241 / 0xF)
          && v241 >= 0xF
          && (LODWORD(v14) = v241 / 0xF,
              v14 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v14)),
              LOWORD(v14) = vaddlv_u8(*(uint8x8_t *)&v14),
              LODWORD(v14) <= 1)
          && (v14 = log2((double)(v241 / 0xF)), v14 >= 4.0))
        {
LABEL_325:
          v244 = v240 + v12;
          if ((int)(v240 + v12) < 0)
            v244 = -v244;
          if (v244 < v242)
          {
            v242 = v244;
            v24 = v12;
          }
        }
      }
      ++v12;
      v241 += 2;
      v243 -= 2;
    }
    while (v12 <= v13);
  }
  else
  {
    v24 = 0;
  }
  *((_DWORD *)v253 + 138) = v24;
  v25 = (BlockProcessor *)operator new();
  BlockProcessor::BlockProcessor(v25, 1, v250, 1, v250, *((_DWORD *)v253 + 138), (int (*)(void *, unsigned int, const AudioBufferList **, AudioBufferList **))AUHearingLossCompensator::BlockProcessClassFunc, v253);
  *(_QWORD *)buf = 0;
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)v253 + 71, (uint64_t)v25);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)buf, 0);
  v6 = *((_BYTE *)v253 + 560);
  v11 = *((_DWORD *)v253 + 138);
LABEL_59:
  v257 = 0;
  v258 = 0;
  v259 = 0;
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)&v257, v11 << v6, buf);
  v26 = v253;
  std::vector<std::vector<float>>::assign((uint64_t *)v253 + 73, *((unsigned int *)v253 + 139), (uint64_t)&v257);
  std::vector<std::vector<float>>::assign((uint64_t *)v26 + 76, *((unsigned int *)v26 + 139), (uint64_t)&v257);
  v27 = *((unsigned int *)v253 + 138);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)v253 + 79, v27, buf);
  LODWORD(v28) = *((_DWORD *)v253 + 138);
  v29 = *((float *)v26 + 134) / ((double)v28 * 1000.0 / *((double *)v26 + 66));
  if (v29 < 10.0)
    v29 = 10.0;
  v30 = vcvtpd_u64_f64(v29);
  *((_DWORD *)v253 + 136) = v30;
  *((_DWORD *)v253 + 137) = v30 + 1;
  *((_BYTE *)v253 + 562) = 0;
  v31 = operator new();
  v32 = *((_DWORD *)v253 + 139);
  v33 = *((double *)v253 + 66);
  v34 = *((_DWORD *)v253 + 138);
  v35 = *((_BYTE *)v253 + 560);
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)v31 = 0;
  *(_DWORD *)(v31 + 24) = v32;
  *(_DWORD *)(v31 + 32) = v34;
  *(_QWORD *)(v31 + 44) = 0;
  *(_DWORD *)(v31 + 52) = 0;
  *(float *)(v31 + 56) = v33;
  v252 = (char **)(v31 + 256);
  v251 = (char **)(v31 + 280);
  *(_OWORD *)(v31 + 60) = xmmword_1B66A1340;
  *(_BYTE *)(v31 + 76) = v35;
  *(_WORD *)(v31 + 77) = 256;
  *(_DWORD *)(v31 + 79) = 0;
  *(_BYTE *)(v31 + 83) = 0;
  bzero((void *)(v31 + 88), 0x2D8uLL);
  v36 = v34 + 1;
  *(_DWORD *)(v31 + 28) = 2 * v34;
  *(_DWORD *)(v31 + 36) = v36;
  *(_DWORD *)(v31 + 40) = vcvtas_u32_f32((float)((float)((float)v34 * 45000.0) / v33) / 10.0);
  *(float *)(v31 + 72) = v33 / (float)v34;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(&v268, v36, buf);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 376), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 400), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 424), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 448), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 472), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 496), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  v269 = v268;
  v37 = *(unsigned int *)(v31 + 32);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(&v268, v37, buf);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 520), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  v269 = v268;
  v38 = *(unsigned int *)(v31 + 40);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(&v268, v38, buf);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 544), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 568), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 592), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  std::vector<std::vector<float>>::assign((uint64_t *)(v31 + 616), *(unsigned int *)(v31 + 24), (uint64_t)&v268);
  v39 = *(unsigned int *)(v31 + 40);
  *(_DWORD *)buf = 0;
  std::vector<float>::vector(&__p, v39, buf);
  v40 = *(unsigned int *)(v31 + 40);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)(v31 + 328), v40, buf);
  v41 = *(unsigned int *)(v31 + 40);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)(v31 + 160), v41, buf);
  v42 = *(unsigned int *)(v31 + 28);
  *(_DWORD *)buf = 1065353216;
  std::vector<float>::assign((char **)(v31 + 88), v42, buf);
  v43 = *(unsigned int *)(v31 + 28);
  *(_DWORD *)buf = 1065353216;
  std::vector<float>::assign((char **)(v31 + 112), v43, buf);
  v44 = *(unsigned int *)(v31 + 36);
  *(_DWORD *)buf = 1065353216;
  std::vector<float>::assign((char **)(v31 + 136), v44, buf);
  v45 = CFilterBank::filterbank_new((CFilterBank *)*(unsigned int *)(v31 + 40), *(_DWORD *)(v31 + 36) - 1, *(float *)(v31 + 56));
  v46 = *(_QWORD *)(v31 + 640);
  *(_QWORD *)(v31 + 640) = v45;
  if (v46)
  {
    MEMORY[0x1BCC95CEC](v46, 0x1090C4010D369B9);
    v45 = *(_OWORD **)(v31 + 640);
  }
  CFilterBank::filterbank_compute_bank32((uint64_t)v45, *(const float **)(v31 + 136), *(float **)(v31 + 160));
  v269 = v268;
  v47 = *(unsigned int *)(v31 + 40);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(&v268, v47, buf);
  v48 = *(_QWORD *)(v31 + 640);
  v49 = *(unsigned int *)(v48 + 44);
  if ((int)v49 >= 1)
  {
    v50 = v268;
    v51 = *(unsigned int **)v48;
    v52 = *(unsigned int **)(v48 + 8);
    v53 = *(float **)(v48 + 16);
    v54 = *(float **)(v48 + 24);
    do
    {
      v56 = *v51++;
      v55 = v56;
      v57 = *v53++;
      *(float *)&v50[4 * v55] = v57 + *(float *)&v50[4 * v55];
      v59 = *v52++;
      v58 = v59;
      v60 = *v54++;
      *(float *)&v50[4 * v58] = v60 + *(float *)&v50[4 * v58];
      --v49;
    }
    while (v49);
  }
  v61 = *(float *)(v31 + 56);
  v62 = *(_DWORD *)(v31 + 28);
  v63 = (float *)__p;
  *(_DWORD *)__p = 0;
  v64 = *(unsigned int *)(v31 + 40);
  v65 = (v64 - 1);
  v63[v65] = *(float *)(v31 + 56) * 0.5;
  if ((_DWORD)v64)
  {
    v66 = 0;
    v67 = v268;
    v68 = *(_QWORD *)(v31 + 328);
    v69 = v61 / (float)v62;
    do
    {
      if (v66 && v66 < v65)
      {
        v70 = *(_DWORD *)(*(_QWORD *)(v48 + 48) + 4 * v66);
        v71 = (float)(v69 * (float)((float)(*(_DWORD *)(*(_QWORD *)(v48 + 56) + 4 * v66) + v70) * 0.5))
            + (float)((float)((float)v70 * 0.5) * v69);
        v63[v66] = v71;
      }
      else
      {
        v71 = v63[v66];
      }
      v72 = (float)(v71 * 1.1225) + (float)(v71 * -0.8909);
      if (v69 >= v72)
        v72 = v69;
      *(float *)(v68 + 4 * v66) = v72 / *(float *)&v67[4 * v66];
      ++v66;
    }
    while (v64 != v66);
  }
  else
  {
    v64 = 0;
  }
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(v251, v64, buf);
  v73 = *(unsigned int *)(v31 + 40);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = (float *)__p;
    do
    {
      v76 = 0;
      v77 = v75[v74];
      while (v77 > kHearingLossCompensator_Freqs_Hz[v76])
      {
        if (++v76 == 8)
        {
          *(_DWORD *)&(*v251)[4 * v74] = 1088421678;
          goto LABEL_86;
        }
      }
      if ((_DWORD)v76)
      {
        v78 = kHearingLossCompensator_Freqs_Hz[(v76 - 1)];
        *(float *)&(*v251)[4 * v74] = fminf((float)((float)(v77 - v78)/ (float)(kHearingLossCompensator_Freqs_Hz[v76] - v78))+ (float)(v76 - 1), 6.9999);
      }
      else
      {
        *(_DWORD *)&(*v251)[4 * v74] = 0;
      }
LABEL_86:
      ++v74;
    }
    while (v74 != v73);
  }
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)(v31 + 184), 8uLL, buf);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)(v31 + 208), 8uLL, buf);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)(v31 + 232), 8uLL, buf);
  v79 = *(unsigned int *)(v31 + 40);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(v252, v79, buf);
  v80 = operator new();
  PrescriptiveAmplification::PrescriptiveAmplification(v80, (uint64_t)&__p, (uint64_t *)v252);
  std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100]((_QWORD *)(v31 + 648), v80);
  v81 = operator new();
  PrescriptiveAmplification::PrescriptiveAmplification(v81, (uint64_t)&__p, (uint64_t *)v252);
  std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100]((_QWORD *)(v31 + 656), v81);
  v82 = *(_DWORD *)(v31 + 32);
  v83 = (MicSenseUtils::GainsToFIR *)operator new();
  MicSenseUtils::GainsToFIR::GainsToFIR(v83, (2 * v82));
  std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((_QWORD *)(v31 + 664), (uint64_t)v83);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)(v31 + 304), 7uLL, buf);
  v263 = 0;
  v264 = 0;
  v265 = 0;
  *(_DWORD *)buf = 0;
  std::vector<float>::vector(&__src, 7uLL, buf);
  std::vector<std::vector<float>>::assign((uint64_t *)&v263, *(unsigned int *)(v31 + 40), (uint64_t)&__src);
  PrescriptiveAmplification::GetGainTargets(*(_QWORD *)(v31 + 648), (uint64_t)v263, v264);
  if ((unint64_t)(v262 - (_BYTE *)__src) < 0x1C
    || (memcpy(__src, kEqualLoudnessModel_Spl_dB, v262 - (_BYTE *)__src),
        PrescriptiveAmplification::GetGainTargets(*(_QWORD *)(v31 + 656), (uint64_t)v263, v264),
        (unint64_t)(v262 - (_BYTE *)__src) <= 0x1B))
  {
    __assert_rtn("GetSplSteps", "PrescriptiveAmplification.cpp", 171, "numSpl >= kPrescriptiveAmplification_NumElmSpls");
  }
  memcpy(__src, kEqualLoudnessModel_Spl_dB, v262 - (_BYTE *)__src);
  if (*(_DWORD *)(v31 + 24))
  {
    v84 = 0;
    v254 = (_QWORD *)(v31 + 744);
    v255 = (int64x2_t *)(v31 + 696);
    do
    {
      v85 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v85, 0, *(_DWORD *)(v31 + 32));
      v86 = *(VPTimeFreqConverter ***)(v31 + 680);
      v87 = *(_QWORD *)(v31 + 688);
      if ((unint64_t)v86 >= v87)
      {
        v89 = *(_QWORD *)(v31 + 672);
        v90 = ((uint64_t)v86 - v89) >> 3;
        if ((unint64_t)(v90 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v91 = v87 - v89;
        v92 = v91 >> 2;
        if (v91 >> 2 <= (unint64_t)(v90 + 1))
          v92 = v90 + 1;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        v273 = v31 + 688;
        if (v93)
          v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v93);
        else
          v94 = 0;
        v95 = (VPTimeFreqConverter **)(v93 + 8 * v90);
        v96 = v93 + 8 * v94;
        *(_QWORD *)&buf[24] = v96;
        *v95 = v85;
        v88 = v95 + 1;
        *(_QWORD *)&buf[16] = v95 + 1;
        v97 = *(_QWORD **)(v31 + 680);
        v98 = *(_QWORD **)(v31 + 672);
        if (v97 == v98)
        {
          v100 = vdupq_n_s64((unint64_t)v97);
        }
        else
        {
          do
          {
            v99 = (VPTimeFreqConverter *)*--v97;
            *v97 = 0;
            *--v95 = v99;
          }
          while (v97 != v98);
          v100 = *(int64x2_t *)(v31 + 672);
          v88 = *(_QWORD **)&buf[16];
          v96 = *(_QWORD *)&buf[24];
        }
        *(_QWORD *)(v31 + 672) = v95;
        *(_QWORD *)(v31 + 680) = v88;
        *(int64x2_t *)&buf[8] = v100;
        v101 = *(_QWORD *)(v31 + 688);
        *(_QWORD *)(v31 + 688) = v96;
        *(_QWORD *)&buf[24] = v101;
        *(_QWORD *)buf = v100.i64[0];
        std::__split_buffer<std::unique_ptr<VPTimeFreqConverter>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v86 = v85;
        v88 = v86 + 1;
      }
      *(_QWORD *)(v31 + 680) = v88;
      v102 = (VPTimeFreqConverter *)operator new();
      VPTimeFreqConverter::VPTimeFreqConverter(v102, 1, *(_DWORD *)(v31 + 32));
      v103 = *(VPTimeFreqConverter ***)(v31 + 704);
      v104 = *(_QWORD *)(v31 + 712);
      if ((unint64_t)v103 >= v104)
      {
        v106 = ((uint64_t)v103 - v255->i64[0]) >> 3;
        if ((unint64_t)(v106 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v107 = v104 - v255->i64[0];
        v108 = v107 >> 2;
        if (v107 >> 2 <= (unint64_t)(v106 + 1))
          v108 = v106 + 1;
        if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v108;
        v273 = v31 + 712;
        if (v109)
          v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v109);
        else
          v110 = 0;
        v111 = (VPTimeFreqConverter **)(v109 + 8 * v106);
        v112 = v109 + 8 * v110;
        *(_QWORD *)&buf[24] = v112;
        *v111 = v102;
        v105 = v111 + 1;
        *(_QWORD *)&buf[16] = v111 + 1;
        v113 = *(_QWORD **)(v31 + 704);
        v114 = *(_QWORD **)(v31 + 696);
        if (v113 == v114)
        {
          v116 = vdupq_n_s64((unint64_t)v113);
        }
        else
        {
          do
          {
            v115 = (VPTimeFreqConverter *)*--v113;
            *v113 = 0;
            *--v111 = v115;
          }
          while (v113 != v114);
          v116 = *v255;
          v105 = *(_QWORD **)&buf[16];
          v112 = *(_QWORD *)&buf[24];
        }
        *(_QWORD *)(v31 + 696) = v111;
        *(_QWORD *)(v31 + 704) = v105;
        *(int64x2_t *)&buf[8] = v116;
        v117 = *(_QWORD *)(v31 + 712);
        *(_QWORD *)(v31 + 712) = v112;
        *(_QWORD *)&buf[24] = v117;
        *(_QWORD *)buf = v116.i64[0];
        std::__split_buffer<std::unique_ptr<VPTimeFreqConverter>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v103 = v102;
        v105 = v103 + 1;
      }
      *(_QWORD *)(v31 + 704) = v105;
      v118 = operator new();
      MicSenseUtils::DynamicFIR<float>::DynamicFIR(v118, 0x200uLL);
      v119 = *(uint64_t **)(v31 + 752);
      v120 = *(_QWORD *)(v31 + 760);
      if ((unint64_t)v119 >= v120)
      {
        v122 = ((uint64_t)v119 - *v254) >> 3;
        if ((unint64_t)(v122 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v123 = v120 - *v254;
        v124 = v123 >> 2;
        if (v123 >> 2 <= (unint64_t)(v122 + 1))
          v124 = v122 + 1;
        if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
          v125 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v125 = v124;
        v273 = v31 + 760;
        if (v125)
          v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v125);
        else
          v126 = 0;
        v127 = (uint64_t *)(v125 + 8 * v122);
        *(_QWORD *)buf = v125;
        *(_QWORD *)&buf[8] = v127;
        *(_QWORD *)&buf[24] = v125 + 8 * v126;
        *v127 = v118;
        *(_QWORD *)&buf[16] = v127 + 1;
        std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v254, buf);
        v121 = *(_QWORD **)(v31 + 752);
        std::__split_buffer<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v119 = v118;
        v121 = v119 + 1;
      }
      *(_QWORD *)(v31 + 752) = v121;
      v128 = operator new();
      v256 = v84;
      v129 = *(float *)(v31 + 56);
      v130 = (uint64_t *)(v128 + 24);
      *(_OWORD *)(v128 + 44) = 0u;
      *(_OWORD *)v128 = 0u;
      *(_OWORD *)(v128 + 16) = 0u;
      *(_OWORD *)(v128 + 32) = 0u;
      *(_QWORD *)(v128 + 60) = 1065353216;
      *(_DWORD *)(v128 + 68) = 1065353216;
      *(_OWORD *)(v128 + 88) = 0u;
      *(_OWORD *)(v128 + 136) = 0u;
      v131 = (float)*(unsigned int *)(v31 + 32);
      *(_OWORD *)(v128 + 72) = 0u;
      *(_OWORD *)(v128 + 104) = 0u;
      *(_OWORD *)(v128 + 120) = 0u;
      *(_QWORD *)(v128 + 152) = 0;
      *(float *)(v128 + 48) = v129 / v131;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v128, FrequencyDomainCompressor::kDefaultValue, (uint64_t)&AUChannelSelector::SupportedNumChannels(AUChannelInfo const**)::sChannels, 7uLL);
      for (i = 0; i != 7; ++i)
        FrequencyDomainCompressor::SetParameter((float **)v128, i, *(float *)(*(_QWORD *)v128 + 4 * i));
      if (v267 == __p)
      {
        LODWORD(v133) = 0;
      }
      else
      {
        v133 = 0;
        v134 = 0;
        while (*((float *)__p + v133) <= (float)(v129 * 0.5))
        {
          v133 = ++v134;
          if ((v267 - (_BYTE *)__p) >> 2 <= (unint64_t)v134)
            goto LABEL_144;
        }
        LODWORD(v133) = v134;
      }
LABEL_144:
      v135 = (v262 - (_BYTE *)__src) >> 2;
      *(_DWORD *)(v128 + 52) = v133;
      *(_DWORD *)(v128 + 56) = v135;
      *(_DWORD *)buf = 0;
      std::vector<float>::assign((char **)(v128 + 88), v135, buf);
      memcpy(*(void **)(v128 + 88), __src, 4 * *(unsigned int *)(v128 + 56));
      std::vector<float>::assign((char **)(v128 + 112), *(unsigned int *)(v128 + 52), (_DWORD *)(v128 + 76));
      v136 = *(unsigned int *)(v128 + 56);
      v271 = 0;
      std::vector<float>::vector(buf, v136, &v271);
      std::vector<std::vector<float>>::assign(v130, *(unsigned int *)(v128 + 52), (uint64_t)buf);
      v137 = v263;
      v138 = *(unsigned int *)(v128 + 52);
      if (0xAAAAAAAAAAAAAAABLL * ((v264 - (uint64_t)v263) >> 3) >= v138)
      {
        v139 = *(unsigned int *)(v128 + 56);
        if (v139 <= (uint64_t)(v263[1] - *v263) >> 2 && (_DWORD)v138 != 0)
        {
          v141 = 0;
          do
          {
            if ((_DWORD)v139)
            {
              v142 = (int *)v137[3 * v141];
              v143 = *(_DWORD **)(*v130 + 24 * v141);
              v144 = v139;
              do
              {
                v145 = *v142++;
                *v143++ = v145;
                --v144;
              }
              while (v144);
            }
            ++v141;
          }
          while (v141 != v138);
        }
      }
      v271 = 0;
      std::vector<float>::assign((char **)(v128 + 136), (v138 + 1), &v271);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v260 = (FrequencyDomainCompressor *)v128;
      v146 = *(uint64_t **)(v31 + 728);
      v147 = *(_QWORD *)(v31 + 736);
      if ((unint64_t)v146 >= v147)
      {
        v148 = *(_QWORD **)(v31 + 720);
        v149 = v146 - v148;
        v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v151 = v147 - (_QWORD)v148;
        if (v151 >> 2 > v150)
          v150 = v151 >> 2;
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v150;
        if (v152)
        {
          if (v152 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v153 = (char *)operator new(8 * v152);
        }
        else
        {
          v153 = 0;
        }
        v154 = (uint64_t *)&v153[8 * v149];
        v260 = 0;
        *v154 = v128;
        v155 = v154 + 1;
        if (v146 == v148)
        {
          v158 = 0;
          v157 = vdupq_n_s64((unint64_t)v146);
        }
        else
        {
          do
          {
            v156 = *--v146;
            *v146 = 0;
            *--v154 = v156;
          }
          while (v146 != v148);
          v157 = *(int64x2_t *)(v31 + 720);
          v158 = v260;
        }
        *(_QWORD *)(v31 + 720) = v154;
        *(_QWORD *)(v31 + 728) = v155;
        *(_QWORD *)(v31 + 736) = &v153[8 * v152];
        v160 = (FrequencyDomainCompressor **)v157.i64[1];
        v159 = (FrequencyDomainCompressor **)v157.i64[0];
        while (v160 != v159)
          std::unique_ptr<FrequencyDomainCompressor>::reset[abi:ne180100](--v160);
        if (v159)
          operator delete(v159);
        *(_QWORD *)(v31 + 728) = v155;
        if (v158)
        {
          FrequencyDomainCompressor::~FrequencyDomainCompressor(v158);
          MEMORY[0x1BCC95CEC](v161, 0x10A0C4086EEE49FLL, v162, v163);
        }
      }
      else
      {
        *v146 = v128;
        *(_QWORD *)(v31 + 728) = v146 + 1;
      }
      v164 = *(_DWORD *)(v31 + 32);
      v165 = *(float *)(v31 + 56);
      v166 = operator new();
      SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::SmoothedNoiseEstimator(v166, v164 + 1, *(float *)(v31 + 56), v165 / (float)v164);
      v167 = *(uint64_t **)(v31 + 776);
      v168 = *(_QWORD *)(v31 + 784);
      if ((unint64_t)v167 >= v168)
      {
        v170 = *(_QWORD **)(v31 + 768);
        v171 = v167 - v170;
        v172 = v171 + 1;
        if ((unint64_t)(v171 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v173 = v168 - (_QWORD)v170;
        if (v173 >> 2 > v172)
          v172 = v173 >> 2;
        if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v172;
        if (v174)
        {
          if (v174 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v175 = (char *)operator new(8 * v174);
        }
        else
        {
          v175 = 0;
        }
        v176 = (uint64_t *)&v175[8 * v171];
        v177 = &v175[8 * v174];
        *v176 = v166;
        v169 = v176 + 1;
        if (v167 == v170)
        {
          *(_QWORD *)(v31 + 768) = v176;
          *(_QWORD *)(v31 + 776) = v169;
          *(_QWORD *)(v31 + 784) = v177;
          if (!v167)
            goto LABEL_200;
        }
        else
        {
          do
          {
            v178 = *--v167;
            *v167 = 0;
            *--v176 = v178;
          }
          while (v167 != v170);
          v179 = *(uint64_t **)(v31 + 768);
          v167 = *(uint64_t **)(v31 + 776);
          *(_QWORD *)(v31 + 768) = v176;
          *(_QWORD *)(v31 + 776) = v169;
          *(_QWORD *)(v31 + 784) = v177;
          if (v167 != v179)
          {
            do
            {
              v181 = (_QWORD *)*--v167;
              v180 = v181;
              *v167 = 0;
              if (v181)
                std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v180);
            }
            while (v167 != v179);
            v167 = v179;
          }
          if (!v167)
            goto LABEL_200;
        }
        operator delete(v167);
      }
      else
      {
        *v167 = v166;
        v169 = v167 + 1;
      }
LABEL_200:
      *(_QWORD *)(v31 + 776) = v169;
      v182 = operator new();
      v183 = *(_DWORD *)(v31 + 72);
      v184 = *(unsigned int *)(v31 + 40);
      *(_OWORD *)v182 = 0u;
      *(_OWORD *)(v182 + 16) = 0u;
      *(_QWORD *)&v185 = 0x3F0000003F000000;
      *((_QWORD *)&v185 + 1) = 0x3F0000003F000000;
      *(_OWORD *)(v182 + 36) = v185;
      *(_QWORD *)(v182 + 52) = 0x3F0000003F000000;
      *(_OWORD *)(v182 + 64) = 0u;
      *(_OWORD *)(v182 + 80) = 0u;
      *(_OWORD *)(v182 + 96) = 0u;
      *(_OWORD *)(v182 + 112) = 0u;
      *(_OWORD *)(v182 + 128) = 0u;
      *(_OWORD *)(v182 + 144) = 0u;
      *(_OWORD *)(v182 + 160) = 0u;
      *(_OWORD *)(v182 + 176) = 0u;
      *(_OWORD *)(v182 + 192) = 0u;
      *(_OWORD *)(v182 + 208) = 0u;
      *(_OWORD *)(v182 + 224) = 0u;
      *(_OWORD *)(v182 + 240) = 0u;
      *(_OWORD *)(v182 + 256) = 0u;
      *(_OWORD *)(v182 + 272) = 0u;
      *(_OWORD *)(v182 + 288) = 0u;
      *(_DWORD *)(v182 + 24) = v183;
      *(_QWORD *)(v182 + 28) = v184;
      LODWORD(v260) = 0;
      std::vector<float>::assign((char **)(v182 + 184), v184, &v260);
      v186 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 1065353216;
      std::vector<float>::assign((char **)(v182 + 256), v186, &v260);
      v187 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 1065353216;
      std::vector<float>::assign((char **)(v182 + 280), v187, &v260);
      v188 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 0;
      std::vector<float>::assign((char **)(v182 + 160), v188, &v260);
      v189 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 1065353216;
      std::vector<float>::assign((char **)(v182 + 208), v189, &v260);
      v190 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 1065353216;
      std::vector<float>::assign((char **)(v182 + 232), v190, &v260);
      v191 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 0;
      std::vector<float>::assign((char **)(v182 + 64), v191, &v260);
      v192 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 0;
      std::vector<float>::assign((char **)(v182 + 88), v192, &v260);
      v193 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 1065353216;
      std::vector<float>::assign((char **)(v182 + 136), v193, &v260);
      v194 = *(unsigned int *)(v182 + 28);
      LODWORD(v260) = 0;
      std::vector<float>::assign((char **)(v182 + 112), v194, &v260);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v182, HlcSuppressor::kDefaultValue, (uint64_t)&MicSenseUtils::kOnef, 5uLL);
      v195 = 0;
      v196 = *(float **)v182;
      do
      {
        v197 = v196[v195];
        if (HlcSuppressor::kMaxValue[v195] < v197)
          v197 = HlcSuppressor::kMaxValue[v195];
        if (v197 < HlcSuppressor::kMinValue[v195])
          v197 = HlcSuppressor::kMinValue[v195];
        v196[v195] = v197;
        if (v195 == 2)
        {
          v198 = expf(-1.0 / (float)((float)(v196[2] * 0.001) * *(float *)(v182 + 24)));
          *(float *)(v182 + 52) = v198;
          v199 = (float *)(v182 + 56);
        }
        else if (v195 == 1)
        {
          v198 = expf(-1.0 / (float)((float)(v196[1] * 0.001) * *(float *)(v182 + 24)));
          *(float *)(v182 + 36) = v198;
          v199 = (float *)(v182 + 40);
        }
        else
        {
          if (v195)
            goto LABEL_212;
          v198 = expf(-1.0 / (float)((float)(*v196 * 0.001) * *(float *)(v182 + 24)));
          *(float *)(v182 + 44) = v198;
          v199 = (float *)(v182 + 48);
        }
        *v199 = 1.0 - v198;
LABEL_212:
        ++v195;
      }
      while (v195 != 5);
      *(_QWORD *)buf = v182;
      v200 = *(uint64_t **)(v31 + 800);
      v201 = *(_QWORD *)(v31 + 808);
      if ((unint64_t)v200 >= v201)
      {
        v203 = *(_QWORD **)(v31 + 792);
        v204 = v200 - v203;
        v205 = v204 + 1;
        if ((unint64_t)(v204 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v206 = v201 - (_QWORD)v203;
        if (v206 >> 2 > v205)
          v205 = v206 >> 2;
        if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF8)
          v207 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v207 = v205;
        if (v207)
        {
          if (v207 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v208 = (char *)operator new(8 * v207);
        }
        else
        {
          v208 = 0;
        }
        v209 = (uint64_t *)&v208[8 * v204];
        *(_QWORD *)buf = 0;
        *v209 = v182;
        v210 = v209 + 1;
        if (v200 == v203)
        {
          v213 = 0;
          v212 = vdupq_n_s64((unint64_t)v200);
        }
        else
        {
          do
          {
            v211 = *--v200;
            *v200 = 0;
            *--v209 = v211;
          }
          while (v200 != v203);
          v212 = *(int64x2_t *)(v31 + 792);
          v213 = *(HlcSuppressor **)buf;
        }
        *(_QWORD *)(v31 + 792) = v209;
        *(_QWORD *)(v31 + 800) = v210;
        *(_QWORD *)(v31 + 808) = &v208[8 * v207];
        v215 = (HlcSuppressor **)v212.i64[1];
        v214 = (HlcSuppressor **)v212.i64[0];
        v202 = v256;
        while (v215 != v214)
          std::unique_ptr<HlcSuppressor>::reset[abi:ne180100](--v215);
        if (v214)
          operator delete(v214);
        *(_QWORD *)(v31 + 800) = v210;
        if (v213)
        {
          HlcSuppressor::~HlcSuppressor(v213);
          MEMORY[0x1BCC95CEC](v216, 0x1080C40FE1E2400, v217, v218);
        }
      }
      else
      {
        *v200 = v182;
        *(_QWORD *)(v31 + 800) = v200 + 1;
        v202 = v256;
      }
      v84 = v202 + 1;
    }
    while (v84 < *(_DWORD *)(v31 + 24));
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v31, (char *)AUHearingLossCompensator::kUserParameterDefault, (uint64_t)&AUHearingLossCompensator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs, 0x28uLL);
  for (j = 0; j != 40; ++j)
    HearingLossCompensator_Core::SetParameter((HearingLossCompensator_Core *)v31, j, *(float *)(*(_QWORD *)v31 + 4 * j));
  if (__src)
  {
    v262 = __src;
    operator delete(__src);
  }
  *(_QWORD *)buf = &v263;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__p)
  {
    v267 = __p;
    operator delete(__p);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  std::unique_ptr<HearingLossCompensator_Core>::reset[abi:ne180100]((uint64_t *)v253 + 72, v31);
  for (k = 0; k != 40; ++k)
    AUHearingLossCompensator::RefreshKernelParamValue(v253, k);
  if (AUHearingLossCompensatorLogScope(void)::once != -1)
    dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v221 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_257;
  }
  else
  {
    v221 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
  {
    v222 = *((double *)v253 + 66);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 207;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v222;
    _os_log_impl(&dword_1B5ED0000, v221, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mSampleRate: %f\n", buf, 0x1Cu);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_257:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v223 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_264;
  }
  else
  {
    v223 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 208;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v249;
    _os_log_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_DEFAULT, "%25s:%-5d GetMaxFramesPerSlice(): %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_264:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v224 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_271;
  }
  else
  {
    v224 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
  {
    v225 = *v250;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 209;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v225;
    _os_log_impl(&dword_1B5ED0000, v224, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mNumberOfChannels: %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_271:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v226 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_278;
  }
  else
  {
    v226 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
  {
    v227 = *((unsigned __int8 *)v253 + 561);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 210;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v227;
    _os_log_impl(&dword_1B5ED0000, v226, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mUsingBlockProcessor: %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_278:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v228 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_285;
  }
  else
  {
    v228 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT))
  {
    v229 = *((_DWORD *)v253 + 138);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 211;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v229;
    _os_log_impl(&dword_1B5ED0000, v228, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mBlockSize: %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_285:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v230 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_292;
  }
  else
  {
    v230 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
  {
    v231 = *((unsigned __int8 *)v253 + 560);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 212;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v231;
    _os_log_impl(&dword_1B5ED0000, v230, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mFrequencyDomainInput: %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_292:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v232 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_299;
  }
  else
  {
    v232 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
  {
    v233 = *((_DWORD *)v253 + 135);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 213;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v233;
    _os_log_impl(&dword_1B5ED0000, v232, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mBypass: %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_299:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v234 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_306;
  }
  else
  {
    v234 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
  {
    v235 = *((float *)v253 + 134);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 214;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v235;
    _os_log_impl(&dword_1B5ED0000, v234, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mFadeTime_ms: %f\n", buf, 0x1Cu);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_306:
  if (AUHearingLossCompensatorLogScope(void)::scope)
  {
    v236 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
    if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      goto LABEL_313;
  }
  else
  {
    v236 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
  {
    v237 = *((_DWORD *)v253 + 136);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 215;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v237;
    _os_log_impl(&dword_1B5ED0000, v236, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mNumFadeFrames: %u\n", buf, 0x18u);
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
  }
LABEL_313:
  if (!AUHearingLossCompensatorLogScope(void)::scope)
  {
    v238 = MEMORY[0x1E0C81028];
LABEL_317:
    if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
    {
      v239 = *((unsigned __int8 *)v253 + 562);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUHearingLossCompensator.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 216;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v239;
      _os_log_impl(&dword_1B5ED0000, v238, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mProcessWasCalled: %u\n", buf, 0x18u);
    }
    goto LABEL_319;
  }
  v238 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
  if (*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
    goto LABEL_317;
LABEL_319:
  if (v257)
  {
    v258 = v257;
    operator delete(v257);
  }
  return 0;
}

void sub_1B625F01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,void **a28,void **a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v53;
  uint64_t i;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;

  MEMORY[0x1BCC95CEC](v50, 0x10A0C40A3058978);
  if (__p)
    operator delete(__p);
  v53 = *(void **)(v51 - 240);
  if (v53)
  {
    *(_QWORD *)(v51 - 232) = v53;
    operator delete(v53);
  }
  *(_QWORD *)(v51 - 240) = v49 + 792;
  std::vector<std::unique_ptr<HlcSuppressor>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = v49 + 768;
  std::vector<std::unique_ptr<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = v49 + 744;
  std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = v49 + 720;
  std::vector<std::unique_ptr<FrequencyDomainCompressor>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = v49 + 696;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = v49 + 672;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((_QWORD *)(v49 + 664), 0);
  for (i = 656; i != 640; i -= 8)
    std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100]((_QWORD *)(v49 + i), 0);
  v55 = *(_QWORD *)(v49 + 640);
  *(_QWORD *)(v49 + 640) = 0;
  if (v55)
    MEMORY[0x1BCC95CEC](v55, 0x1090C4010D369B9);
  *(_QWORD *)(v51 - 240) = a15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  *(_QWORD *)(v51 - 240) = a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 240));
  v56 = *(void **)(v49 + 352);
  if (v56)
  {
    *(_QWORD *)(v49 + 360) = v56;
    operator delete(v56);
  }
  v57 = *a27;
  if (*a27)
  {
    *(_QWORD *)(v49 + 336) = v57;
    operator delete(v57);
  }
  v58 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v49 + 312) = v58;
    operator delete(v58);
  }
  v59 = *a28;
  if (*a28)
  {
    *(_QWORD *)(v49 + 288) = v59;
    operator delete(v59);
  }
  v60 = *a30;
  if (*a30)
  {
    *(_QWORD *)(v49 + 264) = v60;
    operator delete(v60);
  }
  v61 = 0;
  while (1)
  {
    v62 = *(void **)(v49 + v61 + 232);
    if (v62)
    {
      *(_QWORD *)(v49 + v61 + 240) = v62;
      operator delete(v62);
    }
    v61 -= 24;
    if (v61 == -48)
    {
      v63 = *a14;
      if (*a14)
      {
        *(_QWORD *)(v49 + 192) = v63;
        operator delete(v63);
      }
      v64 = *a29;
      if (*a29)
      {
        *(_QWORD *)(v49 + 168) = v64;
        operator delete(v64);
      }
      v65 = *a10;
      if (*a10)
      {
        *(_QWORD *)(v49 + 144) = v65;
        operator delete(v65);
      }
      v66 = *a11;
      if (*a11)
      {
        *(_QWORD *)(v49 + 120) = v66;
        operator delete(v66);
      }
      v67 = *a12;
      if (*a12)
      {
        *(_QWORD *)(v49 + 96) = v67;
        operator delete(v67);
      }
      v68 = *(void **)v49;
      if (*(_QWORD *)v49)
      {
        *(_QWORD *)(v49 + 8) = v68;
        operator delete(v68);
      }
      MEMORY[0x1BCC95CEC](v49, 0x10A0C401C64A62ELL);
      if (a38)
        operator delete(a38);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AUHearingLossCompensator::Reset(AUHearingLossCompensator *this)
{
  BlockProcessor *v1;

  v1 = (BlockProcessor *)*((_QWORD *)this + 71);
  if (v1)
    BlockProcessor::Reset(v1);
  return 0;
}

uint64_t AUHearingLossCompensator::GetPropertyInfo(AUHearingLossCompensator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;
  unsigned int v8;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
    case 64002:
    case 64008:
      v7 = 0;
      v8 = 2048;
      break;
    case 64003:
      v7 = 0;
      v8 = 1260;
      break;
    case 64004:
    case 64005:
    case 64006:
    case 64007:
      v7 = 0;
      v8 = 180;
      break;
    case 64009:
      v8 = 2048;
      v7 = 1;
      break;
    default:
      v8 = 4;
      v7 = 1;
      if (a2 != 21 && a2 != 3700)
        return 4294956417;
      break;
  }
  result = 0;
  *a6 = v7;
  *a5 = v8;
  return result;
}

uint64_t AUHearingLossCompensator::GetProperty(AUHearingLossCompensator *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v8;
  const void **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v8 = *((_QWORD *)this + 72);
      v9 = *(const void ***)(v8 + 496);
      goto LABEL_26;
    case 64002:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v11 = *((_QWORD *)this + 72);
      bzero(a5, 0x800uLL);
      memcpy(a5, **(const void ***)(v11 + 520), 4 * *(unsigned int *)(v11 + 32));
      result = 0;
      *(_DWORD *)(v11 + 48) = 1;
      return result;
    case 64003:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      FrequencyDomainCompressor::GetGainTargets(**(FrequencyDomainCompressor ***)(*((_QWORD *)this + 72) + 720), a5);
      return 0;
    case 64004:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v12 = *((_QWORD *)this + 72);
      v13 = *(const void ***)(v12 + 544);
      goto LABEL_21;
    case 64005:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v12 = *((_QWORD *)this + 72);
      v13 = *(const void ***)(v12 + 568);
      goto LABEL_21;
    case 64006:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v12 = *((_QWORD *)this + 72);
      v13 = *(const void ***)(v12 + 592);
      goto LABEL_21;
    case 64007:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v12 = *((_QWORD *)this + 72);
      v13 = *(const void ***)(v12 + 616);
LABEL_21:
      v14 = *v13;
      v15 = *(unsigned int *)(v12 + 40);
      goto LABEL_27;
    case 64008:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v8 = *((_QWORD *)this + 72);
      v9 = *(const void ***)(v8 + 424);
      goto LABEL_26;
    case 64009:
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      v8 = *((_QWORD *)this + 72);
      v9 = *(const void ***)(v8 + 472);
LABEL_26:
      v14 = *v9;
      v15 = *(unsigned int *)(v8 + 36);
LABEL_27:
      memcpy(a5, v14, 4 * v15);
      return 0;
    default:
      if (a2 == 3700)
      {
        result = 0;
        v10 = *((unsigned __int8 *)this + 376);
        goto LABEL_31;
      }
      if (a2 == 21)
      {
        result = 0;
        v10 = *((_DWORD *)this + 135);
LABEL_31:
        *a5 = v10;
        return result;
      }
      return 4294956417;
  }
}

uint64_t AUHearingLossCompensator::SetProperty(AUHearingLossCompensator *this, int a2, int a3, unsigned int a4, _BYTE *__src, unsigned int a6)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (a2 == 64009)
      goto LABEL_14;
    if (a2 == 3700)
    {
      if (a6 < 4)
        return 4294956445;
      result = 0;
      *((_BYTE *)this + 376) = *__src;
      return result;
    }
    if (a2 != 21)
      return 4294956417;
    if (*((_BYTE *)this + 562) && *((_DWORD *)this + 135) != *(_DWORD *)__src)
    {
      *((_DWORD *)this + 137) = 0;
      if (AUHearingLossCompensatorLogScope(void)::once != -1)
        dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
      if (AUHearingLossCompensatorLogScope(void)::scope)
      {
        v8 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
        if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
          goto LABEL_27;
      }
      else
      {
        v8 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *((_DWORD *)this + 137);
        v16 = 136315650;
        v17 = "AUHearingLossCompensator.cpp";
        v18 = 1024;
        v19 = 422;
        v20 = 1024;
        v21 = v13;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cross-fade Triggered: mBypassCounter: %u\n", (uint8_t *)&v16, 0x18u);
      }
    }
LABEL_27:
    *((_DWORD *)this + 135) = *(_DWORD *)__src;
    if (AUHearingLossCompensatorLogScope(void)::once != -1)
      dispatch_once(&AUHearingLossCompensatorLogScope(void)::once, &__block_literal_global_4623);
    if (AUHearingLossCompensatorLogScope(void)::scope)
    {
      v14 = *(NSObject **)AUHearingLossCompensatorLogScope(void)::scope;
      if (!*(_QWORD *)AUHearingLossCompensatorLogScope(void)::scope)
      {
LABEL_35:
        AUHearingLossCompensator::RefreshKernelParamValue(this, 0x19u);
        return 0;
      }
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *((_DWORD *)this + 135);
      v16 = 136315650;
      v17 = "AUHearingLossCompensator.cpp";
      v18 = 1024;
      v19 = 425;
      v20 = 1024;
      v21 = v15;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mBypass: %u\n", (uint8_t *)&v16, 0x18u);
    }
    goto LABEL_35;
  }
  if (a2 != 64009)
    return 4294956417;
LABEL_14:
  v9 = *((_QWORD *)this + 72);
  if (!v9)
    return 0;
  if (*(_DWORD *)(v9 + 36) != a6 >> 2)
    __assert_rtn("SetNoiseEstimate", "HearingLossCompensator_Core.cpp", 331, "numBins == mNumBins");
  if (*(_DWORD *)(v9 + 24))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      memcpy(*(void **)(*(_QWORD *)(v9 + 472) + v10), __src, 4 * *(unsigned int *)(v9 + 36));
      ++v11;
      v10 += 24;
    }
    while (v11 < *(unsigned int *)(v9 + 24));
  }
  result = 0;
  *(_BYTE *)(v9 + 78) = 0;
  return result;
}

uint64_t AUHearingLossCompensator::SetParameter(AUHearingLossCompensator *this, unsigned int a2, int a3, float a4)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  AUHearingLossCompensator::RefreshKernelParamValue(this, a2);
  return 0;
}

uint64_t AUHearingLossCompensator::CanScheduleParameters(AUHearingLossCompensator *this)
{
  return 0;
}

uint64_t AUHearingLossCompensator::ProcessMultipleBufferLists(AUHearingLossCompensator *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const void *v21;
  void *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v45;
  float __D;
  float __B;

  result = 4294956428;
  if (a4 == 1 && a6 == 1 && (*a5)->mNumberBuffers == (*a7)->mNumberBuffers)
  {
    if (*((_DWORD *)this + 135) && *((_DWORD *)this + 137) >= *((_DWORD *)this + 136))
    {
      v18 = *((unsigned int *)this + 139);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = 16;
        do
        {
          if (a3)
          {
            v21 = *(const void **)((char *)&(*a5)->mNumberBuffers + v20);
            v22 = *(void **)((char *)&(*a7)->mNumberBuffers + v20);
            if (v21 != v22)
            {
              memmove(v22, v21, 4 * a3);
              v18 = *((unsigned int *)this + 139);
            }
          }
          ++v19;
          v20 += 16;
        }
        while (v19 < v18);
      }
    }
    else
    {
      if (*((_BYTE *)this + 561))
      {
        BlockProcessor::Process(*((BlockProcessor **)this + 71), a3, a5, a7);
      }
      else if (*((_BYTE *)this + 560))
      {
        v23 = *((unsigned int *)this + 139);
        v24 = *((_DWORD *)this + 138);
        if ((_DWORD)v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 2 * v24;
          v28 = 8 * v24;
          v29 = 16;
          do
          {
            if (v27)
            {
              memmove(*(void **)(*((_QWORD *)this + 73) + v25), *(const void **)((char *)&(*a5)->mNumberBuffers + v29), v28);
              v23 = *((unsigned int *)this + 139);
            }
            ++v26;
            v25 += 24;
            v29 += 16;
          }
          while (v26 < v23);
          v24 = *((_DWORD *)this + 138);
        }
        HearingLossCompensator_Core::Process(*((int ***)this + 72), (_QWORD *)this + 73, (_QWORD *)this + 76, v24);
        v30 = *((unsigned int *)this + 139);
        if ((_DWORD)v30)
        {
          v31 = 0;
          v32 = 0;
          v33 = (2 * *((_DWORD *)this + 138));
          v34 = 16;
          do
          {
            if ((_DWORD)v33)
            {
              memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v34), *(const void **)(*((_QWORD *)this + 76) + v31), 4 * v33);
              v30 = *((unsigned int *)this + 139);
            }
            ++v32;
            v34 += 16;
            v31 += 24;
          }
          while (v32 < v30);
        }
      }
      else if (a3)
      {
        v35 = 0;
        v36 = *((unsigned int *)this + 139);
        LODWORD(v37) = *((_DWORD *)this + 138);
        v45 = a3;
        do
        {
          if (v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 16;
            do
            {
              if ((_DWORD)v37)
              {
                memmove(*(void **)(*((_QWORD *)this + 73) + v38), (const void *)(*(_QWORD *)((char *)&(*a5)->mNumberBuffers + v40) + 4 * v35), 4 * v37);
                v36 = *((unsigned int *)this + 139);
              }
              ++v39;
              v38 += 24;
              v40 += 16;
            }
            while (v39 < v36);
            LODWORD(v37) = *((_DWORD *)this + 138);
          }
          HearingLossCompensator_Core::Process(*((int ***)this + 72), (_QWORD *)this + 73, (_QWORD *)this + 76, v37);
          v36 = *((unsigned int *)this + 139);
          v37 = *((unsigned int *)this + 138);
          if ((_DWORD)v36)
          {
            v41 = 0;
            v42 = 0;
            v43 = 16;
            do
            {
              if ((_DWORD)v37)
              {
                memmove((void *)(*(_QWORD *)((char *)&(*a7)->mNumberBuffers + v43) + 4 * v35), *(const void **)(*((_QWORD *)this + 76) + v41), 4 * v37);
                v36 = *((unsigned int *)this + 139);
              }
              ++v42;
              v43 += 16;
              v41 += 24;
            }
            while (v42 < v36);
            LODWORD(v37) = *((_DWORD *)this + 138);
          }
          else
          {
            v36 = 0;
          }
          v35 += v37;
          v45 -= v37;
        }
        while (v45);
      }
      v12 = *((_DWORD *)this + 137);
      v13 = *((_DWORD *)this + 136);
      if (v12 <= v13)
      {
        v14 = v12 + 1;
        v15 = (float)v14 / (float)(v13 + 1);
        if (!*((_DWORD *)this + 135))
          v15 = 1.0 - v15;
        __B = v15;
        __D = 1.0 - v15;
        if (*((_DWORD *)this + 139))
        {
          v16 = 0;
          v17 = 16;
          do
          {
            vDSP_vsmsma(*(const float **)((char *)&(*a5)->mNumberBuffers + v17), 1, &__B, *(const float **)((char *)&(*a7)->mNumberBuffers + v17), 1, &__D, *(float **)((char *)&(*a7)->mNumberBuffers + v17), 1, a3);
            ++v16;
            v17 += 16;
          }
          while (v16 < *((unsigned int *)this + 139));
          v14 = *((_DWORD *)this + 137) + 1;
        }
        *((_DWORD *)this + 137) = v14;
      }
    }
    result = 0;
    *((_BYTE *)this + 562) = 1;
  }
  return result;
}

uint64_t AUHearingLossCompensator::Render(AUHearingLossCompensator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t BufferList;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = (AUHearingLossCompensator *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUHearingLossCompensator *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUHearingLossCompensator::GetParameterInfo(AUHearingLossCompensator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  const __CFString *v7;

  result = 4294956418;
  if ((a2 & 0xFFFFFFFB) == 0 && a3 <= 0x27)
  {
    v5 = AUHearingLossCompensator::kUserParameter[a3];
    buffer->unit = AUHearingLossCompensator::kParameterUnit[v5];
    buffer->minValue = HearingLossCompensator_Core::kMinValue[v5];
    buffer->maxValue = HearingLossCompensator_Core::kMaxValue[v5];
    v6 = AUHearingLossCompensator::kParameterFlag[v5];
    v7 = AUHearingLossCompensator::kParameterName[v5];
    buffer->defaultValue = AUHearingLossCompensator::kUserParameterDefault[a3];
    buffer->cfNameString = v7;
    buffer->flags = (v6 | 0x8000000) + 0x40000000;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    return 0;
  }
  return result;
}

uint64_t AUHearingLossCompensator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;
  OpaqueAudioComponentInstance *v4;
  OpaqueAudioComponentInstance *v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  OpaqueAudioComponentInstance *v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  OpaqueAudioComponentInstance *v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  OpaqueAudioComponentInstance *v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  OpaqueAudioComponentInstance *v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  unsigned int i;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    v4 = this[72];
    if (v4)
    {
      v5 = this[9];
      if (v5)
      {
        v6 = (ausdk::AUElement *)(*(uint64_t (**)(OpaqueAudioComponentInstance *, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
        v4 = this[72];
      }
      else
      {
        v7 = (ausdk::AUElement **)this[6];
        if (this[7] == (OpaqueAudioComponentInstance *)v7)
          v6 = 0;
        else
          v6 = *v7;
      }
      ausdk::AUElement::SetParameter(v6, 0x17u, *(float *)(*(_QWORD *)v4 + 92), 0);
      v8 = this[9];
      if (v8)
      {
        v9 = (ausdk::AUElement *)(*(uint64_t (**)(OpaqueAudioComponentInstance *, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
      }
      else
      {
        v10 = (ausdk::AUElement **)this[6];
        if (this[7] == (OpaqueAudioComponentInstance *)v10)
          v9 = 0;
        else
          v9 = *v10;
      }
      ausdk::AUElement::SetParameter(v9, 0x18u, *(float *)(*(_QWORD *)this[72] + 96), 0);
      v11 = this[9];
      if (v11)
      {
        v12 = (ausdk::AUElement *)(*(uint64_t (**)(OpaqueAudioComponentInstance *, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
      }
      else
      {
        v13 = (ausdk::AUElement **)this[6];
        if (this[7] == (OpaqueAudioComponentInstance *)v13)
          v12 = 0;
        else
          v12 = *v13;
      }
      ausdk::AUElement::SetParameter(v12, 0x19u, *(float *)(*(_QWORD *)this[72] + 100), 0);
      v14 = this[9];
      if (v14)
      {
        v15 = (ausdk::AUElement *)(*(uint64_t (**)(OpaqueAudioComponentInstance *, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
      }
      else
      {
        v16 = (ausdk::AUElement **)this[6];
        if (this[7] == (OpaqueAudioComponentInstance *)v16)
          v15 = 0;
        else
          v15 = *v16;
      }
      ausdk::AUElement::SetParameter(v15, 0x1Au, *(float *)(*(_QWORD *)this[72] + 104), 0);
      v17 = this[9];
      if (v17)
      {
        v18 = (ausdk::AUElement *)(*(uint64_t (**)(OpaqueAudioComponentInstance *, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
      }
      else
      {
        v19 = (ausdk::AUElement **)this[6];
        if (this[7] == (OpaqueAudioComponentInstance *)v19)
          v18 = 0;
        else
          v18 = *v19;
      }
      ausdk::AUElement::SetParameter(v18, 0x1Bu, *(float *)(*(_QWORD *)this[72] + 108), 0);
    }
    for (i = 0; i != 40; ++i)
      AUHearingLossCompensator::RefreshKernelParamValue((AUHearingLossCompensator *)this, i);
    return 0;
  }
  return result;
}

double AUHearingLossCompensator::GetLatency(AUHearingLossCompensator *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((_QWORD *)this + 72);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 76))
      v2 = 0;
    else
      v2 = *(_DWORD *)(v1 + 32);
    *(_DWORD *)(v1 + 44) = v2;
  }
  else
  {
    v2 = 0;
  }
  if (*((_BYTE *)this + 561))
    v2 += *((_DWORD *)this + 138);
  return (double)v2
       / *(double *)(ausdk::AUScope::SafeGetElement((AUHearingLossCompensator *)((char *)this + 128), 0) + 80);
}

double AUHearingLossCompensator::GetTailTime(AUHearingLossCompensator *this)
{
  return 0.0;
}

uint64_t AUHearingLossCompensator::SupportsTail(AUHearingLossCompensator *this)
{
  return 1;
}

BOOL AUHearingLossCompensator::StreamFormatWritable(AUHearingLossCompensator *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUHearingLossCompensator::SupportedNumChannels(AUHearingLossCompensator *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUHearingLossCompensator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 2;
}

BOOL AUHearingLossCompensator::ValidFormat(AUHearingLossCompensator *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  __int128 v5;
  _BOOL8 result;
  __int128 v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  int v16;

  v5 = *(_OWORD *)&a4->mBytesPerPacket;
  v12 = *(_OWORD *)&a4->mSampleRate;
  v13 = v5;
  v14 = *(_QWORD *)&a4->mBitsPerChannel;
  v16 = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(&v12, &v16, 0) && v16 == 1)
    return a4->mChannelsPerFrame - 1 < 2;
  v7 = *(_OWORD *)&a4->mBytesPerPacket;
  v12 = *(_OWORD *)&a4->mSampleRate;
  v13 = v7;
  v14 = *(_QWORD *)&a4->mBitsPerChannel;
  v16 = 0;
  v8 = CAStreamBasicDescription::IdentifyCommonPCMFormat(&v12, &v16, 0);
  if (v16 == 1)
    v9 = v8;
  else
    v9 = 0;
  if ((v9 & 1) != 0 || a4->mFormatID != 1718773105)
  {
    if (!v9)
      return 0;
    return a4->mChannelsPerFrame - 1 < 2;
  }
  v10 = *(_OWORD *)&a4->mBytesPerPacket;
  v12 = *(_OWORD *)&a4->mSampleRate;
  v13 = v10;
  v14 = *(_QWORD *)&a4->mBitsPerChannel;
  DWORD2(v12) = 1819304813;
  v16 = 0;
  v11 = CAStreamBasicDescription::IdentifyCommonPCMFormat(&v12, &v16, &v15);
  result = 0;
  if (v11)
  {
    if (v16 == 4)
      return a4->mChannelsPerFrame - 1 < 2;
  }
  return result;
}

void AUHearingLossCompensator::RefreshKernelParamValue(AUHearingLossCompensator *this, unsigned int a2)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  HearingLossCompensator_Core *v8;

  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, a2);
  v8 = (HearingLossCompensator_Core *)*((_QWORD *)this + 72);
  if (v8)
    HearingLossCompensator_Core::SetParameter(v8, a2, Parameter);
}

os_log_t ___ZL32AUHearingLossCompensatorLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "hearc");
  *v0 = result;
  AUHearingLossCompensatorLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t AUHearingLossCompensator::BlockProcessClassFunc(AUHearingLossCompensator *this, void *a2, _QWORD *a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  vDSP_Length v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;

  v6 = a2;
  v8 = *((unsigned int *)this + 139);
  if ((_DWORD)v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = 16;
    v13 = a2;
    do
    {
      if (v6)
      {
        memmove(*(void **)(*((_QWORD *)this + 73) + v10), *(const void **)(*a3 + v12), 4 * v6);
        v8 = *((unsigned int *)this + 139);
      }
      ++v11;
      v10 += 24;
      v12 += 16;
    }
    while (v11 < v8);
  }
  else
  {
    v13 = a2;
  }
  HearingLossCompensator_Core::Process(*((int ***)this + 72), (_QWORD *)this + 73, (_QWORD *)this + 76, v13);
  v14 = *((unsigned int *)this + 139);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = 4 * v13;
    v18 = 16;
    do
    {
      if (v6)
      {
        memmove(*(void **)((char *)&(*a4)->mNumberBuffers + v18), *(const void **)(*((_QWORD *)this + 76) + v15), v17);
        v14 = *((unsigned int *)this + 139);
      }
      ++v16;
      v18 += 16;
      v15 += 24;
    }
    while (v16 < v14);
  }
  return 0;
}

uint64_t *std::unique_ptr<HearingLossCompensator_Core>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void **v25;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 640);
    if (v3)
    {
      if (*v3)
      {
        MEMORY[0x1BCC95CEC](*v3, 0x1000C4052888210);
        v3 = *(_QWORD **)(v2 + 640);
      }
      v4 = v3[1];
      if (v4)
      {
        MEMORY[0x1BCC95CEC](v4, 0x1000C4052888210);
        v3 = *(_QWORD **)(v2 + 640);
      }
      v5 = v3[2];
      if (v5)
      {
        MEMORY[0x1BCC95CEC](v5, 0x1000C4052888210);
        v3 = *(_QWORD **)(v2 + 640);
      }
      v6 = v3[3];
      if (v6)
      {
        MEMORY[0x1BCC95CEC](v6, 0x1000C4052888210);
        v3 = *(_QWORD **)(v2 + 640);
      }
      v7 = v3[6];
      if (v7)
      {
        MEMORY[0x1BCC95CEC](v7, 0x1000C4052888210);
        v3 = *(_QWORD **)(v2 + 640);
      }
      v8 = v3[7];
      if (v8)
      {
        MEMORY[0x1BCC95CEC](v8, 0x1000C4052888210);
        v3 = *(_QWORD **)(v2 + 640);
      }
      v9 = v3[4];
      if (v9)
        MEMORY[0x1BCC95CEC](v9, 0x1000C4052888210);
    }
    v25 = (void **)(v2 + 792);
    std::vector<std::unique_ptr<HlcSuppressor>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 768);
    std::vector<std::unique_ptr<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 744);
    std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 720);
    std::vector<std::unique_ptr<FrequencyDomainCompressor>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 696);
    std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 672);
    std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v25);
    std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((_QWORD *)(v2 + 664), 0);
    for (i = 656; i != 640; i -= 8)
      std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100]((_QWORD *)(v2 + i), 0);
    v11 = *(_QWORD *)(v2 + 640);
    *(_QWORD *)(v2 + 640) = 0;
    if (v11)
      MEMORY[0x1BCC95CEC](v11, 0x1090C4010D369B9);
    v25 = (void **)(v2 + 616);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 592);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 568);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 544);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 520);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 496);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 472);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 448);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 424);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 400);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v25 = (void **)(v2 + 376);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
    v12 = *(void **)(v2 + 352);
    if (v12)
    {
      *(_QWORD *)(v2 + 360) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 328);
    if (v13)
    {
      *(_QWORD *)(v2 + 336) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 304);
    if (v14)
    {
      *(_QWORD *)(v2 + 312) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 280);
    if (v15)
    {
      *(_QWORD *)(v2 + 288) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 256);
    if (v16)
    {
      *(_QWORD *)(v2 + 264) = v16;
      operator delete(v16);
    }
    v17 = 0;
    while (1)
    {
      v18 = *(void **)(v2 + v17 + 232);
      if (v18)
      {
        *(_QWORD *)(v2 + v17 + 240) = v18;
        operator delete(v18);
      }
      v17 -= 24;
      if (v17 == -48)
      {
        v19 = *(void **)(v2 + 184);
        if (v19)
        {
          *(_QWORD *)(v2 + 192) = v19;
          operator delete(v19);
        }
        v20 = *(void **)(v2 + 160);
        if (v20)
        {
          *(_QWORD *)(v2 + 168) = v20;
          operator delete(v20);
        }
        v21 = *(void **)(v2 + 136);
        if (v21)
        {
          *(_QWORD *)(v2 + 144) = v21;
          operator delete(v21);
        }
        v22 = *(void **)(v2 + 112);
        if (v22)
        {
          *(_QWORD *)(v2 + 120) = v22;
          operator delete(v22);
        }
        v23 = *(void **)(v2 + 88);
        if (v23)
        {
          *(_QWORD *)(v2 + 96) = v23;
          operator delete(v23);
        }
        v24 = *(void **)v2;
        if (*(_QWORD *)v2)
        {
          *(_QWORD *)(v2 + 8) = v24;
          operator delete(v24);
        }
        JUMPOUT(0x1BCC95CECLL);
      }
    }
  }
  return result;
}

_QWORD *std::vector<float const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B6260A70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<SmartFIR>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 384);
    if (v3)
    {
      *(_QWORD *)(v2 + 392) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 360);
    if (v4)
    {
      *(_QWORD *)(v2 + 368) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 336);
    if (v5)
    {
      *(_QWORD *)(v2 + 344) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 312);
    if (v6)
    {
      *(_QWORD *)(v2 + 320) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 288);
    if (v7)
    {
      *(_QWORD *)(v2 + 296) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 264);
    if (v8)
    {
      *(_QWORD *)(v2 + 272) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 240);
    if (v9)
    {
      *(_QWORD *)(v2 + 248) = v9;
      operator delete(v9);
    }
    CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v2 + 200));
    v11 = (void **)(v2 + 176);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    v11 = (void **)(v2 + 152);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    v11 = (void **)(v2 + 128);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    v11 = (void **)(v2 + 104);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    v10 = *(void **)(v2 + 80);
    if (v10)
    {
      *(_QWORD *)(v2 + 88) = v10;
      operator delete(v10);
    }
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2 + 64);
    v11 = (void **)(v2 + 32);
    std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](&v11);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 21;
        std::__destroy_at[abi:ne180100]<FreqDomainConvolver,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<FreqDomainConvolver,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 10));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 6));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 2));
  return std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1);
}

CircArrayKernel *CircArrayKernel::CircArrayKernel(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, float a9, uint64_t *a10, _QWORD *a11, _QWORD *a12, uint64_t *a13, uint64_t a14)
{
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t (*v30)(_QWORD);
  unsigned int v31;
  _QWORD *v32;
  FreqDomainConvolver *v33;
  unsigned int v34;
  CircArrayKernel *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  FreqDomainConvolver *v43;
  CircArrayKernel *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  SmartFIR *v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t i;
  _QWORD *v70;
  unint64_t v71;
  const float *v72;
  const float **v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  std::vector<unsigned int>::size_type v78;
  char *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  CircArrayKernel *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t **v93;
  unsigned int v94;
  uint64_t **v95;
  unsigned int v96;
  CircArrayKernel *v97;
  unsigned int v98;
  unint64_t *v99;
  float v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  int64x2_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  SmartFIR *v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  const float **v137;
  unint64_t v138;
  unint64_t v139;
  CircArrayKernel *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  vDSP_biquadm_Setup Setup;
  uint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t *v181;
  int v182;
  uint64_t v183;
  const double *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  CircArrayKernel *v206;
  _QWORD *v207;
  uint64_t v208;
  CircArrayKernel *v209;
  unsigned int v210;
  unsigned int j;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  vDSP_biquadm_Setup v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  CircArrayKernel *v233;
  unint64_t v234;
  void *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  char *v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  void **v252;
  _QWORD *v253;
  _QWORD *v254;
  unint64_t v255;
  _QWORD *v256;
  void **v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  void **v270;
  uint64_t *v271;
  uint64_t *v272;
  unint64_t v273;
  _QWORD *v274;
  void **v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t *v287;
  _QWORD *v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t *v291;
  _QWORD *v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  unint64_t v297;
  CDSPSplitComplex *v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  CDSPSplitComplex *v308;
  CircArrayKernel *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  unsigned int v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  int v340;
  int v341;
  std::vector<unsigned int>::size_type v342;
  _DWORD *v343;
  unint64_t v344;
  _DWORD *v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  float v353;
  int v354;
  unsigned int v355;
  uint64_t v356;
  unint64_t v357;
  unsigned int v358;
  int v359;
  void *v360;
  uint64_t v361;
  id *v362;
  id v363;
  id v364;
  NSObject *v365;
  int v366;
  int v367;
  unsigned int v368;
  unint64_t v369;
  int v370;
  CAXException *exception;
  CAXException *v374;
  CAXException *v375;
  CAXException *v376;
  CAXException *v377;
  CAXException *v378;
  CAXException *v379;
  CAXException *v380;
  CAXException *v381;
  char **v383;
  char **v384;
  char **v385;
  int64x2_t *v386;
  uint64_t *v387;
  uint64_t *v388;
  uint64_t *v389;
  char *v390;
  int v391;
  _QWORD *v392;
  int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  uint64_t **v397;
  _QWORD *v398;
  CircArrayKernel *v399;
  unsigned int v400;
  _BYTE v401[40];
  __int16 v402;
  unsigned int v403;
  __int16 v404;
  unint64_t v405;
  __int16 v406;
  int v407;
  std::vector<unsigned int>::value_type __x[2];
  const double *v409;
  const float **v410;
  const float **v411;
  uint64_t v412;

  v21 = (_QWORD *)a1;
  v412 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v397 = (uint64_t **)(a1 + 8);
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 118) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E69C74B8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 120) = 0x100000001;
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 136), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  v392 = (_QWORD *)a5;
  v21[20] = 0;
  v21[21] = 0;
  v21[22] = 0;
  v398 = v21 + 20;
  v399 = (CircArrayKernel *)v21;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v21 + 20, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  v21[23] = 0;
  v21[24] = 0;
  v21 += 23;
  v21[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  v22 = (_QWORD *)operator new();
  *v22 = 0;
  v22[1] = 0;
  v22[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v22, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  *((_QWORD *)v399 + 26) = v22;
  *((_QWORD *)v399 + 32) = &off_1E69D6718;
  *((_QWORD *)v399 + 40) = &off_1E69D6738;
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)v399 + 96);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue((unsigned int *)v399 + 336);
  *((_BYTE *)v399 + 2305) = 0;
  *((_DWORD *)v399 + 592) = a3;
  v23 = *(int **)a5;
  v24 = *(int **)(a5 + 8);
  if (*(int **)a5 == v24)
  {
    v25 = 0;
  }
  else
  {
    v25 = 0;
    do
    {
      v26 = *v23++;
      v25 += v26;
    }
    while (v23 != v24);
  }
  *((_DWORD *)v399 + 593) = v25;
  v395 = a4;
  v27 = (2 * a4) | 1u;
  *((_DWORD *)v399 + 594) = v27;
  v28 = 30;
  while (exp2((double)v28) >= (double)a2)
  {
    if (!--v28)
    {
      v29 = 512;
      goto LABEL_11;
    }
  }
  v29 = exp2((double)(v28 + 1));
LABEL_11:
  *((_DWORD *)v399 + 595) = v29;
  *((float *)v399 + 596) = a9;
  v386 = (int64x2_t *)((char *)v399 + 2392);
  v387 = (uint64_t *)((char *)v399 + 2416);
  *((_QWORD *)v399 + 307) = 0;
  *(_OWORD *)((char *)v399 + 2392) = 0u;
  *(_OWORD *)((char *)v399 + 2408) = 0u;
  *(_OWORD *)((char *)v399 + 2424) = 0u;
  *(_OWORD *)((char *)v399 + 2440) = 0u;
  *(_DWORD *)v401 = 0;
  std::vector<float>::vector((_QWORD *)v399 + 308, v29, v401);
  *((_QWORD *)v399 + 311) = 0;
  v30 = MEMORY[0x1E0C8C018];
  *((_QWORD *)v399 + 312) = MEMORY[0x1E0C8C018];
  v384 = (char **)((char *)v399 + 2528);
  v385 = (char **)((char *)v399 + 2504);
  *((_QWORD *)v399 + 319) = 0;
  *(_OWORD *)((char *)v399 + 2504) = 0u;
  *(_OWORD *)((char *)v399 + 2520) = 0u;
  *(_OWORD *)((char *)v399 + 2536) = 0u;
  *((_QWORD *)v399 + 320) = v30;
  *(_OWORD *)((char *)v399 + 2568) = 0u;
  *(_OWORD *)((char *)v399 + 2584) = 0u;
  v383 = (char **)((char *)v399 + 2568);
  *(_OWORD *)((char *)v399 + 2600) = 0u;
  v31 = *((_DWORD *)v399 + 595);
  *((_QWORD *)v399 + 327) = 0;
  *((_QWORD *)v399 + 329) = 0;
  *((_QWORD *)v399 + 328) = 0;
  v389 = (uint64_t *)((char *)v399 + 2616);
  std::vector<FreqDomainConvolver>::reserve((uint64_t *)v399 + 327, a3);
  if (a3)
  {
    v32 = (_QWORD *)((char *)v399 + 2632);
    v33 = (FreqDomainConvolver *)*((_QWORD *)v399 + 328);
    v34 = a3;
    do
    {
      if ((unint64_t)v33 >= *v32)
      {
        v36 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v33 - *v389) >> 3);
        v37 = v36 + 1;
        if (v36 + 1 > 0x186186186186186)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x9E79E79E79E79E7ALL * ((*v32 - *v389) >> 3) > v37)
          v37 = 0x9E79E79E79E79E7ALL * ((*v32 - *v389) >> 3);
        if (0xCF3CF3CF3CF3CF3DLL * ((*v32 - *v389) >> 3) >= 0xC30C30C30C30C3)
          v38 = 0x186186186186186;
        else
          v38 = v37;
        *(_QWORD *)&v401[32] = (char *)v399 + 2632;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(v38);
        else
          v39 = 0;
        *(_QWORD *)v401 = v38;
        *(_QWORD *)&v401[8] = v38 + 168 * v36;
        *(_QWORD *)&v401[16] = *(_QWORD *)&v401[8];
        *(_QWORD *)&v401[24] = v38 + 168 * v39;
        FreqDomainConvolver::FreqDomainConvolver(*(FreqDomainConvolver **)&v401[8], v31);
        *(_QWORD *)&v401[16] += 168;
        std::vector<FreqDomainConvolver>::__swap_out_circular_buffer(v389, v401);
        v35 = v399;
        v33 = (FreqDomainConvolver *)*((_QWORD *)v399 + 328);
        std::__split_buffer<FreqDomainConvolver>::~__split_buffer((uint64_t)v401);
      }
      else
      {
        FreqDomainConvolver::FreqDomainConvolver(v33, v31);
        v33 = (FreqDomainConvolver *)((char *)v33 + 168);
        v35 = v399;
        *((_QWORD *)v399 + 328) = v33;
      }
      *((_QWORD *)v35 + 328) = v33;
      --v34;
    }
    while (v34);
  }
  v40 = *((unsigned int *)v399 + 594);
  v41 = *((_DWORD *)v399 + 595);
  *((_QWORD *)v399 + 330) = 0;
  *((_QWORD *)v399 + 332) = 0;
  *((_QWORD *)v399 + 331) = 0;
  v388 = (uint64_t *)((char *)v399 + 2640);
  std::vector<FreqDomainConvolver>::reserve((uint64_t *)v399 + 330, v40);
  if ((_DWORD)v40)
  {
    v42 = (_QWORD *)((char *)v399 + 2656);
    v43 = (FreqDomainConvolver *)*((_QWORD *)v399 + 331);
    do
    {
      if ((unint64_t)v43 >= *v42)
      {
        v45 = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v43 - *v388) >> 3);
        v46 = v45 + 1;
        if (v45 + 1 > 0x186186186186186)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x9E79E79E79E79E7ALL * ((*v42 - *v388) >> 3) > v46)
          v46 = 0x9E79E79E79E79E7ALL * ((*v42 - *v388) >> 3);
        if (0xCF3CF3CF3CF3CF3DLL * ((*v42 - *v388) >> 3) >= 0xC30C30C30C30C3)
          v47 = 0x186186186186186;
        else
          v47 = v46;
        *(_QWORD *)&v401[32] = (char *)v399 + 2656;
        if (v47)
          v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(v47);
        else
          v48 = 0;
        *(_QWORD *)v401 = v47;
        *(_QWORD *)&v401[8] = v47 + 168 * v45;
        *(_QWORD *)&v401[16] = *(_QWORD *)&v401[8];
        *(_QWORD *)&v401[24] = v47 + 168 * v48;
        FreqDomainConvolver::FreqDomainConvolver(*(FreqDomainConvolver **)&v401[8], v41);
        *(_QWORD *)&v401[16] += 168;
        std::vector<FreqDomainConvolver>::__swap_out_circular_buffer(v388, v401);
        v44 = v399;
        v43 = (FreqDomainConvolver *)*((_QWORD *)v399 + 331);
        std::__split_buffer<FreqDomainConvolver>::~__split_buffer((uint64_t)v401);
      }
      else
      {
        FreqDomainConvolver::FreqDomainConvolver(v43, v41);
        v43 = (FreqDomainConvolver *)((char *)v43 + 168);
        v44 = v399;
        *((_QWORD *)v399 + 331) = v43;
      }
      *((_QWORD *)v44 + 331) = v43;
      LODWORD(v40) = v40 - 1;
    }
    while ((_DWORD)v40);
  }
  v49 = (uint64_t *)((char *)v399 + 2664);
  *(_OWORD *)((char *)v399 + 2744) = 0u;
  *(_OWORD *)((char *)v399 + 2760) = 0u;
  *(_OWORD *)((char *)v399 + 2712) = 0u;
  *(_OWORD *)((char *)v399 + 2728) = 0u;
  *(_OWORD *)((char *)v399 + 2680) = 0u;
  *(_OWORD *)((char *)v399 + 2696) = 0u;
  *(_OWORD *)((char *)v399 + 2664) = 0u;
  v50 = v392[1];
  v51 = (v50 - *v392) >> 2;
  v52 = *a10;
  v53 = a10[1];
  if (v51 != 0xAAAAAAAAAAAAAAABLL * ((v53 - *a10) >> 3))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 5u);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 88;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "Mismatch of speakers in rows between speakers in rows vec and modal FIRs vec";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Mismatch of speakers in rows between speakers in rows vec and modal FIRs vec", 5);
LABEL_379:
  }
  v54 = *((unsigned int *)v399 + 595);
  if (v50 == *v392)
    goto LABEL_50;
  if (!(_DWORD)v54)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 1u);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 40;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "MaxFramesPerSlice is 0";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "MaxFramesPerSlice is 0", 1);
    goto LABEL_379;
  }
  v55 = 0;
  v56 = 0;
  do
  {
    v57 = (_QWORD *)(v52 + 24 * v55);
    v58 = (_QWORD *)*v57;
    v59 = (_QWORD *)v57[1];
    v60 = v58;
    if (v58 == v59)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 1u);
        *(_DWORD *)v401 = 136315906;
        *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
        *(_WORD *)&v401[12] = 1024;
        *(_DWORD *)&v401[14] = 41;
        *(_WORD *)&v401[18] = 2080;
        *(_QWORD *)&v401[20] = &v410;
        *(_WORD *)&v401[28] = 2080;
        *(_QWORD *)&v401[30] = "Coeffs outer size is 0";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Coeffs outer size is 0", 1);
      goto LABEL_379;
    }
    do
    {
      if (*v60 == v60[1])
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 1u);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 44;
          *(_WORD *)&v401[18] = 2080;
          *(_QWORD *)&v401[20] = &v410;
          *(_WORD *)&v401[28] = 2080;
          *(_QWORD *)&v401[30] = "Coeffs inner size is 0";
          _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "Coeffs inner size is 0", 1);
        goto LABEL_379;
      }
      v60 += 3;
    }
    while (v60 != v59);
    if (0xAAAAAAAAAAAAAAABLL * (v59 - v58) != v395 + 1)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 5u);
        *(_DWORD *)v401 = 136315906;
        *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
        *(_WORD *)&v401[12] = 1024;
        *(_DWORD *)&v401[14] = 92;
        *(_WORD *)&v401[18] = 2080;
        *(_QWORD *)&v401[20] = &v410;
        *(_WORD *)&v401[28] = 2080;
        *(_QWORD *)&v401[30] = "Mismatch between algorithm order and modal FIR coeffs inner size";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Mismatch between algorithm order and modal FIR coeffs inner size", 5);
      goto LABEL_379;
    }
    v55 = ++v56;
  }
  while (v51 > v56);
LABEL_50:
  if (v53 == v52)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v61 = *(uint64_t **)v52;
  if (*(_QWORD *)(v52 + 8) == *(_QWORD *)v52)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v63 = *v61;
  v62 = v61[1];
  v64 = (SmartFIR *)operator new();
  SmartFIR::SmartFIR(v64, (v62 - v63) >> 2, v54, v51 * v27);
  *((_QWORD *)v399 + 347) = v64;
  v65 = ((uint64_t)(v392[1] - *v392) >> 2) * v27;
  *(_QWORD *)v401 = 0;
  std::vector<float const*>::vector(&v410, v65, v401);
  if (v392[1] != *v392)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    do
    {
      for (i = 0; v27 != i; ++i)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((a10[1] - *a10) >> 3) <= v67)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v70 = (_QWORD *)(*a10 + 24 * v67);
        v71 = (i + 1) >> 1;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70[1] - *v70) >> 3) <= v71)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v73 = (const float **)(*v70 + 24 * v71);
        v72 = *v73;
        if ((((unint64_t)((char *)v73[1] - (char *)v72) >> 2) & (((unint64_t)((char *)v73[1] - (char *)v72) >> 2)
                                                                                     - 1)) != 0)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)__x, 0);
            *(_DWORD *)v401 = 136315906;
            *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
            *(_WORD *)&v401[12] = 1024;
            *(_DWORD *)&v401[14] = 103;
            *(_WORD *)&v401[18] = 2080;
            *(_QWORD *)&v401[20] = __x;
            *(_WORD *)&v401[28] = 2080;
            *(_QWORD *)&v401[30] = "Modal FIRs not power of 2 length";
            _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
          }
          v375 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v375, "Modal FIRs not power of 2 length", 0);
        }
        v74 = v66 + i;
        v410[v74] = v72;
        if (!v410[v74])
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)__x, 0xFFFFFFFF);
            *(_DWORD *)v401 = 136315906;
            *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
            *(_WORD *)&v401[12] = 1024;
            *(_DWORD *)&v401[14] = 105;
            *(_WORD *)&v401[18] = 2080;
            *(_QWORD *)&v401[20] = __x;
            *(_WORD *)&v401[28] = 2080;
            *(_QWORD *)&v401[30] = "pFilterCoeffs is NULL\n";
            _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
          }
          v374 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v374, "pFilterCoeffs is NULL\n", -1);
        }
      }
      v66 += v27;
      v67 = ++v68;
    }
    while (v68 < (unint64_t)((uint64_t)(v392[1] - *v392) >> 2));
  }
  SmartFIR::Initialize(v64, v410);
  if (v410)
  {
    v411 = v410;
    operator delete(v410);
  }
  *((_OWORD *)v399 + 176) = 0u;
  *((_OWORD *)v399 + 175) = 0u;
  *((_OWORD *)v399 + 174) = 0u;
  v75 = *((unsigned int *)v399 + 595);
  LODWORD(v410) = 0;
  std::vector<float>::vector(v401, v75, &v410);
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 354, a3, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v76 = *((unsigned int *)v399 + 592);
  LODWORD(v410) = 0;
  std::vector<float>::vector(v401, v76, &v410);
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 357, 2uLL, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v77 = *((unsigned int *)v399 + 592);
  LODWORD(v410) = 0;
  std::vector<float>::vector(v401, v77, &v410);
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 360, 2uLL, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v78 = *((unsigned int *)v399 + 592);
  __x[0] = 0;
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)v401, v78, __x);
  *((_QWORD *)v399 + 363) = 0;
  *((_QWORD *)v399 + 364) = 0;
  *((_QWORD *)v399 + 365) = 0;
  v410 = (const float **)((char *)v399 + 2904);
  LOBYTE(v411) = 0;
  v79 = (char *)operator new(0x30uLL);
  v80 = 0;
  v390 = (char *)v399 + 2728;
  *((_QWORD *)v399 + 363) = v79;
  *((_QWORD *)v399 + 364) = v79;
  *((_QWORD *)v399 + 365) = v79 + 48;
  do
  {
    v81 = &v79[v80];
    *(_QWORD *)v81 = 0;
    *((_QWORD *)v81 + 1) = 0;
    *((_QWORD *)v81 + 2) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79[v80], *(const void **)v401, *(uint64_t *)&v401[8], (uint64_t)(*(_QWORD *)&v401[8] - *(_QWORD *)v401) >> 2);
    v80 += 24;
  }
  while (v80 != 48);
  *((_QWORD *)v399 + 364) = v79 + 48;
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v82 = *((unsigned int *)v399 + 595);
  *(_DWORD *)v401 = 0;
  std::vector<float>::vector((_QWORD *)v399 + 366, v82, v401);
  v83 = a3;
  v84 = *((unsigned int *)v399 + 595);
  LODWORD(v410) = 0;
  std::vector<float>::vector(v401, v84, &v410);
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 369, a3, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v85 = (*((_DWORD *)v399 + 595) * *((_DWORD *)v399 + 592));
  LODWORD(v410) = 0;
  std::vector<float>::vector(v401, v85, &v410);
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 372, 2uLL, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v86 = (*((_DWORD *)v399 + 594) * *((_DWORD *)v399 + 592));
  LODWORD(v410) = 0;
  std::vector<float>::vector(v401, v86, &v410);
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 375, 2uLL, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  std::vector<float>::vector(v401, (*((_DWORD *)v399 + 595) * *((_DWORD *)v399 + 594)));
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 378, 2uLL, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  std::vector<float>::vector(v401, *((unsigned int *)v399 + 595));
  std::vector<std::vector<float>>::vector((_QWORD *)v399 + 381, 2uLL, (uint64_t)v401);
  if (*(_QWORD *)v401)
  {
    *(_QWORD *)&v401[8] = *(_QWORD *)v401;
    operator delete(*(void **)v401);
  }
  v87 = v399;
  v88 = *((unsigned int *)v399 + 595)
      * (unint64_t)*((unsigned int *)v399 + 594)
      * ((uint64_t)(v392[1] - *v392) >> 2);
  *(_DWORD *)v401 = 0;
  std::vector<float>::vector((_QWORD *)v399 + 384, v88, v401);
  v89 = (*((_DWORD *)v87 + 593) * *((_DWORD *)v87 + 594));
  *(_DWORD *)v401 = 0;
  std::vector<float>::vector((_QWORD *)v399 + 387, v89, v401);
  v90 = (*((_DWORD *)v87 + 595) * *((_DWORD *)v87 + 593));
  *(_DWORD *)v401 = 0;
  std::vector<float>::vector((_QWORD *)v399 + 390, v90, v401);
  *((_QWORD *)v399 + 393) = a14;
  if ((*((_DWORD *)v87 + 595) & (*((_DWORD *)v87 + 595) - 1)) != 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 0);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 248;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "Max frames per slice isn't a power of 2";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    v377 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v377, "Max frames per slice isn't a power of 2", 0);
  }
  v91 = (_QWORD *)*((_QWORD *)v399 + 23);
  v92 = *((_QWORD *)v399 + 24) - (_QWORD)v91;
  if (!v92)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  if (((2 * *(_DWORD *)v399) | 1) != (uint64_t)(v91[1] - *v91) >> 2)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 5u);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 249;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "Order determined from beam compositions doesn't match expected";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    v378 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v378, "Order determined from beam compositions doesn't match expected", 5);
  }
  if (*(_QWORD *)(*((_QWORD *)v399 + 26) + 8) - **((_QWORD **)v399 + 26) != v92)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 5u);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 250;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "Number of beam FIRs and beam compositions doesn't match";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    v379 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v379, "Number of beam FIRs and beam compositions doesn't match", 5);
  }
  if (a13[1] - *a13 != *((_DWORD *)v399 + 593))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 5u);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 251;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "Driver masks vector size doesn't match number of output channels";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    v380 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v380, "Driver masks vector size doesn't match number of output channels", 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a10[1] - *a10) >> 3) != (uint64_t)(*((_QWORD *)v399 + 18) - *((_QWORD *)v399 + 17)) >> 2)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 5u);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 252;
      *(_WORD *)&v401[18] = 2080;
      *(_QWORD *)&v401[20] = &v410;
      *(_WORD *)&v401[28] = 2080;
      *(_QWORD *)&v401[30] = "Mismatch of speakers in rows between speakers in rows vec and modal FIRs vec";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
    }
    v381 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v381, "Mismatch of speakers in rows between speakers in rows vec and modal FIRs vec", 5);
  }
  v93 = v397;
  if (a3)
  {
    v94 = 0;
    do
    {
      *(_DWORD *)v401 = v94;
      v95 = v93;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v93, v94, (unsigned int *)v401)+ 8) = 0;
      v96 = v94 + 8;
      *(_DWORD *)v401 = v96;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v95, v96, (unsigned int *)v401)+ 8) = 0;
      v96 += 8;
      *(_DWORD *)v401 = v96;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v95, v96, (unsigned int *)v401)+ 8) = 1065353216;
      v96 += 8;
      *(_DWORD *)v401 = v96;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v95, v96, (unsigned int *)v401)+ 8) = 0;
      v94 = v96 - 23;
      v93 = v397;
    }
    while (v94 != a3);
  }
  *(_DWORD *)v401 = 32;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v93, 0x20u, (unsigned int *)v401)+ 8) = 1109393408;
  v97 = v399;
  if (*((_DWORD *)v399 + 592))
  {
    v98 = 0;
    v99 = (unint64_t *)*((_QWORD *)v399 + 300);
    do
    {
      v100 = ceilf((float)((float)(*((float *)v97 + 596) * 1000.0) / 1000.0) + 20.0);
      v101 = *((_QWORD *)v97 + 301);
      if ((unint64_t)v99 >= v101)
      {
        v105 = 0x8E38E38E38E38E39 * (((uint64_t)v99 - v386->i64[0]) >> 3);
        v106 = v105 + 1;
        if (v105 + 1 > 0x38E38E38E38E38ELL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v107 = 0x8E38E38E38E38E39 * ((uint64_t)(v101 - v386->i64[0]) >> 3);
        if (2 * v107 > v106)
          v106 = 2 * v107;
        if (v107 >= 0x1C71C71C71C71C7)
          v108 = 0x38E38E38E38E38ELL;
        else
          v108 = v106;
        *(_QWORD *)&v401[32] = (char *)v399 + 2408;
        if (v108)
        {
          if (v108 > 0x38E38E38E38E38ELL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v109 = (char *)operator new(72 * v108);
        }
        else
        {
          v109 = 0;
        }
        v110 = (unint64_t *)&v109[72 * v105];
        *(_QWORD *)v401 = v109;
        *(_QWORD *)&v401[8] = v110;
        *(_QWORD *)&v401[16] = v110;
        *(_QWORD *)&v401[24] = &v109[72 * v108];
        v111 = *((unsigned int *)v399 + 595);
        v112 = v100;
        v113 = (v111 + v112);
        *v110 = v113;
        v110[1] = 0;
        std::vector<float>::vector(v110 + 2, v113);
        v110[5] = 0;
        v110[6] = 0;
        v110[7] = v111;
        v110[8] = v112;
        CircularDelay::Reset((CircularDelay *)v110);
        v114 = *(_QWORD *)&v401[8];
        v99 = (unint64_t *)(*(_QWORD *)&v401[16] + 72);
        *(_QWORD *)&v401[16] += 72;
        v115 = *((_QWORD *)v399 + 300);
        v116 = *((_QWORD *)v399 + 299);
        if (v115 == v116)
        {
          v118 = vdupq_n_s64(v115);
          v83 = a3;
        }
        else
        {
          v83 = a3;
          do
          {
            *(_OWORD *)(v114 - 72) = *(_OWORD *)(v115 - 72);
            *(_QWORD *)(v114 - 48) = 0;
            *(_QWORD *)(v114 - 40) = 0;
            *(_QWORD *)(v114 - 56) = 0;
            *(_OWORD *)(v114 - 56) = *(_OWORD *)(v115 - 56);
            *(_QWORD *)(v114 - 40) = *(_QWORD *)(v115 - 40);
            *(_QWORD *)(v115 - 56) = 0;
            *(_QWORD *)(v115 - 48) = 0;
            *(_QWORD *)(v115 - 40) = 0;
            v117 = *(_OWORD *)(v115 - 16);
            *(_OWORD *)(v114 - 32) = *(_OWORD *)(v115 - 32);
            *(_OWORD *)(v114 - 16) = v117;
            v114 -= 72;
            v115 -= 72;
          }
          while (v115 != v116);
          v118 = *v386;
          v99 = *(unint64_t **)&v401[16];
        }
        v97 = v399;
        *((_QWORD *)v399 + 299) = v114;
        *((_QWORD *)v399 + 300) = v99;
        *(int64x2_t *)&v401[8] = v118;
        v119 = *((_QWORD *)v399 + 301);
        *((_QWORD *)v399 + 301) = *(_QWORD *)&v401[24];
        *(_QWORD *)&v401[24] = v119;
        *(_QWORD *)v401 = v118.i64[0];
        std::__split_buffer<CircularDelay>::~__split_buffer((uint64_t)v401);
      }
      else
      {
        v102 = *((unsigned int *)v97 + 595);
        v103 = v100;
        v104 = (v102 + v103);
        *v99 = v104;
        v99[1] = 0;
        std::vector<float>::vector(v99 + 2, v104);
        v99[5] = 0;
        v99[6] = 0;
        v99[7] = v102;
        v99[8] = v103;
        CircularDelay::Reset((CircularDelay *)v99);
        v99 += 9;
        *((_QWORD *)v97 + 300) = v99;
      }
      *((_QWORD *)v97 + 300) = v99;
      ++v98;
    }
    while (v98 < *((_DWORD *)v97 + 592));
  }
  v120 = a12;
  do
  {
    if (a3 >= 9)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v410, 4u);
        *(_DWORD *)v401 = 136315906;
        *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
        *(_WORD *)&v401[12] = 1024;
        *(_DWORD *)&v401[14] = 145;
        *(_WORD *)&v401[18] = 2080;
        *(_QWORD *)&v401[20] = &v410;
        *(_WORD *)&v401[28] = 2080;
        *(_QWORD *)&v401[30] = "Number of input channels is larger than supported";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", v401, 0x26u);
      }
      v376 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v376, "Number of input channels is larger than supported", 4);
    }
    v121 = (uint64_t *)*a8;
    if (a8[1] == *a8)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v122 = *((unsigned int *)v399 + 595);
    v124 = *v121;
    v123 = v121[1];
    v125 = (SmartFIR *)operator new();
    SmartFIR::SmartFIR(v125, (v123 - v124) >> 2, v122, v83);
    *(_QWORD *)__x = v125;
    v410 = 0;
    std::vector<float const*>::vector(v401, v83, &v410);
    if (a3)
    {
      v126 = 0;
      do
      {
        if (a8[1] == *a8)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        *(_QWORD *)(*(_QWORD *)v401 + v126) = *(_QWORD *)*a8;
        v126 += 8;
      }
      while (8 * v83 != v126);
    }
    SmartFIR::Initialize(v125, *(const float *const **)v401);
    if (*(_QWORD *)v401)
    {
      *(_QWORD *)&v401[8] = *(_QWORD *)v401;
      operator delete(*(void **)v401);
    }
    std::unique_ptr<SmartFIR>::reset[abi:ne180100](v49++, (uint64_t)v125);
  }
  while (v49 != (uint64_t *)((char *)v399 + 2680));
  v127 = a11;
  std::vector<double>::vector(&v410, ((uint64_t)(a11[1] - *a11) >> 3) * *((unsigned int *)v399 + 592));
  LODWORD(v128) = *((_DWORD *)v399 + 592);
  if ((_DWORD)v128)
  {
    v129 = 0;
    v130 = 0;
    v131 = *a11;
    v132 = a11[1] - *a11;
    do
    {
      if ((unint64_t)v132 >= 0x28)
      {
        v133 = 0;
        LODWORD(v134) = 0;
        v135 = v129;
        do
        {
          v136 = 0;
          v137 = v410;
          do
          {
            v138 = (v133 + v136);
            if (v132 >> 3 <= v138)
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            v137[(v135 + v136++)] = *(const float **)(v131 + 8 * v138);
          }
          while (v136 != 5);
          v134 = (v134 + 1);
          v135 += 5 * v128;
          v133 += 5;
        }
        while ((v132 >> 3) / 5uLL > v134);
      }
      ++v130;
      v129 += 5;
    }
    while (v130 != (_DWORD)v128);
    v139 = 0;
    v140 = v399;
    do
    {
      v141 = *((_QWORD *)v140 + 354);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v140 + 355) - v141) >> 3) <= v139)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v142 = *(_QWORD *)(v141 + 24 * v139);
      v143 = (_QWORD *)*((_QWORD *)v140 + 314);
      v144 = *((_QWORD *)v140 + 315);
      if ((unint64_t)v143 >= v144)
      {
        v146 = ((char *)v143 - *v385) >> 3;
        if ((unint64_t)(v146 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v147 = v144 - (_QWORD)*v385;
        v148 = v147 >> 2;
        if (v147 >> 2 <= (unint64_t)(v146 + 1))
          v148 = v146 + 1;
        if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v148;
        if (v149)
          v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v399 + 2520, v149);
        else
          v150 = 0;
        v151 = &v150[8 * v146];
        *(_QWORD *)v151 = v142;
        v145 = v151 + 8;
        v152 = (char *)*((_QWORD *)v399 + 314);
        v153 = (char *)*((_QWORD *)v399 + 313);
        if (v152 != v153)
        {
          do
          {
            v154 = *((_QWORD *)v152 - 1);
            v152 -= 8;
            *((_QWORD *)v151 - 1) = v154;
            v151 -= 8;
          }
          while (v152 != v153);
          v152 = *v385;
        }
        *((_QWORD *)v399 + 313) = v151;
        *((_QWORD *)v399 + 314) = v145;
        *((_QWORD *)v399 + 315) = &v150[8 * v149];
        if (v152)
          operator delete(v152);
      }
      else
      {
        *v143 = v142;
        v145 = v143 + 1;
      }
      *((_QWORD *)v399 + 314) = v145;
      v155 = *((_QWORD *)v399 + 369);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v399 + 370) - v155) >> 3) <= v139)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v156 = *(_QWORD *)(v155 + 24 * v139);
      v157 = (_QWORD *)*((_QWORD *)v399 + 317);
      v158 = *((_QWORD *)v399 + 318);
      if ((unint64_t)v157 >= v158)
      {
        v160 = ((char *)v157 - *v384) >> 3;
        if ((unint64_t)(v160 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v161 = v158 - (_QWORD)*v384;
        v162 = v161 >> 2;
        if (v161 >> 2 <= (unint64_t)(v160 + 1))
          v162 = v160 + 1;
        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
          v163 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v163 = v162;
        if (v163)
          v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v399 + 2544, v163);
        else
          v164 = 0;
        v165 = &v164[8 * v160];
        *(_QWORD *)v165 = v156;
        v159 = v165 + 8;
        v166 = (char *)*((_QWORD *)v399 + 317);
        v167 = (char *)*((_QWORD *)v399 + 316);
        if (v166 != v167)
        {
          do
          {
            v168 = *((_QWORD *)v166 - 1);
            v166 -= 8;
            *((_QWORD *)v165 - 1) = v168;
            v165 -= 8;
          }
          while (v166 != v167);
          v166 = *v384;
        }
        *((_QWORD *)v399 + 316) = v165;
        *((_QWORD *)v399 + 317) = v159;
        *((_QWORD *)v399 + 318) = &v164[8 * v163];
        if (v166)
          operator delete(v166);
      }
      else
      {
        *v157 = v156;
        v159 = v157 + 1;
      }
      v140 = v399;
      *((_QWORD *)v399 + 317) = v159;
      ++v139;
      v128 = *((unsigned int *)v399 + 592);
    }
    while (v139 < v128);
    v127 = a11;
    v120 = a12;
  }
  Setup = vDSP_biquadm_CreateSetup((const double *)v410, ((uint64_t)(v127[1] - *v127) >> 3) / 5uLL, v128);
  v170 = *((_QWORD *)v399 + 311);
  *((_QWORD *)v399 + 311) = Setup;
  if (v170)
    (*((void (**)(void))v399 + 312))();
  if (v120[1] == *v120)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  std::vector<double>::vector(__x, ((uint64_t)(*(_QWORD *)(*v120 + 8) - *(_QWORD *)*v120) >> 3) * *((unsigned int *)v399 + 593));
  v171 = *((unsigned int *)v399 + 593);
  if (!(_DWORD)v171)
  {
    v171 = 0;
    v188 = (_QWORD *)((char *)v399 + 2600);
    v190 = *((_QWORD *)v399 + 324);
    v191 = (*((_QWORD *)v399 + 325) - v190) >> 3;
LABEL_197:
    if (v191 <= v171)
      goto LABEL_202;
    v207 = (_QWORD *)(v190 + 8 * v171);
    goto LABEL_201;
  }
  v172 = (_QWORD *)*v120;
  v173 = v120[1];
  v174 = v173 - *v120;
  if (v173 == *v120)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v175 = 0;
  v176 = 0;
  v177 = 0xAAAAAAAAAAAAAAABLL * (v174 >> 3);
  v178 = v172[1] - *v172;
  do
  {
    if ((unint64_t)v178 >= 0x28)
    {
      v179 = 0;
      LODWORD(v180) = 0;
      v181 = &v172[3 * v176];
      v182 = v175;
      do
      {
        if (v177 <= v176)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v183 = 0;
        v184 = *(const double **)__x;
        v185 = *v181;
        v186 = (v181[1] - *v181) >> 3;
        do
        {
          v187 = (v179 + v183);
          if (v186 <= v187)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v184[(v182 + v183++)] = *(const double *)(v185 + 8 * v187);
        }
        while (v183 != 5);
        v180 = (v180 + 1);
        v182 += 5 * v171;
        v179 += 5;
      }
      while ((v178 >> 3) / 5uLL > v180);
    }
    ++v176;
    v175 += 5;
  }
  while (v176 != v171);
  v188 = (_QWORD *)((char *)v399 + 2600);
  v189 = (_QWORD *)*((_QWORD *)v399 + 325);
  v190 = *((_QWORD *)v399 + 324);
  v191 = ((uint64_t)v189 - v190) >> 3;
  if (v171 <= v191)
    goto LABEL_197;
  v192 = *((_QWORD *)v399 + 326);
  if (v171 - v191 <= (v192 - (uint64_t)v189) >> 3)
  {
    v207 = &v189[v171 - v191];
    v208 = 8 * v171 - 8 * v191;
    do
    {
      *v189++ = 0;
      v208 -= 8;
    }
    while (v208);
LABEL_201:
    *v188 = v207;
    goto LABEL_202;
  }
  v193 = v192 - v190;
  v194 = (v192 - v190) >> 2;
  if (v194 <= v171)
    v194 = v171;
  if (v193 >= 0x7FFFFFFFFFFFFFF8)
    v195 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v195 = v194;
  v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v399 + 2608, v195);
  v198 = &v196[8 * v191];
  v199 = &v196[8 * v171];
  v200 = v198;
  v201 = 8 * v171 - 8 * v191;
  do
  {
    *(_QWORD *)v200 = 0;
    v200 += 8;
    v201 -= 8;
  }
  while (v201);
  v202 = &v196[8 * v197];
  v203 = (char *)*((_QWORD *)v399 + 325);
  v204 = (char *)*((_QWORD *)v399 + 324);
  if (v203 == v204)
  {
    v206 = v399;
  }
  else
  {
    do
    {
      v205 = *((_QWORD *)v203 - 1);
      v203 -= 8;
      *((_QWORD *)v198 - 1) = v205;
      v198 -= 8;
    }
    while (v203 != v204);
    v206 = v399;
    v203 = (char *)*((_QWORD *)v399 + 324);
  }
  *((_QWORD *)v206 + 324) = v198;
  *((_QWORD *)v206 + 325) = v199;
  *((_QWORD *)v206 + 326) = v202;
  if (v203)
    operator delete(v203);
LABEL_202:
  v209 = v399;
  v210 = *((_DWORD *)v399 + 593);
  if (v210)
  {
    for (j = 0; j < v210; ++j)
    {
      v212 = *((_DWORD *)v209 + 595) * j;
      v213 = *((_QWORD *)v209 + 390);
      if (v212 >= (*((_QWORD *)v209 + 391) - v213) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v214 = v213 + 4 * v212;
      v215 = (_QWORD *)*((_QWORD *)v209 + 322);
      v216 = *((_QWORD *)v209 + 323);
      if ((unint64_t)v215 >= v216)
      {
        v218 = ((char *)v215 - *v383) >> 3;
        if ((unint64_t)(v218 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v219 = v216 - (_QWORD)*v383;
        v220 = v219 >> 2;
        if (v219 >> 2 <= (unint64_t)(v218 + 1))
          v220 = v218 + 1;
        if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
          v221 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v221 = v220;
        if (v221)
          v222 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)v399 + 2584, v221);
        else
          v222 = 0;
        v223 = &v222[8 * v218];
        *(_QWORD *)v223 = v214;
        v217 = v223 + 8;
        v224 = (char *)*((_QWORD *)v399 + 322);
        v225 = (char *)*((_QWORD *)v399 + 321);
        if (v224 != v225)
        {
          do
          {
            v226 = *((_QWORD *)v224 - 1);
            v224 -= 8;
            *((_QWORD *)v223 - 1) = v226;
            v223 -= 8;
          }
          while (v224 != v225);
          v224 = *v383;
        }
        *((_QWORD *)v399 + 321) = v223;
        *((_QWORD *)v399 + 322) = v217;
        *((_QWORD *)v399 + 323) = &v222[8 * v221];
        if (v224)
          operator delete(v224);
      }
      else
      {
        *v215 = v214;
        v217 = v215 + 1;
      }
      v209 = v399;
      *((_QWORD *)v399 + 322) = v217;
      v210 = *((_DWORD *)v399 + 593);
    }
  }
  if (v120[1] == *v120)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  v227 = vDSP_biquadm_CreateSetup(*(const double **)__x, ((uint64_t)(*(_QWORD *)(*v120 + 8) - *(_QWORD *)*v120) >> 3) / 5uLL, v210);
  v228 = *((_QWORD *)v399 + 319);
  *((_QWORD *)v399 + 319) = v227;
  if (v228)
    (*((void (**)(void))v399 + 320))();
  v229 = *((unsigned int *)v399 + 592);
  v230 = *((_QWORD *)v399 + 302);
  if (v229 > (*((_QWORD *)v399 + 304) - v230) >> 5)
  {
    v231 = *((_QWORD *)v399 + 303);
    *(_QWORD *)&v401[32] = (char *)v399 + 2432;
    *(_QWORD *)v401 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v229);
    *(_QWORD *)&v401[8] = *(_QWORD *)v401 + v231 - v230;
    *(_QWORD *)&v401[16] = *(_QWORD *)&v401[8];
    *(_QWORD *)&v401[24] = *(_QWORD *)v401 + 32 * v232;
    std::vector<CDSPSplitComplex>::__swap_out_circular_buffer(v387, v401);
    std::__split_buffer<CDSPSplitComplex>::~__split_buffer((uint64_t)v401);
    LODWORD(v229) = *((_DWORD *)v399 + 592);
  }
  v233 = v399;
  if ((_DWORD)v229)
  {
    v234 = 0;
    v235 = &std::piecewise_construct;
    do
    {
      v236 = *((_QWORD *)v233 + 303);
      v237 = *((_QWORD *)v233 + 304);
      if (v236 >= v237)
      {
        v239 = (uint64_t)(v236 - *v387) >> 5;
        if ((unint64_t)(v239 + 1) >> 59)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v240 = v237 - *v387;
        v241 = v240 >> 4;
        if (v240 >> 4 <= (unint64_t)(v239 + 1))
          v241 = v239 + 1;
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFE0)
          v242 = 0x7FFFFFFFFFFFFFFLL;
        else
          v242 = v241;
        *(_QWORD *)&v401[32] = (char *)v399 + 2432;
        if (v242)
          v242 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v242);
        else
          v243 = 0;
        *(_QWORD *)v401 = v242;
        *(_QWORD *)&v401[8] = v242 + 32 * v239;
        *(_QWORD *)&v401[16] = *(_QWORD *)&v401[8];
        *(_QWORD *)&v401[24] = v242 + 32 * v243;
        CDSPSplitComplex::CDSPSplitComplex(*(CDSPSplitComplex **)&v401[8], *((unsigned int *)v399 + 595));
        *(_QWORD *)&v401[16] += 32;
        std::vector<CDSPSplitComplex>::__swap_out_circular_buffer(v387, v401);
        v233 = v399;
        v238 = *((_QWORD *)v399 + 303);
        std::__split_buffer<CDSPSplitComplex>::~__split_buffer((uint64_t)v401);
      }
      else
      {
        CDSPSplitComplex::CDSPSplitComplex(*((CDSPSplitComplex **)v233 + 303), *((unsigned int *)v233 + 595));
        v238 = v236 + 32;
        *((_QWORD *)v233 + 303) = v236 + 32;
      }
      v244 = 0;
      *((_QWORD *)v233 + 303) = v238;
      v245 = 1;
      v246 = (char *)v399 + 2680;
      do
      {
        v247 = v245;
        v248 = *((_QWORD *)v399 + 302);
        if (v234 >= (*((_QWORD *)v399 + 303) - v248) >> 5)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v249 = (uint64_t)v235;
        v250 = v248 + 32 * v234;
        v251 = &v246[24 * v244];
        v254 = (_QWORD *)*((_QWORD *)v251 + 1);
        v252 = (void **)(v251 + 8);
        v253 = v254;
        v255 = (unint64_t)v252[1];
        if ((unint64_t)v254 >= v255)
        {
          v257 = (void **)&v246[24 * v244];
          v258 = ((char *)v253 - (_BYTE *)*v257) >> 3;
          if ((unint64_t)(v258 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v259 = v255 - (_QWORD)*v257;
          v260 = v259 >> 2;
          if (v259 >> 2 <= (unint64_t)(v258 + 1))
            v260 = v258 + 1;
          if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
            v261 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v261 = v260;
          if (v261)
            v261 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v261);
          else
            v262 = 0;
          v263 = (_QWORD *)(v261 + 8 * v258);
          *v263 = v250;
          v256 = v263 + 1;
          v264 = (char *)*v252;
          v265 = (char *)*v257;
          if (*v252 != *v257)
          {
            do
            {
              v266 = *((_QWORD *)v264 - 1);
              v264 -= 8;
              *--v263 = v266;
            }
            while (v264 != v265);
            v264 = (char *)*v257;
          }
          *v257 = v263;
          *v252 = v256;
          v252[1] = (void *)(v261 + 8 * v262);
          if (v264)
            operator delete(v264);
        }
        else
        {
          *v253 = v250;
          v256 = v253 + 1;
        }
        *v252 = v256;
        v267 = *((_QWORD *)v399 + 372);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v399 + 373) - v267) >> 3) <= v244)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v268 = *(_QWORD *)(v267 + 24 * v244) + 4 * (*((_DWORD *)v399 + 595) * v234);
        v269 = &v390[24 * v244];
        v272 = (uint64_t *)*((_QWORD *)v269 + 1);
        v270 = (void **)(v269 + 8);
        v271 = v272;
        v273 = (unint64_t)v270[1];
        if ((unint64_t)v272 >= v273)
        {
          v275 = (void **)&v390[24 * v244];
          v276 = ((char *)v271 - (_BYTE *)*v275) >> 3;
          if ((unint64_t)(v276 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v277 = v273 - (_QWORD)*v275;
          v278 = v277 >> 2;
          if (v277 >> 2 <= (unint64_t)(v276 + 1))
            v278 = v276 + 1;
          if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF8)
            v279 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v279 = v278;
          if (v279)
            v280 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)(v270 + 1), v279);
          else
            v280 = 0;
          v281 = (uint64_t *)&v280[8 * v276];
          *v281 = v268;
          v274 = v281 + 1;
          v282 = (char *)*v270;
          v283 = (char *)*v275;
          if (*v270 != *v275)
          {
            do
            {
              v284 = *((_QWORD *)v282 - 1);
              v282 -= 8;
              *--v281 = v284;
            }
            while (v282 != v283);
            v282 = (char *)*v275;
          }
          *v275 = v281;
          *v270 = v274;
          v270[1] = &v280[8 * v279];
          if (v282)
            operator delete(v282);
        }
        else
        {
          *v271 = v268;
          v274 = v271 + 1;
        }
        *v270 = v274;
        v400 = v234 + 16;
        *(_QWORD *)v401 = &v400;
        v235 = (void *)v249;
        v285 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v397, &v400, v249, (unsigned int **)v401);
        v286 = *((_QWORD *)v399 + 357);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v399 + 358) - v286) >> 3) <= v244)
          goto LABEL_385;
        v287 = v285;
        v288 = (_QWORD *)(v286 + 24 * v244);
        if (v234 >= (uint64_t)(v288[1] - *v288) >> 2)
          goto LABEL_375;
        *(_DWORD *)(*v288 + 4 * v234) = *((_DWORD *)v287 + 8);
        v400 = v234;
        *(_QWORD *)v401 = &v400;
        v289 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v397, &v400, v249, (unsigned int **)v401);
        v290 = *((_QWORD *)v399 + 360);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v399 + 361) - v290) >> 3) <= v244)
LABEL_385:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v291 = v289;
        v292 = (_QWORD *)(v290 + 24 * v244);
        if (v234 >= (uint64_t)(v292[1] - *v292) >> 2)
LABEL_375:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        *(float *)(*v292 + 4 * v234) = (float)(*((float *)v291 + 8) * 3.1416) / 180.0;
        v400 = v234 + 8;
        *(_QWORD *)v401 = &v400;
        v293 = *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v397, &v400, v249, (unsigned int **)v401)+ 8);
        if (-1 - 1431655765 * ((*((_QWORD *)v399 + 24) - *((_QWORD *)v399 + 23)) >> 3) < v293)
          v293 = -1 - 1431655765 * ((*((_QWORD *)v399 + 24) - *((_QWORD *)v399 + 23)) >> 3);
        v294 = *((_QWORD *)v399 + 363);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v399 + 364) - v294) >> 3) <= v244)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v295 = (uint64_t *)(v294 + 24 * v244);
        v296 = *v295;
        if (v234 >= (v295[1] - *v295) >> 2)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v245 = 0;
        *(_DWORD *)(v296 + 4 * v234) = v293;
        v244 = 1;
        v246 = (char *)v399 + 2680;
      }
      while ((v247 & 1) != 0);
      ++v234;
      v233 = v399;
    }
    while (v234 < *((unsigned int *)v399 + 592));
  }
  v297 = *((unsigned int *)v233 + 594);
  v298 = (CDSPSplitComplex *)*((_QWORD *)v233 + 306);
  v299 = *((_QWORD *)v233 + 305);
  v300 = ((uint64_t)v298 - v299) >> 5;
  if (v297 <= v300)
  {
    if (v297 < v300)
    {
      v308 = (CDSPSplitComplex *)(v299 + 32 * v297);
      while (v298 != v308)
      {
        v298 = (CDSPSplitComplex *)((char *)v298 - 32);
        CDSPSplitComplex::~CDSPSplitComplex(v298);
      }
      *((_QWORD *)v399 + 306) = v308;
    }
  }
  else
  {
    v301 = v297 - v300;
    v302 = *((_QWORD *)v233 + 307);
    if (v297 - v300 <= (v302 - (uint64_t)v298) >> 5)
    {
      bzero(*((void **)v233 + 306), 32 * v301);
      *((_QWORD *)v233 + 306) = (char *)v298 + 32 * v301;
    }
    else
    {
      *(_QWORD *)&v401[32] = (char *)v233 + 2456;
      v303 = v302 - v299;
      if (v303 >> 4 > v297)
        v297 = v303 >> 4;
      if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFE0)
        v304 = 0x7FFFFFFFFFFFFFFLL;
      else
        v304 = v297;
      v305 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v304);
      v306 = &v305[32 * v300];
      *(_QWORD *)v401 = v305;
      *(_QWORD *)&v401[8] = v306;
      *(_QWORD *)&v401[24] = &v305[32 * v307];
      bzero(v306, 32 * v301);
      *(_QWORD *)&v401[16] = &v306[32 * v301];
      std::vector<CDSPSplitComplex>::__swap_out_circular_buffer((uint64_t *)v399 + 305, v401);
      std::__split_buffer<CDSPSplitComplex>::~__split_buffer((uint64_t)v401);
    }
  }
  v309 = v399;
  v310 = ((uint64_t)(*((_QWORD *)v399 + 18) - *((_QWORD *)v399 + 17)) >> 2) * *((unsigned int *)v399 + 594);
  v311 = *((_QWORD *)v399 + 349);
  v312 = *((_QWORD *)v399 + 348);
  v313 = (v311 - v312) >> 3;
  if (v310 <= v313)
  {
    if (v310 >= v313)
      goto LABEL_317;
    v326 = v312 + 8 * v310;
    goto LABEL_316;
  }
  v314 = v310 - v313;
  v315 = *((_QWORD *)v399 + 350);
  if (v310 - v313 <= (v315 - v311) >> 3)
  {
    bzero(*((void **)v399 + 349), 8 * v314);
    v326 = v311 + 8 * v314;
LABEL_316:
    *((_QWORD *)v399 + 349) = v326;
    goto LABEL_317;
  }
  if (v310 >> 61)
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  v316 = v315 - v312;
  if (v316 >> 2 > v310)
    v310 = v316 >> 2;
  if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
    v317 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v317 = v310;
  v318 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v317);
  v319 = &v318[8 * v313];
  v321 = &v318[8 * v320];
  bzero(v319, 8 * v314);
  v322 = &v319[8 * v314];
  v323 = (char *)*((_QWORD *)v399 + 349);
  v324 = (char *)*((_QWORD *)v399 + 348);
  if (v323 != v324)
  {
    do
    {
      v325 = *((_QWORD *)v323 - 1);
      v323 -= 8;
      *((_QWORD *)v319 - 1) = v325;
      v319 -= 8;
    }
    while (v323 != v324);
    v323 = (char *)*((_QWORD *)v399 + 348);
  }
  v309 = v399;
  *((_QWORD *)v399 + 348) = v319;
  *((_QWORD *)v399 + 349) = v322;
  *((_QWORD *)v399 + 350) = v321;
  if (v323)
    operator delete(v323);
LABEL_317:
  std::vector<void const*>::resize((uint64_t)v399 + 2808, ((uint64_t)(*((_QWORD *)v309 + 18) - *((_QWORD *)v309 + 17)) >> 2) * *((unsigned int *)v309 + 594));
  if (*((_DWORD *)v399 + 594))
  {
    v327 = 0;
    do
    {
      v328 = *((_QWORD *)v399 + 305);
      if (v327 >= (*((_QWORD *)v399 + 306) - v328) >> 5)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      CDSPSplitComplex::resize((CDSPSplitComplex *)(v328 + 32 * v327), *((unsigned int *)v399 + 595));
      if (*((_QWORD *)v399 + 18) == *((_QWORD *)v399 + 17))
      {
        v331 = *((_DWORD *)v399 + 594);
      }
      else
      {
        v329 = 1;
        do
        {
          v330 = *((_QWORD *)v399 + 305);
          if (v327 >= (*((_QWORD *)v399 + 306) - v330) >> 5)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v331 = *((_DWORD *)v399 + 594);
          v332 = v327 + v331 * (v329 - 1);
          v333 = *((_QWORD *)v399 + 348);
          if (v332 >= (*((_QWORD *)v399 + 349) - v333) >> 3)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          *(_QWORD *)(v333 + 8 * v332) = v330 + 32 * v327;
          v334 = *((_QWORD *)v399 + 351);
          if (v332 >= (*((_QWORD *)v399 + 352) - v334) >> 3)
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          *(_QWORD *)(v334 + 8 * v332) = *((_QWORD *)v399 + 384) + 4 * (*((_DWORD *)v399 + 595) * v332);
          v335 = v329++;
        }
        while (v335 < (uint64_t)(*((_QWORD *)v399 + 18) - *((_QWORD *)v399 + 17)) >> 2);
      }
      ++v327;
    }
    while (v327 < v331);
  }
  CircArrayKernel::CalcBeamMixingMat(v399);
  CircArrayKernel::CalcBeamMixingMat(v399);
  v336 = (void *)*((_QWORD *)v399 + 387);
  v337 = *((_QWORD *)v399 + 388) - (_QWORD)v336;
  if (v337 >= 1)
    memset_pattern16(v336, &unk_1B6627B80, 4 * (((unint64_t)v337 >> 2) - ((unint64_t)v337 > 3)) + 4);
  v338 = *((_QWORD *)v399 + 17);
  if (*((_QWORD *)v399 + 18) != v338)
  {
    v339 = 0;
    v340 = 0;
    v341 = 0;
    do
    {
      v342 = *(unsigned int *)(v338 + 4 * v339);
      std::vector<unsigned int>::vector((std::vector<unsigned int> *)v401, v342);
      v343 = *(_DWORD **)v401;
      v391 = v341;
      if (*(_QWORD *)&v401[8] != *(_QWORD *)v401)
      {
        v344 = (uint64_t)(*(_QWORD *)&v401[8] - *(_QWORD *)v401) >> 2;
        if (v344 <= 1)
          v344 = 1;
        v345 = *(_DWORD **)v401;
        v346 = v340;
        do
        {
          v340 = v346 + 1;
          *v345++ = v346++;
          --v344;
        }
        while (v344);
      }
      v393 = v340;
      v394 = *(_DWORD *)v399;
      if (*(_DWORD *)v399)
      {
        v396 = 1;
        do
        {
          if ((_DWORD)v342)
          {
            v347 = 0;
            v348 = *((_DWORD *)v399 + 594);
            v349 = *((_QWORD *)v399 + 387);
            v350 = (*((_QWORD *)v399 + 388) - v349) >> 2;
            do
            {
              v351 = 2 * v396 + v348 * v343[v347];
              v352 = (v351 - 1);
              if (v350 <= v352
                || (v353 = (float)((float)((float)((float)((float)v347 + (float)v347)
                                                 * 3.1416)
                                         / (float)v342)
                                 + *(float *)(*v398 + 4 * v339))
                         * (float)(v396 & 3),
                    *(float *)(v349 + 4 * v352) = cosf(v353),
                    v350 <= v351))
              {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              *(float *)(v349 + 4 * v351) = sinf(v353);
              ++v347;
            }
            while (v342 != v347);
          }
          ++v396;
        }
        while (v396 <= v394);
      }
      if (v343)
      {
        *(_QWORD *)&v401[8] = v343;
        operator delete(v343);
      }
      v339 = (v391 + 1);
      v338 = *((_QWORD *)v399 + 17);
      v341 = v391 + 1;
      v340 = v393;
    }
    while (v339 < (*((_QWORD *)v399 + 18) - v338) >> 2);
  }
  v354 = *((_DWORD *)v399 + 593);
  if (v354)
  {
    v355 = 0;
    v356 = *a13;
    v357 = a13[1] - *a13;
    do
    {
      if (v357 <= v355)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v358 = v355;
      if (*(_BYTE *)(v356 + v355))
      {
        ++v355;
      }
      else
      {
        v359 = *((_DWORD *)v399 + 594);
        v360 = (void *)(*((_QWORD *)v399 + 387) + 4 * v359 * v355++);
        v361 = 4 * v359 * (v358 + 1) - 4 * v359 * v358;
        if (v361 >= 1)
          bzero(v360, 4 * (((unint64_t)v361 >> 2) - ((unint64_t)v361 > 3)) + 4);
      }
    }
    while (v355 != v354);
  }
  v362 = (id *)*((_QWORD *)v399 + 393);
  if (v362)
  {
    v363 = *v362;
    if (!v363)
      goto LABEL_364;
  }
  else
  {
    v363 = (id)MEMORY[0x1E0C81028];
    v364 = MEMORY[0x1E0C81028];
  }
  v365 = v363;
  if (os_log_type_enabled(v365, OS_LOG_TYPE_DEBUG))
  {
    v366 = *((_DWORD *)v399 + 592);
    v367 = *((_DWORD *)v399 + 593);
    v368 = *(_DWORD *)v399;
    v369 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v399 + 24) - *((_QWORD *)v399 + 23)) >> 3);
    v370 = *((_DWORD *)v399 + 595);
    *(_DWORD *)v401 = 136316930;
    *(_QWORD *)&v401[4] = "CircArrayKernel.mm";
    *(_WORD *)&v401[12] = 1024;
    *(_DWORD *)&v401[14] = 384;
    *(_WORD *)&v401[18] = 1024;
    *(_DWORD *)&v401[20] = v366;
    *(_WORD *)&v401[24] = 1024;
    *(_DWORD *)&v401[26] = v367;
    *(_WORD *)&v401[30] = 2048;
    *(double *)&v401[32] = a9;
    v402 = 1024;
    v403 = v368;
    v404 = 2048;
    v405 = v369;
    v406 = 1024;
    v407 = v370;
    _os_log_impl(&dword_1B5ED0000, v365, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created CircArray Kernel with %u ins, %u outs, SR: %0.0f, %u order algorithm, %lu beam patterns %u frameSize\n", v401, 0x3Eu);
  }

LABEL_364:
  CircArrayKernel::Reset(v399);
  if (*(_QWORD *)__x)
  {
    v409 = *(const double **)__x;
    operator delete(*(void **)__x);
  }
  if (v410)
  {
    v411 = v410;
    operator delete(v410);
  }
  return v399;
}

void sub_1B6263810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13, _QWORD **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,void **a28,void **a29,uint64_t a30,uint64_t a31,void **a32,void ***a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38,void **a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51)
{
  uint64_t v51;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t i;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;

  v53 = *(void **)(v51 - 192);
  if (v53)
  {
    *(_QWORD *)(v51 - 184) = v53;
    operator delete(v53);
  }
  v54 = *(void **)(v51 - 168);
  if (v54)
  {
    *(_QWORD *)(v51 - 160) = v54;
    operator delete(v54);
  }
  v55 = *a19;
  if (*a19)
  {
    *(_QWORD *)(a51 + 3128) = v55;
    operator delete(v55);
  }
  v56 = *a28;
  if (*a28)
  {
    *(_QWORD *)(a51 + 3104) = v56;
    operator delete(v56);
  }
  v57 = *a15;
  if (*a15)
  {
    *(_QWORD *)(a51 + 3080) = v57;
    operator delete(v57);
  }
  *(_QWORD *)(v51 - 192) = a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  v58 = *a20;
  if (*a20)
  {
    *(_QWORD *)(a51 + 2936) = v58;
    operator delete(v58);
  }
  *(_QWORD *)(v51 - 192) = a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  *(_QWORD *)(v51 - 192) = a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  v59 = *a32;
  if (*a32)
  {
    *(_QWORD *)(a51 + 2816) = v59;
    operator delete(v59);
  }
  v60 = *a29;
  if (*a29)
  {
    *(_QWORD *)(a51 + 2792) = v60;
    operator delete(v60);
  }
  std::unique_ptr<SmartFIR>::reset[abi:ne180100](a27, 0);
  v61 = 0;
  while (1)
  {
    v62 = *(void **)(a51 + v61 + 2752);
    if (v62)
    {
      *(_QWORD *)(a51 + v61 + 2760) = v62;
      operator delete(v62);
    }
    v61 -= 24;
    if (v61 == -48)
    {
      v63 = 0;
      while (1)
      {
        v64 = *(void **)(a51 + v63 + 2704);
        if (v64)
        {
          *(_QWORD *)(a51 + v63 + 2712) = v64;
          operator delete(v64);
        }
        v63 -= 24;
        if (v63 == -48)
        {
          for (i = 0; i != -16; i -= 8)
            std::unique_ptr<SmartFIR>::reset[abi:ne180100]((uint64_t *)(a51 + 2672 + i), 0);
          *(_QWORD *)(v51 - 192) = a43;
          std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
          *(_QWORD *)(v51 - 192) = a44;
          std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
          v66 = *(void **)(a51 + 2592);
          if (v66)
          {
            *(_QWORD *)(a51 + 2600) = v66;
            operator delete(v66);
          }
          v67 = *a38;
          if (*a38)
          {
            *(_QWORD *)(a51 + 2576) = v67;
            operator delete(v67);
          }
          v68 = *(_QWORD *)(a51 + 2552);
          *(_QWORD *)(a51 + 2552) = 0;
          if (v68)
            (*(void (**)(void))(a51 + 2560))();
          v69 = *a39;
          if (*a39)
          {
            *(_QWORD *)(a51 + 2536) = v69;
            operator delete(v69);
          }
          v70 = *a40;
          if (*a40)
          {
            *(_QWORD *)(a51 + 2512) = v70;
            operator delete(v70);
          }
          v71 = *(_QWORD *)(a51 + 2488);
          *(_QWORD *)(a51 + 2488) = 0;
          if (v71)
            (*(void (**)(void))(a51 + 2496))();
          v72 = *a10;
          if (*a10)
          {
            *(_QWORD *)(a51 + 2472) = v72;
            operator delete(v72);
          }
          *(_QWORD *)(v51 - 192) = a30;
          std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
          *(_QWORD *)(v51 - 192) = a42;
          std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
          *(_QWORD *)(v51 - 192) = a41;
          std::vector<CircularDelay>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
          *(_QWORD *)(a51 + 256) = &off_1E69D6718;
          ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(a11);
          std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](a33, 0);
          *(_QWORD *)(v51 - 192) = a12;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
          v73 = *a50;
          if (*a50)
          {
            *(_QWORD *)(a51 + 168) = v73;
            operator delete(v73);
          }
          v74 = *a13;
          if (*a13)
          {
            *(_QWORD *)(a51 + 144) = v74;
            operator delete(v74);
          }
          std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy(a49, *a14);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t *std::vector<FreqDomainConvolver>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xCF3CF3CF3CF3CF3DLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x186186186186187)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 168 * v4;
    std::vector<FreqDomainConvolver>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<FreqDomainConvolver>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_1B6264058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FreqDomainConvolver>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void CDSPSplitComplex::CDSPSplitComplex(CDSPSplitComplex *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  CDSPSplitComplex::resize(this, a2);
}

void sub_1B626413C(_Unwind_Exception *a1)
{
  CDSPSplitComplex *v1;

  CDSPSplitComplex::~CDSPSplitComplex(v1);
  _Unwind_Resume(a1);
}

void CircArrayKernel::CalcBeamMixingMat(CircArrayKernel *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  vDSP_Length v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  float *realp;
  float *imagp;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  DSPComplex *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  vDSP_Stride v41;
  unint64_t v42;
  _QWORD v43[3];
  DSPComplex *v44;
  float v45;
  DSPSplitComplex __B;
  DSPSplitComplex __Z;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](this);
  __Z.realp = (float *)((char *)v43 - ((v2 + 15) & 0x7FFFFFFF0));
  __Z.imagp = &__Z.realp[v3];
  MEMORY[0x1E0C80A78](v4);
  __B.realp = (float *)((char *)v43 - v6);
  __B.imagp = (float *)((char *)v43 + 4 * v5 - v6);
  MEMORY[0x1E0C80A78](v7);
  if (*(_DWORD *)(v10 + 2368))
  {
    v11 = 0;
    v43[0] = (char *)this + 2880;
    v43[1] = (char *)this + 3000;
    v43[2] = (char *)this + 184;
    v12 = v8;
    v44 = (DSPComplex *)((char *)v43 - v9);
    while (1)
    {
      v13 = *((_QWORD *)this + 363);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 364) - v13) >> 3) <= v12)
LABEL_26:
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v15 = (uint64_t *)(v13 + 24 * v12);
      v14 = *v15;
      if (v11 >= (v15[1] - *v15) >> 2)
        goto LABEL_27;
      v16 = *(unsigned int *)(v14 + 4 * v11);
      v17 = *((_QWORD *)this + 23);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 24) - v17) >> 3) <= v16)
        break;
      v18 = (_QWORD *)(v17 + 24 * v16);
      if (v18[1] - *v18 <= 4uLL)
        goto LABEL_25;
      vDSP_ctoz((const DSPComplex *)(*v18 + 4), 2, &__Z, 1, *(unsigned int *)this);
      v19 = *(unsigned int *)this;
      if ((_DWORD)v19)
      {
        v20 = *((_QWORD *)this + 360);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 361) - v20) >> 3) <= v12)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v21 = (uint64_t *)(v20 + 24 * v12);
        v22 = *v21;
        if (v11 >= (v21[1] - *v21) >> 2)
          goto LABEL_25;
        v23 = 0;
        realp = __B.realp;
        imagp = __B.imagp;
        if ((v19 + 1) > 2)
          v26 = (v19 + 1);
        else
          v26 = 2;
        v27 = v26 - 1;
        do
        {
          v28 = (float)(v23 + 1);
          realp[v23] = cosf(*(float *)(v22 + 4 * v11) * v28);
          imagp[v23++] = sinf(*(float *)(v22 + 4 * v11) * v28);
        }
        while (v27 != v23);
      }
      vDSP_zvmul(&__Z, 1, &__B, 1, &__Z, 1, v19, 1);
      v29 = *((_QWORD *)this + 363);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 364) - v29) >> 3) <= v12)
        goto LABEL_26;
      v31 = (uint64_t *)(v29 + 24 * v12);
      v30 = *v31;
      v32 = v44;
      if (v11 >= (v31[1] - *v31) >> 2)
LABEL_27:
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v33 = *(unsigned int *)(v30 + 4 * v11);
      v34 = *((_QWORD *)this + 23);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 24) - v34) >> 3) <= v33)
        break;
      v35 = v34 + 24 * v33;
      v36 = *(_DWORD **)v35;
      if (*(_QWORD *)(v35 + 8) == *(_QWORD *)v35)
        goto LABEL_25;
      v37 = *((_QWORD *)this + 375);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 376) - v37) >> 3) <= v12)
        goto LABEL_29;
      v38 = (_QWORD *)(v37 + 24 * v12);
      if (v11 >= (uint64_t)(v38[1] - *v38) >> 2)
        goto LABEL_25;
      *(_DWORD *)(*v38 + 4 * v11) = *v36;
      vDSP_ztoc(&__Z, 1, v32, 2, *(unsigned int *)this);
      v45 = 0.0;
      v39 = *((_QWORD *)this + 375);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 376) - v39) >> 3) <= v12)
LABEL_29:
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v40 = (_QWORD *)(v39 + 24 * v12);
      v41 = *((unsigned int *)this + 592);
      v42 = (v41 + v11);
      if (v42 >= (uint64_t)(v40[1] - *v40) >> 2)
LABEL_25:
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      vDSP_vsadd((const float *)v32, 1, &v45, (float *)(*v40 + 4 * v42), v41, (2 * *(_DWORD *)this));
      if (++v11 >= *((unsigned int *)this + 592))
        return;
    }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
}

void CircArrayKernel::Reset(CircArrayKernel *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;

  v2 = (void *)*((_QWORD *)this + 366);
  v3 = *((_QWORD *)this + 367) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  v4 = (void *)*((_QWORD *)this + 308);
  v5 = *((_QWORD *)this + 309) - (_QWORD)v4;
  if (v5 >= 1)
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = *((_QWORD *)this + 372);
  v7 = *((_QWORD *)this + 373);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 8) - *(_QWORD *)v6;
    if (v8 >= 1)
      bzero(*(void **)v6, 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
    v6 += 24;
  }
  v9 = *((_QWORD *)this + 378);
  v10 = *((_QWORD *)this + 379);
  while (v9 != v10)
  {
    v11 = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
    if (v11 >= 1)
      bzero(*(void **)v9, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    v9 += 24;
  }
  v12 = (void *)*((_QWORD *)this + 384);
  v13 = *((_QWORD *)this + 385) - (_QWORD)v12;
  if (v13 >= 1)
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  v14 = (void *)*((_QWORD *)this + 390);
  v15 = *((_QWORD *)this + 391) - (_QWORD)v14;
  if (v15 >= 1)
    bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  vDSP_biquadm_ResetState(*((vDSP_biquadm_Setup *)this + 319));
  if (*((_DWORD *)this + 592))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *((_QWORD *)this + 369);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 370) - v20) >> 3) <= v19)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v21 = v20 + v18;
      v22 = *(void **)v21;
      v23 = *(_QWORD *)(v21 + 8) - *(_QWORD *)v21;
      if (v23 >= 1)
        bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
      v24 = *((_QWORD *)this + 354);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 355) - v24) >> 3) <= v19)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v25 = v24 + v18;
      v26 = *(void **)v25;
      v27 = *(_QWORD *)(v25 + 8) - *(_QWORD *)v25;
      if (v27 >= 1)
        bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
      vDSP_biquadm_ResetState(*((vDSP_biquadm_Setup *)this + 311));
      v28 = *((_QWORD *)this + 327);
      if (0xCF3CF3CF3CF3CF3DLL * ((*((_QWORD *)this + 328) - v28) >> 3) <= v19)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      FreqDomainConvolver::Reset((FreqDomainConvolver *)(v28 + v17));
      v29 = *((_QWORD *)this + 299);
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)this + 300) - v29) >> 3) <= v19)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      CircularDelay::Reset((CircularDelay *)(v29 + v16));
      ++v19;
      v18 += 24;
      v17 += 168;
      v16 += 72;
    }
    while (v19 < *((unsigned int *)this + 592));
  }
  for (i = 0; i != 16; i += 8)
    SmartFIR::Reset(*(void ***)((char *)this + i + 2664));
  SmartFIR::Reset(*((void ***)this + 347));
  *((_BYTE *)this + 129) = 1;
}

void std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v4 - 32));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CircularDelay>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 7);
        if (v6)
        {
          *((_QWORD *)v4 - 6) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(uint64_t a1)
{
  void **v2;
  void **v4;
  void **v5;

  *(_QWORD *)a1 = &off_1E69D6738;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::drain_trash(a1);
  v4 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v4))
  {
    v2 = v4;
    if (v4)
    {
      v5 = v4;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
      MEMORY[0x1BCC95CEC](v2, 0x20C40960023A9);
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ***std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1BCC95CEC](v2, 0x20C40960023A9);
  }
  return result;
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  _BOOL8 result;
  void **v3;
  void **v4;
  void **v5;

  v4 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  while (1)
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v4);
    if (!result)
      break;
    v3 = v4;
    if (!v4)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
    MEMORY[0x1BCC95CEC](v3, 0x20C40960023A9);
  }
  return result;
}

BOOL boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(unsigned int *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  int v6;
  _WORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned __int16 v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  int v21;

  v2 = ((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0;
  v3 = a1 + 16;
  while (1)
  {
    while (1)
    {
      do
      {
LABEL_2:
        v4 = atomic_load(a1);
        v5 = (unsigned __int16)v4;
        v6 = (unsigned __int16)v4;
        v7 = (_WORD *)(v2 + ((unint64_t)(unsigned __int16)v4 << 6));
        if ((unsigned __int16)v4 == 11)
          v8 = 0;
        else
          v8 = (unsigned int *)(v2 + ((unint64_t)(unsigned __int16)v4 << 6));
        v9 = atomic_load(v3);
        v10 = atomic_load(v8);
        v11 = v2 + ((unint64_t)v10 << 6);
        if (v10 == 11)
          v11 = 0;
        v12 = atomic_load(a1);
      }
      while ((unsigned __int16)v4 != (unsigned __int16)v12 || HIWORD(v4) != HIWORD(v12));
      if ((unsigned __int16)v4 != (unsigned __int16)v9)
        break;
      if (!v11)
        return v5 != (unsigned __int16)v9;
      while (1)
      {
        v15 = __ldaxr(v3);
        if (v15 != v9)
          break;
        if (!__stlxr((v9 & 0xFFFF0000 | v10) + 0x10000, v3))
          goto LABEL_2;
      }
LABEL_21:
      __clrex();
    }
    if (v11)
    {
      *a2 = *(_QWORD *)(v11 + 8);
      v14 = __ldaxr(a1);
      if (v14 != v4)
        goto LABEL_21;
      if (!__stlxr((v4 & 0xFFFF0000 | v10) + 0x10000, a1))
        break;
    }
  }
  v16 = a1 + 224;
  v17 = atomic_load(a1 + 224);
  *v7 = v17;
  v18 = __ldaxr(a1 + 224);
  if (v18 == v17)
  {
    if (!__stlxr(v17 & 0xFFFF0000 | v6, v16))
    {
      v19 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  v19 = 0;
LABEL_27:
  if ((v19 & 1) == 0)
  {
    while (2)
    {
      *v7 = v18;
      v20 = __ldaxr(v16);
      if (v20 == v18)
      {
        if (!__stlxr(v18 & 0xFFFF0000 | v6, v16))
        {
          v21 = 1;
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      v21 = 0;
LABEL_33:
      v18 = v20;
      if (v21)
        return v5 != (unsigned __int16)v9;
      continue;
    }
  }
  return v5 != (unsigned __int16)v9;
}

void boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(unsigned int *a1)
{
  unint64_t v1;
  int v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v1 = ((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0;
  while (1)
  {
    while (1)
    {
      v2 = (unsigned __int16)*a1;
      v3 = (unsigned __int16)*a1;
      v4 = v2 == 11 ? 0 : (_DWORD *)(v1 + (v3 << 6));
      v5 = a1[16];
      v6 = (unsigned __int16)*v4;
      v7 = v6 == 11 || v1 == 0;
      v8 = v7;
      if (v2 == (unsigned __int16)v5)
        break;
      if (!v8)
      {
        atomic_store((*a1 & 0xFFFF0000 | v6) + 0x10000, a1);
        v9 = atomic_load(a1 + 224);
        *(_WORD *)(v1 + (v3 << 6)) = v9;
        atomic_store(v9 & 0xFFFF0000 | v3, a1 + 224);
      }
    }
    if (v8)
      break;
    atomic_store((v5 & 0xFFFF0000 | v6) + 0x10000, a1 + 16);
  }
  v10 = (unsigned __int16)*a1;
  v11 = atomic_load(a1 + 224);
  *(_WORD *)(v1 + (v10 << 6)) = v11;
  atomic_store(v11 & 0xFFFF0000 | v10, a1 + 224);
}

void ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B6264CCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<CDSPSplitComplex>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CDSPSplitComplex>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>>(a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CDSPSplitComplex>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CDSPSplitComplex>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>,std::reverse_iterator<CDSPSplitComplex*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a2 != a4)
  {
    v9 = -16;
    do
    {
      v10 = std::valarray<float>::valarray((_QWORD *)(a6 + v9), (int **)(a2 + v9));
      v11 = *v10 + 4 * ((uint64_t)(v10[1] - *v10) >> 3);
      *(v10 - 2) = *v10;
      *(v10 - 1) = v11;
      v9 -= 32;
    }
    while (a2 + v9 + 16 != a4);
    a6 += v9 + 16;
  }
  return a6;
}

_QWORD *std::valarray<float>::valarray(_QWORD *a1, int **a2)
{
  int *v3;
  size_t v4;
  char *v6;
  int *v7;
  char *v8;
  int v9;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[1];
  v4 = (char *)v3 - (char *)*a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v6 = (char *)operator new(v4);
    *a1 = v6;
    a1[1] = v6;
    v7 = *a2;
    if (*a2 != a2[1])
    {
      v8 = v6 + 4;
      do
      {
        v9 = *v7++;
        *((_DWORD *)v8 - 1) = v9;
        a1[1] = v8;
        v8 += 4;
      }
      while (v7 != a2[1]);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<CircularDelay>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 72;
    v4 = *(void **)(v2 - 56);
    if (v4)
    {
      *(_QWORD *)(v2 - 48) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(unint64_t a1)
{
  if (a1 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a1);
}

void std::vector<FreqDomainConvolver>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const FreqDomainConvolver *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  for (i = 168; ; i -= 168)
  {
    v8 = v6 + i;
    if (v4 + i - 168 == v5)
      break;
    v9 = (const FreqDomainConvolver *)(v4 + i - 336);
    FreqDomainConvolver::FreqDomainConvolver((FreqDomainConvolver *)(v8 - 336), v9);
  }
  v10 = v8 - 168;
  a2[1] = v10;
  v11 = *a1;
  *a1 = v10;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<FreqDomainConvolver>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    std::__destroy_at[abi:ne180100]<FreqDomainConvolver,0>((_QWORD *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void FreqDomainConvolver::FreqDomainConvolver(FreqDomainConvolver *this, const FreqDomainConvolver *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::valarray<float>::valarray((_QWORD *)this + 4, (int **)a2 + 4);
  v7 = *((_QWORD *)this + 4);
  v8 = v7 + 4 * ((*((_QWORD *)this + 5) - v7) >> 3);
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = v8;
  std::valarray<float>::valarray((_QWORD *)this + 8, (int **)a2 + 8);
  v9 = *((_QWORD *)this + 8);
  v10 = v9 + 4 * ((*((_QWORD *)this + 9) - v9) >> 3);
  *((_QWORD *)this + 6) = v9;
  *((_QWORD *)this + 7) = v10;
  std::valarray<float>::valarray((_QWORD *)this + 12, (int **)a2 + 12);
  *((_QWORD *)this + 14) = 0;
  v11 = *((_QWORD *)this + 12);
  v12 = v11 + 4 * ((*((_QWORD *)this + 13) - v11) >> 3);
  *((_QWORD *)this + 10) = v11;
  *((_QWORD *)this + 11) = v12;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 14, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 17, *((const void **)a2 + 17), *((_QWORD *)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
}

void sub_1B6265178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[15] = v4;
    operator delete(v4);
  }
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 10));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 6));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(v1 + 2));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

unsigned int *boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::queue(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[16] = 0;
  v2 = (uint64_t)(a1 + 32);
  bzero(a1 + 32, 0x300uLL);
  v3 = 0;
  a1[224] = 11;
  v4 = (_WORD *)(((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0);
  do
  {
    *v4 = 11;
    v5 = atomic_load(a1 + 224);
    *v4 = v5;
    v4 += 32;
    atomic_store(v3++ + (v5 & 0xFFFF0000), a1 + 224);
  }
  while (v3 != 11);
  v6 = boost::lockfree::detail::fixed_size_freelist<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,boost::lockfree::detail::compiletime_sized_freelist_storage<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,11ul>>::allocate<true>(v2);
  if (v6 == 11)
  {
    v7 = 0;
  }
  else
  {
    v7 = (_DWORD *)((((unint64_t)a1 + 191) & 0xFFFFFFFFFFFFFFC0) + ((unint64_t)v6 << 6));
    *v7 = 11;
  }
  if (v7)
    v8 = (unsigned __int16)((v7 - (((_DWORD)a1 + 191) & 0x3FFFC0)) >> 6);
  else
    v8 = 11;
  *a1 = v8;
  atomic_store(v8, a1 + 16);
  return a1;
}

uint64_t boost::lockfree::detail::fixed_size_freelist<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,boost::lockfree::detail::compiletime_sized_freelist_storage<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,11ul>>::allocate<true>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  v2 = (unsigned int *)(a1 + 768);
  v3 = atomic_load((unsigned int *)(a1 + 768));
  result = (unsigned __int16)v3;
  if ((unsigned __int16)v3 == 11)
    return 11;
  v5 = (a1 + 63) & 0xFFFFFFFFFFFFFFC0;
  v6 = __ldaxr(v2);
  if (v6 != v3)
  {
    __clrex();
    while (1)
    {
LABEL_7:
      result = (unsigned __int16)v6;
      if ((unsigned __int16)v6 == 11)
        return 11;
      v7 = __ldaxr(v2);
      if (v7 != v6)
        break;
      if (__stlxr((v6 & 0xFFFF0000 | *(unsigned __int16 *)(v5 + ((unint64_t)(unsigned __int16)v6 << 6))) + 0x10000, v2))
      {
        goto LABEL_12;
      }
      v8 = 1;
LABEL_13:
      v6 = v7;
      if ((v8 & 1) != 0)
        return result;
    }
    __clrex();
LABEL_12:
    v8 = 0;
    goto LABEL_13;
  }
  if (__stlxr((v3 & 0xFFFF0000 | *(unsigned __int16 *)(v5 + ((unint64_t)(unsigned __int16)v3 << 6))) + 0x10000, v2))
  {
    goto LABEL_7;
  }
  return result;
}

_QWORD *ca::concurrent::deferred_deletion_stash<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69D6718;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69D6718;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

BOOL ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::pop(uint64_t a1, void ***a2)
{
  _BOOL8 v4;
  void **v5;
  void **v6;
  std::runtime_error *exception;
  void **v9;
  void **v10;

  v10 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v10);
  if (v4)
  {
    v5 = v10;
    if (!v10)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1B6265490(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v4 = a1 + 128;
  v5 = boost::lockfree::detail::fixed_size_freelist<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,boost::lockfree::detail::compiletime_sized_freelist_storage<boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::node,11ul>>::allocate<true>(a1 + 128);
  if (v5 == 11)
    return v5 != 11;
  v6 = (v4 + 63) & 0xFFFFFFFFFFFFFFC0;
  v7 = v6 + ((unint64_t)v5 << 6);
  *(_QWORD *)(v7 + 8) = *a2;
  atomic_store((*(_DWORD *)v7 & 0xFFFF0000) + 65547, (unsigned int *)v7);
  v8 = (v4 + 63) & 0x3FFFC0;
  v9 = (unsigned __int16)((v7 - v8) >> 6);
  v10 = (unsigned int *)(a1 + 64);
  do
  {
    while (1)
    {
      do
      {
LABEL_3:
        v11 = atomic_load(v10);
        v12 = (unsigned int *)(v6 + ((unint64_t)(unsigned __int16)v11 << 6));
        if ((unsigned __int16)v11 == 11)
          v12 = 0;
        v13 = atomic_load(v12);
        if ((unsigned __int16)v13 == 11)
          v14 = 0;
        else
          v14 = v6 + ((unint64_t)(unsigned __int16)v13 << 6);
        v15 = atomic_load(v10);
      }
      while ((unsigned __int16)v11 != (unsigned __int16)v15 || HIWORD(v11) != HIWORD(v15));
      if (!v14)
        break;
      while (1)
      {
        v17 = __ldaxr(v10);
        if (v17 != v11)
          break;
        if (!__stlxr((v11 & 0xFFFF0000 | (unsigned __int16)((v14 - v8) >> 6)) + 0x10000, v10))
          goto LABEL_3;
      }
LABEL_20:
      __clrex();
    }
    v18 = __ldaxr(v12);
    if (v18 != v13)
      goto LABEL_20;
  }
  while (__stlxr((v13 & 0xFFFF0000 | v9) + 0x10000, v12));
  while (1)
  {
    v19 = __ldaxr(v10);
    if (v19 != v11)
      break;
    if (!__stlxr((v11 & 0xFFFF0000 | v9) + 0x10000, v10))
      return v5 != 11;
  }
  __clrex();
  return v5 != 11;
}

void CircArrayKernel::Process(float const* const*,float * const*,unsigned int)::$_0::operator()(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  DSPComplex *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  vDSP_Length v19;
  vDSP_Length v20;
  _DWORD *v21;
  float *v22;
  float *v23;
  float v24;
  CAXException *exception;
  uint64_t **v28;
  unsigned int v30[4];
  _BYTE __B[12];
  __int16 v32;
  int v33;
  __int16 v34;
  unsigned int *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 2368))
  {
    v2 = 0;
    v28 = (uint64_t **)(a1 + 8);
    do
    {
      v30[0] = v2;
      *(_QWORD *)__B = v30;
      v3 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v28, v30, (uint64_t)&std::piecewise_construct, (unsigned int **)__B);
      v4 = *(_QWORD *)(a1 + 2880);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 2888) - v4) >> 3) <= a2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v5 = (_QWORD *)(v4 + 24 * a2);
      if (v2 >= (uint64_t)(v5[1] - *v5) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      *(float *)(*v5 + 4 * v2) = (float)(*((float *)v3 + 8) * -3.1416) / 180.0;
      v30[0] = v2 + 8;
      *(_QWORD *)__B = v30;
      v6 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v28, v30, (uint64_t)&std::piecewise_construct, (unsigned int **)__B);
      v7 = -1 - 1431655765 * ((*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 3);
      if (v7 > *((float *)v6 + 8))
      {
        v30[0] = v2 + 8;
        *(_QWORD *)__B = v30;
        v7 = *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v28, v30, (uint64_t)&std::piecewise_construct, (unsigned int **)__B)+ 8);
      }
      v8 = *(_QWORD *)(a1 + 2904);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 2912) - v8) >> 3) <= a2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v10 = (uint64_t *)(v8 + 24 * a2);
      v9 = *v10;
      if (v2 >= (v10[1] - *v10) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      *(_DWORD *)(v9 + 4 * v2) = v7;
      v11 = *(_QWORD **)(a1 + 208);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[1] - *v11) >> 3) <= v7)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v12 = *v11 + 24 * v7;
      v13 = *(DSPComplex **)v12;
      if (*(_QWORD *)(v12 + 8) == *(_QWORD *)v12)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v14 = *(_QWORD *)(a1 + 2664 + 8 * a2);
      if (*(_QWORD *)(v14 + 16) <= v2)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v30, 0xFFFFFFFF);
          *(_DWORD *)__B = 136315906;
          *(_QWORD *)&__B[4] = "SmartFIR.mm";
          v32 = 1024;
          v33 = 236;
          v34 = 2080;
          v35 = v30;
          v36 = 2080;
          v37 = "Trying to initialize channel out of bounds";
          _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", __B, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "Trying to initialize channel out of bounds", -1);
      }
      if (*(_QWORD *)(v14 + 8) >= *(_QWORD *)v14)
        v15 = *(_QWORD *)v14;
      else
        v15 = *(_QWORD *)(v14 + 8);
      FreqDomainConvolver::Initialize((DSPSplitComplex *)(*(_QWORD *)(v14 + 32) + 168 * v2), v13, v15);
      if (*(_DWORD *)(v14 + 56))
      {
        v16 = 0;
        v17 = 0;
        LODWORD(v18) = 0;
        v19 = v15 >> 1;
        v20 = *(_QWORD *)v14;
        do
        {
          bzero(*(void **)(*(_QWORD *)(*(_QWORD *)(v14 + 104) + 24 * v2) + v16), 4 * v20);
          bzero(*(void **)(*(_QWORD *)(*(_QWORD *)(v14 + 104) + 24 * v2) + v16 + 8), 4 * *(_QWORD *)v14);
          vDSP_ctoz((DSPComplex *)((char *)v13 + 4 * v18), 2, (const DSPSplitComplex *)(*(_QWORD *)(*(_QWORD *)(v14 + 104) + 24 * v2) + v16), 1, v19);
          *(_DWORD *)__B = 0;
          v21 = *(_DWORD **)(v14 + 64);
          if (v21)
            LODWORD(v21) = *v21;
          *(float *)__B = 1.0 / (float)v21;
          v22 = *(float **)(*(_QWORD *)(*(_QWORD *)(v14 + 104) + 24 * v2) + v16);
          vDSP_vsmul(v22, 1, (const float *)__B, v22, 1, *(_QWORD *)v14);
          v23 = *(float **)(*(_QWORD *)(*(_QWORD *)(v14 + 104) + 24 * v2) + v16 + 8);
          vDSP_vsmul(v23, 1, (const float *)__B, v23, 1, *(_QWORD *)v14);
          MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)(v14 + 64), (DSPSplitComplex *)(*(_QWORD *)(*(_QWORD *)(v14 + 104) + 24 * v2) + v16), 1, v24);
          v20 = *(_QWORD *)v14;
          v18 = *(_QWORD *)v14 + v18;
          ++v17;
          v16 += 16;
        }
        while (v17 < *(unsigned int *)(v14 + 56));
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 2368));
  }
  CircArrayKernel::CalcBeamMixingMat((CircArrayKernel *)a1);
}

void sub_1B6265AAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUECMIMO::~AUECMIMO(AUECMIMO *this)
{
  AUECMIMO::~AUECMIMO(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E69CCE50;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 97, 0);
  v2 = (void *)*((_QWORD *)this + 94);
  if (v2)
  {
    *((_QWORD *)this + 95) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 91);
  if (v3)
  {
    *((_QWORD *)this + 92) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECMIMO::Initialize(AUECMIMO *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  uint64_t result;
  uint64_t v12;
  double v13;
  int v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  float Parameter;
  uint64_t v64;
  ausdk::AUElement *v65;
  ausdk::AUElement **v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  unsigned int v106;
  unsigned int v107;
  float v108;
  float v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  float i;
  float v115;
  NSObject *v116;
  int v117;
  int v118;
  unsigned int v119;
  NSObject *v120;
  int v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  _BOOL8 v125;
  __n128 v126;
  float v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  NSObject *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  BOOL v155;
  _BYTE buf[12];
  __int16 v157;
  int v158;
  __int16 v159;
  _DWORD v160[7];

  *(_QWORD *)&v160[5] = *MEMORY[0x1E0C80C00];
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
    v157 = 1024;
    v158 = 232;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Initialize.\n", buf, 0x12u);
  }
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 80), 1u);
  v5 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 0);
  v6 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 1u);
  v7 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 2u);
  v8 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = v8;
  v9 = *(_DWORD *)(v4 + 108);
  *((_DWORD *)this + 139) = v9;
  v10 = *(double *)(Element + 80);
  *((_DWORD *)this + 136) = v10;
  if (v10 != *(double *)(v4 + 80))
    return 4294956428;
  v12 = v7;
  v13 = *(double *)(v5 + 80);
  result = 4294956428;
  if (v13 == v10 && v13 == *(double *)(v12 + 80) && v13 == *(double *)(v6 + 80))
  {
    v14 = *(_DWORD *)(v5 + 108);
    if (v14 == v8 && v14 == *(_DWORD *)(v6 + 108) && v9 == *(_DWORD *)(v12 + 108))
    {
      v15 = *((_QWORD *)this + 9);
      if (v15)
      {
        v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
      }
      else
      {
        v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v17)
          v16 = 0;
        else
          v16 = *v17;
      }
      *((_DWORD *)this + 135) = ausdk::AUElement::GetParameter(v16, 0);
      v18 = *((_QWORD *)this + 9);
      if (v18)
      {
        v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
      }
      else
      {
        v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v20)
          v19 = 0;
        else
          v19 = *v20;
      }
      *((float *)this + 162) = ausdk::AUElement::GetParameter(v19, 1u);
      v21 = *((_QWORD *)this + 9);
      if (v21)
      {
        v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
      }
      else
      {
        v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v23)
          v22 = 0;
        else
          v22 = *v23;
      }
      *((float *)this + 163) = ausdk::AUElement::GetParameter(v22, 2u);
      v24 = *((_QWORD *)this + 9);
      if (v24)
      {
        v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
      }
      else
      {
        v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v26)
          v25 = 0;
        else
          v25 = *v26;
      }
      *((float *)this + 164) = ausdk::AUElement::GetParameter(v25, 3u);
      v27 = *((_QWORD *)this + 9);
      if (v27)
      {
        v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
      }
      else
      {
        v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v29)
          v28 = 0;
        else
          v28 = *v29;
      }
      *((float *)this + 165) = ausdk::AUElement::GetParameter(v28, 4u);
      *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
      v30 = *((_QWORD *)this + 9);
      if (v30)
      {
        v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
      }
      else
      {
        v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v32)
          v31 = 0;
        else
          v31 = *v32;
      }
      *((float *)this + 166) = ausdk::AUElement::GetParameter(v31, 5u);
      v33 = *((_QWORD *)this + 9);
      if (v33)
      {
        v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
      }
      else
      {
        v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v35)
          v34 = 0;
        else
          v34 = *v35;
      }
      *((float *)this + 167) = ausdk::AUElement::GetParameter(v34, 6u);
      v36 = *((_QWORD *)this + 9);
      if (v36)
      {
        v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
      }
      else
      {
        v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v38)
          v37 = 0;
        else
          v37 = *v38;
      }
      *((float *)this + 168) = ausdk::AUElement::GetParameter(v37, 7u);
      v39 = *((_QWORD *)this + 9);
      if (v39)
      {
        v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
      }
      else
      {
        v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v41)
          v40 = 0;
        else
          v40 = *v41;
      }
      *((float *)this + 169) = ausdk::AUElement::GetParameter(v40, 8u);
      v42 = *((_QWORD *)this + 9);
      if (v42)
      {
        v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
      }
      else
      {
        v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v44)
          v43 = 0;
        else
          v43 = *v44;
      }
      *((float *)this + 170) = ausdk::AUElement::GetParameter(v43, 9u);
      v45 = *((_QWORD *)this + 9);
      if (v45)
      {
        v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
      }
      else
      {
        v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v47)
          v46 = 0;
        else
          v46 = *v47;
      }
      *((float *)this + 171) = ausdk::AUElement::GetParameter(v46, 0xAu);
      v48 = *((_QWORD *)this + 9);
      if (v48)
      {
        v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
      }
      else
      {
        v50 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v50)
          v49 = 0;
        else
          v49 = *v50;
      }
      *((float *)this + 172) = ausdk::AUElement::GetParameter(v49, 0xBu);
      v51 = *((_QWORD *)this + 9);
      if (v51)
      {
        v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
      }
      else
      {
        v53 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v53)
          v52 = 0;
        else
          v52 = *v53;
      }
      *((float *)this + 173) = ausdk::AUElement::GetParameter(v52, 0xCu);
      v54 = *((_QWORD *)this + 9);
      if (v54)
      {
        v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
      }
      else
      {
        v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v56)
          v55 = 0;
        else
          v55 = *v56;
      }
      *((_DWORD *)this + 147) = ausdk::AUElement::GetParameter(v55, 0xFu);
      v57 = *((_QWORD *)this + 9);
      if (v57)
      {
        v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
      }
      else
      {
        v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v59)
          v58 = 0;
        else
          v58 = *v59;
      }
      *((_DWORD *)this + 174) = (int)ausdk::AUElement::GetParameter(v58, 0x10u);
      v60 = *((_QWORD *)this + 9);
      if (v60)
      {
        v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
      }
      else
      {
        v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v62)
          v61 = 0;
        else
          v61 = *v62;
      }
      Parameter = ausdk::AUElement::GetParameter(v61, 0x11u);
      *((float *)this + 175) = Parameter;
      *((_DWORD *)this + 176) = vcvtps_u32_f32((float)(Parameter * (float)*((unsigned int *)this + 136)) / 1000.0);
      v64 = *((_QWORD *)this + 9);
      if (v64)
      {
        v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
      }
      else
      {
        v66 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v66)
          v65 = 0;
        else
          v65 = *v66;
      }
      *((_BYTE *)this + 708) = ausdk::AUElement::GetParameter(v65, 0x12u) != 0.0;
      v67 = *((_QWORD *)this + 9);
      if (v67)
      {
        v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
      }
      else
      {
        v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v69)
          v68 = 0;
        else
          v68 = *v69;
      }
      *((float *)this + 178) = ausdk::AUElement::GetParameter(v68, 0x13u);
      v70 = *((_QWORD *)this + 9);
      if (v70)
      {
        v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
      }
      else
      {
        v72 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v72)
          v71 = 0;
        else
          v71 = *v72;
      }
      *((_DWORD *)this + 179) = ausdk::AUElement::GetParameter(v71, 0x14u);
      v73 = *((_QWORD *)this + 9);
      if (v73)
      {
        v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
      }
      else
      {
        v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v75)
          v74 = 0;
        else
          v74 = *v75;
      }
      *((float *)this + 148) = ausdk::AUElement::GetParameter(v74, 0x19u);
      v76 = *((_QWORD *)this + 9);
      if (v76)
      {
        v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
      }
      else
      {
        v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v78)
          v77 = 0;
        else
          v77 = *v78;
      }
      *((float *)this + 149) = ausdk::AUElement::GetParameter(v77, 0x1Au);
      v79 = *((_QWORD *)this + 9);
      if (v79)
      {
        v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
      }
      else
      {
        v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v81)
          v80 = 0;
        else
          v80 = *v81;
      }
      *((_DWORD *)this + 150) = ausdk::AUElement::GetParameter(v80, 0x1Bu);
      v82 = *((_QWORD *)this + 9);
      if (v82)
      {
        v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
      }
      else
      {
        v84 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v84)
          v83 = 0;
        else
          v83 = *v84;
      }
      *((float *)this + 151) = ausdk::AUElement::GetParameter(v83, 0x1Cu);
      v85 = *((_QWORD *)this + 9);
      if (v85)
      {
        v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
      }
      else
      {
        v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v87)
          v86 = 0;
        else
          v86 = *v87;
      }
      *((float *)this + 152) = ausdk::AUElement::GetParameter(v86, 0x1Du);
      v88 = *((_QWORD *)this + 9);
      if (v88)
      {
        v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
      }
      else
      {
        v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v90)
          v89 = 0;
        else
          v89 = *v90;
      }
      *((float *)this + 153) = ausdk::AUElement::GetParameter(v89, 0x1Eu);
      v91 = *((_QWORD *)this + 9);
      if (v91)
      {
        v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
      }
      else
      {
        v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v93)
          v92 = 0;
        else
          v92 = *v93;
      }
      *((float *)this + 154) = ausdk::AUElement::GetParameter(v92, 0x1Fu);
      v94 = *((_QWORD *)this + 9);
      if (v94)
      {
        v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
      }
      else
      {
        v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v96)
          v95 = 0;
        else
          v95 = *v96;
      }
      *((float *)this + 155) = ausdk::AUElement::GetParameter(v95, 0x20u);
      v97 = *((_QWORD *)this + 9);
      if (v97)
      {
        v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
      }
      else
      {
        v99 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v99)
          v98 = 0;
        else
          v98 = *v99;
      }
      *((float *)this + 156) = ausdk::AUElement::GetParameter(v98, 0x21u);
      v100 = *((_QWORD *)this + 9);
      if (v100)
      {
        v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
      }
      else
      {
        v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v102)
          v101 = 0;
        else
          v101 = *v102;
      }
      *((float *)this + 157) = ausdk::AUElement::GetParameter(v101, 0x22u);
      v103 = *((_QWORD *)this + 9);
      if (v103)
      {
        v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
      }
      else
      {
        v105 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v105)
          v104 = 0;
        else
          v104 = *v105;
      }
      v106 = ausdk::AUElement::GetParameter(v104, 0xDu);
      *((_DWORD *)this + 142) = v106;
      v107 = *((_DWORD *)this + 137);
      v108 = (float)*((unsigned int *)this + 136);
      v109 = (float)v107;
      v110 = v107
           * vcvtps_u32_f32((float)(float)((float)(v108 * (float)*((unsigned int *)this + 135)) / 1000.0) / (float)v107);
      *((_DWORD *)this + 140) = v110;
      if (v110 <= v107)
      {
        *((_DWORD *)this + 140) = v107;
        *((_DWORD *)this + 135) = (float)((float)(v109 / v108) * 1000.0);
        v110 = v107;
      }
      v111 = v107 * vcvtps_u32_f32((float)(float)((float)(v108 * (float)v106) / 1000.0) / v109);
      *((_DWORD *)this + 141) = v111;
      if (v111 <= v107)
      {
        *((_DWORD *)this + 141) = v107;
        *((_DWORD *)this + 142) = (float)((float)(v109 / v108) * 1000.0);
        v111 = v107;
      }
      if (*((_DWORD *)this + 174))
      {
        if (-858993459 * v110 >= 0x33333334)
          v112 = 1;
        else
          v112 = 5;
        if (-1431655765 * v110 >= 0x55555556)
          v113 = 4;
        else
          v113 = 12;
        for (i = (float)(v113 * v112); i < (float)v110; i = i + i)
          ;
        v110 = i;
        *((_DWORD *)this + 140) = i;
        *((_DWORD *)this + 135) = (float)((float)((float)i / v108) * 1000.0);
      }
      if (v111 <= v110)
      {
        v115 = (float)v110;
      }
      else
      {
        *((_DWORD *)this + 141) = v110;
        v115 = (float)v110;
        *((_DWORD *)this + 142) = (float)((float)((float)v110 / v108) * 1000.0);
      }
      *((_DWORD *)this + 146) = vcvtps_u32_f32(v115 / v109);
      if (AUECMIMOLogScope(void)::once != -1)
        dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
      if (AUECMIMOLogScope(void)::scope)
      {
        v116 = *(NSObject **)AUECMIMOLogScope(void)::scope;
        if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
          goto LABEL_194;
      }
      else
      {
        v116 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        v117 = *((_DWORD *)this + 140);
        v118 = *((_DWORD *)this + 141);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
        v157 = 1024;
        v158 = 314;
        v159 = 1024;
        v160[0] = v117;
        LOWORD(v160[1]) = 1024;
        *(_DWORD *)((char *)&v160[1] + 2) = v118;
        _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: filter (readout) length is set to %u (%u) samples.\n", buf, 0x1Eu);
      }
LABEL_194:
      if (!*((_DWORD *)this + 174))
        goto LABEL_205;
      v119 = *((_DWORD *)this + 140) - *((_DWORD *)this + 137);
      if (*((_DWORD *)this + 176) > v119)
        *((_DWORD *)this + 176) = v119;
      if (AUECMIMOLogScope(void)::once != -1)
        dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
      if (AUECMIMOLogScope(void)::scope)
      {
        v120 = *(NSObject **)AUECMIMOLogScope(void)::scope;
        if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
          goto LABEL_205;
      }
      else
      {
        v120 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
      {
        v121 = *((_DWORD *)this + 176);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
        v157 = 1024;
        v158 = 319;
        v159 = 1024;
        v160[0] = v121;
        _os_log_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: IQRD mode delay is set to %u samples.\n", buf, 0x18u);
      }
LABEL_205:
      *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
      v122 = *((_QWORD *)this + 9);
      if (v122)
      {
        v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
      }
      else
      {
        v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v124)
          v123 = 0;
        else
          v123 = *v124;
      }
      *((double *)this + 72) = ausdk::AUElement::GetParameter(v123, 0xEu);
      *(_OWORD *)((char *)this + 632) = 0u;
      v155 = 0;
      v126.n128_f64[0] = CACFPreferencesGetAppFloatValue(CFSTR("ecmimo_log_period_in_seconds"), CFSTR("com.apple.coreaudio"), &v155);
      if (v155)
      {
        v127 = v126.n128_f64[0];
        if (v127 > 0.0)
        {
          *((double *)this + 72) = v127;
          v128 = *((_QWORD *)this + 9);
          if (v128)
          {
            v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
          }
          else
          {
            v130 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v130)
              v129 = 0;
            else
              v129 = *v130;
          }
          ausdk::AUElement::SetParameter(v129, 0xEu, v127, 0);
          if (AUECMIMOLogScope(void)::once != -1)
            dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
          if (AUECMIMOLogScope(void)::scope)
          {
            v131 = *(NSObject **)AUECMIMOLogScope(void)::scope;
            if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
              goto LABEL_225;
          }
          else
          {
            v131 = MEMORY[0x1E0C81028];
          }
          v125 = os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT);
          if (v125)
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
            v157 = 1024;
            v158 = 334;
            v159 = 2048;
            *(double *)v160 = v127;
            _os_log_impl(&dword_1B5ED0000, v131, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Using logPeriod of (%g)s as specified in defaults write ecmimo_log_period_in_seconds.\n", buf, 0x1Cu);
          }
        }
      }
LABEL_225:
      if (!*((_QWORD *)this + 97))
      {
        v126.n128_u64[0] = *((_QWORD *)this + 72);
        if (v126.n128_f64[0] > 0.0)
        {
          v154 = 0;
          v132 = caulk::concurrent::messenger::shared_logging_priority((caulk::concurrent::messenger *)v125);
          std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>((uint64_t *)buf, &v154, v132);
          v133 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 97, v133);
          std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)buf, 0);
        }
      }
      v134 = *((_QWORD *)this + 90);
      *((_QWORD *)this + 90) = 0;
      if (v134)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v134 + 8))(v134, v126);
      if (*((_DWORD *)this + 174))
      {
        if (AUECMIMOLogScope(void)::once != -1)
          dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
        if (AUECMIMOLogScope(void)::scope)
        {
          v135 = *(NSObject **)AUECMIMOLogScope(void)::scope;
          if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
          {
LABEL_244:
            v137 = *((_QWORD *)this + 90);
            if (!v137)
            {
              v137 = operator new();
              *(_QWORD *)v137 = &off_1E69CDB38;
              *(_OWORD *)(v137 + 8) = xmmword_1B66A1350;
              *(_OWORD *)(v137 + 24) = xmmword_1B66A1360;
              *(_OWORD *)(v137 + 40) = xmmword_1B66A1370;
              *(_QWORD *)(v137 + 60) = 3270508544;
              *(_DWORD *)(v137 + 68) = 730643660;
              *(_DWORD *)(v137 + 104) = 16;
              *(_BYTE *)(v137 + 108) = 0;
              *(_DWORD *)(v137 + 112) = 1065353216;
              *(_DWORD *)(v137 + 120) = 0;
              __asm { FMOV            V0.2S, #1.0 }
              *(_QWORD *)(v137 + 124) = _D0;
              *(_BYTE *)(v137 + 132) = 0;
              bzero((void *)(v137 + 160), 0x350uLL);
              v143 = *((_QWORD *)this + 90);
              *((_QWORD *)this + 90) = v137;
              if (v143)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
                v137 = *((_QWORD *)this + 90);
              }
            }
            HIDWORD(v152) = *((_DWORD *)this + 156);
            LODWORD(v152) = *((_DWORD *)this + 153);
            LODWORD(v150) = *((_DWORD *)this + 179);
            HIDWORD(v150) = *((_DWORD *)this + 150);
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float, float, float, float, float, float, float, float, _BYTE, uint64_t, uint64_t, _DWORD))(*(_QWORD *)v137 + 32))(v137, *((unsigned int *)this + 138), *((unsigned int *)this + 139), *((unsigned int *)this + 136), *((unsigned int *)this + 140), *((unsigned int *)this + 137), *((unsigned int *)this + 141), *((unsigned int *)this + 176), *((float *)this + 171), *((float *)this + 170), *((float *)this + 165), *((float *)this + 166), *((float *)this + 173), *((float *)this + 178), *((float *)this + 151), *((float *)this + 152), *((_BYTE *)this + 708), v150, v152,
              *((_DWORD *)this + 157));
            goto LABEL_255;
          }
        }
        else
        {
          v135 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
          v157 = 1024;
          v158 = 416;
          _os_log_impl(&dword_1B5ED0000, v135, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Set iQRD mode.\n", buf, 0x12u);
        }
        goto LABEL_244;
      }
      if (AUECMIMOLogScope(void)::once != -1)
        dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
      if (AUECMIMOLogScope(void)::scope)
      {
        v136 = *(NSObject **)AUECMIMOLogScope(void)::scope;
        if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
        {
LABEL_251:
          v144 = *((_QWORD *)this + 90);
          if (!v144)
          {
            v144 = operator new();
            *(_QWORD *)v144 = &off_1E69D5210;
            *(_BYTE *)(v144 + 8) = 0;
            *(_OWORD *)(v144 + 12) = xmmword_1B66A1380;
            *(_OWORD *)(v144 + 28) = xmmword_1B66A1390;
            *(_QWORD *)(v144 + 44) = 0x10000000200;
            *(_DWORD *)(v144 + 52) = 0;
            *(_OWORD *)(v144 + 56) = xmmword_1B66A13A0;
            *(_QWORD *)(v144 + 80) = 0x3F0000003F4CCCCDLL;
            *(_QWORD *)(v144 + 92) = 0x40E000002B8CBCCCLL;
            *(_QWORD *)(v144 + 100) = 0x240000000;
            *(_QWORD *)(v144 + 108) = 0x3A0000003A800000;
            *(_DWORD *)(v144 + 116) = 1065353216;
            *(_DWORD *)(v144 + 124) = 1056964608;
            *(_DWORD *)(v144 + 148) = -1024458752;
            *(_QWORD *)(v144 + 152) = 0x600000000;
            *(_BYTE *)(v144 + 164) = 0;
            *(_QWORD *)(v144 + 168) = 1;
            *(_DWORD *)(v144 + 176) = 0;
            bzero((void *)(v144 + 184), 0x320uLL);
            v145 = *((_QWORD *)this + 90);
            *((_QWORD *)this + 90) = v144;
            if (v145)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
              v144 = *((_QWORD *)this + 90);
            }
          }
          HIDWORD(v153) = *((_DWORD *)this + 138);
          LODWORD(v153) = *((_DWORD *)this + 141);
          LODWORD(v151) = *((_DWORD *)this + 167);
          HIDWORD(v151) = *((_DWORD *)this + 173);
          HIDWORD(v149) = *((float *)this + 168);
          LODWORD(v149) = *((_DWORD *)this + 166);
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float, float, float, float, float, float, float, float, uint64_t, uint64_t, uint64_t, _DWORD))(*(_QWORD *)v144 + 24))(v144, 0, HIDWORD(v153), *((unsigned int *)this + 139), HIDWORD(v153), *((unsigned int *)this + 136), *((unsigned int *)this + 140), *((unsigned int *)this + 137), *((float *)this + 162), *((float *)this + 163), *((float *)this + 172), *((float *)this + 169), *((float *)this + 171), *((float *)this + 170), *((float *)this + 165), *((float *)this + 164), v149, v151, v153,
            *((_DWORD *)this + 147));
LABEL_255:
          v146 = (*((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 141));
          *(_DWORD *)buf = 0;
          std::vector<float>::assign((char **)this + 91, v146, buf);
          v147 = (2
                              * *((_DWORD *)this + 138)
                              * *((_DWORD *)this + 139)
                              * *((_DWORD *)this + 146)
                              * *((_DWORD *)this + 137));
          *(_DWORD *)buf = 0;
          std::vector<float>::assign((char **)this + 94, v147, buf);
          *((_QWORD *)this + 79) = 0;
          *((_QWORD *)this + 80) = 0;
          (*(void (**)(AUECMIMO *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
          if (AUECMIMOLogScope(void)::once != -1)
            dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
          if (AUECMIMOLogScope(void)::scope)
          {
            v148 = *(NSObject **)AUECMIMOLogScope(void)::scope;
            if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
              return 0;
          }
          else
          {
            v148 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
            v157 = 1024;
            v158 = 350;
            _os_log_impl(&dword_1B5ED0000, v148, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Successfully initialized.\n", buf, 0x12u);
          }
          return 0;
        }
      }
      else
      {
        v136 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AUECMIMO.cpp";
        v157 = 1024;
        v158 = 443;
        _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Set classic mode.\n", buf, 0x12u);
      }
      goto LABEL_251;
    }
  }
  return result;
}

uint64_t AUECMIMO::Reset(AUECMIMO *this)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "AUECMIMO.cpp";
    v6 = 1024;
    v7 = 478;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: Reset.\n", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((_BYTE *)this + 17))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 16))(*((_QWORD *)this + 90));
  return 0;
}

uint64_t AUECMIMO::GetPropertyInfo(AUECMIMO *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      if (a2 == 21)
      {
        *a6 = 1;
        goto LABEL_21;
      }
      if (a2 != 3700)
      {
        if (a2 != 3800)
          return result;
        *a6 = 0;
        v9 = 4 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 141);
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    if (a2 == 4699 || a2 == 5699)
      goto LABEL_20;
    v8 = 6699;
    goto LABEL_19;
  }
  if (a2 <= 303799)
  {
    if (a2 == 7699)
      goto LABEL_20;
    if (a2 == 103800)
      goto LABEL_26;
    v8 = 203800;
LABEL_19:
    if (a2 != v8)
      return result;
    goto LABEL_20;
  }
  if (a2 <= 503799)
  {
    if (a2 != 303800)
    {
      v8 = 403800;
      goto LABEL_19;
    }
LABEL_20:
    *a6 = 0;
LABEL_21:
    v9 = 4;
LABEL_22:
    result = 0;
    *a5 = v9;
    return result;
  }
  if (a2 == 503800)
  {
    *a6 = 0;
    v9 = 8 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
    goto LABEL_22;
  }
  if (a2 == 603800)
  {
LABEL_26:
    *a6 = 0;
    v9 = 8;
    goto LABEL_22;
  }
  return result;
}

uint64_t AUECMIMO::GetProperty(AUECMIMO *this, int a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  char *v12;
  const void *v13;
  unsigned int v14;
  CFArrayRef CFArray;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  uint64_t v20;
  ausdk::AUElement **v21;
  ausdk::AUElement **v22;
  ausdk::AUElement **v23;
  ausdk::AUElement **v24;
  unsigned int v25;
  float v26;
  BOOL v27;
  float v28;
  float Parameter;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 7698)
  {
    if (a2 <= 4698)
    {
      switch(a2)
      {
        case 21:
          result = 0;
          v9 = *((unsigned __int8 *)this + 528);
          break;
        case 3700:
          result = 0;
          v9 = *((unsigned __int8 *)this + 376);
          break;
        case 3800:
LABEL_27:
          v12 = (char *)this + 728;
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 90) + 48))(*((_QWORD *)this + 90), (char *)this + 728);
          if (a2 != 103800)
          {
            v13 = (const void *)*((_QWORD *)this + 91);
            v14 = *((_DWORD *)this + 139) * *((_DWORD *)this + 138) * *((_DWORD *)this + 141);
            goto LABEL_39;
          }
LABEL_28:
          CFArray = applesauce::CF::details::make_CFArrayRef<float>(v12);
          result = 0;
          *a5 = CFArray;
          return result;
        default:
          return result;
      }
LABEL_60:
      *(_DWORD *)a5 = v9;
      return result;
    }
    if (a2 != 4699)
    {
      if (a2 == 5699)
      {
        v20 = *((_QWORD *)this + 9);
        if (v20)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
        }
        else
        {
          v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v24)
            v11 = 0;
          else
            v11 = *v24;
        }
        v25 = 24;
      }
      else
      {
        if (a2 != 6699)
          return result;
        v10 = *((_QWORD *)this + 9);
        if (v10)
        {
          v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
        }
        else
        {
          v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v21)
            v11 = 0;
          else
            v11 = *v21;
        }
        v25 = 22;
      }
      Parameter = ausdk::AUElement::GetParameter(v11, v25);
      result = 0;
      v9 = Parameter;
      goto LABEL_60;
    }
    v18 = *((_QWORD *)this + 9);
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v23)
        v19 = 0;
      else
        v19 = *v23;
    }
    v28 = ausdk::AUElement::GetParameter(v19, 0x17u);
    result = 0;
    v27 = v28 == 1.0;
LABEL_54:
    v9 = v27;
    goto LABEL_60;
  }
  if (a2 <= 303799)
  {
    if (a2 != 7699)
    {
      if (a2 != 103800)
      {
        if (a2 != 203800)
          return result;
        result = 0;
        v9 = *((_DWORD *)this + 138);
        goto LABEL_60;
      }
      goto LABEL_27;
    }
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
    }
    else
    {
      v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v22)
        v17 = 0;
      else
        v17 = *v22;
    }
    v26 = ausdk::AUElement::GetParameter(v17, 0x17u);
    result = 0;
    v27 = v26 == 0.0;
    goto LABEL_54;
  }
  if (a2 <= 503799)
  {
    if (a2 == 303800)
    {
      result = 0;
      v9 = *((_DWORD *)this + 139);
    }
    else
    {
      if (a2 != 403800)
        return result;
      result = 0;
      v9 = *((_DWORD *)this + 141);
    }
    goto LABEL_60;
  }
  if (a2 == 503800 || a2 == 603800)
  {
    v12 = (char *)this + 752;
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 90) + 64))(*((_QWORD *)this + 90), (char *)this + 752);
    if (a2 != 603800)
    {
      v13 = (const void *)*((_QWORD *)this + 94);
      v14 = 2 * *((_DWORD *)this + 138) * *((_DWORD *)this + 139) * *((_DWORD *)this + 146) * *((_DWORD *)this + 137);
LABEL_39:
      memcpy(a5, v13, 4 * v14);
      return 0;
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t AUECMIMO::SetProperty(AUECMIMO *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_BYTE *)this + 528) = *a5 != 0;
  }
  return result;
}

uint64_t AUECMIMO::SetParameter(AUECMIMO *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;

  if (a3)
    return 4294956418;
  ++*((_DWORD *)this + 133);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
  return 0;
}

uint64_t AUECMIMO::CanScheduleParameters(AUECMIMO *this)
{
  return 0;
}

uint64_t AUECMIMO::ProcessMultipleBufferLists(AUECMIMO *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7, double a8, double a9)
{
  uint64_t result;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  const void **v14;
  void **v15;
  void *v16;
  void *v17;
  const void *v18;
  NSObject *v20;
  int v21;
  const AudioBufferList *v22;
  AudioBufferList *v23;
  AudioBufferList *v24;
  int v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float Parameter;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  _QWORD *v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  _QWORD *v43;
  unint64_t v44;
  unsigned int v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  unint64_t v50;
  caulk::concurrent::messenger *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  float v57;
  float v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  int v74;
  int v75;
  int v76;
  int v77;
  AudioBufferList *v78;
  NSObject *v79;
  AudioBufferList *v80;
  unint64_t v81;
  const void **v82;
  float **p_mData;
  void **v84;
  float *v85;
  unint64_t v86;
  float **v87;
  NSObject *v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  float v92;
  unint64_t v93;
  unint64_t v94;
  double v95;
  caulk::concurrent::messenger *v96;
  char v97;
  char v98;
  char v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  caulk::concurrent::messenger *v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  caulk::concurrent::messenger *v108;
  float v109;
  uint64_t v110;
  caulk::concurrent::messenger *v111;
  uint64_t v112;
  float v113;
  const char *v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  LODWORD(a8) = *((_DWORD *)this + 137);
  LODWORD(a9) = *((_DWORD *)this + 136);
  *((double *)this + 80) = *((double *)this + 80) + (double)*(unint64_t *)&a8 / (double)*(unint64_t *)&a9;
  if (*((_DWORD *)this + 84) != a3)
  {
    if (AUECMIMOLogScope(void)::once != -1)
      dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
    if (AUECMIMOLogScope(void)::scope)
    {
      v20 = *(NSObject **)AUECMIMOLogScope(void)::scope;
      if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
        return 4294956422;
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = *((_DWORD *)this + 84);
      v113 = 4.8153e-34;
      v114 = "AUECMIMO.cpp";
      v115 = 1024;
      v116 = 1136;
      v117 = 1024;
      v118 = a3;
      v119 = 1024;
      v120 = v21;
      _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMIMO::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", (uint8_t *)&v113, 0x1Eu);
    }
    return 4294956422;
  }
  result = 4294956428;
  if (a4 != 2 || a6 != 3)
    return result;
  v11 = *a5;
  v12 = (uint64_t)*a7;
  if (*((_BYTE *)this + 528))
  {
    if ((_DWORD *)v12 != v11 && *((_DWORD *)this + 138))
    {
      v13 = 0;
      v14 = (const void **)(v11 + 4);
      v15 = (void **)(v12 + 16);
      do
      {
        v17 = *v15;
        v15 += 2;
        v16 = v17;
        v18 = *v14;
        v14 += 2;
        memcpy(v16, v18, 4 * *((unsigned int *)this + 137));
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 138));
    }
LABEL_143:
    result = 0;
    *((_QWORD *)this + 79) = 0;
    return result;
  }
  v22 = a5[1];
  v24 = a7[1];
  v23 = a7[2];
  v25 = *((_DWORD *)this + 133);
  if (v25 != *((_DWORD *)this + 134))
  {
    v26 = *((_QWORD *)this + 9);
    if (v26)
    {
      v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
    }
    else
    {
      v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v28)
        v27 = 0;
      else
        v27 = *v28;
    }
    *((float *)this + 162) = ausdk::AUElement::GetParameter(v27, 1u);
    v29 = *((_QWORD *)this + 9);
    if (v29)
    {
      v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
    }
    else
    {
      v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v31)
        v30 = 0;
      else
        v30 = *v31;
    }
    Parameter = ausdk::AUElement::GetParameter(v30, 2u);
    *((float *)this + 163) = Parameter;
    (*(void (**)(_QWORD, float, float))(**((_QWORD **)this + 90) + 136))(*((_QWORD *)this + 90), *((float *)this + 162), Parameter);
    *((_DWORD *)this + 134) = v25;
  }
  (*(void (**)(_QWORD, _DWORD *, const AudioBufferList *, _DWORD *, uint64_t, AudioBufferList *, AudioBufferList *, _QWORD))(**((_QWORD **)this + 90) + 40))(*((_QWORD *)this + 90), v11, v22, v11, v12, v24, v23, 0);
  v33 = *((_QWORD *)this + 9);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  v36 = ausdk::AUElement::GetParameter(v34, 0x15u);
  v37 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 144))(*((_QWORD *)this + 90));
  if ((v37 & 1) != 0)
    goto LABEL_61;
  v38 = *((_QWORD *)this + 9);
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (_QWORD *)*((_QWORD *)this + 6);
    v39 = *((_QWORD **)this + 7) == v40 ? 0 : (ausdk::AUElement *)*v40;
  }
  *((float *)this + 148) = ausdk::AUElement::GetParameter(v39, 0x19u);
  v41 = *((_QWORD *)this + 9);
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (_QWORD *)*((_QWORD *)this + 6);
    v42 = *((_QWORD **)this + 7) == v43 ? 0 : (ausdk::AUElement *)*v43;
  }
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v42, 0x1Au);
  if (*v11)
  {
    v44 = 0;
    v45 = *((_DWORD *)this + 137);
    v46 = 0.0;
    v47 = 4;
    v48 = 0.0;
    do
    {
      v113 = 0.0;
      vDSP_svesq(*(const float **)&v11[v47], 1, &v113, v45);
      v45 = *((_DWORD *)this + 137);
      v49 = log10f((float)(v113 / (float)v45) + 1.0e-20) * 10.0;
      if (!v44)
      {
        v48 = v49;
        v49 = -0.0;
      }
      v46 = v46 + v49;
      ++v44;
      v50 = *v11;
      v47 += 4;
    }
    while (v44 < v50);
    if (v50 > 2)
      v46 = v46 / (float)(v50 - 1);
  }
  else
  {
    v48 = 0.0;
    v46 = 0.0;
  }
  if (v46 >= *((float *)this + 148) || (float)(v48 - v46) <= *((float *)this + 149))
  {
LABEL_61:
    v53 = 0;
  }
  else
  {
    if (*((double *)this + 72) > 0.0)
    {
      v51 = (caulk::concurrent::messenger *)*((_QWORD *)this + 97);
      if (v51)
      {
        v52 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
        *(_DWORD *)(v52 + 16) = 0;
        *(_QWORD *)v52 = &off_1E69CD180;
        *(_QWORD *)(v52 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v51, (caulk::concurrent::message *)v52);
      }
    }
    v53 = 1;
  }
  if (v36 == 0.0)
    v54 = 1;
  else
    v54 = v37;
  v55 = v54 | v53;
  if (v36 == 0.0)
    v56 = v37;
  else
    v56 = 1;
  if (v55)
    v57 = 1.0;
  else
    v57 = 0.0;
  if (v56 | v53)
    v58 = 1.0;
  else
    v58 = 0.0;
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  ausdk::AUElement::SetParameter(v60, 0x16u, (float)v37, 0);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  ausdk::AUElement::SetParameter(v63, 0x17u, v57, 0);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0x18u, v58, 0);
  if (*((_DWORD *)this + 150))
  {
    *((float *)this + 154) = (*(float (**)(_QWORD))(**((_QWORD **)this + 90) + 128))(*((_QWORD *)this + 90));
    *((float *)this + 155) = (*(float (**)(_QWORD))(**((_QWORD **)this + 90) + 120))(*((_QWORD *)this + 90));
    v68 = *((_QWORD *)this + 9);
    if (v68)
    {
      v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
    }
    else
    {
      v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v70)
        v69 = 0;
      else
        v69 = *v70;
    }
    ausdk::AUElement::SetParameter(v69, 0x1Fu, *((float *)this + 154), 0);
    v71 = *((_QWORD *)this + 9);
    if (v71)
    {
      v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
    }
    else
    {
      v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v73)
        v72 = 0;
      else
        v72 = *v73;
    }
    ausdk::AUElement::SetParameter(v72, 0x20u, *((float *)this + 155), 0);
  }
  v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 72))(*((_QWORD *)this + 90));
  v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 88))(*((_QWORD *)this + 90));
  v76 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 80))(*((_QWORD *)this + 90));
  v77 = v76;
  if (v74 && v75 && (v76 & 1) != 0)
    goto LABEL_126;
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  v78 = v23;
  if (!AUECMIMOLogScope(void)::scope)
  {
    v79 = MEMORY[0x1E0C81028];
LABEL_110:
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      v113 = 4.8154e-34;
      v114 = "AUECMIMO.cpp";
      v115 = 1024;
      v116 = 1253;
      v117 = 1024;
      v118 = v74;
      v119 = 1024;
      v120 = v75;
      v121 = 1024;
      v122 = v77;
      _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMIMO: ********* Reset begins *********\nAUECMIMO: state variables have finite values (1 if True): %u\nAUECMIMO: ref-signal buffers have finite values (1 if True): %u\nAUECMIMO: EC output buffers have valid values (1 if True): %u\n", (uint8_t *)&v113, 0x24u);
    }
    goto LABEL_112;
  }
  v79 = *(NSObject **)AUECMIMOLogScope(void)::scope;
  if (*(_QWORD *)AUECMIMOLogScope(void)::scope)
    goto LABEL_110;
LABEL_112:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 16))(*((_QWORD *)this + 90));
  v80 = v78;
  if (*((_DWORD *)this + 138))
  {
    v81 = 0;
    v82 = (const void **)(v11 + 4);
    p_mData = (float **)&v24->mBuffers[0].mData;
    v84 = (void **)(v12 + 16);
    do
    {
      v85 = *p_mData;
      memcpy(*v84, *v82, 4 * *((unsigned int *)this + 137));
      vDSP_vclr(v85, 1, *((unsigned int *)this + 137));
      ++v81;
      v82 += 2;
      p_mData += 2;
      v84 += 2;
    }
    while (v81 < *((unsigned int *)this + 138));
  }
  if (*((_DWORD *)this + 139))
  {
    v86 = 0;
    v87 = (float **)&v80->mBuffers[0].mData;
    do
    {
      vDSP_vclr(*v87, 1, *((unsigned int *)this + 137));
      ++v86;
      v87 += 2;
    }
    while (v86 < *((unsigned int *)this + 139));
  }
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v88 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      goto LABEL_126;
  }
  else
  {
    v88 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
  {
    v113 = 4.8151e-34;
    v114 = "AUECMIMO.cpp";
    v115 = 1024;
    v116 = 1276;
    _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d AUECMIMO: ********* Reset ends *********\n", (uint8_t *)&v113, 0x12u);
  }
LABEL_126:
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  v92 = ausdk::AUElement::GetParameter(v90, 0xEu);
  result = 0;
  *((double *)this + 72) = v92;
  LODWORD(v93) = *((_DWORD *)this + 137);
  LODWORD(v94) = *((_DWORD *)this + 136);
  v95 = *((double *)this + 79) + (double)v93 / (double)v94;
  if (v95 < 0.0)
    v95 = 0.0;
  *((double *)this + 79) = v95;
  if (v92 > 0.0 && v95 > v92)
  {
    v96 = (caulk::concurrent::messenger *)*((_QWORD *)this + 97);
    if (!v96)
      return 0;
    v97 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 72))(*((_QWORD *)this + 90));
    v98 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 88))(*((_QWORD *)this + 90));
    v99 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 80))(*((_QWORD *)this + 90));
    v100 = (_QWORD *)MEMORY[0x1E0DDB688];
    v101 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_QWORD *)(v101 + 8) = 0;
    *(_DWORD *)(v101 + 16) = 0;
    *(_OWORD *)(v101 + 24) = *(_OWORD *)((char *)this + 632);
    *(_BYTE *)(v101 + 40) = v97;
    *(_BYTE *)(v101 + 41) = v98;
    *(_BYTE *)(v101 + 42) = v99;
    *(_QWORD *)v101 = &off_1E69CD0E0;
    caulk::concurrent::messenger::enqueue(v96, (caulk::concurrent::message *)v101);
    if (*((_DWORD *)this + 138))
    {
      v102 = 0;
      do
      {
        v103 = (caulk::concurrent::messenger *)*((_QWORD *)this + 97);
        v104 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 90) + 96))(*((_QWORD *)this + 90), v102);
        v105 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 90) + 104))(*((_QWORD *)this + 90), v102);
        v106 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v100 + 16))(*v100, 40, 8);
        *(_DWORD *)(v106 + 16) = 0;
        *(_DWORD *)(v106 + 24) = v102;
        *(float *)(v106 + 28) = v104;
        *(float *)(v106 + 32) = v105;
        *(_QWORD *)v106 = &off_1E69CD108;
        *(_QWORD *)(v106 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v103, (caulk::concurrent::message *)v106);
        v102 = (v102 + 1);
      }
      while (v102 < *((_DWORD *)this + 138));
    }
    if (*((_DWORD *)this + 139))
    {
      v107 = 0;
      do
      {
        v108 = (caulk::concurrent::messenger *)*((_QWORD *)this + 97);
        v109 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 90) + 112))(*((_QWORD *)this + 90), v107);
        v110 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v100 + 16))(*v100, 32, 8);
        *(_DWORD *)(v110 + 16) = 0;
        *(_DWORD *)(v110 + 24) = v107;
        *(float *)(v110 + 28) = v109;
        *(_QWORD *)v110 = &off_1E69CD130;
        *(_QWORD *)(v110 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v108, (caulk::concurrent::message *)v110);
        v107 = (v107 + 1);
      }
      while (v107 < *((_DWORD *)this + 139));
    }
    v111 = (caulk::concurrent::messenger *)*((_QWORD *)this + 97);
    v112 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v100 + 16))(*v100, 24, 8);
    *(_DWORD *)(v112 + 16) = 0;
    *(_QWORD *)v112 = &off_1E69CD158;
    *(_QWORD *)(v112 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v111, (caulk::concurrent::message *)v112);
    goto LABEL_143;
  }
  return result;
}

uint64_t AUECMIMO::Render(AUECMIMO *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUECMIMO *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUECMIMO *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUECMIMO::BusCountWritable(AUECMIMO *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECMIMO::GetParameterList(AUECMIMO *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_OWORD *)a3 + 7) = xmmword_1B66A13B0;
    *((_QWORD *)a3 + 16) = 0x2100000020;
    a3[34] = 34;
  }
  result = 0;
  *a4 = 35;
  return result;
}

uint64_t AUECMIMO::GetParameterInfo(AUECMIMO *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x22)
  {
    v6 = off_1E69CD198[a3];
    v7 = dword_1B664A690[a3];
    v8 = flt_1B664A71C[a3];
    v9 = flt_1B664A7A8[a3];
    v10 = flt_1B664A834[a3];
    v11 = dword_1B664A8C0[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECMIMO::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUECMIMO::GetLatency(AUECMIMO *this)
{
  return 0.0;
}

double AUECMIMO::GetTailTime(AUECMIMO *this)
{
  return 0.0;
}

uint64_t AUECMIMO::SupportsTail(AUECMIMO *this)
{
  return 1;
}

BOOL AUECMIMO::StreamFormatWritable(AUECMIMO *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUECMIMO::SupportedNumChannels(AUECMIMO *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUECMIMO::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 8;
}

uint64_t AUECMIMO::ValidFormat(AUECMIMO *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 9)
    return 0;
  else
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::perform(uint64_t a1)
{
  int v1;
  float v2;
  NSObject *v3;
  caulk::concurrent::message *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v3 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "AUECMIMO.cpp";
    v8 = 1024;
    v9 = 1319;
    v10 = 1024;
    v11 = v1;
    v12 = 2048;
    v13 = v2;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: energy measure in [dB] for ref-channel %u : %f\n", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_2,int &,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUECMIMO.cpp";
    v6 = 1024;
    v7 = 1324;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_3>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::perform(uint64_t a1)
{
  int v1;
  float v2;
  float v3;
  NSObject *v4;
  caulk::concurrent::message *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (caulk::concurrent::message *)a1;
  v1 = *(_DWORD *)(a1 + 24);
  v2 = *(float *)(a1 + 28);
  v3 = *(float *)(a1 + 32);
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v4 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v8 = "AUECMIMO.cpp";
    v9 = 1024;
    v10 = 1311;
    v11 = 1024;
    v12 = v1;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: ERLE measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_1,int &,float,float>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::perform(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  caulk::concurrent::message *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = (caulk::concurrent::message *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(unsigned __int8 *)(a1 + 41);
  v5 = *(unsigned __int8 *)(a1 + 42);
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v6 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
  }
  else
  {
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316674;
    v10 = "AUECMIMO.cpp";
    v11 = 1024;
    v12 = 1303;
    v13 = 2048;
    v14 = v2;
    v15 = 2048;
    v16 = v1;
    v17 = 1024;
    v18 = v3;
    v19 = 1024;
    v20 = v4;
    v21 = 1024;
    v22 = v5;
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: ********* Logging begins *********\nAUECMIMO: logging (period, timestamp): (%f, %f) (s)\nAUECMIMO: state variables have finite values (1 if True): %u\nAUECMIMO: ref-signal buffers have finite values (1 if True): %u\nAUECMIMO: EC output buffers have valid values (1 if True): %u\n", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(&v8);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::LogMaster(void)::$_0,double &,double &,BOOL,BOOL,BOOL>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::perform(caulk::concurrent::message *a1)
{
  NSObject *v1;
  caulk::concurrent::message *v3;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (AUECMIMOLogScope(void)::once != -1)
    dispatch_once(&AUECMIMOLogScope(void)::once, &__block_literal_global_4755);
  if (AUECMIMOLogScope(void)::scope)
  {
    v1 = *(NSObject **)AUECMIMOLogScope(void)::scope;
    if (!*(_QWORD *)AUECMIMOLogScope(void)::scope)
      return caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "AUECMIMO.cpp";
    v6 = 1024;
    v7 = 1394;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUECMIMO: AOPMode detected (non-realtime logging).\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUECMIMO::CheckForAOPMode(BOOL,AudioBufferList const*)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 24, 8);
  return a1;
}

os_log_t ___ZL16AUECMIMOLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auecmo");
  *v0 = result;
  AUECMIMOLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t std::make_unique[abi:ne180100]<caulk::concurrent::messenger,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = MEMORY[0x1BCC94FFC](v6, *a2, a3);
  *a1 = v6;
  return result;
}

void sub_1B6268B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1BCC95008]();
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

vDSP_Length ActiveIntensityAnalysis::findNearestPoint(const float *a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v6;
  vDSP_Length v8;
  const float *v9;
  const float *v10;
  vDSP_Length __I;
  float __C;
  float v14;
  float v15;
  float __B;

  v15 = a5;
  __B = a4;
  v14 = a6;
  v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if ((v6 >> 1) + (v6 >> 2) != (a2 - (uint64_t)a1) >> 2)
    __assert_rtn("findNearestPoint", "ActiveIntensityAnalysis.cpp", 28, "grid.size() == 3 * N");
  v8 = v6 >> 2;
  v9 = &a1[v6 >> 2];
  v10 = &v9[v6 >> 2];
  vDSP_vsmul(a1, 1, &__B, *(float **)a3, 1, v6 >> 2);
  vDSP_vsma(v9, 1, &v15, *(const float **)a3, 1, *(float **)a3, 1, v8);
  vDSP_vsma(v10, 1, &v14, *(const float **)a3, 1, *(float **)a3, 1, v8);
  __C = 0.0;
  __I = 0;
  vDSP_maxvi(*(const float **)a3, 1, &__C, &__I, v8);
  return __I;
}

void ActiveIntensityAnalysis::calculateCartesianActiveIntensity(uint64_t a1, CLiteMatrix *this)
{
  const float *v4;
  const float *v5;
  const float *v6;
  const float *v7;
  const float *v8;
  const float *v9;
  const float *v10;
  const float *v11;
  const float *v12;
  const float *v13;
  const float *v14;
  const float *v15;
  float *v16;
  float *v17;

  v4 = (const float *)CLiteMatrix::Get(this, 0, 0);
  v6 = v5;
  v7 = (const float *)CLiteMatrix::Get(this, 1uLL, 0);
  v9 = v8;
  v10 = (const float *)CLiteMatrix::Get(this, 2uLL, 0);
  v12 = v11;
  v13 = (const float *)CLiteMatrix::Get(this, 3uLL, 0);
  v15 = v14;
  vDSP_vmul(v4, 1, v7, 1, *(float **)(a1 + 32), 1, *(_QWORD *)a1);
  vDSP_vmul(v4, 1, v13, 1, (float *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)a1), 1, *(_QWORD *)a1);
  vDSP_vmul(v4, 1, v10, 1, (float *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)a1), 1, *(_QWORD *)a1);
  vDSP_vma(v6, 1, v9, 1, *(const float **)(a1 + 32), 1, *(float **)(a1 + 32), 1, *(_QWORD *)a1);
  v16 = (float *)(*(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)a1);
  vDSP_vma(v6, 1, v15, 1, v16, 1, v16, 1, *(_QWORD *)a1);
  v17 = (float *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)a1);
  vDSP_vma(v6, 1, v12, 1, v17, 1, v17, 1, *(_QWORD *)a1);
}

void ActiveIntensityAnalysis::convertCartesianActiveIntensityToPolar(vDSP_Length *a1, float **a2)
{
  vDSP_Length v4;
  float *v5;
  float *v6;
  float *v7;
  vDSP_Length v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v4 = *a1;
  v5 = *a2;
  if (*a1)
  {
    v6 = (float *)a1[4];
    v7 = *a2;
    v8 = *a1;
    do
    {
      v9 = *v6;
      v10 = v6[v4];
      v11 = v6[2 * v4];
      *v7 = -atan2f(*v6, v10);
      v12 = hypotf(v10, v9);
      v7[v4] = atan2f(v11, v12);
      ++v7;
      ++v6;
      --v8;
    }
    while (v8);
  }
  vDSP_vsmul(v5, 1, &kRad2DegAz, v5, 1, v4);
  vDSP_vsmul(&(*a2)[*a1], 1, &kRad2DegEl, &(*a2)[*a1], 1, *a1);
}

void ParameterSwitchBox::~ParameterSwitchBox(ParameterSwitchBox *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69CD2C0;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69CD2C0;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x1BCC95CECLL);
}

const char *DSPGraph::Box::ClassName(DSPGraph::Box *this)
{
  return "Box";
}

uint64_t ParameterSwitchBox::setParameter(uint64_t this, unsigned int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;

  v3 = *(_QWORD *)(this + 776);
  v4 = *(_QWORD *)(this + 784) - v3;
  if (a2)
  {
    v5 = v4 >> 2;
    if (v5 + 1 > a2)
    {
      v6 = a2 - 1;
      if (v5 <= v6)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      *(float *)(v3 + 4 * v6) = a3;
    }
  }
  else
  {
    v7 = (int)a3;
    v8 = ((unint64_t)v4 >> 2) - 1;
    if (v8 < (int)a3)
      v7 = v8;
    *(_DWORD *)(this + 800) = v7 & ~(v7 >> 31);
  }
  return this;
}

float ParameterSwitchBox::getParameter(ParameterSwitchBox *this)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *((int *)this + 200);
  v2 = *((_QWORD *)this + 97);
  if (v1 >= (*((_QWORD *)this + 98) - v2) >> 2)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  return *(float *)(v2 + 4 * v1);
}

double ParameterSwitchBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2.16744447e233;
  *(_OWORD *)a1 = xmmword_1B66A1250;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t SourceExtentProcessor::initialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFTypeRef *a5, int a6, float a7)
{
  CFTypeRef v13;
  std::string::size_type v14;
  CFURLRef *v15;
  const void *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  __int128 v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  IR::IRDataLoader *IsReachable;
  IR::IRDataLoader *v24;
  int v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  IR::IRProcessor *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  void (*v39)(float);
  uint64_t v40;
  const __CFDictionary *v41;
  const __CFNumber *Value;
  uint64_t v43;
  const __CFNumber *v44;
  uint64_t result;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  const __CFString *v63;
  _BYTE *v64;
  std::string *v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::runtime_error *exception;
  std::string v72;
  std::string v73;
  CFTypeRef v74;
  std::string v75;
  __int128 v76;
  __int128 v77;
  char v78;
  CFTypeRef v79;
  __int128 v80;
  CFTypeRef cf;
  _OWORD v82[2];
  const void *v83;
  uint64_t v84;
  int v85;
  _BYTE v86[12];
  char v87;
  uint8_t buf[4];
  std::string *v89;
  __int16 v90;
  _BYTE *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (a4)
    *(_DWORD *)(a1 + 220) = a4;
  v13 = *a5;
  if (*a5)
  {
    CFRetain(*a5);
    v74 = v13;
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v75, v13, 0, 1, 0.0);
  }
  else
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v75, a1 + 8);
  }
  v15 = (CFURLRef *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 8);
  *(std::string *)(a1 + 8) = v75;
  *(_OWORD *)(a1 + 32) = v76;
  *(_OWORD *)(a1 + 48) = v77;
  *(_BYTE *)(a1 + 64) = v78;
  v16 = *(const void **)(a1 + 72);
  v17 = cf;
  *(_QWORD *)(a1 + 72) = v79;
  v75.__r_.__value_.__r.__words[0] = v14;
  v79 = v16;
  *(_OWORD *)(a1 + 80) = v80;
  v18 = *(CFTypeRef *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  v19 = v82[0];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)((char *)v82 + 9);
  *(_OWORD *)(a1 + 104) = v19;
  v20 = *(const void **)(a1 + 136);
  *(_DWORD *)(a1 + 152) = v85;
  v21 = v83;
  v22 = v84;
  cf = v18;
  v83 = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  if (v20)
  {
    CFRelease(v20);
    v18 = cf;
  }
  if (v18)
    CFRelease(v18);
  if (v79)
    CFRelease(v79);
  if (v75.__r_.__value_.__r.__words[0])
    CFRelease(v75.__r_.__value_.__l.__data_);
  if (v13)
    CFRelease(v13);
  IsReachable = (IR::IRDataLoader *)CFURLResourceIsReachable(*v15, 0);
  if (!(_DWORD)IsReachable)
  {
    v47 = *(uint64_t **)(a1 + 160);
    v46 = *(uint64_t **)(a1 + 168);
    while (v47 != v46)
    {
      v48 = *v47;
      *v47 = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      ++v47;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v49 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v72, "SourceExtentProcessor");
      v58 = std::string::append(&v72, "::", 2uLL);
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      v60 = std::string::append(&v73, "initialize", 0xAuLL);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v75;
      else
        v62 = (std::string *)v75.__r_.__value_.__r.__words[0];
      v63 = CFCopyDescription(*v15);
      applesauce::CF::details::CFString_get_value<true>(v63, (uint64_t)v86);
      if (v63)
        CFRelease(v63);
      v64 = v86;
      if (v87 < 0)
        v64 = *(_BYTE **)v86;
      *(_DWORD *)buf = 136315394;
      v89 = v62;
      v90 = 2080;
      v91 = v64;
      _os_log_error_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_ERROR, "%s: Could not locate an IR file at %s", buf, 0x16u);
      if (v87 < 0)
        operator delete(*(void **)v86);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
    }
    return 4294956445;
  }
  if (*(_DWORD *)(a1 + 224) == 2)
  {
    v24 = (IR::IRDataLoader *)IR::IRDataLoader::instance(IsReachable);
    v25 = IR::IRDataLoader::getAudioChannelLayoutTag(v24, (const IR::IRDataAttributes *)(a1 + 8)) & 0xFFFF0000;
    v26 = 2 * (v25 != 12517376);
    if (v25 == 12451840)
      v26 = 1;
    *(_DWORD *)(a1 + 232) = v26;
    v27 = v25 == 12517376 || v25 == 12451840;
    if (!*(_BYTE *)(a1 + 236) || !v27)
    {
      v51 = *(uint64_t **)(a1 + 160);
      v50 = *(uint64_t **)(a1 + 168);
      while (v51 != v50)
      {
        v52 = *v51;
        *v51 = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        ++v51;
      }
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v53 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        std::string::basic_string[abi:ne180100]<0>(&v72, "SourceExtentProcessor");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v72, &v73);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v73, &v75);
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v75;
        else
          v65 = (std::string *)v75.__r_.__value_.__r.__words[0];
        *(_DWORD *)v86 = 136315138;
        *(_QWORD *)&v86[4] = v65;
        _os_log_error_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, "%s: Unsupported normalization in the source extent IR file, Spatializer will ignore source size.", v86, 0xCu);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (*a5)
        return 4294956445;
      else
        return 0;
    }
    if (MEMORY[0x1BCC94E40](a1 + 8) > *(_DWORD *)(a1 + 228))
      *(_DWORD *)(a1 + 108) = MEMORY[0x1BCC94E28](a1 + 8) & 0xFFFF0000 | *(_DWORD *)(a1 + 228);
  }
  v28 = *(_QWORD *)(a1 + 168);
  if (v28 != *(_QWORD *)(a1 + 160))
  {
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v31 = (IR::IRProcessor *)operator new();
      IR::IRProcessor::IRProcessor(v31, (const IR::IRDataAttributes *)(a1 + 8), a6);
      v32 = *(_QWORD *)(a1 + 160);
      v33 = *(_QWORD *)(v32 + 8 * v29);
      *(_QWORD *)(v32 + 8 * v29) = v31;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)v34 + 16))(v34, a2, a3, 0, 0, 0, 0, a7))
      {
        break;
      }
      v35 = *(_QWORD *)(a1 + 184);
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v29);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 72))(v36);
      LODWORD(v75.__r_.__value_.__l.__data_) = 0;
      std::vector<float>::resize(v35 + 24 * v29, v37, &v75);
      v38 = *(_DWORD *)(a1 + 224);
      if (v38 == 1)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v29);
        (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v40 + 144))(v40, 7, (float)(v30 | 0x10000));
      }
      else if (!v38)
      {
        v39 = *(void (**)(float))(**(_QWORD **)(*(_QWORD *)(a1 + 160) + 8 * v29) + 144);
        if (v30)
          v39(2.0);
        else
          v39(1.0);
      }
      v28 = *(_QWORD *)(a1 + 160);
      v29 = ++v30;
      if (v30 >= (unint64_t)((*(_QWORD *)(a1 + 168) - v28) >> 3))
        goto LABEL_39;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v54 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v72, "SourceExtentProcessor");
      v66 = std::string::append(&v72, "::", 2uLL);
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = std::string::append(&v73, "initialize", 0xAuLL);
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      v70 = &v75;
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v70 = (std::string *)v75.__r_.__value_.__r.__words[0];
      *(_DWORD *)v86 = 136315138;
      *(_QWORD *)&v86[4] = v70;
      _os_log_error_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_ERROR, "%s: Could not initialize source extent processor, Spatializer will ignore source size.", v86, 0xCu);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
    }
    v56 = *(uint64_t **)(a1 + 160);
    v55 = *(uint64_t **)(a1 + 168);
    while (v56 != v55)
    {
      v57 = *v56;
      *v56 = 0;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      ++v56;
    }
    return 4294956445;
  }
LABEL_39:
  *(_QWORD *)(a1 + 240) = 0x3F80000000000000;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v28 + 104))(&v73);
  v41 = (const __CFDictionary *)v73.__r_.__value_.__r.__words[0];
  if (v73.__r_.__value_.__r.__words[0])
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v75, "SourceExtentFilterDelay");
    Value = (const __CFNumber *)CFDictionaryGetValue(v41, v75.__r_.__value_.__l.__data_);
    if (v75.__r_.__value_.__r.__words[0])
      CFRelease(v75.__r_.__value_.__l.__data_);
    if (Value)
    {
      v43 = applesauce::CF::convert_as<float,0>(Value);
      if ((v43 & 0xFF00000000) != 0)
        *(_DWORD *)(a1 + 240) = vcvtas_u32_f32(*(float *)&v43 * a7);
    }
    if (!v73.__r_.__value_.__r.__words[0])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    v44 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[23]>((const __CFDictionary *)v73.__r_.__value_.__l.__data_, "SourceExtentSizeWeight");
    if (((unint64_t)v44 & 0xFF00000000) != 0)
      *(_DWORD *)(a1 + 244) = (_DWORD)v44;
    if (v73.__r_.__value_.__r.__words[0])
      CFRelease(v73.__r_.__value_.__l.__data_);
  }
  result = 0;
  *(_BYTE *)(a1 + 208) = 1;
  return result;
}

void sub_1B6269998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,CFTypeRef cf)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&__p);
  _Unwind_Resume(a1);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[23]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[23]>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[23]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_1B6269B48(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B6269B2CLL);
}

void SourceExtentProcessor::updateExtentParameters(SourceExtentProcessor *this, float a2, float a3)
{
  _QWORD *v4;
  _QWORD *i;
  NSObject *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  int64_t v17;
  uint8_t buf[4];
  void **v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 208))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 20);
    for (i = (_QWORD *)*((_QWORD *)this + 21); v4 != i; ++v4)
    {
      if (*v4)
      {
        (*(void (**)(_QWORD, _QWORD, float))(*(_QWORD *)*v4 + 144))(*v4, 0, (float)(*((float *)this + 61) * a2) * 360.0);
        (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v4 + 144))(*v4, 1, (float)(*((float *)this + 61) * a3) * 180.0);
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v8 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "SourceExtentProcessor");
      v9 = std::string::append(&v14, "::", 2uLL);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v15, "updateExtentParameters", 0x16uLL);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = __p;
      if (v17 < 0)
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v19 = v13;
      _os_log_error_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%s: Uninitialized", buf, 0xCu);
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B6269D7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void StringArrayDecoder::BlobToStringArray_Priv(float **a1, uint64_t a2)
{
  float *v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::__split_buffer<std::string> __v;

  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)a2);
  v4 = *a1;
  v5 = **a1 + 0.5;
  v6 = (unint64_t)v5;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3) >= (unint64_t)v5)
  {
    if (!v6)
      return;
  }
  else
  {
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(a2 + 16, (unint64_t)v5);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v7);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v7);
    __v.__end_cap_.__value_ = &__v.__first_[v8];
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  v9 = 0;
  do
  {
    memset(&__v, 0, 24);
    v10 = v4 + 1;
    v11 = v4[1];
    std::string::reserve((std::string *)&__v, (unint64_t)(v11 + 0.5));
    v12 = (unint64_t)v11;
    if ((unint64_t)v11)
    {
      v13 = v4 + 2;
      v14 = 4 * v12;
      do
      {
        std::string::push_back((std::string *)&__v, (int)(*v13++ + 0.5));
        v14 -= 4;
      }
      while (v14);
    }
    v15 = *(_QWORD *)(a2 + 8);
    if (v15 >= *(_QWORD *)(a2 + 16))
    {
      v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&__v);
    }
    else
    {
      if (SHIBYTE(__v.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
      }
      else
      {
        v16 = *(_OWORD *)&__v.__first_;
        *(_QWORD *)(v15 + 16) = __v.__end_;
        *(_OWORD *)v15 = v16;
      }
      v17 = v15 + 24;
      *(_QWORD *)(a2 + 8) = v15 + 24;
    }
    *(_QWORD *)(a2 + 8) = v17;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v4 = &v10[v12];
    ++v9;
  }
  while (v9 != v6);
}

void sub_1B6269F50(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double MoorePenrose::setMandN(MoorePenrose *this, unint64_t a2, unint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  double result;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a2);
  *(_OWORD *)this = v22;
  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 3) = v6;
    operator delete(v6);
  }
  *((_OWORD *)this + 1) = v23;
  *((_QWORD *)this + 4) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a2);
  *(_OWORD *)((char *)this + 40) = v22;
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  *(_OWORD *)((char *)this + 56) = v23;
  *((_QWORD *)this + 9) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a3);
  *((_OWORD *)this + 5) = v22;
  v8 = (void *)*((_QWORD *)this + 12);
  if (v8)
  {
    *((_QWORD *)this + 13) = v8;
    operator delete(v8);
  }
  *((_OWORD *)this + 6) = v23;
  *((_QWORD *)this + 14) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a2, a3);
  *(_OWORD *)((char *)this + 120) = v22;
  v9 = (void *)*((_QWORD *)this + 17);
  if (v9)
  {
    *((_QWORD *)this + 18) = v9;
    operator delete(v9);
  }
  *(_OWORD *)((char *)this + 136) = v23;
  *((_QWORD *)this + 19) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a2);
  *((_OWORD *)this + 10) = v22;
  v10 = (void *)*((_QWORD *)this + 22);
  if (v10)
  {
    *((_QWORD *)this + 23) = v10;
    operator delete(v10);
  }
  *((_OWORD *)this + 11) = v23;
  *((_QWORD *)this + 24) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a3);
  *(_OWORD *)((char *)this + 200) = v22;
  v11 = (void *)*((_QWORD *)this + 27);
  if (v11)
  {
    *((_QWORD *)this + 28) = v11;
    operator delete(v11);
  }
  *(_OWORD *)((char *)this + 216) = v23;
  *((_QWORD *)this + 29) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a3);
  *((_OWORD *)this + 15) = v22;
  v12 = (void *)*((_QWORD *)this + 32);
  if (v12)
  {
    *((_QWORD *)this + 33) = v12;
    operator delete(v12);
  }
  *((_OWORD *)this + 16) = v23;
  *((_QWORD *)this + 34) = v24;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v22, a3, a2);
  *(_OWORD *)((char *)this + 280) = v22;
  v13 = (void *)*((_QWORD *)this + 37);
  if (v13)
  {
    *((_QWORD *)this + 38) = v13;
    operator delete(v13);
  }
  *(_OWORD *)((char *)this + 296) = v23;
  *((_QWORD *)this + 39) = v24;
  std::vector<__CLPK_complex>::vector(&v22, a3 * a2);
  v14 = (void *)*((_QWORD *)this + 40);
  if (v14)
  {
    *((_QWORD *)this + 41) = v14;
    operator delete(v14);
  }
  *((_OWORD *)this + 20) = v22;
  *((_QWORD *)this + 42) = v23;
  if (a3 >= a2)
    v15 = a2;
  else
    v15 = a3;
  std::vector<float>::vector(&v22, v15);
  v16 = (void *)*((_QWORD *)this + 43);
  if (v16)
  {
    *((_QWORD *)this + 44) = v16;
    operator delete(v16);
  }
  *(_OWORD *)((char *)this + 344) = v22;
  *((_QWORD *)this + 45) = v23;
  std::vector<__CLPK_complex>::vector(&v22, a2 * a2);
  v17 = (void *)*((_QWORD *)this + 46);
  if (v17)
  {
    *((_QWORD *)this + 47) = v17;
    operator delete(v17);
  }
  *((_OWORD *)this + 23) = v22;
  *((_QWORD *)this + 48) = v23;
  std::vector<__CLPK_complex>::vector(&v22, a3 * a3);
  v18 = (void *)*((_QWORD *)this + 49);
  if (v18)
  {
    *((_QWORD *)this + 50) = v18;
    operator delete(v18);
  }
  *(_OWORD *)((char *)this + 392) = v22;
  *((_QWORD *)this + 51) = v23;
  std::vector<__CLPK_complex>::vector(&v22, a3 + 2 * a2);
  v19 = (void *)*((_QWORD *)this + 52);
  if (v19)
  {
    *((_QWORD *)this + 53) = v19;
    operator delete(v19);
  }
  *((_OWORD *)this + 26) = v22;
  *((_QWORD *)this + 54) = v23;
  std::vector<float>::vector(&v22, 5 * v15);
  v20 = (void *)*((_QWORD *)this + 55);
  if (v20)
  {
    *((_QWORD *)this + 56) = v20;
    operator delete(v20);
  }
  result = *(double *)&v22;
  *(_OWORD *)((char *)this + 440) = v22;
  *((_QWORD *)this + 57) = v23;
  return result;
}

_QWORD *std::vector<__CLPK_complex>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1B626A36C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MoorePenrose::pseudoInverse(MoorePenrose *this, CLiteMatrix *a2, const CLiteMatrix *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v7;
  int v8;
  vDSP_Length *v9;
  __CLPK_integer v10;
  unint64_t i;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __CLPK_integer v17;
  const CLiteMatrix *v18;
  const CLiteMatrix *v19;
  const CLiteMatrix *v20;
  CLiteMatrix *v21;
  CLiteMatrix *v22;
  char __jobvt;
  char __jobu;
  __CLPK_integer v25;
  __CLPK_integer v26;
  __CLPK_integer __n;
  __CLPK_integer __lda;

  v3 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 != *((_QWORD *)a2 + 1))
    __assert_rtn("pseudoInverse", "MoorePenrose.cpp", 43, "A.NumRows()==Aplus.NumCols()");
  v5 = *((_QWORD *)a3 + 1);
  if (v5 != *(_QWORD *)a2)
    __assert_rtn("pseudoInverse", "MoorePenrose.cpp", 44, "A.NumCols()==Aplus.NumRows()");
  __n = *((_QWORD *)a3 + 1);
  __lda = v3;
  CLiteMatrix::ToCLPKComplex(a3, (_QWORD *)this + 40);
  if ((int)v5 >= (int)v3)
    v7 = v3;
  else
    v7 = v5;
  if ((int)v3 <= (int)v5)
    v8 = v5;
  else
    v8 = v3;
  v25 = 0;
  v26 = v8 + 2 * v7;
  __jobu = 65;
  __jobvt = 65;
  cgesvd_(&__jobu, &__jobvt, &__lda, &__n, *((__CLPK_complex **)this + 40), &__lda, *((__CLPK_real **)this + 43), *((__CLPK_complex **)this + 46), &__lda, *((__CLPK_complex **)this + 49), &__n, *((__CLPK_complex **)this + 52), &v26, *((__CLPK_real **)this + 55), &v25);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this, (_QWORD *)this + 46);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 30, (_QWORD *)this + 49);
  v9 = (vDSP_Length *)((char *)this + 200);
  CLiteMatrix::SetWithConjugateTranposeOfOther((MoorePenrose *)((char *)this + 200), (MoorePenrose *)((char *)this + 240));
  v10 = __n;
  if (__n >= __lda)
    v10 = __lda;
  if (v10)
  {
    for (i = 0; i < v17; ++i)
    {
      v12 = *(_DWORD *)(*((_QWORD *)this + 43) + 4 * i);
      *(_DWORD *)CLiteMatrix::Get((MoorePenrose *)((char *)this + 80), i, i) = v12;
      v13 = *(float *)(*((_QWORD *)this + 43) + 4 * i);
      v14 = fabsf(v13);
      v15 = 1.0 / v13;
      if (v14 >= 0.00000011921)
        v16 = v15;
      else
        v16 = 0.0;
      *(float *)CLiteMatrix::Get((MoorePenrose *)((char *)this + 120), i, i) = v16;
      v17 = __n;
      if (__n >= __lda)
        v17 = __lda;
    }
  }
  v18 = (MoorePenrose *)((char *)this + 40);
  CLiteMatrix::SetWithConjugateTranposeOfOther((MoorePenrose *)((char *)this + 40), this);
  v19 = (MoorePenrose *)((char *)this + 160);
  CLiteMatrix::SetWithConjugateTranposeOfOther((MoorePenrose *)((char *)this + 160), (MoorePenrose *)((char *)this + 120));
  v20 = (MoorePenrose *)((char *)this + 280);
  CLiteMatrix::MatrixMultiply(v9, v19, v20, v21);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)v20, v18, a2, v22);
}

void CLiteMatrix::ToCLPKComplex(CLiteMatrix *this, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t i;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this * v3 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "LiteMatrix.h";
      v13 = 1024;
      v14 = 319;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad argument size", (uint8_t *)&v11, 0x12u);
    }
    __break(1u);
  }
  if (v3)
  {
    v6 = 0;
    for (i = 0; i < v3; ++i)
    {
      if (v2)
      {
        v8 = 0;
        v9 = 8 * v6;
        do
        {
          *(float *)(*a2 + v9) = CLiteMatrix::Get(this, v8, i);
          CLiteMatrix::Get(this, v8, i);
          *(_DWORD *)(*a2 + v9 + 4) = v10;
          ++v8;
          v2 = *(_QWORD *)this;
          v9 += 8;
        }
        while (v8 < *(_QWORD *)this);
        v6 += v8;
        v3 = *((_QWORD *)this + 1);
      }
    }
  }
}

unint64_t *CLiteMatrix::FromCLPKComplex(unint64_t *this, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  unint64_t i;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _DWORD *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = this[1];
  if (*this * v3 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v13 = 136315394;
      v14 = "LiteMatrix.h";
      v15 = 1024;
      v16 = 340;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad argument size", (uint8_t *)&v13, 0x12u);
    }
    __break(1u);
  }
  if (v3)
  {
    v5 = this;
    v6 = 0;
    for (i = 0; i < v3; ++i)
    {
      if (v2)
      {
        v8 = 0;
        v9 = 8 * v6;
        do
        {
          v10 = *(_DWORD *)(*a2 + v9);
          *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)v5, v8, i) = v10;
          v11 = *(_DWORD *)(*a2 + v9 + 4);
          this = (unint64_t *)CLiteMatrix::Get((CLiteMatrix *)v5, v8, i);
          *v12 = v11;
          ++v8;
          v2 = *v5;
          v9 += 8;
        }
        while (v8 < *v5);
        v6 += v8;
        v3 = v5[1];
      }
    }
  }
  return this;
}

float CLiteMatrix::Get(CLiteMatrix *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this <= a2 || (v3 = *((_QWORD *)this + 1), v3 <= a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "LiteMatrix.h";
      v7 = 1024;
      v8 = 270;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  subscript out of bounds", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
  }
  return *(float *)(*((_QWORD *)this + 2) + 4 * (a3 + v3 * a2));
}

float ViterbiOdep::normalizeLik(vDSP_Length *this, float *__A)
{
  float result;
  float __C;

  __C = 0.0;
  vDSP_sve(__A, 1, &__C, *this);
  __C = 1.0 / __C;
  vDSP_vsmul(__A, 1, &__C, __A, 1, *this);
  return result;
}

void HRTFNFSpatializer::~HRTFNFSpatializer(HRTFNFSpatializer *this)
{
  HRTFNFSpatializer::~HRTFNFSpatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = &off_1E69CD5C8;
  v2 = (void *)*((_QWORD *)this + 92);
  if (v2)
  {
    *((_QWORD *)this + 93) = v2;
    operator delete(v2);
  }
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 91, 0);
  v3 = (void *)*((_QWORD *)this + 86);
  if (v3)
  {
    *((_QWORD *)this + 87) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v4)
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v4);
  v5 = (void *)*((_QWORD *)this + 80);
  if (v5)
  {
    *((_QWORD *)this + 81) = v5;
    operator delete(v5);
  }
  IR::IRDataAttributes::~IRDataAttributes((HRTFNFSpatializer *)((char *)this + 480));
  v6 = (void *)*((_QWORD *)this + 57);
  if (v6)
  {
    *((_QWORD *)this + 58) = v6;
    operator delete(v6);
  }
  std::__optional_destruct_base<IR::FixedIntegerDelay,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 392);
  v9 = (void **)((char *)this + 368);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v7)
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v7);
  v8 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  Spatializer::~Spatializer(this);
}

double HRTFNFSpatializer::setParams(HRTFNFSpatializer *this, const SpatializerParams *a2)
{
  double result;

  Spatializer::setParams(this, a2);
  result = *((double *)this + 6);
  *((double *)this + 84) = result;
  return result;
}

uint64_t HRTFNFSpatializer::setAzimuth(uint64_t this, float a2)
{
  *(float *)(this + 48) = a2;
  if (vabds_f32(a2, *(float *)(this + 672)) > 0.2)
  {
    *(float *)(this + 672) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t HRTFNFSpatializer::setElevation(uint64_t this, float a2)
{
  *(float *)(this + 52) = a2;
  if (vabds_f32(a2, *(float *)(this + 676)) > 0.2)
  {
    *(float *)(this + 676) = a2;
    *(_BYTE *)(this + 320) = 1;
  }
  return this;
}

uint64_t HRTFNFSpatializer::initialize(HRTFNFSpatializer *this, float a2, unsigned int a3, uint64_t a4)
{
  IR::DelayLine **v7;
  IR::DelayLine **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  BypassableIRProcessor *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  int v23;
  int v24;
  int v25;
  char v26;
  char v27;
  std::string::size_type v28;
  unint64_t v29;
  std::string::size_type *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string::size_type *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string::size_type v42;
  int64x2_t v43;
  IR::DelayLine *v44;
  uint64_t v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  unsigned int v48;
  const __CFDictionary *v49;
  const void *v50;
  uint64_t v51;
  _UNKNOWN **v52;
  uint64_t v53;
  NSObject *v54;
  int TailLength;
  int v56;
  BypassableIRProcessor *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  IR::DelayLine *v61;
  int v62;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  const __CFURL *v69;
  CFStringRef v70;
  const char *CStringPtr;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  _BYTE *v76;
  _BYTE *v77;
  std::string *v78;
  std::runtime_error *exception;
  CFTypeRef v81;
  const __CFDictionary *v82;
  CFTypeRef cf;
  std::string v84;
  std::string v85;
  std::string v86;
  _BYTE theString[12];
  __int16 v88;
  int v89;
  _BYTE v90[32];
  char *v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  *((_BYTE *)this + 666) = *((_BYTE *)this + 664);
  v8 = (IR::DelayLine **)*((_QWORD *)this + 46);
  v7 = (IR::DelayLine **)*((_QWORD *)this + 47);
  if (v7 != v8)
  {
    do
      std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](--v7, 0);
    while (v7 != v8);
    v7 = (IR::DelayLine **)*((_QWORD *)this + 46);
  }
  *((_QWORD *)this + 47) = v8;
  v9 = *((_QWORD *)this + 48);
  if ((unint64_t)(v9 - (_QWORD)v7) <= 0xF)
  {
    v91 = (char *)this + 384;
    v10 = (char *)operator new(0x10uLL);
    v11 = &v10[((char *)v8 - (char *)v7) & 0xFFFFFFFFFFFFFFF8];
    if (v8 == v7)
    {
      v14 = vdupq_n_s64((unint64_t)v8);
      v12 = &v10[((char *)v8 - (char *)v7) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v12 = &v10[((char *)v8 - (char *)v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v13 = (uint64_t)*--v8;
        *v8 = 0;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v8 != v7);
      v14 = *((int64x2_t *)this + 23);
      v9 = *((_QWORD *)this + 48);
    }
    *((_QWORD *)this + 46) = v12;
    *((_QWORD *)this + 47) = v11;
    *(int64x2_t *)&v90[8] = v14;
    *((_QWORD *)this + 48) = v10 + 16;
    *(_QWORD *)&v90[24] = v9;
    *(_QWORD *)v90 = v14.i64[0];
    std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer((uint64_t)v90);
  }
  *(_DWORD *)v90 = 0;
  std::vector<float>::assign((char **)this + 57, 2uLL, v90);
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 44) + 16))(*((_QWORD *)this + 44), a4, 128, 0, *((unsigned __int8 *)this + 665), 0, 0, a2);
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v16 = getAUSMV2Log(void)::gLog;
  if ((_DWORD)v15)
  {
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v86, "HRTFNFSpatializer");
      v64 = std::string::append(&v86, "::", 2uLL);
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      v66 = std::string::append(&v84, "initialize", 0xAuLL);
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &v85;
      else
        v68 = (std::string *)v85.__r_.__value_.__r.__words[0];
      v69 = *(const __CFURL **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 224))(*((_QWORD *)this + 44));
      if (!v69)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      v70 = CFURLCopyFileSystemPath(v69, kCFURLPOSIXPathStyle);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)theString, v70);
      CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)theString, 0x8000100u);
      *(_DWORD *)v90 = 136315650;
      *(_QWORD *)&v90[4] = v68;
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = v15;
      *(_WORD *)&v90[18] = 2080;
      *(_QWORD *)&v90[20] = CStringPtr;
      _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "%s: error %d while initializing the HRIR processor with fileURL=%s", v90, 0x1Cu);
      if (*(_QWORD *)theString)
        CFRelease(*(CFTypeRef *)theString);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
    }
    v17 = *((_QWORD *)this + 85);
    *((_QWORD *)this + 85) = 0;
    if (v17)
      std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v17);
    v18 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (v18)
      std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v18);
    std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 91, 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v84, "HRTFNFSpatializer");
      v72 = std::string::append(&v84, "::", 2uLL);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v85, "initialize", 0xAuLL);
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      *(_QWORD *)&v90[16] = *((_QWORD *)&v74->__r_.__value_.__l + 2);
      *(_OWORD *)v90 = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      v76 = v90;
      if (v90[23] < 0)
        v76 = *(_BYTE **)v90;
      LODWORD(v86.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v76;
      _os_log_debug_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%s: Initializing.", (uint8_t *)&v86, 0xCu);
      if ((v90[23] & 0x80000000) != 0)
        operator delete(*(void **)v90);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (*((_BYTE *)this + 666))
    {
      v19 = (BypassableIRProcessor *)operator new();
      BypassableIRProcessor::BypassableIRProcessor(v19, (HRTFNFSpatializer *)((char *)this + 480), 2u);
      v20 = *((_QWORD *)this + 45);
      *((_QWORD *)this + 45) = v19;
      if (v20)
      {
        std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v20);
        v19 = (BypassableIRProcessor *)*((_QWORD *)this + 45);
      }
      cf = 0;
      v21 = (**(uint64_t (***)(BypassableIRProcessor *, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float))v19)(v19, a4, 128, 512, &cf, 0, 0, a2);
      if (cf)
        CFRelease(cf);
      if (v21)
      {
        *((_BYTE *)this + 666) = 0;
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v22 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          std::string::basic_string[abi:ne180100]<0>(&v84, "HRTFNFSpatializer");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v84, &v85);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v85, (std::string *)v90);
          if (v90[23] >= 0)
            v77 = v90;
          else
            v77 = *(_BYTE **)v90;
          LODWORD(v86.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
          WORD2(v86.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v21;
          _os_log_error_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%s: error %d while initializing the NF processor", (uint8_t *)&v86, 0x12u);
          if ((v90[23] & 0x80000000) != 0)
            operator delete(*(void **)v90);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
        }
      }
    }
    v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 96))(*((_QWORD *)this + 44));
    if (*((_BYTE *)this + 666))
      v24 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 45) + 88))(*((_QWORD *)this + 45), 0);
    else
      v24 = 0;
    v25 = v24 + v23;
    v26 = 1;
    do
    {
      v27 = v26;
      v28 = operator new();
      IR::DelayLine::DelayLine(v28, v25, 7, 1uLL, 0, a4);
      v85.__r_.__value_.__r.__words[0] = v28;
      v30 = (std::string::size_type *)*((_QWORD *)this + 47);
      v29 = *((_QWORD *)this + 48);
      if ((unint64_t)v30 >= v29)
      {
        v31 = *((_QWORD *)this + 46);
        v32 = ((uint64_t)v30 - v31) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v34 = v29 - v31;
        if (v34 >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        v91 = (char *)this + 384;
        if (v35)
          v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v35);
        else
          v36 = 0;
        v37 = (std::string::size_type *)(v35 + 8 * v32);
        v38 = v35 + 8 * v36;
        *(_QWORD *)&v90[24] = v38;
        v85.__r_.__value_.__r.__words[0] = 0;
        *v37 = v28;
        v39 = v37 + 1;
        *(_QWORD *)&v90[16] = v37 + 1;
        v41 = (_QWORD *)*((_QWORD *)this + 46);
        v40 = (_QWORD *)*((_QWORD *)this + 47);
        if (v40 == v41)
        {
          v44 = 0;
          v43 = vdupq_n_s64((unint64_t)v40);
        }
        else
        {
          do
          {
            v42 = *--v40;
            *v40 = 0;
            *--v37 = v42;
          }
          while (v40 != v41);
          v43 = *((int64x2_t *)this + 23);
          v39 = *(_QWORD **)&v90[16];
          v38 = *(_QWORD *)&v90[24];
          v44 = (IR::DelayLine *)v85.__r_.__value_.__r.__words[0];
        }
        *((_QWORD *)this + 46) = v37;
        *((_QWORD *)this + 47) = v39;
        *(int64x2_t *)&v90[8] = v43;
        v45 = *((_QWORD *)this + 48);
        *((_QWORD *)this + 48) = v38;
        *(_QWORD *)&v90[24] = v45;
        *(_QWORD *)v90 = v43.i64[0];
        std::__split_buffer<std::unique_ptr<IR::DelayLine>>::~__split_buffer((uint64_t)v90);
        *((_QWORD *)this + 47) = v39;
        if (v44)
        {
          IR::DelayLine::~DelayLine(v44);
          MEMORY[0x1BCC95CEC]();
        }
      }
      else
      {
        *v30 = v28;
        *((_QWORD *)this + 47) = v30 + 1;
      }
      v26 = 0;
    }
    while ((v27 & 1) != 0);
    std::vector<float>::resize((uint64_t)this + 640, a4);
    *(_DWORD *)v90 = 0;
    std::vector<float>::resize((uint64_t)this + 136, a3, v90);
    *(_DWORD *)v90 = 0;
    std::vector<float>::resize((uint64_t)this + 272, a3, v90);
    *((_WORD *)this + 8) = 257;
    v46 = (const __CFDictionary *)*((_QWORD *)this + 5);
    if (v46)
    {
      *(_QWORD *)v90 = 0;
      applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(&v82, v46, (const void *)kOptionalFeatureSupport, v90);
      if (*(_QWORD *)v90)
        CFRelease(*(CFTypeRef *)v90);
      v47 = v82;
      if (!v82)
        goto LABEL_82;
      v48 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v82, (const void *)kOptionalFeatureSourceExtent);
      if (v48 <= 0x100)
        LOBYTE(v48) = 0;
      if ((_BYTE)v48)
      {
        std::vector<float>::resize((uint64_t)this + 688, a4);
        IR::getPresetDataAttributes();
        v49 = (const __CFDictionary *)*((_QWORD *)this + 4);
        if (v49)
        {
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&v85, v49, (const void *)kBinauralSourceExtentIRCustomURLParamName);
          if (v85.__r_.__value_.__s.__data_[8])
          {
            v50 = *(const void **)v90;
            *(_QWORD *)v90 = v85.__r_.__value_.__r.__words[0];
            if (v85.__r_.__value_.__r.__words[0])
              CFRetain(v85.__r_.__value_.__l.__data_);
            if (v50)
              CFRelease(v50);
          }
          std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
        }
        v51 = operator new();
        BypassableIRProcessor::BypassableIRProcessor((BypassableIRProcessor *)v51, (const IR::IRDataAttributes *)v90, a3);
        v52 = &off_1E69CD550;
        *(_QWORD *)v51 = &off_1E69CD550;
        *(_DWORD *)(v51 + 224) = 0;
        *(_QWORD *)(v51 + 228) = 0x100000000;
        *(_BYTE *)(v51 + 236) = 0;
        *(_QWORD *)(v51 + 240) = 0x3F80000000000000;
        v53 = *((_QWORD *)this + 85);
        *((_QWORD *)this + 85) = v51;
        if (v53)
        {
          std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v53);
          v51 = *((_QWORD *)this + 85);
          v52 = *(_UNKNOWN ***)v51;
        }
        v81 = 0;
        v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float))*v52)(v51, a4, 512, 512, &v81, 0, 0, a2);
        if (v81)
          CFRelease(v81);
        if ((_DWORD)v15)
        {
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v54 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            std::string::basic_string[abi:ne180100]<0>(&v86, "HRTFNFSpatializer");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v86, &v84);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &v84, &v85);
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v78 = &v85;
            else
              v78 = (std::string *)v85.__r_.__value_.__r.__words[0];
            *(_DWORD *)theString = 136315394;
            *(_QWORD *)&theString[4] = v78;
            v88 = 1024;
            v89 = v15;
            _os_log_error_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_ERROR, "%s: error %d while initializing the source extent processor", theString, 0x12u);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
          }
        }
        if (v94)
          CFRelease(v94);
        if (v93)
          CFRelease(v93);
        if (v92)
          CFRelease(v92);
        if (*(_QWORD *)v90)
          CFRelease(*(CFTypeRef *)v90);
      }
      else
      {
LABEL_82:
        v15 = 0;
      }
    }
    else
    {
      v47 = 0;
      v15 = 0;
      v82 = 0;
    }
    if (*((_BYTE *)this + 666))
      TailLength = BypassableIRProcessor::getTailLength(*((BypassableIRProcessor **)this + 45));
    else
      TailLength = 0;
    v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 128))(*((_QWORD *)this + 44));
    v57 = (BypassableIRProcessor *)*((_QWORD *)this + 85);
    if (v57)
      LODWORD(v57) = BypassableIRProcessor::getTailLength(v57);
    *((_DWORD *)this + 5) = TailLength + v25 + (_DWORD)v57 + v56;
    if (*((_BYTE *)this + 666))
    {
      v58 = *((_QWORD *)this + 45);
      if ((TailLength + 128) > *(_DWORD *)(v58 + 220))
        *(_DWORD *)(v58 + 220) = TailLength + 128;
    }
    *((_DWORD *)this + 167) = -1;
    v59 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 120))(*((_QWORD *)this + 44));
    v60 = operator new();
    v61 = (IR::DelayLine *)v60;
    if (v59 <= 0x80)
      v62 = 128;
    else
      v62 = v59;
    IR::DelayLine::DelayLine(v60, v62 + 55, 0, 1uLL, 0, a4);
    std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 91, v61);
    std::vector<float>::resize((uint64_t)this + 736, a4);
    if (v47)
      CFRelease(v47);
  }
  return v15;
}

void sub_1B626B5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void HRTFNFSpatializer::reset(HRTFNFSpatializer *this)
{
  uint64_t v2;
  uint64_t v3;
  IR::DelayLine **v4;
  IR::DelayLine **v5;
  IR::DelayLine *v6;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 44) + 32))(*((_QWORD *)this + 44));
  v2 = *((_QWORD *)this + 85);
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
  v3 = *((_QWORD *)this + 45);
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, 1);
  v4 = (IR::DelayLine **)*((_QWORD *)this + 46);
  v5 = (IR::DelayLine **)*((_QWORD *)this + 47);
  while (v4 != v5)
  {
    if (*v4)
      IR::DelayLine::reset(*v4);
    ++v4;
  }
  v6 = (IR::DelayLine *)*((_QWORD *)this + 91);
  if (v6)
    IR::DelayLine::reset(v6);
  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  *((_DWORD *)this + 167) = -1;
}

uint64_t HRTFNFSpatializer::processAccumulating(HRTFNFSpatializer *this, float *a2, float *const *a3, int a4, std::string::pointer *a5, uint64_t a6, vDSP_Length a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  unsigned __int8 v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  uint64_t (***v17)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float);
  float v18;
  uint64_t v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _BYTE *v27;
  _BOOL8 v28;
  NSObject *v30;
  uint64_t result;
  NSObject *v32;
  std::string *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  _BYTE *v39;
  _BOOL8 v40;
  float v41;
  float v42;
  float v43;
  float v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *p_p;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __float2 v60;
  __float2 v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  _QWORD *v68;
  _BYTE *v69;
  _BOOL8 v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  float v74;
  IR::DelayLine *v75;
  float v76;
  float v77;
  __float2 v78;
  __float2 v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  __float2 v92;
  float sinval;
  float cosval;
  float v95;
  __float2 v96;
  float v97;
  float v98;
  float v99;
  _BOOL8 v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  float v105;
  BOOL v106;
  float v107;
  uint64_t v108;
  float v109;
  char v110;
  char v111;
  float *v112;
  float v113;
  std::string::pointer v114;
  float *v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  IR::DelayLine *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v133;
  __float2 v134;
  uint64_t v135;
  char v136;
  char v137;
  float *v138;
  float v139;
  std::string::pointer v140;
  float *v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  _QWORD *v148;
  float v149;
  float v150;
  unsigned __int8 *v151;
  _BOOL8 v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  float v169;
  __n128 v170;
  float v171;
  float v172;
  float v173;
  float v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  _BOOL4 v179;
  float *v180;
  float v181;
  uint64_t v182;
  float v183;
  IR::DelayLine *v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float *v188;
  _QWORD *v189;
  float v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  float v197;
  float *v198;
  float v199;
  float v200;
  float v201;
  float *const *v202;
  uint64_t v203;
  float v204;
  uint64_t v205;
  IR::DelayLine *v206;
  unsigned int v207;
  unsigned int v208;
  BOOL v209;
  unsigned int v210;
  uint64_t v211;
  std::runtime_error *exception;
  unsigned int v213;
  _BOOL4 v214;
  CFTypeRef cf;
  std::string v218;
  std::string v219;
  uint8_t buf[4];
  std::string *v221;
  __int16 v222;
  int v223;
  std::string __p;
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a6 != a4)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v30 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v218, "HRTFNFSpatializer");
      v50 = std::string::append(&v218, "::", 2uLL);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      v52 = std::string::append(&v219, "processAccumulating", 0x13uLL);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v221 = p_p;
      v222 = 1024;
      v223 = a4;
      _os_log_debug_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%s: ERROR: wrong number of output channels %d", buf, 0x12u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v218.__r_.__value_.__l.__data_);
    }
    return 4294956445;
  }
  if (!*((_BYTE *)this + 16))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      return 4294956429;
    std::string::basic_string[abi:ne180100]<0>(&v218, "HRTFNFSpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v218, &v219);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &v219, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &__p;
    else
      v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v221 = v33;
    goto LABEL_82;
  }
  if (*((_QWORD *)this + 85))
  {
    v14 = atomic_load((unsigned __int8 *)this + 322);
    if ((v14 & 1) != 0)
    {
      v15 = (const __CFDictionary *)*((_QWORD *)this + 4);
      if (v15)
      {
        if (applesauce::CF::details::has_key<__CFString const*&>(v15, (const void *)kBinauralSourceExtentIRCustomURLParamName))
        {
          v16 = (const __CFDictionary *)*((_QWORD *)this + 4);
          if (!v16)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            applesauce::CF::construct_error(exception);
          }
          v17 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t, CFTypeRef *, _QWORD, _QWORD, float))*((_QWORD *)this + 85);
          v18 = *((float *)this + 2);
          v19 = *((unsigned int *)this + 3);
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&__p, v16, (const void *)kBinauralSourceExtentIRCustomURLParamName);
          cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          v20 = (**v17)(v17, v19, 512, 512, &cf, 0, 0, v18);
          if (cf)
            CFRelease(cf);
          std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
          if (!v20)
            *((_BYTE *)this + 320) = 1;
          atomic_store(0, (unsigned __int8 *)this + 322);
        }
      }
    }
  }
  v21 = *((_DWORD *)this + 19);
  if (a6 >= 2 && !v21)
  {
    if (*((_BYTE *)this + 16))
    {
      if (*((_QWORD *)this + 91))
      {
        v22 = *((float *)this + 15);
        v23 = *((float *)this + 16);
        v24 = *((float *)this + 17);
        if (v22 >= v23)
          v25 = *((float *)this + 15);
        else
          v25 = *((float *)this + 16);
        if (v25 >= v24)
          v26 = v25;
        else
          v26 = *((float *)this + 17);
        if (*((_BYTE *)this + 320) || *((_BYTE *)this + 17))
        {
          *((_BYTE *)this + 320) = 0;
          v27 = (_BYTE *)*((_QWORD *)this + 85);
          if (v27 && v27[208])
          {
            v28 = fabsf(*((float *)this + 49)) >= 0.00000011921
               || fabsf(*((float *)this + 50)) >= 0.00000011921
               || fabsf(*((float *)this + 51)) >= 0.00000011921;
            (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v27 + 56))(v27, fabsf(v26) >= 0.00000011921);
            SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 85), v26, v26);
            (*(void (**)(_QWORD, _QWORD, _BOOL8))(**((_QWORD **)this + 85) + 40))(*((_QWORD *)this + 85), *((unsigned __int8 *)this + 17), v28);
            v22 = *((float *)this + 15);
            v23 = *((float *)this + 16);
            v24 = *((float *)this + 17);
          }
          *((float *)this + 49) = v22;
          *((float *)this + 50) = v23;
          *((float *)this + 51) = v24;
        }
        v71 = *((_QWORD *)this + 85);
        if (v71 && *(_BYTE *)(v71 + 208))
        {
          if (*(_DWORD *)(v71 + 212))
            v72 = 1;
          else
            v72 = *(unsigned __int8 *)(v71 + 209) != 0;
        }
        else
        {
          v72 = 0;
        }
        v73 = *((_QWORD *)this + 44);
        if (v73)
          v74 = (float)((*(unint64_t (**)(uint64_t))(*(_QWORD *)v73 + 120))(v73) + 55);
        else
          v74 = 55.0;
        IR::DelayLine::setDelay(*((_QWORD *)this + 91), v74);
        v75 = (IR::DelayLine *)*((_QWORD *)this + 91);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a5;
        IR::DelayLine::process(v75, a2, (float **)&__p, a7);
        v76 = *((float *)this + 13);
        v77 = *((float *)this + 14);
        v78 = __sincosf_stret(*((float *)this + 12) * 0.017453);
        v79 = __sincosf_stret(v76 * 0.017453);
        v80 = v78.__sinval * (float)(v77 * v79.__cosval);
        v81 = v78.__cosval * (float)(v77 * v79.__cosval);
        v82 = v77 * v79.__sinval;
        if (v26 <= 1.0)
          v83 = v26;
        else
          v83 = 1.0;
        v84 = 0.0;
        if (v26 >= 0.0)
          v85 = v83;
        else
          v85 = 0.0;
        if (v80 <= 1.0)
          v86 = v78.__sinval * (float)(v77 * v79.__cosval);
        else
          v86 = 1.0;
        if (v80 >= -1.0)
          v87 = v86;
        else
          v87 = -1.0;
        if (v81 <= 1.0)
          v88 = v78.__cosval * (float)(v77 * v79.__cosval);
        else
          v88 = 1.0;
        if (v81 >= -1.0)
          v89 = v88;
        else
          v89 = -1.0;
        if (v82 <= 1.0)
          v90 = v82;
        else
          v90 = 1.0;
        if (v82 >= 0.0)
          v91 = v90;
        else
          v91 = 0.0;
        if (v85 == 0.0)
        {
          if (v87 >= -1.0)
            v84 = (float)((float)(v87 + 1.0) * 0.5) * 1.5708;
          v92 = __sincosf_stret(v84);
          sinval = v92.__sinval;
          cosval = v92.__cosval;
        }
        else if (v85 >= 0.25)
        {
          __p.__r_.__value_.__r.__words[0] = __PAIR64__(LODWORD(v91), LODWORD(v85));
          __p.__r_.__value_.__l.__size_ = __PAIR64__(LODWORD(v87), LODWORD(v89));
          LODWORD(cosval) = BCMBypassedStereo::panWithSize((float *)&__p).u32[0];
          sinval = v107;
        }
        else
        {
          v95 = (float)((float)(v87 + 1.0) * 0.5) * 1.5708;
          if (v87 < -1.0)
            v95 = 0.0;
          v96 = __sincosf_stret(v95);
          LODWORD(__p.__r_.__value_.__l.__data_) = 1048576000;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = __PAIR64__(LODWORD(v89), LODWORD(v91));
          *((float *)&__p.__r_.__value_.__r.__words[1] + 1) = v87;
          v97 = BCMBypassedStereo::panWithSize((float *)&__p).f32[0];
          v98 = 1.0 - (float)(v85 * 4.0);
          cosval = sqrtf((float)((float)(v85 * 4.0) * (float)(v97 * v97))+ (float)((float)(v96.__cosval * v96.__cosval) * v98));
          sinval = sqrtf((float)((float)(v85 * 4.0) * (float)(v99 * v99))+ (float)((float)(v96.__sinval * v96.__sinval) * v98));
        }
        v108 = 0;
        v109 = 1.0 / hypotf(cosval, sinval);
        *((float *)this + 178) = (float)(cosval * v109) * a8;
        *((float *)this + 179) = (float)(sinval * v109) * a8;
        v110 = 1;
        do
        {
          v111 = v110;
          v112 = (float *)((char *)this + 4 * v108 + 712);
          v113 = *v112;
          if (*v112 <= 0.00001)
          {
            *v112 = 0.0;
            v113 = 0.0;
          }
          v114 = *a5;
          if (v72)
          {
            __p.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 86);
            (*(void (**)(_QWORD, std::string::pointer, std::string *, uint64_t, uint64_t, vDSP_Length, _QWORD, float))(**((_QWORD **)this + 85) + 8))(*((_QWORD *)this + 85), v114, &__p, v108, 1, a7, *((unsigned int *)this + 81), 1.0);
            (*(void (**)(_QWORD, std::string::pointer, _QWORD, uint64_t, _QWORD, vDSP_Length))(**((_QWORD **)this + 85) + 24))(*((_QWORD *)this + 85), v114, *((_QWORD *)this + 86), v108, 0, a7);
            v114 = (std::string::pointer)*((_QWORD *)this + 86);
            v113 = *v112;
          }
          if (*((_BYTE *)this + 17) || (v115 = (float *)((char *)this + 4 * v108), v116 = v115[180], v113 == v116))
          {
            if (v113 != 0.0)
              vDSP_vsma((const float *)v114, 1, (const float *)this + v108 + 178, a3[v108], 1, a3[v108], 1, a7);
          }
          else
          {
            *(float *)&__p.__r_.__value_.__l.__data_ = (float)(v113 - v116) / (float)a7;
            vDSP_vrampmuladd((const float *)v114, 1, v115 + 180, (const float *)&__p, a3[v108], 1, a7);
          }
          v110 = 0;
          *((float *)this + v108 + 180) = *v112;
          v108 = 1;
        }
        while ((v111 & 1) != 0);
LABEL_226:
        if (v72)
          (*(void (**)(_QWORD, vDSP_Length))(**((_QWORD **)this + 85) + 48))(*((_QWORD *)this + 85), a7);
        result = 0;
        *((_BYTE *)this + 17) = 0;
        return result;
      }
      return 4294956445;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v218, "HRTFNFSpatializer");
      v45 = std::string::append(&v218, "::", 2uLL);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v219, "processAccumulatingBCMStereo", 0x1CuLL);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v221 = v49;
LABEL_82:
      _os_log_debug_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v218.__r_.__value_.__l.__data_);
      return 4294956429;
    }
    return 4294956429;
  }
  if (a6 >= 2 && *((_BYTE *)this + 80))
  {
    if (*((_BYTE *)this + 16))
    {
      if (*((_QWORD *)this + 91))
      {
        v34 = *((float *)this + 15);
        v35 = *((float *)this + 16);
        v36 = *((float *)this + 17);
        if (v34 >= v35)
          v37 = *((float *)this + 15);
        else
          v37 = *((float *)this + 16);
        if (v37 >= v36)
          v38 = v37;
        else
          v38 = *((float *)this + 17);
        if (*((_BYTE *)this + 320) || *((_BYTE *)this + 17))
        {
          *((_BYTE *)this + 320) = 0;
          v39 = (_BYTE *)*((_QWORD *)this + 85);
          if (v39 && v39[208])
          {
            v40 = fabsf(*((float *)this + 49)) >= 0.00000011921
               || fabsf(*((float *)this + 50)) >= 0.00000011921
               || fabsf(*((float *)this + 51)) >= 0.00000011921;
            (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v39 + 56))(v39, fabsf(v38) >= 0.00000011921);
            SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 85), v38, v38);
            (*(void (**)(_QWORD, _QWORD, _BOOL8))(**((_QWORD **)this + 85) + 40))(*((_QWORD *)this + 85), *((unsigned __int8 *)this + 17), v40);
            v34 = *((float *)this + 15);
            v35 = *((float *)this + 16);
            v36 = *((float *)this + 17);
          }
          *((float *)this + 49) = v34;
          *((float *)this + 50) = v35;
          *((float *)this + 51) = v36;
        }
        v117 = *((_QWORD *)this + 85);
        if (v117 && *(_BYTE *)(v117 + 208))
        {
          if (*(_DWORD *)(v117 + 212))
            v72 = 1;
          else
            v72 = *(unsigned __int8 *)(v117 + 209) != 0;
        }
        else
        {
          v72 = 0;
        }
        v118 = *((_QWORD *)this + 44);
        if (v118)
          v119 = (float)((*(unint64_t (**)(uint64_t))(*(_QWORD *)v118 + 120))(v118) + 55);
        else
          v119 = 55.0;
        IR::DelayLine::setDelay(*((_QWORD *)this + 91), v119);
        v120 = (IR::DelayLine *)*((_QWORD *)this + 91);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a5;
        IR::DelayLine::process(v120, a2, (float **)&__p, a7);
        v121 = *((float *)this + 21);
        v122 = 90.0;
        if (v121 <= 90.0)
          v122 = *((float *)this + 21);
        if (v121 >= 0.0)
          v123 = v122;
        else
          v123 = 0.0;
        v124 = *((float *)this + 12);
        v125 = 180.0 - v124;
        v126 = -180.0 - v124;
        if (v124 >= -90.0)
          v126 = *((float *)this + 12);
        if (v124 <= 90.0)
          v125 = v126;
        v127 = v125 / v123;
        if (v125 <= (float)-v123)
          v127 = -1.0;
        v128 = *((float *)this + 14);
        if (v125 > (float)-v123 || v125 < v123)
          v130 = 1.0;
        else
          v130 = 0.0;
        if (v125 < v123)
          v131 = v127;
        else
          v131 = v130;
        v132 = cosf(*((float *)this + 13) * 0.017453) * v131;
        if (v128 <= 1.0)
          v133 = v128;
        else
          v133 = 1.0;
        if (v128 < 0.0)
          v133 = 0.0;
        v134 = __sincosf_stret((float)((float)(v133 * v132) + 1.0) * 0.7854);
        v135 = 0;
        *((float *)this + 178) = v134.__cosval * a8;
        *((float *)this + 179) = v134.__sinval * a8;
        v136 = 1;
        do
        {
          v137 = v136;
          v138 = (float *)((char *)this + 4 * v135 + 712);
          v139 = *v138;
          if (*v138 <= 0.00001)
          {
            *v138 = 0.0;
            v139 = 0.0;
          }
          v140 = *a5;
          if (v72)
          {
            __p.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 86);
            (*(void (**)(_QWORD, std::string::pointer, std::string *, uint64_t, uint64_t, vDSP_Length, _QWORD, float))(**((_QWORD **)this + 85) + 8))(*((_QWORD *)this + 85), v140, &__p, v135, 1, a7, *((unsigned int *)this + 81), 1.0);
            (*(void (**)(_QWORD, std::string::pointer, _QWORD, uint64_t, _QWORD, vDSP_Length))(**((_QWORD **)this + 85) + 24))(*((_QWORD *)this + 85), v140, *((_QWORD *)this + 86), v135, 0, a7);
            v140 = (std::string::pointer)*((_QWORD *)this + 86);
            v139 = *v138;
          }
          if (*((_BYTE *)this + 17) || (v141 = (float *)((char *)this + 4 * v135), v142 = v141[180], v139 == v142))
          {
            if (v139 != 0.0)
              vDSP_vsma((const float *)v140, 1, (const float *)this + v135 + 178, a3[v135], 1, a3[v135], 1, a7);
          }
          else
          {
            *(float *)&__p.__r_.__value_.__l.__data_ = (float)(v139 - v142) / (float)a7;
            vDSP_vrampmuladd((const float *)v140, 1, v141 + 180, (const float *)&__p, a3[v135], 1, a7);
          }
          v136 = 0;
          *((float *)this + v135 + 180) = *v138;
          v135 = 1;
        }
        while ((v137 & 1) != 0);
        goto LABEL_226;
      }
      return 4294956445;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v32 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v218, "HRTFNFSpatializer");
      v55 = std::string::append(&v218, "::", 2uLL);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v219.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = std::string::append(&v219, "processAccumulatingStereo", 0x19uLL);
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v59 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v221 = v59;
      goto LABEL_82;
    }
    return 4294956429;
  }
  v41 = *((float *)this + 14);
  v42 = *((float *)this + 168);
  v43 = *((float *)this + 169);
  if (v21 != 1)
  {
    if (v21 == 2)
    {
      v44 = 8.0;
    }
    else
    {
      if (v21 != 3)
        goto LABEL_97;
      v44 = 4.0;
    }
    v41 = v41 * v44;
  }
  v60 = __sincosf_stret(v42 * 0.017453);
  v61 = __sincosf_stret(v43 * 0.017453);
  v62 = v61.__cosval * (float)(v60.__sinval * v41);
  v63 = v61.__sinval * v41;
  v64 = v61.__cosval * (float)-(float)(v41 * v60.__cosval);
  v41 = sqrtf((float)((float)(v63 * v63) + (float)(v62 * v62)) + (float)(v64 * v64));
  if (v41 != 0.0)
  {
    v65 = fabsf(v62);
    v66 = fabsf(v63);
    v67 = fabsf(v64);
    if (v65 < v66)
      v65 = v66;
    if (v65 < v67)
      v65 = v67;
    v41 = sqrtf((float)((float)((float)(v63 * (float)(v65 / v41)) * (float)(v63 * (float)(v65 / v41)))+ (float)((float)(v62 * (float)(v65 / v41)) * (float)(v62 * (float)(v65 / v41))))+ (float)((float)(v64 * (float)(v65 / v41)) * (float)(v64 * (float)(v65 / v41))));
  }
LABEL_97:
  if (!*((_BYTE *)this + 320) && !*((_BYTE *)this + 17))
    goto LABEL_250;
  *((_BYTE *)this + 320) = 0;
  (*(void (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 44) + 144))(*((_QWORD *)this + 44), 0, v42);
  v68 = (_QWORD *)((char *)this + 352);
  (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 44) + 144))(*((_QWORD *)this + 44), 1, v43);
  (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v68 + 144))(*v68, 2, v41);
  (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v68 + 144))(*v68, 7, (float)*((unsigned int *)this + 30));
  v69 = (_BYTE *)*((_QWORD *)this + 85);
  if (!v69)
    goto LABEL_104;
  if (!v69[208])
  {
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v69 + 56))(v69, 0);
LABEL_104:
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 44) + 160))(*((_QWORD *)this + 44), 0.0);
    (*(void (**)(_QWORD, uint64_t, float))(**((_QWORD **)this + 44) + 144))(*((_QWORD *)this + 44), 8, 0.0);
    goto LABEL_232;
  }
  v70 = fabsf(*((float *)this + 49)) >= 0.00000011921 || fabsf(*((float *)this + 50)) >= 0.00000011921;
  v100 = fabsf(*((float *)this + 15)) >= 0.00000011921 || fabsf(*((float *)this + 16)) >= 0.00000011921;
  (*(void (**)(_BYTE *, _BOOL8))(*(_QWORD *)v69 + 56))(v69, v100);
  if ((IR::IRData::canInterpolateInDimension() & 1) != 0)
  {
    (*(void (**)(_QWORD, float))(**((_QWORD **)this + 44) + 160))(*((_QWORD *)this + 44), 0.0);
    v102 = *((_QWORD *)this + 44);
    if (*(_BYTE *)(*((_QWORD *)this + 85) + 209))
    {
      v101.n128_u32[0] = *((_DWORD *)this + 15);
      if (v101.n128_f32[0] < *((float *)this + 16))
        v101.n128_u32[0] = *((_DWORD *)this + 16);
      if (v101.n128_f32[0] < *((float *)this + 17))
        v101.n128_u32[0] = *((_DWORD *)this + 17);
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v102 + 144))(v102, 8, v101);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v102 + 144))(v102, 8, 0.0);
    }
  }
  else
  {
    v103 = *((_QWORD *)this + 44);
    if (*(_BYTE *)(*((_QWORD *)this + 85) + 209))
    {
      v104.n128_f32[0] = hypotf(*((float *)this + 15), *((float *)this + 16));
      v105 = 1.0;
      if (v104.n128_f32[0] <= 1.0)
        v105 = v104.n128_f32[0];
      v106 = v104.n128_f32[0] < 0.0;
      v104.n128_u32[0] = 0;
      if (!v106)
        v104.n128_f32[0] = v105;
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v103 + 160))(v103, v104);
    }
    else
    {
      (*(void (**)(_QWORD, float))(*(_QWORD *)v103 + 160))(*((_QWORD *)this + 44), 0.0);
    }
  }
  SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 85), *((float *)this + 15), *((float *)this + 16));
  (*(void (**)(_QWORD, _QWORD, _BOOL8))(**((_QWORD **)this + 85) + 40))(*((_QWORD *)this + 85), *((unsigned __int8 *)this + 17), v70);
LABEL_232:
  *(_QWORD *)((char *)this + 196) = *(_QWORD *)((char *)this + 60);
  *((_DWORD *)this + 51) = *((_DWORD *)this + 17);
  if (*((_BYTE *)this + 666))
  {
    v143 = cosf(v43 * 0.017453);
    v144 = cosf((float)(-100.0 - v42) * 0.017453);
    v145 = acosf(v144 * v143) * 57.296;
    v146 = cosf((float)(100.0 - v42) * 0.017453);
    v147 = acosf(v146 * v143);
    (*(void (**)(_QWORD, _QWORD, _QWORD, float))(**((_QWORD **)this + 45) + 72))(*((_QWORD *)this + 45), 0, 0, v145);
    v148 = (_QWORD *)((char *)this + 360);
    (*(void (**)(_QWORD, uint64_t, _QWORD, float))(**((_QWORD **)this + 45) + 72))(*((_QWORD *)this + 45), 2, 0, v41);
    (*(void (**)(_QWORD, _QWORD, uint64_t, float))(*(_QWORD *)*v148 + 72))(*v148, 0, 1, v147 * 57.296);
    (*(void (**)(_QWORD, uint64_t, uint64_t, float))(*(_QWORD *)*v148 + 72))(*v148, 2, 1, v41);
    v149 = v41 + 0.001;
    v150 = v41 + -0.001;
    v151 = (unsigned __int8 *)*((_QWORD *)this + 45);
    if (*((_BYTE *)this + 17))
    {
      v152 = v149 < 1.0
          && v150 > *(float *)((*(uint64_t (**)(HRTFNFSpatializer *))(*(_QWORD *)this + 320))(this) + 4);
      (*(void (**)(unsigned __int8 *, _BOOL8))(*(_QWORD *)v151 + 56))(v151, v152);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 45) + 40))(*((_QWORD *)this + 45), *((unsigned __int8 *)this + 17), 0);
      goto LABEL_249;
    }
    v153 = v151[209];
    if (v150 <= 1.0)
    {
      v154 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(_QWORD *)this + 320))(this);
      if (!v153 || v149 >= *(float *)(v154 + 4))
      {
LABEL_245:
        if (v149 < 1.0)
        {
          v155 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(_QWORD *)this + 320))(this);
          if (!v153 && v150 > *(float *)(v155 + 4))
          {
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 45) + 56))(*((_QWORD *)this + 45), 1);
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 45) + 40))(*((_QWORD *)this + 45), *((unsigned __int8 *)this + 17), 0);
          }
        }
        goto LABEL_249;
      }
      v151 = (unsigned __int8 *)*((_QWORD *)this + 45);
    }
    else if (!v151[209])
    {
      goto LABEL_245;
    }
    (*(void (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v151 + 56))(v151, 0);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 45) + 40))(*((_QWORD *)this + 45), *((unsigned __int8 *)this + 17), 1);
  }
LABEL_249:
  *((_DWORD *)this + 48) = *((_DWORD *)this + 14);
LABEL_250:
  v156 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(_QWORD *)this + 320))(this);
  v158 = *(float *)(v156 + 4);
  v157 = *(float *)(v156 + 8);
  if (v158 >= v157)
  {
    if (v157 <= v41)
      v161 = 0.0;
    else
      v161 = 1.0;
  }
  else
  {
    v159 = (float)(v41 - v158) / (float)(v157 - v158);
    v160 = 1.0 - v159;
    if (v159 > 1.0)
      v160 = 0.0;
    if (v159 >= 0.0)
      v161 = v160;
    else
      v161 = 1.0;
  }
  v162 = (float *)(*(uint64_t (**)(HRTFNFSpatializer *))(*(_QWORD *)this + 320))(this);
  v163 = *v162;
  v164 = v162[1];
  if (*v162 >= v164)
  {
    if (v163 <= v41)
      v167 = 0.0;
    else
      v167 = 1.0;
  }
  else
  {
    v165 = (float)(v41 - v163) / (float)(v164 - v163);
    v166 = 1.0 - v165;
    if (v165 > 1.0)
      v166 = 0.0;
    if (v165 >= 0.0)
      v167 = v166;
    else
      v167 = 1.0;
  }
  v168 = (*(uint64_t (**)(HRTFNFSpatializer *))(*(_QWORD *)this + 320))(this);
  v169 = *(float *)v168;
  v170.n128_u32[0] = *(_DWORD *)(v168 + 8);
  if (v170.n128_f32[0] <= *(float *)v168)
  {
    v172 = 0.0;
    if (v169 <= v41)
      v172 = 1.0;
  }
  else
  {
    v171 = (float)(v41 - v169) / (float)(v170.n128_f32[0] - v169);
    v172 = 1.0;
    if (v171 <= 1.0)
      v172 = v171;
    if (v171 < 0.0)
      v172 = 0.0;
  }
  v173 = (float)(v172 + (float)((float)(1.0 - v172) * *(float *)(v168 + 12))) * a8;
  if (*((_BYTE *)this + 132))
    v174 = v173;
  else
    v174 = 0.0;
  v175 = v167 < 1.0 || *((float *)this + 158) < 1.0 || *((_DWORD *)this + 167) < *((_DWORD *)this + 5);
  v214 = v175;
  v176 = 0;
  if (*((_BYTE *)this + 666) && v175)
  {
    v177 = *((_QWORD *)this + 45);
    if (*(_BYTE *)(v177 + 208))
    {
      if (*(_DWORD *)(v177 + 212))
        v176 = 1;
      else
        v176 = *(unsigned __int8 *)(v177 + 209) != 0;
    }
    else
    {
      v176 = 0;
    }
  }
  if (v214)
  {
    v178 = *((_QWORD *)this + 85);
    if (v178 && *(_BYTE *)(v178 + 208))
    {
      if (*(_DWORD *)(v178 + 212))
        v179 = 1;
      else
        v179 = *(unsigned __int8 *)(v178 + 209) != 0;
    }
    else
    {
      v179 = 0;
    }
    v180 = (float *)*((_QWORD *)this + 44);
    v181 = 3000.0;
    if (*((_DWORD *)this + 81))
      v181 = -1.0;
    v180[100] = v181;
    v213 = (*(uint64_t (**)(float *, float *, std::string::pointer *, uint64_t, vDSP_Length, _QWORD, float))(*(_QWORD *)v180 + 40))(v180, a2, a5, a6, a7, 0, (float)(1.0 - v161) * v174);
  }
  else
  {
    v179 = 0;
    v213 = 0;
  }
  if (v161 > 0.0 || *((float *)this + 158) > 0.0)
  {
    if (*((_DWORD *)this + 19) != 4)
    {
      v182 = *((_QWORD *)this + 91);
      v183 = -0.00033333;
      if (*((_DWORD *)this + 81))
        v183 = 1.0;
      *(float *)(v182 + 96) = expf(v183);
      IR::DelayLine::setDelay(v182, 50.0);
      v184 = (IR::DelayLine *)*((_QWORD *)this + 91);
      __p.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 92);
      IR::DelayLine::process(v184, a2, (float **)&__p, a7);
      a2 = (float *)*((_QWORD *)this + 92);
    }
    if (*((_BYTE *)this + 448))
    {
      IR::FixedIntegerDelay::process((HRTFNFSpatializer *)((char *)this + 392), a2, *((float **)this + 92), a7);
      a2 = (float *)*((_QWORD *)this + 92);
    }
  }
  if (a6 >= 2)
    v185 = 2;
  else
    v185 = a6;
  if ((_DWORD)v185)
  {
    v186 = 0;
    v187 = v161 * v174;
    v170.n128_u64[0] = 1.0;
    do
    {
      v188 = (float *)a5[v186];
      if (v176)
      {
        __p.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 80);
        v189 = (_QWORD *)*((_QWORD *)this + 45);
        v190 = -1.0;
        if (!*((_DWORD *)this + 81))
          v190 = 3000.0;
        v191 = v189[20];
        v192 = v189[21];
        while (v191 != v192)
        {
          if (*(_QWORD *)v191)
            *(float *)(*(_QWORD *)v191 + 400) = v190;
          v191 += 8;
        }
        (*(void (**)(_QWORD *, float *, std::string *, uint64_t, uint64_t, vDSP_Length, float, __n128))(*v189 + 8))(v189, v188, &__p, v186, 1, a7, 1.0, v170);
        (*(void (**)(_QWORD, std::string::pointer, _QWORD, uint64_t, _QWORD, vDSP_Length))(**((_QWORD **)this + 45) + 24))(*((_QWORD *)this + 45), a5[v186], *((_QWORD *)this + 80), v186, 0, a7);
        v188 = (float *)*((_QWORD *)this + 80);
      }
      if (v179)
      {
        __p.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 86);
        v193 = (_QWORD *)*((_QWORD *)this + 85);
        v194 = -1.0;
        if (!*((_DWORD *)this + 81))
          v194 = 3000.0;
        v195 = v193[20];
        v196 = v193[21];
        while (v195 != v196)
        {
          if (*(_QWORD *)v195)
            *(float *)(*(_QWORD *)v195 + 400) = v194;
          v195 += 8;
        }
        (*(void (**)(_QWORD *, float *, std::string *, uint64_t, uint64_t, vDSP_Length, float, __n128))(*v193 + 8))(v193, v188, &__p, v186, 1, a7, 1.0, v170);
        (*(void (**)(_QWORD, float *, _QWORD, uint64_t, _QWORD, vDSP_Length))(**((_QWORD **)this + 85) + 24))(*((_QWORD *)this + 85), v188, *((_QWORD *)this + 86), v186, 0, a7);
        v188 = (float *)*((_QWORD *)this + 86);
      }
      if (v161 <= 0.0 && *((float *)this + 158) <= 0.0)
      {
        *(_DWORD *)(*((_QWORD *)this + 57) + 4 * v186) = 0;
      }
      else
      {
        v197 = v187
             * (float)((float)((float)(1.0 - v167) * 0.70711)
                     + (float)(v167 * *(float *)(*((_QWORD *)this + 17) + 4 * v186)));
        *(float *)&__p.__r_.__value_.__l.__data_ = v197;
        if (*((_BYTE *)this + 17) || (v198 = (float *)(*((_QWORD *)this + 57) + 4 * v186), v197 == *v198))
        {
          if (v214)
            vDSP_vsma(a2, 1, (const float *)&__p, v188, 1, v188, 1, a7);
          else
            vDSP_vsmul(a2, 1, (const float *)&__p, v188, 1, a7);
        }
        else if ((_DWORD)a7)
        {
          LODWORD(v219.__r_.__value_.__l.__data_) = 0;
          *(float *)&v219.__r_.__value_.__l.__data_ = (float)(v197 - *v198) / (float)a7;
          if (v214)
            vDSP_vrampmuladd(a2, 1, v198, (const float *)&v219, v188, 1, a7);
          else
            vDSP_vrampmul(a2, 1, v198, (const float *)&v219, v188, 1, a7);
        }
        *(_DWORD *)(*((_QWORD *)this + 57) + 4 * v186) = __p.__r_.__value_.__l.__data_;
      }
      v199 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 44) + 112))(*((_QWORD *)this + 44), v186);
      v200 = 0.0;
      if (v176)
        v200 = (*(float (**)(_QWORD, uint64_t, _QWORD, float))(**((_QWORD **)this + 45) + 96))(*((_QWORD *)this + 45), v186, 0, 0.0);
      v201 = (1.0 - v167) * (float)(v199 + v200);
      v202 = (float *const *)a5;
      v203 = *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v186);
      v204 = 1.0;
      if (!*((_DWORD *)this + 81))
        v204 = -0.00033333;
      *(float *)(v203 + 96) = expf(v204);
      v205 = v203;
      a5 = (std::string::pointer *)v202;
      IR::DelayLine::setDelay(v205, v201);
      v206 = *(IR::DelayLine **)(*((_QWORD *)this + 46) + 8 * v186);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
      IR::DelayLine::process(v206, v188, (float **)&__p, a7);
      vDSP_vadd(v188, 1, a3[v186], 1, a3[v186], 1, a7);
      ++v186;
    }
    while (v186 != v185);
  }
  if (v179)
    (*(void (**)(_QWORD, vDSP_Length))(**((_QWORD **)this + 85) + 48))(*((_QWORD *)this + 85), a7);
  if (v176)
    (*(void (**)(_QWORD, vDSP_Length))(**((_QWORD **)this + 45) + 48))(*((_QWORD *)this + 45), a7);
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  if (v161 >= 1.0 && *((float *)this + 158) >= 1.0)
  {
    v207 = *((_DWORD *)this + 167);
    v208 = *((_DWORD *)this + 5);
    if (v207 < v208)
    {
      v209 = __CFADD__(v207, (_DWORD)a7);
      v210 = v207 + a7;
      if (v209)
        v210 = -1;
      *((_DWORD *)this + 167) = v210;
      if (v210 >= v208)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 44) + 32))(*((_QWORD *)this + 44));
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 44) + 192))(*((_QWORD *)this + 44), 0);
        if (*((_BYTE *)this + 666))
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 45) + 32))(*((_QWORD *)this + 45), 0);
        v211 = *((_QWORD *)this + 85);
        if (v211)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v211 + 32))(v211, 0);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 167) = 0;
  }
  *((float *)this + 158) = v161;
  *((_BYTE *)this + 17) = 0;
  return v213;
}

void sub_1B626D1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

uint64_t HRTFNFSpatializer::getLoadedIRDataAttributes@<X0>(HRTFNFSpatializer *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 80))(*((_QWORD *)this + 44));
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 224))(*((_QWORD *)this + 44));
    result = IR::IRDataAttributes::IRDataAttributes((uint64_t)a2, v5);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *a2 = 0;
  }
  a2[152] = v6;
  return result;
}

uint64_t HRTFNFSpatializer::getLatencyFrames(HRTFNFSpatializer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 44);
  if (v1)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1) + 5;
  else
    return 5;
}

uint64_t HRTFNFSpatializer::getInHeadParams(HRTFNFSpatializer *this)
{
  return ((uint64_t (*)(void *))((char *)sub_1B626D338 + 4 * byte_1B662E420[*((unsigned int *)this + 19)]))(&SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Near);
}

void *sub_1B626D338()
{
  return &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Bypass;
}

void *sub_1B626D344()
{
  return &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Far;
}

void *sub_1B626D350()
{
  return &SpatializerWithInHeadRendering::mInHeadParams_BinauralCompatibilityMode_Mid;
}

uint64_t sub_1B626D35C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 332;
}

uint64_t std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](uint64_t a1)
{
  IR::IRDataAttributes *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E69E1688;
  v2 = (IR::IRDataAttributes *)(a1 + 8);
  v4 = (void **)(a1 + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 160);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v4);
  IR::IRDataAttributes::~IRDataAttributes(v2);
  return MEMORY[0x1BCC95CEC](a1, 0x10E1C40B0B4C639);
}

uint64_t std::__optional_destruct_base<IR::FixedIntegerDelay,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[19]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[19]>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[13]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[13]>(a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

uint64_t ClosedLoopSpeakerProtectionKernel::Initialize(ClosedLoopSpeakerProtectionKernel *this, double a2)
{
  return (*(uint64_t (**)(ClosedLoopSpeakerProtectionKernel *, double))(*(_QWORD *)this + 24))(this, a2);
}

uint64_t ClosedLoopSpeakerProtectionKernel::Reset(ClosedLoopSpeakerProtectionKernel *this, double a2)
{
  uint64_t v3;
  float v4;
  char v5;
  char v6;
  char *v7;
  clsp::CLSP_Log *v8;
  clsp::CLSP_Log *v9;
  char *v10;
  clsp::CLSP_Log *v11;
  clsp::CLSP_Log *v12;
  char *v13;
  clsp::CLSP_Log *v14;
  clsp::CLSP_Log *v15;
  char *v16;
  clsp::CLSP_Log *v17;
  clsp::CLSP_Log *v18;
  char *v19;
  clsp::CLSP_Log *v20;
  clsp::CLSP_Log *v21;

  v3 = 0;
  *((double *)this + 12) = a2;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *(_QWORD *)((char *)this + 212) = 0;
  *((_DWORD *)this + 55) = 0;
  *((_DWORD *)this + 83) = 0;
  *(_QWORD *)((char *)this + 284) = 0;
  *(_QWORD *)((char *)this + 276) = 0;
  v4 = *((double *)this + 57);
  *((float *)this + 84) = v4;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 508) = 0;
  *((_DWORD *)this + 129) = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = (char *)this + 16 * v3;
    v8 = (clsp::CLSP_Log *)*((_QWORD *)v7 + 65);
    if (v8)
      clsp::CLSP_Log::FlushLog(v8);
    v9 = (clsp::CLSP_Log *)*((_QWORD *)v7 + 69);
    if (v9)
      clsp::CLSP_Log::FlushLog(v9);
    v10 = (char *)this + 16 * v3;
    v11 = (clsp::CLSP_Log *)*((_QWORD *)v10 + 73);
    if (v11)
      clsp::CLSP_Log::FlushLog(v11);
    v12 = (clsp::CLSP_Log *)*((_QWORD *)v10 + 77);
    if (v12)
      clsp::CLSP_Log::FlushLog(v12);
    v13 = (char *)this + 16 * v3;
    v14 = (clsp::CLSP_Log *)*((_QWORD *)v13 + 81);
    if (v14)
      clsp::CLSP_Log::FlushLog(v14);
    v15 = (clsp::CLSP_Log *)*((_QWORD *)v13 + 85);
    if (v15)
      clsp::CLSP_Log::FlushLog(v15);
    v16 = (char *)this + 16 * v3;
    v17 = (clsp::CLSP_Log *)*((_QWORD *)v16 + 89);
    if (v17)
      clsp::CLSP_Log::FlushLog(v17);
    v18 = (clsp::CLSP_Log *)*((_QWORD *)v16 + 93);
    if (v18)
      clsp::CLSP_Log::FlushLog(v18);
    v19 = (char *)this + 16 * v3;
    v20 = (clsp::CLSP_Log *)*((_QWORD *)v19 + 97);
    if (v20)
      clsp::CLSP_Log::FlushLog(v20);
    v21 = (clsp::CLSP_Log *)*((_QWORD *)v19 + 101);
    if (v21)
      clsp::CLSP_Log::FlushLog(v21);
    v5 = 0;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
  *((_BYTE *)this + 840) = 1;
  return (*(uint64_t (**)(ClosedLoopSpeakerProtectionKernel *, double))(*(_QWORD *)this + 88))(this, *((double *)this + 12));
}

float ClosedLoopSpeakerProtectionKernel::GetTemperature(ClosedLoopSpeakerProtectionKernel *this)
{
  return *((float *)this + 35);
}

float ClosedLoopSpeakerProtectionKernel::GetOLPwr(ClosedLoopSpeakerProtectionKernel *this)
{
  return *((float *)this + 19);
}

float ClosedLoopSpeakerProtectionKernel::GetThermalTargetGain(ClosedLoopSpeakerProtectionKernel *this, float a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float result;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = *((float *)this + 32);
  v3 = v2 * 0.9;
  if (v2 >= a2)
  {
    if (v3 >= a2)
    {
      *((_DWORD *)this + 36) = 0;
      result = 1.0;
      goto LABEL_13;
    }
    v9 = v2 - a2;
    v10 = (float)(a2 - v3) / (float)((float)(v2 - v3) + (float)(v2 - v3));
    v11 = v9 / v2;
    v12 = *((float *)this + 36);
    if (v12 <= v11)
      v13 = 0.0;
    else
      v13 = v12 - v11;
    *((float *)this + 36) = v13;
    result = sqrtf((float)(v10 * -0.5) + 1.0) - (float)(v13 * *((float *)this + 34));
    v8 = result > 0.0;
  }
  else
  {
    v4 = a2 - v2;
    v5 = v4 / (float)((float)(v2 - v3) + (float)(v2 - v3));
    v6 = (float)(v4 / v2) + *((float *)this + 36);
    *((float *)this + 36) = v6;
    result = 0.0;
    if (v5 >= 0.75)
      goto LABEL_13;
    result = sqrtf(0.75 - v5) - (float)(v6 * *((float *)this + 34));
    v8 = result > 0.0;
  }
  if (!v8)
    result = 0.0;
LABEL_13:
  if (result < 0.25)
    return 0.25;
  return result;
}

float ClosedLoopSpeakerProtectionKernel::ProcessIV(ClosedLoopSpeakerProtectionKernel *this, float *a2, __int16 *a3, __int16 *a4)
{
  return NAN;
}

void ClosedLoopSpeakerProtectionKernel::CreateAppropriateLogs(uint64_t a1, char a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  void *__p[2];
  char v64;

  if ((a2 & 4) == 0)
    goto LABEL_15;
  if (*(_DWORD *)(a1 + 88))
  {
    v4 = operator new(0x48uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(__p, "PredDisp_Data_r");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v4 + 3), (uint64_t)__p);
    if (v64 < 0)
      operator delete(__p[0]);
    __p[0] = v4 + 3;
    __p[1] = v4;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 536, (__int128 *)__p);
    v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      goto LABEL_14;
    }
LABEL_15:
    if ((a2 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_16;
  }
  v8 = operator new(0x48uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E69E4F68;
  std::string::basic_string[abi:ne180100]<0>(__p, "PredDisp_Data");
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v8 + 3), (uint64_t)__p);
  if (v64 < 0)
    operator delete(__p[0]);
  __p[0] = v8 + 3;
  __p[1] = v8;
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 520, (__int128 *)__p);
  v5 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_15;
  v9 = (unint64_t *)((char *)__p[1] + 8);
  do
    v7 = __ldaxr(v9);
  while (__stlxr(v7 - 1, v9));
LABEL_14:
  if (v7)
    goto LABEL_15;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if ((a2 & 0x20) == 0)
    goto LABEL_31;
LABEL_16:
  if (*(_DWORD *)(a1 + 88))
  {
    v10 = operator new(0x48uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(__p, "PredDispMore_Data_r");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v10 + 3), (uint64_t)__p);
    if (v64 < 0)
      operator delete(__p[0]);
    __p[0] = v10 + 3;
    __p[1] = v10;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 568, (__int128 *)__p);
    v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_28;
    }
  }
  else
  {
    v14 = operator new(0x48uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(__p, "PredDispMore_Data");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v14 + 3), (uint64_t)__p);
    if (v64 < 0)
      operator delete(__p[0]);
    __p[0] = v14 + 3;
    __p[1] = v14;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 552, (__int128 *)__p);
    v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v15);
      while (__stlxr(v13 - 1, v15));
LABEL_28:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_31:
  if ((a2 & 8) == 0)
    goto LABEL_108;
  if (*(_DWORD *)(a1 + 88))
  {
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>(__p, "Reb_Data_r");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 600, (__int128 *)__p);
    v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>(__p, "Err_Data_r");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 632, (__int128 *)__p);
    v19 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v20 = (unint64_t *)((char *)__p[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[10],void>(__p, "A1_Data_r");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 664, (__int128 *)__p);
    v22 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v23 = (unint64_t *)((char *)__p[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[10],void>(__p, "A2_Data_r");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 696, (__int128 *)__p);
    v25 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v26 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>(__p, "Phi_Data_r");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 728, (__int128 *)__p);
    v28 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v29 = (unint64_t *)((char *)__p[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = operator new(0x48uLL);
    v31[1] = 0;
    v31[2] = 0;
    *v31 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(__p, "EAMS_Data_r");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v31 + 3), (uint64_t)__p);
    if (v64 < 0)
      operator delete(__p[0]);
    __p[0] = v31 + 3;
    __p[1] = v31;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 760, (__int128 *)__p);
    v32 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v33 = (unint64_t *)((char *)__p[1] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = operator new(0x48uLL);
    v35[1] = 0;
    v35[2] = 0;
    *v35 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(__p, "CPScale_Data_r");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v35 + 3), (uint64_t)__p);
    if (v64 < 0)
      operator delete(__p[0]);
    __p[0] = v35 + 3;
    __p[1] = v35;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 792, (__int128 *)__p);
    v36 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v37 = (unint64_t *)((char *)__p[1] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_106;
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(__p, "Reb_Data");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 584, (__int128 *)__p);
    v39 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v40 = (unint64_t *)((char *)__p[1] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(__p, "Err_Data");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 616, (__int128 *)__p);
    v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v43 = (unint64_t *)((char *)__p[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[8],void>(__p, "A1_Data");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 648, (__int128 *)__p);
    v45 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v46 = (unint64_t *)((char *)__p[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[8],void>(__p, "A2_Data");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 680, (__int128 *)__p);
    v48 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v49 = (unint64_t *)((char *)__p[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(__p, "Phi_Data");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 712, (__int128 *)__p);
    v51 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v52 = (unint64_t *)((char *)__p[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[10],void>(__p, "EAMS_Data");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 744, (__int128 *)__p);
    v54 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v55 = (unint64_t *)((char *)__p[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = operator new(0x48uLL);
    v57[1] = 0;
    v57[2] = 0;
    *v57 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(__p, "CPScale_Data");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v57 + 3), (uint64_t)__p);
    if (v64 < 0)
      operator delete(__p[0]);
    __p[0] = v57 + 3;
    __p[1] = v57;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 776, (__int128 *)__p);
    v36 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v58 = (unint64_t *)((char *)__p[1] + 8);
      do
        v38 = __ldaxr(v58);
      while (__stlxr(v38 - 1, v58));
LABEL_106:
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
LABEL_108:
  if ((a2 & 0x10) == 0)
    return;
  if (*(_DWORD *)(a1 + 88))
  {
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>(__p, "CoeffLog_r");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 824, (__int128 *)__p);
    v59 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      return;
    v60 = (unint64_t *)((char *)__p[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
  }
  else
  {
    std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(__p, "CoeffLog");
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100](a1 + 808, (__int128 *)__p);
    v59 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      return;
    v62 = (unint64_t *)((char *)__p[1] + 8);
    do
      v61 = __ldaxr(v62);
    while (__stlxr(v61 - 1, v62));
  }
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
}

void sub_1B626DFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void ClosedLoopSpeakerProtectionKernel::CalcSmoothingCoeffs(ClosedLoopSpeakerProtectionKernel *this, double a2, uint64_t a3, const char *a4)
{
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  double v15;
  float v16;
  double v17;
  float v18;

  v6 = *((double *)this + 43);
  v7 = v6 * a2;
  v8 = 0.0;
  v9 = 0.0;
  if (v7 >= 0.00001)
    v9 = exp(-4.60517019 / v7);
  *((float *)this + 29) = 1.0 - v9;
  v10 = *((double *)this + 44);
  if (v10 * a2 >= 0.00001)
    v8 = exp(-4.60517019 / (v10 * a2));
  *((float *)this + 30) = 1.0 - v8;
  v11 = *((double *)this + 45);
  v12 = 0.0;
  v13 = 0.0;
  if (v11 * a2 >= 0.00001)
    v13 = exp(-4.60517019 / (v11 * a2));
  v14 = 1.0 - v13;
  *((float *)this + 42) = v14;
  v15 = *((double *)this + 46);
  if (v15 * a2 >= 0.00001)
    v12 = exp(-4.60517019 / (v15 * a2));
  v16 = 1.0 - v12;
  *((float *)this + 50) = v16;
  *((float *)this + 41) = v16;
  v17 = *((double *)this + 47);
  v18 = 0.0;
  if (v17 * a2 >= 0.00001)
    v18 = exp(-4.60517019 / (v17 * a2));
  *((float *)this + 82) = 1.0 - v18;
  clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1), "CLSPKernel CalcCoeffs atk/rel params Ch %u: ThermalGainAtkTime=%f; ThermalGainRelTime=%f; PeakDispAtkTime=%f; PeakDi"
    "spDecayTime=%f; FeedbackIntTime=%f; ",
    a4,
    *((unsigned int *)this + 22),
    *(_QWORD *)&v6,
    *(_QWORD *)&v10,
    *(_QWORD *)&v11,
    *(_QWORD *)&v15,
    *(_QWORD *)&v17);
}

uint64_t ClosedLoopSpeakerProtectionKernel::ZapBadValues(uint64_t this)
{
  float32x2_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float v10;
  double v11;
  float32x2_t v13;
  float64x2_t v14;
  float v15;
  double v16;
  float v18;
  float v19;
  double v20;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float v28;
  double v29;
  float v31;
  double v32;
  double v34;
  float v36;
  float32x2_t v37;
  float64x2_t v38;
  unsigned int v39;

  v1 = *(float32x2_t *)(this + 256);
  v2 = vcvtq_f64_f32(vabs_f32(v1));
  v3 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  v4 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  *(int8x8_t *)(this + 256) = vand_s8((int8x8_t)v1, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v2, v3), (int8x16_t)vcgtq_f64(v4, v2))));
  v5 = *(float32x4_t *)(this + 276);
  v6 = vabsq_f32(v5);
  v7 = vcvt_hight_f64_f32(v6);
  v8 = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
  *(int8x16_t *)(this + 276) = vandq_s8((int8x16_t)v5, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v8, v3), (int8x16_t)vcgtq_f64(v4, v8)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v7, v3), (int8x16_t)vcgtq_f64(v4, v7))));
  v5.i64[0] = *(_QWORD *)(this + 176);
  v9 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)v5.f32));
  *(int8x8_t *)(this + 176) = vand_s8(*(int8x8_t *)v5.f32, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v9, v3), (int8x16_t)vcgtq_f64(v4, v9))));
  v10 = *(float *)(this + 184);
  v11 = fabsf(v10);
  if (v11 >= 1.0e15 || v11 <= 1.0e-15)
    v10 = 0.0;
  *(float *)(this + 184) = v10;
  v13 = *(float32x2_t *)(this + 212);
  v14 = vcvtq_f64_f32(vabs_f32(v13));
  *(int8x8_t *)(this + 212) = vand_s8((int8x8_t)v13, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v14, v3), (int8x16_t)vcgtq_f64(v4, v14))));
  v15 = *(float *)(this + 220);
  v16 = fabsf(v15);
  if (v16 >= 1.0e15 || v16 <= 1.0e-15)
    v15 = 0.0;
  *(float *)(this + 220) = v15;
  v19 = *(float *)(this + 56);
  v18 = *(float *)(this + 60);
  v20 = fabsf(v19);
  if (v20 >= 1.0e15 || v20 <= 1.0e-15)
    v19 = 0.0;
  *(float *)(this + 56) = v19;
  if (v18 < 0.0 || v18 > 1000.0 || (v22 = *(float *)(this + 64), v22 < 0.0) || v22 > 1000.0)
  {
    v23 = vcvt_f32_f64(*(float64x2_t *)(this + 464));
    *(float32x2_t *)(this + 60) = vdiv_f32(vmul_n_f32(v23, *(float *)(this + 128) - *(float *)(this + 84)), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v23, 1), v23), 0));
  }
  v24 = *(float32x2_t *)(this + 68);
  v25 = vcvtq_f64_f32(vabs_f32(v24));
  v26 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  v27 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  *(int8x8_t *)(this + 68) = vand_s8((int8x8_t)v24, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v25, v26), (int8x16_t)vcgtq_f64(v27, v25))));
  v28 = *(float *)(this + 76);
  v29 = fabsf(v28);
  if (v29 >= 1.0e15 || v29 <= 1.0e-15)
    v28 = 0.0;
  *(float *)(this + 76) = v28;
  v31 = *(float *)(this + 144);
  v32 = fabsf(v31);
  if (v32 >= 1.0e15 || v32 <= 1.0e-15)
    v31 = 0.0;
  *(float *)(this + 144) = v31;
  v34 = fabsf(*(float *)(this + 108));
  if (v34 >= 1.0e15 || v34 <= 1.0e-15)
    v36 = 0.0;
  else
    v36 = *(float *)(this + 108);
  *(float *)(this + 108) = v36;
  v37 = *(float32x2_t *)(this + 332);
  v38 = vcvtq_f64_f32(vabs_f32(v37));
  *(int8x8_t *)(this + 332) = vand_s8((int8x8_t)v37, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v38, v26), (int8x16_t)vcgtq_f64(v27, v38))));
  v39 = *(_DWORD *)(this + 12);
  if (*(_DWORD *)(this + 8) > v39)
    *(_DWORD *)(this + 8) = v39;
  return this;
}

void ClosedLoopSpeakerProtectionKernel::PrintCoeffs(ClosedLoopSpeakerProtectionKernel *this, uint64_t a2, const char *a3)
{
  clsp::CLSP_Log *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = (clsp::CLSP_Log *)(*((_DWORD *)this + 211) & 1);
  v5 = *((float *)this + 12);
  v6 = *((float *)this + 13);
  v7 = *((float *)this + 5);
  v8 = *((float *)this + 32);
  clsp::CLSP_Log::printToSyslog(v4, "ClosedLoopSpeakerProtectionKernel coeffs Ch %u:\n at1C=%f;\n"
    " at2C=%f;\n"
    " csigma=%f;\n"
    " bt0C=%f;\n"
    " bt1C=%f;\n"
    " bt2C=%f;\n"
    " ca10=%f;\n"
    " ca11=%f;\n"
    " ca12=%f;\n"
    " ca20=%f;\n"
    " ca21=%f;\n"
    " ca22=%f;\n"
    " xUL=%f;\n"
    " sze0=%f;\n"
    " at1A=%f;\n"
    " at2A=%f;\n"
    " szc0=%f;\n"
    " at1B=%f;\n"
    " at2B=%f;\n"
    " ptp.ap1=%f;\n"
    " ptp.ap1a=%f;\n"
    " ptp.xlim=%f;\n"
    " flvavg=%f;\n"
    "Thermal Coeffs:\n"
    " AmbTemp=%f;\n"
    " th_ag=%f;\n"
    " invRt=%f;\n"
    " thermAtk=%f;\n"
    " thermRel=%f;\n"
    " th_ac1=%f;\n"
    " th_bc0=%f;\n"
    " th_bc1=%f;\n"
    " th_am1=%f;\n"
    " th_bm0=%f;\n"
    " th_bm1=%f;\n"
    " ThermalPeriod=%u;\n"
    " invThermalPeriod=%f;\n"
    " ThermalLim=%f;\n"
    " HardTempLimHR=%f;\n"
    " Thermal_kI=%f;\n"
    " ",
    a3,
    *((unsigned int *)this + 22),
    *((float *)this + 64),
    *((float *)this + 65),
    *((float *)this + 37),
    *((float *)this + 66),
    *((float *)this + 67),
    *((float *)this + 68),
    *((float *)this + 56),
    *((float *)this + 57),
    *((float *)this + 58),
    *((float *)this + 60),
    *((float *)this + 61),
    *((float *)this + 62),
    *((float *)this + 59),
    *((float *)this + 40),
    *((float *)this + 38),
    *((float *)this + 39),
    *((float *)this + 49),
    *((float *)this + 47),
    *((float *)this + 48),
    *((float *)this + 41),
    *((float *)this + 42),
    *((float *)this + 43),
    *((float *)this + 82),
    *((float *)this + 21),
    *((float *)this + 6),
    *((float *)this + 7),
    *((float *)this + 29),
    *((float *)this + 30),
    *((float *)this + 8),
    *((float *)this + 9),
    *((float *)this + 10),
    *((float *)this + 11),
    *(_QWORD *)&v5,
    *(_QWORD *)&v6,
    *((unsigned int *)this + 3),
    *(_QWORD *)&v7,
    *(_QWORD *)&v8,
    *((float *)this + 33),
    *((float *)this + 34),
    *((float *)this + 68),
    *((float *)this + 67),
    *((float *)this + 66),
    *((float *)this + 37),
    *((float *)this + 65),
    *((float *)this + 64));
}

void ClosedLoopSpeakerProtectionKernel::LogCoeffs(ClosedLoopSpeakerProtectionKernel *this)
{
  clsp::CLSP_Log *v2;
  float v3;
  clsp::CLSP_Log *v4;
  clsp::CLSP_Log *v5;
  float v6;
  clsp::CLSP_Log *v7;
  float v8;
  clsp::CLSP_Log *v9;
  float v10;
  clsp::CLSP_Log *v11;
  float v12;
  clsp::CLSP_Log *v13;
  float v14;
  clsp::CLSP_Log *v15;
  float v16;
  clsp::CLSP_Log *v17;
  float v18;
  clsp::CLSP_Log *v19;
  float v20;
  clsp::CLSP_Log *v21;
  float v22;
  clsp::CLSP_Log *v23;
  float v24;
  clsp::CLSP_Log *v25;
  float v26;
  clsp::CLSP_Log *v27;
  clsp::CLSP_Log *v28;
  clsp::CLSP_Log *v29;
  float v30;
  clsp::CLSP_Log *v31;
  float v32;
  clsp::CLSP_Log *v33;
  clsp::CLSP_Log *v34;
  clsp::CLSP_Log *v35;
  clsp::CLSP_Log *v36;
  float v37;
  clsp::CLSP_Log *v38;
  clsp::CLSP_Log *v39;
  clsp::CLSP_Log *v40;
  clsp::CLSP_Log *v41;
  clsp::CLSP_Log *v42;
  clsp::CLSP_Log *v43;
  clsp::CLSP_Log *v44;
  clsp::CLSP_Log *v45;
  clsp::CLSP_Log *v46;
  clsp::CLSP_Log *v47;
  clsp::CLSP_Log *v48;
  clsp::CLSP_Log *v49;
  clsp::CLSP_Log *v50;
  clsp::CLSP_Log *v51;
  clsp::CLSP_Log *v52;
  clsp::CLSP_Log *v53;
  clsp::CLSP_Log *v54;
  clsp::CLSP_Log *v55;
  clsp::CLSP_Log *v56;
  clsp::CLSP_Log *v57;
  clsp::CLSP_Log *v58;
  clsp::CLSP_Log *v59;
  clsp::CLSP_Log *v60;
  clsp::CLSP_Log *v61;
  clsp::CLSP_Log *v62;
  clsp::CLSP_Log *v63;
  clsp::CLSP_Log *v64;
  clsp::CLSP_Log *v65;
  clsp::CLSP_Log *v66;
  clsp::CLSP_Log *v67;
  clsp::CLSP_Log *v68;
  clsp::CLSP_Log *v69;
  clsp::CLSP_Log *v70;
  clsp::CLSP_Log *v71;
  float v72;
  clsp::CLSP_Log *v73;
  float v74;
  clsp::CLSP_Log *v75;
  float v76;
  clsp::CLSP_Log *v77;
  float v78;
  clsp::CLSP_Log *v79;
  clsp::CLSP_Log *v80;
  clsp::CLSP_Log *v81;
  clsp::CLSP_Log *v82;
  clsp::CLSP_Log *v83;
  clsp::CLSP_Log *v84;
  float __src;

  v2 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
  if (v2)
  {
    v3 = *((double *)this + 12);
    __src = v3;
    clsp::CLSP_Log::LogCLSPData(v2, &__src, 1);
    v4 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
    if (v4)
    {
      __src = *((float *)this + 26);
      clsp::CLSP_Log::LogCLSPData(v4, &__src, 1);
      v5 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
      if (v5)
      {
        v6 = *((double *)this + 56);
        __src = v6;
        clsp::CLSP_Log::LogCLSPData(v5, &__src, 1);
        v7 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
        if (v7)
        {
          v8 = *((double *)this + 50);
          __src = v8;
          clsp::CLSP_Log::LogCLSPData(v7, &__src, 1);
          v9 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
          if (v9)
          {
            v10 = *((double *)this + 51);
            __src = v10;
            clsp::CLSP_Log::LogCLSPData(v9, &__src, 1);
            v11 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
            if (v11)
            {
              v12 = *((double *)this + 52);
              __src = v12;
              clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
              v13 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
              if (v13)
              {
                v14 = *((double *)this + 53);
                __src = v14;
                clsp::CLSP_Log::LogCLSPData(v13, &__src, 1);
                v15 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                if (v15)
                {
                  v16 = *((double *)this + 55);
                  __src = v16;
                  clsp::CLSP_Log::LogCLSPData(v15, &__src, 1);
                  v17 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                  if (v17)
                  {
                    v18 = *((double *)this + 54);
                    __src = v18;
                    clsp::CLSP_Log::LogCLSPData(v17, &__src, 1);
                    v19 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                    if (v19)
                    {
                      v20 = *((double *)this + 49);
                      __src = v20;
                      clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
                      v21 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                      if (v21)
                      {
                        v22 = *((double *)this + 57);
                        __src = v22;
                        clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
                        v23 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                        if (v23)
                        {
                          v24 = *((double *)this + 43);
                          __src = v24;
                          clsp::CLSP_Log::LogCLSPData(v23, &__src, 1);
                          v25 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                          if (v25)
                          {
                            v26 = *((double *)this + 44);
                            __src = v26;
                            clsp::CLSP_Log::LogCLSPData(v25, &__src, 1);
                            v27 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                            if (v27)
                            {
                              __src = *((float *)this + 29);
                              clsp::CLSP_Log::LogCLSPData(v27, &__src, 1);
                              v28 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                              if (v28)
                              {
                                __src = *((float *)this + 30);
                                clsp::CLSP_Log::LogCLSPData(v28, &__src, 1);
                                v29 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                if (v29)
                                {
                                  v30 = *((double *)this + 45);
                                  __src = v30;
                                  clsp::CLSP_Log::LogCLSPData(v29, &__src, 1);
                                  v31 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                  if (v31)
                                  {
                                    v32 = *((double *)this + 46);
                                    __src = v32;
                                    clsp::CLSP_Log::LogCLSPData(v31, &__src, 1);
                                    v33 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                    if (v33)
                                    {
                                      __src = *((float *)this + 41);
                                      clsp::CLSP_Log::LogCLSPData(v33, &__src, 1);
                                      v34 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                      if (v34)
                                      {
                                        __src = *((float *)this + 42);
                                        clsp::CLSP_Log::LogCLSPData(v34, &__src, 1);
                                        v35 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22)
                                                                                 + 101);
                                        if (v35)
                                        {
                                          __src = *((float *)this + 50);
                                          clsp::CLSP_Log::LogCLSPData(v35, &__src, 1);
                                          v36 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                  + 2 * *((unsigned int *)this + 22)
                                                                  + 101);
                                          if (v36)
                                          {
                                            v37 = *((double *)this + 47);
                                            __src = v37;
                                            clsp::CLSP_Log::LogCLSPData(v36, &__src, 1);
                                            v38 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                    + 2 * *((unsigned int *)this + 22)
                                                                    + 101);
                                            if (v38)
                                            {
                                              __src = *((float *)this + 82);
                                              clsp::CLSP_Log::LogCLSPData(v38, &__src, 1);
                                              v39 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                      + 2 * *((unsigned int *)this + 22)
                                                                      + 101);
                                              if (v39)
                                              {
                                                __src = *((float *)this + 64);
                                                clsp::CLSP_Log::LogCLSPData(v39, &__src, 1);
                                                v40 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                        + 2 * *((unsigned int *)this + 22)
                                                                        + 101);
                                                if (v40)
                                                {
                                                  __src = *((float *)this + 65);
                                                  clsp::CLSP_Log::LogCLSPData(v40, &__src, 1);
                                                  v41 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                          + 2 * *((unsigned int *)this + 22)
                                                                          + 101);
                                                  if (v41)
                                                  {
                                                    __src = *((float *)this + 66);
                                                    clsp::CLSP_Log::LogCLSPData(v41, &__src, 1);
                                                    v42 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                            + 2 * *((unsigned int *)this + 22)
                                                                            + 101);
                                                    if (v42)
                                                    {
                                                      __src = *((float *)this + 67);
                                                      clsp::CLSP_Log::LogCLSPData(v42, &__src, 1);
                                                      v43 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                              + 2 * *((unsigned int *)this + 22)
                                                                              + 101);
                                                      if (v43)
                                                      {
                                                        __src = *((float *)this + 68);
                                                        clsp::CLSP_Log::LogCLSPData(v43, &__src, 1);
                                                        v44 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                + 2 * *((unsigned int *)this + 22)
                                                                                + 101);
                                                        if (v44)
                                                        {
                                                          __src = *((float *)this + 37);
                                                          clsp::CLSP_Log::LogCLSPData(v44, &__src, 1);
                                                          v45 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                  + 2 * *((unsigned int *)this + 22)
                                                                                  + 101);
                                                          if (v45)
                                                          {
                                                            __src = *((float *)this + 56);
                                                            clsp::CLSP_Log::LogCLSPData(v45, &__src, 1);
                                                            v46 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                    + 2 * *((unsigned int *)this + 22)
                                                                                    + 101);
                                                            if (v46)
                                                            {
                                                              __src = *((float *)this + 57);
                                                              clsp::CLSP_Log::LogCLSPData(v46, &__src, 1);
                                                              v47 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                      + 2 * *((unsigned int *)this + 22)
                                                                                      + 101);
                                                              if (v47)
                                                              {
                                                                __src = *((float *)this + 58);
                                                                clsp::CLSP_Log::LogCLSPData(v47, &__src, 1);
                                                                v48 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                        + 2
                                                                                        * *((unsigned int *)this + 22)
                                                                                        + 101);
                                                                if (v48)
                                                                {
                                                                  __src = *((float *)this + 60);
                                                                  clsp::CLSP_Log::LogCLSPData(v48, &__src, 1);
                                                                  v49 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                          + 2
                                                                                          * *((unsigned int *)this + 22)
                                                                                          + 101);
                                                                  if (v49)
                                                                  {
                                                                    __src = *((float *)this + 61);
                                                                    clsp::CLSP_Log::LogCLSPData(v49, &__src, 1);
                                                                    v50 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                            + 2
                                                                                            * *((unsigned int *)this + 22)
                                                                                            + 101);
                                                                    if (v50)
                                                                    {
                                                                      __src = *((float *)this + 62);
                                                                      clsp::CLSP_Log::LogCLSPData(v50, &__src, 1);
                                                                      v51 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                              + 2
                                                                                              * *((unsigned int *)this
                                                                                                + 22)
                                                                                              + 101);
                                                                      if (v51)
                                                                      {
                                                                        __src = *((float *)this + 59);
                                                                        clsp::CLSP_Log::LogCLSPData(v51, &__src, 1);
                                                                        v52 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                                + 2
                                                                                                * *((unsigned int *)this
                                                                                                  + 22)
                                                                                                + 101);
                                                                        if (v52)
                                                                        {
                                                                          __src = *((float *)this + 40);
                                                                          clsp::CLSP_Log::LogCLSPData(v52, &__src, 1);
                                                                          v53 = (clsp::CLSP_Log *)*((_QWORD *)this
                                                                                                  + 2 * *((unsigned int *)this + 22)
                                                                                                  + 101);
                                                                          if (v53)
                                                                          {
                                                                            __src = *((float *)this + 38);
                                                                            clsp::CLSP_Log::LogCLSPData(v53, &__src, 1);
                                                                            v54 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                            if (v54)
                                                                            {
                                                                              __src = *((float *)this + 39);
                                                                              clsp::CLSP_Log::LogCLSPData(v54, &__src, 1);
                                                                              v55 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                              if (v55)
                                                                              {
                                                                                __src = *((float *)this + 43);
                                                                                clsp::CLSP_Log::LogCLSPData(v55, &__src, 1);
                                                                                v56 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                if (v56)
                                                                                {
                                                                                  __src = *((float *)this + 49);
                                                                                  clsp::CLSP_Log::LogCLSPData(v56, &__src, 1);
                                                                                  v57 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                  if (v57)
                                                                                  {
                                                                                    __src = *((float *)this + 47);
                                                                                    clsp::CLSP_Log::LogCLSPData(v57, &__src, 1);
                                                                                    v58 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                    if (v58)
                                                                                    {
                                                                                      __src = *((float *)this + 48);
                                                                                      clsp::CLSP_Log::LogCLSPData(v58, &__src, 1);
                                                                                      v59 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                      if (v59)
                                                                                      {
                                                                                        __src = *((float *)this + 73);
                                                                                        clsp::CLSP_Log::LogCLSPData(v59, &__src, 1);
                                                                                        v60 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                        if (v60)
                                                                                        {
                                                                                          __src = *((float *)this + 74);
                                                                                          clsp::CLSP_Log::LogCLSPData(v60, &__src, 1);
                                                                                          v61 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                          if (v61)
                                                                                          {
                                                                                            __src = *((float *)this + 75);
                                                                                            clsp::CLSP_Log::LogCLSPData(v61, &__src, 1);
                                                                                            v62 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                            if (v62)
                                                                                            {
                                                                                              __src = *((float *)this + 76);
                                                                                              clsp::CLSP_Log::LogCLSPData(v62, &__src, 1);
                                                                                              v63 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                              if (v63)
                                                                                              {
                                                                                                __src = *((float *)this + 77);
                                                                                                clsp::CLSP_Log::LogCLSPData(v63, &__src, 1);
                                                                                                v64 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                if (v64)
                                                                                                {
                                                                                                  __src = *((float *)this + 32);
                                                                                                  clsp::CLSP_Log::LogCLSPData(v64, &__src, 1);
                                                                                                  v65 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                  if (v65)
                                                                                                  {
                                                                                                    __src = *((float *)this + 21);
                                                                                                    clsp::CLSP_Log::LogCLSPData(v65, &__src, 1);
                                                                                                    v66 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                    if (v66)
                                                                                                    {
                                                                                                      __src = *((float *)this + 34);
                                                                                                      clsp::CLSP_Log::LogCLSPData(v66, &__src, 1);
                                                                                                      v67 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                      if (v67)
                                                                                                      {
                                                                                                        __src = (float)*((unsigned int *)this + 3);
                                                                                                        clsp::CLSP_Log::LogCLSPData(v67, &__src, 1);
                                                                                                        v68 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                        if (v68)
                                                                                                        {
                                                                                                          __src = *((float *)this + 5);
                                                                                                          clsp::CLSP_Log::LogCLSPData(v68, &__src, 1);
                                                                                                          v69 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                          if (v69)
                                                                                                          {
                                                                                                            __src = *((float *)this + 6);
                                                                                                            clsp::CLSP_Log::LogCLSPData(v69, &__src, 1);
                                                                                                            v70 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                            if (v70)
                                                                                                            {
                                                                                                              __src = *((float *)this + 7);
                                                                                                              clsp::CLSP_Log::LogCLSPData(v70, &__src, 1);
                                                                                                              v71 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                              if (v71)
                                                                                                              {
                                                                                                                v72 = *((double *)this + 60);
                                                                                                                __src = v72;
                                                                                                                clsp::CLSP_Log::LogCLSPData(v71, &__src, 1);
                                                                                                                v73 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                if (v73)
                                                                                                                {
                                                                                                                  v74 = *((double *)this + 58);
                                                                                                                  __src = v74;
                                                                                                                  clsp::CLSP_Log::LogCLSPData(v73, &__src, 1);
                                                                                                                  v75 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                  if (v75)
                                                                                                                  {
                                                                                                                    v76 = *((double *)this + 61);
                                                                                                                    __src = v76;
                                                                                                                    clsp::CLSP_Log::LogCLSPData(v75, &__src, 1);
                                                                                                                    v77 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                    if (v77)
                                                                                                                    {
                                                                                                                      v78 = *((double *)this + 59);
                                                                                                                      __src = v78;
                                                                                                                      clsp::CLSP_Log::LogCLSPData(v77, &__src, 1);
                                                                                                                      v79 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                      if (v79)
                                                                                                                      {
                                                                                                                        __src = *((float *)this + 9);
                                                                                                                        clsp::CLSP_Log::LogCLSPData(v79, &__src, 1);
                                                                                                                        v80 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                        if (v80)
                                                                                                                        {
                                                                                                                          __src = *((float *)this + 10);
                                                                                                                          clsp::CLSP_Log::LogCLSPData(v80, &__src, 1);
                                                                                                                          v81 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                          if (v81)
                                                                                                                          {
                                                                                                                            __src = *((float *)this + 8);
                                                                                                                            clsp::CLSP_Log::LogCLSPData(v81, &__src, 1);
                                                                                                                            v82 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                            if (v82)
                                                                                                                            {
                                                                                                                              __src = *((float *)this + 12);
                                                                                                                              clsp::CLSP_Log::LogCLSPData(v82, &__src, 1);
                                                                                                                              v83 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                              if (v83)
                                                                                                                              {
                                                                                                                                __src = *((float *)this + 13);
                                                                                                                                clsp::CLSP_Log::LogCLSPData(v83, &__src, 1);
                                                                                                                                v84 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * *((unsigned int *)this + 22) + 101);
                                                                                                                                if (v84)
                                                                                                                                {
                                                                                                                                  __src = *((float *)this + 11);
                                                                                                                                  clsp::CLSP_Log::LogCLSPData(v84, &__src, 1);
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E69E4F68;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v4 + 3), (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1B626EFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[8],void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E69E4F68;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v4 + 3), (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1B626F070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[10],void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E69E4F68;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v4 + 3), (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1B626F11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[11],void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E69E4F68;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  clsp::CLSP_Log::CLSP_Log((uint64_t)(v4 + 3), (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1B626F1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<clsp::CLSP_Log>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E4F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::CLSP_Log>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E4F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<clsp::CLSP_Log>::__on_zero_shared(uint64_t a1)
{
  clsp::CLSP_Log::~CLSP_Log((dispatch_object_t *)(a1 + 24));
}

void ClosedLoopSpeakerProtectionKernel::~ClosedLoopSpeakerProtectionKernel(ClosedLoopSpeakerProtectionKernel *this)
{
  uint64_t i;

  *(_QWORD *)this = off_1E69CD720;
  for (i = 824; i != 792; i -= 16)
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 760);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 728);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 696);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 664);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 632);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 600);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 568);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 536);
  do
  {
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
    i -= 16;
  }
  while (i != 504);
}

float ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain(ClosedLoopSpeakerProtectionKernel *this)
{
  float v1;

  v1 = (*((float *)this + 64) + 1.0 - *((float *)this + 65))
     * *((float *)this + 37)
     * (float)((float)(*((float *)this + 66) + *((float *)this + 67)) + *((float *)this + 68))
     / (1.0 - *((float *)this + 64) - *((float *)this + 65));
  return log10f(v1) * 20.0;
}

void VoiceProcessorV9::~VoiceProcessorV9(VoiceProcessorV9 *this)
{
  VoiceProcessorV9::~VoiceProcessorV9(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  int v3;
  VPTimeFreqConverter *v4;
  VPTimeFreqConverter *v5;
  VPTimeFreqConverter *v6;
  VPTimeFreqConverter *v7;

  *(_QWORD *)this = &off_1E69CD7B0;
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::invalidate((uint64_t)this + 16600);
  v2 = (void **)*((_QWORD *)this + 2204);
  if (v2)
    vp::CFNotificationDelegate::shutdown(v2);
  myFreeABLDynamic((AudioBufferList **)this + 2174);
  v3 = *((_DWORD *)this + 18);
  if ((v3 - 9) < 0xD || (v3 - 26) <= 3)
  {
    myFreeABLDynamic((AudioBufferList **)this + 2183);
    myFreeABLDynamic((AudioBufferList **)this + 2184);
    myFreeABLDynamic((AudioBufferList **)this + 2185);
    myFreeABLDynamic((AudioBufferList **)this + 2186);
    myFreeABLDynamic((AudioBufferList **)this + 2187);
    myFreeABLDynamic((AudioBufferList **)this + 2202);
    v4 = (VPTimeFreqConverter *)*((_QWORD *)this + 2188);
    if (v4)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v4);
      MEMORY[0x1BCC95CEC]();
      *((_QWORD *)this + 2188) = 0;
    }
    v5 = (VPTimeFreqConverter *)*((_QWORD *)this + 2189);
    if (v5)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v5);
      MEMORY[0x1BCC95CEC]();
      *((_QWORD *)this + 2189) = 0;
    }
    v6 = (VPTimeFreqConverter *)*((_QWORD *)this + 2190);
    if (v6)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v6);
      MEMORY[0x1BCC95CEC]();
      *((_QWORD *)this + 2190) = 0;
    }
    v7 = (VPTimeFreqConverter *)*((_QWORD *)this + 2191);
    if (v7)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v7);
      MEMORY[0x1BCC95CEC]();
      *((_QWORD *)this + 2191) = 0;
    }
  }
  if (*((_DWORD *)this + 3098) == 12)
    myFreeABLDynamic((AudioBufferList **)this + 2203);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 17632);
  VoiceProcessorV8::~VoiceProcessorV8(this);
}

uint64_t VoiceProcessorV9::GetVersion(VoiceProcessorV9 *this)
{
  return 9;
}

BOOL VoiceProcessorV9::SupportsSWB(VoiceProcessorV9 *this)
{
  return (*((_DWORD *)this + 18) - 9) < 0xD;
}

uint64_t VoiceProcessorV9::Initialize(VoiceProcessorV9 *this)
{
  BOOL *v2;
  int v3;
  unsigned int v4;
  VPTimeFreqConverter *v5;
  VPTimeFreqConverter *v6;
  VPTimeFreqConverter *v7;
  VPTimeFreqConverter *v8;
  _DWORD *v9;
  BOOL v10;
  unsigned int v11;
  BOOL v12;

  v2 = (BOOL *)this + 17064;
  VoiceProcessorV8::Initialize(this);
  if (*((_DWORD *)this + 3098) == 12)
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), *((_DWORD *)v2 + 30) + *((_DWORD *)this + 127), (AudioBufferList **)this + 2203);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2174);
  v3 = *((_DWORD *)this + 18);
  if ((v3 - 26) <= 3)
  {
    VoiceProcessorV7::LoadTrimGains(this);
    v3 = *((_DWORD *)this + 18);
  }
  v4 = v3 - 9;
  if ((v3 - 9) < 0xD || (v3 - 26) <= 3)
  {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2183);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2184);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2185);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2186);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2187);
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 904), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2202);
    v5 = (VPTimeFreqConverter *)*((_QWORD *)this + 2188);
    if (v5)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v5);
      MEMORY[0x1BCC95CEC]();
    }
    VPTimeFreqConverter_Create(2, *((_DWORD *)this + 127), (VPTimeFreqConverter **)this + 2188);
    v6 = (VPTimeFreqConverter *)*((_QWORD *)this + 2189);
    if (v6)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v6);
      MEMORY[0x1BCC95CEC]();
    }
    VPTimeFreqConverter_Create(2, *((_DWORD *)this + 127), (VPTimeFreqConverter **)this + 2189);
    v7 = (VPTimeFreqConverter *)*((_QWORD *)this + 2190);
    if (v7)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v7);
      MEMORY[0x1BCC95CEC]();
    }
    VPTimeFreqConverter_Create(2, *((_DWORD *)this + 127), (VPTimeFreqConverter **)this + 2190);
    v8 = (VPTimeFreqConverter *)*((_QWORD *)this + 2191);
    if (v8)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v8);
      MEMORY[0x1BCC95CEC]();
    }
    VPTimeFreqConverter_Create(2, *((_DWORD *)this + 127), (VPTimeFreqConverter **)this + 2191);
  }
  if (v4 <= 0xC)
    v2[472] = 1;
  *v2 = 0;
  v9 = (_DWORD *)*((_QWORD *)this + 292);
  v10 = v9 != *((_DWORD **)this + 293) && *v9 == 1886613611;
  v11 = *((_DWORD *)this + 18);
  if (v11 <= 0x26)
  {
    if (((1 << v11) & 0x3B00000000) != 0)
    {
      if (v10)
      {
        v12 = 1;
        goto LABEL_27;
      }
    }
    else if (((1 << v11) & 0x403C000000) != 0)
    {
      v12 = *((_DWORD *)this + 3098) == 3;
LABEL_27:
      *v2 = v12;
    }
  }
  return 0;
}

void VoiceProcessorV9::SetupUplinkPowerWatchAUChain(VoiceProcessorV9 *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v6;
  int v7;

  v6 = (char *)this + 4656;
  v7 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)&v6);
  v2 = *((_QWORD *)this + 582);
  v3 = *((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = v3 | 0x10;
  *((_QWORD *)this + 582) = v2 | 0xC0000000080001C0;
  v4 = *((_DWORD *)this + 571);
  if (v4 == 1 || v4 == -1)
    *((_QWORD *)this + 583) = v3 | 0x12;
}

uint64_t VoiceProcessorV9::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 != 1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 4656);
    v4 = v3 | 0x400081;
    v5 = 4194463;
    if (a2 == 3)
      v5 = 4194447;
    v6 = v3 | v5;
    if (a2 >= 3)
    {
      v7 = a2 != 3;
    }
    else
    {
      v6 = v3 | 0x400087;
      v7 = 0;
    }
    v8 = a2 >= 3;
    if (a2)
      v9 = v6;
    else
      v9 = v4;
    if (a2)
      v10 = v7;
    else
      v10 = 0;
    if (!a2)
      v8 = 0;
    v11 = v9 & 0xF9FFFFFFDDFFF3FFLL;
    *(_QWORD *)(this + 4656) = v11 | 0x600000002000C00;
    if ((*(_DWORD *)(this + 72) - 26) <= 3)
    {
      if (v8)
        v12 = v11 | 0x600000002000D00;
      else
        v12 = v11 | 0x600000002000C00;
      if (v10)
        v13 = v12 | 0x200;
      else
        v13 = v12;
      *(_QWORD *)(this + 4656) = v13 & 0xFFDD37FFDE3FFFFFLL | 0x22880001C00000;
    }
    if (VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)this) == 1
      && (*(_BYTE *)(v2 + 16544) & 2) != 0)
    {
      *(_QWORD *)(v2 + 4656) |= 0x4000000000000uLL;
    }
    this = VoiceProcessorV2::GetChatFlavor((VoiceProcessorV2 *)v2);
    if ((_DWORD)this == 2 && (*(_BYTE *)(v2 + 16544) & 4) != 0)
    {
      *(_QWORD *)(v2 + 4656) |= 0x800000000000000uLL;
      if (*(_BYTE *)(v2 + 2246))
      {
        this = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)this);
        if ((_DWORD)this)
          *(_QWORD *)(v2 + 4664) |= 4uLL;
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV9::SetupUplink_NNVI_Multi(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 >= 2)
  {
    v2 = this;
    v3 = 12583310;
    if (a2 > 3)
      v3 = 29361054;
    if (a2 == 2)
      v3 = 4194438;
    *(_QWORD *)(this + 4656) = *(_QWORD *)(this + 4656) & 0xF1FFFBF7DFBFFF78 | v3 | 0x400000800000001;
    if (*(_BYTE *)(this + 2246))
    {
      this = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)this);
      if ((_DWORD)this)
        *(_QWORD *)(v2 + 4664) |= 4uLL;
    }
  }
  return this;
}

void VoiceProcessorV9::SetupDownlinkBasicAUChain(AUPropertyItem **this)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  VoiceProcessorV7::SetupDownlinkBasicAUChain((VoiceProcessorV7 *)this);
  v2 = (unint64_t)this[1104] & 0xFFFFEFF8FFFFFC43;
  this[1104] = (AUPropertyItem *)(v2 | 0x1004000002B8);
  v3 = *((_DWORD *)this + 18);
  if (v3 <= 0x34)
  {
    if (((1 << v3) & 0xDE60000000000) != 0)
    {
      if (((0x1FFFE33F3FFEF0uLL >> v3) & 1) != 0)
      {
        this[1104] = (AUPropertyItem *)(v2 | 0x1001004000002B8);
        LODWORD(v9[0]) = 1;
        AUPropAndParamHelper::AddItemToAUPropsList(this + 1531, 0xFA02u, 0, 0, 4uLL, v9, 1);
        v8 = 0;
        AUPropAndParamHelper::AddItemToAUPropsList(this + 1531, 0xFA04u, 0, 0, 4uLL, &v8, 1);
        if (this[278])
          AUPropAndParamHelper::AddItemToAUPropsList(this + 1531, 0xFA08u, 0, 0, 8uLL, this + 278, 1);
      }
    }
    else
    {
      if (((1 << v3) & 0x198000000000) != 0)
      {
        if (((0x1FFFE33F3FFEF0uLL >> v3) & 1) == 0)
          return;
        v4 = 0x81004000002B8;
      }
      else
      {
        if (((1 << v3) & 0x12000000000000) == 0)
          return;
        v5 = _os_feature_enabled_simple_impl();
        v6 = *((unsigned int *)this + 18);
        if (v6 == 52)
          v7 = v5;
        else
          v7 = 0;
        if (v6 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v6) & 1) != 0 && (v7 & 1) == 0)
        {
          this[1104] = (AUPropertyItem *)((unint64_t)this[1104] | 0x100000000000000);
          v8 = 1;
          AUPropAndParamHelper::AddItemToAUPropsList(this + 1531, 0xFA04u, 0, 0, 4uLL, &v8, 1);
          v9[0] = 1;
          AUPropAndParamHelper::AddItemToAUPropsList(this + 1531, 0xFA06u, 0, 0, 8uLL, v9, 1);
          if (this[278])
            AUPropAndParamHelper::AddItemToAUPropsList(this + 1531, 0xFA08u, 0, 0, 8uLL, this + 278, 1);
        }
        v2 = (unint64_t)this[1104] & 0xFFFFFFF3F9FFFFFFLL;
        v4 = 0x804000000;
      }
      this[1104] = (AUPropertyItem *)(v2 | v4);
    }
  }
}

uint64_t VoiceProcessorV9::ShouldThirdPartyAppUseFaceTimeDSPAndTuning(VoiceProcessorV9 *this)
{
  return 1;
}

BOOL VoiceProcessorV9::ShouldApplyThirdPartyAppTuningOverride(VoiceProcessorV9 *this)
{
  return **((_DWORD **)this + 292) == 1886613611 && !*((_DWORD *)this + 19);
}

BOOL VoiceProcessorV9::ShouldUseFullIOCycle(VoiceProcessorV9 *this)
{
  return **((_DWORD **)this + 292) == 1886613611
      || VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((_BYTE *)this + 16544) & 4) != 0
      || *((_DWORD *)this + 19) != 1;
}

uint64_t VoiceProcessorV9::OverrideMiscUseCase(VoiceProcessorV9 *this)
{
  return 0x1766F3234;
}

void std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69CDAC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69CDAC8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0,std::allocator<VoiceProcessorV9::VoiceProcessorV9(vp::Context const&)::$_0>,void ()(__CFDictionary const*)>::operator()(uint64_t a1)
{
  uint64_t v1;
  float v2;
  _QWORD *v3;
  NSObject *v4;
  int *v5;
  int *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v1 + 8838) & 0x80) != 0 && (*(_BYTE *)(v1 + 8846) & 0x80) != 0 && *(_QWORD *)(v1 + 3936))
  {
    if (FigCaptureSpeakerInterferenceMitigationIsRequired())
      v2 = 1.0;
    else
      v2 = 0.0;
    AudioUnitSetParameter(*(AudioUnit *)(v1 + 3936), 5u, 0, 0, v2, 0);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v3 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      v4 = (*v3 ? *v3 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v8 = "VoiceProcessor_v9.cpp";
        v9 = 1024;
        v10 = 33;
        v11 = 2048;
        v12 = v2;
        _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> notification: mitigate front camera noise: %f", buf, 0x1Cu);
      }
    }
    v5 = *(int **)(v1 + 12560);
    if (v5 && (*(_BYTE *)(v1 + 15897) || *(_BYTE *)(v1 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
      {
        v6 = *(int **)(v1 + 12560);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v5 = v6;
      }
      CALegacyLog::log(v5, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/VoiceProcessor_v9.cpp", 33, "operator()", "notification: mitigate front camera noise: %f", v2);
    }
  }
}

void vp::v9::create(vp::v9 *this@<X0>, VoiceProcessorV8 **a2@<X8>)
{
  VoiceProcessorV8 *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  char v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = (VoiceProcessorV8 *)operator new();
  VoiceProcessorV8::VoiceProcessorV8(v5, this);
  *(_QWORD *)v5 = &off_1E69CD7B0;
  *((_OWORD *)v5 + 1101) = 0u;
  *((_OWORD *)v5 + 1102) = 0u;
  v6 = (const void *)*MEMORY[0x1E0D040A0];
  if (*MEMORY[0x1E0D040A0])
    CFRetain((CFTypeRef)*MEMORY[0x1E0D040A0]);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)__p);
  v17[0] = &off_1E69CDAC8;
  v17[1] = v5;
  v18 = v17;
  vp::CFNotificationDelegate::createDelegate((uint64_t **)&v16, (uint64_t)__p, v17);
  std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)v5 + 17632, &v16);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_14;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
  if (v15 < 0)
    operator delete(__p[0]);
  if (cf)
    CFRelease(cf);
  *a2 = v5;
}

void sub_1B62701E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  VoiceProcessorV8 *v22;
  uint64_t v23;
  void *v24;

  __cxa_free_exception(v24);
  applesauce::CF::StringRef::~StringRef(&a10);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v23);
  VoiceProcessorV8::~VoiceProcessorV8(v22);
  MEMORY[0x1BCC95CEC](v22, 0x10F3C4089A4D6F6);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::TryLoadingTuningPlists(VoiceProcessorV2 *this, const char *a2, const char *a3, const char *__s1, unsigned int a5, unsigned int a6, unsigned int a7)
{
  BOOL v14;
  int v15;
  const void *v16;
  int v17;
  const void *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  const char *v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, char *, const char *);
  void *v27;
  uint64_t *v28;
  VoiceProcessorV2 *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  char v42[16];
  char v43[16];
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  char *v49;
  __int16 v50;
  char *v51;
  __int16 v52;
  _BYTE *v53;
  __int16 v54;
  _QWORD *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  char *v61;
  char v62[64];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  v14 = (!__s1 || strcmp(__s1, "gen")) && *((_BYTE *)this + 60) != 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 0x40000000;
  v26 = ___ZN16VoiceProcessorV222TryLoadingTuningPlistsEPKcS1_S1_jjj_block_invoke;
  v27 = &unk_1E69CDB08;
  v36 = v14;
  v33 = a5;
  v34 = a6;
  v35 = a7;
  v30 = __s1;
  v31 = a2;
  v32 = a3;
  v28 = &v37;
  v29 = this;
  v15 = ___ZN16VoiceProcessorV222TryLoadingTuningPlistsEPKcS1_S1_jjj_block_invoke((uint64_t)v25, v62, "ulnk");
  v16 = (const void *)v38[3];
  if (v16)
  {
    CACFString::operator=((uint64_t)this + 4536, v16);
    CFRelease((CFTypeRef)v38[3]);
    v38[3] = 0;
  }
  v17 = v26((uint64_t)v25, v62, "dlnk");
  v18 = (const void *)v38[3];
  if (v18)
  {
    CACFString::operator=((uint64_t)this + 4552, v18);
    CFRelease((CFTypeRef)v38[3]);
    v38[3] = 0;
  }
  if (!(v15 | v17))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v19 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v20 = (*v19 ? *v19 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a5);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v42, a6);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v41, a7);
        v21 = (_QWORD *)((char *)this + 8);
        if (*((char *)this + 31) < 0)
          v21 = (_QWORD *)*v21;
        *(_DWORD *)buf = 136317186;
        v45 = "vpAspen_v2.cpp";
        v46 = 1024;
        v47 = 159;
        v48 = 2080;
        v49 = v43;
        v50 = 2080;
        v51 = v42;
        v52 = 2080;
        v53 = v41;
        v54 = 2080;
        v55 = v21;
        v56 = 2080;
        v57 = a2;
        v58 = 2080;
        v59 = a3;
        v60 = 2080;
        v61 = v62;
        _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Tunings loaded successfully for %s-%s-%s! '%s/%s/%s/%s'", buf, 0x58u);
      }
    }
    v22 = (int *)*((_QWORD *)this + 1570);
    if (v22 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v23 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, a5);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a6);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v42, a7);
      v24 = (char *)this + 8;
      if (*((char *)this + 31) < 0)
        v24 = *(const char **)v24;
      CALegacyLog::log(v22, 3, v23, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 159, "TryLoadingTuningPlists", "Tunings loaded successfully for %s-%s-%s! '%s/%s/%s/%s'", (const char *)buf, v43, v42, v24, a2, a3, v62);
    }
    *((_BYTE *)this + 4568) = 1;
  }
  _Block_object_dispose(&v37, 8);
}

void sub_1B627065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16VoiceProcessorV222TryLoadingTuningPlistsEPKcS1_S1_jjj_block_invoke(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  _QWORD *v9;
  NSObject *v10;
  int *v11;
  uint64_t Tuning;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  int v23;
  const char *v24;
  size_t v25;
  std::string *v26;
  __int128 v27;
  const char *v28;
  size_t v29;
  std::string *v30;
  __int128 v31;
  _QWORD *v32;
  NSObject *v33;
  int v34;
  void **v35;
  void **v36;
  std::string *v37;
  int *v38;
  uint64_t v39;
  int v40;
  void **v41;
  void **v42;
  const char *v43;
  _QWORD *v44;
  NSObject *v45;
  int *v46;
  _QWORD *v47;
  NSObject *v48;
  int v49;
  void **v50;
  void **v51;
  std::string *v52;
  int *v53;
  uint64_t v54;
  int v55;
  void **v56;
  void **v57;
  const char *v58;
  _BYTE __s[12];
  __int16 v61;
  int v62;
  __int16 v63;
  void **v64;
  __int16 v65;
  std::string *v66;
  std::string v67;
  void *__p[2];
  std::string::size_type v69;
  _BYTE buf[72];
  void *v71;
  char v72;
  _QWORD v73[22];

  v73[19] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 84))
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(a1 + 72));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, *(_DWORD *)(a1 + 76));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(_DWORD *)(a1 + 80));
    v7 = snprintf(a2, 0x40uLL, "%s-%s-%s-%s");
  }
  else
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(a1 + 72));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, *(_DWORD *)(a1 + 76));
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(_DWORD *)(a1 + 80));
    v7 = snprintf(a2, 0x40uLL, "%s-%s-%s-%s-%s");
  }
  v8 = (_BYTE *)(v6 + 15897);
  if (v7 >= 0x41)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v9 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 117;
        _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> snprintf error", buf, 0x12u);
      }
    }
    v11 = *(int **)(v6 + 12560);
    if (v11 && (*v8 || *(_BYTE *)(v6 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v11, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 117, "TryLoadingTuningPlists_block_invoke", "snprintf error");
    }
    return 0xFFFFFFFFLL;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, *(_DWORD *)(a1 + 72));
  v13 = strlen(__s);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)__s, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-", 1);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__p, *(_DWORD *)(a1 + 76));
  v16 = strlen((const char *)__p);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"-", 1);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v67, *(_DWORD *)(a1 + 80));
  v19 = strlen((const char *)&v67);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v67, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-", 1);
  v22 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a3, v22);
  if (*(_BYTE *)(a1 + 84))
  {
    GetHWIdentifierString((uint64_t)__s, *(_QWORD *)(v6 + 56));
    v23 = SBYTE3(v64);
    v24 = *(const char **)__s;
    std::string::basic_string[abi:ne180100]<0>(&v67, "/");
    if (v23 >= 0)
      v24 = __s;
    v25 = strlen(v24);
    v26 = std::string::insert(&v67, 0, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v69 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (!BYTE4(v64))
      goto LABEL_31;
  }
  else
  {
    v28 = *(const char **)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(__s, "-");
    v29 = strlen(v28);
    v30 = std::string::insert((std::string *)__s, 0, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v69 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
  }
  if (SBYTE3(v64) < 0)
    operator delete(*(void **)__s);
LABEL_31:
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v32 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v33 = (*v32 ? *v32 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v34 = SHIBYTE(v69);
      v35 = (void **)__p[0];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &v67);
      v36 = __p;
      if (v34 < 0)
        v36 = v35;
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v67;
      else
        v37 = (std::string *)v67.__r_.__value_.__r.__words[0];
      *(_DWORD *)__s = 136315906;
      *(_QWORD *)&__s[4] = "vpAspen_v2.cpp";
      v61 = 1024;
      v62 = 126;
      v63 = 2080;
      v64 = v36;
      v65 = 2080;
      v66 = v37;
      _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Trying to load tuning %s%s", __s, 0x26u);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
  v38 = *(int **)(v6 + 12560);
  if (v38 && (*v8 || *(_BYTE *)(v6 + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v39 = VPLogScope(void)::scope;
    v40 = SHIBYTE(v69);
    v41 = (void **)__p[0];
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __s);
    v42 = __p;
    if (v40 < 0)
      v42 = v41;
    if (SBYTE3(v64) >= 0)
      v43 = __s;
    else
      v43 = *(const char **)__s;
    CALegacyLog::log(v38, 5, v39, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 126, "TryLoadingTuningPlists_block_invoke", "Trying to load tuning %s%s", (const char *)v42, v43);
    if (SBYTE3(v64) < 0)
      operator delete(*(void **)__s);
  }
  Tuning = TuningPListMgr::loadTuning(*(_QWORD *)(v6 + 2728), *(const char **)(a1 + 56), *(const char **)(a1 + 64), a2, 0);
  if ((_DWORD)Tuning)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v44 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v45 = (*v44 ? *v44 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__s = 136315394;
        *(_QWORD *)&__s[4] = "vpAspen_v2.cpp";
        v61 = 1024;
        v62 = 132;
        _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Couldn't load tuning strip", __s, 0x12u);
      }
    }
    v46 = *(int **)(v6 + 12560);
    if (v46 && (*v8 || *(_BYTE *)(v6 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v46, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 132, "TryLoadingTuningPlists_block_invoke", "Couldn't load tuning strip");
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v47 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v48 = (*v47 ? *v47 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        v49 = SHIBYTE(v69);
        v50 = (void **)__p[0];
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &v67);
        v51 = __p;
        if (v49 < 0)
          v51 = v50;
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &v67;
        else
          v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
        *(_DWORD *)__s = 136315906;
        *(_QWORD *)&__s[4] = "vpAspen_v2.cpp";
        v61 = 1024;
        v62 = 138;
        v63 = 2080;
        v64 = v51;
        v65 = 2080;
        v66 = v52;
        _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Succesfully loaded tuning strip %s%s", __s, 0x26u);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
      }
    }
    v53 = *(int **)(v6 + 12560);
    if (v53 && (*v8 || *(_BYTE *)(v6 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v54 = VPLogScope(void)::scope;
      v55 = SHIBYTE(v69);
      v56 = (void **)__p[0];
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], __s);
      v57 = __p;
      if (v55 < 0)
        v57 = v56;
      if (SBYTE3(v64) >= 0)
        v58 = __s;
      else
        v58 = *(const char **)__s;
      CALegacyLog::log(v53, 5, v54, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 138, "TryLoadingTuningPlists_block_invoke", "Succesfully loaded tuning strip %s%s", (const char *)v57, v58);
      if (SBYTE3(v64) < 0)
        operator delete(*(void **)__s);
    }
  }
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (v72 < 0)
    operator delete(v71);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCC95BE4](v73);
  return Tuning;
}

void sub_1B6271008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a34 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t CACFString::operator=(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4;
  BOOL v5;

  v4 = *(CFTypeRef *)a1;
  if (v4 != cf)
  {
    if (v4)
      v5 = *(_BYTE *)(a1 + 8) == 0;
    else
      v5 = 1;
    if (!v5)
      CFRelease(v4);
    *(_QWORD *)a1 = cf;
  }
  *(_BYTE *)(a1 + 8) = 1;
  if (cf)
    CFRetain(cf);
  return a1;
}

uint64_t TuningPListMgr::loadTuning(uint64_t a1, const char *a2, const char *a3, const char *a4, unsigned int a5)
{
  uint64_t TuningInSubdirs;
  CFStringRef v11;
  char v12;
  CFStringRef v13;
  char v14;
  CFStringRef v15;
  char v16;
  const __CFString **v17[4];

  v17[3] = *(const __CFString ***)MEMORY[0x1E0C80C00];
  v15 = CFStringCreateWithCString(0, a2, 0x600u);
  v16 = 1;
  v13 = CFStringCreateWithCString(0, a3, 0x600u);
  v14 = 1;
  v11 = CFStringCreateWithCString(0, a4, 0x600u);
  v12 = 1;
  v17[0] = &v15;
  v17[1] = &v13;
  v17[2] = &v11;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(a1, v17, 3u, a5);
  CACFString::~CACFString((CACFString *)&v11);
  CACFString::~CACFString((CACFString *)&v13);
  CACFString::~CACFString((CACFString *)&v15);
  return TuningInSubdirs;
}

void sub_1B6271210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  CACFString::~CACFString((CACFString *)&a9);
  CACFString::~CACFString((CACFString *)&a11);
  CACFString::~CACFString((CACFString *)&a13);
  _Unwind_Resume(a1);
}

uint64_t GetPortCodeForTuning(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int (*a8)(uint64_t, uint64_t, uint64_t), unsigned int (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10, char a11)
{
  unsigned int v14;
  _QWORD *v18;
  NSObject *v19;
  const char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t **v28;
  unsigned int v29;
  _QWORD *v30;
  _BYTE v32[16];
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  _BYTE *v40;
  uint64_t v41;

  v14 = a4;
  v41 = *MEMORY[0x1E0C80C00];
  if (a8(a3, a4, a5))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v18 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v32, v14);
        *(_DWORD *)buf = 136315906;
        v34 = "vpAspen_v2.cpp";
        v35 = 1024;
        v36 = 179;
        v37 = 2080;
        v38 = a10;
        v39 = 2080;
        v40 = v32;
        v20 = "%25s:%-5d a known sub port type overrode the %s port type %s";
LABEL_11:
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, v20, buf, 0x26u);
      }
    }
  }
  else
  {
    v14 = a2;
    if (a9(a3, a6, a5))
    {
      v23 = *(uint64_t **)(a7 + 8);
      v22 = (uint64_t *)(a7 + 8);
      v21 = v23;
      v14 = a2;
      if (v23)
      {
        v24 = v22;
        v25 = v21;
        do
        {
          v26 = *((_DWORD *)v25 + 7);
          v27 = v26 >= a6;
          if (v26 >= a6)
            v28 = (uint64_t **)v25;
          else
            v28 = (uint64_t **)(v25 + 1);
          if (v27)
            v24 = v25;
          v25 = *v28;
        }
        while (*v28);
        v14 = a2;
        if (v24 != v22)
        {
          v14 = a2;
          if (*((_DWORD *)v24 + 7) <= a6)
          {
            while (1)
            {
              while (1)
              {
                v29 = *((_DWORD *)v21 + 7);
                if (v29 <= a6)
                  break;
                v21 = (uint64_t *)*v21;
                if (!v21)
                  goto LABEL_29;
              }
              if (v29 >= a6)
                break;
              v21 = (uint64_t *)v21[1];
              if (!v21)
LABEL_29:
                std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            }
            v14 = *((_DWORD *)v21 + 8);
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v30 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v19 = (*v30 ? *v30 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
              {
                CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v32, v14);
                *(_DWORD *)buf = 136315906;
                v34 = "vpAspen_v2.cpp";
                v35 = 1024;
                v36 = 187;
                v37 = 2080;
                v38 = a10;
                v39 = 2080;
                v40 = v32;
                v20 = "%25s:%-5d a known port endpoint type overrode the %s port type %s";
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  if ((a1 - 39) <= 0xD && (a2 == 1886216820 || a2 == 1885892706))
    v14 = 1987079284;
  if (a11)
    return 1751676528;
  else
    return v14;
}

uint64_t VoiceProcessorV2::GetRefPortCodeForTuning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  unsigned int PortCodeForTuning;
  uint64_t v14;
  unsigned int v17;
  uint64_t v20[3];
  uint64_t v21[3];
  _BYTE v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  qmemcpy(v22, "pspepspettpeottphvpehvpe", sizeof(v22));
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v21, (unsigned int *)v22, 3);
  v12 = *(_DWORD *)(a1 + 72);
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v20, v21);
  PortCodeForTuning = GetPortCodeForTuning(v12, a2, a2, a3, a4, a5, (uint64_t)v20, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portSubTypeCanOverrideRefPortType, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType, (uint64_t)"ref", *(_BYTE *)(a1 + 2085));
  v14 = 1885433971;
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)v20[1]);
  if (PortCodeForTuning != 1885631344 && PortCodeForTuning != 1885889645)
  {
    if ((_DWORD)a6 != 1835361379 || (a6 & 0xFF00000000) == 0 || *(_BYTE *)(a1 + 2244) == 0)
      v17 = 1885892727;
    else
      v17 = 1886152047;
    if (PortCodeForTuning == 1886152047 && (_DWORD)a4 == 1886152041)
      v14 = v17;
    else
      v14 = PortCodeForTuning;
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)v21[1]);
  return v14;
}

void sub_1B62716E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a14);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a17);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(a1, v4, *a2, *(_QWORD *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1B6271774(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,unsigned int>::map[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(a1, v3, *((_DWORD *)v5 + 7), *(_QWORD *)((char *)v5 + 28));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1B627181C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

BOOL VoiceProcessorV2::portSubTypeCanOverrideRefPortType(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  return (_DWORD)this == 1885892727 && a2 >> 1 == 823859251 && a3 == 1886222185;
}

uint64_t VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(VoiceProcessorV2 *this, int a2)
{
  unsigned __int8 v2;
  int v4;
  int v5;
  int v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v6 = (int)this;
    v4 = a2;
    a2 = v4;
    v5 = (int)this;
    LODWORD(this) = v6;
    if (v5)
    {
      v7[0] = 0x70687062706C656FLL;
      std::vector<unsigned int>::vector[abi:ne180100](VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, v7, 2uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, &dword_1B5ED0000);
      a2 = v4;
      LODWORD(this) = v6;
    }
  }
  return portEndpointTypeCanOverridePortType((int)this, a2, VoiceProcessorV2::portEndpointTypeCanOverrideRefPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden);
}

void sub_1B6271944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned int>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1B62719C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<unsigned int>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t portEndpointTypeCanOverridePortType(int a1, int a2, _QWORD *a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if ((v3 & 1) == 0)
  {
    v16 = a2;
    v17 = a1;
    v13 = a3;
    a3 = v13;
    v15 = v14;
    a2 = v16;
    a1 = v17;
    if (v15)
    {
      qmemcpy(v18, "hvpepspettpe", 12);
      std::vector<unsigned int>::vector[abi:ne180100](portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride, v18, 3uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride, &dword_1B5ED0000);
      a2 = v16;
      a1 = v17;
      a3 = v13;
    }
  }
  if (unk_1EF1359C8 == portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride[0])
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
      v5 |= *(_DWORD *)(portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride[0]
                      + 4 * v4++) == a2;
    while ((unk_1EF1359C8
           - portEndpointTypeCanOverridePortType(unsigned int,unsigned int,std::vector<unsigned int> const&)::endpointTypesThatCanOverride[0]) >> 2 > (unint64_t)v4);
  }
  v6 = a3[1];
  v7 = v6 - *a3;
  if (v6 == *a3)
  {
    v11 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = v7 >> 2;
    do
      v9 |= *(_DWORD *)(*a3 + 4 * v8++) == a1;
    while (v10 > v8);
    v11 = v9 & v5;
  }
  return v11 & 1;
}

void sub_1B6271B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;

  v5 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = (uint64_t **)v10;
      else
        v13 = (uint64_t **)a2;
      if (v8)
        v11 = (uint64_t **)(v10 + 1);
      else
        v11 = (uint64_t **)a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v17;
          v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_45:
      v11 = v6;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v7 >= a3)
    return result;
  v11 = (uint64_t **)(a2 + 1);
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v11 = (uint64_t **)v12;
      v12 = (uint64_t *)*v12;
      v13 = v11;
      v14 = v11;
    }
    while (v12);
  }
  else
  {
    v14 = (uint64_t **)a2;
    do
    {
      v19 = (uint64_t *)v14;
      v14 = (uint64_t **)v14[2];
    }
    while (*v14 != v19);
    v13 = (uint64_t **)a2;
  }
  if (v14 != v6 && *((_DWORD *)v14 + 7) <= a3)
  {
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v20;
          v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_45;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
LABEL_43:
    v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }
LABEL_22:
  v6 = v11;
  if (!*v11)
  {
LABEL_44:
    v22 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v22 + 28) = a4;
    return std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
  }
  return result;
}

uint64_t VoiceProcessorV2::GetMicPortCodeForTuning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  uint64_t PortCodeForTuning;
  uint64_t v17[3];
  uint64_t v18[3];
  _BYTE v19[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  qmemcpy(v19, "pspepspettpeittphvpehvpe", sizeof(v19));
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v18, (unsigned int *)v19, 3);
  v12 = *(_DWORD *)(a1 + 72);
  std::map<unsigned int,unsigned int>::map[abi:ne180100](v17, v18);
  PortCodeForTuning = GetPortCodeForTuning(v12, a4, a2, a3, a4, a5, (uint64_t)v17, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portSubTypeCanOverrideMicPortType, (unsigned int (*)(uint64_t, uint64_t, uint64_t))VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType, (uint64_t)"mic", *(_BYTE *)(a1 + 2085));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)v17[1]);
  if ((_DWORD)a2 == 1886152047 && (_DWORD)PortCodeForTuning == 1886152041)
  {
    if ((_DWORD)a6 != 1835361379 || (a6 & 0xFF00000000) == 0 || *(_BYTE *)(a1 + 2244) == 0)
      PortCodeForTuning = 1886222185;
    else
      PortCodeForTuning = 1886152041;
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)v18[1]);
  return PortCodeForTuning;
}

void sub_1B6271EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a14);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a17);
  _Unwind_Resume(a1);
}

BOOL VoiceProcessorV2::portSubTypeCanOverrideMicPortType(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  return (_DWORD)this == 1885892727 && a2 >> 1 == 823859251 && a3 == 1886222185;
}

uint64_t VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(VoiceProcessorV2 *this, int a2, int a3)
{
  int v3;
  unsigned __int8 v4;
  int v6;
  int v7;
  int v8;
  int v10;

  v3 = a3;
  if ((v4 & 1) == 0)
  {
    v6 = a2;
    a2 = v6;
    v8 = v7;
    v3 = a3;
    if (v8)
    {
      v10 = 1886216820;
      std::vector<unsigned int>::vector[abi:ne180100](VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, &v10, 1uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden, &dword_1B5ED0000);
      a2 = v6;
      v3 = a3;
    }
  }
  return portEndpointTypeCanOverridePortType(v3, a2, VoiceProcessorV2::portEndpointTypeCanOverrideMicPortType(unsigned int,unsigned int,unsigned int)::endpointTypesThatCanBeOverridden);
}

void sub_1B6271FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::LoadTuningsPlists(VoiceProcessorV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  const char *v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD **v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  int v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *p_p;
  _QWORD *v31;
  NSObject *v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  int *v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  void **v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  char v58;
  void **v59;
  void **v60;
  void *v61;
  _QWORD *v62;
  NSObject *v63;
  int *v64;
  char *v66;
  unsigned int v67;
  unsigned int v68;
  void *v69[2];
  char v70;
  void *v71[2];
  unsigned __int8 v72;
  void *v73[2];
  unsigned __int8 v74;
  std::string v75;
  std::string v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  void **v80;
  char v81[16];
  char v82[16];
  char __s[16];
  std::string v84;
  _QWORD v85[2];
  std::string __p;
  std::string v87;
  _BYTE buf[104];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v2 = **((unsigned int **)this + 292);
  v3 = *((unsigned int *)this + 596);
  v4 = **((unsigned int **)this + 295);
  v5 = *((unsigned int *)this + 597);
  v6 = (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                 + 488))(this, v2, v3, v4, v5, 0);
  v67 = v4;
  v68 = v2;
  v7 = (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this
                                                                                                 + 496))(this, v2, v3, v4, v5, 0);
  v8 = *((_DWORD *)this + 21);
  qmemcpy(buf, "anpf80pfa6pfawpfa9pfa6pfaopfawpfawpf61pfenpf80pfe6pfewpfe9pfe6pfeopfewpfewpf61pf42pf42ovbntr42pfbwtr42pf", sizeof(buf));
  std::map<unsigned int,unsigned int>::map[abi:ne180100](&v77, (unsigned int *)buf, 13);
  v66 = (char *)this + 15897;
  v9 = (char *)this + 4568;
  while (1)
  {
    v10 = v6;
    v11 = v7;
    if (!VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(this))
    {
      VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)buf, (uint64_t)this);
      if (buf[23] >= 0)
        v26 = buf;
      else
        v26 = *(const char **)buf;
      VoiceProcessorV2::GetVersionNameForTuning(&v87, (uint64_t)this);
      v27 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
      v28 = v87.__r_.__value_.__r.__words[0];
      VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&__p, (uint64_t)this);
      if (v27 >= 0)
        v29 = &v87;
      else
        v29 = (std::string *)v28;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      VoiceProcessorV2::TryLoadingTuningPlists(this, v26, (const char *)v29, (const char *)p_p, v10, v11, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
LABEL_67:
      v12 = *v9;
      goto LABEL_68;
    }
    v8 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 472))(this);
    v12 = *v9;
    if (!*v9 && v79)
    {
      LODWORD(v13) = 0;
      while (1)
      {
        VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)buf, (uint64_t)this);
        if (buf[23] >= 0)
          v14 = buf;
        else
          v14 = *(const char **)buf;
        VoiceProcessorV2::GetVersionNameForTuning(&v87, (uint64_t)this);
        v15 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
        v16 = v87.__r_.__value_.__r.__words[0];
        VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&__p, (uint64_t)this);
        if (v15 >= 0)
          v17 = &v87;
        else
          v17 = (std::string *)v16;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &__p;
        else
          v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        VoiceProcessorV2::TryLoadingTuningPlists(this, v14, (const char *)v17, (const char *)v18, v10, v11, v8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (v8 == *((_DWORD *)this + 21))
          goto LABEL_67;
        v19 = v78;
        if (!v78)
          goto LABEL_52;
        v20 = &v78;
        do
        {
          v21 = v19;
          v22 = v20;
          v23 = *((_DWORD *)v19 + 7);
          v24 = v19 + 1;
          if (v23 >= v8)
          {
            v24 = v21;
            v20 = (_QWORD **)v21;
          }
          v19 = (_QWORD *)*v24;
        }
        while (v19);
        if (v20 == &v78 || (v23 >= v8 ? (v25 = v21) : (v25 = v22), v8 < *((_DWORD *)v25 + 7)))
        {
LABEL_52:
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v31 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v32 = (*v31 ? *v31 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v87, v8);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "vpAspen_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 307;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = &v87;
              _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> No vocoder tuning fallback could be found for vocoder type %s", buf, 0x1Cu);
            }
          }
          v33 = (int *)*((_QWORD *)this + 1570);
          if (v33 && (*v66 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v34 = VPLogScope(void)::scope;
            CAX4CCString::CAX4CCString((CAX4CCString *)buf, v8);
            CALegacyLog::log(v33, 3, v34, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 307, "LoadTuningsPlists", "No vocoder tuning fallback could be found for vocoder type %s", buf);
          }
          goto LABEL_67;
        }
        if (v23 < v8)
          v21 = v22;
        v8 = *((_DWORD *)v21 + 8);
        if (!*v9)
        {
          v13 = (v13 + 1);
          if (v79 > v13)
            continue;
        }
        goto LABEL_67;
      }
    }
LABEL_68:
    if (v12)
    {
      v39 = 0;
      *((_DWORD *)this + 23) = v8;
      goto LABEL_150;
    }
    if (v10 == v68 && v11 == v67)
      break;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v35 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v87, v10);
        CAX4CCString::CAX4CCString((CAX4CCString *)&__p, v11);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 320;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &v87;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = &__p;
        _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> no custom tuning plists found for headphone, headset or endpoint-specific device %s-%s; trying"
          " to find tunings for the original ref & mic port types...\n",
          buf,
          0x26u);
      }
    }
    v37 = (int *)*((_QWORD *)this + 1570);
    v7 = v67;
    v6 = v68;
    if (v37)
    {
      if (*v66 || (v7 = v67, v6 = v68, *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v38 = VPLogScope(void)::scope;
        CAX4CCString::CAX4CCString((CAX4CCString *)buf, v10);
        CAX4CCString::CAX4CCString((CAX4CCString *)&v87, v11);
        CALegacyLog::log(v37, 1, v38, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 320, "LoadTuningsPlists", "no custom tuning plists found for headphone, headset or endpoint-specific device %s-%s; trying to find tunings"
          " for the original ref & mic port types...\n",
          buf,
          (const char *)&v87);
        v7 = v67;
        v6 = v68;
      }
    }
  }
  *((_DWORD *)this + 23) = v8;
  if (VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(this))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v40 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v41 = (*v40 ? *v40 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v87, v68);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__p, v67);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v84, v8);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 333;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &v87;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = &__p;
        *(_WORD *)&buf[38] = 2080;
        *(_QWORD *)&buf[40] = &v84;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> NEW TUNING LOGIC <SERIOUS ERROR>: no tuning plists found. Using default paramters!!! Use case %s-%s-%s", buf, 0x30u);
      }
    }
    v42 = (int *)*((_QWORD *)this + 1570);
    if (v42 && (*v66 || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v43 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, v68);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v87, v67);
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__p, v8);
      CALegacyLog::log(v42, 1, v43, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 333, "LoadTuningsPlists", "NEW TUNING LOGIC <SERIOUS ERROR>: no tuning plists found. Using default paramters!!! Use case %s-%s-%s", buf, (const char *)&v87, (const char *)&__p);
    }
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, v68);
    std::string::basic_string[abi:ne180100]<0>(&v75, __s);
    v44 = std::string::insert(&v75, 0, "No tuning plists found, using default paramters. Use case ", 0x3AuLL);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v76, "-", 1uLL);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v82, v67);
    std::string::basic_string[abi:ne180100]<0>(v73, v82);
    if ((v74 & 0x80u) == 0)
      v48 = v73;
    else
      v48 = (void **)v73[0];
    if ((v74 & 0x80u) == 0)
      v49 = v74;
    else
      v49 = (std::string::size_type)v73[1];
    v50 = std::string::append(&v84, (const std::string::value_type *)v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&__p, "-", 1uLL);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v81, v8);
    std::string::basic_string[abi:ne180100]<0>(v71, v81);
    if ((v72 & 0x80u) == 0)
      v54 = v71;
    else
      v54 = (void **)v71[0];
    if ((v72 & 0x80u) == 0)
      v55 = v72;
    else
      v55 = (std::string::size_type)v71[1];
    v56 = std::string::append(&v87, (const std::string::value_type *)v54, v55);
    v57 = v56->__r_.__value_.__r.__words[0];
    v85[0] = v56->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v85 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
    v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v69, "vp_tuning_setup_error");
    v80 = v69;
    v59 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, v69, (_OWORD **)&v80);
    v60 = v59;
    if (*((char *)v59 + 79) < 0)
      operator delete(v59[7]);
    v61 = (void *)v85[0];
    v60[7] = (void *)v57;
    v60[8] = v61;
    *(void **)((char *)v60 + 71) = *(void **)((char *)v85 + 7);
    *((_BYTE *)v60 + 79) = v58;
    if (v70 < 0)
      operator delete(v69[0]);
    if ((char)v72 < 0)
      operator delete(v71[0]);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v74 < 0)
      operator delete(v73[0]);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
  }
  else
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v62 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v63 = (*v62 ? *v62 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpAspen_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 341;
        _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> No tuning plists found due to unknown vocoder type. This could be transient. Using default paramters.", buf, 0x12u);
      }
    }
    v64 = (int *)*((_QWORD *)this + 1570);
    if (v64 && (*v66 || v66[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v64, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 341, "LoadTuningsPlists", "No tuning plists found due to unknown vocoder type. This could be transient. Using default paramters.");
    }
  }
  v39 = 0xFFFFFFFFLL;
LABEL_150:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v78);
  return v39;
}

void sub_1B6272BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a36);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(VoiceProcessorV2 *this)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  _QWORD *v11;
  NSObject *v12;
  int v13;
  _BYTE v15[16];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 19);
  v2 = v1;
  if (v1 - 7 >= 0xFFFFFFFE)
  {
    v8 = *((_DWORD *)this + 18) - 1;
    if (v8 > 0x2D || (dword_1B666186C[v8] == 4 ? (v9 = v1 - 7 >= 0xFFFFFFFE) : (v9 = 0), v9))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v6 = 1718628916;
      v11 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v12 = (*v11 ? *v11 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v15, 0x66703234u);
          *(_DWORD *)buf = 136315650;
          v17 = "vpAspen_v2.cpp";
          v18 = 1024;
          v19 = 827;
          v20 = 2080;
          v21 = v15;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting use case override to %s", buf, 0x1Cu);
        }
      }
      return v6;
    }
    v10 = *((_DWORD *)this + 18) - 1;
    if (v10 > 0x2D)
      return 0;
    v2 = dword_1B666186C[v10];
  }
  if (v2 != 1)
    return 0;
  v3 = v1 > 6;
  v4 = (1 << v1) & 0x62;
  if (v3 || v4 == 0)
    return 0;
  v6 = 1718644321;
  v7 = *((_DWORD *)this + 549);
  if (v7 > 1718755359)
  {
    if (v7 <= 1935764849)
    {
      if (v7 == 1718755360 || v7 == 1752309792)
        return v6;
      v13 = 1902341232;
    }
    else
    {
      if (v7 <= 1936029298)
      {
        if (v7 == 1935764850)
          return v6;
        if (v7 == 1935767394)
          return 1718646625;
        return 0;
      }
      if (v7 == 1936029299)
        return 1718642038;
      v13 = 1970037111;
    }
    if (v7 != v13)
      return 0;
    return 1718644325;
  }
  if (v7 <= 1700883825)
  {
    if (v7 != 880176738)
    {
      if (v7 == 880176759)
        return 1718644581;
      if (v7 == 880179042)
        return 1718646629;
      return 0;
    }
    return 1718644325;
  }
  if ((v7 - 1702261346) < 2)
    return 1718644325;
  if (v7 == 1700883826)
    return 1718644577;
  if (v7 != 1701212704)
    return 0;
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

BOOL VoiceProcessorV2::ShouldBypassTuningLoading(VoiceProcessorV2 *this)
{
  return **((_DWORD **)this + 292) == 1885892727
      && *((_DWORD *)this + 596) == 1752709424
      && **((_DWORD **)this + 295) == 1886222185;
}

uint64_t VoiceProcessorV2::GetVPVocoderOrUseCaseOverrideTuning4CC(VoiceProcessorV2 *this)
{
  float v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int VPVocoderTypeOrUseCaseOverrideForTuningOverride;
  _DWORD *v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  _QWORD *v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  double v22;
  double v23;
  _QWORD *v24;
  NSObject *v25;
  int *v26;
  uint64_t v27;
  _BYTE v29[12];
  _BYTE buf[40];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *((double *)this + 103);
  if (v2 <= 8000.0)
    v3 = 1718628408;
  else
    v3 = 1718628662;
  if ((v4 & 1) == 0
  {
    *(_QWORD *)buf = 1718644321;
    *(_QWORD *)&buf[8] = 0x66706E6100000000;
    *(_QWORD *)&buf[16] = 1718644321;
    *(_QWORD *)&buf[24] = 0x6670366100000001;
    *(_QWORD *)&buf[32] = 1718644577;
    v31 = 0x6670396100000001;
    v32 = 0x166706F61;
    v33 = 0x66706F6100000001;
    v34 = 0x166707761;
    v35 = 0x6670776100000001;
    v36 = 1718644577;
    v37 = 0x6670303800000000;
    v38 = 0x166706F61;
    v39 = 0x6670303800000000;
    v40 = 0x166707761;
    v41 = 0x6670303800000000;
    v42 = 1718644325;
    v43 = 0x66706E6500000000;
    v44 = 1718644325;
    v45 = 0x6670366500000001;
    v46 = 1718644581;
    v47 = 0x6670396500000001;
    v48 = 0x166706F65;
    v49 = 0x66706F6500000001;
    v50 = 0x166707765;
    v51 = 0x6670776500000001;
    v52 = 1718644581;
    v53 = 0x66706E6500000000;
    v54 = 0x166706F65;
    v55 = 0x66706E6500000000;
    v56 = 0x166707765;
    v57 = 0x6670303800000000;
    *(_DWORD *)v29 = 1718628916;
    v58 = 1718628916;
    v59 = 0x72746E6200000001;
    *(_QWORD *)&v29[4] = 0x100000001;
    v60 = *(_QWORD *)v29;
    v61 = 0x7274776200000001;
    std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::map[abi:ne180100]((uint64_t)buf, 18);
    __cxa_atexit((void (*)(void *))std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::~map[abi:ne180100], &VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList, &dword_1B5ED0000);
  }
  v5 = v2 > 8000.0;
  v6 = *((float *)this + 550);
  VPVocoderTypeOrUseCaseOverrideForTuningOverride = VoiceProcessorV2::GetVPVocoderTypeOrUseCaseOverrideForTuningOverride(this);
  *(_DWORD *)buf = VPVocoderTypeOrUseCaseOverrideForTuningOverride;
  *(_QWORD *)&buf[4] = (v6 > 0x1F40) | (unint64_t)(v5 << 32);
  v8 = (_DWORD *)qword_1EF135A28;
  if (!qword_1EF135A28)
    goto LABEL_35;
  v9 = &qword_1EF135A28;
  do
  {
    v10 = v8[7];
    v11 = v10 == *(_DWORD *)buf;
    if (v10 < *(_DWORD *)buf)
      v12 = -1;
    else
      v12 = 1;
    if (v11)
    {
      v13 = v8[8];
      v14 = v13 == *(_DWORD *)&buf[4];
      v12 = v13 < *(_DWORD *)&buf[4] ? -1 : 1;
      if (v14)
      {
        v15 = v8[9];
        v16 = v15 == (_DWORD)v5;
        v12 = __PAIR64__(v15, 8000.0) < LODWORD(v2) ? -1 : 1;
        if (v16)
          v12 = 0;
      }
    }
    v17 = v12 < 0;
    if (v12 >= 0)
      v18 = v8;
    else
      v18 = v8 + 2;
    if (!v17)
      v9 = (uint64_t *)v8;
    v8 = (_DWORD *)*v18;
  }
  while (*v18);
  if (v9 == &qword_1EF135A28)
    goto LABEL_35;
  v19 = *((_DWORD *)v9 + 7);
  v20 = v19 > *(_DWORD *)buf;
  if (v19 != *(_DWORD *)buf
    || (v21 = *((_DWORD *)v9 + 8), v11 = v21 == *(_DWORD *)&buf[4], v20 = v21 > *(_DWORD *)&buf[4], !v11))
  {
    if (v20)
      goto LABEL_35;
    return *((unsigned int *)v9 + 10);
  }
  if (*((_DWORD *)v9 + 9) <= v5)
    return *((unsigned int *)v9 + 10);
LABEL_35:
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v22 = v2;
  v23 = (double)v6;
  v24 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v25 = (*v24 ? *v24 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v29, VPVocoderTypeOrUseCaseOverrideForTuningOverride);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "vpAspen_v2.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 880;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v29;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v23;
      *(_WORD *)&buf[38] = 2048;
      v31 = *(_QWORD *)&v22;
      _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> No vocoder specific tuning list entry for vocoder type %s, vocoder sample rate = %f and hardware sample rate = %f!", buf, 0x30u);
    }
  }
  v26 = (int *)*((_QWORD *)this + 1570);
  if (v26 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v27 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, VPVocoderTypeOrUseCaseOverrideForTuningOverride);
    CALegacyLog::log(v26, 5, v27, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 880, "GetVPVocoderOrUseCaseOverrideTuning4CC", "No vocoder specific tuning list entry for vocoder type %s, vocoder sample rate = %f and hardware sample rate = %f!", buf, v23, v22);
  }
  return v3;
}

void sub_1B62736AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>(int *a1, _DWORD *a2)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;

  v3 = *a1;
  if (*a1 < *a2)
    result = 0xFFFFFFFFLL;
  else
    result = 1;
  if (v3 == *a2)
  {
    v5 = a1[1];
    v6 = a2[1];
    result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      v7 = a1[2];
      v8 = a2[2];
      v9 = v7 == v8;
      if (v7 < v8)
        v10 = -1;
      else
        v10 = 1;
      if (v9)
        return 0;
      else
        return v10;
    }
  }
  return result;
}

uint64_t std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int *v11;
  uint64_t *v12;
  char *v13;

  qword_1EF135A30 = 0;
  qword_1EF135A28 = 0;
  VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList = (uint64_t)&qword_1EF135A28;
  if (a2)
  {
    v2 = (int *)result;
    v3 = 0;
    v4 = (int *)(result + 16 * a2);
    for (i = &qword_1EF135A28;
          i != &qword_1EF135A28;
          i = (uint64_t *)VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList)
    {
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_1EF135A28;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      result = std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>((int *)v7 + 7, v2);
      if ((result & 0x80) != 0)
        goto LABEL_19;
      if (v3)
      {
        v10 = v3;
        do
        {
          while (1)
          {
            v7 = (uint64_t *)v10;
            v11 = (int *)(v10 + 28);
            if ((std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>(v2, (_DWORD *)(v10 + 28)) & 0x80) == 0)break;
            v10 = *v7;
            v12 = v7;
            if (!*v7)
              goto LABEL_23;
          }
          result = std::operator<=>[abi:ne180100]<unsigned int,std::pair<unsigned int,unsigned int>,unsigned int,std::pair<unsigned int,unsigned int>>(v11, v2);
          if ((result & 0x80) == 0)
            goto LABEL_26;
          v12 = v7 + 1;
          v10 = v7[1];
        }
        while (v10);
        goto LABEL_23;
      }
LABEL_22:
      v7 = &qword_1EF135A28;
      v12 = &qword_1EF135A28;
LABEL_23:
      v13 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v13 + 28) = *(_OWORD *)v2;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v7;
      *v12 = (uint64_t)v13;
      if (*(_QWORD *)VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList)
      {
        VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList = *(_QWORD *)VoiceProcessorV2::GetVPVocoderTuning4CCList(void)const::vocoderTuning4CCList;
        v13 = (char *)*v12;
      }
      result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF135A28, (uint64_t *)v13);
      v3 = qword_1EF135A28;
      ++qword_1EF135A30;
LABEL_26:
      v2 += 4;
      if (v2 == v4)
        return result;
    }
    v7 = &qword_1EF135A28;
LABEL_19:
    if (v3)
    {
      v12 = v7 + 1;
      if (v7[1])
        goto LABEL_26;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_1B6273898(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::pair<unsigned int,std::pair<unsigned int,unsigned int>>,unsigned int>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void VoiceProcessorV2::InitializeVPParams(VoiceProcessorV2 *this)
{
  unsigned int v2;
  int *v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  NSObject *v23;
  int *v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int AppIntegerValue;
  int v39;
  _QWORD *v40;
  NSObject *v41;
  int *v42;
  int v43;
  int v44;
  _QWORD *v45;
  NSObject *v46;
  int *v47;
  int ReferenceSignalInternally;
  _QWORD *v49;
  NSObject *v50;
  int *v51;
  _QWORD *v52;
  NSObject *v53;
  int *v54;
  _QWORD *v55;
  NSObject *v56;
  int *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  NSObject *v61;
  int v62;
  int *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  _BYTE *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  _QWORD *v78;
  NSObject *v79;
  const char *v80;
  int v81;
  const char *v82;
  int *v83;
  const char *v84;
  const char *v85;
  NSObject *v86;
  int *v87;
  unsigned __int8 *v88;
  _QWORD *v89;
  NSObject *v90;
  int *v91;
  _QWORD *v92;
  NSObject *v93;
  int *v94;
  unsigned __int8 *v95;
  float v96;
  _QWORD *v97;
  NSObject *v98;
  int *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  _QWORD *v102;
  NSObject *v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  int *v107;
  const char *v108;
  const char *v109;
  unsigned __int8 *v110;
  _QWORD *v111;
  NSObject *v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  int *v116;
  const char *v117;
  const char *v118;
  CFTypeRef v119;
  int v120;
  _QWORD *v121;
  void *v122;
  std::string::size_type v123;
  std::string::size_type size;
  unint64_t v125;
  _QWORD *v126;
  NSObject *v127;
  double v128;
  int *v129;
  _BOOL8 v130;
  unsigned int OutputPortProductIDForPME;
  unsigned int v132;
  void *v133;
  id v134;
  void *v135;
  void *v136;
  unsigned int v137;
  NSObject *v138;
  id v139;
  const __CFDictionary *v140;
  const __CFDictionary *v141;
  uint64_t v142;
  _QWORD *v143;
  NSObject *v144;
  int *v145;
  _QWORD *v146;
  NSObject *v147;
  int *v148;
  _QWORD *v149;
  NSObject *v150;
  int *v151;
  _QWORD *v152;
  NSObject *v153;
  int *v154;
  unsigned int v155;
  int v156;
  unsigned int IsAttached;
  _QWORD *v158;
  NSObject *v159;
  int *v160;
  uint64_t v161;
  int v162;
  const void *v163;
  _QWORD *v164;
  NSObject *v165;
  int *v166;
  _QWORD *v167;
  NSObject *v168;
  int *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t i;
  uint64_t j;
  std::string *v175;
  __int128 v176;
  CFTypeRef *v177;
  std::string::size_type v178;
  const char *v179;
  int v180;
  std::string *v181;
  std::string *p_p;
  std::string *v183;
  uint64_t v184;
  char v185;
  BOOL v186;
  int v187;
  unsigned int v188;
  int v189;
  _QWORD *v190;
  NSObject *v191;
  _QWORD *v192;
  NSObject *v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  _DWORD *v198;
  NSObject *v199;
  NSObject *v200;
  int v202;
  std::runtime_error *exception;
  int v204;
  _BYTE *v205;
  unsigned int v206;
  _OWORD *v207;
  _BYTE *v208;
  std::string v209;
  CFTypeRef cf[2];
  int64_t v211;
  BOOL v212;
  int v213;
  BOOL v214[7];
  BOOL v215;
  unsigned int v216;
  unsigned int v217;
  __int16 v218;
  std::string __p;
  unsigned __int8 v220;
  std::string buf[5];
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 18);
  v212 = 0;
  v3 = (int *)*((_QWORD *)this + 292);
  if (v3 == *((int **)this + 293) || (v4 = (int *)*((_QWORD *)this + 295), v4 == *((int **)this + 296)))
  {
    v5 = 48;
    goto LABEL_6;
  }
  if (v2 == 53)
  {
    v5 = 45;
LABEL_6:
    v206 = v5;
    goto LABEL_7;
  }
  v11 = v2 & 0xFFFFFFFE;
  if ((v2 & 0xFFFFFFFE) == 0x36)
  {
    v5 = 46;
    goto LABEL_6;
  }
  v12 = *v3;
  v13 = *v4;
  if (v12 == 1886613611 && v13 == 1886216809)
  {
    v206 = 18;
    if (v2 - 39 < 0xA)
      goto LABEL_7;
    if (v11 == 50)
      goto LABEL_7;
    v206 = 19;
    if (v2 == 49 || v2 == 52)
      goto LABEL_7;
    if (v2 - 1 < 0x15)
    {
      v5 = 12;
      goto LABEL_6;
    }
    if (v2 - 34 < 3)
    {
      v5 = 27;
      goto LABEL_6;
    }
    if (v2 - 30 < 9 && ((0x18Fu >> (v2 - 30)) & 1) != 0)
    {
      v5 = 26;
      goto LABEL_6;
    }
    if (v11 == 22)
    {
      v5 = 31;
      goto LABEL_6;
    }
    if (v2 - 24 < 6)
    {
      v5 = 38;
      goto LABEL_6;
    }
    goto LABEL_704;
  }
  if (v12 == 1886545251 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      v5 = 13;
      goto LABEL_6;
    }
    goto LABEL_704;
  }
  v16 = v12 == 1885892674 || v12 == 1885892727;
  if (v16 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      v5 = 14;
      goto LABEL_6;
    }
    if (v2 - 30 < 9)
    {
      v5 = 24;
      goto LABEL_6;
    }
    if (v11 == 22)
    {
      v5 = 32;
      goto LABEL_6;
    }
    if (v2 - 24 < 6)
    {
      v5 = 39;
      goto LABEL_6;
    }
    goto LABEL_704;
  }
  if (v12 == 1886152047 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      v5 = 15;
      goto LABEL_6;
    }
    if (v2 - 30 < 9)
    {
      v5 = 25;
      goto LABEL_6;
    }
    if (v11 == 22)
    {
      v5 = 33;
      goto LABEL_6;
    }
    if (v2 - 24 < 6)
    {
      v5 = 40;
      goto LABEL_6;
    }
    goto LABEL_704;
  }
  if (v12 == 1885888867 && v13 == 1886216809)
  {
    if (v2 - 1 < 0x15)
    {
      v5 = 16;
      goto LABEL_6;
    }
LABEL_704:
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v190 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v191 = (*v190 ? *v190 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 764;
        _os_log_impl(&dword_1B5ED0000, v191, OS_LOG_TYPE_ERROR, "%25s:%-5d <SERIOUS ERROR> Route unknown! Aborting if defaults write not set, otherwise using default config!", (uint8_t *)buf, 0x12u);
      }
    }
    v189 = 7;
    goto LABEL_714;
  }
  if (v12 == 1886613611 && v13 == 1886745449)
  {
    v188 = v2 - 22;
    if (v2 - 22 < 0x11)
    {
      if (((0x18CFFu >> v188) & 1) != 0)
        v5 = dword_1B664ABB4[v188];
      else
        v5 = 10;
      goto LABEL_6;
    }
    v189 = 10;
    goto LABEL_714;
  }
  if (v12 == 1885631344 && v13 == 1886216809)
  {
    v189 = 5;
LABEL_714:
    v206 = v189;
    goto LABEL_715;
  }
  if (v12 == 1885889645 && v13 == 1886216809)
  {
    v189 = 6;
    goto LABEL_714;
  }
  if (v12 == 1886154613 && v13 == 1886216809)
  {
    v189 = 8;
    goto LABEL_714;
  }
  if (v13 != 1886216809)
  {
    if (v12 == 1885892727 && v13 == 1886222185)
    {
      if (*((_DWORD *)this + 596) == 1781740087)
        v189 = 47;
      else
        v189 = 0;
      goto LABEL_714;
    }
    if (v12 == 1885892706 && v13 == 1886216820)
    {
      v196 = 1;
    }
    else
    {
      if (v12 == 1886152047 && v13 == 1886152041)
      {
        v206 = 0;
        goto LABEL_715;
      }
      if (v12 == 1886745455 && v13 == 1886745449)
      {
        v194 = v2 - 22;
        if (v2 - 22 < 0x11)
        {
          if (((0x18CFFu >> v194) & 1) == 0)
          {
            v195 = 2;
            goto LABEL_757;
          }
          v198 = &unk_1B664AC3C;
          goto LABEL_756;
        }
        v196 = 2;
        goto LABEL_748;
      }
      if (v12 == 1886680175 && v13 == 1886680169)
      {
        v196 = 3;
      }
      else
      {
        if (v12 != 1886614639 || v13 != 1886614633)
          goto LABEL_772;
        v196 = 4;
      }
    }
LABEL_748:
    v206 = v196;
    goto LABEL_715;
  }
  switch(v12)
  {
    case 1886745455:
LABEL_733:
      v194 = v2 - 22;
      if (v2 - 22 < 0x11)
      {
        if (((0x18CFFu >> v194) & 1) == 0)
        {
          v195 = 9;
LABEL_757:
          v206 = v195;
          goto LABEL_7;
        }
        v198 = &unk_1B664ABF8;
LABEL_756:
        v195 = v198[v194];
        goto LABEL_757;
      }
      v196 = 9;
      goto LABEL_748;
    case 1885889645:
      if (_os_feature_enabled_impl())
        goto LABEL_733;
      break;
    case 1885433971:
      if (v11 == 22)
      {
        v197 = 34;
      }
      else
      {
        if (v2 - 24 >= 6)
        {
          if (v2 - 1 >= 7 && v2 - 9 >= 0xD)
            v202 = 7;
          else
            v202 = 17;
          v206 = v202;
          goto LABEL_715;
        }
        v197 = 41;
      }
      v206 = v197;
      goto LABEL_7;
  }
LABEL_772:
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v199 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
  if (v199 && (v200 = v199, os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT)))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 755;
    _os_log_impl(&dword_1B5ED0000, v200, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Couldn't determine route from port type, using default route", (uint8_t *)buf, 0x12u);
    v206 = 7;
  }
  else
  {
    v206 = 7;
  }
LABEL_715:
  if (!v2)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v192 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v193 = (*v192 ? *v192 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 770;
        _os_log_impl(&dword_1B5ED0000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d USING UNKNOWN DEVICE ROUTE", (uint8_t *)buf, 0x12u);
      }
    }
    v5 = 11;
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)((char *)this + 84) = 0x766F6963766F3234;
  v6 = *((_DWORD *)this + 19);
  if ((v6 - 5) > 1)
  {
    if (v6 == 8)
      goto LABEL_68;
    if (v6 == 4)
    {
      *((_DWORD *)this + 21) = 1986998836;
      if (VoiceProcessorV2::GetChatFlavor(this) == 2)
      {
        v9 = 1986622319;
      }
      else
      {
        if (VoiceProcessorV2::GetChatFlavor(this) != 1)
          goto LABEL_14;
        v9 = 1986884451;
      }
LABEL_13:
      *((_DWORD *)this + 21) = v9;
LABEL_14:
      *((_DWORD *)this + 22) = 1987012963;
      goto LABEL_68;
    }
    if (v6 != 1)
      goto LABEL_47;
LABEL_18:
    if (*((double *)this + 103) <= 8000.0)
      v10 = 1718628408;
    else
      v10 = 1718628662;
    *((_DWORD *)this + 21) = v10;
    *((_DWORD *)this + 22) = 1987012963;
    goto LABEL_68;
  }
  v7 = *((_DWORD *)this + 18) - 1;
  if (v7 <= 0x2D && dword_1B666186C[v7] == 1)
    goto LABEL_18;
  v8 = *((_DWORD *)this + 18) - 1;
  if (v8 > 0x2D || dword_1B666186C[v8] == 4)
  {
    v9 = 1986998836;
    goto LABEL_13;
  }
  v17 = *((_DWORD *)this + 18) - 1;
  if (v17 > 0x2D)
    goto LABEL_45;
  if (dword_1B666186C[v17] == 8)
    goto LABEL_68;
  if ((v6 - 5) <= 1)
  {
LABEL_45:
    v18 = *((_DWORD *)this + 18) - 1;
    if (v18 > 0x2D)
    {
LABEL_56:
      *(int32x2_t *)((char *)this + 84) = vdup_n_s32(0x6D697363u);
      goto LABEL_68;
    }
    v6 = dword_1B666186C[v18];
  }
LABEL_47:
  if (v6 != 2 && (v6 || !(*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 480))(this)))
    goto LABEL_56;
  if (v2 - 41 < 0xC)
    goto LABEL_53;
  v19 = **((_DWORD **)this + 292);
  if (v2 <= 0x28 && ((1 << v2) & 0x18000000100) != 0)
    goto LABEL_53;
  v184 = 0;
  v185 = 0;
  do
  {
    v186 = dword_1B665DCF0[v184] == v19 && dword_1B665DD08[v184] == **((_DWORD **)this + 295);
    v185 |= v186;
    ++v184;
  }
  while (v184 != 6);
  if ((v185 & 1) != 0)
    goto LABEL_53;
  v20 = 0x7669646376693234;
  if (v19 > 1885892673)
  {
    if (v19 > 1886545250)
    {
      if (v19 == 1886745455)
        goto LABEL_53;
      v187 = 1886545251;
    }
    else
    {
      if (v19 == 1885892674)
        goto LABEL_53;
      v187 = 1886154613;
    }
LABEL_694:
    if (v19 != v187)
      goto LABEL_54;
    goto LABEL_53;
  }
  if (v19 > 1885888866)
  {
    if (v19 == 1885888867)
      goto LABEL_53;
    v187 = 1885889645;
    goto LABEL_694;
  }
  if (v19 != 1885433971)
  {
    v187 = 1885631344;
    goto LABEL_694;
  }
LABEL_53:
  v20 = 0x766F6963766F3234;
LABEL_54:
  *(_QWORD *)((char *)this + 84) = v20;
  if (VoiceProcessorV2::GetChatFlavor(this) == 2)
  {
    v21 = 1986622319;
  }
  else
  {
    if (VoiceProcessorV2::GetChatFlavor(this) != 1)
      goto LABEL_68;
    v21 = 1986884451;
  }
  *((_DWORD *)this + 21) = v21;
LABEL_68:
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v22 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__p, *((_DWORD *)this + 21));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1166;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&__p;
      _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> SetVPUseCase: chat category is set to = %s", (uint8_t *)buf, 0x1Cu);
    }
  }
  v208 = (char *)this + 12460;
  v24 = (int *)*((_QWORD *)this + 1570);
  if (v24 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v25 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, *((_DWORD *)this + 21));
    CALegacyLog::log(v24, 5, v25, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1166, "SetVPUseCase", "SetVPUseCase: chat category is set to = %s", (const char *)buf);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v26 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v27 = (*v26 ? *v26 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__p, *((_DWORD *)this + 22));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1167;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&__p;
      _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> SetVPUseCase: main chat category is set to = %s", (uint8_t *)buf, 0x1Cu);
    }
  }
  v28 = (int *)*((_QWORD *)this + 1570);
  if (v28 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v29 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, *((_DWORD *)this + 22));
    CALegacyLog::log(v28, 5, v29, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1167, "SetVPUseCase", "SetVPUseCase: main chat category is set to = %s", (const char *)buf);
  }
  v205 = (char *)this + 16560;
  *((_BYTE *)this + 1676) = 1;
  *((_DWORD *)this + 100) = 0;
  if (*((_BYTE *)this + 479))
  {
    v30 = *((_DWORD *)this + 153);
    if (v30)
    {
      v31 = 0;
      do
      {
        v31 = (2 * v31) | 1;
        --v30;
      }
      while (v30);
      *((_DWORD *)this + 100) = v31;
    }
  }
  v207 = (_OWORD *)((char *)this + 2104);
  VPChannelConfig::SetChConfig((VoiceProcessorV2 *)((char *)this + 424), 1, "main", 0);
  VPChannelConfig::SetChConfig((VoiceProcessorV2 *)((char *)this + 448), 1, "main", 0);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = *((_DWORD *)this + 112);
  v36 = *((_DWORD *)this + 106);
  do
  {
    if (((1 << v32) & v35) == 0 || ((1 << v32) & v36) == 0)
      v33 += ((v36 | v35) >> v32) & 1;
    else
      v34 |= 1 << v33++;
    ++v32;
  }
  while (v32 != 32);
  *((_DWORD *)this + 105) = v34;
  v212 = 0;
  AppIntegerValue = CACFPreferencesGetAppIntegerValue(CFSTR("BuiltInMicDataSource"), CFSTR("com.apple.audio.virtualaudio"), &v212);
  if (v212)
  {
    v39 = AppIntegerValue;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v40 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v41 = (*v40 ? *v40 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 923;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v39;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializevpparams: VAD-BuiltInMicDataSource = %i", (uint8_t *)buf, 0x18u);
      }
    }
    v42 = (int *)*((_QWORD *)this + 1570);
    if (v42 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v42, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 923, "InitializeVPParams", "initializevpparams: VAD-BuiltInMicDataSource = %i", v39);
    }
  }
  v212 = 0;
  v43 = CACFPreferencesGetAppIntegerValue(CFSTR("BuiltInMicSelection"), CFSTR("com.apple.audio.virtualaudio"), &v212);
  if (v212)
  {
    v44 = v43;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v45 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v46 = (*v45 ? *v45 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 926;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v44;
        _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializevpparams: VAD-BuiltInMicSelection = 0x%x", (uint8_t *)buf, 0x18u);
      }
    }
    v47 = (int *)*((_QWORD *)this + 1570);
    if (v47 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v47, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 926, "InitializeVPParams", "initializevpparams: VAD-BuiltInMicSelection = 0x%x", v44);
    }
  }
  VoiceProcessorV2::VPEchoProcessingParams::Reset((VoiceProcessorV2 *)((char *)this + 4352));
  ReferenceSignalInternally = VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(this);
  *((_DWORD *)this + 1127) = ReferenceSignalInternally;
  if ((ReferenceSignalInternally & 1) == 0 && *v208)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v49 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      v50 = (*v49 ? *v49 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 943;
        _os_log_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> dl mix fmt & hw ref fmt were out-of-sync..re-setting while using external ref", (uint8_t *)buf, 0x12u);
      }
    }
    v51 = (int *)*((_QWORD *)this + 1570);
    if (v51 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v51, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 943, "InitializeVPParams", "dl mix fmt & hw ref fmt were out-of-sync..re-setting while using external ref");
    }
    *v208 = 0;
  }
  if (*((_QWORD *)this + 292) != *((_QWORD *)this + 293) && *((_QWORD *)this + 295) != *((_QWORD *)this + 296))
  {
    if (v2)
    {
      if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 512))(this))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v52 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          v53 = (*v52 ? *v52 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 961;
            _os_log_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Tuning loading is bypassed for this device", (uint8_t *)buf, 0x12u);
          }
        }
        v54 = (int *)*((_QWORD *)this + 1570);
        if (v54 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v54, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 961, "InitializeVPParams", "Tuning loading is bypassed for this device");
        }
      }
      else
      {
        (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 504))(this);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v55 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v56 = (*v55 ? *v55 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpAspen_v2.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 955;
          _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Hey I just met you, and this is crazy, but here's my component 'Audio - DSP Software', so file a radar maybe.", (uint8_t *)buf, 0x12u);
        }
      }
      v57 = (int *)*((_QWORD *)this + 1570);
      if (v57 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v57, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 955, "InitializeVPParams", "Hey I just met you, and this is crazy, but here's my component 'Audio - DSP Software', so file a radar maybe.");
      }
      VoiceProcessorV2::TryLoadingTuningPlists(this, "Generic", "VPV3", "gen", 0x6576696Cu, 0x76696C65u, 0x666F756Cu);
    }
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 312))(this);
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 400))(this);
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 456))(this);
    VoiceProcessorV2::DispatchVPRouteSetup(this, v206, v2);
    HIBYTE(v218) = 0;
    LODWORD(v209.__r_.__value_.__l.__data_) = -1;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_mode"), (const __CFString *)3, (BOOL *)&v209, (BOOL *)&v218 + 1, v58);
    if (HIBYTE(v218))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v60 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v61 = (*v60 ? *v60 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          v62 = *((_DWORD *)this + 19);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 146;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v209.__r_.__value_.__l.__data_;
          LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
          *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v62;
          _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: vp mode %i (was %i)", (uint8_t *)buf, 0x1Eu);
        }
      }
      v63 = (int *)*((_QWORD *)this + 1570);
      if (v63 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v63, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 146, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: vp mode %i (was %i)", LODWORD(v209.__r_.__value_.__l.__data_), *((_DWORD *)this + 19));
      }
      (*(void (**)(VoiceProcessorV2 *, _QWORD))(*(_QWORD *)this + 96))(this, LODWORD(v209.__r_.__value_.__l.__data_));
    }
    v218 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_disable_gating"), 0, (BOOL *)&v218, (BOOL *)&v218 + 1, v59);
    if (HIBYTE(v218))
      *((_BYTE *)this + 1676) = (_BYTE)v218 == 0;
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_bypass"), 0, (float *)this + 118, v64);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_clear_ref"), 0, (float *)this + 3974, v65);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_mute_output"), 0, (float *)this + 520, v66);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_mute_downlink_voice"), 0, (float *)((char *)this + 2082), v67);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_disable_vp"), 0, (float *)((char *)this + 2083), v68);
    v69 = (char *)this + 2085;
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_hw_has_vp"), 0, (float *)((char *)this + 2085), v70);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_vocoder_sample_rate"), 2, (float *)this + 550, v71);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_vocoder_type_int"), 1, (float *)this + 549, v72);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_uplink_proto"), 1, (float *)this + 3132, v73);
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_downlink_proto"), 1, (float *)this + 3133, v74);
    HIBYTE(v218) = 0;
    v217 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_beam_direction"), (const __CFString *)1, (BOOL *)&v217, (BOOL *)&v218 + 1, v75);
    if (HIBYTE(v218))
    {
      v77 = v217;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v78 = (_QWORD *)VPLogScope(void)::scope;
      if (v77 > 1)
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v86 = (*v78 ? *v78 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 182;
            _os_log_impl(&dword_1B5ED0000, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: beam former directio unsupported", (uint8_t *)buf, 0x12u);
          }
        }
        v87 = (int *)*((_QWORD *)this + 1570);
        if (v87 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v87, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 182, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: beam former directio unsupported");
        }
      }
      else
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v79 = (*v78 ? *v78 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            v80 = "top back mic";
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            v81 = *((_DWORD *)this + 684);
            if (v217)
              v82 = "top back mic";
            else
              v82 = "top front mic";
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            if (!v81)
              v80 = "top front mic";
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 178;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v82;
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v80;
            _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE:beam former direction = %s (was %s)", (uint8_t *)buf, 0x26u);
          }
        }
        v83 = (int *)*((_QWORD *)this + 1570);
        if (v83 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v84 = "top back mic";
          if (v217)
            v85 = "top back mic";
          else
            v85 = "top front mic";
          if (!*((_DWORD *)this + 684))
            v84 = "top front mic";
          CALegacyLog::log(v83, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 178, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE:beam former direction = %s (was %s)", v85, v84);
        }
        *((_DWORD *)this + 684) = v217;
      }
    }
    v216 = 0;
    HIBYTE(v218) = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_mic_selector_mode"), (const __CFString *)1, (BOOL *)&v216, (BOOL *)&v218 + 1, v76);
    if (HIBYTE(v218))
    {
      if (v216 < 5)
      {
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5384, 0, (float)v216);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v92 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v93 = (*v92 ? *v92 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 194;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v216;
            _os_log_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InitializeVPParams: MicSelector mode override = %d", (uint8_t *)buf, 0x18u);
          }
        }
        v94 = (int *)*((_QWORD *)this + 1570);
        if (v94 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v94, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 194, "ApplyDebugModeDefaultsOverrides", "InitializeVPParams: MicSelector mode override = %d", v216);
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v89 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v90 = (*v89 ? *v89 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 191;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v216;
            _os_log_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InitializeVPParams: MicSelector mode override, invalid mode = %d, using default mode", (uint8_t *)buf, 0x18u);
          }
        }
        v91 = (int *)*((_QWORD *)this + 1570);
        if (v91 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v91, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 191, "ApplyDebugModeDefaultsOverrides", "InitializeVPParams: MicSelector mode override, invalid mode = %d, using default mode", v216);
        }
      }
    }
    v215 = 0;
    HIBYTE(v218) = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_agc_calibration_mode"), 0, &v215, (BOOL *)&v218 + 1, v88);
    if (HIBYTE(v218))
    {
      v96 = 0.0;
      if (v215)
        v96 = 1.0;
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6248, 41, v96);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v97 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v98 = (*v97 ? *v97 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 204;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v215;
          _os_log_impl(&dword_1B5ED0000, v98, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> InitializeVPParams: AGC calibration mode override = %d", (uint8_t *)buf, 0x18u);
        }
      }
      v99 = (int *)*((_QWORD *)this + 1570);
      if (v99 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v99, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 204, "ApplyDebugModeDefaultsOverrides", "InitializeVPParams: AGC calibration mode override = %d", v215);
      }
    }
    VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_downlink_mix_gain"), 2, (float *)this + 1113, v95);
    HIBYTE(v218) = 0;
    *(_DWORD *)v214 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_downlink_enable_softclipi"), (const __CFString *)1, v214, (BOOL *)&v218 + 1, v100);
    if (HIBYTE(v218))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v102 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v103 = (*v102 ? *v102 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
        {
          v104 = "NO";
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          v105 = *((_QWORD *)this + 1104);
          if (*(_DWORD *)v214)
            v106 = "NO";
          else
            v106 = "YES";
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          if ((v105 & 0x1000000000) != 0)
            v104 = "YES";
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 215;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v106;
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v104;
          _os_log_impl(&dword_1B5ED0000, v103, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: enable downlink SCi %s (was %s)", (uint8_t *)buf, 0x26u);
        }
      }
      v107 = (int *)*((_QWORD *)this + 1570);
      if (v107 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v108 = "NO";
        if (*(_DWORD *)v214)
          v109 = "NO";
        else
          v109 = "YES";
        if ((*((_QWORD *)this + 1104) & 0x1000000000) != 0)
          v108 = "YES";
        CALegacyLog::log(v107, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 215, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: enable downlink SCi %s (was %s)", v109, v108);
      }
      *((_QWORD *)this + 1104) |= 0x1000000000uLL;
    }
    HIBYTE(v218) = 0;
    v213 = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_downlink_enable_softclip"), (const __CFString *)1, (BOOL *)&v213, (BOOL *)&v218 + 1, v101);
    if (HIBYTE(v218))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v111 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v112 = (*v111 ? *v111 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
        {
          v113 = "NO";
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
          v114 = *((_QWORD *)this + 1104);
          if (v213)
            v115 = "NO";
          else
            v115 = "YES";
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          if ((v114 & 0x1000000000000000) != 0)
            v113 = "YES";
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 225;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v115;
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v113;
          _os_log_impl(&dword_1B5ED0000, v112, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: enable downlink SC %s (was %s)", (uint8_t *)buf, 0x26u);
        }
      }
      v116 = (int *)*((_QWORD *)this + 1570);
      if (v116 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v117 = "NO";
        if (v213)
          v118 = "NO";
        else
          v118 = "YES";
        if ((*((_QWORD *)this + 1104) & 0x1000000000000000) != 0)
          v117 = "YES";
        CALegacyLog::log(v116, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 225, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: enable downlink SC %s (was %s)", v118, v117);
      }
      *((_QWORD *)this + 1104) |= 0x1000000000000000uLL;
    }
    HIBYTE(v218) = 0;
    cf[0] = 0;
    VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_mic_trim_gains"), (const __CFString *)4, (BOOL *)cf, (BOOL *)&v218 + 1, v110);
    if (HIBYTE(v218))
    {
      v119 = cf[0];
      if (cf[0])
      {
        CFRetain(cf[0]);
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)buf, v119);
        if (buf[0].__r_.__value_.__r.__words[0])
        {
          applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&__p, (const __CFArray *)buf[0].__r_.__value_.__l.__data_);
          if (buf[0].__r_.__value_.__r.__words[0])
            CFRelease(buf[0].__r_.__value_.__l.__data_);
          v120 = v220;
          if (v220)
          {
            v204 = v220;
            v121 = (_QWORD *)((char *)this + 2096);
            v122 = (void *)*((_QWORD *)this + 262);
            if (v122)
            {
              *((_QWORD *)this + 263) = v122;
              operator delete(v122);
              *v121 = 0;
              *((_QWORD *)this + 263) = 0;
              *((_QWORD *)this + 264) = 0;
            }
            v123 = __p.__r_.__value_.__r.__words[0];
            *((_QWORD *)this + 262) = __p.__r_.__value_.__r.__words[0];
            size = __p.__r_.__value_.__l.__size_;
            *v207 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
            memset(&__p, 0, sizeof(__p));
            if (size != v123)
            {
              v125 = 0;
              do
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v126 = (_QWORD *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
                {
                  v127 = (*v126 ? *v126 : MEMORY[0x1E0C81028]);
                  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
                  {
                    v128 = *(float *)(*v121 + 4 * v125);
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpDebug_DefaultsOverride.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 238;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v125;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2048;
                    *(double *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v128;
                    _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> DEFAULTS OVERRIDE: mic trim gain(ch-%lu) = %f dB", (uint8_t *)buf, 0x26u);
                  }
                }
                v129 = (int *)*((_QWORD *)this + 1570);
                if (v129 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  CALegacyLog::log(v129, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_DefaultsOverride.cpp", 238, "ApplyDebugModeDefaultsOverrides", "DEFAULTS OVERRIDE: mic trim gain(ch-%lu) = %f dB", v125, *(float *)(*v121 + 4 * v125));
                }
                ++v125;
              }
              while (v125 < (uint64_t)(*(_QWORD *)v207 - *v121) >> 2);
            }
            v69 = (char *)this + 2085;
            v120 = v204;
            if (*((_BYTE *)this + 15897))
              VoiceProcessorV2::PListWriteMicTrimGainParameters(this, (float **)this + 262);
          }
          if (cf[0])
            CFRelease(cf[0]);
          cf[0] = 0;
          if (v120 && __p.__r_.__value_.__r.__words[0])
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_394;
        }
      }
      else
      {
        buf[0].__r_.__value_.__r.__words[0] = 0;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
LABEL_394:
    if (*v69)
    {
      (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 320))(this);
      *((_QWORD *)this + 583) |= 2uLL;
      (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 408))(this);
      atomic_store(0x3F800000u, (unsigned int *)this + 562);
      *((_DWORD *)this + 563) = 0;
    }
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 448))(this);
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 440))(this);
    if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this) >= 7)
    {
      if (*((_BYTE *)this + 2244))
        v130 = 1;
      else
        v130 = *v205 != 0;
      (*(void (**)(VoiceProcessorV2 *, _BOOL8))(*(_QWORD *)this + 432))(this, v130);
    }
    if ((*((_DWORD *)this + 18) - 1) <= 0x25 && *((_BYTE *)this + 2245))
      (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 424))(this);
    if (!*((_BYTE *)this + 2244))
    {
      OutputPortProductIDForPME = VoiceProcessorV2::GetOutputPortProductIDForPME(this);
      if (OutputPortProductIDForPME >= 0x200A && OutputPortProductIDForPME != 8208)
        *((_QWORD *)this + 1104) |= 0x200000000000uLL;
    }
    v132 = **((_DWORD **)this + 292) - 1885892674;
    if (v132 > 0x35 || ((1 << v132) & 0x20000100000001) == 0)
    {
LABEL_430:
      (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 544))(this);
      v140 = (const __CFDictionary *)*((_QWORD *)this + 276);
      if (v140)
        VoiceProcessorV2::ApplyCustomTelephonyDSPOverrides(this, v140, 1);
      v141 = (const __CFDictionary *)*((_QWORD *)this + 277);
      if (v141)
        VoiceProcessorV2::ApplyCustomTelephonyDSPOverrides(this, v141, 0);
      if (*((_BYTE *)this + 2083))
      {
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)this + 4656;
        LODWORD(buf[0].__r_.__value_.__r.__words[1]) = 0;
        std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)buf);
        *((_QWORD *)this + 1104) |= 0x28000000uLL;
      }
      if (v206 <= 9 && ((1 << v206) & 0x360) != 0)
      {
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 3, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 4, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 5, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 6, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 7, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 8, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 9, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 10, 0.0);
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6984, 11, 0.0);
      }
      if ((*((_DWORD *)this + 19) - 5) <= 1)
      {
        v142 = *((_QWORD *)this + 582);
        if ((v142 & 0x10000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x10) != 0 && *((_QWORD *)this + 399))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5936, 0, -18.0);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v143 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v144 = (*v143 ? *v143 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2644;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC032000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)OCNS";
              _os_log_impl(&dword_1B5ED0000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          v145 = (int *)*((_QWORD *)this + 1570);
          if (v145 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v145, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2644, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -18.0, "(UL-)OCNS");
          }
        }
        else if ((v142 & 0x20000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x20) != 0 && *((_QWORD *)this + 400))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5960, 0, -18.0);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v146 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v147 = (*v146 ? *v146 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2649;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC032000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)OCNSV4";
              _os_log_impl(&dword_1B5ED0000, v147, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          v148 = (int *)*((_QWORD *)this + 1570);
          if (v148 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v148, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2649, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -18.0, "(UL-)OCNSV4");
          }
        }
        else if ((v142 & 0x40000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x40) != 0 && *((_QWORD *)this + 401))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5984, 1, -24.0);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v149 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v150 = (*v149 ? *v149 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2655;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC038000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)MagDiffNS";
              _os_log_impl(&dword_1B5ED0000, v150, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          v151 = (int *)*((_QWORD *)this + 1570);
          if (v151 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v151, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2655, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -24.0, "(UL-)MagDiffNS");
          }
        }
        else if ((v142 & 0x80000000000000) != 0 && (*((_BYTE *)this + 4678) & 0x80) != 0 && *((_QWORD *)this + 402))
        {
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6008, 1, -24.0);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v152 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v153 = (*v152 ? *v152 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2660;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = 0xC038000000000000;
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"(UL-)MagDiffNSV4";
              _os_log_impl(&dword_1B5ED0000, v153, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> override noise suppression level to %f for %s AU", (uint8_t *)buf, 0x26u);
            }
          }
          v154 = (int *)*((_QWORD *)this + 1570);
          if (v154 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v154, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2660, "ApplyNSTuningOverride", "override noise suppression level to %f for %s AU", -24.0, "(UL-)MagDiffNSV4");
          }
        }
      }
      v155 = *((_DWORD *)this + 18);
      if ((*((_BYTE *)this + 4662) & 0x80) != 0 && (v155 - 9 < 0xD || v155 <= 7 && ((1 << v155) & 0xB6) != 0))
      {
        v156 = **((_DWORD **)this + 292);
        if (v156 == 1886545251 || v156 == 1885888867)
        {
          v209.__r_.__value_.__s.__data_[0] = 0;
          IsAttached = GetVPSmartCoverIsAttached((BOOL *)&v209);
          if (IsAttached)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v158 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v159 = (*v158 ? *v158 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)&__p, IsAttached);
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2714;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)&__p;
                _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> couldn't query smart cover state: error = %s", (uint8_t *)buf, 0x1Cu);
              }
            }
            v160 = (int *)*((_QWORD *)this + 1570);
            if (v160 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v161 = VPLogScope(void)::scope;
              CAX4CCString::CAX4CCString((CAX4CCString *)buf, IsAttached);
              CALegacyLog::log(v160, 1, v161, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2714, "ApplyNSSmartCoverOverride", "couldn't query smart cover state: error = %s", (const char *)buf);
            }
          }
          else
          {
            v162 = v209.__r_.__value_.__s.__data_[0];
            if (*((_BYTE *)this + 15897))
            {
              if (*((_QWORD *)this + 1884))
              {
                buf[0].__r_.__value_.__r.__words[0] = 0;
                VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
                v163 = (const void *)buf[0].__r_.__value_.__r.__words[0];
                if (buf[0].__r_.__value_.__r.__words[0])
                {
                  LODWORD(cf[0]) = v162;
                  VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&__p, 58);
                  WriteItemToDictionary((__CFDictionary **)buf, (const void **)&__p.__r_.__value_.__l.__data_, 1, 4uLL, (const char *)cf);
                  if (__p.__r_.__value_.__r.__words[0])
                    CFRelease(__p.__r_.__value_.__l.__data_);
                  CFRelease(v163);
                }
              }
            }
            if (v162)
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v164 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
              {
                v165 = (*v164 ? *v164 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2703;
                  _os_log_impl(&dword_1B5ED0000, v165, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> smart cover case detected", (uint8_t *)buf, 0x12u);
                }
              }
              v166 = (int *)*((_QWORD *)this + 1570);
              if (v166 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v166, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2703, "ApplyNSSmartCoverOverride", "smart cover case detected");
              }
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 6008, 0, 1.0);
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v167 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
              {
                v168 = (*v167 ? *v167 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"VoiceProcessor_v2.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 2709;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = 1;
                  LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"(UL-)MagDiffNSV4";
                  _os_log_impl(&dword_1B5ED0000, v168, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> override noise suppression mode to %u for %s AU", (uint8_t *)buf, 0x22u);
                }
              }
              v169 = (int *)*((_QWORD *)this + 1570);
              if (v169 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v169, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2709, "ApplyNSSmartCoverOverride", "override noise suppression mode to %u for %s AU", 1, "(UL-)MagDiffNSV4");
              }
            }
          }
          v155 = *((_DWORD *)this + 18);
        }
      }
      if ((v155 - 9 < 0xD || v155 <= 7 && ((1 << v155) & 0xB0) != 0) && **((_DWORD **)this + 295) == 1886216809)
        *((_QWORD *)this + 583) |= 8uLL;
      v170 = (_QWORD *)((char *)this + 4656);
      if (*((_BYTE *)this + 2245))
      {
        if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) >= 2)
        {
          *((_QWORD *)this + 582) &= 0xFFFFFFFFF9FFFFFFLL;
          v171 = *((_QWORD *)this + 1104);
          *((_QWORD *)this + 1104) = v171 & 0xFFFFFFFFFFFFFFBFLL;
          if ((*((_DWORD *)this + 18) - 22) <= 7)
          {
            if (**((_DWORD **)this + 292) == 1886613611 && !*((_BYTE *)this + 2244))
              v172 = v171 & 0xFFFFFFFFFEFFFFBFLL | 0x1000000;
            else
              v172 = v171 & 0xFFFFFFFFFEFFFFBFLL;
            *((_QWORD *)this + 1104) = v172;
          }
        }
      }
      if (*((_BYTE *)this + 2244) || *v205)
        *v170 &= 0xFFFFFFFFF9EFFFFFLL;
      if (*((_BYTE *)this + 4568))
      {
        CFStringGetCString(*((CFStringRef *)this + 567), (char *)buf, 128, 0x600u);
        for (i = 0; i != 71; ++i)
        {
          if (((*(_QWORD *)((char *)v170 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0 && i != 62)
            VoiceProcessorV2::GetAndPopulateAUTuningPreset(this, i, 1, (char *)buf);
        }
        VoiceProcessorV2::GetAndPopulateAuxAUTuningPreset(this, 1, (char *)buf);
        CFStringGetCString(*((CFStringRef *)this + 569), (char *)buf, 128, 0x600u);
        for (j = 0; j != 62; ++j)
        {
          if (((*((_QWORD *)this + 1104) >> j) & 1) != 0 && ((0x17FFFFFFC7FFFFFFuLL >> j) & 1) != 0)
            VoiceProcessorV2::GetAndPopulateAUTuningPreset(this, j, 0, (char *)buf);
        }
        VoiceProcessorV2::GetAndPopulateAuxAUTuningPreset(this, 0, (char *)buf);
      }
      (*(void (**)(VoiceProcessorV2 *, _QWORD))(*(_QWORD *)this + 528))(this, *((unsigned int *)this + 596));
      VoiceProcessorV2::GetHardwareModelNameForTuning(&__p, (uint64_t)this);
      VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(buf, (uint64_t)this);
      if (buf[1].__r_.__value_.__s.__data_[0])
      {
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v209, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
        else
          v209 = buf[0];
        v175 = std::string::insert(&v209, 0, "/", 1uLL);
        v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
        v211 = v175->__r_.__value_.__r.__words[2];
        *(_OWORD *)cf = v176;
        v175->__r_.__value_.__l.__size_ = 0;
        v175->__r_.__value_.__r.__words[2] = 0;
        v175->__r_.__value_.__r.__words[0] = 0;
        if (v211 >= 0)
          v177 = cf;
        else
          v177 = (CFTypeRef *)cf[0];
        if (v211 >= 0)
          v178 = HIBYTE(v211);
        else
          v178 = (std::string::size_type)cf[1];
        std::string::append(&__p, (const std::string::value_type *)v177, v178);
        if (SHIBYTE(v211) < 0)
          operator delete((void *)cf[0]);
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v209.__r_.__value_.__l.__data_);
        if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)buf, (uint64_t)this);
      v180 = SHIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      {
        if (!buf[0].__r_.__value_.__l.__size_)
          goto LABEL_623;
        v181 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&buf[0].__r_.__value_.__s + 23))
          goto LABEL_623;
        v181 = buf;
      }
      if (!strcmp((const char *)v181, "gen"))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v180 >= 0)
          v183 = buf;
        else
          v183 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
LABEL_637:
        VoiceProcessorV2::LoadAUDataPreset(this, (const char *)p_p, (char *)v183, v179);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
LABEL_623:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v180 >= 0)
        v183 = buf;
      else
        v183 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      if (*((_BYTE *)this + 60))
        v183 = 0;
      goto LABEL_637;
    }
    if (objc_opt_class())
    {
      v133 = (void *)MEMORY[0x1BCC96580]();
      v134 = objc_alloc_init(MEMORY[0x1E0CFEF98]);
      objc_msgSend(v134, "getPreferenceFor:", *MEMORY[0x1E0CFEF88]);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v135, "BOOLValue"))
      {
        objc_msgSend(v134, "getPreferenceFor:", *MEMORY[0x1E0CFEF90]);
        v136 = (void *)objc_claimAutoreleasedReturnValue();

        if (v136)
        {
          v137 = objc_msgSend(v136, "intValue");
          v135 = v136;
        }
        else
        {
          v135 = 0;
          v137 = 100;
        }
      }
      else
      {
        v137 = 0;
      }

      objc_autoreleasePoolPop(v133);
    }
    else
    {
      v137 = 0;
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    if (VPLogScope(void)::scope)
    {
      v138 = *(id *)VPLogScope(void)::scope;
      if (!v138)
      {
LABEL_427:
        *((float *)this + 582) = (float)v137;
        if (*((_DWORD *)this + 19) == 3 && v137)
        {
          *((_QWORD *)this + 1104) |= 0x4400000000000uLL;
          (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 504))(this);
        }
        goto LABEL_430;
      }
    }
    else
    {
      v138 = MEMORY[0x1E0C81028];
      v139 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpADASManagerInterface.mm";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 52;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v137;
      _os_log_impl(&dword_1B5ED0000, v138, OS_LOG_TYPE_INFO, "%25s:%-5d [VolumeLimit] SPL Target Settings SPL: %u", (uint8_t *)buf, 0x18u);
    }

    goto LABEL_427;
  }
}

void sub_1B6277028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

char *VPChannelConfig::SetChConfig(VPChannelConfig *this, int a2, const char *__s1, unsigned int a4)
{
  void *v7;
  char *result;
  int v9;
  int v10;

  *(_DWORD *)this = a2;
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
    free(v7);
  *((_QWORD *)this + 1) = 0;
  result = strdup(__s1);
  *((_QWORD *)this + 1) = result;
  if (a4 <= 3)
  {
    v9 = 1 << a4;
    if ((*(_DWORD *)this & (1 << a4)) == 0)
    {
      v10 = 0;
      while (((*(_DWORD *)this >> v10) & 1) == 0)
      {
        if (++v10 == 32)
        {
          LOBYTE(v10) = 33;
          break;
        }
      }
      v9 = 1 << v10;
    }
  }
  else
  {
    v9 = 0;
  }
  *((_DWORD *)this + 4) = v9;
  return result;
}

uint64_t VoiceProcessorV2::VPEchoProcessingParams::Reset(VoiceProcessorV2::VPEchoProcessingParams *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v8;
  int v9;

  *(_QWORD *)this = 0;
  if (!*((_BYTE *)this + 216))
  {
    v2 = 0;
    *(_QWORD *)((char *)this + 164) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    do
    {
      *(_QWORD *)((char *)this + v2 * 4 + 20) = dword_1B664AB6C[v2];
      v2 += 2;
    }
    while (v2 != 18);
    *(_QWORD *)((char *)this + 92) = 0x2000000000;
    *((_DWORD *)this + 29) = 0;
    *(_OWORD *)((char *)this + 100) = xmmword_1B66A13C0;
    *(_OWORD *)((char *)this + 140) = xmmword_1B66A13D0;
  }
  *((_BYTE *)this + 216) = 0;
  *((_WORD *)this + 88) = 0;
  *((_BYTE *)this + 178) = 0;
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  v8 = (char *)this + 304;
  v9 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)&v8);
  v3 = 0;
  v4 = *((_QWORD *)this + 41) | 0x7FLL;
  *((_QWORD *)this + 40) = -1;
  *((_QWORD *)this + 41) = v4;
  do
  {
    *(_QWORD *)((char *)this + v3 + 344) = *(_QWORD *)((char *)this + v3 + 336);
    std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + v3 + 2680, *(_QWORD *)((char *)this + v3 + 2680));
    v3 += 24;
  }
  while (v3 != 1704);
  std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 2608, *((_QWORD *)this + 326));
  *((_QWORD *)this + 330) = *((_QWORD *)this + 329);
  CACFString::operator=((uint64_t)this + 2664, CFSTR("(UL)-AuxVP"));
  v8 = (char *)this + 4480;
  v9 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>((uint64_t)&v8);
  *((_QWORD *)this + 561) |= 0x3FFFFFFFFFFFFFFFuLL;
  v5 = (_QWORD *)((char *)this + 4496);
  v6 = 62;
  do
  {
    v5[1] = *v5;
    std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)(v5 + 257), v5[257]);
    v5 += 3;
    --v6;
  }
  while (v6);
  std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 6480, *((_QWORD *)this + 810));
  *((_QWORD *)this + 814) = *((_QWORD *)this + 813);
  return CACFString::operator=((uint64_t)this + 6536, CFSTR("(DL)-AuxVP"));
}

void std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {
    v5 = *(void **)(i - 8);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(i - 8) = 0;
    }
    *(_QWORD *)(i - 24) = 0;
    *(_QWORD *)(i - 16) = 0;
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>(uint64_t result)
{
  int v1;
  _QWORD *v2;
  char v3;
  char v4;

  v1 = *(_DWORD *)(result + 8);
  v2 = *(_QWORD **)result;
  v3 = 62;
  if (!v1
    || ((64 - v1) >= 0x3EuLL ? (v4 = 62) : (v4 = 64 - v1),
        *v2 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1)),
        ++v2,
        *(_QWORD *)result = v2,
        (v3 = (62 - v4) & 0x3F) != 0))
  {
    *(_QWORD *)result = v2;
    *v2 &= ~(0xFFFFFFFFFFFFFFFFLL >> -v3);
  }
  return result;
}

void VoiceProcessorV2::GetAndPrintPortSubtype(AudioObjectID inObjectID, unsigned int *a2, unsigned int *a3)
{
  int v4;
  int v5;

  GetAndPrintPortTypeProperty(0x6F757470u, (int)a2, inObjectID, 0x70737562u, "sub", a3);
  v4 = *a3;
  if ((int)*a3 > 1647718501)
  {
    if ((v4 - 1647718502) >= 2 && v4 != 1752709424 && v4 != 1781740087)
LABEL_16:
      *a3 = 0;
  }
  else
  {
    if (v4 > 1633759843)
    {
      if (v4 == 1633759844)
        return;
      v5 = 1634231920;
    }
    else
    {
      if (v4 == 1214329654)
        return;
      v5 = 1214394677;
    }
    if (v4 != v5)
      goto LABEL_16;
  }
}

uint64_t VoiceProcessorV2::ApplyPortSubtypeTuningOverride(VoiceProcessorV2 *this, unsigned int a2)
{
  _QWORD *v4;
  NSObject *v5;
  int *v6;
  uint64_t v7;
  int TuningInSubdirs;
  const char **v9;
  int v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  int *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  _QWORD *v24;
  int *v25;
  const char *v26;
  const __CFDictionary *v27;
  _QWORD *v28;
  NSObject *v29;
  int *v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  NSObject *v33;
  int *v34;
  char *v36;
  CFStringRef v37;
  char v38;
  CFTypeRef cf;
  char v40;
  __int128 *v41;
  char v42;
  _BYTE v43[28];
  __int16 v44;
  const char *v45;
  _OWORD buf[16];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 520))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295)))return 0;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v4 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v5 = (*v4 ? *v4 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, *((_DWORD *)this + 596));
      LODWORD(buf[0]) = 136315650;
      *(_QWORD *)((char *)buf + 4) = "vpAspen_v2.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 1209;
      WORD1(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 4) = v43;
      _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> known headphones with HW EQ AU preset override detected %s", (uint8_t *)buf, 0x1Cu);
    }
  }
  v36 = (char *)this + 15897;
  v6 = (int *)*((_QWORD *)this + 1570);
  if (v6 && (*v36 || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v7 = VPLogScope(void)::scope;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *((_DWORD *)this + 596));
    CALegacyLog::log(v6, 5, v7, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1209, "ApplyPortSubtypeTuningOverride", "known headphones with HW EQ AU preset override detected %s", (const char *)buf);
  }
  memset(buf, 0, 255);
  if (*((double *)this + 78) <= 0x5DC0)
  {
    TuningInSubdirs = 0;
    v9 = (const char **)((char *)this + 8);
    v10 = 3;
    v11 = 8000;
    do
    {
      if (v11 >= *((double *)this + 78))
      {
        if (a2)
        {
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a2);
          v12 = v43;
        }
        else
        {
          v12 = "gen";
        }
        snprintf((char *)buf, 0xFFuLL, "%s_%u%s", v12, v11, "Hz");
        v41 = (__int128 *)CFStringCreateWithCString(0, (const char *)buf, 0x600u);
        v42 = 1;
        v13 = *((_QWORD *)this + 341);
        cf = CFStringCreateWithCString(0, "Generic", 0x600u);
        v40 = 1;
        v37 = CFStringCreateWithCString(0, "Headphones", 0x600u);
        v38 = 1;
        *(_QWORD *)v43 = &cf;
        *(_QWORD *)&v43[8] = &v37;
        *(_QWORD *)&v43[16] = &v41;
        TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v13, (const __CFString ***)v43, 3u, 1u);
        CACFString::~CACFString((CACFString *)&v37);
        CACFString::~CACFString((CACFString *)&cf);
        if (!TuningInSubdirs)
        {
          CACFString::~CACFString((CACFString *)&v41);
          goto LABEL_48;
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v14 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            v16 = (char *)this + 8;
            if (*((char *)this + 31) < 0)
              v16 = *v9;
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "vpAspen_v2.cpp";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 1223;
            *(_WORD *)&v43[18] = 2080;
            *(_QWORD *)&v43[20] = v16;
            v44 = 2080;
            v45 = (const char *)buf;
            _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v43, 0x26u);
          }
        }
        v17 = (int *)*((_QWORD *)this + 1570);
        if (v17 && (*v36 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v18 = (char *)this + 8;
          if (*((char *)this + 31) < 0)
            v18 = *v9;
          CALegacyLog::log(v17, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1223, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v18, (const char *)buf);
        }
        CACFString::~CACFString((CACFString *)&v41);
      }
      v11 += 8000;
      --v10;
    }
    while (v10);
    if (TuningInSubdirs)
      goto LABEL_49;
  }
LABEL_48:
  if (*((double *)this + 78) < 0x5DC1)
  {
LABEL_74:
    v27 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)buf, 1u);
    cf = v27;
    if (v27)
    {
      CFRetain(v27);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1462, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v28 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v29 = (*v28 ? *v28 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v43 = 136315906;
          *(_QWORD *)&v43[4] = "vpAspen_v2.cpp";
          *(_WORD *)&v43[12] = 1024;
          *(_DWORD *)&v43[14] = 1248;
          *(_WORD *)&v43[18] = 2080;
          *(_QWORD *)&v43[20] = buf;
          v44 = 2080;
          v45 = "(DL-)HwEQ";
          _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found Headphone EQ aupreset:%s for %s", v43, 0x26u);
        }
      }
      v30 = (int *)*((_QWORD *)this + 1570);
      if (v30 && (*v36 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v30, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1248, "ApplyPortSubtypeTuningOverride", "found Headphone EQ aupreset:%s for %s", (const char *)buf, "(DL-)HwEQ");
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "(DL-)HwEQ");
      v41 = (__int128 *)v43;
      v31 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4576, v43, (uint64_t)&std::piecewise_construct, &v41);
      std::string::__assign_external((std::string *)(v31 + 40), (const std::string::value_type *)buf);
      if ((v43[23] & 0x80000000) != 0)
        operator delete(*(void **)v43);
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v32 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v33 = (*v32 ? *v32 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v43 = 136315906;
          *(_QWORD *)&v43[4] = "vpAspen_v2.cpp";
          *(_WORD *)&v43[12] = 1024;
          *(_DWORD *)&v43[14] = 1251;
          *(_WORD *)&v43[18] = 2080;
          *(_QWORD *)&v43[20] = buf;
          v44 = 2080;
          v45 = "(DL-)HwEQ";
          _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to load Headphone EQ tuning aupreset:%s for %s", v43, 0x26u);
        }
      }
      v34 = (int *)*((_QWORD *)this + 1570);
      if (v34 && (*v36 || v36[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v34, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1251, "ApplyPortSubtypeTuningOverride", ": failed to load Headphone EQ tuning aupreset:%s for %s", (const char *)buf, "(DL-)HwEQ");
      }
    }
    return 0;
  }
LABEL_49:
  if (a2)
  {
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v43, a2);
    v19 = v43;
  }
  else
  {
    v19 = "gen";
  }
  snprintf((char *)buf, 0xFFuLL, "%s", v19);
  v41 = (__int128 *)CFStringCreateWithCString(0, (const char *)buf, 0x600u);
  v42 = 1;
  v20 = *((_QWORD *)this + 341);
  cf = CFStringCreateWithCString(0, "Generic", 0x600u);
  v40 = 1;
  v37 = CFStringCreateWithCString(0, "Headphones", 0x600u);
  v38 = 1;
  *(_QWORD *)v43 = &cf;
  *(_QWORD *)&v43[8] = &v37;
  *(_QWORD *)&v43[16] = &v41;
  v21 = TuningPListMgr::loadTuningInSubdirs_(v20, (const __CFString ***)v43, 3u, 1u);
  CACFString::~CACFString((CACFString *)&v37);
  CACFString::~CACFString((CACFString *)&cf);
  if (!(_DWORD)v21)
  {
    CACFString::~CACFString((CACFString *)&v41);
    goto LABEL_74;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v22 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v24 = (_QWORD *)*v24;
      *(_DWORD *)v43 = 136315906;
      *(_QWORD *)&v43[4] = "vpAspen_v2.cpp";
      *(_WORD *)&v43[12] = 1024;
      *(_DWORD *)&v43[14] = 1236;
      *(_WORD *)&v43[18] = 2080;
      *(_QWORD *)&v43[20] = v24;
      v44 = 2080;
      v45 = (const char *)buf;
      _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v43, 0x26u);
    }
  }
  v25 = (int *)*((_QWORD *)this + 1570);
  if (v25 && (*v36 || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v26 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v26 = *(const char **)v26;
    CALegacyLog::log(v25, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpAspen_v2.cpp", 1236, "ApplyPortSubtypeTuningOverride", ": failed to find Headphone EQ aupreset: %s/Generic/Headphones/%s", v26, (const char *)buf);
  }
  CACFString::~CACFString((CACFString *)&v41);
  return v21;
}

void sub_1B6277F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  CACFString::~CACFString((CACFString *)&a21);
  _Unwind_Resume(a1);
}

BOOL VoiceProcessorV2::portSubTypeCanOverrideHWEQ(VoiceProcessorV2 *this, int a2, int a3)
{
  _BOOL4 v4;

  v4 = a3 == 1214329654 || a3 == 1214394677;
  return a2 == 1885892727 && v4;
}

void EnvelopeDetector::SetAttackTime(EnvelopeDetector *this, float a2)
{
  double v4;
  double v5;
  float v6;

  *((float *)this + 3) = a2;
  if (*((_DWORD *)this + 5) == 3)
  {
    v4 = 1.0 - exp(-1.0 / (a2 * 0.001 * *(float *)this));
  }
  else
  {
    if (*((_BYTE *)this + 24))
      v5 = -0.435333936;
    else
      v5 = -2.0;
    v4 = exp(v5 / ((float)(*(float *)this * a2) * 0.001));
  }
  v6 = v4;
  *((float *)this + 1) = v6;
  if (*((_BYTE *)this + 32))
  {
    *((float *)this + 2) = v6;
    *((float *)this + 4) = a2;
  }
}

void EnvelopeDetector::SetReleaseTime(EnvelopeDetector *this, float a2)
{
  double v4;
  double v5;
  float v6;

  *((float *)this + 4) = a2;
  if (*((_DWORD *)this + 5) == 3)
  {
    v4 = 1.0 - exp(-1.0 / (a2 * 0.001 * *(float *)this));
  }
  else
  {
    if (*((_BYTE *)this + 24))
      v5 = -0.435333936;
    else
      v5 = -2.0;
    v4 = exp(v5 / ((float)(*(float *)this * a2) * 0.001));
  }
  v6 = v4;
  *((float *)this + 2) = v6;
  if (*((_BYTE *)this + 32))
  {
    *((float *)this + 1) = v6;
    *((float *)this + 3) = a2;
  }
}

void CADeprecated::CAAutoFree<float>::alloc(void **a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v6 = *a1;
  if (v6)
  {
    free(v6);
    *a1 = 0;
  }
  if (a3)
  {
    v7 = malloc_type_malloc(4 * a2, 0x2C8E6D5CuLL);
    v8 = v7;
    if (!a2 || v7)
    {
      bzero(v7, 4 * a2);
      goto LABEL_9;
    }
LABEL_10:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
  }
  v9 = malloc_type_malloc(4 * a2, 0x7C51E058uLL);
  v8 = v9;
  if (a2 && !v9)
    goto LABEL_10;
LABEL_9:
  *a1 = v8;
}

void ecSUMO::fcn_set_gamma(ecSUMO *this, float a2, unsigned int a3)
{
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float v9;
  double v11;
  float v12;
  float v13;
  float v14;

  v5 = 0.0;
  v6 = a2 > 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (v6)
  {
    v11 = -(float)((float)*((unsigned int *)this + 18) / (float)*((unsigned int *)this + 19));
    v12 = v11 / a2;
    v5 = expf(v12);
    v7 = sqrtf(v5);
    v8 = 1.0 / v7;
    v13 = v11 / (float)((float)a3 * a2);
    v14 = expf(v13);
    *((float *)this + 2) = v14;
    v9 = 1.0 / sqrtf(v14);
  }
  *((float *)this + 1) = v5;
  *((float *)this + 3) = v7;
  *((float *)this + 4) = v8;
  *((float *)this + 5) = v9;
}

uint64_t ecSUMO::ec_proc(ecSUMO *this, const AudioBufferList *a2, const AudioBufferList *a3, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7, AudioBufferList *a8)
{
  uint64_t v12;
  unint64_t v13;
  void **p_mData;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float *v25;
  vDSP_Length v26;
  const float *p_A;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  vDSP_Length __N;
  vDSP_Length v51;
  float *v52;
  float *v53;
  vDSP_Length v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  float v59;
  vDSP_Length v60;
  int i;
  vDSP_Length v62;
  float *v63;
  vDSP_Length v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  void **v68;
  void **v69;
  void **v70;
  void *v71;
  void *v72;
  uint64_t result;
  unsigned int v74;
  unint64_t v75;
  vDSP_Length v76;
  uint64_t v77;
  unint64_t v78;
  vDSP_Length v79;
  uint64_t v80;
  unint64_t v81;
  vDSP_Length v82;
  float *v83;
  float *v84;
  vDSP_Length v85;
  float *v86;
  uint64_t v87;
  unint64_t v88;
  vDSP_Length v89;
  int j;
  vDSP_Length v91;
  float *v92;
  vDSP_Length v93;
  float *v94;
  unint64_t v95;
  void **v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t k;
  unint64_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  vDSP_Length v106;
  vDSP_Length v107;
  float *v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  float *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  vDSP_Length v124;
  vDSP_Length v125;
  unint64_t v126;
  uint64_t v127;
  vDSP_Length v128;
  unint64_t m;
  uint64_t v130;
  unint64_t v131;
  const float *v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  unsigned int v137;
  float *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t n;
  uint64_t v151;
  vDSP_Length v152;
  unint64_t v153;
  uint64_t v154;
  vDSP_Length v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  vDSP_Length v163;
  vDSP_Length v164;
  uint64_t v165;
  vDSP_Length v166;
  vDSP_Length v167;
  uint64_t v168;
  unint64_t ii;
  uint64_t v170;
  uint64_t v171;
  vDSP_Length v172;
  uint64_t v173;
  float *v174;
  vDSP_Length v175;
  uint64_t jj;
  unint64_t v177;
  uint64_t v178;
  float *v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  float *v183;
  vDSP_Length v184;
  uint64_t v185;
  unint64_t kk;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void **v191;
  void **v192;
  void **v193;
  void *v194;
  float *v195;
  float *v196;
  vDSP_Length v197;
  float *v198;
  unsigned int v202;
  float *v203;
  float *v204;
  _QWORD *v205;
  unsigned int v207;
  float *v208;
  uint64_t v209;
  float *v210;
  int v211;
  int v212;
  DSPSplitComplex v213;
  DSPSplitComplex v214;
  DSPSplitComplex v215;
  DSPSplitComplex v216;
  DSPSplitComplex v217;
  DSPSplitComplex v218;
  DSPSplitComplex v219;
  DSPSplitComplex v220;
  DSPSplitComplex v221;
  DSPSplitComplex v222;
  DSPSplitComplex v223;
  DSPSplitComplex v224;
  float v225;
  uint64_t v226;
  DSPSplitComplex v227;
  DSPSplitComplex v228;
  DSPSplitComplex v229;
  DSPSplitComplex v230;
  DSPSplitComplex __B;
  DSPSplitComplex __D;
  DSPSplitComplex __C;
  DSPSplitComplex __A;

  v226 = 0;
  v225 = 0.0;
  bzero(*((void **)this + 19), 4 * *((unsigned int *)this + 20));
  if (*((_DWORD *)this + 15))
  {
    v12 = 0;
    v13 = 0;
    p_mData = &a2->mBuffers[0].mData;
    do
    {
      v15 = *p_mData;
      p_mData += 2;
      memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 88) + v12) + 24 * *((unsigned int *)this + 29)), v15, 4 * *((unsigned int *)this + 18));
      memcpy(*(void **)(*((_QWORD *)this + 106) + v12), *(const void **)(*((_QWORD *)this + 103) + v12), 4 * *((unsigned int *)this + 18));
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 103) + v12) + 4 * *((unsigned int *)this + 36)), v15, 4 * *((unsigned int *)this + 18));
      memmove(*(void **)(*((_QWORD *)this + 103) + v12), (const void *)(*(_QWORD *)(*((_QWORD *)this + 103) + v12) + 4 * *((unsigned int *)this + 18)), 4 * *((unsigned int *)this + 36));
      ecSUMO::fcn_wola_analysis_fb((uint64_t)this, *((const vDSP_DFT_SetupStruct **)this + 169), (_QWORD *)(*((_QWORD *)this + 88) + v12), (_QWORD *)this + 34, (float **)this + 49, (float **)(*((_QWORD *)this + 109) + v12), *((unsigned int *)this + 22), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      memcpy(**(void ***)(*((_QWORD *)this + 115) + v12), *(const void **)(*((_QWORD *)this + 109) + v12), 8 * *((unsigned int *)this + 24));
      ++v13;
      v12 += 24;
    }
    while (v13 < *((unsigned int *)this + 15));
  }
  if (*((_DWORD *)this + 17))
  {
    v16 = 0;
    v17 = 0;
    v18 = &a4->mBuffers[0].mData;
    do
    {
      v19 = *v18;
      v18 += 2;
      memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 91) + v16) + 24 * *((unsigned int *)this + 29)), v19, 4 * *((unsigned int *)this + 18));
      ecSUMO::fcn_wola_analysis_fb((uint64_t)this, *((const vDSP_DFT_SetupStruct **)this + 169), (_QWORD *)(*((_QWORD *)this + 91) + v16), (_QWORD *)this + 34, (float **)this + 49, (float **)(*((_QWORD *)this + 112) + v16), *((unsigned int *)this + 22), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      ++v17;
      v16 += 24;
    }
    while (v17 < *((unsigned int *)this + 17));
  }
  if (*((_DWORD *)this + 16))
  {
    v20 = 0;
    while (1)
    {
      memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 85) + 24 * v20) + 24 * *((unsigned int *)this + 29)), a3->mBuffers[v20].mData, 4 * *((unsigned int *)this + 18));
      if (!*((_BYTE *)this + 129))
        break;
      if (*((_DWORD *)this + 34) != 1)
      {
        v21 = (*((_DWORD *)this + 34) - 1) - 1;
        v22 = 24 * (*((_DWORD *)this + 34) - 1);
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(*((_QWORD *)this + 160) + 24 * v20);
          memcpy(*(void **)(v24 + v22), *(const void **)(v24 + 24 * v21--), 8 * *((unsigned int *)this + 24));
          v22 -= 24;
        }
        while (v23);
      }
      ecSUMO::fcn_wola_analysis_fb((uint64_t)this, *((const vDSP_DFT_SetupStruct **)this + 169), (_QWORD *)(*((_QWORD *)this + 85) + 24 * v20), (_QWORD *)this + 34, (float **)this + 49, *(float ***)(*((_QWORD *)this + 160) + 24 * v20), *((unsigned int *)this + 22), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      if (v20 >= (unint64_t)*((unsigned int *)this + 17) >> 1)
      {
        memcpy(**(void ***)(*((_QWORD *)this + 121) + 24 * v20), **(const void ***)(*((_QWORD *)this + 160) + 24 * v20), 8 * *((unsigned int *)this + 24));
        LODWORD(__A.realp) = 1065353216;
        v25 = *(float **)(*((_QWORD *)this + 130) + 24 * v20);
        v26 = (2 * *((_DWORD *)this + 24));
        p_A = (const float *)&__A;
        goto LABEL_17;
      }
      memcpy(*(void **)(*((_QWORD *)this + 163) + 24 * v20), *(const void **)(*((_QWORD *)this + 109) + 24 * (*((_DWORD *)this + 15) + ~(_DWORD)v20)), 8 * *((unsigned int *)this + 24));
      memcpy(**(void ***)(*((_QWORD *)this + 121) + 24 * v20), *(const void **)(*((_QWORD *)this + 112) + 24 * (*((_DWORD *)this + 17) + ~(_DWORD)v20)), 8 * *((unsigned int *)this + 24));
      memcpy(*(void **)(*((_QWORD *)this + 130) + 24 * v20), *(const void **)(*((_QWORD *)this + 112) + 24 * v20), 8 * *((unsigned int *)this + 24));
LABEL_18:
      if (++v20 >= *((unsigned int *)this + 16))
        goto LABEL_19;
    }
    memcpy(**(void ***)(*((_QWORD *)this + 121) + 24 * v20), *(const void **)(*((_QWORD *)this + 112) + 24 * v20), 8 * *((unsigned int *)this + 24));
    HIDWORD(v226) = 1065353216;
    v25 = *(float **)(*((_QWORD *)this + 130) + 24 * v20);
    v26 = (2 * *((_DWORD *)this + 24));
    p_A = (const float *)&v226 + 1;
LABEL_17:
    vDSP_vfill(p_A, v25, 1, v26);
    goto LABEL_18;
  }
LABEL_19:
  if (*((_DWORD *)this + 20))
  {
    v28 = 0;
    v207 = 0;
    do
    {
      if (*((_BYTE *)this + 129))
      {
        if (v28 < (unint64_t)*((unsigned int *)this + 17) >> 1)
        {
          v29 = *((unsigned int *)this + 24);
          v214.realp = *(float **)(*((_QWORD *)this + 130) + 24 * v28);
          v214.imagp = &v214.realp[v29];
          v30 = *((_QWORD *)this + 121);
          v31 = (float *)(**(_QWORD **)(v30 + 24 * v28) + 4 * v29);
          v213.realp = **(float ***)(v30 + 24 * v28);
          v213.imagp = v31;
          vDSP_vsmul(**(const float ***)(v30 + 24 * v28), 1, (const float *)this + 30, **(float ***)(v30 + 24 * v28), 1, (2 * v29));
          vDSP_vsmul(*(const float **)(*((_QWORD *)this + 130) + 24 * v28), 1, (const float *)this + 30, *(float **)(*((_QWORD *)this + 130) + 24 * v28), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvmags(&v214, 1, *((float **)this + 40), 1, *((unsigned int *)this + 24));
          vDSP_zvmags(&v213, 1, (float *)(*((_QWORD *)this + 40) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
          vDSP_vsub(*((const float **)this + 40), 1, (const float *)(*((_QWORD *)this + 40) + 4 * *((unsigned int *)this + 24)), 1, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          vDSP_vabs(*((const float **)this + 43), 1, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          vDSP_vadd(*((const float **)this + 40), 1, (const float *)(*((_QWORD *)this + 40) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((_QWORD *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
          vDSP_vsadd((const float *)(*((_QWORD *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 27, (float *)(*((_QWORD *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
          vDSP_vdiv((const float *)(*((_QWORD *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, *((const float **)this + 43), 1, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          LODWORD(__A.realp) = *((_DWORD *)this + 24);
          vvsqrtf((float *)(*((_QWORD *)this + 43) + 4 * LODWORD(__A.realp)), *((const float **)this + 43), (const int *)&__A);
          LODWORD(__C.realp) = 1065353216;
          vDSP_vclip((const float *)(*((_QWORD *)this + 43) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 27, (const float *)&__C, *((float **)this + 43), 1, *((unsigned int *)this + 24));
          memcpy(*(void **)(*((_QWORD *)this + 130) + 24 * v28), *((const void **)this + 43), 4 * *((unsigned int *)this + 24));
          memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 130) + 24 * v28) + 4 * *((unsigned int *)this + 24)), *((const void **)this + 43), 4 * *((unsigned int *)this + 24));
        }
        vDSP_vmul(**(const float ***)(*((_QWORD *)this + 121) + 24 * v28), 1, *(const float **)(*((_QWORD *)this + 130) + 24 * v28), 1, **(float ***)(*((_QWORD *)this + 121) + 24 * v28), 1, (2 * *((_DWORD *)this + 24)));
      }
      memcpy(**(void ***)(*((_QWORD *)this + 127) + 24 * v28), **(const void ***)(*((_QWORD *)this + 121) + 24 * v28), 4 * *((unsigned int *)this + 24));
      memcpy((void *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v28) + 4 * (2 * *((_DWORD *)this + 24))), (const void *)(**(_QWORD **)(*((_QWORD *)this + 121) + 24 * v28) + 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
      memcpy((void *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v28) + 4 * *((unsigned int *)this + 24)), **(const void ***)(*((_QWORD *)this + 121) + 24 * v28), 4 * *((unsigned int *)this + 24));
      memcpy((void *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v28) + 4 * (3 * *((_DWORD *)this + 24))), (const void *)(**(_QWORD **)(*((_QWORD *)this + 121) + 24 * v28) + 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
      v32 = *((_QWORD *)this + 31);
      *(_DWORD *)(v32 + 4 * v28) = 0;
      if (*((_DWORD *)this + 14) == 1)
      {
        v33 = 0.0;
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = *((_DWORD *)this + 18);
        do
        {
          vDSP_svesq(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 85) + 24 * v28) + v34), 1, (float *)&v226 + 1, v36);
          v37 = *((_DWORD *)this + 14);
          v36 = *((_DWORD *)this + 18);
          v32 = *((_QWORD *)this + 31);
          v33 = *(float *)(v32 + 4 * v28) + (float)(*((float *)&v226 + 1) / (float)(v36 * v37));
          *(float *)(v32 + 4 * v28) = v33;
          ++v35;
          v34 += 24;
        }
        while (v35 < (v37 - 1));
      }
      v38 = *((_QWORD *)this + 22);
      v39 = *(_QWORD *)(v38 + 8 * (v28 >> 6));
      *(_QWORD *)(v38 + 8 * (v28 >> 6)) = v39 | (1 << v28);
      v40 = v33 + *((float *)this + 27);
      *(float *)(v32 + 4 * v28) = v40;
      if ((float)(log10f(v40) * 10.0) > *((float *)this + 10))
      {
        *(_DWORD *)(*((_QWORD *)this + 19) + 4 * v207++) = v28;
        *(_QWORD *)(v38 + 8 * (v28 >> 6)) = v39 & ~(1 << v28);
      }
      vDSP_vclr((float *)a7->mBuffers[v28++].mData, 1, *((unsigned int *)this + 18));
    }
    while (v28 < *((unsigned int *)this + 20));
    v41 = *((_DWORD *)this + 15);
    v42 = v207;
    if (v207)
    {
      *((_BYTE *)this + 128) = 1;
      if (!*((_BYTE *)this + 129))
      {
        v74 = *((_DWORD *)this + 35);
        if (v41 < v74)
          v74 = v41;
        v202 = v74;
        goto LABEL_85;
      }
      LODWORD(v43) = *((_DWORD *)this + 17);
      v44 = v41 - (v43 >> 1);
      if (v44 >= *((_DWORD *)this + 35))
        v44 = *((_DWORD *)this + 35);
      v202 = v44;
      if (*((_BYTE *)this + 149))
      {
        LODWORD(v224.realp) = 0;
        LODWORD(v223.realp) = 0;
        LODWORD(v222.realp) = 0;
        if (v43 < 2)
          goto LABEL_82;
        v45 = 0;
        do
        {
          vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          v46 = *((unsigned int *)this + 24);
          __A.realp = (float *)*((_QWORD *)this + 61);
          __A.imagp = &__A.realp[v46];
          v47 = *((_QWORD *)this + 163);
          __C.realp = *(float **)(v47 + 24 * v45);
          __C.imagp = &__C.realp[v46];
          if (*((_DWORD *)this + 34))
          {
            v48 = 0;
            v49 = 0;
            do
            {
              __N = *((unsigned int *)this + 24);
              __D.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 118) + 24 * v45) + v48);
              __D.imagp = &__D.realp[__N];
              v230.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 160) + 24 * v45) + v48);
              v230.imagp = &v230.realp[__N];
              __B.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 154) + 24 * v45) + v48);
              __B.imagp = &__B.realp[__N];
              vDSP_zvma(&v230, 1, &__B, 1, &__C, 1, &__D, 1, __N);
              v51 = *((unsigned int *)this + 24);
              v229.realp = (float *)*((_QWORD *)this + 58);
              v229.imagp = &v229.realp[v51];
              v228.realp = (float *)*((_QWORD *)this + 79);
              v228.imagp = &v228.realp[v51];
              vDSP_zvmags(&__B, 1, *((float **)this + 55), 1, v51);
              *(float *)&v224.realp = 1.0 - *((float *)this + 2);
              v52 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v45) + v48);
              vDSP_vsma(*((const float **)this + 55), 1, (const float *)&v224, v52, 1, v52, 1, *((unsigned int *)this + 24));
              v53 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v45) + v48);
              vDSP_vsmul(v53, 1, (const float *)this + 5, v53, 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v230, 1, *(const float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v45) + v48), 1, &v229, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1120403456;
              vDSP_vsmul(v229.realp, 1, (const float *)&v224, v229.realp, 1, (2 * *((_DWORD *)this + 24)));
              vDSP_zvmags(&v229, 1, *((float **)this + 61), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_vsadd(*((const float **)this + 61), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v221.realp) = *((_DWORD *)this + 24);
              vvsqrtf(*((float **)this + 73), *((const float **)this + 73), (const int *)&v221);
              vDSP_vthr(*((const float **)this + 73), 1, (const float *)this + 6, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_svdiv((const float *)&v224, *((const float **)this + 73), 1, *((float **)this + 76), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v229, 1, *((const float **)this + 76), 1, &v228, 1, *((unsigned int *)this + 24));
              v54 = *((unsigned int *)this + 24);
              v227.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 157) + 24 * v45) + v48);
              v227.imagp = &v227.realp[v54];
              vDSP_zrvmul(&v228, 1, *(const float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v45) + v48), 1, &v227, 1, v54);
              v55 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v45) + v48);
              vDSP_vmul(v55, 1, *((const float **)this + 76), 1, v55, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = -1027080192;
              vDSP_vsmul(*((const float **)this + 76), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v227, 1, *((const float **)this + 73), 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvconj(&v227, 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvma(&v227, 1, &__D, 1, &__B, 1, &__B, 1, *((unsigned int *)this + 24));
              vDSP_zvma(&v230, 1, &__B, 1, &__C, 1, &__D, 1, *((unsigned int *)this + 24));
              ++v49;
              v48 += 24;
            }
            while (v49 < *((unsigned int *)this + 34));
            v47 = *((_QWORD *)this + 163);
            LODWORD(v46) = *((_DWORD *)this + 24);
          }
          vDSP_svesq(*(const float **)(v47 + 24 * v45), 1, (float *)&v223, (2 * v46));
          vDSP_svesq(**(const float ***)(*((_QWORD *)this + 118) + 24 * v45), 1, (float *)&v222, (2 * *((_DWORD *)this + 24)));
          if (*((_DWORD *)this + 34) < 2u)
          {
            v56 = 0;
            v59 = *(float *)&v222.realp;
          }
          else
          {
            v56 = 0;
            v57 = 24;
            v58 = 1;
            do
            {
              vDSP_svesq(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 118) + 24 * v45) + v57), 1, (float *)&v224, (2 * *((_DWORD *)this + 24)));
              v59 = *(float *)&v222.realp;
              if (*(float *)&v224.realp < *(float *)&v222.realp)
              {
                LODWORD(v222.realp) = v224.realp;
                v56 = v58;
                v59 = *(float *)&v224.realp;
              }
              ++v58;
              v57 += 24;
            }
            while (v58 < *((unsigned int *)this + 34));
          }
          v60 = *((unsigned int *)this + 24);
          __D.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 118) + 24 * v45) + 24 * v56);
          __D.imagp = &__D.realp[v60];
          if ((float)(*((float *)this + 8) * v59) >= *(float *)&v223.realp)
          {
            LODWORD(v224.realp) = *((_DWORD *)this + 6);
            vDSP_zvsub(&__C, 1, &__D, 1, &__A, 1, v60);
            vDSP_zvmags(&__A, 1, *((float **)this + 58), 1, *((unsigned int *)this + 24));
            vDSP_zvmags(&__D, 1, (float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vthr((const float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 6, (float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vadd(*((const float **)this + 58), 1, (const float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vdiv((const float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((const float **)this + 58), 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
            for (i = 0; i != 4; ++i)
            {
              v62 = *((unsigned int *)this + 24);
              v63 = (float *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v45) + 4 * (v62 * i));
              vDSP_vmul(*((const float **)this + 55), 1, v63, 1, v63, 1, v62);
              v64 = *((unsigned int *)this + 24);
              v65 = (float *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v45) + 4 * (v64 * i));
              vDSP_vsadd(v65, 1, (const float *)this + 6, v65, 1, v64);
            }
          }
          ++v45;
          v43 = *((unsigned int *)this + 17);
        }
        while (v45 < v43 >> 1);
      }
      else
      {
        LODWORD(v224.realp) = 0;
        LODWORD(v223.realp) = 0;
        LODWORD(v222.realp) = 0;
        if (v43 < 2)
          goto LABEL_82;
        v75 = 0;
        do
        {
          vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          v76 = *((unsigned int *)this + 24);
          __A.realp = (float *)*((_QWORD *)this + 61);
          __A.imagp = &__A.realp[v76];
          __C.realp = *(float **)(*((_QWORD *)this + 163) + 24 * v75);
          __C.imagp = &__C.realp[v76];
          __D.realp = **(float ***)(*((_QWORD *)this + 118) + 24 * v75);
          __D.imagp = &__D.realp[v76];
          if (*((_DWORD *)this + 34))
          {
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = *((unsigned int *)this + 24);
              v230.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 160) + 24 * v75) + v77);
              v230.imagp = &v230.realp[v79];
              __B.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 154) + 24 * v75) + v77);
              __B.imagp = &__B.realp[v79];
              vDSP_zvma(&v230, 1, &__B, 1, &__A, 1, &__A, 1, v79);
              ++v78;
              v77 += 24;
            }
            while (v78 < *((unsigned int *)this + 34));
            v76 = *((unsigned int *)this + 24);
          }
          vDSP_zvadd(&__C, 1, &__A, 1, &__D, 1, v76);
          if (*((_DWORD *)this + 34))
          {
            v80 = 0;
            v81 = 0;
            do
            {
              v82 = *((unsigned int *)this + 24);
              v230.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 160) + 24 * v75) + v80);
              v230.imagp = &v230.realp[v82];
              __B.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 154) + 24 * v75) + v80);
              __B.imagp = &__B.realp[v82];
              v229.realp = (float *)*((_QWORD *)this + 58);
              v229.imagp = &v229.realp[v82];
              v228.realp = (float *)*((_QWORD *)this + 79);
              v228.imagp = &v228.realp[v82];
              vDSP_zvmags(&__B, 1, *((float **)this + 55), 1, v82);
              *(float *)&v224.realp = 1.0 - *((float *)this + 2);
              v83 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v75) + v80);
              vDSP_vsma(*((const float **)this + 55), 1, (const float *)&v224, v83, 1, v83, 1, *((unsigned int *)this + 24));
              v84 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v75) + v80);
              vDSP_vsmul(v84, 1, (const float *)this + 5, v84, 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v230, 1, *(const float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v75) + v80), 1, &v229, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1120403456;
              vDSP_vsmul(v229.realp, 1, (const float *)&v224, v229.realp, 1, (2 * *((_DWORD *)this + 24)));
              vDSP_zvmags(&v229, 1, *((float **)this + 61), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_vsadd(*((const float **)this + 61), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v221.realp) = *((_DWORD *)this + 24);
              vvsqrtf(*((float **)this + 73), *((const float **)this + 73), (const int *)&v221);
              vDSP_vthr(*((const float **)this + 73), 1, (const float *)this + 6, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = 1065353216;
              vDSP_svdiv((const float *)&v224, *((const float **)this + 73), 1, *((float **)this + 76), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v229, 1, *((const float **)this + 76), 1, &v228, 1, *((unsigned int *)this + 24));
              v85 = *((unsigned int *)this + 24);
              v227.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 157) + 24 * v75) + v80);
              v227.imagp = &v227.realp[v85];
              vDSP_zrvmul(&v228, 1, *(const float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v75) + v80), 1, &v227, 1, v85);
              v86 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 151) + 24 * v75) + v80);
              vDSP_vmul(v86, 1, *((const float **)this + 76), 1, v86, 1, *((unsigned int *)this + 24));
              LODWORD(v224.realp) = -1027080192;
              vDSP_vsmul(*((const float **)this + 76), 1, (const float *)&v224, *((float **)this + 73), 1, *((unsigned int *)this + 24));
              vDSP_zrvmul(&v227, 1, *((const float **)this + 73), 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvconj(&v227, 1, &v227, 1, *((unsigned int *)this + 24));
              vDSP_zvma(&v227, 1, &__D, 1, &__B, 1, &__B, 1, *((unsigned int *)this + 24));
              ++v81;
              v80 += 24;
            }
            while (v81 < *((unsigned int *)this + 34));
          }
          vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          if (*((_DWORD *)this + 34))
          {
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = *((unsigned int *)this + 24);
              v230.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 160) + 24 * v75) + v87);
              v230.imagp = &v230.realp[v89];
              __B.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 154) + 24 * v75) + v87);
              __B.imagp = &__B.realp[v89];
              vDSP_zvma(&v230, 1, &__B, 1, &__A, 1, &__A, 1, v89);
              ++v88;
              v87 += 24;
            }
            while (v88 < *((unsigned int *)this + 34));
          }
          vDSP_zvadd(&__C, 1, &__A, 1, &__D, 1, *((unsigned int *)this + 24));
          vDSP_svesq(*(const float **)(*((_QWORD *)this + 163) + 24 * v75), 1, (float *)&v223, (2 * *((_DWORD *)this + 24)));
          vDSP_svesq(**(const float ***)(*((_QWORD *)this + 118) + 24 * v75), 1, (float *)&v222, (2 * *((_DWORD *)this + 24)));
          if ((float)(*((float *)this + 8) * *(float *)&v222.realp) >= *(float *)&v223.realp)
          {
            LODWORD(v224.realp) = *((_DWORD *)this + 6);
            vDSP_zvmags(&__A, 1, *((float **)this + 58), 1, *((unsigned int *)this + 24));
            vDSP_zvmags(&__D, 1, (float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vthr((const float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (const float *)this + 6, (float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vadd(*((const float **)this + 58), 1, (const float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
            vDSP_vdiv((const float *)(*((_QWORD *)this + 58) + 4 * *((unsigned int *)this + 24)), 1, *((const float **)this + 58), 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
            for (j = 0; j != 4; ++j)
            {
              v91 = *((unsigned int *)this + 24);
              v92 = (float *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v75) + 4 * (v91 * j));
              vDSP_vmul(*((const float **)this + 55), 1, v92, 1, v92, 1, v91);
              v93 = *((unsigned int *)this + 24);
              v94 = (float *)(**(_QWORD **)(*((_QWORD *)this + 127) + 24 * v75) + 4 * (v93 * j));
              vDSP_vsadd(v94, 1, (const float *)this + 6, v94, 1, v93);
            }
          }
          ++v75;
          v43 = *((unsigned int *)this + 17);
        }
        while (v75 < v43 >> 1);
      }
      v42 = v207;
LABEL_82:
      if (v43 >= 2)
      {
        v95 = 0;
        v96 = &a7->mBuffers[0].mData;
        do
        {
          v97 = (float *)*v96;
          v96 += 2;
          vDSP_vclr(v97, 1, *((unsigned int *)this + 18));
          ++v95;
        }
        while (v95 < (unint64_t)*((unsigned int *)this + 17) >> 1);
      }
LABEL_85:
      vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vclr(*((float **)this + 58), 1, (4 * *((_DWORD *)this + 24)));
      vDSP_vclr(*((float **)this + 55), 1, *((unsigned int *)this + 24));
      HIDWORD(v226) = 1065353216;
      vDSP_vfill((const float *)&v226 + 1, *((float **)this + 70), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vfill((const float *)&v226 + 1, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      if (!*(_DWORD *)this)
        goto LABEL_173;
      v98 = 0;
      if (v42 <= 1)
        v99 = 1;
      else
        v99 = v42;
      v203 = (float *)((char *)this + 24);
      while (1)
      {
        vDSP_vclr(*((float **)this + 55), 1, *((unsigned int *)this + 24));
        if (v202)
        {
          for (k = 0; k != v202; ++k)
          {
            vDSP_vclr(*((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
            v101 = 0;
            v102 = (float *)(*((_QWORD *)this + 61) + 4 * *((unsigned int *)this + 24));
            v218.realp = (float *)*((_QWORD *)this + 61);
            v218.imagp = v102;
            do
            {
              v103 = *((_QWORD *)this + 19);
              if (v101 >= (*((_QWORD *)this + 20) - v103) >> 2)
                goto LABEL_181;
              v104 = 3 * *(unsigned int *)(v103 + 4 * v101);
              v105 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 127) + 8 * v104) + 24 * v98);
              v106 = *((unsigned int *)this + 24);
              v224.realp = (float *)(v105 + 4 * v106);
              v224.imagp = (float *)(v105 + 4 * (3 * v106));
              v219.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 139) + 24 * k) + 8 * v104) + 24 * v98);
              v219.imagp = &v219.realp[v106];
              vDSP_zvma(&v224, 1, &v219, 1, &v218, 1, &v218, 1, v106);
              ++v101;
            }
            while (v99 != v101);
            v107 = *((unsigned int *)this + 24);
            v108 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 115) + 24 * k) + 24 * v98) + 4 * v107);
            v216.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 115) + 24 * k) + 24 * v98);
            v216.imagp = v108;
            v217.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 118) + 24 * k) + 24 * (v98 + 1));
            v217.imagp = &v217.realp[v107];
            vDSP_zvadd(&v216, 1, &v218, 1, &v217, 1, v107);
            vDSP_zvmgsa(&v217, 1, *((const float **)this + 55), 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
          }
        }
        *((float *)&v226 + 1) = *((float *)this + 7) * (float)((float)(1.0 / (float)v202) * *((float *)this + 7));
        vDSP_vsmul(*((const float **)this + 55), 1, (const float *)&v226 + 1, *((float **)this + 55), 1, *((unsigned int *)this + 24));
        v109 = *((_DWORD *)this + 33);
        if (v109 != 1)
          break;
        v212 = *((_DWORD *)this + 24);
        vvsqrtf(*((float **)this + 52), *((const float **)this + 55), &v212);
        vDSP_vthr(*((const float **)this + 52), 1, v203, *((float **)this + 52), 1, *((unsigned int *)this + 24));
        for (m = 0; m != v99; ++m)
        {
          v130 = *((_QWORD *)this + 19);
          if (m >= (*((_QWORD *)this + 20) - v130) >> 2)
            goto LABEL_181;
          vDSP_vclr(*(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * *(unsigned int *)(v130 + 4 * m)) + 24 * v98), 1, (4 * *((_DWORD *)this + 24)));
        }
        HIDWORD(v226) = 1065353216;
        vDSP_svdiv((const float *)&v226 + 1, *((const float **)this + 52), 1, *((float **)this + 64), 1, *((unsigned int *)this + 24));
        vDSP_svdiv((const float *)&v226 + 1, *((const float **)this + 52), 1, (float *)(*((_QWORD *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
        v131 = 0;
        v209 = 1;
        v132 = (const float *)((char *)this + 16);
        do
        {
          v133 = *((_QWORD *)this + 19);
          if (v131 >= (*((_QWORD *)this + 20) - v133) >> 2)
            goto LABEL_181;
          v134 = 0;
          v135 = *(_DWORD *)(v133 + 4 * v131);
          LODWORD(v136) = v209;
          v137 = 2 * *((_DWORD *)this + 24);
          __D.realp = (float *)*((_QWORD *)this + 58);
          __D.imagp = &__D.realp[v137];
          v138 = (float *)(*((_QWORD *)this + 79) + 4 * v137);
          v215.realp = (float *)*((_QWORD *)this + 79);
          v215.imagp = v138;
          v139 = ~v135;
          do
          {
            v140 = *((_QWORD *)this + 19);
            if (v134 >= (*((_QWORD *)this + 20) - v140) >> 2)
              goto LABEL_181;
            v141 = 3 * *(unsigned int *)(v140 + 4 * v134);
            v142 = *((_DWORD *)this + 24);
            v230.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 127) + 8 * v141) + 24 * v98);
            v230.imagp = &v230.realp[2 * v142];
            v228.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 148)
                                                           + 24 * (*((_DWORD *)this + 20) + v139))
                                               + 8 * v141)
                                   + 24 * v98);
            v228.imagp = &v228.realp[2 * v142];
            vDSP_vsmul(v228.realp, 1, v132, v228.realp, 1, (4 * v142));
            v143 = *((_DWORD *)this + 24);
            if (v134)
              vDSP_zvcma(&v228, 1, &v230, 1, &__D, 1, &__D, 1, (2 * v143));
            else
              vDSP_zvmul(&v228, 1, &v230, 1, &__D, 1, (2 * v143), -1);
            ++v134;
          }
          while (v209 != v134);
          HIDWORD(v226) = 1065353216;
          vDSP_zvmags(&__D, 1, *((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_vmsa(*((const float **)this + 64), 1, *((const float **)this + 61), 1, (const float *)&v226 + 1, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_vthr(*((const float **)this + 73), 1, v203, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_vdiv(*((const float **)this + 73), 1, *((const float **)this + 64), 1, *((float **)this + 67), 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zrvmul(&__D, 1, *((const float **)this + 67), 1, &v215, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvconj(&v215, 1, &v215, 1, (2 * *((_DWORD *)this + 24)));
          v211 = 2 * *((_DWORD *)this + 24);
          vvsqrtf(*((float **)this + 76), *((const float **)this + 73), &v211);
          vDSP_zvneg(&__D, 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
          if ((v131 & 0x80000000) == 0)
          {
            do
            {
              v136 = (v136 - 1);
              v144 = *((_QWORD *)this + 19);
              if (v136 >= (*((_QWORD *)this + 20) - v144) >> 2)
                goto LABEL_181;
              v145 = *(unsigned int *)(v144 + 4 * v136);
              v146 = *((_DWORD *)this + 24);
              v229.realp = (float *)*((_QWORD *)this + 40);
              v229.imagp = &v229.realp[2 * v146];
              memcpy(v229.realp, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * v145) + 24 * v98), 4 * (4 * v146));
              v147 = (2 * *((_DWORD *)this + 24));
              v228.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 148)
                                                             + 24 * (*((_DWORD *)this + 20) + v139))
                                                 + 24 * v145)
                                     + 24 * v98);
              v228.imagp = &v228.realp[v147];
              aDSP_zvmama((float32x4_t *)&__D, 1, (float32x4_t **)&v228, 1, (float32x4_t **)&v229, 1, (float32x4_t **)&v215, 1, (float32x4_t **)&v228, 1, v147);
              vDSP_zrvmul(&v228, 1, *((const float **)this + 76), 1, &v228, 1, (2 * *((_DWORD *)this + 24)));
              if (v131 == v136)
              {
                vDSP_dotpr(*(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 148)+ 24 * (*((_DWORD *)this + 20) + v139))+ 24 * v145)+ 24 * v98), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 148)+ 24 * (*((_DWORD *)this + 20) + v139))+ 24 * v145)+ 24 * v98), 1, (float *)&v226 + 1, (2 * *((_DWORD *)this + 24)));
                *((float *)&v226 + 1) = (float)(1.0 / *((float *)&v226 + 1))
                                      / (float)(2 * *((_DWORD *)this + 24));
                if (*((float *)&v226 + 1) < sqrtf(*((float *)this + 6)))
                  *(_QWORD *)(*((_QWORD *)this + 22) + ((v145 >> 3) & 0x1FFFFFF8)) |= 1 << v145;
              }
              v148 = *((_QWORD *)this + 19);
              if (v131 >= (*((_QWORD *)this + 20) - v148) >> 2)
                goto LABEL_181;
              if (((*(_QWORD *)(*((_QWORD *)this + 22)
                               + (((unint64_t)*(unsigned int *)(v148 + 4 * v131) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v148 + 4 * v131)) & 1) == 0
                || !*((_BYTE *)this + 148))
              {
                memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * v145) + 24 * v98), *((const void **)this + 40), 4 * (4 * *((_DWORD *)this + 24)));
              }
              v132 = (const float *)((char *)this + 16);
            }
            while ((int)v136 > 0);
          }
          v149 = *((_QWORD *)this + 19);
          if (v131 >= (*((_QWORD *)this + 20) - v149) >> 2)
            goto LABEL_181;
          if (((*(_QWORD *)(*((_QWORD *)this + 22)
                           + (((unint64_t)*(unsigned int *)(v149 + 4 * v131) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v149 + 4 * v131)) & 1) == 0
            || !*((_BYTE *)this + 148))
          {
            memcpy(*((void **)this + 64), *((const void **)this + 67), 8 * *((unsigned int *)this + 24));
          }
          ++v131;
          ++v209;
        }
        while (v131 != v99);
        for (n = 0; n != v99; ++n)
        {
          v151 = *((_QWORD *)this + 19);
          if (n >= (*((_QWORD *)this + 20) - v151) >> 2)
            goto LABEL_181;
          v152 = (2 * *((_DWORD *)this + 24));
          v229.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * *(unsigned int *)(v151 + 4 * n))
                                 + 24 * v98);
          v229.imagp = &v229.realp[v152];
          vDSP_zrvmul(&v229, 1, *((const float **)this + 64), 1, &v229, 1, v152);
        }
        vDSP_vmul(*((const float **)this + 52), 1, *((const float **)this + 64), 1, *((float **)this + 64), 1, *((unsigned int *)this + 24));
        vDSP_vmul(*((const float **)this + 52), 1, (const float *)(*((_QWORD *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, (float *)(*((_QWORD *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, *((unsigned int *)this + 24));
        v211 = 2 * *((_DWORD *)this + 24);
        vvsqrtf(*((float **)this + 64), *((const float **)this + 64), &v211);
        vDSP_vmul(*((const float **)this + 64), 1, *((const float **)this + 70), 1, *((float **)this + 70), 1, (2 * *((_DWORD *)this + 24)));
LABEL_141:
        if (*((_BYTE *)this + 130))
        {
          v153 = 0;
          do
          {
            v154 = *((_QWORD *)this + 19);
            if (v153 >= (*((_QWORD *)this + 20) - v154) >> 2)
              goto LABEL_181;
            v155 = (2 * *((_DWORD *)this + 24));
            v229.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * *(unsigned int *)(v154 + 4 * v153))
                                   + 24 * v98);
            v229.imagp = &v229.realp[v155];
            vDSP_zvconj(&v229, 1, &v229, 1, v155);
          }
          while (v99 != ++v153);
        }
        v156 = 0;
        v210 = (float *)(v98 + 1);
        do
        {
          v157 = *((_QWORD *)this + 19);
          if (v156 >= (*((_QWORD *)this + 20) - v157) >> 2)
            goto LABEL_181;
          v158 = *(unsigned int *)(v157 + 4 * v156);
          vDSP_vclr(*((float **)this + 58), 1, (4 * *((_DWORD *)this + 24)));
          v159 = 0;
          v160 = *((unsigned int *)this + 24);
          __D.realp = (float *)*((_QWORD *)this + 58);
          __D.imagp = &__D.realp[(2 * v160)];
          v223.realp = &__D.realp[v160];
          v223.imagp = &__D.realp[(3 * v160)];
          do
          {
            v161 = *((_QWORD *)this + 19);
            if (v159 >= (*((_QWORD *)this + 20) - v161) >> 2)
              goto LABEL_181;
            v162 = 3 * *(unsigned int *)(v161 + 4 * v159);
            v163 = *((unsigned int *)this + 24);
            v224.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 124) + 24 * *(unsigned int *)(v161 + 4 * v159))
                                   + 24 * v98);
            v224.imagp = &v224.realp[v163];
            __A.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 142) + 24 * v158) + 8 * v162) + 24 * v98);
            __A.imagp = &__A.realp[v163];
            vDSP_zvma(&v224, 1, &__A, 1, &__D, 1, &__D, 1, v163);
            v164 = *((unsigned int *)this + 24);
            __C.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 127) + 8 * v162) + 24 * v98);
            __C.imagp = &__C.realp[(2 * v164)];
            v227.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 145) + 24 * v158) + 8 * v162) + 24 * v98);
            v227.imagp = &v227.realp[v164];
            vDSP_zvma(&__C, 1, &v227, 1, &v223, 1, &v223, 1, v164);
            ++v159;
          }
          while (v99 != v159);
          v165 = *((_QWORD *)this + 127);
          v166 = *((unsigned int *)this + 24);
          v230.realp = *(float **)(*(_QWORD *)(v165 + 24 * v158) + 24 * v98);
          v230.imagp = &v230.realp[(2 * v166)];
          __B.realp = *(float **)(*(_QWORD *)(v165 + 24 * v158) + 24 * (_QWORD)v210);
          __B.imagp = &__B.realp[(2 * v166)];
          vDSP_zvadd(&v230, 1, &__D, 1, &__B, 1, v166);
          v167 = *((unsigned int *)this + 24);
          v221.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 124) + 24 * v158) + 24 * v98);
          v221.imagp = &v221.realp[v167];
          v168 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 127) + 24 * v158) + 24 * (_QWORD)v210);
          v222.realp = (float *)(v168 + 4 * v167);
          v222.imagp = (float *)(v168 + 4 * (3 * v167));
          vDSP_zvadd(&v221, 1, &v223, 1, &v222, 1, v167);
          for (ii = 0; ii != v99; ++ii)
          {
            v170 = *((_QWORD *)this + 19);
            if (ii >= (*((_QWORD *)this + 20) - v170) >> 2)
              goto LABEL_181;
            v171 = *(unsigned int *)(v170 + 4 * ii);
            v172 = *((unsigned int *)this + 24);
            __A.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 142) + 24 * v158)
                                              + 24 * v171)
                                  + 24 * v98);
            __A.imagp = &__A.realp[v172];
            v173 = *((_QWORD *)this + 133);
            v174 = (float *)(*(_QWORD *)(*(_QWORD *)(v173 + 24 * v171) + 24 * v98) + 4 * v172);
            v220.realp = *(float **)(*(_QWORD *)(v173 + 24 * v171) + 24 * v98);
            v220.imagp = v174;
            if (*((_BYTE *)this + 130))
              vDSP_zvma(&v220, 1, &__B, 1, &__A, 1, &__A, 1, v172);
            else
              vDSP_zvcma(&v220, 1, &__B, 1, &__A, 1, &__A, 1, v172);
            v175 = *((unsigned int *)this + 24);
            v227.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 145) + 24 * v158)
                                               + 24 * v171)
                                   + 24 * v98);
            v227.imagp = &v227.realp[v175];
            v229.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * v171) + 24 * v98);
            v229.imagp = &v229.realp[(2 * v175)];
            if (*((_BYTE *)this + 130))
              vDSP_zvma(&v229, 1, &v222, 1, &v227, 1, &v227, 1, v175);
            else
              vDSP_zvcma(&v229, 1, &v222, 1, &v227, 1, &v227, 1, v175);
          }
          vDSP_zrvmul(&__B, 1, *(const float **)(*((_QWORD *)this + 82) + 24 * v98), 1, &__B, 1, *((unsigned int *)this + 24));
          vDSP_zrvmul(&v222, 1, *((const float **)this + 64), 1, &v222, 1, *((unsigned int *)this + 24));
          vDSP_zrvmul(&__B, 1, *(const float **)(*((_QWORD *)this + 130) + 24 * v158), 1, &__B, 1, (2 * *((_DWORD *)this + 24)));
          ++v156;
        }
        while (v156 != v99);
        if (v202)
        {
          for (jj = 0; jj != v202; ++jj)
          {
            v177 = 0;
            v178 = *((unsigned int *)this + 24);
            v179 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 118) + 24 * jj) + 24 * (_QWORD)v210) + 4 * v178);
            v217.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 118) + 24 * jj) + 24 * (_QWORD)v210);
            v217.imagp = v179;
            v180 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 115) + 24 * jj) + 24 * (_QWORD)v210) + 4 * v178);
            v218.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 115) + 24 * jj) + 24 * (_QWORD)v210);
            v218.imagp = v180;
            do
            {
              v181 = *((_QWORD *)this + 19);
              if (v177 >= (*((_QWORD *)this + 20) - v181) >> 2)
                goto LABEL_181;
              v182 = 3 * *(unsigned int *)(v181 + 4 * v177);
              v183 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 139) + 24 * jj)
                                           + 24 * *(unsigned int *)(v181 + 4 * v177))
                               + 24 * v98);
              v184 = *((unsigned int *)this + 24);
              v219.realp = v183;
              v219.imagp = &v183[v184];
              v185 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 136) + 8 * v182) + 24 * v98);
              v220.realp = (float *)(v185 + 4 * v184);
              v220.imagp = (float *)(v185 + 4 * (3 * v184));
              if (*((_BYTE *)this + 130))
                vDSP_zvma(&v220, 1, &v217, 1, &v219, 1, &v219, 1, v184);
              else
                vDSP_zvcma(&v220, 1, &v217, 1, &v219, 1, &v219, 1, v184);
              ++v177;
            }
            while (v99 != v177);
            vDSP_zrvmul(&v217, 1, (const float *)(*((_QWORD *)this + 64) + 4 * *((unsigned int *)this + 24)), 1, &v218, 1, *((unsigned int *)this + 24));
          }
        }
        memcpy(*(void **)(*((_QWORD *)this + 82) + 24 * v98), (const void *)(*((_QWORD *)this + 64) + 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
        for (kk = 0; kk != v99; ++kk)
        {
          v187 = *((_QWORD *)this + 19);
          if (kk >= (*((_QWORD *)this + 20) - v187) >> 2)
            goto LABEL_181;
          v188 = 3 * *(unsigned int *)(v187 + 4 * kk);
          memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 124) + 24 * *(unsigned int *)(v187 + 4 * kk)) + 24 * v98), (const void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 127) + 24 * *(unsigned int *)(v187 + 4 * kk))+ 24 * v98)+ 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
          memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 124) + 8 * v188) + 24 * v98)+ 4 * *((unsigned int *)this + 24)), (const void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 127) + 8 * v188) + 24 * v98)+ 4 * (3 * *((_DWORD *)this + 24))), 4 * *((unsigned int *)this + 24));
          memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 133) + 8 * v188) + 24 * v98), (const void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 136) + 8 * v188) + 24 * v98)+ 4 * *((unsigned int *)this + 24)), 4 * *((unsigned int *)this + 24));
          memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 133) + 8 * v188) + 24 * v98)+ 4 * *((unsigned int *)this + 24)), (const void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 136) + 8 * v188) + 24 * v98)+ 4 * (3 * *((_DWORD *)this + 24))), 4 * *((unsigned int *)this + 24));
          vDSP_vclr(*(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 8 * v188) + 24 * v98), 1, (4 * *((_DWORD *)this + 24)));
        }
        ++v98;
        if ((unint64_t)v210 >= *(unsigned int *)this)
        {
LABEL_173:
          if (*((_DWORD *)this + 15))
          {
            v189 = 0;
            v190 = 0;
            v204 = (float *)((char *)this + 392);
            v205 = (_QWORD *)((char *)this + 296);
            v191 = &a6->mBuffers[0].mData;
            v192 = &a5->mBuffers[0].mData;
            v193 = &a8->mBuffers[0].mData;
            do
            {
              v194 = *v193;
              v195 = (float *)*v192;
              v196 = (float *)*v191;
              if (v190 >= v202)
              {
                memcpy(*v193, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 88) + v189)+ 24 * *(int *)(*((_QWORD *)this + 28) + 4 * *((unsigned int *)this + 31))), 4 * *((unsigned int *)this + 18));
                vDSP_vclr(v195, 1, *((unsigned int *)this + 18));
                vDSP_vclr(v196, 1, *((unsigned int *)this + 18));
              }
              else
              {
                v197 = *((unsigned int *)this + 24);
                v198 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 115) + v189) + 24 * *(unsigned int *)this)
                               + 4 * v197);
                v218.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 115) + v189) + 24 * *(unsigned int *)this);
                v218.imagp = v198;
                vDSP_zrvmul(&v218, 1, (const float *)(*((_QWORD *)this + 70) + 4 * v197), 1, &v218, 1, v197);
                vDSP_svesq(**(const float ***)(*((_QWORD *)this + 115) + v189), 1, (float *)&v226, (2 * *((_DWORD *)this + 24)));
                vDSP_svesq(*(const float **)(*(_QWORD *)(*((_QWORD *)this + 115) + v189) + 24 * *(unsigned int *)this), 1, &v225, (2 * *((_DWORD *)this + 24)));
                ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), **(float ***)(*((_QWORD *)this + 115) + v189), v205, (_QWORD *)(*((_QWORD *)this + 97) + v189), (DSPComplex **)v204, v194, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
                ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), *(float **)(*(_QWORD *)(*((_QWORD *)this + 115) + v189) + 24 * *(unsigned int *)this), v205, (_QWORD *)(*((_QWORD *)this + 94) + v189), (DSPComplex **)v204, v195, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
                vDSP_vsub(v195, 1, (const float *)v194, 1, v196, 1, *((unsigned int *)this + 18));
                if (v225 > (float)(*(float *)&v226 * 3.0))
                  memcpy(v195, v194, 4 * *((unsigned int *)this + 18));
              }
              ++v190;
              v189 += 24;
              v191 += 2;
              v192 += 2;
              v193 += 2;
            }
            while (v190 < *((unsigned int *)this + 15));
          }
          return ecSUMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 28);
        }
      }
      if (v109)
        goto LABEL_141;
      v212 = *((_DWORD *)this + 24);
      vvsqrtf(*((float **)this + 52), *((const float **)this + 55), &v212);
      vvsqrtf(*((float **)this + 55), *((const float **)this + 52), &v212);
      vDSP_vthr(*((const float **)this + 55), 1, v203, *((float **)this + 52), 1, *((unsigned int *)this + 24));
      memcpy((void *)(*((_QWORD *)this + 52) + 4 * *((unsigned int *)this + 24)), *((const void **)this + 52), 4 * *((unsigned int *)this + 24));
      HIDWORD(v226) = 1065353216;
      vDSP_vfill((const float *)&v226 + 1, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      v110 = 0;
      v111 = 1;
      do
      {
        v112 = *((_QWORD *)this + 19);
        if (v110 >= (*((_QWORD *)this + 20) - v112) >> 2)
          goto LABEL_181;
        v113 = *(_DWORD *)(v112 + 4 * v110);
        vDSP_vclr(*((float **)this + 58), 1, (4 * *((_DWORD *)this + 24)));
        v114 = 0;
        v115 = 2 * *((_DWORD *)this + 24);
        __D.realp = (float *)*((_QWORD *)this + 58);
        __D.imagp = &__D.realp[v115];
        v116 = (float *)(*((_QWORD *)this + 79) + 4 * v115);
        v215.realp = (float *)*((_QWORD *)this + 79);
        v215.imagp = v116;
        v117 = ~v113;
        do
        {
          v118 = *((_QWORD *)this + 19);
          if (v114 >= (*((_QWORD *)this + 20) - v118) >> 2)
            goto LABEL_181;
          v119 = 3 * *(unsigned int *)(v118 + 4 * v114);
          v120 = *((_DWORD *)this + 24);
          v230.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 127) + 8 * v119) + 24 * v98);
          v230.imagp = &v230.realp[2 * v120];
          v228.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 148)
                                                         + 24 * (*((_DWORD *)this + 20) + v117))
                                             + 8 * v119)
                                 + 24 * v98);
          v228.imagp = &v228.realp[2 * v120];
          vDSP_vsmul(v228.realp, 1, (const float *)this + 4, v228.realp, 1, (4 * v120));
          vDSP_zvcma(&v230, 1, &v228, 1, &__D, 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
          ++v114;
        }
        while (v111 != v114);
        vDSP_zrvdiv(&__D, 1, *((const float **)this + 52), 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
        vDSP_zvabs(&__D, 1, *((float **)this + 61), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_vdist(*((const float **)this + 61), 1, *((const float **)this + 64), 1, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_vthr(*((const float **)this + 73), 1, v203, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_vdiv(*((const float **)this + 73), 1, *((const float **)this + 64), 1, *((float **)this + 76), 1, (2 * *((_DWORD *)this + 24)));
        vDSP_zrvdiv(&__D, 1, *((const float **)this + 73), 1, &v215, 1, (2 * *((_DWORD *)this + 24)));
        memcpy(*((void **)this + 64), *((const void **)this + 73), 8 * *((unsigned int *)this + 24));
        v121 = 0;
        do
        {
          v122 = *((_QWORD *)this + 19);
          if (v121 >= (*((_QWORD *)this + 20) - v122) >> 2)
            goto LABEL_181;
          v123 = 3 * *(unsigned int *)(v122 + 4 * v121);
          memcpy(*((void **)this + 61), *(const void **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * *(unsigned int *)(v122 + 4 * v121)) + 24 * v98), 16 * *((unsigned int *)this + 24));
          v124 = (2 * *((_DWORD *)this + 24));
          v229.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 8 * v123) + 24 * v98);
          v229.imagp = &v229.realp[v124];
          v228.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 148)
                                                         + 24 * (*((_DWORD *)this + 20) + v117))
                                             + 8 * v123)
                                 + 24 * v98);
          v228.imagp = &v228.realp[v124];
          vDSP_zrvmul(&v229, 1, *((const float **)this + 76), 1, &v229, 1, v124);
          vDSP_zvcmul(&v215, 1, &v228, 1, &__D, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvsub(&v229, 1, &__D, 1, &v229, 1, (2 * *((_DWORD *)this + 24)));
          v125 = (2 * *((_DWORD *)this + 24));
          v229.realp = (float *)*((_QWORD *)this + 61);
          v229.imagp = &v229.realp[v125];
          vDSP_zvmul(&v215, 1, &v229, 1, &__D, 1, v125, 1);
          vDSP_zrvmul(&v228, 1, *((const float **)this + 76), 1, &v228, 1, (2 * *((_DWORD *)this + 24)));
          vDSP_zvadd(&__D, 1, &v228, 1, &v228, 1, (2 * *((_DWORD *)this + 24)));
          ++v121;
        }
        while (v111 != v121);
        ++v110;
        ++v111;
      }
      while (v110 != v99);
      vDSP_vthr(*((const float **)this + 64), 1, v203, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      HIDWORD(v226) = 1065353216;
      vDSP_svdiv((const float *)&v226 + 1, *((const float **)this + 64), 1, *((float **)this + 64), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vmul(*((const float **)this + 64), 1, *((const float **)this + 70), 1, *((float **)this + 70), 1, (2 * *((_DWORD *)this + 24)));
      vDSP_vdiv(*((const float **)this + 52), 1, *((const float **)this + 64), 1, *((float **)this + 73), 1, (2 * *((_DWORD *)this + 24)));
      v126 = 0;
      while (1)
      {
        v127 = *((_QWORD *)this + 19);
        if (v126 >= (*((_QWORD *)this + 20) - v127) >> 2)
          break;
        v128 = (2 * *((_DWORD *)this + 24));
        v229.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 136) + 24 * *(unsigned int *)(v127 + 4 * v126))
                               + 24 * v98);
        v229.imagp = &v229.realp[v128];
        vDSP_zrvmul(&v229, 1, *((const float **)this + 73), 1, &v229, 1, v128);
        if (v99 == ++v126)
          goto LABEL_141;
      }
LABEL_181:
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
  }
  else
  {
    v41 = *((_DWORD *)this + 15);
  }
  if (v41)
  {
    v66 = 0;
    v67 = 0;
    v68 = &a6->mBuffers[0].mData;
    v69 = &a5->mBuffers[0].mData;
    v70 = &a8->mBuffers[0].mData;
    do
    {
      v71 = *v70;
      v72 = *v69;
      v208 = (float *)*v68;
      memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 115) + v66) + 24 * *(unsigned int *)this), **(const void ***)(*((_QWORD *)this + 115) + v66), 8 * *((unsigned int *)this + 24));
      ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), **(float ***)(*((_QWORD *)this + 115) + v66), (_QWORD *)this + 37, (_QWORD *)(*((_QWORD *)this + 97) + v66), (DSPComplex **)this + 49, v71, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      ecSUMO::fcn_wola_synthesis_fb((uint64_t)this, *((vDSP_DFT_SetupStruct **)this + 170), *(float **)(*(_QWORD *)(*((_QWORD *)this + 115) + v66) + 24 * *(unsigned int *)this), (_QWORD *)this + 37, (_QWORD *)(*((_QWORD *)this + 94) + v66), (DSPComplex **)this + 49, v72, *((_DWORD *)this + 18), *((_DWORD *)this + 23), *((_DWORD *)this + 14));
      vDSP_vclr(v208, 1, *((unsigned int *)this + 18));
      LODWORD(__A.realp) = 0;
      vDSP_svesq(*(const float **)(*((_QWORD *)this + 106) + v66), 1, (float *)&__A, *((unsigned int *)this + 18));
      if (*(float *)&__A.realp == 0.0)
      {
        vDSP_vclr((float *)v71, 1, *((unsigned int *)this + 18));
        vDSP_vclr((float *)v72, 1, *((unsigned int *)this + 18));
      }
      ++v67;
      v66 += 24;
      v68 += 2;
      v69 += 2;
      v70 += 2;
    }
    while (v67 < *((unsigned int *)this + 15));
  }
  result = ecSUMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 28);
  *((_BYTE *)this + 128) = 0;
  return result;
}

float ecSUMO::fcn_wola_analysis_fb(uint64_t a1, const vDSP_DFT_SetupStruct *a2, _QWORD *a3, _QWORD *a4, float **a5, float **a6, vDSP_Length __N, int a8, int a9)
{
  vDSP_Length v9;
  int v10;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float result;
  uint64_t v23;
  DSPSplitComplex __Z;

  LODWORD(v9) = a8;
  v10 = __N;
  v17 = (a8 + 1);
  v18 = &(*a6)[v17];
  __Z.realp = *a6;
  __Z.imagp = v18;
  vDSP_vclr(*a5, 1, __N);
  vDSP_vclr(*a6, 1, (v10 + 2));
  if (a9)
  {
    v23 = v17;
    v19 = 0;
    v20 = 0;
    v9 = v9;
    do
    {
      v21 = &(*a5)[(v20 << 63 >> 63) & v9];
      vDSP_vma(*(const float **)(*a3 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 224) + 4 * v20++)), 1, *(const float **)(*a4 + v19), 1, v21, 1, v21, 1, v9);
      v19 += 24;
    }
    while (a9 != v20);
    v17 = v23;
  }
  else
  {
    v9 = v9;
  }
  vDSP_ctoz((const DSPComplex *)*a5, 2, &__Z, 1, v9);
  vDSP_DFT_Execute(a2, __Z.realp, __Z.imagp, __Z.realp, __Z.imagp);
  result = (*a6)[v17];
  (*a6)[v9] = result;
  return result;
}

uint64_t ecSUMO::fcn_ring_buffer_fwd(uint64_t result, uint64_t *a2)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_DWORD *)(result + 116);
  v3 = *(_DWORD *)(result + 56);
  if (v2 + 1 == v3)
    v4 = 0;
  else
    v4 = v2 + 1;
  *(_DWORD *)(result + 116) = v4;
  if (v3)
  {
    v5 = 0;
    do
    {
      v6 = *a2;
      v7 = *(_DWORD *)(*a2 + 4 * v5);
      *(_DWORD *)(*a2 + 4 * v5) = v7 + 1;
      if (v7 + 1 == *(_DWORD *)(result + 56))
        v8 = 0;
      else
        v8 = v7 + 1;
      *(_DWORD *)(v6 + 4 * v5++) = v8;
    }
    while (v5 < *(unsigned int *)(result + 56));
  }
  return result;
}

void ecSUMO::fcn_wola_synthesis_fb(uint64_t a1, vDSP_DFT_SetupStruct *__Setup, float *__Or, _QWORD *a4, _QWORD *a5, DSPComplex **a6, void *a7, unsigned int a8, unsigned int a9, int a10)
{
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  DSPSplitComplex __Z;

  v15 = __Or[a9];
  v16 = &__Or[a9 + 1];
  *v16 = v15;
  __Z.realp = __Or;
  __Z.imagp = v16;
  vDSP_DFT_Execute(__Setup, __Or, v16, __Or, v16);
  vDSP_ztoc(&__Z, 1, *a6, 2, a9);
  if (a10)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(unsigned int *)(*(_QWORD *)(a1 + 224) + 4 * v18);
      v20 = *(float **)(*a5 + 24 * v19);
      vDSP_vma((const float *)*a6 + ((v18++ << 63 >> 63) & a9), 1, *(const float **)(*a4 + v17), 1, v20, 1, v20, 1, a9);
      v17 += 24;
    }
    while (a10 != v18);
  }
  else
  {
    v19 = 0;
  }
  memcpy(a7, *(const void **)(*a5 + 24 * v19), 4 * a8);
  vDSP_vclr(*(float **)(*a5 + 24 * v19), 1, a8);
}

void ecMIMO_iQRD::~ecMIMO_iQRD(ecMIMO_iQRD *this)
{
  ecMIMO_iQRD::~ecMIMO_iQRD(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(_QWORD *)this = &off_1E69CDB38;
  v2 = *((_QWORD *)this + 125);
  if (v2)
    MultiRadixFFT_Dispose(v2);
  v20 = (void **)((char *)this + 976);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 952);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 928);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 904);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v3 = (void *)*((_QWORD *)this + 110);
  if (v3)
  {
    *((_QWORD *)this + 111) = v3;
    operator delete(v3);
  }
  v20 = (void **)((char *)this + 856);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 832);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 808);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 784);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 760);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 736);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 712);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 688);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 664);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 640);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 616);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 568);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)((char *)this + 544);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v4 = (void *)*((_QWORD *)this + 65);
  if (v4)
  {
    *((_QWORD *)this + 66) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 62);
  if (v5)
  {
    *((_QWORD *)this + 63) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 59);
  if (v6)
  {
    *((_QWORD *)this + 60) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 56);
  if (v7)
  {
    *((_QWORD *)this + 57) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 53);
  if (v8)
  {
    *((_QWORD *)this + 54) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 50);
  if (v9)
  {
    *((_QWORD *)this + 51) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 47);
  if (v10)
  {
    *((_QWORD *)this + 48) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 44);
  if (v11)
  {
    *((_QWORD *)this + 45) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 41);
  if (v12)
  {
    *((_QWORD *)this + 42) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 38);
  if (v13)
  {
    *((_QWORD *)this + 39) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 35);
  if (v14)
  {
    *((_QWORD *)this + 36) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 32);
  if (v15)
    operator delete(v15);
  v16 = (void *)*((_QWORD *)this + 29);
  if (v16)
    operator delete(v16);
  v17 = (void *)*((_QWORD *)this + 26);
  if (v17)
  {
    *((_QWORD *)this + 27) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 23);
  if (v18)
  {
    *((_QWORD *)this + 24) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 20);
  if (v19)
  {
    *((_QWORD *)this + 21) = v19;
    operator delete(v19);
  }
}

void ecMIMO_iQRD::ec_state_reset(ecMIMO_iQRD *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  std::vector<unsigned int>::size_type v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64x2_t v21;
  uint64x2_t v22;
  float32x2_t v23;
  float v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  uint64x2_t v34;
  float v35;
  float v36;
  int32x2_t v37;
  int64x2_t v38;
  std::vector<unsigned int>::value_type __u;

  if (*((_DWORD *)this + 34))
  {
    v2 = *((unsigned int *)this + 7);
    __u = 0;
    std::vector<float>::assign((char **)this + 20, v2, &__u);
    v3 = *((unsigned int *)this + 7);
    __u = 0;
    std::vector<float>::assign((char **)this + 23, v3, &__u);
    v4 = *((unsigned int *)this + 6);
    __u = 0;
    std::vector<float>::assign((char **)this + 26, v4, &__u);
  }
  v5 = *((unsigned int *)this + 2);
  LOBYTE(__u) = 0;
  std::vector<BOOL>::assign((uint64_t)this + 232, v5, &__u);
  v6 = *((unsigned int *)this + 3);
  LOBYTE(__u) = 0;
  std::vector<BOOL>::assign((uint64_t)this + 256, v6, &__u);
  v7 = *((unsigned int *)this + 3);
  __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 304), v7, &__u);
  v8 = *((unsigned int *)this + 3);
  __u = 0;
  std::vector<float>::assign((char **)this + 41, v8, &__u);
  v9 = *((unsigned int *)this + 2);
  __u = 0;
  std::vector<float>::assign((char **)this + 44, v9, &__u);
  v10 = *((unsigned int *)this + 6);
  __u = 0;
  std::vector<float>::assign((char **)this + 47, v10, &__u);
  v11 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<float>::assign((char **)this + 50, v11, &__u);
  v12 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<float>::assign((char **)this + 53, v12, &__u);
  v13 = *((unsigned int *)this + 7);
  __u = 0;
  std::vector<float>::assign((char **)this + 56, v13, &__u);
  v14 = *((unsigned int *)this + 7);
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 59, v14, &__u);
  v15 = *((unsigned int *)this + 7);
  __u = 1065353216;
  std::vector<float>::assign((char **)this + 62, v15, &__u);
  v16 = *((unsigned int *)this + 6);
  __u = 0;
  std::vector<float>::assign((char **)this + 65, v16, &__u);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 68, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 71, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 74, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 77, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 80, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 83, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 92, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 95, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 784, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  v17 = *((_DWORD *)this + 26);
  if (v17)
  {
    __u = 0;
    std::vector<float>::assign((char **)this + 35, (2 * v17), &__u);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 86, *((_DWORD *)this + 2), *((_DWORD *)this + 26), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 89, *((_DWORD *)this + 2), *((_DWORD *)this + 26), 0.0);
    v18 = (2 * *((_DWORD *)this + 26));
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = *((_QWORD *)this + 35);
      v33 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v18), 0);
      v34 = (uint64x2_t)vdupq_n_s64(v18 - 1);
      v32 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
      v21 = (uint64x2_t)xmmword_1B6626830;
      v31 = vdupq_n_s64(2uLL);
      do
      {
        v38 = (int64x2_t)v21;
        v37 = vmovn_s64((int64x2_t)vcgeq_u64(v34, v21));
        v22.i64[0] = v19;
        v22.i64[1] = (v19 + 1);
        v23 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), v32), v33));
        v35 = v23.f32[0];
        v36 = cosf(v23.f32[1]);
        v24 = cosf(v35);
        if ((v37.i8[0] & 1) != 0)
          *(float *)(v20 + 4 * v19) = (float)(1.0 - v24) * 0.5;
        if ((v37.i8[4] & 1) != 0)
          *(float *)(v20 + 4 * v19 + 4) = (float)(1.0 - v36) * 0.5;
        v19 += 2;
        v21 = (uint64x2_t)vaddq_s64(v38, v31);
      }
      while (v18 != v19);
    }
  }
  if (!*((_BYTE *)this + 108))
  {
    ecutils::fcn_vector_init<float>((uint64_t *)this + 101, *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 104, *((_DWORD *)this + 2), *((_DWORD *)this + 7), *((float *)this + 32));
    ecutils::fcn_vector_init<float>((uint64_t)this + 856, *((_DWORD *)this + 2), *((_DWORD *)this + 2), *((_DWORD *)this + 6), 0.0);
  }
  v25 = *((_DWORD *)this + 29);
  if (v25 == 2)
  {
    ecutils::fcn_vector_init<float>((uint64_t *)this + 116, *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 119, *((_DWORD *)this + 3), *((_DWORD *)this + 7), *((float *)this + 31));
    ecutils::fcn_vector_init<float>((uint64_t)this + 976, *((_DWORD *)this + 3), *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
  }
  else if (v25 == 1)
  {
    v26 = *((unsigned int *)this + 6);
    __u = 1065353216;
    std::vector<float>::assign((char **)this + 110, v26, &__u);
    ecutils::fcn_vector_init<float>((uint64_t)this + 904, *((_DWORD *)this + 3), *((_DWORD *)this + 3), *((_DWORD *)this + 6), 0.0);
    LODWORD(v27) = *((_DWORD *)this + 3);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = 0;
      v30 = -1;
      do
      {
        __u = 1065353216;
        vDSP_vfill((const float *)&__u, *(float **)(*(_QWORD *)(*((_QWORD *)this + 113) + v28) + 24 * (v27 + v30)), 1, *((unsigned int *)this + 7));
        ++v29;
        v27 = *((unsigned int *)this + 3);
        v28 += 24;
        --v30;
      }
      while (v29 < v27);
    }
  }
}

uint64_t ecMIMO_iQRD::ec_init(ecMIMO_iQRD *this, int a2, int a3, int a4, int a5, int a6, float a7, float a8, float a9, float a10, float a11, unsigned int a12, unsigned int a13, float a14, float a15, float a16, BOOL a17, unsigned int a18, unsigned int a19, unsigned int a20,float a21,float a22,float a23)
{
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int32x2_t v47;
  int32x2_t v48;
  unsigned int v49;
  float v50;
  float v51;
  float v52;

  *((_DWORD *)this + 29) = a18;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = a5;
  *((_DWORD *)this + 9) = a6;
  *((float *)this + 15) = __exp10f(a11 / 10.0);
  *((float *)this + 31) = __exp10f(a22 / 10.0);
  *((float *)this + 32) = __exp10f(a23 / 10.0);
  v30 = 0.0;
  v31 = 0.0;
  v32 = 0.0;
  v33 = 0.0;
  if (a7 > 0.0)
  {
    v34 = -(float)((float)*((unsigned int *)this + 9) / (float)*((unsigned int *)this + 4)) / a7;
    v31 = expf(v34);
    v32 = 1.0 - v31;
    v33 = 1.0 / (float)(1.0 - v31);
  }
  *((float *)this + 18) = v31;
  *((float *)this + 19) = v32;
  v35 = 0.0;
  v36 = 0.0;
  v37 = 0.0;
  *((float *)this + 20) = v33;
  v38 = 0.0;
  if (a8 > 0.0)
  {
    v39 = -(float)((float)*((unsigned int *)this + 9) / (float)*((unsigned int *)this + 4)) / a8;
    v30 = expf(v39);
    v35 = 1.0 - v30;
    v36 = 1.0 / (float)(1.0 - v30);
    v37 = sqrtf(v30);
    v38 = 1.0 / v37;
  }
  *((float *)this + 21) = v30;
  *((float *)this + 22) = v35;
  *((float *)this + 23) = v36;
  *((float *)this + 24) = v37;
  *((float *)this + 25) = v38;
  *((_DWORD *)this + 14) = 507307272;
  *((float *)this + 17) = __exp10f(a9 / 10.0);
  *((float *)this + 10) = a10;
  *((_DWORD *)this + 16) = a12;
  v40 = *((_DWORD *)this + 5);
  v41 = *((_DWORD *)this + 9);
  if (v40 < v41)
  {
    *((_DWORD *)this + 5) = v41;
    v40 = v41;
  }
  if (v41 > a12)
    *((_DWORD *)this + 16) = v41;
  if (-858993459 * v40 >= 0x33333334)
    v42 = 1;
  else
    v42 = 5;
  if (-1431655765 * v40 >= 0x55555556)
    v43 = 4;
  else
    v43 = 12;
  v44 = v43 * v42;
  do
  {
    v45 = v44;
    v44 *= 2;
  }
  while (v45 < v40);
  *((_DWORD *)this + 6) = v44;
  *((_DWORD *)this + 7) = v45 | 1;
  *((_DWORD *)this + 8) = v45;
  v46 = v45 - v41;
  if (v46 >= a13)
    v46 = a13;
  *((_DWORD *)this + 26) = v46;
  *((_BYTE *)this + 108) = a17;
  *((float *)this + 28) = 1.0 - (float)(a14 * 0.5);
  *((_DWORD *)this + 30) = a19;
  MultiRadixRealFFT_Create(v44, (MultiRadixRealFFT **)this + 125);
  *(float *)v48.i32 = (float)*((unsigned int *)this + 6);
  *((float *)this + 11) = 1.0 / *(float *)v48.i32;
  *((float *)this + 12) = (float)(1.0 / *(float *)v48.i32) * 0.5;
  *((_DWORD *)this + 13) = 1065353216;
  v49 = *((_DWORD *)this + 2);
  if (v49 >= a20)
    v49 = a20;
  v50 = (float)*((unsigned int *)this + 4);
  *(float *)v48.i32 = v50 / *(float *)v48.i32;
  *(float *)v47.i32 = (float)(*((_DWORD *)this + 8) - 1);
  *((_DWORD *)this + 34) = v49;
  *(uint32x2_t *)((char *)this + 140) = vcvt_u32_f32(vminnm_f32(vcvt_f32_u32(vcvt_u32_f32(vmaxnm_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32((float32x2_t)__PAIR64__(LODWORD(a16), LODWORD(a15)), (float32x2_t)vdup_lane_s32(v48, 0)))), (int32x2_t)-1)), 0))), (float32x2_t)vdup_lane_s32(v47, 0)));
  v51 = 0.0;
  if (a21 > 0.0)
  {
    v52 = -(float)((float)*((unsigned int *)this + 9) / v50) / a21;
    v51 = expf(v52);
  }
  *((float *)this + 37) = v51;
  *((_DWORD *)this + 38) = 0;
  return (*(uint64_t (**)(ecMIMO_iQRD *))(*(_QWORD *)this + 16))(this);
}

uint64_t ecMIMO_iQRD::ec_proc(ecMIMO_iQRD *this, const AudioBufferList *a2, DSPSplitComplex *imagp, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  void **p_mData;
  float *realp;
  uint64_t v16;
  float v17;
  float *v18;
  MultiRadixRealFFT *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  DSPSplitComplex *v42;
  int64x2_t v43;
  vDSP_Length v44;
  uint64_t v45;
  float *v46;
  MultiRadixRealFFT *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t i;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  DSPSplitComplex *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  void **v73;
  float *v74;
  vDSP_Length v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t j;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  float *v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  int64x2_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  DSPSplitComplex *v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  float *v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  DSPSplitComplex *v102;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  float *v107;
  unint64_t v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  float *v117;
  int v118;
  float *v119;
  float *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  DSPSplitComplex *v124;
  int64x2_t v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  DSPSplitComplex *v133;
  uint64_t v134;
  float *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  float *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t k;
  DSPSplitComplex *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float *v153;
  MultiRadixRealFFT *v154;
  float *v155;
  float *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  vDSP_Length v160;
  uint64_t v161;
  unint64_t v162;
  void **v163;
  float **v164;
  float *v165;
  float *v166;
  vDSP_Length v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  float *v172;
  uint64_t v173;
  const void *v174;
  size_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  float *v181;
  MultiRadixRealFFT *v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  vDSP_Length __N;
  char *v188;
  float v189;
  float *v193;
  float *v194;
  unsigned int v195;
  DSPSplitComplex v196;
  int64x2_t v197;
  int64x2_t v198;
  DSPSplitComplex v199;
  int64x2_t v200;
  unint64_t v201;
  DSPSplitComplex v202;
  DSPSplitComplex v203;
  DSPSplitComplex v204;
  int64x2_t v205;
  int64x2_t v206;
  DSPSplitComplex v208;
  int64x2_t v209;
  float *v210;
  DSPSplitComplex v211;
  DSPSplitComplex v212;
  DSPSplitComplex v213;
  DSPSplitComplex v214;
  DSPSplitComplex v215;
  int64x2_t v216;
  int v217;
  float v218;
  DSPSplitComplex v219;
  DSPSplitComplex v220;
  DSPSplitComplex v221;
  DSPSplitComplex v222;
  DSPSplitComplex v223;
  DSPSplitComplex v224;
  DSPSplitComplex v225;
  DSPSplitComplex v226;
  DSPSplitComplex v227;
  DSPSplitComplex v228;
  float v229;
  float v230;
  DSPSplitComplex __C;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  *((_BYTE *)this + 133) = 0;
  v217 = *((_DWORD *)this + 7);
  v218 = 0.0;
  bzero(*((void **)this + 38), 4 * *((unsigned int *)this + 3));
  if (*((_DWORD *)this + 3))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    p_mData = &a7->mBuffers[0].mData;
    ++imagp;
    do
    {
      realp = imagp->realp;
      memmove(*(void **)(*((_QWORD *)this + 68) + v11), (const void *)(*(_QWORD *)(*((_QWORD *)this + 68) + v11) + 4 * *((unsigned int *)this + 9)), 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9)));
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 68) + v11)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), realp, 4 * *((unsigned int *)this + 9));
      memcpy(*p_mData, realp, 4 * *((unsigned int *)this + 9));
      vDSP_svesq(*(const float **)(*((_QWORD *)this + 68) + v11), 1, (float *)(*((_QWORD *)this + 41) + v10), *((unsigned int *)this + 6));
      v16 = *((_QWORD *)this + 41);
      v17 = *(float *)(v16 + 4 * v12) / (float)*((unsigned int *)this + 6);
      *(float *)(v16 + 4 * v12) = v17;
      if ((float)(v17 + *((float *)this + 14)) <= *((float *)this + 15))
      {
        v20 = *((_QWORD *)this + 32);
        v21 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v22 = *(_QWORD *)(v20 + v21) | (1 << v12);
      }
      else
      {
        v18 = (float *)(*(_QWORD *)(*((_QWORD *)this + 92) + v11) + 4 * *((unsigned int *)this + 8));
        v228.realp = *(float **)(*((_QWORD *)this + 92) + v11);
        v228.imagp = v18;
        v19 = (MultiRadixRealFFT *)*((_QWORD *)this + 125);
        if (v19)
          MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v19, *(DSPComplex **)(*((_QWORD *)this + 68) + v11), &v228, 1.0);
        *(_DWORD *)(*((_QWORD *)this + 38) + 4 * v13++) = v12;
        v20 = *((_QWORD *)this + 32);
        v21 = (v12 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v22 = *(_QWORD *)(v20 + v21) & ~(1 << v12);
      }
      *(_QWORD *)(v20 + v21) = v22;
      ++v12;
      v11 += 24;
      v10 += 4;
      p_mData += 2;
      ++imagp;
    }
    while (v12 < *((unsigned int *)this + 3));
  }
  else
  {
    v13 = 0;
  }
  v23 = *((_DWORD *)this + 2);
  if (!v23)
    goto LABEL_57;
  v195 = v13;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = &a2->mBuffers[0].mData;
  do
  {
    v28 = *v27;
    v29 = *((unsigned int *)this + 8);
    v30 = *((_DWORD *)this + 9);
    if ((_DWORD)v29 != v30)
    {
      memmove((void *)(*(_QWORD *)(*((_QWORD *)this + 71) + v24) + 4 * v29), (const void *)(*(_QWORD *)(*((_QWORD *)this + 71) + v24) + 4 * (v30 + v29)), 4 * (v29 - v30));
      LODWORD(v29) = *((_DWORD *)this + 9);
    }
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 71) + v24) + 4 * (*((_DWORD *)this + 6) - v29)), v28, 4 * v29);
    vDSP_svesq((const float *)v28, 1, (float *)(*((_QWORD *)this + 44) + v25), *((unsigned int *)this + 9));
    v31 = *((_QWORD *)this + 29);
    v32 = *(_QWORD *)(v31 + 8 * (v26 >> 6));
    *(_QWORD *)(v31 + 8 * (v26 >> 6)) = v32 & ~(1 << v26);
    if (*(float *)(*((_QWORD *)this + 44) + 4 * v26) == 0.0)
    {
      --v23;
      *(_QWORD *)(v31 + 8 * (v26 >> 6)) = v32 | (1 << v26);
    }
    ++v26;
    v33 = *((unsigned int *)this + 2);
    v25 += 4;
    v24 += 24;
    v27 += 2;
  }
  while (v26 < v33);
  if (!v13 || !v23)
  {
    if ((_DWORD)v33)
    {
      v69 = 0;
      v70 = 0;
      v71 = &a6->mBuffers[0].mData;
      v72 = &a2->mBuffers[0].mData;
      v73 = &a5->mBuffers[0].mData;
      do
      {
        v74 = (float *)*v71;
        memcpy(*v73, *v72, 4 * *((unsigned int *)this + 9));
        vDSP_vclr(v74, 1, *((unsigned int *)this + 9));
        v75 = *((unsigned int *)this + 26);
        if ((_DWORD)v75)
        {
          vDSP_vclr(*(float **)(*((_QWORD *)this + 86) + v69), 1, v75);
          vDSP_vclr(*(float **)(*((_QWORD *)this + 89) + v69), 1, *((unsigned int *)this + 26));
        }
        ++v70;
        v69 += 24;
        v71 += 2;
        v72 += 2;
        v73 += 2;
      }
      while (v70 < *((unsigned int *)this + 2));
    }
LABEL_57:
    *((_BYTE *)this + 132) = 0;
    return 0;
  }
  *((_BYTE *)this + 132) = 1;
  vDSP_vclr(*((float **)this + 56), 1, *((unsigned int *)this + 7));
  v34 = *((unsigned int *)this + 2);
  if ((_DWORD)v34)
  {
    v35 = 0;
    v198 = vdupq_n_s64(4uLL);
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 29) + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
      {
        v36 = 0;
        v37 = (float *)(*((_QWORD *)this + 65) + 4 * *((unsigned int *)this + 8));
        v227.realp = (float *)*((_QWORD *)this + 65);
        v227.imagp = v37;
        imagp = &v227;
        v202 = (DSPSplitComplex)vaddq_s64((int64x2_t)v227, v198);
        v38 = v37;
        v39 = v227.realp;
        do
        {
          v40 = *((_QWORD *)this + 38);
          if (v36 >= (*((_QWORD *)this + 39) - v40) >> 2)
LABEL_151:
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          v41 = 3 * *(unsigned int *)(v40 + 4 * v36);
          v42 = (DSPSplitComplex *)*((unsigned int *)this + 8);
          v228.realp = *(float **)(*((_QWORD *)this + 92) + 8 * v41);
          v228.imagp = &v228.realp[(_QWORD)v42];
          v226.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 98) + 24 * v35) + 8 * v41);
          v226.imagp = &v226.realp[(_QWORD)v42];
          if (v36)
          {
            ecutils::fcn_complex_mult_add((int64x2_t *)&v228, (int64x2_t *)&v226, (int64x2_t *)&v227, (int64x2_t *)&v227, v42);
          }
          else
          {
            v43 = vdupq_n_s64(4uLL);
            v208 = v226;
            __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v226, v43);
            __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v43);
            imagp = &v227;
            __C = v202;
            vDSP_zvmul(&__A, 1, &__B, 1, &__C, 1, ((_DWORD)v42 - 1), 1);
            *v39 = *v228.realp * *v208.realp;
            *v38 = *v228.imagp * *v208.imagp;
          }
          ++v36;
        }
        while (v13 != v36);
        ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 125), &v227, *(DSPComplex **)(*((_QWORD *)this + 74) + 24 * v35), *((unsigned int *)this + 8), *((float *)this + 11));
        v44 = *((unsigned int *)this + 8);
        vDSP_vadd((const float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 24 * v35) + 4 * v44), 1, (const float *)(*(_QWORD *)(*((_QWORD *)this + 71) + 24 * v35) + 4 * v44), 1, (float *)(*(_QWORD *)(*((_QWORD *)this + 77) + 24 * v35) + 4 * v44), 1, v44);
        v45 = *((unsigned int *)this + 8);
        v46 = (float *)(*(_QWORD *)(*((_QWORD *)this + 80) + 24 * v35) + 4 * v45);
        v225.realp = *(float **)(*((_QWORD *)this + 80) + 24 * v35);
        v225.imagp = v46;
        v47 = (MultiRadixRealFFT *)*((_QWORD *)this + 125);
        if (v47)
        {
          MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v47, *(DSPComplex **)(*((_QWORD *)this + 77) + 24 * v35), &v225, 1.0);
          v45 = *((unsigned int *)this + 8);
        }
        v48 = *((_QWORD *)this + 56);
        __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, vdupq_n_s64(4uLL));
        vDSP_zvmgsa(&__A, 1, (const float *)(v48 + 4), 1, (float *)(v48 + 4), 1, (v45 - 1));
        *(float *)v48 = *(float *)v48 + (float)(*v225.realp * *v225.realp);
        *(float *)(v48 + 4 * v45) = *(float *)(v48 + 4 * v45) + (float)(*v225.imagp * *v225.imagp);
        LODWORD(__A.realp) = 0;
        vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 77) + 24 * v35)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__A, *((unsigned int *)this + 9));
        if (*(float *)&__A.realp > *(float *)(*((_QWORD *)this + 44) + 4 * v35))
          *((_BYTE *)this + 133) = 1;
        v34 = *((unsigned int *)this + 2);
      }
      ++v35;
    }
    while (v35 < v34);
  }
  v218 = 1.0 / (float)v23;
  vDSP_vsmsa(*((const float **)this + 56), 1, &v218, (const float *)this + 17, *((float **)this + 56), 1, *((unsigned int *)this + 7));
  if (!*((_BYTE *)this + 108))
  {
    v193 = (float *)((char *)this + 68);
    v49 = *((unsigned int *)this + 2);
    if ((_DWORD)v49)
    {
      v50 = 0;
      for (i = 0; i < v49; ++i)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 29) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          memcpy(*(void **)(*((_QWORD *)this + 101) + v50), *(const void **)(*((_QWORD *)this + 80) + v50), 4 * *((unsigned int *)this + 6));
          v49 = *((unsigned int *)this + 2);
        }
        v50 += 24;
      }
    }
    v218 = 1.0;
    vDSP_vfill(&v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    vDSP_svdiv((const float *)this + 19, *((const float **)this + 56), 1, *((float **)this + 59), 1, *((unsigned int *)this + 7));
    v52 = *((unsigned int *)this + 2);
    if ((_DWORD)v52)
    {
      v53 = 0;
      v54 = 1;
      v209 = vdupq_n_s64(4uLL);
      v55 = 24;
      do
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 29) + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) != 0)
        {
          v56 = v53 + 1;
        }
        else
        {
          v57 = *((unsigned int *)this + 8);
          v225.realp = *(float **)(*((_QWORD *)this + 101) + 24 * v53);
          v225.imagp = &v225.realp[v57];
          v220.realp = (float *)**((_QWORD **)this + 95);
          v220.imagp = &v220.realp[v57];
          v58 = (float *)*((_QWORD *)this + 53);
          __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v209);
          vDSP_zvmags(&__A, 1, v58 + 1, 1, (v57 - 1));
          *v58 = *v225.realp * *v225.realp;
          v58[v57] = *v225.imagp * *v225.imagp;
          vDSP_vmul(*((const float **)this + 59), 1, *((const float **)this + 50), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          v59 = *(float **)(*((_QWORD *)this + 104) + 24 * v53);
          vDSP_vsmul(v59, 1, (const float *)this + 18, v59, 1, *((unsigned int *)this + 7));
          v60 = *(float **)(*((_QWORD *)this + 104) + 24 * v53);
          vDSP_vma(*((const float **)this + 62), 1, *((const float **)this + 53), 1, v60, 1, v60, 1, *((unsigned int *)this + 7));
          v61 = *(float **)(*((_QWORD *)this + 104) + 24 * v53);
          vDSP_vthr(v61, 1, v193, v61, 1, *((unsigned int *)this + 7));
          vDSP_vneg(*((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          vDSP_vdiv(*(const float **)(*((_QWORD *)this + 104) + 24 * v53), 1, *((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          v62 = *((_QWORD *)this + 62);
          v63 = *((unsigned int *)this + 8);
          v199 = v220;
          v203 = (DSPSplitComplex)vaddq_s64((int64x2_t)v220, v209);
          __B = v203;
          __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v209);
          vDSP_zrvmul(&__A, 1, (const float *)(v62 + 4), 1, &__B, 1, (v63 - 1));
          *v199.realp = *v225.realp * *(float *)v62;
          imagp = (DSPSplitComplex *)v199.imagp;
          *v199.imagp = *v225.imagp * *(float *)(v62 + 4 * v63);
          v64 = *((_DWORD *)this + 8);
          __B = v203;
          __A = v203;
          vDSP_zvconj(&__A, 1, &__B, 1, (v64 - 1));
          v218 = 1.0;
          vDSP_vmsa(*((const float **)this + 62), 1, *((const float **)this + 53), 1, &v218, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          vDSP_vmul(*((const float **)this + 50), 1, *((const float **)this + 62), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
          v56 = v53 + 1;
          v52 = *((unsigned int *)this + 2);
          if (v53 + 1 < v52)
          {
            v65 = v55;
            v66 = v54;
            do
            {
              if (((*(_QWORD *)(*((_QWORD *)this + 29) + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v66) & 1) == 0)
              {
                v67 = (DSPSplitComplex *)*((unsigned int *)this + 8);
                v68 = *(_QWORD *)(*((_QWORD *)this + 107) + 24 * v53);
                v224.realp = *(float **)(*((_QWORD *)this + 101) + v65);
                v224.imagp = &v224.realp[(_QWORD)v67];
                v219.realp = *(float **)(v68 + v65);
                v219.imagp = &v219.realp[(_QWORD)v67];
                ecutils::fcn_complex_mult_add_mult_add((int64x2_t *)&v225, (int64x2_t *)&v219, (int64x2_t *)&v224, (int64x2_t *)&v220, (int64x2_t *)&v219, v67);
                v52 = *((unsigned int *)this + 2);
              }
              ++v66;
              v65 += 24;
            }
            while (v66 < v52);
          }
        }
        ++v54;
        v55 += 24;
        v53 = v56;
      }
      while (v56 < v52);
    }
    vDSP_vneg(*((const float **)this + 50), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    v218 = 1.0;
    vDSP_vsadd(*((const float **)this + 50), 1, &v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    vDSP_vmul(*((const float **)this + 56), 1, *((const float **)this + 50), 1, *((float **)this + 56), 1, *((unsigned int *)this + 7));
    v218 = *((float *)this + 20) / (float)v23;
    vDSP_vsmsa(*((const float **)this + 56), 1, &v218, v193, *((float **)this + 56), 1, *((unsigned int *)this + 7));
  }
  if (*((float *)this + 28) != 1.0)
    vvpowsf(*((float **)this + 56), (const float *)this + 28, *((const float **)this + 56), &v217);
  v76 = *((_DWORD *)this + 29);
  if (v76 == 1)
  {
    v108 = 0;
    v109 = (float *)v195;
    do
    {
      v110 = *((_QWORD *)this + 38);
      if (v108 >= (*((_QWORD *)this + 39) - v110) >> 2)
        goto LABEL_151;
      vDSP_vclr(*(float **)(*((_QWORD *)this + 95) + 24 * *(unsigned int *)(v110 + 4 * v108++)), 1, *((unsigned int *)this + 6));
    }
    while (v195 != v108);
    v111 = 1;
    vDSP_svdiv((const float *)this + 22, *((const float **)this + 56), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    v112 = 0;
    v197 = vdupq_n_s64(4uLL);
    v194 = v109;
    do
    {
      v113 = *((_QWORD *)this + 38);
      if (v112 >= (*((_QWORD *)this + 39) - v113) >> 2)
        goto LABEL_151;
      v114 = 0;
      v201 = v112;
      v115 = *(_DWORD *)(v113 + 4 * v112);
      v116 = *((unsigned int *)this + 8);
      v227.realp = (float *)*((_QWORD *)this + 65);
      v227.imagp = &v227.realp[v116];
      v117 = (float *)(*((_QWORD *)this + 110) + 4 * v116);
      v223.realp = (float *)*((_QWORD *)this + 110);
      v223.imagp = v117;
      v118 = ~v115;
      v204 = (DSPSplitComplex)vaddq_s64((int64x2_t)v227, v197);
      v119 = v227.imagp;
      v120 = v227.realp;
      do
      {
        v121 = *((_QWORD *)this + 38);
        if (v114 >= (*((_QWORD *)this + 39) - v121) >> 2)
          goto LABEL_151;
        v122 = 3 * *(unsigned int *)(v121 + 4 * v114);
        v123 = *((unsigned int *)this + 8);
        v228.realp = *(float **)(*((_QWORD *)this + 92) + 8 * v122);
        v228.imagp = &v228.realp[v123];
        v221.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 113)
                                           + 24 * (*((_DWORD *)this + 3) + v118))
                               + 8 * v122);
        v221.imagp = &v221.realp[v123];
        vDSP_vsmul(v221.realp, 1, (const float *)this + 25, v221.realp, 1, *((unsigned int *)this + 6));
        v124 = (DSPSplitComplex *)*((unsigned int *)this + 8);
        if (v114)
        {
          ecutils::fcn_complex_mult_add((int64x2_t *)&v221, (int64x2_t *)&v228, (int64x2_t *)&v227, (int64x2_t *)&v227, v124);
        }
        else
        {
          v212 = v221;
          v125 = vdupq_n_s64(4uLL);
          __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v125);
          __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v221, v125);
          __C = v204;
          vDSP_zvmul(&__A, 1, &__B, 1, &__C, 1, ((_DWORD)v124 - 1), 1);
          *v120 = *v212.realp * *v228.realp;
          *v119 = *v212.imagp * *v228.imagp;
        }
        ++v114;
      }
      while (v111 != v114);
      v218 = 1.0;
      v126 = (float *)*((_QWORD *)this + 62);
      v127 = *((unsigned int *)this + 8);
      __A = v204;
      vDSP_zvmags(&__A, 1, v126 + 1, 1, (v127 - 1));
      *v126 = *v120 * *v120;
      v126[v127] = *v119 * *v119;
      vDSP_vmsa(*((const float **)this + 50), 1, *((const float **)this + 62), 1, &v218, *((float **)this + 62), 1, *((unsigned int *)this + 7));
      vDSP_vdiv(*((const float **)this + 62), 1, *((const float **)this + 50), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
      v128 = *((_QWORD *)this + 50);
      v129 = *((unsigned int *)this + 8);
      v213 = v223;
      __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v223, vdupq_n_s64(4uLL));
      __A = v204;
      vDSP_zrvmul(&__A, 1, (const float *)(v128 + 4), 1, &__B, 1, (v129 - 1));
      *v213.realp = *v120 * *(float *)v128;
      *v213.imagp = *v119 * *(float *)(v128 + 4 * v129);
      vvsqrtf(*((float **)this + 62), *((const float **)this + 62), &v217);
      vDSP_vneg(v120, 1, v120, 1, (*((_DWORD *)this + 8) + 1));
      v130 = 0;
      do
      {
        v131 = *((_QWORD *)this + 38);
        if (v130 >= (*((_QWORD *)this + 39) - v131) >> 2)
          goto LABEL_151;
        v132 = 3 * *(unsigned int *)(v131 + 4 * v130);
        v133 = (DSPSplitComplex *)*((unsigned int *)this + 8);
        v134 = *(_QWORD *)(*((_QWORD *)this + 113) + 24 * (*((_DWORD *)this + 3) + v118));
        v135 = (float *)(*(_QWORD *)(*((_QWORD *)this + 95) + 8 * v132) + 4 * (_QWORD)v133);
        v220.realp = *(float **)(*((_QWORD *)this + 95) + 8 * v132);
        v220.imagp = v135;
        v221.realp = *(float **)(v134 + 8 * v132);
        v221.imagp = &v221.realp[(_QWORD)v133];
        ecutils::fcn_complex_mult_add_mult_add((int64x2_t *)&v227, (int64x2_t *)&v221, (int64x2_t *)&v220, (int64x2_t *)&v223, (int64x2_t *)&v221, v133);
        v136 = *((_QWORD *)this + 62);
        v137 = *((unsigned int *)this + 8);
        v214 = v221;
        __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v221, vdupq_n_s64(4uLL));
        __A = __B;
        vDSP_zrvmul(&__A, 1, (const float *)(v136 + 4), 1, &__B, 1, (v137 - 1));
        *v214.realp = *v214.realp * *(float *)v136;
        *v214.imagp = *v214.imagp * *(float *)(v136 + 4 * v137);
        ++v130;
      }
      while (v111 != v130);
      v112 = v201 + 1;
      ++v111;
    }
    while ((float *)(v201 + 1) != v194);
    vDSP_vsmul(*((const float **)this + 50), 1, (const float *)this + 10, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    v138 = 0;
    v205 = vdupq_n_s64(4uLL);
    do
    {
      v139 = *((_QWORD *)this + 38);
      if (v138 >= (*((_QWORD *)this + 39) - v139) >> 2)
        goto LABEL_151;
      v140 = *((unsigned int *)this + 8);
      v220.realp = *(float **)(*((_QWORD *)this + 95) + 24 * *(unsigned int *)(v139 + 4 * v138));
      v220.imagp = &v220.realp[v140];
      v141 = *((_QWORD *)this + 50);
      v215 = v220;
      __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v220, v205);
      __A = __B;
      vDSP_zrvmul(&__A, 1, (const float *)(v141 + 4), 1, &__B, 1, (v140 - 1));
      *v215.realp = *v215.realp * *(float *)v141;
      *v215.imagp = *v215.imagp * *(float *)(v141 + 4 * v140);
      ++v138;
    }
    while (v194 != (float *)v138);
    vDSP_vmul(*((const float **)this + 56), 1, *((const float **)this + 50), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    v218 = 1.0 - *((float *)this + 10);
    vDSP_vsmsa(*((const float **)this + 50), 1, (const float *)this + 23, &v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
  }
  else if (v76 == 2)
  {
    v77 = *((unsigned int *)this + 3);
    if ((_DWORD)v77)
    {
      v78 = 0;
      for (j = 0; j < v77; ++j)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 32) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
        {
          vDSP_vclr(*(float **)(*((_QWORD *)this + 95) + v78), 1, *((unsigned int *)this + 6));
          memcpy(*(void **)(*((_QWORD *)this + 116) + v78), *(const void **)(*((_QWORD *)this + 92) + v78), 4 * *((unsigned int *)this + 6));
          v77 = *((unsigned int *)this + 3);
        }
        v78 += 24;
      }
    }
    v218 = 1.0;
    vDSP_vfill(&v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    vDSP_svdiv((const float *)this + 22, *((const float **)this + 56), 1, *((float **)this + 59), 1, *((unsigned int *)this + 7));
    LODWORD(v80) = *((_DWORD *)this + 3);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v200 = vdupq_n_s64(4uLL);
      v82 = 24;
      v83 = 1;
      do
      {
        if ((*(_QWORD *)(*((_QWORD *)this + 32) + 8 * (v81 >> 6)) & (1 << v81)) == 0)
        {
          v84 = *((unsigned int *)this + 8);
          v228.realp = *(float **)(*((_QWORD *)this + 116) + 24 * v81);
          v228.imagp = &v228.realp[v84];
          v220.realp = *(float **)(*((_QWORD *)this + 95) + 24 * v81);
          v220.imagp = &v220.realp[v84];
          v210 = v220.imagp;
          v85 = (float *)*((_QWORD *)this + 53);
          __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v200);
          vDSP_zvmags(&__A, 1, v85 + 1, 1, (v84 - 1));
          *v85 = *v228.realp * *v228.realp;
          v85[v84] = *v228.imagp * *v228.imagp;
          vDSP_vmul(*((const float **)this + 59), 1, *((const float **)this + 50), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
          v86 = *(float **)(*((_QWORD *)this + 119) + 24 * v81);
          vDSP_vsmul(v86, 1, (const float *)this + 21, v86, 1, *((unsigned int *)this + 7));
          v87 = *(float **)(*((_QWORD *)this + 119) + 24 * v81);
          vDSP_vma(*((const float **)this + 62), 1, *((const float **)this + 53), 1, v87, 1, v87, 1, *((unsigned int *)this + 7));
          vDSP_meanv(*(const float **)(*((_QWORD *)this + 119) + 24 * v81), 1, &v218, *((unsigned int *)this + 7));
          if (v218 >= 0.00000011921)
          {
            v218 = 0.00000011921;
            vDSP_vthr(*(const float **)(*((_QWORD *)this + 119) + 24 * v81), 1, &v218, *((float **)this + 56), 1, *((unsigned int *)this + 7));
            vDSP_vneg(*((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
            vDSP_vdiv(*((const float **)this + 56), 1, *((const float **)this + 62), 1, *((float **)this + 62), 1, *((unsigned int *)this + 7));
            v88 = *((_QWORD *)this + 62);
            v89 = *((unsigned int *)this + 8);
            v90 = vdupq_n_s64(4uLL);
            v196 = v220;
            v211 = (DSPSplitComplex)vaddq_s64((int64x2_t)v220, v90);
            __B = v211;
            __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v228, v90);
            vDSP_zrvmul(&__A, 1, (const float *)(v88 + 4), 1, &__B, 1, (v89 - 1));
            *v196.realp = *v228.realp * *(float *)v88;
            imagp = (DSPSplitComplex *)v196.imagp;
            *v196.imagp = *v228.imagp * *(float *)(v88 + 4 * v89);
            v91 = *((_DWORD *)this + 8);
            __B = v211;
            __A = v211;
            vDSP_zvconj(&__A, 1, &__B, 1, (v91 - 1));
            v218 = 1.0;
            vDSP_vmsa(*((const float **)this + 62), 1, *((const float **)this + 53), 1, &v218, *((float **)this + 62), 1, *((unsigned int *)this + 7));
            vDSP_vmul(*((const float **)this + 50), 1, *((const float **)this + 62), 1, *((float **)this + 50), 1, *((unsigned int *)this + 7));
            v80 = *((unsigned int *)this + 3);
            if (v81 + 1 < v80)
            {
              v92 = v82;
              v93 = v83;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)this + 32) + ((v93 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v93) & 1) == 0)
                {
                  v94 = (DSPSplitComplex *)*((unsigned int *)this + 8);
                  v95 = *(_QWORD *)(*((_QWORD *)this + 122) + 24 * v81);
                  v223.realp = *(float **)(*((_QWORD *)this + 116) + v92);
                  v223.imagp = &v223.realp[(_QWORD)v94];
                  v221.realp = *(float **)(v95 + v92);
                  v221.imagp = &v221.realp[(_QWORD)v94];
                  ecutils::fcn_complex_mult_add_mult_add((int64x2_t *)&v228, (int64x2_t *)&v221, (int64x2_t *)&v223, (int64x2_t *)&v220, (int64x2_t *)&v221, v94);
                  LODWORD(v80) = *((_DWORD *)this + 3);
                }
                ++v93;
                v92 += 24;
              }
              while (v93 < v80);
            }
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 32) + 8 * (v81 >> 6)) |= 1 << v81;
            LODWORD(v80) = *((_DWORD *)this + 3);
            imagp = (DSPSplitComplex *)v210;
          }
        }
        ++v81;
        ++v83;
        v82 += 24;
      }
      while (v81 < v80);
      v96 = (v80 - 1);
      if ((int)v80 - 1 >= 0)
      {
        v97 = v80 - 2;
        do
        {
          if (((*(_QWORD *)(*((_QWORD *)this + 32) + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
          {
            v98 = (float *)(*(_QWORD *)(*((_QWORD *)this + 95) + 24 * v96) + 4 * *((unsigned int *)this + 8));
            v228.realp = *(float **)(*((_QWORD *)this + 95) + 24 * v96);
            v228.imagp = v98;
            if ((int)v80 - 2 >= 0)
            {
              v99 = 24 * v97;
              v100 = v97;
              v101 = v96;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)this + 32) + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
                {
                  v102 = (DSPSplitComplex *)*((unsigned int *)this + 8);
                  v223.realp = *(float **)(*((_QWORD *)this + 95) + v99);
                  v223.imagp = &v223.realp[(_QWORD)v102];
                  v221.realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 122) + v99) + 24 * v96);
                  v221.imagp = &v221.realp[(_QWORD)v102];
                  ecutils::fcn_complex_mult_add((int64x2_t *)&v228, (int64x2_t *)&v221, (int64x2_t *)&v223, (int64x2_t *)&v223, v102);
                }
                --v100;
                --v101;
                v99 -= 24;
              }
              while (v101 > 0);
            }
          }
          LODWORD(v80) = v96;
          --v97;
        }
        while ((uint64_t)v96-- > 0);
      }
    }
    v218 = 1.0 - *((float *)this + 10);
    vDSP_vsmsa(*((const float **)this + 50), 1, (const float *)this + 10, &v218, *((float **)this + 50), 1, *((unsigned int *)this + 7));
    v104 = *((unsigned int *)this + 3);
    if ((_DWORD)v104)
    {
      v105 = 0;
      v106 = 0;
      v107 = v220.realp;
      do
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 32) + ((v106 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v106) & 1) == 0)
        {
          v107 = *(float **)(*((_QWORD *)this + 95) + v105);
          imagp = (DSPSplitComplex *)&v107[*((unsigned int *)this + 8)];
          vDSP_vsmul(v107, 1, (const float *)this + 10, v107, 1, *((unsigned int *)this + 6));
          v104 = *((unsigned int *)this + 3);
        }
        ++v106;
        v105 += 24;
      }
      while (v106 < v104);
      v220.realp = v107;
      v220.imagp = (float *)imagp;
    }
  }
  v142 = *((unsigned int *)this + 2);
  if ((_DWORD)v142)
  {
    v143 = 0;
    v216 = vdupq_n_s64(4uLL);
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 29) + ((v143 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v143) & 1) == 0)
      {
        v144 = *((unsigned int *)this + 8);
        v145 = (float *)(*(_QWORD *)(*((_QWORD *)this + 80) + 24 * v143) + 4 * v144);
        v225.realp = *(float **)(*((_QWORD *)this + 80) + 24 * v143);
        v225.imagp = v145;
        v146 = *((unsigned int *)this + 3);
        if ((_DWORD)v146)
        {
          v147 = 0;
          for (k = 0; k < v146; ++k)
          {
            if (((*(_QWORD *)(*((_QWORD *)this + 32) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) == 0)
            {
              v149 = (DSPSplitComplex *)*((unsigned int *)this + 8);
              v150 = *(_QWORD *)(*((_QWORD *)this + 98) + 24 * v143);
              v220.realp = *(float **)(*((_QWORD *)this + 95) + v147);
              v220.imagp = &v220.realp[(_QWORD)v149];
              v226.realp = *(float **)(v150 + v147);
              v226.imagp = &v226.realp[(_QWORD)v149];
              ecutils::fcn_complex_mult_add((int64x2_t *)&v220, (int64x2_t *)&v225, (int64x2_t *)&v226, (int64x2_t *)&v226, v149);
              v146 = *((unsigned int *)this + 3);
            }
            v147 += 24;
          }
          v144 = *((unsigned int *)this + 8);
        }
        v151 = *((_QWORD *)this + 50);
        __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v216);
        __A = __B;
        vDSP_zrvmul(&__A, 1, (const float *)(v151 + 4), 1, &__B, 1, (v144 - 1));
        *v225.realp = *v225.realp * *(float *)v151;
        *v225.imagp = *v225.imagp * *(float *)(v151 + 4 * v144);
        if (*((_BYTE *)this + 133) && !*((_DWORD *)this + 30))
        {
          v152 = *((unsigned int *)this + 8);
          v153 = (float *)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v143) + 4 * v152);
          v222.realp = *(float **)(*((_QWORD *)this + 83) + 24 * v143);
          v222.imagp = v153;
          v154 = (MultiRadixRealFFT *)*((_QWORD *)this + 125);
          if (v154)
          {
            MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v154, *(DSPComplex **)(*((_QWORD *)this + 71) + 24 * v143), &v222, 1.0);
            v152 = *((unsigned int *)this + 8);
          }
          v155 = (float *)*((_QWORD *)this + 53);
          v206 = vdupq_n_s64(4uLL);
          __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v206);
          vDSP_zvabs(&__A, 1, v155 + 1, 1, (v152 - 1));
          *v155 = fabsf(*v225.realp);
          v155[v152] = fabsf(*v225.imagp);
          v156 = (float *)*((_QWORD *)this + 56);
          v157 = *((unsigned int *)this + 8);
          __A = (DSPSplitComplex)vaddq_s64((int64x2_t)v222, v206);
          vDSP_zvabs(&__A, 1, v156 + 1, 1, (v157 - 1));
          *v156 = fabsf(*v222.realp);
          v156[v157] = fabsf(*v222.imagp);
          vDSP_vthr(*((const float **)this + 53), 1, (const float *)this + 14, *((float **)this + 53), 1, *((unsigned int *)this + 7));
          vDSP_vthr(*((const float **)this + 56), 1, (const float *)this + 14, *((float **)this + 56), 1, *((unsigned int *)this + 7));
          vDSP_vmin(*((const float **)this + 56), 1, *((const float **)this + 53), 1, *((float **)this + 56), 1, *((unsigned int *)this + 7));
          vDSP_vdiv(*((const float **)this + 53), 1, *((const float **)this + 56), 1, *((float **)this + 56), 1, *((unsigned int *)this + 7));
          v158 = *((_QWORD *)this + 56);
          v159 = *((unsigned int *)this + 8);
          __B = (DSPSplitComplex)vaddq_s64((int64x2_t)v225, v206);
          __A = __B;
          vDSP_zrvmul(&__A, 1, (const float *)(v158 + 4), 1, &__B, 1, (v159 - 1));
          *v225.realp = *v225.realp * *(float *)v158;
          *v225.imagp = *v225.imagp * *(float *)(v158 + 4 * v159);
        }
        ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 125), &v225, *(DSPComplex **)(*((_QWORD *)this + 77) + 24 * v143), *((unsigned int *)this + 8), *((float *)this + 11));
        if (*((_BYTE *)this + 133))
        {
          if (*((_DWORD *)this + 30))
          {
            LODWORD(__A.realp) = 0;
            vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 77) + 24 * v143)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__A, *((unsigned int *)this + 9));
            if (*(float *)&__A.realp > (float)(*(float *)(*((_QWORD *)this + 44) + 4 * v143)
                                              * (float)*((unsigned int *)this + 30)))
              memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 77) + 24 * v143) + 4 * *((unsigned int *)this + 8)), (const void *)(*(_QWORD *)(*((_QWORD *)this + 71) + 24 * v143) + 4 * *((unsigned int *)this + 8)), 4 * *((unsigned int *)this + 8));
          }
        }
        v160 = *((unsigned int *)this + 8);
        vDSP_vsub((const float *)(*(_QWORD *)(*((_QWORD *)this + 77) + 24 * v143) + 4 * v160), 1, (const float *)(*(_QWORD *)(*((_QWORD *)this + 71) + 24 * v143) + 4 * v160), 1, (float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 24 * v143) + 4 * v160), 1, v160);
        v142 = *((unsigned int *)this + 2);
      }
      ++v143;
    }
    while (v143 < v142);
    if (v142)
    {
      v161 = 0;
      v162 = 0;
      v163 = &a6->mBuffers[0].mData;
      v164 = (float **)&a5->mBuffers[0].mData;
      do
      {
        v165 = *v164;
        v166 = (float *)*v163;
        if (((*(_QWORD *)(*((_QWORD *)this + 29) + ((v162 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v162) & 1) != 0)
        {
          vDSP_vclr(*v164, 1, *((unsigned int *)this + 9));
          vDSP_vclr(v166, 1, *((unsigned int *)this + 9));
          v167 = *((unsigned int *)this + 26);
          if ((_DWORD)v167)
          {
            vDSP_vclr(*(float **)(*((_QWORD *)this + 86) + v161), 1, v167);
            vDSP_vclr(*(float **)(*((_QWORD *)this + 89) + v161), 1, *((unsigned int *)this + 26));
          }
        }
        else
        {
          v168 = *((_DWORD *)this + 26);
          v169 = *((_QWORD *)this + 77);
          v170 = *((_DWORD *)this + 6);
          v171 = *((unsigned int *)this + 9);
          if (v168)
          {
            memcpy(*v164, (const void *)(*(_QWORD *)(v169 + v161) + 4 * (v170 - (v168 + v171))), 4 * v171);
            memcpy(v166, (const void *)(*(_QWORD *)(*((_QWORD *)this + 74) + v161)+ 4* (*((_DWORD *)this + 6) - (*((_DWORD *)this + 9) + *((_DWORD *)this + 26)))), 4 * *((unsigned int *)this + 9));
            vDSP_vmma(v165, 1, *((const float **)this + 35), 1, *(const float **)(*((_QWORD *)this + 86) + v161), 1, (const float *)(*((_QWORD *)this + 35) + 4 * *((unsigned int *)this + 26)), 1, v165, 1, *((unsigned int *)this + 26));
            vDSP_vmma(v166, 1, *((const float **)this + 35), 1, *(const float **)(*((_QWORD *)this + 89) + v161), 1, (const float *)(*((_QWORD *)this + 35) + 4 * *((unsigned int *)this + 26)), 1, v166, 1, *((unsigned int *)this + 26));
            memcpy(*(void **)(*((_QWORD *)this + 86) + v161), (const void *)(*(_QWORD *)(*((_QWORD *)this + 77) + v161)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 26))), 4 * *((unsigned int *)this + 26));
            v172 = *(float **)(*((_QWORD *)this + 89) + v161);
            v173 = *((unsigned int *)this + 26);
            v174 = (const void *)(*(_QWORD *)(*((_QWORD *)this + 74) + v161)
                                + 4 * (*((_DWORD *)this + 6) - v173));
            v175 = 4 * v173;
          }
          else
          {
            memcpy(*v164, (const void *)(*(_QWORD *)(v169 + v161) + 4 * (v170 - v171)), 4 * v171);
            v176 = *((unsigned int *)this + 9);
            v174 = (const void *)(*(_QWORD *)(*((_QWORD *)this + 74) + v161)
                                + 4 * (*((_DWORD *)this + 6) - v176));
            v175 = 4 * v176;
            v172 = v166;
          }
          memcpy(v172, v174, v175);
        }
        ++v162;
        v161 += 24;
        v163 += 2;
        v164 += 2;
      }
      while (v162 < *((unsigned int *)this + 2));
    }
  }
  v177 = *((_DWORD *)this + 34);
  if (v177)
  {
    v178 = (v177 - 1);
    v179 = *((_DWORD *)this + 36);
    v180 = *((int *)this + 35);
    if (!*((_BYTE *)this + 133) || *((_DWORD *)this + 30))
    {
      v181 = (float *)(*(_QWORD *)(*((_QWORD *)this + 83) + 24 * v178)
                     + 4 * *((unsigned int *)this + 8));
      __A.realp = *(float **)(*((_QWORD *)this + 83) + 24 * v178);
      __A.imagp = v181;
      v182 = (MultiRadixRealFFT *)*((_QWORD *)this + 125);
      if (v182)
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v182, *(DSPComplex **)(*((_QWORD *)this + 71) + 24 * v178), &__A, 1.0);
    }
    v183 = *(_QWORD *)(*((_QWORD *)this + 83) + 24 * v178);
    v184 = *((_DWORD *)this + 8) + v180;
    __A.realp = (float *)(v183 + 4 * v180);
    __A.imagp = (float *)(v183 + 4 * v184);
    v185 = *(_QWORD *)(*((_QWORD *)this + 80) + 24 * v178);
    __B.realp = (float *)(v185 + 4 * v180);
    __B.imagp = (float *)(v185 + 4 * v184);
    v186 = *((_QWORD *)this + 65);
    __C.realp = (float *)(v186 + 4 * v180);
    __C.imagp = (float *)(v186 + 4 * v184);
    __N = v179 - (int)v180 + 1;
    vDSP_zvsub(&__A, 1, &__B, 1, &__C, 1, __N);
    v189 = *((float *)this + 37);
    v188 = (char *)this + 148;
    v230 = 1.0 - v189;
    vDSP_zvmags(&__A, 1, *(float **)(v188 + 60), 1, __N);
    vDSP_vsmsma(*(const float **)(v188 + 60), 1, &v230, (const float *)(*(_QWORD *)(v188 + 12) + 4 * v180), 1, (const float *)v188, (float *)(*(_QWORD *)(v188 + 12) + 4 * v180), 1, __N);
    vDSP_zvcmul(&__A, 1, &__C, 1, &__C, 1, __N);
    vDSP_zvabs(&__C, 1, *(float **)(v188 + 60), 1, __N);
    vDSP_vsmsma(*(const float **)(v188 + 60), 1, &v230, (const float *)(*(_QWORD *)(v188 + 36) + 4 * v180), 1, (const float *)v188, (float *)(*(_QWORD *)(v188 + 36) + 4 * v180), 1, __N);
    v229 = 2.2204e-16;
    vDSP_vsadd((const float *)(*(_QWORD *)(v188 + 12) + 4 * v180), 1, &v229, *(float **)(v188 + 60), 1, __N);
    vDSP_vdiv(*(const float **)(v188 + 60), 1, (const float *)(*(_QWORD *)(v188 + 36) + 4 * v180), 1, *(float **)(v188 + 60), 1, __N);
    vDSP_meanv(*(const float **)(v188 + 60), 1, (float *)v188 + 1, __N);
    *((float *)v188 + 1) = fmaxf(fminf(*((float *)v188 + 1), 1.0), 0.0);
  }
  return 0;
}

void ecMIMO_iQRD::fcn_ir_output(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v5;
  const float *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  float *v12;
  const vDSP_DFT_SetupStruct ***v13;
  unsigned int v14;
  DSPSplitComplex v15;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = (const float *)(a1 + 44);
    LODWORD(v7) = *(_DWORD *)(a1 + 12);
    do
    {
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = v7 * v5 * *(_DWORD *)(a1 + 64);
        do
        {
          v11 = *(_DWORD *)(a1 + 64);
          v12 = (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 784) + 24 * v5) + v8)
                        + 4 * *(unsigned int *)(a1 + 32));
          v15.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 784) + 24 * v5) + v8);
          v15.imagp = v12;
          v13 = *(const vDSP_DFT_SetupStruct ****)(a1 + 1000);
          if (v13)
          {
            MultiRadixRealFFT::RealOutOfPlaceInverseTransform(v13, &v15, *(DSPComplex **)(a1 + 376));
            v14 = *(_DWORD *)(a1 + 64);
          }
          else
          {
            v14 = v11;
          }
          vDSP_vsmul(*(const float **)(a1 + 376), 1, v6, (float *)(*a2 + 4 * (v11 * v9++ + v10)), 1, v14);
          v7 = *(unsigned int *)(a1 + 12);
          v8 += 24;
        }
        while (v9 < v7);
        v2 = *(unsigned int *)(a1 + 8);
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

void ecMIMO_iQRD::fcn_ir_input(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  MultiRadixRealFFT *v15;
  DSPSplitComplex v16;

  vDSP_vclr(*(float **)(a1 + 376), 1, *(unsigned int *)(a1 + 24));
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_DWORD *)(a1 + 12);
    v7 = v6;
    do
    {
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = v7 * v5 * *(_DWORD *)(a1 + 64);
        do
        {
          v11 = *(unsigned int *)(a1 + 64);
          v12 = v10 + v11 * v9;
          v13 = *a2;
          if (v12 + v11 <= (unint64_t)((a2[1] - *a2) >> 2))
          {
            v16.realp = 0;
            v16.imagp = 0;
            v14 = (float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 784) + 24 * v5) + v8)
                          + 4 * *(unsigned int *)(a1 + 32));
            v16.realp = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 784) + 24 * v5) + v8);
            v16.imagp = v14;
            memcpy(*(void **)(a1 + 376), (const void *)(v13 + 4 * v12), 4 * v11);
            v15 = *(MultiRadixRealFFT **)(a1 + 1000);
            if (v15)
              MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v15, *(DSPComplex **)(a1 + 376), &v16, 1.0);
            v6 = *(_DWORD *)(a1 + 12);
          }
          ++v9;
          v8 += 24;
        }
        while (v9 < v6);
        v4 = *(unsigned int *)(a1 + 8);
        v7 = v6;
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

_DWORD *ecMIMO_iQRD::fcn_tf_output(_DWORD *result, uint64_t *a2)
{
  unint64_t v2;
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = result[3];
    v7 = v6;
    do
    {
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = v7 * v5 * v4[16];
        v11 = *a2;
        do
        {
          v12 = v4[16];
          v13 = v10 + v12 * v9;
          if ((2 * (v13 + v12)) <= (unint64_t)((a2[1] - v11) >> 2))
          {
            memcpy((void *)(v11 + 4 * (2 * v13)), *(const void **)(*(_QWORD *)(*((_QWORD *)v4 + 98) + 24 * v5) + v8), 4 * v12);
            result = memcpy((void *)(*a2 + 4 * (v4[16] + 2 * v13)), (const void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 98) + 24 * v5) + v8)+ 4 * v4[8]), 4 * v4[16]);
            v6 = v4[3];
            v11 = *a2;
          }
          ++v9;
          v8 += 24;
        }
        while (v9 < v6);
        v2 = v4[2];
        v7 = v6;
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

BOOL ecMIMO_iQRD::fcn_isfinite_state(ecMIMO_iQRD *this)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL8 result;
  float __C;

  __C = 0.0;
  if (!*((_DWORD *)this + 2))
    return 1;
  v2 = 0;
  v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(_QWORD *)(*((_QWORD *)this + 74) + v2)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, &__C, *((unsigned int *)this + 9));
    result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
      break;
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 2))
      return 1;
  }
  return result;
}

BOOL ecMIMO_iQRD::fcn_isfinite_output(ecMIMO_iQRD *this)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL8 result;
  float __C;

  __C = 0.0;
  if (!*((_DWORD *)this + 2))
    return 1;
  v2 = 0;
  v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(_QWORD *)(*((_QWORD *)this + 77) + v2)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, &__C, *((unsigned int *)this + 9));
    result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000)
      break;
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 2))
      return 1;
  }
  return result;
}

BOOL ecMIMO_iQRD::fcn_isfinite_ref(ecMIMO_iQRD *this)
{
  unint64_t v1;
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  int v5;

  v1 = *((unsigned int *)this + 3);
  if (!(_DWORD)v1)
    return 1;
  v2 = (_DWORD *)*((_QWORD *)this + 41);
  if ((*v2 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return 0;
  v3 = 0;
  v4 = v2 + 1;
  while (v1 - 1 != v3)
  {
    v5 = v4[v3++] & 0x7FFFFFFF;
    if (v5 >= 2139095040)
      return v3 >= v1;
  }
  v3 = *((unsigned int *)this + 3);
  return v3 >= v1;
}

float ecMIMO_iQRD::fcn_get_erle_internal_db(ecMIMO_iQRD *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t __C;

  __C = 0;
  v3 = 24 * a2;
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 77) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C + 1, *((unsigned int *)this + 9));
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 74) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C, *((unsigned int *)this + 9));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 14)) / (float)(*((float *)this + 14) + *(float *)&__C))
       * 10.0;
}

float ecMIMO_iQRD::fcn_get_erle_external_db(ecMIMO_iQRD *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t __C;

  __C = 0;
  v3 = 24 * a2;
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 77) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C + 1, *((unsigned int *)this + 9));
  vDSP_svesq((const float *)(*(_QWORD *)(*((_QWORD *)this + 71) + v3)+ 4 * (*((_DWORD *)this + 6) - *((_DWORD *)this + 9))), 1, (float *)&__C, *((unsigned int *)this + 9));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 14)) / (float)(*((float *)this + 14) + *(float *)&__C))
       * 10.0;
}

float ecMIMO_iQRD::fcn_get_ref_power_in_db(ecMIMO_iQRD *this, unsigned int a2)
{
  return log10f(*(float *)(*((_QWORD *)this + 41) + 4 * a2) + *((float *)this + 14)) * 10.0;
}

float ecMIMO_iQRD::fcn_get_sxx(ecMIMO_iQRD *this)
{
  unsigned int v1;
  float *v2;
  float v3;
  uint64_t v4;
  float v5;

  v1 = *((_DWORD *)this + 3);
  if (v1)
  {
    v2 = (float *)*((_QWORD *)this + 41);
    v3 = 0.0;
    v4 = *((unsigned int *)this + 3);
    do
    {
      v5 = *v2++;
      v3 = v3 + v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0.0;
  }
  return v3 / (float)v1;
}

float ecMIMO_iQRD::fcn_get_mic_eclee_xcorr(ecMIMO_iQRD *this)
{
  return *((float *)this + 38);
}

uint64_t ecMIMO_iQRD::fcn_isAdapting(ecMIMO_iQRD *this)
{
  return *((unsigned __int8 *)this + 132);
}

_QWORD *std::vector<float *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B627DFE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LoudnessMeter::LoudnessMeter(uint64_t a1, int a2, unsigned int a3, int a4, unsigned int a5)
{
  double *v10;
  unint64_t v11;
  int v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  int v20;
  _DWORD v21[5];
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v21[0] = 0;
  std::vector<float>::vector(__p, a5, v21);
  std::vector<std::vector<float>>::vector((_QWORD *)(a1 + 72), a3, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  std::vector<float *>::vector((_QWORD *)(a1 + 96), a3, __p);
  *(_DWORD *)(a1 + 124) = a4;
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a5;
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)a1, a3, 3uLL);
  *(_DWORD *)(a1 + 120) = a2;
  switch(a2)
  {
    case 0:
      LODWORD(v11) = *(_DWORD *)(a1 + 124);
      DspLib::Biquad::Design::aWeighting((double)v11, __p);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 3, 0, 0x41uLL);
      break;
    case 1:
      LODWORD(v11) = *(_DWORD *)(a1 + 124);
      DspLib::Biquad::Design::cWeighting((double)v11, (uint64_t)__p);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 2, 0, 0x41uLL);
      v20 = 0;
      *(_OWORD *)__p = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 1, 2, 0x41uLL);
      break;
    case 2:
      v12 = 3;
      do
      {
        v20 = 0;
        *(_OWORD *)__p = DspLib::Biquad::kBypassSection;
        DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 1, 0, 0x41uLL);
        --v12;
      }
      while (v12);
      break;
    case 3:
      v25 = 15;
      v26 = 1108869120;
      v27 = 1056964608;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v25, (float)*(unsigned int *)(a1 + 124), 0, v10, (uint64_t)__p);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)__p, 1, 0, 0x41uLL);
      v22 = 12;
      v23 = 0x4080000044D20000;
      v24 = 0;
      DspLib::Biquad::Design::ParametricEQ::design((DspLib::Biquad::Design::ParametricEQ *)&v22, (float)*(unsigned int *)(a1 + 124), 0, v13, (uint64_t)v21);
      DspLib::Biquad::Filter::setCoefficients(a1, (uint64_t)v21, 1, 1, 0x41uLL);
      break;
    default:
      break;
  }
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 48));
  v14 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = 24 * v14;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + v15) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + v16);
      v16 += 24;
      v15 += 8;
    }
    while (v17 != v16);
  }
  return a1;
}

void sub_1B627E29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _QWORD *v14;
  void *v16;

  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(v14 + 6));
  v16 = (void *)v14[3];
  if (v16)
  {
    v14[4] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

float LoudnessMeter::Process(float ***this, float **a2, unsigned int a3)
{
  float **v5;
  vDSP_Length v6;
  unint64_t v7;
  float v8;
  float __C;
  float **v11[3];
  _QWORD v12[3];

  v5 = (float **)*((unsigned int *)this + 32);
  v6 = a3;
  v12[0] = a2;
  v12[1] = v5;
  v12[2] = a3;
  v11[0] = this[12];
  v11[1] = v5;
  v11[2] = (float **)a3;
  DspLib::Biquad::Filter::process(this, (uint64_t)v12, v11);
  __C = 0.0;
  if (*((_DWORD *)this + 32))
  {
    v7 = 0;
    v8 = 0.0;
    do
    {
      vDSP_svesq(this[12][v7], 1, &__C, v6);
      v8 = v8 + __C;
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 32));
  }
  else
  {
    v8 = 0.0;
  }
  return v8 / (float)a3;
}

void AUDCBlocker::~AUDCBlocker(AUDCBlocker *this)
{
  AUDCBlocker::~AUDCBlocker(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E69CDBE0;
  v2 = (void *)*((_QWORD *)this + 74);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 74) = 0;
  }
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 72, 0);
  v3 = *((_QWORD *)this + 71);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 71) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 68);
  if (v4)
  {
    *((_QWORD *)this + 69) = v4;
    operator delete(v4);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUDCBlocker::Initialize(AUDCBlocker *this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  IIRFilterFloat32 *v6;
  IIRFilterFloat32 *v7;
  uint64_t v8;
  AudioStreamBasicDescription v10;
  AudioStreamBasicDescription v11;

  Element = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0);
  v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v11.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v11.mBytesPerPacket = v3;
  *(_QWORD *)&v11.mBitsPerChannel = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 128), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v10.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v10.mBytesPerPacket = v5;
  *(_QWORD *)&v10.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  if (v11.mSampleRate != v10.mSampleRate
    || v11.mFormatID != v10.mFormatID
    || *(_QWORD *)&v11.mBytesPerPacket != *(_QWORD *)&v10.mBytesPerPacket
    || *(_QWORD *)&v11.mChannelsPerFrame != *(_QWORD *)&v10.mChannelsPerFrame
    || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v11, &v10, 0, 0))
  {
    return 4294956428;
  }
  v6 = NewIIRFilter(&v11, &v10, (const CAStreamBasicDescription *)1);
  v7 = (IIRFilterFloat32 *)*((_QWORD *)this + 71);
  if (v7 != v6)
  {
    if (v7)
      (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v7 + 8))(v7);
    *((_QWORD *)this + 71) = v6;
  }
  if (!v6)
    return 4294956428;
  (*(void (**)(AUDCBlocker *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  *((_DWORD *)this + 135) = 1;
  v8 = operator new();
  *(_DWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 72, v8);
  ausdk::AUBufferList::Allocate(*((ausdk::AUBufferList **)this + 72), &v11, *((_DWORD *)this + 84));
  CADeprecated::CAAutoFree<float>::alloc((void **)this + 74, *((unsigned int *)this + 84), 0);
  return 0;
}

_QWORD *AUDCBlocker::Cleanup(AUDCBlocker *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 71);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 71) = 0;
  }
  return CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set((_QWORD *)this + 72, 0);
}

uint64_t AUDCBlocker::Reset(AUDCBlocker *this)
{
  uint64_t v2;
  float64_t v3;

  v2 = *((_QWORD *)this + 71);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    *((_DWORD *)this + 135) = 1;
    v3 = AUDCBlocker::SetCoefficients(this, (float64x2_t **)this + 68);
    (*(void (**)(_QWORD, uint64_t, _QWORD, float64_t))(**((_QWORD **)this + 71) + 16))(*((_QWORD *)this + 71), 1, *((_QWORD *)this + 68), v3);
  }
  return 0;
}

uint64_t AUDCBlocker::GetPropertyInfo(AUDCBlocker *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUDCBlocker::GetProperty(AUDCBlocker *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a5 = *((_DWORD *)this + 134);
  }
  return result;
}

uint64_t AUDCBlocker::SetProperty(AUDCBlocker *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_DWORD *)this + 134) = *a5;
    *((_DWORD *)this + 135) = 1;
  }
  return result;
}

uint64_t AUDCBlocker::SetParameter(AUDCBlocker *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 132);
  return 0;
}

uint64_t AUDCBlocker::CanScheduleParameters(AUDCBlocker *this)
{
  return 0;
}

uint64_t AUDCBlocker::ProcessBufferLists(AUDCBlocker *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  int v9;
  float64_t v10;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  float Parameter;
  float v20;
  ausdk::AUBufferList *v21;
  const AudioStreamBasicDescription *Element;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  unint64_t v29;
  void **p_mData;
  float *v31;
  float __B;
  float __C;

  v9 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v9)
  {
    v10 = AUDCBlocker::SetCoefficients(this, (float64x2_t **)this + 68);
    (*(void (**)(_QWORD, uint64_t, _QWORD, float64_t))(**((_QWORD **)this + 71) + 16))(*((_QWORD *)this + 71), 1, *((_QWORD *)this + 68), v10);
    *((_DWORD *)this + 133) = v9;
  }
  if (*((_DWORD *)this + 134))
    goto LABEL_4;
  v12 = (_DWORD *)*((_QWORD *)this + 71);
  if (!v12[4])
    goto LABEL_4;
  if (*((_DWORD *)this + 135))
  {
    if (a3->mNumberBuffers)
    {
      v13 = 0;
      v14 = 16;
      while (1)
      {
        __C = 0.0;
        vDSP_svemg(*(const float **)((char *)&a3->mNumberBuffers + v14), 1, &__C, __N);
        v15 = __C;
        if (__C != 0.0)
          break;
        ++v13;
        v14 += 16;
        if (v13 >= a3->mNumberBuffers)
          goto LABEL_4;
      }
      *((_DWORD *)this + 135) = 0;
      v16 = *((_QWORD *)this + 9);
      if (v16)
      {
        v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)v16 + 32))(v16, 0, v15);
      }
      else
      {
        v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v18)
          v17 = 0;
        else
          v17 = *v18;
      }
      Parameter = ausdk::AUElement::GetParameter(v17, 1u);
      if (Parameter == 0.0)
      {
        *((_DWORD *)this + 146) = 1065353216;
        v20 = 0.0;
      }
      else
      {
        *((_DWORD *)this + 146) = 0;
        v20 = 1.0
            / (*(double *)(ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0) + 80)
             * Parameter
             * 0.001);
      }
      *((float *)this + 147) = v20;
      v21 = (ausdk::AUBufferList *)*((_QWORD *)this + 72);
      Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0);
      v23 = (unsigned int *)ausdk::AUBufferList::PrepareBuffer(v21, Element + 2, __N);
      v24 = v23;
      if (a3->mNumberBuffers && *v23)
      {
        v25 = 1;
        v26 = 4;
        do
        {
          __C = 0.0;
          vDSP_meanv(*(const float **)((char *)&a3->mNumberBuffers + v26 * 4), 1, &__C, __N);
          v27 = *(float **)((char *)&a3->mNumberBuffers + v26 * 4);
          __B = 0.0;
          __B = (float)(__C - *v27) / (float)__N;
          vDSP_vramp(&__C, &__B, *(float **)&v24[v26], 1, __N);
          if (v25 >= a3->mNumberBuffers)
            break;
          v26 += 4;
        }
        while (v25++ < *v24);
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 71) + 24))(*((_QWORD *)this + 71));
      (*(void (**)(_QWORD, vDSP_Length, unsigned int *, unsigned int *))(**((_QWORD **)this + 71) + 32))(*((_QWORD *)this + 71), __N, v24, v24);
      v12 = (_DWORD *)*((_QWORD *)this + 71);
      goto LABEL_28;
    }
LABEL_4:
    CopyBufferList(&a3->mNumberBuffers, a4);
    return 0;
  }
LABEL_28:
  (*(void (**)(_DWORD *, vDSP_Length, const AudioBufferList *, AudioBufferList *))(*(_QWORD *)v12 + 32))(v12, __N, a3, a4);
  if (*((float *)this + 146) < 1.0)
  {
    __B = 1.0;
    __C = 0.0;
    vDSP_vramp((const float *)this + 146, (const float *)this + 147, *((float **)this + 74), 1, __N);
    vDSP_vclip(*((const float **)this + 74), 1, &__C, &__B, *((float **)this + 74), 1, __N);
    if (a3->mNumberBuffers)
    {
      v29 = 0;
      p_mData = &a4->mBuffers[0].mData;
      do
      {
        v31 = (float *)*p_mData;
        p_mData += 2;
        vDSP_vmul(v31, 1, *((const float **)this + 74), 1, v31, 1, __N);
        ++v29;
      }
      while (v29 < a3->mNumberBuffers);
    }
    *((_DWORD *)this + 146) = *(_DWORD *)(*((_QWORD *)this + 74) + 4 * (__N - 1));
  }
  return 0;
}

uint64_t AUDCBlocker::Render(AUDCBlocker *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;
  unsigned int v15;

  v8 = (AUDCBlocker *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUDCBlocker *)((char *)this + 128), 0);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUDCBlocker *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUDCBlocker::GetParameterList(AUDCBlocker *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_QWORD *)a3 = 0x100000000;
    a3[2] = 2;
  }
  result = 0;
  *a4 = 3;
  return result;
}

uint64_t AUDCBlocker::GetParameterInfo(AUDCBlocker *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;

  buffer->flags = 0;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 2)
  {
    v6 = off_1E69CDE20[a3];
    v7 = dword_1B664AC84[a3];
    v8 = flt_1B664AC90[a3];
    v9 = flt_1B664AC9C[a3];
    v10 = flt_1B664ACA8[a3];
    buffer->cfNameString = v6;
    buffer->flags = 0x8000000;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= 0xC0000000;
  }
  return result;
}

uint64_t AUDCBlocker::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 132);
  return result;
}

double AUDCBlocker::GetLatency(AUDCBlocker *this)
{
  return 0.0;
}

double AUDCBlocker::GetTailTime(AUDCBlocker *this)
{
  return 0.05;
}

uint64_t AUDCBlocker::SupportsTail(AUDCBlocker *this)
{
  return 1;
}

BOOL AUDCBlocker::StreamFormatWritable(AUDCBlocker *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDCBlocker::SupportedNumChannels(AUDCBlocker *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDCBlocker::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

float64_t AUDCBlocker::SetCoefficients(_QWORD *a1, float64x2_t **a2)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  double v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  float v12;
  float64x2_t *v13;
  float64x2_t *v14;
  double v15;
  float64_t result;

  v4 = a1[9];
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, 2u);
  v8 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 16), 0) + 80);
  v9 = a1[9];
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  v12 = ausdk::AUElement::GetParameter(v10, 0) * 6.28318531 / v8;
  v13 = *a2;
  if (v12 <= 0.0)
  {
    v13->f64[0] = 0.0;
    v13->f64[1] = 0.0;
    v13[1].f64[1] = 0.0;
    v13[2].f64[0] = 0.0;
    v13[1].f64[0] = 1.0;
  }
  else
  {
    BiquadCoefficients::SetPriv((BiquadCoefficients *)v13, 2, fmin(v12, 3.11017673), 0.707106781, 0.0);
  }
  v14 = *a2;
  v15 = __exp10(Parameter * 0.05);
  v14[1] = vmulq_n_f64(v14[1], v15);
  result = v14[2].f64[0] * v15;
  v14[2].f64[0] = result;
  return result;
}

unsigned int *CopyBufferList(unsigned int *result, _DWORD *a2)
{
  unint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;

  v2 = *result;
  if (v2 == *a2 && v2 != 0)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v5[v6 + 3];
      if ((_DWORD)v8 == a2[v6 + 3])
      {
        result = (unsigned int *)memcpy(*(void **)&a2[v6 + 4], *(const void **)&v5[v6 + 4], v8);
        v2 = *v5;
      }
      ++v7;
      v6 += 4;
    }
    while (v7 < v2);
  }
  return result;
}

{
  unint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int *v9;

  v2 = *result;
  if (v2 == *a2 && v2 != 0)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v5[v6 + 3];
      if ((_DWORD)v8 == a2[v6 + 3])
      {
        v9 = *(unsigned int **)&v5[v6 + 4];
        result = *(unsigned int **)&a2[v6 + 4];
        if (v9 != result)
        {
          result = (unsigned int *)memcpy(result, v9, v8);
          v2 = *v5;
        }
      }
      ++v7;
      v6 += 4;
    }
    while (v7 < v2);
  }
  return result;
}

_QWORD *CADeprecated::CAAutoDelete<ausdk::AUBufferList>::set(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *result;
  if (*result != a2)
  {
    v4 = result;
    if (v2)
    {
      v5 = *(_QWORD **)(v2 + 8);
      if (v5)
      {
        ((void (*)(int, _QWORD *))ausdk::BufferAllocator::instance(void)::global[3])((int)&ausdk::BufferAllocator::instance(void)::global, v5);
        *(_QWORD *)(v2 + 8) = 0;
      }
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)v2 = 0;
      result = (_QWORD *)MEMORY[0x1BCC95CEC](v2, 0x1020C409F4E64B8);
    }
    *v4 = a2;
  }
  return result;
}

void std::vector<BiquadCoefficients>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[40 * a2];
  }
  else
  {
    v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      v22 = &v4[40 * v7];
      do
      {
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 3) = 0;
        *((_QWORD *)v4 + 4) = 0;
        *((_QWORD *)v4 + 2) = 0x3FF0000000000000;
        v4 += 40;
      }
      while (v4 != v22);
      a1[1] = v22;
    }
    else
    {
      if (a2 > 0x666666666666666)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x333333333333333)
        v11 = 0x666666666666666;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(v11);
      v14 = &v12[40 * v6];
      v15 = &v12[40 * a2];
      v16 = v14;
      do
      {
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 3) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *((_QWORD *)v16 + 2) = 0x3FF0000000000000;
        v16 += 40;
      }
      while (v16 != v15);
      v17 = &v12[40 * v13];
      v19 = (char *)*a1;
      v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          v20 = *(_OWORD *)(v18 - 40);
          v21 = *(_OWORD *)(v18 - 24);
          *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
          *(_OWORD *)(v14 - 24) = v21;
          *(_OWORD *)(v14 - 40) = v20;
          v14 -= 40;
          v18 -= 40;
        }
        while (v18 != v19);
        v18 = (char *)*a1;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v17;
      if (v18)
        operator delete(v18);
    }
  }
}

void ECApplicator::ECApplicator(ECApplicator *this, VoiceProcessorV4 *a2, int a3, int a4)
{
  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = a3;
  *((_BYTE *)this + 12) = 1;
  *((_DWORD *)this + 16) = 2;
  *((_DWORD *)this + 17) = a4;
  if ((*(unsigned int (**)(VoiceProcessorV4 *))(*(_QWORD *)a2 + 112))(a2) == 6)
  {
    *((_OWORD *)this + 1) = xmmword_1B66A13E0;
    *((_OWORD *)this + 2) = xmmword_1B66A13F0;
  }
  (*(void (**)(VoiceProcessorV4 *))(*(_QWORD *)a2 + 112))(a2);
  *((_OWORD *)this + 1) = xmmword_1B66A13E0;
  *((_OWORD *)this + 2) = xmmword_1B66A13F0;
  *((_QWORD *)this + 6) = operator new[]();
  *((_QWORD *)this + 7) = operator new[]();
}

void ECApplicator::~ECApplicator(ECApplicator *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x1BCC95CC8](v2, 0x20C8093837F09);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x1BCC95CC8](v3, 0x20C8093837F09);
}

uint64_t ECApplicator::setInputOutputABLs(uint64_t this, AudioBufferList **a2, AudioBufferList ***a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  AudioBufferList **v9;

  v3 = *(unsigned int *)(this + 64);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      *(_QWORD *)(*(_QWORD *)(this + 48) + v4) = a2[v4 / 8];
      v4 += 8;
    }
    while (v5 != v4);
  }
  v6 = *(unsigned int *)(this + 68);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 8 * v6;
    do
    {
      v9 = a3[v7 / 8];
      if (v9)
        v9 = (AudioBufferList **)*v9;
      *(_QWORD *)(*(_QWORD *)(this + 56) + v7) = v9;
      v7 += 8;
    }
    while (v8 != v7);
  }
  return this;
}

uint64_t ECApplicator::apply(AudioUnitParameterID *this, AudioTimeStamp *a2, unsigned int a3, BOOL *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  _QWORD *v16;
  float v17;
  unsigned int v18;
  _QWORD *v19;
  OpaqueAudioComponentInstance *v20;
  OpaqueAudioComponentInstance *v21;
  AudioUnitRenderActionFlags ioActionFlags;
  AudioUnitParameterValue outValue;
  AudioUnitParameterValue inValue;

  *a4 = 1;
  ioActionFlags = 512;
  v16 = *(_QWORD **)this;
  if (*(_BYTE *)(v16[176] + a3))
    v17 = 1.0;
  else
    v17 = 0.0;
  v18 = (*(uint64_t (**)(_QWORD *))(*v16 + 112))(v16);
  v19 = *(_QWORD **)this;
  if (v18 >= 6 && !*((_BYTE *)v19 + 2244))
  {
    if ((v19[1104] & 1) != 0 && (v19[1105] & 1) != 0)
    {
      v20 = (OpaqueAudioComponentInstance *)v19[437];
      if (v20)
      {
        outValue = 0.0;
        if (!AudioUnitGetParameter(v20, 0x65637232u, 0, 0, &outValue))
          AudioUnitSetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), 0x30u, 0, 0, outValue, 0);
      }
    }
    v19 = *(_QWORD **)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 8832) & 1) != 0 && (v19[1105] & 1) != 0)
    {
      v21 = (OpaqueAudioComponentInstance *)v19[437];
      if (v21)
      {
        inValue = 0.0;
        if (!AudioUnitGetParameter(v21, 0x65637233u, 0, 0, &inValue))
          AudioUnitSetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), 0x31u, 0, 0, inValue, 0);
        v19 = *(_QWORD **)this;
      }
    }
  }
  AudioUnitSetParameter((AudioUnit)v19[this[2] + 347], this[4], 0, 0, v17, 0);
  AudioUnitSetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[5], 0, 0, *(AudioUnitParameterValue *)(*(_QWORD *)this + 4368), 0);
  AudioUnitProcessMultiple(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), &ioActionFlags, a2, *(_DWORD *)(*(_QWORD *)this + 508), this[16], *((const AudioBufferList ***)this + 6), this[17], *((AudioBufferList ***)this + 7));
  if (*((_BYTE *)this + 12))
    memcpy(*(void **)(**((_QWORD **)this + 6) + 16), *(const void **)(**((_QWORD **)this + 7) + 16), 4 * *(unsigned int *)(*(_QWORD *)this + 508));
  AudioUnitGetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[6], 0, 0, a5);
  AudioUnitGetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[7], 0, 0, a6);
  AudioUnitGetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[8], 0, 0, a7);
  AudioUnitGetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[9], 0, 0, a8);
  AudioUnitGetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[10], 0, 0, a9);
  return AudioUnitGetParameter(*(AudioUnit *)(*(_QWORD *)this + 8 * this[2] + 2776), this[11], 0, 0, a10);
}

void StartVPWirelessChargingMatStateListener()
{
  dispatch_queue_t v0;
  void *v1;
  void *v2;
  _QWORD handler[4];
  id v4;

  if (!gNotifyDispatchQueue)
  {
    v0 = dispatch_queue_create("vpWirelessChargingNotificationQueue", 0);
    v1 = (void *)gNotifyDispatchQueue;
    gNotifyDispatchQueue = (uint64_t)v0;

    if (!gNotifyDispatchQueue)
      __assert_rtn("StartVPWirelessChargingMatStateListener", "vpWirelessCharging.mm", 48, "gNotifyDispatchQueue != nil");
    atomic_store(__StartVPWirelessChargingMatStateListener_block_invoke(), gWirelessChargingMatIsAttached);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __StartVPWirelessChargingMatStateListener_block_invoke_6;
    handler[3] = &unk_1E69CDE80;
    v4 = &__block_literal_global_5044;
    if (notify_register_dispatch("com.apple.system.powersources.source", &gNotifyToken, (dispatch_queue_t)gNotifyDispatchQueue, handler))
    {
      v2 = (void *)gNotifyDispatchQueue;
      gNotifyDispatchQueue = 0;

      gNotifyToken = 0;
      atomic_store(0, gWirelessChargingMatIsAttached);
    }

  }
}

void sub_1B627F5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B627F7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void StopVPWirelessChargingMatStateListener()
{
  void *v0;

  if (!notify_cancel(gNotifyToken))
  {
    v0 = (void *)gNotifyDispatchQueue;
    gNotifyDispatchQueue = 0;

    gNotifyToken = 0;
  }
}

void AURotationShading::~AURotationShading(AURotationShading *this)
{
  AURotationShading::~AURotationShading(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69CDEB0;
  AURotationShading::Cleanup(this);
  v2 = (void *)*((_QWORD *)this + 71);
  if (v2)
  {
    *((_QWORD *)this + 72) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 68);
  if (v3)
  {
    *((_QWORD *)this + 69) = v3;
    operator delete(v3);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AURotationShading::Initialize(AURotationShading *this)
{
  uint64_t Element;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;
  BOOL v10;
  _BOOL4 v11;
  BOOL v14;
  char i;
  char v16;
  IIRFilterFloat32 *v17;
  IIRFilterFloat32 *v18;
  IIRFilterFloat32 **v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  IIRFilterFloat32 **v28;
  char *v29;
  char *v30;
  IIRFilterFloat32 *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  AudioStreamBasicDescription v36;

  Element = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 80), 0);
  v3 = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0);
  v4 = *(_DWORD *)(Element + 108);
  v5 = *(_DWORD *)(v3 + 108);
  v6 = v4 == 1 && v5 == 1;
  if (v6
    || ((v4 - 1) <= 1 ? (v7 = v5 == 2) : (v7 = 0),
        v7
     || (v4 == 4 ? (v8 = v5 == 2) : (v8 = 0),
         !v8 ? (v9 = 0) : (v9 = 1),
         v5 == 4 ? (v10 = v4 == 1) : (v10 = 0),
         v5 == 4 ? (v11 = v4 == 2) : (v11 = 0),
         v10 || (v9 & 1) != 0 || v11)))
  {
    v14 = v4 == 4 && v5 == 2;
    *((_BYTE *)this + 606) = v14;
    for (i = 1; ; i = 0)
    {
      v16 = i;
      v36.mSampleRate = *(Float64 *)(Element + 80);
      *(_OWORD *)&v36.mFormatID = xmmword_1B6626900;
      *(_OWORD *)&v36.mBytesPerFrame = xmmword_1B6626910;
      v17 = NewIIRFilter(&v36, &v36, (const CAStreamBasicDescription *)1);
      if (!v17)
        break;
      v18 = v17;
      v19 = (IIRFilterFloat32 **)*((_QWORD *)this + 72);
      v20 = *((_QWORD *)this + 73);
      if ((unint64_t)v19 >= v20)
      {
        v22 = *((_QWORD *)this + 71);
        v23 = ((uint64_t)v19 - v22) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v24 = v20 - v22;
        v25 = v24 >> 2;
        if (v24 >> 2 <= (unint64_t)(v23 + 1))
          v25 = v23 + 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v26);
        else
          v27 = 0;
        v28 = (IIRFilterFloat32 **)(v26 + 8 * v23);
        *v28 = v18;
        v21 = v28 + 1;
        v29 = (char *)*((_QWORD *)this + 72);
        v30 = (char *)*((_QWORD *)this + 71);
        if (v29 != v30)
        {
          do
          {
            v31 = (IIRFilterFloat32 *)*((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = (char *)*((_QWORD *)this + 71);
        }
        *((_QWORD *)this + 71) = v28;
        *((_QWORD *)this + 72) = v21;
        *((_QWORD *)this + 73) = v26 + 8 * v27;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v19 = v17;
        v21 = v19 + 1;
      }
      *((_QWORD *)this + 72) = v21;
      if ((v16 & 1) == 0)
      {
        if (*(_DWORD *)(Element + 108))
        {
          v32 = 0;
          v33 = (char *)this + 608;
          do
          {
            v34 = *(_QWORD *)&v33[8 * v32];
            if (v34)
              MEMORY[0x1BCC95CC8](v34, 0x1000C8052888210);
            *(_QWORD *)&v33[8 * v32++] = operator new[]();
          }
          while (v32 < *(unsigned int *)(Element + 108));
        }
        v35 = *((_QWORD *)this + 80);
        if (v35)
          MEMORY[0x1BCC95CC8](v35, 0x1000C8052888210);
        *((_QWORD *)this + 80) = operator new[]();
        *((_BYTE *)this + 605) = 0;
        (*(void (**)(AURotationShading *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
        return 0;
      }
    }
  }
  return 4294956428;
}

uint64_t AURotationShading::Cleanup(AURotationShading *this)
{
  char *v2;
  char *i;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;

  v2 = (char *)*((_QWORD *)this + 72);
  for (i = (char *)*((_QWORD *)this + 71); v2 != i; i = (char *)*((_QWORD *)this + 71))
  {
    v4 = *(_QWORD *)i;
    v5 = v2 - (i + 8);
    if (v2 != i + 8)
      memmove(i, i + 8, v2 - (i + 8));
    v2 = &i[v5];
    *((_QWORD *)this + 72) = &i[v5];
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v2 = (char *)*((_QWORD *)this + 72);
    }
  }
  v6 = 0;
  v7 = (char *)this + 608;
  do
  {
    v8 = *(_QWORD *)&v7[v6];
    if (v8)
    {
      MEMORY[0x1BCC95CC8](v8, 0x1000C8052888210);
      *(_QWORD *)&v7[v6] = 0;
    }
    v6 += 8;
  }
  while (v6 != 32);
  result = *((_QWORD *)this + 80);
  if (result)
  {
    result = MEMORY[0x1BCC95CC8](result, 0x1000C8052888210);
    *((_QWORD *)this + 80) = 0;
  }
  return result;
}

uint64_t AURotationShading::Reset(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  AURotationShading::UpdateState((AURotationShading *)this);
  v2 = this[71];
  v3 = this[72];
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  return 0;
}

uint64_t AURotationShading::GetPropertyInfo(AURotationShading *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 64002 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AURotationShading::GetProperty(AURotationShading *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  char *v6;

  if (a3)
    return 4294956417;
  if (a2 == 64002)
  {
    v6 = (char *)this + 600;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (char *)this + 592;
  }
  result = 0;
  *a5 = *(_DWORD *)v6;
  return result;
}

uint64_t AURotationShading::SetProperty(AURotationShading *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 64002)
  {
    result = 0;
    *((_DWORD *)this + 150) = *a5;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_DWORD *)this + 148) = *a5;
  }
  return result;
}

uint64_t AURotationShading::SetParameter(AURotationShading *this, unsigned int a2, int a3, double a4)
{
  uint64_t result;
  uint64_t v7;
  ausdk::AUElement *v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  ausdk::AUElement **v12;
  char *v13;
  int v14;
  int v15;

  if (a3)
    return 4294956418;
  if (a2)
  {
    v7 = *((_QWORD *)this + 9);
    if (v7)
    {
      v14 = LODWORD(a4);
      v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
      LODWORD(a4) = v14;
    }
    else
    {
      v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v11)
        v8 = 0;
      else
        v8 = *v11;
    }
    ausdk::AUElement::SetParameter(v8, a2, *(float *)&a4, 0);
    v13 = (char *)this + 528;
  }
  else
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), (float32x4_t)xmmword_1B66A1400))) & 1) == 0)return 0;
    AURotationShading::mOrientationCachedPrevious = *(float *)&a4;
    v9 = *((_QWORD *)this + 9);
    if (v9)
    {
      v15 = LODWORD(a4);
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
      LODWORD(a4) = v15;
    }
    else
    {
      v12 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v12)
        v10 = 0;
      else
        v10 = *v12;
    }
    ausdk::AUElement::SetParameter(v10, 0, *(float *)&a4, 0);
    v13 = (char *)this + 536;
  }
  result = 0;
  ++*(_DWORD *)v13;
  return result;
}

uint64_t AURotationShading::CanScheduleParameters(AURotationShading *this)
{
  return 0;
}

uint64_t AURotationShading::ProcessMultipleBufferLists(AURotationShading *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v10;
  int v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  UInt32 mNumberBuffers;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UInt32 v29;
  UInt32 v30;
  unsigned int HardwareChannelFromOrientation;
  void *mData;
  int BottomChannelFromOrientation;
  uint64_t v34;
  int v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  unint64_t v39;
  uint64_t v40;
  UInt32 v41;
  uint64_t v42;
  UInt32 v43;
  UInt32 v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  UInt32 v51;
  AudioBufferList v52;
  AudioBufferList v53;
  unsigned int __C;
  int v55;
  int v56;
  uint64_t v57;

  v10 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v10)
  {
    AURotationShading::UpdateState(this);
    *((_DWORD *)this + 133) = v10;
  }
  if (!*((_BYTE *)this + 605))
  {
    v11 = *((_DWORD *)this + 134);
    if (*((_DWORD *)this + 135) != v11)
    {
      v12 = *((_QWORD *)this + 9);
      if (v12)
      {
        v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
      }
      else
      {
        v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v14)
          v13 = 0;
        else
          v13 = *v14;
      }
      *((_DWORD *)this + 149) = ausdk::AUElement::GetParameter(v13, 0);
      *((_DWORD *)this + 135) = v11;
    }
  }
  *((_BYTE *)this + 605) = 1;
  v15 = (uint64_t)*a5;
  mNumberBuffers = (*a5)->mNumberBuffers;
  v51 = (*a7)->mNumberBuffers;
  if (mNumberBuffers)
  {
    v17 = 0;
    v18 = 16;
    do
    {
      memcpy(*((void **)this + v17++ + 76), *(const void **)(v15 + v18), 4 * a3);
      v15 = (uint64_t)*a5;
      v19 = (*a5)->mNumberBuffers;
      v18 += 16;
    }
    while (v17 < v19);
  }
  else
  {
    LODWORD(v19) = 0;
  }
  if (*((_DWORD *)this + 150) == 2)
  {
    v20 = (uint64_t)*a7;
    LODWORD(v21) = (*a7)->mNumberBuffers;
    if (v21 >= 2)
    {
      v22 = 0;
      v25 = 16;
      do
      {
        v53.mNumberBuffers = 1;
        v53.mBuffers[0].mNumberChannels = 1;
        v53.mBuffers[0].mDataByteSize = 4 * a3;
        __C = 1;
        v55 = 1;
        v56 = 4 * a3;
        v57 = *((_QWORD *)this + 76);
        v53.mBuffers[0].mData = *(void **)(v20 + v25);
        CopyBufferList(&__C, &v53);
        ++v22;
        v20 = (uint64_t)*a7;
        v21 = (*a7)->mNumberBuffers;
        v25 += 16;
      }
      while (v22 < v21 >> 1);
    }
    else
    {
      LODWORD(v22) = 0;
    }
    if ((v21 & 1) != 0 && (*a5)->mNumberBuffers >= 2)
    {
      __C = 1060439283;
      vDSP_vasm(*((const float **)this + 76), 1, *((const float **)this + 77), 1, (const float *)&__C, *(float **)(v20 + 16 * v22 + 16), 1, a3);
      v20 = (uint64_t)*a7;
      LODWORD(v21) = (*a7)->mNumberBuffers;
      LODWORD(v22) = v22 + 1;
    }
    if (v22 < v21)
    {
      v26 = v22;
      v27 = 16 * v22 + 16;
      do
      {
        v53.mNumberBuffers = 1;
        v53.mBuffers[0].mNumberChannels = 1;
        v53.mBuffers[0].mDataByteSize = 4 * a3;
        __C = 1;
        v55 = 1;
        v56 = 4 * a3;
        v57 = *((_QWORD *)this + ((*a5)->mNumberBuffers > 1) + 76);
        v53.mBuffers[0].mData = *(void **)(v20 + v27);
        CopyBufferList(&__C, &v53);
        ++v26;
        v20 = (uint64_t)*a7;
        v27 += 16;
      }
      while (v26 < (*a7)->mNumberBuffers);
    }
    return 0;
  }
  if (!*((_BYTE *)this + 606))
  {
    if (!(_DWORD)v19)
      goto LABEL_49;
    v28 = 0;
    v29 = (*a7)->mNumberBuffers;
    while (!v29)
    {
LABEL_48:
      if (++v28 >= (unint64_t)v19)
        goto LABEL_49;
    }
    v30 = 0;
    while (1)
    {
      v53.mNumberBuffers = 1;
      v53.mBuffers[0].mNumberChannels = 1;
      v53.mBuffers[0].mDataByteSize = 4 * a3;
      __C = 1;
      v55 = 1;
      v56 = 4 * a3;
      v57 = *((_QWORD *)this + v28 + 76);
      HardwareChannelFromOrientation = AURotationShading::GetHardwareChannelFromOrientation(this, v30 + v28);
      mData = (*a7)->mBuffers[HardwareChannelFromOrientation].mData;
      v53.mBuffers[0].mData = mData;
      if (*((_DWORD *)this + 150))
      {
        if ((*((_DWORD *)this + 149) - 3) > 1)
        {
          if (HardwareChannelFromOrientation >= 2)
          {
LABEL_40:
            bzero(mData, v53.mBuffers[0].mDataByteSize);
            goto LABEL_43;
          }
        }
        else if ((HardwareChannelFromOrientation & 0xFFFFFFFD) != 0)
        {
          goto LABEL_40;
        }
      }
      CopyBufferList(&__C, &v53);
LABEL_43:
      BottomChannelFromOrientation = AURotationShading::GetBottomChannelFromOrientation(this, HardwareChannelFromOrientation);
      if (BottomChannelFromOrientation && mNumberBuffers != v51 && !*((_DWORD *)this + 150))
      {
        v34 = *(_QWORD *)(*((_QWORD *)this + 71) + 8 * (BottomChannelFromOrientation - 1));
        (*(void (**)(uint64_t, uint64_t, AudioBufferList *, AudioBufferList *))(*(_QWORD *)v34 + 32))(v34, a3, &v53, &v53);
      }
      LODWORD(v19) = (*a5)->mNumberBuffers;
      v30 += v19;
      v29 = (*a7)->mNumberBuffers;
      if (v30 >= v29)
        goto LABEL_48;
    }
  }
  if ((*a7)->mNumberBuffers)
  {
    v23 = 0;
    v24 = 16;
    do
    {
      v53.mNumberBuffers = 1;
      v53.mBuffers[0].mNumberChannels = 1;
      v53.mBuffers[0].mDataByteSize = 4 * a3;
      __C = 1;
      v55 = 1;
      v56 = 4 * a3;
      v57 = *((_QWORD *)this + AURotationShading::GetHardwareChannelFromOrientation(this, v23) + 76);
      AURotationShading::GetHardwareChannelFromOrientation(this, v23);
      v53.mBuffers[0].mData = *(void **)((char *)&(*a7)->mNumberBuffers + v24);
      CopyBufferList(&__C, &v53);
      ++v23;
      v24 += 16;
    }
    while (v23 < (*a7)->mNumberBuffers);
  }
LABEL_49:
  v35 = *((_DWORD *)this + 134);
  if (*((_DWORD *)this + 135) == v35)
    return 0;
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  *((_DWORD *)this + 149) = ausdk::AUElement::GetParameter(v37, 0);
  *((_DWORD *)this + 135) = v35;
  (*(void (**)(AURotationShading *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  if (!*((_BYTE *)this + 606))
  {
    v41 = (*a5)->mNumberBuffers;
    if (!v41)
      return 0;
    v42 = 0;
    v43 = (*a7)->mNumberBuffers;
    while (!v43)
    {
LABEL_75:
      if (++v42 >= (unint64_t)v41)
        return 0;
    }
    v44 = 0;
    while (1)
    {
      v52.mNumberBuffers = 1;
      v52.mBuffers[0].mNumberChannels = 1;
      v52.mBuffers[0].mDataByteSize = 4 * a3;
      v53.mNumberBuffers = 1;
      v53.mBuffers[0].mNumberChannels = 1;
      v53.mBuffers[0].mDataByteSize = 4 * a3;
      __C = 1;
      v55 = 1;
      v56 = 4 * a3;
      v57 = *((_QWORD *)this + v42 + 76);
      v52.mBuffers[0].mData = (void *)*((_QWORD *)this + 80);
      v45 = AURotationShading::GetHardwareChannelFromOrientation(this, v44 + v42);
      v46 = v45;
      v53.mBuffers[0].mData = (*a7)->mBuffers[v45].mData;
      if (*((_DWORD *)this + 150))
      {
        if ((*((_DWORD *)this + 149) - 3) > 1)
        {
          if (v45 >= 2)
          {
LABEL_67:
            bzero(v52.mBuffers[0].mData, v52.mBuffers[0].mDataByteSize);
            goto LABEL_70;
          }
        }
        else if ((v45 & 0xFFFFFFFD) != 0)
        {
          goto LABEL_67;
        }
      }
      CopyBufferList(&__C, &v52);
LABEL_70:
      v47 = AURotationShading::GetBottomChannelFromOrientation(this, v46);
      if (v47 && mNumberBuffers != v51 && !*((_DWORD *)this + 150))
      {
        v48 = *(_QWORD *)(*((_QWORD *)this + 71) + 8 * (v47 - 1));
        (*(void (**)(uint64_t, uint64_t, AudioBufferList *, AudioBufferList *))(*(_QWORD *)v48 + 32))(v48, a3, &v52, &v52);
      }
      FadeBufferLists(&v52.mNumberBuffers, &v53, a3);
      v41 = (*a5)->mNumberBuffers;
      v44 += v41;
      v43 = (*a7)->mNumberBuffers;
      if (v44 >= v43)
        goto LABEL_75;
    }
  }
  if ((*a7)->mNumberBuffers)
  {
    v39 = 0;
    v40 = 16;
    do
    {
      v52.mNumberBuffers = 1;
      v52.mBuffers[0].mNumberChannels = 1;
      v52.mBuffers[0].mDataByteSize = 4 * a3;
      v53.mNumberBuffers = 1;
      v53.mBuffers[0].mNumberChannels = 1;
      v53.mBuffers[0].mDataByteSize = 4 * a3;
      __C = 1;
      v55 = 1;
      v56 = 4 * a3;
      v57 = *((_QWORD *)this + AURotationShading::GetHardwareChannelFromOrientation(this, v39) + 76);
      v52.mBuffers[0].mData = (void *)*((_QWORD *)this + 80);
      CopyBufferList(&__C, &v52);
      v53.mBuffers[0].mData = *(void **)((char *)&(*a7)->mNumberBuffers + v40);
      FadeBufferLists(&v52.mNumberBuffers, &v53, a3);
      ++v39;
      v40 += 16;
    }
    while (v39 < (*a7)->mNumberBuffers);
  }
  return 0;
}

uint64_t AURotationShading::Render(AURotationShading *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t BufferList;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = (AURotationShading *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AURotationShading *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AURotationShading::GetParameterList(AURotationShading *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 0;
    result = 4294956418;
  }
  else
  {
    result = 0;
    if (a3)
      *(_OWORD *)a3 = xmmword_1B6626920;
    v4 = 4;
  }
  *a4 = v4;
  return result;
}

uint64_t AURotationShading::GetParameterInfo(AURotationShading *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;

  if (a2)
    return 4294956418;
  buffer->flags = 0;
  buffer->unitName = 0;
  if (a3 > 3)
    return 4294956418;
  v6 = off_1E69CE0F0[a3];
  v7 = dword_1B66A2AE0[a3];
  v8 = flt_1B66A2AF0[a3];
  v9 = flt_1B66A2B00[a3];
  v10 = flt_1B66A2B10[a3];
  buffer->cfNameString = v6;
  buffer->flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v7;
  buffer->minValue = v8;
  buffer->maxValue = v9;
  buffer->defaultValue = v10;
  buffer->flags |= 0xC0000000;
  return result;
}

uint64_t AURotationShading::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
  {
    (*((void (**)(OpaqueAudioComponentInstance **, _QWORD, _QWORD, _QWORD, _QWORD, float))*this + 19))(this, 0, 0, 0, 0, (float)AURotationShading::mOrientationCachedPrevious);
    ++*((_DWORD *)this + 132);
  }
  return v3;
}

uint64_t AURotationShading::GetParameterValueStrings(AURotationShading *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  void *values[5];

  values[4] = *(void **)MEMORY[0x1E0C80C00];
  if (a3 | a2)
    return 4294956418;
  if (!a4)
    return 0;
  values[0] = CFSTR("Portrait");
  values[1] = CFSTR("Portrait Upside Down");
  values[2] = CFSTR("Landscape Left");
  values[3] = CFSTR("Landscape Right");
  v6 = CFArrayCreate(0, (const void **)values, 4, 0);
  result = 0;
  *a4 = v6;
  return result;
}

double AURotationShading::GetLatency(AURotationShading *this)
{
  return 0.0;
}

double AURotationShading::GetTailTime(AURotationShading *this)
{
  return 0.05;
}

uint64_t AURotationShading::SupportsTail(AURotationShading *this)
{
  return 1;
}

BOOL AURotationShading::StreamFormatWritable(AURotationShading *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AURotationShading::SupportedNumChannels(AURotationShading *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AURotationShading::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 6;
}

uint64_t AURotationShading::ChangeStreamFormat(AURotationShading *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  double mSampleRate;

  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  mSampleRate = a4->mSampleRate;
  if (a4->mSampleRate != a5->mSampleRate)
  {
    ++*((_DWORD *)this + 132);
    (*(void (**)(AURotationShading *, uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)this + 432))(this, 3, 0, 0, mSampleRate);
  }
  return 0;
}

void AURotationShading::UpdateState(AURotationShading *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  unint64_t v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  double Parameter;
  float v12;
  uint64_t v13;
  BiquadCoefficients *v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  float64x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((_BYTE *)this + 604) = ausdk::AUElement::GetParameter(v3, 1u) != 0.0;
  if (*((_QWORD *)this + 72) == *((_QWORD *)this + 71))
    return;
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = *(double *)(ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0) + 80);
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
    }
    else
    {
      v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v10)
        v9 = 0;
      else
        v9 = *v10;
    }
    Parameter = ausdk::AUElement::GetParameter(v9, v6 + 1);
    if (v7 * 0.49 >= Parameter && *((_BYTE *)this + 604))
    {
      v12 = Parameter * 6.28318531 / v7;
      v13 = *((_QWORD *)this + 68);
      v14 = (BiquadCoefficients *)(v13 + 40 * v5);
      if (v12 > 0.0)
      {
        BiquadCoefficients::SetPriv(v14, 1, fmin(v12, 3.11017673), 0.707106781, 0.0);
        goto LABEL_19;
      }
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      v15 = (_QWORD *)(v13 + 40 * v5);
    }
    else
    {
      v15 = (_QWORD *)(*((_QWORD *)this + 68) + 40 * v5);
      *v15 = 0;
      v15[1] = 0;
    }
    v15[3] = 0;
    v15[4] = 0;
    v15[2] = 0x3FF0000000000000;
LABEL_19:
    v16 = *((_QWORD *)this + 68);
    v17 = __exp10(0.0);
    v18 = (float64x2_t *)(v16 + 40 * v5);
    v18[1] = vmulq_n_f64(v18[1], v17);
    v18[2].f64[0] = v18[2].f64[0] * v17;
    v5 = v6;
    v19 = *((_QWORD *)this + 72);
    v20 = *((_QWORD *)this + 71);
    ++v6;
  }
  while (v5 < (v19 - v20) >> 3);
  if (v19 != v20)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v20 + 8 * v21) + 16))(*(_QWORD *)(v20 + 8 * v21), 1, *((_QWORD *)this + 68) + 40 * v21);
      v21 = v22;
      v20 = *((_QWORD *)this + 71);
      ++v22;
    }
    while (v21 < (*((_QWORD *)this + 72) - v20) >> 3);
  }
}

uint64_t AURotationShading::GetHardwareChannelFromOrientation(AURotationShading *this, uint64_t a2)
{
  ausdk::AUScope *v4;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int *v10;

  v4 = (AURotationShading *)((char *)this + 128);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0) + 108) != 1
    && !*((_DWORD *)this + 148))
  {
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v4, 0) + 108) != 2)
    {
      v9 = *((_DWORD *)this + 149);
      switch(v9)
      {
        case 2:
          v10 = (unsigned int *)&unk_1B664AD10;
          break;
        case 4:
          v10 = (unsigned int *)&unk_1B66A2AA0;
          break;
        case 3:
          v10 = (unsigned int *)&unk_1B66A2A90;
          break;
        default:
          return a2;
      }
      return v10[a2];
    }
    v6 = *((_DWORD *)this + 149);
    if (*((_BYTE *)this + 606))
    {
      v7 = 2 * ((_DWORD)a2 != 0);
      v8 = 2 * ((_DWORD)a2 == 0);
      if (v6 != 3)
        v8 = a2;
      if (v6 != 4)
        v7 = v8;
      if (v6 == 2)
        return (_DWORD)a2 == 0;
      else
        return v7;
    }
    else if ((v6 & 0xFFFFFFFE) == 2)
    {
      return (_DWORD)a2 == 0;
    }
    else
    {
      return a2;
    }
  }
  return a2;
}

uint64_t AURotationShading::GetBottomChannelFromOrientation(AURotationShading *this, int a2)
{
  ausdk::AUScope *v4;
  uint64_t Element;
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (AURotationShading *)((char *)this + 128);
  Element = ausdk::AUScope::SafeGetElement((AURotationShading *)((char *)this + 128), 0);
  result = 0;
  if (*(_DWORD *)(Element + 108) != 1)
  {
    if (*((_DWORD *)this + 148))
    {
      return 0;
    }
    else
    {
      v7 = ausdk::AUScope::SafeGetElement(v4, 0);
      v8 = *((_DWORD *)this + 149);
      if (*(_DWORD *)(v7 + 108) == 2)
      {
        if (v8 == 2)
          return (a2 + 1);
        else
          return 0;
      }
      else
      {
        v9 = v8 - 2;
        if (v9 > 2)
          v10 = (unsigned int *)&unk_1B66A2AD0;
        else
          v10 = (unsigned int *)*(&off_1E69CE110 + v9);
        return v10[a2];
      }
    }
  }
  return result;
}

void AULinearEchoCancelerV3::~AULinearEchoCancelerV3(void ***this)
{
  AULinearEchoCancelerV3::~AULinearEchoCancelerV3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  *this = (void **)&off_1E69CE138;
  if (this[86])
  {
    aec_v3::aec_remove(this + 86);
    this[86] = 0;
  }
  v2 = this[93];
  if (v2)
  {
    v3 = this[94];
    if (v3 != v2)
      this[94] = (void **)((char *)v3 + (((char *)v2 - (char *)v3 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    operator delete(v2);
    this[93] = 0;
    this[94] = 0;
  }
  v4 = this[91];
  if (v4)
  {
    v5 = this[92];
    if (v5 != v4)
      this[92] = (void **)((char *)v5 + (((char *)v4 - (char *)v5 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    operator delete(v4);
    this[91] = 0;
    this[92] = 0;
  }
  v6 = this[89];
  if (v6)
  {
    v7 = this[90];
    if (v7 != v6)
      this[90] = (void **)((char *)v7 + (((char *)v6 - (char *)v7 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    operator delete(v6);
    this[89] = 0;
    this[90] = 0;
  }
  v8 = this[87];
  if (v8)
  {
    v9 = this[88];
    if (v9 != v8)
      this[88] = (void **)((char *)v9 + (((char *)v8 - (char *)v9 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    operator delete(v8);
    this[87] = 0;
    this[88] = 0;
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t AULinearEchoCancelerV3::Initialize(AULinearEchoCancelerV3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t Element;
  unsigned int v8;
  uint64_t v9;
  double v10;

  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if (v3 >= 2)
  {
    v6 = 1;
    do
    {
      Element = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), v6)+ 80))return 4294956428;
    }
    while ((_DWORD)v3 != ++v6);
  }
  if (v5 >= 2)
  {
    v8 = 1;
    do
    {
      v9 = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), v8 - 1);
      if (*(double *)(v9 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), v8)+ 80))return 4294956428;
    }
    while ((_DWORD)v5 != ++v8);
  }
  v10 = *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), 0) + 80);
  if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), 0) + 80))
    return 4294956428;
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  *(_OWORD *)((char *)this + 664) = 0u;
  *((int32x2_t *)this + 85) = vdup_n_s32(0xC2C80000);
  return AULinearEchoCancelerV3::InitializeEC(this);
}

void AULinearEchoCancelerV3::Cleanup(void ***this)
{
  _QWORD *v1;

  if (this[86])
  {
    v1 = this + 86;
    aec_v3::aec_remove(this + 86);
    *v1 = 0;
  }
}

uint64_t AULinearEchoCancelerV3::Reset(AULinearEchoCancelerV3 *this)
{
  return 0;
}

uint64_t AULinearEchoCancelerV3::GetPropertyInfo(AULinearEchoCancelerV3 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AULinearEchoCancelerV3::GetProperty(AULinearEchoCancelerV3 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    v7 = (*(uint64_t (**)(AULinearEchoCancelerV3 *))(*(_QWORD *)this + 576))(this);
LABEL_7:
    result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AULinearEchoCancelerV3::SetProperty(AULinearEchoCancelerV3 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      v8 = *a5;
      v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AULinearEchoCancelerV3 *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AULinearEchoCancelerV3 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AULinearEchoCancelerV3::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUElement **v11;
  ausdk::AUElement **v12;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
LABEL_3:
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_4;
  }
  if (a2 > 0x29 || ((1 << a2) & 0x30000000001) == 0)
  {
    Scope = (ausdk::AUScope *)(this + 4);
    goto LABEL_3;
  }
  if (*((_BYTE *)this + 17))
    ++*((_DWORD *)this + 133);
  v11 = this[9];
  if (v11)
  {
    Element = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v11 + 4))(this[9], 0);
  }
  else
  {
    v12 = this[6];
    if (this[7] == v12)
      Element = 0;
    else
      Element = *v12;
  }
LABEL_4:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AULinearEchoCancelerV3::CanScheduleParameters(AULinearEchoCancelerV3 *this)
{
  return 0;
}

uint64_t AULinearEchoCancelerV3::ProcessMultipleBufferLists(AULinearEchoCancelerV3 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  AULinearEchoCancelerV3 *v11;
  int v12;
  const AudioBufferList *v13;
  uint64_t v14;
  void *mData;
  void *v16;
  uint64_t v17;
  float *v18;
  float *v19;
  lmsfilt_v3 *v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  float Parameter;
  float v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  uint64_t Element;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  ausdk::AUElement **v35;
  int v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  float **v40;
  BOOL v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  DSPComplex *v49;
  float *v50;
  vDSP_Length v51;
  uint64_t v52;
  float v53;
  float v54;
  int v55;
  _BOOL4 v56;
  lmsfilt_v3 *v57;
  vDSP_Length v58;
  float *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  vDSP_Length v64;
  vDSP_Length v65;
  float *v66;
  int *v67;
  const DSPComplex *v68;
  float *v69;
  vDSP_Length v70;
  float *v71;
  float *v72;
  const DSPComplex *v73;
  uint64_t v74;
  float v75;
  MultiRadixRealFFT *v76;
  int v77;
  vDSP_Length v78;
  float *v79;
  float *v80;
  uint64_t v81;
  float *v82;
  float *v83;
  float *v84;
  int v85;
  float v86;
  float v87;
  float *v88;
  float v89;
  uint64_t v90;
  float *v91;
  int v92;
  int v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  float v99;
  int v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  void *v110;
  size_t v111;
  vDSP_Length v112;
  float *v113;
  uint64_t v114;
  int v115;
  char *v116;
  vDSP_Length v117;
  char *v118;
  size_t v119;
  int v120;
  const float *v121;
  int v122;
  float v123;
  uint64_t v124;
  float v125;
  vDSP_Length v126;
  int v127;
  int v128;
  float v129;
  uint64_t v130;
  int v131;
  vDSP_Length v132;
  float v133;
  float *v134;
  int v135;
  float *v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  size_t v142;
  DSPSplitComplex v143;
  const float *v144;
  vDSP_Length v145;
  DSPComplex *v146;
  DSPComplex *v147;
  float *v148;
  DSPSplitComplex v149;
  float *v150;
  int v151;
  float v152;
  int v153;
  int v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  double v159;
  float v160;
  float v161;
  float v162;
  int v163;
  float v164;
  int v165;
  int v166;
  int v167;
  float v168;
  float v169;
  int v170;
  int v171;
  const float *v172;
  vDSP_Length v173;
  float v174;
  float v175;
  float v176;
  float v177;
  int v178;
  void *v179;
  DSPComplex *v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  float v188;
  unsigned int v189;
  float v190;
  float v191;
  float v192;
  float v193;
  double v194;
  float v195;
  double v196;
  double v197;
  double v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  int v205;
  float *v206;
  float *v207;
  _BOOL4 *v208;
  float *v209;
  int *v210;
  _DWORD *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  _DWORD *v218;
  int *v219;
  _BOOL4 *v220;
  float *v221;
  float *v222;
  float *v223;
  float v225;
  _BOOL4 v226;
  int *v227;
  int v228;
  int v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  size_t v233;
  void *v234;
  size_t v235;
  size_t v236;
  int v237;
  int v238;
  int *v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  float v246;
  int v247;
  int v248;
  uint64_t v249;
  int v250;
  float v251;
  BOOL v252;
  BOOL v253;
  int v255;
  size_t v256;
  void *v257;
  size_t v258;
  int v259;
  int v260;
  int v261;
  int *v262;
  uint64_t v263;
  int v264;
  DSPComplex *v265;
  DSPComplex *v266;
  DSPComplex *v267;
  uint64_t v268;
  int v269;
  DSPSplitComplex v270;
  vDSP_Length v271;
  float *v272;
  float *realp;
  float *imagp;
  float *v275;
  float *v276;
  float *v277;
  float *v278;
  float *v279;
  float *v280;
  float *v281;
  float v282;
  float v283;
  vDSP_Length v284;
  float v285;
  float v286;
  float *v287;
  int v288;
  float *v289;
  vDSP_Length v290;
  const float *v291;
  float *v292;
  float *v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v305;
  float v306;
  float v307;
  int v308;
  float *v309;
  int v310;
  float v311;
  _BOOL4 v312;
  _BOOL4 v313;
  float *v314;
  uint64_t v315;
  float *v316;
  uint64_t v317;
  float v318;
  float v319;
  float *v320;
  int v321;
  float v322;
  uint64_t i;
  float v324;
  int v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  vDSP_Length v341;
  float *v342;
  int v343;
  int v344;
  vDSP_Length v345;
  int v346;
  int v347;
  float *v348;
  float v349;
  float v350;
  float v351;
  int v352;
  float *v353;
  float *v354;
  uint64_t v355;
  int v356;
  float v357;
  const float *v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  int v364;
  float *v365;
  float *v366;
  float *v367;
  float v368;
  float v369;
  uint64_t v370;
  float *v371;
  vDSP_Length v372;
  uint64_t v373;
  const float *v374;
  uint64_t v375;
  uint64_t v376;
  float v377;
  float *v378;
  DSPComplex *v379;
  DSPComplex *v380;
  float v381;
  vDSP_Length v382;
  float v383;
  float v384;
  int v385;
  float *v386;
  float *v387;
  uint64_t v388;
  int v389;
  signed int v390;
  unsigned int v391;
  int *v392;
  float v393;
  float *v394;
  void *v395;
  void *v396;
  float *v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  const float **v403;
  vDSP_Length v404;
  uint64_t v405;
  float *v406;
  float *v407;
  float *v408;
  float *v409;
  float v410;
  float v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  signed int v415;
  int v416;
  int v417;
  unsigned int v418;
  int v419;
  int v420;
  uint64_t v421;
  ausdk::AUElement *v422;
  ausdk::AUElement **v423;
  uint64_t v424;
  ausdk::AUElement *v425;
  ausdk::AUElement **v426;
  uint64_t v427;
  ausdk::AUElement *v428;
  ausdk::AUElement **v429;
  uint64_t v430;
  ausdk::AUElement *v431;
  ausdk::AUElement **v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  vDSP_Length v438;
  float v439;
  float v440;
  uint64_t v441;
  ausdk::AUElement *v442;
  ausdk::AUElement **v443;
  uint64_t v444;
  ausdk::AUElement *v445;
  ausdk::AUElement **v446;
  float v447;
  float v448;
  float v449;
  uint64_t v450;
  ausdk::AUElement *v451;
  ausdk::AUElement **v452;
  ausdk::AUElement **v453;
  float v454;
  float *v456;
  size_t v457;
  uint64_t v458;
  float *v459;
  vDSP_Length v460;
  float v461;
  double v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  size_t v468;
  float v469;
  float v470;
  _BOOL4 v471;
  _BOOL4 v472;
  float *v473;
  float *v474;
  float *v475;
  void *__dst;
  int *__dsta;
  int *__dstb;
  void *v479;
  void *v480;
  int v481;
  float v482;
  float v483;
  int v484;
  float *v485;
  float *v486;
  _QWORD *v487;
  void *v488;
  void *v489;
  _BOOL4 v490;
  float *v491;
  size_t __n;
  void *__na;
  float *__nb;
  float *v495;
  float *v496;
  float *v497;
  float *v498;
  float *v499;
  float v500;
  float *v501;
  float *v502;
  DSPComplex *v503;
  float v504;
  int v505;
  int v506;
  float *v507;
  AULinearEchoCancelerV3 *v508;
  lmsfilt_v3 *__src;
  float __srca;
  void *__srcb;
  float *__srcc;
  _DWORD *__srcd;
  int __srcf;
  int __srce;
  uint64_t v516;
  float *v517;
  float *v518;
  uint64_t v519;
  int v520;
  DSPSplitComplex *v521;
  vDSP_Length __N;
  const float *__Na;
  int __Nb;
  vDSP_Length __Nc;
  float *__Nd;
  float **v527;
  int v528;
  uint64_t v529;
  float v530;
  float *v531;
  float *v532;
  DSPComplex *v533;
  DSPComplex *v534;
  float *v535;
  unsigned int v536;
  float *v537;
  float *v538;
  int v539;
  int v540;
  float *v541;
  float *v542;
  float *v543;
  DSPSplitComplex v544;
  vDSP_Length v545;
  float *v546;
  float *v547;
  uint64_t v548;
  float *v549;
  float *v550;
  float v551;
  float v552;
  float v553;
  float __B;
  float v555;
  DSPSplitComplex v556;
  DSPSplitComplex __C;
  DSPSplitComplex __Z;
  DSPSplitComplex __A;
  uint64_t v560;

  v560 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  v11 = this;
  v12 = *((_DWORD *)this + 133);
  if (*((_DWORD *)this + 134) != v12)
  {
    AULinearEchoCancelerV3::InitializeEC(this);
    *((_DWORD *)v11 + 134) = v12;
  }
  v13 = a5[1];
  v14 = (uint64_t)*a7;
  if (a6 < 2)
  {
    mData = 0;
  }
  else
  {
    mData = a7[1]->mBuffers[0].mData;
    if (a6 != 2)
    {
      v16 = a7[2]->mBuffers[0].mData;
      goto LABEL_10;
    }
  }
  v16 = 0;
LABEL_10:
  v18 = (float *)(*a5)->mBuffers[0].mData;
  v19 = *(float **)(v14 + 16);
  v20 = (lmsfilt_v3 *)v13->mBuffers[0].mData;
  v21 = *((_QWORD *)v11 + 9);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
    if (*((ausdk::AUElement ***)v11 + 7) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  Parameter = ausdk::AUElement::GetParameter(v22, 2u);
  if (((*(uint64_t (**)(AULinearEchoCancelerV3 *))(*(_QWORD *)v11 + 576))(v11) & 1) == 0
    && *((_QWORD *)v11 + 86))
  {
    v17 = 0xFFFFFFFFLL;
    v25 = 0.0;
    if (!v18 || !v20)
    {
LABEL_421:
      v444 = *((_QWORD *)v11 + 9);
      if (v444)
      {
        v445 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v444 + 32))(v444, 0);
      }
      else
      {
        v446 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
        if (*((ausdk::AUElement ***)v11 + 7) == v446)
          v445 = 0;
        else
          v445 = *v446;
      }
      v447 = ausdk::AUElement::GetParameter(v445, 0x23u);
      v448 = *((float *)v11 + 170);
      if (v25 >= v448)
        v449 = v25;
      else
        v449 = *((float *)v11 + 170);
      if (v449 < *((float *)v11 + 171))
        v449 = *((float *)v11 + 171);
      *((float *)v11 + 171) = v448;
      *((float *)v11 + 170) = v25;
      v450 = *((_QWORD *)v11 + 9);
      if (v449 <= v447)
      {
        if (v450)
        {
          v451 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v450 + 32))(v450, 0);
        }
        else
        {
          v453 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
          if (*((ausdk::AUElement ***)v11 + 7) == v453)
            v451 = 0;
          else
            v451 = *v453;
        }
        v454 = 0.0;
      }
      else
      {
        if (v450)
        {
          v451 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v450 + 32))(v450, 0);
        }
        else
        {
          v452 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
          if (*((ausdk::AUElement ***)v11 + 7) == v452)
            v451 = 0;
          else
            v451 = *v452;
        }
        v454 = 1.0;
      }
      ausdk::AUElement::SetParameter(v451, 0x24u, v454, 0);
      return v17;
    }
    v26 = *((_QWORD *)v11 + 9);
    if (v26)
    {
      v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
    }
    else
    {
      v35 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
      if (*((ausdk::AUElement ***)v11 + 7) == v35)
        v27 = 0;
      else
        v27 = *v35;
    }
    v36 = (int)ausdk::AUElement::GetParameter(v27, 4u);
    v37 = *((_QWORD *)v11 + 9);
    __src = v20;
    if (v37)
    {
      v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
    }
    else
    {
      v39 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
      if (*((ausdk::AUElement ***)v11 + 7) == v39)
        v38 = 0;
      else
        v38 = *v39;
    }
    *((float *)v11 + 140) = ausdk::AUElement::GetParameter(v38, 5u);
    v40 = (float **)*((_QWORD *)v11 + 86);
    v506 = v36;
    v41 = v36 == 0;
    v42 = *v40;
    v43 = v40[1];
    v44 = (uint64_t)v40[6];
    v45 = v40[7];
    v47 = v40[8];
    v46 = v40[9];
    v48 = v40[3];
    v547 = v40[2];
    v527 = v40;
    v486 = v40[4];
    v542 = (float *)*((_QWORD *)v45 + 1);
    v543 = *(float **)v45;
    v49 = (DSPComplex *)*((_QWORD *)v45 + 6);
    v544 = (DSPSplitComplex)*((_OWORD *)v45 + 2);
    v50 = (float *)*((_QWORD *)v45 + 7);
    v532 = v48;
    v534 = (DSPComplex *)*((_QWORD *)v45 + 8);
    v51 = *((int *)v42 + 4);
    v52 = *((unsigned int *)v42 + 7);
    v548 = *((int *)v42 + 9);
    *(_DWORD *)(v44 + 580) = 0;
    v53 = (float)(int)v51;
    v54 = *(float *)(v44 + 544);
    v503 = v49;
    if (v54 < 100.0 && (float)(*(float *)(v44 + 20) / v53) > 0.00000001)
    {
      v54 = v54 + v42[5];
      *(float *)(v44 + 544) = v54;
    }
    v55 = *((_DWORD *)v42 + 25);
    if (v55 >= 1)
    {
      if (v55 == 2)
      {
        v56 = 1;
        goto LABEL_51;
      }
      if (v55 == 1)
      {
        v56 = v54 < (float)(*(float *)(v44 + 528) + 2.0);
LABEL_51:
        v490 = v56;
        goto LABEL_52;
      }
    }
    v490 = 0;
LABEL_52:
    v541 = (float *)(v44 + 20);
    v516 = v52;
    v517 = v50;
    *(_BYTE *)v44 = v41;
    *(_DWORD *)(v44 + 492) = *(_DWORD *)(v44 + 32);
    *(_DWORD *)(v44 + 532) = *(_DWORD *)(v44 + 384);
    v487 = (_QWORD *)(v44 + 276);
    v488 = v16;
    *(_QWORD *)(v44 + 508) = *(_QWORD *)(v44 + 500);
    *(_DWORD *)(v44 + 568) = 0;
    v545 = v51;
    v546 = v43;
    v549 = v45;
    v550 = v42;
    v508 = v11;
    v489 = mData;
    v491 = v19;
    v518 = v47;
    if (*((_DWORD *)v42 + 24) || *(_DWORD *)(v44 + 140))
    {
      *(_DWORD *)(v44 + 348) = *(_DWORD *)(v44 + 4);
      v57 = __src;
      v58 = v51;
      memcpy(*((void **)v45 + 12), __src, 4 * v51);
    }
    else
    {
      v495 = v46;
      v104 = *((_QWORD *)v43 + 7);
      v103 = *((_QWORD *)v43 + 8);
      v105 = (4 * v51);
      v106 = *((_DWORD *)v42 + 18);
      v107 = v106 - v51;
      if (v106 != (_DWORD)v51)
      {
        v108 = 0;
        do
        {
          v109 = v51 + v108;
          memcpy((void *)(v104 + 4 * v108), (const void *)(v104 + 4 * (v51 + v108)), v105);
          memcpy((void *)(v103 + 4 * v108), (const void *)(v103 + 4 * v109), v105);
          v51 = v545;
          v108 += v545;
        }
        while (v108 < v107);
      }
      v110 = (void *)(v104 + 4 * (int)v107);
      v111 = v105;
      v112 = v51;
      memcpy(v110, __src, v111);
      vDSP_vsq((const float *)v110, 1, (float *)(v103 + 4 * (int)v107), 1, v112);
      v113 = (float *)*((_QWORD *)v43 + 8);
      v529 = *((_QWORD *)v43 + 7);
      v114 = *((int *)v550 + 4);
      v115 = *((_DWORD *)v550 + 18);
      v116 = (char *)*((_QWORD *)v549 + 13);
      v117 = *((int *)v495 + 4);
      v484 = *((_DWORD *)v550 + 4);
      v118 = &v116[4 * v114];
      v119 = 4 * (int)v114;
      memcpy(v116, v118, v119);
      __n = v119;
      memcpy(v118, v18, v119);
      v120 = *((_DWORD *)v550 + 17);
      v121 = (const float *)*((_QWORD *)v549 + 13);
      __dst = (void *)*((_QWORD *)v549 + 14);
      v479 = (void *)*((_QWORD *)v549 + 15);
      v481 = v115;
      v122 = v115 - v117 - v120;
      LODWORD(__A.realp) = 0;
      LODWORD(__Z.realp) = 0;
      v123 = (float)((float)(v115 - (int)v117) / 3.0) + (float)((float)(v115 - (int)v117) / 3.0);
      LODWORD(__C.realp) = 0;
      if (v122 >= (int)v123)
        v124 = (v122 - (int)v123 + 1) & ~((v122 - (int)v123 + 1) >> 31);
      else
        v124 = 0;
      v498 = v113;
      vDSP_sve(&v113[v124], 1, (float *)&__Z, v117);
      __Na = v121;
      vDSP_dotpr(v121, 1, v121, 1, (float *)&__A, v117);
      v125 = *(float *)&__Z.realp;
      v519 = (v122 + 2);
      if ((int)v124 >= (int)v519)
      {
        v131 = v124;
        v126 = v117;
      }
      else
      {
        v126 = v117;
        v127 = v124 + v117 - v120;
        v128 = v124 - v120;
        v129 = 0.0;
        v130 = v124;
        v131 = v124;
        do
        {
          v132 = v126;
          vDSP_dotpr((const float *)(v529 + 4 * v130), 1, __Na, 1, (float *)&__C, v126);
          if (v130 <= v124)
          {
            v133 = *(float *)&__Z.realp;
            v126 = v132;
          }
          else
          {
            v133 = *(float *)&__Z.realp;
            v126 = v132;
            if (v130 >= v120 && v120 >= 1)
            {
              v134 = &v498[v128];
              v135 = v120;
              v136 = &v498[v127];
              do
              {
                v137 = *v134++;
                v138 = v133 - v137;
                v139 = *v136++;
                v133 = v138 + v139;
                --v135;
              }
              while (v135);
              *(float *)&__Z.realp = v133;
            }
          }
          v140 = *(float *)&__C.realp / (sqrtf(v133 * *(float *)&__A.realp) + 2.2204e-16);
          v141 = fabsf(v140);
          if (v141 > v129)
          {
            v125 = v133;
            v129 = v141;
            v131 = v130;
          }
          v130 += v120;
          v127 += v120;
          v128 += v120;
        }
        while (v130 < v519);
      }
      v520 = v481 - v484;
      v142 = 4 * v126;
      memcpy(__dst, (const void *)(v529 + 4 * v131), 4 * v126);
      memcpy(v479, __Na, v142);
      *(float *)(v44 + 348) = v125;
      *(_DWORD *)(v44 + 352) = v131;
      v143 = (DSPSplitComplex)*((_OWORD *)v549 + 8);
      __Z = (DSPSplitComplex)*((_OWORD *)v549 + 9);
      __A = v143;
      v144 = (const float *)*((_QWORD *)v549 + 28);
      v145 = *((int *)v495 + 4);
      v146 = (DSPComplex *)*((_QWORD *)v549 + 14);
      v147 = (DSPComplex *)*((_QWORD *)v549 + 15);
      v148 = (float *)*((_QWORD *)v549 + 20);
      v499 = (float *)*((_QWORD *)v549 + 21);
      v149 = (DSPSplitComplex)*((_OWORD *)v549 + 11);
      v150 = (float *)*((_QWORD *)v549 + 25);
      v485 = (float *)*((_QWORD *)v549 + 24);
      v556 = (DSPSplitComplex)*((_OWORD *)v549 + 13);
      __C = v149;
      __Nb = *(_DWORD *)(v44 + 324);
      v151 = *(_DWORD *)(v44 + 328);
      vDSP_vmul((const float *)v146, 1, v144, 1, (float *)v146, 1, v145);
      dft_v3::dftGenericAnalysis2ndHalf(v146, __A.realp, __A.imagp, (uint64_t)v495, 0);
      vDSP_vmul((const float *)v147, 1, v144, 1, (float *)v147, 1, v145);
      dft_v3::dftGenericAnalysis2ndHalf(v147, __Z.realp, __Z.imagp, (uint64_t)v495, 0);
      vDSP_zvmags(&__A, 1, v148, 1, v151);
      vDSP_zvmags(&__Z, 1, v499, 1, v151);
      vDSP_zvcmul(&__Z, 1, &__A, 1, &__C, 1, v151);
      v555 = *(float *)(v44 + 344);
      __B = 1.0 - v555;
      vDSP_vsmul(v148, 1, &__B, v148, 1, v151);
      vDSP_vsma(v485, 1, &v555, v148, 1, v485, 1, v151);
      vDSP_vsmul(v499, 1, &__B, v499, 1, v151);
      vDSP_vsma(v150, 1, &v555, v499, 1, v150, 1, v151);
      vDSP_vsmul(__C.realp, 1, &__B, __C.realp, 1, v151);
      vDSP_vsmul(__C.imagp, 1, &__B, __C.imagp, 1, v151);
      vDSP_vsmul(v556.realp, 1, &v555, v556.realp, 1, v151);
      vDSP_vsmul(v556.imagp, 1, &v555, v556.imagp, 1, v151);
      vDSP_zvadd(&v556, 1, &__C, 1, &v556, 1, v151);
      vDSP_zvabs(&v556, 1, v499, 1, v151);
      v152 = 0.0;
      v153 = v151 - __Nb;
      if (v151 >= __Nb)
      {
        v154 = v153 + 1;
        v155 = &v485[__Nb - 1];
        v156 = &v150[__Nb - 1];
        v157 = &v499[__Nb - 1];
        do
        {
          v158 = *v157++;
          v159 = v158;
          v160 = *v156++;
          v161 = v160;
          v162 = *v155++;
          v152 = v159 / (sqrtf(v161 * v162) + 1.0e-20) + v152;
          --v154;
        }
        while (v154);
      }
      *(float *)(v44 + 304) = v152 / (float)(v153 + 1);
      v163 = *(_DWORD *)(v44 + 352);
      if (v163 >= v520)
        v163 = v520;
      v45 = v549;
      memcpy(*((void **)v549 + 12), (const void *)(v529 + 4 * v163), __n);
      v58 = v545;
      v43 = v546;
      v42 = v550;
      v47 = v518;
      v57 = __src;
    }
    v60 = *((_DWORD *)v43 + 20);
    v61 = *((_QWORD *)v43 + 4);
    v62 = *((_QWORD *)v45 + 9);
    v63 = v60 == 0;
    if (v60)
      v64 = v61 + 4 * v58;
    else
      v64 = *((_QWORD *)v43 + 4);
    if (v63)
    {
      v61 += 4 * v58;
      v65 = *((_QWORD *)v45 + 9);
    }
    else
    {
      v65 = v62 + 4 * v58;
    }
    if (v63)
      v62 += 4 * v58;
    *((_QWORD *)v43 + 5) = v64;
    *((_QWORD *)v43 + 6) = v61;
    *((_QWORD *)v45 + 10) = v65;
    *((_QWORD *)v45 + 11) = v62;
    lmsfilt_v3::preemphasisFilter(v57, (const float *)*((unsigned int *)v42 + 4), v47, *((float **)v43 + 5), v59);
    lmsfilt_v3::preemphasisFilter((lmsfilt_v3 *)v18, (const float *)*((unsigned int *)v42 + 4), v47 + 1, *((float **)v45 + 10), v66);
    v67 = (int *)*((unsigned int *)v43 + 18);
    *((_DWORD *)v43 + 19) = (_DWORD)v67;
    dft_v3::GetIndexSequence(*((signed int **)v43 + 11), v67, *((_DWORD *)v42 + 11), *((_DWORD *)v42 + 12));
    v68 = (const DSPComplex *)*((_QWORD *)v43 + 5);
    v69 = *(float **)(v44 + 48);
    v70 = *((int *)v550 + 9);
    v528 = *((_DWORD *)v43 + 19);
    __N = *((int *)v550 + 4);
    v71 = (float *)(*((_QWORD *)v43 + 2) + 4 * v528 * (int)__N);
    v72 = (float *)(*((_QWORD *)v43 + 3) + 4 * v528 * (int)__N);
    memcpy(v71, *(const void **)v43, 4 * (int)v70);
    memcpy(v72, *((const void **)v43 + 1), 4 * (int)v70);
    __Z.realp = &v71[v70];
    __Z.imagp = &v72[v70];
    v73 = v68;
    v74 = (uint64_t)v550;
    vDSP_ctoz(v73, 2, &__Z, 1, v70);
    memcpy(*(void **)v43, &v71[v70], 4 * v70);
    memcpy(*((void **)v43 + 1), &v72[v70], 4 * v70);
    __Z.realp = v71;
    __Z.imagp = v72;
    v76 = (MultiRadixRealFFT *)*((_QWORD *)v550 + 1);
    if (v76)
      MultiRadixRealFFT::RealInPlaceTransform(v76, &__Z, 1, v75);
    vDSP_vsmul(v71, 1, v550 + 21, v71, 1, (uint64_t)*(int *)v550 >> 1);
    vDSP_vsmul(v72, 1, v550 + 21, v72, 1, (uint64_t)*(int *)v550 >> 1);
    __A.realp = v71;
    __A.imagp = v72;
    vDSP_zvmags(&__A, 1, v69, 1, __N);
    *v69 = *v71 * *v71;
    v69[__N] = *v72 * *v72;
    v77 = *((_DWORD *)v550 + 11);
    v78 = *((int *)v550 + 10);
    v79 = v546;
    v80 = v547;
    v81 = *((_QWORD *)v546 + 12);
    v82 = (float *)(v81 + 4 * (int)v78 * v528);
    *v82 = *v69 + 0.000000009;
    v82[(int)v78 - 1] = v69[(int)v78 - 1] + 0.000000009;
    if ((int)v78 >= 3)
    {
      v83 = v69 + 2;
      v84 = (float *)(v81 + 4 * (int)v78 * v528 + 4);
      v85 = v78 - 2;
      do
      {
        v86 = *(v83 - 1) + *(v83 - 2);
        v87 = *v83++;
        *v84++ = (float)((float)(v86 + v87) * 0.33333) + 0.000000009;
        --v85;
      }
      while (v85);
    }
    v88 = v549;
    if (v77 == 1)
    {
      **((_DWORD **)v546 + 13) = 1065353216;
    }
    else
    {
      LODWORD(__A.realp) = 0;
      vDSP_sve(v82, 1, (float *)&__A, v78);
      v89 = log10f(*(float *)&__A.realp) * 10.0;
      *(float *)&__A.realp = v89;
      v90 = *((_QWORD *)v546 + 13);
      if (v77 >= 2)
      {
        memmove(*((void **)v546 + 13), (const void *)(v90 + 4), 4 * (v77 - 1));
        v89 = *(float *)&__A.realp;
      }
      *(float *)(v90 + 4 * (v77 - 1)) = v89;
    }
    v91 = v532;
    if (*((_DWORD *)v547 + 17) != 1)
    {
LABEL_144:
      *(float *)&v473 = v80[19];
      lmsfilt_v3::runLmsFilter_v3((DSPSplitComplex *)v549 + 1, (DSPSplitComplex *)*(unsigned int *)(v74 + 16), *((_QWORD *)v80 + 2), *((_QWORD *)v80 + 3), *((_QWORD *)v79 + 2), *((float **)v79 + 3), *((float **)v79 + 11), (float *)*((unsigned int *)v80 + 18), v473, (int *)__dst, (int)v479, SHIDWORD(v479));
      dft_v3::dftSynthesis(*((float **)v88 + 2), *((float **)v88 + 3), v74);
      aec_v5::get_EchoEst_Err(v503, (float *)v534, (float *)(*((_QWORD *)v88 + 2) + 4 * v548), (float *)(*((_QWORD *)v88 + 3) + 4 * v548), *((const float **)v88 + 10), v74);
      v172 = (const float *)*((_QWORD *)v88 + 10);
      v173 = *(int *)(v74 + 16);
      vDSP_svesq(*((const float **)v79 + 5), 1, (float *)(v44 + 4), v173);
      vDSP_svesq(v172, 1, v541, v173);
      LODWORD(v480) = *(_DWORD *)(v44 + 20);
      LODWORD(v172) = *(_DWORD *)(v74 + 16);
      v174 = log10((float)(*(float *)(v44 + 4) / (float)(int)v172) + 1.0e-20) * 10.0;
      *(float *)(v44 + 8) = v174;
      learnrate_v3::updateStatistics_echo((int)v172, (const float *)v534, (const float *)v503, (float *)v44);
      v175 = *(float *)(v44 + 16);
      v176 = (v175 + 1.0e-13) / (*(float *)(v44 + 28) + 1.0e-13);
      v177 = log10f(v176);
      v178 = 0;
      *(float *)(v44 + 580) = v177 * 10.0;
      v179 = (void *)*((_QWORD *)v88 + 8);
      v180 = (DSPComplex *)*((_QWORD *)v88 + 29);
      v181 = (float *)*((_QWORD *)v88 + 30);
      v521 = (DSPSplitComplex *)(v88 + 62);
      __Nc = *((_QWORD *)v88 + 6);
      v183 = *(float *)(v44 + 252);
      v182 = *(float *)(v44 + 256);
      v184 = *(float *)(v44 + 260);
      v185 = *(float *)(v44 + 264);
      v186 = *(float *)(v44 + 268);
      v187 = *(int *)(v74 + 36);
      v188 = *(float *)(v74 + 32);
      v91[15] = 0.0;
      v189 = *(_DWORD *)(v44 + 224);
      if (v189 <= 1)
      {
        if (v189 != 1)
          goto LABEL_148;
        v178 = 2;
      }
      *(_DWORD *)(v44 + 224) = v178;
LABEL_148:
      v190 = v188 * v175;
      if (*((_DWORD *)v91 + 14) == 1)
      {
        *((_QWORD *)v91 + 7) = 0x100000000;
        **(_DWORD **)(v44 + 184) = 1;
        v191 = 0.0;
        goto LABEL_201;
      }
      v500 = v184;
      v504 = v185;
      __na = v179;
      __srca = v190;
      v530 = v186;
      v482 = v53;
      *(float *)&v474 = v91[19];
      lmsfilt_v3::runLmsFilter_v3(v521, (DSPSplitComplex *)*(unsigned int *)(v74 + 16), *((_QWORD *)v91 + 2), *((_QWORD *)v91 + 3), *((_QWORD *)v79 + 2), *((float **)v79 + 3), *((float **)v79 + 11), (float *)*((unsigned int *)v91 + 18), v474, __dsta, (int)v480, SHIDWORD(v480));
      dft_v3::dftSynthesis(*((float **)v88 + 31), *((float **)v88 + 32), v74);
      aec_v5::get_EchoEst_Err(v180, v181, (float *)(*((_QWORD *)v88 + 31) + 4 * v187), (float *)(*((_QWORD *)v88 + 32) + 4 * v187), *((const float **)v88 + 10), v74);
      vDSP_svesq(v181, 1, (float *)(v44 + 208), *(int *)(v74 + 16));
      v192 = *(float *)(v44 + 208);
      *(float *)(v44 + 212) = v192;
      v193 = (float)((float)*(int *)v74 * 100.0) * 9.3132e-10;
      if (v192 < v193)
        *(float *)(v44 + 208) = v192 + v193;
      LODWORD(__A.realp) = 0;
      vDSP_svesq((const float *)v180, 1, (float *)&__A, *(int *)(v74 + 16));
      v194 = *(float *)(v44 + 212) + 1.0e-13;
      v195 = (*(float *)&__A.realp + 1.0e-13) / v194;
      LODWORD(__dsta) = log10f(v195);
      v196 = *(float *)(v44 + 28) + 1.0e-13;
      v197 = *(float *)(v44 + 20) + 0.000000001;
      v198 = v183;
      v199 = v196 / v197 + v183;
      v200 = log10f(v199) * 10.0;
      v201 = v194 / v197 + v198;
      v202 = log10f(v201) * 10.0;
      v203 = v196 / (*(float *)(v44 + 16) + 0.000000001) + v198;
      v204 = log10f(v203) * 10.0;
      v205 = *(_DWORD *)(v44 + 228);
      v207 = *(float **)(v44 + 152);
      v206 = *(float **)(v44 + 160);
      v209 = *(float **)(v44 + 168);
      v208 = *(_BOOL4 **)(v44 + 176);
      v210 = *(int **)(v44 + 184);
      v211 = *(_DWORD **)(v44 + 192);
      v212 = v205 - 1;
      if (v205 != 1)
      {
        v213 = 0;
        v214 = *(_QWORD *)(v44 + 200);
        v215 = v214 + 4 * v212;
        v216 = v205 - 2;
        v217 = v212 - 1;
        v218 = &v211[v212];
        v219 = &v210[v212];
        v220 = &v208[v212];
        v221 = &v209[v212];
        v222 = &v206[v212];
        v223 = &v207[v212];
        do
        {
          v223[v213] = v207[(v216 + v213)];
          v222[v213] = v206[(v216 + v213)];
          v221[v213] = v209[(v216 + v213)];
          v220[v213] = v208[(v216 + v213)];
          v219[v213] = v210[(v216 + v213)];
          v218[v213] = v211[(v216 + v213)];
          *(_DWORD *)(v215 + 4 * v213) = *(_DWORD *)(v214 + 4 * (v216 + v213));
        }
        while (v217 + (_DWORD)v213--);
      }
      *v207 = v200 - v202;
      *v206 = v200;
      *v209 = v204;
      v225 = *v207;
      v226 = (float)(v182 + *v207) < 0.0;
      v186 = v530;
      v190 = __srca;
      if (__srca < v530)
        v226 = 1;
      *v208 = v226;
      *v210 = v225 < v500;
      *v211 = *(float *)(v44 + 28) > *(float *)(v44 + 212);
      if (v204 >= v504 || *(float *)(v44 + 8) >= -9.0)
      {
        v227 = *(int **)(v44 + 200);
        *v227 = 0;
      }
      else
      {
        v227 = *(int **)(v44 + 200);
        *v227 = 1;
      }
      v53 = v482;
      v228 = *(_DWORD *)(v44 + 244);
      if (v228 > *(_DWORD *)(v44 + 228))
        goto LABEL_171;
      if (v228 < 1)
        goto LABEL_167;
      v229 = 0;
      v230 = *(unsigned int *)(v44 + 244);
      do
      {
        v231 = *v208++;
        v229 += v231;
        --v230;
      }
      while (v230);
      if (v229)
      {
        v232 = *(_DWORD *)(v44 + 220);
      }
      else
      {
LABEL_167:
        v232 = *(_DWORD *)(v44 + 220);
        if (v232 > 1)
        {
LABEL_169:
          if (*(_BYTE *)v44)
          {
            v91 = v532;
            v233 = 4 * *((_DWORD *)v80 + 9);
            memcpy(*(void **)v80, *(const void **)v532, v233);
            memcpy(*((void **)v80 + 1), *((const void **)v532 + 1), v233);
            memcpy(*((void **)v80 + 2), *((const void **)v532 + 2), v233);
            memcpy(*((void **)v80 + 3), *((const void **)v532 + 3), v233);
            memcpy(*((void **)v80 + 6), *((const void **)v532 + 6), v233);
            *((_QWORD *)v80 + 9) = *((_QWORD *)v532 + 9);
            *(_DWORD *)(v44 + 224) = 1;
            v234 = (void *)*((_QWORD *)v88 + 30);
            __Nc = *((_QWORD *)v88 + 29);
            v235 = 4 * *(_DWORD *)(v74 + 16);
            memcpy(__na, v181, v235);
            memcpy(*((void **)v88 + 2), *((const void **)v88 + 31), v235);
            memcpy(*((void **)v88 + 3), *((const void **)v88 + 32), v235);
            *(_QWORD *)(v44 + 80) = *v487;
            v236 = 4 * *(_DWORD *)(v74 + 40);
            memcpy(*(void **)(v44 + 64), *(const void **)(v44 + 288), v236);
            memcpy(*(void **)(v44 + 72), *(const void **)(v44 + 296), v236);
            **(_DWORD **)(v44 + 176) = 1;
            *(_DWORD *)(v44 + 220) = 0;
            v179 = v234;
LABEL_200:
            v191 = *(float *)&__dsta * 10.0;
LABEL_201:
            v255 = *((_DWORD *)v91 + 15);
            if (v255 == 1)
            {
              *(_DWORD *)(v44 + 216) = 0;
              v256 = 4 * *((_DWORD *)v91 + 9);
              v257 = v179;
              memcpy(*(void **)v91, *(const void **)v80, v256);
              memcpy(*((void **)v91 + 1), *((const void **)v80 + 1), v256);
              memcpy(*((void **)v91 + 2), *((const void **)v80 + 2), v256);
              memcpy(*((void **)v91 + 3), *((const void **)v80 + 3), v256);
              memcpy(*((void **)v91 + 6), *((const void **)v80 + 6), v256);
              *((_QWORD *)v91 + 9) = *((_QWORD *)v80 + 9);
              *v487 = *(_QWORD *)(v44 + 80);
              v258 = 4 * *(_DWORD *)(v74 + 40);
              memcpy(*(void **)(v44 + 288), *(const void **)(v44 + 64), v258);
              memcpy(*(void **)(v44 + 296), *(const void **)(v44 + 72), v258);
              v179 = v257;
              **(_DWORD **)(v44 + 176) = 0;
              **(_DWORD **)(v44 + 184) = 0;
              **(_DWORD **)(v44 + 192) = 0;
              **(_DWORD **)(v44 + 200) = 0;
              v259 = *(_DWORD *)(v44 + 600);
              if (v259 <= 3)
                *(_DWORD *)(v44 + 600) = v259 + 1;
            }
            else
            {
              if (!*(_BYTE *)v44)
                goto LABEL_207;
              *(float *)(v44 + 216) = *(float *)(v44 + 216) + 1.0;
            }
            v255 = *((_DWORD *)v91 + 15);
LABEL_207:
            if (!v255)
            {
              v260 = *(_DWORD *)(v44 + 232);
              if (v260 < 1)
              {
                v261 = 0;
              }
              else
              {
                v261 = 0;
                v262 = *(int **)(v44 + 192);
                v263 = *(unsigned int *)(v44 + 232);
                do
                {
                  v264 = *v262++;
                  v261 += v264;
                  --v263;
                }
                while (v263);
              }
              if (v261 == v260)
              {
                *(_DWORD *)(v44 + 28) = *(_DWORD *)(v44 + 212);
                if (v190 >= v186 && *(_BYTE *)v44)
                  ++*(_DWORD *)(v44 + 220);
                v531 = v181;
                *(_DWORD *)(v44 + 224) = 1;
                *(float *)(v44 + 580) = v191;
LABEL_220:
                v533 = v180;
                __Nd = (float *)(v44 + 384);
                dft_v3::dftGenericAnalysis2ndHalf(v534, v544.realp, v544.imagp, v74, 1);
                dft_v3::dftGenericAnalysis2ndHalf_dsc((const void *)(*((_QWORD *)v88 + 2) + 4 * v548), (const void *)(*((_QWORD *)v88 + 3) + 4 * v548), v543, v542, (int *)v74);
                v535 = v527[10];
                v266 = (DSPComplex *)*((_QWORD *)v88 + 41);
                v265 = (DSPComplex *)*((_QWORD *)v88 + 42);
                v267 = (DSPComplex *)*((_QWORD *)v88 + 43);
                v268 = *(int *)(v74 + 16);
                v269 = *(_DWORD *)(v44 + 400) - v268;
                v270 = *(DSPSplitComplex *)(v88 + 70);
                __C = *(DSPSplitComplex *)(v88 + 74);
                __Z = v270;
                v556 = *(DSPSplitComplex *)(v88 + 78);
                __srcb = (void *)*(int *)(v44 + 408);
                v505 = *(_DWORD *)(v44 + 412);
                v271 = *(int *)(v44 + 420);
                v272 = *(float **)(v44 + 472);
                __nb = *(float **)(v44 + 456);
                v496 = *(float **)(v44 + 480);
                v501 = *(float **)(v44 + 464);
                v555 = *(float *)(v44 + 392);
                __B = 1.0 - v555;
                if (v269 >= 1)
                {
                  memmove(v266, (char *)v266 + 4 * v268, 4 * v269);
                  memmove(v265, (char *)v265 + 4 * v268, 4 * v269);
                  memmove(v267, (char *)v267 + 4 * v268, 4 * v269);
                }
                memcpy((char *)v266 + 4 * v269, *((const void **)v549 + 10), 4 * v268);
                memcpy((char *)v265 + 4 * v269, *((const void **)v549 + 6), 4 * v268);
                memcpy((char *)v267 + 4 * v269, *((const void **)v549 + 8), 4 * v268);
                dft_v3::dftGenericAnalysis2ndHalf(v266, __Z.realp, __Z.imagp, (uint64_t)v535, 0);
                dft_v3::dftGenericAnalysis2ndHalf(v265, __C.realp, __C.imagp, (uint64_t)v535, 0);
                realp = v556.realp;
                imagp = v556.imagp;
                vDSP_zvmags(&__Z, 1, v272, 1, v271);
                vDSP_vsmul(v272, 1, &__B, realp, 1, v271);
                vDSP_vsmul(v496, 1, &v555, imagp, 1, v271);
                vDSP_vadd(realp, 1, imagp, 1, v496, 1, v271);
                vDSP_zvcmul(&__Z, 1, &__C, 1, &v556, 1, v271);
                vDSP_zvabs(&v556, 1, __nb, 1, v271);
                vDSP_vsmul(__nb, 1, &__B, realp, 1, v271);
                vDSP_vsmul(v501, 1, &v555, imagp, 1, v271);
                vDSP_vadd(realp, 1, imagp, 1, v501, 1, v271);
                v553 = 2.2204e-16;
                vDSP_vsadd(v496, 1, &v553, realp, 1, v271);
                vDSP_vdiv(realp, 1, v501, 1, imagp, 1, v271);
                vDSP_meanv(&imagp[(_QWORD)__srcb], 1, __Nd, v505 - (int)__srcb + 1);
                *(float *)(v44 + 384) = fmaxf(fminf(*(float *)(v44 + 384), 1.0), 0.0);
                dft_v3::dftGenericAnalysis2ndHalf(v267, v556.realp, v556.imagp, (uint64_t)v535, 0);
                v275 = v556.realp;
                v276 = v556.imagp;
                v278 = __C.realp;
                v277 = __C.imagp;
                v279 = *(float **)(v44 + 424);
                v280 = *(float **)(v44 + 432);
                v281 = *(float **)(v44 + 448);
                __srcc = *(float **)(v44 + 440);
                v552 = 0.0;
                v551 = 0.0;
                v282 = *(float *)(v44 + 388);
                v283 = *(float *)(v44 + 396);
                v284 = *(int *)(v44 + 400);
                LODWORD(imagp) = *(_DWORD *)(v44 + 404);
                v536 = *(_DWORD *)(v44 + 416);
                __A = v556;
                vDSP_zvmags(&__A, 1, v280, 1, v284);
                *v280 = *v275 * *v275;
                v280[v284] = *v276 * *v276;
                __A.realp = v278;
                __A.imagp = v277;
                vDSP_zvmags(&__A, 1, v279, 1, v284);
                *v279 = *v278 * *v278;
                v279[v284] = *v277 * *v277;
                learnrate_v3::crossCorrSpec_raw((learnrate_v3 *)v280, v281, v279, __srcc, &v552, &v551, (float *)(((int)imagp >> 1) + 1));
                v285 = sqrtf(v551);
                v286 = (float)(v552 / v285) / (float)(v285 + v553);
                if (v286 <= 0.001)
                  v286 = 0.001;
                *(float *)(v44 + 376) = v286;
                *(float *)(v44 + 380) = (float)((float)(1.0 - v282) * v286) + (float)(v282 * *(float *)(v44 + 380));
                VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)v281, v280, (const float *)v536, v283);
                VPEchoGateV3::GatesmoothPowerSpectrum((VPEchoGateV3 *)__srcc, v279, (const float *)v536, v283);
                v11 = v508;
                *((_DWORD *)v508 + 190) = *(_DWORD *)(v44 + 384);
                v287 = v550;
                v288 = *(_DWORD *)v550;
                v289 = v546;
                __srcd = (_DWORD *)*((_QWORD *)v546 + 11);
                v537 = (float *)*((_QWORD *)v546 + 12);
                LODWORD(__Z.realp) = 0;
                LODWORD(__C.realp) = 0;
                v290 = *((int *)v550 + 4);
                v291 = (const float *)*((unsigned int *)v550 + 10);
                v292 = *(float **)(v44 + 40);
                __A = v544;
                vDSP_zvmags(&__A, 1, v292, 1, v290);
                *v292 = *v544.realp * *v544.realp;
                v292[v290] = *v544.imagp * *v544.imagp;
                v293 = *(float **)(v44 + 56);
                __A.realp = v543;
                __A.imagp = v542;
                vDSP_zvmags(&__A, 1, v293, 1, v290);
                *v293 = *v543 * *v543;
                v293[v290] = *v542 * *v542;
                learnrate_v3::crossCorrSpec_raw(*(learnrate_v3 **)(v44 + 40), *(const float **)(v44 + 64), *(const float **)(v44 + 56), *(const float **)(v44 + 72), (const float *)&__Z, (float *)&__C, (float *)((v288 >> 1) + 1));
                v294 = sqrtf(*(float *)&__C.realp);
                v295 = *(float *)(v44 + 16);
                v296 = *(float *)(v44 + 128);
                v297 = *(float *)(v44 + 124) * v295;
                v298 = *(float *)(v44 + 24);
                if (v297 > (float)(v296 * v298))
                  v297 = v296 * v298;
                v299 = v297 / v298;
                if (v298 >= 9.3132e-19)
                  v296 = v299;
                v300 = (float)((float)(*(float *)&__Z.realp / v294) * v296)
                     + (float)((float)(1.0 - v296) * *(float *)(v44 + 80));
                v301 = (float)(v294 * v296) + (float)((float)(1.0 - v296) * *(float *)(v44 + 84));
                if (v301 < 9.3132e-10)
                  v301 = 9.3132e-10;
                if (v300 >= (float)(v301 * 0.005))
                  v302 = v300;
                else
                  v302 = v301 * 0.005;
                if (v302 <= v301)
                  v303 = v302;
                else
                  v303 = v301;
                *(float *)(v44 + 80) = v300;
                *(float *)(v44 + 84) = v301;
                if (v300 < (float)(v301 * 0.005) || v302 > v301)
                  *(float *)(v44 + 80) = v303;
                v305 = v303 / v301;
                v306 = (float)((float)(v295 * (float)(v305 * 3.0)) + (float)(*(float *)(v44 + 4) * 0.0001)) / v298;
                v307 = (float)(*(float *)(v44 + 12) * *(float *)(v44 + 12)) / (float)((float)(v298 * v295) + 8.6736e-19);
                if (v306 >= v307)
                  v307 = v306;
                if (v307 > 0.5)
                  v307 = 0.5;
                *(float *)(v44 + 132) = v305;
                *(float *)(v44 + 136) = v307;
                v308 = *(_DWORD *)(v44 + 140);
                if (v308)
                {
                  v309 = (float *)v533;
                  if (v308 == 1
                    && *(float *)(v44 + 380) < *(float *)(v44 + 368)
                    && *(float *)(v44 + 384) < *(float *)(v44 + 372))
                  {
                    *(_DWORD *)(v44 + 136) = 0;
                  }
                  v310 = *((_DWORD *)v550 + 11);
                }
                else
                {
                  v310 = *((_DWORD *)v550 + 11);
                  v309 = (float *)v533;
                  if (*(float *)(v44 + 144) > (float)v310 && v305 > *(float *)(v44 + 364))
                    *(_DWORD *)(v44 + 140) = 1;
                }
                learnrate_v3::getAdaptationRate3_v6(v44, &v537[*__srcd * (int)v291], v310, (int)v291, 0, *((_DWORD *)v550 + 24));
                VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v44 + 64), *(const float **)(v44 + 40), v291, *(float *)(v44 + 120));
                VPEchoGateV3::GatesmoothPowerSpectrum(*(VPEchoGateV3 **)(v44 + 72), *(const float **)(v44 + 56), v291, *(float *)(v44 + 120));
                if (v506)
                {
                  v311 = *(float *)(v44 + 28);
                  if (v490)
                  {
                    LOBYTE(v312) = 0;
                    v313 = 0;
                    v538 = v486;
                    v314 = v547;
                    v315 = (uint64_t)v550;
                    goto LABEL_334;
                  }
                  goto LABEL_347;
                }
                v316 = *(float **)(v44 + 96);
                v317 = *((unsigned int *)v550 + 11);
                if (*((_DWORD *)v550 + 24))
                {
                  v318 = -0.1;
                }
                else if (*(_DWORD *)(v44 + 140))
                {
                  v318 = flt_1B662D220[*(float *)(v44 + 380) > 2.6];
                }
                else
                {
                  v318 = 0.65;
                }
                v319 = v550[6];
                if ((_DWORD)v317 == 1)
                {
                  *v316 = 1.0;
                  *((float *)v508 + 167) = v319 * 0.5;
LABEL_314:
                  v370 = *((unsigned int *)v287 + 11);
                  if ((_DWORD)v370 != 1)
                  {
                    v371 = *(float **)(v44 + 88);
                    v372 = *((int *)v287 + 10);
                    v373 = *((unsigned int *)v287 + 10);
                    v374 = (const float *)(*((_QWORD *)v289 + 12) + 4 * **((_DWORD **)v289 + 11) * (int)v373);
                    if ((int)v370 <= 1)
                    {
                      if ((int)v373 >= 1)
                      {
                        do
                        {
                          v377 = *v374++;
                          *v371++ = 1.0 / v377;
                          --v373;
                        }
                        while (v373);
                      }
                    }
                    else
                    {
                      LODWORD(__A.realp) = **(_DWORD **)(v44 + 96);
                      vDSP_vsmul(v374, 1, (const float *)&__A, v371, 1, v372);
                      v375 = 4 * v370;
                      v376 = 4;
                      do
                      {
                        LODWORD(__A.realp) = *(_DWORD *)(*(_QWORD *)(v44 + 96) + v376);
                        if (*(float *)&__A.realp != 0.0)
                          vDSP_vsma((const float *)(*((_QWORD *)v289 + 12)+ 4 * *(_DWORD *)(*((_QWORD *)v289 + 11) + v376) * (int)v372), 1, (const float *)&__A, v371, 1, v371, 1, v372);
                        v376 += 4;
                      }
                      while (v375 != v376);
                      if ((int)v373 >= 1)
                      {
                        do
                        {
                          *v371 = 1.0 / *v371;
                          ++v371;
                          --v373;
                        }
                        while (v373);
                      }
                    }
                    v309 = (float *)v533;
                  }
                  v313 = *(float *)(v44 + 544) < *(float *)(v44 + 528) || *(_DWORD *)(v44 + 140) == 0;
                  v312 = *(float *)(v44 + 380) > 0.15 && *__Nd > 0.65;
                  if (v490 && (v313 || v312))
                  {
                    v527[2] = v486;
                    v527[4] = v547;
                    learnrate_v3::adaptLmsFilter_v3((uint64_t)v544.realp);
                    v311 = *(float *)(v44 + 28);
                    v315 = (uint64_t)v287;
                    v314 = v486;
                    v538 = v547;
LABEL_334:
                    v378 = v549;
                    v380 = (DSPComplex *)*((_QWORD *)v549 + 33);
                    v379 = (DSPComplex *)*((_QWORD *)v549 + 34);
                    *(_QWORD *)(v44 + 552) = 0;
                    v381 = *(float *)(v44 + 32) + 1.0e-20;
                    *(float *)(v44 + 516) = log10f(v381 / (float)(*(float *)(v44 + 20) + 1.0e-20)) * 10.0;
                    *(_DWORD *)(v44 + 524) = 0;
                    *(float *)&v474 = v314[19];
                    lmsfilt_v3::runLmsFilter_v3(v521, (DSPSplitComplex *)*(unsigned int *)(v315 + 16), *((_QWORD *)v314 + 2), *((_QWORD *)v314 + 3), *((_QWORD *)v289 + 2), *((float **)v289 + 3), *((float **)v289 + 11), (float *)*((unsigned int *)v314 + 18), v474, __dsta, (int)v480, SHIDWORD(v480));
                    dft_v3::dftSynthesis(*((float **)v378 + 31), *((float **)v378 + 32), v315);
                    aec_v5::get_EchoEst_Err(v380, (float *)v379, (float *)(*((_QWORD *)v378 + 31) + 4 * v548), (float *)(*((_QWORD *)v378 + 32) + 4 * v548), *((const float **)v378 + 10), v315);
                    v382 = *(int *)(v315 + 16);
                    vDSP_svesq((const float *)v379, 1, (float *)(v44 + 488), v382);
                    vDSP_svesq((const float *)v380, 1, (float *)(v44 + 540), v382);
                    v383 = *(float *)(v44 + 488);
                    *(float *)(v44 + 520) = log10f((float)(v383 + 1.0e-20) / (float)(*(float *)(v44 + 20) + 1.0e-20))
                                          * 10.0;
                    v384 = log10f((float)(v383 + 1.0e-20) / v381) * -10.0;
                    *(float *)(v44 + 572) = v384;
                    v385 = *(_DWORD *)(v44 + 32);
                    *(float *)(v44 + 32) = v383;
                    if (*(_DWORD *)(v44 + 140) == 1)
                    {
                      v386 = v517;
                      v387 = v518;
                      v388 = v516;
                      if (*(float *)(v44 + 544) <= *(float *)(v44 + 528)
                        || *(float *)(v44 + 516) >= -20.0
                        || v384 >= -2.0)
                      {
                        v547 = v314;
                      }
                      else
                      {
                        *(_DWORD *)(v44 + 556) = 1;
                        v390 = *((_DWORD *)v550 + 12);
                        if (v390 <= 1)
                          v391 = 1;
                        else
                          v391 = *((_DWORD *)v550 + 12);
                        v389 = *((_DWORD *)v289 + 18) - 1;
                        LODWORD(v392) = v389
                                      + v390
                                      + v390
                                      * (((v389 & ~(v389 >> 31)) - (v389 + (v389 >> 31))) / v391
                                       + (v389 >> 31));
                        do
                          v392 = (int *)((_DWORD)v392 - v390);
                        while ((int)v392 >= v390);
                        *((_DWORD *)v289 + 19) = (_DWORD)v392;
                        dft_v3::GetIndexSequence(*((signed int **)v289 + 11), v392, *((_DWORD *)v550 + 11), v390);
                        *(float *)&v475 = v314[19];
                        lmsfilt_v3::runLmsFilter_v3(v521, (DSPSplitComplex *)*((unsigned int *)v550 + 4), *((_QWORD *)v314 + 2), *((_QWORD *)v314 + 3), *((_QWORD *)v289 + 2), *((float **)v289 + 3), *((float **)v289 + 11), (float *)*((unsigned int *)v314 + 18), v475, __dstb, (int)v480, SHIDWORD(v480));
                        dft_v3::dftSynthesis(*((float **)v549 + 31), *((float **)v549 + 32), (uint64_t)v550);
                        aec_v5::get_EchoEst_Err(v380, (float *)v379, (float *)(*((_QWORD *)v549 + 31) + 4 * v548), (float *)(*((_QWORD *)v549 + 32) + 4 * v548), *((const float **)v549 + 11), (uint64_t)v550);
                        LODWORD(__A.realp) = 0;
                        vDSP_svesq((const float *)v379, 1, (float *)&__A, v545);
                        v393 = log10f((float)(*(float *)&__A.realp + 1.0e-20) / (float)(*(float *)(v44 + 492) + 1.0e-20))
                             * -10.0;
                        *(float *)(v44 + 576) = v393;
                        if (v393 >= -0.5)
                        {
                          v394 = v314;
                        }
                        else
                        {
                          *(_DWORD *)(v44 + 552) = 1;
                          v394 = v538;
                          v527[2] = v538;
                          v527[4] = v314;
                          *(_DWORD *)(v44 + 32) = v385;
                          *(_DWORD *)(v44 + 488) = v385;
                        }
                        v388 = v516;
                        v386 = v517;
                        v547 = v394;
                      }
                    }
                    else
                    {
                      v547 = v314;
                      v386 = v517;
                      v387 = v518;
                      v388 = v516;
                    }
                    *(_DWORD *)(v44 + 560) = 0;
                    v397 = v491;
                    if (*(_DWORD *)(v44 + 556))
                      goto LABEL_352;
                    if (v313)
                    {
                      if (*(float *)(v44 + 380) > 0.02)
                        goto LABEL_447;
                    }
                    else if (v312)
                    {
LABEL_447:
                      *(_DWORD *)(v44 + 560) = 1;
                      v456 = v527[5];
                      if (*(_DWORD *)(v44 + 564) == 1)
                      {
                        *(_DWORD *)(v44 + 564) = 0;
                        v457 = 4 * *((_DWORD *)v456 + 9);
                        memcpy(*(void **)v456, *(const void **)v547, v457);
                        memcpy(*((void **)v456 + 1), *((const void **)v547 + 1), v457);
                        memcpy(*((void **)v456 + 2), *((const void **)v547 + 2), v457);
                        memcpy(*((void **)v456 + 3), *((const void **)v547 + 3), v457);
                        memcpy(*((void **)v456 + 6), *((const void **)v547 + 6), v457);
                        v458 = *((_QWORD *)v547 + 9);
                        *((_QWORD *)v456 + 9) = v458;
                      }
                      else
                      {
                        v458 = *((_QWORD *)v456 + 9);
                      }
                      LODWORD(v475) = HIDWORD(v458);
                      lmsfilt_v3::runLmsFilter_v3(v521, (DSPSplitComplex *)*((unsigned int *)v550 + 4), *((_QWORD *)v456 + 2), *((_QWORD *)v456 + 3), *((_QWORD *)v546 + 2), *((float **)v546 + 3), *((float **)v546 + 11), (float *)v458, v475, __dstb, (int)v480, SHIDWORD(v480));
                      dft_v3::dftSynthesis(*((float **)v549 + 31), *((float **)v549 + 32), (uint64_t)v550);
                      aec_v5::get_EchoEst_Err(v380, (float *)v379, (float *)(*((_QWORD *)v549 + 31) + 4 * v548), (float *)(*((_QWORD *)v549 + 32) + 4 * v548), *((const float **)v549 + 10), (uint64_t)v550);
                      v459 = (float *)(v44 + 536);
                      v460 = *((int *)v550 + 4);
                      vDSP_svesq((const float *)v379, 1, (float *)(v44 + 496), v460);
                      vDSP_svesq((const float *)v380, 1, (float *)(v44 + 536), v460);
                      v461 = *(float *)(v44 + 496);
                      v462 = v461 + 1.0e-20;
                      v463 = log10(v462 / (*(float *)(v44 + 28) + 1.0e-20)) * 10.0;
                      *(float *)(v44 + 500) = v463;
                      v464 = log10(v462 / (*(float *)(v44 + 212) + 1.0e-20)) * 10.0;
                      *(float *)(v44 + 504) = v464;
                      *(_DWORD *)(v44 + 524) = 0;
                      v396 = v488;
                      v395 = v489;
                      if (v463 < -1.0 && v464 < -1.0 && *(float *)(v44 + 508) < 0.0 && *(float *)(v44 + 512) < 0.0)
                      {
                        v465 = *v459;
                        if ((float)(*v459 / v53) > 0.0000001 && v465 < (float)(*(float *)(v44 + 16) * 10.0))
                        {
                          *(_DWORD *)(v44 + 524) = 1065353216;
                          v466 = (v465 + 1.0e-13) / (v461 + 1.0e-13);
                          *(float *)(v44 + 580) = log10f(v466) * 10.0;
                          *(_DWORD *)(v44 + 568) = 1;
                          v531 = (float *)v379;
                          v533 = v380;
                          v311 = v461;
                        }
                      }
                      if (v463 <= 4.0)
                      {
                        learnrate_v3::updateStatistics_echo(*((_DWORD *)v550 + 4), (const float *)v379, (const float *)v380, (float *)v44);
                        dft_v3::dftGenericAnalysis2ndHalf(v379, v544.realp, v544.imagp, (uint64_t)v550, 1);
                        dft_v3::dftGenericAnalysis2ndHalf_dsc((const void *)(*((_QWORD *)v549 + 31) + 4 * v548), (const void *)(*((_QWORD *)v549 + 32) + 4 * v548), v543, v542, (int *)v550);
                        v469 = *(float *)(v44 + 136) * 2.5;
                        v470 = 0.5;
                        v471 = v469 <= 0.5;
                        v472 = v469 < 1.0 || v469 <= 0.5;
                        if (v469 >= 1.0)
                          v471 = 1;
                        if (!v472)
                          v470 = 1.0;
                        if (v471)
                          v469 = v470;
                        *(float *)(v44 + 132) = fminf(*(float *)(v44 + 132) * 2.5, 1.0);
                        *(float *)(v44 + 136) = v469;
                        learnrate_v3::getAdaptationRate3_v6(v44, (const float *)(*((_QWORD *)v546 + 12)+ 4 * *((_DWORD *)v550 + 10) * **((_DWORD **)v546 + 11)), *((_DWORD *)v550 + 11), *((_DWORD *)v550 + 10), 2, *((_DWORD *)v550 + 24));
                        v289 = v546;
                        learnrate_v3::adaptLmsFilter_v3((uint64_t)v544.realp);
                      }
                      else
                      {
                        v468 = 4 * *((_DWORD *)v456 + 9);
                        memcpy(*(void **)v456, *(const void **)v547, v468);
                        memcpy(*((void **)v456 + 1), *((const void **)v547 + 1), v468);
                        memcpy(*((void **)v456 + 2), *((const void **)v547 + 2), v468);
                        memcpy(*((void **)v456 + 3), *((const void **)v547 + 3), v468);
                        memcpy(*((void **)v456 + 6), *((const void **)v547 + 6), v468);
                        *((_QWORD *)v456 + 9) = *((_QWORD *)v547 + 9);
                        v289 = v546;
                      }
                      v386 = v517;
                      v387 = v518;
                      v388 = v516;
                      goto LABEL_353;
                    }
LABEL_352:
                    *(_DWORD *)(v44 + 564) = 1;
                    v396 = v488;
                    v395 = v489;
LABEL_353:
                    v309 = (float *)v533;
                    goto LABEL_354;
                  }
                  learnrate_v3::adaptLmsFilter_v3((uint64_t)v544.realp);
                  v311 = *(float *)(v44 + 28);
LABEL_347:
                  v396 = v488;
                  v395 = v489;
                  v397 = v491;
                  v386 = v517;
                  v387 = v518;
                  v388 = v516;
LABEL_354:
                  v398 = *v541;
                  v399 = *v541 * 3.0;
                  if (v311 > v399)
                    v531 = (float *)*((_QWORD *)v549 + 10);
                  if (*((int *)v550 + 30) >= 1)
                  {
                    if (*(float *)(v44 + 32) <= v399
                      || *(float *)(v44 + 580) <= -3.0
                      || *(float *)(v44 + 8) <= -70.0
                      || (v400 = *(float *)(v44 + 16), v400 <= (float)(v398 * 8.0))
                      || (float)(*(float *)&v480 / v53) <= 0.00000001
                      || *(int *)(v44 + 600) < 2)
                    {
                      *(_QWORD *)(v44 + 592) = 0;
                    }
                    else
                    {
                      v401 = v550[6];
                      v402 = v401 + *(float *)(v44 + 592);
                      *(float *)(v44 + 592) = v402;
                      if (v400 > (float)(v398 * 32.0))
                        *(float *)(v44 + 596) = v401 + *(float *)(v44 + 596);
                      if (v402 > 100.0)
                      {
                        LODWORD(__A.realp) = 1056964608;
                        if (*(float *)(v44 + 596) > 100.0)
                          LODWORD(__A.realp) = 1048576000;
                        v403 = (const float **)v547;
                        v404 = *((int *)v547 + 9);
                        vDSP_vsmul(*(const float **)v547, 1, (const float *)&__A, *(float **)v547, 1, v404);
                        vDSP_vsmul(v403[1], 1, (const float *)&__A, (float *)v403[1], 1, v404);
                        vDSP_vsmul(v403[2], 1, (const float *)&__A, (float *)v403[2], 1, v404);
                        vDSP_vsmul(v403[3], 1, (const float *)&__A, (float *)v403[3], 1, v404);
                        vDSP_vsmul(v403[6], 1, (const float *)&__A, (float *)v403[6], 1, v404);
                        *(_QWORD *)(v44 + 592) = 0;
                        v388 = v516;
                        v386 = v517;
                      }
                    }
                  }
                  *v386 = *v309 + (float)(v387[3] * 0.9);
                  *v397 = *v531 + (float)(v387[2] * 0.9);
                  if ((int)v388 > 1)
                  {
                    v405 = v388 - 1;
                    v406 = v309 + 1;
                    v407 = v531 + 1;
                    v408 = v386 + 1;
                    v409 = v397 + 1;
                    do
                    {
                      v410 = *v406++;
                      *v408 = v410 + (float)(*(v408 - 1) * 0.9);
                      ++v408;
                      v411 = *v407++;
                      *v409 = v411 + (float)(*(v409 - 1) * 0.9);
                      ++v409;
                      --v405;
                    }
                    while (v405);
                  }
                  v387[3] = v386[(int)v388 - 1];
                  v387[2] = v397[(int)v388 - 1];
                  *((_DWORD *)v11 + 168) = *(_DWORD *)(v44 + 140);
                  *((_DWORD *)v11 + 169) = *(_DWORD *)(v44 + 348);
                  v25 = *(float *)(v44 + 580);
                  v413 = *((_DWORD *)v550 + 12);
                  if (v413 <= 1)
                    v414 = 1;
                  else
                    v414 = *((_DWORD *)v550 + 12);
                  v412 = *((_DWORD *)v289 + 18) + 1;
                  v415 = v412
                       + v413
                       + v413
                       * (((v412 & ~(v412 >> 31)) - (v412 + (v412 >> 31))) / v414
                        + (v412 >> 31));
                  do
                    v415 -= v413;
                  while (v415 >= (int)v413);
                  *((_DWORD *)v289 + 18) = v415;
                  v416 = *((_DWORD *)v289 + 20);
                  v417 = v416 + 1;
                  v418 = (((v416 + 1) & ~((v416 + 1) >> 31))
                        - (v416
                         + 1
                         + ((v416 + 1) >> 31))
                        + 2 * ((v416 + 1) >> 31)) & 0xFFFFFFFE;
                  v419 = v416 + v418;
                  v420 = v418 + v417;
                  if (v420 >= 1)
                    v420 = 1;
                  *((_DWORD *)v289 + 20) = v419 - ((v419 - v420 + 2) & 0xFFFFFFFE) + 1;
                  v421 = *((_QWORD *)v11 + 9);
                  if (v421)
                  {
                    v422 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v421 + 32))(v421, 0);
                  }
                  else
                  {
                    v423 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
                    if (*((ausdk::AUElement ***)v11 + 7) == v423)
                      v422 = 0;
                    else
                      v422 = *v423;
                  }
                  ausdk::AUElement::SetParameter(v422, 8u, *((float *)v11 + 167), 0);
                  v424 = *((_QWORD *)v11 + 9);
                  if (v424)
                  {
                    v425 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v424 + 32))(v424, 0);
                  }
                  else
                  {
                    v426 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
                    if (*((ausdk::AUElement ***)v11 + 7) == v426)
                      v425 = 0;
                    else
                      v425 = *v426;
                  }
                  ausdk::AUElement::SetParameter(v425, 0x21u, (float)*((int *)v11 + 168), 0);
                  v427 = *((_QWORD *)v11 + 9);
                  if (v427)
                  {
                    v428 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v427 + 32))(v427, 0);
                  }
                  else
                  {
                    v429 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
                    if (*((ausdk::AUElement ***)v11 + 7) == v429)
                      v428 = 0;
                    else
                      v428 = *v429;
                  }
                  ausdk::AUElement::SetParameter(v428, 0x22u, *((float *)v11 + 169), 0);
                  v430 = *((_QWORD *)v11 + 9);
                  if (v430)
                  {
                    v431 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v430 + 32))(v430, 0);
                  }
                  else
                  {
                    v432 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
                    if (*((ausdk::AUElement ***)v11 + 7) == v432)
                      v431 = 0;
                    else
                      v431 = *v432;
                  }
                  ausdk::AUElement::SetParameter(v431, 0x25u, *((float *)v11 + 190), 0);
                  if (v396)
                    memcpy(v396, *(const void **)(*(_QWORD *)(*((_QWORD *)v11 + 86) + 56) + 96), 4 * *((unsigned int *)v11 + 84));
                  if (v395)
                    memcpy(v395, *(const void **)(*(_QWORD *)(*((_QWORD *)v11 + 86) + 56) + 56), 4 * *((unsigned int *)v11 + 84));
                  if (Parameter == 0.0)
                  {
                    LODWORD(__A.realp) = 0;
                    LODWORD(__Z.realp) = 0;
                    LODWORD(__C.realp) = 0;
                    v433 = *((_QWORD *)v11 + 88);
                    v434 = *((_QWORD *)v11 + 87);
                    v435 = *((_QWORD *)v11 + 86);
                    v436 = 16;
                    if (*(int *)(*(_QWORD *)(v435 + 48) + 568) > 0)
                      v436 = 40;
                    memcpy(*((void **)v11 + 87), *(const void **)(*(_QWORD *)(v435 + v436) + 48), 4 * *(int *)(*(_QWORD *)(v435 + v436) + 36));
                    *(float *)&v437 = 0.0;
                    if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 86) + 48) + 224))
                      goto LABEL_412;
                    v438 = ((unint64_t)(v433 - v434) >> 2);
                    vDSP_vsub(*((const float **)v11 + 87), 1, *((const float **)v11 + 89), 1, *((float **)v11 + 91), 1, v438);
                    vDSP_vsq(*((const float **)v11 + 91), 1, *((float **)v11 + 91), 1, v438);
                    vDSP_sve(*((const float **)v11 + 91), 1, (float *)&__A, v438);
                    vDSP_vsq(*((const float **)v11 + 89), 1, *((float **)v11 + 93), 1, v438);
                    vDSP_sve(*((const float **)v11 + 93), 1, (float *)&__Z, v438);
                    vDSP_vsq(*((const float **)v11 + 87), 1, *((float **)v11 + 93), 1, v438);
                    vDSP_sve(*((const float **)v11 + 93), 1, (float *)&__C, v438);
                    v439 = *(float *)&__Z.realp + 0.00000001;
                    *(float *)&__Z.realp = (float)(*(float *)&__C.realp * 0.2) + (float)(v439 * 0.8);
                    v440 = *(float *)&__A.realp * 100.0 / *(float *)&__Z.realp;
                    *(float *)&v437 = 800.0;
                    if (v440 > 800.0)
LABEL_412:
                      v440 = *(float *)&v437;
                    std::valarray<float>::__assign_range((uint64_t)v11 + 712, *((_BYTE **)v11 + 87), *((_BYTE **)v11 + 88));
                  }
                  else
                  {
                    v440 = 0.0;
                  }
                  v441 = *((_QWORD *)v11 + 9);
                  if (v441)
                  {
                    v442 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v441 + 32))(v441, 0);
                  }
                  else
                  {
                    v443 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
                    if (*((ausdk::AUElement ***)v11 + 7) == v443)
                      v442 = 0;
                    else
                      v442 = *v443;
                  }
                  ausdk::AUElement::SetParameter(v442, 3u, v440, 0);
                  v17 = 0;
                  goto LABEL_421;
                }
                v320 = (float *)*((_QWORD *)v546 + 13);
                if ((int)v317 <= 1)
                {
                  v321 = 0;
                  v324 = *v320;
                }
                else
                {
                  v321 = 0;
                  v322 = *v316;
                  for (i = 1; i != v317; ++i)
                  {
                    if (v316[i] >= v322)
                    {
                      v321 = i;
                      v322 = v316[i];
                    }
                  }
                  v324 = v320[v321];
                  v325 = v321 - 1;
                  if (v321 >= 1)
                  {
                    v326 = v320[v325];
                    if (v321 == 1)
                    {
                      v321 = 1;
                      v467 = v320[v325];
                    }
                    else
                    {
                      v467 = v320[v321 - 2];
                    }
                    goto LABEL_275;
                  }
                }
                v326 = v324;
                v467 = v324;
LABEL_275:
                v327 = v324;
                if (v321 < (int)v317 - 1)
                  v327 = v320[v321 + 1];
                v328 = v327;
                if (v321 < (int)v317 - 2)
                  v328 = v320[v321 + 2];
                v329 = vabds_f32(v467, v326);
                v330 = vabds_f32(v326, v324);
                v331 = vabds_f32(v324, v327);
                v332 = vabds_f32(v327, v328);
                v333 = vabds_f32(v327, v326);
                v334 = vabds_f32(v467, v324);
                if (vabds_f32(v324, v328) <= 10.0
                  && v334 <= 10.0
                  && v333 <= 10.0
                  && v332 <= 8.0
                  && v331 <= 8.0
                  && v330 <= 8.0
                  && v329 <= 8.0)
                {
                  v341 = *((int *)v550 + 4);
                  v342 = *(float **)(v44 + 112);
                  LODWORD(__Z.realp) = 0;
                  LODWORD(__C.realp) = 0;
                  LODWORD(v556.realp) = 0;
                  v344 = *((_DWORD *)v547 + 18);
                  v343 = *((_DWORD *)v547 + 19);
                  if (*((_DWORD *)v547 + 17) == 1)
                  {
                    if (v344 >= 1)
                    {
                      v345 = *((unsigned int *)v547 + 18);
                      v346 = *((_DWORD *)v547 + 19);
                      vDSP_vfill((const float *)&v556, v316, 1, v345);
                      vDSP_vfill((const float *)&v556, v342, 1, v345);
                      v344 = v345;
                      v343 = v346;
                    }
                    v347 = v343 + 1;
                    if ((int)v317 - (v343 + 1) >= 1)
                    {
                      __srcf = v344;
                      v539 = v343;
                      vDSP_vfill((const float *)&v556, &v316[v347], 1, (v317 - v347));
                      vDSP_vfill((const float *)&v556, &v342[v347], 1, (v317 - v347));
                      v344 = __srcf;
                      v343 = v539;
                    }
                  }
                  v348 = (float *)v344;
                  if (v344 <= v343)
                  {
                    v507 = v316;
                    v483 = v53;
                    v540 = v343;
                    v352 = v343 + 1;
                    v353 = (float *)&__A + v344;
                    v497 = (float *)v344;
                    v502 = v342;
                    v354 = &v342[v344];
                    v355 = 4 * v344 * (int)v341;
                    v351 = 0.0;
                    __srce = v344;
                    v356 = v344;
                    v357 = 0.0;
                    do
                    {
                      v358 = (const float *)(*((_QWORD *)v547 + 1) + v355);
                      vDSP_svesq((const float *)(*(_QWORD *)v547 + v355), 1, (float *)&__Z, v341);
                      vDSP_svesq(v358, 1, (float *)&__C, v341);
                      v359 = *(float *)&__Z.realp + *(float *)&__C.realp;
                      v360 = (float)(1.0 / (float)(int)v341) * (float)(*(float *)&__Z.realp + *(float *)&__C.realp);
                      *v354++ = (float)(*(float *)&__Z.realp + *(float *)&__C.realp) + 1.0e-20;
                      v361 = sqrtf(v360) + 0.02;
                      *v353++ = v361;
                      v351 = v351 + (float)((float)v356 * v359);
                      v350 = v359 + *(float *)&v556.realp;
                      *(float *)&v556.realp = v350;
                      v357 = v357 + v361;
                      ++v356;
                      v355 += 4 * v341;
                    }
                    while (v352 != v356);
                    v349 = v357 + v357;
                    v316 = v507;
                    v11 = v508;
                    v289 = v546;
                    v287 = v550;
                    v53 = v483;
                    v342 = v502;
                    v343 = v540;
                    v344 = __srce;
                    v348 = v497;
                  }
                  else
                  {
                    v349 = 0.0;
                    v350 = *(float *)&v556.realp;
                    v351 = 0.0;
                  }
                  *((float *)v11 + 166) = v350;
                  v362 = 1.0 / (float)(v350 + 1.0e-20);
                  v363 = (float)((float)((float)(int)v317 + -0.5) - (float)(v351 * v362)) * v319;
                  if (v363 < 0.0)
                    v363 = 0.0;
                  *((float *)v11 + 167) = v363;
                  v309 = (float *)v533;
                  if (v344 <= v343)
                  {
                    v364 = v343 - v344 + 1;
                    v365 = &v342[(_QWORD)v348];
                    v366 = &v316[(_QWORD)v348];
                    v367 = (float *)&__A + (_QWORD)v348;
                    v368 = (float)(v318 + 1.0) / v349;
                    do
                    {
                      v369 = *v367++;
                      *v366++ = (float)((float)(1.0 - v318) / (float)((float)(int)v317 + (float)(int)v317))
                              + (float)(v368 * v369);
                      *v365 = v362 * *v365;
                      ++v365;
                      --v364;
                    }
                    while (v364);
                  }
                }
                goto LABEL_314;
              }
              *(_DWORD *)(v44 + 220) = 0;
            }
            v531 = (float *)v179;
            v180 = (DSPComplex *)__Nc;
            goto LABEL_220;
          }
LABEL_171:
          v237 = *(_DWORD *)(v44 + 236);
          if (v237 < 1)
          {
            v238 = 0;
            v91 = v532;
          }
          else
          {
            v238 = 0;
            v239 = v210;
            v240 = *(unsigned int *)(v44 + 236);
            v91 = v532;
            do
            {
              v241 = *v239++;
              v238 += v241;
              --v240;
            }
            while (v240);
          }
          v242 = *(_DWORD *)(v44 + 240);
          if (v242 < 1)
          {
            v246 = 0.0;
          }
          else
          {
            v243 = 0;
            v244 = *(unsigned int *)(v44 + 240);
            do
            {
              v245 = *v210++;
              v243 += v245;
              --v244;
            }
            while (v244);
            v246 = (float)v243 * 1.5;
          }
          v247 = *(_DWORD *)(v44 + 248);
          if (v247 < 1)
          {
            v248 = 0;
          }
          else
          {
            v248 = 0;
            v249 = *(unsigned int *)(v44 + 248);
            do
            {
              v250 = *v227++;
              v248 += v250;
              --v249;
            }
            while (v249);
          }
          v251 = v206[1];
          if (*v206 < v251 || v251 < v206[2])
          {
            v252 = *(_BYTE *)v44 && v238 == v237;
            v253 = v252 && v248 == v247;
            if (v253 && v246 > (float)v242)
              *((_DWORD *)v91 + 15) = 1;
          }
          v179 = __na;
          goto LABEL_200;
        }
      }
      if (v232 < v228)
        goto LABEL_171;
      goto LABEL_169;
    }
    if (*(_DWORD *)(v44 + 140) != 1)
    {
LABEL_142:
      if (*(int *)(v74 + 100) >= 1)
        *((_QWORD *)v527[5] + 9) = *((_QWORD *)v80 + 9);
      goto LABEL_144;
    }
    LODWORD(__A.realp) = 0;
    v93 = *((_DWORD *)v547 + 18);
    v92 = *((_DWORD *)v547 + 19);
    v94 = *((unsigned int *)v550 + 11);
    v95 = 1.0;
    if ((int)v94 < 1)
    {
      v97 = 0;
      v100 = 0;
      v99 = 0.0;
      goto LABEL_116;
    }
    v96 = 0;
    v97 = 0;
    v98 = *(_QWORD *)(v44 + 112);
    v99 = 0.0;
    do
    {
      if (*(float *)(v98 + 4 * v96) > v99)
      {
        v97 = v96;
        v99 = *(float *)(v98 + 4 * v96);
      }
      ++v96;
    }
    while (v94 != v96);
    v100 = 0;
    if ((int)v94 < 4 || v550[6] >= 12.0)
    {
LABEL_116:
      v164 = *(float *)(v44 + 584) * 0.95;
      *(float *)(v44 + 584) = v164;
      if ((float)(v99 * 0.9) <= v164)
      {
        v97 = *(_DWORD *)(v44 + 588);
      }
      else
      {
        *(_DWORD *)(v44 + 588) = v97;
        *(float *)(v44 + 584) = v99;
      }
      v165 = (v97 - *((_DWORD *)v547 + 20)) & ~((v97 - *((_DWORD *)v547 + 20)) >> 31);
      if (v165 + *((_DWORD *)v547 + 21) >= (int)v94)
        v166 = v94;
      else
        v166 = v165 + *((_DWORD *)v547 + 21);
      vDSP_sve((const float *)(*(_QWORD *)(v44 + 112) + 4 * v165), 1, (float *)&__A, v166 - v165);
      v167 = v166 - 1 - v165 + v100;
      if (v167 <= 1)
        v167 = 1;
      v168 = v99 / (float)((float)(v95 * (float)(*(float *)&__A.realp - v99)) / (float)v167);
      v169 = *(float *)(v44 + 544);
      if (v169 <= 2.0 || v168 <= 5.0)
      {
        v79 = v546;
        v88 = v549;
        v74 = (uint64_t)v550;
        if (v169 > 2.0)
        {
          v80 = v547;
          if (v168 < 3.0)
          {
            ++v92;
            --v93;
          }
          goto LABEL_139;
        }
      }
      else
      {
        if (v93 <= v165)
          v170 = 0;
        else
          v170 = -1;
        if (v93 < v165)
          v170 = 1;
        v93 += v170;
        if (v92 >= v166 - 1)
          v92 -= v92 >= v166;
        else
          ++v92;
        v79 = v546;
        v88 = v549;
        v74 = (uint64_t)v550;
      }
      v80 = v547;
LABEL_139:
      v171 = v94 - 1;
      if (v92 < (int)v94)
        v171 = v92;
      *((_DWORD *)v80 + 18) = v93 & ~(v93 >> 31);
      *((_DWORD *)v80 + 19) = v171;
      v91 = v532;
      goto LABEL_142;
    }
    v101 = v97 + 1;
    if ((_DWORD)v101 == (_DWORD)v94)
    {
      v102 = *(float *)(v98 + 4 * v97 - 4);
    }
    else
    {
      if (v97)
      {
        v99 = v99 + (float)((float)(*(float *)(v98 + 4 * v97 - 4) + *(float *)(v98 + 4 * v101)) * 0.5);
LABEL_115:
        v95 = 2.0;
        v100 = -1;
        goto LABEL_116;
      }
      v102 = *(float *)(v98 + 4);
    }
    v99 = v99 + v102;
    goto LABEL_115;
  }
  if (v18 != v19)
  {
    Element = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)v11 + 128), 0);
    memcpy(v19, v18, (*(_DWORD *)(Element + 104) * a3));
    v29 = *((_QWORD *)v11 + 9);
    if (v29)
    {
      v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
    }
    else
    {
      v31 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
      if (*((ausdk::AUElement ***)v11 + 7) == v31)
        v30 = 0;
      else
        v30 = *v31;
    }
    ausdk::AUElement::SetParameter(v30, 3u, 0.0, 0);
    v32 = *((_QWORD *)v11 + 9);
    if (v32)
    {
      v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
    }
    else
    {
      v34 = (ausdk::AUElement **)*((_QWORD *)v11 + 6);
      if (*((ausdk::AUElement ***)v11 + 7) == v34)
        v33 = 0;
      else
        v33 = *v34;
    }
    ausdk::AUElement::SetParameter(v33, 0x24u, 0.0, 0);
  }
  return 0;
}

uint64_t AULinearEchoCancelerV3::Render(AULinearEchoCancelerV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AULinearEchoCancelerV3 *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AULinearEchoCancelerV3::BusCountWritable(AULinearEchoCancelerV3 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AULinearEchoCancelerV3::GetParameterInfo(AULinearEchoCancelerV3 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x29)
  {
    v6 = off_1E69CE388[a3];
    v7 = dword_1B664AD24[a3];
    v8 = flt_1B664ADCC[a3];
    v9 = flt_1B664AE74[a3];
    v10 = flt_1B664AF1C[a3];
    v11 = dword_1B664AFC4[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AULinearEchoCancelerV3::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AULinearEchoCancelerV3::GetLatency(AULinearEchoCancelerV3 *this)
{
  return 0.0;
}

double AULinearEchoCancelerV3::GetTailTime(AULinearEchoCancelerV3 *this)
{
  return 0.0;
}

uint64_t AULinearEchoCancelerV3::SupportsTail(AULinearEchoCancelerV3 *this)
{
  return 1;
}

BOOL AULinearEchoCancelerV3::StreamFormatWritable(AULinearEchoCancelerV3 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AULinearEchoCancelerV3::SupportedNumChannels(AULinearEchoCancelerV3 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AULinearEchoCancelerV3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AULinearEchoCancelerV3::ValidFormat(AULinearEchoCancelerV3 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AULinearEchoCancelerV3::ShouldBypassEffect(AULinearEchoCancelerV3 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AULinearEchoCancelerV3::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

uint64_t AULinearEchoCancelerV3::InitializeEC(AULinearEchoCancelerV3 *this)
{
  double v2;
  uint64_t v3;
  ausdk::AUElement *v4;
  ausdk::AUElement **v5;
  float Parameter;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  unsigned int v10;
  float v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  float v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  uint64_t v45;
  ausdk::AUElement *v46;
  ausdk::AUElement **v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  ausdk::AUElement *v52;
  ausdk::AUElement **v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement *v58;
  ausdk::AUElement **v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  uint64_t v93;
  ausdk::AUElement *v94;
  ausdk::AUElement **v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  ausdk::AUElement **v98;
  uint64_t v99;
  ausdk::AUElement *v100;
  ausdk::AUElement **v101;
  uint64_t v102;
  ausdk::AUElement *v103;
  ausdk::AUElement **v104;
  float v105;
  int *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  int *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  int *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  int *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  ausdk::AUElement *v124;
  ausdk::AUElement **v125;

  v2 = *(double *)(ausdk::AUScope::SafeGetElement((AULinearEchoCancelerV3 *)((char *)this + 80), 0) + 80);
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0);
  }
  else
  {
    v5 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v5)
      v4 = 0;
    else
      v4 = *v5;
  }
  Parameter = ausdk::AUElement::GetParameter(v4, 0);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  v10 = Parameter;
  v11 = ausdk::AUElement::GetParameter(v8, 0x28u);
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  v15 = ausdk::AUElement::GetParameter(v13, 0x29u);
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v18)
      v17 = 0;
    else
      v17 = *v18;
  }
  *((_DWORD *)this + 136) = ausdk::AUElement::GetParameter(v17, 0x27u);
  if (!v10)
    return 4294956428;
  if (v11 <= 5)
    v19 = 5;
  else
    v19 = v11;
  (*(void (**)(AULinearEchoCancelerV3 *))(*(_QWORD *)this + 64))(this);
  *((_DWORD *)this + 139) = v2;
  v20 = *((_DWORD *)this + 84);
  v21 = (float)v2 / (float)((float)v20 * 1000.0);
  v22 = (float)(ceilf(v21 * (float)v10) * (float)v20);
  *((_DWORD *)this + 135) = v22;
  v23 = (float)(ceilf(v21 * (float)v19) * (float)v20);
  v24 = (float)(ceilf(v21 * (float)v15) * (float)v20);
  *((_DWORD *)this + 137) = v23;
  v25 = v20 + v23;
  if (v23 < v24)
    v25 = v24;
  *((_DWORD *)this + 138) = v25;
  if (v25 >= v22)
  {
    *((_DWORD *)this + 138) = v22;
    *((_QWORD *)this + 68) = 0;
  }
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v27 = 0;
    else
      v27 = *v29;
  }
  *((float *)this + 140) = ausdk::AUElement::GetParameter(v27, 5u);
  v30 = *((_QWORD *)this + 9);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  *((_DWORD *)this + 142) = ausdk::AUElement::GetParameter(v31, 9u);
  v33 = *((_QWORD *)this + 9);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  *((_DWORD *)this + 143) = ausdk::AUElement::GetParameter(v34, 0xAu);
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  *((_DWORD *)this + 144) = ausdk::AUElement::GetParameter(v37, 0xBu);
  v39 = *((_QWORD *)this + 9);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v40, 0xCu);
  v42 = *((_QWORD *)this + 9);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v43, 0xDu);
  v45 = *((_QWORD *)this + 9);
  if (v45)
  {
    v46 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 0);
  }
  else
  {
    v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v47)
      v46 = 0;
    else
      v46 = *v47;
  }
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v46, 0xEu);
  v48 = *((_QWORD *)this + 9);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
  }
  else
  {
    v50 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  *((float *)this + 148) = ausdk::AUElement::GetParameter(v49, 0xFu);
  v51 = *((_QWORD *)this + 9);
  if (v51)
  {
    v52 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 0);
  }
  else
  {
    v53 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v53)
      v52 = 0;
    else
      v52 = *v53;
  }
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v52, 0x10u);
  v54 = *((_QWORD *)this + 9);
  if (v54)
  {
    v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
  }
  else
  {
    v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v56)
      v55 = 0;
    else
      v55 = *v56;
  }
  *((float *)this + 150) = ausdk::AUElement::GetParameter(v55, 0x11u);
  v57 = *((_QWORD *)this + 9);
  if (v57)
  {
    v58 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
  }
  else
  {
    v59 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v59)
      v58 = 0;
    else
      v58 = *v59;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v58, 0x12u);
  v60 = *((_QWORD *)this + 9);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v61, 0x13u);
  v63 = *((_QWORD *)this + 9);
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
  }
  else
  {
    v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v64, 0x14u);
  v66 = *((_QWORD *)this + 9);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v67, 0x15u);
  v69 = *((_QWORD *)this + 9);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
  }
  else
  {
    v71 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  *((float *)this + 155) = ausdk::AUElement::GetParameter(v70, 0x16u);
  v72 = *((_QWORD *)this + 9);
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
  }
  else
  {
    v74 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  *((float *)this + 158) = ausdk::AUElement::GetParameter(v73, 0x17u);
  v75 = *((_QWORD *)this + 9);
  if (v75)
  {
    v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
  }
  else
  {
    v77 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v77)
      v76 = 0;
    else
      v76 = *v77;
  }
  *((float *)this + 159) = ausdk::AUElement::GetParameter(v76, 0x18u);
  v78 = *((_QWORD *)this + 9);
  if (v78)
  {
    v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
  }
  else
  {
    v80 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v80)
      v79 = 0;
    else
      v79 = *v80;
  }
  *((float *)this + 156) = ausdk::AUElement::GetParameter(v79, 0x19u);
  v81 = *((_QWORD *)this + 9);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
  }
  else
  {
    v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  *((float *)this + 157) = ausdk::AUElement::GetParameter(v82, 0x1Au);
  v84 = *((_QWORD *)this + 9);
  if (v84)
  {
    v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
  }
  else
  {
    v86 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v86)
      v85 = 0;
    else
      v85 = *v86;
  }
  *((float *)this + 160) = ausdk::AUElement::GetParameter(v85, 0x1Bu);
  v87 = *((_QWORD *)this + 9);
  if (v87)
  {
    v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
  }
  else
  {
    v89 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v89)
      v88 = 0;
    else
      v88 = *v89;
  }
  *((_BYTE *)this + 644) = ausdk::AUElement::GetParameter(v88, 0x1Cu) != 0.0;
  v90 = *((_QWORD *)this + 9);
  if (v90)
  {
    v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
  }
  else
  {
    v92 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v92)
      v91 = 0;
    else
      v91 = *v92;
  }
  *((float *)this + 162) = ausdk::AUElement::GetParameter(v91, 0x1Du);
  v93 = *((_QWORD *)this + 9);
  if (v93)
  {
    v94 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 0);
  }
  else
  {
    v95 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v95)
      v94 = 0;
    else
      v94 = *v95;
  }
  *((_DWORD *)this + 163) = (int)ausdk::AUElement::GetParameter(v94, 0x1Eu);
  v96 = *((_QWORD *)this + 9);
  if (v96)
  {
    v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 0);
  }
  else
  {
    v98 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v98)
      v97 = 0;
    else
      v97 = *v98;
  }
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v97, 0x1Fu);
  v99 = *((_QWORD *)this + 9);
  if (v99)
  {
    v100 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v99 + 32))(v99, 0);
  }
  else
  {
    v101 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v101)
      v100 = 0;
    else
      v100 = *v101;
  }
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v100, 0x20u);
  v102 = *((_QWORD *)this + 9);
  if (v102)
  {
    v103 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 32))(v102, 0);
  }
  else
  {
    v104 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v104)
      v103 = 0;
    else
      v103 = *v104;
  }
  v105 = ausdk::AUElement::GetParameter(v103, 0x26u);
  *((_DWORD *)this + 141) = v105;
  aec_v3::aec_init((uint64_t *)this + 86, *((_DWORD *)this + 139), *((_DWORD *)this + 135), *((_DWORD *)this + 84), *((_DWORD *)this + 142), *((_DWORD *)this + 143), *((unsigned __int8 *)this + 644), v105, *((float *)this + 145), *((float *)this + 146), *((float *)this + 147), *((float *)this + 148), *((float *)this + 149), *((float *)this + 150), *((float *)this + 151), *((float *)this + 152), *(_QWORD *)((char *)this + 612), COERCE_FLOAT(HIDWORD(*(_QWORD *)((char *)this + 612))), *((float *)this + 155),
    *((_QWORD *)this + 79),
    HIDWORD(*((_QWORD *)this + 79)),
    *((_QWORD *)this + 78),
    HIDWORD(*((_QWORD *)this + 78)),
    *((float *)this + 160),
    *((_DWORD *)this + 162),
    *((_DWORD *)this + 164),
    *((_DWORD *)this + 165),
    *((_QWORD *)this + 68),
    HIDWORD(*((_QWORD *)this + 68)),
    *((_DWORD *)this + 138));
  v106 = (int *)**((_QWORD **)this + 86);
  if (v106)
    v107 = v106[11] * (uint64_t)(*v106 >> 1);
  else
    v107 = 0;
  std::valarray<float>::resize((uint64_t)this + 696, v107, 0.0);
  v108 = (void *)*((_QWORD *)this + 87);
  v109 = *((_QWORD *)this + 88) - (_QWORD)v108;
  if (v109 >= 1)
    bzero(v108, 4 * (((unint64_t)v109 >> 2) - ((unint64_t)v109 > 3)) + 4);
  v110 = (int *)**((_QWORD **)this + 86);
  if (v110)
    v111 = v110[11] * (uint64_t)(*v110 >> 1);
  else
    v111 = 0;
  std::valarray<float>::resize((uint64_t)this + 712, v111, 0.0);
  v112 = (void *)*((_QWORD *)this + 89);
  v113 = *((_QWORD *)this + 90) - (_QWORD)v112;
  if (v113 >= 1)
    bzero(v112, 4 * (((unint64_t)v113 >> 2) - ((unint64_t)v113 > 3)) + 4);
  v114 = (int *)**((_QWORD **)this + 86);
  if (v114)
    v115 = v114[11] * (uint64_t)(*v114 >> 1);
  else
    v115 = 0;
  std::valarray<float>::resize((uint64_t)this + 728, v115, 0.0);
  v116 = (void *)*((_QWORD *)this + 91);
  v117 = *((_QWORD *)this + 92) - (_QWORD)v116;
  if (v117 >= 1)
    bzero(v116, 4 * (((unint64_t)v117 >> 2) - ((unint64_t)v117 > 3)) + 4);
  v118 = (int *)**((_QWORD **)this + 86);
  if (v118)
    v119 = v118[11] * (uint64_t)(*v118 >> 1);
  else
    v119 = 0;
  std::valarray<float>::resize((uint64_t)this + 744, v119, 0.0);
  v120 = (void *)*((_QWORD *)this + 93);
  v121 = *((_QWORD *)this + 94) - (_QWORD)v120;
  if (v121 >= 1)
    bzero(v120, 4 * (((unint64_t)v121 >> 2) - ((unint64_t)v121 > 3)) + 4);
  v122 = (float)*((unsigned int *)this + 135);
  v123 = *((_QWORD *)this + 9);
  if (v123)
  {
    v124 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v123 + 32))(v123, 0);
  }
  else
  {
    v125 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v125)
      v124 = 0;
    else
      v124 = *v125;
  }
  ausdk::AUElement::SetParameter(v124, 1u, v122, 0);
  return 0;
}

uint64_t std::valarray<float>::__assign_range(uint64_t a1, _BYTE *__src, _BYTE *a3)
{
  size_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v11;

  v6 = a3 - __src;
  v7 = (a3 - __src) >> 2;
  v8 = *(_BYTE **)a1;
  v9 = *(_BYTE **)(a1 + 8);
  if (v7 == (v9 - v8) >> 2)
  {
    if (a3 != __src)
      memmove(v8, __src, a3 - __src);
  }
  else
  {
    if (v8)
    {
      if (v9 != v8)
        *(_QWORD *)(a1 + 8) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    if ((v6 & 0x8000000000000000) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(v6);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v11[4 * v7];
    if (__src != a3)
      memcpy(v11, __src, ((v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  return a1;
}

uint64_t VoiceProcessorV4::RunUplinkHardwareDSP(VoiceProcessorV4 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  int v13;
  int v14;
  const AudioBufferList *v15;
  VoiceProcessorV2 *v16;
  unsigned int *v17;
  AudioBufferList *v18;
  UInt32 mDataByteSize;
  unsigned int v20;
  unsigned int v21;
  const AudioTimeStamp *v22;
  AudioBufferList *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  const AudioBufferList *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  _OWORD *v35;
  const AudioBufferList *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  double mSampleTime;
  double v41;
  double v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  Float64 v46;
  UInt64 mHostTime;
  Float64 mRateScalar;
  AudioTimeStampFlags mFlags;
  int *v50;
  float v51;
  unsigned int v52;
  const AudioBufferList *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE buf[40];
  UInt64 v61;
  __int16 v62;
  Float64 v63;
  __int16 v64;
  AudioTimeStampFlags v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 12872;
  v7 = (unsigned int *)((char *)this + 2484);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (*((_DWORD *)this + 620))
  {
    v9 = flt_1B662D228[*((_BYTE *)this + 476) == 0];
    if (*((_BYTE *)this + 476))
      VoiceProcessorV2::LogIOError((uint64_t)this, v9, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: tryer acquire failed");
    else
      VoiceProcessorV2::LogIOError((uint64_t)this, v9, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: not ok to process?!");
LABEL_7:
    CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3112);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV4 *)((char *)this + 2576));
    v10 = 1937006964;
    if (*((_DWORD *)this + 3112) == 1)
      VoiceProcessorV2::LogNonTransientErrors(this, 1);
    goto LABEL_96;
  }
  if (!*((_BYTE *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.005, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: not ok to process?!");
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 15897))
  {
    if (*((_QWORD *)this + 1571))
    {
      v11 = (double)mach_absolute_time() * 0.0000000416666667;
      *((double *)this + 1984) = v11;
      if (*((double *)this + 1985) == 0.0)
        *((double *)this + 1985) = v11;
    }
  }
  *((_DWORD *)this + 578) = *((_DWORD *)this + 576);
  v12 = atomic_load((unsigned int *)this + 577);
  *((_DWORD *)this + 576) = v12;
  *((_DWORD *)this + 581) = *((_DWORD *)this + 579);
  v13 = atomic_load((unsigned int *)this + 580);
  *((_DWORD *)this + 579) = v13;
  if (v6[3025])
  {
    if (v13 != *((_DWORD *)this + 581))
      VoiceProcessorV2::PListWriteSetDeviceOrientationParameters(this, v13);
    v14 = *((_DWORD *)this + 576);
    if (v14 != *((_DWORD *)this + 578) && v6[3025])
      VoiceProcessorV2::PListWriteSetUIOrientationParameters(this, v14);
  }
  CADeprecated::CAMutex::Lock((VoiceProcessorV4 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3112);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV4 *)((char *)this + 2576));
  if (*((_DWORD *)this + 3112) == 1)
    VoiceProcessorV2::LogNonTransientErrors(this, 1);
  if (!v6[3025])
  {
    v17 = (unsigned int *)((char *)this + 648);
    v18 = a2;
    goto LABEL_27;
  }
  *v6 = 1;
  v16 = (VoiceProcessorV2 *)*((_QWORD *)this + 1893);
  if (v16)
  {
    v17 = (unsigned int *)((char *)this + 648);
    VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(v16, a2, v15);
    v18 = (AudioBufferList *)*((_QWORD *)this + 1893);
LABEL_27:
    mDataByteSize = v18->mBuffers[0].mDataByteSize;
    v20 = *v17;
    goto LABEL_29;
  }
  mDataByteSize = a2->mBuffers[0].mDataByteSize;
  v20 = *((_DWORD *)this + 162);
LABEL_29:
  v21 = mDataByteSize / v20;
  v59 = 0;
  v10 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 0, mDataByteSize / v20, *((_DWORD *)this + 124), a2, &v59);
  if ((_DWORD)v10)
    goto LABEL_96;
  if (v6[3025])
  {
    v23 = (AudioBufferList *)*((_QWORD *)this + 1893);
    v24 = v59;
    if (v23)
    {
      v25 = v59;
      if (!v59)
        v25 = *((_DWORD *)this + 124);
      VoiceProcessorV2::InjectionFilesReadSignal(this, 4, v25, v23);
      v26 = v24;
      if (!(_DWORD)v24)
        v26 = *((unsigned int *)this + 124);
      v27 = (const AudioBufferList *)*((_QWORD *)this + 1893);
      if (v6[3025] || v6[3026])
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v26, v27, a3);
        v27 = (const AudioBufferList *)*((_QWORD *)this + 1893);
      }
      v28 = v24;
      if (!(_DWORD)v24)
        v28 = *((unsigned int *)this + 124);
      v29 = *((_QWORD *)this + 1994);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      {
        v57 = *((_QWORD *)this + 1994);
        v55 = v28;
        v54 = v27;
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5167);
        v29 = v57;
        v27 = v54;
        v28 = v55;
      }
      if (AudioIssueDetectorLibraryLoader(void)::libSym)
        goto LABEL_55;
    }
  }
  else
  {
    v24 = v59;
    v30 = v59;
    if (!v59)
      v30 = *((unsigned int *)this + 124);
    if (v6[3026])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v30, a2, a3);
    v28 = v24;
    if (!(_DWORD)v24)
      v28 = *((unsigned int *)this + 124);
    v29 = *((_QWORD *)this + 1994);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    {
      v58 = *((_QWORD *)this + 1994);
      v56 = v28;
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5167);
      v29 = v58;
      v28 = v56;
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      v27 = a2;
LABEL_55:
      AudioIssueDetectorLibraryLoader(void)::libSym(v29, 1, 0, v27, v28, a3);
      LODWORD(v24) = v59;
    }
  }
  if ((_DWORD)v24)
  {
    v31 = (_DWORD *)*((_QWORD *)this + 129);
    if (*v31)
    {
      v32 = 0;
      v33 = 4 * v24;
      v34 = 4;
      do
      {
        bzero(*(void **)&v31[v34], v33);
        ++v32;
        v31 = (_DWORD *)*((_QWORD *)this + 129);
        v34 += 4;
      }
      while (v32 < *v31);
    }
    goto LABEL_66;
  }
  v35 = (_OWORD *)((char *)this + 624);
  if (!v6[3025])
  {
    v39 = *((_OWORD *)this + 40);
    *(_OWORD *)buf = *v35;
    *(_OWORD *)&buf[16] = v39;
    *(_QWORD *)&buf[32] = *((_QWORD *)this + 82);
    v38 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), a2, v21, *((AudioBufferList **)this + 129), 1);
LABEL_65:
    v10 = v38;
    if ((_DWORD)v38)
      goto LABEL_96;
    goto LABEL_66;
  }
  v36 = (const AudioBufferList *)*((_QWORD *)this + 1893);
  if (v36)
  {
    v37 = *((_OWORD *)this + 40);
    *(_OWORD *)buf = *v35;
    *(_OWORD *)&buf[16] = v37;
    *(_QWORD *)&buf[32] = *((_QWORD *)this + 82);
    v38 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), v36, v21, *((AudioBufferList **)this + 129), 1);
    goto LABEL_65;
  }
LABEL_66:
  if (!*((_BYTE *)this + 1689))
  {
    *((_BYTE *)this + 1689) = 1;
    mSampleTime = a3->mSampleTime;
    *((_QWORD *)this + 215) = *(_QWORD *)&a3->mSampleTime;
    *((double *)this + 213) = mSampleTime;
    if (v6[3025] || v6[3026])
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, mSampleTime, 1);
    *((_OWORD *)this + 111) = 0u;
    *((_OWORD *)this + 110) = 0u;
    *((_OWORD *)this + 109) = 0u;
    *((_OWORD *)this + 108) = 0u;
    *((_DWORD *)this + 478) = 0;
  }
  v41 = *((double *)this + 213);
  v42 = a3->mSampleTime;
  if (v41 == a3->mSampleTime)
  {
    *((_QWORD *)this + 214) = 0;
  }
  else
  {
    if (v6[3025] || v6[3026])
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v41, v42, 1);
      v42 = a3->mSampleTime;
      v41 = *((double *)this + 213);
    }
    *((double *)this + 214) = v42 - v41;
    if (v42 < v41)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v43 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v44 = (*v43 ? *v43 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = *((_QWORD *)this + 213);
          v46 = a3->mSampleTime;
          mHostTime = a3->mHostTime;
          mRateScalar = a3->mRateScalar;
          mFlags = a3->mFlags;
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "vpProcessUplink_v4.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 159;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v45;
          *(_WORD *)&buf[28] = 2048;
          *(Float64 *)&buf[30] = v46;
          *(_WORD *)&buf[38] = 2048;
          v61 = mHostTime;
          v62 = 2048;
          v63 = mRateScalar;
          v64 = 1024;
          v65 = mFlags;
          _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", buf, 0x40u);
        }
      }
      v50 = (int *)*((_QWORD *)this + 1570);
      if (v50 && (v6[3025] || v6[3026]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v50, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessUplink_v4.cpp", 159, "RunUplinkHardwareDSP", "mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 213), a3->mSampleTime, a3->mHostTime, a3->mRateScalar, a3->mFlags);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.008, (float)*((unsigned int *)this + 3112), 0.0, 0.0, "mic sample time jumped backwards");
      v42 = a3->mSampleTime;
    }
  }
  LODWORD(v41) = *((_DWORD *)this + 124);
  *((double *)this + 213) = v42 + (double)*(unint64_t *)&v41;
  VoiceProcessorV2::LoadMatchingReferenceForMicSignalAndFillTsMic(this, v22, a3->mSampleTime);
  v51 = *((float *)this + 350);
  *((_BYTE *)this + 1404) = v51 != 0.0;
  if (v51 != 0.0)
    VoiceProcessorV2::PreSRCMicClipDetection(this);
  v10 = 0;
  do
LABEL_96:
    v52 = __ldaxr(v7);
  while (__stlxr(v52 - 1, v7));
  return v10;
}

void sub_1B62858AC(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV4::RunUplinkEchoDSP(VoiceProcessorV4 *this, const AudioTimeStamp *a2)
{
  return (*(uint64_t (**)(VoiceProcessorV4 *, const AudioTimeStamp *))(*(_QWORD *)this + 688))(this, a2);
}

uint64_t VoiceProcessorV4::RunUplinkDynamicsDSP(VoiceProcessorV4 *this, AudioBufferList *ioData, AudioTimeStamp *a3, uint64_t a4)
{
  char *v6;
  OpaqueAudioComponentInstance *v7;
  uint64_t v10;
  OpaqueAudioComponentInstance *v11;
  OpaqueAudioComponentInstance *v12;
  AudioUnitParameterID v13;
  AudioBufferList ioActionFlags;
  AudioUnitParameterValue outValue[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 15897;
  if ((*((_BYTE *)this + 4664) & 0x10) != 0 && (*((_BYTE *)this + 4680) & 0x10) != 0)
  {
    v7 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 415);
    if (v7)
    {
      ioActionFlags.mNumberBuffers = 512;
      AudioUnitProcess(v7, &ioActionFlags.mNumberBuffers, a3, a4, ioData);
      if (*(_WORD *)v6)
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x30u, a4, ioData, a3);
    }
  }
  if (*v6)
  {
    *(_QWORD *)outValue = 0;
    v10 = *((_QWORD *)this + 582);
    if ((v10 & 0x1000000000000000) != 0 && (*((_BYTE *)this + 4679) & 0x10) != 0)
    {
      v11 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 407);
      if (v11)
      {
        AudioUnitGetParameter(v11, 2u, 0, 0, outValue);
        v10 = *((_QWORD *)this + 582);
      }
    }
    if ((v10 & 0x80000000000000) != 0
      && (*((_BYTE *)this + 4678) & 0x80) != 0
      && (v12 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 402)) != 0)
    {
      v13 = 9;
    }
    else
    {
      if ((v10 & 0x20000000000000) == 0
        || (*((_BYTE *)this + 4678) & 0x20) == 0
        || (v12 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 400)) == 0)
      {
LABEL_20:
        *(_QWORD *)&ioActionFlags.mNumberBuffers = 1;
        *(_QWORD *)&ioActionFlags.mBuffers[0].mNumberChannels = 0x800000001;
        ioActionFlags.mBuffers[0].mData = outValue;
        if (*v6 || v6[1])
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x5Au, 2, &ioActionFlags, a3);
        return 0;
      }
      v13 = 2;
    }
    AudioUnitGetParameter(v12, v13, 0, 0, &outValue[1]);
    goto LABEL_20;
  }
  return 0;
}

uint64_t VoiceProcessorV4::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  VoiceProcessorV4 *v3;
  size_t v4;
  int v5;
  uint64_t v6;
  const AudioBufferList *v7;
  const AudioBufferList *v8;
  unsigned int v9;
  unsigned int *v10;
  void *v11;
  const void **v12;
  _QWORD *v13;
  NSObject *v14;
  int v15;
  int *v16;
  OpaqueAudioComponentInstance *v17;
  UInt64 v18;
  UInt64 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  AudioBufferList *v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  AudioBufferList *v30;
  uint64_t v31;
  OpaqueAudioComponentInstance *v32;
  __int128 v33;
  __int128 v34;
  OpaqueAudioComponentInstance *v35;
  __int128 v36;
  __int128 v37;
  OpaqueAudioComponentInstance *v38;
  __int128 v39;
  __int128 v40;
  OpaqueAudioComponentInstance *v41;
  __int128 v42;
  __int128 v43;
  AudioBufferList *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  OpaqueAudioComponentInstance *v53;
  __int128 v54;
  __int128 v55;
  OpaqueAudioComponentInstance *v56;
  __int128 v57;
  __int128 v58;
  OpaqueAudioComponentInstance *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  AudioUnitParameterID **v64;
  BOOL *v65;
  AudioUnitParameterValue v66;
  uint64_t v67;
  const AudioBufferList *v68;
  unsigned int v69;
  NSObject *v70;
  NSObject *v71;
  int v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const AudioBufferList *v77;
  uint64_t v78;
  uint64_t v79;
  const AudioBufferList *v80;
  uint64_t v81;
  uint64_t v82;
  const AudioBufferList *v83;
  float *v84;
  VPTimeFreqConverter *v85;
  uint64_t v86;
  VPTimeFreqConverter *v87;
  VPTimeFreqConverter *v88;
  uint64_t v89;
  VPTimeFreqConverter *v90;
  VPTimeFreqConverter *v91;
  uint64_t v92;
  VPTimeFreqConverter *v93;
  VPTimeFreqConverter *v94;
  uint64_t v95;
  OpaqueAudioComponentInstance *v96;
  float v97;
  UInt64 v98;
  UInt64 v99;
  Float64 v100;
  UInt64 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  const AudioBufferList *v105;
  _BOOL4 v106;
  int v107;
  uint64_t v108;
  int v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  OpaqueAudioComponentInstance *v113;
  OpaqueAudioComponentInstance *v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  Float64 v118;
  Float64 v119;
  unsigned int v120;
  Float64 v121;
  UInt64 v122;
  __int128 v123;
  __int128 v124;
  AudioUnitParameterValue v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  const AudioBufferList *v129;
  AudioTimeStamp *v130;
  uint64_t v131;
  unsigned int v132;
  const AudioBufferList *v133;
  const AudioBufferList *v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  const AudioBufferList *v138;
  UInt64 v139;
  uint64_t v140;
  const AudioBufferList *v141;
  AudioUnitParameterValue v142;
  OpaqueAudioComponentInstance *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  _BOOL4 v147;
  _BOOL4 v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  OpaqueAudioComponentInstance *v152;
  UInt64 v153;
  UInt64 v154;
  __int128 v155;
  __int128 v156;
  OpaqueAudioComponentInstance *v157;
  AudioUnitParameterID v158;
  OpaqueAudioComponentInstance *v159;
  UInt64 v160;
  UInt64 v161;
  __int128 v162;
  __int128 v163;
  int v164;
  OpaqueAudioComponentInstance *v165;
  UInt64 v166;
  UInt64 v167;
  AudioBufferList **v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  const AudioBufferList *v173;
  float *v175;
  const float *v176;
  float *v177;
  unsigned int v179;
  OpaqueAudioComponentInstance *v180;
  UInt64 v181;
  UInt64 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  unsigned int v186;
  AudioUnitParameterValue v187;
  unsigned int v188;
  char v189;
  uint64_t v190;
  OpaqueAudioComponentInstance *v191;
  AudioUnitParameterID v192;
  OpaqueAudioComponentInstance *v193;
  unsigned int v194;
  OpaqueAudioComponentInstance *v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  OpaqueAudioComponentInstance *v199;
  __int128 v200;
  __int128 v201;
  OpaqueAudioComponentInstance *v202;
  __int128 v203;
  __int128 v204;
  int v205;
  OpaqueAudioComponentInstance *v206;
  _BYTE v208[12];
  unsigned int v209;
  _BYTE *v210;
  AudioUnitParameterValue v211;
  char v212;
  DSPSplitComplex v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  AudioUnitRenderActionFlags v218;
  AudioUnitParameterValue v219;
  AudioTimeStamp v220;
  AudioBufferList *v221;
  const AudioBufferList *v222;
  AudioBufferList *v223;
  UInt64 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  AudioBufferList *v228;
  const AudioBufferList *v229;
  const AudioBufferList *v230;
  AudioTimeStamp v231;
  AudioTimeStamp buf;
  uint64_t v233;

  v3 = (VoiceProcessorV4 *)this;
  v233 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned int **)(this + 1080);
  if ((_DWORD)v4)
    bzero(*(void **)(this + 1408), v4);
  if (*((_BYTE *)v3 + 1404))
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  if (!*((_BYTE *)v3 + 2083))
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  v5 = *((unsigned __int8 *)v3 + 15897);
  if (*((_BYTE *)v3 + 15897)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && *((_BYTE *)v3 + 15896)
    || *((_BYTE *)v3 + 15899))
  {
    bzero(*(void **)(*((_QWORD *)v3 + 134) + 16), *(unsigned int *)(*((_QWORD *)v3 + 134) + 12));
    v5 = *((unsigned __int8 *)v3 + 15897);
  }
  v6 = *((unsigned int *)v3 + 127);
  if (v5 || *((_BYTE *)v3 + 15898))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v6, *((const AudioBufferList **)v3 + 134), a2);
    v6 = *((unsigned int *)v3 + 127);
    v7 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
    if (*((_BYTE *)v3 + 15897))
      goto LABEL_19;
  }
  else
  {
    v7 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
  }
  if (!*((_BYTE *)v3 + 15898))
  {
    v8 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
    goto LABEL_22;
  }
LABEL_19:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v6, v7, a2);
  v6 = *((unsigned int *)v3 + 127);
  v8 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
  if (*((_BYTE *)v3 + 15897))
  {
LABEL_23:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v6, v8, a2);
    goto LABEL_24;
  }
LABEL_22:
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_23;
LABEL_24:
  v219 = 0.0;
  if (!*((_BYTE *)v3 + 2083) && !*((_BYTE *)v3 + 2085) && !*((_BYTE *)v3 + 472))
  {
    v22 = *((_QWORD *)v3 + 582);
    if (v22 || (*((_BYTE *)v3 + 4664) & 0x7F) != 0)
    {
      v218 = 0;
      *((_QWORD *)v3 + 2126) = 0;
      *((_QWORD *)v3 + 2127) = 0;
      *((_QWORD *)v3 + 2125) = 0;
      *((_DWORD *)v3 + 4250) = 1;
      *((_OWORD *)v3 + 1063) = *(_OWORD *)(*((_QWORD *)v3 + 134) + 8);
      if ((v22 & 1) != 0 && (*((_BYTE *)v3 + 4672) & 1) != 0)
      {
        this = *((_QWORD *)v3 + 347);
        if (this)
        {
          v23 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v23;
          v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v24;
          v218 = 512;
          this = AudioUnitProcess((AudioUnit)this, &v218, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
        }
      }
      MEMORY[0x1E0C80A78](this);
      v26 = (AudioBufferList *)&v208[-((v25 + 15) & 0x3FFFFFFFF0)];
      v27 = (_DWORD *)*((_QWORD *)v3 + 135);
      if (*v27)
      {
        v28 = 0;
        v29 = 2;
        v30 = v26;
        do
        {
          *(_QWORD *)&v30->mNumberBuffers = 0;
          *(_QWORD *)&v30->mBuffers[0].mNumberChannels = 0;
          v30->mBuffers[0].mData = 0;
          v30->mNumberBuffers = 1;
          v30->mBuffers[0] = *(AudioBuffer *)&v27[v29];
          ++v28;
          v29 += 4;
          ++v30;
        }
        while (v28 < *v27);
      }
      v31 = *((_QWORD *)v3 + 582);
      if ((v31 & 2) != 0 && (*((_BYTE *)v3 + 4672) & 2) != 0)
      {
        v32 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 348);
        if (v32)
        {
          v33 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v33;
          v34 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v34;
          v218 = 512;
          AudioUnitProcess(v32, &v218, &buf, *((_DWORD *)v3 + 127), v26);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v26, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v26);
          v31 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v31 & 4) != 0 && (*((_BYTE *)v3 + 4672) & 4) != 0)
      {
        v35 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 349);
        if (v35)
        {
          v36 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v36;
          v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v37;
          v218 = 512;
          AudioUnitProcess(v35, &v218, &buf, *((_DWORD *)v3 + 127), v26 + 1);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v26 + 1, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v26 + 1);
          v31 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v31 & 8) != 0 && (*((_BYTE *)v3 + 4672) & 8) != 0)
      {
        v38 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 350);
        if (v38)
        {
          v39 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v39;
          v40 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v40;
          v218 = 512;
          AudioUnitProcess(v38, &v218, &buf, *((_DWORD *)v3 + 127), v26 + 2);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v26 + 2, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v26 + 2);
          v31 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v31 & 0x10) != 0 && (*((_BYTE *)v3 + 4672) & 0x10) != 0)
      {
        v41 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 351);
        if (v41)
        {
          v42 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v42;
          v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v43;
          v218 = 512;
          v44 = v26 + 3;
          AudioUnitProcess(v41, &v218, &buf, *((_DWORD *)v3 + 127), v44);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v44, &buf);
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v44);
        }
      }
      v45 = *((_QWORD *)v3 + 135);
      v46 = *(_DWORD *)v45;
      v210 = v208;
      if (v46 < 3)
      {
        *((_OWORD *)v3 + 1051) = *(_OWORD *)(v45 + 8);
        v50 = 0;
        v49 = 0;
        if (*(_DWORD *)v45 < 2u)
        {
          v48 = 0;
          v47 = 0;
        }
        else
        {
          v47 = 0;
          *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v45 + 24);
          v48 = 1;
        }
      }
      else
      {
        if (v46 == 3 || *((_DWORD *)v3 + 3098) != 2)
        {
          v50 = 0;
          v49 = 0;
          v47 = 1;
          v48 = 2;
        }
        else
        {
          v47 = 0;
          *((_OWORD *)v3 + 1054) = *(_OWORD *)(v45 + 40);
          *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v45 + 56);
          v48 = 1;
          v49 = 2;
          v50 = 3;
        }
        v51 = v45 + 8;
        *((_OWORD *)v3 + 1051) = *(_OWORD *)(v51 + 16 * v47);
        *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v51 + 16 * v48);
      }
      v52 = *((_QWORD *)v3 + 582);
      if ((v52 & 0x40) != 0 && (*((_BYTE *)v3 + 4672) & 0x40) != 0)
      {
        v53 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 353);
        if (v53)
        {
          v54 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v54;
          v55 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v55;
          v218 = 512;
          AudioUnitProcess(v53, &v218, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16808));
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
          v52 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v52 & 0x80) != 0 && (*((_BYTE *)v3 + 4672) & 0x80) != 0)
      {
        v56 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 354);
        if (v56)
        {
          v57 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v57;
          v58 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v58;
          v218 = 512;
          AudioUnitProcess(v56, &v218, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16832));
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16832), &buf);
          v52 = *((_QWORD *)v3 + 582);
        }
      }
      if ((v52 & 0x200) != 0 && (*((_BYTE *)v3 + 4673) & 2) != 0)
      {
        v59 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 356);
        if (v59)
        {
          v60 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v60;
          v61 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v61;
          v218 = 512;
          AudioUnitProcess(v59, &v218, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16880));
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16880), &buf);
          v52 = *((_QWORD *)v3 + 582);
        }
      }
      v217 = 0;
      v62 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v62;
      v63 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v63;
      if ((v52 & 0x1000) != 0 && (*((_BYTE *)v3 + 4673) & 0x10) != 0 && *((_QWORD *)v3 + 359))
      {
        v64 = (AudioUnitParameterID **)*((_QWORD *)v3 + 2098);
        if (*((AudioUnitParameterID ***)v3 + 2099) == v64)
          goto LABEL_476;
        ECApplicator::apply(*v64, &buf, v47, &v217, (float *)v3 + 1046, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066);
        v67 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v67, (const AudioBufferList *)((char *)v3 + 16808), &buf);
          v67 = *((unsigned int *)v3 + 127);
          v68 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
          if (*((_BYTE *)v3 + 15897))
          {
LABEL_163:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v67, v68, &buf);
            goto LABEL_153;
          }
        }
        else
        {
          v68 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
        }
        if (*((_BYTE *)v3 + 15898))
          goto LABEL_163;
      }
      else
      {
        v69 = 0;
        while (((*((_DWORD *)v3 + 116) >> v69) & 1) == 0)
        {
          if (++v69 == 32)
          {
            v69 = 33;
            break;
          }
        }
        if (v69 >= **((_DWORD **)v3 + 135))
        {
          v209 = v48;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v70 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
          if (v70)
          {
            v71 = v70;
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              v72 = **((_DWORD **)v3 + 135);
              LODWORD(v231.mSampleTime) = 136315906;
              *(_QWORD *)((char *)&v231.mSampleTime + 4) = "vpProcessUplink_v4.cpp";
              WORD2(v231.mHostTime) = 1024;
              *(_DWORD *)((char *)&v231.mHostTime + 6) = 476;
              WORD1(v231.mRateScalar) = 1024;
              HIDWORD(v231.mRateScalar) = v69;
              LOWORD(v231.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&v231.mWordClockTime + 2) = v72;
              _os_log_impl(&dword_1B5ED0000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&v231, 0x1Eu);
            }
          }
          v73 = (int *)*((_QWORD *)v3 + 1570);
          if (v73 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v73, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessUplink_v4.cpp", 476, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v69, **((_DWORD **)v3 + 135));
          }
          v69 = 0;
          v48 = v209;
        }
        v74 = *((_QWORD *)v3 + 135) + 16 * v69;
        memcpy(*(void **)(*((_QWORD *)v3 + 136) + 16), *(const void **)(v74 + 16), *(unsigned int *)(v74 + 12));
      }
LABEL_153:
      v216 = 0;
      if ((*((_BYTE *)v3 + 4657) & 0x20) != 0 && (*((_BYTE *)v3 + 4673) & 0x20) != 0 && *((_QWORD *)v3 + 360))
      {
        v75 = *((_QWORD *)v3 + 2098);
        if ((unint64_t)(*((_QWORD *)v3 + 2099) - v75) <= 8)
          goto LABEL_476;
        ECApplicator::apply(*(AudioUnitParameterID **)(v75 + 8), &buf, v48, &v216, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
        v76 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v76, (const AudioBufferList *)((char *)v3 + 16832), &buf);
          v76 = *((unsigned int *)v3 + 127);
          v77 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
          if (*((_BYTE *)v3 + 15897))
          {
LABEL_166:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v76, v77, &buf);
            goto LABEL_167;
          }
        }
        else
        {
          v77 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
        }
        if (*((_BYTE *)v3 + 15898))
          goto LABEL_166;
      }
LABEL_167:
      v215 = 0;
      if ((*((_BYTE *)v3 + 4657) & 0x40) != 0 && (*((_BYTE *)v3 + 4673) & 0x40) != 0 && *((_QWORD *)v3 + 361))
      {
        v78 = *((_QWORD *)v3 + 2098);
        if ((unint64_t)(*((_QWORD *)v3 + 2099) - v78) <= 0x10)
          goto LABEL_476;
        ECApplicator::apply(*(AudioUnitParameterID **)(v78 + 16), &buf, v49, &v215, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
        v79 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v79, (const AudioBufferList *)((char *)v3 + 16856), &buf);
          v79 = *((unsigned int *)v3 + 127);
          v80 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
          if (*((_BYTE *)v3 + 15897))
          {
LABEL_177:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v79, v80, &buf);
            goto LABEL_178;
          }
        }
        else
        {
          v80 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
        }
        if (*((_BYTE *)v3 + 15898))
          goto LABEL_177;
      }
LABEL_178:
      v214 = 0;
      if ((*((_BYTE *)v3 + 4657) & 0x80) == 0 || (*((_BYTE *)v3 + 4673) & 0x80) == 0 || !*((_QWORD *)v3 + 362))
      {
LABEL_189:
        v84 = (float *)(*(_QWORD *)(*((_QWORD *)v3 + 510) + 16) + 4 * *((unsigned int *)v3 + 127));
        v213.realp = *(float **)(*((_QWORD *)v3 + 510) + 16);
        v213.imagp = v84;
        v85 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 518);
        if (v85)
          VPTimeFreqConverter::Analyze(v85, *((const float **)v3 + 2127), &v213);
        if ((*((_BYTE *)v3 + 4657) & 0x10) != 0 && (*((_BYTE *)v3 + 4673) & 0x10) != 0 && *((_QWORD *)v3 + 359))
        {
          v86 = *((unsigned int *)v3 + 127);
          v213.realp = *(float **)(*((_QWORD *)v3 + 428) + 16);
          v213.imagp = &v213.realp[v86];
          v87 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 512);
          if (v87)
          {
            VPTimeFreqConverter::Analyze(v87, *((const float **)v3 + 2103), &v213);
            v86 = *((unsigned int *)v3 + 127);
          }
          v213.realp = *(float **)(*((_QWORD *)v3 + 504) + 16);
          v213.imagp = &v213.realp[v86];
          v88 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 516);
          if (v88)
          {
            VPTimeFreqConverter::Analyze(v88, *(const float **)(*((_QWORD *)v3 + 418) + 16), &v213);
            v86 = *((unsigned int *)v3 + 127);
          }
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v86, *((const AudioBufferList **)v3 + 428), &buf);
        }
        if ((*((_BYTE *)v3 + 4657) & 0x20) != 0 && (*((_BYTE *)v3 + 4673) & 0x20) != 0 && *((_QWORD *)v3 + 360))
        {
          v89 = *((unsigned int *)v3 + 127);
          v213.realp = *(float **)(*((_QWORD *)v3 + 505) + 16);
          v213.imagp = &v213.realp[v89];
          v90 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 513);
          if (v90)
          {
            VPTimeFreqConverter::Analyze(v90, *((const float **)v3 + 2106), &v213);
            v89 = *((unsigned int *)v3 + 127);
          }
          v213.realp = *(float **)(*((_QWORD *)v3 + 504) + 32);
          v213.imagp = &v213.realp[v89];
          v91 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 517);
          if (v91)
          {
            VPTimeFreqConverter::Analyze(v91, *(const float **)(*((_QWORD *)v3 + 419) + 16), &v213);
            v89 = *((unsigned int *)v3 + 127);
          }
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v89, *((const AudioBufferList **)v3 + 505), &buf);
        }
        if ((*((_BYTE *)v3 + 4657) & 0x80) != 0 && (*((_BYTE *)v3 + 4673) & 0x80) != 0 && *((_QWORD *)v3 + 362))
        {
          v92 = *((unsigned int *)v3 + 127);
          v213.realp = *(float **)(*((_QWORD *)v3 + 506) + 16);
          v213.imagp = &v213.realp[v92];
          v93 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 515);
          if (v93)
          {
            VPTimeFreqConverter::Analyze(v93, *((const float **)v3 + 2112), &v213);
            v92 = *((unsigned int *)v3 + 127);
          }
          v213.realp = *(float **)(*((_QWORD *)v3 + 504) + 64);
          v213.imagp = &v213.realp[v92];
          v94 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2096);
          if (v94)
          {
            VPTimeFreqConverter::Analyze(v94, *(const float **)(*((_QWORD *)v3 + 420) + 16), &v213);
            v92 = *((unsigned int *)v3 + 127);
          }
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v92, *((const AudioBufferList **)v3 + 506), &buf);
        }
        v95 = *((_QWORD *)v3 + 582);
        if ((v95 & 0x20000000000) == 0
          || (*((_BYTE *)v3 + 4677) & 2) == 0
          || (v96 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 388)) == 0)
        {
LABEL_235:
          v212 = 0;
          if ((v95 & 0x20000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x20) != 0 && *((_QWORD *)v3 + 376))
          {
            v106 = 1;
            v107 = 1;
          }
          else if ((v95 & 0x100000000) != 0 && (*((_BYTE *)v3 + 4676) & 1) != 0)
          {
            v107 = 0;
            v106 = *((_QWORD *)v3 + 379) != 0;
          }
          else
          {
            v106 = 0;
            v107 = 0;
          }
          v108 = v95 & 0x40000000;
          if ((v95 & 0x40000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
          {
            v109 = 1;
            v107 = 1;
            v110 = 1;
            if ((v95 & 0x80000000) == 0)
              goto LABEL_260;
          }
          else
          {
            if ((v95 & 0x80000000) == 0)
            {
              v110 = 0;
              v109 = 1;
              goto LABEL_260;
            }
            v109 = 1;
            if ((*((_BYTE *)v3 + 4675) & 0x80) != 0)
            {
              v111 = *((_QWORD *)v3 + 378);
              v110 = v111 != 0;
              if (v111)
                v109 = 2;
              else
                v109 = 1;
            }
            else
            {
              v110 = 0;
            }
          }
          v112 = *((_QWORD *)v3 + 584);
          if ((v112 & 0x80000000) != 0
            && *((_QWORD *)v3 + 378)
            && (v95 & v112 & 0x100000000) != 0
            && *((_QWORD *)v3 + 379))
          {
            v107 = 2;
            v109 = 2;
          }
LABEL_260:
          if ((v95 & 0x20000000) == 0)
            goto LABEL_279;
          if ((*((_BYTE *)v3 + 4675) & 0x20) == 0)
            goto LABEL_279;
          v113 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
          if (!v113)
            goto LABEL_279;
          AudioUnitSetProperty(v113, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
          if ((*((_BYTE *)v3 + 4659) & 0x40) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0)
          {
            v114 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
            if (*((_QWORD *)v3 + 377))
            {
              v115 = (float)*((unsigned int *)v3 + 684);
LABEL_267:
              AudioUnitSetParameter(v114, 0x1Bu, 0, 0, v115, 0);
              v116 = *((_QWORD *)v3 + 582);
              if ((v116 & 0x1000) != 0)
              {
                v117 = *((_QWORD *)v3 + 584);
                if ((v117 & 0x1000) != 0
                  && *((_QWORD *)v3 + 359)
                  && (v116 & v117 & 0x2000) != 0
                  && *((_QWORD *)v3 + 360))
                {
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x3Fu, 0, 0, *((float *)v3 + 1054) * *((float *)v3 + 1055), 0);
                }
              }
              *(_QWORD *)&v118 = *((_QWORD *)v3 + 138) + 24;
              *(_QWORD *)&v119 = *((_QWORD *)v3 + 139) + 24;
              v120 = **((_DWORD **)v3 + 135);
              if (v120 < 3)
                v121 = 0.0;
              else
                *(_QWORD *)&v121 = *((_QWORD *)v3 + 140) + 24;
              *(_QWORD *)&v220.mSampleTime = *((_QWORD *)v3 + 138) + 24;
              *(Float64 *)&v220.mHostTime = v119;
              v122 = *((_QWORD *)v3 + 134);
              v220.mRateScalar = v121;
              v220.mWordClockTime = v122;
              *(_OWORD *)&v220.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
              if (v120 >= 3)
              {
                v220.mSampleTime = v119;
                *(Float64 *)&v220.mHostTime = v121;
                v220.mRateScalar = v118;
              }
              v223 = 0;
              v218 = 512;
              AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1090), 0);
              v123 = *(_OWORD *)&a2->mRateScalar;
              *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
              *(_OWORD *)&v231.mRateScalar = v123;
              v124 = *(_OWORD *)&a2->mSMPTETime.mHours;
              *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
              *(_OWORD *)&v231.mSMPTETime.mHours = v124;
              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 376), &v218, &v231, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v220, 1u, &v223);
              v95 = *((_QWORD *)v3 + 582);
              v108 = v95 & 0x40000000;
LABEL_279:
              if (v108 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
              {
                memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1040) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1041) + 16), *(const void **)(*((_QWORD *)v3 + 505) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                if (*((float *)v3 + 1066) == 0.0 && *((float *)v3 + 1067) == 0.0)
                  v125 = 0.0;
                else
                  v125 = 1.0;
                AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x20u, 0, 0, v125, 0);
                v220.mSampleTime = *((Float64 *)v3 + 434);
                v223 = (AudioBufferList *)*((_QWORD *)v3 + 429);
                v126 = *(_OWORD *)&a2->mRateScalar;
                *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                *(_OWORD *)&v231.mRateScalar = v126;
                v127 = *(_OWORD *)&a2->mSMPTETime.mHours;
                *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                *(_OWORD *)&v231.mSMPTETime.mHours = v127;
                v218 = 512;
                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v218, &v231, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v220, 1u, &v223);
                LODWORD(v228) = 8 * *((_DWORD *)v3 + 127);
                AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE7Au, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 16), (UInt32 *)&v228);
                LODWORD(v228) = 8 * *((_DWORD *)v3 + 127);
                AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE79u, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 32), (UInt32 *)&v228);
                v128 = *((unsigned int *)v3 + 127);
                v129 = (const AudioBufferList *)*((_QWORD *)v3 + 429);
                if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                {
                  v130 = &v231;
                  v131 = (uint64_t)v3;
                  v132 = 10;
LABEL_288:
                  VoiceProcessorV2::SaveFilesWriteSignal(v131, v132, v128, v129, v130);
                }
LABEL_316:
                if (v107 == 2)
                {
                  VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v110, v106, (BOOL *)&v212, v66);
                }
                else if (v107 == 1)
                {
                  VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v110, v106, &v212, v65);
                }
                if (v109 == 1)
                  VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, v217, v216, v110, v212 != 0);
                else
                  VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, v217, v214, v110, v212 != 0);
                memcpy(*(void **)(*((_QWORD *)v3 + 432) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 16), *((unsigned int *)v3 + 1071));
                v146 = *((_QWORD *)v3 + 582);
                if ((v146 & 0x20000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0 && *((_QWORD *)v3 + 400))
                  v147 = 1;
                else
                  v147 = (v146 & 0x80000000000000) != 0
                      && (*((_BYTE *)v3 + 4678) & 0x80) != 0
                      && *((_QWORD *)v3 + 402) != 0;
                LODWORD(v228) = 0;
                LODWORD(v221) = 0;
                AudioUnitGetParameter(*((AudioUnit *)v3 + 387), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v228);
                v148 = *(float *)&v228 < 1.0 && v147;
                if (v147)
                {
                  LODWORD(v231.mSampleTime) = 1065353216;
                  if (*(float *)&v228 < 1.0)
                    vDSP_vfill((const float *)&v231, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, *((unsigned int *)v3 + 127));
                  vDSP_vfill((const float *)&v231, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
                }
                else if ((*((_BYTE *)v3 + 4661) & 1) == 0 || (*((_BYTE *)v3 + 4677) & 1) == 0 || !*((_QWORD *)v3 + 387))
                {
                  v149 = 0;
                  goto LABEL_346;
                }
                if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 428), &buf);
                v149 = 1;
LABEL_346:
                v150 = *((_QWORD *)v3 + 500);
                v151 = *((_QWORD *)v3 + 582);
                if ((v151 & 0x20000000000000) != 0
                  && (*((_BYTE *)v3 + 4678) & 0x20) != 0
                  && (v152 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400)) != 0)
                {
                  v153 = *((_QWORD *)v3 + 499);
                  v220.mSampleTime = *((Float64 *)v3 + 428);
                  v220.mHostTime = v153;
                  *(_QWORD *)&v220.mRateScalar = (char *)v3 + 16808;
                  v154 = *((_QWORD *)v3 + 501);
                  v223 = (AudioBufferList *)*((_QWORD *)v3 + 429);
                  v224 = v154;
                  v225 = v150;
                  v218 = 512;
                  v155 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&v231.mRateScalar = v155;
                  v156 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&v231.mSMPTETime.mHours = v156;
                  AudioUnitProcessMultiple(v152, &v218, &v231, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v220, 3u, &v223);
                  AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v219);
                  if ((*((_BYTE *)v3 + 4664) & 2) == 0 || (*((_BYTE *)v3 + 4680) & 2) == 0 || !*((_QWORD *)v3 + 412))
                    goto LABEL_361;
                  v157 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
                  v158 = 2;
                }
                else
                {
                  if ((v151 & 0x80000000000000) == 0
                    || (*((_BYTE *)v3 + 4678) & 0x80) == 0
                    || (v159 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402)) == 0)
                  {
                    v164 = 1;
                    goto LABEL_366;
                  }
                  AudioUnitSetParameter(v159, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
                  v160 = *((_QWORD *)v3 + 431);
                  v220.mSampleTime = *((Float64 *)v3 + 428);
                  v220.mHostTime = v160;
                  v220.mRateScalar = *((Float64 *)v3 + 499);
                  v220.mWordClockTime = (UInt64)v3 + 16808;
                  v161 = *((_QWORD *)v3 + 436);
                  v223 = (AudioBufferList *)*((_QWORD *)v3 + 429);
                  v224 = v161;
                  v225 = *((_QWORD *)v3 + 501);
                  v226 = v150;
                  v162 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&v231.mRateScalar = v162;
                  v163 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&v231.mSMPTETime.mHours = v163;
                  v218 = 512;
                  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 402), &v218, &v231, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v220, 4u, &v223);
                  AudioUnitGetParameter(*((AudioUnit *)v3 + 402), 2u, 0, 0, &v219);
                  if ((*((_BYTE *)v3 + 4664) & 2) == 0 || (*((_BYTE *)v3 + 4680) & 2) == 0 || !*((_QWORD *)v3 + 412))
                  {
LABEL_361:
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &v231);
                    v164 = 0;
LABEL_366:
                    if ((*((_BYTE *)v3 + 4661) & 1) == 0)
                      goto LABEL_390;
                    if ((*((_BYTE *)v3 + 4677) & 1) == 0
                      || (v165 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 387)) == 0)
                    {
LABEL_384:
                      if ((*((_BYTE *)v3 + 4677) & 1) != 0 && *((_QWORD *)v3 + 387) && v148)
                      {
                        v175 = *(float **)(*((_QWORD *)v3 + 501) + 16);
                        vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, v175, 1, v175, 1, *((unsigned int *)v3 + 127));
                        v176 = *(const float **)(*((_QWORD *)v3 + 428) + 16);
                        v177 = *(float **)(*((_QWORD *)v3 + 429) + 16);
                        vDSP_vmul(v176, 1, v175, 1, v177, 1, *((unsigned int *)v3 + 127));
                        vDSP_vmul(&v176[*((unsigned int *)v3 + 127) + 1], 1, v175 + 1, 1, &v177[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
                        v176[*((unsigned int *)v3 + 127)] = v176[*((unsigned int *)v3 + 127)]
                                                          * v175[*((_DWORD *)v3 + 127) - 1];
LABEL_397:
                        if (((v149 & 1) != 0
                           || (*((_BYTE *)v3 + 4661) & 1) != 0
                           && (*((_BYTE *)v3 + 4677) & 1) != 0
                           && *((_QWORD *)v3 + 387))
                          && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
                        {
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
                        }
                        if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
                        {
                          v180 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
                          if (v180)
                          {
                            AudioUnitSetParameter(v180, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3117), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1046), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1050), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 3u, 0, 0, v219, 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
                            v181 = *((_QWORD *)v3 + 510);
                            v220.mSampleTime = *((Float64 *)v3 + 418);
                            v220.mHostTime = v181;
                            v182 = *((_QWORD *)v3 + 432);
                            v220.mRateScalar = *((Float64 *)v3 + 429);
                            v220.mWordClockTime = v182;
                            v183 = *((_QWORD *)v3 + 501);
                            *(_QWORD *)&v220.mSMPTETime.mSubframes = *((_QWORD *)v3 + 499);
                            *(_QWORD *)&v220.mSMPTETime.mType = v183;
                            v223 = (AudioBufferList *)*((_QWORD *)v3 + 136);
                            v218 = 512;
                            v184 = *(_OWORD *)&a2->mRateScalar;
                            *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                            *(_OWORD *)&v231.mRateScalar = v184;
                            v185 = *(_OWORD *)&a2->mSMPTETime.mHours;
                            *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                            *(_OWORD *)&v231.mSMPTETime.mHours = v185;
                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 407), &v218, &v231, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v220, 1u, &v223);
                            LODWORD(v230) = 0;
                            AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 1u, 0, 0, (AudioUnitParameterValue *)&v230);
                            *((_DWORD *)v3 + 3118) = (_DWORD)v230;
                            if ((*((_BYTE *)v3 + 4664) & 2) != 0
                              && (*((_BYTE *)v3 + 4680) & 2) != 0
                              && *((_QWORD *)v3 + 412))
                            {
                              AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 2u, 0, 0, &v219);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v219, 0);
                            }
                          }
                        }
                        goto LABEL_411;
                      }
LABEL_390:
                      if ((*((_BYTE *)v3 + 8837) & 1) != 0
                        && (*((_BYTE *)v3 + 8845) & 1) != 0
                        && *((_QWORD *)v3 + 477)
                        && !v147)
                      {
                        LODWORD(v231.mSampleTime) = 1065353216;
                        v179 = *((_DWORD *)v3 + 127);
                        vDSP_vfill((const float *)&v231, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, v179);
                        memcpy(*(void **)(*((_QWORD *)v3 + 429) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * v179);
                      }
                      goto LABEL_397;
                    }
                    AudioUnitSetParameter(v165, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
                    AudioUnitSetParameter(*((AudioUnit *)v3 + 387), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
                    AudioUnitSetParameter(*((AudioUnit *)v3 + 387), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
                    v166 = *((_QWORD *)v3 + 432);
                    v220.mSampleTime = *((Float64 *)v3 + 428);
                    v220.mHostTime = v166;
                    v167 = *((_QWORD *)v3 + 501);
                    v220.mRateScalar = *((Float64 *)v3 + 511);
                    v220.mWordClockTime = v167;
                    *(_QWORD *)&v220.mSMPTETime.mSubframes = v150;
                    if (v148)
                    {
                      v168 = (AudioBufferList **)((char *)v3 + 3448);
                      v167 = *((_QWORD *)v3 + 499);
                    }
                    else
                    {
                      v220.mWordClockTime = 0;
                      v168 = (AudioBufferList **)((char *)v3 + 3432);
                    }
                    v223 = *v168;
                    v224 = v167;
                    v169 = *(_OWORD *)&a2->mRateScalar;
                    *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                    *(_OWORD *)&v231.mRateScalar = v169;
                    v170 = *(_OWORD *)&a2->mSMPTETime.mHours;
                    *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                    *(_OWORD *)&v231.mSMPTETime.mHours = v170;
                    v218 = 512;
                    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 387), &v218, &v231, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v220, 2u, &v223);
                    if ((v164 | !v148) == 1)
                      AudioUnitGetParameter(*((AudioUnit *)v3 + 387), 0x20u, 0, 0, &v219);
                    v171 = *((unsigned int *)v3 + 127);
                    v172 = 3432;
                    if (v148)
                      v172 = 3448;
                    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v171, *(const AudioBufferList **)((char *)v3 + v172), &v231);
                      v171 = *((unsigned int *)v3 + 127);
                      v173 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
                      if (*((_BYTE *)v3 + 15897))
                      {
LABEL_382:
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v171, v173, &v231);
LABEL_383:
                        if ((*((_BYTE *)v3 + 4661) & 1) == 0)
                          goto LABEL_390;
                        goto LABEL_384;
                      }
                    }
                    else
                    {
                      v173 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
                    }
                    if (!*((_BYTE *)v3 + 15898))
                      goto LABEL_383;
                    goto LABEL_382;
                  }
                  v157 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                  v158 = 9;
                }
                AudioUnitGetParameter(v157, v158, 0, 0, (AudioUnitParameterValue *)&v221);
                AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v221, 0);
                goto LABEL_361;
              }
              if ((v95 & 0x80000000) == 0 || (*((_BYTE *)v3 + 4675) & 0x80) == 0 || !*((_QWORD *)v3 + 378))
                goto LABEL_316;
              memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * *((unsigned int *)v3 + 127));
              memcpy(*(void **)(*((_QWORD *)v3 + 434) + 32), *(const void **)(*((_QWORD *)v3 + 506) + 16), 8 * *((unsigned int *)v3 + 127));
              v133 = (const AudioBufferList *)*((_QWORD *)v3 + 434);
              v134 = (const AudioBufferList *)*((_QWORD *)v3 + 433);
              v228 = (AudioBufferList *)*((_QWORD *)v3 + 429);
              v229 = v134;
              v230 = v133;
              v135 = *(_OWORD *)&a2->mRateScalar;
              *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
              *(_OWORD *)&v231.mRateScalar = v135;
              v136 = *(_OWORD *)&a2->mSMPTETime.mHours;
              *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
              *(_OWORD *)&v231.mSMPTETime.mHours = v136;
              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v218, &v231, *((_DWORD *)v3 + 127), 1u, &v230, 2u, &v228);
              v137 = *((unsigned int *)v3 + 127);
              if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
              {
                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v137, v228, &v231);
                v137 = *((unsigned int *)v3 + 127);
                v138 = v229;
                if (*((_BYTE *)v3 + 15897))
                  goto LABEL_301;
              }
              else
              {
                v138 = v229;
              }
              if (!*((_BYTE *)v3 + 15898))
              {
LABEL_302:
                if ((*((_BYTE *)v3 + 4660) & 1) == 0 || (*((_BYTE *)v3 + 4676) & 1) == 0 || !*((_QWORD *)v3 + 379))
                  goto LABEL_316;
                memcpy(*(void **)(*((_QWORD *)v3 + 435) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                memcpy(*(void **)(*((_QWORD *)v3 + 430) + 16), *(const void **)(*((_QWORD *)v3 + 431) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                v211 = 10.0;
                v139 = *((_QWORD *)v3 + 433);
                v223 = (AudioBufferList *)*((_QWORD *)v3 + 429);
                v224 = v139;
                v140 = *((_QWORD *)v3 + 506);
                v225 = *((_QWORD *)v3 + 435);
                v226 = v140;
                v227 = *((_QWORD *)v3 + 430);
                v141 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
                v142 = 10.0;
                v221 = (AudioBufferList *)*((_QWORD *)v3 + 428);
                v222 = v141;
                if ((*((_BYTE *)v3 + 4662) & 0x80) != 0 && (*((_BYTE *)v3 + 4678) & 0x80) != 0)
                {
                  v143 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
                  if (v143)
                  {
                    AudioUnitGetParameter(v143, 9u, 0, 0, &v211);
                    v142 = v211;
                  }
                }
                AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0xAu, 0, 0, v142, 0);
                AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
                v144 = *(_OWORD *)&a2->mRateScalar;
                *(_OWORD *)&v220.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                *(_OWORD *)&v220.mRateScalar = v144;
                v145 = *(_OWORD *)&a2->mSMPTETime.mHours;
                *(_OWORD *)&v220.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                *(_OWORD *)&v220.mSMPTETime.mHours = v145;
                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v218, &v220, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v223, 2u, &v221);
                v128 = *((unsigned int *)v3 + 127);
                if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
                {
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v128, v221, &v220);
                  v128 = *((unsigned int *)v3 + 127);
                  v129 = v222;
                  if (*((_BYTE *)v3 + 15897))
                    goto LABEL_315;
                }
                else
                {
                  v129 = v222;
                }
                if (!*((_BYTE *)v3 + 15898))
                  goto LABEL_316;
LABEL_315:
                v130 = &v220;
                v131 = (uint64_t)v3;
                v132 = 27;
                goto LABEL_288;
              }
LABEL_301:
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v137, v138, &v231);
              goto LABEL_302;
            }
          }
          else
          {
            v114 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
          }
          v115 = 2.0;
          goto LABEL_267;
        }
        v97 = *((float *)v3 + 1055);
        if (v97 == 0.0)
        {
          v98 = *(_QWORD *)(*((_QWORD *)v3 + 435) + 16) + 4 * *((unsigned int *)v3 + 127);
          v231.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 435) + 16);
          v231.mHostTime = v98;
          if (*((_QWORD *)v3 + 2097))
          {
            VPTimeFreqConverter::Analyze(*((VPTimeFreqConverter **)v3 + 2097), *(const float **)(*((_QWORD *)v3 + 424) + 16), (DSPSplitComplex *)&v231);
            v97 = *((float *)v3 + 1055);
            v96 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 388);
          }
        }
        AudioUnitSetParameter(v96, 6u, 0, 0, v97, 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 388), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1059), 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 388), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1063), 0);
        memcpy(*(void **)(*((_QWORD *)v3 + 433) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 32), *((unsigned int *)v3 + 1071));
        v99 = *((_QWORD *)v3 + 433);
        v220.mSampleTime = *((Float64 *)v3 + 505);
        v220.mHostTime = v99;
        v100 = *((double *)v3 + 511);
        v220.mWordClockTime = 0;
        *(_QWORD *)&v220.mSMPTETime.mSubframes = 0;
        v220.mRateScalar = v100;
        v101 = *((_QWORD *)v3 + 500);
        v223 = (AudioBufferList *)*((_QWORD *)v3 + 431);
        v224 = v101;
        v102 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&v231.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&v231.mRateScalar = v102;
        v103 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&v231.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&v231.mSMPTETime.mHours = v103;
        v218 = 512;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 388), &v218, &v231, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v220, 2u, &v223);
        v104 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v104, *((const AudioBufferList **)v3 + 431), &v231);
          v104 = *((unsigned int *)v3 + 127);
          v105 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
          if (*((_BYTE *)v3 + 15897))
            goto LABEL_233;
        }
        else
        {
          v105 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
        }
        if (!*((_BYTE *)v3 + 15898))
        {
LABEL_234:
          v95 = *((_QWORD *)v3 + 582);
          goto LABEL_235;
        }
LABEL_233:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v104, v105, &v231);
        goto LABEL_234;
      }
      v81 = *((_QWORD *)v3 + 2098);
      if ((unint64_t)(*((_QWORD *)v3 + 2099) - v81) > 0x18)
      {
        ECApplicator::apply(*(AudioUnitParameterID **)(v81 + 24), &buf, v50, &v214, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
        v82 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v82, (const AudioBufferList *)((char *)v3 + 16880), &buf);
          v82 = *((unsigned int *)v3 + 127);
          v83 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
          if (*((_BYTE *)v3 + 15897))
          {
LABEL_188:
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v82, v83, &buf);
            goto LABEL_189;
          }
        }
        else
        {
          v83 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
        }
        if (!*((_BYTE *)v3 + 15898))
          goto LABEL_189;
        goto LABEL_188;
      }
LABEL_476:
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
  }
  v9 = 0;
  while (((*((_DWORD *)v3 + 116) >> v9) & 1) == 0)
  {
    if (++v9 == 32)
    {
      v9 = 33;
      break;
    }
  }
  v10 = (unsigned int *)*((_QWORD *)v3 + 135);
  if (v9 >= *v10)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v13 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v14 = (*v13 ? *v13 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = **((_DWORD **)v3 + 135);
        LODWORD(buf.mSampleTime) = 136315906;
        *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v4.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 280;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v9;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v15;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v16 = (int *)*((_QWORD *)v3 + 1570);
    if (v16 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v16, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v4/vpProcessUplink_v4.cpp", 280, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v9, **((_DWORD **)v3 + 135));
    }
    v11 = *(void **)(*((_QWORD *)v3 + 136) + 16);
    v12 = (const void **)*((_QWORD *)v3 + 135);
  }
  else
  {
    v11 = *(void **)(*((_QWORD *)v3 + 136) + 16);
    v12 = (const void **)&v10[4 * v9];
  }
  memcpy(v11, v12[2], *((unsigned int *)v12 + 3));
  if (*((_BYTE *)v3 + 2085))
  {
    if ((*((_BYTE *)v3 + 4662) & 0x20) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0)
    {
      v17 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
      if (v17)
      {
        v18 = *((_QWORD *)v3 + 499);
        v231.mSampleTime = *((Float64 *)v3 + 136);
        v231.mHostTime = v18;
        v19 = *((_QWORD *)v3 + 501);
        v220.mSampleTime = v231.mSampleTime;
        v220.mHostTime = v19;
        v20 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v20;
        v21 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v21;
        LODWORD(v223) = 512;
        AudioUnitProcessMultiple(v17, (AudioUnitRenderActionFlags *)&v223, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v231, 2u, (AudioBufferList **)&v220);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
        if ((*((_BYTE *)v3 + 4664) & 2) != 0 && (*((_BYTE *)v3 + 4680) & 2) != 0 && *((_QWORD *)v3 + 412))
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v219);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v219, 0);
        }
      }
    }
  }
LABEL_411:
  LODWORD(v231.mSampleTime) = 0;
  v186 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  v188 = v186;
  if (!*((_BYTE *)v3 + 2080))
  {
    if ((v186 & 1) == 0)
      goto LABEL_432;
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v187);
LABEL_420:
    v190 = *((_QWORD *)v3 + 582);
    if ((v190 & 0x2000000000000000) != 0
      && (*((_BYTE *)v3 + 4679) & 0x20) != 0
      && (v191 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 408)) != 0)
    {
      v192 = 1936748646;
    }
    else
    {
      if ((v190 & 0x1000000000000000) == 0
        || (*((_BYTE *)v3 + 4679) & 0x10) == 0
        || (v191 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407)) == 0)
      {
        *(AudioUnitParameterValue *)&v231.mSampleTime = v219;
        goto LABEL_430;
      }
      v192 = 2;
    }
    AudioUnitGetParameter(v191, v192, 0, 0, (AudioUnitParameterValue *)&v231);
    goto LABEL_430;
  }
  if (*((_QWORD *)v3 + 2054))
    v189 = 1;
  else
    v189 = v186;
  if ((v189 & 1) != 0)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v187);
    if ((v188 & 1) != 0)
      goto LABEL_420;
  }
LABEL_430:
  if (*((_BYTE *)v3 + 2080))
  {
    bzero(*(void **)(*((_QWORD *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    LODWORD(v231.mSampleTime) = 0;
    goto LABEL_433;
  }
LABEL_432:
  *((_DWORD *)v3 + 4110) = 0;
LABEL_433:
  if ((*((_BYTE *)v3 + 8833) & 0x80) != 0 && (*((_BYTE *)v3 + 8841) & 0x80) != 0)
  {
    v193 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 452);
    v194 = v193 ? v188 : 0;
    if (v194 == 1)
      AudioUnitSetParameter(v193, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v231.mSampleTime, 0);
  }
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  if ((*((_QWORD *)v3 + 582) & 0x8000000000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x8000000000000000) != 0)
  {
    v195 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 410);
    if (v195)
    {
      v196 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v196;
      v197 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v197;
      LODWORD(v220.mSampleTime) = 512;
      AudioUnitProcess(v195, (AudioUnitRenderActionFlags *)&v220, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  v198 = *((_QWORD *)v3 + 583);
  if ((v198 & 1) != 0 && (*((_BYTE *)v3 + 4680) & 1) != 0)
  {
    v199 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 411);
    if (v199)
    {
      v200 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v200;
      v201 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v201;
      LODWORD(v220.mSampleTime) = 512;
      AudioUnitProcess(v199, (AudioUnitRenderActionFlags *)&v220, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      v198 = *((_QWORD *)v3 + 583);
    }
  }
  if ((v198 & 2) != 0
    && (*((_BYTE *)v3 + 4680) & 2) != 0
    && (v202 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 412)) != 0)
  {
    v203 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v203;
    v204 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v204;
    LODWORD(v220.mSampleTime) = 512;
    AudioUnitProcess(v202, (AudioUnitRenderActionFlags *)&v220, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0 && *((_QWORD *)v3 + 407))
    {
      LODWORD(v223) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 1u, 0, 0, (AudioUnitParameterValue *)&v223);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v223, 0);
    }
    LODWORD(v223) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v223);
    v205 = (int)v223;
    if (*((float *)v3 + 572) != *(float *)&v223)
    {
      if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
      {
        v206 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
        if (v206)
        {
          AudioUnitSetParameter(v206, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v223, 0);
          v205 = (int)v223;
        }
      }
      *((_DWORD *)v3 + 572) = v205;
    }
  }
  else if ((*((_BYTE *)v3 + 4663) & 0x40) != 0 && ((*((_BYTE *)v3 + 4679) & 0x40) != 0 || *((_BYTE *)v3 + 472)))
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1091) / 20.0);
    vDSP_vsmul(*(const float **)(*((_QWORD *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((_QWORD *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  return 0;
}

AudioUnitParameterValue VoiceProcessorV4::SignalParamSwitchMixNF(AudioUnit *this, int a2, int a3, BOOL *a4, AudioUnitParameterValue result)
{
  uint64_t v7;
  float *v8;
  void *v9;
  OpaqueAudioComponentInstance *v10;
  AudioUnitPropertyID v11;
  float *v12;
  AudioUnit v13;
  const float *v14;
  const float *v15;
  float v16;
  float v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  vDSP_Length v25;
  AudioUnit v26;
  const float *v27;
  const float *v28;
  float *v29;
  unsigned int v30;
  AudioUnit v31;
  const float *v32;
  float v33;
  float v34;
  UInt32 ioDataSize;
  float __B;
  AudioUnitParameterValue outValue;

  if (a2 && a3)
  {
    outValue = 0.0;
    AudioUnitGetParameter(this[379], 2u, 0, 0, &outValue);
    result = outValue;
    v7 = *((unsigned int *)this + 127);
    v8 = (float *)*((_QWORD *)this[435] + 2);
    __B = 0.5;
    switch(outValue)
    {
      case 1u:
        memcpy(*((void **)this[504] + 2), *((const void **)this[504] + 8), *((unsigned int *)this + 1071));
        *((_DWORD *)this + 1046) = *((_DWORD *)this + 1049);
        *((_DWORD *)this + 1050) = *((_DWORD *)this + 1053);
        *((_DWORD *)this + 1054) = *((_DWORD *)this + 1057);
        *((_DWORD *)this + 1058) = *((_DWORD *)this + 1061);
        result = *((float *)this + 1065);
        *((AudioUnitParameterValue *)this + 1062) = result;
        *a4 = 1;
        break;
      case 2u:
        v30 = (*((uint64_t (**)(AudioUnit *))*this + 14))(this);
        v31 = this[504];
        if (v30 > 7)
          v32 = (const float *)*((_QWORD *)v31 + 8);
        else
          v32 = (const float *)*((_QWORD *)v31 + 2);
        vDSP_vadd(*((const float **)v31 + 2), 1, v32, 1, v8, 1, (2 * v7));
        vDSP_vsmul(v8, 1, &__B, *((float **)this[504] + 2), 1, (2 * v7));
        v33 = __B;
        *((float *)this + 1046) = __B * (float)(*((float *)this + 1049) + *((float *)this + 1046));
        *((float *)this + 1050) = v33 * (float)(*((float *)this + 1053) + *((float *)this + 1050));
        v34 = 0.0;
        if (*((float *)this + 1057) != 0.0)
          v34 = 1.0;
        *((float *)this + 1054) = v34;
        *((float *)this + 1058) = v33 * (float)(*((float *)this + 1061) + *((float *)this + 1058));
        result = v33 * (float)(*((float *)this + 1065) + *((float *)this + 1065));
        *((AudioUnitParameterValue *)this + 1062) = result;
        break;
      case 3u:
        ioDataSize = 8 * v7;
        AudioUnitGetProperty(this[378], 0xE79u, 0, 0, *((void **)this[537] + 2), &ioDataSize);
        ioDataSize = 8 * v7;
        v9 = (void *)*((_QWORD *)this[537] + 4);
        v10 = this[378];
        v11 = 3706;
        goto LABEL_7;
      case 4u:
        ioDataSize = 8 * v7;
        AudioUnitGetProperty(this[378], 0xE7Bu, 0, 0, *((void **)this[537] + 2), &ioDataSize);
        ioDataSize = 8 * v7;
        v9 = (void *)*((_QWORD *)this[537] + 4);
        v10 = this[378];
        v11 = 3708;
LABEL_7:
        AudioUnitGetProperty(v10, v11, 0, 0, v9, &ioDataSize);
        v12 = &v8[v7];
        v13 = this[537];
        v14 = (const float *)*((_QWORD *)v13 + 2);
        v15 = (const float *)*((_QWORD *)v13 + 4);
        v16 = *((float *)this + 1050);
        v17 = *((float *)this + 1053);
        v18 = *((unsigned int *)this + 1072);
        v19 = v18 + v7;
        v20 = (float)(v14[v18] * v14[v18]) + (float)(v14[v19] * v14[v19]);
        v21 = (float)(v15[v18] * v15[v18]) + (float)(v15[v19] * v15[v19]);
        if ((float)(v20 + v21) <= 0.0)
        {
          v23 = 0.0;
          v24 = 1.0;
        }
        else
        {
          v22 = 1.0 / (float)(v20 + v21);
          v23 = v21 * v22;
          v24 = v20 * v22;
        }
        *((float *)this + 1046) = (float)(*((float *)this + 1049) * v23) + (float)(v24 * *((float *)this + 1046));
        *((float *)this + 1050) = (float)(v17 * v23) + (float)(v24 * v16);
        *((float *)this + 1054) = *((float *)this + 1054) * *((float *)this + 1055);
        *((float *)this + 1058) = (float)(v23 * *((float *)this + 1059)) + (float)(v24 * *((float *)this + 1058));
        *((float *)this + 1062) = (float)(v23 * *((float *)this + 1063)) + (float)(v24 * *((float *)this + 1062));
        v25 = *((unsigned int *)this + 127);
        memcpy(*((void **)this[434] + 2), *((const void **)this[504] + 2), 4 * (2 * v25));
        memcpy(*((void **)this[434] + 4), *((const void **)this[504] + 8), 4 * (2 * *((_DWORD *)this + 127)));
        v26 = this[434];
        v27 = (const float *)*((_QWORD *)v26 + 2);
        v28 = (const float *)*((_QWORD *)v26 + 4);
        v29 = (float *)*((_QWORD *)this[504] + 2);
        vDSP_vmul(v27, 1, v14, 1, v29, 1, (2 * v25));
        vDSP_vmul(v28, 1, v15, 1, v8, 1, (2 * v25));
        vDSP_vadd(v8, 1, v29, 1, v29, 1, (2 * v25));
        vDSP_vsub(&v29[v25], 1, v29, 1, v29, 1, v25);
        vDSP_vmul(v27, 1, &v14[v25], 1, v8, 1, v25);
        vDSP_vmul(&v27[v25], 1, v14, 1, v12, 1, v25);
        vDSP_vadd(v8, 1, v12, 1, &v29[v25], 1, v25);
        vDSP_vmul(v28, 1, &v15[v25], 1, v8, 1, v25);
        vDSP_vmul(&v28[v25], 1, v15, 1, v12, 1, v25);
        vDSP_vadd(v8, 1, v12, 1, v8, 1, v25);
        vDSP_vadd(v8, 1, &v29[v25], 1, &v29[v25], 1, v25);
        break;
      default:
        return result;
    }
  }
  return result;
}

float VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(VoiceProcessorV4 *this, int a2, int a3, int a4, char a5)
{
  char v6;
  float result;
  float *v9;
  VPTimeFreqConverter *v10;
  DSPSplitComplex v11;

  v6 = a2;
  result = *((float *)this + 1054);
  if (result != 0.0)
    goto LABEL_11;
  if (!a3 || !a4 || !a2)
  {
    if (!a3)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((a5 & 1) != 0)
LABEL_8:
    memcpy(*(void **)(*((_QWORD *)this + 423) + 16), *(const void **)(*((_QWORD *)this + 426) + 16), 4 * *((unsigned int *)this + 127));
LABEL_9:
  v9 = (float *)(*(_QWORD *)(*((_QWORD *)this + 511) + 16) + 4 * *((unsigned int *)this + 127));
  v11.realp = *(float **)(*((_QWORD *)this + 511) + 16);
  v11.imagp = v9;
  v10 = (VPTimeFreqConverter *)*((_QWORD *)this + 519);
  if (v10)
    VPTimeFreqConverter::Analyze(v10, *(const float **)(*((_QWORD *)this + 423) + 16), &v11);
LABEL_11:
  if (a3)
  {
    if ((v6 & 1) == 0)
    {
      result = *((float *)this + 1057);
      *((float *)this + 1054) = result;
    }
  }
  return result;
}

os_log_t ___Z23SuppressorClassLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "echosuppressor");
  *v0 = result;
  SuppressorClassLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUMidSide::~AUMidSide(AUMidSide *this)
{
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUMidSide::Initialize(AUMidSide *this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  const AudioStreamBasicDescription *v6;
  BOOL IsEquivalent;
  AudioStreamBasicDescription v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  Element = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 80), 0);
  v3 = *(_OWORD *)(Element + 96);
  v10 = *(_OWORD *)(Element + 80);
  v11 = v3;
  v12 = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 128), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v9.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v9.mBytesPerPacket = v5;
  *(_QWORD *)&v9.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  IsEquivalent = CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v10, &v9, v6);
  if (IsEquivalent && HIDWORD(v11) == 2)
    return 0;
  else
    return 4294956428;
}

uint64_t AUMidSide::GetPropertyInfo(AUMidSide *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUMidSide::GetProperty(AUMidSide *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a5 = *((unsigned __int8 *)this + 544);
  }
  return result;
}

uint64_t AUMidSide::SetProperty(AUMidSide *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 544) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUMidSide::SetParameter(AUMidSide *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 134);
  return 0;
}

uint64_t AUMidSide::CanScheduleParameters(AUMidSide *this)
{
  return 0;
}

uint64_t AUMidSide::ProcessBufferLists(AUMidSide *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  unint64_t mNumberBuffers;
  uint64_t v8;
  unint64_t v9;
  size_t mDataByteSize;
  void *mData;
  void *v12;
  unsigned int v15;
  int v17;
  float v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  float Parameter;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  float v26;
  const float *v27;
  const float *v28;
  float *v29;
  float *v30;
  float v31;
  float __D;
  float __B;

  mNumberBuffers = a3->mNumberBuffers;
  if (*((_BYTE *)this + 544))
  {
    if (mNumberBuffers == a4->mNumberBuffers && a3->mNumberBuffers)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        mDataByteSize = a3->mBuffers[v8].mDataByteSize;
        if ((_DWORD)mDataByteSize == a4->mBuffers[v8].mDataByteSize)
        {
          mData = a3->mBuffers[v8].mData;
          v12 = a4->mBuffers[v8].mData;
          if (mData != v12)
          {
            memcpy(v12, mData, mDataByteSize);
            mNumberBuffers = a3->mNumberBuffers;
          }
        }
        ++v9;
        ++v8;
      }
      while (v9 < mNumberBuffers);
    }
  }
  else
  {
    if (mNumberBuffers != 2 || a4->mNumberBuffers != 2)
      return 4294956428;
    v15 = __N;
    v17 = *((_DWORD *)this + 134);
    if (v17 == *((_DWORD *)this + 135))
    {
      v18 = *((float *)this + 133);
    }
    else
    {
      *((_DWORD *)this + 135) = v17;
      v19 = *((_QWORD *)this + 9);
      if (v19)
      {
        v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
      }
      else
      {
        v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v21)
          v20 = 0;
        else
          v20 = *v21;
      }
      Parameter = ausdk::AUElement::GetParameter(v20, 0);
      *((float *)this + 132) = __exp10f(Parameter * 0.05);
      v23 = *((_QWORD *)this + 9);
      if (v23)
      {
        v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
      }
      else
      {
        v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v25)
          v24 = 0;
        else
          v24 = *v25;
      }
      v26 = ausdk::AUElement::GetParameter(v24, 1u);
      v18 = __exp10f(v26 * 0.05);
      *((float *)this + 133) = v18;
    }
    v27 = (const float *)a3->mBuffers[0].mData;
    v28 = *(const float **)&a3[1].mBuffers[0].mNumberChannels;
    v29 = (float *)a4->mBuffers[0].mData;
    v30 = *(float **)&a4[1].mBuffers[0].mNumberChannels;
    v31 = *((float *)this + 132);
    __D = v31 - v18;
    __B = v31 + v18;
    vDSP_vsmsma(v27, 1, &__B, v28, 1, &__D, v29, 1, v15);
    vDSP_vsmsma(v28, 1, &__B, v27, 1, &__D, v30, 1, v15);
  }
  return 0;
}

uint64_t AUMidSide::Render(AUMidSide *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;
  unsigned int v15;

  v8 = (AUMidSide *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUMidSide *)((char *)this + 128), 0);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUMidSide *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

double AUMidSide::GetParameterInfo(AUMidSide *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v5;
  double result;
  AudioUnitParameterOptions v7;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (!a2)
  {
    if (a3)
    {
      if (a3 != 1)
        return result;
      v5 = CFSTR("Side gain");
    }
    else
    {
      v5 = CFSTR("Mid gain");
    }
    buffer->cfNameString = v5;
    buffer->flags = 0x8000000;
    CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    result = 8192.00593;
    *(_QWORD *)&buffer->minValue = 0x40C00000C2700000;
    v7 = buffer->flags | 0xC0000000;
    buffer->defaultValue = 0.0;
    buffer->flags = v7;
  }
  return result;
}

double AUMidSide::GetLatency(AUMidSide *this)
{
  return 0.0;
}

double AUMidSide::GetTailTime(AUMidSide *this)
{
  return 0.0;
}

uint64_t AUMidSide::SupportsTail(AUMidSide *this)
{
  return 1;
}

uint64_t AUMidSide::StreamFormatWritable(AUMidSide *this)
{
  return 1;
}

uint64_t AUMidSide::SupportedNumChannels(AUMidSide *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMidSide::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUMidSide::ValidFormat(AUMidSide *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (a4->mChannelsPerFrame == 2)
    return ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2) & ((a4->mFormatFlags & 0x20) >> 5);
  else
    return 0;
}

BOOL CAStreamBasicDescription::IsEquivalent(CAStreamBasicDescription *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  return *(double *)this == a2->mSampleRate
      && *((_DWORD *)this + 2) == a2->mFormatID
      && *((_DWORD *)this + 4) == a2->mBytesPerPacket
      && *((_DWORD *)this + 5) == a2->mFramesPerPacket
      && *((_DWORD *)this + 7) == a2->mChannelsPerFrame
      && *((_DWORD *)this + 8) == a2->mBitsPerChannel
      && CA::Implementation::EquivalentFormatFlags(this, a2, 0, 0);
}

void AUVolumeCompressorV2::~AUVolumeCompressorV2(void **this)
{
  AUVolumeCompressorV2::~AUVolumeCompressorV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t i;
  void **v13;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t j;
  void **v18;
  _BYTE *v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t k;
  void **v23;
  _BYTE *v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t m;
  void **v28;
  _BYTE *v29;
  _BYTE *v30;
  _QWORD *v31;
  uint64_t n;
  void *v33;

  *this = &off_1E69CE7B8;
  AUVolumeCompressorV2::Cleanup(this);
  v2 = this[219];
  if (v2)
  {
    v3 = this[220];
    if (v3 != v2)
      this[220] = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    this[219] = 0;
    this[220] = 0;
  }
  v4 = this[217];
  if (v4)
  {
    v5 = this[218];
    if (v5 != v4)
      this[218] = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v4);
    this[217] = 0;
    this[218] = 0;
  }
  v6 = this[215];
  if (v6)
  {
    v7 = this[216];
    if (v7 != v6)
      this[216] = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v6);
    this[215] = 0;
    this[216] = 0;
  }
  v8 = this[212];
  if (v8)
  {
    v9 = this[213];
    if (v9 != v8)
      this[213] = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v8);
    this[212] = 0;
    this[213] = 0;
  }
  v10 = this[210];
  if (v10)
  {
    v11 = this[211];
    if (v11 != v10)
      this[211] = &v11[(v10 - v11 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v10);
    this[210] = 0;
    this[211] = 0;
  }
  for (i = 0; i != -16; i -= 2)
  {
    v13 = &this[i];
    v14 = this[i + 197];
    if (v14)
    {
      v15 = v13[198];
      if (v15 != v14)
        v13[198] = &v15[(v14 - v15 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      v16 = v13 + 197;
      operator delete(v14);
      *v16 = 0;
      v16[1] = 0;
    }
  }
  for (j = 0; j != -16; j -= 2)
  {
    v18 = &this[j];
    v19 = this[j + 181];
    if (v19)
    {
      v20 = v18[182];
      if (v20 != v19)
        v18[182] = &v20[(v19 - v20 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      v21 = v18 + 181;
      operator delete(v19);
      *v21 = 0;
      v21[1] = 0;
    }
  }
  for (k = 0; k != -16; k -= 2)
  {
    v23 = &this[k];
    v24 = this[k + 165];
    if (v24)
    {
      v25 = v23[166];
      if (v25 != v24)
        v23[166] = &v25[(v24 - v25 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      v26 = v23 + 165;
      operator delete(v24);
      *v26 = 0;
      v26[1] = 0;
    }
  }
  for (m = 0; m != -16; m -= 2)
  {
    v28 = &this[m];
    v29 = this[m + 149];
    if (v29)
    {
      v30 = v28[150];
      if (v30 != v29)
        v28[150] = &v30[(v29 - v30 + 3) & 0xFFFFFFFFFFFFFFFCLL];
      v31 = v28 + 149;
      operator delete(v29);
      *v31 = 0;
      v31[1] = 0;
    }
  }
  for (n = 126; n != 94; n -= 4)
    CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)&this[n]);
  v33 = this[93];
  if (v33)
  {
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
    this[93] = 0;
  }
  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t AUVolumeCompressorV2::Initialize(AUVolumeCompressorV2 *this)
{
  ausdk::AUScope *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  const AudioStreamBasicDescription *v7;
  int v8;
  double v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  size_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  _QWORD *v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  float Parameter;
  double v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  IIRFilterFloat32 *v40;
  IIRFilterFloat32 *v41;
  uint64_t v42;
  float v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::bad_alloc *exception;
  std::bad_alloc *v53;
  AudioStreamBasicDescription v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  AudioStreamBasicDescription v58;
  AudioStreamBasicDescription v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = (AUVolumeCompressorV2 *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  v55 = *(_OWORD *)(Element + 80);
  v56 = v4;
  v57 = *(_QWORD *)(Element + 112);
  v5 = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v54.mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v54.mBytesPerPacket = v6;
  *(_QWORD *)&v54.mBitsPerChannel = *(_QWORD *)(v5 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v55, &v54, v7))
    return 4294956428;
  v8 = HIDWORD(v56);
  if (HIDWORD(v56) > 8)
    return 4294956428;
  v9 = *(double *)&v55;
  v10 = *(double *)&v55;
  *((float *)this + 139) = v10;
  *((_DWORD *)this + 442) = v8;
  v11 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 150) = v11;
  *((_BYTE *)this + 656) = *((_BYTE *)this + 376);
  v12 = (v9 * 100.0 / 1000.0);
  if (v11 <= v12)
    v13 = v12;
  else
    v13 = v11;
  *((_QWORD *)this + 133) = operator new[]();
  if (*((_DWORD *)this + 133))
    *((_QWORD *)this + 134) = operator new[]();
  v14 = 16 * (HIDWORD(v56) - 1) + 24;
  v15 = malloc_type_malloc(v14, 0x2C8E6D5CuLL);
  if (!v15
    || (v16 = v15,
        bzero(v15, v14),
        *((_QWORD *)this + 95) = v16,
        v17 = 16 * (HIDWORD(v56) - 1) + 24,
        (v18 = malloc_type_malloc(v17, 0x2C8E6D5CuLL)) == 0))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v53 = std::bad_alloc::bad_alloc(exception);
  }
  v19 = v18;
  bzero(v18, v17);
  *((_QWORD *)this + 96) = v19;
  v20 = HIDWORD(v56);
  *v19 = HIDWORD(v56);
  **((_DWORD **)this + 95) = v20;
  if (*((_DWORD *)this + 442))
  {
    v21 = 0;
    v22 = 0;
    do
    {
      *(_DWORD *)(*((_QWORD *)this + 96) + 8) = 1;
      *(_DWORD *)(*((_QWORD *)this + 95) + v21 + 8) = 1;
      std::valarray<float>::resize((uint64_t)this + v21 + 1080, v13, 0.0);
      if (*((_DWORD *)this + 133))
        std::valarray<float>::resize((uint64_t)this + v21 + 1208, (unint64_t)(*(double *)&v55 * 20.0 / 1000.0), 0.0);
      *((_QWORD *)this + v22 + 199) = operator new[]();
      if (!*((_BYTE *)this + 656))
      {
        std::valarray<float>::resize((uint64_t)this + v21 + 1336, v13, 0.0);
        std::valarray<float>::resize((uint64_t)this + v21 + 1464, v13, 0.0);
      }
      ++v22;
      v21 += 16;
    }
    while (v22 < *((unsigned int *)this + 442));
  }
  *((_QWORD *)this + 207) = 0;
  *((_DWORD *)this + 177) = 0;
  *((_BYTE *)this + 537) = 1;
  *((_QWORD *)this + 130) = operator new[]();
  *((_QWORD *)this + 131) = operator new[]();
  *((_QWORD *)this + 132) = operator new[]();
  if (HIDWORD(v56))
  {
    v23 = 0;
    v24 = (char *)this + 800;
    do
    {
      std::valarray<float>::resize((uint64_t)v24, 0x43uLL, 0.0);
      *((_QWORD *)v24 - 2) = 0;
      ++v23;
      v24 += 32;
    }
    while (v23 < HIDWORD(v56));
  }
  *((_QWORD *)this + 208) = 1065353216;
  *((_DWORD *)this + 418) = 0;
  *((_DWORD *)this + 143) = -1018691584;
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  if (ausdk::AUElement::GetParameter(v26, 2u) > 0.0)
  {
    v28 = *((_QWORD *)this + 9);
    if (v28)
    {
      v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
    }
    else
    {
      v30 = (_QWORD *)*((_QWORD *)this + 6);
      v29 = *((_QWORD **)this + 7) == v30 ? 0 : (ausdk::AUElement *)*v30;
    }
    if (ausdk::AUElement::GetParameter(v29, 3u) > 0.0)
    {
      v31 = *((_QWORD *)this + 9);
      if (v31)
      {
        v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
      }
      else
      {
        v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v33)
          v32 = 0;
        else
          v32 = *v33;
      }
      Parameter = ausdk::AUElement::GetParameter(v32, 2u);
      *((float *)this + 416) = __exp10f(Parameter / 20.0);
    }
  }
  *(_OWORD *)((char *)this + 540) = 0u;
  AUVolumeCompressorV2::ApplyParameters((float32x2_t *)this);
  AUVolumeCompressorV2::ComputeNumbers(this);
  *(_QWORD *)((char *)this + 1772) = 0;
  v35 = *(double *)(ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 128), 0) + 80);
  v36 = ausdk::AUScope::SafeGetElement(v2, 0);
  v37 = *(_OWORD *)(v36 + 96);
  *(_OWORD *)&v59.mSampleRate = *(_OWORD *)(v36 + 80);
  *(_OWORD *)&v59.mBytesPerPacket = v37;
  *(_QWORD *)&v59.mBitsPerChannel = *(_QWORD *)(v36 + 112);
  v38 = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 128), 0);
  v39 = *(_OWORD *)(v38 + 96);
  *(_OWORD *)&v58.mSampleRate = *(_OWORD *)(v38 + 80);
  *(_OWORD *)&v58.mBytesPerPacket = v39;
  *(_QWORD *)&v58.mBitsPerChannel = *(_QWORD *)(v38 + 112);
  v40 = NewIIRFilter(&v59, &v58, (const CAStreamBasicDescription *)3);
  v41 = (IIRFilterFloat32 *)*((_QWORD *)this + 93);
  if (v41 != v40)
  {
    if (v41)
      (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v41 + 8))(v41);
    *((_QWORD *)this + 93) = v40;
  }
  if (!v40)
    return 4294956428;
  v42 = 0;
  v43 = v35;
  do
  {
    v44 = (unint64_t *)((char *)&v60 + v42);
    *v44 = 0;
    v44[1] = 0;
    v44[3] = 0;
    v44[4] = 0;
    v42 += 40;
    v44[2] = 0x3FF0000000000000;
  }
  while (v42 != 120);
  if (v43 <= 12000.0)
  {
    v60 = 0xBFF7834F28302BC1;
    v45 = xmmword_1B66A1410;
    v46 = xmmword_1B66A1420;
    v47 = xmmword_1B66A1430;
    v48 = xmmword_1B66A1440;
    v49 = xmmword_1B66A1450;
    v50 = xmmword_1B66A1460;
    goto LABEL_58;
  }
  if (v43 <= 18000.0)
  {
    v60 = 0x3FEA4A403439C8C0;
    v45 = xmmword_1B66A1470;
    v46 = xmmword_1B66A1480;
    v47 = xmmword_1B66A1490;
    v48 = xmmword_1B66A14A0;
    v49 = xmmword_1B66A14B0;
    v50 = xmmword_1B66A14C0;
    goto LABEL_58;
  }
  if (v43 <= 23000.0)
  {
    v60 = 0x3FE13D6FAE466E9ALL;
    v45 = xmmword_1B66A14D0;
    v46 = xmmword_1B66A14E0;
    v47 = xmmword_1B66A14F0;
    v48 = xmmword_1B66A1500;
    v49 = xmmword_1B66A1510;
    v50 = xmmword_1B66A1520;
    goto LABEL_58;
  }
  if (v43 <= 32000.0)
  {
    v60 = 0xBFFCBC9FA7C3C51BLL;
    v45 = xmmword_1B66A1530;
    v46 = xmmword_1B66A1540;
    v47 = xmmword_1B66A1550;
    v48 = xmmword_1B66A1560;
    v49 = xmmword_1B66A1570;
    v50 = xmmword_1B66A1580;
    goto LABEL_58;
  }
  if (v43 <= 46000.0)
  {
    v60 = 0xBFC1FD161AF3D43BLL;
    v45 = xmmword_1B66A1590;
    v46 = xmmword_1B66A15A0;
    v47 = xmmword_1B66A15B0;
    v48 = xmmword_1B66A15C0;
    v49 = xmmword_1B66A15D0;
    v50 = xmmword_1B66A15E0;
    goto LABEL_58;
  }
  if (v43 <= 50000.0)
  {
    v60 = 0xBFFE4D4B25EBE525;
    v45 = xmmword_1B66A15F0;
    v46 = xmmword_1B66A1600;
    v47 = xmmword_1B66A1610;
    v48 = xmmword_1B66A1620;
    v49 = xmmword_1B66A1630;
    v50 = xmmword_1B66A1640;
LABEL_58:
    v61 = v50;
    v62 = v49;
    v63 = v48;
    v64 = 0x3FF0000000000000;
    v65 = v47;
    v66 = v46;
    v67 = 0x3FF0000000000000;
    v68 = v45;
  }
  (*(void (**)(IIRFilterFloat32 *, uint64_t, unint64_t *))(*(_QWORD *)v40 + 16))(v40, 3, &v60);
  return 0;
}

uint64_t AUVolumeCompressorV2::Cleanup(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  free(this[95]);
  this[95] = 0;
  free(this[96]);
  this[96] = 0;
  v2 = this[130];
  if (v2)
  {
    MEMORY[0x1BCC95CC8](v2, 0x1000C8052888210);
    this[130] = 0;
  }
  v3 = this[131];
  if (v3)
  {
    MEMORY[0x1BCC95CC8](v3, 0x1000C8052888210);
    this[131] = 0;
  }
  v4 = this[132];
  if (v4)
  {
    MEMORY[0x1BCC95CC8](v4, 0x1000C8052888210);
    this[132] = 0;
  }
  v5 = this[133];
  if (v5)
  {
    MEMORY[0x1BCC95CC8](v5, 0x1000C8052888210);
    this[133] = 0;
  }
  v6 = this[134];
  if (v6)
  {
    MEMORY[0x1BCC95CC8](v6, 0x1000C8052888210);
    this[134] = 0;
  }
  v7 = 0;
  v8 = (char *)(this + 199);
  do
  {
    result = *(_QWORD *)&v8[v7];
    if (result)
    {
      result = MEMORY[0x1BCC95CC8](result, 0x1000C8052888210);
      *(_QWORD *)&v8[v7] = 0;
    }
    v7 += 8;
  }
  while (v7 != 64);
  return result;
}

uint64_t AUVolumeCompressorV2::Reset(AUVolumeCompressorV2 *this)
{
  uint64_t v2;
  int v3;
  int v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((unsigned int *)this + 442);
  if ((_DWORD)v2)
  {
    v3 = *((_DWORD *)this + 133);
    v4 = *((unsigned __int8 *)this + 656);
    v5 = (_QWORD *)((char *)this + 784);
    v6 = (char *)this + 1080;
    do
    {
      *v5 = 0;
      v7 = *((_QWORD *)v6 + 1) - *(_QWORD *)v6;
      if (v7 >= 1)
        bzero(*(void **)v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
      if (v3)
      {
        v8 = (void *)*((_QWORD *)v6 + 16);
        v9 = *((_QWORD *)v6 + 17) - (_QWORD)v8;
        if (v9 >= 1)
          bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
      }
      if (!v4)
      {
        v10 = (void *)*((_QWORD *)v6 + 32);
        v11 = *((_QWORD *)v6 + 33) - (_QWORD)v10;
        if (v11 >= 1)
          bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
        v12 = (void *)*((_QWORD *)v6 + 48);
        v13 = *((_QWORD *)v6 + 49) - (_QWORD)v12;
        if (v13 >= 1)
          bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
      }
      v5 += 4;
      v6 += 16;
      --v2;
    }
    while (v2);
  }
  *((_QWORD *)this + 207) = 0;
  *((_DWORD *)this + 177) = 0;
  *((_BYTE *)this + 537) = 1;
  v14 = *((_QWORD *)this + 93);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  *((_DWORD *)this + 175) = 0;
  *((_DWORD *)this + 143) = -1018691584;
  *(_QWORD *)((char *)this + 1772) = 0;
  if (fabsf(*((float *)this + 416)) == INFINITY)
    *((_DWORD *)this + 416) = 1065353216;
  return 0;
}

uint64_t AUVolumeCompressorV2::GetPropertyInfo(AUVolumeCompressorV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 21 && a2 != 64001 && a2 != 3700)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUVolumeCompressorV2::GetProperty(AUVolumeCompressorV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 64001:
      v7 = *((_DWORD *)this + 133);
      goto LABEL_9;
    case 3700:
      v7 = *((unsigned __int8 *)this + 376);
      goto LABEL_9;
    case 21:
      v7 = (*(uint64_t (**)(AUVolumeCompressorV2 *))(*(_QWORD *)this + 576))(this);
LABEL_9:
      result = 0;
      *a5 = v7;
      return result;
  }
  return 4294956417;
}

uint64_t AUVolumeCompressorV2::SetProperty(AUVolumeCompressorV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  if (a3)
    return 4294956417;
  if (a2 == 64001)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_DWORD *)this + 133) = *a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 3700)
  {
    if (a6 >= 4)
    {
      result = 0;
      *((_BYTE *)this + 376) = *(_BYTE *)a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 21)
    return 4294956417;
  if (a6 < 4)
    return 4294956445;
  v8 = *a5;
  v9 = *a5 != 0;
  if (v9 != (*(unsigned int (**)(AUVolumeCompressorV2 *))(*(_QWORD *)this + 576))(this))
    (*(void (**)(AUVolumeCompressorV2 *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
  return 0;
}

uint64_t AUVolumeCompressorV2::GetParameter(AUVolumeCompressorV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (a2 - 62 <= 2)
    *((_BYTE *)this + 536) = 1;
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t AUVolumeCompressorV2::SetParameter(AUVolumeCompressorV2 *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  uint64_t v34;
  ausdk::AUElement *v35;
  uint64_t v36;
  ausdk::AUElement **v37;
  ausdk::AUElement **v38;
  ausdk::AUElement **v39;
  ausdk::AUElement **v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  _QWORD *v45;
  _QWORD *v46;
  ausdk::AUElement **v47;
  ausdk::AUElement **v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  uint64_t v57;
  ausdk::AUElement **v58;
  unsigned int v59;
  ausdk::AUElement **v60;
  ausdk::AUElement **v61;
  ausdk::AUElement **v62;
  ausdk::AUElement **v63;
  uint64_t v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement **v69;
  uint64_t v70;
  ausdk::AUElement **v71;

  if (!a3)
  {
    switch(a2)
    {
      case 1u:
        v7 = *((_QWORD *)this + 9);
        if (v7)
        {
          v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
        }
        else
        {
          v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v37)
            v8 = 0;
          else
            v8 = *v37;
        }
        ausdk::AUElement::SetParameter(v8, 1u, a4, 0);
        result = 0;
        *((float *)this + 145) = a4;
        return result;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xBu:
      case 0xFu:
      case 0x10u:
      case 0x12u:
LABEL_6:
        v9 = *((_QWORD *)this + 9);
        if (v9)
        {
          v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
        }
        else
        {
          v11 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v11)
            v10 = 0;
          else
            v10 = *v11;
        }
        v12 = a2;
        goto LABEL_12;
      case 9u:
        if (a4 < 6.0 || a4 > 100.0)
          return 0;
        v15 = *((_QWORD *)this + 9);
        if (v15)
        {
          v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
        }
        else
        {
          v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v44)
            v10 = 0;
          else
            v10 = *v44;
        }
        v12 = 9;
        goto LABEL_12;
      case 0xCu:
        v16 = *((_QWORD *)this + 9);
        if (v16)
        {
          v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
        }
        else
        {
          v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v38)
            v17 = 0;
          else
            v17 = *v38;
        }
        ausdk::AUElement::SetParameter(v17, 0xCu, a4, 0);
        result = 0;
        ++*((_DWORD *)this + 137);
        return result;
      case 0xDu:
        if (a4 > 5.0 || a4 < 0.0)
          break;
        v18 = *((_QWORD *)this + 9);
        if (v18)
        {
          v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
        }
        else
        {
          v45 = (_QWORD *)*((_QWORD *)this + 6);
          v19 = *((_QWORD **)this + 7) == v45 ? 0 : (ausdk::AUElement *)*v45;
        }
        if (ausdk::AUElement::GetParameter(v19, 0xDu) == a4)
          break;
        v54 = *((_QWORD *)this + 9);
        if (v54)
        {
          v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
        }
        else
        {
          v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v56)
            v55 = 0;
          else
            v55 = *v56;
        }
        v59 = 13;
        goto LABEL_130;
      case 0xEu:
        if (a4 > 5.0 || a4 < 0.0)
          break;
        v20 = *((_QWORD *)this + 9);
        if (v20)
        {
          v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
        }
        else
        {
          v46 = (_QWORD *)*((_QWORD *)this + 6);
          v21 = *((_QWORD **)this + 7) == v46 ? 0 : (ausdk::AUElement *)*v46;
        }
        if (ausdk::AUElement::GetParameter(v21, 0xEu) == a4)
          break;
        v57 = *((_QWORD *)this + 9);
        if (v57)
        {
          v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 32))(v57, 0);
        }
        else
        {
          v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v58)
            v55 = 0;
          else
            v55 = *v58;
        }
        v59 = 14;
LABEL_130:
        ausdk::AUElement::SetParameter(v55, v59, a4, 0);
        (*(void (**)(AUVolumeCompressorV2 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 4, 0, 0);
        break;
      case 0x11u:
        if (a4 != 0.0 && a4 != 1.0)
          return 0;
        v22 = *((_QWORD *)this + 9);
        if (v22)
        {
          v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
        }
        else
        {
          v47 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v47)
            v10 = 0;
          else
            v10 = *v47;
        }
        v12 = 17;
LABEL_12:
        ausdk::AUElement::SetParameter(v10, v12, a4, 0);
        break;
      default:
        switch(a2)
        {
          case 'A':
          case 'H':
            if (a4 == 0.0 || a4 == 1.0)
              goto LABEL_6;
            return 0;
          case 'B':
          case 'D':
          case 'E':
          case 'J':
          case 'K':
            goto LABEL_6;
          case 'C':
            if (a4 < 3.0 || a4 > 50.0)
              return 0;
            v28 = *((_QWORD *)this + 9);
            if (v28)
            {
              v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
            }
            else
            {
              v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v48)
                v10 = 0;
              else
                v10 = *v48;
            }
            v12 = 67;
            goto LABEL_12;
          case 'F':
            v29 = *((_QWORD *)this + 9);
            if (v29)
            {
              v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
            }
            else
            {
              v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v39)
                v30 = 0;
              else
                v30 = *v39;
            }
            ausdk::AUElement::SetParameter(v30, 0x46u, a4, 0);
            result = 0;
            *((float *)this + 172) = a4;
            return result;
          case 'G':
            v31 = *((_QWORD *)this + 9);
            if (v31)
            {
              v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
            }
            else
            {
              v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v40)
                v32 = 0;
              else
                v32 = *v40;
            }
            ausdk::AUElement::SetParameter(v32, 0x47u, a4, 0);
            result = 0;
            *((float *)this + 174) = a4;
            return result;
          case 'I':
            if (a4 < 1.0 || a4 > 360.0)
              return 0;
            v36 = *((_QWORD *)this + 9);
            if (v36)
            {
              v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
            }
            else
            {
              v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v49)
                v10 = 0;
              else
                v10 = *v49;
            }
            v12 = 73;
            goto LABEL_12;
          case 'L':
            v34 = *((_QWORD *)this + 9);
            if (v34)
            {
              v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
            }
            else
            {
              v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v41)
                v35 = 0;
              else
                v35 = *v41;
            }
            ausdk::AUElement::SetParameter(v35, 0x4Cu, a4, 0);
            result = 0;
            *((float *)this + 173) = a4;
            return result;
          default:
            if (a2 - 20 > 0x27)
              return 4294956418;
            v23 = a2 % 0xAu;
            v24 = a2 - v23;
            result = 4294956418;
            if ((int)(a2 - v23) > 39)
            {
              if (v24 == 40)
              {
                v52 = *((_QWORD *)this + 9);
                if (v52)
                {
                  v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
                }
                else
                {
                  v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v63)
                    v53 = 0;
                  else
                    v53 = *v63;
                }
                if (ausdk::AUElement::GetParameter(v53, 0xEu) > (float)v23)
                {
                  v70 = *((_QWORD *)this + 9);
                  if (v70)
                  {
                    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
                  }
                  else
                  {
                    v71 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                    if (*((ausdk::AUElement ***)this + 7) == v71)
                      v10 = 0;
                    else
                      v10 = *v71;
                  }
                  v12 = v23 + 40;
                  goto LABEL_12;
                }
              }
              else
              {
                if (v24 != 50)
                  return result;
                v42 = *((_QWORD *)this + 9);
                if (v42)
                {
                  v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
                }
                else
                {
                  v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v61)
                    v43 = 0;
                  else
                    v43 = *v61;
                }
                if (ausdk::AUElement::GetParameter(v43, 0xEu) > (float)v23)
                {
                  v66 = *((_QWORD *)this + 9);
                  if (v66)
                  {
                    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
                  }
                  else
                  {
                    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                    if (*((ausdk::AUElement ***)this + 7) == v67)
                      v10 = 0;
                    else
                      v10 = *v67;
                  }
                  v12 = v23 + 50;
                  goto LABEL_12;
                }
              }
            }
            else if (v24 == 20)
            {
              v50 = *((_QWORD *)this + 9);
              if (v50)
              {
                v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
              }
              else
              {
                v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v62)
                  v51 = 0;
                else
                  v51 = *v62;
              }
              if (ausdk::AUElement::GetParameter(v51, 0xDu) > (float)v23)
              {
                v68 = *((_QWORD *)this + 9);
                if (v68)
                {
                  v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
                }
                else
                {
                  v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v69)
                    v10 = 0;
                  else
                    v10 = *v69;
                }
                v12 = v23 + 20;
                goto LABEL_12;
              }
            }
            else
            {
              if (v24 != 30)
                return result;
              v25 = *((_QWORD *)this + 9);
              if (v25)
              {
                v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
              }
              else
              {
                v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                if (*((ausdk::AUElement ***)this + 7) == v60)
                  v26 = 0;
                else
                  v26 = *v60;
              }
              if (ausdk::AUElement::GetParameter(v26, 0xDu) > (float)v23)
              {
                v64 = *((_QWORD *)this + 9);
                if (v64)
                {
                  v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 0);
                }
                else
                {
                  v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
                  if (*((ausdk::AUElement ***)this + 7) == v65)
                    v10 = 0;
                  else
                    v10 = *v65;
                }
                v12 = v23 + 30;
                goto LABEL_12;
              }
            }
            break;
        }
        break;
    }
  }
  result = 0;
  ++*((_DWORD *)this + 135);
  return result;
}

uint64_t AUVolumeCompressorV2::CanScheduleParameters(AUVolumeCompressorV2 *this)
{
  return 0;
}

uint64_t AUVolumeCompressorV2::ProcessBufferLists(float32x2_t *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  __int32 v9;
  __int32 v10;
  float32x2_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  float32x2_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  float32x2_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  double v20;
  double v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  uint64_t v27;
  float32x2_t v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float32_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  void **p_mData;
  void **v47;
  unsigned int v48;
  float **v49;
  float **v50;
  void **v51;
  void **v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int32 v56;
  unsigned int v57;
  __int32 v58;
  __int32 i;
  unsigned __int32 v60;
  unsigned int v61;
  float **v62;
  float **v63;
  float32x2_t *v64;
  uint64_t v65;
  float *v66;
  unsigned __int32 v67;
  unint64_t v68;
  float32x2_t *v69;
  void **v70;
  char *v71;
  char *v72;
  float32x2_t v73;
  unint64_t v74;
  unsigned __int32 v75;
  unsigned __int32 v76;
  unint64_t v77;
  void **v78;
  float32x2_t *v79;
  char *v80;
  char *v81;
  float32x2_t v82;
  BOOL v83;
  void **v85;
  unsigned int v86;
  float *v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  float *v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v9 = this[67].i32[1];
  if (v9 != this[68].i32[0])
  {
    AUVolumeCompressorV2::ApplyParameters(this);
    AUVolumeCompressorV2::ComputeNumbers((AUVolumeCompressorV2 *)this);
    this[68].i32[0] = v9;
  }
  v10 = this[68].i32[1];
  if (v10 != this[69].i32[0])
  {
    v11 = this[9];
    if (v11)
    {
      v12 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v11 + 32))(v11, 0);
    }
    else
    {
      v13 = (ausdk::AUElement **)this[6];
      if ((ausdk::AUElement **)this[7] == v13)
        v12 = 0;
      else
        v12 = *v13;
    }
    this[78].f32[1] = ausdk::AUElement::GetParameter(v12, 0xCu);
    v14 = this[9];
    if (v14)
    {
      v15 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v14 + 32))(v14, 0);
    }
    else
    {
      v16 = (ausdk::AUElement **)this[6];
      if ((ausdk::AUElement **)this[7] == v16)
        v15 = 0;
      else
        v15 = *v16;
    }
    this[74].f32[0] = ausdk::AUElement::GetParameter(v15, 4u);
    v17 = this[9];
    if (v17)
    {
      v18 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v17 + 32))(v17, 0);
    }
    else
    {
      v19 = (ausdk::AUElement **)this[6];
      if ((ausdk::AUElement **)this[7] == v19)
        v18 = 0;
      else
        v18 = *v19;
    }
    *(float *)&v20 = ausdk::AUElement::GetParameter(v18, 5u);
    this[74].i32[1] = LODWORD(v20);
    AUVolumeCompressorV2::AdjustForVolume(this, v20, v21);
    v22 = (float *)this[219];
    v23 = *v22;
    v24 = (float *)this[215];
    v25 = *v24;
    v26 = this[74].f32[0] + (1.0 - *v22) * (float)(v24[1] - *v24);
    v27 = this[214].u32[0];
    v28 = this[217];
    if ((_DWORD)v27)
    {
      v29 = v24 + 1;
      v30 = (float *)this[219];
      v31 = (float *)this[217];
      v32 = this[214].u32[0];
      do
      {
        v33 = v26 - (float)(*v30 * v25);
        *v31++ = v33;
        v34 = *v30++;
        v35 = v34;
        v36 = *v29++;
        v25 = v36;
        v26 = v33 + (float)(v35 * v36);
        --v32;
      }
      while (v32);
      v23 = v22[v27];
      v25 = v24[v27];
    }
    else
    {
      v27 = 0;
    }
    *(float *)(*(_QWORD *)&v28 + 4 * v27) = v26 - (float)(v23 * v25);
    v37 = this[73].f32[0];
    this[79].f32[1] = v37;
    v38 = v37 + this[70].f32[0];
    v39 = this[73].f32[1];
    if (v38 > v39)
    {
      v37 = v37 + (float)(v39 - v38);
      this[79].f32[1] = v37;
    }
    this[89].i32[0] = 1065353216;
    this[90].i32[1] = 0;
    v40 = this[74].f32[0];
    v41 = this[74].f32[1];
    v42 = (float)((float)(v24[1] - (float)(*v22 * (float)(v24[1] - v40))) - (float)(v37 + v41)) / (float)(v40 - v41);
    this[89].f32[1] = v42;
    this[91].f32[0] = (float)(v37 + v41) - (float)(v42 * v41);
    this[90].i32[0] = 1065353216;
    this[91].f32[1] = v37;
    this[92].f32[0] = v40;
    this[92].f32[1] = v41;
    this[69].i32[0] = v10;
  }
  if (this[67].i8[1])
    this[67].i8[1] = 0;
  if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)this + 576))(this))
  {
    if (a3->mNumberBuffers)
    {
      v43 = 0;
      v44 = 16;
      do
      {
        memcpy(*(void **)((char *)&a4->mNumberBuffers + v44), *(const void **)((char *)&a3->mNumberBuffers + v44), 4 * a5);
        ++v43;
        v44 += 16;
      }
      while (v43 < a3->mNumberBuffers);
    }
  }
  else if (this[82].i8[0])
  {
    if (a5)
    {
      v45 = 0;
      p_mData = &a4->mBuffers[0].mData;
      v47 = &a3->mBuffers[0].mData;
      do
      {
        v93 = 0u;
        v94 = 0u;
        *(_OWORD *)v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        *(_OWORD *)v87 = 0u;
        v88 = 0u;
        v48 = this[221].u32[0];
        if (v48)
        {
          v49 = v87;
          v50 = v91;
          v51 = v47;
          v52 = p_mData;
          v53 = this[221].u32[0];
          do
          {
            v54 = (char *)*v51;
            v51 += 2;
            *v50++ = (float *)&v54[4 * v45];
            v55 = (char *)*v52;
            v52 += 2;
            *v49++ = (float *)&v55[4 * v45];
            --v53;
          }
          while (v53);
        }
        AUVolumeCompressorV2::ProcessAudioBlock((AUVolumeCompressorV2 *)this, (const float **)v91, v87, v48);
        if (this[82].i8[1] && this[82].i8[3])
          AUVolumeCompressorV2::ProcessShortAudioBlocks((AUVolumeCompressorV2 *)this, v87, this[221].u32[0]);
        v56 = this[75].i32[0];
        v45 += v56;
        a5 -= v56;
      }
      while (a5);
    }
  }
  else
  {
    v57 = 0;
    v85 = &a3->mBuffers[0].mData;
    do
    {
      v58 = this[207].i32[0];
      for (i = this[75].i32[0]; ; this[207].i32[1] += i)
      {
        v60 = i - v58;
        if (i != v58)
          break;
        v93 = 0u;
        v94 = 0u;
        *(_OWORD *)v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        *(_OWORD *)v87 = 0u;
        v88 = 0u;
        v61 = this[221].u32[0];
        if (v61)
        {
          v62 = v87;
          v63 = v91;
          v64 = this + 183;
          v65 = this[221].u32[0];
          do
          {
            *v63++ = (float *)v64[-16];
            v66 = (float *)*v64;
            v64 += 2;
            *v62++ = v66;
            --v65;
          }
          while (v65);
        }
        AUVolumeCompressorV2::ProcessAudioBlock((AUVolumeCompressorV2 *)this, (const float **)v91, v87, v61);
        if (this[82].i8[1] && this[82].i8[3])
          AUVolumeCompressorV2::ProcessShortAudioBlocks((AUVolumeCompressorV2 *)this, v87, this[221].u32[0]);
        v58 = 0;
        this[207].i32[0] = 0;
        this[88].i32[1] = 0;
        i = this[75].i32[0];
      }
      if (a5 >= v60)
        v67 = i - v58;
      else
        v67 = a5;
      if (this[221].i32[0])
      {
        v68 = 0;
        v70 = v85;
        v69 = this + 167;
        do
        {
          v71 = (char *)*v70;
          v70 += 2;
          v72 = &v71[4 * v57];
          v73 = *v69;
          v69 += 2;
          memcpy((void *)(*(_QWORD *)&v73 + 4 * this[207].u32[0]), v72, 4 * v67);
          ++v68;
          v74 = this[221].u32[0];
        }
        while (v68 < v74);
        this[207].i32[0] += v67;
        v75 = this[207].u32[1];
        if (v75 >= v67)
          v76 = v67;
        else
          v76 = this[207].u32[1];
        if ((_DWORD)v74)
        {
          v86 = a5;
          v77 = 0;
          v78 = &a4->mBuffers[0].mData;
          v79 = this + 183;
          do
          {
            v80 = (char *)*v78;
            v78 += 2;
            v81 = &v80[4 * v57];
            v82 = *v79;
            v79 += 2;
            memcpy(v81, (const void *)(*(_QWORD *)&v82 + 4 * this[88].u32[1]), 4 * v76);
            ++v77;
          }
          while (v77 < this[221].u32[0]);
          v75 = this[207].u32[1];
          a5 = v86;
        }
      }
      else
      {
        this[207].i32[0] = v58 + v67;
        v75 = this[207].u32[1];
        if (v75 >= v67)
          v76 = v67;
        else
          v76 = this[207].u32[1];
      }
      this[88].i32[1] += v76;
      this[207].i32[1] = v75 - v76;
      v57 += v67;
      v83 = a5 > v60;
      a5 -= v67;
    }
    while (v83);
  }
  return 0;
}

uint64_t AUVolumeCompressorV2::Render(AUVolumeCompressorV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;

  v8 = (AUVolumeCompressorV2 *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUVolumeCompressorV2 *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    (*(void (**)(AUVolumeCompressorV2 *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
    return 0;
  }
  return result;
}

uint64_t AUVolumeCompressorV2::GetParameterList(AUVolumeCompressorV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t i;
  uint64_t j;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int k;
  unsigned int v12;
  unsigned int m;
  unsigned int n;

  if (a2)
    return 4294956430;
  for (i = 0; i != 17; ++i)
  {
    if (a3)
      a3[i] = i;
  }
  for (j = 0; j != 17; ++j)
  {
    if (a3)
      a3[j + 17] = j + 60;
  }
  v7 = *((_DWORD *)this + 419);
  if (v7)
  {
    v8 = 34;
    do
    {
      if (a3)
      {
        a3[v8] = v8 - 14;
        v7 = *((_DWORD *)this + 419);
      }
      v9 = v8 + 1;
      v10 = v8 - 33;
      ++v8;
    }
    while (v10 < v7);
    if (v7)
    {
      for (k = 0; k < v7; ++k)
      {
        if (a3)
        {
          a3[v9 + k] = k + 30;
          v7 = *((_DWORD *)this + 419);
        }
      }
      v9 += k;
    }
  }
  else
  {
    v9 = 34;
  }
  v12 = *((_DWORD *)this + 428);
  if (v12)
  {
    for (m = 0; m < v12; ++m)
    {
      if (a3)
      {
        a3[v9 + m] = m + 40;
        v12 = *((_DWORD *)this + 428);
      }
    }
    if (v12)
    {
      for (n = 0; n < v12; ++n)
      {
        if (a3)
        {
          a3[v9 + m + n] = n + 50;
          v12 = *((_DWORD *)this + 428);
        }
      }
      v9 += m + n;
    }
    else
    {
      v9 += m;
    }
  }
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t AUVolumeCompressorV2::GetParameterInfo(AUVolumeCompressorV2 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  AudioUnitParameterOptions v18;
  const __CFString *v19;
  unsigned int v20;
  signed int v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  unint64_t v24;
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  ausdk::AUElement ***v34;
  ausdk::AUElement **v35;
  ausdk::AUElement ***v36;
  ausdk::AUElement **v37;
  ausdk::AUElement ***v38;
  ausdk::AUElement **v39;
  ausdk::AUElement ***v40;
  uint64_t v41;
  float Parameter;
  const __CFString *v43;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956418;
  switch(a3)
  {
    case 0u:
      buffer->cfNameString = CFSTR("SoundGaindB");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("SoundGaindB"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42700000C3480000;
      v7 = 3276210176;
      goto LABEL_35;
    case 1u:
      v8 = CFSTR("MaxOutputPower");
      goto LABEL_49;
    case 2u:
      v9 = CFSTR("MaxNoiseRelGain");
      goto LABEL_8;
    case 3u:
      v9 = CFSTR("MaxNoiseAbsGain");
LABEL_8:
      buffer->cfNameString = v9;
      buffer->flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v10 = 0x42700000C3480000;
      goto LABEL_52;
    case 4u:
      buffer->cfNameString = CFSTR("MinSoundThresh");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("MinSoundThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3267362816;
      v11 = 3263954944;
      goto LABEL_58;
    case 5u:
      buffer->cfNameString = CFSTR("MaxNoiseThresh");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("MaxNoiseThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0xC2200000C3480000;
      v11 = 3264741376;
      goto LABEL_58;
    case 6u:
      buffer->cfNameString = CFSTR("UpSlewRate");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("UpSlewRate"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 0x412000003C23D70ALL;
      goto LABEL_25;
    case 7u:
      buffer->cfNameString = CFSTR("DownSlewRate");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("DownSlewRate"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0xBC23D70AC1200000;
      v11 = 3212836864;
      goto LABEL_58;
    case 8u:
      buffer->cfNameString = CFSTR("SmoothWinMs");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("SmoothWinMs"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x43C8000040800000;
      v11 = 1128792064;
      goto LABEL_58;
    case 9u:
      buffer->cfNameString = CFSTR("WinMs");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("WinMs"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000040C00000;
      v11 = 1094713344;
      goto LABEL_58;
    case 0xAu:
      buffer->cfNameString = CFSTR("MinVolume");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("MinVolume"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41900000C3960000;
      v11 = 3262119936;
      goto LABEL_58;
    case 0xBu:
      buffer->cfNameString = CFSTR("MaxVolume");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("MaxVolume"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      v10 = 0x42B40000C1F00000;
      goto LABEL_52;
    case 0xCu:
      buffer->cfNameString = CFSTR("Volume");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Volume"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v12 = 0x3F80000000000000;
      goto LABEL_25;
    case 0xDu:
      v13 = CFSTR("Number of volume knees");
      goto LABEL_20;
    case 0xEu:
      v13 = CFSTR("Number of compression knees");
LABEL_20:
      buffer->cfNameString = v13;
      buffer->flags = 0x8000000;
      CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x40A0000000000000;
      v14 = 1084227584;
      goto LABEL_21;
    case 0xFu:
      buffer->cfNameString = CFSTR("SoundGaindB Offset");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("SoundGaindB Offset"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v16 = 0x41400000C1400000;
      goto LABEL_40;
    case 0x10u:
      v17 = CFSTR("UpwardsCompRatio");
      buffer->cfNameString = CFSTR("UpwardsCompRatio");
      v18 = 0x8000000;
      goto LABEL_24;
    case 0x11u:
      v19 = CFSTR("A-Weighting Enabled");
      goto LABEL_51;
    case 0x12u:
      buffer->cfNameString = CFSTR("Lookahead (ms)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Lookahead (ms)"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v10 = 0x4120000000000000;
      goto LABEL_52;
    case 0x3Cu:
      buffer->cfNameString = CFSTR("MinSoundThresh");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("MinSoundThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3267362816;
      v7 = 3263954944;
      goto LABEL_35;
    case 0x3Du:
      buffer->cfNameString = CFSTR("MaxNoiseThresh");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("MaxNoiseThresh"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3267362816;
      v7 = 3264741376;
LABEL_35:
      v24 = v7 & 0xFFFF0000FFFFFFFFLL | 0x800000000000;
      goto LABEL_41;
    case 0x3Eu:
      buffer->cfNameString = CFSTR("Compression Amount");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Compression Amount"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v16 = 0x4248000000000000;
      goto LABEL_40;
    case 0x3Fu:
      v25 = CFSTR("Input Amplitude");
      goto LABEL_39;
    case 0x40u:
      v25 = CFSTR("Output Amplitude");
LABEL_39:
      buffer->cfNameString = v25;
      buffer->flags = 0x8000000;
      CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v16 = 0x41400000C2B40000;
LABEL_40:
      *(_QWORD *)&buffer->minValue = v16;
      v24 = 0x800000000000;
LABEL_41:
      v15 = v24 & 0xFFFFFFFFFFFFLL | 0x4800000000000000;
      goto LABEL_59;
    case 0x41u:
      v19 = CFSTR("ShortWin Enabled");
      goto LABEL_51;
    case 0x42u:
      v19 = CFSTR("ShortWin Peak");
      goto LABEL_51;
    case 0x43u:
      buffer->cfNameString = CFSTR("ShortWinMs");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("ShortWinMs"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4248000040400000;
      v11 = 1082130432;
      goto LABEL_58;
    case 0x44u:
      buffer->cfNameString = CFSTR("ShortWin Attack");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("ShortWin Attack"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3D23D70A3A03126FLL;
      v11 = 998445679;
      goto LABEL_58;
    case 0x45u:
      buffer->cfNameString = CFSTR("ShortWin Decay");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("ShortWin Decay"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x400000003A83126FLL;
      v11 = 1006834287;
      goto LABEL_58;
    case 0x46u:
      v26 = CFSTR("ShortWin Max dBRMS");
      goto LABEL_57;
    case 0x47u:
      v8 = CFSTR("ShortWin Max dBFS");
LABEL_49:
      buffer->cfNameString = v8;
      buffer->flags = 0x8000000;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v10 = 3276275712;
      goto LABEL_52;
    case 0x48u:
      v19 = CFSTR("LongWin Enabled");
LABEL_51:
      buffer->cfNameString = v19;
      buffer->flags = 0x8000000;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      v10 = 0x3F80000000000000;
LABEL_52:
      *(_QWORD *)&buffer->minValue = v10;
      v15 = 0xC800000000000000;
      goto LABEL_59;
    case 0x49u:
      buffer->cfNameString = CFSTR("LongWinSec");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("LongWinSec"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x43B400003F800000;
      v11 = 1135869952;
      goto LABEL_58;
    case 0x4Au:
      buffer->cfNameString = CFSTR("LongWin Attack");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("LongWin Attack"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3D23D70A3A03126FLL;
      v11 = 994352038;
      goto LABEL_58;
    case 0x4Bu:
      buffer->cfNameString = CFSTR("LongWin Decay");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("LongWin Decay"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x412000003A83126FLL;
      v11 = 1011129254;
      goto LABEL_58;
    case 0x4Cu:
      v26 = CFSTR("LongWin MaxOutputPower");
LABEL_57:
      buffer->cfNameString = v26;
      buffer->flags = 0x8000000;
      CFStringGetCString(v26, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 3276275712;
      v11 = 3233808384;
      goto LABEL_58;
    default:
      v20 = a3 % 0xA;
      v21 = 10 * (a3 / 0xA);
      result = 4294956418;
      if (v21 > 39)
      {
        if (v21 == 40)
        {
          v31 = *((_QWORD *)this + 9);
          if (v31)
          {
            v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
          }
          else
          {
            v40 = (ausdk::AUElement ***)((char *)this + 48);
            v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (v40[1] == v39)
              v32 = 0;
            else
              v32 = *v39;
          }
          if (ausdk::AUElement::GetParameter(v32, 0xEu) <= (float)v20)
            return 4294956418;
          buffer->cfNameString = CFSTR("CompKneeX");
          buffer->flags |= 0x8000000u;
          CFStringGetCString(CFSTR("CompKneeX"), buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v41 = 3276275712;
          goto LABEL_92;
        }
        if (v21 == 50)
        {
          v27 = *((_QWORD *)this + 9);
          if (v27)
          {
            v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
          }
          else
          {
            v36 = (ausdk::AUElement ***)((char *)this + 48);
            v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (v36[1] == v35)
              v28 = 0;
            else
              v28 = *v35;
          }
          if (ausdk::AUElement::GetParameter(v28, 0xEu) <= (float)v20)
            return 4294956418;
          v17 = CFSTR("CompKneeRatio");
          buffer->cfNameString = CFSTR("CompKneeRatio");
          v18 = buffer->flags | 0x8000000;
LABEL_24:
          buffer->flags = v18;
          CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v12 = 0x412000003F800000;
LABEL_25:
          *(_QWORD *)&buffer->minValue = v12;
          v11 = 1065353216;
LABEL_58:
          v15 = v11 & 0xFFFFFFFFFFFFLL | 0xC800000000000000;
LABEL_59:
          *(_QWORD *)&buffer->defaultValue = v15;
        }
      }
      else
      {
        if (v21 != 20)
        {
          if (v21 != 30)
            return result;
          v22 = *((_QWORD *)this + 9);
          if (v22)
          {
            v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
          }
          else
          {
            v34 = (ausdk::AUElement ***)((char *)this + 48);
            v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (v34[1] == v33)
              v23 = 0;
            else
              v23 = *v33;
          }
          if (ausdk::AUElement::GetParameter(v23, 0xDu) <= (float)v20)
            return 4294956418;
          buffer->cfNameString = CFSTR("VolumeKneeY");
          buffer->flags |= 0x8000000u;
          CFStringGetCString(CFSTR("VolumeKneeY"), buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          v41 = 0x42B40000C3960000;
LABEL_92:
          *(_QWORD *)&buffer->minValue = v41;
          v14 = 3253731328;
LABEL_21:
          v15 = v14 & 0xFFFFFFFFFFFFLL | 0xD800000000000000;
          goto LABEL_59;
        }
        v29 = *((_QWORD *)this + 9);
        if (v29)
        {
          v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
        }
        else
        {
          v38 = (ausdk::AUElement ***)((char *)this + 48);
          v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (v38[1] == v37)
            v30 = 0;
          else
            v30 = *v37;
        }
        Parameter = ausdk::AUElement::GetParameter(v30, 0xDu);
        if (Parameter <= (float)v20)
        {
          result = 4294956418;
        }
        else
        {
          v43 = kAUVolumeCompressorV2ParamName_VolumeKneeXstr[v20];
          buffer->cfNameString = v43;
          buffer->flags |= 0x8000000u;
          CFStringGetCString(v43, buffer->name, 52, 0x8000100u);
          result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
          *(_QWORD *)&buffer->defaultValue = 0xD80000003F000000;
        }
        if ((float)(Parameter + -1.0) == (float)v20)
          buffer->maxValue = 1.0;
      }
      return result;
  }
}

uint64_t AUVolumeCompressorV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 135);
  return result;
}

uint64_t AUVolumeCompressorV2::GetParameterValueStrings(AUVolumeCompressorV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  void *values[7];

  values[6] = *(void **)MEMORY[0x1E0C80C00];
  if (a2 || a3 != 14 && a3 != 13)
    return 4294956417;
  if (!a4)
    return 0;
  values[0] = CFSTR("0");
  values[1] = CFSTR("1");
  values[2] = CFSTR("2");
  values[3] = CFSTR("3");
  values[4] = CFSTR("4");
  values[5] = CFSTR("5");
  v6 = CFArrayCreate(0, (const void **)values, 6, 0);
  result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUVolumeCompressorV2::GetPresets(AUVolumeCompressorV2 *this, const __CFArray **a2)
{
  __CFArray *Mutable;
  uint64_t i;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 4, 0);
    for (i = 0; i != 64; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sAUVolumeCompressorV2Presets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUVolumeCompressorV2::NewFactoryPresetSet(AUVolumeCompressorV2 *this, const AUPreset *a2)
{
  uint64_t presetNumber;
  uint64_t v5;
  ausdk::AUElement *v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement **v33;
  float v34;

  presetNumber = a2->presetNumber;
  if (presetNumber > 3)
    return 4294956445;
  switch((int)presetNumber)
  {
    case 0:
    case 2:
      v5 = *((_QWORD *)this + 9);
      if (v5)
      {
        v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
      }
      else
      {
        v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v9)
          v6 = 0;
        else
          v6 = *v9;
      }
      ausdk::AUElement::SetParameter(v6, 1u, -9.0, 0);
      v11 = *((_QWORD *)this + 9);
      if (v11)
      {
        v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
      }
      else
      {
        v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v13)
          v12 = 0;
        else
          v12 = *v13;
      }
      ausdk::AUElement::SetParameter(v12, 0xBu, 24.0, 0);
      v17 = *((_QWORD *)this + 9);
      if (v17)
      {
        v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
      }
      else
      {
        v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v19)
          v18 = 0;
        else
          v18 = *v19;
      }
      ausdk::AUElement::SetParameter(v18, 0xAu, -15.0, 0);
      v23 = *((_QWORD *)this + 9);
      if (v23)
      {
        v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
      }
      else
      {
        v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v25)
          v24 = 0;
        else
          v24 = *v25;
      }
      ausdk::AUElement::SetParameter(v24, 0x14u, 0.8125, 0);
      v29 = *((_QWORD *)this + 9);
      if (v29)
      {
        v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
      }
      else
      {
        v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v31)
          v30 = 0;
        else
          v30 = *v31;
      }
      v34 = 6.0;
      break;
    case 1:
    case 3:
      v7 = *((_QWORD *)this + 9);
      if (v7)
      {
        v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
      }
      else
      {
        v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v10)
          v8 = 0;
        else
          v8 = *v10;
      }
      ausdk::AUElement::SetParameter(v8, 1u, -200.0, 0);
      v14 = *((_QWORD *)this + 9);
      if (v14)
      {
        v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
      }
      else
      {
        v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v16)
          v15 = 0;
        else
          v15 = *v16;
      }
      ausdk::AUElement::SetParameter(v15, 0xBu, -199.0, 0);
      v20 = *((_QWORD *)this + 9);
      if (v20)
      {
        v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
      }
      else
      {
        v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v22)
          v21 = 0;
        else
          v21 = *v22;
      }
      ausdk::AUElement::SetParameter(v21, 0xAu, -200.0, 0);
      v26 = *((_QWORD *)this + 9);
      if (v26)
      {
        v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
      }
      else
      {
        v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v28)
          v27 = 0;
        else
          v27 = *v28;
      }
      ausdk::AUElement::SetParameter(v27, 0x14u, 0.5, 0);
      v32 = *((_QWORD *)this + 9);
      if (v32)
      {
        v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
      }
      else
      {
        v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v33)
          v30 = 0;
        else
          v30 = *v33;
      }
      v34 = -199.5;
      break;
    default:
      return 4294956445;
  }
  ausdk::AUElement::SetParameter(v30, 0x1Eu, v34, 0);
  ++*((_DWORD *)this + 135);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&sAUVolumeCompressorV2Presets + presetNumber);
  return 0;
}

double AUVolumeCompressorV2::GetLatency(AUVolumeCompressorV2 *this)
{
  return 0.0;
}

double AUVolumeCompressorV2::GetTailTime(AUVolumeCompressorV2 *this)
{
  return 0.0;
}

uint64_t AUVolumeCompressorV2::SupportsTail(AUVolumeCompressorV2 *this)
{
  return 1;
}

BOOL AUVolumeCompressorV2::StreamFormatWritable(AUVolumeCompressorV2 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUVolumeCompressorV2::SupportedNumChannels(AUVolumeCompressorV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUVolumeCompressorV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 6;
}

BOOL AUVolumeCompressorV2::ValidFormat(AUVolumeCompressorV2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;
  UInt32 mChannelsPerFrame;

  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
  {
    mChannelsPerFrame = a4->mChannelsPerFrame;
    if ((a4->mFormatFlags & 0x20) != 0)
    {
      if (mChannelsPerFrame <= 8)
        return (0x176u >> mChannelsPerFrame) & 1;
    }
    else if (mChannelsPerFrame == 1)
    {
      LOBYTE(mChannelsPerFrame) = 1;
      return (0x176u >> mChannelsPerFrame) & 1;
    }
    return 0;
  }
  return result;
}

BOOL AUVolumeCompressorV2::ShouldBypassEffect(AUVolumeCompressorV2 *this)
{
  return *((_DWORD *)this + 132) != 0;
}

uint64_t AUVolumeCompressorV2::SetBypassEffect(uint64_t this, int a2)
{
  *(_DWORD *)(this + 528) = a2;
  return this;
}

float AUVolumeCompressorV2::ApplyParameters(float32x2_t *this)
{
  float32x2_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float32x2_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  float32x2_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  float32x2_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  float32x2_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  float32x2_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float32x2_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  float32x2_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  float32x2_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  float32x2_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float32x2_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  float32x2_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  float32x2_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float32x2_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  float32x2_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  float32x2_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  float32x2_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  float32x2_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  int v56;
  float32x2_t v57;
  float v58;
  float32x2_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  float Parameter;
  float32x2_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  float v66;
  float v67;
  float32x2_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  _BOOL4 v71;
  float32x2_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  float v75;
  float32x2_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  float32x2_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  float v82;
  float32x2_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  float32x2_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  float v89;
  unsigned int v90;
  float32x2_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  float32x2_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  float32x2_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  float32x2_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  double v103;
  double v104;
  double v105;
  float v106;
  float32x2_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  double v110;
  double v111;
  double v112;
  float v113;
  float32x2_t v114;
  ausdk::AUElement *v115;
  ausdk::AUElement **v116;
  float32x2_t v117;
  ausdk::AUElement *v118;
  ausdk::AUElement **v119;
  float32x2_t v120;
  ausdk::AUElement *v121;
  ausdk::AUElement **v122;
  double v123;
  double v124;
  double v125;
  float v126;
  float32x2_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  double v130;
  double v131;
  long double v132;
  double v133;
  float v134;
  uint64_t v135;
  int v136;
  __int32 v137;
  float32x2_t *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  float32x2_t v147;
  ausdk::AUElement *v148;
  ausdk::AUElement **v149;
  float32x2_t v150;
  ausdk::AUElement *v151;
  ausdk::AUElement **v152;
  _DWORD *v153;
  unint64_t v154;
  uint64_t v156;
  _DWORD *v157;

  v2 = this[9];
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  this[72].f32[1] = ausdk::AUElement::GetParameter(v3, 1u);
  v5 = this[9];
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  this[73].f32[0] = ausdk::AUElement::GetParameter(v6, 2u);
  v8 = this[9];
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  this[73].f32[1] = ausdk::AUElement::GetParameter(v9, 3u);
  v11 = this[9];
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  this[74].f32[0] = ausdk::AUElement::GetParameter(v12, 4u);
  v14 = this[9];
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  this[74].f32[1] = ausdk::AUElement::GetParameter(v15, 5u);
  v17 = this[9];
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  this[81].f32[0] = ausdk::AUElement::GetParameter(v18, 6u);
  v20 = this[9];
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  this[81].f32[1] = ausdk::AUElement::GetParameter(v21, 7u);
  v23 = this[9];
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  this[80].f32[0] = ausdk::AUElement::GetParameter(v24, 8u);
  v26 = this[9];
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  this[76].f32[1] = ausdk::AUElement::GetParameter(v27, 0xBu);
  v29 = this[9];
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  this[77].f32[0] = ausdk::AUElement::GetParameter(v30, 0xAu);
  v32 = this[9];
  if (v32)
  {
    v33 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v32 + 32))(v32, 0);
  }
  else
  {
    v34 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v34)
      v33 = 0;
    else
      v33 = *v34;
  }
  this[77].f32[1] = ausdk::AUElement::GetParameter(v33, 0x14u);
  v35 = this[9];
  if (v35)
  {
    v36 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v35 + 32))(v35, 0);
  }
  else
  {
    v37 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v37)
      v36 = 0;
    else
      v36 = *v37;
  }
  this[78].f32[0] = ausdk::AUElement::GetParameter(v36, 0x1Eu);
  v38 = this[9];
  if (v38)
  {
    v39 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v38 + 32))(v38, 0);
  }
  else
  {
    v40 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v40)
      v39 = 0;
    else
      v39 = *v40;
  }
  this[78].f32[1] = ausdk::AUElement::GetParameter(v39, 0xCu);
  v41 = this[9];
  if (v41)
  {
    v42 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v41 + 32))(v41, 0);
  }
  else
  {
    v43 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v43)
      v42 = 0;
    else
      v42 = *v43;
  }
  this[209].i32[1] = ausdk::AUElement::GetParameter(v42, 0xDu);
  v44 = this[9];
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  this[214].i32[0] = ausdk::AUElement::GetParameter(v45, 0xEu);
  v47 = this[9];
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  this[72].f32[0] = ausdk::AUElement::GetParameter(v48, 0xFu);
  v50 = this[9];
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  this[79].f32[0] = ausdk::AUElement::GetParameter(v51, 0x10u);
  v53 = this[9];
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  v56 = ausdk::AUElement::GetParameter(v54, 0x11u) != 0.0;
  if (this[94].u8[0] != v56)
  {
    v57 = this[93];
    if (v57)
    {
      (*(void (**)(float32x2_t))(**(_QWORD **)&v57 + 24))(v57);
      this[94].i8[0] = v56;
    }
  }
  v58 = this[76].f32[0];
  v59 = this[9];
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  Parameter = ausdk::AUElement::GetParameter(v60, 9u);
  v63 = this[9];
  if (v63)
  {
    v64 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v63 + 32))(v63, 0);
  }
  else
  {
    v65 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v65)
      v64 = 0;
    else
      v64 = *v65;
  }
  v66 = ausdk::AUElement::GetParameter(v64, 9u);
  this[76].f32[0] = v66;
  LOBYTE(v66) = this[82].i8[1];
  v67 = (float)LODWORD(v66);
  v68 = this[9];
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  v71 = v58 != Parameter;
  if (ausdk::AUElement::GetParameter(v69, 0x41u) != v67)
    v71 = 1;
  v72 = this[9];
  if (v72)
  {
    v73 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v72 + 32))(v72, 0);
  }
  else
  {
    v74 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v74)
      v73 = 0;
    else
      v73 = *v74;
  }
  this[82].i8[1] = ausdk::AUElement::GetParameter(v73, 0x41u) != 0.0;
  v75 = this[82].f32[1];
  v76 = this[9];
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v76 + 32))(v76, 0);
  }
  else
  {
    v78 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  if (v75 != ausdk::AUElement::GetParameter(v77, 0x43u))
    v71 = 1;
  v79 = this[9];
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v79 + 32))(v79, 0);
  }
  else
  {
    v81 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  this[82].f32[1] = ausdk::AUElement::GetParameter(v80, 0x43u);
  v82 = this[97].f32[0];
  v83 = this[9];
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  if (v82 != ausdk::AUElement::GetParameter(v84, 0x12u))
    v71 = 1;
  v86 = this[9];
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  v89 = ausdk::AUElement::GetParameter(v87, 0x12u);
  this[97].f32[0] = v89;
  v90 = this[66].u32[1];
  if (v90)
    v90 = ((float)(v89 * this[69].f32[1]) / 1000.0);
  this[97].i32[1] = v90;
  v91 = this[9];
  if (v91)
  {
    v92 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v91 + 32))(v91, 0);
  }
  else
  {
    v93 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v93)
      v92 = 0;
    else
      v92 = *v93;
  }
  this[82].i8[3] = ausdk::AUElement::GetParameter(v92, 0x42u) != 0.0;
  v94 = this[9];
  if (v94)
  {
    v95 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v94 + 32))(v94, 0);
  }
  else
  {
    v96 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v96)
      v95 = 0;
    else
      v95 = *v96;
  }
  this[86].f32[0] = ausdk::AUElement::GetParameter(v95, 0x46u);
  v97 = this[9];
  if (v97)
  {
    v98 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v97 + 32))(v97, 0);
  }
  else
  {
    v99 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v99)
      v98 = 0;
    else
      v98 = *v99;
  }
  this[87].f32[0] = ausdk::AUElement::GetParameter(v98, 0x47u);
  v100 = this[9];
  if (v100)
  {
    v101 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v100 + 32))(v100, 0);
  }
  else
  {
    v102 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v102)
      v101 = 0;
    else
      v101 = *v102;
  }
  v103 = ausdk::AUElement::GetParameter(v101, 0x44u) * this[69].f32[1];
  if (v103 >= 2.22507386e-308)
    v104 = -6.90775528 / v103;
  else
    v104 = -INFINITY;
  v105 = exp(v104);
  if (v104 < -708.4)
    v105 = 0.0;
  v106 = v105;
  this[83].f32[1] = 1.0 - v106;
  v107 = this[9];
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  v110 = ausdk::AUElement::GetParameter(v108, 0x45u) * this[69].f32[1];
  if (v110 >= 2.22507386e-308)
    v111 = -6.90775528 / v110;
  else
    v111 = -INFINITY;
  v112 = exp(v111);
  if (v111 < -708.4)
    v112 = 0.0;
  v113 = v112;
  this[84].f32[0] = 1.0 - v113;
  v114 = this[9];
  if (v114)
  {
    v115 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v114 + 32))(v114, 0);
  }
  else
  {
    v116 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v116)
      v115 = 0;
    else
      v115 = *v116;
  }
  this[82].i8[2] = ausdk::AUElement::GetParameter(v115, 0x48u) != 0.0;
  v117 = this[9];
  if (v117)
  {
    v118 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v117 + 32))(v117, 0);
  }
  else
  {
    v119 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v119)
      v118 = 0;
    else
      v118 = *v119;
  }
  this[86].f32[1] = ausdk::AUElement::GetParameter(v118, 0x4Cu);
  v120 = this[9];
  if (v120)
  {
    v121 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v120 + 32))(v120, 0);
  }
  else
  {
    v122 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v122)
      v121 = 0;
    else
      v121 = *v122;
  }
  v123 = ausdk::AUElement::GetParameter(v121, 0x4Au) * this[69].f32[1];
  if (v123 >= 2.22507386e-308)
    v124 = -6.90775528 / v123;
  else
    v124 = -INFINITY;
  v125 = exp(v124);
  if (v124 < -708.4)
    v125 = 0.0;
  v126 = v125;
  this[84].f32[1] = 1.0 - v126;
  v127 = this[9];
  if (v127)
  {
    v128 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v127 + 32))(v127, 0);
  }
  else
  {
    v129 = (ausdk::AUElement **)this[6];
    if ((ausdk::AUElement **)this[7] == v129)
      v128 = 0;
    else
      v128 = *v129;
  }
  v130 = ausdk::AUElement::GetParameter(v128, 0x4Bu) * this[69].f32[1];
  if (v130 >= 2.22507386e-308)
    v131 = -6.90775528 / v130;
  else
    v131 = -INFINITY;
  v132 = exp(v131);
  HIDWORD(v133) = 0;
  if (v131 < -708.4)
    v132 = 0.0;
  v134 = v132;
  LODWORD(v133) = 1.0;
  this[85].f32[0] = 1.0 - v134;
  if (v71)
  {
    v135 = this[221].u32[0];
    if ((_DWORD)v135)
    {
      v136 = this[82].u8[0];
      v137 = this[66].i32[1];
      v138 = this + 135;
      do
      {
        v139 = *(_QWORD *)&v138[1] - *(_QWORD *)v138;
        if (v139 >= 1)
          bzero(*(void **)v138, 4 * (((unint64_t)v139 >> 2) - ((unint64_t)v139 > 3)) + 4);
        if (!v136)
        {
          v140 = (void *)v138[32];
          v141 = *(_QWORD *)&v138[33] - (_QWORD)v140;
          if (v141 >= 1)
            bzero(v140, 4 * (((unint64_t)v141 >> 2) - ((unint64_t)v141 > 3)) + 4);
          v142 = (void *)v138[48];
          v143 = *(_QWORD *)&v138[49] - (_QWORD)v142;
          if (v143 >= 1)
            bzero(v142, 4 * (((unint64_t)v143 >> 2) - ((unint64_t)v143 > 3)) + 4);
        }
        if (v137)
        {
          v144 = (void *)v138[16];
          v145 = *(_QWORD *)&v138[17] - (_QWORD)v144;
          if (v145 >= 1)
            bzero(v144, 4 * (((unint64_t)v145 >> 2) - ((unint64_t)v145 > 3)) + 4);
        }
        v138 += 2;
        --v135;
      }
      while (v135);
    }
    HIDWORD(v132) = 0;
    this[207] = 0;
    this[88].i32[1] = 0;
    this[67].i8[1] = 1;
  }
  if (this[209].i32[1])
  {
    v146 = 1;
    do
    {
      v147 = this[9];
      if (v147)
      {
        v148 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v147 + 32))(v147, 0);
      }
      else
      {
        v149 = (ausdk::AUElement **)this[6];
        if ((ausdk::AUElement **)this[7] == v149)
          v148 = 0;
        else
          v148 = *v149;
      }
      *(float *)(*(_QWORD *)&this[210] + 4 * v146) = ausdk::AUElement::GetParameter(v148, v146 + 19);
      v150 = this[9];
      if (v150)
      {
        v151 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v150 + 32))(v150, 0);
      }
      else
      {
        v152 = (ausdk::AUElement **)this[6];
        if ((ausdk::AUElement **)this[7] == v152)
          v151 = 0;
        else
          v151 = *v152;
      }
      *(float *)&v132 = ausdk::AUElement::GetParameter(v151, v146 + 29);
      if (*(float *)&v132 < this[77].f32[0])
        LODWORD(v132) = this[77].i32[0];
      LODWORD(v133) = this[76].i32[1];
      if (*(float *)&v132 > *(float *)&v133)
        LODWORD(v132) = this[76].i32[1];
      v153 = (_DWORD *)this[212];
      v153[v146] = LODWORD(v132);
      v154 = this[209].u32[1];
    }
    while (v146++ < v154);
    v156 = (v154 + 1);
  }
  else
  {
    v153 = (_DWORD *)this[212];
    v156 = 1;
  }
  v157 = (_DWORD *)this[210];
  *v157 = 0;
  v157[v156] = 1065353216;
  *v153 = this[77].i32[0];
  LODWORD(v132) = this[76].i32[1];
  v153[v156] = LODWORD(v132);
  return AUVolumeCompressorV2::AdjustForVolume(this, v132, v133);
}

void AUVolumeCompressorV2::ComputeNumbers(AUVolumeCompressorV2 *this)
{
  float *v2;
  float v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  float Parameter;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  float v37;
  vDSP_Length v38;
  float v39;
  float v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float __B;

  v2 = (float *)*((_QWORD *)this + 219);
  v3 = *v2;
  v4 = (float *)*((_QWORD *)this + 215);
  v5 = *v4;
  v6 = *((float *)this + 148) + (1.0 - *v2) * (float)(v4[1] - *v4);
  v7 = *((unsigned int *)this + 428);
  v8 = *((_QWORD *)this + 217);
  if ((_DWORD)v7)
  {
    v9 = v4 + 1;
    v10 = (float *)*((_QWORD *)this + 219);
    v11 = (float *)*((_QWORD *)this + 217);
    v12 = *((unsigned int *)this + 428);
    do
    {
      v13 = v6 - (float)(*v10 * v5);
      *v11++ = v13;
      v14 = *v10++;
      v15 = v14;
      v16 = *v9++;
      v5 = v16;
      v6 = v13 + (float)(v15 * v16);
      --v12;
    }
    while (v12);
    v3 = v2[v7];
    v5 = v4[v7];
  }
  else
  {
    v7 = 0;
  }
  *(float *)(v8 + 4 * v7) = v6 - (float)(v3 * v5);
  v17 = *((float *)this + 146);
  *((float *)this + 159) = v17;
  v18 = v17 + *((float *)this + 140);
  v19 = *((float *)this + 147);
  if (v18 > v19)
  {
    v17 = v17 + (float)(v19 - v18);
    *((float *)this + 159) = v17;
  }
  *((_DWORD *)this + 178) = 1065353216;
  *((_DWORD *)this + 181) = 0;
  v20 = *((float *)this + 148);
  v21 = *((float *)this + 149);
  v22 = (float)((float)(v4[1] - (float)(*v2 * (float)(v4[1] - v20))) - (float)(v17 + v21)) / (float)(v20 - v21);
  *((float *)this + 179) = v22;
  *((float *)this + 182) = (float)(v17 + v21) - (float)(v22 * v21);
  *((_DWORD *)this + 180) = 1065353216;
  *((float *)this + 183) = v17;
  *((float *)this + 184) = v20;
  *((float *)this + 185) = v21;
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  Parameter = ausdk::AUElement::GetParameter(v24, 9u);
  if (*((_BYTE *)this + 656))
  {
    v27 = *((_DWORD *)this + 84);
    v28 = 1;
    v29 = v27;
    do
    {
      if (v27 / v28 < ((float)(Parameter * *((float *)this + 139)) / 1000.0))
        break;
      if (v27 == v27 / v28 * v28)
        v29 = v27 / v28;
      ++v28;
    }
    while (v28 != 33);
  }
  else
  {
    v29 = ((float)(Parameter * *((float *)this + 139)) / 1000.0) & 0xFFFFFFFC;
  }
  *((_DWORD *)this + 150) = v29;
  v30 = vcvtas_u32_f32((float)(*((float *)this + 160) / Parameter) + 0.25);
  if (v30 <= 1)
    v30 = 1;
  *((_DWORD *)this + 161) = v30;
  v31 = Parameter * (float)v30;
  if (v31 > 400.0)
    v31 = 399.0;
  *((float *)this + 160) = v31;
  v32 = *((unsigned int *)this + 442);
  if ((_DWORD)v32)
  {
    v33 = (unsigned int *)((char *)this + 792);
    do
    {
      *v33 = v30;
      *((_QWORD *)v33 - 1) = 0;
      v33 += 8;
      --v32;
    }
    while (v32);
  }
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  v37 = ausdk::AUElement::GetParameter(v35, 0x49u);
  v38 = *((unsigned int *)this + 150);
  v39 = v37 * (float)(*((float *)this + 139) / (float)v38);
  v40 = 0.0;
  if (v39 >= 0.00001)
    v40 = expf(-4.6052 / v39);
  *((float *)this + 176) = 1.0 - v40;
  if ((_DWORD)v38)
  {
    v41 = 0;
    v42 = (float *)*((_QWORD *)this + 130);
    v43 = *((_QWORD *)this + 131);
    if ((v38 + 1) > 2)
      v44 = (v38 + 1);
    else
      v44 = 2;
    v45 = v44 - 1;
    do
    {
      v46 = (float)(v41 + 1);
      v42[v41] = (float)((float)(*((float *)this + 162) * v46) * 1000.0) / *((float *)this + 139);
      *(float *)(v43 + 4 * v41++) = (float)((float)(*((float *)this + 163) * v46) * 1000.0) / *((float *)this + 139);
    }
    while (v45 != v41);
  }
  else
  {
    v42 = (float *)*((_QWORD *)this + 130);
  }
  __B = 20.0;
  vDSP_vsdiv(v42, 1, &__B, v42, 1, v38);
  vDSP_vsdiv(*((const float **)this + 131), 1, &__B, *((float **)this + 131), 1, *((unsigned int *)this + 150));
  if (*((_DWORD *)this + 150))
  {
    v47 = 0;
    do
    {
      v48 = *((_QWORD *)this + 130);
      *(float *)(v48 + 4 * v47) = __exp10f(*(float *)(v48 + 4 * v47));
      v49 = *((_QWORD *)this + 131);
      *(float *)(v49 + 4 * v47) = __exp10f(*(float *)(v49 + 4 * v47));
      ++v47;
    }
    while (v47 < *((unsigned int *)this + 150));
  }
}

void AUVolumeCompressorV2::ProcessAudioBlock(AUVolumeCompressorV2 *this, const float **a2, float **a3, unsigned int a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  vDSP_Length v17;
  uint64_t v18;
  float **v19;
  float *v20;
  uint64_t v21;
  float **v22;
  float *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  const float **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  float *v36;
  float *v37;
  const float **v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  const float **v44;
  char *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  float v52;
  uint64_t v53;
  const float **v54;
  float v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  unsigned int v67;
  float v68;
  uint64_t v69;
  const float **v70;
  const float *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float **v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  const float **v97;
  unsigned int v98;
  float v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  float v103;
  float v104;
  uint64_t v105;
  ausdk::AUElement *v106;
  ausdk::AUElement **v107;
  uint64_t v108;
  ausdk::AUElement *v109;
  ausdk::AUElement **v110;
  uint64_t v111;
  void **v112;
  const void **v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v118;
  char *v119;
  const void *v120;
  size_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  const float *v125;
  const float *v126;
  float *v127;
  unsigned int v128;
  float v129;
  float __C;
  _OWORD v131[2];
  float __B[8];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v8 = *((float *)this + 143) + *((float *)this + 140);
  v9 = *((float *)this + 145);
  v10 = 1.0;
  if (v8 >= v9)
  {
    v11 = v9 - v8;
    v12 = v11 / 20.0;
    v13 = v11 < -4.0;
    v14 = -0.2;
    if (!v13)
      v14 = v12;
    v10 = __exp10f(v14);
  }
  v15 = *((float *)this + 141);
  if ((float)(v10 * v15) != 1.0)
  {
    v16 = *((float *)this + 142);
    if ((float)(v10 * v15) == v16)
    {
      __B[0] = v10 * v15;
      if (a4)
      {
        v21 = a4;
        v22 = (float **)a2;
        do
        {
          v23 = *v22++;
          vDSP_vsmul(v23, 1, __B, v23, 1, *((unsigned int *)this + 150));
          --v21;
        }
        while (v21);
      }
    }
    else
    {
      v17 = *((unsigned int *)this + 150);
      __B[0] = (float)-(float)(v16 - (float)(v15 * v10)) / (float)v17;
      vDSP_vramp((const float *)this + 142, __B, *((float **)this + 132), 1, v17);
      if (a4)
      {
        v18 = a4;
        v19 = (float **)a2;
        do
        {
          v20 = *v19++;
          vDSP_vmul(v20, 1, *((const float **)this + 132), 1, v20, 1, *((unsigned int *)this + 150));
          --v18;
        }
        while (v18);
      }
    }
  }
  *((float *)this + 142) = v10 * *((float *)this + 141);
  v131[0] = xmmword_1B664B088;
  v131[1] = unk_1B664B098;
  if (a4 <= 4)
    HIDWORD(v131[0]) = 1065353216;
  if (*((_BYTE *)this + 752))
  {
    if (a4)
    {
      v24 = 0;
      v25 = 4 * *((_DWORD *)this + 150);
      v26 = *((_QWORD *)this + 96);
      v27 = *((_QWORD *)this + 95);
      v28 = (uint64_t *)((char *)this + 1592);
      v29 = a2;
      do
      {
        v30 = v26 + v24;
        *(_DWORD *)(v30 + 12) = v25;
        v31 = v27 + v24;
        *(_DWORD *)(v31 + 12) = v25;
        v32 = (uint64_t)*v29++;
        *(_QWORD *)(v31 + 16) = v32;
        v33 = *v28++;
        *(_QWORD *)(v30 + 16) = v33;
        v24 += 16;
      }
      while (16 * a4 != v24);
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 93) + 32))(*((_QWORD *)this + 93));
    if (a4)
    {
      v43 = *((_DWORD *)this + 150);
      v44 = (const float **)((char *)this + 1592);
      v45 = (char *)this + 784;
      v46 = __B;
      v47 = (float *)v131;
      v48 = a4;
      do
      {
        vDSP_svesq(*v44, 1, v46, v43);
        v43 = *((_DWORD *)this + 150);
        v49 = (float)(*v47 * *v46) / (float)v43;
        *v46 = v49;
        v50 = *((unsigned int *)v45 + 1);
        *(float *)(*((_QWORD *)v45 + 2) + 4 * v50) = v49;
        v51 = *((_DWORD *)v45 + 2);
        *((_DWORD *)v45 + 1) = ((int)v50 + 1) % v51;
        if (*(_DWORD *)v45 < v51)
          ++*(_DWORD *)v45;
        ++v44;
        ++v46;
        v45 += 32;
        ++v47;
        --v48;
      }
      while (v48);
      goto LABEL_32;
    }
LABEL_38:
    v52 = SlidingRMSWindow::ComputeRMS((const float **)this + 98);
    goto LABEL_39;
  }
  if (!a4)
    goto LABEL_38;
  v34 = *((_DWORD *)this + 150);
  v35 = (char *)this + 784;
  v36 = __B;
  v37 = (float *)v131;
  v38 = a2;
  v39 = a4;
  do
  {
    vDSP_svesq(*v38, 1, v36, v34);
    v34 = *((_DWORD *)this + 150);
    v40 = (float)(*v37 * *v36) / (float)v34;
    *v36 = v40;
    v41 = *((unsigned int *)v35 + 1);
    *(float *)(*((_QWORD *)v35 + 2) + 4 * v41) = v40;
    v42 = *((_DWORD *)v35 + 2);
    *((_DWORD *)v35 + 1) = ((int)v41 + 1) % v42;
    if (*(_DWORD *)v35 < v42)
      ++*(_DWORD *)v35;
    ++v38;
    ++v36;
    v35 += 32;
    ++v37;
    --v39;
  }
  while (v39);
LABEL_32:
  v52 = SlidingRMSWindow::ComputeRMS((const float **)this + 98);
  if (a4 < 2)
  {
LABEL_39:
    v56 = 0;
    goto LABEL_40;
  }
  v53 = a4 - 1;
  v54 = (const float **)((char *)this + 816);
  do
  {
    v55 = SlidingRMSWindow::ComputeRMS(v54);
    if (v52 < v55)
      v52 = v55;
    v54 += 4;
    --v53;
  }
  while (v53);
  v56 = 1;
LABEL_40:
  v57 = v52 + 1.0e-20;
  v58 = log10f(v57) * 10.0;
  if (v58 >= *((float *)this + 184))
  {
    v61 = 0;
    do
    {
      if (v58 < *(float *)(*((_QWORD *)this + 215) + 4 * v61))
        break;
      ++v61;
    }
    while (v61 <= *((_DWORD *)this + 428));
    v62 = v61 - 1;
    v59 = *(float *)(*((_QWORD *)this + 219) + 4 * v62);
    v60 = *(float *)(*((_QWORD *)this + 217) + 4 * v62);
  }
  else if (v58 >= *((float *)this + 185))
  {
    v59 = *((float *)this + 179);
    v60 = *((float *)this + 182);
  }
  else
  {
    v59 = *((float *)this + 180);
    v60 = *((float *)this + 183);
  }
  v63 = v60 + (float)(v59 * v58);
  *((float *)this + 143) = v63;
  if (v63 <= *((float *)this + 145))
    v64 = v63;
  else
    v64 = *((float *)this + 145);
  v65 = v64 - v58;
  if (*((_BYTE *)this + 658))
  {
    v66 = *((unsigned int *)this + 442);
    __C = 0.0;
    vDSP_svesq(*a2, 1, &__C, *((unsigned int *)this + 150));
    v67 = *((_DWORD *)this + 150);
    v68 = __C / (float)v67;
    __C = v68;
    if (v66 >= 2)
    {
      v69 = v66 - 1;
      v70 = a2 + 1;
      do
      {
        v129 = 0.0;
        v71 = *v70++;
        vDSP_svesq(v71, 1, &v129, v67);
        v67 = *((_DWORD *)this + 150);
        v68 = v129 / (float)v67;
        if (__C >= v68)
          v68 = __C;
        __C = v68;
        --v69;
      }
      while (v69);
    }
    v72 = *((float *)this + 175) + (float)(*((float *)this + 176) * (float)(v68 - *((float *)this + 175)));
    *((float *)this + 175) = v72;
    v73 = v72 + 1.0e-20;
    v74 = log10f(v73) * 10.0;
    v75 = *((float *)this + 173);
    if (v74 <= v75)
      v75 = v74;
    v76 = v75 - v74;
    if (v76 != 0.0 && v76 < v65)
    {
      v64 = v58 + v76;
      v65 = v76;
    }
  }
  v128 = a4;
  if (*((_BYTE *)this + 657))
  {
    v77 = *((_DWORD *)this + 150);
    v78 = 2;
    v79 = v77;
    do
    {
      if (v77 / v78 < ((float)(*((float *)this + 165) * *((float *)this + 139)) / 1000.0))
        break;
      if (v77 == v77 / v78 * v78)
        v79 = v77 / v78;
      ++v78;
    }
    while (v78 != 33);
    *((_DWORD *)this + 151) = v79;
    if (v77)
    {
      v80 = 0;
      v81 = a4 - 1;
      do
      {
        __C = 0.0;
        v82 = v80;
        vDSP_svesq(&(*a2)[v80], 1, &__C, v79);
        v79 = *((_DWORD *)this + 151);
        v83 = __C / (float)v79;
        __C = v83;
        v84 = (float **)(a2 + 1);
        v85 = v81;
        if (v56)
        {
          do
          {
            v129 = 0.0;
            v86 = (uint64_t)*v84++;
            vDSP_svesq((const float *)(v86 + 4 * v82), 1, &v129, v79);
            v79 = *((_DWORD *)this + 151);
            v83 = v129 / (float)v79;
            if (__C >= v83)
              v83 = __C;
            __C = v83;
            --v85;
          }
          while (v85);
        }
        v87 = v83 + 1.0e-20;
        v88 = log10f(v87) * 10.0;
        v89 = *((float *)this + 172);
        if (v88 <= v89)
          v89 = v88;
        v90 = v89 - v88;
        if (v90 != 0.0 && v90 < v65)
        {
          v64 = v58 + v90;
          v65 = v90;
        }
        v80 = v79 + v82;
      }
      while (v79 + v82 < *((_DWORD *)this + 150));
    }
  }
  v91 = *((float *)this + 416) + 1.0e-20;
  v92 = v65 + (float)(log10f(v91) * -20.0);
  v93 = *((_DWORD *)this + 195);
  if (!v93 || v92 <= 0.0 || (v94 = *((_DWORD *)this + 443), v95 = v94 - 1, v94 == 1))
  {
    *((_DWORD *)this + 443) = 0;
  }
  else
  {
    if (v94)
    {
LABEL_90:
      v98 = v128;
      *((_DWORD *)this + 443) = v95;
      *((_DWORD *)this + 444) = 0;
      v92 = 0.0;
      goto LABEL_91;
    }
    if (*((float *)this + 444) < 0.0)
    {
      v96 = *((_DWORD *)this + 150);
      if (v96)
        v95 = v93 / v96 + 1;
      else
        v95 = 1;
      goto LABEL_90;
    }
  }
  *((float *)this + 444) = v92;
  if (v92 < 0.0)
  {
    __C = __exp10f(v92 / 20.0);
    v129 = 1.0;
    v97 = (const float **)((char *)this + 1048);
    v98 = v128;
    goto LABEL_92;
  }
  v98 = v128;
LABEL_91:
  __C = 1.0;
  v129 = __exp10f(v92 / 20.0);
  v97 = (const float **)((char *)this + 1040);
LABEL_92:
  vDSP_vclip(*v97, 1, &__C, &v129, *((float **)this + 132), 1, *((unsigned int *)this + 150));
  vDSP_vsmul(*((const float **)this + 132), 1, (const float *)this + 416, *((float **)this + 132), 1, *((unsigned int *)this + 150));
  v99 = *(float *)(*((_QWORD *)this + 132) + 4 * (*((_DWORD *)this + 150) - 1));
  *((float *)this + 416) = v99;
  if (*((_BYTE *)this + 536))
  {
    v100 = *((_QWORD *)this + 9);
    if (v100)
    {
      v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
      v99 = *((float *)this + 416);
    }
    else
    {
      v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v102)
        v101 = 0;
      else
        v101 = *v102;
    }
    v103 = v99 + 1.0e-20;
    v104 = log10f(v103);
    ausdk::AUElement::SetParameter(v101, 0x3Eu, fabsf(v104 * 20.0), 0);
    v105 = *((_QWORD *)this + 9);
    if (v105)
    {
      v106 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 32))(v105, 0);
    }
    else
    {
      v107 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v107)
        v106 = 0;
      else
        v106 = *v107;
    }
    ausdk::AUElement::SetParameter(v106, 0x3Fu, v58, 0);
    v108 = *((_QWORD *)this + 9);
    if (v108)
    {
      v109 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 32))(v108, 0);
    }
    else
    {
      v110 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v110)
        v109 = 0;
      else
        v109 = *v110;
    }
    ausdk::AUElement::SetParameter(v109, 0x40u, v64, 0);
  }
  if (*((_DWORD *)this + 195) && *((_DWORD *)this + 133) && v98)
  {
    v111 = v98;
    v112 = (void **)((char *)this + 1208);
    v113 = (const void **)a2;
    do
    {
      memcpy(*((void **)this + 134), *v113, 4 * *((unsigned int *)this + 150));
      v114 = *((unsigned int *)this + 150);
      v115 = *((unsigned int *)this + 195);
      v116 = (void *)*v113;
      v117 = *v112;
      if (v114 >= v115)
      {
        memcpy(v116, v117, 4 * v115);
        v122 = *((unsigned int *)this + 195);
        v123 = v114 - v122;
        memcpy((char *)*v113 + 4 * v122, *((const void **)this + 134), 4 * v123);
        v119 = (char *)*v112;
        v120 = (const void *)(*((_QWORD *)this + 134) + 4 * v123);
        v121 = 4 * *((unsigned int *)this + 195);
      }
      else
      {
        memcpy(v116, v117, 4 * v114);
        memmove(*v112, (char *)*v112 + 4 * *((unsigned int *)this + 150), 4 * (*((_DWORD *)this + 195) - *((_DWORD *)this + 150)));
        v118 = *((unsigned int *)this + 150);
        v119 = (char *)*v112 + 4 * (*((_DWORD *)this + 195) - v118);
        v120 = (const void *)*((_QWORD *)this + 134);
        v121 = 4 * v118;
      }
      memcpy(v119, v120, v121);
      v112 += 2;
      ++v113;
      --v111;
    }
    while (v111);
  }
  if (v98)
  {
    v124 = v98;
    do
    {
      v126 = *a2++;
      v125 = v126;
      v127 = *a3++;
      vDSP_vmul(v125, 1, *((const float **)this + 132), 1, v127, 1, *((unsigned int *)this + 150));
      --v124;
    }
    while (v124);
  }
}

void AUVolumeCompressorV2::ProcessShortAudioBlocks(AUVolumeCompressorV2 *this, float **a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  const float *v10;
  float **v11;
  uint64_t v12;
  const float *v13;
  vDSP_Length v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  vDSP_Length v28;
  float *v29;
  float *v30;
  vDSP_Length v31;
  float v32;
  uint64_t v33;
  float v34;
  unint64_t v35;
  uint64_t v36;
  const float **v37;
  float **v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  const float **v42;
  float **v43;
  uint64_t v44;
  uint64_t __B;
  uint64_t __C;

  v6 = *((_DWORD *)this + 150);
  v7 = 2;
  LODWORD(v8) = v6;
  do
  {
    if (v6 / v7 < ((float)(*((float *)this + 165) * *((float *)this + 139)) / 1000.0))
      break;
    if (v6 == v6 / v7 * v7)
      LODWORD(v8) = v6 / v7;
    ++v7;
  }
  while (v7 != 33);
  *((_DWORD *)this + 151) = v8;
  if (v6)
  {
    v9 = 0;
    v43 = a2 + 1;
    v44 = a3 - 1;
    v42 = (const float **)((char *)this + 1080);
    do
    {
      __C = 0;
      v10 = &(*a2)[v9];
      if (*((_BYTE *)this + 659))
      {
        vDSP_maxmgv(v10, 1, (float *)&__C + 1, v8);
      }
      else
      {
        vDSP_svesq(v10, 1, (float *)&__C, v8);
        *(float *)&__C = *(float *)&__C / (float)*((unsigned int *)this + 151);
      }
      v11 = v43;
      v12 = v44;
      if (a3 >= 2)
      {
        do
        {
          __B = 0;
          v13 = &(*v11)[v9];
          v14 = *((unsigned int *)this + 151);
          if (*((_BYTE *)this + 659))
          {
            vDSP_maxmgv(v13, 1, (float *)&__B + 1, v14);
            v15 = *((float *)&__C + 1);
            if (*((float *)&__C + 1) < *((float *)&__B + 1))
              v15 = *((float *)&__B + 1);
            *((float *)&__C + 1) = v15;
          }
          else
          {
            vDSP_svesq(v13, 1, (float *)&__B, v14);
            v16 = *(float *)&__B / (float)*((unsigned int *)this + 151);
            if (*(float *)&__C >= v16)
              v16 = *(float *)&__C;
            *(float *)&__C = v16;
          }
          ++v11;
          --v12;
        }
        while (v12);
      }
      if (*((_BYTE *)this + 659))
      {
        v17 = *((float *)&__C + 1) + 1.0e-20;
        v18 = log10f(v17) * 20.0;
        v19 = *((float *)this + 174);
        if (v18 <= v19)
          v19 = v18;
        v20 = v19 - v18;
        v21 = *((float *)this + 417);
        if (*((_BYTE *)this + 684) != 0 && v20 > v21)
          v22 = *((float *)this + 417);
        else
          v22 = v20;
        if ((*((_BYTE *)this + 684) == 0 || v20 <= v21) && v20 > v21)
        {
          v22 = *((float *)this + 166);
          if (v22 >= v20)
            v22 = v20;
        }
        *((float *)this + 166) = v20;
        v23 = v22 < v21;
      }
      else
      {
        v24 = *(float *)&__C + 1.0e-20;
        v25 = log10f(v24);
        v23 = 0;
        v26 = v25 * 10.0;
        v27 = *((float *)this + 172);
        if (v26 <= v27)
          v27 = v26;
        v22 = v27 - v26;
        *((float *)this + 166) = v22;
      }
      *((_BYTE *)this + 684) = v23;
      v28 = *((unsigned int *)this + 151);
      v29 = (float *)*((_QWORD *)this + 132);
      v30 = v29;
      v31 = v28;
      if ((_DWORD)v28)
      {
        do
        {
          v32 = *((float *)this + 417);
          if (v22 >= v32)
            v33 = 672;
          else
            v33 = 668;
          v34 = v32 + (float)(*(float *)((char *)this + v33) * (float)(v22 - v32));
          *((float *)this + 417) = v34;
          *v30++ = v34;
          --v31;
        }
        while (v31);
      }
      else
      {
        v28 = 0;
      }
      HIDWORD(__B) = 1101004800;
      vDSP_vsdiv(v29, 1, (const float *)&__B + 1, v29, 1, v28);
      LODWORD(v8) = *((_DWORD *)this + 151);
      if ((_DWORD)v8)
      {
        v35 = 0;
        do
        {
          v36 = *((_QWORD *)this + 132);
          *(float *)(v36 + 4 * v35) = __exp10f(*(float *)(v36 + 4 * v35));
          ++v35;
          v8 = *((unsigned int *)this + 151);
        }
        while (v35 < v8);
      }
      v37 = v42;
      v38 = a2;
      v39 = a3;
      if (a3)
      {
        do
        {
          vDSP_vmul(*v37, 1, *((const float **)this + 132), 1, (float *)*v37, 1, *((unsigned int *)this + 151));
          memcpy(*((void **)this + 133), &(*v38)[v9], 4 * *((unsigned int *)this + 151));
          v40 = (uint64_t)*v38++;
          memcpy((void *)(v40 + 4 * v9), *v37, 4 * *((unsigned int *)this + 151));
          v41 = (float *)*v37;
          v37 += 2;
          memcpy(v41, *((const void **)this + 133), 4 * *((unsigned int *)this + 151));
          --v39;
        }
        while (v39);
        LODWORD(v8) = *((_DWORD *)this + 151);
      }
      v9 += v8;
    }
    while (v9 < *((_DWORD *)this + 150));
  }
}

float SlidingRMSWindow::ComputeRMS(const float **this)
{
  vDSP_Length v1;
  float __C;

  __C = 0.0;
  v1 = *(unsigned int *)this;
  if (!(_DWORD)v1)
    return 0.0;
  vDSP_sve(this[2], 1, &__C, v1);
  return __C / (float)*(unsigned int *)this;
}

float AUVolumeCompressorV2::AdjustForVolume(float32x2_t *this, double a2, double a3)
{
  float *v4;
  float *v5;
  unsigned int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  float32_t v13;
  float v14;
  float32x2_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  float32x2_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  float32x2_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  unint64_t v24;
  float32x2_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  float Parameter;
  float32x2_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  float *v33;
  unint64_t v34;
  _DWORD *v36;
  float result;

  v4 = (float *)this[210];
  v5 = (float *)this[212];
  v6 = this[209].u32[1];
  v8 = *v4;
  v7 = v4[1];
  v10 = *v5;
  v9 = v5[1];
  if (v6)
  {
    v11 = this[78].f32[1];
    if (v11 > v7)
    {
      v12 = 2;
      do
      {
        v10 = v9;
        v8 = v7;
        v7 = v4[v12];
        v9 = v5[v12];
        if (v12 > v6)
          break;
        ++v12;
      }
      while (v11 > v7);
    }
  }
  if (v7 != v8)
    v9 = (float)(v9 - (float)((float)((float)(v9 - v10) / (float)(v7 - v8)) * v7))
       + (float)((float)((float)(v9 - v10) / (float)(v7 - v8)) * this[78].f32[1]);
  *(float *)&a3 = this[76].f32[1] - v9;
  this[74] = vsub_f32(this[74], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  v13 = v9 + this[72].f32[0];
  this[70].f32[0] = v13;
  v14 = __exp10f(v13 / 20.0);
  this[70].f32[1] = v14;
  if (this[67].i8[1])
    this[71].f32[0] = v14;
  if (this[67].i8[0])
  {
    v15 = this[9];
    if (v15)
    {
      v16 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v15 + 32))(v15, 0);
    }
    else
    {
      v17 = (ausdk::AUElement **)this[6];
      if ((ausdk::AUElement **)this[7] == v17)
        v16 = 0;
      else
        v16 = *v17;
    }
    ausdk::AUElement::SetParameter(v16, 0, this[70].f32[0], 0);
    v18 = this[9];
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v18 + 32))(v18, 0);
    }
    else
    {
      v20 = (ausdk::AUElement **)this[6];
      if ((ausdk::AUElement **)this[7] == v20)
        v19 = 0;
      else
        v19 = *v20;
    }
    ausdk::AUElement::SetParameter(v19, 0x3Cu, this[74].f32[0], 0);
    v21 = this[9];
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v21 + 32))(v21, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)this[6];
      if ((ausdk::AUElement **)this[7] == v23)
        v22 = 0;
      else
        v22 = *v23;
    }
    ausdk::AUElement::SetParameter(v22, 0x3Du, this[74].f32[1], 0);
  }
  if (this[214].i32[0])
  {
    v24 = 1;
    do
    {
      v25 = this[9];
      if (v25)
      {
        v26 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v25 + 32))(v25, 0);
      }
      else
      {
        v27 = (ausdk::AUElement **)this[6];
        if ((ausdk::AUElement **)this[7] == v27)
          v26 = 0;
        else
          v26 = *v27;
      }
      Parameter = ausdk::AUElement::GetParameter(v26, v24 + 39);
      if (Parameter < this[74].f32[0])
        Parameter = this[74].f32[0];
      *(float *)(*(_QWORD *)&this[215] + 4 * v24) = Parameter;
      v29 = this[9];
      if (v29)
      {
        v30 = (ausdk::AUElement *)(*(uint64_t (**)(float32x2_t, _QWORD))(**(_QWORD **)&v29 + 32))(v29, 0);
      }
      else
      {
        v31 = (ausdk::AUElement **)this[6];
        if ((ausdk::AUElement **)this[7] == v31)
          v30 = 0;
        else
          v30 = *v31;
      }
      v32 = ausdk::AUElement::GetParameter(v30, v24 + 49);
      v33 = (float *)this[219];
      v33[v24] = 1.0 / v32;
      v34 = this[214].u32[0];
    }
    while (v24++ < v34);
  }
  else
  {
    LODWORD(v34) = 0;
    v33 = (float *)this[219];
  }
  v36 = (_DWORD *)this[215];
  *v36 = this[74].i32[0];
  *(float *)&v36[(v34 + 1)] = *(float *)&v36[v34] + 100.0;
  result = 1.0 / this[79].f32[0];
  *v33 = result;
  return result;
}

void AUTweakaLeakIR::~AUTweakaLeakIR(AUTweakaLeakIR *this)
{
  AUTweakaLeakIR::~AUTweakaLeakIR(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t *v10;

  *(_QWORD *)this = &off_1E69CEA80;
  *((_QWORD *)this + 99) = *((_QWORD *)this + 98);
  v2 = (uint64_t *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v2)
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v2);
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_16);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 1136);
  v3 = (void *)*((_QWORD *)this + 138);
  if (v3)
  {
    *((_QWORD *)this + 139) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 135);
  if (v4)
  {
    *((_QWORD *)this + 136) = v4;
    operator delete(v4);
  }
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 1064);
  CACFDictionary::~CACFDictionary((AUTweakaLeakIR *)((char *)this + 1040));
  v5 = (void *)*((_QWORD *)this + 127);
  if (v5)
  {
    *((_QWORD *)this + 128) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v6)
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v6);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((AUTweakaLeakIR *)((char *)this + 984));
  v7 = (void *)*((_QWORD *)this + 120);
  if (v7)
  {
    *((_QWORD *)this + 121) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 114);
  if (v8)
  {
    *((_QWORD *)this + 115) = v8;
    operator delete(v8);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 840);
  v9 = (void *)*((_QWORD *)this + 98);
  if (v9)
  {
    *((_QWORD *)this + 99) = v9;
    operator delete(v9);
  }
  v10 = (uint64_t *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v10)
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v10);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUTweakaLeakIR::Initialize(AUTweakaLeakIR *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  CFDictionaryRef *v8;
  uint64_t v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  vDSP_Length Parameter;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  CFStringRef v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const __CFBoolean *v34;
  const __CFBoolean *v35;
  CFTypeID v36;
  CFTypeID TypeID;
  CFTypeID v38;
  unsigned __int16 v39;
  int v40;
  caulk::concurrent::messenger *v41;
  NSObject *v42;
  std::__fs::filesystem::path *v43;
  std::chrono::system_clock::time_point v44;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  tm *v46;
  size_t v47;
  NSObject *v48;
  std::string *v49;
  __int128 v50;
  void **v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  _QWORD *v58;
  __int128 v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::string::size_type *v63;
  uint64_t v64;
  uint64_t v65;
  std::ios_base *v66;
  std::ios_base *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *size;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75[3];
  void *__p;
  void *v77;
  uint64_t v78;
  CFArrayRef Mutable;
  __int16 v80;
  CFArrayRef theArray;
  __int16 v82;
  void *key;
  void *v84;
  char v85;
  time_t v86;
  std::chrono::system_clock::time_point __t;
  std::__fs::filesystem::path v88;
  void *v89[2];
  unsigned __int8 v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::__fs::filesystem::path v94;
  std::__fs::filesystem::path v95;
  std::__fs::filesystem::path v96;
  uint64_t v97;
  _BYTE v98[32];
  __int128 v99;
  __int128 v100;
  _QWORD v101[3];

  v101[2] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 99) = *((_QWORD *)this + 98);
  v2 = (uint64_t *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v2)
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v2);
  *((_BYTE *)this + 376) = 1;
  v3 = *((_QWORD *)this + 15);
  if (v3)
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  else
    v4 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if ((_DWORD)v4 != 2)
    return 4294956428;
  v5 = *((_QWORD *)this + 21);
  if (v5)
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if ((_DWORD)v6 != 1)
    return 4294956428;
  v7 = *(double *)(ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0) + 80);
  if (v7 != *(double *)(ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 128), 0) + 80))
    return 4294956428;
  *((_DWORD *)this + 135) = *((_DWORD *)this + 84);
  *((_DWORD *)this + 136) = *(double *)(ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0)+ 80);
  *((_WORD *)this + 268) = 0;
  *((_BYTE *)this + 538) = 0;
  *(_QWORD *)((char *)this + 548) = 0xC000000200;
  *(_OWORD *)((char *)this + 680) = xmmword_1B66A0D30;
  *((_QWORD *)this + 87) = 0x800000004;
  *((_DWORD *)this + 176) = 5;
  *(_OWORD *)((char *)this + 708) = xmmword_1B66A0D40;
  *(_OWORD *)((char *)this + 724) = xmmword_1B66A1650;
  *((_DWORD *)this + 193) = 0;
  *((_QWORD *)this + 97) = 0;
  *(_OWORD *)((char *)this + 740) = xmmword_1B66A0D60;
  *((_DWORD *)this + 140) = 1065353216;
  *((_BYTE *)this + 887) = 0;
  *(_OWORD *)((char *)this + 888) = xmmword_1B66A0D70;
  *((_BYTE *)this + 904) = 0;
  v10 = AUTweakaLeakIR::InitializeFFTWindowInternals(this);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  Parameter = ausdk::AUElement::GetParameter(v12, 0x1Bu);
  *((_DWORD *)this + 227) = Parameter;
  *((_BYTE *)this + 884) = 0;
  DspLib::Biquad::Filter::initialize((AUTweakaLeakIR *)((char *)this + 936), 1uLL, Parameter);
  v15 = *((_QWORD *)this + 9);
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  *((float *)this + 191) = ausdk::AUElement::GetParameter(v16, 0x1Cu);
  *((_BYTE *)this + 885) = 0;
  AUTweakaLeakIR::ApplyDymamicTLIRParams(this);
  *((_DWORD *)this + 194) = 0;
  *((_DWORD *)this + 195) = *((_DWORD *)this + 178);
  *((_DWORD *)this + 193) = *((_DWORD *)this + 185);
  v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Biquads_%u"), *((unsigned int *)this + 136));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, v18);
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v82 = 257;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v80 = 257;
  v8 = (CFDictionaryRef *)((char *)this + 1040);
  CACFDictionary::GetCACFArray((const __CFDictionary **)this + 130, CFSTR("Anchors"), (CACFArray *)&Mutable);
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 130), key))
  {
    CACFDictionary::GetCACFArray((const __CFDictionary **)this + 130, (const __CFString *)key, (CACFArray *)&theArray);
  }
  else if (CFDictionaryContainsKey(*v8, CFSTR("Biquads")))
  {
    CACFDictionary::GetCACFArray((const __CFDictionary **)this + 130, CFSTR("Biquads"), (CACFArray *)&theArray);
  }
  if (theArray && CFArrayGetCount(theArray) && Mutable && CFArrayGetCount(Mutable))
  {
    CFHelper::extractVector<float>((uint64_t)&v96, &Mutable);
    CFHelper::extractVectorOfVectors<float>((uint64_t *)v98, &theArray);
    v19 = (uint64_t)(v96.__pn_.__r_.__value_.__l.__size_ - v96.__pn_.__r_.__value_.__r.__words[0]) >> 2;
    v20 = (*(_QWORD *)&v98[8] - *(_QWORD *)v98) / 24;
    v21 = v19 == v20;
    if (*(_QWORD *)&v98[8] != *(_QWORD *)v98)
    {
      v22 = 0;
      v23 = 0;
      if (v20 <= 1)
        v20 = 1;
      v24 = (_QWORD *)(*(_QWORD *)v98 + 8);
      do
      {
        v25 = *(v24 - 1);
        v26 = (*v24 - v25) >> 2;
        v28 = *v24 != v25 && 0xCCCCCCCCCCCCCCCDLL * v26 < 0x3333333333333334;
        v21 &= v28;
        if (v26 == v23)
          v29 = v21;
        else
          v29 = 0;
        if (v22)
          v21 = v29;
        else
          v23 = v26;
        ++v22;
        v24 += 3;
      }
      while (v20 != v22);
    }
    if ((v21 & 1) != 0)
    {
      __p = 0;
      v77 = 0;
      v78 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v96.__pn_.__r_.__value_.__l.__data_, v96.__pn_.__r_.__value_.__l.__size_, v19);
      memset(v75, 0, sizeof(v75));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v75, *(uint64_t *)v98, *(uint64_t *)&v98[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v98[8] - *(_QWORD *)v98) >> 3));
      v8 = (CFDictionaryRef *)v75;
      AUTweakaLeakIR::SetCorrectiveBQsAndAnchorGains((uint64_t)this, &__p, v75);
      v95.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      if (__p)
      {
        v77 = __p;
        operator delete(__p);
      }
    }
    v95.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    if (v96.__pn_.__r_.__value_.__r.__words[0])
    {
      v96.__pn_.__r_.__value_.__l.__size_ = v96.__pn_.__r_.__value_.__r.__words[0];
      operator delete(v96.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (*((double *)this + 132) <= 0.0)
  {
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::reset[abi:ne180100]((uint64_t)this + 1064);
  }
  else
  {
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v96, 0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>((__CFDictionary *)v96.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E0CFFD50], *((double *)this + 132));
    LODWORD(v30) = *((_DWORD *)this + 136);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>((__CFDictionary *)v96.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E0CFFD60], (double)v30);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>((__CFDictionary *)v96.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E0CFFD68], 2);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>((__CFDictionary *)v96.__pn_.__r_.__value_.__l.__size_, (const void *)*MEMORY[0x1E0CFFD70], 32);
    CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)v98);
    v31 = v98[8];
    if (v98[8])
    {
      if (*((_BYTE *)this + 1072))
      {
        v32 = *((_QWORD *)this + 133);
        *((_QWORD *)this + 133) = *(_QWORD *)v98;
        *(_QWORD *)v98 = v32;
      }
      else
      {
        v33 = *(_QWORD *)v98;
        *(_QWORD *)v98 = 0;
        *((_QWORD *)this + 133) = v33;
        *((_BYTE *)this + 1072) = 1;
      }
    }
    else
    {
      v8 = (CFDictionaryRef *)*(unsigned int *)v98;
    }
    caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)v98);
    CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v96);
    if (!v31)
      goto LABEL_119;
  }
  std::vector<float>::resize((uint64_t)this + 1104, *((unsigned int *)this + 283));
  std::vector<float>::resize((uint64_t)this + 1080, *((unsigned int *)this + 84));
  (*(void (**)(AUTweakaLeakIR *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v8 = (CFDictionaryRef *)v10;
  v34 = (const __CFBoolean *)CFPreferencesCopyAppValue(CFSTR("AUTweakIRInternalLogs"), CFSTR("com.apple.coreaudio"));
  v35 = v34;
  if (v34)
  {
    v36 = CFGetTypeID(v34);
    if (v36 == CFBooleanGetTypeID())
    {
      TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(v35))
      {
        if (!CFBooleanGetValue(v35))
          goto LABEL_72;
      }
      else
      {
        v38 = CFNumberGetTypeID();
        if (v38 != CFGetTypeID(v35))
        {
LABEL_72:
          v40 = 0;
          goto LABEL_73;
        }
        v39 = applesauce::CF::details::number_convert_as<BOOL>(v35);
        v40 = 0;
        if (v39 < 0x100u || !(_BYTE)v39)
        {
LABEL_73:
          CFRelease(v35);
          if (v40)
          {
            if (!*((_QWORD *)this + 142))
            {
              v70 = caulk::concurrent::messenger::shared_logging_priority(v41);
              std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &,void>((uint64_t *)&v96, 0, v70);
              std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 1136, (__int128 *)&v96);
              size = (std::__shared_weak_count *)v96.__pn_.__r_.__value_.__l.__size_;
              if (v96.__pn_.__r_.__value_.__l.__size_)
              {
                v72 = (unint64_t *)(v96.__pn_.__r_.__value_.__l.__size_ + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
            }
            std::__fs::filesystem::__temp_directory_path(&v96, 0);
            std::__fs::filesystem::path::path[abi:ne180100]<char [15],void>((std::string *)v98);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v98, (uint64_t)&v96, &v88);
            if ((v98[23] & 0x80000000) != 0)
              operator delete(*(void **)v98);
            if (SHIBYTE(v96.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v96.__pn_.__r_.__value_.__l.__data_);
            if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1)
              dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_5430);
            v42 = AUTweakaLeakIR::getAUSLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              v43 = &v88;
              if ((v88.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v43 = (std::__fs::filesystem::path *)v88.__pn_.__r_.__value_.__r.__words[0];
              LODWORD(v96.__pn_.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v96.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
              _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEFAULT, "set up logs in \"%s\"", (uint8_t *)&v96, 0xCu);
            }
            std::__fs::filesystem::__status(&v88, 0);
            if (v96.__pn_.__r_.__value_.__s.__data_[0] == 255
              || !v96.__pn_.__r_.__value_.__s.__data_[0])
            {
              std::__fs::filesystem::__create_directory(&v88, 0);
            }
            v99 = 0u;
            v100 = 0u;
            memset(v98, 0, sizeof(v98));
            v44.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            v86 = 0;
            __t.__d_.__rep_ = v44.__d_.__rep_;
            v86 = std::chrono::system_clock::to_time_t(&__t);
            rep = __t.__d_.__rep_;
            v46 = localtime(&v86);
            v47 = strftime(v98, 0x40uLL, "%T", v46);
            sprintf(&v98[v47], ":%03lld", rep / 1000 % 1000);
            std::string::basic_string[abi:ne180100]<0>(&v84, v98);
            if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1)
              dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_5430);
            v48 = AUTweakaLeakIR::getAUSLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v96.__pn_.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v96.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v98;
              _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEFAULT, "set up logs with time stamp \"%s\"", (uint8_t *)&v96, 0xCu);
            }
            std::operator+<char>();
            v49 = std::string::append(&v91, ".", 1uLL);
            v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v92.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(v89, "TalIRInternals");
            if ((v90 & 0x80u) == 0)
              v51 = v89;
            else
              v51 = (void **)v89[0];
            if ((v90 & 0x80u) == 0)
              v52 = v90;
            else
              v52 = (std::string::size_type)v89[1];
            v53 = std::string::append(&v92, (const std::string::value_type *)v51, v52);
            v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
            v93.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v54;
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v53->__r_.__value_.__r.__words[0] = 0;
            v55 = std::string::append(&v93, ".csv", 4uLL);
            v56 = v55->__r_.__value_.__r.__words[0];
            v101[0] = v55->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v101 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
            v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            *(std::string::size_type *)((char *)&v94.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v101 + 7);
            v94.__pn_.__r_.__value_.__r.__words[0] = v56;
            v94.__pn_.__r_.__value_.__l.__size_ = v101[0];
            *((_BYTE *)&v94.__pn_.__r_.__value_.__s + 23) = v57;
            std::__fs::filesystem::operator/[abi:ne180100](&v94, (uint64_t)&v88, &v95);
            std::ofstream::basic_ofstream(&v96);
            if (SHIBYTE(v95.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v95.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v94.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v94.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v93.__r_.__value_.__l.__data_);
            if ((char)v90 < 0)
              operator delete(v89[0]);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v92.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v91.__r_.__value_.__l.__data_);
            v58 = (_QWORD *)operator new();
            v59 = *((_OWORD *)this + 71);
            v74 = v59;
            if (*((_QWORD *)&v59 + 1))
            {
              v60 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
              do
                v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }
            v62 = operator new();
            *(_QWORD *)v62 = 0;
            *(_QWORD *)(v62 + 8) = 0;
            *(_QWORD *)(v62 + 16) = 850045863;
            *(_OWORD *)(v62 + 24) = 0u;
            *(_OWORD *)(v62 + 40) = 0u;
            *(_OWORD *)(v62 + 56) = 0u;
            *(_QWORD *)(v62 + 72) = 0;
            v63 = (std::string::size_type *)MEMORY[0x1E0DE4F48];
            v64 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
            v65 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
            *(_QWORD *)(v62 + 80) = v64;
            *(_QWORD *)(v62 + 496) = MEMORY[0x1E0DE4FF8] + 16;
            *(_QWORD *)(v62 + 80 + *(_QWORD *)(v64 - 24)) = v65;
            v66 = (std::ios_base *)(v62 + 80 + *(_QWORD *)(*(_QWORD *)(v62 + 80) - 24));
            v67 = (std::ios_base *)((char *)&v96 + *(_QWORD *)(v96.__pn_.__r_.__value_.__r.__words[0] - 24));
            std::ios_base::move(v66, v67);
            v66[1].__vftable = v67[1].__vftable;
            v67[1].__vftable = 0;
            v66[1].__fmtflags_ = v67[1].__fmtflags_;
            v68 = MEMORY[0x1E0DE4FB0];
            *(_QWORD *)(v62 + 80) = MEMORY[0x1E0DE4FB0] + 24;
            *(_QWORD *)(v62 + 496) = v68 + 64;
            *(_QWORD *)(v62 + 80 + *(_QWORD *)(*(_QWORD *)(v62 + 80) - 24) + 40) = MEMORY[0x1BCC95770](v62 + 88, &v96.__pn_.__r_.__value_.__r.__words[1]);
            *(_OWORD *)(v62 + 648) = v74;
            *(_QWORD *)(v62 + 664) = 0;
            *(_QWORD *)(v62 + 728) = 0;
            *v58 = v62;
            v69 = (uint64_t *)*((_QWORD *)this + 66);
            *((_QWORD *)this + 66) = v58;
            if (v69)
              std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v69);
            v96.__pn_.__r_.__value_.__r.__words[0] = *v63;
            *(std::string::size_type *)((char *)v96.__pn_.__r_.__value_.__r.__words
                                      + *(_QWORD *)(v96.__pn_.__r_.__value_.__r.__words[0] - 24)) = v63[3];
            MEMORY[0x1BCC95788](&v96.__pn_.__r_.__value_.__r.__words[1]);
            std::ostream::~ostream();
            MEMORY[0x1BCC95BE4](&v97);
            if (v85 < 0)
              operator delete(v84);
            if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__pn_.__r_.__value_.__l.__data_);
          }
          goto LABEL_119;
        }
      }
      v40 = 1;
      goto LABEL_73;
    }
    CFRelease(v35);
  }
LABEL_119:
  CACFArray::~CACFArray((CACFArray *)&Mutable);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  if (key)
    CFRelease(key);
  return (uint64_t)v8;
}

void sub_1B628E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,const void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  uint64_t v54;

  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (__p)
    operator delete(__p);
  a50 = (void *)(v54 - 192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  CACFArray::~CACFArray((CACFArray *)&a20);
  CACFArray::~CACFArray((CACFArray *)&a22);
  applesauce::CF::StringRef::~StringRef(&a24);
  _Unwind_Resume(a1);
}

uint64_t AUTweakaLeakIR::Reset(AUTweakaLeakIR *this)
{
  *((_DWORD *)this + 193) = *((_DWORD *)this + 185);
  *((_DWORD *)this + 194) = 0;
  *((_DWORD *)this + 195) = *((_DWORD *)this + 178);
  *((_BYTE *)this + 904) = 0;
  if (*((_BYTE *)this + 17))
    DspLib::Biquad::SetupWrapper::reset((AUTweakaLeakIR *)((char *)this + 984));
  return 0;
}

uint64_t AUTweakaLeakIR::GetPropertyInfo(AUTweakaLeakIR *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v8;
  char v9;
  char v10;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3900)
  {
    if (a2 != 21)
    {
      if (a2 != 3700)
      {
        if (a2 != 3900)
          return result;
        *a6 = 1;
        v8 = (*((_DWORD *)this + 278) - *((_DWORD *)this + 276)) & 0xFFFFFFFC;
        goto LABEL_19;
      }
      *a6 = 0;
      goto LABEL_18;
    }
    v10 = 1;
LABEL_17:
    *a6 = v10;
LABEL_18:
    v8 = 4;
    goto LABEL_19;
  }
  switch(a2)
  {
    case 3901:
      v9 = *((_BYTE *)this + 17) ^ 1;
      break;
    case 3902:
      v10 = *((_BYTE *)this + 17) ^ 1;
      goto LABEL_17;
    case 8900:
      v9 = 1;
      break;
    default:
      return result;
  }
  *a6 = v9;
  v8 = 8;
LABEL_19:
  result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUTweakaLeakIR::GetProperty(const void **this, int a2, int a3, unsigned int a4, _QWORD *__dst)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3899)
  {
    if (a2 == 21)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 856);
    }
    else
    {
      if (a2 != 3700)
        return result;
      result = 0;
      v7 = *((unsigned __int8 *)this + 376);
    }
  }
  else
  {
    if (a2 == 3900)
    {
      memcpy(__dst, this[138], (_BYTE *)this[139] - (_BYTE *)this[138]);
      return 0;
    }
    if (a2 == 3901)
    {
      result = 0;
      *__dst = this[132];
      return result;
    }
    if (a2 != 3902)
      return result;
    result = 0;
    v7 = *((_DWORD *)this + 283);
  }
  *(_DWORD *)__dst = v7;
  return result;
}

uint64_t AUTweakaLeakIR::SetProperty(AUTweakaLeakIR *this, int a2, int a3, unsigned int a4, _DWORD *__src, size_t __n)
{
  uint64_t result;
  void *v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3900)
  {
    if (a2 == 21)
    {
      if (__n >= 4)
      {
        result = 0;
        *((_BYTE *)this + 856) = *__src != 0;
        return result;
      }
    }
    else
    {
      if (a2 != 3900)
        return result;
      v8 = (void *)*((_QWORD *)this + 138);
      if (*((_QWORD *)this + 139) - (_QWORD)v8 >= (unint64_t)__n)
      {
        memcpy(v8, __src, __n);
        result = 0;
        *((_BYTE *)this + 1128) = 1;
        return result;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 3901:
        if ((_DWORD)__n == 8)
        {
          if (!*((_BYTE *)this + 17))
          {
            result = 0;
            *((_QWORD *)this + 132) = *(_QWORD *)__src;
            return result;
          }
          return 4294956431;
        }
        break;
      case 3902:
        if ((_DWORD)__n == 4)
        {
          if (!*((_BYTE *)this + 17))
          {
            result = 0;
            *((_DWORD *)this + 283) = *__src;
            return result;
          }
          return 4294956431;
        }
        break;
      case 8900:
        if ((_DWORD)__n == 8)
        {
          CACFDictionary::operator=((uint64_t)this + 1040, *(const void **)__src);
          return 0;
        }
        return 4294956445;
      default:
        return result;
    }
  }
  return 4294956445;
}

uint64_t AUTweakaLeakIR::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUElement **v8;
  ausdk::AUElement *Element;
  ausdk::AUScope *Scope;
  ausdk::AUElement **v12;

  if (a2 > 0x1D || a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  else
  {
    if (a2 - 28 <= 0xFFFFFFFB)
      *((_BYTE *)this + a2 + 857) = 1;
    v8 = this[9];
    if (v8)
    {
      Element = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v8 + 4))(this[9], 0);
    }
    else
    {
      v12 = this[6];
      if (this[7] == v12)
        Element = 0;
      else
        Element = *v12;
    }
  }
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUTweakaLeakIR::CanScheduleParameters(AUTweakaLeakIR *this)
{
  return 0;
}

uint64_t AUTweakaLeakIR::ProcessMultipleBufferLists(AUTweakaLeakIR *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  unint64_t v14;
  ausdk::AUScope *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float *const *ExpectedNumberOfOutputFrames;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float *v23;
  vDSP_Length v24;
  void *mData;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  float *v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  int v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  char v48;
  float v49;
  char v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  _QWORD **v74;
  float __A;
  float *v76[2];
  float v77;
  float v78;
  _QWORD v79[2];

  v79[1] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 856) || !*((_BYTE *)this + 676))
    memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, 4 * *((unsigned int *)this + 135));
  if (*((_DWORD *)this + 84) != a3)
    return 4294956422;
  if (!*((_BYTE *)this + 886) && !*((_BYTE *)this + 859) && !*((_BYTE *)this + 860)
    || (result = AUTweakaLeakIR::InitializeFFTWindowInternals(this), !(_DWORD)result))
  {
    AUTweakaLeakIR::ApplyDymamicTLIRParams(this);
    result = 4294956428;
    if (a4)
    {
      if (a6 == 1)
      {
        if (a4 <= 1)
        {
          v14 = 0;
          v15 = (AUTweakaLeakIR *)((char *)this + 128);
          v16 = 4 * a3;
          v17 = 16;
          while (v14 < *(unsigned int *)(ausdk::AUScope::SafeGetElement(v15, 0) + 108))
          {
            memcpy(*(void **)((char *)&(*a7)->mNumberBuffers + v17), *(const void **)((char *)&(*a5)->mNumberBuffers + v17), v16);
            ++v14;
            v17 += 16;
          }
          return 0;
        }
        __A = 0.0;
        if (!*((_BYTE *)this + 1128) || !*((_BYTE *)this + 1072))
        {
          mData = a5[1]->mBuffers[0].mData;
          goto LABEL_28;
        }
        v76[0] = *((float **)this + 138);
        v18 = (*((_QWORD *)this + 139) - (unint64_t)v76[0]) >> 2;
        v79[0] = *((_QWORD *)this + 135);
        ExpectedNumberOfOutputFrames = (float *const *)CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*((CA::AudioSampleRateConverter **)this + 133));
        v20 = *((_QWORD *)this + 136) - *((_QWORD *)this + 135);
        if (ExpectedNumberOfOutputFrames > (unint64_t)(v20 >> 2))
        {
          ExpectedNumberOfOutputFrames = (float *const *)((unint64_t)v20 >> 2);
          LODWORD(v18) = CA::AudioSampleRateConverter::GetRequiredNumberOfInputFrames(*((CA::AudioSampleRateConverter **)this
                                                                                      + 133));
          if (v18 > (unint64_t)((uint64_t)(*((_QWORD *)this + 139) - *((_QWORD *)this + 138)) >> 2))
          {
            _os_assert_log();
            _os_crash();
            __break(1u);
          }
        }
        v21 = CA::AudioSampleRateConverter::Process(*((CA::AudioSampleRateConverter **)this + 133), (const float *const *)v76, v18, v79, ExpectedNumberOfOutputFrames);
        v22 = *((_QWORD *)this + 136);
        if (v21)
        {
          v23 = (float *)*((_QWORD *)this + 135);
          v24 = (v22 - (uint64_t)v23) >> 2;
        }
        else
        {
          v26 = *((_QWORD *)this + 135);
          v27 = (v22 - v26) >> 2;
          if (v27 <= ExpectedNumberOfOutputFrames)
          {
LABEL_27:
            mData = (void *)*((_QWORD *)this + 135);
            *((_BYTE *)this + 1128) = 0;
LABEL_28:
            memcpy(*((void **)this + 101), mData, 4 * *((unsigned int *)this + 138));
            if (*((_BYTE *)this + 768)
              && (memcpy((void *)(*((_QWORD *)this + 101) + 4 * *((unsigned int *)this + 139)), mData, 4 * *((unsigned int *)this + 138)), *((_BYTE *)this + 768)))
            {
              vDSP_vmul(*((const float **)this + 101), 1, *((const float **)this + 102), 1, *((float **)this + 101), 1, *((unsigned int *)this + 137));
            }
            else
            {
              vDSP_vmul(*((const float **)this + 101), 1, *((const float **)this + 102), 1, *((float **)this + 101), 1, *((unsigned int *)this + 138));
              v28 = *((_DWORD *)this + 137);
              v29 = *((unsigned int *)this + 138);
              if (v28 > v29)
                vDSP_vfill(&__A, (float *)(*((_QWORD *)this + 101) + 4 * v29), 1, v28 - v29);
            }
            MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUTweakaLeakIR *)((char *)this + 840), *((DSPComplex **)this + 101), (DSPSplitComplex *)((char *)this + 824), 1.0);
            v30 = *((unsigned int *)this + 174);
            v31 = (float *)(*((_QWORD *)this + 103) + 4 * v30);
            v32 = (float *)(*((_QWORD *)this + 104) + 4 * v30);
            vDSP_vsq(v31, 1, v31, 1, *((unsigned int *)this + 176));
            vDSP_vsq(v32, 1, v32, 1, *((unsigned int *)this + 176));
            vDSP_vadd(v31, 1, v32, 1, v31, 1, *((unsigned int *)this + 176));
            v33 = *((_DWORD *)this + 176);
            if (v33)
            {
              v34 = 0.0;
              do
              {
                v35 = *v31++;
                v34 = v34 + sqrtf(v35);
                --v33;
              }
              while (v33);
            }
            else
            {
              v34 = 0.0;
            }
            v36 = *((float *)this + 140);
            if (*((_BYTE *)this + 768))
              v37 = (float)(v36 * v34) + 1.0e-15;
            else
              v37 = (float)((float)(v34 * v36) * *((float *)this + 177)) + 1.0e-15;
            v38 = log10f(v37) * 20.0;
            v39 = *((float *)this + 178);
            v40 = v38 - v39;
            if ((float)(v38 - v39) >= *((float *)this + 182))
            {
              if (v40 >= *((float *)this + 183))
              {
                v41 = v37;
                if (v40 > *((float *)this + 184))
                  v41 = *((float *)this + 186);
              }
              else
              {
                v41 = *((float *)this + 187);
              }
            }
            else
            {
              v41 = *((float *)this + 185);
            }
            v42 = *((unsigned __int8 *)this + 537);
            if (*((_BYTE *)this + 537))
            {
              v43 = *((float *)this + 195);
              v44 = *((float *)this + 193);
            }
            else
            {
              v44 = *((float *)this + 193);
              *((float *)this + 195) = v44;
              v43 = v41;
            }
            v45 = 724;
            if (v43 > v44)
              v45 = 720;
            v46 = *((float *)this + 222);
            v47 = *((float *)this + 223);
            v48 = *((_BYTE *)this + 904);
            if (v48)
              v48 = v46 > (float)(v47 - *((float *)this + 224));
            v49 = *(float *)((char *)this + v45);
            if (v46 > v47)
              v50 = 1;
            else
              v50 = v48;
            *((_BYTE *)this + 904) = v50;
            if ((v50 & 1) != 0 || !*((_BYTE *)this + 887))
            {
              v49 = *((float *)this + 225);
              v43 = *((float *)this + 185);
            }
            if (!v42)
            {
              v44 = (float)(v43 * v49) + (1.0 - v49) * v44;
              *((float *)this + 193) = v44;
            }
            v51 = log10f(v44 + 1.0e-10) * 20.0;
            v52 = v39 - v51;
            if (*((_BYTE *)this + 536))
            {
              v53 = *((float *)this + 179);
            }
            else
            {
              v54 = *((float *)this + 171);
              if (v52 >= v54)
                v54 = v39 - v51;
              if (*((float *)this + 170) >= v54)
                v53 = v54;
              else
                v53 = *((float *)this + 170);
            }
            v55 = *((_QWORD *)this + 126);
            if (v55 && !*((_BYTE *)this + 538))
            {
              BiquadInterpolator::GetCoefficientsAtPosition(v55, *((float **)this + 127), *((_QWORD *)this + 128), v53);
              v57 = 0.0;
              if (*((_DWORD *)this + 227))
              {
                v61 = 0;
                v62 = 0;
                do
                {
                  DspLib::Biquad::read(v61 + *((_QWORD *)this + 127), (uint64_t)v76);
                  v63 = *((_QWORD *)this + 114);
                  v64 = *(_OWORD *)v76;
                  *(float *)(v63 + 16) = v77;
                  *(_OWORD *)v63 = v64;
                  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((_QWORD *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 115) - *((_QWORD *)this + 114)) >> 2), v62++, 0x41uLL);
                  v61 += 20;
                }
                while (v62 < *((unsigned int *)this + 227));
              }
            }
            else
            {
              v56 = v53 * *((float *)this + 191);
              if (v56 < *((float *)this + 171))
                v56 = *((float *)this + 171);
              if (*((float *)this + 170) >= v56)
                v57 = v56;
              else
                v57 = *((float *)this + 170);
              v58 = *((float *)this + 190);
              AUTweakaLeakIR::CalcPeakingShelfCoeffs((float *)this, v57, *((float *)this + 189), *((float *)this + 188));
              DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((_QWORD *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 115) - *((_QWORD *)this + 114)) >> 2), 0, 0x41uLL);
              if (*((_DWORD *)this + 227) >= 2u)
              {
                AUTweakaLeakIR::CalcPeakingShelfCoeffs((float *)this, -v57, v58, *((float *)this + 188));
                DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((_QWORD *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 115) - *((_QWORD *)this + 114)) >> 2), 1, 0x41uLL);
                if (*((_DWORD *)this + 227) >= 3u)
                {
                  v59 = *((_QWORD *)this + 114);
                  *(_OWORD *)v59 = DspLib::Biquad::kBypassSection;
                  *(_DWORD *)(v59 + 16) = 0;
                  if (*((_DWORD *)this + 227) >= 3u)
                  {
                    v60 = 2;
                    do
                      DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 936, *((_QWORD *)this + 114), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 115) - *((_QWORD *)this + 114)) >> 2), v60++, 0x41uLL);
                    while (v60 < *((unsigned int *)this + 227));
                  }
                }
              }
            }
            DspLib::Biquad::Filter::process((_QWORD *)this + 117, (uint64_t)(*a5)->mBuffers[0].mData, a3, (uint64_t)(*a7)->mBuffers[0].mData, (float **)a3);
            *((float *)this + 194) = v53;
            v65 = *((_QWORD *)this + 9);
            if (v65)
            {
              v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
            }
            else
            {
              v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v67)
                v66 = 0;
              else
                v66 = *v67;
            }
            ausdk::AUElement::SetParameter(v66, 0x18u, v37, 0);
            v68 = *((_QWORD *)this + 9);
            if (v68)
            {
              v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
            }
            else
            {
              v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v70)
                v69 = 0;
              else
                v69 = *v70;
            }
            ausdk::AUElement::SetParameter(v69, 0x19u, v51, 0);
            v71 = *((_QWORD *)this + 9);
            if (v71)
            {
              v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
            }
            else
            {
              v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v73)
                v72 = 0;
              else
                v72 = *v73;
            }
            ausdk::AUElement::SetParameter(v72, 0x1Au, v53, 0);
            v74 = (_QWORD **)*((_QWORD *)this + 66);
            if (v74)
            {
              *(float *)v76 = v38;
              *((float *)v76 + 1) = log10f(v41) * 20.0;
              v76[1] = (float *)__PAIR64__(LODWORD(v52), LODWORD(v51));
              v77 = v53;
              v78 = v57;
              AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Write(*v74, (__int128 *)v76);
            }
            return 0;
          }
          v23 = (float *)(v26 + 4 * ExpectedNumberOfOutputFrames);
          v24 = v27 - ExpectedNumberOfOutputFrames;
        }
        vDSP_vclr(v23, 1, v24);
        goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t AUTweakaLeakIR::Render(AUTweakaLeakIR *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t Element;
  ausdk::AUInputElement *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t BufferList;
  unsigned int v13;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  Element = ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v9 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v9, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v13 = 0;
    if (!ausdk::AUBase::HasInput(this, 1u)
      || (v13 = 1,
          v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), 1u),
          result = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4),
          !(_DWORD)result))
    {
      v15 = ausdk::AUScope::SafeGetElement((AUTweakaLeakIR *)((char *)this + 80), v13);
      v17[0] = BufferList;
      v17[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      v16 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      return (*(uint64_t (**)(AUTweakaLeakIR *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v17, 1, &v16);
    }
  }
  return result;
}

uint64_t AUTweakaLeakIR::GetParameterList(AUTweakaLeakIR *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_QWORD *)a3 + 14) = 0x1D0000001CLL;
  }
  result = 0;
  *a4 = 30;
  return result;
}

uint64_t AUTweakaLeakIR::GetParameterInfo(AUTweakaLeakIR *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x1D)
  {
    v6 = off_1E69CED50[a3];
    v7 = dword_1B664B0AC[a3];
    v8 = flt_1B664B124[a3];
    v9 = flt_1B664B19C[a3];
    v10 = flt_1B664B214[a3];
    v11 = dword_1B664B28C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

double AUTweakaLeakIR::GetLatency(AUTweakaLeakIR *this)
{
  return 0.0;
}

double AUTweakaLeakIR::GetTailTime(AUTweakaLeakIR *this)
{
  return 0.2;
}

uint64_t AUTweakaLeakIR::SupportsTail(AUTweakaLeakIR *this)
{
  return 1;
}

BOOL AUTweakaLeakIR::StreamFormatWritable(AUTweakaLeakIR *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUTweakaLeakIR::SupportedNumChannels(AUTweakaLeakIR *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUTweakaLeakIR::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUTweakaLeakIR::ValidFormat(AUTweakaLeakIR *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  uint64_t result;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
    result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  if (v5 == 1 || v5 == 2)
  {
    if (a4->mChannelsPerFrame == 1)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUTweakaLeakIR::InitializeFFTWindowInternals(AUTweakaLeakIR *this)
{
  uint64_t *v2;
  uint64_t v3;
  ausdk::AUElement *v4;
  ausdk::AUElement **v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  unsigned int Parameter;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  float *v27;
  vDSP_Length v28;
  DSPComplex *v29;
  const float *v30;
  uint64_t v31;
  float *v32;
  float *v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  uint8_t buf[8];
  uint64_t __A;

  *((_QWORD *)this + 99) = *((_QWORD *)this + 98);
  v2 = (uint64_t *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v2)
    std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](v2);
  __A = 0;
  *(_QWORD *)((char *)this + 857) = 0x101010101010101;
  *(_QWORD *)((char *)this + 865) = 0x101010101010101;
  *(_QWORD *)((char *)this + 873) = 0x101010101010101;
  *(_QWORD *)((char *)this + 879) = 0x101010101010101;
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0);
  }
  else
  {
    v5 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v5)
      v4 = 0;
    else
      v4 = *v5;
  }
  *((_BYTE *)this + 768) = ausdk::AUElement::GetParameter(v4, 0x1Du) != 0.0;
  *((_BYTE *)this + 886) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  Parameter = ausdk::AUElement::GetParameter(v7, 2u);
  *((_DWORD *)this + 137) = Parameter;
  *((_BYTE *)this + 859) = 0;
  if (*((_BYTE *)this + 768))
  {
    v10 = *((_DWORD *)this + 135);
    if (v10 <= Parameter)
      v10 = Parameter;
    Parameter = 2 * v10;
    *((_DWORD *)this + 137) = 2 * v10;
  }
  *((_DWORD *)this + 139) = Parameter >> 1;
  if (MultiRadixRealFFT::Initialize((AUTweakaLeakIR *)((char *)this + 840), Parameter))
  {
    v11 = 512;
    if (*((_BYTE *)this + 768))
    {
      v12 = *((_DWORD *)this + 135);
      if (v12 >= 0x301)
        v13 = 2048;
      else
        v13 = 1024;
      if (v12 < 0x181)
        v13 = 512;
      if (v13 > v12)
        v12 = v13;
      v11 = 2 * v12;
    }
    else
    {
      v12 = 256;
    }
    *((_DWORD *)this + 137) = v11;
    *((_DWORD *)this + 139) = v12;
    v14 = MultiRadixRealFFT::Initialize((AUTweakaLeakIR *)((char *)this + 840), v11);
    if ((_DWORD)v14)
    {
      v15 = v14;
      v16 = 0;
      v17 = 2 * *((_DWORD *)this + 135);
      while (1)
      {
        v18 = *(_DWORD *)((char *)this + v16 + 564);
        if (v18 >= v17)
        {
          *((_DWORD *)this + 137) = v18;
          *((_DWORD *)this + 139) = v18 >> 1;
          v15 = MultiRadixRealFFT::Initialize((AUTweakaLeakIR *)((char *)this + 840), v18);
          if (!(_DWORD)v15)
            break;
        }
        v16 += 4;
        if (v16 == 112)
        {
          *((_BYTE *)this + 676) = 0;
          if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1)
            dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_5430);
          v19 = AUTweakaLeakIR::getAUSLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEFAULT, "AUTeakaLeakIR can not find an appropriate FFT Size, going into bypass", buf, 2u);
          }
          goto LABEL_38;
        }
      }
    }
  }
  v15 = 0;
  *((_BYTE *)this + 676) = 1;
LABEL_38:
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  v23 = ausdk::AUElement::GetParameter(v21, 3u);
  *((_DWORD *)this + 138) = v23;
  *((_BYTE *)this + 860) = 0;
  if (*((_BYTE *)this + 768))
  {
    v24 = *((_DWORD *)this + 139);
    if (*((_DWORD *)this + 135) < v24)
      v24 = *((_DWORD *)this + 135);
LABEL_50:
    *((_DWORD *)this + 138) = v24;
    goto LABEL_51;
  }
  v25 = *((_DWORD *)this + 137);
  if (v25 < v23)
  {
    *((_DWORD *)this + 138) = v25;
    v23 = v25;
  }
  v24 = *((_DWORD *)this + 135);
  if (v23 > v24)
    goto LABEL_50;
LABEL_51:
  *(_WORD *)((char *)this + 861) = 257;
  AUTweakaLeakIR::ApplyDymamicTLIRParams(this);
  v26 = *((unsigned int *)this + 137);
  v45 = 0;
  std::vector<float>::assign((char **)this + 98, 3 * v26, &v45);
  v27 = (float *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 101) = v27;
  *((_QWORD *)this + 102) = &v27[v26];
  *((_QWORD *)this + 103) = &v27[2 * v26];
  v28 = *((unsigned int *)this + 137);
  *((_QWORD *)this + 104) = &v27[2 * v26 + (v28 >> 1)];
  HIDWORD(__A) = 0;
  vDSP_vfill((const float *)&__A + 1, v27, 1, v28);
  vDSP_vfill((const float *)&__A + 1, *((float **)this + 102), 1, *((unsigned int *)this + 137));
  v29 = (DSPComplex *)*((_QWORD *)this + 101);
  v29->real = 1.0;
  if (*((_BYTE *)this + 676))
  {
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUTweakaLeakIR *)((char *)this + 840), v29, (DSPSplitComplex *)((char *)this + 824), 1.0);
    v30 = (const float *)*((_QWORD *)this + 103);
    if (*((_BYTE *)this + 768))
    {
      v31 = *((unsigned int *)this + 174);
      v32 = (float *)&v30[v31];
      v33 = (float *)(*((_QWORD *)this + 104) + 4 * v31);
      vDSP_vsq(v32, 1, v32, 1, *((unsigned int *)this + 176));
      vDSP_vsq(v33, 1, v33, 1, *((unsigned int *)this + 176));
      vDSP_vadd(v32, 1, v33, 1, v32, 1, *((unsigned int *)this + 176));
      v34 = *((_DWORD *)this + 176);
      if (v34)
      {
        v35 = 0.0;
        do
        {
          v36 = *v32++;
          v35 = v35 + sqrtf(v36);
          --v34;
        }
        while (v34);
        v37 = v35 + 1.0e-30;
      }
      else
      {
        v37 = 1.0e-30;
      }
      v15 = 0;
      v38 = 1.0 / v37;
    }
    else
    {
      vDSP_svesq(v30, 1, (float *)&__A + 1, *((unsigned int *)this + 139));
      vDSP_svesq(*((const float **)this + 104), 1, (float *)&__A, *((unsigned int *)this + 139));
      v15 = 0;
      v38 = sqrtf((float)*((unsigned int *)this + 139) / (float)(*((float *)&__A + 1) + *(float *)&__A));
    }
  }
  else
  {
    v38 = 1.0;
  }
  *((float *)this + 140) = v38;
  **((_DWORD **)this + 101) = 0;
  v39 = 548;
  if (!*((_BYTE *)this + 768))
    v39 = 552;
  v40 = *(unsigned int *)((char *)this + v39);
  __A = 0x3F0A3D713EEB851FLL;
  if ((_DWORD)v40)
  {
    v41 = 0;
    v42 = *((_QWORD *)this + 102);
    do
    {
      v43 = __A;
      *(float *)(v42 + 4 * v41) = *((float *)&v43 + 1)
                                - (float)(*(float *)&v43
                                        * cosf((float)(6.2832 / (float)(2 * v40 - 1)) * (float)(v40 + v41)));
      ++v41;
    }
    while (v40 != v41);
  }
  return v15;
}

void AUTweakaLeakIR::ApplyDymamicTLIRParams(AUTweakaLeakIR *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  float v10;
  float v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  float v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  float Parameter;
  uint64_t v20;
  ausdk::AUElement *v21;
  unsigned int v22;
  ausdk::AUElement **v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  ausdk::AUElement *v36;
  ausdk::AUElement **v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  ausdk::AUElement **v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  float v53;
  float v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  float v58;
  float v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  ausdk::AUElement **v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;

  v2 = *((_DWORD *)this + 137);
  v3 = *((_DWORD *)this + 136);
  if (*((_BYTE *)this + 857))
  {
    v4 = *((_QWORD *)this + 9);
    if (v4)
    {
      v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
    }
    else
    {
      v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v6)
        v5 = 0;
      else
        v5 = *v6;
    }
    *((_BYTE *)this + 536) = ausdk::AUElement::GetParameter(v5, 0) != 0.0;
    *((_BYTE *)this + 857) = 0;
  }
  if (*((_BYTE *)this + 878))
  {
    v7 = *((_QWORD *)this + 9);
    if (v7)
    {
      v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
    }
    else
    {
      v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v9)
        v8 = 0;
      else
        v8 = *v9;
    }
    *((_BYTE *)this + 537) = ausdk::AUElement::GetParameter(v8, 0x15u) != 0.0;
    *((_BYTE *)this + 878) = 0;
  }
  v10 = (float)v2;
  v11 = (float)v3;
  if (*((_BYTE *)this + 858))
  {
    v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v14)
        v13 = 0;
      else
        v13 = *v14;
    }
    *((_BYTE *)this + 538) = ausdk::AUElement::GetParameter(v13, 1u) != 0.0;
    *((_BYTE *)this + 858) = 0;
  }
  v15 = v10 / v11;
  if (*((_BYTE *)this + 861))
  {
    v16 = *((_QWORD *)this + 9);
    if (v16)
    {
      v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
    }
    else
    {
      v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v18)
        v17 = 0;
      else
        v17 = *v18;
    }
    Parameter = ausdk::AUElement::GetParameter(v17, 4u);
    *((float *)this + 172) = Parameter;
    *((_BYTE *)this + 861) = 0;
    *((_DWORD *)this + 174) = vcvtms_u32_f32(v15 * Parameter);
    if (!*((_BYTE *)this + 862))
    {
      v22 = *((_DWORD *)this + 175);
      goto LABEL_38;
    }
  }
  else if (!*((_BYTE *)this + 862))
  {
    goto LABEL_45;
  }
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v23)
      v21 = 0;
    else
      v21 = *v23;
  }
  v24 = ausdk::AUElement::GetParameter(v21, 5u);
  *((float *)this + 173) = v24;
  *((_BYTE *)this + 862) = 0;
  v22 = vcvtms_u32_f32(v15 * v24);
  *((_DWORD *)this + 175) = v22;
LABEL_38:
  v25 = *((_DWORD *)this + 139);
  if (v22 > v25)
  {
LABEL_41:
    *((_DWORD *)this + 175) = v25;
    v22 = v25;
    goto LABEL_42;
  }
  if (v22 <= 1)
  {
    v25 = 2;
    goto LABEL_41;
  }
LABEL_42:
  v26 = *((_DWORD *)this + 174);
  if (v26 > v22)
  {
    *((_DWORD *)this + 174) = v22;
    v26 = v22;
  }
  v27 = v22 - v26 + 1;
  *((_DWORD *)this + 176) = v27;
  *((float *)this + 177) = 1.0 / (float)v27;
LABEL_45:
  v28 = *((unsigned __int8 *)this + 863);
  if (*((_BYTE *)this + 863))
  {
    v29 = *((_QWORD *)this + 9);
    if (v29)
    {
      v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
    }
    else
    {
      v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v31)
        v30 = 0;
      else
        v30 = *v31;
    }
    *((float *)this + 178) = ausdk::AUElement::GetParameter(v30, 6u);
    *((_BYTE *)this + 863) = 0;
  }
  if (*((_BYTE *)this + 864))
  {
    v32 = *((_QWORD *)this + 9);
    if (v32)
    {
      v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
    }
    else
    {
      v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v34)
        v33 = 0;
      else
        v33 = *v34;
    }
    *((float *)this + 179) = ausdk::AUElement::GetParameter(v33, 7u);
    *((_BYTE *)this + 864) = 0;
  }
  if (*((_BYTE *)this + 865))
  {
    v35 = *((_QWORD *)this + 9);
    if (v35)
    {
      v36 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0);
    }
    else
    {
      v37 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v37)
        v36 = 0;
      else
        v36 = *v37;
    }
    *((float *)this + 170) = ausdk::AUElement::GetParameter(v36, 8u);
    *((_BYTE *)this + 865) = 0;
  }
  if (*((_BYTE *)this + 866))
  {
    v38 = *((_QWORD *)this + 9);
    if (v38)
    {
      v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
    }
    else
    {
      v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v40)
        v39 = 0;
      else
        v39 = *v40;
    }
    *((float *)this + 171) = ausdk::AUElement::GetParameter(v39, 9u);
    *((_BYTE *)this + 866) = 0;
  }
  if (*((_BYTE *)this + 867))
  {
    v41 = *((_QWORD *)this + 9);
    if (v41)
    {
      v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
    }
    else
    {
      v43 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v43)
        v42 = 0;
      else
        v42 = *v43;
    }
    *((float *)this + 184) = ausdk::AUElement::GetParameter(v42, 0xAu);
    *((_BYTE *)this + 867) = 0;
    if (!*((_BYTE *)this + 868))
      goto LABEL_89;
    goto LABEL_83;
  }
  if (*((_BYTE *)this + 868))
  {
LABEL_83:
    v44 = *((_QWORD *)this + 9);
    if (v44)
    {
      v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
    }
    else
    {
      v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v46)
        v45 = 0;
      else
        v45 = *v46;
    }
    *((float *)this + 183) = ausdk::AUElement::GetParameter(v45, 0xBu);
    *((_BYTE *)this + 868) = 0;
    goto LABEL_89;
  }
  if (v28)
  {
LABEL_89:
    *((float *)this + 185) = __exp10f(*((float *)this + 178) * 0.05);
    *((float *)this + 186) = __exp10f((float)(*((float *)this + 178) + *((float *)this + 184)) * 0.05);
    *((float *)this + 187) = __exp10f((float)(*((float *)this + 178) + *((float *)this + 183)) * 0.05);
  }
  if (*((_BYTE *)this + 869))
  {
    v47 = *((_QWORD *)this + 9);
    if (v47)
    {
      v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
    }
    else
    {
      v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v49)
        v48 = 0;
      else
        v48 = *v49;
    }
    *((float *)this + 182) = ausdk::AUElement::GetParameter(v48, 0xCu);
    *((_BYTE *)this + 869) = 0;
  }
  if (*((_BYTE *)this + 870))
  {
    v50 = *((_QWORD *)this + 9);
    if (v50)
    {
      v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
    }
    else
    {
      v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v52)
        v51 = 0;
      else
        v51 = *v52;
    }
    v53 = ausdk::AUElement::GetParameter(v51, 0xDu);
    *((float *)this + 180) = v53;
    v54 = 1.0;
    if (v53 > 1.0 || (v54 = 0.0, v53 < 0.0))
      *((float *)this + 180) = v54;
    *((_BYTE *)this + 870) = 0;
  }
  if (*((_BYTE *)this + 871))
  {
    v55 = *((_QWORD *)this + 9);
    if (v55)
    {
      v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
    }
    else
    {
      v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v57)
        v56 = 0;
      else
        v56 = *v57;
    }
    v58 = ausdk::AUElement::GetParameter(v56, 0xEu);
    *((float *)this + 181) = v58;
    v59 = 1.0;
    if (v58 > 1.0 || (v59 = 0.0, v58 < 0.0))
      *((float *)this + 181) = v59;
    *((_BYTE *)this + 871) = 0;
  }
  if (*((_BYTE *)this + 872))
  {
    v60 = *((_QWORD *)this + 9);
    if (v60)
    {
      v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
    }
    else
    {
      v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v62)
        v61 = 0;
      else
        v61 = *v62;
    }
    *((float *)this + 188) = ausdk::AUElement::GetParameter(v61, 0xFu);
    *((_BYTE *)this + 872) = 0;
  }
  if (*((_BYTE *)this + 873))
  {
    v63 = *((_QWORD *)this + 9);
    if (v63)
    {
      v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
    }
    else
    {
      v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v65)
        v64 = 0;
      else
        v64 = *v65;
    }
    *((float *)this + 189) = ausdk::AUElement::GetParameter(v64, 0x10u);
    *((_BYTE *)this + 873) = 0;
  }
  if (*((_BYTE *)this + 874))
  {
    v66 = *((_QWORD *)this + 9);
    if (v66)
    {
      v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
    }
    else
    {
      v68 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v68)
        v67 = 0;
      else
        v67 = *v68;
    }
    *((float *)this + 190) = ausdk::AUElement::GetParameter(v67, 0x11u);
    *((_BYTE *)this + 874) = 0;
  }
  if (*((_BYTE *)this + 879))
  {
    v69 = *((_QWORD *)this + 9);
    if (v69)
    {
      v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
    }
    else
    {
      v71 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v71)
        v70 = 0;
      else
        v70 = *v71;
    }
    *((_BYTE *)this + 887) = ausdk::AUElement::GetParameter(v70, 0x16u) != 0.0;
    *((_BYTE *)this + 879) = 0;
  }
  if (*((_BYTE *)this + 880))
  {
    v72 = *((_QWORD *)this + 9);
    if (v72)
    {
      v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0);
    }
    else
    {
      v74 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v74)
        v73 = 0;
      else
        v73 = *v74;
    }
    *((float *)this + 222) = ausdk::AUElement::GetParameter(v73, 0x17u);
    *((_BYTE *)this + 880) = 0;
  }
  if (*((_BYTE *)this + 875))
  {
    v75 = *((_QWORD *)this + 9);
    if (v75)
    {
      v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
    }
    else
    {
      v77 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v77)
        v76 = 0;
      else
        v76 = *v77;
    }
    *((float *)this + 223) = ausdk::AUElement::GetParameter(v76, 0x12u);
    *((_BYTE *)this + 875) = 0;
  }
  if (*((_BYTE *)this + 876))
  {
    v78 = *((_QWORD *)this + 9);
    if (v78)
    {
      v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
    }
    else
    {
      v80 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v80)
        v79 = 0;
      else
        v79 = *v80;
    }
    *((float *)this + 224) = ausdk::AUElement::GetParameter(v79, 0x13u);
    *((_BYTE *)this + 876) = 0;
  }
  if (*((_BYTE *)this + 877))
  {
    v81 = *((_QWORD *)this + 9);
    if (v81)
    {
      v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
    }
    else
    {
      v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v83)
        v82 = 0;
      else
        v82 = *v83;
    }
    *((float *)this + 225) = ausdk::AUElement::GetParameter(v82, 0x14u);
    *((_BYTE *)this + 877) = 0;
  }
  if (*((_BYTE *)this + 885))
  {
    v84 = *((_QWORD *)this + 9);
    if (v84)
    {
      v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
    }
    else
    {
      v86 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v86)
        v85 = 0;
      else
        v85 = *v86;
    }
    *((float *)this + 191) = ausdk::AUElement::GetParameter(v85, 0x1Cu);
    *((_BYTE *)this + 885) = 0;
  }
  *(_DWORD *)((char *)this + 881) = 0;
}

uint64_t CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(CA::AudioSampleRateConverter *this)
{
  return AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
}

uint64_t CA::AudioSampleRateConverter::GetRequiredNumberOfInputFrames(CA::AudioSampleRateConverter *this)
{
  return AudioSampleRateConverterGetRequiredNumberOfInputFrames();
}

uint64_t CA::AudioSampleRateConverter::Process(CA::AudioSampleRateConverter *this, const float *const *a2, int a3, unsigned int a4, float *const *a5)
{
  return AudioSampleRateConverterProcess();
}

float *AUTweakaLeakIR::CalcPeakingShelfCoeffs(float *this, float a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  unint64_t v16;
  float v17;
  float v18;
  uint64_t v19;

  v4 = (uint64_t)this;
  if (a2 == 0.0)
  {
    v5 = *((_QWORD *)this + 114);
    *(_OWORD *)v5 = DspLib::Biquad::kBypassSection;
    *(_DWORD *)(v5 + 16) = 0;
  }
  else
  {
    v9 = __exp10f(a2 / 20.0);
    v10 = 1.0;
    v11 = 1.0 / a4;
    v12 = sqrtf(v9);
    if (a2 <= 0.0)
      v13 = v9;
    else
      v13 = v12;
    if (a2 <= 0.0)
      v14 = v9;
    else
      v14 = 1.0;
    if (a2 <= 0.0)
      v10 = v12;
    v15 = *(float **)(v4 + 912);
    *v15 = v9;
    v15[1] = v11 * v13;
    v15[2] = v14;
    v15[3] = v11 * v10;
    v15[4] = v14;
    HIDWORD(v16) = 1074340347;
    LODWORD(v16) = *(_DWORD *)(v4 + 544);
    v17 = a3 * 3.14159265 / (double)v16;
    v18 = tanf(v17);
    this = DspLib::Biquad::Design::bilinearTransformStoZUnwarped(v15, v18 * 0.5);
    v19 = *(_QWORD *)(v4 + 912);
    *(float *)(v19 + 4) = -*(float *)(v19 + 4);
    *(float *)(v19 + 12) = -*(float *)(v19 + 12);
  }
  return this;
}

void AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Write(_QWORD *a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  caulk::concurrent::messenger *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  v4 = a1[83];
  v5 = a1 + 91;
  v6 = atomic_load(a1 + 91);
  v7 = v6 + ~v4;
  v8 = v4 >= v6;
  v9 = -257;
  if (!v8)
    v9 = 0;
  if (v7 == v9)
    AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush((uint64_t)a1);
  v10 = a1[83];
  v11 = 256;
  if ((unint64_t)(v10 + 1) < 0x100)
    v11 = v10 + 1;
  v12 = (v10 - v11 + 257) % 0x101uLL - (257 - v11) + 1;
  v13 = atomic_load(v5);
  if (v12 == v13)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  else
  {
    v14 = (uint64_t)&a1[3 * v10 + 83];
    v15 = *a2;
    *(_QWORD *)(v14 + 88) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v14 + 72) = v15;
    atomic_store(v12, a1 + 83);
    v16 = a1[83];
    v17 = atomic_load(a1 + 91);
    v18 = v17 + ~v16;
    v8 = v16 >= v17;
    v19 = 257;
    if (!v8)
      v19 = 0;
    if (v18 + v19 <= 0x7F)
    {
      v20 = (caulk::concurrent::messenger *)a1[81];
      v22 = *a1;
      v21 = a1[1];
      if (v21)
      {
        v23 = (unint64_t *)(v21 + 16);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = v22;
      *(_QWORD *)(v25 + 32) = v21;
      *(_QWORD *)v25 = &off_1E69CED10;
      *(_QWORD *)(v25 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v25);
    }
  }
}

void AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(uint64_t a1)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float *v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = atomic_load((unint64_t *)(a1 + 664));
  v4 = *(_QWORD *)(a1 + 728);
  if (v3 >= v4)
    v5 = 0;
  else
    v5 = 257;
  if (v5 + v3 - v4)
  {
    v6 = (float *)(a1 + 736);
    v7 = v5 + v3;
    if (v5 + v3 < 0x102)
    {
      v13 = 3 * v4;
      v14 = &v6[2 * v13];
      v15 = 24 * v7 - 8 * v13;
      do
      {
        AUTweakaLeakIR::Log((_QWORD *)(a1 + 80), v14);
        v14 += 6;
        v15 -= 24;
      }
      while (v15);
      if (v7 == 257)
        v12 = 0;
      else
        v12 = v5 + v3;
    }
    else
    {
      v8 = v4 - 257;
      if (v4 != 257)
      {
        v9 = (float *)(a1 + 24 * v4 + 736);
        do
        {
          AUTweakaLeakIR::Log((_QWORD *)(a1 + 80), v9);
          v9 += 6;
        }
        while (!__CFADD__(v8++, 1));
      }
      if (v5 + v3 != 257)
      {
        v11 = 24 * (v5 + v3) - 6168;
        do
        {
          AUTweakaLeakIR::Log((_QWORD *)(a1 + 80), v6);
          v6 += 6;
          v11 -= 24;
        }
        while (v11);
      }
      v12 = v7 - 257;
    }
    atomic_store(v12, (unint64_t *)(a1 + 728));
  }
  std::ostream::flush();
  std::mutex::unlock(v2);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69CED38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69CED38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv((uint64_t)a1);
  return _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(&v2);
}

void sub_1B6290A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE7performEv(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    v5 = std::__shared_weak_count::lock(v1);
    if (v5)
    {
      v6 = v5;
      if (v2)
        AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(v2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69CED38;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

void _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED1Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69CED38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
}

void _ZN5caulk10concurrent7details12message_callIZN14AUTweakaLeakIR18AURealTimeDebugLogINS3_14TaLIRInternalsELm256EE6Buffer5WriteERKS5_EUlT_E_JNSt3__18weak_ptrIS7_EEEED0Ev(caulk::concurrent::message *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E69CED38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x1BCC95CECLL);
}

void AUTweakaLeakIR::Log(_QWORD *a1, float *a2)
{
  AUTweakaLeakIRLogCSV<float>(a1, a2, ", ");
  AUTweakaLeakIRLogCSV<float>(a1, a2 + 1, ", ");
  AUTweakaLeakIRLogCSV<float>(a1, a2 + 2, ", ");
  AUTweakaLeakIRLogCSV<float>(a1, a2 + 3, ", ");
  AUTweakaLeakIRLogCSV<float>(a1, a2 + 4, ", ");
  AUTweakaLeakIRLogCSV<float>(a1, a2 + 5, "\n");
}

void AUTweakaLeakIRLogCSV<float>(_QWORD *a1, float *a2, const char *a3)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  size_t v8;
  std::string __p;
  std::bad_cast v10;

  memset(&__p, 0, sizeof(__p));
  if (!boost::conversion::detail::try_lexical_convert<std::string,float>(a2, &__p))
  {
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&unk_1E69B5650;
    boost::throw_exception<boost::bad_lexical_cast>();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  v8 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B6290CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  std::exception::~exception(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::default_delete<AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(*a1);
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AUTweakaLeakIR::AURealTimeDebugLog<AUTweakaLeakIR::TaLIRInternals,256ul>::Buffer::Flush(v2);
    v3 = atomic_load((unint64_t *)(v2 + 664));
    v4 = *(_QWORD *)(v2 + 728);
    v5 = v4 - v3;
    v8 = v4 > v3;
    v6 = 257;
    if (!v8)
      v6 = 0;
    if (v6 != v5)
    {
      v7 = v6 + v3;
      v9 = v7 - 257;
      v8 = v7 > 0x101;
      if (v7 == 257)
        v7 = 0;
      if (v8)
        v7 = v9;
      atomic_store(v7, (unint64_t *)(v2 + 728));
    }
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2 + 648);
    v10 = MEMORY[0x1E0DE4F48];
    v11 = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)(v2 + 80) = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)(v2 + 80 + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(v10 + 24);
    MEMORY[0x1BCC95788](v2 + 88);
    std::ostream::~ostream();
    MEMORY[0x1BCC95BE4](v2 + 496);
    std::mutex::~mutex((std::mutex *)(v2 + 16));
    v12 = *(std::__shared_weak_count **)(v2 + 8);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    MEMORY[0x1BCC95CEC](v2, 0x10F0C4077E18DA5);
  }
  JUMPOUT(0x1BCC95CECLL);
}

os_log_t ___ZN14AUTweakaLeakIR9getAUSLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUTweakaLeakIR");
  AUTweakaLeakIR::getAUSLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t CACFDictionary::operator=(uint64_t a1, const void *a2)
{
  const void *v4;
  int v5;

  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    return a1;
  }
  v4 = *(const void **)a1;
  if (!*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 9) = 0;
    if (!a2)
      return a1;
LABEL_8:
    CFRetain(a2);
    return a1;
  }
  CFRelease(v4);
  v5 = *(unsigned __int8 *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 9) = 0;
  if (a2 && v5)
    goto LABEL_8;
  return a1;
}

void AUTweakaLeakIR::SetCorrectiveBQsAndAnchorGains(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;

  if (!*(_QWORD *)(a1 + 1008) && a2[1] != *a2 && a3[1] != *a3)
  {
    *(_DWORD *)(a1 + 908) = ((uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 2) / 5uLL;
    v6 = (uint64_t *)operator new();
    BiquadInterpolator::BiquadInterpolator(v6, (uint64_t)a2, a3);
    v7 = *(_QWORD *)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = v6;
    if (v7)
      std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v7);
    std::vector<float>::resize(a1 + 1016, (uint64_t)(*(_QWORD *)(*a3 + 8) - *(_QWORD *)*a3) >> 2);
    DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 936), 1uLL, *(unsigned int *)(a1 + 908));
  }
}

void sub_1B6290F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0xA0C40C7E57C1ALL);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder(uint64_t a1, int a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t result;

  *(_DWORD *)a1 = a2;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    *(_QWORD *)(a1 + 8) = Mutable;
    return a1;
  }
  else
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void CA::AudioSampleRateConverterBuilder::SetAttribute<double>(__CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_1B62910AC(void *a1)
{
  __clang_call_terminate(a1);
}

void CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_1B6291168(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t CA::AudioSampleRateConverterBuilder::Build(CA::AudioSampleRateConverterBuilder *this)
{
  uint64_t result;

  result = AudioSampleRateConverterCreate();
  if ((_DWORD)result)
  {
    *(_DWORD *)this = result;
    *((_BYTE *)this + 8) = 0;
  }
  else
  {
    _os_assert_log();
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    AudioSampleRateConverterDispose();
  return a1;
}

void CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder(CA::AudioSampleRateConverterBuilder *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

uint64_t std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 8))
  {
    v1 = result;
    result = AudioSampleRateConverterDispose();
    *(_BYTE *)(v1 + 8) = 0;
  }
  return result;
}

void CACFArray::~CACFArray(CACFArray *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<caulk::concurrent::messenger,std::allocator<caulk::concurrent::messenger>,caulk::concurrent::messenger::thread_strategy,caulk::thread::attributes &,void>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E69DA7E0;
  result = MEMORY[0x1BCC94FFC](v6 + 3, a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1B629132C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [15],void>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, "AUTweakaLeakIR", "");
  return a1;
}

void sub_1B629137C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return MEMORY[0x1BCC95CEC](a1, 0xA0C40C7E57C1ALL);
}

uint64_t std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    AudioSampleRateConverterDispose();
  return a1;
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void ___ZN14AUTweakaLeakIR15DeleteEmptyLogsEv_block_invoke()
{
  __int128 v0;
  unint64_t *v1;
  unint64_t v2;
  std::__shared_weak_count *size;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  const std::__fs::filesystem::directory_entry *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  std::__fs::filesystem::path v15;
  std::__fs::filesystem::path v16;

  std::__fs::filesystem::__temp_directory_path(&v15, 0);
  std::__fs::filesystem::path::path[abi:ne180100]<char [15],void>(&__p);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v15, &v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v16, 0);
  if (v15.__pn_.__r_.__value_.__s.__data_[0] && v15.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    MEMORY[0x1BCC95A04](&v15, &v16, 0, 0);
    v0 = *(_OWORD *)&v15.__pn_.__r_.__value_.__l.__data_;
    if (v15.__pn_.__r_.__value_.__l.__size_)
    {
      v1 = (unint64_t *)(v15.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v2 = __ldxr(v1);
      while (__stxr(v2 + 1, v1));
      size = (std::__shared_weak_count *)v15.__pn_.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v0;
      if (v15.__pn_.__r_.__value_.__l.__size_)
      {
        v4 = (unint64_t *)(v15.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
        do
          v6 = __ldaxr(v4);
        while (__stlxr(v6 - 1, v4));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15.__pn_.__r_.__value_.__r.__words[0];
    }
    while (__p.__r_.__value_.__r.__words[0])
    {
      v7 = std::__fs::filesystem::directory_iterator::__dereference((const std::__fs::filesystem::directory_iterator *)&__p);
      if (!std::__fs::filesystem::__file_size(&v7->__p_, 0))
        std::__fs::filesystem::__remove(&v7->__p_, 0);
      std::__fs::filesystem::directory_iterator::__increment((std::__fs::filesystem::directory_iterator *)&__p, 0);
    }
    v8 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)v15.__pn_.__r_.__value_.__l.__size_;
    if (v15.__pn_.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v15.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
}

void sub_1B6291770(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  NSObject *v24;

  if (*(char *)(v22 - 25) < 0)
    operator delete(*(void **)(v22 - 48));
  __cxa_begin_catch(a1);
  if (AUTweakaLeakIR::getAUSLog(void)::onceToken != -1)
    dispatch_once(&AUTweakaLeakIR::getAUSLog(void)::onceToken, &__block_literal_global_5430);
  v24 = AUTweakaLeakIR::getAUSLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AUTweakaLeakIR::getAUSLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)(v22 - 48) = 0;
    _os_log_error_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "failed to delete empty logs due to exception", (uint8_t *)(v22 - 48), 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B6291760);
}

uint64_t AUSM::InputGeometry::update(AUSM::InputGeometry *this, simd_quatf *a2)
{
  int v2;
  int v4;
  int v5;
  unsigned int v6;
  unsigned __int128 *v7;
  unsigned __int128 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  float32x4_t *v28;
  __int32 v29;
  float v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  BOOL v39;
  unsigned __int8 v40;
  BOOL v41;
  float Parameter;
  float v43;
  uint64_t v44;
  float v45;
  __int128 v46;
  unsigned int v47;
  float v48;
  BOOL v49;
  float v50;
  __float2 v51;
  __float2 v52;
  __int128 v53;
  CFTypeRef v55;
  float v56;
  float v57;
  float v58;
  __float2 v59;
  __float2 v60;
  __float2 v61;
  __int128 v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v73;
  char v74;
  char v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  BOOL v80;
  unsigned __int8 v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  _BOOL4 v87;
  __int32 v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float v104;
  int32x4_t v106;
  int8x16_t v107;
  float32x4_t v108;
  uint64_t v109;
  unsigned __int8 v110;
  float v111;
  float v112;
  float v113;
  float v114;
  unsigned int v115;
  float v116;
  unsigned int v117;
  unsigned int v118;
  float v119;
  float v120;
  float v121;
  float v123;
  __int128 v124;
  float32x4_t v125;
  CFTypeRef cf[2];

  v2 = (int)a2;
  v4 = atomic_load((unsigned __int8 *)this + 241);
  v5 = atomic_load((unsigned __int8 *)this + 242);
  v6 = v5 | a2;
  if (((v5 | a2) & 1) != 0)
  {
    atomic_store(0, (unsigned __int8 *)this + 242);
    __dmb(0xBu);
    v7 = (unsigned __int128 *)(*((_QWORD *)this + 1) + 96);
    do
      v8 = __ldaxp(v7);
    while (__stlxp(v8, v7));
    v9 = *((float *)&v8 + 1);
    v10 = *((float *)this + 46);
    if (v10 != *(float *)&v8)
    {
      v11 = 0.0;
      if (*(float *)&v8 >= 0.0)
        v10 = *(float *)&v8;
      else
        v10 = 0.0;
      *((float *)this + 46) = v10;
      if (v10 >= 0.001)
      {
        v12 = *((float *)this + 47);
        if ((float)(v12 - v10) >= 0.001)
        {
          v13 = log10f(*((float *)this + 48));
          v11 = v13 / log10f(v12 / v10);
        }
      }
      *((float *)this + 49) = v11;
    }
    if (*((float *)this + 47) != *((float *)&v8 + 1))
    {
      v14 = 0.0;
      if (*((float *)&v8 + 1) < 0.0)
        v9 = 0.0;
      *((float *)this + 47) = v9;
      if (v10 >= 0.001 && (float)(v9 - v10) >= 0.001)
      {
        v15 = log10f(*((float *)this + 48));
        v14 = v15 / log10f(v9 / v10);
      }
      *((float *)this + 49) = v14;
    }
    v16 = __exp10f(*((float *)&v8 + 2) * -0.05);
    if (*((float *)this + 48) != v16)
    {
      if (v16 < 0.000001)
        v16 = 0.000001;
      *((float *)this + 48) = v16;
      v17 = *((float *)this + 46);
      v18 = 0.0;
      if (v17 >= 0.001)
      {
        v19 = *((float *)this + 47);
        if ((float)(v19 - v17) >= 0.001)
        {
          v20 = log10f(v16);
          v18 = v20 / log10f(v19 / v17);
        }
      }
      *((float *)this + 49) = v18;
    }
    v21 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 112));
    *((_DWORD *)this + 45) = v21;
    v22 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 76));
    v23 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
    v24 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88));
    v25 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 212));
    AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 1) + 232));
    v26 = (v22 >> 2) & 1;
    if (v25 > 3)
      v27 = (v22 >> 2) & 1;
    else
      LOBYTE(v27) = 0;
    if (v24 != 1)
      v27 = (v22 >> 2) & 1;
    if (v23 == 7)
      LOBYTE(v26) = v27;
    *((_BYTE *)this + 172) = v26;
  }
  v28 = (float32x4_t *)*((_QWORD *)this + 2);
  v29 = v28[65].i32[1];
  if (v29 == *((_DWORD *)this + 62) && v2 == 0)
  {
    if ((v4 & 1) == 0)
    {
      if (!*((_BYTE *)this + 128))
        goto LABEL_121;
      goto LABEL_107;
    }
    *((float *)this + 42) = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x23u) * 0.01;
LABEL_49:
    atomic_store(0, (unsigned __int8 *)this + 241);
    __dmb(0xBu);
    *((_BYTE *)this + 160) = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x20u) >= 0.5;
    v36 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
    if (v36 == 6)
      goto LABEL_51;
    v37 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
    if (v37 == 2)
      goto LABEL_51;
    v65 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
    if (v65 == 7)
    {
      v66 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88));
      if (v66 == 1)
      {
LABEL_51:
        v38 = 1;
        goto LABEL_52;
      }
      v67 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88));
      v38 = v67 == 2;
    }
    else
    {
      v38 = 0;
    }
LABEL_52:
    if (*((_BYTE *)this + 160))
      v39 = v38;
    else
      v39 = 0;
    *((_BYTE *)this + 161) = v39;
    AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)((char *)this + 24));
    v40 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 1) + 201));
    if ((v40 & 1) != 0)
    {
      AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)((char *)this + 24));
      v41 = *(_QWORD *)(*((_QWORD *)this + 4) + 8) != **((_QWORD **)this + 4) && v38;
    }
    else
    {
      v41 = 0;
    }
    *((_BYTE *)this + 162) = v41;
    Parameter = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0);
    v43 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 1u);
    *(float *)&v44 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x1Bu);
    *(_QWORD *)&v124 = v44;
    v123 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x19u);
    v45 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x1Au);
    v46 = v124;
    *((float *)&v46 + 1) = v123;
    *((float *)&v46 + 2) = v45;
    *((_OWORD *)this + 3) = v46;
    v47 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 80));
    if (v47 != 3)
    {
      if (*((_BYTE *)this + 161))
      {
        Parameter = AUSM::SnapCoordinates::getSnappedCoordinates((uint64_t)this + 200, 0, 0, Parameter, v43);
        v43 = v48;
      }
      if (*((_BYTE *)this + 162))
      {
        AUSM::RealtimeSafePingPongContainer<std::vector<AUSM::ExclusionZone>>::update((int8x16_t *)((char *)this + 24));
        Parameter = AUSM::SnapCoordinates::getExcludedCoordinates((uint64_t)this + 200, *((AUSM::ExclusionZone ***)this + 4), v49, Parameter, v43);
        v43 = v50;
      }
    }
    v51 = __sincosf_stret((float)(Parameter * 0.017453) * 0.5);
    v52 = __sincosf_stret((float)(v43 * 0.017453) * 0.5);
    *(float *)&v53 = -(float)((float)(v51.__sinval * v52.__sinval) - (float)((float)(v51.__cosval * v52.__cosval) * 0.0));
    *((float *)&v53 + 1) = (float)(v51.__sinval * (float)(v52.__cosval * 0.0)) + (float)(v52.__sinval * v51.__cosval);
    *((_QWORD *)&v53 + 1) = __PAIR64__((float)(v51.__cosval * v52.__cosval) + (float)((float)(v51.__sinval * v52.__sinval) * 0.0), (float)(v51.__cosval * (float)(v52.__sinval * -0.0))+ (float)(v52.__cosval * v51.__sinval));
    *((_OWORD *)this + 5) = v53;
    if (atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 220)))
    {
      *((_BYTE *)this + 96) = 1;
    }
    else
    {
      AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(cf, *((_QWORD *)this + 1) + 128);
      v55 = cf[0];
      *((_BYTE *)this + 96) = cf[0] != 0;
      if (v55)
        CFRelease(v55);
    }
    v56 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x16u);
    v57 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x17u);
    v58 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x18u);
    v59 = __sincosf_stret((float)(v56 * 0.017453) * 0.5);
    v60 = __sincosf_stret((float)(v57 * 0.017453) * 0.5);
    v61 = __sincosf_stret((float)(v58 * 0.017453) * 0.5);
    *(float *)&v62 = (float)(v61.__sinval * (float)(v59.__cosval * v60.__cosval))
                   - (float)(v61.__cosval * (float)(v59.__sinval * v60.__sinval));
    *((float *)&v62 + 1) = (float)(v59.__sinval * (float)(v60.__cosval * v61.__sinval))
                         + (float)((float)(v60.__sinval * v61.__cosval) * v59.__cosval);
    *((float *)&v62 + 2) = (float)(v59.__cosval * (float)-(float)(v61.__sinval * v60.__sinval))
                         + (float)((float)(v60.__cosval * v61.__cosval) * v59.__sinval);
    *((float *)&v62 + 3) = (float)((float)(v59.__sinval * v60.__sinval) * v61.__sinval)
                         + (float)(v61.__cosval * (float)(v59.__cosval * v60.__cosval));
    *((_OWORD *)this + 7) = v62;
    if (ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x1Fu) < 0.5
      && (v63 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 80)), v63 != 1)
      && (v63 || *(_DWORD *)(*(_QWORD *)this + 108) <= 1u))
    {
      v68 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
      v64 = v68 == 5;
    }
    else
    {
      v64 = 1;
    }
    v69 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
    v70 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88));
    v71 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 212));
    AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 1) + 232));
    v73 = v69 == 7 && v70 == 1 && v71 == 0;
    v74 = v73;
    v75 = v73 || v64;
    *((_BYTE *)this + 76) = v75;
    *((_BYTE *)this + 77) = v64 | v74 ^ 1;
    v76 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 212));
    *((_DWORD *)this + 16) = v76;
    v77 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
    if (v77 == 7 && (v78 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88)), v78 == 2))
    {
      v79 = *((_QWORD *)this + 2);
      *((_BYTE *)this + 164) = *(_BYTE *)(v79 + 541);
      v80 = *(_BYTE *)(v79 + 540) != 0;
    }
    else
    {
      v80 = 0;
      *((_BYTE *)this + 164) = 0;
    }
    *((_BYTE *)this + 163) = v80;
    v81 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 1506));
    v87 = (v81 & 1) != 0
       && (v82 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72)), v82 == 7)
       && (v83 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 80)), v83 == 3)
       && ((v84 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88)), v84 == 1)
        || (v85 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 88)), v85 == 2))
       && (v86 = **(_DWORD **)(*(_QWORD *)this + 120), ChannelLayoutTagIsSupportedHOA(v86))
       && (unsigned __int16)v86 > 4u;
    *((_BYTE *)this + 128) = v87;
    if (!v87)
      goto LABEL_121;
    goto LABEL_105;
  }
  *((_DWORD *)this + 62) = v29;
  __dmb(0xBu);
  v31 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x23u) * 0.01;
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 232) + 2544))
  {
    v32 = *((_QWORD *)this + 2);
    v33 = atomic_load((unsigned int *)(v32 + 408));
    if (v33 || *(_DWORD *)(v32 + 412))
    {
      v34 = atomic_load((unsigned int *)(*((_QWORD *)this + 2) + 408));
      v35 = *((_QWORD *)this + 2);
      if (v34 != *(_DWORD *)(v35 + 412))
        v31 = *((float *)this + 42) + (float)(*(float *)(v35 + 424) * (float)(v31 - *((float *)this + 42)));
    }
  }
  *((float *)this + 42) = v31;
  ++*((_DWORD *)this + 61);
  if ((v4 & 1) != 0 || (v2 & 1) != 0)
    goto LABEL_49;
  if (!*((_BYTE *)this + 128))
  {
LABEL_121:
    v109 = 0;
    goto LABEL_122;
  }
LABEL_105:
  v28 = (float32x4_t *)*((_QWORD *)this + 2);
  if ((v4 & 1) != 0)
  {
    v88 = v28[65].i32[0];
    goto LABEL_109;
  }
LABEL_107:
  v88 = v28[65].i32[0];
  if (*((_DWORD *)this + 63) == v88)
  {
    v88 = *((_DWORD *)this + 63);
    if (*((_DWORD *)this + 64) == v28[64].i32[2])
      goto LABEL_121;
  }
LABEL_109:
  *((_DWORD *)this + 63) = v88;
  *((_DWORD *)this + 64) = v28[64].i32[2];
  v89 = *((float32x4_t *)this + 5);
  v90 = *((float32x4_t *)this + 7);
  v91 = (int32x4_t)vnegq_f32(v90);
  v92 = (int8x16_t)vtrn2q_s32((int32x4_t)v90, vtrn1q_s32((int32x4_t)v90, v91));
  v93 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v91, 8uLL), *(float32x2_t *)v89.f32, 1), (float32x4_t)vextq_s8(v92, v92, 8uLL), v89.f32[0]);
  v94 = (float32x4_t)vrev64q_s32((int32x4_t)v90);
  v94.i32[0] = v91.i32[1];
  v94.i32[3] = v91.i32[2];
  v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v90, v89, 3), v94, v89, 2), v93);
  v96 = *((unsigned __int8 *)this + 76);
  if (!*((_BYTE *)this + 76) || v28[27].f32[1] < 1.0)
  {
    v97 = v28[29];
    v98 = v28[32];
    v99 = (int32x4_t)vnegq_f32(v98);
    v100 = (int8x16_t)vtrn2q_s32((int32x4_t)v98, vtrn1q_s32((int32x4_t)v98, v99));
    v101 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v99, 8uLL), *(float32x2_t *)v97.f32, 1), (float32x4_t)vextq_s8(v100, v100, 8uLL), v97.f32[0]);
    v102 = (float32x4_t)vrev64q_s32((int32x4_t)v98);
    v102.i32[0] = v99.i32[1];
    v102.i32[3] = v99.i32[2];
    v103 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v98, v97, 3), v102, v97, 2), v101);
    *(float32x4_t *)cf = v103;
    if (v96)
    {
      v104 = v28[27].f32[1];
      if (v104 > 0.0 && v104 < 1.0)
      {
        v125 = v95;
        AUSM::SoundStage::headLockTransitionDirection((float32x4_t *)cf, a2, v104);
        v95 = v125;
        v103 = *(float32x4_t *)cf;
      }
    }
    v106 = (int32x4_t)vnegq_f32(v103);
    v107 = (int8x16_t)vtrn2q_s32((int32x4_t)v103, vtrn1q_s32((int32x4_t)v103, v106));
    v108 = (float32x4_t)vrev64q_s32((int32x4_t)v103);
    v108.i32[0] = v106.i32[1];
    v108.i32[3] = v106.i32[2];
    v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v103, v95, 3), v108, v95, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v106, 8uLL), *(float32x2_t *)v95.f32, 1), (float32x4_t)vextq_s8(v107, v107, 8uLL), v95.f32[0]));
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v95, *((float32x4_t *)this + 9))), 0xFuLL))) & 1) != 0)
    goto LABEL_121;
  *((float32x4_t *)this + 9) = v95;
  v109 = 1;
LABEL_122:
  if (((v4 | v6) & 1) != 0 || (v110 = atomic_load((unsigned __int8 *)this + 243), (v110 & 1) != 0))
  {
    atomic_store(0, (unsigned __int8 *)this + 243);
    __dmb(0xBu);
    v111 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 6u);
    v112 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 7u);
    v113 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 3u);
    v114 = __exp10f(v113 / 20.0);
    if (v114 < v111)
      v114 = v111;
    if (v112 < v114)
      v114 = v112;
    *((float *)this + 17) = v114;
    v115 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 80));
    v116 = 1.0;
    if (v115 != 1 && (v115 || *(_DWORD *)(*(_QWORD *)this + 108) <= 1u))
    {
      v117 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 72));
      if (v117 != 5)
      {
        v118 = atomic_load((unsigned int *)(*((_QWORD *)this + 1) + 80));
        if (v118 != 3)
        {
          v119 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 2u);
          v120 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)this, 0x22u);
          v121 = AUSM::DistanceGain::calculateDistanceGain((AUSM::InputGeometry *)((char *)this + 172), v119 * v120);
          AUSM::InputGeometry::clampDistanceGain((ausdk::AUElement **)this, v121, *((float *)this + 17));
        }
      }
    }
    *((float *)this + 18) = v116;
    ++*((_DWORD *)this + 61);
  }
  return v109;
}

void AUSM::SoundStage::headLockTransitionDirection(float32x4_t *this, simd_quatf *a2, float a3)
{
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t *v7;
  float v8;
  float v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x4_t v29;
  unsigned __int32 v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;

  v5 = *this;
  v6 = (int8x16_t)vmulq_f32(*this, (float32x4_t)xmmword_1B6629CC0);
  v7 = (float32x4_t *)&_PromotedConst;
  if (vaddv_f32(vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL))) >= 0.0)
    v7 = (float32x4_t *)&_PromotedConst_25946;
  v8 = 1.0;
  v9 = 1.0 - a3;
  v10 = vsubq_f32(v5, *v7);
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  v36 = *v7;
  v37 = *this;
  v12 = vaddq_f32(v5, *v7);
  v13 = (int8x16_t)vmulq_f32(v12, v12);
  v14 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))));
  v15 = v14 + v14;
  v16 = (float)(v14 + v14) == 0.0;
  v17 = 1.0;
  if (!v16)
    v17 = sinf(v15) / v15;
  v18 = v17;
  v19 = vrecpe_f32((float32x2_t)LODWORD(v17));
  v20 = vmul_f32(v19, vrecps_f32((float32x2_t)LODWORD(v18), v19));
  LODWORD(v21) = vmul_f32(v20, vrecps_f32((float32x2_t)LODWORD(v18), v20)).u32[0];
  if ((float)(v9 * v15) != 0.0)
  {
    v34 = v21;
    v20.f32[0] = sinf(v9 * v15);
    v21 = v34;
    v8 = v20.f32[0] / (float)(v9 * v15);
  }
  v20.f32[0] = v9 * (float)(v21 * v8);
  v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)v20, 0);
  v23 = v15 * a3;
  v24 = 1.0;
  if (v23 != 0.0)
  {
    v33 = v22;
    v35 = v21;
    v25 = sinf(v23);
    v22 = v33;
    v21 = v35;
    v24 = v25 / v23;
  }
  v26 = vmlaq_f32(vmulq_n_f32(v36, (float)(v21 * v24) * a3), v37, v22);
  v27 = (int8x16_t)vmulq_f32(v26, v26);
  v28 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  v29 = (float32x4_t)xmmword_1B6629CC0;
  if (vaddv_f32(v28) != 0.0)
  {
    v30 = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).u32[0];
    v31 = vrsqrte_f32((float32x2_t)v30);
    v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30, vmul_f32(v31, v31)));
    v29 = vmulq_n_f32(v26, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30, vmul_f32(v32, v32))).f32[0]);
  }
  *this = v29;
}

void AUSM::InputGeometry::clampDistanceGain(ausdk::AUElement **this, float a2, float a3)
{
  ausdk::AUElement::GetParameter(*this, 6u);
  ausdk::AUElement::GetParameter(*this, 7u);
}

float32x2_t BCMBypassedStereo::panWithSize(float *a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  _BOOL4 v6;
  _BOOL4 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  _BOOL4 v20;
  float v21;
  _BOOL4 v22;
  float v23;
  _BOOL4 v24;
  float v25;
  _BOOL4 v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v49;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v264;
  float v265;
  float *v266;
  _QWORD v267[16];

  if ((v1 & 1) == 0)
  {
    v266 = a1;
    a1 = v266;
    if (v49)
    {
      BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs = xmmword_1B66A1660;
      unk_1EF135A80 = xmmword_1B66A0780;
      xmmword_1EF135A90 = xmmword_1B66A1670;
      unk_1EF135AA0 = xmmword_1B66A1680;
      xmmword_1EF135AB0 = xmmword_1B66282F0;
      qword_1EF135AC0 = 0xBF80000000000000;
      dword_1EF135AC8 = 1065353216;
      unk_1EF135AD4 = 0;
      unk_1EF135ACC = 0;
      dword_1EF135ADC = 0;
      xmmword_1EF135AE0 = xmmword_1B66A1690;
      unk_1EF135AF0 = xmmword_1B66A16A0;
      xmmword_1EF135B00 = xmmword_1B66A16B0;
      unk_1EF135B10 = xmmword_1B66A0780;
      xmmword_1EF135B20 = xmmword_1B66A16C0;
      unk_1EF135B30 = xmmword_1B6629CB0;
      xmmword_1EF135B40 = xmmword_1B66A16D0;
      unk_1EF135B50 = xmmword_1B66A16E0;
      xmmword_1EF135B60 = xmmword_1B66A16F0;
      unk_1EF135B70 = xmmword_1B66A1700;
      xmmword_1EF135B80 = xmmword_1B66A1710;
      unk_1EF135B90 = xmmword_1B66A1720;
      xmmword_1EF135BA0 = xmmword_1B66A1730;
      unk_1EF135BB0 = xmmword_1B66A1740;
      xmmword_1EF135BC0 = xmmword_1B66A1750;
      unk_1EF135BD0 = xmmword_1B66A16D0;
      xmmword_1EF135BE0 = xmmword_1B66A1760;
      unk_1EF135BF0 = xmmword_1B66A1770;
      xmmword_1EF135C00 = xmmword_1B66A1700;
      unk_1EF135C10 = xmmword_1B6627DF0;
      xmmword_1EF135C20 = xmmword_1B66A1780;
      unk_1EF135C30 = xmmword_1B6627DC0;
      xmmword_1EF135C40 = xmmword_1B66A1670;
      unk_1EF135C50 = xmmword_1B66A1790;
      xmmword_1EF135C60 = xmmword_1B66A16A0;
      unk_1EF135C70 = xmmword_1B66A17A0;
      xmmword_1EF135C80 = xmmword_1B66282F0;
      unk_1EF135C90 = xmmword_1B66A17B0;
      xmmword_1EF135CA0 = xmmword_1B66A16A0;
      unk_1EF135CB0 = xmmword_1B66A17C0;
      xmmword_1EF135CC0 = xmmword_1B6627DC0;
      unk_1EF135CD0 = xmmword_1B66A16C0;
      xmmword_1EF135CE0 = xmmword_1B66A17D0;
      unk_1EF135CF0 = xmmword_1B66A17E0;
      __asm { FMOV            V0.2S, #-1.0 }
      qword_1EF135D00 = _D0;
      v55 = __exp10f(0.1);
      v56 = __exp10f(-0.8);
      dword_1EF135D08 = LODWORD(v55);
      dword_1EF135D0C = LODWORD(v56);
      xmmword_1EF135D10 = xmmword_1B66A17F0;
      v57 = __exp10f(-0.135);
      v58 = __exp10f(-0.135);
      dword_1EF135D20 = LODWORD(v57);
      dword_1EF135D24 = LODWORD(v58);
      xmmword_1EF135D28 = xmmword_1B66A1800;
      v59 = __exp10f(-0.8);
      v60 = __exp10f(0.1);
      dword_1EF135D38 = LODWORD(v59);
      dword_1EF135D3C = LODWORD(v60);
      xmmword_1EF135D40 = xmmword_1B66A1810;
      dword_1EF135D50 = __exp10f(0.185);
      unk_1EF135D54 = xmmword_1B66A1820;
      dword_1EF135D64 = 0;
      v61 = __exp10f(0.07);
      v62 = __exp10f(0.07);
      dword_1EF135D68 = LODWORD(v61);
      dword_1EF135D6C = LODWORD(v62);
      xmmword_1EF135D70 = xmmword_1B66A1830;
      v63 = __exp10f(0.185);
      dword_1EF135D80 = 0;
      dword_1EF135D84 = LODWORD(v63);
      xmmword_1EF135D88 = xmmword_1B66A1840;
      v64 = __exp10f(0.15);
      v65 = __exp10f(-0.66);
      dword_1EF135D98 = LODWORD(v64);
      dword_1EF135D9C = LODWORD(v65);
      xmmword_1EF135DA0 = xmmword_1B66A1850;
      v66 = __exp10f(-0.01);
      v67 = __exp10f(-0.01);
      dword_1EF135DB0 = LODWORD(v66);
      dword_1EF135DB4 = LODWORD(v67);
      xmmword_1EF135DB8 = xmmword_1B66A1860;
      v68 = __exp10f(-0.66);
      v69 = __exp10f(0.15);
      dword_1EF135DC8 = LODWORD(v68);
      dword_1EF135DCC = LODWORD(v69);
      xmmword_1EF135DD0 = xmmword_1B66A1870;
      v70 = __exp10f(0.17);
      v71 = __exp10f(-0.715);
      dword_1EF135DE0 = LODWORD(v70);
      dword_1EF135DE4 = LODWORD(v71);
      xmmword_1EF135DE8 = xmmword_1B66A1880;
      v72 = __exp10f(-0.055);
      v73 = __exp10f(-0.055);
      dword_1EF135DF8 = LODWORD(v72);
      dword_1EF135DFC = LODWORD(v73);
      xmmword_1EF135E00 = xmmword_1B66A1890;
      v74 = __exp10f(-0.715);
      v75 = __exp10f(0.17);
      dword_1EF135E10 = LODWORD(v74);
      dword_1EF135E14 = LODWORD(v75);
      xmmword_1EF135E18 = xmmword_1B66A18A0;
      dword_1EF135E28 = __exp10f(0.26);
      unk_1EF135E2C = xmmword_1B66A18B0;
      dword_1EF135E3C = 0;
      v76 = __exp10f(0.13);
      v77 = __exp10f(0.13);
      dword_1EF135E40 = LODWORD(v76);
      dword_1EF135E44 = LODWORD(v77);
      xmmword_1EF135E48 = xmmword_1B66A18C0;
      v78 = __exp10f(0.26);
      dword_1EF135E58 = 0;
      dword_1EF135E5C = LODWORD(v78);
      xmmword_1EF135E60 = xmmword_1B66A18D0;
      v79 = __exp10f(0.205);
      v80 = __exp10f(-0.615);
      dword_1EF135E70 = LODWORD(v79);
      dword_1EF135E74 = LODWORD(v80);
      xmmword_1EF135E78 = xmmword_1B66A18E0;
      v81 = __exp10f(0.035);
      v82 = __exp10f(0.035);
      dword_1EF135E88 = LODWORD(v81);
      dword_1EF135E8C = LODWORD(v82);
      xmmword_1EF135E90 = xmmword_1B66A18F0;
      v83 = __exp10f(-0.615);
      v84 = __exp10f(0.205);
      dword_1EF135EA0 = LODWORD(v83);
      dword_1EF135EA4 = LODWORD(v84);
      xmmword_1EF135EA8 = xmmword_1B66A1900;
      v85 = __exp10f(0.11);
      v86 = __exp10f(-0.71);
      dword_1EF135EB8 = LODWORD(v85);
      dword_1EF135EBC = LODWORD(v86);
      xmmword_1EF135EC0 = xmmword_1B66A1910;
      v87 = __exp10f(-0.065);
      v88 = __exp10f(-0.065);
      dword_1EF135ED0 = LODWORD(v87);
      dword_1EF135ED4 = LODWORD(v88);
      xmmword_1EF135ED8 = xmmword_1B66A1920;
      v89 = __exp10f(-0.71);
      v90 = __exp10f(0.11);
      dword_1EF135EE8 = LODWORD(v89);
      dword_1EF135EEC = LODWORD(v90);
      xmmword_1EF135EF0 = xmmword_1B66A1930;
      v91 = __exp10f(0.205);
      v92 = __exp10f(-0.805);
      dword_1EF135F00 = LODWORD(v91);
      dword_1EF135F04 = LODWORD(v92);
      xmmword_1EF135F08 = xmmword_1B66A1940;
      v93 = __exp10f(-0.05);
      v94 = __exp10f(-0.05);
      dword_1EF135F18 = LODWORD(v93);
      dword_1EF135F1C = LODWORD(v94);
      xmmword_1EF135F20 = xmmword_1B66A1950;
      v95 = __exp10f(-0.805);
      v96 = __exp10f(0.205);
      dword_1EF135F30 = LODWORD(v95);
      dword_1EF135F34 = LODWORD(v96);
      xmmword_1EF135F38 = xmmword_1B66A1960;
      v97 = __exp10f(0.135);
      v98 = __exp10f(-0.67);
      dword_1EF135F48 = LODWORD(v97);
      dword_1EF135F4C = LODWORD(v98);
      xmmword_1EF135F50 = xmmword_1B66A1970;
      v99 = __exp10f(-0.025);
      v100 = __exp10f(-0.025);
      dword_1EF135F60 = LODWORD(v99);
      dword_1EF135F64 = LODWORD(v100);
      xmmword_1EF135F68 = xmmword_1B66A1980;
      v101 = __exp10f(-0.67);
      v102 = __exp10f(0.135);
      dword_1EF135F78 = LODWORD(v101);
      dword_1EF135F7C = LODWORD(v102);
      xmmword_1EF135F80 = xmmword_1B66A1990;
      v103 = __exp10f(0.16);
      v104 = __exp10f(-0.47);
      dword_1EF135F90 = LODWORD(v103);
      dword_1EF135F94 = LODWORD(v104);
      xmmword_1EF135F98 = xmmword_1B66A19A0;
      v105 = __exp10f(0.0);
      v106 = __exp10f(0.0);
      dword_1EF135FA8 = LODWORD(v105);
      dword_1EF135FAC = LODWORD(v106);
      xmmword_1EF135FB0 = xmmword_1B66A19B0;
      v107 = __exp10f(-0.47);
      v108 = __exp10f(0.16);
      dword_1EF135FC0 = LODWORD(v107);
      dword_1EF135FC4 = LODWORD(v108);
      xmmword_1EF135FC8 = xmmword_1B66A19C0;
      v109 = __exp10f(0.27);
      v110 = __exp10f(-0.445);
      dword_1EF135FD8 = LODWORD(v109);
      dword_1EF135FDC = LODWORD(v110);
      xmmword_1EF135FE0 = xmmword_1B66A19D0;
      v111 = __exp10f(0.15);
      v112 = __exp10f(0.15);
      dword_1EF135FF0 = LODWORD(v111);
      dword_1EF135FF4 = LODWORD(v112);
      xmmword_1EF135FF8 = xmmword_1B66A19E0;
      v113 = __exp10f(-0.445);
      v114 = __exp10f(0.27);
      dword_1EF136008 = LODWORD(v113);
      dword_1EF13600C = LODWORD(v114);
      xmmword_1EF136010 = xmmword_1B66A19F0;
      v115 = __exp10f(0.215);
      v116 = __exp10f(-0.365);
      dword_1EF136020 = LODWORD(v115);
      dword_1EF136024 = LODWORD(v116);
      xmmword_1EF136028 = xmmword_1B66A1A00;
      v117 = __exp10f(0.085);
      v118 = __exp10f(0.085);
      dword_1EF136038 = LODWORD(v117);
      dword_1EF13603C = LODWORD(v118);
      xmmword_1EF136040 = xmmword_1B66A1A10;
      v119 = __exp10f(-0.365);
      v120 = __exp10f(0.215);
      dword_1EF136050 = LODWORD(v119);
      dword_1EF136054 = LODWORD(v120);
      xmmword_1EF136058 = xmmword_1B66A1A20;
      v121 = __exp10f(0.19);
      v122 = __exp10f(-0.415);
      dword_1EF136068 = LODWORD(v121);
      dword_1EF13606C = LODWORD(v122);
      xmmword_1EF136070 = xmmword_1B66A1A30;
      v123 = __exp10f(0.025);
      v124 = __exp10f(0.025);
      dword_1EF136080 = LODWORD(v123);
      dword_1EF136084 = LODWORD(v124);
      xmmword_1EF136088 = xmmword_1B66A1A40;
      v125 = __exp10f(-0.415);
      v126 = __exp10f(0.19);
      dword_1EF136098 = LODWORD(v125);
      dword_1EF13609C = LODWORD(v126);
      xmmword_1EF1360A0 = xmmword_1B66A1A50;
      v127 = __exp10f(0.29);
      v128 = __exp10f(-0.415);
      dword_1EF1360B0 = LODWORD(v127);
      dword_1EF1360B4 = LODWORD(v128);
      xmmword_1EF1360B8 = xmmword_1B66A1A60;
      v129 = __exp10f(0.17);
      v130 = __exp10f(0.17);
      dword_1EF1360C8 = LODWORD(v129);
      dword_1EF1360CC = LODWORD(v130);
      xmmword_1EF1360D0 = xmmword_1B66A1A70;
      v131 = __exp10f(-0.415);
      v132 = __exp10f(0.29);
      dword_1EF1360E0 = LODWORD(v131);
      dword_1EF1360E4 = LODWORD(v132);
      xmmword_1EF1360E8 = xmmword_1B66A1A80;
      v133 = __exp10f(0.235);
      v134 = __exp10f(-0.335);
      dword_1EF1360F8 = LODWORD(v133);
      dword_1EF1360FC = LODWORD(v134);
      xmmword_1EF136100 = xmmword_1B66A1A90;
      v135 = __exp10f(0.105);
      v136 = __exp10f(0.105);
      dword_1EF136110 = LODWORD(v135);
      dword_1EF136114 = LODWORD(v136);
      xmmword_1EF136118 = xmmword_1B66A1AA0;
      v137 = __exp10f(-0.335);
      v138 = __exp10f(0.235);
      dword_1EF136128 = LODWORD(v137);
      dword_1EF13612C = LODWORD(v138);
      xmmword_1EF136130 = xmmword_1B66A1AB0;
      v139 = __exp10f(0.18);
      v140 = __exp10f(-0.365);
      dword_1EF136140 = LODWORD(v139);
      dword_1EF136144 = LODWORD(v140);
      xmmword_1EF136148 = xmmword_1B66A1AC0;
      v141 = __exp10f(0.025);
      v142 = __exp10f(0.025);
      dword_1EF136158 = LODWORD(v141);
      dword_1EF13615C = LODWORD(v142);
      xmmword_1EF136160 = xmmword_1B66A1AD0;
      v143 = __exp10f(-0.365);
      v144 = __exp10f(0.18);
      dword_1EF136170 = LODWORD(v143);
      dword_1EF136174 = LODWORD(v144);
      xmmword_1EF136178 = xmmword_1B66A1AE0;
      v145 = __exp10f(0.27);
      v146 = __exp10f(-0.385);
      dword_1EF136188 = LODWORD(v145);
      dword_1EF13618C = LODWORD(v146);
      xmmword_1EF136190 = xmmword_1B66A1AF0;
      v147 = __exp10f(0.15);
      v148 = __exp10f(0.15);
      dword_1EF1361A0 = LODWORD(v147);
      dword_1EF1361A4 = LODWORD(v148);
      xmmword_1EF1361A8 = xmmword_1B66A1B00;
      v149 = __exp10f(-0.385);
      v150 = __exp10f(0.27);
      dword_1EF1361B8 = LODWORD(v149);
      dword_1EF1361BC = LODWORD(v150);
      xmmword_1EF1361C0 = xmmword_1B66A1B10;
      v151 = __exp10f(0.22);
      v152 = __exp10f(-0.305);
      dword_1EF1361D0 = LODWORD(v151);
      dword_1EF1361D4 = LODWORD(v152);
      xmmword_1EF1361D8 = xmmword_1B66A1B20;
      v153 = __exp10f(0.085);
      v154 = __exp10f(0.085);
      dword_1EF1361E8 = LODWORD(v153);
      dword_1EF1361EC = LODWORD(v154);
      xmmword_1EF1361F0 = xmmword_1B66A1B30;
      v155 = __exp10f(-0.305);
      v156 = __exp10f(0.22);
      dword_1EF136200 = LODWORD(v155);
      dword_1EF136204 = LODWORD(v156);
      xmmword_1EF136208 = xmmword_1B66A1B40;
      v157 = __exp10f(0.21);
      v158 = __exp10f(-0.07);
      dword_1EF136218 = LODWORD(v157);
      dword_1EF13621C = LODWORD(v158);
      xmmword_1EF136220 = xmmword_1B66A1B50;
      v159 = __exp10f(0.115);
      v160 = __exp10f(0.115);
      dword_1EF136230 = LODWORD(v159);
      dword_1EF136234 = LODWORD(v160);
      xmmword_1EF136238 = xmmword_1B66A1B60;
      v161 = __exp10f(-0.07);
      v162 = __exp10f(0.21);
      dword_1EF136248 = LODWORD(v161);
      dword_1EF13624C = LODWORD(v162);
      xmmword_1EF136250 = xmmword_1B66A1B70;
      v163 = __exp10f(0.235);
      v164 = __exp10f(0.0);
      dword_1EF136260 = LODWORD(v163);
      dword_1EF136264 = LODWORD(v164);
      xmmword_1EF136268 = xmmword_1B66A1B80;
      v165 = __exp10f(0.15);
      v166 = __exp10f(0.15);
      dword_1EF136278 = LODWORD(v165);
      dword_1EF13627C = LODWORD(v166);
      xmmword_1EF136280 = xmmword_1B66A1B90;
      v167 = __exp10f(0.0);
      v168 = __exp10f(0.235);
      dword_1EF136290 = LODWORD(v167);
      dword_1EF136294 = LODWORD(v168);
      xmmword_1EF136298 = xmmword_1B66A1BA0;
      v169 = __exp10f(0.225);
      v170 = __exp10f(-0.035);
      dword_1EF1362A8 = LODWORD(v169);
      dword_1EF1362AC = LODWORD(v170);
      xmmword_1EF1362B0 = xmmword_1B66A1BB0;
      v171 = __exp10f(0.14);
      v172 = __exp10f(0.14);
      dword_1EF1362C0 = LODWORD(v171);
      dword_1EF1362C4 = LODWORD(v172);
      xmmword_1EF1362C8 = xmmword_1B66A1BC0;
      v173 = __exp10f(-0.035);
      v174 = __exp10f(0.225);
      dword_1EF1362D8 = LODWORD(v173);
      dword_1EF1362DC = LODWORD(v174);
      xmmword_1EF1362E0 = xmmword_1B66A1BD0;
      v175 = __exp10f(0.215);
      v176 = __exp10f(-0.065);
      dword_1EF1362F0 = LODWORD(v175);
      dword_1EF1362F4 = LODWORD(v176);
      xmmword_1EF1362F8 = xmmword_1B66A1BE0;
      v177 = __exp10f(0.12);
      v178 = __exp10f(0.12);
      dword_1EF136308 = LODWORD(v177);
      dword_1EF13630C = LODWORD(v178);
      xmmword_1EF136310 = xmmword_1B66A1BF0;
      v179 = __exp10f(-0.065);
      v180 = __exp10f(0.215);
      dword_1EF136320 = LODWORD(v179);
      dword_1EF136324 = LODWORD(v180);
      xmmword_1EF136328 = xmmword_1B66A1C00;
      v181 = __exp10f(0.24);
      v182 = __exp10f(0.0050001);
      dword_1EF136338 = LODWORD(v181);
      dword_1EF13633C = LODWORD(v182);
      xmmword_1EF136340 = xmmword_1B66A1C10;
      v183 = __exp10f(0.155);
      v184 = __exp10f(0.155);
      dword_1EF136350 = LODWORD(v183);
      dword_1EF136354 = LODWORD(v184);
      xmmword_1EF136358 = xmmword_1B66A1C20;
      v185 = __exp10f(0.0050001);
      v186 = __exp10f(0.24);
      dword_1EF136368 = LODWORD(v185);
      dword_1EF13636C = LODWORD(v186);
      xmmword_1EF136370 = xmmword_1B66A1C30;
      v187 = __exp10f(0.23);
      v188 = __exp10f(-0.025);
      dword_1EF136380 = LODWORD(v187);
      dword_1EF136384 = LODWORD(v188);
      xmmword_1EF136388 = xmmword_1B66A1C40;
      v189 = __exp10f(0.145);
      v190 = __exp10f(0.145);
      dword_1EF136398 = LODWORD(v189);
      dword_1EF13639C = LODWORD(v190);
      xmmword_1EF1363A0 = xmmword_1B66A1C50;
      v191 = __exp10f(-0.025);
      v192 = __exp10f(0.23);
      dword_1EF1363B0 = LODWORD(v191);
      dword_1EF1363B4 = LODWORD(v192);
      xmmword_1EF1363B8 = xmmword_1B66A1C60;
      v193 = __exp10f(0.22);
      v194 = __exp10f(-0.055);
      dword_1EF1363C8 = LODWORD(v193);
      dword_1EF1363CC = LODWORD(v194);
      xmmword_1EF1363D0 = xmmword_1B66A1C70;
      v195 = __exp10f(0.125);
      v196 = __exp10f(0.125);
      dword_1EF1363E0 = LODWORD(v195);
      dword_1EF1363E4 = LODWORD(v196);
      xmmword_1EF1363E8 = xmmword_1B66A1C80;
      v197 = __exp10f(-0.055);
      v198 = __exp10f(0.22);
      dword_1EF1363F8 = LODWORD(v197);
      dword_1EF1363FC = LODWORD(v198);
      xmmword_1EF136400 = xmmword_1B66A1C90;
      v199 = __exp10f(0.245);
      v200 = __exp10f(0.01);
      dword_1EF136410 = LODWORD(v199);
      dword_1EF136414 = LODWORD(v200);
      xmmword_1EF136418 = xmmword_1B66A1CA0;
      v201 = __exp10f(0.16);
      v202 = __exp10f(0.165);
      dword_1EF136428 = LODWORD(v201);
      dword_1EF13642C = LODWORD(v202);
      xmmword_1EF136430 = xmmword_1B66A1CB0;
      v203 = __exp10f(0.01);
      v204 = __exp10f(0.245);
      dword_1EF136440 = LODWORD(v203);
      dword_1EF136444 = LODWORD(v204);
      xmmword_1EF136448 = xmmword_1B66A1CC0;
      v205 = __exp10f(0.235);
      v206 = __exp10f(-0.02);
      dword_1EF136458 = LODWORD(v205);
      dword_1EF13645C = LODWORD(v206);
      xmmword_1EF136460 = xmmword_1B66A1CD0;
      v207 = __exp10f(0.15);
      v208 = __exp10f(0.15);
      dword_1EF136470 = LODWORD(v207);
      dword_1EF136474 = LODWORD(v208);
      xmmword_1EF136478 = xmmword_1B66A1CE0;
      v209 = __exp10f(-0.02);
      v210 = __exp10f(0.235);
      dword_1EF136488 = LODWORD(v209);
      dword_1EF13648C = LODWORD(v210);
      xmmword_1EF136490 = xmmword_1B66A1CF0;
      v211 = __exp10f(0.165);
      v212 = __exp10f(0.115);
      dword_1EF1364A0 = LODWORD(v211);
      dword_1EF1364A4 = LODWORD(v212);
      xmmword_1EF1364A8 = xmmword_1B66A1D00;
      v213 = __exp10f(0.14);
      v214 = __exp10f(0.14);
      dword_1EF1364B8 = LODWORD(v213);
      dword_1EF1364BC = LODWORD(v214);
      xmmword_1EF1364C0 = xmmword_1B66A1D10;
      v215 = __exp10f(0.115);
      v216 = __exp10f(0.165);
      dword_1EF1364D0 = LODWORD(v215);
      dword_1EF1364D4 = LODWORD(v216);
      xmmword_1EF1364D8 = xmmword_1B66A1D20;
      v217 = __exp10f(0.16);
      v218 = __exp10f(0.115);
      dword_1EF1364E8 = LODWORD(v217);
      dword_1EF1364EC = LODWORD(v218);
      xmmword_1EF1364F0 = xmmword_1B66A0780;
      v219 = __exp10f(0.145);
      v220 = __exp10f(0.145);
      dword_1EF136500 = LODWORD(v219);
      dword_1EF136504 = LODWORD(v220);
      xmmword_1EF136508 = xmmword_1B6627DC0;
      v221 = __exp10f(0.115);
      v222 = __exp10f(0.165);
      dword_1EF136518 = LODWORD(v221);
      dword_1EF13651C = LODWORD(v222);
      xmmword_1EF136520 = xmmword_1B66A1D30;
      v223 = __exp10f(0.165);
      v224 = __exp10f(0.12);
      dword_1EF136530 = LODWORD(v223);
      dword_1EF136534 = LODWORD(v224);
      xmmword_1EF136538 = xmmword_1B66A1340;
      v225 = __exp10f(0.145);
      v226 = __exp10f(0.145);
      dword_1EF136548 = LODWORD(v225);
      dword_1EF13654C = LODWORD(v226);
      xmmword_1EF136550 = xmmword_1B662A2A0;
      v227 = __exp10f(0.12);
      v228 = __exp10f(0.165);
      dword_1EF136560 = LODWORD(v227);
      dword_1EF136564 = LODWORD(v228);
      xmmword_1EF136568 = xmmword_1B66A1D40;
      v229 = __exp10f(0.165);
      v230 = __exp10f(0.115);
      dword_1EF136578 = LODWORD(v229);
      dword_1EF13657C = LODWORD(v230);
      xmmword_1EF136580 = xmmword_1B66A1D50;
      v231 = __exp10f(0.14);
      v232 = __exp10f(0.14);
      dword_1EF136590 = LODWORD(v231);
      dword_1EF136594 = LODWORD(v232);
      xmmword_1EF136598 = xmmword_1B66A1D60;
      v233 = __exp10f(0.115);
      v234 = __exp10f(0.165);
      dword_1EF1365A8 = LODWORD(v233);
      dword_1EF1365AC = LODWORD(v234);
      xmmword_1EF1365B0 = xmmword_1B66A1D70;
      v235 = __exp10f(0.165);
      v236 = __exp10f(0.12);
      dword_1EF1365C0 = LODWORD(v235);
      dword_1EF1365C4 = LODWORD(v236);
      xmmword_1EF1365C8 = xmmword_1B66A1D80;
      v237 = __exp10f(0.145);
      v238 = __exp10f(0.145);
      dword_1EF1365D8 = LODWORD(v237);
      dword_1EF1365DC = LODWORD(v238);
      xmmword_1EF1365E0 = xmmword_1B66A1D90;
      v239 = __exp10f(0.12);
      v240 = __exp10f(0.165);
      dword_1EF1365F0 = LODWORD(v239);
      dword_1EF1365F4 = LODWORD(v240);
      xmmword_1EF1365F8 = xmmword_1B66A1DA0;
      v241 = __exp10f(0.17);
      v242 = __exp10f(0.12);
      dword_1EF136608 = LODWORD(v241);
      dword_1EF13660C = LODWORD(v242);
      xmmword_1EF136610 = xmmword_1B66A1DB0;
      v243 = __exp10f(0.145);
      v244 = __exp10f(0.145);
      dword_1EF136620 = LODWORD(v243);
      dword_1EF136624 = LODWORD(v244);
      xmmword_1EF136628 = xmmword_1B66A1DC0;
      v245 = __exp10f(0.12);
      v246 = __exp10f(0.17);
      dword_1EF136638 = LODWORD(v245);
      dword_1EF13663C = LODWORD(v246);
      xmmword_1EF136640 = xmmword_1B66A1DD0;
      v247 = __exp10f(0.165);
      v248 = __exp10f(0.115);
      dword_1EF136650 = LODWORD(v247);
      dword_1EF136654 = LODWORD(v248);
      xmmword_1EF136658 = xmmword_1B66A1DE0;
      v249 = __exp10f(0.14);
      v250 = __exp10f(0.14);
      dword_1EF136668 = LODWORD(v249);
      dword_1EF13666C = LODWORD(v250);
      xmmword_1EF136670 = xmmword_1B66A1DF0;
      v251 = __exp10f(0.115);
      v252 = __exp10f(0.165);
      dword_1EF136680 = LODWORD(v251);
      dword_1EF136684 = LODWORD(v252);
      xmmword_1EF136688 = xmmword_1B66A1E00;
      v253 = __exp10f(0.165);
      v254 = __exp10f(0.12);
      dword_1EF136698 = LODWORD(v253);
      dword_1EF13669C = LODWORD(v254);
      xmmword_1EF1366A0 = xmmword_1B6627BD0;
      v255 = __exp10f(0.145);
      v256 = __exp10f(0.145);
      dword_1EF1366B0 = LODWORD(v255);
      dword_1EF1366B4 = LODWORD(v256);
      xmmword_1EF1366B8 = xmmword_1B6627DF0;
      v257 = __exp10f(0.12);
      v258 = __exp10f(0.165);
      dword_1EF1366C8 = LODWORD(v257);
      dword_1EF1366CC = LODWORD(v258);
      xmmword_1EF1366D0 = xmmword_1B66A1E10;
      v259 = __exp10f(0.17);
      v260 = __exp10f(0.12);
      dword_1EF1366E0 = LODWORD(v259);
      dword_1EF1366E4 = LODWORD(v260);
      xmmword_1EF1366E8 = xmmword_1B6627E00;
      v261 = __exp10f(0.145);
      v262 = __exp10f(0.145);
      dword_1EF1366F8 = LODWORD(v261);
      dword_1EF1366FC = LODWORD(v262);
      __asm { FMOV            V0.4S, #1.0 }
      xmmword_1EF136700 = _Q0;
      v264 = __exp10f(0.12);
      v265 = __exp10f(0.17);
      dword_1EF136710 = LODWORD(v264);
      dword_1EF136714 = LODWORD(v265);
      a1 = v266;
    }
  }
  v2 = 0;
  v3 = 0;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a1 > 0.25;
  v7 = *a1 <= 0.25;
  if (*a1 > 0.75)
    v6 = 0;
  v9 = a1[2];
  v8 = a1[3];
  v10 = -3.4028e38;
  v11 = 3.4028e38;
  v12 = 3.4028e38;
  v13 = -3.4028e38;
  v14 = 3.4028e38;
  v15 = -3.4028e38;
  v16 = 3.4028e38;
  v17 = -3.4028e38;
  do
  {
    v18 = (float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                  + v2);
    v19 = *(float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                   + v2);
    v20 = v7;
    if (v19 != 0.0)
    {
      v20 = v4 <= 0.5;
      if (v19 != 0.25)
      {
        v20 = v6;
        if (v19 != 0.5)
        {
          v20 = v4 > 0.5;
          if (v19 != 0.75)
          {
            v20 = v4 > 0.75;
            if (v19 != 1.0)
              __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 35, "false");
          }
        }
      }
    }
    v21 = v18[1];
    v22 = v5 <= 0.5;
    if (v21 != 0.0)
    {
      if (v21 == 0.5)
      {
        v22 = 1;
      }
      else
      {
        v22 = v5 > 0.5;
        if (v21 != 1.0)
          __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 40, "false");
      }
    }
    v23 = *(float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                   + v2
                   + 8);
    v24 = v9 <= 0.0;
    if (v23 != -1.0)
    {
      if (v23 == 0.0)
      {
        v24 = 1;
      }
      else
      {
        v24 = v9 > 0.0;
        if (v23 != 1.0)
          __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 45, "false");
      }
    }
    v25 = *(float *)((char *)&BCMBypassedStereo::panWithSize(BCMBypassedStereo::PanningFunctionPoint::Coordinates const&)::kPFPs
                   + v2
                   + 12);
    v26 = v8 <= 0.0;
    if (v25 != -1.0)
    {
      if (v25 == 0.0)
      {
        v26 = 1;
      }
      else
      {
        v26 = v8 > 0.0;
        if (v25 != 1.0)
          __assert_rtn("isCloseTo", "BCMBypassedStereoPanner.cpp", 50, "false");
      }
    }
    if (v20 && v22 && v24 && v26)
    {
      v267[v3++] = v18;
      if (v19 < v11)
        v11 = v19;
      if (v10 < v19)
        v10 = v19;
      if (v21 < v12)
        v12 = v21;
      if (v13 < v21)
        v13 = v21;
      if (v23 < v14)
        v14 = v23;
      if (v15 < v23)
        v15 = v23;
      if (v25 < v16)
        v16 = v25;
      if (v17 < v25)
        v17 = v25;
    }
    v2 += 24;
  }
  while (v2 != 3240);
  if (v3 != 16)
    __assert_rtn("panWithSize", "BCMBypassedStereoPanner.cpp", 368, "numSurroundingPoints == 16");
  v27 = 0;
  v28 = (float)(v4 - v11) / (float)(v10 - v11);
  v29 = (float)(v5 - v12) / (float)(v13 - v12);
  v30 = v15 - v14;
  v31 = (float)(v9 - v14) / v30;
  v32 = v17 - v16;
  v33 = (float)(v8 - v16) / v32;
  v34 = 0;
  do
  {
    v35 = (float32x2_t *)v267[v27];
    v36 = 0.5;
    v37 = 0.5;
    if ((float)(v10 - v11) > 0.0)
    {
      if (v35->f32[0] == v11)
        v38 = 1.0 - v28;
      else
        v38 = v28;
      if (v38 <= 1.0)
        v39 = v38;
      else
        v39 = 1.0;
      if (v38 >= 0.0)
        v37 = v39;
      else
        v37 = 0.0;
    }
    if ((float)(v13 - v12) > 0.0)
    {
      if (v35->f32[1] == v12)
        v40 = 1.0 - v29;
      else
        v40 = v29;
      if (v40 <= 1.0)
        v41 = v40;
      else
        v41 = 1.0;
      if (v40 >= 0.0)
        v36 = v41;
      else
        v36 = 0.0;
    }
    v42 = 0.5;
    v43 = 0.5;
    if (v30 > 0.0)
    {
      if (v35[1].f32[0] == v14)
        v44 = 1.0 - v31;
      else
        v44 = v31;
      if (v44 <= 1.0)
        v45 = v44;
      else
        v45 = 1.0;
      if (v44 >= 0.0)
        v43 = v45;
      else
        v43 = 0.0;
    }
    if (v32 > 0.0)
    {
      if (v35[1].f32[1] == v16)
        v46 = 1.0 - v33;
      else
        v46 = v33;
      if (v46 <= 1.0)
        v47 = v46;
      else
        v47 = 1.0;
      if (v46 >= 0.0)
        v42 = v47;
      else
        v42 = 0.0;
    }
    v34 = vmla_n_f32(v34, vmul_f32(v35[2], v35[2]), (float)((float)(v37 * v36) * v43) * v42);
    ++v27;
  }
  while (v27 != 16);
  return vsqrt_f32(v34);
}

int *VADLCG::AddToBuffer(int *this, float *a2, unsigned int a3, float a4)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  v4 = this[2];
  if (v4)
  {
    if (!a3)
      return this;
    v5 = *this;
    v6 = this[1];
    v7 = this[3];
    v8 = a3;
    do
    {
      v7 = (v6 + v7 * v5) % v4;
      *a2 = (float)((float)((float)(2.0 / (float)v4) * (float)v7) + -1.0) + *a2;
      ++a2;
      --v8;
    }
    while (v8);
  }
  else
  {
    if (!a3)
      return this;
    v9 = *this;
    v10 = this[1];
    v11 = a3;
    v7 = this[3];
    do
    {
      v7 = v10 + v7 * v9;
      *a2 = (float)((float)((float)v7 * 4.6566e-10) + -1.0) + *a2;
      ++a2;
      --v11;
    }
    while (v11);
  }
  this[3] = v7;
  return this;
}

os_log_t ___Z12getAUSMV2Logv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUSpatialMixerV2");
  getAUSMV2Log(void)::gLog = (uint64_t)result;
  return result;
}

void AmbisonicsStereo::~AmbisonicsStereo(AmbisonicsStereo *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void AmbisonicsStereo::Process(AmbisonicsStereo *this, float *a2, float **a3, int a4, int a5, float a6, float a7, float a8)
{
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;

  v13 = (uint64_t)*a3;
  if (a5 == 1)
    v14 = a3[1];
  else
    v14 = (float *)(v13 + 4);
  v15 = a6 * 3.14159265 / 180.0;
  if (vabds_f32(*((float *)this + 4), v15) > 1.57079633)
    *((float *)this + 4) = v15;
  v16 = sinf(v15);
  v17 = *((float *)this + 5);
  v18 = *((float *)this + 6);
  if (a4)
  {
    v19 = 0;
    v20 = v16 * 0.5;
    do
    {
      v21 = *a2++;
      *(float *)(v13 + v19 * 4) = *(float *)(v13 + v19 * 4) + (float)((float)(0.70711 - v17) * (float)(v18 * v21));
      v14[v19] = (float)((float)(v17 + 0.70711) * (float)(v18 * v21)) + v14[v19];
      v17 = v17 + (float)((float)(v20 - v17) * 0.002);
      v18 = v18 + (float)((float)(a8 - v18) * 0.002);
      v19 += a5;
      --a4;
    }
    while (a4);
  }
  *((float *)this + 5) = v17;
  *((float *)this + 6) = v18;
}

void AmbisonicsQuad::~AmbisonicsQuad(AmbisonicsQuad *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void AmbisonicsQuad::Process(float32x2_t *this, float *a2, float **a3, int a4, int a5, float32x2_t a6, float32_t a7, float a8)
{
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float32x2_t v17;
  int v18;
  float32x2_t v19;
  int32x2_t v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x2_t v27;
  float v28;
  double v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float32x2_t v37;
  __float2 v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  double v44;
  __float2 v45;
  float v46;
  double v47;
  float v48;
  double v49;
  double v50;
  double v51;
  double v52;
  float32_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float v64;
  double v65[6];

  v13 = *a3;
  if (a5 == 1)
  {
    v14 = a3[1];
    v15 = a3[2];
    v16 = a3[3];
  }
  else
  {
    v14 = v13 + 1;
    v15 = v13 + 2;
    v16 = v13 + 3;
  }
  a6.f32[1] = a7;
  v17 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(a6), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL)), (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)));
  v18 = this[5].u8[4];
  v19 = vabd_f32(this[2], v17);
  v20 = vcgt_f32((float32x2_t)vdup_n_s32(0x3C8EFA35u), v19);
  v21 = (this[5].i8[4] == 0) & v20.i8[0] & v20.i8[4];
  if (v21 == 1)
    this[2] = v17;
  if (v19.f32[0] > 1.57079633)
    this[2].i32[0] = v17.i32[0];
  v63 = v17;
  this[5].i8[4] = 0;
  v22 = this[3].f32[0];
  v23 = this[3].f32[1];
  v24 = this[4].f32[0];
  v25 = this[4].f32[1];
  v26 = this[5].f32[0];
  v27 = this[1];
  if (v27)
  {
    (*(void (**)(double *__return_ptr, float32x2_t, uint64_t, _QWORD))(**(_QWORD **)&v27 + 392))(v65, v27, 2, 0);
    v28 = v65[0];
    v29 = v28;
    if (v21)
      goto LABEL_10;
  }
  else
  {
    v29 = 44100.0;
    if (v21)
    {
LABEL_10:
      if (a4)
      {
        v30 = 0;
        do
        {
          v31 = *a2++;
          v32 = v22 * v31;
          v13[v30] = v13[v30] + (float)(v23 * (float)(v22 * v31));
          v14[v30] = v14[v30] + (float)(v24 * (float)(v22 * v31));
          v15[v30] = v15[v30] + (float)(v25 * (float)(v22 * v31));
          v22 = v22 + (float)((float)(a8 - v22) * 0.002);
          v16[v30] = v16[v30] + (float)(v26 * v32);
          v30 += a5;
          --a4;
        }
        while (a4);
      }
      goto LABEL_30;
    }
  }
  if (v18)
  {
    if (a4)
    {
      v33 = 0;
      v34 = 4 * a5;
      v62 = (float32x2_t)vdup_n_s32(0x3B03126Fu);
      do
      {
        --a4;
        v35 = *a2++;
        v36 = v22 * v35;
        v22 = v22 + (float)((float)(a8 - v22) * 0.002);
        v37 = vmla_f32(this[2], v62, vsub_f32(v63, this[2]));
        v64 = v37.f32[1];
        this[2] = v37;
        v38 = __sincosf_stret(v37.f32[0]);
        v39 = cosf(v64);
        v40 = v38.__cosval * v39;
        v41 = -(float)(v38.__sinval * v39);
        v42 = (float)(v40 * 0.35355) + 0.5;
        v23 = v42 + (float)(v41 * 0.35355);
        v24 = v42 + (float)(v41 * -0.35355);
        v43 = (float)(v40 * -0.35355) + 0.5;
        *(float *)((char *)v13 + v33) = *(float *)((char *)v13 + v33) + (float)(v23 * v36);
        *(float *)((char *)v14 + v33) = *(float *)((char *)v14 + v33) + (float)(v24 * v36);
        v25 = v43 + (float)(v41 * 0.35355);
        v26 = v43 + (float)(v41 * -0.35355);
        *(float *)((char *)v15 + v33) = *(float *)((char *)v15 + v33) + (float)(v25 * v36);
        *(float *)((char *)v16 + v33) = *(float *)((char *)v16 + v33) + (float)(v26 * v36);
        v33 += v34;
      }
      while (a4);
    }
  }
  else
  {
    v44 = 1.0 / v29;
    v45 = __sincosf_stret(v63.f32[0]);
    v46 = cosf(v63.f32[1]);
    v47 = (double)a4 * 157.079633 * v44;
    v48 = this[2].f32[0];
    v49 = v48;
    v50 = (float)(v48 - v63.f32[0]);
    if (v47 <= v50)
      v50 = (double)a4 * 157.079633 * v44;
    v51 = v49 - v50;
    if (v47 > (float)(v63.f32[0] - v48))
      v47 = (float)(v63.f32[0] - v48);
    v52 = v47 + v49;
    if (v48 >= v63.f32[0])
      v52 = v51;
    v53 = v52;
    this[2].f32[0] = v53;
    if (a4)
    {
      v54 = 0;
      v55 = -(float)(v45.__sinval * v46);
      v56 = (float)((float)(v45.__cosval * v46) * 0.35355) + 0.5;
      v57 = (float)((float)(v45.__cosval * v46) * -0.35355) + 0.5;
      v58 = v57 + (float)(v55 * 0.35355);
      v59 = v57 + (float)(v55 * -0.35355);
      do
      {
        v60 = *a2++;
        v61 = v22 * v60;
        v22 = v22 + (float)((float)(a8 - v22) * 0.002);
        v23 = v23 + (float)((float)((float)(v56 + (float)(v55 * 0.35355)) - v23) * 0.002);
        v24 = v24 + (float)((float)((float)(v56 + (float)(v55 * -0.35355)) - v24) * 0.002);
        v13[v54] = v13[v54] + (float)(v23 * v61);
        v25 = v25 + (float)((float)(v58 - v25) * 0.002);
        v14[v54] = v14[v54] + (float)(v24 * v61);
        v15[v54] = v15[v54] + (float)(v25 * v61);
        v26 = v26 + (float)((float)(v59 - v26) * 0.002);
        v16[v54] = v16[v54] + (float)(v26 * v61);
        v54 += a5;
        --a4;
      }
      while (a4);
    }
  }
  this[3].f32[1] = v23;
  this[4].f32[0] = v24;
  this[4].f32[1] = v25;
  this[5].f32[0] = v26;
LABEL_30:
  this[3].f32[0] = v22;
}

void Ambisonics5_1::~Ambisonics5_1(Ambisonics5_1 *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void Ambisonics5_1::Process(float32x2_t *this, float *a2, float **a3, int a4, int a5, float32x2_t a6, float32_t a7, float a8)
{
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float32x2_t v17;
  int v18;
  float32x2_t v19;
  int32x2_t v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  int v29;
  float v30;
  double v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float32x2_t v38;
  __float2 v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  double v46;
  __float2 v47;
  float v48;
  double v49;
  float v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float32_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float32x2_t v69;
  float32x2_t v70;
  int v71;
  float v72;
  double v73[6];

  v12 = *a3;
  if (a5 == 1)
  {
    v13 = a3[1];
    v14 = a3[2];
    v15 = a3[3];
    v16 = a3[4];
  }
  else
  {
    v13 = v12 + 1;
    v14 = v12 + 2;
    v15 = v12 + 3;
    v16 = v12 + 4;
  }
  a6.f32[1] = a7;
  v17 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(a6), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL)), (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)));
  v18 = this[6].u8[0];
  v19 = vabd_f32(this[2], v17);
  v20 = vcgt_f32((float32x2_t)vdup_n_s32(0x3C8EFA35u), v19);
  v21 = (this[6].i8[0] == 0) & v20.i8[0] & v20.i8[4];
  if (v21 == 1)
    this[2] = v17;
  if (v19.f32[0] > 1.57079633)
    this[2].i32[0] = v17.i32[0];
  v70 = v17;
  this[6].i8[0] = 0;
  v22 = this[3].f32[0];
  v23 = this[3].f32[1];
  v24 = this[4].f32[0];
  v25 = this[4].f32[1];
  v27 = this[5].f32[0];
  v26 = this[5].f32[1];
  v28 = this[1];
  if (v28)
  {
    v71 = v21;
    v29 = a5;
    (*(void (**)(double *__return_ptr, float32x2_t, uint64_t, _QWORD))(**(_QWORD **)&v28 + 392))(v73, v28, 2, 0);
    a5 = v29;
    v30 = v73[0];
    v31 = v30;
    if (v71)
      goto LABEL_10;
  }
  else
  {
    v31 = 44100.0;
    if (v21)
    {
LABEL_10:
      if (a4)
      {
        v32 = 0;
        do
        {
          v33 = *a2++;
          v34 = v22 * v33;
          v12[v32] = v12[v32] + (float)(v23 * (float)(v22 * v33));
          v16[v32] = v16[v32] + (float)(v24 * (float)(v22 * v33));
          v13[v32] = v13[v32] + (float)(v25 * (float)(v22 * v33));
          v14[v32] = v14[v32] + (float)(v27 * (float)(v22 * v33));
          v22 = v22 + (float)((float)(a8 - v22) * 0.002);
          v15[v32] = v15[v32] + (float)(v26 * v34);
          v32 += a5;
          --a4;
        }
        while (a4);
      }
      goto LABEL_30;
    }
  }
  if (v18)
  {
    if (a4)
    {
      v35 = 0;
      v36 = 4 * a5;
      v69 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
      do
      {
        v37 = *a2++;
        --a4;
        v38 = vmla_f32(this[2], v69, vsub_f32(v70, this[2]));
        v72 = v38.f32[1];
        this[2] = v38;
        v39 = __sincosf_stret(v38.f32[0]);
        v40 = cosf(v72);
        v41 = v39.__cosval * v40;
        v42 = -(float)(v39.__sinval * v40);
        v43 = (float)(v41 * 0.35355) + 0.5;
        v23 = v43 + (float)(v42 * 0.35355);
        v24 = (float)((float)(v41 * 0.5) + 0.5) * 0.2;
        v25 = v43 + (float)(v42 * -0.35355);
        *(float *)((char *)v12 + v35) = *(float *)((char *)v12 + v35) + (float)(v23 * (float)(v22 * v37));
        v44 = (float)(v41 * -0.35355) + 0.5;
        *(float *)((char *)v16 + v35) = *(float *)((char *)v16 + v35) + (float)(v24 * (float)(v22 * v37));
        *(float *)((char *)v13 + v35) = *(float *)((char *)v13 + v35) + (float)(v25 * (float)(v22 * v37));
        v27 = v44 + (float)(v42 * 0.35355);
        v26 = v44 + (float)(v42 * -0.35355);
        *(float *)((char *)v14 + v35) = *(float *)((char *)v14 + v35) + (float)(v27 * (float)(v22 * v37));
        *(float *)((char *)v15 + v35) = *(float *)((char *)v15 + v35) + (float)(v26 * (float)(v22 * v37));
        v35 += v36;
      }
      while (a4);
    }
  }
  else
  {
    v45 = a5;
    v46 = 1.0 / v31;
    v47 = __sincosf_stret(v70.f32[0]);
    v48 = cosf(v70.f32[1]);
    v49 = (double)a4 * 157.079633 * v46;
    v50 = this[2].f32[0];
    v51 = v50;
    v52 = (float)(v50 - v70.f32[0]);
    if (v49 <= v52)
      v52 = (double)a4 * 157.079633 * v46;
    v53 = v51 - v52;
    if (v49 > (float)(v70.f32[0] - v50))
      v49 = (float)(v70.f32[0] - v50);
    v54 = v49 + v51;
    if (v50 >= v70.f32[0])
      v54 = v53;
    v55 = v54;
    this[2].f32[0] = v55;
    if (a4)
    {
      v56 = 0;
      v57 = v47.__cosval * v48;
      v58 = -(float)(v47.__sinval * v48);
      v59 = (float)((float)(v47.__cosval * v48) * 0.35355) + 0.5;
      v60 = v59 + (float)(v58 * 0.35355);
      v61 = (float)(v57 * 0.5) + 0.5;
      v62 = (float)(v57 * -0.35355) + 0.5;
      v63 = v59 + (float)(v58 * -0.35355);
      v64 = v62 + (float)(v58 * 0.35355);
      v65 = v62 + (float)(v58 * -0.35355);
      v66 = v61 * 0.2;
      do
      {
        v67 = *a2++;
        v68 = v22 * v67;
        v22 = v22 + (float)((float)(a8 - v22) * 0.002);
        v23 = v23 + (float)((float)(v60 - v23) * 0.01);
        v24 = v24 + (float)((float)(v66 - v24) * 0.01);
        v25 = v25 + (float)((float)(v63 - v25) * 0.01);
        v12[v56] = v12[v56] + (float)(v23 * v68);
        v16[v56] = v16[v56] + (float)(v24 * v68);
        v27 = v27 + (float)((float)(v64 - v27) * 0.01);
        v13[v56] = v13[v56] + (float)(v25 * v68);
        v14[v56] = v14[v56] + (float)(v27 * v68);
        v26 = v26 + (float)((float)(v65 - v26) * 0.01);
        v15[v56] = v15[v56] + (float)(v26 * v68);
        v56 += v45;
        --a4;
      }
      while (a4);
    }
  }
  this[3].f32[1] = v23;
  this[4].f32[0] = v24;
  this[4].f32[1] = v25;
  this[5].f32[0] = v27;
  this[5].f32[1] = v26;
LABEL_30:
  this[3].f32[0] = v22;
}

void AmbisonicsGeneral::~AmbisonicsGeneral(AmbisonicsGeneral *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void AmbisonicsGeneral::Process(AmbisonicsGeneral *this, float *a2, float **a3, unsigned int a4, float a5, float a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  __float2 v15;
  uint64_t v16;
  uint64_t v17;
  __double2 v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  unsigned int v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  uint64_t i;
  float v33;
  float *v34;
  float *v35;
  unsigned int v36;
  float v37;

  v12 = *((_QWORD *)this + 20);
  v13 = *(unsigned int *)(v12 + 8);
  v14 = a5 * 3.14159265 / 180.0;
  if (*((_BYTE *)this + 152))
  {
    *((_BYTE *)this + 152) = 0;
LABEL_3:
    v15 = __sincosf_stret(v14);
    if ((int)v13 >= 1)
    {
      v16 = 0;
      v17 = v12 + 12;
      do
      {
        v18 = __sincos_stret(*(float *)(v17 + 20 * v16 + 8) * 0.0174532925);
        v19 = (float *)((char *)this + 4 * v16);
        v21 = v19[5];
        v20 = v19 + 5;
        v22 = v21;
        if (a4)
        {
          v23 = v18.__cosval * 0.5;
          v24 = v18.__sinval * 0.5;
          v25 = (float)((float)((float)((float)((float)(v23 * v15.__cosval) + 0.5) + (float)(v24 * v15.__sinval)) * a7)
                      - v22)
              / (float)a4;
          v26 = a3[v16];
          v27 = a4;
          v28 = a2;
          do
          {
            v29 = *v28++;
            v22 = v25 + v22;
            *v26 = *v26 + (float)(v22 * v29);
            ++v26;
            --v27;
          }
          while (v27);
        }
        *v20 = v22;
        ++v16;
      }
      while (v16 != v13);
    }
    *((float *)this + 4) = v14;
    goto LABEL_10;
  }
  v30 = *((float *)this + 4);
  v31 = *((float *)this + 37);
  *((_BYTE *)this + 152) = 0;
  if (v31 != a7 || vabds_f32(v30, v14) >= 0.017453)
    goto LABEL_3;
  if ((int)v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if (a4)
      {
        v33 = *((float *)this + i + 5);
        v34 = a3[i];
        v35 = a2;
        v36 = a4;
        do
        {
          v37 = *v35++;
          *v34 = *v34 + (float)(v33 * v37);
          ++v34;
          --v36;
        }
        while (v36);
      }
    }
  }
LABEL_10:
  *((float *)this + 37) = a7;
}

uint64_t AmbisonicsGeneral::Reset(uint64_t this)
{
  *(_BYTE *)(this + 152) = 1;
  return this;
}

void AmbisonicsGeneral3D::~AmbisonicsGeneral3D(AmbisonicsGeneral3D *this)
{
  JUMPOUT(0x1BCC95CECLL);
}

void AmbisonicsGeneral3D::Process(AmbisonicsGeneral3D *this, float *a2, float **a3, unsigned int a4, float a5, float a6, float a7)
{
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  __float2 v15;
  __float2 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  __double2 v21;
  __double2 v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  unsigned int v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t i;
  float v39;
  float *v40;
  float *v41;
  unsigned int v42;
  float v43;
  float v44;
  float v45;

  v11 = *((_QWORD *)this + 20);
  v12 = *(unsigned int *)(v11 + 8);
  v13 = a5 * 3.14159265 / 180.0;
  v14 = a6 * 3.14159265 / 180.0;
  if (*((_BYTE *)this + 156))
  {
    *((_BYTE *)this + 156) = 0;
LABEL_3:
    v45 = a7;
    v44 = v13;
    v15 = __sincosf_stret(v13);
    v16 = __sincosf_stret(v14);
    if ((int)v12 >= 1)
    {
      v17 = 0;
      v18 = v11 + 12;
      do
      {
        v19 = v18 + 20 * v17;
        v20 = *(float *)(v19 + 12) * 0.0174532925;
        v21 = __sincos_stret(*(float *)(v19 + 8) * 0.0174532925);
        v22 = __sincos_stret(v20);
        v23 = (float *)((char *)this + 4 * v17);
        v25 = v23[6];
        v24 = v23 + 6;
        v26 = v25;
        if (a4)
        {
          v27 = v21.__cosval * 0.5 * v22.__cosval;
          v28 = v21.__sinval * 0.5 * v22.__cosval;
          v29 = v22.__sinval * 0.5;
          v30 = (float)((float)((float)((float)((float)((float)(v27 * (float)(v15.__cosval * v16.__cosval)) + 0.5)
                                              + (float)(v28 * (float)(v15.__sinval * v16.__cosval)))
                                      + (float)(v29 * v16.__sinval))
                              * v45)
                      - v26)
              / (float)a4;
          v31 = a3[v17];
          v32 = a4;
          v33 = a2;
          do
          {
            v34 = *v33++;
            v26 = v30 + v26;
            *v31 = *v31 + (float)(v26 * v34);
            ++v31;
            --v32;
          }
          while (v32);
        }
        *v24 = v26;
        ++v17;
      }
      while (v17 != v12);
    }
    *((float *)this + 4) = v44;
    a7 = v45;
    goto LABEL_10;
  }
  v35 = *((float *)this + 4);
  v36 = *((float *)this + 5);
  v37 = *((float *)this + 38);
  *((_BYTE *)this + 156) = 0;
  if (v37 != a7 || vabds_f32(v35, v13) >= 0.017453 || vabds_f32(v36, v14) >= 0.017453)
    goto LABEL_3;
  if ((int)v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if (a4)
      {
        v39 = *((float *)this + i + 6);
        v40 = a3[i];
        v41 = a2;
        v42 = a4;
        do
        {
          v43 = *v41++;
          *v40 = *v40 + (float)(v39 * v43);
          ++v40;
          --v42;
        }
        while (v42);
      }
    }
  }
LABEL_10:
  *((float *)this + 38) = a7;
}

uint64_t AmbisonicsGeneral3D::Reset(uint64_t this)
{
  *(_BYTE *)(this + 156) = 1;
  return this;
}

os_log_t ___Z28AUSpatialProbabilityLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "auspro");
  *v0 = result;
  AUSpatialProbabilityLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t SpatialProbabilityBase::SpatialProbabilityBase(uint64_t a1, unsigned int a2, int a3, int a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v31;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = &unk_1E69ECDB0;
  *(_OWORD *)(a1 + 16) = xmmword_1B66A0DC0;
  *(_OWORD *)(a1 + 32) = xmmword_1B66A0DC0;
  *(_DWORD *)(a1 + 48) = a3;
  *(float *)(a1 + 52) = a6;
  *(float *)(a1 + 56) = a7;
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 64), a2, &v31);
  *(_DWORD *)(a1 + 88) = a5;
  v18 = *(unsigned int *)(a1 + 8);
  v31 = 1065353216;
  std::vector<float>::vector((_QWORD *)(a1 + 96), v18, &v31);
  v19 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 120), v19, &v31);
  v20 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 144), v20, &v31);
  v21 = *(unsigned int *)(a1 + 8);
  v31 = 1065353216;
  std::vector<float>::vector((_QWORD *)(a1 + 168), v21, &v31);
  v22 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 192), v22, &v31);
  v23 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 216), v23, &v31);
  v24 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 240), v24, &v31);
  *(_DWORD *)(a1 + 264) = a4;
  *(_DWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v25 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 280), v25, &v31);
  v26 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 304), v26, &v31);
  v27 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 328), v27, &v31);
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  v28 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 368), v28, &v31);
  *(_OWORD *)(a1 + 392) = xmmword_1B6627DC0;
  *(_DWORD *)(a1 + 408) = 1092616192;
  v29 = *(unsigned int *)(a1 + 8);
  v31 = 0;
  std::vector<float>::vector((_QWORD *)(a1 + 416), v29, &v31);
  SpatialProbabilityBase::SetPriorProbabilities((SpatialProbabilityBase *)a1, a8, a9);
  *(float *)(a1 + 392) = a10;
  *(float *)(a1 + 396) = a11;
  return a1;
}

void sub_1B62954C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13)
{
  _QWORD *v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  v23 = *v17;
  if (*v17)
  {
    v13[53] = v23;
    operator delete(v23);
  }
  v24 = *v16;
  if (*v16)
  {
    v13[47] = v24;
    operator delete(v24);
  }
  v25 = *v15;
  if (*v15)
  {
    v13[42] = v25;
    operator delete(v25);
  }
  v26 = *v14;
  if (*v14)
  {
    v13[39] = v26;
    operator delete(v26);
  }
  v27 = *v21;
  if (*v21)
  {
    v13[36] = v27;
    operator delete(v27);
  }
  v28 = *v22;
  if (*v22)
  {
    v13[31] = v28;
    operator delete(v28);
  }
  v29 = *v20;
  if (*v20)
  {
    v13[28] = v29;
    operator delete(v29);
  }
  v30 = *v19;
  if (*v19)
  {
    v13[25] = v30;
    operator delete(v30);
  }
  v31 = *v18;
  if (*v18)
  {
    v13[22] = v31;
    operator delete(v31);
  }
  v32 = *a10;
  if (*a10)
  {
    v13[19] = v32;
    operator delete(v32);
  }
  v33 = *a11;
  if (*a11)
  {
    v13[16] = v33;
    operator delete(v33);
  }
  v34 = *a12;
  if (*a12)
  {
    v13[13] = v34;
    operator delete(v34);
  }
  v35 = *a13;
  if (*a13)
  {
    v13[9] = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void sub_1B62955F0()
{
  JUMPOUT(0x1B6295598);
}

void sub_1B62955F8()
{
  JUMPOUT(0x1B62955ACLL);
}

void sub_1B6295600()
{
  JUMPOUT(0x1B62955C0);
}

void sub_1B6295608()
{
  JUMPOUT(0x1B62955D4);
}

void SpatialProbabilityBase::SetPriorProbabilities(SpatialProbabilityBase *this, float a2, float a3)
{
  NSObject *v5;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 < 0.0 || a2 > 1.0)
  {
    if (AUSpatialProbabilityLogScope(void)::once != -1)
      dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
    if (AUSpatialProbabilityLogScope(void)::scope)
    {
      v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
      if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
        return;
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return;
    v9 = 136315650;
    v10 = "SpatialProbabilityBase.cpp";
    v11 = 1024;
    v12 = 326;
    v13 = 2048;
    v14 = a2;
    v8 = "%25s:%-5d SpatialProbabilityBase: Prior probabilities not set. Source prior (%f) should be in range [0, 1].\n";
LABEL_26:
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 0x1Cu);
    return;
  }
  if (a3 >= 0.0 && a3 <= 1.0)
  {
    *((float *)this + 67) = a2 * a3;
    *((float *)this + 68) = (float)(1.0 - a3) * a2;
    *((float *)this + 69) = 1.0 - a2;
    return;
  }
  if (AUSpatialProbabilityLogScope(void)::once != -1)
    dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
  if (!AUSpatialProbabilityLogScope(void)::scope)
  {
    v5 = MEMORY[0x1E0C81028];
    goto LABEL_24;
  }
  v5 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
  if (*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
  {
LABEL_24:
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return;
    v9 = 136315650;
    v10 = "SpatialProbabilityBase.cpp";
    v11 = 1024;
    v12 = 330;
    v13 = 2048;
    v14 = a3;
    v8 = "%25s:%-5d SpatialProbabilityBase: Prior probabilities not set. Conditional target prior (%f) should be in range [0, 1].\n";
    goto LABEL_26;
  }
}

void SpatialProbabilityBase::UpdateShapeParameter(SpatialProbabilityBase *this)
{
  const float *v2;
  NSObject *v3;
  vDSP_Length v4;
  unsigned int v5;
  unsigned int v6;
  float **v7;
  const float *v8;
  vDSP_Length v9;
  const float *p_B;
  float *v11;
  float v12;
  float v13;
  int32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64x2_t v20;
  unint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  _DWORD *v24;
  int32x2_t v25;
  uint32x2_t v26;
  float32x2_t v27;
  const char *v28;
  float v29;
  int v30;
  float __A;
  float __B;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)this + 12))
  {
    case 0:
      if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
      {
        (**(void (***)(SpatialProbabilityBase *, float))this)(this, *((float *)this + 13));
        goto LABEL_41;
      }
      break;
    case 1:
      if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3) || *((_QWORD *)this + 4) != *((_QWORD *)this + 5))
      {
        v2 = (const float *)((char *)this + 56);
        __B = *((float *)this + 13) - *((float *)this + 14);
        if (__B >= 0.0)
        {
          v8 = (const float *)*((_QWORD *)this + 35);
          v7 = (float **)((char *)this + 64);
          v11 = (float *)*((_QWORD *)this + 8);
          v9 = *((unsigned int *)this + 2);
          p_B = &__B;
          goto LABEL_31;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v3 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return;
        }
        else
        {
          v3 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v34 = "SpatialProbabilityBase.cpp";
          v35 = 1024;
          v36 = 122;
          v28 = "%25s:%-5d Input kappaMin must be lower than kappaMax. Skipping updating model with Prior weighted freque"
                "ncy dependent shape parameter.\n";
          goto LABEL_51;
        }
      }
      break;
    case 2:
      if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3) || *((_QWORD *)this + 4) != *((_QWORD *)this + 5))
      {
        __B = *((float *)this + 98) / 10.0;
        __A = __exp10f(__B * *((float *)this + 99));
        v4 = *((unsigned int *)this + 2);
        v30 = *((_DWORD *)this + 2);
        v2 = (const float *)((char *)this + 52);
        v29 = *((float *)this + 14) - *((float *)this + 13);
        if (v29 <= 0.0)
        {
          vDSP_vsmul(*((const float **)this + 46), 1, &__B, *((float **)this + 52), 1, v4);
          v7 = (float **)((char *)this + 64);
          vDSP_vfill((const float *)this + 102, *((float **)this + 8), 1, *((unsigned int *)this + 2));
          vvpowf(*v7, *((const float **)this + 52), *v7, &v30);
          vDSP_vsadd(*v7, 1, &__A, *v7, 1, *((unsigned int *)this + 2));
          vDSP_svdiv(&__A, *v7, 1, *v7, 1, *((unsigned int *)this + 2));
          v8 = (const float *)*((_QWORD *)this + 8);
          v9 = *((unsigned int *)this + 2);
          p_B = &v29;
          v11 = (float *)v8;
LABEL_31:
          vDSP_vsmul(v8, 1, p_B, v11, 1, v9);
          vDSP_vsadd(*v7, 1, v2, *v7, 1, *((unsigned int *)this + 2));
          (*(void (**)(SpatialProbabilityBase *, float **))(*(_QWORD *)this + 8))(this, v7);
          goto LABEL_32;
        }
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v3 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return;
        }
        else
        {
          v3 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v34 = "SpatialProbabilityBase.cpp";
          v35 = 1024;
          v36 = 167;
          v28 = "%25s:%-5d Input kappaMin must be lower than kappaMax. Skipping updating model with CDR-based frequency d"
                "ependent shape parameter.\n";
          goto LABEL_51;
        }
      }
      break;
    case 3:
      if (*((_QWORD *)this + 2) == *((_QWORD *)this + 3))
        return;
      v5 = *((_DWORD *)this + 2);
      v6 = *((_DWORD *)this + 22);
      if (v5 >= v6)
      {
        v12 = *((float *)this + 13);
        v13 = *((float *)this + 14);
        vDSP_vfill((const float *)this + 13, *((float **)this + 8), 1, *((unsigned int *)this + 22));
        v16 = *((unsigned int *)this + 22);
        v17 = *((unsigned int *)this + 2);
        if (v16 < v17)
        {
          v18 = 0;
          *(float *)v14.i32 = (float)-(float)(v12 - v13) / (float)(v5 - v6);
          v19 = v17 - v16;
          v20 = (uint64x2_t)vdupq_n_s64(v19 - 1);
          *(float *)v15.i32 = v12 - (float)((float)v6 * *(float *)v14.i32);
          v21 = (v19 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v22 = (float32x2_t)vdup_lane_s32(v14, 0);
          v23 = (float32x2_t)vdup_lane_s32(v15, 0);
          v24 = (_DWORD *)(*((_QWORD *)this + 8) + 4 * v16 + 4);
          do
          {
            v25 = vmovn_s64((int64x2_t)vcgeq_u64(v20, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v18), (int8x16_t)xmmword_1B6626830)));
            v26.i32[0] = v16 + v18;
            v26.i32[1] = v16 + v18 + 1;
            v27 = vmla_f32(v23, v22, vcvt_f32_u32(v26));
            if ((v25.i8[0] & 1) != 0)
              *(v24 - 1) = v27.i32[0];
            if ((v25.i8[4] & 1) != 0)
              *v24 = v27.i32[1];
            v18 += 2;
            v24 += 2;
          }
          while (v21 != v18);
        }
        (*(void (**)(SpatialProbabilityBase *, char *))(*(_QWORD *)this + 8))(this, (char *)this + 64);
LABEL_41:
        *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
      }
      else
      {
        if (AUSpatialProbabilityLogScope(void)::once != -1)
          dispatch_once(&AUSpatialProbabilityLogScope(void)::once, &__block_literal_global_5486);
        if (AUSpatialProbabilityLogScope(void)::scope)
        {
          v3 = *(NSObject **)AUSpatialProbabilityLogScope(void)::scope;
          if (!*(_QWORD *)AUSpatialProbabilityLogScope(void)::scope)
            return;
        }
        else
        {
          v3 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v34 = "SpatialProbabilityBase.cpp";
          v35 = 1024;
          v36 = 197;
          v28 = "%25s:%-5d Maximum frequency for frequency dependent shape decay must be lower than maximumfrequency. Usi"
                "ng fixed shape parameter instead of frequency depedent one.\n";
LABEL_51:
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, v28, buf, 0x12u);
        }
      }
      break;
    case 4:
      if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
      {
        vDSP_vclip(*((const float **)this + 8), 1, (const float *)this + 14, (const float *)this + 13, *((float **)this + 8), 1, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
        (*(void (**)(SpatialProbabilityBase *, char *))(*(_QWORD *)this + 8))(this, (char *)this + 64);
LABEL_32:
        *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
        *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
      }
      break;
    default:
      return;
  }
}

float SpatialProbabilityBase::UpdatePosteriorProbabilities(SpatialProbabilityBase *this)
{
  float result;

  vDSP_vmul(*((const float **)this + 12), 1, *((const float **)this + 21), 1, *((float **)this + 21), 1, *((unsigned int *)this + 2));
  vDSP_vmul(*((const float **)this + 15), 1, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 2));
  vDSP_vmul(*((const float **)this + 18), 1, *((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 2));
  vDSP_vadd(*((const float **)this + 21), 1, *((const float **)this + 24), 1, *((float **)this + 30), 1, *((unsigned int *)this + 2));
  vDSP_vadd(*((const float **)this + 30), 1, *((const float **)this + 27), 1, *((float **)this + 30), 1, *((unsigned int *)this + 2));
  vDSP_vdiv(*((const float **)this + 30), 1, *((const float **)this + 21), 1, *((float **)this + 38), 1, *((unsigned int *)this + 2));
  vDSP_vdiv(*((const float **)this + 30), 1, *((const float **)this + 24), 1, *((float **)this + 41), 1, *((unsigned int *)this + 2));
  vDSP_meanv(*((const float **)this + 38), 1, (float *)this + 88, *((unsigned int *)this + 2));
  vDSP_meanv(*((const float **)this + 41), 1, (float *)this + 89, *((unsigned int *)this + 2));
  result = 1.0 - (float)(*((float *)this + 88) + *((float *)this + 89));
  *((float *)this + 90) = result;
  return result;
}

void SpatialProbabilityBase::UpdatePriorProbabilities(SpatialProbabilityBase *this)
{
  int v2;

  v2 = *((_DWORD *)this + 66);
  if (v2 == 1)
  {
    vDSP_vsmul(*((const float **)this + 35), 1, (const float *)this + 67, *((float **)this + 21), 1, *((unsigned int *)this + 2));
    vDSP_vsmul(*((const float **)this + 35), 1, (const float *)this + 68, *((float **)this + 24), 1, *((unsigned int *)this + 2));
    vDSP_vadd(*((const float **)this + 21), 1, *((const float **)this + 24), 1, *((float **)this + 27), 1, *((unsigned int *)this + 2));
    vDSP_vneg(*((const float **)this + 27), 1, *((float **)this + 27), 1, *((unsigned int *)this + 2));
    vDSP_vsadd(*((const float **)this + 27), 1, (const float *)this + 101, *((float **)this + 27), 1, *((unsigned int *)this + 2));
  }
  else if (!v2)
  {
    vDSP_vfill((const float *)this + 67, *((float **)this + 21), 1, *((unsigned int *)this + 2));
    vDSP_vfill((const float *)this + 68, *((float **)this + 24), 1, *((unsigned int *)this + 2));
    vDSP_vfill((const float *)this + 69, *((float **)this + 27), 1, *((unsigned int *)this + 2));
  }
}

void ChannelSelectorBox::~ChannelSelectorBox(ChannelSelectorBox *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69D9B88;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69D9B88;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x1BCC95CECLL);
}

const char *ChannelSelectorBox::ClassName(ChannelSelectorBox *this)
{
  return "ChannelSelectorBox";
}

double ChannelSelectorBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 1.17120757e171;
  *(_OWORD *)a1 = xmmword_1B66A1230;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t ChannelSelectorBox::getPropertyInfo(ChannelSelectorBox *this, unsigned int a2)
{
  if ((uint64_t)(*((_QWORD *)this + 98) - *((_QWORD *)this + 97)) >> 2 <= (unint64_t)a2)
    return 0x1FFFFD59DLL;
  else
    return 0x100000004;
}

uint64_t ChannelSelectorBox::getProperty(ChannelSelectorBox *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, _DWORD *a6)
{
  uint64_t v6;
  uint64_t result;

  v6 = *((_QWORD *)this + 97);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 98) - v6) >> 2))
    return 4294956445;
  result = 0;
  *a6 = *(_DWORD *)(v6 + 4 * a2);
  *a5 = 4;
  return result;
}

uint64_t ChannelSelectorBox::setProperty(ChannelSelectorBox *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, _DWORD *a6)
{
  uint64_t v6;
  uint64_t result;

  if (a5 != 4)
    return 4294956445;
  v6 = *((_QWORD *)this + 97);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 98) - v6) >> 2))
    return 4294956445;
  result = 0;
  *(_DWORD *)(v6 + 4 * a2) = *a6;
  return result;
}

uint64_t ChannelSelectorBox::process(ChannelSelectorBox *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  const void **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  const char *v28;
  _QWORD *v29;
  const char *v30;
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD v33[3];

  v4 = (char *)this + 64;
  v3 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "in");
    v29 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v29 = (_QWORD *)*v29;
LABEL_38:
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v28, v29, (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 5, 0);
    result = DSPGraph::ThrowException();
    goto LABEL_39;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v7 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "out");
    v31 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v31 = (_QWORD *)*v31;
  }
  else
  {
    v8 = *(_DWORD **)(*(_QWORD *)(v6 + 56) + 80);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    v10 = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 12) == v10)
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v32, "out");
      v31 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v31 = (_QWORD *)*v31;
    }
    else
    {
      v11 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 80);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      v13 = *((_QWORD *)this + 11);
      if (*((_QWORD *)this + 12) != v13)
      {
        v14 = (*(_DWORD *)(*(_QWORD *)(v12 + 120) + 24) * a2);
        if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13) + 56) + 100) < v14)
          __assert_rtn("process", "ChannelSelectorBox.cpp", 19, "out(0).wire()->buffer()->byteCapacity() >= size");
        v15 = *v11;
        v16 = *((_QWORD *)this + 97);
        if ((*((_QWORD *)this + 98) - v16) >> 2 < v15)
          v15 = (*((_QWORD *)this + 98) - v16) >> 2;
        if (v15)
        {
          v17 = 0;
          v18 = (void **)(v11 + 4);
          do
          {
            v19 = *(int *)(v16 + 4 * v17);
            if (*v8 <= (int)v19)
              __assert_rtn("process", "ChannelSelectorBox.cpp", 23, "static_cast<int>(inABL->mNumberBuffers) > channelSelection");
            v20 = (const void **)&v8[4 * v19];
            if (*((_DWORD *)v20 + 3) < v14)
              __assert_rtn("process", "ChannelSelectorBox.cpp", 24, "inABL->mBuffers[channelSelection].mDataByteSize >= size");
            memcpy(*v18, v20[2], v14);
            *((_DWORD *)v18 - 1) = v14;
            ++v17;
            v21 = *v11;
            v16 = *((_QWORD *)this + 97);
            if ((*((_QWORD *)this + 98) - v16) >> 2 < v21)
              v21 = (*((_QWORD *)this + 98) - v16) >> 2;
            v18 += 2;
          }
          while (v17 < v21);
        }
        v22 = *((_QWORD *)this + 8);
        if (*((_QWORD *)this + 9) == v22)
        {
          std::string::basic_string[abi:ne180100]<0>(v33, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v32, "in");
          v29 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v29 = (_QWORD *)*v29;
        }
        else
        {
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
          v24 = *((_QWORD *)this + 8);
          if (*((_QWORD *)this + 9) != v24)
          {
            v25 = *(unsigned int *)(*(_QWORD *)(v23 + 56) + 72);
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            return DSPGraph::Box::propagateFlagsAndTimeStamp(this, v25, (const AudioTimeStamp *)(*(_QWORD *)(v26 + 56) + 8));
          }
          std::string::basic_string[abi:ne180100]<0>(v33, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v32, "in");
          v29 = (_QWORD *)((char *)this + 32);
          if (*((char *)this + 55) < 0)
            v29 = (_QWORD *)*v29;
        }
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(v33, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v32, "out");
      v31 = (_QWORD *)((char *)this + 32);
      if (*((char *)this + 55) < 0)
        v31 = (_QWORD *)*v31;
    }
  }
  DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v30, v31, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
  result = DSPGraph::ThrowException();
LABEL_39:
  __break(1u);
  return result;
}

void sub_1B62965BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void ChannelSelectorBox::initialize(ChannelSelectorBox *this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  DSPGraph::Box::initialize(this);
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "/AppleInternal/Library/BuildRoots/c7268dd4-5656-11ef-b8ac-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v6, "out");
    v5 = (_QWORD *)((char *)this + 32);
    if (*((char *)this + 55) < 0)
      v5 = (_QWORD *)*v5;
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v4, v5, (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 5, 0);
    DSPGraph::ThrowException();
    __break(1u);
  }
  else
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    std::vector<int>::resize((std::vector<int> *)((char *)this + 776), *(unsigned int *)(*(_QWORD *)(v3 + 120) + 28));
  }
}

void sub_1B6296704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  int *v15;
  int v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(this->__end_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = (char *)end - (char *)this->__begin_;
    v8 = __n + (v7 >> 2);
    if (v8 >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v9 = v7 >> 2;
    v10 = (char *)value - (char *)begin;
    if (v10 >> 1 > v8)
      v8 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v8;
    if (v11)
    {
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v11);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v12 = 0;
    }
    v13 = (char *)(v11 + 4 * v9);
    v14 = (int *)(v11 + 4 * v12);
    bzero(v13, 4 * __n);
    v15 = (int *)&v13[4 * __n];
    while (end != begin)
    {
      v16 = *--end;
      *((_DWORD *)v13 - 1) = v16;
      v13 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = v14;
    if (begin)
      operator delete(begin);
  }
}

BOOL AUDebugFeature::IsNonFiniteHandlingEnabled(AUDebugFeature *this)
{
  unsigned __int8 v1;
  char *v2;
  int v4;

  v2 = (char *)&xmmword_1EF135FF8 + 8;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    if (v4)
    {
      AUDebugFeature::IsNonFiniteHandlingEnabled(void)::envValue = (uint64_t)getenv("AU_Disable_NonFinite_Handling");
      v2 = (_BYTE *)(&xmmword_1EF135FF8 + 8);
    }
  }
  return *((_QWORD *)v2 + 232) == 0;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<std::vector<DSPSplitComplex>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  size_t v28;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      v28 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v28);
      *(_QWORD *)(a1 + 8) = (char *)v4 + v28;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v10);
    v12 = &v11[24 * v5];
    v14 = &v11[24 * v13];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v12, v15);
    v16 = &v12[v15];
    v18 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(a1 + 8);
    if (v17 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v17)
        return;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)v12 = v19;
        *((_QWORD *)v12 + 2) = v17[2];
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      while (v17 != v18);
      v20 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v17 != v20)
      {
        v21 = v17;
        do
        {
          v23 = (void *)*(v21 - 3);
          v21 -= 3;
          v22 = v23;
          if (v23)
          {
            *(v17 - 2) = v22;
            operator delete(v22);
          }
          v17 = v21;
        }
        while (v21 != v20);
        v17 = v20;
      }
      if (!v17)
        return;
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    v24 = &v3[3 * a2];
    if (v4 != v24)
    {
      v25 = *(_QWORD **)(a1 + 8);
      do
      {
        v27 = (void *)*(v25 - 3);
        v25 -= 3;
        v26 = v27;
        if (v27)
        {
          *(v4 - 2) = v26;
          operator delete(v26);
        }
        v4 = v25;
      }
      while (v25 != v24);
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
}

void SmartFIR::Reset(void **this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  bzero(this[36], (_BYTE *)this[37] - (_BYTE *)this[36]);
  bzero(this[39], (_BYTE *)this[40] - (_BYTE *)this[39]);
  bzero(this[42], (_BYTE *)this[43] - (_BYTE *)this[42]);
  bzero(this[45], (_BYTE *)this[46] - (_BYTE *)this[45]);
  if (this[2])
  {
    v2 = 0;
    v3 = 1;
    do
    {
      FreqDomainConvolver::Reset((FreqDomainConvolver *)((char *)this[4] + 168 * v2));
      v4 = (uint64_t)this[19] + 24 * v2;
      v5 = *(void **)v4;
      v6 = *(_QWORD *)(v4 + 8) - *(_QWORD *)v4;
      if (v6 >= 1)
        bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
      v7 = (uint64_t)this[22] + 24 * v2;
      v8 = *(void **)v7;
      v9 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7;
      if (v9 >= 1)
        bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
      v2 = v3;
    }
    while ((unint64_t)this[2] > v3++);
  }
  *((_DWORD *)this + 15) = 0;
  this[3] = *this;
  *((_DWORD *)this + 58) = -1;
}

void SmartFIR::SmartFIR(SmartFIR *this, uint64_t a2, uint64_t a3, unint64_t a4)
{
  FreqDomainConvolver *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _DWORD **v13;
  unint64_t v14;
  uint8x8_t v15;
  _BOOL4 v16;
  uint8x8_t v17;
  _BOOL4 v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  DSPSplitComplex *v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  CAXException *exception;
  CAXException *v81;
  CAXException *v82;
  int v83;
  unsigned int v84;
  unint64_t *v85;
  int v86;
  _BYTE buf[18];
  __int16 v88;
  char **p_B;
  __int16 v90;
  _BYTE v91[10];
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  void *v95;
  _BYTE *v96;
  void *__p;
  void *v98;
  void *v99;
  void *v100;
  char *__B;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = 0;
  FreqDomainConvolver::FreqDomainConvolver((FreqDomainConvolver *)buf, a3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  __B = (char *)this + 32;
  v102 = 0;
  if (a4)
  {
    if (a4 >= 0x186186186186187)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v6 = (FreqDomainConvolver *)std::__allocate_at_least[abi:ne180100]<std::allocator<FreqDomainConvolver>>(a4);
    *((_QWORD *)this + 4) = v6;
    *((_QWORD *)this + 5) = v6;
    *((_QWORD *)this + 6) = (char *)v6 + 168 * v7;
    v8 = 168 * a4;
    v9 = (char *)v6 + 168 * a4;
    do
    {
      FreqDomainConvolver::FreqDomainConvolver(v6, (const FreqDomainConvolver *)buf);
      v6 = (FreqDomainConvolver *)((char *)v6 + 168);
      v8 -= 168;
    }
    while (v8);
    *((_QWORD *)this + 5) = v9;
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (__p)
  {
    v98 = __p;
    operator delete(__p);
  }
  if (v95)
  {
    if (v96 != v95)
      v96 += ((_BYTE *)v95 - v96 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    operator delete(v95);
    v95 = 0;
    v96 = 0;
  }
  if (v93)
  {
    if (v94 != v93)
      v94 += ((_BYTE *)v93 - v94 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    operator delete(v93);
    v93 = 0;
    v94 = 0;
  }
  if (*(_QWORD *)&v91[2])
  {
    if (v92 != *(_QWORD *)&v91[2])
      v92 += (*(_QWORD *)&v91[2] - v92 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    operator delete(*(void **)&v91[2]);
    *(_QWORD *)&v91[2] = 0;
    v92 = 0;
  }
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_OWORD *)this + 4) = 0u;
  v13 = (_DWORD **)((char *)this + 64);
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  v14 = *(_QWORD *)this;
  LODWORD(__B) = 0;
  std::vector<float>::vector(buf, v14, &__B);
  std::vector<std::vector<float>>::vector((_QWORD *)this + 22, a4, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = -1;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 18) = 0u;
  v85 = (unint64_t *)((char *)this + 264);
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 50) = 0;
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)this + 2));
  v15.i16[0] = vaddlv_u8(v15);
  v16 = v15.i32[0] > 1u;
  if (v15.i32[0] >= 2u)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__B, v16);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "SmartFIR.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 54;
      v88 = 2080;
      p_B = &__B;
      v90 = 2080;
      *(_QWORD *)v91 = "Filter length must be power of 2";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Filter length must be power of 2", v16);
  }
  v17 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)this);
  v17.i16[0] = vaddlv_u8(v17);
  v18 = v17.i32[0] > 1u;
  if (v17.i32[0] >= 2u)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__B, v18);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "SmartFIR.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      v88 = 2080;
      p_B = &__B;
      v90 = 2080;
      *(_QWORD *)v91 = "Block size must be power of 2";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v81 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v81, "Block size must be power of 2", v18);
  }
  v19 = MultiRadixRealFFT::Initialize((SmartFIR *)((char *)this + 64), 2 * *(_DWORD *)this);
  if (v19)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__B, v19);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "SmartFIR.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 56;
      v88 = 2080;
      p_B = &__B;
      v90 = 2080;
      *(_QWORD *)v91 = "FFT initialization failed";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v82 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v82, "FFT initialization failed", v19);
  }
  v20 = *(_QWORD *)this;
  v21 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this <= v21)
    v22 = v21 / v20;
  else
    v22 = 1;
  *((_DWORD *)this + 14) = v22;
  *((_DWORD *)this + 15) = 0;
  v23 = (_WORD *)*((_QWORD *)this + 48);
  v24 = *((_QWORD *)this + 49) - (_QWORD)v23;
  if (v24 > 9)
  {
    if (v24 != 10)
      *((_QWORD *)this + 49) = v23 + 5;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 48, 10 - v24);
    v23 = (_WORD *)*((_QWORD *)this + 48);
    v20 = *(_QWORD *)this;
  }
  *((_QWORD *)this + 51) = v23;
  v23[3] = v20;
  v23[2] = v22;
  v23[4] = v20 >> 2;
  std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t)this + 104, *((_QWORD *)this + 2));
  std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t)this + 128, *((_QWORD *)this + 2));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 19, *((_QWORD *)this + 2));
  std::vector<std::span<float,18446744073709551615ul>>::resize((char **)this + 10, *((_QWORD *)this + 2));
  v25 = *(_QWORD *)this * *((_QWORD *)this + 2);
  v26 = 4 * v22 * v25;
  v27 = *((_QWORD *)this + 30);
  v28 = *((_QWORD *)this + 31) - v27;
  if (v26 <= v28)
  {
    if (v26 < v28)
      *((_QWORD *)this + 31) = v27 + v26;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 30, v26 - v28);
  }
  v29 = *((_QWORD *)this + 33);
  v30 = *((_QWORD *)this + 34) - v29;
  if (v26 <= v30)
  {
    if (v26 < v30)
      *((_QWORD *)this + 34) = v29 + v26;
  }
  else
  {
    std::vector<unsigned char>::__append(v85, v26 - v30);
  }
  v31 = *((_QWORD *)this + 36);
  v32 = *((_QWORD *)this + 37) - v31;
  if (v26 <= v32)
  {
    if (v26 < v32)
      *((_QWORD *)this + 37) = v31 + v26;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 36, v26 - v32);
  }
  v33 = *((_QWORD *)this + 39);
  v34 = *((_QWORD *)this + 40) - v33;
  if (v26 <= v34)
  {
    if (v26 < v34)
      *((_QWORD *)this + 40) = v33 + v26;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 39, v26 - v34);
  }
  v35 = 4 * v25;
  v36 = *((_QWORD *)this + 42);
  v37 = *((_QWORD *)this + 43) - v36;
  if (4 * v25 <= v37)
  {
    if (4 * v25 < v37)
      *((_QWORD *)this + 43) = v36 + v35;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 42, 4 * v25 - v37);
  }
  v38 = *((_QWORD *)this + 45);
  v39 = *((_QWORD *)this + 46) - v38;
  if (v35 <= v39)
  {
    if (v35 < v39)
      *((_QWORD *)this + 46) = v38 + v35;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 45, v35 - v39);
  }
  v41 = *(_QWORD *)this;
  v40 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this <= v40)
    v42 = v40 / v41;
  else
    v42 = 1;
  *((_QWORD *)this + 51) = *((_QWORD *)this + 48);
  if (v41 <= v40)
    v43 = v40;
  else
    v43 = v41;
  v86 = 0;
  std::vector<float>::vector(buf, v43, &v86);
  v44 = *(void **)buf;
  if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  **(_DWORD **)buf = 1065353216;
  if (!*((_QWORD *)this + 2))
    goto LABEL_94;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = *((_QWORD *)this + 13);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 14) - v48) >> 3) <= v45
      || (std::vector<std::span<float,18446744073709551615ul>>::resize((char **)(v48 + 24 * v45), v42),
          v49 = *((_QWORD *)this + 16),
          0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v49) >> 3) <= v45))
    {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    std::vector<std::span<float,18446744073709551615ul>>::resize((char **)(v49 + 24 * v45), v42);
    v50 = *((_QWORD *)this + 19);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 20) - v50) >> 3) <= v45)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    std::vector<float>::resize(v50 + 24 * v45, *(_QWORD *)this);
    v51 = *((_QWORD *)this + 10);
    if (v45 >= (*((_QWORD *)this + 11) - v51) >> 4)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v83 = v47;
    v84 = v46;
    v52 = *(_QWORD *)this;
    v53 = (_QWORD *)(v51 + 16 * v45);
    v54 = *(_QWORD *)this * v45;
    *v53 = *((_QWORD *)this + 42) + 4 * v54;
    v53[1] = *((_QWORD *)this + 45) + 4 * v54;
    if (v42)
    {
      v55 = 0;
      LODWORD(v56) = 0;
      v57 = 1;
      v58 = v46;
      do
      {
        v59 = *((_QWORD *)this + 16);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v59) >> 3) <= v45)
          goto LABEL_97;
        v61 = (uint64_t *)(v59 + 24 * v45);
        v60 = *v61;
        if (v55 >= (v61[1] - *v61) >> 4)
          goto LABEL_98;
        v62 = v56;
        v63 = (_QWORD *)(v60 + 16 * v55);
        *v63 = *((_QWORD *)this + 36) + 4 * v58 + 4 * v56;
        v63[1] = *((_QWORD *)this + 39) + 4 * v58 + 4 * v56;
        v64 = *((_QWORD *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 14) - v64) >> 3) <= v45)
LABEL_97:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v66 = (uint64_t *)(v64 + 24 * v45);
        v65 = *v66;
        if (v55 >= (v66[1] - *v66) >> 4)
LABEL_98:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v67 = (DSPSplitComplex *)(v65 + 16 * v55);
        v67->realp = (float *)(*((_QWORD *)this + 30) + 4 * v58 + 4 * v62);
        v67->imagp = (float *)(*v85 + 4 * v58 + 4 * v62);
        if (v62 >= (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_ctoz((const DSPComplex *)(*(_QWORD *)buf + 4 * v62), 2, v67, 1, v52 >> 1);
        LODWORD(__B) = 0;
        v68 = *v13;
        if (*v13)
          LODWORD(v68) = *v68;
        *(float *)&__B = 1.0 / (float)v68;
        v69 = *((_QWORD *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 14) - v69) >> 3) <= v45)
          goto LABEL_96;
        v71 = (uint64_t *)(v69 + 24 * v45);
        v70 = *v71;
        if (v55 >= (v71[1] - *v71) >> 4)
          goto LABEL_99;
        vDSP_vsmul(*(const float **)(v70 + 16 * v55), 1, (const float *)&__B, *(float **)(v70 + 16 * v55), 1, *(_QWORD *)this);
        v72 = *((_QWORD *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 14) - v72) >> 3) <= v45)
LABEL_96:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v74 = (uint64_t *)(v72 + 24 * v45);
        v73 = *v74;
        if (v55 >= (v74[1] - *v74) >> 4)
LABEL_99:
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        vDSP_vsmul(*(const float **)(v73 + 16 * v55 + 8), 1, (const float *)&__B, *(float **)(v73 + 16 * v55 + 8), 1, *(_QWORD *)this);
        v76 = *((_QWORD *)this + 13);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 14) - v76) >> 3) <= v45)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v78 = (uint64_t *)(v76 + 24 * v45);
        v77 = *v78;
        if (v55 >= (v78[1] - *v78) >> 4)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        MultiRadixRealFFT::RealInPlaceTransform((SmartFIR *)((char *)this + 64), (DSPSplitComplex *)(v77 + 16 * v55), 1, v75);
        v52 = *(_QWORD *)this;
        v56 = *(_QWORD *)this + v62;
        v55 = v57;
      }
      while (v42 > v57++);
    }
    v46 = v84 + v52 * v42;
    v45 = (v83 + 1);
    v47 = v83 + 1;
  }
  while (*((_QWORD *)this + 2) > v45);
  v44 = *(void **)buf;
  if (*(_QWORD *)buf)
  {
LABEL_94:
    *(_QWORD *)&buf[8] = v44;
    operator delete(v44);
    v52 = *(_QWORD *)this;
  }
  CDSPSplitComplex::resize((SmartFIR *)((char *)this + 200), v52);
  SmartFIR::Reset((void **)this);
}

void sub_1B6297830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, CDSPSplitComplex *a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40)
{
  _QWORD *v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  v45 = *a18;
  if (*a18)
  {
    v40[49] = v45;
    operator delete(v45);
  }
  v46 = *a13;
  if (*a13)
  {
    v40[46] = v46;
    operator delete(v46);
  }
  v47 = *a14;
  if (*a14)
  {
    v40[43] = v47;
    operator delete(v47);
  }
  v48 = *a15;
  if (*a15)
  {
    v40[40] = v48;
    operator delete(v48);
  }
  v49 = *a16;
  if (*a16)
  {
    v40[37] = v49;
    operator delete(v49);
  }
  v50 = *a23;
  if (*a23)
  {
    v40[34] = v50;
    operator delete(v50);
  }
  v51 = *a17;
  if (*a17)
  {
    v40[31] = v51;
    operator delete(v51);
  }
  CDSPSplitComplex::~CDSPSplitComplex(a19);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 136));
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 136));
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 136));
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 136));
  v52 = *v42;
  if (*v42)
  {
    v40[11] = v52;
    operator delete(v52);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v41);
  std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 136));
  _Unwind_Resume(a1);
}

void SmartFIR::Initialize(SmartFIR *this, const float *const *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  float *v11;
  float *v12;
  float v13;
  unint64_t v14;
  int v15;
  float __B;

  v4 = *((_QWORD *)this + 1);
  if (v4 >= *(_QWORD *)this)
    v4 = *(_QWORD *)this;
  v14 = v4;
  bzero(*((void **)this + 30), *((_QWORD *)this + 31) - *((_QWORD *)this + 30));
  bzero(*((void **)this + 33), *((_QWORD *)this + 34) - *((_QWORD *)this + 33));
  if (*((_QWORD *)this + 2))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v15 = v6;
      FreqDomainConvolver::Initialize((DSPSplitComplex *)(*((_QWORD *)this + 4) + 168 * v5), (DSPComplex *)a2[v5], v14);
      if (*((_DWORD *)this + 14))
      {
        v7 = 0;
        v8 = 0;
        LODWORD(v9) = 0;
        do
        {
          vDSP_ctoz((const DSPComplex *)&a2[v5][v9], 2, (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 13) + 24 * v5) + v7), 1, v14 >> 1);
          __B = 0.0;
          v10 = (_DWORD *)*((_QWORD *)this + 8);
          if (v10)
            LODWORD(v10) = *v10;
          __B = 1.0 / (float)v10;
          v11 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 13) + 24 * v5) + v7);
          vDSP_vsmul(v11, 1, &__B, v11, 1, *(_QWORD *)this);
          v12 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 13) + 24 * v5) + v7 + 8);
          vDSP_vsmul(v12, 1, &__B, v12, 1, *(_QWORD *)this);
          MultiRadixRealFFT::RealInPlaceTransform((SmartFIR *)((char *)this + 64), (DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 13) + 24 * v5) + v7), 1, v13);
          v9 = *(_QWORD *)this + v9;
          ++v8;
          v7 += 16;
        }
        while (v8 < *((unsigned int *)this + 14));
      }
      v5 = (v15 + 1);
      v6 = v15 + 1;
    }
    while (*((_QWORD *)this + 2) > v5);
  }
}

void SmartFIR::ProcessFreq(SmartFIR *this, const DSPSplitComplex *const *a2, float *const *a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int *v10;
  _DWORD *v11;
  int *v12;
  uint64_t v13;
  unsigned int i;
  unint64_t v15;
  unint64_t v16;
  DSPSplitComplex v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  const DSPSplitComplex *v29;
  float v30;
  float v31;
  uint64_t v32;
  float **v33;
  float v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  vDSP_Length v40;
  int v41;
  int v42;
  DSPSplitComplex __A;

  if (*((_QWORD *)this + 3) == *(_QWORD *)this)
  {
    if (*((_QWORD *)this + 2))
    {
      v6 = 0;
      v7 = 1;
      do
      {
        memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 16) + 24 * v6) + 16 * *((unsigned int *)this + 15)), a2[v6]->realp, 4 * *(_QWORD *)this);
        memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)this + 16) + 24 * v6) + 16 * *((unsigned int *)this + 15) + 8), a2[v6]->imagp, 4 * *(_QWORD *)this);
        v6 = v7;
        v8 = *((_QWORD *)this + 2);
        v9 = v8 > v7++;
      }
      while (v9);
      v10 = (int *)((char *)this + 60);
      v11 = (_DWORD *)((char *)this + 56);
      v12 = (int *)((char *)this + 232);
      **((_DWORD **)this + 51) = (unsigned __int16)*((_DWORD *)this + 15);
      if (v8)
      {
        v13 = 0;
        for (i = 0; i < v8; v13 = ++i)
        {
          v15 = *((_QWORD *)this + 7);
          v16 = HIDWORD(v15);
          v17 = *(DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24 * v13) + 16 * HIDWORD(v15));
          __A = v17;
          v18 = *(_QWORD *)this;
          if (*(_QWORD *)this)
          {
            v19 = 0;
            v20 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * v13);
            v21 = *v20;
            v22 = v20[1];
            do
            {
              *(_DWORD *)(v21 + 4 * v19) = 0;
              *(_DWORD *)(v22 + 4 * v19++) = 0;
            }
            while (v18 > v19);
          }
          if ((_DWORD)v15)
          {
            v23 = 0;
            v24 = *((_QWORD *)this + 10);
            v25 = *((_QWORD *)this + 13);
            v26 = 8;
            do
            {
              __A = *(DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 16) + 24 * v13) + 16 * v16);
              v28 = (uint64_t *)(v25 + 24 * v13);
              v27 = *v28;
              if (v23 >= (v28[1] - *v28) >> 4
                || (v29 = (const DSPSplitComplex *)(v24 + 16 * v13),
                    v30 = *v29->realp,
                    v31 = *v29->imagp,
                    vDSP_zvma(&__A, 1, (const DSPSplitComplex *)(v27 + v26 - 8), 1, v29, 1, v29, 1, *(_QWORD *)this), v25 = *((_QWORD *)this + 13), v32 = *(_QWORD *)(v25 + 24 * v13), v23 >= (*(_QWORD *)(v25 + 24 * v13 + 8) - v32) >> 4))
              {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              v33 = (float **)(v32 + v26);
              v34 = v30 + (float)(*__A.realp * **(float **)(v32 + v26 - 8));
              v24 = *((_QWORD *)this + 10);
              v35 = v24 + 16 * v13;
              **(float **)v35 = v34;
              *(float *)&v17.realp = v31 + (float)(*__A.imagp * **v33);
              **(_DWORD **)(v35 + 8) = v17.realp;
              if ((_DWORD)v16)
                v36 = v16;
              else
                v36 = v15;
              LODWORD(v16) = v36 - 1;
              ++v23;
              v26 += 16;
            }
            while (v15 != v23);
            v8 = *((_QWORD *)this + 2);
          }
        }
        if (v8)
        {
          v37 = 0;
          v38 = 1;
          do
          {
            MultiRadixRealFFT::RealInPlaceTransform((SmartFIR *)((char *)this + 64), (DSPSplitComplex *)(*((_QWORD *)this + 10) + 16 * v37), -1, *(float *)&v17.realp);
            __A.realp = 0;
            __A.imagp = 0;
            v39 = (_QWORD *)(*((_QWORD *)this + 10) + 16 * v37);
            v40 = *(_QWORD *)this >> 1;
            __A.realp = (float *)(*v39 + 4 * v40);
            __A.imagp = (float *)(v39[1] + 4 * v40);
            vDSP_ztoc(&__A, 1, (DSPComplex *)a3[v37], 2, v40);
            v37 = v38;
            v9 = *((_QWORD *)this + 2) > (unint64_t)v38++;
          }
          while (v9);
        }
        v11 = (_DWORD *)((char *)this + 56);
        v10 = (int *)((char *)this + 60);
        v12 = (int *)((char *)this + 232);
      }
    }
    else
    {
      v11 = (_DWORD *)((char *)this + 56);
      v12 = (int *)((char *)this + 232);
      **((_DWORD **)this + 51) = (unsigned __int16)*((_DWORD *)this + 15);
      v10 = (int *)((char *)this + 60);
    }
    v41 = *v10;
    *v12 = *v10;
    if (v41 + 1 == *v11)
      v42 = 0;
    else
      v42 = v41 + 1;
    *v10 = v42;
  }
}

uint64_t VoiceProcessorV2::SetupDownlinkBasicAUChainForHwHasVP(VoiceProcessorV2 *this)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;

  v2 = (uint64_t *)((char *)this + 8832);
  v6 = (uint64_t *)((char *)this + 8832);
  v7 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>((uint64_t)&v6);
  *((_QWORD *)this + 1104) |= 0x800000028000000uLL;
  result = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
  v4 = 0x1000000000000000;
  if (result > 4)
    v4 = 0x800000000000;
  v5 = *((_QWORD *)this + 1104) | v4;
  *((_QWORD *)this + 1104) = v5;
  if (*((_BYTE *)this + 2244))
  {
    v6 = v2;
    v7 = 0;
    result = std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,62ul>>((uint64_t)&v6);
    v5 = *v2 | 0x3000C000;
    *v2 = v5;
  }
  if (*((_BYTE *)this + 16560))
    *v2 = v5 | 0x8000;
  return result;
}

void VoiceProcessorV2::SetupDownlinkFarEndVoiceMixGraph(VoiceProcessorV2 *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  std::string *v6;
  std::__split_buffer<std::string>::pointer first;
  std::string::size_type end_high;
  _OWORD *size;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::string::size_type v17;
  std::string **v18;
  std::string *v19;
  std::__split_buffer<std::string>::pointer v20;
  std::string::size_type begin;
  _OWORD *v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string::size_type v30;
  std::string *v31;
  std::__split_buffer<std::string>::pointer v32;
  std::string::size_type v33;
  _OWORD *v34;
  __int128 v35;
  std::string::size_type v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  __int128 v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  _QWORD *v47;
  NSObject *v48;
  std::string *v49;
  int *v50;
  const char *v51;
  std::string *v52;
  CFIndex v53;
  CFStringRef v54;
  const void *v55;
  std::__fs::filesystem::path *v56;
  __int128 v57;
  std::string *v58;
  CFIndex v59;
  CFStringRef v60;
  std::runtime_error *v61;
  std::runtime_error *exception;
  const void *v63;
  std::string *v64;
  std::string *i;
  std::string *v66;
  std::string *v67;
  uint64_t v68;
  _QWORD *v69;
  NSObject *v70;
  std::string *v71;
  int *v72;
  const char *v73;
  std::string *v74;
  std::__split_buffer<std::string>::pointer v75;
  std::string::size_type v76;
  _OWORD *v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  std::string *v82;
  std::string *v83;
  __int128 v84;
  std::string::size_type v85;
  std::string *v86;
  std::__split_buffer<std::string>::pointer v87;
  std::string::size_type v88;
  unsigned int v89;
  std::string *v90;
  __int128 v91;
  std::__split_buffer<std::string>::pointer v92;
  std::string::size_type v93;
  _OWORD *v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  std::string *v99;
  std::string *v100;
  __int128 v101;
  std::string::size_type v102;
  std::string *v103;
  std::__split_buffer<std::string>::pointer v104;
  std::string::size_type v105;
  unsigned int v106;
  std::string *v107;
  __int128 v108;
  std::__split_buffer<std::string>::pointer v109;
  std::string::size_type v110;
  _OWORD *v111;
  __int128 v112;
  std::string::size_type v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  std::string *v117;
  std::string *v118;
  __int128 v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  _QWORD *v124;
  NSObject *v125;
  std::string *v126;
  int *v127;
  const char *v128;
  __int128 v129;
  std::string *v130;
  std::string *v131;
  std::string *j;
  std::string *v133;
  std::string *v134;
  uint64_t v135;
  _QWORD *v136;
  NSObject *v137;
  std::string *v138;
  int *v139;
  const char *v140;
  std::string *v141;
  std::__split_buffer<std::string>::pointer v142;
  std::string::size_type v143;
  _OWORD *v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  std::string *v149;
  std::string *v150;
  __int128 v151;
  std::string::size_type v152;
  std::string *v153;
  std::__split_buffer<std::string>::pointer v154;
  std::string::size_type v155;
  unsigned int v156;
  std::string *v157;
  __int128 v158;
  std::__split_buffer<std::string>::pointer v159;
  std::string::size_type v160;
  _OWORD *v161;
  __int128 v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  std::string *v166;
  std::string *v167;
  __int128 v168;
  std::string::size_type v169;
  std::string *v170;
  std::__split_buffer<std::string>::pointer v171;
  std::string::size_type v172;
  unsigned int v173;
  std::string *v174;
  __int128 v175;
  std::__split_buffer<std::string>::pointer v176;
  std::string::size_type v177;
  _OWORD *v178;
  __int128 v179;
  std::string::size_type v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  std::string *v184;
  std::string *v185;
  __int128 v186;
  std::string::size_type v187;
  std::string *v188;
  __int128 v189;
  std::string *v190;
  _QWORD *v191;
  NSObject *v192;
  std::string *v193;
  int *v194;
  const char *v195;
  __int128 v196;
  std::string *v197;
  std::string *v198;
  std::string *k;
  std::string *v200;
  std::string *v201;
  uint64_t v202;
  _QWORD *v203;
  NSObject *v204;
  std::string *v205;
  int *v206;
  const char *v207;
  unsigned int v208;
  BOOL v209;
  uint64_t v210;
  BOOL v211;
  std::string *v212;
  unsigned int v213;
  _QWORD *v214;
  NSObject *v215;
  int *v216;
  std::__fs::filesystem::path *p_valuePtr;
  const void *v218;
  std::string::size_type v219;
  std::__fs::filesystem::path *p_replacement;
  std::string *v221;
  __int128 v222;
  std::string *v223;
  std::string::size_type v224;
  std::string *v225;
  __int128 v226;
  std::string *v227;
  std::string::size_type v228;
  std::string *v229;
  __int128 v230;
  std::string *v231;
  std::string::size_type v232;
  int v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  std::string::size_type v237;
  std::string *v238;
  __int128 v239;
  std::string *v240;
  std::string::size_type v241;
  std::string *v242;
  __int128 *v243;
  __int128 *v244;
  __int128 *v245;
  std::string *v246;
  __int128 v247;
  std::string *v248;
  _QWORD *v249;
  NSObject *v250;
  std::string *v251;
  int *v252;
  const char *v253;
  __int128 v254;
  std::string *v255;
  std::runtime_error *v256;
  CFDictionaryRef CFDictionaryRef;
  const void *v258;
  uint64_t m;
  const void *v260;
  const void *v261;
  std::string *v262;
  std::string *n;
  std::string *v264;
  std::string *v265;
  uint64_t v266;
  _QWORD *v267;
  NSObject *v268;
  std::string *v269;
  int *v270;
  const char *v271;
  CFDataRef v272;
  CFDictionaryRef v273;
  const void *v274;
  uint64_t ii;
  const void *v276;
  const void *v277;
  const void *v278;
  int v279;
  CFDataRef v280;
  CFDictionaryRef v281;
  const void *v282;
  uint64_t jj;
  const void *v284;
  const void *v285;
  CFDataRef v286;
  CFDictionaryRef v287;
  const void *v288;
  uint64_t kk;
  const void *v290;
  const void *v291;
  const void *v292;
  const void *v293;
  unint64_t *v294;
  unint64_t v295;
  std::runtime_error *v296;
  std::runtime_error *v297;
  std::runtime_error *v298;
  std::runtime_error *v299;
  std::runtime_error *v300;
  std::runtime_error *v301;
  std::string **v302;
  _BYTE *v303;
  UInt8 v304[8];
  __int128 *v305;
  uint64_t v306;
  UInt8 bytes[8];
  std::string *v308;
  unint64_t v309;
  std::string *v310;
  std::string *v311;
  unint64_t v312;
  std::string *v313;
  std::string *v314;
  unint64_t v315;
  std::string *v316;
  std::string *v317;
  unint64_t v318;
  unsigned __int8 v319;
  unsigned __int8 v320;
  unsigned __int8 v321;
  std::string v322;
  char v323;
  std::__fs::filesystem::path __replacement;
  std::__fs::filesystem::path v325;
  std::string v326;
  std::__split_buffer<std::string> __p[10];
  uint64_t v328;
  std::__fs::filesystem::path valuePtr;
  char __s[8];
  uint64_t v331;

  v331 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1104) &= ~1uLL;
  v2 = (const void *)*((_QWORD *)this + 2029);
  *((_QWORD *)this + 2029) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2030);
  *((_QWORD *)this + 2030) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2031);
  *((_QWORD *)this + 2031) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 2032);
  *((_QWORD *)this + 2032) = 0;
  if (v5)
    CFRelease(v5);
  if (*((_DWORD *)this + 59) == 32)
  {
    v316 = 0;
    v317 = 0;
    v318 = 0;
    memset(&v325, 0, sizeof(v325));
    VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(&v322, (uint64_t)this);
    if (v323)
    {
      v6 = (std::string *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
      __p[0].__first_ = v6;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v326, (char **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v326, (std::__fs::filesystem::path *)&v322);
      VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
      if (SHIBYTE(__p[0].__end_) >= 0)
        first = (std::__split_buffer<std::string>::pointer)__p;
      else
        first = __p[0].__first_;
      if (SHIBYTE(__p[0].__end_) >= 0)
        end_high = HIBYTE(__p[0].__end_);
      else
        end_high = (std::string::size_type)__p[0].__begin_;
      std::string::append(&v326, (const std::string::value_type *)first, end_high);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      std::string::append(&v326, ".dspg", 5uLL);
      size = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
      if (v325.__pn_.__r_.__value_.__l.__size_ >= v325.__pn_.__r_.__value_.__r.__words[2])
      {
        v11 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_811;
        if (0x5555555555555556
           * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v12)
          v12 = 0x5555555555555556
              * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v12;
        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
        if (v13)
          v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v13);
        else
          v14 = 0;
        v15 = v14 + v11;
        __p[0].__first_ = v14;
        __p[0].__begin_ = v15;
        __p[0].__end_cap_.__value_ = &v14[v13];
        v16 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
        v15->__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        memset(&v326, 0, sizeof(v326));
        __p[0].__end_ = v15 + 1;
        std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
        v17 = v325.__pn_.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(__p);
        v325.__pn_.__r_.__value_.__l.__size_ = v17;
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v326.__r_.__value_.__l.__data_);
      }
      else
      {
        v10 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
        *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v326.__r_.__value_.__l + 2);
        *size = v10;
        v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
      }
      if (v323 && SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v322.__r_.__value_.__l.__data_);
    }
    v18 = (std::string **)((char *)this + 8);
    v19 = (std::string *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v19 = *v18;
    __p[0].__first_ = v19;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v322, (char **)__p);
    VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 0);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
    if (SHIBYTE(__p[0].__end_) >= 0)
      v20 = (std::__split_buffer<std::string>::pointer)__p;
    else
      v20 = __p[0].__first_;
    if (SHIBYTE(__p[0].__end_) >= 0)
      begin = HIBYTE(__p[0].__end_);
    else
      begin = (std::string::size_type)__p[0].__begin_;
    std::string::append(&v322, (const std::string::value_type *)v20, begin);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    std::string::append(&v322, ".dspg", 5uLL);
    v22 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
    if (v325.__pn_.__r_.__value_.__l.__size_ >= v325.__pn_.__r_.__value_.__r.__words[2])
    {
      v24 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_811;
      if (0x5555555555555556
         * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v25)
        v25 = 0x5555555555555556
            * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v25;
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
      if (v26)
        v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v26);
      else
        v27 = 0;
      v28 = v27 + v24;
      __p[0].__first_ = v27;
      __p[0].__begin_ = v28;
      __p[0].__end_cap_.__value_ = &v27[v26];
      v29 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
      v28->__r_.__value_.__r.__words[2] = v322.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      memset(&v322, 0, sizeof(v322));
      __p[0].__end_ = v28 + 1;
      std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
      v30 = v325.__pn_.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v325.__pn_.__r_.__value_.__l.__size_ = v30;
      if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v322.__r_.__value_.__l.__data_);
    }
    else
    {
      v23 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
      *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v322.__r_.__value_.__l + 2);
      *v22 = v23;
      v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v22 + 24;
    }
    v31 = (std::string *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v31 = *v18;
    __p[0].__first_ = v31;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v322, (char **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
    std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
    if (SHIBYTE(__p[0].__end_) >= 0)
      v32 = (std::__split_buffer<std::string>::pointer)__p;
    else
      v32 = __p[0].__first_;
    if (SHIBYTE(__p[0].__end_) >= 0)
      v33 = HIBYTE(__p[0].__end_);
    else
      v33 = (std::string::size_type)__p[0].__begin_;
    std::string::append(&v322, (const std::string::value_type *)v32, v33);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    std::string::append(&v322, ".dspg", 5uLL);
    v34 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
    if (v325.__pn_.__r_.__value_.__l.__size_ < v325.__pn_.__r_.__value_.__r.__words[2])
    {
      v35 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
      *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v322.__r_.__value_.__l + 2);
      *v34 = v35;
      v36 = (std::string::size_type)v34 + 24;
      v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v34 + 24;
      goto LABEL_101;
    }
    v37 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
    v38 = v37 + 1;
    if (v37 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556
         * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v38)
        v38 = 0x5555555555555556
            * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        v39 = 0xAAAAAAAAAAAAAAALL;
      else
        v39 = v38;
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
      if (v39)
        v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v39);
      else
        v40 = 0;
      v41 = v40 + v37;
      __p[0].__first_ = v40;
      __p[0].__begin_ = v41;
      __p[0].__end_cap_.__value_ = &v40[v39];
      v42 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
      v41->__r_.__value_.__r.__words[2] = v322.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
      memset(&v322, 0, sizeof(v322));
      __p[0].__end_ = v41 + 1;
      std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
      v36 = v325.__pn_.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v325.__pn_.__r_.__value_.__l.__size_ = v36;
      if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v322.__r_.__value_.__l.__data_);
        v36 = v325.__pn_.__r_.__value_.__l.__size_;
      }
LABEL_101:
      v302 = (std::string **)((char *)this + 8);
      v303 = (char *)this + 15897;
      v43 = v325.__pn_.__r_.__value_.__r.__words[0];
      if (v325.__pn_.__r_.__value_.__r.__words[0] != v36)
      {
        while (1)
        {
          std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v43, 0);
          if (v319)
          {
            if (v319 != 255)
              break;
          }
          v44 = v317;
          if ((unint64_t)v317 >= v318)
          {
            v46 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v316, (__int128 *)v43);
          }
          else
          {
            if (*(char *)(v43 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v317, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
            }
            else
            {
              v45 = *(_OWORD *)v43;
              v317->__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
              *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
            }
            v46 = v44 + 1;
          }
          v317 = v46;
          v43 += 24;
          if (v43 == v36)
            goto LABEL_168;
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v47 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          v48 = (*v47 ? *v47 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            v49 = (std::string *)v43;
            if (*(char *)(v43 + 23) < 0)
              v49 = *(std::string **)v43;
            LODWORD(__p[0].__first_) = 136315650;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
            WORD2(__p[0].__begin_) = 1024;
            *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 69;
            WORD1(__p[0].__end_) = 2080;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v49;
            _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix graph \"%s\"", (uint8_t *)__p, 0x1Cu);
          }
        }
        v50 = (int *)*((_QWORD *)this + 1570);
        if (v50 && (*v303 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v51 = (const char *)v43;
          if (*(char *)(v43 + 23) < 0)
            v51 = *(const char **)v43;
          CALegacyLog::log(v50, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 69, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix graph \"%s\"", v51);
        }
        std::ifstream::basic_ifstream(__p);
        std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v322, *(_QWORD **)((char *)&__p[1].__first_ + __p[0].__first_[-1].__r_.__value_.__r.__words[0]));
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &v322;
        else
          v52 = (std::string *)v322.__r_.__value_.__r.__words[0];
        if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = HIBYTE(v322.__r_.__value_.__r.__words[2]);
        else
          v53 = v322.__r_.__value_.__l.__size_;
        v54 = CFStringCreateWithBytes(0, (const UInt8 *)v52, v53, 0x8000100u, 0);
        if (!v54)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        v55 = (const void *)*((_QWORD *)this + 2029);
        *((_QWORD *)this + 2029) = v54;
        if (v55)
          CFRelease(v55);
        std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)v43, (uint64_t)&valuePtr);
        memset(&__replacement, 0, sizeof(__replacement));
        v56 = std::__fs::filesystem::path::replace_extension(&valuePtr, &__replacement);
        if (SHIBYTE(v56->__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v326, v56->__pn_.__r_.__value_.__l.__data_, v56->__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          v57 = *(_OWORD *)&v56->__pn_.__r_.__value_.__l.__data_;
          v326.__r_.__value_.__r.__words[2] = v56->__pn_.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v326.__r_.__value_.__l.__data_ = v57;
        }
        if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(valuePtr.__pn_.__r_.__value_.__l.__data_);
        if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v326;
        else
          v58 = (std::string *)v326.__r_.__value_.__r.__words[0];
        if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = HIBYTE(v326.__r_.__value_.__r.__words[2]);
        else
          v59 = v326.__r_.__value_.__l.__size_;
        v60 = CFStringCreateWithBytes(0, (const UInt8 *)v58, v59, 0x8000100u, 0);
        if (!v60)
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v61, "Could not construct");
        }
        v63 = (const void *)*((_QWORD *)this + 2030);
        *((_QWORD *)this + 2030) = v60;
        if (v63)
          CFRelease(v63);
        v64 = v316;
        for (i = v317; i != v64; --i)
        {
          if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(i[-1].__r_.__value_.__l.__data_);
        }
        v317 = v64;
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v326.__r_.__value_.__l.__data_);
        if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v322.__r_.__value_.__l.__data_);
        __p[0].__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x1E0DE4F40];
        *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_
                                                     + __p[0].__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x1E0DE4F40] + 24);
        MEMORY[0x1BCC95788](&__p[0].__end_);
        std::istream::~istream();
        MEMORY[0x1BCC95BE4](&v328);
      }
LABEL_168:
      __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v325;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v66 = v316;
      v67 = v317;
      if (v316 != v317)
      {
        v68 = MEMORY[0x1E0C81028];
        do
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v69 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v70 = (*v69 ? *v69 : v68);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              v71 = v66;
              if (SHIBYTE(v66->__r_.__value_.__r.__words[2]) < 0)
                v71 = (std::string *)v66->__r_.__value_.__r.__words[0];
              LODWORD(__p[0].__first_) = 136315650;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
              WORD2(__p[0].__begin_) = 1024;
              *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 91;
              WORD1(__p[0].__end_) = 2080;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v71;
              _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
            }
          }
          v72 = (int *)*((_QWORD *)this + 1570);
          if (v72 && (*v303 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v73 = (const char *)v66;
            if (SHIBYTE(v66->__r_.__value_.__r.__words[2]) < 0)
              v73 = (const char *)v66->__r_.__value_.__r.__words[0];
            CALegacyLog::log(v72, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 91, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v73);
          }
          ++v66;
        }
        while (v66 != v67);
      }
      v313 = 0;
      v314 = 0;
      v315 = 0;
      memset(&v325, 0, sizeof(v325));
      VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(&v322, (uint64_t)this);
      if (v323)
      {
        v74 = (std::string *)((char *)this + 8);
        if (*((char *)this + 31) < 0)
          v74 = *v302;
        __p[0].__first_ = v74;
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v326, (char **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v326, (std::__fs::filesystem::path *)&v322);
        VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
        if (SHIBYTE(__p[0].__end_) >= 0)
          v75 = (std::__split_buffer<std::string>::pointer)__p;
        else
          v75 = __p[0].__first_;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v76 = HIBYTE(__p[0].__end_);
        else
          v76 = (std::string::size_type)__p[0].__begin_;
        std::string::append(&v326, (const std::string::value_type *)v75, v76);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        std::string::append(&v326, ".austrip", 8uLL);
        v77 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
        if (v325.__pn_.__r_.__value_.__l.__size_ >= v325.__pn_.__r_.__value_.__r.__words[2])
        {
          v79 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_812;
          if (0x5555555555555556
             * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v80)
            v80 = 0x5555555555555556
                * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v81 = 0xAAAAAAAAAAAAAAALL;
          else
            v81 = v80;
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
          if (v81)
            v82 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v81);
          else
            v82 = 0;
          v83 = v82 + v79;
          __p[0].__first_ = v82;
          __p[0].__begin_ = v83;
          __p[0].__end_cap_.__value_ = &v82[v81];
          v84 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
          v83->__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
          memset(&v326, 0, sizeof(v326));
          __p[0].__end_ = v83 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
          v85 = v325.__pn_.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(__p);
          v325.__pn_.__r_.__value_.__l.__size_ = v85;
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v326.__r_.__value_.__l.__data_);
        }
        else
        {
          v78 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
          *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v326.__r_.__value_.__l + 2);
          *v77 = v78;
          v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v77 + 24;
        }
        if (v323 && SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v322.__r_.__value_.__l.__data_);
      }
      v86 = (std::string *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v86 = *v302;
      __p[0].__first_ = v86;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v322, (char **)__p);
      VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 0);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
      if (SHIBYTE(__p[0].__end_) >= 0)
        v87 = (std::__split_buffer<std::string>::pointer)__p;
      else
        v87 = __p[0].__first_;
      if (SHIBYTE(__p[0].__end_) >= 0)
        v88 = HIBYTE(__p[0].__end_);
      else
        v88 = (std::string::size_type)__p[0].__begin_;
      std::string::append(&v322, (const std::string::value_type *)v87, v88);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
      {
        v89 = 1885892727;
        if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062)
          v89 = **((_DWORD **)this + 292);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v89);
        std::string::basic_string[abi:ne180100]<0>(&v326, (char *)&valuePtr);
        v90 = std::string::insert(&v326, 0, "_", 1uLL);
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__first_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v92 = (std::__split_buffer<std::string>::pointer)__p;
        else
          v92 = __p[0].__first_;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v93 = HIBYTE(__p[0].__end_);
        else
          v93 = (std::string::size_type)__p[0].__begin_;
        std::string::append(&v322, (const std::string::value_type *)v92, v93);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v326.__r_.__value_.__l.__data_);
      }
      std::string::append(&v322, ".austrip", 8uLL);
      v94 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
      if (v325.__pn_.__r_.__value_.__l.__size_ >= v325.__pn_.__r_.__value_.__r.__words[2])
      {
        v96 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        v97 = v96 + 1;
        if (v96 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_812;
        if (0x5555555555555556
           * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v97)
          v97 = 0x5555555555555556
              * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v98 = 0xAAAAAAAAAAAAAAALL;
        else
          v98 = v97;
        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
        if (v98)
          v99 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v98);
        else
          v99 = 0;
        v100 = v99 + v96;
        __p[0].__first_ = v99;
        __p[0].__begin_ = v100;
        __p[0].__end_cap_.__value_ = &v99[v98];
        v101 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
        v100->__r_.__value_.__r.__words[2] = v322.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
        memset(&v322, 0, sizeof(v322));
        __p[0].__end_ = v100 + 1;
        std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
        v102 = v325.__pn_.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(__p);
        v325.__pn_.__r_.__value_.__l.__size_ = v102;
        if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v322.__r_.__value_.__l.__data_);
      }
      else
      {
        v95 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
        *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v322.__r_.__value_.__l + 2);
        *v94 = v95;
        v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v94 + 24;
      }
      v103 = (std::string *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v103 = *v302;
      __p[0].__first_ = v103;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v322, (char **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
      std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
      if (SHIBYTE(__p[0].__end_) >= 0)
        v104 = (std::__split_buffer<std::string>::pointer)__p;
      else
        v104 = __p[0].__first_;
      if (SHIBYTE(__p[0].__end_) >= 0)
        v105 = HIBYTE(__p[0].__end_);
      else
        v105 = (std::string::size_type)__p[0].__begin_;
      std::string::append(&v322, (const std::string::value_type *)v104, v105);
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
      {
        v106 = 1885892727;
        if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062)
          v106 = **((_DWORD **)this + 292);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v106);
        std::string::basic_string[abi:ne180100]<0>(&v326, (char *)&valuePtr);
        v107 = std::string::insert(&v326, 0, "_", 1uLL);
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__first_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v109 = (std::__split_buffer<std::string>::pointer)__p;
        else
          v109 = __p[0].__first_;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v110 = HIBYTE(__p[0].__end_);
        else
          v110 = (std::string::size_type)__p[0].__begin_;
        std::string::append(&v322, (const std::string::value_type *)v109, v110);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v326.__r_.__value_.__l.__data_);
      }
      std::string::append(&v322, ".austrip", 8uLL);
      v111 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
      if (v325.__pn_.__r_.__value_.__l.__size_ < v325.__pn_.__r_.__value_.__r.__words[2])
      {
        v112 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
        *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v322.__r_.__value_.__l + 2);
        *v111 = v112;
        v113 = (std::string::size_type)v111 + 24;
        v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v111 + 24;
        goto LABEL_307;
      }
      v114 = 0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
      v115 = v114 + 1;
      if (v114 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        if (0x5555555555555556
           * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v115)
          v115 = 0x5555555555555556
               * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v116 = 0xAAAAAAAAAAAAAAALL;
        else
          v116 = v115;
        __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
        if (v116)
          v117 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v116);
        else
          v117 = 0;
        v118 = v117 + v114;
        __p[0].__first_ = v117;
        __p[0].__begin_ = v118;
        __p[0].__end_cap_.__value_ = &v117[v116];
        v119 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
        v118->__r_.__value_.__r.__words[2] = v322.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v119;
        memset(&v322, 0, sizeof(v322));
        __p[0].__end_ = v118 + 1;
        std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
        v113 = v325.__pn_.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(__p);
        v325.__pn_.__r_.__value_.__l.__size_ = v113;
        if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v322.__r_.__value_.__l.__data_);
          v113 = v325.__pn_.__r_.__value_.__l.__size_;
        }
LABEL_307:
        v120 = v325.__pn_.__r_.__value_.__r.__words[0];
        if (v325.__pn_.__r_.__value_.__r.__words[0] != v113)
        {
          while (1)
          {
            std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v120, 0);
            if (v320)
            {
              if (v320 != 255)
                break;
            }
            v121 = v314;
            if ((unint64_t)v314 >= v315)
            {
              v123 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v313, (__int128 *)v120);
            }
            else
            {
              if (*(char *)(v120 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v314, *(const std::string::value_type **)v120, *(_QWORD *)(v120 + 8));
              }
              else
              {
                v122 = *(_OWORD *)v120;
                v314->__r_.__value_.__r.__words[2] = *(_QWORD *)(v120 + 16);
                *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
              }
              v123 = v121 + 1;
            }
            v314 = v123;
            v120 += 24;
            if (v120 == v113)
              goto LABEL_351;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v124 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v125 = (*v124 ? *v124 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
            {
              v126 = (std::string *)v120;
              if (*(char *)(v120 + 23) < 0)
                v126 = *(std::string **)v120;
              LODWORD(__p[0].__first_) = 136315650;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
              WORD2(__p[0].__begin_) = 1024;
              *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 102;
              WORD1(__p[0].__end_) = 2080;
              *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v126;
              _os_log_impl(&dword_1B5ED0000, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix AU strip \"%s\"", (uint8_t *)__p, 0x1Cu);
            }
          }
          v127 = (int *)*((_QWORD *)this + 1570);
          if (v127 && (*v303 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v128 = (const char *)v120;
            if (*(char *)(v120 + 23) < 0)
              v128 = *(const char **)v120;
            CALegacyLog::log(v127, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 102, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix AU strip \"%s\"", v128);
          }
          if (*(char *)(v120 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v120, *(_QWORD *)(v120 + 8));
          }
          else
          {
            v129 = *(_OWORD *)v120;
            __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v120 + 16);
            *(_OWORD *)&__p[0].__first_ = v129;
          }
          applesauce::CF::make_DataRef((const char *)__p, (CFDataRef *)&v322);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          applesauce::CF::make_DictionaryRef((CFDataRef *)&v322, (applesauce::CF::DictionaryRef *)__p);
          v130 = (std::string *)*((_QWORD *)this + 2031);
          *((_QWORD *)this + 2031) = __p[0].__first_;
          __p[0].__first_ = v130;
          if (v130)
            CFRelease(v130);
          v131 = v313;
          for (j = v314; j != v131; --j)
          {
            if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(j[-1].__r_.__value_.__l.__data_);
          }
          v314 = v131;
          if (v322.__r_.__value_.__r.__words[0])
            CFRelease(v322.__r_.__value_.__l.__data_);
        }
LABEL_351:
        __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v325;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v133 = v313;
        v134 = v314;
        if (v313 != v314)
        {
          v135 = MEMORY[0x1E0C81028];
          do
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v136 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v137 = (*v136 ? *v136 : v135);
              if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
              {
                v138 = v133;
                if (SHIBYTE(v133->__r_.__value_.__r.__words[2]) < 0)
                  v138 = (std::string *)v133->__r_.__value_.__r.__words[0];
                LODWORD(__p[0].__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                WORD2(__p[0].__begin_) = 1024;
                *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 122;
                WORD1(__p[0].__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v138;
                _os_log_impl(&dword_1B5ED0000, v137, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
              }
            }
            v139 = (int *)*((_QWORD *)this + 1570);
            if (v139 && (*v303 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v140 = (const char *)v133;
              if (SHIBYTE(v133->__r_.__value_.__r.__words[2]) < 0)
                v140 = (const char *)v133->__r_.__value_.__r.__words[0];
              CALegacyLog::log(v139, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 122, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v140);
            }
            ++v133;
          }
          while (v133 != v134);
        }
        v310 = 0;
        v311 = 0;
        v312 = 0;
        memset(&v325, 0, sizeof(v325));
        VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(&v322, (uint64_t)this);
        if (v323)
        {
          v141 = (std::string *)((char *)this + 8);
          if (*((char *)this + 31) < 0)
            v141 = *v302;
          __p[0].__first_ = v141;
          std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v326, (char **)__p);
          std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
          std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          std::__fs::filesystem::path::operator/=[abi:ne180100]((std::__fs::filesystem::path *)&v326, (std::__fs::filesystem::path *)&v322);
          VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
          std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
          std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v326, (uint64_t)__p);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
          if (SHIBYTE(__p[0].__end_) >= 0)
            v142 = (std::__split_buffer<std::string>::pointer)__p;
          else
            v142 = __p[0].__first_;
          if (SHIBYTE(__p[0].__end_) >= 0)
            v143 = HIBYTE(__p[0].__end_);
          else
            v143 = (std::string::size_type)__p[0].__begin_;
          std::string::append(&v326, (const std::string::value_type *)v142, v143);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          std::string::append(&v326, ".propstrip", 0xAuLL);
          v144 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
          if (v325.__pn_.__r_.__value_.__l.__size_ >= v325.__pn_.__r_.__value_.__r.__words[2])
          {
            v146 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
            v147 = v146 + 1;
            if (v146 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_813;
            if (0x5555555555555556
               * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v147)
              v147 = 0x5555555555555556
                   * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
              v148 = 0xAAAAAAAAAAAAAAALL;
            else
              v148 = v147;
            __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
            if (v148)
              v149 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v148);
            else
              v149 = 0;
            v150 = v149 + v146;
            __p[0].__first_ = v149;
            __p[0].__begin_ = v150;
            __p[0].__end_cap_.__value_ = &v149[v148];
            v151 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
            v150->__r_.__value_.__r.__words[2] = v326.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150->__r_.__value_.__l.__data_ = v151;
            memset(&v326, 0, sizeof(v326));
            __p[0].__end_ = v150 + 1;
            std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
            v152 = v325.__pn_.__r_.__value_.__l.__size_;
            std::__split_buffer<std::string>::~__split_buffer(__p);
            v325.__pn_.__r_.__value_.__l.__size_ = v152;
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
          }
          else
          {
            v145 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
            *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v326.__r_.__value_.__l + 2);
            *v144 = v145;
            v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v144 + 24;
          }
          if (v323 && SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v322.__r_.__value_.__l.__data_);
        }
        v153 = (std::string *)((char *)this + 8);
        if (*((char *)this + 31) < 0)
          v153 = *v302;
        __p[0].__first_ = v153;
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v322, (char **)__p);
        VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 0);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
        if (SHIBYTE(__p[0].__end_) >= 0)
          v154 = (std::__split_buffer<std::string>::pointer)__p;
        else
          v154 = __p[0].__first_;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v155 = HIBYTE(__p[0].__end_);
        else
          v155 = (std::string::size_type)__p[0].__begin_;
        std::string::append(&v322, (const std::string::value_type *)v154, v155);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
        {
          v156 = 1885892727;
          if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062)
            v156 = **((_DWORD **)this + 292);
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v156);
          std::string::basic_string[abi:ne180100]<0>(&v326, (char *)&valuePtr);
          v157 = std::string::insert(&v326, 0, "_", 1uLL);
          v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v157->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__first_ = v158;
          v157->__r_.__value_.__l.__size_ = 0;
          v157->__r_.__value_.__r.__words[2] = 0;
          v157->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[0].__end_) >= 0)
            v159 = (std::__split_buffer<std::string>::pointer)__p;
          else
            v159 = __p[0].__first_;
          if (SHIBYTE(__p[0].__end_) >= 0)
            v160 = HIBYTE(__p[0].__end_);
          else
            v160 = (std::string::size_type)__p[0].__begin_;
          std::string::append(&v322, (const std::string::value_type *)v159, v160);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v326.__r_.__value_.__l.__data_);
        }
        std::string::append(&v322, ".propstrip", 0xAuLL);
        v161 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
        if (v325.__pn_.__r_.__value_.__l.__size_ >= v325.__pn_.__r_.__value_.__r.__words[2])
        {
          v163 = 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          v164 = v163 + 1;
          if (v163 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_813;
          if (0x5555555555555556
             * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v164)
            v164 = 0x5555555555555556
                 * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v165 = 0xAAAAAAAAAAAAAAALL;
          else
            v165 = v164;
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
          if (v165)
            v166 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v165);
          else
            v166 = 0;
          v167 = v166 + v163;
          __p[0].__first_ = v166;
          __p[0].__begin_ = v167;
          __p[0].__end_cap_.__value_ = &v166[v165];
          v168 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
          v167->__r_.__value_.__r.__words[2] = v322.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
          memset(&v322, 0, sizeof(v322));
          __p[0].__end_ = v167 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
          v169 = v325.__pn_.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(__p);
          v325.__pn_.__r_.__value_.__l.__size_ = v169;
          if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v322.__r_.__value_.__l.__data_);
        }
        else
        {
          v162 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
          *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v322.__r_.__value_.__l + 2);
          *v161 = v162;
          v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v161 + 24;
        }
        v170 = (std::string *)((char *)this + 8);
        if (*((char *)this + 31) < 0)
          v170 = *v302;
        __p[0].__first_ = v170;
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v322, (char **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "Generic");
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetVersionNameForTuning((std::string *)__p, (uint64_t)this);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetFarEndVoiceMixGraphFileNamePrefix((VoiceProcessorV2 *)__p, (uint64_t)this, 1);
        std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v322, (uint64_t)__p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        VoiceProcessorV2::GetFarEndVoiceMixType((VoiceProcessorV2 *)__p, this);
        if (SHIBYTE(__p[0].__end_) >= 0)
          v171 = (std::__split_buffer<std::string>::pointer)__p;
        else
          v171 = __p[0].__first_;
        if (SHIBYTE(__p[0].__end_) >= 0)
          v172 = HIBYTE(__p[0].__end_);
        else
          v172 = (std::string::size_type)__p[0].__begin_;
        std::string::append(&v322, (const std::string::value_type *)v171, v172);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) != 1)
        {
          v173 = 1885892727;
          if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062)
            v173 = **((_DWORD **)this + 292);
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&valuePtr, v173);
          std::string::basic_string[abi:ne180100]<0>(&v326, (char *)&valuePtr);
          v174 = std::string::insert(&v326, 0, "_", 1uLL);
          v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v174->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__first_ = v175;
          v174->__r_.__value_.__l.__size_ = 0;
          v174->__r_.__value_.__r.__words[2] = 0;
          v174->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[0].__end_) >= 0)
            v176 = (std::__split_buffer<std::string>::pointer)__p;
          else
            v176 = __p[0].__first_;
          if (SHIBYTE(__p[0].__end_) >= 0)
            v177 = HIBYTE(__p[0].__end_);
          else
            v177 = (std::string::size_type)__p[0].__begin_;
          std::string::append(&v322, (const std::string::value_type *)v176, v177);
          if (SHIBYTE(__p[0].__end_) < 0)
            operator delete(__p[0].__first_);
          if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v326.__r_.__value_.__l.__data_);
        }
        std::string::append(&v322, ".propstrip", 0xAuLL);
        v178 = (_OWORD *)v325.__pn_.__r_.__value_.__l.__size_;
        if (v325.__pn_.__r_.__value_.__l.__size_ < v325.__pn_.__r_.__value_.__r.__words[2])
        {
          v179 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
          *(_QWORD *)(v325.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v322.__r_.__value_.__l + 2);
          *v178 = v179;
          v180 = (std::string::size_type)v178 + 24;
          v325.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v178 + 24;
          goto LABEL_490;
        }
        v181 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v325.__pn_.__r_.__value_.__l.__size_ - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
        v182 = v181 + 1;
        if (v181 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          if (0x5555555555555556
             * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) > v182)
            v182 = 0x5555555555555556
                 * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v325.__pn_.__r_.__value_.__r.__words[2] - v325.__pn_.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v183 = 0xAAAAAAAAAAAAAAALL;
          else
            v183 = v182;
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v325.__pn_.__r_.__value_.__r.__words[2];
          if (v183)
            v184 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v325.__pn_.__r_.__value_.__r.__words[2], v183);
          else
            v184 = 0;
          v185 = v184 + v181;
          __p[0].__first_ = v184;
          __p[0].__begin_ = v185;
          __p[0].__end_cap_.__value_ = &v184[v183];
          v186 = *(_OWORD *)&v322.__r_.__value_.__l.__data_;
          v185->__r_.__value_.__r.__words[2] = v322.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v186;
          memset(&v322, 0, sizeof(v322));
          __p[0].__end_ = v185 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)&v325, __p);
          v180 = v325.__pn_.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(__p);
          v325.__pn_.__r_.__value_.__l.__size_ = v180;
          if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v322.__r_.__value_.__l.__data_);
            v180 = v325.__pn_.__r_.__value_.__l.__size_;
          }
LABEL_490:
          v187 = v325.__pn_.__r_.__value_.__r.__words[0];
          if (v325.__pn_.__r_.__value_.__r.__words[0] != v180)
          {
            while (1)
            {
              std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v187, 0);
              if (v321)
              {
                if (v321 != 255)
                  break;
              }
              v188 = v311;
              if ((unint64_t)v311 >= v312)
              {
                v190 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v310, (__int128 *)v187);
              }
              else
              {
                if (*(char *)(v187 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v311, *(const std::string::value_type **)v187, *(_QWORD *)(v187 + 8));
                }
                else
                {
                  v189 = *(_OWORD *)v187;
                  v311->__r_.__value_.__r.__words[2] = *(_QWORD *)(v187 + 16);
                  *(_OWORD *)&v188->__r_.__value_.__l.__data_ = v189;
                }
                v190 = v188 + 1;
              }
              v311 = v190;
              v187 += 24;
              if (v187 == v180)
                goto LABEL_534;
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v191 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              v192 = (*v191 ? *v191 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
              {
                v193 = (std::string *)v187;
                if (*(char *)(v187 + 23) < 0)
                  v193 = *(std::string **)v187;
                LODWORD(__p[0].__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                WORD2(__p[0].__begin_) = 1024;
                *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 133;
                WORD1(__p[0].__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v193;
                _os_log_impl(&dword_1B5ED0000, v192, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix property strip \"%s\"", (uint8_t *)__p, 0x1Cu);
              }
            }
            v194 = (int *)*((_QWORD *)this + 1570);
            if (v194 && (*v303 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v195 = (const char *)v187;
              if (*(char *)(v187 + 23) < 0)
                v195 = *(const char **)v187;
              CALegacyLog::log(v194, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 133, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix property strip \"%s\"", v195);
            }
            if (*(char *)(v187 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v187, *(_QWORD *)(v187 + 8));
            }
            else
            {
              v196 = *(_OWORD *)v187;
              __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(v187 + 16);
              *(_OWORD *)&__p[0].__first_ = v196;
            }
            applesauce::CF::make_DataRef((const char *)__p, (CFDataRef *)&v322);
            if (SHIBYTE(__p[0].__end_) < 0)
              operator delete(__p[0].__first_);
            applesauce::CF::make_DictionaryRef((CFDataRef *)&v322, (applesauce::CF::DictionaryRef *)__p);
            v197 = (std::string *)*((_QWORD *)this + 2032);
            *((_QWORD *)this + 2032) = __p[0].__first_;
            __p[0].__first_ = v197;
            if (v197)
              CFRelease(v197);
            v198 = v310;
            for (k = v311; k != v198; --k)
            {
              if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(k[-1].__r_.__value_.__l.__data_);
            }
            v311 = v198;
            if (v322.__r_.__value_.__r.__words[0])
              CFRelease(v322.__r_.__value_.__l.__data_);
          }
LABEL_534:
          __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v325;
          std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v200 = v310;
          v201 = v311;
          if (v310 != v311)
          {
            v202 = MEMORY[0x1E0C81028];
            do
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v203 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                v204 = (*v203 ? *v203 : v202);
                if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
                {
                  v205 = v200;
                  if (SHIBYTE(v200->__r_.__value_.__r.__words[2]) < 0)
                    v205 = (std::string *)v200->__r_.__value_.__r.__words[0];
                  LODWORD(__p[0].__first_) = 136315650;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                  WORD2(__p[0].__begin_) = 1024;
                  *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 153;
                  WORD1(__p[0].__end_) = 2080;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v205;
                  _os_log_impl(&dword_1B5ED0000, v204, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
                }
              }
              v206 = (int *)*((_QWORD *)this + 1570);
              if (v206 && (*v303 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v207 = (const char *)v200;
                if (SHIBYTE(v200->__r_.__value_.__r.__words[2]) < 0)
                  v207 = (const char *)v200->__r_.__value_.__r.__words[0];
                CALegacyLog::log(v206, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 153, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v207);
              }
              ++v200;
            }
            while (v200 != v201);
          }
          v208 = **((_DWORD **)this + 292) - 1885892674;
          v209 = v208 > 0x35;
          v210 = (1 << v208) & 0x20000100000001;
          v211 = v209 || v210 == 0;
          if (!v211
            && *((_BYTE *)this + 16396)
            && VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) == 2)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v212 = (std::string *)((char *)this + 8);
            v213 = 1885892727;
            v214 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              v215 = (*v214 ? *v214 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__p[0].__first_) = 136315394;
                *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                WORD2(__p[0].__begin_) = 1024;
                *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 158;
                _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix headtracking specific aupreset", (uint8_t *)__p, 0x12u);
              }
            }
            v216 = (int *)*((_QWORD *)this + 1570);
            if (v216 && (*v303 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v216, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 158, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix headtracking specific aupreset");
            }
            *(_QWORD *)bytes = 0;
            v308 = 0;
            v309 = 0;
            v305 = 0;
            v306 = 0;
            *(_QWORD *)v304 = 0;
            if (*((char *)this + 31) < 0)
              v212 = *v302;
            __p[0].__first_ = v212;
            std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v325.__pn_, (char **)__p);
            VoiceProcessorV2::GetHardwareModelNameForTuning((std::string *)__p, (uint64_t)this, 0);
            std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v325.__pn_, (uint64_t)__p);
            if (SHIBYTE(__p[0].__end_) < 0)
              operator delete(__p[0].__first_);
            if (std::__fs::filesystem::path::__filename(&v325).__size_)
              std::string::push_back(&v325.__pn_, 47);
            std::string::append[abi:ne180100]<char const*,0>(&v325.__pn_, "AU", "");
            VoiceProcessorV2::GetDeviceCodeNameForTuning((VoiceProcessorV2 *)&valuePtr, (uint64_t)this, 0);
            if (*((_BYTE *)this + 60))
            {
              if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                valuePtr.__pn_.__r_.__value_.__l.__size_ = 0;
                p_valuePtr = (std::__fs::filesystem::path *)valuePtr.__pn_.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&valuePtr.__pn_.__r_.__value_.__s + 23) = 0;
                p_valuePtr = &valuePtr;
              }
              p_valuePtr->__pn_.__r_.__value_.__s.__data_[0] = 0;
            }
            if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__replacement.__pn_, valuePtr.__pn_.__r_.__value_.__l.__data_, valuePtr.__pn_.__r_.__value_.__l.__size_);
            else
              __replacement = valuePtr;
            if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062)
              v213 = **((_DWORD **)this + 292);
            memset(__p, 0, 24);
            if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v219 = HIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]);
            else
              v219 = __replacement.__pn_.__r_.__value_.__l.__size_;
            if (v219)
            {
              if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_replacement = &__replacement;
              else
                p_replacement = (std::__fs::filesystem::path *)__replacement.__pn_.__r_.__value_.__r.__words[0];
              std::string::append((std::string *)__p, (const std::string::value_type *)p_replacement, v219);
              std::string::append((std::string *)__p, "-", 1uLL);
            }
            std::string::append((std::string *)__p, "vp", 2uLL);
            strcpy(__s, "aufx");
            std::string::basic_string[abi:ne180100]<0>(&v326, __s);
            v221 = std::string::insert(&v326, 0, "-", 1uLL);
            v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v222;
            v221->__r_.__value_.__l.__size_ = 0;
            v221->__r_.__value_.__r.__words[2] = 0;
            v221->__r_.__value_.__r.__words[0] = 0;
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v223 = &v322;
            else
              v223 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v224 = HIBYTE(v322.__r_.__value_.__r.__words[2]);
            else
              v224 = v322.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__p, (const std::string::value_type *)v223, v224);
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v322.__r_.__value_.__l.__data_);
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
            strcpy(__s, "ftac");
            std::string::basic_string[abi:ne180100]<0>(&v326, __s);
            v225 = std::string::insert(&v326, 0, "-", 1uLL);
            v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v226;
            v225->__r_.__value_.__l.__size_ = 0;
            v225->__r_.__value_.__r.__words[2] = 0;
            v225->__r_.__value_.__r.__words[0] = 0;
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v227 = &v322;
            else
              v227 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v228 = HIBYTE(v322.__r_.__value_.__r.__words[2]);
            else
              v228 = v322.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__p, (const std::string::value_type *)v227, v228);
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v322.__r_.__value_.__l.__data_);
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
            strcpy(__s, "appl");
            std::string::basic_string[abi:ne180100]<0>(&v326, __s);
            v229 = std::string::insert(&v326, 0, "-", 1uLL);
            v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v230;
            v229->__r_.__value_.__l.__size_ = 0;
            v229->__r_.__value_.__r.__words[2] = 0;
            v229->__r_.__value_.__r.__words[0] = 0;
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v231 = &v322;
            else
              v231 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v232 = HIBYTE(v322.__r_.__value_.__r.__words[2]);
            else
              v232 = v322.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__p, (const std::string::value_type *)v231, v232);
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v322.__r_.__value_.__l.__data_);
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
            v233 = bswap32(v213);
            *(_DWORD *)__s = v233;
            if (((char)v233 - 32) > 0x5E
              || (((__int16)v233 >> 8) - 32) > 0x5E
              || ((v233 << 8 >> 24) - 32) > 0x5E
              || ((v233 >> 24) - 32) > 0x5E)
            {
              std::to_string(&v326, v213);
            }
            else
            {
              __s[4] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v326, __s);
            }
            v234 = std::string::insert(&v326, 0, "-", 1uLL);
            v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v235;
            v234->__r_.__value_.__l.__size_ = 0;
            v234->__r_.__value_.__r.__words[2] = 0;
            v234->__r_.__value_.__r.__words[0] = 0;
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v236 = &v322;
            else
              v236 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v237 = HIBYTE(v322.__r_.__value_.__r.__words[2]);
            else
              v237 = v322.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__p, (const std::string::value_type *)v236, v237);
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v322.__r_.__value_.__l.__data_);
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
            std::string::append((std::string *)__p, "-dlnk", 5uLL);
            strcpy(__s, "shtp");
            std::string::basic_string[abi:ne180100]<0>(&v326, __s);
            v238 = std::string::insert(&v326, 0, "-", 1uLL);
            v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v239;
            v238->__r_.__value_.__l.__size_ = 0;
            v238->__r_.__value_.__r.__words[2] = 0;
            v238->__r_.__value_.__r.__words[0] = 0;
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v240 = &v322;
            else
              v240 = (std::string *)v322.__r_.__value_.__r.__words[0];
            if ((v322.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v241 = HIBYTE(v322.__r_.__value_.__r.__words[2]);
            else
              v241 = v322.__r_.__value_.__l.__size_;
            std::string::append((std::string *)__p, (const std::string::value_type *)v240, v241);
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v322.__r_.__value_.__l.__data_);
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__first_;
            v322.__r_.__value_.__r.__words[2] = (std::string::size_type)__p[0].__end_;
            std::__fs::filesystem::path::append[abi:ne180100]<std::string>(&v325.__pn_, (uint64_t)&v322);
            if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v322.__r_.__value_.__l.__data_);
            if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
            std::string::append(&v325.__pn_, ".aupreset", 9uLL);
            __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v306;
            v242 = (std::string *)operator new(0x18uLL);
            __p[0].__first_ = v242;
            __p[0].__begin_ = v242;
            *(std::__fs::filesystem::path *)v242 = v325;
            memset(&v325, 0, sizeof(v325));
            __p[0].__end_ = v242 + 1;
            __p[0].__end_cap_.__value_ = v242 + 1;
            std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)v304, __p);
            v243 = v305;
            std::__split_buffer<std::string>::~__split_buffer(__p);
            v305 = v243;
            if (SHIBYTE(valuePtr.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(valuePtr.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v325.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v325.__pn_.__r_.__value_.__l.__data_);
            v244 = *(__int128 **)v304;
            v245 = v305;
            if (*(__int128 **)v304 != v305)
            {
              while (1)
              {
                std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v244, 0);
                if (v326.__r_.__value_.__s.__data_[0])
                {
                  if (v326.__r_.__value_.__s.__data_[0] != 255)
                    break;
                }
                v246 = v308;
                if ((unint64_t)v308 >= v309)
                {
                  v248 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)bytes, v244);
                }
                else
                {
                  if (*((char *)v244 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v308, *(const std::string::value_type **)v244, *((_QWORD *)v244 + 1));
                  }
                  else
                  {
                    v247 = *v244;
                    v308->__r_.__value_.__r.__words[2] = *((_QWORD *)v244 + 2);
                    *(_OWORD *)&v246->__r_.__value_.__l.__data_ = v247;
                  }
                  v248 = v246 + 1;
                }
                v308 = v248;
                v244 = (__int128 *)((char *)v244 + 24);
                if (v244 == v245)
                  goto LABEL_726;
              }
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v249 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
              {
                v250 = (*v249 ? *v249 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT))
                {
                  v251 = (std::string *)v244;
                  if (*((char *)v244 + 23) < 0)
                    v251 = *(std::string **)v244;
                  LODWORD(__p[0].__first_) = 136315650;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                  WORD2(__p[0].__begin_) = 1024;
                  *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 166;
                  WORD1(__p[0].__end_) = 2080;
                  *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v251;
                  _os_log_impl(&dword_1B5ED0000, v250, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> loading far end voice mix aupreset \"%s\"", (uint8_t *)__p, 0x1Cu);
                }
              }
              v252 = (int *)*((_QWORD *)this + 1570);
              if (v252 && (*v303 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v253 = (const char *)v244;
                if (*((char *)v244 + 23) < 0)
                  v253 = *(const char **)v244;
                CALegacyLog::log(v252, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 166, "SetupDownlinkFarEndVoiceMixGraph", "loading far end voice mix aupreset \"%s\"", v253);
              }
              if (*((char *)v244 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v244, *((_QWORD *)v244 + 1));
              }
              else
              {
                v254 = *v244;
                __p[0].__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v244 + 2);
                *(_OWORD *)&__p[0].__first_ = v254;
              }
              applesauce::CF::make_DataRef((const char *)__p, (CFDataRef *)&v326);
              if (SHIBYTE(__p[0].__end_) < 0)
                operator delete(__p[0].__first_);
              applesauce::CF::make_DictionaryRef((CFDataRef *)&v326, (applesauce::CF::DictionaryRef *)&v325);
              LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = 1936225392;
              valuePtr.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &__replacement);
              if (!valuePtr.__pn_.__r_.__value_.__r.__words[0])
              {
                v256 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v256, "Could not construct");
              }
              applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&__p[0].__end_, "cfobject");
              v255 = (std::string *)v325.__pn_.__r_.__value_.__r.__words[0];
              if (v325.__pn_.__r_.__value_.__r.__words[0])
                CFRetain(v325.__pn_.__r_.__value_.__l.__data_);
              __p[0].__end_cap_.__value_ = v255;
              v322.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              v322.__r_.__value_.__l.__size_ = 2;
              CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v322);
              v258 = (const void *)*((_QWORD *)this + 2036);
              *((_QWORD *)this + 2036) = CFDictionaryRef;
              if (v258)
                CFRelease(v258);
              for (m = 0; m != -32; m -= 16)
              {
                v260 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + m);
                if (v260)
                  CFRelease(v260);
                v261 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + m);
                if (v261)
                  CFRelease(v261);
              }
              if (valuePtr.__pn_.__r_.__value_.__r.__words[0])
                CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
              v262 = *(std::string **)bytes;
              for (n = v308; n != v262; --n)
              {
                if (SHIBYTE(n[-1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(n[-1].__r_.__value_.__l.__data_);
              }
              v308 = v262;
              if (v325.__pn_.__r_.__value_.__r.__words[0])
                CFRelease(v325.__pn_.__r_.__value_.__l.__data_);
              if (v326.__r_.__value_.__r.__words[0])
                CFRelease(v326.__r_.__value_.__l.__data_);
            }
LABEL_726:
            __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v304;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v265 = *(std::string **)bytes;
            v264 = v308;
            if (*(std::string **)bytes != v308)
            {
              v266 = MEMORY[0x1E0C81028];
              do
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v267 = (_QWORD *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
                {
                  v268 = (*v267 ? *v267 : v266);
                  if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
                  {
                    v269 = v265;
                    if (SHIBYTE(v265->__r_.__value_.__r.__words[2]) < 0)
                      v269 = (std::string *)v265->__r_.__value_.__r.__words[0];
                    LODWORD(__p[0].__first_) = 136315650;
                    *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__first_ + 4) = (std::__split_buffer<std::string>::pointer)"vpSetupDownlinkDSPChain.cpp";
                    WORD2(__p[0].__begin_) = 1024;
                    *(_DWORD *)((char *)&__p[0].__begin_ + 6) = 190;
                    WORD1(__p[0].__end_) = 2080;
                    *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + 4) = v269;
                    _os_log_impl(&dword_1B5ED0000, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)__p, 0x1Cu);
                  }
                }
                v270 = (int *)*((_QWORD *)this + 1570);
                if (v270 && (*v303 || *((_BYTE *)this + 15898)))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v271 = (const char *)v265;
                  if (SHIBYTE(v265->__r_.__value_.__r.__words[2]) < 0)
                    v271 = (const char *)v265->__r_.__value_.__r.__words[0];
                  CALegacyLog::log(v270, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 190, "SetupDownlinkFarEndVoiceMixGraph", "file \"%s\" does not exist", v271);
                }
                ++v265;
              }
              while (v265 != v264);
            }
            __p[0].__first_ = (std::__split_buffer<std::string>::pointer)bytes;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          }
          else
          {
            v218 = (const void *)*((_QWORD *)this + 2036);
            *((_QWORD *)this + 2036) = 0;
            if (v218)
              CFRelease(v218);
          }
          if (!*((_QWORD *)this + 2029)
            || !*((_QWORD *)this + 2030)
            || !*((_QWORD *)this + 2031)
            || !*((_QWORD *)this + 2032))
          {
            goto LABEL_809;
          }
          *((_QWORD *)this + 1104) |= 1uLL;
          if (*((_DWORD *)this + 542))
          {
            LODWORD(valuePtr.__pn_.__r_.__value_.__l.__data_) = 1919509619;
            v325.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v325.__pn_.__r_.__value_.__r.__words[0])
            {
              v296 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v296, "Could not construct");
            }
            applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&v325.__pn_.__r_.__value_.__l.__data_);
            v272 = CFDataCreate(0, *((const UInt8 **)this + 270), 8 * *((unsigned int *)this + 542));
            if (!v272)
            {
              v297 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v297, "Could not construct");
            }
            applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&valuePtr, v272);
            applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&__p[0].__end_, "data", (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
            v322.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            v322.__r_.__value_.__l.__size_ = 2;
            v273 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v322);
            v274 = (const void *)*((_QWORD *)this + 2033);
            *((_QWORD *)this + 2033) = v273;
            if (v274)
              CFRelease(v274);
            for (ii = 0; ii != -32; ii -= 16)
            {
              v276 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + ii);
              if (v276)
                CFRelease(v276);
              v277 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + ii);
              if (v277)
                CFRelease(v277);
            }
            if (valuePtr.__pn_.__r_.__value_.__r.__words[0])
              CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
            v278 = (const void *)v325.__pn_.__r_.__value_.__r.__words[0];
            if (!v325.__pn_.__r_.__value_.__r.__words[0])
            {
LABEL_770:
              if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) == 2)
              {
                v279 = *((unsigned __int8 *)this + 16396);
                if (*((_BYTE *)this + 16396))
                {
                  if (*((_DWORD *)this + 19) == 2)
                    v279 = 4;
                  else
                    v279 = 5;
                }
                *(_DWORD *)bytes = v279;
                LODWORD(valuePtr.__pn_.__r_.__value_.__l.__data_) = 1936746612;
                v325.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                if (!v325.__pn_.__r_.__value_.__r.__words[0])
                {
                  v298 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v298, "Could not construct");
                }
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&v325.__pn_.__r_.__value_.__l.__data_);
                v280 = CFDataCreate(0, bytes, 4);
                if (!v280)
                {
                  v299 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v299, "Could not construct");
                }
                applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&valuePtr, v280);
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&__p[0].__end_, "data", (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
                v322.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v322.__r_.__value_.__l.__size_ = 2;
                v281 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v322);
                v282 = (const void *)*((_QWORD *)this + 2034);
                *((_QWORD *)this + 2034) = v281;
                if (v282)
                  CFRelease(v282);
                for (jj = 0; jj != -32; jj -= 16)
                {
                  v284 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + jj);
                  if (v284)
                    CFRelease(v284);
                  v285 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + jj);
                  if (v285)
                    CFRelease(v285);
                }
                if (valuePtr.__pn_.__r_.__value_.__r.__words[0])
                  CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
                if (v325.__pn_.__r_.__value_.__r.__words[0])
                  CFRelease(v325.__pn_.__r_.__value_.__l.__data_);
                *(_DWORD *)v304 = *((unsigned __int8 *)this + 16396);
                LODWORD(valuePtr.__pn_.__r_.__value_.__l.__data_) = 1936225381;
                v325.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                if (!v325.__pn_.__r_.__value_.__r.__words[0])
                {
                  v300 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v300, "Could not construct");
                }
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)__p, (const void **)&v325.__pn_.__r_.__value_.__l.__data_);
                v286 = CFDataCreate(0, v304, 4);
                if (!v286)
                {
                  v301 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v301, "Could not construct");
                }
                applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&valuePtr, v286);
                applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&__p[0].__end_, "data", (const void **)&valuePtr.__pn_.__r_.__value_.__l.__data_);
                v322.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v322.__r_.__value_.__l.__size_ = 2;
                v287 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v322);
                v288 = (const void *)*((_QWORD *)this + 2035);
                *((_QWORD *)this + 2035) = v287;
                if (v288)
                  CFRelease(v288);
                for (kk = 0; kk != -32; kk -= 16)
                {
                  v290 = *(std::string **)((char *)&__p[0].__end_cap_.__value_ + kk);
                  if (v290)
                    CFRelease(v290);
                  v291 = *(std::__split_buffer<std::string>::pointer *)((char *)&__p[0].__end_ + kk);
                  if (v291)
                    CFRelease(v291);
                }
                if (valuePtr.__pn_.__r_.__value_.__r.__words[0])
                  CFRelease(valuePtr.__pn_.__r_.__value_.__l.__data_);
                v292 = (const void *)v325.__pn_.__r_.__value_.__r.__words[0];
                if (!v325.__pn_.__r_.__value_.__r.__words[0])
                  goto LABEL_807;
              }
              else
              {
                v293 = (const void *)*((_QWORD *)this + 2034);
                *((_QWORD *)this + 2034) = 0;
                if (v293)
                  CFRelease(v293);
                v292 = (const void *)*((_QWORD *)this + 2035);
                *((_QWORD *)this + 2035) = 0;
                if (!v292)
                  goto LABEL_807;
              }
              CFRelease(v292);
LABEL_807:
              v294 = (unint64_t *)((char *)this + 0x4000);
              do
                v295 = __ldaxr(v294);
              while (__stlxr(v295 + 1, v294));
LABEL_809:
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v310;
              std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v313;
              std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v316;
              std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              return;
            }
          }
          else
          {
            v278 = (const void *)*((_QWORD *)this + 2033);
            *((_QWORD *)this + 2033) = 0;
            if (!v278)
              goto LABEL_770;
          }
          CFRelease(v278);
          goto LABEL_770;
        }
LABEL_813:
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
LABEL_812:
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
LABEL_811:
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
}

void sub_1B629BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf,void *__pa,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,std::__split_buffer<std::string> *a49,CFTypeRef cfa,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  a57 = (void **)&a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a22;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a25;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a28;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  a57 = (void **)&a31;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a57);
  _Unwind_Resume(a1);
}

void sub_1B629BFEC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B629BFF4);
  __clang_call_terminate(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],applesauce::CF::NumberRef>(applesauce::CF::TypeRef *a1, const void **a2)
{
  const void *v4;

  applesauce::CF::TypeRef::TypeRef(a1, "ID");
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  *((_QWORD *)a1 + 1) = v4;
  return a1;
}

void VoiceProcessorV2::SetupDownlinkFarEndVoiceDNNVADGraph(VoiceProcessorV2 *this, BOOL a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  char *v6;
  char *v7;
  _BYTE *v8;
  _QWORD *v9;
  NSObject *v10;
  std::__fs::filesystem::path *v11;
  int *v12;
  std::__fs::filesystem::path *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  _QWORD *v18;
  NSObject *v19;
  std::__fs::filesystem::path *v20;
  int *v21;
  std::__fs::filesystem::path *v22;
  std::string *p_cf;
  CFIndex size;
  CFStringRef v25;
  const void *v26;
  std::__fs::filesystem::path *v27;
  __int128 v28;
  std::string *v29;
  CFIndex v30;
  CFStringRef v31;
  const void *v32;
  char *v33;
  _QWORD *v34;
  NSObject *v35;
  std::__fs::filesystem::path *v36;
  int *v37;
  std::__fs::filesystem::path *v38;
  _QWORD *v39;
  NSObject *v40;
  std::__fs::filesystem::path *v41;
  int *v42;
  std::__fs::filesystem::path *v43;
  const void *v44;
  _QWORD *v45;
  NSObject *v46;
  std::__fs::filesystem::path *v47;
  int *v48;
  std::__fs::filesystem::path *v49;
  _QWORD *v50;
  NSObject *v51;
  std::__fs::filesystem::path *v52;
  int *v53;
  std::__fs::filesystem::path *v54;
  const void *v55;
  std::runtime_error *exception;
  std::runtime_error *v57;
  std::__fs::filesystem::path v58;
  std::__fs::filesystem::path v59;
  std::__fs::filesystem::path v60;
  BOOL v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  std::string __p;
  std::string v65;
  std::__fs::filesystem::path __replacement;
  std::__fs::filesystem::path v67;
  std::string v68;
  std::string cf;
  std::__fs::filesystem::path buf[17];
  _QWORD v71[21];

  v71[20] = *MEMORY[0x1E0C80C00];
  v61 = a2;
  *((_QWORD *)this + 1104) &= ~2uLL;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_enable_far_end_voice_dnn_vad"), 0, &v61, 0, a5);
  if (v61)
  {
    v6 = (char *)this + 8;
    v7 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v7 = *(char **)v6;
    buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v68, &buf[0].__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v67.__pn_, "Generic");
    std::__fs::filesystem::operator/[abi:ne180100](&v67, (uint64_t)&v68, (std::__fs::filesystem::path *)&cf);
    VoiceProcessorV2::GetVersionNameForTuning(&v65, (uint64_t)this);
    __replacement.__pn_ = v65;
    memset(&v65, 0, sizeof(v65));
    std::__fs::filesystem::operator/[abi:ne180100](&__replacement, (uint64_t)&cf, buf);
    std::__fs::filesystem::path::path[abi:ne180100]<char [29],void>(&__p, "gen_far_end_voice_nnvad.dspg");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)buf, &v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__pn_.__r_.__value_.__l.__data_);
    v8 = (char *)this + 15897;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__status(&v60, 0);
    if (v62 && v62 != 255)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v18 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v20 = &v60;
          if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v20 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 270;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v20;
          _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> loading far end voice DNN VAD graph \"%s\"", (uint8_t *)buf, 0x1Cu);
        }
      }
      v21 = (int *)*((_QWORD *)this + 1570);
      if (v21 && (*v8 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v22 = &v60;
        if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v22 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
        CALegacyLog::log(v21, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 270, "SetupDownlinkFarEndVoiceDNNVADGraph", "loading far end voice DNN VAD graph \"%s\"", (const char *)v22);
      }
      std::ifstream::basic_ifstream(buf);
      std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&cf, *(_QWORD **)((char *)&buf[1].__pn_.__r_.__value_.__r.__words[2]+ *(_QWORD *)(buf[0].__pn_.__r_.__value_.__r.__words[0] - 24)));
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_cf = &cf;
      else
        p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
      else
        size = cf.__r_.__value_.__l.__size_;
      v25 = CFStringCreateWithBytes(0, (const UInt8 *)p_cf, size, 0x8000100u, 0);
      if (!v25)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      v26 = (const void *)*((_QWORD *)this + 2050);
      *((_QWORD *)this + 2050) = v25;
      if (v26)
        CFRelease(v26);
      std::__fs::filesystem::path::filename[abi:ne180100](&v60, (uint64_t)&v67);
      memset(&__replacement, 0, sizeof(__replacement));
      v27 = std::__fs::filesystem::path::replace_extension(&v67, &__replacement);
      if (SHIBYTE(v27->__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, v27->__pn_.__r_.__value_.__l.__data_, v27->__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        v28 = *(_OWORD *)&v27->__pn_.__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v27->__pn_.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v28;
      }
      if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__pn_.__r_.__value_.__l.__data_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v68;
      else
        v29 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v30 = v68.__r_.__value_.__l.__size_;
      v31 = CFStringCreateWithBytes(0, (const UInt8 *)v29, v30, 0x8000100u, 0);
      if (!v31)
      {
        v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
      }
      v32 = (const void *)*((_QWORD *)this + 2051);
      *((_QWORD *)this + 2051) = v31;
      if (v32)
        CFRelease(v32);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
      buf[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
      *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words
                                + *(_QWORD *)(buf[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1BCC95788](&buf[0].__pn_.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x1BCC95BE4](v71);
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v9 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = &v60;
          if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v11 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 279;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v11;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)buf, 0x1Cu);
        }
      }
      v12 = (int *)*((_QWORD *)this + 1570);
      if (v12 && (*v8 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v13 = &v60;
        if ((v60.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = (std::__fs::filesystem::path *)v60.__pn_.__r_.__value_.__r.__words[0];
        CALegacyLog::log(v12, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 279, "SetupDownlinkFarEndVoiceDNNVADGraph", "file \"%s\" does not exist", (const char *)v13);
      }
    }
    v33 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v33 = *(char **)v6;
    buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v68, &buf[0].__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v67.__pn_, "Generic");
    std::__fs::filesystem::operator/[abi:ne180100](&v67, (uint64_t)&v68, (std::__fs::filesystem::path *)&cf);
    VoiceProcessorV2::GetVersionNameForTuning(&v65, (uint64_t)this);
    __replacement.__pn_ = v65;
    memset(&v65, 0, sizeof(v65));
    std::__fs::filesystem::operator/[abi:ne180100](&__replacement, (uint64_t)&cf, buf);
    memset(&__p, 0, sizeof(__p));
    std::string::append[abi:ne180100]<char const*,0>(&__p, "gen_far_end_voice_nnvad.austrip", "");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)buf, &v59);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__status(&v59, 0);
    if (v63 && v63 != 255)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v39 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        v40 = (*v39 ? *v39 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          v41 = &v59;
          if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v41 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 293;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v41;
          _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> loading far end voice DNN VAD AU strip \"%s\"", (uint8_t *)buf, 0x1Cu);
        }
      }
      v42 = (int *)*((_QWORD *)this + 1570);
      if (v42 && (*v8 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v43 = &v59;
        if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
        CALegacyLog::log(v42, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 293, "SetupDownlinkFarEndVoiceDNNVADGraph", "loading far end voice DNN VAD AU strip \"%s\"", (const char *)v43);
      }
      if (SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf[0].__pn_, v59.__pn_.__r_.__value_.__l.__data_, v59.__pn_.__r_.__value_.__l.__size_);
      else
        buf[0] = v59;
      applesauce::CF::make_DataRef((const char *)buf, (CFDataRef *)&cf);
      if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
      applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, (applesauce::CF::DictionaryRef *)buf);
      v44 = (const void *)*((_QWORD *)this + 2052);
      *((_QWORD *)this + 2052) = buf[0].__pn_.__r_.__value_.__r.__words[0];
      buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      if (v44)
        CFRelease(v44);
      if (cf.__r_.__value_.__r.__words[0])
        CFRelease(cf.__r_.__value_.__l.__data_);
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v34 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v35 = (*v34 ? *v34 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = &v59;
          if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v36 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 300;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v36;
          _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)buf, 0x1Cu);
        }
      }
      v37 = (int *)*((_QWORD *)this + 1570);
      if (v37 && (*v8 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v38 = &v59;
        if ((v59.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::__fs::filesystem::path *)v59.__pn_.__r_.__value_.__r.__words[0];
        CALegacyLog::log(v37, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 300, "SetupDownlinkFarEndVoiceDNNVADGraph", "file \"%s\" does not exist", (const char *)v38);
      }
    }
    if (*((char *)this + 31) < 0)
      v6 = *(char **)v6;
    buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v68, &buf[0].__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v67.__pn_, "Generic");
    std::__fs::filesystem::operator/[abi:ne180100](&v67, (uint64_t)&v68, (std::__fs::filesystem::path *)&cf);
    VoiceProcessorV2::GetVersionNameForTuning(&v65, (uint64_t)this);
    __replacement.__pn_ = v65;
    memset(&v65, 0, sizeof(v65));
    std::__fs::filesystem::operator/[abi:ne180100](&__replacement, (uint64_t)&cf, buf);
    memset(&__p, 0, sizeof(__p));
    std::string::append[abi:ne180100]<char const*,0>(&__p, "gen_far_end_voice_nnvad.propstrip", "");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)buf, &v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__status(&v58, 0);
    if (cf.__r_.__value_.__s.__data_[0] && cf.__r_.__value_.__s.__data_[0] != 255)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v50 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        v51 = (*v50 ? *v50 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          v52 = &v58;
          if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v52 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 314;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v52;
          _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> loading far end voice DNN VAD property strip \"%s\"", (uint8_t *)buf, 0x1Cu);
        }
      }
      v53 = (int *)*((_QWORD *)this + 1570);
      if (v53 && (*v8 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v54 = &v58;
        if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v54 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
        CALegacyLog::log(v53, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 314, "SetupDownlinkFarEndVoiceDNNVADGraph", "loading far end voice DNN VAD property strip \"%s\"", (const char *)v54);
      }
      if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf[0].__pn_, v58.__pn_.__r_.__value_.__l.__data_, v58.__pn_.__r_.__value_.__l.__size_);
      else
        buf[0] = v58;
      applesauce::CF::make_DataRef((const char *)buf, (CFDataRef *)&cf);
      if (SHIBYTE(buf[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__pn_.__r_.__value_.__l.__data_);
      applesauce::CF::make_DictionaryRef((CFDataRef *)&cf, (applesauce::CF::DictionaryRef *)buf);
      v55 = (const void *)*((_QWORD *)this + 2053);
      *((_QWORD *)this + 2053) = buf[0].__pn_.__r_.__value_.__r.__words[0];
      buf[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      if (v55)
        CFRelease(v55);
      if (cf.__r_.__value_.__r.__words[0])
        CFRelease(cf.__r_.__value_.__l.__data_);
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v45 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v46 = (*v45 ? *v45 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          v47 = &v58;
          if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v47 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpSetupDownlinkDSPChain.cpp";
          WORD2(buf[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 321;
          WORD1(buf[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v47;
          _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> file \"%s\" does not exist", (uint8_t *)buf, 0x1Cu);
        }
      }
      v48 = (int *)*((_QWORD *)this + 1570);
      if (v48 && (*v8 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v49 = &v58;
        if ((v58.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v49 = (std::__fs::filesystem::path *)v58.__pn_.__r_.__value_.__r.__words[0];
        CALegacyLog::log(v48, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 321, "SetupDownlinkFarEndVoiceDNNVADGraph", "file \"%s\" does not exist", (const char *)v49);
      }
    }
    if (*((_QWORD *)this + 2050) && *((_QWORD *)this + 2051) && *((_QWORD *)this + 2052) && *((_QWORD *)this + 2053))
      *((_QWORD *)this + 1104) |= 2uLL;
    if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = (const void *)*((_QWORD *)this + 2050);
    *((_QWORD *)this + 2050) = 0;
    if (v14)
      CFRelease(v14);
    v15 = (const void *)*((_QWORD *)this + 2051);
    *((_QWORD *)this + 2051) = 0;
    if (v15)
      CFRelease(v15);
    v16 = (const void *)*((_QWORD *)this + 2052);
    *((_QWORD *)this + 2052) = 0;
    if (v16)
      CFRelease(v16);
    v17 = (const void *)*((_QWORD *)this + 2053);
    *((_QWORD *)this + 2053) = 0;
    if (v17)
      CFRelease(v17);
  }
}

void sub_1B629D000(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,__int128 buf)
{
  uint64_t v41;
  _BYTE *v42;
  NSObject *v43;
  NSObject *v44;
  int *v45;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v43 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v43)
    {
      v44 = v43;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "vpSetupDownlinkDSPChain.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 326;
        _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to load far end voice DNN VAD property strip", (uint8_t *)&buf, 0x12u);
      }
    }
    v45 = *(int **)(v41 + 12560);
    if (v45 && (*v42 || v42[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v45, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDSPChains/vpSetupDownlinkDSPChain.cpp", 326, "SetupDownlinkFarEndVoiceDNNVADGraph", "failed to load far end voice DNN VAD property strip");
    }
    __cxa_end_catch();
    JUMPOUT(0x1B629CDDCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::PropertyChanged(AUSpatialMixerV2ChannelProcessor *this, int a2)
{
  int v3;
  const __CFDictionary *v4;
  const void *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef *p_cf;
  unsigned int v48;
  const void *v49;
  unsigned int v50;
  CFDictionaryRef CFDictionaryRef;
  CFTypeRef v52;
  CFDictionaryRef v53;
  uint64_t i;
  const void *v55;
  const void *v56;
  uint64_t v57;
  CFDictionaryRef v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  const void *v62;
  CFTypeRef v63;
  BOOL v64;
  CFTypeRef v65;
  BOOL v66;
  CFTypeRef v67;
  _QWORD v68[3];
  CFTypeRef v69;
  _QWORD v70[3];
  const __CFDictionary *v71;
  CFTypeRef cf;
  char v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88[2];
  CFTypeRef v89;
  CFDictionaryRef v90;
  CFDictionaryRef v91;
  char v92;
  _QWORD v93[6];
  CFTypeRef v94;
  CFTypeRef v95;
  CFTypeRef v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (a2 <= 3268)
  {
    if (a2 > 3199)
    {
      switch(a2)
      {
        case 3200:
        case 3201:
        case 3212:
        case 3213:
          if (!*((_QWORD *)this + 60) || *((_DWORD *)this + 118) != 7 || *((_DWORD *)this + 119) != 1)
            return 0;
          v3 = 1;
          goto LABEL_39;
        case 3202:
        case 3203:
          if (!*((_QWORD *)this + 60) || *((_DWORD *)this + 118) != 7 || *((_DWORD *)this + 119) != 2)
            return 0;
          v3 = 2;
LABEL_39:
          AUSpatialMixerV2ChannelProcessor::initializeSpatializer(this, 7, v3);
          return 0;
        case 3204:
        case 3205:
          goto LABEL_25;
        case 3210:
        case 3211:
          v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
          v92 = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 824);
          v9 = *((_QWORD *)this + 60);
          v10 = cf;
          if (cf)
            CFRetain(cf);
          v88[0] = v10;
          Spatializer::propertyDictionarySetValue(v9, CFSTR("HOASourceExtentIRCustomURL"), v88);
          if (v10)
          {
            CFRelease(v10);
            v11 = *((_QWORD *)this + 61);
            if (!v11)
              goto LABEL_102;
            CFRetain(v10);
          }
          else
          {
            v11 = *((_QWORD *)this + 61);
            if (!v11)
              goto LABEL_102;
          }
          v87 = v10;
          Spatializer::propertyDictionarySetValue(v11, CFSTR("HOASourceExtentIRCustomURL"), &v87);
          if (!v10)
          {
            v42 = *((_QWORD *)this + 62);
            if (!v42)
              goto LABEL_157;
            goto LABEL_142;
          }
          CFRelease(v10);
LABEL_102:
          v42 = *((_QWORD *)this + 62);
          if (!v42)
          {
            if (v10)
              goto LABEL_156;
            goto LABEL_157;
          }
          if (v10)
            CFRetain(v10);
LABEL_142:
          v86 = v10;
          Spatializer::propertyDictionarySetValue(v42, CFSTR("HOASourceExtentIRCustomURL"), &v86);
          if (!v10)
            goto LABEL_157;
          CFRelease(v10);
          goto LABEL_156;
        case 3214:
          v18 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 109) + 200));
          v19 = v18 & 1;
          v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
          v92 = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
          v20 = (unsigned __int8 *)this + 80;
          v21 = atomic_load((unsigned __int8 *)this + 80);
          if ((v21 & 1) == 0 && v19)
          {
            v22 = (unsigned __int8 *)this + 8;
            do
            {
              v23 = *(uint64_t **)v22;
              v24 = (uint64_t *)*((_QWORD *)v22 + 1);
              while (v23 != v24)
              {
                v25 = *v23;
                v26 = *(void **)(*v23 + 8);
                v27 = *(_QWORD *)(*v23 + 16) - (_QWORD)v26;
                if (v27 >= 1)
                  bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
                *(_DWORD *)(v25 + 56) = 0;
                ++v23;
              }
              v22 += 24;
            }
            while (v22 != v20);
          }
          atomic_store(v19, v20);
          goto LABEL_157;
        case 3217:
        case 3218:
          v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
          v92 = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1040);
          v12 = *((_QWORD *)this + 60);
          v10 = cf;
          if (cf)
            CFRetain(cf);
          v82 = v10;
          Spatializer::propertyDictionarySetValue(v12, CFSTR("BinauralSourceExtentIRCustomURL"), &v82);
          if (v10)
          {
            CFRelease(v10);
            v13 = *((_QWORD *)this + 61);
            if (!v13)
              goto LABEL_108;
            CFRetain(v10);
          }
          else
          {
            v13 = *((_QWORD *)this + 61);
            if (!v13)
              goto LABEL_108;
          }
          v81 = v10;
          Spatializer::propertyDictionarySetValue(v13, CFSTR("BinauralSourceExtentIRCustomURL"), &v81);
          if (!v10)
          {
            v43 = *((_QWORD *)this + 62);
            if (!v43)
              goto LABEL_157;
            goto LABEL_146;
          }
          CFRelease(v10);
LABEL_108:
          v43 = *((_QWORD *)this + 62);
          if (!v43)
          {
            if (v10)
              goto LABEL_156;
            goto LABEL_157;
          }
          if (v10)
            CFRetain(v10);
LABEL_146:
          v80 = v10;
          Spatializer::propertyDictionarySetValue(v43, CFSTR("BinauralSourceExtentIRCustomURL"), &v80);
          if (!v10)
            goto LABEL_157;
          CFRelease(v10);
          goto LABEL_156;
        case 3219:
          v28 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1184));
          *((_DWORD *)this + 214) = v28;
          return 0;
        case 3224:
          v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
          v92 = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
          v29 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 109) + 201));
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 60) + 160))(*((_QWORD *)this + 60), v29 & 1);
          v30 = *((_QWORD *)this + 61);
          if (v30)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 160))(v30, v29 & 1);
          v31 = *((_QWORD *)this + 62);
          if (v31)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 160))(v31, v29 & 1);
          goto LABEL_157;
        case 3228:
        case 3229:
          v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
          v92 = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1192);
          v14 = *((_QWORD *)this + 60);
          v10 = cf;
          if (cf)
            CFRetain(cf);
          v79 = v10;
          Spatializer::propertyDictionarySetValue(v14, CFSTR("XTCSourceExtentIRCustomURL"), &v79);
          if (v10)
          {
            CFRelease(v10);
            v15 = *((_QWORD *)this + 61);
            if (!v15)
              goto LABEL_114;
            CFRetain(v10);
          }
          else
          {
            v15 = *((_QWORD *)this + 61);
            if (!v15)
              goto LABEL_114;
          }
          v78 = v10;
          Spatializer::propertyDictionarySetValue(v15, CFSTR("XTCSourceExtentIRCustomURL"), &v78);
          if (!v10)
          {
            v44 = *((_QWORD *)this + 62);
            if (!v44)
              goto LABEL_157;
            goto LABEL_150;
          }
          CFRelease(v10);
LABEL_114:
          v44 = *((_QWORD *)this + 62);
          if (!v44)
          {
            if (v10)
              goto LABEL_156;
            goto LABEL_157;
          }
          if (v10)
            CFRetain(v10);
LABEL_150:
          v77 = v10;
          Spatializer::propertyDictionarySetValue(v44, CFSTR("XTCSourceExtentIRCustomURL"), &v77);
          if (!v10)
            goto LABEL_157;
          CFRelease(v10);
          break;
        default:
          return 0;
      }
      goto LABEL_156;
    }
    switch(a2)
    {
      case 3003:
        v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
        v92 = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
        v36 = atomic_load((unsigned int *)(*((_QWORD *)this + 109) + 76));
        *(_DWORD *)(*((_QWORD *)this + 60) + 24) = v36;
        v37 = *((_QWORD *)this + 61);
        if (v37)
          *(_DWORD *)(v37 + 24) = v36;
        v38 = *((_QWORD *)this + 62);
        if (v38)
          *(_DWORD *)(v38 + 24) = v36;
        goto LABEL_157;
      case 3108:
        v39 = atomic_load((unsigned __int8 *)this + 792);
        if ((v39 & 1) != 0 && fabsf(*((float *)this + 135)) > 0.00000011921)
        {
          v40 = COERCE_FLOAT(atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 164)));
          v41 = (float)((float)(v40 + v40) / *((float *)this + 135)) * 3.14159265;
          AUSpatialMixerV2ChannelProcessor::setLFERollOff(this, v41);
        }
        break;
      case 3109:
        v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
        v92 = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
        v6 = atomic_load((unsigned __int8 *)this + 840);
        if ((v6 & 1) != 0 && (v7 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 109) + 120)), (v7 & 1) != 0))
          AUSpatialMixerV2ChannelProcessor::initializePropagationDelay(this);
        else
          std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 106, 0);
        goto LABEL_157;
    }
    return 0;
  }
  if (a2 > 4599)
  {
    switch(a2)
    {
      case 4600:
        v32 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 92));
        atomic_store(v32 & 1, (unsigned __int8 *)this + 616);
        break;
      case 5003:
        v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
        v92 = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
        AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1272);
        v33 = *((_QWORD *)this + 60);
        v10 = cf;
        if (cf)
          CFRetain(cf);
        v76 = v10;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v33 + 216))(v33, &v76);
        if (v76)
          CFRelease(v76);
        v34 = *((_QWORD *)this + 61);
        if (v34)
        {
          if (v10)
            CFRetain(v10);
          v75 = v10;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v34 + 216))(v34, &v75);
          if (v75)
            CFRelease(v75);
        }
        v35 = *((_QWORD *)this + 62);
        if (v35)
        {
          if (v10)
            CFRetain(v10);
          v74 = v10;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v35 + 216))(v35, &v74);
          if (v74)
            CFRelease(v74);
        }
        if (!v10)
          goto LABEL_157;
        goto LABEL_156;
      case 5684:
        atomic_store(1u, (unsigned __int8 *)this + 768);
        break;
    }
    return 0;
  }
  if ((a2 - 3274) < 2)
  {
    v91 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 772);
    v92 = 1;
    caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 896);
    v16 = *((_QWORD *)this + 60);
    v10 = cf;
    if (cf)
      CFRetain(cf);
    v85 = v10;
    Spatializer::propertyDictionarySetValue(v16, CFSTR("HOANFCIRCustomURL"), &v85);
    if (v10)
    {
      CFRelease(v10);
      v17 = *((_QWORD *)this + 61);
      if (!v17)
        goto LABEL_120;
      CFRetain(v10);
    }
    else
    {
      v17 = *((_QWORD *)this + 61);
      if (!v17)
        goto LABEL_120;
    }
    v84 = v10;
    Spatializer::propertyDictionarySetValue(v17, CFSTR("HOANFCIRCustomURL"), &v84);
    if (!v10)
    {
      v45 = *((_QWORD *)this + 62);
      if (!v45)
        goto LABEL_157;
      goto LABEL_154;
    }
    CFRelease(v10);
LABEL_120:
    v45 = *((_QWORD *)this + 62);
    if (!v45)
    {
      if (!v10)
        goto LABEL_157;
      goto LABEL_156;
    }
    if (v10)
      CFRetain(v10);
LABEL_154:
    v83 = v10;
    Spatializer::propertyDictionarySetValue(v45, CFSTR("HOANFCIRCustomURL"), &v83);
    if (v10)
    {
      CFRelease(v10);
LABEL_156:
      CFRelease(v10);
    }
LABEL_157:
    p_cf = (CFTypeRef *)&v91;
LABEL_158:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)p_cf);
    return 0;
  }
  if (a2 == 3269)
  {
LABEL_25:
    if (!*((_QWORD *)this + 17))
      return 0;
    AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&cf, *((_QWORD *)this + 109) + 128);
    v8 = cf;
    if (cf)
    {
      CFRetain(cf);
      v88[1] = v8;
      IR::IRDataAttributes::IRDataAttributes((uint64_t)&v91, v8, 128, 1, *((float *)this + 135));
      CFRelease(v8);
      IR::DynamicIRProcessor::setIRDataAttributes(*((IR::DynamicIRProcessor **)this + 17), (const IR::IRDataAttributes *)&v91);
      if (v96)
        CFRelease(v96);
      if (v95)
        CFRelease(v95);
      if (v94)
        CFRelease(v94);
      if (v91)
        CFRelease(v91);
    }
    else
    {
      atomic_load((unsigned int *)(*((_QWORD *)this + 109) + 220));
      IR::getPresetDataAttributes();
      IR::DynamicIRProcessor::setIRDataAttributes(*((IR::DynamicIRProcessor **)this + 17), (const IR::IRDataAttributes *)&v91);
      if (v96)
        CFRelease(v96);
      if (v95)
        CFRelease(v95);
      if (v94)
        CFRelease(v94);
      if (v91)
        CFRelease(v91);
      v8 = cf;
      if (!cf)
        return 0;
    }
    CFRelease(v8);
    return 0;
  }
  if (a2 == 3279)
  {
    cf = (char *)this + 772;
    v73 = 1;
    caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v71, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2056);
    v4 = v71;
    if (v71)
    {
      CFRetain(CFSTR("OptionalFeatureSupport"));
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v69, CFSTR("OptionalFeatureSupport"));
      v5 = (const void *)kOptionalFeatureSourceExtent;
      if (kOptionalFeatureSourceExtent)
      {
        CFRetain((CFTypeRef)kOptionalFeatureSourceExtent);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v67, v5);
      }
      else
      {
        v67 = 0;
      }
      v48 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v4, (const void *)kOptionalFeatureSourceExtent);
      if (v48 <= 0x100)
        LOBYTE(v48) = 0;
      v66 = v48 != 0;
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,BOOL>(&v91, v67, &v66);
      v49 = (const void *)kOptionalFeatureNearFieldHOA;
      if (kOptionalFeatureNearFieldHOA)
      {
        CFRetain((CFTypeRef)kOptionalFeatureNearFieldHOA);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v65, v49);
      }
      else
      {
        v65 = 0;
      }
      v50 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v4, (const void *)kOptionalFeatureNearFieldHOA);
      if (v50 <= 0x100)
        LOBYTE(v50) = 0;
      v64 = v50 != 0;
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,BOOL>(v93, v65, &v64);
      v68[0] = &v91;
      v68[1] = 2;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v68);
      v68[2] = CFDictionaryRef;
      v52 = v69;
      if (v69)
        CFRetain(v69);
      v89 = v52;
      if (CFDictionaryRef)
        CFRetain(CFDictionaryRef);
      v90 = CFDictionaryRef;
      v70[0] = &v89;
      v70[1] = 1;
      v53 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v70);
      v70[2] = v53;
      if (v90)
        CFRelease(v90);
      if (v89)
        CFRelease(v89);
      if (CFDictionaryRef)
        CFRelease(CFDictionaryRef);
      for (i = 0; i != -4; i -= 2)
      {
        v55 = (const void *)v93[i + 1];
        if (v55)
          CFRelease(v55);
        v56 = (const void *)v93[i];
        if (v56)
          CFRelease(v56);
      }
      if (v65)
        CFRelease(v65);
      if (v67)
        CFRelease(v67);
      if (v69)
        CFRelease(v69);
      if (v53)
      {
        CFRetain(v53);
        v91 = v53;
        v57 = *((_QWORD *)this + 60);
        CFRetain(v53);
        v58 = v53;
      }
      else
      {
        v58 = 0;
        v91 = 0;
        v57 = *((_QWORD *)this + 60);
      }
      v63 = v53;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v57 + 232))(v57, &v63);
      if (v63)
        CFRelease(v63);
      v59 = *((_QWORD *)this + 61);
      if (v59)
      {
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v62, v58);
        (*(void (**)(uint64_t, const void **))(*(_QWORD *)v59 + 232))(v59, &v62);
        applesauce::CF::DictionaryRef::~DictionaryRef(&v62);
      }
      v60 = *((_QWORD *)this + 62);
      if (v60)
      {
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v61, v58);
        (*(void (**)(uint64_t, const void **))(*(_QWORD *)v60 + 232))(v60, &v61);
        applesauce::CF::DictionaryRef::~DictionaryRef(&v61);
      }
      if (v58)
        CFRelease(v58);
      if (v53)
        CFRelease(v53);
      CFRelease(v4);
    }
    p_cf = &cf;
    goto LABEL_158;
  }
  return 0;
}

void sub_1B629E19C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 224);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::PropertyObserverIsInitialized(AUSpatialMixerV2ChannelProcessor *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 840);
  return v1 & 1;
}

uint64_t AUSpatialMixerV2ChannelProcessor::setLFERollOff(AUSpatialMixerV2ChannelProcessor *this, float a2)
{
  unsigned __int8 v3;
  vDSP_biquad_Setup Setup;
  __double2 v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  float64x2_t v10;
  float64x2_t v11;
  __int128 v12;
  uint64_t v13;
  int v15;
  __int128 __Coefficients;
  float64_t v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)this + 792);
  if ((v3 & 1) != 0)
  {
    if (a2 <= 0.0)
    {
      v12 = xmmword_1B66271B0;
      v9 = 0uLL;
      v11.f64[0] = 0.0;
    }
    else
    {
      v5 = __sincos_stret(fmin(a2, 3.11017673));
      v6 = __exp10(0.0);
      v7 = 1.0 / (v5.__sinval * 0.707106781 + 1.0);
      v8 = v7 * v6;
      *(double *)&v9 = v5.__cosval * -2.0 * v7;
      *((double *)&v9 + 1) = v7 - v5.__sinval * 0.707106781 * v7;
      v10.f64[0] = 0.5 - v5.__cosval * 0.5;
      v10.f64[1] = v10.f64[0] + v10.f64[0];
      v11 = vmulq_n_f64(v10, v8);
      v12 = (__int128)v11;
    }
    __Coefficients = v12;
    v17 = v11.f64[0];
    v18 = v9;
    Setup = vDSP_biquad_CreateSetup((const double *)&__Coefficients, 1uLL);
  }
  else
  {
    Setup = 0;
  }
  *(_QWORD *)&__Coefficients = (char *)this + 772;
  BYTE8(__Coefficients) = 1;
  caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
  v15 = 0;
  std::vector<float>::resize((uint64_t)this + 816, 4uLL, &v15);
  v13 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = Setup;
  if (v13)
    (*((void (**)(void))this + 101))();
  *((_QWORD *)this + 101) = MEMORY[0x1E0C8BFE0];
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__Coefficients);
}

void sub_1B629E61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2ChannelProcessor::initializeSpatializer(AUSpatialMixerV2ChannelProcessor *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  void *v16;
  CFTypeRef v17;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  const AudioChannelLayout *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  const AudioChannelLayout *v29;
  const AudioChannelLayout *v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  unsigned __int8 v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  CFTypeRef v38;
  const void *v39;
  const __CFDictionary *v40;
  AudioChannelLayout *v41;
  CFTypeRef v42;
  CFTypeRef v43;
  AudioChannelLayout *v44;
  AudioChannelLayout *v45;
  CFTypeRef v46;
  CFTypeRef v47;
  CFTypeRef v48;
  CFTypeRef v49;
  NSObject *v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  void *v56;
  _QWORD *v57;
  CFTypeRef v58;
  CFTypeRef v59;
  _QWORD *v60;
  _QWORD *v61;
  CFTypeRef v62;
  CFTypeRef v63;
  CFTypeRef v64;
  uint64_t v65;
  CFTypeRef v66;
  CFTypeRef v67;
  uint64_t v68;
  uint64_t v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  IR::DynamicIRProcessor *v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef v78;
  CFTypeRef v79;
  const AudioChannelLayout *v80;
  CFTypeRef v81;
  CFTypeRef v82;
  const AudioChannelLayout *v83;
  const AudioChannelLayout *v84;
  CFTypeRef v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  void *v89;
  IR::IRDataLoader *v90;
  unsigned __int8 v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  const void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  IR::IRDataLoader *v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  int v110;
  int v111;
  BOOL v112;
  uint64_t v113;
  CFTypeRef v114;
  const void *v115;
  const __CFDictionary *v116;
  NSObject *v117;
  int v118;
  NSObject *v119;
  AudioChannelLayout *v120;
  CFTypeRef v121;
  CFTypeRef v122;
  AudioChannelLayout *v123;
  AudioChannelLayout *v124;
  CFTypeRef v125;
  CFTypeRef v126;
  CFTypeRef v127;
  CFTypeRef v128;
  void *v129;
  IR::IRDataLoader *v130;
  unsigned __int8 v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  _BYTE *v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  IR::DynamicIRProcessor *v142;
  uint64_t *v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t *v148;
  unsigned int v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t *v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  CFDictionaryRef CFDictionaryRef;
  CFDictionaryRef v162;
  uint64_t i;
  const void *v164;
  const void *v165;
  char v166;
  unsigned int v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  CFTypeRef v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  CFTypeRef *v180;
  uint64_t v181;
  char v182;
  const void *v183;
  const void *v184;
  unsigned int v185;
  unsigned __int8 v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unsigned __int8 v192;
  char v193;
  unsigned __int8 v194;
  unint64_t *p_shared_owners;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  unsigned __int8 v205;
  char v206;
  unsigned __int8 v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  IR::IRDataLoader *v214;
  IR::IRDataLoader *v215;
  int OriginalAudioChannelLayoutTag;
  IR::IRDataLoader *v217;
  IR::IRDataLoader *v218;
  int v219;
  _BOOL4 IsSupportedHOA;
  const void *v221;
  unsigned __int8 v222;
  NSObject *v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unsigned __int8 v230;
  char v231;
  unsigned __int8 v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  const IR::IRDataAttributes *v250;
  uint64_t v251;
  IR::IRDataAttributes *v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  BOOL v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  void *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  int32x4_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  CFTypeRef v273;
  CFTypeRef v274;
  CFTypeRef v275;
  CFTypeRef v276;
  CFTypeRef v277;
  CFTypeRef v278;
  const void *v279;
  const void *v280;
  const void *v281;
  const void *v282;
  const void *v283;
  const void *v284;
  CFTypeRef v285;
  CFTypeRef v286;
  CFTypeRef v287;
  CFTypeRef v288;
  CFTypeRef v289;
  CFTypeRef v290;
  CFTypeRef v291;
  CFTypeRef v292;
  CFTypeRef v293;
  CFTypeRef v294;
  CFTypeRef v295;
  CFTypeRef v296;
  CFTypeRef v297;
  CFTypeRef v298;
  CFTypeRef v299;
  CFTypeRef v300;
  CFTypeRef v301;
  CFTypeRef v302;
  const void *v303;
  const void *v304;
  const void *v305;
  const void *v306;
  const void *v307;
  const void *v308;
  const void *v309;
  const void *v310;
  const void *v311;
  const void *v312;
  const void *v313;
  const void *v314;
  const void *v315;
  const void *v316;
  const void *v317;
  CFTypeRef v318;
  CFTypeRef v319[2];
  uint64_t v320;
  CFTypeRef v321[2];
  const void *v322;
  const void *v323;
  const void *v324;
  const void *v325;
  const void *v326;
  const void *v327;
  const void *v328;
  const void *v329;
  const void *v330;
  CFTypeRef v331;
  const void *v332;
  const void *v333;
  const void *v334;
  const void *v335;
  const void *v336;
  const void *v337;
  const void *v338;
  CFTypeRef v339;
  const void *v340;
  CFTypeRef v341;
  const void *v342;
  CFTypeRef v343;
  CFTypeRef v344;
  CFTypeRef v345;
  CFTypeRef v346;
  CFTypeRef v347;
  char v348;
  CFTypeRef v349;
  CFTypeRef v350;
  CFTypeRef v351;
  CFTypeRef v352;
  CFTypeRef v353;
  CFTypeRef v354;
  CFTypeRef v355;
  CFTypeRef v356;
  CFTypeRef v357;
  CFTypeRef v358;
  CFTypeRef v359;
  CFTypeRef v360;
  CFTypeRef v361;
  CFTypeRef v362;
  CFTypeRef v363;
  CFTypeRef v364;
  CFTypeRef v365;
  CFTypeRef v366;
  CFTypeRef v367;
  CFTypeRef v368;
  CFTypeRef v369;
  CFTypeRef v370;
  CFTypeRef v371;
  CFTypeRef v372;
  CFTypeRef v373;
  CFTypeRef v374;
  CFTypeRef v375;
  CFTypeRef v376;
  CFTypeRef v377;
  CFTypeRef v378;
  CFTypeRef v379;
  CFTypeRef v380;
  CFTypeRef v381;
  CFTypeRef v382;
  CFTypeRef v383;
  CFTypeRef v384;
  CFTypeRef v385;
  CFTypeRef cf;
  _BYTE v387[22];
  _BYTE v388[24];
  __int128 v389;
  __int128 v390;
  BOOL v391;
  CFTypeRef v392;
  __int128 v393;
  CFTypeRef v394;
  _BYTE v395[25];
  CFTypeRef v396;
  uint64_t v397;
  int v398;
  _BYTE buf[24];
  __int128 v400;
  __int128 v401;
  BOOL v402;
  CFTypeRef v403;
  __int128 v404;
  void *v405;
  _BYTE v406[32];
  CFDictionaryRef v407;
  uint64_t v408;
  int v409;
  uint64_t v410;

  v410 = *MEMORY[0x1E0C80C00];
  (*(void (**)(CFTypeRef *__return_ptr))(**((_QWORD **)this + 60) + 208))(&cf);
  (*(void (**)(CFTypeRef *__return_ptr))(**((_QWORD **)this + 60) + 224))(&v385);
  switch(a2)
  {
    case 0:
      v6 = operator new();
      Spatializer::Spatializer((Spatializer *)v6);
      *(_QWORD *)v7 = &off_1E69ED2E0;
      *(int32x4_t *)(v7 + 332) = vdupq_n_s32(0x3F3504F3u);
      *(_DWORD *)(v7 + 348) = 0;
      v8 = cf;
      if (cf)
      {
        CFRetain(cf);
        v372 = v8;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v372);
        if (v372)
          CFRelease(v372);
      }
      v9 = v385;
      if (v385)
      {
        CFRetain(v385);
        v371 = v9;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v371);
        if (v371)
          CFRelease(v371);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 121) + 456))
        goto LABEL_158;
      v10 = operator new();
      Spatializer::Spatializer((Spatializer *)v10);
      *(_QWORD *)v11 = &off_1E69ED2E0;
      v269 = vdupq_n_s32(0x3F3504F3u);
      *(int32x4_t *)(v11 + 332) = v269;
      *(_DWORD *)(v11 + 348) = 0;
      v12 = operator new();
      Spatializer::Spatializer((Spatializer *)v12);
      *(_QWORD *)v13 = &off_1E69ED2E0;
      *(int32x4_t *)(v13 + 332) = v269;
      *(_DWORD *)(v13 + 348) = 0;
      v14 = cf;
      if (cf)
      {
        CFRetain(cf);
        v370 = v14;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v370);
        if (v370)
          CFRelease(v370);
        v15 = cf;
        if (cf)
          CFRetain(cf);
        v369 = v15;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v369);
        if (v369)
          CFRelease(v369);
      }
      v16 = (void *)v385;
      if (!v385)
        goto LABEL_159;
      CFRetain(v385);
      v368 = v16;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v368);
      if (v368)
        CFRelease(v368);
      v17 = v385;
      if (v385)
        CFRetain(v385);
      v367 = v17;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v367);
      if (v367)
        CFRelease(v367);
      goto LABEL_233;
    case 1:
      v6 = operator new();
      *(_OWORD *)(v6 + 320) = 0u;
      *(_OWORD *)(v6 + 336) = 0u;
      *(_OWORD *)(v6 + 288) = 0u;
      *(_OWORD *)(v6 + 304) = 0u;
      *(_OWORD *)(v6 + 256) = 0u;
      *(_OWORD *)(v6 + 272) = 0u;
      *(_OWORD *)(v6 + 224) = 0u;
      *(_OWORD *)(v6 + 240) = 0u;
      *(_OWORD *)(v6 + 192) = 0u;
      *(_OWORD *)(v6 + 208) = 0u;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      Spatializer::Spatializer((Spatializer *)v6);
      *v57 = &off_1E69DF848;
      *(_QWORD *)((char *)v57 + 332) = 1065353216;
      v57[43] = 0;
      v58 = cf;
      if (cf)
      {
        CFRetain(cf);
        v384 = v58;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v384);
        if (v384)
          CFRelease(v384);
      }
      v59 = v385;
      if (v385)
      {
        CFRetain(v385);
        v383 = v59;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v383);
        if (v383)
          CFRelease(v383);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 121) + 456))
        goto LABEL_158;
      v10 = operator new();
      *(_OWORD *)(v10 + 320) = 0u;
      *(_OWORD *)(v10 + 336) = 0u;
      *(_OWORD *)(v10 + 288) = 0u;
      *(_OWORD *)(v10 + 304) = 0u;
      *(_OWORD *)(v10 + 256) = 0u;
      *(_OWORD *)(v10 + 272) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 240) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 160) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_OWORD *)(v10 + 96) = 0u;
      *(_OWORD *)(v10 + 112) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 80) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      Spatializer::Spatializer((Spatializer *)v10);
      *v60 = &off_1E69DF848;
      *(_QWORD *)((char *)v60 + 332) = 1065353216;
      v60[43] = 0;
      v12 = operator new();
      *(_OWORD *)(v12 + 320) = 0u;
      *(_OWORD *)(v12 + 336) = 0u;
      *(_OWORD *)(v12 + 288) = 0u;
      *(_OWORD *)(v12 + 304) = 0u;
      *(_OWORD *)(v12 + 256) = 0u;
      *(_OWORD *)(v12 + 272) = 0u;
      *(_OWORD *)(v12 + 224) = 0u;
      *(_OWORD *)(v12 + 240) = 0u;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 208) = 0u;
      *(_OWORD *)(v12 + 160) = 0u;
      *(_OWORD *)(v12 + 176) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_OWORD *)(v12 + 144) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      Spatializer::Spatializer((Spatializer *)v12);
      *v61 = &off_1E69DF848;
      *(_QWORD *)((char *)v61 + 332) = 1065353216;
      v61[43] = 0;
      v62 = cf;
      if (cf)
      {
        CFRetain(cf);
        v382 = v62;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v382);
        if (v382)
          CFRelease(v382);
        v63 = cf;
        if (cf)
          CFRetain(cf);
        v381 = v63;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v381);
        if (v381)
          CFRelease(v381);
      }
      v16 = (void *)v385;
      if (!v385)
        goto LABEL_159;
      CFRetain(v385);
      v380 = v16;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v380);
      if (v380)
        CFRelease(v380);
      v64 = v385;
      if (v385)
        CFRetain(v385);
      v379 = v64;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v379);
      if (v379)
        CFRelease(v379);
      goto LABEL_233;
    case 2:
      v6 = operator new();
      *(_OWORD *)(v6 + 304) = 0u;
      *(_OWORD *)(v6 + 320) = 0u;
      *(_OWORD *)(v6 + 272) = 0u;
      *(_OWORD *)(v6 + 288) = 0u;
      *(_OWORD *)(v6 + 240) = 0u;
      *(_OWORD *)(v6 + 256) = 0u;
      *(_OWORD *)(v6 + 208) = 0u;
      *(_OWORD *)(v6 + 224) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_OWORD *)(v6 + 192) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)v6 = 0u;
      Spatializer::Spatializer((Spatializer *)v6);
      *(_QWORD *)v18 = &off_1E69E92B8;
      *(_OWORD *)(v18 + 336) = 0u;
      *(_OWORD *)(v18 + 352) = 0u;
      v19 = cf;
      if (cf)
      {
        CFRetain(cf);
        v360 = v19;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v360);
        if (v360)
          CFRelease(v360);
      }
      v20 = v385;
      if (v385)
      {
        CFRetain(v385);
        v359 = v20;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v359);
        if (v359)
          CFRelease(v359);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 121) + 456))
        goto LABEL_158;
      v10 = operator new();
      *(_OWORD *)(v10 + 304) = 0u;
      *(_OWORD *)(v10 + 320) = 0u;
      *(_OWORD *)(v10 + 272) = 0u;
      *(_OWORD *)(v10 + 288) = 0u;
      *(_OWORD *)(v10 + 240) = 0u;
      *(_OWORD *)(v10 + 256) = 0u;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_OWORD *)(v10 + 160) = 0u;
      *(_OWORD *)(v10 + 112) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      *(_OWORD *)(v10 + 80) = 0u;
      *(_OWORD *)(v10 + 96) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
      Spatializer::Spatializer((Spatializer *)v10);
      *(_QWORD *)v21 = &off_1E69E92B8;
      *(_OWORD *)(v21 + 336) = 0u;
      *(_OWORD *)(v21 + 352) = 0u;
      v12 = operator new();
      *(_OWORD *)(v12 + 304) = 0u;
      *(_OWORD *)(v12 + 320) = 0u;
      *(_OWORD *)(v12 + 272) = 0u;
      *(_OWORD *)(v12 + 288) = 0u;
      *(_OWORD *)(v12 + 240) = 0u;
      *(_OWORD *)(v12 + 256) = 0u;
      *(_OWORD *)(v12 + 208) = 0u;
      *(_OWORD *)(v12 + 224) = 0u;
      *(_OWORD *)(v12 + 176) = 0u;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 144) = 0u;
      *(_OWORD *)(v12 + 160) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)v12 = 0u;
      Spatializer::Spatializer((Spatializer *)v12);
      *(_QWORD *)v22 = &off_1E69E92B8;
      *(_OWORD *)(v22 + 336) = 0u;
      *(_OWORD *)(v22 + 352) = 0u;
      v23 = cf;
      if (cf)
      {
        CFRetain(cf);
        v358 = v23;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v358);
        if (v358)
          CFRelease(v358);
        v24 = cf;
        if (cf)
          CFRetain(cf);
        v357 = v24;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v357);
        if (v357)
          CFRelease(v357);
      }
      v16 = (void *)v385;
      if (!v385)
        goto LABEL_159;
      CFRetain(v385);
      v356 = v16;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v356);
      if (v356)
        CFRelease(v356);
      v25 = v385;
      if (v385)
        CFRetain(v385);
      v355 = v25;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v355);
      if (v355)
        CFRelease(v355);
      goto LABEL_233;
    case 3:
      v26 = (const AudioChannelLayout *)*((_QWORD *)this + 64);
      v6 = operator new();
      SoundFieldSpatializer::SoundFieldSpatializer((SoundFieldSpatializer *)v6, v26);
      v27 = cf;
      if (cf)
      {
        CFRetain(cf);
        v378 = v27;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v378);
        if (v378)
          CFRelease(v378);
      }
      v28 = v385;
      if (v385)
      {
        CFRetain(v385);
        v377 = v28;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v377);
        if (v377)
          CFRelease(v377);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 121) + 456))
        goto LABEL_158;
      v29 = (const AudioChannelLayout *)*((_QWORD *)this + 64);
      v10 = operator new();
      SoundFieldSpatializer::SoundFieldSpatializer((SoundFieldSpatializer *)v10, v29);
      v30 = (const AudioChannelLayout *)*((_QWORD *)this + 64);
      v12 = operator new();
      SoundFieldSpatializer::SoundFieldSpatializer((SoundFieldSpatializer *)v12, v30);
      v31 = cf;
      if (cf)
      {
        CFRetain(cf);
        v376 = v31;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v376);
        if (v376)
          CFRelease(v376);
        v32 = cf;
        if (cf)
          CFRetain(cf);
        v375 = v32;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v375);
        if (v375)
          CFRelease(v375);
      }
      v16 = (void *)v385;
      if (!v385)
        goto LABEL_159;
      CFRetain(v385);
      v374 = v16;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v374);
      if (v374)
        CFRelease(v374);
      v33 = v385;
      if (v385)
        CFRetain(v385);
      v373 = v33;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v373);
      if (v373)
        CFRelease(v373);
      goto LABEL_233;
    case 4:
      goto LABEL_247;
    case 5:
      v6 = operator new();
      *(_OWORD *)(v6 + 304) = 0u;
      *(_OWORD *)(v6 + 320) = 0u;
      *(_OWORD *)(v6 + 272) = 0u;
      *(_OWORD *)(v6 + 288) = 0u;
      *(_OWORD *)(v6 + 240) = 0u;
      *(_OWORD *)(v6 + 256) = 0u;
      *(_OWORD *)(v6 + 208) = 0u;
      *(_OWORD *)(v6 + 224) = 0u;
      *(_OWORD *)(v6 + 176) = 0u;
      *(_OWORD *)(v6 + 192) = 0u;
      *(_OWORD *)(v6 + 144) = 0u;
      *(_OWORD *)(v6 + 160) = 0u;
      *(_OWORD *)(v6 + 112) = 0u;
      *(_OWORD *)(v6 + 128) = 0u;
      *(_OWORD *)(v6 + 80) = 0u;
      *(_OWORD *)(v6 + 96) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)v6 = 0u;
      Spatializer::Spatializer((Spatializer *)v6);
      *(_QWORD *)v65 = &off_1E69D1820;
      *(_QWORD *)(v65 + 340) = 0;
      *(_QWORD *)(v65 + 348) = 0;
      *(_QWORD *)(v65 + 332) = 0;
      *(_DWORD *)(v65 + 356) = 0;
      v66 = cf;
      if (cf)
      {
        CFRetain(cf);
        v366 = v66;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v366);
        if (v366)
          CFRelease(v366);
      }
      v67 = v385;
      if (v385)
      {
        CFRetain(v385);
        v365 = v67;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v365);
        if (v365)
          CFRelease(v365);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
LABEL_158:
        v56 = 0;
        v16 = 0;
        v73 = 0;
        v12 = 0;
        v10 = 0;
        goto LABEL_275;
      }
      v10 = operator new();
      *(_OWORD *)(v10 + 304) = 0u;
      *(_OWORD *)(v10 + 320) = 0u;
      *(_OWORD *)(v10 + 272) = 0u;
      *(_OWORD *)(v10 + 288) = 0u;
      *(_OWORD *)(v10 + 240) = 0u;
      *(_OWORD *)(v10 + 256) = 0u;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 144) = 0u;
      *(_OWORD *)(v10 + 160) = 0u;
      *(_OWORD *)(v10 + 112) = 0u;
      *(_OWORD *)(v10 + 128) = 0u;
      *(_OWORD *)(v10 + 80) = 0u;
      *(_OWORD *)(v10 + 96) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
      Spatializer::Spatializer((Spatializer *)v10);
      *(_QWORD *)v68 = &off_1E69D1820;
      *(_QWORD *)(v68 + 340) = 0;
      *(_QWORD *)(v68 + 348) = 0;
      *(_QWORD *)(v68 + 332) = 0;
      *(_DWORD *)(v68 + 356) = 0;
      v12 = operator new();
      *(_OWORD *)(v12 + 304) = 0u;
      *(_OWORD *)(v12 + 320) = 0u;
      *(_OWORD *)(v12 + 272) = 0u;
      *(_OWORD *)(v12 + 288) = 0u;
      *(_OWORD *)(v12 + 240) = 0u;
      *(_OWORD *)(v12 + 256) = 0u;
      *(_OWORD *)(v12 + 208) = 0u;
      *(_OWORD *)(v12 + 224) = 0u;
      *(_OWORD *)(v12 + 176) = 0u;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 144) = 0u;
      *(_OWORD *)(v12 + 160) = 0u;
      *(_OWORD *)(v12 + 112) = 0u;
      *(_OWORD *)(v12 + 128) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)v12 = 0u;
      Spatializer::Spatializer((Spatializer *)v12);
      *(_QWORD *)v69 = &off_1E69D1820;
      *(_QWORD *)(v69 + 340) = 0;
      *(_QWORD *)(v69 + 348) = 0;
      *(_QWORD *)(v69 + 332) = 0;
      *(_DWORD *)(v69 + 356) = 0;
      v70 = cf;
      if (cf)
      {
        CFRetain(cf);
        v364 = v70;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v364);
        if (v364)
          CFRelease(v364);
        v71 = cf;
        if (cf)
          CFRetain(cf);
        v363 = v71;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v363);
        if (v363)
          CFRelease(v363);
      }
      v16 = (void *)v385;
      if (!v385)
      {
LABEL_159:
        v56 = 0;
        goto LABEL_274;
      }
      CFRetain(v385);
      v362 = v16;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v362);
      if (v362)
        CFRelease(v362);
      v72 = v385;
      if (v385)
        CFRetain(v385);
      v361 = v72;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v361);
      if (v361)
        CFRelease(v361);
LABEL_233:
      v56 = 0;
      goto LABEL_273;
    case 6:
      IR::getPresetDataAttributes();
      v6 = operator new();
      IRSpatializer::IRSpatializer((IRSpatializer *)v6, (const IR::IRDataAttributes *)buf);
      v74 = cf;
      if (cf)
      {
        CFRetain(cf);
        v354 = v74;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v354);
        if (v354)
          CFRelease(v354);
      }
      v75 = v385;
      if (v385)
      {
        CFRetain(v385);
        v353 = v75;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v353);
        if (v353)
          CFRelease(v353);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
        v10 = operator new();
        IRSpatializer::IRSpatializer((IRSpatializer *)v10, (const IR::IRDataAttributes *)buf);
        v12 = operator new();
        IRSpatializer::IRSpatializer((IRSpatializer *)v12, (const IR::IRDataAttributes *)buf);
        v76 = cf;
        if (cf)
        {
          CFRetain(cf);
          v352 = v76;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v352);
          if (v352)
            CFRelease(v352);
          v77 = cf;
          if (cf)
            CFRetain(cf);
          v351 = v77;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v351);
          if (v351)
            CFRelease(v351);
        }
        v78 = v385;
        if (v385)
        {
          CFRetain(v385);
          v350 = v78;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v350);
          if (v350)
            CFRelease(v350);
          v79 = v385;
          if (v385)
            CFRetain(v385);
          v349 = v79;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v349);
          if (v349)
            CFRelease(v349);
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
      if (v407)
        CFRelease(v407);
      if (v405)
        CFRelease(v405);
      if (v403)
        CFRelease(v403);
      if (*(_QWORD *)buf)
        CFRelease(*(CFTypeRef *)buf);
      goto LABEL_233;
    case 7:
      switch(a3)
      {
        case 3:
          goto LABEL_247;
        case 2:
          if (AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 109) + 232)))
          {
            *(_QWORD *)v387 = (char *)this + 776;
            v387[8] = 1;
            caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 776));
            v109 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 160));
            AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v347, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1192);
            AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(v321, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 320);
            v110 = a3;
            IR::getPresetDataAttributes();
            v111 = v109 & 1;
            v112 = !(v109 & 1);
            if (v321[0])
            {
              applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v318, v321[0]);
              IR::IRDataAttributes::IRDataAttributes((uint64_t)v388, v318, 128, v111 == 0, *((float *)this + 135));
              v113 = *(_QWORD *)buf;
              *(_QWORD *)buf = *(_QWORD *)v388;
              v402 = v391;
              v114 = v392;
              *(_QWORD *)v388 = v113;
              v392 = v403;
              v115 = v405;
              v403 = v114;
              v405 = (void *)v394;
              *(_OWORD *)&buf[8] = *(_OWORD *)&v388[8];
              v400 = v389;
              v401 = v390;
              v404 = v393;
              *(_OWORD *)&v406[9] = *(_OWORD *)&v395[9];
              *(_OWORD *)v406 = *(_OWORD *)v395;
              v116 = (const __CFDictionary *)v396;
              v394 = v115;
              v396 = v407;
              v409 = v398;
              v407 = v116;
              v408 = v397;
              IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)v388);
              applesauce::CF::URLRef::~URLRef(&v318);
            }
            else
            {
              buf[16] = !(v109 & 1);
              if ((v109 & 1) != 0)
                *(_DWORD *)&buf[12] = 128;
            }
            v406[24] = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 109) + 232), (CFTypeRef)kOptionalFeatureSourceExtent);
            if (*(_BYTE *)(*((_QWORD *)this + 114) + 40))
            {
              buf[17] = 1;
              std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>((uint64_t *)v388, (int *)this + 221, (uint64_t)buf, (uint64_t *)this + 114, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 162), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
              v6 = *(_QWORD *)v388;
              if (cf)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v317, cf);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 216))(v6, &v317);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v317);
              }
              if (v385)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v316, v385);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 232))(v6, &v316);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v316);
              }
              if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
              {
                std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>((uint64_t *)v388, (int *)this + 221, (uint64_t)buf, (uint64_t *)this + 114, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 162), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
                v264 = *(_QWORD *)v388;
                std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>((uint64_t *)v388, (int *)this + 221, (uint64_t)buf, (uint64_t *)this + 114, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 162), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
                v272 = *(_QWORD *)v388;
                if (cf)
                {
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v315, cf);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v264 + 216))(v264, &v315);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v315);
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v314, cf);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v272 + 216))(v272, &v314);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v314);
                }
                if (v385)
                {
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v313, v385);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v264 + 232))(v264, &v313);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v313);
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v312, v385);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v272 + 232))(v272, &v312);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v312);
                }
              }
              else
              {
                v272 = 0;
                v264 = 0;
              }
            }
            else
            {
              std::make_unique[abi:ne180100]<HRTFXTCSpatializer,IR::IRDataAttributes &,std::atomic<BOOL> const&>((Spatializer **)v388, (const IR::IRDataAttributes *)buf, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
              v6 = *(_QWORD *)v388;
              if (cf)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v311, cf);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 216))(v6, &v311);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v311);
              }
              if (v385)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v310, v385);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v6 + 232))(v6, &v310);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v310);
              }
              if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
              {
                std::make_unique[abi:ne180100]<HRTFXTCSpatializer,IR::IRDataAttributes &,std::atomic<BOOL> const&>((Spatializer **)v388, (const IR::IRDataAttributes *)buf, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
                v264 = *(_QWORD *)v388;
                std::make_unique[abi:ne180100]<HRTFXTCSpatializer,IR::IRDataAttributes &,std::atomic<BOOL> const&>((Spatializer **)v388, (const IR::IRDataAttributes *)buf, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
                v272 = *(_QWORD *)v388;
                if (cf)
                {
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v309, cf);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v264 + 216))(v264, &v309);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v309);
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v308, cf);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v272 + 216))(v272, &v308);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v308);
                }
                if (v385)
                {
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v307, v385);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v264 + 232))(v264, &v307);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v307);
                  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v306, v385);
                  (*(void (**)(uint64_t, const void **))(*(_QWORD *)v272 + 232))(v272, &v306);
                  applesauce::CF::DictionaryRef::~DictionaryRef(&v306);
                }
              }
              else
              {
                v272 = 0;
                v264 = 0;
              }
              if (v347)
              {
                v238 = *((_QWORD *)this + 60);
                applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v305, v347);
                Spatializer::propertyDictionarySetValue(v238, CFSTR("XTCSourceExtentIRCustomURL"), &v305);
                applesauce::CF::URLRef::~URLRef(&v305);
                v239 = *((_QWORD *)this + 61);
                if (v239)
                {
                  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v304, v347);
                  Spatializer::propertyDictionarySetValue(v239, CFSTR("XTCSourceExtentIRCustomURL"), &v304);
                  applesauce::CF::URLRef::~URLRef(&v304);
                }
                v240 = *((_QWORD *)this + 62);
                if (v240)
                {
                  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v303, v347);
                  Spatializer::propertyDictionarySetValue(v240, CFSTR("XTCSourceExtentIRCustomURL"), &v303);
                  applesauce::CF::URLRef::~URLRef(&v303);
                }
              }
            }
            applesauce::CF::URLRef::operator=((const void **)this + 32, *(CFTypeRef *)buf);
            *(_QWORD *)((char *)this + 268) = 0;
            v241 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
            *((_BYTE *)this + 280) = (v241 & 1) == 0;
            *((_DWORD *)this + 69) = 1500;
            *((_BYTE *)this + 184) = v112;
            if (v111)
              *((_DWORD *)this + 45) = 128;
            v242 = *((_QWORD *)this + 116);
            v243 = *(unsigned __int8 *)(v242 + 40);
            LOBYTE(v345) = v243 ^ 1;
            LODWORD(v346) = 0;
            v244 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
            v10 = v264;
            if (v243)
            {
              v245 = *((_QWORD *)this + 117);
              *(_QWORD *)v388 = v242;
              *(_QWORD *)&v388[8] = v245;
              a3 = v110;
              if (v245)
              {
                v246 = (unint64_t *)(v245 + 8);
                do
                  v247 = __ldxr(v246);
                while (__stxr(v247 + 1, v246));
              }
            }
            else
            {
              *(_QWORD *)&v388[8] = 0;
              *(_QWORD *)v388 = 0;
              a3 = v110;
            }
            v12 = v272;
            std::make_unique[abi:ne180100]<IR::DynamicIRProcessor,IR::IRDataAttributes &,BOOL,float,std::atomic<BOOL> const&,std::atomic<BOOL> const&,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams>>((uint64_t *)v319, (uint64_t)this + 168, (char *)&v345, (float *)&v346, (unsigned __int8 *)(v244 + 162), (unsigned __int8 *)(v244 + 161), (__int128 *)v388);
            v56 = (void *)v319[0];
            v319[0] = 0;
            std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v388);
            IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)buf);
            applesauce::CF::URLRef::~URLRef(v321);
            applesauce::CF::URLRef::~URLRef(&v347);
            v135 = v387;
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v119 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
            {
              v249 = (_QWORD *)((char *)this + 888);
              if (*((char *)this + 911) < 0)
                v249 = (_QWORD *)*v249;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v249;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "initializeSpatializer";
              _os_log_debug_impl(&dword_1B5ED0000, v119, OS_LOG_TYPE_DEBUG, "[%s|%s] Spatial audio over built-in speakers not available on this hardware; reverting to amplitude panning",
                buf,
                0x16u);
            }
LABEL_247:
            v120 = (AudioChannelLayout *)*((_QWORD *)this + 64);
            v6 = operator new();
            VBAPSpatializer::VBAPSpatializer((VBAPSpatializer *)v6, v120);
            v121 = cf;
            if (cf)
            {
              CFRetain(cf);
              v302 = v121;
              (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v302);
              if (v302)
                CFRelease(v302);
            }
            v122 = v385;
            if (v385)
            {
              CFRetain(v385);
              v301 = v122;
              (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v301);
              if (v301)
                CFRelease(v301);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
            {
              v123 = (AudioChannelLayout *)*((_QWORD *)this + 64);
              v10 = operator new();
              VBAPSpatializer::VBAPSpatializer((VBAPSpatializer *)v10, v123);
              v124 = (AudioChannelLayout *)*((_QWORD *)this + 64);
              v12 = operator new();
              VBAPSpatializer::VBAPSpatializer((VBAPSpatializer *)v12, v124);
              v125 = cf;
              if (cf)
              {
                CFRetain(cf);
                v300 = v125;
                (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v300);
                if (v300)
                  CFRelease(v300);
                v126 = cf;
                if (cf)
                  CFRetain(cf);
                v299 = v126;
                (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v299);
                if (v299)
                  CFRelease(v299);
              }
              v127 = v385;
              if (v385)
              {
                CFRetain(v385);
                v298 = v127;
                (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v298);
                if (v298)
                  CFRelease(v298);
                v128 = v385;
                if (v385)
                  CFRetain(v385);
                v297 = v128;
                (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v297);
                if (v297)
                  CFRelease(v297);
              }
            }
            else
            {
              v12 = 0;
              v10 = 0;
            }
            *(_QWORD *)v388 = (char *)this + 776;
            v388[8] = 1;
            caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 776));
            v129 = (void *)*((_QWORD *)this + 32);
            *((_QWORD *)this + 32) = 0;
            if (v129)
              CFRelease(v129);
            v130 = (IR::IRDataLoader *)IR::IRDataLoader::instance((IR::IRDataLoader *)v129);
            *((_DWORD *)this + 67) = IR::IRDataLoader::registerCustomLayoutIfNecessary(v130, *((const AudioChannelLayout **)this + 64));
            *((_DWORD *)this + 68) = 0;
            v131 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
            *((_BYTE *)this + 280) = (v131 & 1) == 0;
            *((_DWORD *)this + 69) = 1500;
            *((_BYTE *)this + 184) = 1;
            *((_DWORD *)this + 45) = 128;
            v132 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
            v56 = (void *)operator new();
            v133 = atomic_load((unsigned __int8 *)(v132 + 162));
            v134 = atomic_load((unsigned __int8 *)(v132 + 161));
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            IR::DynamicIRProcessor::DynamicIRProcessor((uint64_t)v56, (uint64_t)this + 168, 1, v133 & 1, v134 & 1, buf, 0.0);
            v135 = v388;
          }
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)v135);
LABEL_273:
          v16 = 0;
LABEL_274:
          v73 = 0;
          break;
        case 1:
          v347 = (char *)this + 776;
          v348 = 1;
          caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 776));
          v34 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 160));
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v346, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 248);
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v345, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 968);
          AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(&v344, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1040);
          IR::getPresetDataAttributes();
          v35 = v34 & 1;
          v36 = !(v34 & 1);
          if (v346)
          {
            applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v343, v346);
            IR::IRDataAttributes::IRDataAttributes((uint64_t)v388, v343, 128, v35 == 0, *((float *)this + 135));
            v37 = *(_QWORD *)buf;
            *(_QWORD *)buf = *(_QWORD *)v388;
            *(_OWORD *)&buf[8] = *(_OWORD *)&v388[8];
            v400 = v389;
            v401 = v390;
            v402 = v391;
            v38 = v392;
            *(_QWORD *)v388 = v37;
            v392 = v403;
            v404 = v393;
            v39 = v405;
            v403 = v38;
            v405 = (void *)v394;
            *(_OWORD *)&v406[9] = *(_OWORD *)&v395[9];
            *(_OWORD *)v406 = *(_OWORD *)v395;
            v40 = (const __CFDictionary *)v396;
            v394 = v39;
            v396 = v407;
            v409 = v398;
            v407 = v40;
            v408 = v397;
            IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)v388);
            applesauce::CF::URLRef::~URLRef(&v343);
          }
          else
          {
            buf[16] = !(v34 & 1);
            if ((v34 & 1) != 0)
              *(_DWORD *)&buf[12] = 128;
          }
          if (AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 109) + 232), (CFTypeRef)kOptionalFeatureSourceExtent))
          {
            if (_os_feature_enabled_impl())
            {
              applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)v319, CFSTR("sizes"));
              AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&v342, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2200);
              applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v388, v319[0], &v342);
              applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v341, CFSTR("tGridOrder"));
              AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&v340, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2272);
              applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(&v388[16], v341, &v340);
              applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)&v339, CFSTR("samplingFactors"));
              AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&v338, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2344);
              applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::ArrayRef>((_QWORD *)&v389 + 1, v339, &v338);
              *(_QWORD *)v387 = v388;
              *(_QWORD *)&v387[8] = 3;
              CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v387);
              v162 = v407;
              v407 = CFDictionaryRef;
              v321[0] = v162;
              applesauce::CF::DictionaryRef::~DictionaryRef(v321);
              for (i = 0; i != -48; i -= 16)
              {
                v164 = *(const void **)((char *)&v390 + i);
                if (v164)
                  CFRelease(v164);
                v165 = *(const void **)((char *)&v389 + i + 8);
                if (v165)
                  CFRelease(v165);
              }
              applesauce::CF::ArrayRef::~ArrayRef(&v338);
              applesauce::CF::StringRef::~StringRef(&v339);
              applesauce::CF::ArrayRef::~ArrayRef(&v340);
              applesauce::CF::StringRef::~StringRef(&v341);
              applesauce::CF::ArrayRef::~ArrayRef(&v342);
              applesauce::CF::StringRef::~StringRef(v319);
            }
            v166 = 1;
          }
          else
          {
            v166 = 0;
          }
          v406[24] = v166;
          v167 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2488));
          v168 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
          v402 = (v168 & 1) == 0;
          *((_QWORD *)&v401 + 1) = v167 | 0x5DC00000000;
          v258 = a2;
          v260 = v36;
          if (*(_BYTE *)(*((_QWORD *)this + 114) + 40))
          {
            buf[17] = 1;
            std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>((uint64_t *)v388, (int *)this + 221, (uint64_t)buf, (uint64_t *)this + 114, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 162), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
            v169 = *(_QWORD *)v388;
            v251 = *(_QWORD *)v388;
            if (cf)
            {
              applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v337, cf);
              (*(void (**)(uint64_t, const void **))(*(_QWORD *)v169 + 216))(v169, &v337);
              applesauce::CF::DictionaryRef::~DictionaryRef(&v337);
            }
            if (v385)
            {
              applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v336, v385);
              (*(void (**)(uint64_t, const void **))(*(_QWORD *)v169 + 232))(v169, &v336);
              applesauce::CF::DictionaryRef::~DictionaryRef(&v336);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
            {
              std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>((uint64_t *)v388, (int *)this + 221, (uint64_t)buf, (uint64_t *)this + 114, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 162), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
              v170 = *(_QWORD *)v388;
              v263 = *(_QWORD *)v388;
              std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>((uint64_t *)v388, (int *)this + 221, (uint64_t)buf, (uint64_t *)this + 114, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 162), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
              v271 = *(_QWORD *)v388;
              if (cf)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v335, cf);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v170 + 216))(v170, &v335);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v335);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v334, cf);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v271 + 216))(v271, &v334);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v334);
              }
              if (v385)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v333, v385);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v170 + 232))(v170, &v333);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v333);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v332, v385);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v271 + 232))(v271, &v332);
                v171 = v35;
                applesauce::CF::DictionaryRef::~DictionaryRef(&v332);
              }
              else
              {
                v171 = v35;
              }
            }
            else
            {
              v171 = v35;
              v271 = 0;
              v263 = 0;
            }
          }
          else
          {
            if (v345)
            {
              applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v331, v345);
              IR::IRDataAttributes::IRDataAttributes((uint64_t)v388, v331, 128, 1, 0.0);
              applesauce::CF::URLRef::~URLRef(&v331);
            }
            else
            {
              IR::getPresetDataAttributes();
            }
            AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(v321, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2128);
            LOBYTE(v319[0]) = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 109) + 232), CFSTR("NearFieldHRTF"));
            std::make_unique[abi:ne180100]<HRTFNFSpatializer,IR::IRDataAttributes &,IR::IRDataAttributes &,applesauce::CF::DictionaryRef,BOOL,std::atomic<BOOL> const&>((uint64_t *)v387, (uint64_t)buf, (uint64_t)v388, v321, v319, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
            v173 = *(_QWORD *)v387;
            applesauce::CF::DictionaryRef::~DictionaryRef(v321);
            v251 = v173;
            if (cf)
            {
              applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v330, cf);
              (*(void (**)(uint64_t, const void **))(*(_QWORD *)v173 + 216))(v173, &v330);
              applesauce::CF::DictionaryRef::~DictionaryRef(&v330);
            }
            if (v385)
            {
              applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v329, v385);
              (*(void (**)(uint64_t, const void **))(*(_QWORD *)v173 + 232))(v173, &v329);
              applesauce::CF::DictionaryRef::~DictionaryRef(&v329);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
            {
              AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(v321, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2128);
              LOBYTE(v319[0]) = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 109) + 232), CFSTR("NearFieldHRTF"));
              std::make_unique[abi:ne180100]<HRTFNFSpatializer,IR::IRDataAttributes &,IR::IRDataAttributes &,applesauce::CF::DictionaryRef,BOOL,std::atomic<BOOL> const&>((uint64_t *)v387, (uint64_t)buf, (uint64_t)v388, v321, v319, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
              v174 = *(_QWORD *)v387;
              applesauce::CF::DictionaryRef::~DictionaryRef(v321);
              AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(v321, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2128);
              LOBYTE(v319[0]) = AUSM::GlobalProperties::isEnabledFeature(*(AUSM::GlobalProperties **)(*((_QWORD *)this + 109) + 232), CFSTR("NearFieldHRTF"));
              std::make_unique[abi:ne180100]<HRTFNFSpatializer,IR::IRDataAttributes &,IR::IRDataAttributes &,applesauce::CF::DictionaryRef,BOOL,std::atomic<BOOL> const&>((uint64_t *)v387, (uint64_t)buf, (uint64_t)v388, v321, v319, (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 161));
              v271 = *(_QWORD *)v387;
              applesauce::CF::DictionaryRef::~DictionaryRef(v321);
              if (cf)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v328, cf);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v174 + 216))(v174, &v328);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v328);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v327, cf);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v271 + 216))(v271, &v327);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v327);
              }
              if (v385)
              {
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v326, v385);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v174 + 232))(v174, &v326);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v326);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v325, v385);
                (*(void (**)(uint64_t, const void **))(*(_QWORD *)v271 + 232))(v271, &v325);
                applesauce::CF::DictionaryRef::~DictionaryRef(&v325);
              }
            }
            else
            {
              v271 = 0;
              v174 = 0;
            }
            v175 = v344;
            v263 = v174;
            if (v344)
            {
              v176 = *((_QWORD *)this + 60);
              applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v324, v344);
              Spatializer::propertyDictionarySetValue(v176, CFSTR("BinauralSourceExtentIRCustomURL"), &v324);
              applesauce::CF::URLRef::~URLRef(&v324);
              v177 = *((_QWORD *)this + 61);
              if (v177)
              {
                applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v323, v175);
                Spatializer::propertyDictionarySetValue(v177, CFSTR("BinauralSourceExtentIRCustomURL"), &v323);
                applesauce::CF::URLRef::~URLRef(&v323);
              }
              v178 = *((_QWORD *)this + 62);
              if (v178)
              {
                applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v322, v175);
                Spatializer::propertyDictionarySetValue(v178, CFSTR("BinauralSourceExtentIRCustomURL"), &v322);
                applesauce::CF::URLRef::~URLRef(&v322);
              }
            }
            v171 = v35;
            IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)v388);
          }
          v179 = 0;
          v252 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 168);
          v321[0] = (char *)this + 168;
          v321[1] = (char *)this + 320;
          v250 = (AUSpatialMixerV2ChannelProcessor *)((char *)this + 320);
          v180 = v321;
          v181 = 1;
          do
          {
            v182 = v179;
            v183 = (const void *)*((_QWORD *)*v180 + 11);
            v184 = *(const void **)buf;
            *((_QWORD *)*v180 + 11) = *(_QWORD *)buf;
            if (v184)
              CFRetain(v184);
            if (v183)
              CFRelease(v183);
            *((_DWORD *)*v180 + 25) = 0;
            v185 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2488));
            *((_DWORD *)*v180 + 26) = v185;
            v186 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
            v187 = *v180;
            v187[112] = (v186 & 1) == 0;
            *((_DWORD *)v187 + 27) = 1500;
            v187[16] = v36;
            if (v171)
              *((_DWORD *)v187 + 3) = 128;
            v180 = &v321[v181];
            v179 = 1;
            v181 = 2;
          }
          while ((v182 & 1) == 0);
          v188 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
          if (*(_BYTE *)(*((_QWORD *)this + 116) + 40))
          {
            v189 = *((_QWORD *)this + 117);
            *(_QWORD *)v387 = *((_QWORD *)this + 116);
            *(_QWORD *)&v387[8] = v189;
            v10 = v263;
            v12 = v271;
            v6 = v251;
            if (v189)
            {
              v190 = (unint64_t *)(v189 + 8);
              do
                v191 = __ldxr(v190);
              while (__stxr(v191 + 1, v190));
            }
          }
          else
          {
            *(_QWORD *)&v387[8] = 0;
            *(_QWORD *)v387 = 0;
            v10 = v263;
            v12 = v271;
            v6 = v251;
          }
          v56 = (void *)operator new();
          v192 = atomic_load((unsigned __int8 *)(v188 + 162));
          v193 = v192 & 1;
          v194 = atomic_load((unsigned __int8 *)(v188 + 161));
          v267 = *(std::__shared_weak_count **)&v387[8];
          *(_OWORD *)v388 = *(_OWORD *)v387;
          *(_QWORD *)&v387[8] = 0;
          *(_QWORD *)v387 = 0;
          IR::DynamicIRProcessor::DynamicIRProcessor((uint64_t)v56, (uint64_t)v252, 1, v193, v194 & 1, v388, 0.0);
          if (v267)
          {
            p_shared_owners = (unint64_t *)&v267->__shared_owners_;
            do
              v196 = __ldaxr(p_shared_owners);
            while (__stlxr(v196 - 1, p_shared_owners));
            if (!v196)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
          v197 = *(std::__shared_weak_count **)&v387[8];
          if (*(_QWORD *)&v387[8])
          {
            v198 = (unint64_t *)(*(_QWORD *)&v387[8] + 8);
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
              std::__shared_weak_count::__release_weak(v197);
            }
          }
          v200 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
          if (*(_BYTE *)(*((_QWORD *)this + 116) + 40))
          {
            v201 = *((_QWORD *)this + 117);
            *(_QWORD *)v387 = *((_QWORD *)this + 116);
            *(_QWORD *)&v387[8] = v201;
            if (v201)
            {
              v202 = (unint64_t *)(v201 + 8);
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
            }
          }
          else
          {
            *(_QWORD *)&v387[8] = 0;
            *(_QWORD *)v387 = 0;
          }
          v204 = operator new();
          v205 = atomic_load((unsigned __int8 *)(v200 + 162));
          v206 = v205 & 1;
          v207 = atomic_load((unsigned __int8 *)(v200 + 161));
          v268 = *(std::__shared_weak_count **)&v387[8];
          *(_OWORD *)v388 = *(_OWORD *)v387;
          *(_QWORD *)&v387[8] = 0;
          *(_QWORD *)v387 = 0;
          v208 = v204;
          IR::DynamicIRProcessor::DynamicIRProcessor(v204, (uint64_t)v250, 1, v206, v207 & 1, v388, 0.0);
          if (v268)
          {
            v209 = (unint64_t *)&v268->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
          v211 = *(std::__shared_weak_count **)&v387[8];
          if (*(_QWORD *)&v387[8])
          {
            v212 = (unint64_t *)(*(_QWORD *)&v387[8] + 8);
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          v266 = (void *)v208;
          v320 = 0;
          v214 = (IR::IRDataLoader *)IR::IRDataAttributes::IRDataAttributes((uint64_t)v388, 0, 0, 0, 0.0);
          a2 = v258;
          a3 = 1;
          if (*(_QWORD *)v252 && *(_QWORD *)v250)
          {
            v215 = (IR::IRDataLoader *)IR::IRDataLoader::instance(v214);
            OriginalAudioChannelLayoutTag = IR::IRDataLoader::getOriginalAudioChannelLayoutTag(v215, v252);
            if (ChannelLayoutTagIsSupportedHOA(OriginalAudioChannelLayoutTag))
            {
              v217 = (IR::IRDataLoader *)IR::IRDataAttributes::operator=((uint64_t)v388, (uint64_t)v252);
              v218 = (IR::IRDataLoader *)IR::IRDataLoader::instance(v217);
              v219 = IR::IRDataLoader::getOriginalAudioChannelLayoutTag(v218, v250);
              IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(v219);
              v221 = *(const void **)v250;
              if (IsSupportedHOA)
              {
                applesauce::CF::URLRef::operator=(&v392, v221);
                v393 = *(_OWORD *)((char *)this + 344);
                applesauce::CF::URLRef::operator=(&v394, *((CFTypeRef *)this + 51));
                *(_DWORD *)&v395[8] = *((_DWORD *)this + 106);
                v222 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
                v395[16] = (v222 & 1) == 0;
                *(_DWORD *)&v395[12] = 1500;
              }
              else
              {
                applesauce::CF::URLRef::operator=(&v394, v221);
                *(_DWORD *)v395 = *((_DWORD *)this + 90);
                *(_DWORD *)&v395[8] = 0;
              }
              *(_DWORD *)&v395[4] = 0;
              v388[16] = v260;
              *(_DWORD *)&v388[12] = *((_DWORD *)this + 45);
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1)
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
              v223 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
              {
                v224 = (_QWORD *)((char *)this + 888);
                if (*((char *)this + 911) < 0)
                  v224 = (_QWORD *)*v224;
                *(_DWORD *)v387 = 136315394;
                *(_QWORD *)&v387[4] = v224;
                *(_WORD *)&v387[12] = 2080;
                *(_QWORD *)&v387[14] = "initializeSpatializer";
                _os_log_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_DEFAULT, "[%s|%s] Scene reverb IR is non-HOA, any additional early reverb will run in parallel.", v387, 0x16u);
              }
            }
          }
          v225 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
          if (*(_BYTE *)(*((_QWORD *)this + 116) + 40))
          {
            v226 = (unint64_t *)*((_QWORD *)this + 117);
            v319[0] = *((CFTypeRef *)this + 116);
            v319[1] = v226;
            if (v226)
            {
              v227 = v226 + 1;
              do
                v228 = __ldxr(v227);
              while (__stxr(v228 + 1, v227));
            }
          }
          else
          {
            v319[0] = 0;
            v319[1] = 0;
          }
          v229 = operator new();
          v230 = atomic_load((unsigned __int8 *)(v225 + 162));
          v231 = v230 & 1;
          v232 = atomic_load((unsigned __int8 *)(v225 + 161));
          v261 = (std::__shared_weak_count *)v319[1];
          *(_OWORD *)v387 = *(_OWORD *)v319;
          v319[0] = 0;
          v319[1] = 0;
          v73 = (IR::DynamicIRProcessor *)v229;
          IR::DynamicIRProcessor::DynamicIRProcessor(v229, (uint64_t)v388, 1, v231, v232 & 1, v387, 0.0);
          if (v261)
          {
            v233 = (unint64_t *)&v261->__shared_owners_;
            do
              v234 = __ldaxr(v233);
            while (__stlxr(v234 - 1, v233));
            if (!v234)
            {
              ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
              std::__shared_weak_count::__release_weak(v261);
            }
          }
          v235 = (std::__shared_weak_count *)v319[1];
          if (v319[1])
          {
            v236 = (unint64_t *)((char *)v319[1] + 8);
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
              std::__shared_weak_count::__release_weak(v235);
            }
          }
          if (v396)
            CFRelease(v396);
          v16 = v266;
          if (v394)
            CFRelease(v394);
          if (v392)
            CFRelease(v392);
          if (*(_QWORD *)v388)
            CFRelease(*(CFTypeRef *)v388);
          if (v407)
            CFRelease(v407);
          if (v405)
            CFRelease(v405);
          if (v403)
            CFRelease(v403);
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
          if (v344)
            CFRelease(v344);
          if (v345)
            CFRelease(v345);
          if (v346)
            CFRelease(v346);
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v347);
          break;
        default:
          if (getAUSMV2Log(void)::onceToken != -1)
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
          v117 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            v248 = (_QWORD *)((char *)this + 888);
            if (*((char *)this + 911) < 0)
              v248 = (_QWORD *)*v248;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v248;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "initializeSpatializer";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v400) = a3;
            _os_log_error_impl(&dword_1B5ED0000, v117, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid output type %u when trying to initialize with kSpatializationAlgorithm_UseOutputType", buf, 0x1Cu);
          }
          v56 = 0;
          v16 = 0;
          v73 = 0;
          v12 = 0;
          v10 = 0;
          v6 = 0;
          break;
      }
LABEL_275:
      Spatializer::getParams((Spatializer *)buf, *((_QWORD *)this + 60));
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 32))(v6, buf);
      if (*(_QWORD *)&v406[16])
      {
        *(_QWORD *)&v406[24] = *(_QWORD *)&v406[16];
        operator delete(*(void **)&v406[16]);
      }
      if (v405)
      {
        *(_QWORD *)v406 = v405;
        operator delete(v405);
      }
      if ((_QWORD)v401)
      {
        *((_QWORD *)&v401 + 1) = v401;
        operator delete((void *)v401);
      }
      *(_DWORD *)(v6 + 24) = *(_DWORD *)(*((_QWORD *)this + 60) + 24);
      if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
        Spatializer::getParams((Spatializer *)buf, *((_QWORD *)this + 61));
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 32))(v10, buf);
        if (*(_QWORD *)&v406[16])
        {
          *(_QWORD *)&v406[24] = *(_QWORD *)&v406[16];
          operator delete(*(void **)&v406[16]);
        }
        if (v405)
        {
          *(_QWORD *)v406 = v405;
          operator delete(v405);
        }
        if ((_QWORD)v401)
        {
          *((_QWORD *)&v401 + 1) = v401;
          operator delete((void *)v401);
        }
        Spatializer::getParams((Spatializer *)buf, *((_QWORD *)this + 62));
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 32))(v12, buf);
        if (*(_QWORD *)&v406[16])
        {
          *(_QWORD *)&v406[24] = *(_QWORD *)&v406[16];
          operator delete(*(void **)&v406[16]);
        }
        if (v405)
        {
          *(_QWORD *)v406 = v405;
          operator delete(v405);
        }
        if ((_QWORD)v401)
        {
          *((_QWORD *)&v401 + 1) = v401;
          operator delete((void *)v401);
        }
        v136 = *((_QWORD *)this + 61);
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(v136 + 24);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v136 + 24);
      }
      v137 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)v6 + 256))(v6, *((unsigned int *)this + 136), *((unsigned int *)this + 137), *((float *)this + 135));
      v118 = v137;
      if (!*(_BYTE *)(*((_QWORD *)this + 121) + 456)
        || v137
        || (v118 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)v10 + 256))(v10, *((unsigned int *)this + 136), *((unsigned int *)this + 137), *((float *)this + 135))) != 0)
      {
        if (!v56)
          goto LABEL_300;
        goto LABEL_299;
      }
      v118 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)v12 + 256))(v12, *((unsigned int *)this + 136), *((unsigned int *)this + 137), *((float *)this + 135));
      if (v56)
LABEL_299:
        IR::DynamicIRProcessor::initialize((IR::DynamicIRProcessor *)v56, *((float *)this + 135), *((unsigned int *)this + 137));
LABEL_300:
      if (v16)
        IR::DynamicIRProcessor::initialize((IR::DynamicIRProcessor *)v16, *((float *)this + 135), *((unsigned int *)this + 137));
      if (v73)
        IR::DynamicIRProcessor::initialize(v73, *((float *)this + 135), *((unsigned int *)this + 137));
LABEL_304:
      v259 = v118;
      v265 = v16;
      v270 = v12;
      *(_QWORD *)v388 = (char *)this + 772;
      *(_QWORD *)&v388[8] = (char *)this + 776;
      while (1)
      {
        *(_QWORD *)buf = (char *)this + 772;
        buf[8] = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
        if ((caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 776)) & 1) != 0)
          break;
        std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
        sched_yield();
        *(_QWORD *)buf = (char *)this + 776;
        buf[8] = 1;
        caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 776));
        if ((caulk::pooled_semaphore_mutex::try_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772)) & 1) != 0)
          break;
        std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
        sched_yield();
      }
      *(_QWORD *)buf = 0;
      buf[8] = 0;
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
      v138 = a3;
      v139 = *((_QWORD *)this + 60);
      *((_QWORD *)this + 60) = v6;
      if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
        v140 = *((_QWORD *)this + 61);
        v141 = *((_QWORD *)this + 62);
        *((_QWORD *)this + 61) = v10;
        *((_QWORD *)this + 62) = v12;
        v270 = v141;
        v10 = v140;
      }
      v142 = v73;
      v143 = (uint64_t *)*((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v56;
      v262 = v10;
      if (v56)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 116) + 40))
        {
          *((_DWORD *)v56 + 56) = *((_DWORD *)this + 221);
        }
        else
        {
          v253 = v138;
          v255 = a2;
          v144 = *(_DWORD *)(v6 + 48);
          *(_DWORD *)buf = 0;
          atomic_store(v144, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v56 + 23, 0, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)v56 + 208);
          v145 = *((_QWORD *)this + 18);
          v146 = *(_DWORD *)(*((_QWORD *)this + 60) + 52);
          *(_DWORD *)buf = 1;
          atomic_store(v146, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v145 + 184), 1u, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)(v145 + 208));
          v147 = *((_QWORD *)this + 18);
          LODWORD(v145) = *(_DWORD *)(*((_QWORD *)this + 60) + 56);
          *(_DWORD *)buf = 2;
          atomic_store(v145, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v147 + 184), 2u, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)(v147 + 208));
          v138 = v253;
          a2 = v255;
        }
      }
      v148 = (uint64_t *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v265;
      if (v265)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 116) + 40))
        {
          *((_DWORD *)v265 + 56) = *((_DWORD *)this + 221);
        }
        else
        {
          v254 = v138;
          v256 = a2;
          v149 = *(_DWORD *)(*((_QWORD *)this + 60) + 48);
          *(_DWORD *)buf = 0;
          v150 = (unsigned __int8 *)v265;
          atomic_store(v149, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v265 + 23, 0, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, v150 + 208);
          v151 = *((_QWORD *)this + 19);
          v152 = *(_DWORD *)(*((_QWORD *)this + 60) + 52);
          *(_DWORD *)buf = 1;
          atomic_store(v152, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v151 + 184), 1u, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)(v151 + 208));
          v153 = *((_QWORD *)this + 19);
          LODWORD(v151) = *(_DWORD *)(*((_QWORD *)this + 60) + 56);
          *(_DWORD *)buf = 2;
          atomic_store(v151, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v153 + 184), 2u, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)(v153 + 208));
          v138 = v254;
          a2 = v256;
        }
      }
      v154 = (uint64_t *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v142;
      if (v142)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 116) + 40))
        {
          *((_DWORD *)v142 + 56) = *((_DWORD *)this + 221);
        }
        else
        {
          v257 = a2;
          v155 = v138;
          v156 = *(_DWORD *)(*((_QWORD *)this + 60) + 48);
          *(_DWORD *)buf = 0;
          atomic_store(v156, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v142 + 23, 0, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)v142 + 208);
          v157 = *((_QWORD *)this + 20);
          v158 = *(_DWORD *)(*((_QWORD *)this + 60) + 52);
          *(_DWORD *)buf = 1;
          atomic_store(v158, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v157 + 184), 1u, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)(v157 + 208));
          v159 = *((_QWORD *)this + 20);
          LODWORD(v157) = *(_DWORD *)(*((_QWORD *)this + 60) + 56);
          *(_DWORD *)buf = 2;
          atomic_store(v157, (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v159 + 184), 2u, buf)+ 8);
          __dmb(0xBu);
          atomic_store(1u, (unsigned __int8 *)(v159 + 208));
          v138 = v155;
          a2 = v257;
        }
      }
      *((_DWORD *)this + 118) = a2;
      *((_DWORD *)this + 119) = v138;
      AUSpatialMixerV2ChannelProcessor::updateSpatializationParameters(this);
      std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100]((caulk::pooled_semaphore_mutex **)v388);
      if (v385)
        CFRelease(v385);
      if (cf)
        CFRelease(cf);
      if (v154)
        std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v154);
      if (v148)
        std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v148);
      if (v143)
        std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](v143);
      if (v270)
        (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
      if (v262)
        (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
      return v259;
    case 8:
      v80 = (const AudioChannelLayout *)*((_QWORD *)this + 64);
      v6 = operator new();
      HOASpatializer::HOASpatializer((HOASpatializer *)v6, v80);
      v81 = cf;
      if (cf)
      {
        CFRetain(cf);
        v290 = v81;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v290);
        if (v290)
          CFRelease(v290);
      }
      v82 = v385;
      if (v385)
      {
        CFRetain(v385);
        v289 = v82;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v289);
        if (v289)
          CFRelease(v289);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
        v83 = (const AudioChannelLayout *)*((_QWORD *)this + 64);
        v10 = operator new();
        HOASpatializer::HOASpatializer((HOASpatializer *)v10, v83);
        v84 = (const AudioChannelLayout *)*((_QWORD *)this + 64);
        v12 = operator new();
        HOASpatializer::HOASpatializer((HOASpatializer *)v12, v84);
        v85 = cf;
        if (cf)
        {
          CFRetain(cf);
          v288 = v85;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v288);
          if (v288)
            CFRelease(v288);
          v86 = cf;
          if (cf)
            CFRetain(cf);
          v287 = v86;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v287);
          if (v287)
            CFRelease(v287);
        }
        v87 = v385;
        if (v385)
        {
          CFRetain(v385);
          v286 = v87;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v286);
          if (v286)
            CFRelease(v286);
          v88 = v385;
          if (v385)
            CFRetain(v385);
          v285 = v88;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v285);
          if (v285)
            CFRelease(v285);
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
      AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(v388, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 824);
      v95 = *(const void **)v388;
      if (*(_QWORD *)v388)
      {
        v96 = *((_QWORD *)this + 60);
        CFRetain(*(CFTypeRef *)v388);
        v284 = v95;
        Spatializer::propertyDictionarySetValue(v96, CFSTR("HOASourceExtentIRCustomURL"), &v284);
        CFRelease(v95);
        v97 = *((_QWORD *)this + 61);
        if (v97)
        {
          CFRetain(v95);
          v283 = v95;
          Spatializer::propertyDictionarySetValue(v97, CFSTR("HOASourceExtentIRCustomURL"), &v283);
          CFRelease(v95);
        }
        v98 = *((_QWORD *)this + 62);
        if (v98)
        {
          CFRetain(v95);
          v282 = v95;
          Spatializer::propertyDictionarySetValue(v98, CFSTR("HOASourceExtentIRCustomURL"), &v282);
          CFRelease(v95);
        }
      }
      AUSM::AppleSauceCFWithMutex<__CFURL const*>::load(v387, *(_QWORD *)(*((_QWORD *)this + 109) + 232) + 896);
      v99 = *(const void **)v387;
      if (*(_QWORD *)v387)
      {
        v100 = *((_QWORD *)this + 60);
        CFRetain(*(CFTypeRef *)v387);
        v281 = v99;
        Spatializer::propertyDictionarySetValue(v100, CFSTR("HOANFCIRCustomURL"), &v281);
        CFRelease(v99);
        v101 = *((_QWORD *)this + 61);
        if (v101)
        {
          CFRetain(v99);
          v280 = v99;
          Spatializer::propertyDictionarySetValue(v101, CFSTR("HOANFCIRCustomURL"), &v280);
          CFRelease(v99);
        }
        v102 = *((_QWORD *)this + 62);
        if (v102)
        {
          CFRetain(v99);
          v279 = v99;
          Spatializer::propertyDictionarySetValue(v102, CFSTR("HOANFCIRCustomURL"), &v279);
          CFRelease(v99);
        }
      }
      v103 = (void *)*((_QWORD *)this + 32);
      *((_QWORD *)this + 32) = 0;
      if (v103)
        CFRelease(v103);
      v104 = (IR::IRDataLoader *)IR::IRDataLoader::instance((IR::IRDataLoader *)v103);
      *((_DWORD *)this + 67) = IR::IRDataLoader::registerCustomLayoutIfNecessary(v104, *((const AudioChannelLayout **)this + 64));
      *((_DWORD *)this + 68) = 0;
      v105 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
      *((_BYTE *)this + 280) = (v105 & 1) == 0;
      *((_DWORD *)this + 69) = 1500;
      v106 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
      v56 = (void *)operator new();
      v107 = atomic_load((unsigned __int8 *)(v106 + 162));
      v108 = atomic_load((unsigned __int8 *)(v106 + 161));
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      IR::DynamicIRProcessor::DynamicIRProcessor((uint64_t)v56, (uint64_t)this + 168, 1, v107 & 1, v108 & 1, buf, 0.0);
      if (*(_QWORD *)v387)
        CFRelease(*(CFTypeRef *)v387);
      if (*(_QWORD *)v388)
        CFRelease(*(CFTypeRef *)v388);
      goto LABEL_273;
    case 9:
      v41 = (AudioChannelLayout *)*((_QWORD *)this + 64);
      v6 = operator new();
      CartesianSpatializer::CartesianSpatializer((CartesianSpatializer *)v6, v41);
      v42 = cf;
      if (cf)
      {
        CFRetain(cf);
        v296 = v42;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v296);
        if (v296)
          CFRelease(v296);
      }
      v43 = v385;
      if (v385)
      {
        CFRetain(v385);
        v295 = v43;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v295);
        if (v295)
          CFRelease(v295);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
        v44 = (AudioChannelLayout *)*((_QWORD *)this + 64);
        v10 = operator new();
        CartesianSpatializer::CartesianSpatializer((CartesianSpatializer *)v10, v44);
        v45 = (AudioChannelLayout *)*((_QWORD *)this + 64);
        v12 = operator new();
        CartesianSpatializer::CartesianSpatializer((CartesianSpatializer *)v12, v45);
        v46 = cf;
        if (cf)
        {
          CFRetain(cf);
          v294 = v46;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v294);
          if (v294)
            CFRelease(v294);
          v47 = cf;
          if (cf)
            CFRetain(cf);
          v293 = v47;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v293);
          if (v293)
            CFRelease(v293);
        }
        v48 = v385;
        if (v385)
        {
          CFRetain(v385);
          v292 = v48;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v292);
          if (v292)
            CFRelease(v292);
          v49 = v385;
          if (v385)
            CFRetain(v385);
          v291 = v49;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v291);
          if (v291)
            CFRelease(v291);
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
      }
      v89 = (void *)*((_QWORD *)this + 32);
      *((_QWORD *)this + 32) = 0;
      if (v89)
        CFRelease(v89);
      v90 = (IR::IRDataLoader *)IR::IRDataLoader::instance((IR::IRDataLoader *)v89);
      *((_DWORD *)this + 67) = IR::IRDataLoader::registerCustomLayoutIfNecessary(v90, *((const AudioChannelLayout **)this + 64));
      *((_DWORD *)this + 68) = 0;
      v91 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 1505));
      *((_BYTE *)this + 280) = (v91 & 1) == 0;
      *((_DWORD *)this + 69) = 1500;
      v92 = *(_QWORD *)(*((_QWORD *)this + 109) + 232);
      v56 = (void *)operator new();
      v93 = atomic_load((unsigned __int8 *)(v92 + 162));
      v94 = atomic_load((unsigned __int8 *)(v92 + 161));
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      IR::DynamicIRProcessor::DynamicIRProcessor((uint64_t)v56, (uint64_t)this + 168, 1, v93 & 1, v94 & 1, buf, 0.0);
      goto LABEL_273;
    default:
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v50 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v172 = (_QWORD *)((char *)this + 888);
        if (*((char *)this + 911) < 0)
          v172 = (_QWORD *)*v172;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v172;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "initializeSpatializer";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v400) = a2;
        _os_log_error_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid spatialization algorithm %u", buf, 0x1Cu);
      }
      v6 = operator new();
      Spatializer::Spatializer((Spatializer *)v6);
      v51 = cf;
      if (cf)
      {
        CFRetain(cf);
        v278 = v51;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 216))(v6, &v278);
        if (v278)
          CFRelease(v278);
      }
      v52 = v385;
      if (v385)
      {
        CFRetain(v385);
        v277 = v52;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 232))(v6, &v277);
        if (v277)
          CFRelease(v277);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 121) + 456))
      {
        v10 = operator new();
        Spatializer::Spatializer((Spatializer *)v10);
        v12 = operator new();
        Spatializer::Spatializer((Spatializer *)v12);
        v53 = cf;
        if (cf)
        {
          CFRetain(cf);
          v276 = v53;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 216))(v10, &v276);
          if (v276)
            CFRelease(v276);
          v54 = cf;
          if (cf)
            CFRetain(cf);
          v275 = v54;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 216))(v12, &v275);
          if (v275)
            CFRelease(v275);
        }
        v16 = (void *)v385;
        if (v385)
        {
          CFRetain(v385);
          v274 = v16;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v10 + 232))(v10, &v274);
          if (v274)
            CFRelease(v274);
          v55 = v385;
          if (v385)
            CFRetain(v385);
          v273 = v55;
          (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 232))(v12, &v273);
          if (v273)
            CFRelease(v273);
          v56 = 0;
          v16 = 0;
        }
        else
        {
          v56 = 0;
        }
        v73 = 0;
      }
      else
      {
        v56 = 0;
        v16 = 0;
        v73 = 0;
        v10 = 0;
        v12 = 0;
      }
      v118 = -10851;
      goto LABEL_304;
  }
}

void sub_1B62A1B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,const void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a70;
  uint64_t v70;
  uint64_t v71;

  applesauce::CF::URLRef::~URLRef(&a51);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(v71 - 256));
  applesauce::CF::URLRef::~URLRef(&a70);
  applesauce::CF::URLRef::~URLRef((const void **)&STACK[0x2C0]);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&STACK[0x400]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x3F0]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x3F8]);
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  _Unwind_Resume(a1);
}

void Spatializer::propertyDictionarySetValue(uint64_t a1, const void *a2, const void **a3)
{
  const __CFDictionary *v6;
  __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;

  if (*a3)
  {
    v6 = *(const __CFDictionary **)(a1 + 32);
    if (v6)
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v6);
    else
      MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = MutableCopy;
    CFDictionarySetValue(MutableCopy, a2, *a3);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v10, v8);
    v9 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v9;
    if (v9)
      CFRelease(v9);
    atomic_store(1u, (unsigned __int8 *)(a1 + 322));
  }
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,BOOL>(_QWORD *a1, CFTypeRef cf, _BYTE *a3)
{
  uint64_t *v6;
  uint64_t v7;

  if (cf)
    CFRetain(cf);
  if (*a3)
    v6 = (uint64_t *)MEMORY[0x1E0C9AE50];
  else
    v6 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v7 = *v6;
  *a1 = cf;
  a1[1] = v7;
  return a1;
}

IR::DelayLine *AUSpatialMixerV2ChannelProcessor::initializePropagationDelay(AUSpatialMixerV2ChannelProcessor *this)
{
  float v2;
  IR::DelayLine *v3;
  IR::DelayLine *result;

  v2 = (float)(*((float *)this + 135) * *((float *)this + 148)) / 1000.0;
  v3 = (IR::DelayLine *)operator new();
  IR::DelayLine::DelayLine((uint64_t)v3, vcvtps_u32_f32(v2), 5, 1uLL, 0, *((_DWORD *)this + 137));
  result = std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)this + 106, v3);
  atomic_store(1u, (unsigned __int8 *)this + 1648);
  return result;
}

void sub_1B62A3170(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10B0C4057A31370);
  _Unwind_Resume(a1);
}

void AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(_QWORD *a1, uint64_t a2)
{
  std::mutex *v4;
  const void *v5;

  v4 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  v5 = *(const void **)a2;
  if (v5)
    CFRetain(v5);
  *a1 = v5;
  std::mutex::unlock(v4);
}

void std::make_unique[abi:ne180100]<HRTFOBHDSpatializer,unsigned int &,IR::IRDataAttributes &,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams> &,std::atomic<BOOL> const&,std::atomic<BOOL> const&>(uint64_t *a1, int *a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  unint64_t *v21;
  unint64_t v22;
  IR::IRProcessor *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  CFTypeRef v29[8];
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;

  v12 = operator new();
  v13 = *a2;
  IR::IRDataAttributes::IRDataAttributes((uint64_t)v29, a3);
  v14 = (std::__shared_weak_count *)a4[1];
  v27 = *a4;
  v28 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = atomic_load(a5);
  v18 = v17 & 1;
  v19 = atomic_load(a6);
  v20 = v19 & 1;
  Spatializer::Spatializer((Spatializer *)v12);
  *(_OWORD *)(v12 + 332) = xmmword_1B66A1E20;
  *(_QWORD *)v12 = &off_1E69E7E00;
  *(_BYTE *)(v12 + 348) = v18;
  *(_BYTE *)(v12 + 349) = v20;
  *(_QWORD *)(v12 + 352) = 0;
  *(_QWORD *)(v12 + 360) = v27;
  *(_QWORD *)(v12 + 368) = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_DWORD *)(v12 + 376) = v13;
  v23 = (IR::IRProcessor *)operator new();
  IR::IRProcessor::IRProcessor(v23, (const IR::IRDataAttributes *)v29, 0);
  v24 = *(_QWORD *)(v12 + 352);
  *(_QWORD *)(v12 + 352) = v23;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  *a1 = v12;
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  if (v29[0])
    CFRelease(v29[0]);
}

void sub_1B62A339C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Spatializer *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1BCC95CEC](v3, 0x10E1C40AE0E3EF2);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 360);
  v5 = *((_QWORD *)v2 + 44);
  *((_QWORD *)v2 + 44) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  Spatializer::~Spatializer(v2);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va1);
  MEMORY[0x1BCC95CEC](v2, 0x10E1C408051C998);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<HRTFNFSpatializer,IR::IRDataAttributes &,IR::IRDataAttributes &,applesauce::CF::DictionaryRef,BOOL,std::atomic<BOOL> const&>(uint64_t *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, _BYTE *a5, unsigned __int8 *a6)
{
  uint64_t v12;
  unsigned __int8 v13;
  char v14;
  uint64_t v15;
  _OWORD *v16;
  IR::IRProcessor **v17;
  IR::FixedIntegerDelay *v18;
  IR::IRProcessor *v19;
  IR::IRProcessor *v20;
  const __CFNumber *v21;
  float v22;
  const __CFNumber *v23;
  float v24;
  const __CFNumber *v25;
  float v26;
  const __CFNumber *v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  void *v32;
  void *v33;
  CFTypeRef cf;

  v12 = operator new();
  cf = *a4;
  *a4 = 0;
  LOBYTE(a4) = *a5;
  v13 = atomic_load(a6);
  v14 = v13 & 1;
  Spatializer::Spatializer((Spatializer *)v12);
  v16 = (_OWORD *)(v15 + 332);
  *(_OWORD *)(v15 + 332) = xmmword_1B66A1E20;
  *(_QWORD *)v15 = &off_1E69CD5C8;
  v17 = (IR::IRProcessor **)(v15 + 352);
  v18 = (IR::FixedIntegerDelay *)(v15 + 392);
  *(_BYTE *)(v15 + 448) = 0;
  *(_QWORD *)(v15 + 464) = 0;
  *(_QWORD *)(v15 + 472) = 0;
  *(_QWORD *)(v15 + 456) = 0;
  *(_OWORD *)(v15 + 352) = 0u;
  *(_OWORD *)(v15 + 368) = 0u;
  *(_OWORD *)(v15 + 377) = 0u;
  IR::IRDataAttributes::IRDataAttributes(v15 + 480, a3);
  *(_DWORD *)(v12 + 632) = 0;
  *(_QWORD *)(v12 + 640) = 0;
  *(_QWORD *)(v12 + 656) = 0;
  *(_QWORD *)(v12 + 648) = 0;
  *(_BYTE *)(v12 + 664) = (_BYTE)a4;
  *(_BYTE *)(v12 + 665) = v14;
  *(_DWORD *)(v12 + 668) = -1;
  *(_OWORD *)(v12 + 672) = 0u;
  *(_OWORD *)(v12 + 688) = 0u;
  *(_OWORD *)(v12 + 704) = 0u;
  *(_OWORD *)(v12 + 720) = 0u;
  *(_OWORD *)(v12 + 736) = 0u;
  *(_QWORD *)(v12 + 752) = 0;
  v19 = (IR::IRProcessor *)operator new();
  IR::IRProcessor::IRProcessor(v19, (const IR::IRDataAttributes *)a2, 0);
  v20 = *v17;
  *v17 = v19;
  if (v20)
    (*(void (**)(IR::IRProcessor *))(*(_QWORD *)v20 + 8))(v20);
  if (cf)
  {
    CFRetain(cf);
    v21 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[19]>((const __CFDictionary *)cf, "RadiusNearFieldMin");
    if (((unint64_t)v21 & 0xFF00000000) != 0)
      v22 = *(float *)&v21;
    else
      v22 = 0.17;
    v23 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[17]>((const __CFDictionary *)cf, "RadiusMonoPanned");
    if (((unint64_t)v23 & 0xFF00000000) != 0)
      v24 = *(float *)&v23;
    else
      v24 = 0.08;
    v25 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[13]>((const __CFDictionary *)cf, "RadiusInHead");
    if (((unint64_t)v25 & 0xFF00000000) != 0)
      v26 = *(float *)&v25;
    else
      v26 = 0.03;
    v27 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[13]>((const __CFDictionary *)cf, "InHeadGaindB");
    if (((unint64_t)v27 & 0xFF00000000) != 0)
      v28 = __exp10f(*(float *)&v27 / 20.0);
    else
      v28 = 1.4125;
    if (v24 <= v22)
      v29 = v24;
    else
      v29 = v22;
    if (v26 <= v29)
      v30 = v26;
    else
      v30 = v29;
    *(float *)(v12 + 332) = v30;
    *(float *)(v12 + 336) = v29;
    *(float *)(v12 + 340) = v22;
    *(float *)(v12 + 344) = v28;
    CFRelease(cf);
  }
  else
  {
    *v16 = xmmword_1B66A1E30;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    v31 = *(_DWORD *)(a2 + 12);
    if (v31)
    {
      if (*(_BYTE *)(v12 + 448))
      {
        v32 = *(void **)(v12 + 424);
        if (v32)
        {
          *(_QWORD *)(v12 + 432) = v32;
          operator delete(v32);
        }
        v33 = *(void **)(v12 + 400);
        if (v33)
        {
          *(_QWORD *)(v12 + 408) = v33;
          operator delete(v33);
        }
        *(_BYTE *)(v12 + 448) = 0;
        v31 = *(_DWORD *)(a2 + 12);
      }
      IR::FixedIntegerDelay::FixedIntegerDelay(v18, v31, 1);
      *(_BYTE *)(v12 + 448) = 1;
    }
  }
  *a1 = v12;
  if (cf)
    CFRelease(cf);
}

void sub_1B62A36C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  IR::IRDataAttributes *v12;
  uint64_t *v13;
  void *v15;
  void *v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v15 = *(void **)(v10 + 736);
  if (v15)
  {
    *(_QWORD *)(v10 + 744) = v15;
    operator delete(v15);
  }
  std::unique_ptr<IR::DelayLine>::reset[abi:ne180100]((IR::DelayLine **)(v10 + 728), 0);
  v16 = *(void **)(v10 + 688);
  if (v16)
  {
    *(_QWORD *)(v10 + 696) = v16;
    operator delete(v16);
  }
  v17 = (void **)(v10 + 640);
  v18 = *(_QWORD *)(v10 + 680);
  *(_QWORD *)(v10 + 680) = 0;
  if (v18)
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v18);
  v19 = (void **)(v10 + 456);
  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v10 + 648) = v20;
    operator delete(v20);
  }
  IR::IRDataAttributes::~IRDataAttributes(v12);
  v21 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v10 + 464) = v21;
    operator delete(v21);
  }
  std::__optional_destruct_base<IR::FixedIntegerDelay,false>::~__optional_destruct_base[abi:ne180100](v11);
  a10 = (void **)(v10 + 368);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v22 = *(_QWORD *)(v10 + 360);
  *(_QWORD *)(v10 + 360) = 0;
  if (v22)
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v22);
  v23 = *v13;
  *v13 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  Spatializer::~Spatializer((Spatializer *)v10);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a9);
  MEMORY[0x1BCC95CEC](v10, 0x10E1C4033873393);
  _Unwind_Resume(a1);
}

uint64_t IR::DynamicIRProcessor::DynamicIRProcessor(uint64_t a1, uint64_t a2, char a3, char a4, char a5, _QWORD *a6, float a7)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1161527296;
  IR::IRDataAttributes::IRDataAttributes(a1 + 24, a2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 248) = *a6;
  *(_BYTE *)(a1 + 176) = a3;
  *(_BYTE *)(a1 + 177) = a4;
  *(_BYTE *)(a1 + 178) = a5;
  *(_BYTE *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 216) = 0x8000000000;
  *(_DWORD *)(a1 + 224) = -1;
  *(float *)(a1 + 228) = a7;
  *(_WORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 234) = 1;
  *(_QWORD *)(a1 + 236) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  v13 = a6[1];
  *(_QWORD *)(a1 + 256) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 264));
  return a1;
}

void sub_1B62A38E0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  IR::IRDataAttributes *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v3);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)v1[24]);
  IR::IRDataAttributes::~IRDataAttributes(v2);
  v5 = v1[1];
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v1;
  *v1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void std::default_delete<IR::DynamicIRProcessor>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 31));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)a1[24]);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(a1 + 3));
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::make_unique[abi:ne180100]<HRTFXTCSpatializer,IR::IRDataAttributes &,std::atomic<BOOL> const&>(Spatializer **a1, const IR::IRDataAttributes *a2, unsigned __int8 *a3)
{
  Spatializer *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t *v9;
  IR::IRProcessor *v10;
  uint64_t result;

  v6 = (Spatializer *)operator new();
  v7 = atomic_load(a3);
  LOBYTE(a3) = v7 & 1;
  Spatializer::Spatializer(v6);
  *(_OWORD *)(v8 + 332) = xmmword_1B66A1E20;
  *(_QWORD *)v8 = &off_1E69CB9E0;
  v9 = (uint64_t *)(v8 + 352);
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_DWORD *)(v8 + 416) = 0;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_BYTE *)(v8 + 448) = 0;
  *(_DWORD *)(v8 + 452) = -1;
  *(_BYTE *)(v8 + 456) = (_BYTE)a3;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_QWORD *)(v8 + 512) = 0;
  v10 = (IR::IRProcessor *)operator new();
  IR::IRProcessor::IRProcessor(v10, a2, 0);
  result = *v9;
  *v9 = (uint64_t)v10;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_DWORD *)v6 + 63) = 1;
  *a1 = v6;
  return result;
}

void sub_1B62A3AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;

  MEMORY[0x1BCC95CEC](v11, 0x10E1C40AE0E3EF2);
  v14 = *(void **)(v10 + 496);
  if (v14)
  {
    *(_QWORD *)(v10 + 504) = v14;
    operator delete(v14);
  }
  v15 = (void **)(v10 + 464);
  v16 = *(_QWORD *)(v10 + 488);
  *(_QWORD *)(v10 + 488) = 0;
  if (v16)
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v16);
  v17 = (void **)(v10 + 424);
  v18 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v10 + 472) = v18;
    operator delete(v18);
  }
  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v10 + 432) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v10 + 392);
  if (v20)
  {
    *(_QWORD *)(v10 + 400) = v20;
    operator delete(v20);
  }
  v21 = *(_QWORD **)(v10 + 384);
  *(_QWORD *)(v10 + 384) = 0;
  if (v21)
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v21);
  a10 = (void **)(v10 + 360);
  std::vector<std::unique_ptr<IR::DelayLine>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v22 = *v12;
  *v12 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  Spatializer::~Spatializer((Spatializer *)v10);
  MEMORY[0x1BCC95CEC]();
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<IR::DynamicIRProcessor,IR::IRDataAttributes &,BOOL,float,std::atomic<BOOL> const&,std::atomic<BOOL> const&,std::shared_ptr<IR::OptimizedBinauralHOADecodingParams>>(uint64_t *a1, uint64_t a2, char *a3, float *a4, unsigned __int8 *a5, unsigned __int8 *a6, __int128 *a7)
{
  uint64_t v14;
  char v15;
  float v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  v14 = operator new();
  v15 = *a3;
  v16 = *a4;
  v17 = atomic_load(a5);
  v18 = v17 & 1;
  v19 = atomic_load(a6);
  v23 = *a7;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  IR::DynamicIRProcessor::DynamicIRProcessor(v14, a2, v15, v18, v19 & 1, &v23, v16);
  *a1 = v14;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1B62A3C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1BCC95CEC](v3, 0x1060C406466AA75);
  _Unwind_Resume(a1);
}

_QWORD *Spatializer::getParams(Spatializer *this, uint64_t a2)
{
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)this = *(_OWORD *)(a2 + 48);
  *((_OWORD *)this + 1) = v4;
  v6 = *(_QWORD *)(a2 + 80);
  v5 = *(const void **)(a2 + 88);
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<AUSM::ExclusionZone>::__init_with_size[abi:ne180100]<AUSM::ExclusionZone*,AUSM::ExclusionZone*>((_QWORD *)this + 5, v5, *(_QWORD *)(a2 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 96) - (_QWORD)v5) >> 2));
  v7 = *(_OWORD *)(a2 + 112);
  *((_QWORD *)this + 11) = 0;
  *((_OWORD *)this + 4) = v7;
  *(_QWORD *)((char *)this + 77) = *(_QWORD *)(a2 + 125);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 11, *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 2);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 14, *(const void **)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 2);
}

void sub_1B62A3D64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 96) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void SpatializerParams::~SpatializerParams(SpatializerParams *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
}

void AUSpatialMixerV2ChannelProcessor::updateSpatializationParameters(AUSpatialMixerV2ChannelProcessor *this)
{
  __int128 v2;
  float32x4_t v3;
  __int128 v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float Parameter;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  float v52;
  uint64_t v53;
  int v54;
  int8x16_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  BOOL v73;
  char v74;
  uint64_t v75;
  _BOOL4 v76;
  _QWORD *v77;
  std::string *data;
  const char *v79;
  NSObject *v80;
  uint32_t v81;
  _QWORD *v82;
  std::string *v83;
  float Coordinate;
  float v85;
  float v86;
  float v87;
  float v88;
  NSObject *v89;
  float v90;
  _QWORD *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float32x4_t v98;
  std::string __p;
  uint8_t buf[4];
  _QWORD *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  float32x4_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  float32x4_t v122;
  __int128 v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v116 = *((float32x4_t *)this + 95);
  v2 = *((_OWORD *)this + 99);
  v3 = *((float32x4_t *)this + 101);
  v121 = *((_OWORD *)this + 100);
  v122 = v3;
  v123 = *((_OWORD *)this + 102);
  v4 = *((_OWORD *)this + 97);
  v117 = *((_OWORD *)this + 96);
  v118 = v4;
  v119 = *((_OWORD *)this + 98);
  v120 = v2;
  v5 = atan2f(v116.f32[1], v116.f32[0]) * 57.296;
  v6 = hypotf(v116.f32[0], v116.f32[1]);
  v7 = atan2f(-v116.f32[2], v6) * 57.296;
  v8 = sqrtf((float)((float)(v116.f32[1] * v116.f32[1]) + (float)(v116.f32[0] * v116.f32[0]))+ (float)(v116.f32[2] * v116.f32[2]));
  if (*(_BYTE *)(*((_QWORD *)this + 120) + 163))
    v9 = -1.0;
  else
    v9 = 1.0;
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 56))(*((_QWORD *)this + 60), v5 * v9);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 64))(*((_QWORD *)this + 60), v7);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 72))(*((_QWORD *)this + 60), v8);
  AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate((uint64_t **)this, 0, v5 * v9);
  AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate((uint64_t **)this, 1u, v7);
  AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate((uint64_t **)this, 2u, v8);
  if ((_BYTE)v117)
  {
    v10 = *((_QWORD *)this + 61);
    if (v10)
    {
      v11 = atan2f(*((float *)&v118 + 1), *(float *)&v118) * 57.296;
      v12 = hypotf(*(float *)&v118, *((float *)&v118 + 1));
      v13 = atan2f(-*((float *)&v118 + 2), v12) * 57.296;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 56))(v10, v9 * v11);
      (*(void (**)(_QWORD, float))(**((_QWORD **)this + 61) + 64))(*((_QWORD *)this + 61), v13);
      (*(void (**)(_QWORD, float))(**((_QWORD **)this + 61) + 72))(*((_QWORD *)this + 61), sqrtf((float)((float)(*((float *)&v118 + 1) * *((float *)&v118 + 1)) + (float)(*(float *)&v118 * *(float *)&v118))+ (float)(*((float *)&v118 + 2) * *((float *)&v118 + 2))));
    }
    v14 = *((_QWORD *)this + 62);
    if (v14)
    {
      v15 = atan2f(*((float *)&v119 + 1), *(float *)&v119) * 57.296;
      v16 = hypotf(*(float *)&v119, *((float *)&v119 + 1));
      v17 = atan2f(-*((float *)&v119 + 2), v16) * 57.296;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 56))(v14, v9 * v15);
      (*(void (**)(_QWORD, float))(**((_QWORD **)this + 62) + 64))(*((_QWORD *)this + 62), v17);
      (*(void (**)(_QWORD, float))(**((_QWORD **)this + 62) + 72))(*((_QWORD *)this + 62), sqrtf((float)((float)(*((float *)&v119 + 1) * *((float *)&v119 + 1)) + (float)(*(float *)&v119 * *(float *)&v119))+ (float)(*((float *)&v119 + 2) * *((float *)&v119 + 2))));
    }
    v18 = DWORD1(v117);
  }
  else
  {
    v18 = 0;
  }
  *((_DWORD *)this + 126) = v18;
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 80))(*((_QWORD *)this + 60), *((float *)&v120 + 1));
  v19 = *((_QWORD *)this + 61);
  if (v19)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v19 + 80))(v19, *((float *)&v120 + 1));
  v20 = *((_QWORD *)this + 62);
  if (v20)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 80))(v20, *((float *)&v120 + 1));
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 88))(*((_QWORD *)this + 60), *((float *)&v120 + 2));
  v21 = *((_QWORD *)this + 61);
  if (v21)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v21 + 88))(v21, *((float *)&v120 + 2));
  v22 = *((_QWORD *)this + 62);
  if (v22)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v22 + 88))(v22, *((float *)&v120 + 2));
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 96))(*((_QWORD *)this + 60), *(float *)&v120);
  v23 = *((_QWORD *)this + 61);
  if (v23)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v23 + 96))(v23, *(float *)&v120);
  v24 = *((_QWORD *)this + 62);
  if (v24)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v24 + 96))(v24, *(float *)&v120);
  Parameter = ausdk::AUElement::GetParameter(**((ausdk::AUElement ***)this + 120), 0x21u);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 60) + 112))(*((_QWORD *)this + 60));
  v26 = *((_QWORD *)this + 61);
  if (v26)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v26 + 112))(v26, Parameter);
  v27 = *((_QWORD *)this + 62);
  if (v27)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v27 + 112))(v27, Parameter);
  v28 = *((_QWORD *)this + 120);
  if (*(_BYTE *)(v28 + 160))
    v29 = *(unsigned __int8 *)(v28 + 161) == 0;
  else
    v29 = 0;
  (*(void (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 60) + 144))(*((_QWORD *)this + 60), v29);
  v30 = *((_QWORD *)this + 61);
  if (v30)
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v30 + 144))(v30, v29);
  v31 = *((_QWORD *)this + 62);
  if (v31)
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v31 + 144))(v31, v29);
  v32 = *(unsigned int *)(*((_QWORD *)this + 120) + 64);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 60) + 120))(*((_QWORD *)this + 60), v32);
  v33 = *((_QWORD *)this + 61);
  if (v33)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 120))(v33, v32);
  v34 = *((_QWORD *)this + 62);
  if (v34)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 120))(v34, v32);
  v35 = ausdk::AUElement::GetParameter(**((ausdk::AUElement ***)this + 120), 0x27u);
  (*(void (**)(_QWORD, BOOL))(**((_QWORD **)this + 60) + 128))(*((_QWORD *)this + 60), v35 != 0.0);
  v36 = *((_QWORD *)this + 61);
  if (v36)
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v36 + 128))(v36, v35 != 0.0);
  v37 = *((_QWORD *)this + 62);
  if (v37)
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v37 + 128))(v37, v35 != 0.0);
  v38 = ausdk::AUElement::GetParameter(**((ausdk::AUElement ***)this + 120), 0x28u);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 60) + 136))(*((_QWORD *)this + 60));
  v39 = *((_QWORD *)this + 61);
  if (v39)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v39 + 136))(v39, v38);
  v40 = *((_QWORD *)this + 62);
  if (v40)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v40 + 136))(v40, v38);
  v41 = *(unsigned int *)(*((_QWORD *)this + 121) + 536);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 60) + 168))(*((_QWORD *)this + 60), v41);
  v42 = *((_QWORD *)this + 61);
  if (v42)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 168))(v42, v41);
  v43 = *((_QWORD *)this + 62);
  if (v43)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 168))(v43, v41);
  v44 = *(float *)(*((_QWORD *)this + 120) + 184);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 184))(*((_QWORD *)this + 60), v44);
  v45 = *((_QWORD *)this + 61);
  if (v45)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v45 + 184))(v45, v44);
  v46 = *((_QWORD *)this + 62);
  if (v46)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v46 + 184))(v46, v44);
  v47 = *(float *)(*((_QWORD *)this + 120) + 188);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 60) + 192))(*((_QWORD *)this + 60), v47);
  v48 = *((_QWORD *)this + 61);
  if (v48)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v48 + 192))(v48, v47);
  v49 = *((_QWORD *)this + 62);
  if (v49)
    (*(void (**)(uint64_t, float))(*(_QWORD *)v49 + 192))(v49, v47);
  v50 = *((_QWORD *)this + 106);
  if (v50)
  {
    v51 = vmulq_f32(*((float32x4_t *)this + 63), *((float32x4_t *)this + 63));
    v52 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0])* 2.907;
    if (*((float *)this + 148) < v52)
      v52 = *((float *)this + 148);
    IR::DelayLine::setDelay(v50, roundf(*((float *)this + 135) * (float)(v52 / 1000.0)));
  }
  v53 = *((_QWORD *)this + 17);
  v54 = v121;
  if (v53 && (_BYTE)v121)
  {
    v55 = (int8x16_t)vmulq_f32(v122, v122);
    *(float32x2_t *)v55.i8 = vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL));
    v55.i32[0] = vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1)).u32[0];
    v56 = vrecpe_f32((float32x2_t)v55.u32[0]);
    v57 = vmul_f32(v56, vrecps_f32((float32x2_t)v55.u32[0], v56));
    v58 = vmulq_n_f32(vmulq_f32(v122, (float32x4_t)xmmword_1B66A07B0), vmul_f32(v57, vrecps_f32((float32x2_t)v55.u32[0], v57)).f32[0]);
    v59 = vmulq_f32(v58, (float32x4_t)xmmword_1B66A07B0);
    v60 = (int32x4_t)vnegq_f32(v59);
    v61 = (int8x16_t)vtrn2q_s32((int32x4_t)v59, vtrn1q_s32((int32x4_t)v59, v60));
    v62 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v60, 8uLL), (float32x2_t)*(_OWORD *)&vnegq_f32(v116), 1);
    v63 = (float32x4_t)vrev64q_s32((int32x4_t)v59);
    v63.i32[0] = v60.i32[1];
    v63.i32[3] = v60.i32[2];
    v64 = vmlsq_laneq_f32(vmlsq_lane_f32(v62, (float32x4_t)vextq_s8(v61, v61, 8uLL), *(float32x2_t *)v116.f32, 0), v63, v116, 2);
    v65 = (int32x4_t)vnegq_f32(v64);
    v66 = (int8x16_t)vtrn2q_s32((int32x4_t)v64, vtrn1q_s32((int32x4_t)v64, v65));
    v67 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v64, (int8x16_t)v65, 8uLL), *(float32x2_t *)v58.f32, 1), (float32x4_t)vextq_s8(v66, v66, 8uLL), v58.f32[0]);
    v68 = (float32x4_t)vrev64q_s32((int32x4_t)v64);
    v68.i32[0] = v65.i32[1];
    v68.i32[3] = v65.i32[2];
    v98 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v64, v58, 3), v68, v58, 2), v67);
    v69 = atan2f(v98.f32[1], v98.f32[0]);
    v70 = hypotf(v98.f32[0], v98.f32[1]);
    v71 = atan2f(-v98.f32[2], v70);
    *(_DWORD *)buf = 0;
    atomic_store(COERCE_UNSIGNED_INT(v69 * 57.296), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v53 + 184), 0, buf)+ 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)(v53 + 208));
    v72 = *((_QWORD *)this + 17);
    *(_DWORD *)buf = 1;
    atomic_store(COERCE_UNSIGNED_INT(v71 * 57.296), (unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)(v72 + 184), 1u, buf)+ 8);
    __dmb(0xBu);
    atomic_store(1u, (unsigned __int8 *)(v72 + 208));
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2512) & 2) != 0)
  {
    if (*((_QWORD *)this + 17))
      v73 = v54 == 0;
    else
      v73 = 1;
    v74 = v73;
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v75 = getAUSMV2Log(void)::gLog;
    v76 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    if ((v74 & 1) != 0)
    {
      if (v76)
      {
        v77 = (_QWORD *)((char *)this + 888);
        if (*((char *)this + 911) < 0)
          v77 = (_QWORD *)*v77;
        AUSM::ObjectParameters::print(&__p, &v116);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          *(double *)&data = COERCE_DOUBLE(&__p);
        else
          data = (std::string *)__p.__r_.__value_.__l.__data_;
        *(_DWORD *)buf = 136315650;
        v101 = v77;
        v102 = 2080;
        v103 = "updateSpatializationParameters";
        v104 = 2080;
        v105 = *(double *)&data;
        v79 = "[%s|%s] AUSM_VERBOSE: %s";
        v80 = v75;
        v81 = 32;
LABEL_88:
        _os_log_impl(&dword_1B5ED0000, v80, OS_LOG_TYPE_DEFAULT, v79, buf, v81);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (v76)
    {
      v82 = (_QWORD *)((char *)this + 888);
      if (*((char *)this + 911) < 0)
        v82 = (_QWORD *)*v82;
      *(double *)&v83 = COERCE_DOUBLE(&__p);
      AUSM::ObjectParameters::print(&__p, &v116);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v83 = (std::string *)__p.__r_.__value_.__l.__data_;
      Coordinate = IR::DynamicIRProcessor::getCoordinate(*((_QWORD *)this + 17), 0);
      v85 = IR::DynamicIRProcessor::getCoordinate(*((_QWORD *)this + 17), 1u);
      *(_DWORD *)buf = 136316162;
      v101 = v82;
      v102 = 2080;
      v103 = "updateSpatializationParameters";
      v104 = 2080;
      v105 = *(double *)&v83;
      v106 = 2048;
      v107 = Coordinate;
      v108 = 2048;
      v109 = v85;
      v79 = "[%s|%s] AUSM_VERBOSE: %s, dirAz=%.1f, dirEl=%.1f";
      v80 = v75;
      v81 = 52;
      goto LABEL_88;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 109) + 232) + 2512) & 2) != 0)
    {
      v86 = *((float *)this + 409);
      v87 = *(float *)(*((_QWORD *)this + 121) + 488);
      v88 = *((float *)this + 408);
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v89 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v90 = v86 * v87;
        v91 = (_QWORD *)((char *)this + 888);
        if (*((char *)this + 911) < 0)
          v91 = (_QWORD *)*v91;
        v92 = log10f(v90 * v88);
        v93 = log10f(v90);
        v94 = log10f(v86);
        v95 = log10f(*(float *)(*((_QWORD *)this + 121) + 528));
        v96 = ausdk::AUElement::GetParameter(**((ausdk::AUElement ***)this + 120), 8u);
        *(_DWORD *)buf = 136316930;
        v97 = *(float *)(*((_QWORD *)this + 120) + 168);
        v101 = v91;
        v102 = 2080;
        v103 = "updateSpatializationParameters";
        v104 = 2048;
        v105 = (float)(v92 * 20.0);
        v106 = 2048;
        v107 = (float)(v93 * 20.0);
        v108 = 2048;
        v109 = (float)(v94 * 20.0);
        v110 = 2048;
        v111 = (float)(v95 * 20.0);
        v112 = 2048;
        v113 = (float)(v96 * 0.01);
        v114 = 2048;
        v115 = v97;
        _os_log_impl(&dword_1B5ED0000, v89, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE: directGaindB=%.1f, sceneReverbGaindB=%.1f, postProcReverbGaindB=%.1f, sceneDRRdB=%.1f, sceneBlend=%.2f, postProcBlend=%.2f", buf, 0x52u);
      }
    }
  }
}

void sub_1B62A48FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

caulk::pooled_semaphore_mutex **std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100](caulk::pooled_semaphore_mutex **a1)
{
  caulk::pooled_semaphore_mutex *v2;

  v2 = a1[1];
  caulk::pooled_semaphore_mutex::_unlock(*a1);
  caulk::pooled_semaphore_mutex::_unlock(v2);
  return a1;
}

uint64_t **AUSpatialMixerV2ChannelProcessor::setERProcessorIRDataCoordinate(uint64_t **result, unsigned int a2, float a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = result;
  v6 = result[18];
  if (v6)
  {
    if (*((_BYTE *)result[116] + 40))
    {
      *((_DWORD *)v6 + 56) = *((_DWORD *)result + 221);
    }
    else
    {
      v9 = a2;
      result = std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v6 + 23, a2, &v9);
      atomic_store(LODWORD(a3), (unsigned int *)result + 8);
      __dmb(0xBu);
      atomic_store(1u, (unsigned __int8 *)v6 + 208);
    }
  }
  v7 = v5[19];
  if (v7)
  {
    if (*((_BYTE *)v5[116] + 40))
    {
      *((_DWORD *)v7 + 56) = *((_DWORD *)v5 + 221);
    }
    else
    {
      v10 = a2;
      result = std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v7 + 23, a2, &v10);
      atomic_store(LODWORD(a3), (unsigned int *)result + 8);
      __dmb(0xBu);
      atomic_store(1u, (unsigned __int8 *)v7 + 208);
    }
  }
  v8 = v5[20];
  if (v8)
  {
    if (*((_BYTE *)v5[116] + 40))
    {
      *((_DWORD *)v8 + 56) = *((_DWORD *)v5 + 221);
    }
    else
    {
      v11 = a2;
      result = std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>((uint64_t **)v8 + 23, a2, &v11);
      atomic_store(LODWORD(a3), (unsigned int *)result + 8);
      __dmb(0xBu);
      atomic_store(1u, (unsigned __int8 *)v8 + 208);
    }
  }
  return result;
}

void AUSM::ObjectParameters::print(std::string *this, float32x4_t *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  AUSM *v14;
  float32x4_t v15;
  float32x4_t v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  float v33;
  float v34;
  const std::string::value_type *p_p;
  std::string::size_type v36;
  float v37;
  void *__p;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD v44[4];
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2->f32[0];
  v4 = a2->f32[1];
  v6 = atan2f(v4, a2->f32[0]) * 57.296;
  v7 = a2->f32[2];
  v8 = hypotf(v5, v4);
  v9 = atan2f(-v7, v8) * 57.296;
  v10 = sqrtf((float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v7 * v7));
  v11 = log10f(a2[7].f32[1]) * 20.0;
  v12 = log10f(a2[7].f32[0]) * 20.0;
  v13 = log10f(a2[7].f32[2]);
  *(float *)v44 = v6;
  v45 = v9;
  v46 = v10;
  *(float *)&v47 = v11;
  v50 = 311731497;
  v48 = v12;
  v49 = v13 * 20.0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  v41 = 6;
  v42 = v44;
  v43 = 311731497;
  v14 = (AUSM *)std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)this, "az={:.1f}, el={:.1f}, r={:.2f}, gaindB={:.1f}, distGaindB={:.1f}, DRRdB={:.1f}", 78, &v41);
  v15 = a2[4];
  v16 = vmulq_f32(v15, v15);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) > 0.001)
  {
    v44[0] = HIDWORD(a2[4].i64[0]);
    v45 = v15.f32[2];
    v47 = 9513;
    v46 = v15.f32[0];
    v39 = 0;
    v40 = 0;
    __p = 0;
    v41 = 3;
    v42 = v44;
    v43 = 9513;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&__p, " -- size: w={:.2f}, h={:.2f}, d={:.2f}", 38, &v41);
    v17 = v40 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v18 = v40 >= 0 ? HIBYTE(v40) : v39;
    v14 = (AUSM *)std::string::append(this, v17, v18);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  if (a2[1].i8[0])
  {
    v20 = a2[2].f32[0];
    v19 = a2[2].f32[1];
    v37 = atan2f(v19, v20) * 57.296;
    v21 = a2[2].f32[2];
    v22 = hypotf(v20, v19);
    v23 = atan2f(-v21, v22) * 57.296;
    v24 = sqrtf((float)((float)(v19 * v19) + (float)(v20 * v20)) + (float)(v21 * v21));
    v26 = a2[3].f32[0];
    v25 = a2[3].f32[1];
    v27 = atan2f(v25, v26) * 57.296;
    v28 = a2[3].f32[2];
    v29 = hypotf(v26, v25);
    v30 = atan2f(-v28, v29);
    v44[0] = a2[1].i32[1];
    v45 = v37;
    v46 = v23;
    *(float *)&v47 = v24;
    v48 = v27;
    v51 = 0x25294A529;
    v49 = v30 * 57.296;
    LODWORD(v50) = sqrtf((float)((float)(v25 * v25) + (float)(v26 * v26)) + (float)(v28 * v28));
    v39 = 0;
    v40 = 0;
    __p = 0;
    v41 = 7;
    v42 = v44;
    v43 = 0x25294A529;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&__p, " -- div={:.2f} left: az={:.1f}, el={:.1f}, r={:.1f}; right: az={:.1f}, el={:.1f}, r={:.1f}",
      90,
      &v41);
    v31 = v40 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    v32 = v40 >= 0 ? HIBYTE(v40) : v39;
    v14 = (AUSM *)std::string::append(this, v31, v32);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  if (a2[5].i8[0])
  {
    v44[0] = AUSM::auCoordQuaternionToEuler(v14, a2[6]);
    v45 = v33;
    v47 = 9513;
    v46 = v34;
    v39 = 0;
    v40 = 0;
    __p = 0;
    v41 = 3;
    v42 = v44;
    v43 = 9513;
    std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)&__p, " -- yaw={:.1f} pitch={:.1f} roll={:.1f}", 39, &v41);
    if (v40 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v40 >= 0)
      v36 = HIBYTE(v40);
    else
      v36 = v39;
    std::string::append(this, p_p, v36);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
}

void sub_1B62A4E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

float IR::DynamicIRProcessor::getCoordinate(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  float result;
  uint64_t **v4;
  unsigned int v5;
  unsigned int v7;

  v7 = a2;
  v2 = *(uint64_t **)(a1 + 192);
  result = 0.0;
  if (v2)
  {
    v4 = (uint64_t **)(a1 + 184);
    do
    {
      v5 = *((_DWORD *)v2 + 7);
      if (v5 <= a2)
      {
        if (v5 >= a2)
          return COERCE_FLOAT(atomic_load((unsigned int *)std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>(v4, a2, &v7)+ 8));
        ++v2;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::__map_value_compare<IR::IRCoordinateType,std::__value_type<IR::IRCoordinateType,std::atomic<float>>,std::less<IR::IRCoordinateType>,true>,std::allocator<std::__value_type<IR::IRCoordinateType,std::atomic<float>>>>::__emplace_unique_key_args<IR::IRCoordinateType,std::piecewise_construct_t const&,std::tuple<IR::IRCoordinateType const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::vector<std::unique_ptr<AllPassComb>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<AllPassComb>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<AllPassComb>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1BCC95CECLL);
}

void AUSpatialMixerV2OcclusionFilter::initialize(IIRFilterFloat32 **a1, const AudioStreamBasicDescription *a2)
{
  IIRFilterFloat32 *v4;
  IIRFilterFloat32 *v5;
  float mSampleRate;
  unsigned int v7;
  float v8;

  v4 = NewIIRFilter(a2, a2, (const CAStreamBasicDescription *)1);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(IIRFilterFloat32 *))(*(_QWORD *)v5 + 8))(v5);
  mSampleRate = a2->mSampleRate;
  *((float *)a1 + 2) = mSampleRate;
  v7 = atomic_load((unsigned int *)a1 + 4);
  *((_DWORD *)a1 + 3) = v7;
  v8 = COERCE_FLOAT(atomic_load((unsigned int *)a1 + 4));
  AUSpatialMixerV2OcclusionFilter::updateFilter((AUSpatialMixerV2OcclusionFilter *)a1, v8);
}

uint64_t AUSM::AsymmetricAccessContainer<AUSM::ObjectParameters>::setNonBlocking(_OWORD *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v12;
  char v13;

  v12 = a1 + 8;
  v4 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 8));
  v13 = v4;
  if ((_DWORD)v4)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    *a1 = v5;
    a1[1] = v6;
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    *(_OWORD *)((char *)a1 + 108) = *(__int128 *)((char *)a2 + 108);
    a1[5] = v9;
    a1[6] = v10;
    a1[4] = v8;
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
  return v4;
}

float *AUSpatialMixerV2ChannelProcessor::setDelay(float *this, float a2)
{
  float *v3;
  float v4;
  unsigned int v5;
  _QWORD *v6;
  IR::FixedIntegerDelay *v7;
  float *v8;
  char v9;

  if (this[149] != a2)
  {
    v3 = this;
    v4 = this[135];
    if (v4 <= 0.0)
      v5 = 0;
    else
      v5 = fmaxf(roundf((float)(a2 / 1000.0) * v4), 0.0);
    v8 = this + 193;
    v9 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 193));
    v6 = (_QWORD *)*((_QWORD *)v3 + 76);
    if (v6)
    {
      if (*(_DWORD *)v6 != v5)
      {
        if (!v5)
        {
          *((_QWORD *)v3 + 76) = 0;
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
    else if (v5)
    {
LABEL_10:
      v7 = (IR::FixedIntegerDelay *)operator new();
      IR::FixedIntegerDelay::FixedIntegerDelay(v7, v5, 1);
      v6 = (_QWORD *)*((_QWORD *)v3 + 76);
      *((_QWORD *)v3 + 76) = v7;
      if (v6)
LABEL_11:
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v6);
    }
    this = (float *)std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
    v3[149] = a2;
  }
  return this;
}

void sub_1B62A5258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1BCC95CEC](v9, 0x1080C40C92309C1);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::reset(AUSpatialMixerV2ChannelProcessor *this)
{
  uint64_t v2;
  IR::DynamicIRProcessor *v3;
  IR::DynamicIRProcessor *v4;
  IR::DynamicIRProcessor *v5;
  IR::FixedIntegerDelay *v6;
  IR::DelayLine *v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  float v11;
  unsigned __int8 v12;
  void *v13;
  uint64_t v14;
  char *v16;
  char v17;

  v16 = (char *)this + 772;
  v17 = 1;
  caulk::pooled_semaphore_mutex::_lock((AUSpatialMixerV2ChannelProcessor *)((char *)this + 772));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 60) + 264))(*((_QWORD *)this + 60));
  v2 = *((_QWORD *)this + 61);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 62) + 264))(*((_QWORD *)this + 62));
  }
  v3 = (IR::DynamicIRProcessor *)*((_QWORD *)this + 17);
  if (v3)
    IR::DynamicIRProcessor::reset(v3);
  AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(this, 1);
  AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(this, 0);
  v4 = (IR::DynamicIRProcessor *)*((_QWORD *)this + 19);
  if (v4)
    IR::DynamicIRProcessor::reset(v4);
  v5 = (IR::DynamicIRProcessor *)*((_QWORD *)this + 20);
  if (v5)
    IR::DynamicIRProcessor::reset(v5);
  v6 = (IR::FixedIntegerDelay *)*((_QWORD *)this + 76);
  if (v6)
    IR::FixedIntegerDelay::reset(v6);
  v7 = (IR::DelayLine *)*((_QWORD *)this + 106);
  if (v7)
    IR::DelayLine::reset(v7);
  v8 = atomic_load((unsigned int *)this + 26);
  *((_DWORD *)this + 25) = v8;
  v9 = COERCE_FLOAT(atomic_load((unsigned int *)this + 26));
  AUSpatialMixerV2OcclusionFilter::updateFilter((AUSpatialMixerV2ChannelProcessor *)((char *)this + 88), v9);
  v10 = atomic_load((unsigned int *)this + 32);
  *((_DWORD *)this + 31) = v10;
  v11 = COERCE_FLOAT(atomic_load((unsigned int *)this + 32));
  AUSpatialMixerV2OcclusionFilter::updateFilter((AUSpatialMixerV2ChannelProcessor *)((char *)this + 112), v11);
  *((_DWORD *)this + 140) = 0;
  *((_BYTE *)this + 564) = 0;
  *((_DWORD *)this + 143) = 0;
  *((_BYTE *)this + 576) = 0;
  *((_DWORD *)this + 146) = 0;
  *((_BYTE *)this + 588) = 0;
  *((_BYTE *)this + 536) = 1;
  *((_DWORD *)this + 195) = -1;
  v12 = atomic_load((unsigned __int8 *)this + 792);
  if ((v12 & 1) != 0)
  {
    v13 = (void *)*((_QWORD *)this + 102);
    v14 = *((_QWORD *)this + 103) - (_QWORD)v13;
    if (v14 >= 1)
      bzero(v13, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v16);
}

void sub_1B62A53F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::resetReverbPrivate(_QWORD *a1, int a2)
{
  caulk::pooled_semaphore_mutex *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IR::DynamicIRProcessor *v12;
  IR::DynamicIRProcessor *v13;

  v4 = (caulk::pooled_semaphore_mutex *)(a1 + 97);
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 97));
  for (i = 0; i != 3; ++i)
  {
    if (i == a2 || i == 2)
    {
      v6 = (uint64_t)&a1[3 * i + 1];
      v7 = *(uint64_t **)v6;
      v8 = *(uint64_t **)(v6 + 8);
      while (v7 != v8)
      {
        v9 = *v7;
        if (*v7)
        {
          v10 = *(void **)(v9 + 8);
          v11 = *(_QWORD *)(v9 + 16) - (_QWORD)v10;
          if (v11 >= 1)
            bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
          *(_DWORD *)(v9 + 56) = 0;
        }
        ++v7;
      }
    }
  }
  if (!a2)
  {
    v12 = (IR::DynamicIRProcessor *)a1[19];
    if (!v12)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (a2 == 1)
  {
    v12 = (IR::DynamicIRProcessor *)a1[18];
    if (v12)
LABEL_18:
      IR::DynamicIRProcessor::reset(v12);
  }
LABEL_19:
  v13 = (IR::DynamicIRProcessor *)a1[20];
  if (v13)
    IR::DynamicIRProcessor::reset(v13);
  return caulk::pooled_semaphore_mutex::_unlock(v4);
}

void sub_1B62A550C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setEarlyReflectionsIRDataAttributes(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  const void **v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  unsigned __int8 v15;
  int v16;
  IR::DynamicIRProcessor *v17;
  const IR::IRDataAttributes *v18;
  IR::IRDataLoader *v19;
  int OriginalAudioChannelLayoutTag;
  IR::IRDataLoader *v21;
  IR::IRDataLoader *v22;
  int v23;
  _BOOL4 IsSupportedHOA;
  const void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  const void *v28;
  int v29;
  unsigned __int8 v30;
  NSObject *v31;
  _QWORD *v32;
  CFTypeRef v33;
  uint64_t v35;
  char v36;
  _BYTE buf[12];
  _DWORD v38[13];
  CFTypeRef cf;
  __int128 v40;
  CFTypeRef v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  CFTypeRef v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v35 = a1 + 776;
  v36 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 776));
  v10 = (const void **)(a1 + 320);
  if (a4 == 1)
    v11 = a1 + 168;
  else
    v11 = a1 + 320;
  v12 = *(const void **)(v11 + 88);
  if (v12)
    CFRetain(*(CFTypeRef *)(v11 + 88));
  v13 = *(_QWORD *)(v11 + 100);
  IR::IRDataAttributes::operator=(v11, a2);
  v14 = *(const void **)(v11 + 88);
  *(_QWORD *)(v11 + 88) = v12;
  if (v12)
    CFRetain(v12);
  if (v14)
    CFRelease(v14);
  *(_QWORD *)(v11 + 100) = v13;
  v15 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 1505));
  *(_BYTE *)(v11 + 112) = (v15 & 1) == 0;
  *(_DWORD *)(v11 + 108) = 1500;
  if ((a3 & 1) == 0
    && *(_DWORD *)(a1 + 472) == 7
    && ((v16 = *(_DWORD *)(a1 + 476), v16 == 1)
     || v16 == 2 && AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*(_QWORD *)(a1 + 872) + 232))))
  {
    *(_BYTE *)(v11 + 16) = a3;
    *(_DWORD *)(v11 + 12) = 128;
  }
  else
  {
    *(_BYTE *)(v11 + 16) = 1;
  }
  if (a4 == 1)
  {
    v17 = *(IR::DynamicIRProcessor **)(a1 + 144);
    v18 = (const IR::IRDataAttributes *)(a1 + 168);
    if (!v17)
      goto LABEL_22;
    goto LABEL_21;
  }
  v17 = *(IR::DynamicIRProcessor **)(a1 + 152);
  v18 = (const IR::IRDataAttributes *)(a1 + 320);
  if (v17)
LABEL_21:
    v17 = (IR::DynamicIRProcessor *)IR::DynamicIRProcessor::setIRDataAttributes(v17, v18);
LABEL_22:
  if (a5 && *(_QWORD *)(a1 + 168) && *v10 && *(_QWORD *)(a1 + 160))
  {
    v19 = (IR::IRDataLoader *)IR::IRDataLoader::instance(v17);
    OriginalAudioChannelLayoutTag = IR::IRDataLoader::getOriginalAudioChannelLayoutTag(v19, (const IR::IRDataAttributes *)(a1 + 168));
    if (ChannelLayoutTagIsSupportedHOA(OriginalAudioChannelLayoutTag))
    {
      v21 = (IR::IRDataLoader *)IR::IRDataAttributes::IRDataAttributes((uint64_t)buf, a1 + 168);
      v22 = (IR::IRDataLoader *)IR::IRDataLoader::instance(v21);
      v23 = IR::IRDataLoader::getOriginalAudioChannelLayoutTag(v22, (const IR::IRDataAttributes *)(a1 + 320));
      IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(v23);
      v25 = *v10;
      if (IsSupportedHOA)
      {
        v26 = cf;
        cf = v25;
        if (v25)
          CFRetain(v25);
        if (v26)
          CFRelease(v26);
        v40 = *(_OWORD *)(a1 + 344);
        v27 = v41;
        v28 = *(const void **)(a1 + 408);
        v41 = v28;
        if (v28)
          CFRetain(v28);
        if (v27)
          CFRelease(v27);
        v29 = *(_DWORD *)(a1 + 424);
        v30 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 1505));
        v46 = (v30 & 1) == 0;
        v44 = v29;
        v45 = 1500;
      }
      else
      {
        v33 = v41;
        v41 = v25;
        if (v25)
          CFRetain(v25);
        if (v33)
          CFRelease(v33);
        v42 = *(_DWORD *)(a1 + 360);
        v44 = 0;
      }
      v43 = 0;
      LOBYTE(v38[1]) = *(_BYTE *)(v11 + 16);
      v38[0] = *(_DWORD *)(v11 + 12);
      IR::DynamicIRProcessor::setIRDataAttributes(*(IR::DynamicIRProcessor **)(a1 + 160), (const IR::IRDataAttributes *)buf);
      if (v47)
        CFRelease(v47);
      if (v41)
        CFRelease(v41);
      if (cf)
        CFRelease(cf);
      if (*(_QWORD *)buf)
        CFRelease(*(CFTypeRef *)buf);
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v31 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v32 = (_QWORD *)(a1 + 888);
        if (*(char *)(a1 + 911) < 0)
          v32 = (_QWORD *)*v32;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v32;
        LOWORD(v38[0]) = 2080;
        *(_QWORD *)((char *)v38 + 2) = "setEarlyReflectionsIRDataAttributes";
        _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "[%s|%s] Scene reverb IR is non-HOA, any additional early reverb will run in parallel.", buf, 0x16u);
      }
    }
  }
  if (v12)
    CFRelease(v12);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v35);
}

void sub_1B62A58A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

float AUSpatialMixerV2ChannelProcessor::calculateWetDryGains(uint64_t a1, int a2, float a3)
{
  int v6;
  unsigned int v7;
  uint64_t v9;
  int v10;
  int v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  unsigned int v16;
  unsigned int *v17;
  float v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned __int8 v26;
  float v27;
  float v28;
  float v29;
  int v30;
  unsigned int v31;
  AUSM::DistanceGain *v32;
  float v33;
  float v34;
  NSObject *v35;
  _QWORD *v36;
  const char *v37;
  unsigned __int8 v38;
  float v39;
  float v40;
  __float2 v41;
  __float2 v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  __float2 v52;
  __float2 v53;
  __float2 v54;
  __float2 v55;
  __float2 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v78;
  __float2 v79;
  float v80;
  float v81;
  float v82;
  uint8_t buf[4];
  _QWORD *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 472);
  v7 = *(_DWORD *)(a1 + 476);
  AUSM::GlobalProperties::hasXTCIR(*(AUSM::GlobalProperties **)(*(_QWORD *)(a1 + 872) + 232));
  if (v6 != 7 || v7 >= 4)
  {
    v9 = *(_QWORD *)(a1 + 480);
    goto LABEL_9;
  }
  v10 = v7 & 0xF;
  v9 = *(_QWORD *)(a1 + 480);
  if (v10 != 1 || (v11 = *(_DWORD *)(v9 + 76), v11 == 4))
  {
LABEL_9:
    v12 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 296))(v9);
    v13 = *(_QWORD *)(a1 + 960);
    if (a2 == 1)
    {
      v14 = ausdk::AUElement::GetParameter(*(ausdk::AUElement **)v13, 8u) * 0.01;
      v15 = *(float *)(*(_QWORD *)(a1 + 968) + 528);
      v16 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 2492));
      v17 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 2500);
    }
    else
    {
      v14 = *(float *)(v13 + 168);
      v15 = *(float *)(a1 + 1640);
      v16 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 2496));
      v17 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 2504);
    }
    v18 = 1.0 - v12;
    *(float *)&v19 = COERCE_FLOAT(atomic_load(v17));
    if (v15 == 1.0)
    {
      v20 = 1.0 - v14;
      v21 = sqrtf(v14);
    }
    else
    {
      v22 = v15 * v15;
      if (v22 < 0.0001)
        v22 = 0.0001;
      v23 = 1.0 - v14;
      v24 = 1.0 / (float)(v14 + (float)((float)(1.0 - v14) * v22));
      v21 = sqrtf(v14 * v24);
      v20 = v22 * (float)(v23 * v24);
    }
    v25 = v18 * v21;
    v26 = atomic_load((unsigned __int8 *)(a1 + 616));
    v27 = sqrtf(v20);
    v28 = 1.0;
    if ((v26 & 1) == 0)
      v28 = a3;
    v29 = v25 * v28;
    v30 = *(_DWORD *)(a1 + 472);
    if (v30 == 9 || v30 == 7)
    {
      v31 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 872) + 112));
      if (v31 == 4)
      {
        if (a2 == 1)
          v32 = (AUSM::DistanceGain *)(*(_QWORD *)(a1 + 960) + 172);
        else
          v32 = (AUSM::DistanceGain *)(*(_QWORD *)(a1 + 968) + 544);
        v33 = AUSM::DistanceGain::calculateDistanceGain(v32, *(float *)&v16);
      }
      else
      {
        v33 = *(float *)&v19;
      }
      v29 = v29 * v33;
    }
    v34 = v12 + (float)(v18 * v27);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 2512) & 2) != 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v35 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        v36 = (_QWORD *)(a1 + 888);
        if (*(char *)(a1 + 911) < 0)
          v36 = (_QWORD *)*v36;
        if (a2 == 1)
          v37 = "SceneReverb";
        else
          v37 = "PostProcReverb";
        *(_DWORD *)buf = 136316162;
        v84 = v36;
        v85 = 2080;
        v86 = "calculateWetDryGains";
        v87 = 2080;
        v88 = v37;
        v89 = 2048;
        v90 = (float)(log10f(v29) * 20.0);
        v91 = 2048;
        v92 = (float)(log10f(v34) * 20.0);
        _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE: %s wetGaindB=%.1f, dryGaindB=%.1f", buf, 0x34u);
      }
    }
    return v29;
  }
  v29 = 0.0;
  if (a2)
    return v29;
  v38 = atomic_load((unsigned __int8 *)(a1 + 616));
  if (!v11)
    return v29;
  v39 = *(float *)(v9 + 52);
  v40 = *(float *)(v9 + 56);
  v41 = __sincosf_stret(*(float *)(v9 + 48) * 0.017453);
  v42 = __sincosf_stret(v39 * 0.017453);
  v43 = (float)(v40 * v41.__sinval) * v42.__cosval;
  v44 = (float)(v40 * v41.__cosval) * v42.__cosval;
  v81 = v40;
  if ((float)(v40 * v42.__sinval) >= 0.0)
    v45 = v40 * v42.__sinval;
  else
    v45 = -(float)(v40 * v42.__sinval);
  v46 = fabsf(v43);
  v47 = fabsf(v44);
  v48 = fabsf(v40 * v42.__sinval);
  if (v46 < v47)
    v46 = v47;
  if (v46 < v48)
    v46 = v48;
  if (v46 > 1.0)
  {
    v49 = 1.0 / v46;
    v43 = v43 * v49;
    v44 = v44 * v49;
    v45 = v45 * v49;
  }
  v50 = *(float *)(v9 + 60);
  if (v50 < *(float *)(v9 + 64))
    v50 = *(float *)(v9 + 64);
  if (v50 < *(float *)(v9 + 68))
    v50 = *(float *)(v9 + 68);
  v82 = v50;
  v51 = cosf(v43 * 2.75);
  v80 = cosf(v43 * 5.5);
  v78 = cosf(v43 * 8.25);
  v79 = __sincosf_stret(v44 * 2.75);
  v52 = __sincosf_stret(v44 * 5.5);
  v53 = __sincosf_stret(v44 * 8.25);
  v54 = __sincosf_stret(v45 * 2.75);
  v55 = __sincosf_stret(v45 * 5.5);
  v56 = __sincosf_stret(v45 * 8.25);
  if (v11 == 3)
  {
    v65 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v55.__cosval * 0.33435) + (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v80 * 0.17333) + 183.54) + (float)(v52.__cosval * 0.090728)) + (float)(v55.__cosval * -1.3577)) + 9.0542) + (float)(v78 * 0.084913)) + (float)(v53.__cosval * 0.07311)) + (float)(v56.__cosval * -0.91029)) + -213.21) + (float)(v80 * -0.0097578)) + (float)(v52.__cosval * -0.20005))) + (float)(v51 * -0.61198)) + (float)(v51 * 0.29473)) + (float)((float)(v52.__cosval * -0.19206) * v51)) + (float)((float)(v55.__cosval * 0.16142) * v51)) + (float)(v51 * 0.1164)) + (float)(v79.__cosval * 0.33558)) + (float)(v79.__cosval * -0.31178)) + (float)((float)(v80 * 0.14679) * v79.__cosval)) + (float)((float)(v55.__cosval * 0.16039) * v79.__cosval)) + (float)(v79.__cosval * -0.13632))
                                                                                                + (float)((float)(v51 * 0.069122) * v79.__cosval))
                                                                                        + (float)((float)(v51 * 0.32307)
                                                                                                * v79.__cosval))
                                                                                + (float)(v54.__cosval * 22.247))
                                                                        + (float)(v54.__cosval * -0.050057))
                                                                + (float)((float)(v80 * 0.020197) * v54.__cosval))
                                                        + (float)((float)(v52.__cosval * 0.045616) * v54.__cosval))
                                                + (float)(v54.__cosval * -0.058457))
                                        + (float)((float)(v51 * 0.21741) * v54.__cosval))
                                + (float)((float)(v51 * 0.081264) * v54.__cosval))
                        + (float)((float)(v79.__cosval * 0.088107) * v54.__cosval))
                + (float)((float)(v79.__cosval * -0.087962) * v54.__cosval))
        + (float)((float)((float)(v51 * -0.013901) * v79.__cosval) * v54.__cosval);
    v66 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v65 + 0.0) + (float)((float)(v51 * 0.13318) * 0.0)) + (float)((float)(v79.__cosval * 0.38735) * 0.0)) + (float)((float)(v54.__cosval * 0.097508) * 0.0)) + (float)(v52.__sinval * -0.083309)) + (float)(v52.__sinval * -0.066559)) + (float)((float)(v51 * 0.11499) * v52.__sinval)) + (float)((float)(v54.__cosval * 0.061549) * v52.__sinval)) + (float)(v52.__sinval * -0.0)) + (float)(v55.__sinval * -5.2996)) + (float)(v55.__sinval * -0.047782)) + (float)((float)(v51 * -0.11211) * v55.__sinval)) + (float)((float)(v79.__cosval * -0.025408) * v55.__sinval)) + (float)(v55.__sinval * -0.0)) + (float)((float)(v52.__sinval * 0.037466) * v55.__sinval)) + (float)(v53.__sinval * 0.062533)) + (float)(v56.__sinval * 0.1631)) + 0.0) + (float)((float)(v80 * -0.1941) * 0.0)) + (float)((float)(v52.__cosval * 0.15752) * 0.0)) + (float)((float)(v55.__cosval * 0.18577) * 0.0)) + (float)((float)(v51 * 1.0048) * 0.0)) + (float)((float)(v79.__cosval * -0.5595) * 0.0)) + (float)((float)((float)(v51 * 0.08632) * v79.__cosval) * 0.0)) + (float)((float)(v54.__cosval * 0.15699) * 0.0)) + (float)((float)((float)(v51 * 0.30522) * v54.__cosval) * 0.0)) + (float)((float)((float)(v79.__cosval * 0.12222) * v54.__cosval) * 0.0)) + (float)((float)(v52.__sinval * -0.020659) * 0.0)) + (float)((float)((float)(v51 * -0.16366) * v52.__sinval) * 0.0)) + (float)((float)(v52.__sinval * (float)(v54.__cosval * -0.16716)) * 0.0)) + (float)((float)(v55.__sinval * -0.25181) * 0.0)) + (float)((float)((float)(v51 * -0.1876) * v55.__sinval) * 0.0)) + (float)((float)((float)(v79.__cosval * -0.054207) * v55.__sinval) * 0.0))
                                                                                                + (float)((float)(v53.__sinval * -0.19236) * 0.0))
                                                                                        + (float)((float)(v56.__sinval * 0.20045)
                                                                                                * 0.0))
                                                                                + (float)(v79.__sinval * 3.5834))
                                                                        + (float)(v79.__sinval * -2.7613))
                                                                + (float)((float)(v80 * -0.023355) * v79.__sinval))
                                                        + (float)((float)(v55.__cosval * -0.15607) * v79.__sinval))
                                                + (float)(v79.__sinval * 0.045487))
                                        + (float)((float)(v51 * -0.094484) * v79.__sinval))
                                + (float)((float)(v51 * 0.27048) * v79.__sinval))
                        + (float)((float)(v54.__cosval * -0.014202) * v79.__sinval))
                + (float)((float)(v54.__cosval * 0.2217) * v79.__sinval))
        + (float)((float)((float)(v51 * 0.14338) * v54.__cosval) * v79.__sinval);
    v67 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v66 + (float)(v79.__sinval * 0.0)) + (float)((float)((float)(v51 * -0.082677) * 0.0) * v79.__sinval)) + (float)((float)((float)(v54.__cosval * -0.22325) * 0.0) * v79.__sinval)) + (float)((float)(v55.__sinval * -0.10838) * v79.__sinval)) + (float)((float)(v55.__sinval * 0.050254) * v79.__sinval)) + (float)((float)((float)(v51 * -0.11465) * v55.__sinval) * v79.__sinval)) + (float)(v79.__sinval * 0.0)) + (float)((float)(v56.__sinval * 0.016123) * v79.__sinval)) + (float)(v79.__sinval * -0.0)) + (float)((float)((float)(v80 * -0.013051) * 0.0) * v79.__sinval)) + (float)((float)((float)(v55.__cosval * 0.010975) * 0.0) * v79.__sinval)) + (float)((float)((float)(v51 * -0.26384) * 0.0) * v79.__sinval)) + (float)((float)((float)(v54.__cosval * -0.22252) * 0.0) * v79.__sinval)) + (float)((float)((float)((float)(v51 * -0.19312) * v54.__cosval) * 0.0) * v79.__sinval)) + (float)((float)((float)(v55.__sinval * 0.14685) * 0.0) * v79.__sinval)) + (float)(v54.__sinval * -8.3485)) + (float)(v54.__sinval * 4.7303)) + (float)((float)(v80 * -0.23753) * v54.__sinval)) + (float)((float)(v52.__cosval * -0.0048048) * v54.__sinval)) + (float)(v54.__sinval * 1.2158)) + (float)((float)(v51 * 0.38722) * v54.__sinval)) + (float)((float)(v51 * 0.076032) * v54.__sinval)) + (float)((float)(v79.__cosval * 0.39607) * v54.__sinval)) + (float)((float)(v79.__cosval * -0.085921) * v54.__sinval)) + (float)((float)((float)(v51 * -0.40917) * v79.__cosval) * v54.__sinval)) + (float)(v54.__sinval * -0.0)) + (float)((float)((float)(v51 * 0.12526) * 0.0) * v54.__sinval))
                                                                                                + (float)((float)((float)(v79.__cosval * 0.03857) * 0.0) * v54.__sinval))
                                                                                        + (float)((float)(v52.__sinval * 0.21349)
                                                                                                * v54.__sinval))
                                                                                + (float)((float)(v52.__sinval
                                                                                                * -0.094448)
                                                                                        * v54.__sinval))
                                                                        + (float)((float)((float)(v51 * -0.13581)
                                                                                        * v52.__sinval)
                                                                                * v54.__sinval))
                                                                + (float)(v54.__sinval * -0.0))
                                                        + (float)((float)(v53.__sinval * 0.098125) * v54.__sinval))
                                                + (float)(v54.__sinval * 0.0))
                                        + (float)((float)((float)(v80 * 0.066185) * 0.0) * v54.__sinval))
                                + (float)((float)((float)(v52.__cosval * -0.48068) * 0.0) * v54.__sinval))
                        + (float)((float)((float)(v51 * 0.086225) * 0.0) * v54.__sinval))
                + (float)((float)((float)(v79.__cosval * 0.11973) * 0.0) * v54.__sinval))
        + (float)((float)((float)((float)(v51 * 0.36598) * v79.__cosval) * 0.0) * v54.__sinval);
    v61 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v67
                                                                                                + (float)((float)((float)(v52.__sinval * -0.099095) * 0.0) * v54.__sinval))
                                                                                        + (float)((float)(v79.__sinval * -0.65276)
                                                                                                * v54.__sinval))
                                                                                + (float)((float)(v79.__sinval * 0.23039)
                                                                                        * v54.__sinval))
                                                                        + (float)((float)((float)(v80 * 0.057517)
                                                                                        * v79.__sinval)
                                                                                * v54.__sinval))
                                                                + (float)((float)(v79.__sinval * 0.17273) * v54.__sinval))
                                                        + (float)((float)((float)(v51 * 0.046621) * v79.__sinval)
                                                                * v54.__sinval))
                                                + (float)((float)((float)(v51 * -0.1666) * v79.__sinval) * v54.__sinval))
                                        + (float)((float)(v79.__sinval * -0.0) * v54.__sinval))
                                + (float)((float)(v79.__sinval * 0.0) * v54.__sinval))
                        + (float)((float)(v79.__sinval * (float)((float)(v51 * 0.26421) * 0.0)) * v54.__sinval))
                + (float)(v44 * 0.15403))
        + (float)(v45 * 38.738);
    v62 = -0.875;
    v63 = 0.93;
    v64 = -0.07;
    goto LABEL_59;
  }
  if (v11 == 2)
  {
    v68 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v55.__cosval * 0.41417) + (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v80 * 0.17461) + 232.91) + (float)(v52.__cosval * 0.066905)) + (float)(v55.__cosval * -0.31184)) + 10.677) + (float)(v78 * 0.082731)) + (float)(v53.__cosval * 0.054227)) + (float)(v56.__cosval * -0.087131)) + -247.37) + (float)(v80 * -0.093004)) + (float)(v52.__cosval * -0.20598))) + (float)(v51 * -0.60848)) + (float)(v51 * 0.61058)) + (float)((float)(v52.__cosval * -0.21637) * v51)) + (float)((float)(v55.__cosval * 0.011665) * v51)) + (float)(v51 * 0.10581)) + (float)(v79.__cosval * 0.55623)) + (float)(v79.__cosval * -0.36199)) + (float)((float)(v80 * 0.13962) * v79.__cosval)) + (float)((float)(v55.__cosval * 0.018772) * v79.__cosval)) + (float)(v79.__cosval * -0.2837))
                                                                                                + (float)((float)(v51 * 0.003044) * v79.__cosval))
                                                                                        + (float)((float)(v51 * 0.25944)
                                                                                                * v79.__cosval))
                                                                                + (float)(v54.__cosval * 3.1795))
                                                                        + (float)(v54.__cosval * -0.11151))
                                                                + (float)((float)(v80 * -0.032848) * v54.__cosval))
                                                        + (float)((float)(v52.__cosval * 0.050326) * v54.__cosval))
                                                + (float)(v54.__cosval * 0.030527))
                                        + (float)((float)(v51 * 0.055045) * v54.__cosval))
                                + (float)((float)(v51 * 0.024401) * v54.__cosval))
                        + (float)((float)(v79.__cosval * 0.088024) * v54.__cosval))
                + (float)((float)(v79.__cosval * -0.10845) * v54.__cosval))
        + (float)((float)((float)(v51 * 0.0074555) * v79.__cosval) * v54.__cosval);
    v69 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v68 + 0.0) + (float)((float)(v51 * 0.32741) * 0.0)) + (float)((float)(v79.__cosval * 0.45893) * 0.0)) + (float)((float)(v54.__cosval * 0.079655) * 0.0)) + (float)(v52.__sinval * -0.10624)) + (float)(v52.__sinval * 0.062297)) + (float)((float)(v51 * 0.021919) * v52.__sinval)) + (float)((float)(v54.__cosval * 0.061559) * v52.__sinval)) + (float)(v52.__sinval * -0.0)) + (float)(v55.__sinval * -0.47055)) + (float)(v55.__sinval * -0.18341)) + (float)((float)(v51 * -0.038674) * v55.__sinval)) + (float)((float)(v79.__cosval * -0.024865) * v55.__sinval)) + (float)(v55.__sinval * -0.0)) + (float)((float)(v52.__sinval * -0.0075084) * v55.__sinval)) + (float)(v53.__sinval * -0.03551)) + (float)(v56.__sinval * -0.062019)) + 0.0) + (float)((float)(v80 * -0.24293) * 0.0)) + (float)((float)(v52.__cosval * 0.17526) * 0.0)) + (float)((float)(v55.__cosval * 0.096434) * 0.0)) + (float)((float)(v51 * 1.8613) * 0.0)) + (float)((float)(v79.__cosval * -0.58284) * 0.0)) + (float)((float)((float)(v51 * 0.2048) * v79.__cosval) * 0.0)) + (float)((float)(v54.__cosval * -0.011461) * 0.0)) + (float)((float)((float)(v51 * 0.34232) * v54.__cosval) * 0.0)) + (float)((float)((float)(v79.__cosval * 0.048586) * v54.__cosval) * 0.0)) + (float)((float)(v52.__sinval * -0.052365) * 0.0)) + (float)((float)((float)(v51 * -0.14485) * v52.__sinval) * 0.0)) + (float)((float)(v52.__sinval * (float)(v54.__cosval * -0.12912)) * 0.0)) + (float)((float)(v55.__sinval * -0.23337) * 0.0)) + (float)((float)((float)(v51 * -0.13392) * v55.__sinval) * 0.0)) + (float)((float)((float)(v79.__cosval * 0.038507) * v55.__sinval) * 0.0))
                                                                                                + (float)((float)(v53.__sinval * -0.10254) * 0.0))
                                                                                        + (float)((float)(v56.__sinval * 0.17642)
                                                                                                * 0.0))
                                                                                + (float)(v79.__sinval * 2.9382))
                                                                        + (float)(v79.__sinval * -2.3544))
                                                                + (float)((float)(v80 * -0.056721) * v79.__sinval))
                                                        + (float)((float)(v55.__cosval * 0.0070278) * v79.__sinval))
                                                + (float)(v79.__sinval * -0.19419))
                                        + (float)((float)(v51 * 0.047898) * v79.__sinval))
                                + (float)((float)(v51 * 0.25534) * v79.__sinval))
                        + (float)((float)(v54.__cosval * -0.11265) * v79.__sinval))
                + (float)((float)(v54.__cosval * 0.23681) * v79.__sinval))
        + (float)((float)((float)(v51 * -0.018378) * v54.__cosval) * v79.__sinval);
    v70 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v69 + (float)(v79.__sinval * 0.0)) + (float)((float)((float)(v51 * -0.14465) * 0.0) * v79.__sinval)) + (float)((float)((float)(v54.__cosval * -0.21084) * 0.0) * v79.__sinval)) + (float)((float)(v55.__sinval * -0.030319) * v79.__sinval)) + (float)((float)(v55.__sinval * 0.035953) * v79.__sinval)) + (float)((float)((float)(v51 * -0.024762) * v55.__sinval) * v79.__sinval)) + (float)(v79.__sinval * 0.0)) + (float)((float)(v56.__sinval * -0.072415) * v79.__sinval)) + (float)(v79.__sinval * -0.0)) + (float)((float)((float)(v80 * -0.033363) * 0.0) * v79.__sinval)) + (float)((float)((float)(v55.__cosval * 0.077159) * 0.0) * v79.__sinval)) + (float)((float)((float)(v51 * -0.40257) * 0.0) * v79.__sinval)) + (float)((float)((float)(v54.__cosval * -0.080058) * 0.0) * v79.__sinval)) + (float)((float)((float)((float)(v51 * -0.10734) * v54.__cosval) * 0.0) * v79.__sinval)) + (float)((float)((float)(v55.__sinval * 0.054466) * 0.0) * v79.__sinval)) + (float)(v54.__sinval * -7.3455)) + (float)(v54.__sinval * 5.6269)) + (float)((float)(v80 * -0.19481) * v54.__sinval)) + (float)((float)(v52.__cosval * 0.016546) * v54.__sinval)) + (float)(v54.__sinval * 1.6462)) + (float)((float)(v51 * -0.082088) * v54.__sinval)) + (float)((float)(v51 * 0.25778) * v54.__sinval)) + (float)((float)(v79.__cosval * 0.076909) * v54.__sinval)) + (float)((float)(v79.__cosval * 0.024849) * v54.__sinval)) + (float)((float)((float)(v51 * -0.22466) * v79.__cosval) * v54.__sinval)) + (float)(v54.__sinval * -0.0)) + (float)((float)((float)(v51 * -0.029441) * 0.0) * v54.__sinval))
                                                                                                + (float)((float)((float)(v79.__cosval * -0.049834) * 0.0) * v54.__sinval))
                                                                                        + (float)((float)(v52.__sinval * 0.18317)
                                                                                                * v54.__sinval))
                                                                                + (float)((float)(v52.__sinval
                                                                                                * -0.038101)
                                                                                        * v54.__sinval))
                                                                        + (float)((float)((float)(v51 * 0.017179)
                                                                                        * v52.__sinval)
                                                                                * v54.__sinval))
                                                                + (float)(v54.__sinval * -0.0))
                                                        + (float)((float)(v53.__sinval * 0.13989) * v54.__sinval))
                                                + (float)(v54.__sinval * 0.0))
                                        + (float)((float)((float)(v80 * 0.068949) * 0.0) * v54.__sinval))
                                + (float)((float)((float)(v52.__cosval * -0.48326) * 0.0) * v54.__sinval))
                        + (float)((float)((float)(v51 * 0.063864) * 0.0) * v54.__sinval))
                + (float)((float)((float)(v79.__cosval * -0.027074) * 0.0) * v54.__sinval))
        + (float)((float)((float)((float)(v51 * 0.19908) * v79.__cosval) * 0.0) * v54.__sinval);
    v61 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v70
                                                                                                + (float)((float)((float)(v52.__sinval * 0.02047) * 0.0) * v54.__sinval))
                                                                                        + (float)((float)(v79.__sinval * -0.19467)
                                                                                                * v54.__sinval))
                                                                                + (float)((float)(v79.__sinval * 0.007184)
                                                                                        * v54.__sinval))
                                                                        + (float)((float)((float)(v80 * 0.14602)
                                                                                        * v79.__sinval)
                                                                                * v54.__sinval))
                                                                + (float)((float)(v79.__sinval * 0.16463) * v54.__sinval))
                                                        + (float)((float)((float)(v51 * -0.098489) * v79.__sinval)
                                                                * v54.__sinval))
                                                + (float)((float)((float)(v51 * -0.10192) * v79.__sinval) * v54.__sinval))
                                        + (float)((float)(v79.__sinval * -0.0) * v54.__sinval))
                                + (float)((float)(v79.__sinval * -0.0) * v54.__sinval))
                        + (float)((float)(v79.__sinval * (float)((float)(v51 * 0.40054) * 0.0)) * v54.__sinval))
                + (float)(v44 * -0.18001))
        + (float)(v45 * 6.0781);
    v62 = -0.45;
    v63 = 0.97;
    v64 = -0.03;
    goto LABEL_59;
  }
  v57 = 0.0;
  if (v11 == 1)
  {
    v58 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v55.__cosval * 0.29667) + (float)((float)((float)(v80 * 0.059607) + (float)((float)((float)((float)((float)((float)((float)((float)((float)(v80 * 0.24398) + 173.55) + (float)(v52.__cosval * 0.0096719)) + (float)(v55.__cosval * -0.57195)) + 7.8244) + (float)(v78 * 0.11108)) + (float)(v53.__cosval * -0.021431)) + (float)(v56.__cosval * 0.12549)) + -180.68)) + (float)(v52.__cosval * -0.2028))) + (float)(v51 * -1.1918)) + (float)(v51 * 0.17543)) + (float)((float)(v52.__cosval * -0.20524) * v51)) + (float)((float)(v55.__cosval * 0.51292) * v51)) + (float)(v51 * 0.1792)) + (float)(v79.__cosval * 0.36118)) + (float)(v79.__cosval * -0.28577)) + (float)((float)(v80 * 0.38705) * v79.__cosval)) + (float)((float)(v55.__cosval * 0.28113) * v79.__cosval)) + (float)(v79.__cosval * -0.14872))
                                                                                                + (float)((float)(v51 * 0.097022) * v79.__cosval))
                                                                                        + (float)((float)(v51 * 0.31446)
                                                                                                * v79.__cosval))
                                                                                + (float)(v54.__cosval * -0.24433))
                                                                        + (float)(v54.__cosval * -0.33416))
                                                                + (float)((float)(v80 * 0.15078) * v54.__cosval))
                                                        + (float)((float)(v52.__cosval * 0.073363) * v54.__cosval))
                                                + (float)(v54.__cosval * -0.14233))
                                        + (float)((float)(v51 * 0.75144) * v54.__cosval))
                                + (float)((float)(v51 * 0.035417) * v54.__cosval))
                        + (float)((float)(v79.__cosval * 0.1548) * v54.__cosval))
                + (float)((float)(v79.__cosval * -0.12763) * v54.__cosval))
        + (float)((float)((float)(v51 * 0.26234) * v79.__cosval) * v54.__cosval);
    v59 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v58 + 0.0) + (float)((float)(v51 * 0.02378) * 0.0)) + (float)((float)(v79.__cosval * 0.49363) * 0.0)) + (float)((float)(v54.__cosval * 0.077734) * 0.0)) + (float)(v52.__sinval * 0.0095673)) + (float)(v52.__sinval * -0.015961)) + (float)((float)(v51 * 0.27181) * v52.__sinval)) + (float)((float)(v54.__cosval * 0.072475) * v52.__sinval)) + (float)(v52.__sinval * -0.0)) + (float)(v55.__sinval * 0.43098)) + (float)(v55.__sinval * -0.065936)) + (float)((float)(v51 * -0.32313) * v55.__sinval)) + (float)((float)(v79.__cosval * 0.092138) * v55.__sinval)) + (float)(v55.__sinval * -0.0)) + (float)((float)(v52.__sinval * 0.066843) * v55.__sinval)) + (float)(v53.__sinval * 0.21213)) + (float)(v56.__sinval * 0.14892)) + 0.0) + (float)((float)(v80 * -0.15624) * 0.0)) + (float)((float)(v52.__cosval * 0.11956) * 0.0)) + (float)((float)(v55.__cosval * 0.2128) * 0.0)) + (float)((float)(v51 * 1.213) * 0.0)) + (float)((float)(v79.__cosval * -0.54276) * 0.0)) + (float)((float)((float)(v51 * 0.074559) * v79.__cosval) * 0.0)) + (float)((float)(v54.__cosval * -0.99465) * 0.0)) + (float)((float)((float)(v51 * -0.2155) * v54.__cosval) * 0.0)) + (float)((float)((float)(v79.__cosval * 0.033991) * v54.__cosval) * 0.0)) + (float)((float)(v52.__sinval * -0.062352) * 0.0)) + (float)((float)((float)(v51 * -0.18973) * v52.__sinval) * 0.0)) + (float)((float)(v52.__sinval * (float)(v54.__cosval * -0.13734)) * 0.0)) + (float)((float)(v55.__sinval * 0.047439) * 0.0)) + (float)((float)((float)(v51 * 0.16957) * v55.__sinval) * 0.0)) + (float)((float)((float)(v79.__cosval * -0.044035) * v55.__sinval) * 0.0))
                                                                                                + (float)((float)(v53.__sinval * -0.2711) * 0.0))
                                                                                        + (float)((float)(v56.__sinval * 0.043464)
                                                                                                * 0.0))
                                                                                + (float)(v79.__sinval * 3.1729))
                                                                        + (float)(v79.__sinval * -2.6901))
                                                                + (float)((float)(v80 * 0.05456) * v79.__sinval))
                                                        + (float)((float)(v55.__cosval * 0.050871) * v79.__sinval))
                                                + (float)(v79.__sinval * 0.24192))
                                        + (float)((float)(v51 * 0.24811) * v79.__sinval))
                                + (float)((float)(v51 * 0.22546) * v79.__sinval))
                        + (float)((float)(v54.__cosval * 0.0079627) * v79.__sinval))
                + (float)((float)(v54.__cosval * 0.23104) * v79.__sinval))
        + (float)((float)((float)(v51 * 0.059493) * v54.__cosval) * v79.__sinval);
    v60 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v59 + (float)(v79.__sinval * 0.0)) + (float)((float)((float)(v51 * 0.01555) * 0.0) * v79.__sinval)) + (float)((float)((float)(v54.__cosval * -0.15208) * 0.0) * v79.__sinval)) + (float)((float)(v55.__sinval * -0.059359) * v79.__sinval)) + (float)((float)(v55.__sinval * 0.035894) * v79.__sinval)) + (float)((float)((float)(v51 * 0.023372) * v55.__sinval) * v79.__sinval)) + (float)(v79.__sinval * 0.0)) + (float)((float)(v56.__sinval * -0.030964) * v79.__sinval)) + (float)(v79.__sinval * -0.0)) + (float)((float)((float)(v80 * -0.026829) * 0.0) * v79.__sinval)) + (float)((float)((float)(v55.__cosval * 0.14178) * 0.0) * v79.__sinval)) + (float)((float)((float)(v51 * -0.40797) * 0.0) * v79.__sinval)) + (float)((float)((float)(v54.__cosval * -0.047317) * 0.0) * v79.__sinval)) + (float)((float)((float)((float)(v51 * -0.12945) * v54.__cosval) * 0.0) * v79.__sinval)) + (float)((float)((float)(v55.__sinval * 0.020718) * 0.0) * v79.__sinval)) + (float)(v54.__sinval * -3.3461)) + (float)(v54.__sinval * 2.2467)) + (float)((float)(v80 * -0.30843) * v54.__sinval)) + (float)((float)(v52.__cosval * 0.10016) * v54.__sinval)) + (float)(v54.__sinval * 1.0645)) + (float)((float)(v51 * 1.5564) * v54.__sinval)) + (float)((float)(v51 * -0.027271) * v54.__sinval)) + (float)((float)(v79.__cosval * 0.54335) * v54.__sinval)) + (float)((float)(v79.__cosval * -0.0078935) * v54.__sinval)) + (float)((float)((float)(v51 * -0.19994) * v79.__cosval) * v54.__sinval)) + (float)(v54.__sinval * -0.0)) + (float)((float)((float)(v51 * 0.2109) * 0.0) * v54.__sinval))
                                                                                                + (float)((float)((float)(v79.__cosval * -0.08669) * 0.0) * v54.__sinval))
                                                                                        + (float)((float)(v52.__sinval * 0.0784)
                                                                                                * v54.__sinval))
                                                                                + (float)((float)(v52.__sinval * -0.14739)
                                                                                        * v54.__sinval))
                                                                        + (float)((float)((float)(v51 * -0.25634)
                                                                                        * v52.__sinval)
                                                                                * v54.__sinval))
                                                                + (float)(v54.__sinval * -0.0))
                                                        + (float)((float)(v53.__sinval * 0.049279) * v54.__sinval))
                                                + (float)(v54.__sinval * 0.0))
                                        + (float)((float)((float)(v80 * 0.18973) * 0.0) * v54.__sinval))
                                + (float)((float)((float)(v52.__cosval * -0.45187) * 0.0) * v54.__sinval))
                        + (float)((float)((float)(v51 * -0.51005) * 0.0) * v54.__sinval))
                + (float)((float)((float)(v79.__cosval * 0.14587) * 0.0) * v54.__sinval))
        + (float)((float)((float)((float)(v51 * 0.36258) * v79.__cosval) * 0.0) * v54.__sinval);
    v61 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v60
                                                                                                + (float)((float)((float)(v52.__sinval * -0.04268) * 0.0) * v54.__sinval))
                                                                                        + (float)((float)(v79.__sinval * 0.12321)
                                                                                                * v54.__sinval))
                                                                                + (float)((float)(v79.__sinval
                                                                                                * -0.030402)
                                                                                        * v54.__sinval))
                                                                        + (float)((float)((float)(v80 * -0.019986)
                                                                                        * v79.__sinval)
                                                                                * v54.__sinval))
                                                                + (float)((float)(v79.__sinval * 0.010446) * v54.__sinval))
                                                        + (float)((float)((float)(v51 * -0.27917) * v79.__sinval)
                                                                * v54.__sinval))
                                                + (float)((float)((float)(v51 * -0.19801) * v79.__sinval) * v54.__sinval))
                                        + (float)((float)(v79.__sinval * 0.0) * v54.__sinval))
                                + (float)((float)(v79.__sinval * -0.0) * v54.__sinval))
                        + (float)((float)(v79.__sinval * (float)((float)(v51 * 0.44556) * 0.0)) * v54.__sinval))
                + (float)(v44 * 0.23312))
        + (float)(v45 * -0.97659);
    v62 = -1.2;
    v63 = 0.6;
    v64 = -0.4;
LABEL_59:
    __exp10f(v61 / 20.0);
    v71 = 1.0;
    if ((v38 & 1) != 0)
      v72 = 1.0;
    else
      v72 = a3;
    v73 = (float)((float)(v81 + v64) / v63) + (float)((float)(1.0 - (float)((float)(v81 + v64) / v63)) * 0.0);
    if (v73 <= 1.0)
      v71 = (float)((float)(v81 + v64) / v63) + (float)((float)(1.0 - (float)((float)(v81 + v64) / v63)) * 0.0);
    if (v73 < 0.0)
      v71 = 0.0;
    v57 = (float)(v72 * sqrtf(v71)) * __exp10f(v62);
  }
  v74 = (float)((float)(1.0 - (float)(v82 / 0.4)) * 0.0) + (float)((float)(v82 / 0.4) * 2.0);
  v75 = v74 / 20.0;
  if (v74 > 2.0)
    v75 = 0.1;
  if (v74 >= 0.0)
    v76 = v75;
  else
    v76 = 0.0;
  return v57 * __exp10f(v76);
}

uint64_t AUSpatialMixerV2ChannelProcessor::processAccumulating(AUSM::FloatVector const&,AUSM::SharedBuffers &,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,AUSM::ReverbSend *,float,float,unsigned int,float *)::$_0::operator()(uint64_t a1, int a2, unsigned int a3, int8x16_t **a4, uint64_t a5, IR::ComplexDataCircBuffer *a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  float v17;
  const float **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  if (!a2 || !*a4)
    return 0;
  v14 = *(_QWORD *)a1;
  v15 = atomic_load(&(*a4)[15].u32[1]);
  v16 = *a4;
  v17 = 3000.0;
  if (*(_DWORD *)(v14 + 856))
    v17 = -1.0;
  *(float *)v16[1].i32 = v17;
  v18 = *(const float ***)(a5 + 24);
  v19 = *(unsigned int *)(a5 + 52);
  v20 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v20 + 24) && *(_DWORD *)(v14 + 780) >= (**(_DWORD **)(a1 + 16) + v15))
  {
    IR::DynamicIRProcessor::processInternal(v16, *(const float **)v20, *(const float ***)(a5 + 24), *(unsigned int *)(a5 + 52), **(unsigned int **)(a1 + 32), **(float **)(a1 + 56), **(float ****)(a1 + 40), 1, a6);
    *(_BYTE *)(a5 + 48) = 0;
  }
  else
  {
    AUSpatialMixerV2ChannelProcessor::processReverbSend(v14, **(const float ***)(a1 + 24), a7, **(unsigned int **)(a1 + 32), a3, ***(float ****)(a1 + 40), **(float ***)(a1 + 48), a9);
    if (!*(_BYTE *)(a8 + 8) || (v21 = *(_DWORD *)(a8 + 4), v22 = atomic_load(&(*a4)[15].u32[1]), v21 < v22))
    {
      IR::DynamicIRProcessor::processInternal(*a4, **(const float ***)(a1 + 48), v18, v19, **(unsigned int **)(a1 + 32), **(float **)(a1 + 56), **(float ****)(a1 + 40), 1, a6);
      *(_BYTE *)(a5 + 48) = 0;
      if (*(_BYTE *)(a8 + 8))
        *(_DWORD *)(a8 + 4) += **(_DWORD **)(a1 + 32);
    }
  }
  return v15;
}

void AUSpatialMixerV2ChannelProcessor::processReverbSend(uint64_t a1, const float *__A, uint64_t a3, vDSP_Length __N, unsigned int a5, float *a6, float *__C, float a8)
{
  unsigned int v11;
  uint64_t v12;
  float v13;
  const float *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  char v22;
  unsigned int v23;
  float *v24;
  float v25;
  vDSP_Length v26;
  char v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v37;
  float __Step;
  float __B;

  v11 = __N;
  v12 = a3;
  v13 = a8;
  v14 = __A;
  __B = a8;
  v16 = a1 + 568;
  v17 = 580;
  if (a5)
    v16 = a1 + 580;
  else
    v17 = 568;
  if (a5 == 1)
    v18 = 556;
  else
    v18 = v17;
  if (a5 == 1)
    v19 = a1 + 556;
  else
    v19 = v16;
  if (*(_BYTE *)(a1 + 788))
    goto LABEL_19;
  v20 = 160;
  if (!a5)
    v20 = 152;
  if (a5 == 1)
    v20 = 144;
  if (*(_QWORD *)(a1 + v20))
  {
    __B = 0.0;
LABEL_17:
    v13 = 0.0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a1 + 789))
  {
    __B = 0.0;
    *(_DWORD *)(a1 + v18) = 0;
    goto LABEL_17;
  }
LABEL_19:
  if (__C)
    v21 = __C;
  else
    v21 = a6;
  if (*(_BYTE *)(a1 + 536))
  {
    *(float *)(a1 + v18) = v13;
  }
  else
  {
    v25 = *(float *)(a1 + v18);
    if (v25 != v13)
    {
      if (__N >= 0x100)
        v26 = 256;
      else
        v26 = __N;
      __Step = (float)(v13 - v25) / (float)v26;
      vDSP_vrampmul(__A, 1, (float *)v19, &__Step, v21, 1, v26);
      v22 = 0;
      *(float *)(a1 + v18) = v13;
      v23 = v11 - v26;
      v14 += v26;
      v24 = &v21[v26];
      v12 = a3;
      if (!v23)
        goto LABEL_35;
      goto LABEL_31;
    }
  }
  v22 = 1;
  v23 = __N;
  v24 = v21;
  if (!v11)
    goto LABEL_35;
LABEL_31:
  if (fabsf(v13) > 0.000001)
  {
    vDSP_vsmul(v14, 1, &__B, v24, 1, v23);
    goto LABEL_38;
  }
  if (v23 < v11)
  {
    vDSP_vclr(v24, 1, v23);
    goto LABEL_38;
  }
LABEL_35:
  if ((v22 & 1) != 0)
  {
    v27 = 1;
    if (__C)
      vDSP_vclr(__C, 1, v11);
    goto LABEL_52;
  }
LABEL_38:
  v28 = atomic_load((unsigned __int8 *)(a1 + 80));
  if ((v28 & 1) != 0)
  {
    v29 = a1 + 24 * a5;
    v32 = *(_QWORD *)(v29 + 8);
    v31 = (uint64_t *)(v29 + 8);
    v30 = v32;
    if (v32 != v31[1])
    {
      v37 = v12;
      v33 = 0;
      v34 = 1;
      do
      {
        v35 = *(_QWORD **)(v30 + 8 * v33);
        if (v35)
        {
          AllPassComb::process(v35, v21, a6, v11);
        }
        else if (__C && v34 == 1)
        {
          memcpy(a6, __C, 4 * v11);
        }
        v33 = v34;
        v30 = *v31;
        ++v34;
        v21 = a6;
      }
      while (v33 < (v31[1] - *v31) >> 3);
      v21 = a6;
      v12 = v37;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 928) + 40))
    vDSP_vsma(v21, 1, (const float *)(a1 + 944), *(const float **)(v12 + 32), 1, *(float **)(v12 + 32), 1, v11);
  else
    vDSP_vadd(v21, 1, *(const float **)(v12 + 32), 1, *(float **)(v12 + 32), 1, v11);
  v27 = 0;
  *(_BYTE *)(v12 + 24) = 0;
  *(_DWORD *)(v19 + 4) = 0;
LABEL_52:
  *(_BYTE *)(v19 + 8) = v27;
}

float *std::unique_lock<caulk::pooled_semaphore_mutex>::unlock(uint64_t a1)
{
  float *result;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 8))
  {
    result = (float *)caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    return AUSpatialMixerV2ChannelProcessor::setChannelParameters(v3, v4);
  }
  return result;
}

float *AUSpatialMixerV2ChannelProcessor::setChannelParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  float *result;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 992) = v4;
  v5 = *(unsigned int *)(a2 + 28);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 480) + 176))(*(_QWORD *)(a1 + 480), v5);
  v6 = *(_QWORD *)(a1 + 488);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 176))(v6, v5);
  v7 = *(_QWORD *)(a1 + 496);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 176))(v7, v5);
  v8 = (*(unsigned int *)(a2 + 28) < 0x3FuLL) & (0x4000002000000010uLL >> *(_DWORD *)(a2 + 28));
  v9 = atomic_load((unsigned __int8 *)(a1 + 792));
  if (v8 != (v9 & 1))
  {
    atomic_store(v8, (unsigned __int8 *)(a1 + 792));
    if (fabsf(*(float *)(a1 + 540)) > 0.00000011921)
    {
      v10 = COERCE_FLOAT(atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 872) + 232) + 164)));
      v11 = (float)((float)(v10 + v10) / *(float *)(a1 + 540)) * 3.14159265;
      AUSpatialMixerV2ChannelProcessor::setLFERollOff((AUSpatialMixerV2ChannelProcessor *)a1, v11);
    }
  }
  atomic_store(((*(_DWORD *)(a2 + 28) - 5) < 0x3C) & (0xDFFD000F0003FF3uLL >> (*(_BYTE *)(a2 + 28) - 5)), (unsigned __int8 *)(a1 + 1680));
  v12 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 960) + 8) + 80));
  v13 = *(float *)(a2 + 20);
  if (v12 != 3)
    v13 = 0.0;
  result = AUSpatialMixerV2ChannelProcessor::setDelay((float *)a1, v13);
  atomic_store(1u, (unsigned __int8 *)(a1 + 1648));
  return result;
}

uint64_t AUSpatialMixerV2ChannelProcessor::setDecorrFilterLengthsOnReverbSend(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  float *v43;
  AllPassComb *v44;
  unint64_t v45;
  AllPassComb **v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  AllPassComb **v53;
  void *__p;
  char *v56;
  char *v57;
  char *v58;
  char v59;
  char *v60;
  AllPassComb **v61;
  AllPassComb **v62;
  char *v63;
  _QWORD *v64;

  v58 = (char *)a1 + 772;
  v59 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)((char *)a1 + 772));
  v4 = a1 + 1;
  do
  {
    __p = 0;
    v56 = 0;
    v57 = 0;
    v5 = a2[1] - *a2;
    if ((uint64_t)(v4[1] - *v4) >> 3 <= (unint64_t)(v5 >> 2))
      v6 = v5 >> 2;
    else
      v6 = (uint64_t)(v4[1] - *v4) >> 3;
    std::vector<float>::reserve(&__p, v6);
    v7 = (char *)v4[1];
    if (v7 == (char *)*v4)
    {
      v22 = (uint64_t)&v7[-*v4] >> 3;
      v20 = (char *)v4[1];
    }
    else
    {
      v8 = 0;
      v9 = v56;
      v7 = (char *)*v4;
      do
      {
        v10 = **(_DWORD **)&v7[8 * v8];
        if (v9 >= v57)
        {
          v12 = (char *)__p;
          v13 = (v9 - (_BYTE *)__p) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v15 = v57 - (_BYTE *)__p;
          if ((v57 - (_BYTE *)__p) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v57, v16);
            v12 = (char *)__p;
            v9 = v56;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v10;
          v11 = v18 + 4;
          while (v9 != v12)
          {
            v19 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          __p = v18;
          v56 = v11;
          v57 = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_DWORD *)v9 = v10;
          v11 = v9 + 4;
        }
        v56 = v11;
        ++v8;
        v7 = (char *)*v4;
        v20 = (char *)v4[1];
        v21 = (uint64_t)&v20[-*v4];
        v9 = v11;
      }
      while (v8 < v21 >> 3);
      v22 = v21 >> 3;
    }
    v24 = *a2;
    v23 = a2[1];
    if (v22 < (v23 - *a2) >> 2)
    {
      v25 = v56;
      do
      {
        if (v25 >= v57)
        {
          v27 = (char *)__p;
          v28 = (v25 - (_BYTE *)__p) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v30 = v57 - (_BYTE *)__p;
          if ((v57 - (_BYTE *)__p) >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v57, v31);
            v27 = (char *)__p;
            v25 = v56;
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v28];
          *(_DWORD *)v33 = 1050253722;
          v26 = v33 + 4;
          while (v25 != v27)
          {
            v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          __p = v33;
          v56 = v26;
          v57 = &v32[4 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_DWORD *)v25 = 1050253722;
          v26 = v25 + 4;
        }
        v56 = v26;
        ++v22;
        v24 = *a2;
        v23 = a2[1];
        v25 = v26;
      }
      while (v22 < (v23 - *a2) >> 2);
      v7 = (char *)*v4;
      v20 = (char *)v4[1];
    }
    v35 = v7;
    if (v20 != v7)
    {
      do
      {
        v37 = (_QWORD *)*((_QWORD *)v20 - 1);
        v20 -= 8;
        v36 = v37;
        *(_QWORD *)v20 = 0;
        if (v37)
          std::default_delete<AllPassComb>::operator()[abi:ne180100](v36);
      }
      while (v20 != v7);
      v24 = *a2;
      v23 = a2[1];
      v35 = (char *)*v4;
    }
    v38 = v4[2];
    v4[1] = v7;
    v39 = (v23 - v24) >> 2;
    if (v39 > (v38 - (uint64_t)v35) >> 3)
    {
      if ((unint64_t)(v23 - v24) >= 0x7FFFFFFFFFFFFFFDLL)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v64 = v4 + 2;
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v39);
      v61 = (AllPassComb **)&v60[v7 - v35];
      v62 = v61;
      v63 = &v60[8 * v40];
      std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v4, &v60);
      std::__split_buffer<std::unique_ptr<AllPassComb>>::~__split_buffer((uint64_t)&v60);
      v24 = *a2;
      v23 = a2[1];
    }
    if (v23 != v24)
    {
      v41 = 0;
      v42 = 1;
      do
      {
        v43 = (float *)__p;
        v44 = (AllPassComb *)operator new();
        AllPassComb::AllPassComb(v44, *(_DWORD *)(v24 + 4 * v41), v43[v41]);
        v46 = (AllPassComb **)v4[1];
        v45 = v4[2];
        if ((unint64_t)v46 >= v45)
        {
          v48 = ((uint64_t)v46 - *v4) >> 3;
          if ((unint64_t)(v48 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v49 = v45 - *v4;
          v50 = v49 >> 2;
          if (v49 >> 2 <= (unint64_t)(v48 + 1))
            v50 = v48 + 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          v64 = v4 + 2;
          if (v51)
            v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v51);
          else
            v52 = 0;
          v53 = (AllPassComb **)(v51 + 8 * v48);
          v60 = (char *)v51;
          v61 = v53;
          v63 = (char *)(v51 + 8 * v52);
          *v53 = v44;
          v62 = v53 + 1;
          std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v4, &v60);
          v47 = (_QWORD *)v4[1];
          std::__split_buffer<std::unique_ptr<AllPassComb>>::~__split_buffer((uint64_t)&v60);
        }
        else
        {
          *v46 = v44;
          v47 = v46 + 1;
        }
        v4[1] = v47;
        v41 = v42;
        v24 = *a2;
        ++v42;
      }
      while (v41 < (a2[1] - *a2) >> 2);
    }
    if (__p)
    {
      v56 = (char *)__p;
      operator delete(__p);
    }
    v4 += 3;
  }
  while (v4 != a1 + 10);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
}

void sub_1B62A8050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *--v2;
    *v2 = 0;
    *(_QWORD *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<AllPassComb>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<AllPassComb>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AUSpatialMixerV2ChannelProcessor::getDecorrFilterLengthsOnReverbSend(std::vector<unsigned int> *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  std::vector<unsigned int>::pointer end;
  uint64_t v9;
  unsigned int *v10;
  std::vector<unsigned int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::reserve(this, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v4)
  {
    v5 = 0;
    v6 = 0;
    p_end_cap = &this->__end_cap_;
    end = this->__end_;
    do
    {
      v9 = (*(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 16) - *(_QWORD *)(*(_QWORD *)(v4 + 8 * v5) + 8)) >> 2;
      if (end >= p_end_cap->__value_)
      {
        begin = this->__begin_;
        v12 = end - this->__begin_;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v14 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this->__end_cap_, v15);
          begin = this->__begin_;
          end = this->__end_;
        }
        else
        {
          v16 = 0;
        }
        v17 = (unsigned int *)&v16[4 * v12];
        *v17 = v9;
        v10 = v17 + 1;
        while (end != begin)
        {
          v18 = *--end;
          *--v17 = v18;
        }
        this->__begin_ = v17;
        this->__end_ = v10;
        this->__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v9;
        v10 = end + 1;
      }
      this->__end_ = v10;
      v4 = *(_QWORD *)(a2 + 8);
      end = v10;
      v5 = ++v6;
    }
    while (v6 < (unint64_t)((*(_QWORD *)(a2 + 16) - v4) >> 3));
  }
}

void sub_1B62A82C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setDecorrFilterCoeffsOnReverbSend(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char v12;

  v11 = (char *)a1 + 772;
  v12 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)((char *)a1 + 772));
  v4 = a1 + 1;
  v6 = *a2;
  v5 = a2[1];
  v7 = (v5 - *a2) >> 2;
  do
  {
    v8 = *v4;
    if (v7 != (v4[1] - *v4) >> 3)
      break;
    if (v5 != v6)
    {
      v9 = 0;
      do
      {
        **(_DWORD **)(v8 + 8 * v9) = *(_DWORD *)(v6 + 4 * v9);
        ++v9;
      }
      while (v7 > v9);
    }
    v4 += 3;
  }
  while (v4 != a1 + 10);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
}

void AUSpatialMixerV2ChannelProcessor::getDecorrFilterCoeffsOnReverbSend(AUSpatialMixerV2ChannelProcessor *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<float>::reserve((void **)this, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = (_QWORD *)((char *)this + 16);
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    do
    {
      v9 = **(_DWORD **)(v4 + 8 * v5);
      if ((unint64_t)v8 >= *v7)
      {
        v11 = *(_DWORD **)this;
        v12 = ((uint64_t)v8 - *(_QWORD *)this) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v14 = *v7 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 16, v15);
          v11 = *(_DWORD **)this;
          v8 = (_DWORD *)*((_QWORD *)this + 1);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = v9;
        v10 = v17 + 4;
        while (v8 != v11)
        {
          v18 = *--v8;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(_QWORD *)this = v17;
        *((_QWORD *)this + 1) = v10;
        *((_QWORD *)this + 2) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v8 = v9;
        v10 = v8 + 1;
      }
      *((_QWORD *)this + 1) = v10;
      v4 = *(_QWORD *)(a2 + 8);
      v8 = v10;
      v5 = ++v6;
    }
    while (v6 < (unint64_t)((*(_QWORD *)(a2 + 16) - v4) >> 3));
  }
}

void sub_1B62A84C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSpatialMixerV2ChannelProcessor::getHeadTrackedERFilterConfigParams(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v10;
  char v11;
  uint64_t *v12;
  char v13;

  v10 = a2 + 97;
  v11 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a2 + 97));
  if (a3 == 2)
  {
    v6 = (unsigned __int8 *)a2[20];
    if (v6)
      goto LABEL_9;
LABEL_7:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v10);
  }
  if (a3 == 1)
  {
    v6 = (unsigned __int8 *)a2[18];
    if (v6)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (a3)
    goto LABEL_7;
  v6 = (unsigned __int8 *)a2[19];
  if (!v6)
    goto LABEL_7;
LABEL_9:
  v12 = (uint64_t *)(v6 + 264);
  v13 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v6 + 264));
  v7 = atomic_load(v6 + 232);
  if ((v7 & 1) != 0 && (v8 = *((_QWORD *)v6 + 1)) != 0 || (v8 = *(_QWORD *)v6) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v10);
}

void sub_1B62A85D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a11);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AUSpatialMixerV2ChannelProcessor::setParametricProcessingReverbDelay(AUSpatialMixerV2ChannelProcessor *this, unsigned int a2)
{
  IR::FixedIntegerDelay *v4;
  _QWORD *result;

  if (a2)
  {
    v4 = (IR::FixedIntegerDelay *)operator new();
    IR::FixedIntegerDelay::FixedIntegerDelay(v4, a2, 0);
    result = (_QWORD *)*((_QWORD *)this + 108);
    *((_QWORD *)this + 108) = v4;
    if (result)
      goto LABEL_3;
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)this + 108);
    *((_QWORD *)this + 108) = 0;
    if (result)
LABEL_3:
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](result);
  }
  return result;
}

void sub_1B62A8670(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C40C92309C1);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setExclusionZones(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v7 = a1 + 772;
  v8 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 772));
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 480) + 152))(*(_QWORD *)(a1 + 480), a2);
  if (!(_DWORD)v4)
  {
    v6 = *(_QWORD *)(a1 + 488);
    if (v6)
    {
      v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 152))(v6, a2);
      if (!(_DWORD)v4)
        v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 496) + 152))(*(_QWORD *)(a1 + 496), a2);
    }
    else
    {
      v4 = 0;
    }
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
  return v4;
}

void sub_1B62A8744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSpatialMixerV2ChannelProcessor::setEnable(AUSpatialMixerV2ChannelProcessor *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  *((_BYTE *)this + 788) = a2;
  *((_DWORD *)this + 250) = a2;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 60) + 16))(*((_QWORD *)this + 60));
  v4 = *((_QWORD *)this + 61);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  result = *((_QWORD *)this + 62);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

uint64_t AUSpatialMixerV2ChannelProcessor::setBypassCoeffs(AUSpatialMixerV2ChannelProcessor *this, float *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *((_QWORD *)this + 61);
  if (v6)
  {
    (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2, a3);
    (*(void (**)(_QWORD, float *, uint64_t))(**((_QWORD **)this + 62) + 48))(*((_QWORD *)this + 62), a2, a3);
  }
  return (*(uint64_t (**)(_QWORD, float *, uint64_t))(**((_QWORD **)this + 60) + 48))(*((_QWORD *)this + 60), a2, a3);
}

void AUHandsetNoiseEQ::~AUHandsetNoiseEQ(AUHandsetNoiseEQ *this)
{
  AUHandsetNoiseEQ::~AUHandsetNoiseEQ(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E69CEF10;
  v2 = (_QWORD *)((char *)this + 560);
  std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100]((_QWORD *)this + 70, 0);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 568);
  std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100](v2, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUHandsetNoiseEQ::Initialize(AUHandsetNoiseEQ *this)
{
  ausdk::AUScope *v2;
  uint64_t Element;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int j;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  v2 = (AUHandsetNoiseEQ *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 128), 0);
  *((_DWORD *)this + 136) = *(_DWORD *)(Element + 108);
  if (*(_DWORD *)(v4 + 108) != 1)
    return 4294956421;
  for (i = 0; ; ++i)
  {
    v6 = *((_QWORD *)this + 15);
    if (v6)
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    else
      v7 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (i >= v7)
      break;
    v8 = ausdk::AUScope::SafeGetElement(v2, i);
    if (*(_DWORD *)(v8 + 108) != *((_DWORD *)this + 136))
      return 4294956421;
  }
  for (j = 0; ; ++j)
  {
    v10 = *((_QWORD *)this + 21);
    if (v10)
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      v11 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (j >= v11)
      break;
    v12 = ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 128), j);
    if (*(_DWORD *)(v12 + 108) != 1)
      return 4294956421;
  }
  v14 = *((unsigned int *)this + 84);
  v15 = operator new();
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)(v15 + 112) = 0;
  *(_BYTE *)(v15 + 1) = 1;
  *(_DWORD *)(v15 + 52) = 0;
  *(_OWORD *)(v15 + 36) = 0u;
  *(_OWORD *)(v15 + 20) = 0u;
  *(_OWORD *)(v15 + 4) = 0u;
  *(_QWORD *)(v15 + 56) = 1;
  *(_DWORD *)(v15 + 64) = 619091349;
  *(_OWORD *)(v15 + 72) = xmmword_1B66A1E40;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 96) = 0;
  *(_BYTE *)(v15 + 112) = 1;
  *(_OWORD *)(v15 + 248) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100]((_QWORD *)this + 70, v15);
  v16 = *((_QWORD *)this + 70);
  if (v16)
  {
    if (!(_DWORD)v14)
      __assert_rtn("Initialize", "HandsetNoiseEQCore.h", 81, "hopsize > 0");
    v17 = (v14 + 1);
    if ((_DWORD)v14 == -1)
      __assert_rtn("Initialize", "HandsetNoiseEQCore.h", 82, "numFreqBins > 0");
    if (*((_DWORD *)this + 136) != 2)
      __assert_rtn("Initialize", "HandsetNoiseEQCore.h", 83, "inMics == 2");
    *(float *)(v16 + 4) = (float)*((unsigned int *)this + 137);
    *(_QWORD *)(v16 + 8) = v14;
    *(_QWORD *)(v16 + 16) = v14;
    *(_OWORD *)(v16 + 24) = xmmword_1B66A1E50;
    *(_BYTE *)(v16 + 1) = 1;
    *(_QWORD *)(v16 + 40) = v17;
    v21 = 0;
    std::vector<float>::resize(v16 + 120, v17, &v21);
    v18 = *(_QWORD *)(v16 + 40);
    v21 = 0;
    std::vector<float>::resize(v16 + 144, v18, &v21);
    v19 = *(_QWORD *)(v16 + 40);
    v21 = 0;
    std::vector<float>::resize(v16 + 168, v19, &v21);
    std::vector<float>::resize(v16 + 192, *(_QWORD *)(v16 + 40));
    std::vector<float>::resize(v16 + 216, *(_QWORD *)(v16 + 40));
    v20 = *(_QWORD *)(v16 + 40);
    v21 = 1065353216;
    std::vector<float>::resize(v16 + 240, v20, &v21);
    *(_BYTE *)v16 = 1;
  }
  return (*(uint64_t (**)(AUHandsetNoiseEQ *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
}

_QWORD *AUHandsetNoiseEQ::Cleanup(AUHandsetNoiseEQ *this)
{
  return std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100]((_QWORD *)this + 70, 0);
}

uint64_t AUHandsetNoiseEQ::Reset(AUHandsetNoiseEQ *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*((_QWORD *)this + 70))
  {
    AUHandsetNoiseEQ::UpdateState(this);
    v2 = *((_QWORD *)this + 70);
    *(_BYTE *)(v2 + 1) = 1;
    v3 = *(void **)(v2 + 240);
    v4 = *(_QWORD *)(v2 + 248) - (_QWORD)v3;
    if (v4 >= 1)
      memset_pattern16(v3, &unk_1B6627B80, 4 * (((unint64_t)v4 >> 2) - ((unint64_t)v4 > 3)) + 4);
  }
  return 0;
}

uint64_t AUHandsetNoiseEQ::GetPropertyInfo(AUHandsetNoiseEQ *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUHandsetNoiseEQ::GetProperty(AUHandsetNoiseEQ *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = *((_DWORD *)this + 134);
  }
  result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUHandsetNoiseEQ::SetProperty(AUHandsetNoiseEQ *this, int a2, int a3, unsigned int a4, _BYTE *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5)
        return 0;
      else
        return 4294956445;
    }
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_DWORD *)this + 134) = *(_DWORD *)a5;
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::SetParameter(AUHandsetNoiseEQ *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUHandsetNoiseEQ::CanScheduleParameters(AUHandsetNoiseEQ *this)
{
  return 0;
}

uint64_t AUHandsetNoiseEQ::ProcessMultipleBufferLists(AUHandsetNoiseEQ *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unint64_t v11;
  AudioDSP::Utility *v12;
  uint64_t v13;
  unint64_t v14;
  const AudioBufferList **v15;
  AudioBufferList *v16;
  UInt32 mNumberBuffers;
  BOOL v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  AudioBufferList **v24;
  uint64_t v25;
  AudioBuffer *mBuffers;
  uint64_t v27;
  vDSP_Length v28;
  uint64_t v29;
  AudioBufferList *v30;
  float *v31;
  uint64_t v32;
  float *v33;
  const float *v34;
  const float *v35;
  unint64_t v36;
  const AudioBufferList *v37;
  AudioBufferList *v38;
  void *v39;
  AudioBufferList *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  float *v53;
  double v54;
  float v55;
  _BYTE *v56;
  _BYTE *v57;
  const AudioBufferList *v58;
  void *mData;
  unint64_t v60;
  uint64_t v61;
  AudioBufferList *v62;
  uint64_t v63;
  unint64_t v64;
  const AudioBufferList *v65;
  AudioBufferList *v66;
  void *v67;
  AudioBufferList __A;
  int v70;
  UInt32 v71;
  uint64_t v72;
  AudioStreamBasicDescription v73;

  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != a3)
    return 4294956422;
  LOBYTE(v73.mSampleRate) = 0;
  v11 = a4;
  if (a4)
  {
    v12 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 138));
    v13 = a4 - 1;
    HIDWORD(v14) = 41;
    v15 = a5;
    while (1)
    {
      v16 = (AudioBufferList *)*v15;
      if (!*v15)
        return 4294956420;
      mNumberBuffers = v16->mNumberBuffers;
      if (v16->mNumberBuffers != *((_DWORD *)this + 136))
        return 4294956428;
      LODWORD(v14) = *((_DWORD *)this + 137);
      *(double *)&__A.mNumberBuffers = (double)v14;
      __A.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
      v70 = 4;
      v71 = mNumberBuffers;
      v72 = 32;
      AudioDSP::Utility::DetectNonFinites(v12, v16, &__A, &v73, (BOOL *)a5);
      v18 = LOBYTE(v73.mSampleRate) == 0;
      v20 = v13-- != 0;
      if (!LOBYTE(v73.mSampleRate))
      {
        ++v15;
        if (v20)
          continue;
      }
      goto LABEL_15;
    }
  }
  v18 = 1;
LABEL_15:
  v22 = a6;
  if (a6)
  {
    v23 = a6;
    v24 = a7;
    while (*v24)
    {
      if ((*v24)->mNumberBuffers != 1)
        return 4294956428;
      ++v24;
      if (!--v23)
        goto LABEL_20;
    }
    return 4294956420;
  }
LABEL_20:
  if (v18 || !*((_BYTE *)this + 556))
  {
    v25 = *((_QWORD *)this + 70);
    if (v25)
    {
      if (*((_DWORD *)this + 133) == *((_DWORD *)this + 132)
        || (AUHandsetNoiseEQ::UpdateState(this),
            *((_DWORD *)this + 133) = *((_DWORD *)this + 132),
            (v25 = *((_QWORD *)this + 70)) != 0))
      {
        if (*(_BYTE *)v25)
        {
          mBuffers = (*a5)->mBuffers;
          v27 = *(_QWORD *)(v25 + 56);
          v28 = *(_QWORD *)(v25 + 16);
          v29 = (uint64_t)mBuffers[*(_QWORD *)(v25 + 48)].mData + 4 * v28;
          *(_QWORD *)&__A.mNumberBuffers = mBuffers[*(_QWORD *)(v25 + 48)].mData;
          *(_QWORD *)&__A.mBuffers[0].mNumberChannels = v29;
          v30 = *a7;
          *(_QWORD *)((char *)&v73.mBytesPerPacket + 1) = mBuffers[v27].mData;
          *(_QWORD *)((char *)&v73.mBytesPerFrame + 1) = *(_QWORD *)((char *)&v73.mBytesPerPacket + 1) + 4 * v28;
          *(_QWORD *)((char *)&v73.mSampleRate + 1) = v30->mBuffers[0].mData;
          *(_QWORD *)((char *)&v73.mFormatID + 1) = *(_QWORD *)((char *)&v73.mSampleRate + 1) + 4 * v28;
          vDSP_zvabs((const DSPSplitComplex *)&__A, 1, *(float **)(v25 + 192), 1, v28);
          vDSP_zvabs((const DSPSplitComplex *)((char *)&v73.mBytesPerPacket + 1), 1, *(float **)(v25 + 216), 1, *(_QWORD *)(v25 + 16));
          v31 = *(float **)(v25 + 192);
          *v31 = fabsf(**(float **)&__A.mNumberBuffers);
          v32 = *(_QWORD *)(v25 + 16);
          v31[v32] = fabsf(**(float **)&__A.mBuffers[0].mNumberChannels);
          v33 = *(float **)(v25 + 216);
          *v33 = fabsf(**(float **)((char *)&v73.mBytesPerPacket + 1));
          v33[v32] = fabsf(**(float **)((char *)&v73.mBytesPerFrame + 1));
          vDSP_vsadd(v33, 1, (const float *)(v25 + 64), v33, 1, *(_QWORD *)(v25 + 40));
          vDSP_vsadd(*(const float **)(v25 + 192), 1, (const float *)(v25 + 64), *(float **)(v25 + 192), 1, *(_QWORD *)(v25 + 40));
          v34 = *(const float **)(v25 + 192);
          v35 = *(const float **)(v25 + 216);
          if (*(_BYTE *)(v25 + 1))
          {
            *(_BYTE *)(v25 + 1) = 0;
            vDSP_vsadd(v34, 1, (const float *)(v25 + 64), *(float **)(v25 + 144), 1, *(_QWORD *)(v25 + 40));
            vDSP_vsadd(v35, 1, (const float *)(v25 + 64), *(float **)(v25 + 120), 1, *(_QWORD *)(v25 + 40));
          }
          else
          {
            vDSP_vavlin(*(const float **)(v25 + 216), 1, (const float *)(v25 + 108), *(float **)(v25 + 120), 1, *(_QWORD *)(v25 + 40));
            vDSP_vavlin(v34, 1, (const float *)(v25 + 108), *(float **)(v25 + 144), 1, *(_QWORD *)(v25 + 40));
          }
          v43 = *(_QWORD *)(v25 + 40);
          if (v43)
          {
            v44 = 0;
            while (*(float *)(v25 + 68) > *(float *)(v25 + 84))
            {
              v45 = *(float *)(*(_QWORD *)(v25 + 144) + 4 * v44);
              v46 = *(float *)(*(_QWORD *)(v25 + 120) + 4 * v44);
              v47 = *(_QWORD *)(v25 + 240);
              if ((float)(v45 / v46) < *(float *)(v25 + 80))
                goto LABEL_50;
              v48 = (float)(1.0 - *(float *)(v25 + 100)) + (float)(*(float *)(v25 + 100) * *(float *)(v47 + 4 * v44));
LABEL_55:
              *(float *)(v47 + 4 * v44++) = v48;
              if (v43 == v44)
                goto LABEL_56;
            }
            v47 = *(_QWORD *)(v25 + 240);
            v45 = *(float *)(*(_QWORD *)(v25 + 144) + 4 * v44);
            v46 = *(float *)(*(_QWORD *)(v25 + 120) + 4 * v44);
LABEL_50:
            v49 = v45 / (float)(v46 + *(float *)(v25 + 64));
            if (v49 < *(float *)(v25 + 72))
              v49 = *(float *)(v25 + 72);
            if (*(float *)(v25 + 76) < v49)
              v49 = *(float *)(v25 + 76);
            v48 = (float)((float)(1.0 - *(float *)(v25 + 104)) * v49)
                + (float)(*(float *)(v25 + 104) * *(float *)(v47 + 4 * v44));
            goto LABEL_55;
          }
LABEL_56:
          if (*(_BYTE *)(v25 + 112))
          {
            v50 = *(_DWORD **)(v25 + 168);
            *v50 = 1065353216;
            v50[v43 - 1] = 1065353216;
            if ((unint64_t)(v43 - 1) >= 2)
            {
              v51 = v50 + 1;
              v52 = v43 - 2;
              v53 = (float *)(*(_QWORD *)(v25 + 240) + 8);
              do
              {
                v54 = *(v53 - 1) * 0.5 + *(v53 - 2) * 0.25;
                v55 = *v53++;
                *(float *)&v54 = v54 + v55 * 0.25;
                *v51++ = LODWORD(v54);
                --v52;
              }
              while (v52);
            }
          }
          else
          {
            v56 = *(_BYTE **)(v25 + 240);
            v57 = *(_BYTE **)(v25 + 248);
            if (v57 != v56)
              memmove(*(void **)(v25 + 168), v56, v57 - v56);
          }
          vDSP_zrvmul((const DSPSplitComplex *)((char *)&v73.mBytesPerPacket + 1), 1, *(const float **)(v25 + 168), 1, (const DSPSplitComplex *)((char *)&v73.mSampleRate + 1), 1, *(_QWORD *)(v25 + 16));
          v21 = 0;
          **(float **)((char *)&v73.mFormatID + 1) = *(float *)(*(_QWORD *)(v25 + 168) + 4 * *(_QWORD *)(v25 + 40) - 4)
                                                   * **(float **)((char *)&v73.mBytesPerFrame + 1);
          if (!*((_DWORD *)this + 134))
            goto LABEL_67;
        }
        else
        {
          v21 = 4294956429;
        }
        v58 = *a5;
        if ((*a5)->mBuffers[0].mDataByteSize <= (*a7)->mBuffers[0].mDataByteSize)
        {
          mData = (*a7)->mBuffers[0].mData;
          if (v58->mBuffers[0].mData != mData)
            memcpy(mData, *(const void **)&v58[1].mBuffers[0].mNumberChannels, *(&v58[1].mNumberBuffers + 1));
        }
      }
      else
      {
        v21 = 0;
      }
LABEL_67:
      if (a6 >= 2)
      {
        v60 = 1;
        do
        {
          if (v60 >= v11)
          {
            v62 = a7[v60];
            if (v62->mNumberBuffers)
            {
              v63 = 0;
              v64 = 0;
              do
              {
                bzero(v62->mBuffers[v63].mData, v62->mBuffers[v63].mDataByteSize);
                ++v64;
                v62 = a7[v60];
                ++v63;
              }
              while (v64 < v62->mNumberBuffers);
            }
          }
          else
          {
            v61 = *((_QWORD *)this + 70);
            if (*(_BYTE *)v61)
            {
              memcpy(a7[v60]->mBuffers[0].mData, a5[v60]->mBuffers[*(_QWORD *)(v61 + 56)].mData, a7[v60]->mBuffers[0].mDataByteSize);
              v21 = 0;
            }
            else
            {
              v65 = a5[v60];
              v66 = a7[v60];
              if (v65->mBuffers[0].mDataByteSize <= v66->mBuffers[0].mDataByteSize)
              {
                v67 = v66->mBuffers[0].mData;
                if (v65->mBuffers[0].mData != v67)
                  memcpy(v67, *(const void **)&v65[1].mBuffers[0].mNumberChannels, *(&v65[1].mNumberBuffers + 1));
              }
              v21 = 4294956429;
            }
          }
          ++v60;
        }
        while (v60 != v22);
      }
      return v21;
    }
  }
  if (a6)
  {
    v36 = 0;
    do
    {
      if (v36 >= v11)
      {
        v40 = a7[v36];
        if (v40->mNumberBuffers)
        {
          v41 = 0;
          v42 = 0;
          do
          {
            bzero(v40->mBuffers[v41].mData, v40->mBuffers[v41].mDataByteSize);
            ++v42;
            v40 = a7[v36];
            ++v41;
          }
          while (v42 < v40->mNumberBuffers);
        }
      }
      else
      {
        v37 = a5[v36];
        v38 = a7[v36];
        if (v37->mBuffers[0].mDataByteSize <= v38->mBuffers[0].mDataByteSize)
        {
          v39 = v38->mBuffers[0].mData;
          if (v37->mBuffers[0].mData != v39)
            memcpy(v39, *(const void **)&v37[1].mBuffers[0].mNumberChannels, *(&v37[1].mNumberBuffers + 1));
        }
      }
      ++v36;
    }
    while (v36 != v22);
  }
  return 0;
}

uint64_t AUHandsetNoiseEQ::Render(AUHandsetNoiseEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  ausdk::AUIOElement *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  v8 = (AUHandsetNoiseEQ *)((char *)this + 80);
  v9 = *((_QWORD *)this + 15);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  else
    v10 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v11 = 0;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      if (ausdk::AUBase::HasInput(this, v12))
      {
        Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, v12);
        result = ausdk::AUInputElement::PullInput(Element, a2, a3, v12, a4);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        v11 = 1;
      }
      v12 = (v12 + 1);
    }
    while ((_DWORD)v10 != (_DWORD)v12);
  }
  v15 = *((_QWORD *)this + 21);
  if (v15)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    LODWORD(v16) = v15;
  }
  else
  {
    v16 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  }
  v31[2] = v31;
  v17 = v16;
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v31 - v19;
  if (v18 >= 0x200)
    v21 = 512;
  else
    v21 = v18;
  bzero((char *)v31 - v19, v21);
  if ((_DWORD)v16)
  {
    v23 = 0;
    do
    {
      v24 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUHandsetNoiseEQ *)((char *)this + 128), v23);
      v22 = ausdk::AUIOElement::PrepareBuffer(v24, a4);
      *(_QWORD *)&v20[8 * v23++] = v22;
    }
    while (v17 != v23);
  }
  if ((v11 & 1) != 0)
    return 0;
  v31[1] = v31;
  MEMORY[0x1E0C80A78](v22);
  v27 = (char *)v31 - v26;
  if (v25 >= 0x200)
    v28 = 512;
  else
    v28 = v25;
  bzero((char *)v31 - v26, v28);
  if ((_DWORD)v10)
  {
    v29 = 0;
    do
    {
      v30 = ausdk::AUScope::SafeGetElement(v8, v29);
      *(_QWORD *)&v27[8 * v29++] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v30 + 144));
    }
    while (v10 != v29);
  }
  return (*(uint64_t (**)(AUHandsetNoiseEQ *, unsigned int *, uint64_t, uint64_t, char *, uint64_t, char *))(*(_QWORD *)this + 184))(this, a2, a4, v10, v27, v17, v20);
}

BOOL AUHandsetNoiseEQ::BusCountWritable(AUHandsetNoiseEQ *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUHandsetNoiseEQ::SetBusCount(AUHandsetNoiseEQ *this, int a2, unsigned int a3)
{
  unsigned int v3;
  int64x2_t *v4;
  uint64_t v5;

  v3 = a3 - 1;
  if (a2 == 1 && v3 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  v5 = 4294956445;
  if (a2 == 2 && v3 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

uint64_t AUHandsetNoiseEQ::GetParameterInfo(AUHandsetNoiseEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t result;
  char *v8;
  _QWORD *v9;
  const __CFString *v10;
  AudioUnitParameterValue v11;
  AudioUnitParameterUnit v12;
  int v13;
  AudioUnitParameterOptions v14;
  uint64_t v15;
  unsigned int v16;

  v16 = a3;
  a4->flags = 0;
  a4->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 8)
  {
    v8 = (char *)this + 568;
    if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((_QWORD *)this + 71, a3))
    {
      v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v8, a3, &v16);
      v10 = (const __CFString *)v9[3];
      v11 = *((float *)v9 + 8);
      v12 = *((_DWORD *)v9 + 11);
      v13 = *((_DWORD *)v9 + 12);
      v14 = a4->flags | 0x8000000;
      v15 = *(_QWORD *)((char *)v9 + 36);
      a4->cfNameString = v10;
      a4->flags = v14;
      CFStringGetCString(v10, a4->name, 52, 0x8000100u);
      result = 0;
      a4->defaultValue = v11;
      *(_QWORD *)&a4->minValue = v15;
      a4->unit = v12;
      a4->flags |= v13;
    }
    else
    {
      return 4294956418;
    }
  }
  return result;
}

uint64_t AUHandsetNoiseEQ::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUHandsetNoiseEQ::GetParameterValueStrings(AUHandsetNoiseEQ *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3 != 8)
    return 0;
  v7 = xmmword_1E69CF150;
  v6 = CFArrayCreate(0, (const void **)&v7, 2, 0);
  result = 0;
  *a4 = v6;
  return result;
}

double AUHandsetNoiseEQ::GetLatency(AUHandsetNoiseEQ *this)
{
  return 0.0;
}

double AUHandsetNoiseEQ::GetTailTime(AUHandsetNoiseEQ *this)
{
  return 0.0;
}

uint64_t AUHandsetNoiseEQ::SupportsTail(AUHandsetNoiseEQ *this)
{
  return 1;
}

BOOL AUHandsetNoiseEQ::StreamFormatWritable(AUHandsetNoiseEQ *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUHandsetNoiseEQ::SupportedNumChannels(AUHandsetNoiseEQ *this, const AUChannelInfo **a2)
{
  AUHandsetNoiseEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs = 65538;
  if (a2)
    *a2 = (const AUChannelInfo *)&AUHandsetNoiseEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUHandsetNoiseEQ::ValidFormat(AUHandsetNoiseEQ *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;
  BOOL v6;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2)
  {
    v6 = a4->mChannelsPerFrame == 1;
  }
  else
  {
    if (a2 != 1)
      return result;
    v6 = a4->mChannelsPerFrame == 2;
  }
  if (v6)
    return result;
  else
    return 0;
}

uint64_t AUHandsetNoiseEQ::ChangeStreamFormat(AUHandsetNoiseEQ *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (a4->mSampleRate != a5->mSampleRate)
    *((_DWORD *)this + 137) = a5->mSampleRate;
  return 0;
}

uint64_t AUHandsetNoiseEQ::SetMaxFramesPerSlice(AUHandsetNoiseEQ *this, int a2)
{
  uint64_t result;

  result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 138) != a2)
    *((_DWORD *)this + 138) = a2;
  return result;
}

void AUHandsetNoiseEQ::UpdateState(AUHandsetNoiseEQ *this)
{
  unsigned int i;
  uint64_t v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  if (*((_QWORD *)this + 70))
  {
    for (i = 0; i != 9; ++i)
    {
      v3 = *((_QWORD *)this + 70);
      v4 = *((_QWORD *)this + 9);
      if (v4)
      {
        v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
      }
      else
      {
        v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v6)
          v5 = 0;
        else
          v5 = *v6;
      }
      Parameter = ausdk::AUElement::GetParameter(v5, i);
      switch(i)
      {
        case 0u:
          *(float *)(v3 + 68) = Parameter;
          break;
        case 1u:
          v8 = __exp10(Parameter / 20.0);
          *(float *)(v3 + 72) = v8;
          break;
        case 2u:
          v9 = __exp10(Parameter / 20.0);
          *(float *)(v3 + 76) = v9;
          break;
        case 3u:
          *(float *)(v3 + 80) = Parameter;
          break;
        case 4u:
          *(float *)(v3 + 84) = Parameter;
          break;
        case 5u:
          *(float *)(v3 + 88) = Parameter;
          v10 = 0.0;
          if (Parameter != 0.0)
            v10 = expf((float)((float)-(float)*(unint64_t *)(v3 + 16) / *(float *)(v3 + 4)) / Parameter);
          *(float *)(v3 + 104) = v10;
          break;
        case 6u:
          *(float *)(v3 + 92) = Parameter;
          v11 = 0.0;
          if (Parameter != 0.0)
            v11 = expf((float)((float)-(float)*(unint64_t *)(v3 + 16) / *(float *)(v3 + 4)) / Parameter);
          *(float *)(v3 + 100) = v11;
          break;
        case 7u:
          *(float *)(v3 + 96) = Parameter;
          v12 = 0.0;
          if (Parameter != 0.0)
            v12 = expf((float)((float)-(float)*(unint64_t *)(v3 + 16) / *(float *)(v3 + 4)) / Parameter);
          *(float *)(v3 + 108) = v12 / (float)(1.0 - v12);
          break;
        default:
          continue;
      }
    }
  }
}

_QWORD *std::unique_ptr<HandsetNoiseEQCore>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (void *)v2[30];
    if (v3)
    {
      v2[31] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[27];
    if (v4)
    {
      v2[28] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[24];
    if (v5)
    {
      v2[25] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[21];
    if (v6)
    {
      v2[22] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[18];
    if (v7)
    {
      v2[19] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[15];
    if (v8)
    {
      v2[16] = v8;
      operator delete(v8);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

os_log_t ___ZL24AUHandsetNoiseEQLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aunsel");
  *v0 = result;
  AUHandsetNoiseEQLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t *std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)(v2 + 248), 0);
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2 + 224);
    std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2 + 208);
    v6 = (void **)(v2 + 184);
    std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&v6);
    if (*(char *)(v2 + 183) < 0)
      operator delete(*(void **)(v2 + 160));
    v3 = *(void **)(v2 + 136);
    if (v3)
    {
      *(_QWORD *)(v2 + 144) = v3;
      operator delete(v3);
    }
    v6 = (void **)(v2 + 72);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v4 = *(void **)(v2 + 32);
    if (v4)
    {
      *(_QWORD *)(v2 + 40) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 8);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = v5;
      operator delete(v5);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)v2, 0);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t AUSM::MatrixMix::MatrixMix(uint64_t a1, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  size_t v7;
  __int128 *v8;
  const void *v9;
  __int128 v11;
  uint64_t v12;

  *(_DWORD *)a1 = 0;
  std::vector<AudioChannelLayout>::vector((_QWORD *)(a1 + 8), 1uLL);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  std::vector<AudioChannelLayout>::vector((_QWORD *)(a1 + 32), 1uLL);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  v6 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  if (*((char *)a2 + 23) >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v11, v7 + 10);
  if (v12 >= 0)
    v8 = &v11;
  else
    v8 = (__int128 *)v11;
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "|MatrixMix");
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v11;
  *(_QWORD *)(a1 + 184) = v12;
  return a1;
}

void sub_1B62A9DF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t *v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (*(char *)(v1 + 191) < 0)
    operator delete(*v5);
  std::unique_ptr<NeuralTranscoder>::reset[abi:ne180100](v4, 0);
  v8 = *(void **)(v1 + 120);
  if (v8)
  {
    *(_QWORD *)(v1 + 128) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v1 + 96);
  if (v9)
  {
    *(_QWORD *)(v1 + 104) = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 80) = v10;
    operator delete(v10);
  }
  v11 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t AUSM::MatrixMix::createHOADecoders(AUSM::MatrixMix *this, int a2, unsigned int a3)
{
  NSObject *v6;
  _QWORD *v7;
  int v8;
  const AudioChannelLayout *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::vector<char>::pointer begin;
  char *v29;
  void *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  ausdk::AUChannelLayout *v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  int *v67;
  char *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unsigned int v88;
  NSObject *v89;
  int Decoder;
  NSObject *v91;
  char *v92;
  NSObject *v93;
  uint64_t v94;
  void *v95;
  const float **v96;
  std::vector<char>::pointer v97;
  std::vector<char>::pointer end;
  unsigned int *v99;
  NSObject *v100;
  _QWORD *v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t i;
  unint64_t v110;
  std::vector<char>::pointer v111;
  char *v112;
  void *v113;
  char *v114;
  int64_t v115;
  unint64_t v116;
  int64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  int v121;
  uint64_t v122;
  char *v123;
  void *v124;
  char *v125;
  int64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  int v132;
  int v133;
  char *v134;
  _DWORD *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  int v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  vDSP_Length v147;
  unint64_t v148;
  unint64_t v149;
  vDSP_Length v150;
  unint64_t v151;
  char *v152;
  int v153;
  int v154;
  uint64_t v155;
  char *v156;
  std::vector<char>::pointer v157;
  unint64_t v158;
  int64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  int v168;
  _DWORD *v169;
  char *v170;
  int v171;
  char *v172;
  int v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  std::vector<char>::pointer v178;
  char *v179;
  int v180;
  char *v181;
  std::vector<char>::pointer v182;
  char **v183;
  unint64_t v184;
  unint64_t v185;
  _DWORD *v186;
  _DWORD *v187;
  int v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  _DWORD *v192;
  _DWORD *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  __int128 v212;
  uint64_t v213;
  int *v214;
  uint64_t v215;
  int *v216;
  int *v217;
  int v218;
  int v219;
  int v220;
  char *v222;
  char *v223;
  int v224;
  void **v225;
  _QWORD *v226;
  vDSP_Length v227;
  int v228;
  unsigned int v229;
  void *v230[2];
  char v231;
  void *v232;
  char *v233;
  char *v234;
  std::vector<char>::value_type __x[8];
  char *v236;
  uint64_t v237;
  _BYTE v238[56];
  __int128 v239;
  void *v240[2];
  _QWORD v241[2];
  void *__p[2];
  _QWORD v243[2];
  std::vector<char> v244;
  __int128 v245;
  void *v246;
  void *v247;
  uint8_t v248[24];
  __int128 v249;
  void *v250;
  char *v251;
  uint64_t v252;
  const void *v253;
  uint64_t v254;
  const void *v255;
  uint64_t v256;
  uint8_t buf[4];
  _QWORD *v258;
  _BYTE v259[12];
  void *__src;
  uint64_t v261;
  const void *v262;
  uint64_t v263;
  const void *v264;
  uint64_t v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v6 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)((char *)this + 168);
    if (*((char *)this + 191) < 0)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136315394;
    v258 = v7;
    *(_WORD *)v259 = 2080;
    *(_QWORD *)&v259[2] = "createHOADecoders";
    _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] Creating HOA decoders", buf, 0x16u);
  }
  if (*((_BYTE *)this + 160))
    v8 = *(_DWORD *)(*((_QWORD *)this + 19) + 64) | 0xBE0000;
  else
    v8 = **((_DWORD **)this + 1);
  HOA::HOA((uint64_t)buf, v8, *((_DWORD *)this + 50));
  if (*((_BYTE *)this + 160) || *(_DWORD *)v259 == *((_DWORD *)this + 14))
  {
    __p[0] = 0;
    __p[1] = 0;
    v243[0] = 0;
    v240[0] = 0;
    v240[1] = 0;
    v241[0] = 0;
    *(_QWORD *)&v238[48] = 0;
    v239 = 0uLL;
    *((_DWORD *)this + 15) = 0;
    if (a2)
    {
      v10 = *(_DWORD *)this;
      if (*(_DWORD *)this != 5 && v10 != 3)
      {
LABEL_314:
        switch(v10)
        {
          case 4:
            v190 = *((unsigned int *)this + 14);
            *((_DWORD *)this + 15) = v190;
            *(_DWORD *)v248 = 0;
            std::vector<float>::assign((char **)__p, v190, v248);
            v191 = *((unsigned int *)this + 15);
            *(_DWORD *)v248 = 0;
            std::vector<float>::assign((char **)v240, v191, v248);
            std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v238[48], *((unsigned int *)this + 15));
            v192 = *(_DWORD **)&v238[48];
            v193 = (_DWORD *)v239;
            if (*(_QWORD *)&v238[48] != (_QWORD)v239)
            {
              v194 = 0x10000;
              do
                *v192++ = v194++;
              while (v192 != v193);
            }
            break;
          case 5:
            if (*((_BYTE *)this + 160))
              v189 = *(_DWORD *)(*((_QWORD *)this + 19) + 64) + 4;
            else
              v189 = *((_DWORD *)this + 14);
            *((_DWORD *)this + 15) = v189;
            break;
          case 6:
            *((_DWORD *)this + 15) = 1;
            *(_DWORD *)v248 = 0;
            std::vector<float>::assign((char **)__p, 1uLL, v248);
            v185 = *((unsigned int *)this + 15);
            *(_DWORD *)v248 = 0;
            std::vector<float>::assign((char **)v240, v185, v248);
            std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v238[48], *((unsigned int *)this + 15));
            v186 = *(_DWORD **)&v238[48];
            v187 = (_DWORD *)v239;
            if (*(_QWORD *)&v238[48] != (_QWORD)v239)
            {
              v188 = 0x10000;
              do
                *v186++ = v188++;
              while (v186 != v187);
            }
            break;
        }
        if (((char *)v240[1] - (char *)v240[0]) >> 2 >= (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 2))
          v195 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        else
          v195 = ((char *)v240[1] - (char *)v240[0]) >> 2;
        if ((uint64_t)(v239 - *(_QWORD *)&v238[48]) >> 2 < v195)
          v195 = (uint64_t)(v239 - *(_QWORD *)&v238[48]) >> 2;
        v196 = v195;
        v198 = *((_QWORD *)this + 9);
        v197 = *((_QWORD *)this + 10);
        v199 = (v197 - v198) >> 5;
        if (v196 <= v199)
        {
          if (v196 < v199)
            *((_QWORD *)this + 10) = v198 + 32 * v196;
        }
        else
        {
          v200 = *((_QWORD *)this + 11);
          if (v196 - v199 <= (v200 - v197) >> 5)
          {
            v213 = v197 + 32 * (v196 - v199);
            do
            {
              *(_QWORD *)v197 = 0;
              *(_OWORD *)(v197 + 8) = xmmword_1B6627BD0;
              *(_QWORD *)(v197 + 24) = 0xFFFFFFFF00000001;
              v197 += 32;
            }
            while (v197 != v213);
            *((_QWORD *)this + 10) = v213;
            if (!v196)
              goto LABEL_358;
            goto LABEL_356;
          }
          v201 = v200 - v198;
          v202 = (v200 - v198) >> 4;
          if (v202 <= v196)
            v202 = v196;
          if (v201 >= 0x7FFFFFFFFFFFFFE0)
            v203 = 0x7FFFFFFFFFFFFFFLL;
          else
            v203 = v202;
          v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v203);
          v206 = &v204[32 * v199];
          v207 = &v204[32 * v196];
          v208 = v206;
          do
          {
            *(_QWORD *)v208 = 0;
            *(_OWORD *)(v208 + 8) = xmmword_1B6627BD0;
            *((_QWORD *)v208 + 3) = 0xFFFFFFFF00000001;
            v208 += 32;
          }
          while (v208 != v207);
          v209 = &v204[32 * v205];
          v211 = (char *)*((_QWORD *)this + 9);
          v210 = (char *)*((_QWORD *)this + 10);
          if (v210 != v211)
          {
            do
            {
              v212 = *((_OWORD *)v210 - 1);
              *((_OWORD *)v206 - 2) = *((_OWORD *)v210 - 2);
              *((_OWORD *)v206 - 1) = v212;
              v206 -= 32;
              v210 -= 32;
            }
            while (v210 != v211);
            v210 = (char *)*((_QWORD *)this + 9);
          }
          *((_QWORD *)this + 9) = v206;
          *((_QWORD *)this + 10) = v207;
          *((_QWORD *)this + 11) = v209;
          if (v210)
          {
            operator delete(v210);
            if (!v196)
            {
LABEL_358:
              v94 = 0;
              goto LABEL_359;
            }
LABEL_356:
            v214 = (int *)__p[0];
            v215 = *((_QWORD *)this + 9);
            v216 = (int *)v240[0];
            v217 = *(int **)&v238[48];
            do
            {
              v218 = *v214++;
              *(_DWORD *)v215 = v218;
              v219 = *v216++;
              *(_DWORD *)(v215 + 4) = v219;
              *(_OWORD *)(v215 + 8) = xmmword_1B6627BD0;
              *(_DWORD *)(v215 + 24) = 1;
              v220 = *v217++;
              *(_DWORD *)(v215 + 28) = v220;
              v215 += 32;
              --v196;
            }
            while (v196);
            goto LABEL_358;
          }
        }
        if (!v196)
          goto LABEL_358;
        goto LABEL_356;
      }
      HOA::createSphericalGridDecoder((unsigned int *)buf);
      *((_DWORD *)this + 15) = *(_DWORD *)&v259[8];
      memset(v248, 0, sizeof(v248));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v248, v262, v263, (v263 - (uint64_t)v262) >> 2);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = *(_OWORD *)v248;
      v243[0] = *(_QWORD *)&v248[16];
      memset(v248, 0, sizeof(v248));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v248, v264, v265, (v265 - (uint64_t)v264) >> 2);
      if (v240[0])
      {
        v240[1] = v240[0];
        operator delete(v240[0]);
      }
      *(_OWORD *)v240 = *(_OWORD *)v248;
      v241[0] = *(_QWORD *)&v248[16];
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)&v238[48], *((unsigned int *)this + 15));
      v11 = *(_DWORD **)&v238[48];
      v12 = (_DWORD *)v239;
      if (*(_QWORD *)&v238[48] != (_QWORD)v239)
      {
        v13 = 0x10000;
        do
          *v11++ = v13++;
        while (v11 != v12);
      }
      v14 = *((_DWORD *)this + 48);
      if (v258 <= v14)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v15 = getAUSMV2Log(void)::gLog;
        v14 = 0;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v16 = (_QWORD *)((char *)this + 168);
          if (*((char *)this + 191) < 0)
            v16 = (_QWORD *)*v16;
          v17 = *((_DWORD *)this + 48);
          *(_DWORD *)v248 = 136315906;
          *(_QWORD *)&v248[4] = v16;
          *(_WORD *)&v248[12] = 2080;
          *(_QWORD *)&v248[14] = "createHOADecoders";
          *(_WORD *)&v248[22] = 1024;
          LODWORD(v249) = v17;
          WORD2(v249) = 1024;
          *(_DWORD *)((char *)&v249 + 6) = (_DWORD)v258;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] HOA reverb order (%u) can not be greater or equal to input HOA order (%u)", v248, 0x22u);
          v14 = 0;
        }
      }
      v18 = *((_DWORD *)this + 51);
      if (v258 <= v18)
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v100 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          v101 = (_QWORD *)((char *)this + 168);
          if (*((char *)this + 191) < 0)
            v101 = (_QWORD *)*v101;
          v102 = *((_DWORD *)this + 51);
          *(_DWORD *)v248 = 136315906;
          *(_QWORD *)&v248[4] = v101;
          *(_WORD *)&v248[12] = 2080;
          *(_QWORD *)&v248[14] = "createHOADecoders";
          *(_WORD *)&v248[22] = 1024;
          LODWORD(v249) = v102;
          WORD2(v249) = 1024;
          *(_DWORD *)((char *)&v249 + 6) = (_DWORD)v258;
          _os_log_impl(&dword_1B5ED0000, v100, OS_LOG_TYPE_DEFAULT, "[%s|%s] HOA power saving mode order (%u) can not be greater or equal to input HOA order (%u)", v248, 0x22u);
        }
        *((_DWORD *)this + 51) = 0;
        v19 = *((unsigned __int8 *)this + 160);
        if (!(v14 | v19))
          goto LABEL_175;
      }
      else
      {
        v19 = *((unsigned __int8 *)this + 160);
        if (!(v14 | v19))
        {
          if (v18)
          {
            v20 = (v18 + 1) * (v18 + 1);
            HOA::HOA((uint64_t)v248, v20 | (*(unsigned __int16 *)(*((_QWORD *)this + 1) + 2) << 16), *((_DWORD *)this + 50));
            HOA::createSphericalGridDecoder((unsigned int *)v248);
            memset(&v244, 0, sizeof(v244));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v244, v253, v254, (v254 - (uint64_t)v253) >> 2);
            memset(&v238[24], 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v238[24], v255, v256, (v256 - (uint64_t)v255) >> 2);
            v21 = *(_DWORD *)&v248[20];
            *((_DWORD *)this + 52) = *(_DWORD *)&v248[20];
            v22 = *((_DWORD *)this + 15) + v21;
            v23 = (v22 * *((_DWORD *)this + 14));
            *(_DWORD *)v238 = 0;
            std::vector<float>::assign((char **)this + 12, v23, v238);
            if (*((_DWORD *)this + 14))
            {
              v24 = 0;
              v25 = 0;
              do
              {
                memcpy((void *)(*((_QWORD *)this + 12) + 4 * v24), (char *)__src + 4 * (*((_DWORD *)this + 15) * v25), 4 * *((unsigned int *)this + 15));
                if (v25 < v20)
                  memcpy((void *)(*((_QWORD *)this + 12) + 4 * (v24 + *((_DWORD *)this + 15))), &v251[4 * (*((_DWORD *)this + 52) * v25)], 4 * *((unsigned int *)this + 52));
                ++v25;
                v24 += v22;
              }
              while (v25 < *((unsigned int *)this + 14));
            }
            LODWORD(v26) = *((_DWORD *)this + 52);
            if ((_DWORD)v26)
            {
              v27 = 0;
              do
              {
                begin = v244.__begin_;
                v29 = (char *)__p[1];
                if (__p[1] >= (void *)v243[0])
                {
                  v31 = (char *)__p[0];
                  v32 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                  v33 = v32 + 1;
                  if ((unint64_t)(v32 + 1) >> 62)
                    goto LABEL_385;
                  v34 = v243[0] - (unint64_t)__p[0];
                  if ((uint64_t)(v243[0] - (unint64_t)__p[0]) >> 1 > v33)
                    v33 = v34 >> 1;
                  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                    v35 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v35 = v33;
                  if (v35)
                  {
                    v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v243, v35);
                    v31 = (char *)__p[0];
                    v29 = (char *)__p[1];
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v37 = &v36[4 * v32];
                  *(_DWORD *)v37 = *(_DWORD *)&begin[4 * v27];
                  v30 = v37 + 4;
                  while (v29 != v31)
                  {
                    v38 = *((_DWORD *)v29 - 1);
                    v29 -= 4;
                    *((_DWORD *)v37 - 1) = v38;
                    v37 -= 4;
                  }
                  __p[0] = v37;
                  __p[1] = v30;
                  v243[0] = &v36[4 * v35];
                  if (v31)
                    operator delete(v31);
                }
                else
                {
                  *(_DWORD *)__p[1] = *(_DWORD *)&v244.__begin_[4 * v27];
                  v30 = v29 + 4;
                }
                __p[1] = v30;
                v39 = *(_QWORD *)&v238[24];
                v40 = (char *)v240[1];
                if (v240[1] >= (void *)v241[0])
                {
                  v42 = (char *)v240[0];
                  v43 = ((char *)v240[1] - (char *)v240[0]) >> 2;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 62)
LABEL_385:
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  v45 = v241[0] - (unint64_t)v240[0];
                  if ((uint64_t)(v241[0] - (unint64_t)v240[0]) >> 1 > v44)
                    v44 = v45 >> 1;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                    v46 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v241, v46);
                    v42 = (char *)v240[0];
                    v40 = (char *)v240[1];
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = &v47[4 * v43];
                  *(_DWORD *)v48 = *(_DWORD *)(v39 + 4 * v27);
                  v41 = v48 + 4;
                  while (v40 != v42)
                  {
                    v49 = *((_DWORD *)v40 - 1);
                    v40 -= 4;
                    *((_DWORD *)v48 - 1) = v49;
                    v48 -= 4;
                  }
                  v240[0] = v48;
                  v240[1] = v41;
                  v241[0] = &v47[4 * v46];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_DWORD *)v240[1] = *(_DWORD *)(*(_QWORD *)&v238[24] + 4 * v27);
                  v41 = v40 + 4;
                }
                v240[1] = v41;
                v50 = v27 + *((_DWORD *)this + 15) + 0x10000;
                v51 = (char *)v239;
                if ((unint64_t)v239 >= *((_QWORD *)&v239 + 1))
                {
                  v53 = *(char **)&v238[48];
                  v54 = (uint64_t)(v239 - *(_QWORD *)&v238[48]) >> 2;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 62)
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  v56 = *((_QWORD *)&v239 + 1) - *(_QWORD *)&v238[48];
                  if ((uint64_t)(*((_QWORD *)&v239 + 1) - *(_QWORD *)&v238[48]) >> 1 > v55)
                    v55 = v56 >> 1;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                    v57 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                  {
                    v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v239 + 8, v57);
                    v53 = *(char **)&v238[48];
                    v51 = (char *)v239;
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = &v58[4 * v54];
                  *(_DWORD *)v59 = v50;
                  v52 = v59 + 4;
                  while (v51 != v53)
                  {
                    v60 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v59 - 1) = v60;
                    v59 -= 4;
                  }
                  *(_QWORD *)&v238[48] = v59;
                  *(_QWORD *)&v239 = v52;
                  *((_QWORD *)&v239 + 1) = &v58[4 * v57];
                  if (v53)
                    operator delete(v53);
                }
                else
                {
                  *(_DWORD *)v239 = v50;
                  v52 = v51 + 4;
                }
                *(_QWORD *)&v239 = v52;
                ++v27;
                v26 = *((unsigned int *)this + 52);
              }
              while (v27 < v26);
            }
LABEL_235:
            *((_DWORD *)this + 15) += v26;
            if (*(_QWORD *)&v238[24])
            {
              *(_QWORD *)&v238[32] = *(_QWORD *)&v238[24];
              operator delete(*(void **)&v238[24]);
            }
            if (v244.__begin_)
            {
              v244.__end_ = v244.__begin_;
              operator delete(v244.__begin_);
            }
            HOA::~HOA((HOA *)v248);
LABEL_240:
            *((_DWORD *)this + 55) = 0;
            vDSP_vsmul((const float *)__p[0], 1, &AUSM::kRad2Deg, (float *)__p[0], 1, ((char *)__p[1] - (char *)__p[0]) >> 2);
            vDSP_vsmul((const float *)v240[0], 1, &AUSM::kRad2Deg, (float *)v240[0], 1, ((char *)v240[1] - (char *)v240[0]) >> 2);
            GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)&v244, *((float **)this + 4));
            HOA::HOA((uint64_t)v248, v8, *((_DWORD *)this + 50));
            HOA::createDecoder((unsigned int *)v248, (uint64_t)&v244, (uint64_t)&v245, 0);
            memset(&v238[24], 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v238[24], v251, v252, (v252 - (uint64_t)v251) >> 2);
            v144 = (void *)*((_QWORD *)this + 15);
            if (v144)
            {
              *((_QWORD *)this + 16) = v144;
              operator delete(v144);
              *((_QWORD *)this + 15) = 0;
              *((_QWORD *)this + 16) = 0;
              *((_QWORD *)this + 17) = 0;
            }
            *(_OWORD *)((char *)this + 120) = *(_OWORD *)&v238[24];
            *((_QWORD *)this + 17) = *(_QWORD *)&v238[40];
            HOA::~HOA((HOA *)v248);
            if (v246)
            {
              v247 = v246;
              operator delete(v246);
            }
            if ((_QWORD)v245)
            {
              *((_QWORD *)&v245 + 1) = v245;
              operator delete((void *)v245);
            }
            if (v244.__begin_)
            {
              v244.__end_ = v244.__begin_;
              operator delete(v244.__begin_);
            }
LABEL_313:
            v10 = *(_DWORD *)this;
            goto LABEL_314;
          }
LABEL_175:
          if ((void **)((char *)this + 96) != &__src)
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 96, (char *)__src, v261, (v261 - (uint64_t)__src) >> 2);
          *((_DWORD *)this + 49) = 0;
          goto LABEL_240;
        }
      }
      *((_DWORD *)this + 51) = 0;
      *((_DWORD *)this + 52) = 0;
      if (v19)
        v103 = 4;
      else
        v103 = (v14 + 1) * (v14 + 1);
      HOA::HOA((uint64_t)v248, v103 | (*(unsigned __int16 *)(*((_QWORD *)this + 1) + 2) << 16), *((_DWORD *)this + 50));
      HOA::createSphericalGridDecoder((unsigned int *)v248);
      memset(&v244, 0, sizeof(v244));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v244, v253, v254, (v254 - (uint64_t)v253) >> 2);
      memset(&v238[24], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v238[24], v255, v256, (v256 - (uint64_t)v255) >> 2);
      v104 = *(_DWORD *)&v248[20];
      *((_DWORD *)this + 49) = *(_DWORD *)&v248[20];
      v105 = *((_DWORD *)this + 15) + v104;
      if (*((_BYTE *)this + 160))
        v106 = (unsigned int *)(*((_QWORD *)this + 19) + 64);
      else
        v106 = (unsigned int *)((char *)this + 56);
      v107 = *v106;
      *(_DWORD *)v238 = 0;
      std::vector<float>::assign((char **)this + 12, (v107 * v105), v238);
      if ((_DWORD)v107)
      {
        v108 = 0;
        for (i = 0; i != v107; ++i)
        {
          memcpy((void *)(*((_QWORD *)this + 12) + 4 * v108), (char *)__src + 4 * (*((_DWORD *)this + 15) * i), 4 * *((unsigned int *)this + 15));
          if (i < v103)
            memcpy((void *)(*((_QWORD *)this + 12) + 4 * (v108 + *((_DWORD *)this + 15))), &v251[4 * (*((_DWORD *)this + 49) * i)], 4 * *((unsigned int *)this + 49));
          v108 += v105;
        }
      }
      LODWORD(v26) = *((_DWORD *)this + 49);
      if ((_DWORD)v26)
      {
        v110 = 0;
        do
        {
          v111 = v244.__begin_;
          v112 = (char *)__p[1];
          if (__p[1] >= (void *)v243[0])
          {
            v114 = (char *)__p[0];
            v115 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 62)
              goto LABEL_382;
            v117 = v243[0] - (unint64_t)__p[0];
            if ((uint64_t)(v243[0] - (unint64_t)__p[0]) >> 1 > v116)
              v116 = v117 >> 1;
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
              v118 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v118 = v116;
            if (v118)
            {
              v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v243, v118);
              v114 = (char *)__p[0];
              v112 = (char *)__p[1];
            }
            else
            {
              v119 = 0;
            }
            v120 = &v119[4 * v115];
            *(_DWORD *)v120 = *(_DWORD *)&v111[4 * v110];
            v113 = v120 + 4;
            while (v112 != v114)
            {
              v121 = *((_DWORD *)v112 - 1);
              v112 -= 4;
              *((_DWORD *)v120 - 1) = v121;
              v120 -= 4;
            }
            __p[0] = v120;
            __p[1] = v113;
            v243[0] = &v119[4 * v118];
            if (v114)
              operator delete(v114);
          }
          else
          {
            *(_DWORD *)__p[1] = *(_DWORD *)&v244.__begin_[4 * v110];
            v113 = v112 + 4;
          }
          __p[1] = v113;
          v122 = *(_QWORD *)&v238[24];
          v123 = (char *)v240[1];
          if (v240[1] >= (void *)v241[0])
          {
            v125 = (char *)v240[0];
            v126 = ((char *)v240[1] - (char *)v240[0]) >> 2;
            v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 62)
LABEL_382:
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v128 = v241[0] - (unint64_t)v240[0];
            if ((uint64_t)(v241[0] - (unint64_t)v240[0]) >> 1 > v127)
              v127 = v128 >> 1;
            if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
              v129 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v129 = v127;
            if (v129)
            {
              v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v241, v129);
              v125 = (char *)v240[0];
              v123 = (char *)v240[1];
            }
            else
            {
              v130 = 0;
            }
            v131 = &v130[4 * v126];
            *(_DWORD *)v131 = *(_DWORD *)(v122 + 4 * v110);
            v124 = v131 + 4;
            while (v123 != v125)
            {
              v132 = *((_DWORD *)v123 - 1);
              v123 -= 4;
              *((_DWORD *)v131 - 1) = v132;
              v131 -= 4;
            }
            v240[0] = v131;
            v240[1] = v124;
            v241[0] = &v130[4 * v129];
            if (v125)
              operator delete(v125);
          }
          else
          {
            *(_DWORD *)v240[1] = *(_DWORD *)(*(_QWORD *)&v238[24] + 4 * v110);
            v124 = v123 + 4;
          }
          v240[1] = v124;
          v133 = v110 + *((_DWORD *)this + 15) + 0x10000;
          v134 = (char *)v239;
          if ((unint64_t)v239 >= *((_QWORD *)&v239 + 1))
          {
            v136 = *(char **)&v238[48];
            v137 = (uint64_t)(v239 - *(_QWORD *)&v238[48]) >> 2;
            v138 = v137 + 1;
            if ((unint64_t)(v137 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v139 = *((_QWORD *)&v239 + 1) - *(_QWORD *)&v238[48];
            if ((uint64_t)(*((_QWORD *)&v239 + 1) - *(_QWORD *)&v238[48]) >> 1 > v138)
              v138 = v139 >> 1;
            if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
              v140 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v140 = v138;
            if (v140)
            {
              v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v239 + 8, v140);
              v136 = *(char **)&v238[48];
              v134 = (char *)v239;
            }
            else
            {
              v141 = 0;
            }
            v142 = &v141[4 * v137];
            *(_DWORD *)v142 = v133;
            v135 = v142 + 4;
            while (v134 != v136)
            {
              v143 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *((_DWORD *)v142 - 1) = v143;
              v142 -= 4;
            }
            *(_QWORD *)&v238[48] = v142;
            *(_QWORD *)&v239 = v135;
            *((_QWORD *)&v239 + 1) = &v141[4 * v140];
            if (v136)
              operator delete(v136);
          }
          else
          {
            *(_DWORD *)v239 = v133;
            v135 = v134 + 4;
          }
          *(_QWORD *)&v239 = v135;
          ++v110;
          v26 = *((unsigned int *)this + 49);
        }
        while (v110 < v26);
      }
      goto LABEL_235;
    }
    v61 = (ausdk::AUChannelLayout *)*((_QWORD *)this + 4);
    v62 = ausdk::AUChannelLayout::NumberChannels(v61, v9);
    GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)v248, (float *)v61);
    GetChannelLayoutChannelLabels((const AudioChannelLayout *)&v238[24], *((int **)this + 4));
    v63 = (uint64_t)(*((_QWORD *)&v249 + 1) - v249) >> 2;
    v64 = *(char **)v248;
    v65 = *(_QWORD *)&v248[8];
    if (v63 != (uint64_t)(*(_QWORD *)&v248[8] - *(_QWORD *)v248) >> 2
      || v63 != (v251 - (_BYTE *)v250) >> 2
      || v63 != (uint64_t)(*(_QWORD *)&v238[32] - *(_QWORD *)&v238[24]) >> 2)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v66 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v222 = (char *)this + 168;
        if (*((char *)this + 191) < 0)
          v222 = *(char **)v222;
        LODWORD(v244.__begin_) = 136315394;
        *(std::vector<char>::pointer *)((char *)&v244.__begin_ + 4) = v222;
        WORD2(v244.__end_) = 2080;
        *(std::vector<char>::pointer *)((char *)&v244.__end_ + 6) = "createHOADecoders";
        _os_log_error_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders: arrays sizes don't match. Defaulting to stereo", (uint8_t *)&v244, 0x16u);
      }
      GetChannelLayoutSphericalCoordinates((AudioChannelLayout *)&v244);
      *(_QWORD *)v238 = v248;
      *(_QWORD *)&v238[8] = &v249;
      *(_QWORD *)&v238[16] = &v250;
      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul>((void ***)v238, (uint64_t)&v244);
      if (v246)
      {
        v247 = v246;
        operator delete(v246);
      }
      if ((_QWORD)v245)
      {
        *((_QWORD *)&v245 + 1) = v245;
        operator delete((void *)v245);
      }
      if (v244.__begin_)
      {
        v244.__end_ = v244.__begin_;
        operator delete(v244.__begin_);
      }
      __x[0] = 0;
      std::vector<char>::vector(&v244, 0x20uLL, __x);
      v67 = (int *)v244.__begin_;
      *((_DWORD *)v244.__begin_ + 1) = 0;
      v67[2] = 0;
      *v67 = 6619138;
      GetChannelLayoutChannelLabels((const AudioChannelLayout *)v238, v67);
      if (v244.__begin_)
      {
        v244.__end_ = v244.__begin_;
        operator delete(v244.__begin_);
      }
      if (*(_QWORD *)&v238[48])
      {
        *(_QWORD *)&v239 = *(_QWORD *)&v238[48];
        operator delete(*(void **)&v238[48]);
      }
      v68 = *(char **)v238;
      *(_QWORD *)&v238[48] = *(_QWORD *)v238;
      v69 = *(_QWORD *)&v238[8];
      v239 = *(_OWORD *)&v238[8];
      memset(v238, 0, 24);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(&v238[24], v68, v69, (v69 - (uint64_t)v68) >> 2);
      if (*(_QWORD *)v238)
      {
        *(_QWORD *)&v238[8] = *(_QWORD *)v238;
        operator delete(*(void **)v238);
      }
      v62 = 2;
      v64 = *(char **)v248;
      v65 = *(_QWORD *)&v248[8];
    }
    if (*(_DWORD *)this == 3)
    {
      *((_DWORD *)this + 15) = v62;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)__p, v64, v65, (v65 - (uint64_t)v64) >> 2);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v240, (char *)v249, *((uint64_t *)&v249 + 1), (uint64_t)(*((_QWORD *)&v249 + 1) - v249) >> 2);
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(&v238[48], *(char **)&v238[24], *(uint64_t *)&v238[32], (uint64_t)(*(_QWORD *)&v238[32] - *(_QWORD *)&v238[24]) >> 2);
      v64 = *(char **)v248;
      v65 = *(_QWORD *)&v248[8];
    }
    v229 = a3;
    memset(v238, 0, 24);
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v238, v64, v65, (v65 - (uint64_t)v64) >> 2);
    v70 = v62;
    *(_QWORD *)__x = 0;
    v236 = 0;
    v237 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__x, (const void *)v249, *((uint64_t *)&v249 + 1), (uint64_t)(*((_QWORD *)&v249 + 1) - v249) >> 2);
    v232 = 0;
    v233 = 0;
    v234 = 0;
    if (((*(_QWORD *)&v238[32] - *(_QWORD *)&v238[24]) & 0x3FFFFFFFCLL) != 0)
    {
      v71 = (*(_QWORD *)&v238[32] - *(_QWORD *)&v238[24]) >> 2;
      do
      {
        v72 = *(_DWORD *)(*(_QWORD *)&v238[24] + 4 * --v71);
        v73 = v72 > 0x3E || ((0x4000002000000010uLL >> v72) & 1) == 0;
        if (!v73 || *((float *)v250 + v71) == 0.0)
        {
          v74 = v233;
          if (v233 >= v234)
          {
            v76 = (char *)v232;
            v77 = (v233 - (_BYTE *)v232) >> 2;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v79 = v234 - (_BYTE *)v232;
            if ((v234 - (_BYTE *)v232) >> 1 > v78)
              v78 = v79 >> 1;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
              v80 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v234, v80);
              v76 = (char *)v232;
              v74 = v233;
            }
            else
            {
              v81 = 0;
            }
            v82 = &v81[4 * v77];
            *(_DWORD *)v82 = v71;
            v75 = v82 + 4;
            while (v74 != v76)
            {
              v83 = *((_DWORD *)v74 - 1);
              v74 -= 4;
              *((_DWORD *)v82 - 1) = v83;
              v82 -= 4;
            }
            v232 = v82;
            v233 = v75;
            v234 = &v81[4 * v80];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_DWORD *)v233 = v71;
            v75 = v74 + 4;
          }
          v233 = v75;
          v84 = *(_QWORD *)v238 + 4 * v71;
          v85 = *(_QWORD *)&v238[8] - (v84 + 4);
          if (*(_QWORD *)&v238[8] != v84 + 4)
            memmove((void *)(*(_QWORD *)v238 + 4 * v71), (const void *)(v84 + 4), *(_QWORD *)&v238[8] - (v84 + 4));
          *(_QWORD *)&v238[8] = v84 + v85;
          v86 = *(_QWORD *)__x + 4 * v71;
          v87 = &v236[-v86 - 4];
          if (v236 != (char *)(v86 + 4))
            memmove((void *)(*(_QWORD *)__x + 4 * v71), (const void *)(v86 + 4), (size_t)&v236[-v86 - 4]);
          v236 = &v87[v86];
        }
      }
      while (v71);
    }
    v88 = v229;
    if (*(_QWORD *)&v238[8] == *(_QWORD *)v238 || v236 == *(char **)__x)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v89 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v223 = (char *)this + 168;
        if (*((char *)this + 191) < 0)
          v223 = *(char **)v223;
        v224 = **((_DWORD **)this + 4);
        GetStringFromAudioChannelLayoutTag(v230, v224);
        if (v231 >= 0)
          v225 = v230;
        else
          v225 = (void **)v230[0];
        LODWORD(v244.__begin_) = 136315906;
        *(std::vector<char>::pointer *)((char *)&v244.__begin_ + 4) = v223;
        WORD2(v244.__end_) = 2080;
        *(std::vector<char>::pointer *)((char *)&v244.__end_ + 6) = "createHOADecoders";
        HIWORD(v244.__end_cap_.__value_) = 1024;
        LODWORD(v245) = v224;
        WORD2(v245) = 2080;
        *(_QWORD *)((char *)&v245 + 6) = v225;
        _os_log_error_impl(&dword_1B5ED0000, v89, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders for output channel layout tag = %u (%s); azimuth and elevation array size"
          "s are 0 after LFE removal. Defaulting to stereo",
          (uint8_t *)&v244,
          0x26u);
        if (v231 < 0)
          operator delete(v230[0]);
      }
      v233 = (char *)v232;
      v70 = 2;
      if (*(_DWORD *)this == 3)
        *((_DWORD *)this + 15) = 2;
    }
    Decoder = HOA::createDecoder((unsigned int *)buf, (uint64_t)v238, (uint64_t)__x, 1);
    if (Decoder)
    {
      *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
      *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
      *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v91 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v92 = (char *)this + 168;
        if (*((char *)this + 191) < 0)
          v92 = *(char **)v92;
        LODWORD(v244.__begin_) = 136315394;
        *(std::vector<char>::pointer *)((char *)&v244.__begin_ + 4) = v92;
        WORD2(v244.__end_) = 2080;
        *(std::vector<char>::pointer *)((char *)&v244.__end_ + 6) = "createHOADecoders";
        _os_log_error_impl(&dword_1B5ED0000, v91, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders", (uint8_t *)&v244, 0x16u);
      }
      goto LABEL_297;
    }
    memset(&v244, 0, sizeof(v244));
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v244, __src, v261, (v261 - (uint64_t)__src) >> 2);
    v96 = (const float **)((char *)this + 96);
    v95 = (void *)*((_QWORD *)this + 12);
    if (v95)
    {
      *((_QWORD *)this + 13) = v95;
      operator delete(v95);
      *v96 = 0;
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    v97 = v244.__begin_;
    *((_QWORD *)this + 12) = v244.__begin_;
    end = v244.__end_;
    *(_OWORD *)((char *)this + 104) = *(_OWORD *)&v244.__end_;
    if (v233 != v232)
    {
      if (*((_BYTE *)this + 160))
        v99 = (unsigned int *)(*((_QWORD *)this + 19) + 64);
      else
        v99 = (unsigned int *)((char *)this + 56);
      v146 = *(_QWORD *)v238;
      v145 = *(_QWORD *)&v238[8];
      v147 = *v99;
      memset(&v244, 0, sizeof(v244));
      std::vector<float>::reserve((void **)&v244.__begin_, ((v233 - (_BYTE *)v232) >> 2) * v147 + ((end - v97) >> 2));
      v148 = (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 2;
      LODWORD(v230[0]) = 0;
      std::vector<float>::resize((uint64_t)&v244, v148, v230);
      v149 = v145 - v146;
      v150 = (v149 >> 2);
      vDSP_mtrans(*v96, 1, (float *)v244.__begin_, 1, v150, v147);
      v151 = (v244.__end_ - v244.__begin_) >> 2;
      if (v151 != (_DWORD)v147 * (v149 >> 2))
        __assert_rtn("createHOADecoders", "AUSMMatrixMix.cpp", 318, "scratchBuffer.size() == numNonLFEChannels * effectiveNumInputChannels");
      v152 = v233;
      if (v233 != v232)
      {
        v227 = v150;
        v228 = v70;
        while (1)
        {
          v154 = *((_DWORD *)v152 - 1);
          v152 -= 4;
          v153 = v154;
          LODWORD(v230[0]) = 0;
          if ((_DWORD)v147)
          {
            v155 = (v153 * v147);
            v156 = &v244.__begin_[4 * v155];
            v157 = v244.__end_;
            if (v147 <= (v244.__end_cap_.__value_ - v244.__end_) >> 2)
            {
              v164 = v244.__end_ - v156;
              if (v147 <= (v244.__end_ - v156) >> 2)
              {
                v167 = v244.__end_;
                v166 = v147;
LABEL_268:
                v169 = &v167[-4 * v147];
                v170 = v167;
                while (v169 < (_DWORD *)v157)
                {
                  v171 = *v169++;
                  *(_DWORD *)v170 = v171;
                  v170 += 4;
                }
                v172 = &v156[4 * v147];
                v244.__end_ = v170;
                if (v167 != v172)
                  memmove(&v167[-4 * ((v167 - v172) >> 2)], v156, v167 - v172);
                v173 = (int)v230[0];
                do
                {
                  *(_DWORD *)v156 = v173;
                  v156 += 4;
                  --v166;
                }
                while (v166);
                goto LABEL_286;
              }
              v165 = 0;
              v166 = v164 >> 2;
              v167 = &v244.__end_[4 * (v147 - (v164 >> 2))];
              v168 = (int)v230[0];
              do
              {
                *(_DWORD *)&v157[v165] = v168;
                v165 += 4;
              }
              while (4 * v147 - 4 * v166 != v165);
              v244.__end_ = v167;
              if (v157 != v156)
                goto LABEL_268;
            }
            else
            {
              v158 = v147 + ((v244.__end_ - v244.__begin_) >> 2);
              if (v158 >> 62)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v159 = v244.__end_cap_.__value_ - v244.__begin_;
              if ((v244.__end_cap_.__value_ - v244.__begin_) >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v244.__end_cap_, v160);
                v163 = v162;
              }
              else
              {
                v161 = 0;
                v163 = 0;
              }
              v174 = &v161[4 * v155];
              v175 = &v174[4 * v147];
              v176 = 4 * v147;
              v177 = v174;
              do
              {
                *(_DWORD *)v177 = v230[0];
                v177 += 4;
                v176 -= 4;
              }
              while (v176);
              v178 = v244.__begin_;
              if (v244.__begin_ != v156)
              {
                v179 = v156;
                do
                {
                  v180 = *((_DWORD *)v179 - 1);
                  v179 -= 4;
                  *((_DWORD *)v174 - 1) = v180;
                  v174 -= 4;
                }
                while (v179 != v178);
              }
              v181 = (char *)(v244.__end_ - v156);
              if (v244.__end_ != v156)
                memmove(v175, v156, v244.__end_ - v156);
              v182 = v244.__begin_;
              v244.__begin_ = v174;
              v244.__end_ = &v181[(_QWORD)v175];
              v244.__end_cap_.__value_ = &v161[4 * v163];
              if (v182)
                operator delete(v182);
            }
          }
LABEL_286:
          if (v152 == v232)
          {
            v151 = (v244.__end_ - v244.__begin_) >> 2;
            v88 = v229;
            v70 = v228;
            v150 = v227;
            v96 = (const float **)((char *)this + 96);
            break;
          }
        }
      }
      std::vector<float>::resize((uint64_t)v96, v151);
      vDSP_mtrans((const float *)v244.__begin_, 1, (float *)*v96, 1, v147, v150 + ((v233 - (_BYTE *)v232) >> 2));
      if (v244.__begin_)
      {
        v244.__end_ = v244.__begin_;
        operator delete(v244.__begin_);
      }
      Decoder = 0;
    }
    v183 = (char **)((char *)this + 120);
    if (v88 >= 3 && v70 == 2)
    {
      v184 = *((_DWORD *)this + 14) * v88;
      LODWORD(v244.__begin_) = 0;
      std::vector<float>::assign(v183, v184, &v244);
      cblas_scopy(*((_DWORD *)this + 14), *((const float **)this + 12), 2, *((float **)this + 15), v88);
      cblas_scopy(*((_DWORD *)this + 14), (const float *)(*((_QWORD *)this + 12) + 4), 2, (float *)(*((_QWORD *)this + 15) + 4), v88);
    }
    else
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)v183, *((char **)this + 12), *((_QWORD *)this + 13), (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 2);
    }
    if (!*((_BYTE *)this + 65))
      *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
LABEL_297:
    if (v232)
    {
      v233 = (char *)v232;
      operator delete(v232);
    }
    if (*(_QWORD *)__x)
    {
      v236 = *(char **)__x;
      operator delete(*(void **)__x);
    }
    if (*(_QWORD *)v238)
    {
      *(_QWORD *)&v238[8] = *(_QWORD *)v238;
      operator delete(*(void **)v238);
    }
    if (*(_QWORD *)&v238[24])
    {
      *(_QWORD *)&v238[32] = *(_QWORD *)&v238[24];
      operator delete(*(void **)&v238[24]);
    }
    if (v250)
    {
      v251 = (char *)v250;
      operator delete(v250);
    }
    if ((_QWORD)v249)
    {
      *((_QWORD *)&v249 + 1) = v249;
      operator delete((void *)v249);
    }
    if (*(_QWORD *)v248)
    {
      *(_QWORD *)&v248[8] = *(_QWORD *)v248;
      operator delete(*(void **)v248);
    }
    if (Decoder)
    {
      v94 = 4294956428;
LABEL_359:
      if (*(_QWORD *)&v238[48])
      {
        *(_QWORD *)&v239 = *(_QWORD *)&v238[48];
        operator delete(*(void **)&v238[48]);
      }
      if (v240[0])
      {
        v240[1] = v240[0];
        operator delete(v240[0]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_365;
    }
    goto LABEL_313;
  }
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v93 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v226 = (_QWORD *)((char *)this + 168);
    if (*((char *)this + 191) < 0)
      v226 = (_QWORD *)*v226;
    *(_DWORD *)v248 = 136315394;
    *(_QWORD *)&v248[4] = v226;
    *(_WORD *)&v248[12] = 2080;
    *(_QWORD *)&v248[14] = "createHOADecoders";
    _os_log_error_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_ERROR, "[%s|%s] Failed creating HOA decoders: format and input number of channels differ", v248, 0x16u);
  }
  v94 = 4294956428;
LABEL_365:
  HOA::~HOA((HOA *)buf);
  return v94;
}

void sub_1B62AB80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (__p)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  HOA::~HOA((HOA *)&a51);
  if (a30)
    operator delete(a30);
  if (a33)
    operator delete(a33);
  if (a37)
    operator delete(a37);
  HOA::~HOA((HOA *)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

BOOL ausdk::ACL::operator==(int *a1, _DWORD *a2)
{
  int v2;
  _BOOL8 result;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v7;

  v2 = *a1;
  if (*a1 != *a2)
    return 0;
  if (v2)
  {
    if (v2 == 0x10000)
      return a1[1] == a2[1];
    return 1;
  }
  v4 = a1[2];
  if ((_DWORD)v4 != a2[2])
    return 0;
  if ((_DWORD)v4)
  {
    v5 = a2 + 3;
    v6 = a1 + 3;
    result = 1;
    while (*v6 == *v5)
    {
      if (*v6 == 100)
      {
        v7 = *(_QWORD *)v6 == *(_QWORD *)v5 && *((_QWORD *)v6 + 1) == *((_QWORD *)v5 + 1);
        if (!v7 || v6[4] != (unint64_t)v5[4])
          break;
      }
      v5 += 5;
      v6 += 5;
      if (!--v4)
        return result;
    }
    return 0;
  }
  return 1;
}

uint64_t AUSM::MatrixMix::process(int *a1, const void ***a2, unsigned int a3, uint64_t a4, vDSP_Length __N, uint64_t a6, unsigned int a7)
{
  unsigned int v10;
  unsigned int v12;
  vDSP_Length v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t i;
  const void **v19;
  const void **v20;
  uint64_t result;
  int v22;
  float *v23;
  const void *v24;
  unsigned int *v25;
  NSObject *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  vDSP_Length v33;
  unsigned int v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  const void **v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  float v44;
  const void **v45;
  unsigned int v46;
  float __Start;
  float __Step;
  _QWORD *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (a1[15] <= a3)
    return 4294956418;
  if (!*((_BYTE *)a1 + 64))
    return 4294956429;
  v10 = __N;
  v12 = a3;
  v14 = __N;
  vDSP_vclr(*(float **)a4, 1, __N);
  *(_BYTE *)(a4 + 24) = 1;
  if (!*((_BYTE *)a1 + 65))
  {
    if (*((_BYTE *)a1 + 160))
    {
      v22 = a6 != 0;
    }
    else
    {
      if (v12 >= (unint64_t)(((char *)a2[1] - (char *)*a2) >> 5))
        return 4294956418;
      if (a6)
      {
        v22 = 1;
      }
      else
      {
        result = 0;
        v22 = LOBYTE((*a2)[4 * v12 + 3]);
        if (LOBYTE((*a2)[4 * v12 + 3]))
          return result;
      }
    }
    switch(*a1)
    {
      case 0:
      case 4:
        v23 = *(float **)a4;
        v24 = (*a2)[4 * v12];
        goto LABEL_21;
      case 5:
        if (*((_BYTE *)a1 + 160))
        {
          v36 = *((_QWORD *)a1 + 19);
          v37 = *(_DWORD *)(v36 + 64);
          v38 = v12 - v37;
          if (v12 >= v37)
          {
            if (v38 < 4)
            {
              if ((v22 & 1) == 0)
                goto LABEL_80;
              if (a7 >= 4)
              {
                v37 = 4;
                v12 = v38;
                goto LABEL_87;
              }
            }
            return 4294956418;
          }
          if ((v22 & 1) == 0)
          {
            v38 = v12;
LABEL_80:
            v39 = (const void **)(*(_QWORD *)(v36 + 72) + 24 * v38);
            goto LABEL_82;
          }
        }
        else
        {
          if (!v22)
          {
            v39 = &(*a2)[4 * v12];
LABEL_82:
            v24 = *v39;
            v23 = *(float **)a4;
LABEL_21:
            memcpy(v23, v24, 4 * v14);
            goto LABEL_22;
          }
          v37 = a1[15];
        }
        if (v37 <= a7)
        {
          if (!v37)
          {
LABEL_22:
            result = 0;
            *(_BYTE *)(a4 + 24) = 0;
            return result;
          }
LABEL_87:
          v40 = 0;
          v41 = 0;
          v42 = v12 * a7;
          v43 = v37;
          do
          {
            v44 = *(float *)(a6 + 4 * v42);
            __Step = v44;
            if (*((_BYTE *)a1 + 160))
              v45 = (const void **)(*(_QWORD *)(*((_QWORD *)a1 + 19) + 72) + 24 * v41);
            else
              v45 = &(*a2)[v40];
            if (fabsf(v44 + -1.0) <= 0.00000011921)
            {
              memcpy(*(void **)a4, *v45, 4 * v14);
            }
            else if (fabsf(v44) > 0.00000011921)
            {
              vDSP_vsma((const float *)*v45, 1, &__Step, *(const float **)a4, 1, *(float **)a4, 1, v14);
            }
            ++v41;
            v40 += 4;
            ++v42;
            --v43;
          }
          while (v43);
          goto LABEL_22;
        }
        return 4294956418;
      case 6:
        if (v12)
          return 0;
        v23 = *(float **)a4;
        v24 = **a2;
        goto LABEL_21;
      default:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v26 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
          return 4294956421;
        v27 = a1 + 42;
        if (*((char *)a1 + 191) < 0)
          v27 = (_QWORD *)*v27;
        goto LABEL_85;
    }
  }
  if (!*((_BYTE *)a1 + 160) && a1[14] > (unint64_t)(((char *)a2[1] - (char *)*a2) >> 5))
    return 4294956418;
  v15 = *a1;
  if (*a1 == 1 || v15 == 3)
  {
    if (*((_BYTE *)a1 + 160))
      v25 = (unsigned int *)(*((_QWORD *)a1 + 19) + 64);
    else
      v25 = (unsigned int *)(a1 + 14);
    v28 = *v25;
    v46 = a1[15] - a1[52];
    if (a1[51] && !a1[55] && a1[15] - a1[52] > v12 == (*((_BYTE *)a1 + 216) != 0) || !(_DWORD)v28)
    {
LABEL_47:
      v32 = a1[55];
      if (v32)
      {
        if (v32 >= v10)
          v33 = v10;
        else
          v33 = v32;
        v34 = a1[53];
        v35 = 1.0 / (float)v34;
        __Start = v35 * (float)(v34 - v32);
        __Step = v35;
        if (v46 > v12 == (*((_BYTE *)a1 + 216) != 0))
        {
          __Start = 1.0 - (float)(v35 * (float)(v34 - v32));
          __Step = -v35;
          if (v32 < v10)
            vDSP_vclr((float *)(*(_QWORD *)a4 + 4 * v33), 1, v10 - v33);
        }
        vDSP_vrampmul(*(const float **)a4, 1, &__Start, &__Step, *(float **)a4, 1, v33);
      }
      else if (v46 > v12 == (*((_BYTE *)a1 + 216) != 0))
      {
        vDSP_vclr(*(float **)a4, 1, v14);
        result = 0;
        *(_BYTE *)(a4 + 24) = 1;
        return result;
      }
      return 0;
    }
    v29 = 0;
    v30 = 0;
    while (1)
    {
      if (*((_BYTE *)a1 + 160))
      {
        *(_BYTE *)(a4 + 24) = 0;
        v31 = *(_QWORD *)(*((_QWORD *)a1 + 19) + 72) + 24 * v30;
      }
      else
      {
        v31 = (uint64_t)&(*a2)[v29];
        if (*(_BYTE *)(v31 + 24))
          goto LABEL_44;
        *(_BYTE *)(a4 + 24) = 0;
      }
      vDSP_vsma(*(const float **)v31, 1, (const float *)(*((_QWORD *)a1 + 12) + 4 * (v12 + a1[15] * (_DWORD)v30)), *(const float **)a4, 1, *(float **)a4, 1, v14);
LABEL_44:
      ++v30;
      v29 += 4;
      if (v28 == v30)
        goto LABEL_47;
    }
  }
  if (v15 == 2)
  {
    v16 = a1[14];
    if ((_DWORD)v16)
    {
      v17 = 0;
      for (i = 0; i < v16; ++i)
      {
        v19 = *a2;
        v20 = &(*a2)[v17];
        if (!*((_BYTE *)v20 + 24))
        {
          *(_BYTE *)(a4 + 24) = 0;
          if (!*((_BYTE *)v20 + 24))
          {
            vDSP_vadd((const float *)v19[v17], 1, *(const float **)a4, 1, *(float **)a4, 1, v14);
            v16 = a1[14];
          }
        }
        result = 0;
        v17 += 4;
      }
      return result;
    }
    return 0;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v26 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v27 = a1 + 42;
    if (*((char *)a1 + 191) < 0)
      v27 = (_QWORD *)*v27;
LABEL_85:
    __Step = 4.8152e-34;
    v49 = v27;
    v50 = 2080;
    v51 = "process";
    v52 = 2080;
    v53 = "process";
    _os_log_debug_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "[%s|%s] %s: Invalid MatrixMix Output Type", (uint8_t *)&__Step, 0x20u);
  }
  return 4294956421;
}

void sub_1B62AC0C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::MatrixMix::setHOAPowerSavingMode(uint64_t this, int a2)
{
  BOOL v2;
  BOOL v3;

  if (*(unsigned __int8 *)(this + 216) != a2)
  {
    if (*(_DWORD *)(this + 220))
    {
      if (a2)
        v2 = *(_DWORD *)(this + 204) != 0;
      else
        v2 = 0;
      *(_BYTE *)(this + 217) = v2;
    }
    else
    {
      if (a2)
        v3 = *(_DWORD *)(this + 204) != 0;
      else
        v3 = 0;
      *(_BYTE *)(this + 217) = v3;
      *(_BYTE *)(this + 216) = v3;
      *(_DWORD *)(this + 220) = *(_DWORD *)(this + 212);
    }
  }
  return this;
}

void AUNeuralNetVAD::~AUNeuralNetVAD(AUNeuralNetVAD *this)
{
  AUNeuralNetVAD::~AUNeuralNetVAD(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  uint64_t *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E69CF1B0;
  v2 = (uint64_t *)((char *)this + 648);
  std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100]((uint64_t *)this + 81, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 96, 0);
  std::unique_ptr<DirectionalVAD>::reset[abi:ne180100]((_QWORD *)this + 95, 0);
  v3 = (void *)*((_QWORD *)this + 92);
  if (v3)
  {
    *((_QWORD *)this + 93) = v3;
    operator delete(v3);
  }
  std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100](v2, 0);
  v4 = (void **)((char *)this + 568);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v4);
  ausdk::AUBase::~AUBase(this);
}

void AUNeuralNetVAD::CreateExtendedElements(AUNeuralNetVAD *this)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  CFIndex v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::runtime_error *exception;
  std::string v11;
  void *__p[2];
  int64_t v13;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 552), this, 4, 1);
  std::to_string(&v11, 0);
  v2 = std::string::insert(&v11, 0, "Mic", 3uLL);
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v13 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v13 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v13 >= 0)
    v5 = HIBYTE(v13);
  else
    v5 = (CFIndex)__p[1];
  v6 = CFStringCreateWithBytes(0, (const UInt8 *)v4, v5, 0x8000100u, 0);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v7 = *((_QWORD *)this + 74);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 71);
    if (*((uint64_t **)this + 72) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
  if (v11.__r_.__value_.__r.__words[0])
    CFRelease(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_1B62AC2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUNeuralNetVAD::Initialize(AUNeuralNetVAD *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int64x2_t *Scope;
  double v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t Element;
  uint64_t v10;
  uint64_t result;
  double v12;
  uint64_t v13;
  double v14;
  int v15;
  NSObject *v16;
  unint64_t v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  float v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  unsigned int v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  float v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  float v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  int v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  float v63;
  float v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  float v68;
  uint64_t v69;
  ausdk::AUElement *v70;
  ausdk::AUElement **v71;
  float v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  float v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  int v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  int v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  float v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  NSObject *v101;
  double v102;
  double v103;
  int v104;
  double v105;
  int v106;
  uint64_t v107;
  double v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  _DWORD *v113;
  _DWORD *v114;
  unint64_t v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  DirectionalVAD *v123;
  uint64_t v124;
  _BOOL4 v125;
  uint64_t v126;
  ausdk::AUElement *v127;
  ausdk::AUElement **v128;
  int v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  NSObject *v133;
  _BOOL4 v134;
  _BYTE v135[12];
  __int16 v136;
  int v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  int v143;
  __int16 v144;
  double v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v135 = 136315394;
    *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
    v136 = 1024;
    v137 = 123;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUNeuralNetVAD: Start Initialization.\n", v135, 0x12u);
  }
LABEL_9:
  if (!*((_BYTE *)this + 600))
  {
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      v8 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
        goto LABEL_26;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v135 = 136315394;
      *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
      v136 = 1024;
      v137 = 130;
      _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting setting NeuralNetVADLayers plist! Setting AU in Bypass mode.\n", v135, 0x12u);
    }
LABEL_26:
    *((_BYTE *)this + 544) = 1;
    Element = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
    v10 = *(_QWORD *)(Element + 80);
    *((_DWORD *)this + 156) = *(_DWORD *)(Element + 108);
    *((_QWORD *)this + 76) = v10;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0) + 108) == *((_DWORD *)this + 156)
      && *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0) + 108) == *((_DWORD *)this + 156))
    {
      result = 0;
      *((_DWORD *)this + 151) = *((_DWORD *)this + 84);
      *(_OWORD *)((char *)this + 628) = 0u;
      return result;
    }
    return 4294956421;
  }
  (*(void (**)(AUNeuralNetVAD *))(*(_QWORD *)this + 64))(this);
  v3 = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
  v4 = *(_QWORD *)(v3 + 80);
  *((_DWORD *)this + 156) = *(_DWORD *)(v3 + 108);
  *((_QWORD *)this + 76) = v4;
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0) + 108) != *((_DWORD *)this + 156)
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0) + 108) != *((_DWORD *)this + 156))
  {
    return 4294956421;
  }
  Scope = (int64x2_t *)ausdk::AUBase::GetScope(this, 4u);
  ausdk::AUScope::SetNumberOfElements(Scope, 1u);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 84);
  if (((*(uint64_t (**)(AUNeuralNetVAD *))(*(_QWORD *)this + 576))(this) & 1) != 0)
    goto LABEL_35;
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  if (!AUNeuralNetVADLogScope(void)::scope)
  {
    v7 = MEMORY[0x1E0C81028];
LABEL_32:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v135 = 136315394;
      *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
      v136 = 1024;
      v137 = 181;
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block Size for DFT must be divisable by 2**4! Setting AU in Bypass mode.\n", v135, 0x12u);
    }
    goto LABEL_34;
  }
  v7 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
  if (*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
    goto LABEL_32;
LABEL_34:
  *((_BYTE *)this + 544) = 1;
LABEL_35:
  v12 = *((double *)this + 76);
  v13 = *((_QWORD *)this + 81);
  v14 = *(double *)v13;
  v15 = (int)*(double *)v13;
  if ((int)(v12 + v12) % v15)
  {
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      v16 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      {
LABEL_46:
        *((_BYTE *)this + 544) = 1;
        v12 = *((double *)this + 76);
        v13 = *((_QWORD *)this + 81);
        v14 = *(double *)v13;
        goto LABEL_47;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v135 = 136315394;
      *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
      v136 = 1024;
      v137 = 189;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate is not supported! Setting AU in Bypass mode.\n", v135, 0x12u);
    }
    goto LABEL_46;
  }
  if ((int)v12 != v15)
  {
    v6 = v12 / v14;
    *((double *)this + 77) = v12 / v14;
  }
LABEL_47:
  LODWORD(v6) = *((_DWORD *)this + 151);
  *(double *)&v17 = (double)*(unint64_t *)&v6;
  v18 = *(double *)&v17 / v12;
  LODWORD(v17) = *(_DWORD *)(v13 + 28);
  if (v18 == (double)v17 / v14)
    goto LABEL_57;
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  if (!AUNeuralNetVADLogScope(void)::scope)
  {
    v19 = MEMORY[0x1E0C81028];
LABEL_54:
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v135 = 136315394;
      *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
      v136 = 1024;
      v137 = 198;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block size is not supported! Setting AU in Bypass mode.\n", v135, 0x12u);
    }
    goto LABEL_56;
  }
  v19 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
  if (*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
    goto LABEL_54;
LABEL_56:
  *((_BYTE *)this + 544) = 1;
LABEL_57:
  (*(void (**)(AUNeuralNetVAD *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  v23 = **(_QWORD **)(*((_QWORD *)this + 81) + 176);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  ausdk::AUElement::SetParameter(v21, 0, (float)v24, 0);
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  ausdk::AUElement::SetParameter(v26, 1u, (float)*(unsigned int *)(*((_QWORD *)this + 81) + 40), 0);
  v28 = *((_QWORD *)this + 9);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  ausdk::AUElement::SetParameter(v29, 2u, *(float *)(*((_QWORD *)this + 81) + 44), 0);
  v31 = *((_QWORD *)this + 9);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  ausdk::AUElement::SetParameter(v32, 3u, *((float *)this + 164), 0);
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  ausdk::AUElement::SetParameter(v35, 4u, *((float *)this + 165), 0);
  v37 = *((_QWORD *)this + 9);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  ausdk::AUElement::SetParameter(v38, 5u, *((float *)this + 166), 0);
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  ausdk::AUElement::SetParameter(v41, 6u, *((float *)this + 167), 0);
  v43 = *(float *)(*((_QWORD *)this + 81) + 8);
  *((float *)this + 168) = v43;
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
    v43 = *((float *)this + 168);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 7u, v43, 0);
  v47 = *(_DWORD *)(*((_QWORD *)this + 81) + 20);
  *((_DWORD *)this + 169) = v47;
  v48 = *((_QWORD *)this + 9);
  if (v48)
  {
    v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
    v47 = *((_DWORD *)this + 169);
  }
  else
  {
    v50 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v50)
      v49 = 0;
    else
      v49 = *v50;
  }
  ausdk::AUElement::SetParameter(v49, 8u, (float)v47, 0);
  v51 = *(float *)(*((_QWORD *)this + 81) + 12);
  *((float *)this + 170) = v51;
  v52 = *((_QWORD *)this + 9);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
    v51 = *((float *)this + 170);
  }
  else
  {
    v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  ausdk::AUElement::SetParameter(v53, 9u, v51, 0);
  v55 = *(float *)(*((_QWORD *)this + 81) + 16);
  *((float *)this + 171) = v55;
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
    v55 = *((float *)this + 171);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  ausdk::AUElement::SetParameter(v57, 0xAu, v55, 0);
  v59 = *(_DWORD *)(*((_QWORD *)this + 81) + 216) != 0;
  *((_BYTE *)this + 692) = v59;
  v60 = *((_QWORD *)this + 9);
  if (v60)
  {
    v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
    v59 = *((unsigned __int8 *)this + 692);
  }
  else
  {
    v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v62)
      v61 = 0;
    else
      v61 = *v62;
  }
  v63 = 0.0;
  if (v59)
    v63 = 1.0;
  ausdk::AUElement::SetParameter(v61, 0xCu, v63, 0);
  v64 = *(float *)(*((_QWORD *)this + 81) + 220);
  *((float *)this + 174) = v64;
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
    v64 = *((float *)this + 174);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  ausdk::AUElement::SetParameter(v66, 0xDu, v64, 0);
  v68 = *(float *)(*((_QWORD *)this + 81) + 224);
  *((float *)this + 175) = v68;
  v69 = *((_QWORD *)this + 9);
  if (v69)
  {
    v70 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 0);
    v68 = *((float *)this + 175);
  }
  else
  {
    v71 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v71)
      v70 = 0;
    else
      v70 = *v71;
  }
  ausdk::AUElement::SetParameter(v70, 0xEu, v68, 0);
  v72 = *(float *)(*((_QWORD *)this + 81) + 228);
  *((float *)this + 177) = v72;
  v73 = *((_QWORD *)this + 9);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
    v72 = *((float *)this + 177);
  }
  else
  {
    v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  ausdk::AUElement::SetParameter(v74, 0x10u, v72, 0);
  v76 = *(float *)(*((_QWORD *)this + 81) + 232);
  *((float *)this + 178) = v76;
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
    v76 = *((float *)this + 178);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  ausdk::AUElement::SetParameter(v78, 0x11u, v76, 0);
  v80 = *(_DWORD *)(*((_QWORD *)this + 81) + 236);
  *((_DWORD *)this + 179) = v80;
  v81 = *((_QWORD *)this + 9);
  if (v81)
  {
    v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
    v80 = *((_DWORD *)this + 179);
  }
  else
  {
    v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v83)
      v82 = 0;
    else
      v82 = *v83;
  }
  ausdk::AUElement::SetParameter(v82, 0x12u, (float)v80, 0);
  v84 = *(_DWORD *)(*((_QWORD *)this + 81) + 240);
  *((_DWORD *)this + 176) = v84;
  v85 = *((_QWORD *)this + 9);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
    v84 = *((_DWORD *)this + 176);
  }
  else
  {
    v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  ausdk::AUElement::SetParameter(v86, 0xFu, (float)v84, 0);
  v88 = *(float *)(*((_QWORD *)this + 81) + 244);
  *((float *)this + 182) = v88;
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
    v88 = *((float *)this + 182);
  }
  else
  {
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  ausdk::AUElement::SetParameter(v90, 0x15u, v88, 0);
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v93, 0x13u);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  *((float *)this + 181) = ausdk::AUElement::GetParameter(v96, 0x14u);
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  *((float *)this + 182) = ausdk::AUElement::GetParameter(v99, 0x15u);
  if (!*((_BYTE *)this + 692))
    goto LABEL_185;
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  if (!AUNeuralNetVADLogScope(void)::scope)
  {
    v101 = MEMORY[0x1E0C81028];
LABEL_176:
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      v102 = *((float *)this + 174);
      v103 = *((float *)this + 175);
      v104 = *((_DWORD *)this + 176);
      v105 = *((float *)this + 177);
      *(_DWORD *)v135 = 136316418;
      *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
      v136 = 1024;
      v137 = 263;
      v138 = 2048;
      v139 = v102;
      v140 = 2048;
      v141 = v103;
      v142 = 1024;
      v143 = v104;
      v144 = 2048;
      v145 = v105;
      _os_log_impl(&dword_1B5ED0000, v101, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing the directional model: azimuth (%f), elev (%f), model type (%d), shape parameter (%f).\n", v135, 0x36u);
    }
    goto LABEL_178;
  }
  v101 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
  if (*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
    goto LABEL_176;
LABEL_178:
  v106 = *((_DWORD *)this + 151);
  v107 = operator new();
  v108 = *((double *)this + 76);
  v109 = *((_DWORD *)this + 176);
  v110 = *((_DWORD *)this + 177);
  v111 = *((_DWORD *)this + 179);
  *(_QWORD *)v107 = *((_QWORD *)this + 87);
  *(_QWORD *)(v107 + 8) = 0x13F800000;
  *(_DWORD *)(v107 + 16) = v109;
  v112 = complementaryModelType(v109);
  *(_QWORD *)(v107 + 32) = 0;
  *(_DWORD *)(v107 + 20) = v112;
  *(_DWORD *)(v107 + 24) = 4;
  *(_QWORD *)(v107 + 40) = 0;
  *(_QWORD *)(v107 + 48) = 0;
  *(_DWORD *)(v107 + 56) = v110;
  *(_DWORD *)(v107 + 60) = 1056964608;
  *(_DWORD *)(v107 + 64) = v111;
  *(_QWORD *)(v107 + 72) = 0;
  *(_QWORD *)(v107 + 80) = 0;
  *(_QWORD *)(v107 + 88) = 0;
  v113 = operator new(4uLL);
  *(_QWORD *)(v107 + 96) = 0;
  *(_QWORD *)(v107 + 72) = v113;
  *v113++ = 0;
  *(_QWORD *)(v107 + 80) = v113;
  *(_QWORD *)(v107 + 88) = v113;
  *(_QWORD *)(v107 + 104) = 0;
  *(_QWORD *)(v107 + 112) = 0;
  v114 = operator new(4uLL);
  v115 = (v106 + 1);
  *(_QWORD *)(v107 + 96) = v114;
  *v114++ = 0;
  *(_QWORD *)(v107 + 104) = v114;
  *(_QWORD *)(v107 + 112) = v114;
  *(_DWORD *)(v107 + 120) = 0;
  *(_DWORD *)(v107 + 124) = v108;
  *(_DWORD *)(v107 + 128) = v115;
  *(_QWORD *)(v107 + 132) = 0;
  *(_QWORD *)(v107 + 148) = 0;
  *(_QWORD *)(v107 + 140) = 0;
  *(_DWORD *)(v107 + 156) = 0;
  v116 = operator new(4uLL);
  *(_QWORD *)(v107 + 160) = 0;
  *(_QWORD *)(v107 + 136) = v116;
  *v116++ = 0;
  *(_QWORD *)(v107 + 144) = v116;
  *(_QWORD *)(v107 + 152) = v116;
  *(_QWORD *)(v107 + 168) = 0;
  *(_QWORD *)(v107 + 176) = 0;
  v117 = operator new(4uLL);
  *(_QWORD *)(v107 + 184) = 0;
  *(_QWORD *)(v107 + 160) = v117;
  *v117++ = 0;
  *(_QWORD *)(v107 + 168) = v117;
  *(_QWORD *)(v107 + 176) = v117;
  *(_QWORD *)(v107 + 192) = 0;
  *(_QWORD *)(v107 + 200) = 0;
  v118 = operator new(4uLL);
  *(_QWORD *)(v107 + 184) = v118;
  *v118++ = 0;
  *(_QWORD *)(v107 + 192) = v118;
  *(_QWORD *)(v107 + 200) = v118;
  *(_DWORD *)v135 = 1065353216;
  std::vector<float>::vector((_QWORD *)(v107 + 208), v115, v135);
  *(_QWORD *)(v107 + 232) = 0;
  *(_QWORD *)(v107 + 240) = 0;
  *(_QWORD *)(v107 + 248) = 0;
  v119 = operator new(4uLL);
  *(_QWORD *)(v107 + 232) = v119;
  *v119++ = 0;
  *(_QWORD *)(v107 + 240) = v119;
  *(_QWORD *)(v107 + 248) = v119;
  CircularModelDOAFactory::CreateModel((uint64_t *)v135, *(_DWORD *)(v107 + 16), *(_DWORD *)(v107 + 12), *(float *)v107, *(float *)(v107 + 4), *(float *)(v107 + 8));
  v120 = *(_QWORD *)(v107 + 32);
  *(_QWORD *)(v107 + 32) = *(_QWORD *)v135;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 24))(v120);
  CircularModelDOAFactory::CreateModel((uint64_t *)v135, *(_DWORD *)(v107 + 20), *(_DWORD *)(v107 + 12), *(float *)v107, *(float *)(v107 + 4), *(float *)(v107 + 8));
  v121 = *(_QWORD *)(v107 + 40);
  *(_QWORD *)(v107 + 40) = *(_QWORD *)v135;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121);
  CircularModelDOAFactory::CreateModel((uint64_t *)v135, *(_DWORD *)(v107 + 24), *(_DWORD *)(v107 + 12), *(float *)v107, *(float *)(v107 + 4), *(float *)(v107 + 8));
  v122 = *(_QWORD *)(v107 + 48);
  *(_QWORD *)(v107 + 48) = *(_QWORD *)v135;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122);
  std::unique_ptr<DirectionalVAD>::reset[abi:ne180100]((_QWORD *)this + 95, v107);
LABEL_185:
  v123 = (DirectionalVAD *)*((_QWORD *)this + 95);
  if (v123)
  {
    DirectionalVAD::setTargetDirection(v123, *((float *)this + 174), *((float *)this + 175));
    DirectionalVAD::setShapeParameter(*((DirectionalVAD **)this + 95), *((float *)this + 177));
    DirectionalVAD::setConditionalTargetPrior(*((DirectionalVAD **)this + 95), *((float *)this + 178));
    v124 = *((_QWORD *)this + 95);
    *(_DWORD *)(v124 + 64) = *((_DWORD *)this + 179);
    DirectionalVAD::setCurrentDirection((float **)v124, *((float *)this + 180), *((float *)this + 181));
    *(_DWORD *)(*((_QWORD *)this + 95) + 120) = *((float *)this + 182);
  }
  v125 = *(_DWORD *)(*((_QWORD *)this + 81) + 248) != 0;
  *((_BYTE *)this + 732) = v125;
  v126 = *((_QWORD *)this + 9);
  if (v126)
  {
    v127 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v126 + 32))(v126, 0);
    v125 = *((_BYTE *)this + 732) != 0;
  }
  else
  {
    v128 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v128)
      v127 = 0;
    else
      v127 = *v128;
  }
  ausdk::AUElement::SetParameter(v127, 0x16u, (float)v125, 0);
  v129 = *(_DWORD *)(*((_QWORD *)this + 81) + 252);
  *((_DWORD *)this + 172) = v129;
  v130 = *((_QWORD *)this + 9);
  if (v130)
  {
    v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
    v129 = *((_DWORD *)this + 172);
  }
  else
  {
    v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v132)
      v131 = 0;
    else
      v131 = *v132;
  }
  ausdk::AUElement::SetParameter(v131, 0xBu, (float)v129, 0);
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v133 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      return 0;
  }
  else
  {
    v133 = MEMORY[0x1E0C81028];
  }
  v134 = os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v134)
  {
    *(_DWORD *)v135 = 136315394;
    *(_QWORD *)&v135[4] = "AUNeuralNetVAD.cpp";
    v136 = 1024;
    v137 = 289;
    _os_log_impl(&dword_1B5ED0000, v133, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUNeuralNetVAD: Successfully Initialized.\n", v135, 0x12u);
    return 0;
  }
  return result;
}

void sub_1B62AD3D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *v3;
  if (*v3)
  {
    v1[30] = v10;
    operator delete(v10);
  }
  v11 = *v2;
  if (*v2)
  {
    v1[27] = v11;
    operator delete(v11);
  }
  v12 = *v4;
  if (*v4)
  {
    v1[24] = v12;
    operator delete(v12);
  }
  v13 = *v8;
  if (*v8)
  {
    v1[21] = v13;
    operator delete(v13);
  }
  v14 = (void *)v1[17];
  if (v14)
  {
    v1[18] = v14;
    operator delete(v14);
  }
  v15 = *v7;
  if (*v7)
  {
    v1[13] = v15;
    operator delete(v15);
  }
  v16 = *v6;
  if (*v6)
  {
    v1[10] = v16;
    operator delete(v16);
  }
  v17 = v1[6];
  v1[6] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  v18 = v1[5];
  v1[5] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  v19 = *v5;
  *v5 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  MEMORY[0x1BCC95CEC](v1, 0x10A0C4063FAA373);
  _Unwind_Resume(a1);
}

double AUNeuralNetVAD::Cleanup(AUNeuralNetVAD *this)
{
  NSObject *v2;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  double result;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (AUNeuralNetVADLogScope(void)::once != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "AUNeuralNetVAD.cpp";
    v9 = 1024;
    v10 = 300;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUNeuralNetVAD: Resetting state variables. Cleanup() started.\n", (uint8_t *)&v7, 0x12u);
  }
LABEL_9:
  if (*((_BYTE *)this + 600))
  {
    v3 = *((_QWORD *)this + 81);
    (*(void (**)(_QWORD))(***(_QWORD ***)(v3 + 176) + 48))(**(_QWORD **)(v3 + 176));
    *(_BYTE *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 164) = 0;
    *(_QWORD *)(v3 + 156) = 0;
    *(_DWORD *)(v3 + 172) = 0;
    bzero(*(void **)(v3 + 192), *(_QWORD *)(v3 + 200) - *(_QWORD *)(v3 + 192));
    if (*(_DWORD *)(v3 + 40) == 1)
    {
      bzero(*(void **)(v3 + 80), *(_QWORD *)(v3 + 88) - *(_QWORD *)(v3 + 80));
      v4 = (void **)(v3 + 104);
      v5 = (_QWORD *)(v3 + 112);
    }
    else
    {
      v4 = (void **)(v3 + 128);
      v5 = (_QWORD *)(v3 + 136);
    }
    bzero(*v4, *v5 - (_QWORD)*v4);
  }
  result = 0.0;
  *(_OWORD *)((char *)this + 628) = 0u;
  return result;
}

uint64_t AUNeuralNetVAD::Reset(AUNeuralNetVAD *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  if (*((_BYTE *)this + 600))
  {
    v2 = *((_QWORD *)this + 81);
    *(_BYTE *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 164) = 0;
    *(_QWORD *)(v2 + 156) = 0;
    *(_DWORD *)(v2 + 172) = 0;
    v3 = *(void **)(v2 + 192);
    v4 = *(_QWORD *)(v2 + 200) - (_QWORD)v3;
    if (v4 >= 1)
      bzero(v3, 4 * (((unint64_t)v4 >> 2) - ((unint64_t)v4 > 3)) + 4);
    if (*(_DWORD *)(v2 + 40) != 1)
    {
      v7 = *(void **)(v2 + 128);
      v8 = *(_QWORD *)(v2 + 136) - (_QWORD)v7;
      if (v8 < 1)
        goto LABEL_9;
      goto LABEL_8;
    }
    v5 = *(void **)(v2 + 80);
    v6 = *(_QWORD *)(v2 + 88) - (_QWORD)v5;
    if (v6 >= 1)
      bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
    v7 = *(void **)(v2 + 104);
    v8 = *(_QWORD *)(v2 + 112) - (_QWORD)v7;
    if (v8 > 0)
LABEL_8:
      bzero(v7, 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
  }
LABEL_9:
  *(_OWORD *)((char *)this + 628) = 0u;
  return 0;
}

uint64_t AUNeuralNetVAD::GetPropertyInfo(AUNeuralNetVAD *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUNeuralNetVAD::GetProperty(AUNeuralNetVAD *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 544;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUNeuralNetVAD::SetProperty(AUNeuralNetVAD *this, int a2, int a3, unsigned int a4, CFArrayRef *a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v10;
  CFArrayRef *v11;
  uint64_t v12;
  unint64_t v13;
  const __CFNumber *ValueAtIndex;
  size_t v15;
  const __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  CFIndex Count;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  CFIndex v43;
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 3698)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_BYTE *)this + 544) = *(_DWORD *)a5 != 0;
      return result;
    }
    if (a2 != 3697)
      return result;
    if (!a5)
    {
      if (AUNeuralNetVADLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        v25 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v25 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v33 = "AUNeuralNetVAD.cpp";
        v34 = 1024;
        v35 = 552;
        v28 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n";
        v29 = v25;
        v30 = 18;
        goto LABEL_62;
      }
      return 4294956445;
    }
    v16 = *a5;
    if (*((_QWORD *)this + 81))
      std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100]((uint64_t *)this + 81, 0);
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    v17 = AUNeuralNetVADLogScope(void)::scope;
    v18 = operator new();
    NeuralNetVAD::NeuralNetVAD(v18, v16, v17);
    std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100]((uint64_t *)this + 81, v18);
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      v19 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
      {
LABEL_55:
        result = 0;
        *((_BYTE *)this + 600) = 1;
        return result;
      }
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "AUNeuralNetVAD.cpp";
      v34 = 1024;
      v35 = 579;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Successfully loaded NeuralNetVAD plist.\n", buf, 0x12u);
    }
    goto LABEL_55;
  }
  switch(a2)
  {
    case 3699:
      if (a6 == 4 * (*((_DWORD *)this + 151) + 1))
      {
        v21 = *((_QWORD *)this + 95);
        if (!v21)
          return 0;
        v22 = *(void **)(v21 + 208);
        v11 = a5;
        v15 = a6;
LABEL_66:
        memcpy(v22, v11, v15);
        return 0;
      }
      if (AUNeuralNetVADLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        v24 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v24 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v31 = 4 * (*((_DWORD *)this + 151) + 1);
        *(_DWORD *)buf = 136316162;
        v33 = "AUNeuralNetVAD.cpp";
        v34 = 1024;
        v35 = 521;
        v36 = 2048;
        v37 = a6;
        v38 = 2048;
        v39 = v31;
        v40 = 1024;
        LODWORD(v41) = 3699;
        v28 = "%25s:%-5d Input size of PriorSPP  (%lu) is not equal to the the expected size  (%lu) (prop id: %u).\n";
        v29 = v24;
        v30 = 44;
        goto LABEL_62;
      }
      return 4294956445;
    case 3700:
      result = 4294956445;
      if (a6 >= 4)
      {
        if (*(_BYTE *)a5)
          return 0;
        else
          return 4294956445;
      }
      break;
    case 103699:
      if (a6 == 8)
      {
        v10 = *((_QWORD *)this + 93) - *((_QWORD *)this + 92);
        if (CFArrayGetCount(*a5) == v10 >> 2)
        {
          v11 = (CFArrayRef *)*((_QWORD *)this + 93);
          if (v11 == *((CFArrayRef **)this + 92))
          {
            v15 = 0;
          }
          else
          {
            v12 = 0;
            v13 = 0;
            do
            {
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*a5, v13);
              CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(*((_QWORD *)this + 92) + v12));
              ++v13;
              v11 = (CFArrayRef *)*((_QWORD *)this + 92);
              v12 += 4;
            }
            while (v13 < (uint64_t)(*((_QWORD *)this + 93) - (_QWORD)v11) >> 2);
            v15 = (*((_DWORD *)this + 186) - (_DWORD)v11);
          }
          v22 = *(void **)(*((_QWORD *)this + 95) + 208);
          goto LABEL_66;
        }
      }
      if (AUNeuralNetVADLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        v23 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
          return 4294956445;
      }
      else
      {
        v23 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v26 = (uint64_t)(*((_QWORD *)this + 93) - *((_QWORD *)this + 92)) >> 2;
        Count = CFArrayGetCount(*a5);
        *(_DWORD *)buf = 136316674;
        v33 = "AUNeuralNetVAD.cpp";
        v34 = 1024;
        v35 = 532;
        v36 = 2048;
        v37 = a6;
        v38 = 2048;
        v39 = 8;
        v40 = 2048;
        v41 = v26;
        v42 = 2048;
        v43 = Count;
        v44 = 1024;
        v45 = 103699;
        v28 = "%25s:%-5d Input size of Prior_SPP  (%lu) is not equal to the the expected size  (%lu) or (%lu) is not equa"
              "l to (%lu) (prop id: %u).\n";
        v29 = v23;
        v30 = 64;
LABEL_62:
        _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
        return 4294956445;
      }
      return 4294956445;
  }
  return result;
}

void sub_1B62ADD18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9, int a10, __int128 buf, __int16 a12, __int16 a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *exception_ptr;
  int v20;
  NSObject **v21;
  NSObject *v22;

  MEMORY[0x1BCC95CEC](v14, 0x10E0C40DF43E4E2);
  if (a2 != 1)
    _Unwind_Resume(a1);
  exception_ptr = __cxa_get_exception_ptr(a1);
  a9.__vftable = (std::exception_vtbl *)&off_1E69EE218;
  v20 = exception_ptr[2];
  a10 = v20;
  __cxa_begin_catch(a1);
  if (*(_QWORD *)(v16 + 1904) != -1)
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
  v21 = *(NSObject ***)(v15 + 1896);
  if (v21)
  {
    v22 = *v21;
    if (!*v21)
      goto LABEL_10;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315650;
    *(_QWORD *)((char *)&buf + 4) = "AUNeuralNetVAD.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 566;
    a13 = 1024;
    a14 = v20;
    _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not load NeuralNetVAD plist, exception (%d).\n", (uint8_t *)&buf, 0x18u);
  }
LABEL_10:
  std::exception::~exception(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1B62ADC7CLL);
}

uint64_t AUNeuralNetVAD::SetParameter(AUNeuralNetVAD *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  ausdk::AUElement **v13;
  uint64_t v14;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 74);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 71);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 72) - v14) >> 3))
        v11 = 0;
      else
        v11 = *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    return 0;
  }
  else if (a3)
  {
    return 4294956418;
  }
  else
  {
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
    }
    else
    {
      v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v13)
        v9 = 0;
      else
        v9 = *v13;
    }
    ausdk::AUElement::SetParameter(v9, a2, a5, 0);
    result = 0;
    ++*((_QWORD *)this + 66);
  }
  return result;
}

uint64_t AUNeuralNetVAD::CanScheduleParameters(AUNeuralNetVAD *this)
{
  return 0;
}

uint64_t AUNeuralNetVAD::ProcessMultipleBufferLists(AUNeuralNetVAD *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9;
  uint64_t v11;
  int *v12;
  int v13;
  AudioDSP::Utility *v14;
  NSObject *v15;
  NSObject *v17;
  uint64_t v18;
  int *v19;
  float v20;
  uint64_t mNumberBuffers;
  float **v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  float v27;
  const float **v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  float v46;
  const float **v47;
  vDSP_Length v48;
  float v49;
  float *v50;
  float v51;
  int *v52;
  unsigned int *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  NSObject *v58;
  const char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint32_t v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  char v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  float v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  float v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  float v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  BOOL *v98;
  float *v99;
  float v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  NSObject *v106;
  NSObject *v107;
  int v108;
  _BYTE v109[42];
  uint64_t v110;
  _BYTE __A[18];
  __int16 v112;
  double v113;
  uint64_t v114;

  v9 = (int)a3;
  v114 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v11)
  {
    AUNeuralNetVAD::UpdateState(this);
    *((_QWORD *)this + 67) = v11;
  }
  if (*((_DWORD *)this + 84) != v9)
    return 4294956422;
  v12 = (int *)*a5;
  if (!*a5)
  {
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      v17 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)&v109[10] = 136315394;
      *(_QWORD *)&v109[14] = "AUNeuralNetVAD.cpp";
      *(_WORD *)&v109[22] = 1024;
      *(_DWORD *)&v109[24] = 1249;
      _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d InputSignal cannot be NULL. It is a required input\n", &v109[10], 0x12u);
    }
    return 4294956420;
  }
  v13 = *v12;
  if (*v12 != *((_DWORD *)this + 156) || *a7 && (*a7)->mNumberBuffers != v13)
    return 4294956428;
  *(_WORD *)v109 = 0;
  v14 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 151));
  *(_QWORD *)&v109[10] = *((_QWORD *)this + 76);
  *(_OWORD *)&v109[18] = xmmword_1B6626900;
  *(_DWORD *)&v109[34] = 4;
  *(_DWORD *)&v109[38] = v13;
  v110 = 32;
  AudioDSP::Utility::DetectNonFinites(v14, v12, (const AudioBufferList *)&v109[10], (const AudioStreamBasicDescription *)&v109[1], (BOOL *)a5);
  if (!*((_BYTE *)this + 544) && (!v109[1] || !*((_BYTE *)this + 601)))
  {
    v18 = *((_QWORD *)this + 81);
    v19 = (int *)*a5;
    v20 = *((double *)this + 77);
    mNumberBuffers = (*a5)->mNumberBuffers;
    *(float *)&v109[6] = (float)((float)(*(float *)(v18 + 60) * v20) * (float)(*(float *)(v18 + 60) * v20))
                       / (float)mNumberBuffers;
    vDSP_vclr(*(float **)(v18 + 80), 1, *(unsigned int *)(v18 + 64));
    if ((_DWORD)mNumberBuffers)
    {
      v22 = (float **)(v19 + 4);
      do
      {
        v23 = *(unsigned int *)(v18 + 28);
        v24 = &(*v22)[v23];
        v25 = **v22;
        *(_QWORD *)__A = *v22 + 1;
        v26 = *(_QWORD *)(v18 + 80);
        *(float *)v26 = *(float *)v26 + (float)(v25 * v25);
        v27 = *v24;
        *(_QWORD *)&__A[8] = v24 + 1;
        *(float *)(v26 + 4 * v23) = *(float *)(v26 + 4 * v23) + (float)(v27 * v27);
        vDSP_zvmgsa((const DSPSplitComplex *)__A, 1, (const float *)(v26 + 4), 1, (float *)(v26 + 4), 1, (v23 - 1));
        v22 += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    vDSP_vsmul(*(const float **)(v18 + 80), 1, (const float *)&v109[6], *(float **)(v18 + 80), 1, *(unsigned int *)(v18 + 64));
    if (*(_DWORD *)(v18 + 40) == 1)
    {
      if (*(float *)(v18 + 48) > 0.0)
        vDSP_vsmsma(*(const float **)(v18 + 104), 1, (const float *)(v18 + 48), *(const float **)(v18 + 80), 1, (const float *)(v18 + 52), *(float **)(v18 + 104), 1, *(unsigned int *)(v18 + 64));
      vDSP_vclr(*(float **)(v18 + 192), 1, *(unsigned int *)(v18 + 184));
      sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *(sparse_matrix_float *)(v18 + 72), *(const float **)(v18 + 80), 1, *(float **)(v18 + 192), 1);
      if (*(float *)(v18 + 48) > 0.0)
        sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *(sparse_matrix_float *)(v18 + 72), *(const float **)(v18 + 104), 1, (float *)(*(_QWORD *)(v18 + 192) + 4 * *(unsigned int *)(v18 + 68)), 1);
      vDSP_vthr(*(const float **)(v18 + 192), 1, (const float *)(v18 + 56), *(float **)(v18 + 192), 1, *(unsigned int *)(v18 + 184));
      *(_DWORD *)__A = *(_DWORD *)(v18 + 184);
      vvlogf(*(float **)(v18 + 192), *(const float **)(v18 + 192), (const int *)__A);
    }
    else
    {
      v28 = (const float **)(v18 + 128);
      vDSP_vclr(*(float **)(v18 + 128), 1, *(unsigned int *)(v18 + 68));
      sparse_matrix_vector_product_dense_float(CblasNoTrans, 1.0, *(sparse_matrix_float *)(v18 + 72), *(const float **)(v18 + 80), 1, *(float **)(v18 + 128), 1);
      vDSP_vthr(*v28, 1, (const float *)(v18 + 56), (float *)*v28, 1, *(unsigned int *)(v18 + 68));
      *(_DWORD *)__A = *(_DWORD *)(v18 + 68);
      vvlogf((float *)*v28, *v28, (const int *)__A);
      v30 = *(_DWORD *)(v18 + 36);
      v29 = *(_DWORD *)(v18 + 40);
      v31 = v30 + 1;
      v32 = *(unsigned int *)(v18 + 68);
      v33 = (v30 + 1) * v32;
      v34 = v29 - 1;
      v35 = (v29 - 1) * v33;
      if (v35)
      {
        v36 = *(_DWORD **)(v18 + 192);
        v37 = v36;
        v38 = (v34 * v33);
        do
        {
          *v37++ = v36[v33++];
          --v38;
        }
        while (v38);
      }
      if ((_DWORD)v32)
      {
        v39 = *(float **)(v18 + 128);
        v40 = *(_QWORD *)(v18 + 192);
        v41 = v39;
        v42 = v32;
        do
        {
          v43 = *(_DWORD *)v41++;
          *(_DWORD *)(v40 + 4 * v35++) = v43;
          --v42;
        }
        while (v42);
        if (v30 == 1)
        {
          v44 = v32 + v32 * v34 * v31;
          v45 = v32 * (v29 - 2) * v31;
          do
          {
            v46 = *v39++;
            *(float *)(v40 + 4 * v44++) = v46 - *(float *)(v40 + 4 * v45++);
            --v32;
          }
          while (v32);
        }
      }
    }
    v47 = (const float **)(*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v18 + 176) + 72))(**(_QWORD **)(v18 + 176), v18 + 192);
    *(_DWORD *)__A = 0;
    *(_DWORD *)&v109[2] = 1065353216;
    vDSP_vclip(*v47, 1, (const float *)__A, (const float *)&v109[2], (float *)*v47, 1, 1uLL);
    v49 = 1.0;
    v50 = (float *)*v47;
    v51 = (float)((float)(*(float *)(v18 + 12) + (float)((float)(1.0 - *(float *)(v18 + 12)) * *(float *)(v18 + 156)))
                / (float)((float)(1.0 - *(float *)(v18 + 16)) + (float)(*(float *)(v18 + 16) * *(float *)(v18 + 156))))
        * **v47;
    *(float *)(v18 + 156) = v51;
    *v50 = v51;
    *(_DWORD *)(v18 + 172) = *(_DWORD *)(v18 + 156);
    v52 = (int *)*a5;
    v53 = (unsigned int *)*a7;
    v54 = *((_QWORD *)this + 81);
    v55 = *(float *)(v54 + 172);
    *((float *)this + 160) = v55;
    if (!*((_BYTE *)this + 692))
    {
LABEL_68:
      v64 = 268;
      if (*(float *)(v54 + 8) > v55)
        v64 = 264;
      v65 = *(float *)(v54 + v64);
      *(float *)(v54 + 152) = v65;
      if (v65 <= 0.0)
      {
        v68 = *(float *)(v54 + 160);
        if (*(_BYTE *)(v54 + 24))
        {
          v68 = v68 + 1.0;
          *(float *)(v54 + 160) = v68;
        }
        v49 = 0.0;
        if (v68 <= (float)*(unsigned int *)(v54 + 20))
        {
LABEL_77:
          *(float *)(v54 + 164) = v49;
          v69 = *((_QWORD *)this + 81);
          v70 = *(float *)(v69 + 152);
          *((float *)this + 157) = v70;
          *((_QWORD *)this + 79) = *(_QWORD *)(v69 + 164);
          *((float *)this + 164) = v70;
          v71 = *((_QWORD *)this + 9);
          if (v71)
          {
            v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
            v70 = *((float *)this + 164);
          }
          else
          {
            v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v73)
              v72 = 0;
            else
              v72 = *v73;
          }
          ausdk::AUElement::SetParameter(v72, 3u, v70, 0);
          v74 = *((float *)this + 158);
          *((float *)this + 165) = v74;
          v75 = *((_QWORD *)this + 9);
          if (v75)
          {
            v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
            v74 = *((float *)this + 165);
          }
          else
          {
            v77 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v77)
              v76 = 0;
            else
              v76 = *v77;
          }
          ausdk::AUElement::SetParameter(v76, 4u, v74, 0);
          v78 = *((float *)this + 159);
          *((float *)this + 166) = v78;
          v79 = *((_QWORD *)this + 9);
          if (v79)
          {
            v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
            v78 = *((float *)this + 166);
          }
          else
          {
            v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v81)
              v80 = 0;
            else
              v80 = *v81;
          }
          ausdk::AUElement::SetParameter(v80, 5u, v78, 0);
          v82 = *((float *)this + 160);
          *((float *)this + 167) = v82;
          v83 = *((_QWORD *)this + 9);
          if (v83)
          {
            v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
            v82 = *((float *)this + 167);
          }
          else
          {
            v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v85)
              v84 = 0;
            else
              v84 = *v85;
          }
          ausdk::AUElement::SetParameter(v84, 6u, v82, 0);
          v86 = *((_QWORD *)this + 9);
          if (v86)
          {
            v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
          }
          else
          {
            v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v88)
              v87 = 0;
            else
              v87 = *v88;
          }
          ausdk::AUElement::SetParameter(v87, 7u, *((float *)this + 168), 0);
          v89 = *((_QWORD *)this + 9);
          if (v89)
          {
            v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
          }
          else
          {
            v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v91)
              v90 = 0;
            else
              v90 = *v91;
          }
          ausdk::AUElement::SetParameter(v90, 8u, (float)*((unsigned int *)this + 169), 0);
          v92 = *((_QWORD *)this + 9);
          if (v92)
          {
            v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
          }
          else
          {
            v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v94)
              v93 = 0;
            else
              v93 = *v94;
          }
          ausdk::AUElement::SetParameter(v93, 9u, *((float *)this + 170), 0);
          v95 = *((_QWORD *)this + 9);
          if (v95)
          {
            v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
          }
          else
          {
            v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v97)
              v96 = 0;
            else
              v96 = *v97;
          }
          ausdk::AUElement::SetParameter(v96, 0xAu, *((float *)this + 171), 0);
          v99 = (float *)((char *)this + 628);
          *(_DWORD *)__A = 0;
          switch(*((_DWORD *)this + 172))
          {
            case 0:
              v100 = *v99;
              goto LABEL_122;
            case 1:
              v100 = *((float *)this + 159);
              goto LABEL_122;
            case 2:
              v100 = *((float *)this + 160);
LABEL_122:
              *(float *)__A = v100;
              break;
            case 3:
              *(_DWORD *)__A = 1065353216;
              v100 = 1.0;
              break;
            default:
              v100 = 0.0;
              break;
          }
          v101 = *v53;
          if (*((_BYTE *)this + 732))
          {
            if (v101)
            {
              v102 = 0;
              v103 = 4;
              do
              {
                *(_DWORD *)&v109[6] = 0;
                vDSP_vfill((const float *)&v109[6], *(float **)&v53[v103], 1, (2 * *((_DWORD *)this + 151)));
                **(float **)&v53[v103] = v100;
                ++v102;
                v103 += 4;
              }
              while (v102 < *v53);
            }
          }
          else if (v101)
          {
            v104 = 0;
            v105 = 4;
            do
            {
              vDSP_vsmul(*(const float **)&v52[v105], 1, (const float *)__A, *(float **)&v53[v105], 1, (2 * *((_DWORD *)this + 151)));
              ++v104;
              v105 += 4;
            }
            while (v104 < *v53);
          }
          AudioDSP::Utility::DetectNonFinites(v14, *a7, (const AudioBufferList *)&v109[10], (const AudioStreamBasicDescription *)v109, v98);
          if (!v109[0] || !*((_BYTE *)this + 601))
            return 0;
          if (AUNeuralNetVADLogScope(void)::once != -1)
            dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
          if (AUNeuralNetVADLogScope(void)::scope)
          {
            v106 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
            if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
            {
LABEL_142:
              (*(void (**)(AUNeuralNetVAD *))(*(_QWORD *)this + 64))(this);
              *(_QWORD *)v99 = 0;
              *(_QWORD *)((char *)this + 636) = 0;
              CopyBufferList(&(*a5)->mNumberBuffers, *a7);
              return 0;
            }
          }
          else
          {
            v106 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__A = 136315650;
            *(_QWORD *)&__A[4] = "AUNeuralNetVAD.cpp";
            *(_WORD *)&__A[12] = 1024;
            *(_DWORD *)&__A[14] = 1301;
            v112 = 1024;
            LODWORD(v113) = v109[0];
            _os_log_impl(&dword_1B5ED0000, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetVAD: (OutputSignals) is NOT finite: (%u)\n", __A, 0x18u);
          }
          goto LABEL_142;
        }
        v67 = 0;
        v66 = 1.0;
      }
      else
      {
        v66 = 0.0;
        v67 = 1;
      }
      *(_DWORD *)(v54 + 160) = 0;
      *(float *)(v54 + 168) = v49;
      v49 = v66;
      *(_BYTE *)(v54 + 24) = v67;
      goto LABEL_77;
    }
    if (v55 < 0.0 || v55 > 1.0)
    {
      if (AUNeuralNetVADLogScope(void)::once != -1)
        dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_11607);
      if (AUNeuralNetVADLogScope(void)::scope)
      {
        v58 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
        if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
          goto LABEL_67;
      }
      else
      {
        v58 = MEMORY[0x1E0C81028];
      }
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
LABEL_67:
        v55 = *(float *)(*((_QWORD *)this + 95) + 132);
        *((float *)this + 160) = v55;
        v54 = *((_QWORD *)this + 81);
        goto LABEL_68;
      }
      *(_DWORD *)__A = 136315650;
      *(_QWORD *)&__A[4] = "DirectionalVAD.cpp";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 148;
      v112 = 2048;
      v113 = v55;
      v59 = "%25s:%-5d nnSoftVAD has value (%f). Valid range is [0, 1]. Skipping update.\n";
      v60 = v58;
      v61 = OS_LOG_TYPE_DEFAULT;
      v62 = 28;
    }
    else
    {
      v56 = *((_QWORD *)this + 95);
      switch(*(_DWORD *)(v56 + 64))
      {
        case 0:
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v56 + 32) + 48))(*(_QWORD *)(v56 + 32), v56 + 72, v56 + 96);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v56 + 40) + 48))(*(_QWORD *)(v56 + 40), v56 + 72, v56 + 96);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v56 + 48) + 48))(*(_QWORD *)(v56 + 48), v56 + 72, v56 + 96, v56 + 184);
          v57 = **(float **)(v56 + 136)
              / (float)((float)(**(float **)(v56 + 136) + **(float **)(v56 + 160)) + **(float **)(v56 + 184));
          goto LABEL_65;
        case 1:
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v56 + 32) + 48))(*(_QWORD *)(v56 + 32), v56 + 72, v56 + 96);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v56 + 40) + 48))(*(_QWORD *)(v56 + 40), v56 + 72, v56 + 96);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v56 + 48) + 48))(*(_QWORD *)(v56 + 48), v56 + 72, v56 + 96, v56 + 184);
          v63 = (float)((float)(*(float *)(v56 + 60) * v55) * **(float **)(v56 + 136))
              / (float)((float)((float)((float)((float)(1.0 - *(float *)(v56 + 60)) * v55) * **(float **)(v56 + 160))
                              + (float)((float)(*(float *)(v56 + 60) * v55) * **(float **)(v56 + 136)))
                      + (float)((float)(1.0 - v55) * **(float **)(v56 + 184)));
          goto LABEL_66;
        case 2:
          *(_DWORD *)__A = 0;
          LODWORD(v48) = vcvtas_u32_f32((float)((float)*(unsigned int *)(v56 + 120) / (float)*(unsigned int *)(v56 + 124))* (float)*(unsigned int *)(v56 + 128));
          vDSP_meanv(*(const float **)(v56 + 208), 1, (float *)__A, v48);
          v57 = *(float *)__A;
LABEL_65:
          v63 = v57 * v55;
LABEL_66:
          *(float *)(v56 + 132) = v63;
          goto LABEL_67;
        case 3:
          if (AUNeuralNetVADLogScope(void)::once != -1)
            dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_11607);
          if (AUNeuralNetVADLogScope(void)::scope)
          {
            v107 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
            if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
              goto LABEL_67;
          }
          else
          {
            v107 = MEMORY[0x1E0C81028];
          }
          if (!os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
            goto LABEL_67;
          v108 = *(_DWORD *)(v56 + 64);
          *(_DWORD *)__A = 136315650;
          *(_QWORD *)&__A[4] = "DirectionalVAD.cpp";
          *(_WORD *)&__A[12] = 1024;
          *(_DWORD *)&__A[14] = 186;
          v112 = 1024;
          LODWORD(v113) = v108;
          v59 = "%25s:%-5d Invalid value for combined probability mode (%u).\n";
          v60 = v107;
          v61 = OS_LOG_TYPE_ERROR;
          v62 = 24;
          break;
        default:
          goto LABEL_67;
      }
    }
    _os_log_impl(&dword_1B5ED0000, v60, v61, v59, __A, v62);
    goto LABEL_67;
  }
  *(_OWORD *)((char *)this + 628) = xmmword_1B66A0780;
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  if (v109[1])
  {
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      v15 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
        return 0;
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__A = 136315650;
      *(_QWORD *)&__A[4] = "AUNeuralNetVAD.cpp";
      *(_WORD *)&__A[12] = 1024;
      *(_DWORD *)&__A[14] = 1286;
      v112 = 1024;
      LODWORD(v113) = v109[1];
      _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d AUNeuralNetVAD: (InputSignals) is NOT finite: (%u)\n", __A, 0x18u);
    }
  }
  return 0;
}

uint64_t AUNeuralNetVAD::Render(AUNeuralNetVAD *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  ausdk::AUIOElement *v10;
  uint64_t v11;
  ausdk::AUIOElement *v12;
  uint64_t BufferList;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (ausdk::AUBase::HasInput(this, 0))
  {
    Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
    result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
    if (!(_DWORD)result)
    {
      v10 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0);
      v14[0] = ausdk::AUIOElement::PrepareBuffer(v10, a4);
      v11 = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 0);
      BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
      return (*(uint64_t (**)(AUNeuralNetVAD *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &BufferList, 1, v14);
    }
  }
  else
  {
    v12 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 128), 0);
    ausdk::AUIOElement::PrepareBuffer(v12, a4);
    return 0;
  }
  return result;
}

uint64_t AUNeuralNetVAD::GetParameterList(AUNeuralNetVAD *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A1E60;
    *((_QWORD *)a3 + 10) = 0x1600000015;
  }
  result = 0;
  *a4 = 22;
  return result;
}

uint64_t AUNeuralNetVAD::GetParameterInfo(AUNeuralNetVAD *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  AudioUnitParameterValue v7;
  AudioUnitParameterOptions v8;
  const __CFString *v9;
  AudioUnitParameterOptions flags;
  int v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  AudioUnitParameterOptions v17;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
    return 4294956418;
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("NNVAD: Number of DNN layers");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Number of DNN layers"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v6 = 0x4100000000000000;
      goto LABEL_15;
    case 1:
      buffer->cfNameString = CFSTR("NNVAD: Number of frames for context window");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Number of frames for context window"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4100000000000000;
      v7 = 1.0;
      goto LABEL_9;
    case 2:
      buffer->cfNameString = CFSTR("NNVAD: Forgetting factor (time constant)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Forgetting factor (time constant)"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x4040000000000000;
      v7 = 0.3;
LABEL_9:
      v8 = buffer->flags | 0x40008000;
      goto LABEL_38;
    case 3:
      v9 = CFSTR("NNVAD: Binary VAD");
      goto LABEL_14;
    case 4:
      v9 = CFSTR("NNVAD: EndPoint VAD");
      goto LABEL_14;
    case 5:
      v9 = CFSTR("NNVAD: Utt VAD");
      goto LABEL_14;
    case 6:
      v9 = CFSTR("NNVAD: Soft VAD");
LABEL_14:
      buffer->cfNameString = v9;
      buffer->flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v6 = 0x3F80000000000000;
LABEL_15:
      *(_QWORD *)&buffer->minValue = v6;
      flags = buffer->flags;
      v11 = 1073774592;
      goto LABEL_40;
    case 7:
      buffer->cfNameString = CFSTR("NNVAD: threshold");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: threshold"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      goto LABEL_29;
    case 8:
      buffer->cfNameString = CFSTR("NNVAD: wait time");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: wait time"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      v7 = 10.0;
      goto LABEL_37;
    case 9:
      v12 = CFSTR("NNVAD: transition prob. a01");
      goto LABEL_20;
    case 10:
      v12 = CFSTR("NNVAD: transition prob. a10");
LABEL_20:
      buffer->cfNameString = v12;
      buffer->flags = 0x8000000;
      CFStringGetCString(v12, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.1;
      goto LABEL_37;
    case 11:
      buffer->cfNameString = CFSTR("NNVAD: Output mask mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Output mask mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v13 = 0x4000000000000000;
      goto LABEL_35;
    case 12:
      buffer->cfNameString = CFSTR("NNVAD: Use directional mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Use directional mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      v14 = 0x3F80000000000000;
      goto LABEL_26;
    case 13:
      v15 = CFSTR("NNVAD: Target azimuth, when using the directional mode");
      goto LABEL_32;
    case 14:
      v16 = CFSTR("NNVAD: Target elevation, when using the directional mode");
      goto LABEL_34;
    case 15:
      buffer->cfNameString = CFSTR("NNVAD: Model type, when using the directional mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Model type, when using the directional mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      v14 = 0x4080000000000000;
LABEL_26:
      *(_QWORD *)&buffer->minValue = v14;
      flags = buffer->flags;
      v11 = -1056964608;
      goto LABEL_40;
    case 16:
      buffer->cfNameString = CFSTR("NNVAD: Model shape parameter, when using the directional mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Model shape parameter, when using the directional mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      v7 = 1.0;
      goto LABEL_37;
    case 17:
      buffer->cfNameString = CFSTR("NNVAD: Conditional target prior, when using the directional mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Conditional target prior, when using the directional mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
LABEL_29:
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v7 = 0.5;
      goto LABEL_37;
    case 18:
      buffer->cfNameString = CFSTR("NNVAD: Combined probability mode, when using the directional mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Combined probability mode, when using the directional mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x4000000000000000;
      v7 = 2.0;
      goto LABEL_37;
    case 19:
      v15 = CFSTR("NNVAD: Current azimuth (input), when using the directional mode");
LABEL_32:
      buffer->cfNameString = v15;
      buffer->flags = 0x8000000;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      v13 = 0x43340000C3340000;
      goto LABEL_35;
    case 20:
      v16 = CFSTR("NNVAD: Current elevation (input), when using the directional mode");
LABEL_34:
      buffer->cfNameString = v16;
      buffer->flags = 0x8000000;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      v13 = 0x42B40000C2B40000;
LABEL_35:
      *(_QWORD *)&buffer->minValue = v13;
      v17 = buffer->flags | 0xC0000000;
      goto LABEL_41;
    case 21:
      buffer->cfNameString = CFSTR("NNVAD: Spatial SPP upper cutoff in Hz, when using the directional mode");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Spatial SPP upper cutoff in Hz, when using the directional mode"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(_QWORD *)&buffer->minValue = 0x467A000000000000;
      v7 = 3125.0;
LABEL_37:
      v8 = buffer->flags | 0xC0000000;
LABEL_38:
      buffer->defaultValue = v7;
      buffer->flags = v8;
      return result;
    case 22:
      buffer->cfNameString = CFSTR("NNVAD: Send VAD output mask, selected by output mask mode, through audio output.");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("NNVAD: Send VAD output mask, selected by output mask mode, through audio output."), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      flags = buffer->flags;
      v11 = 1090519040;
LABEL_40:
      v17 = flags | v11;
LABEL_41:
      buffer->defaultValue = 0.0;
      buffer->flags = v17;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUNeuralNetVAD::SaveState(AUNeuralNetVAD *this, ausdk **a2)
{
  __CFDictionary *v3;
  CFNumberRef v4;
  int valuePtr;

  ausdk::AUBase::SaveState(this, a2);
  if (a2)
  {
    v3 = *a2;
    if (v3)
    {
      valuePtr = 67073;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v3, CFSTR("auversion"), v4);
      CFRelease(v4);
    }
  }
  return 0;
}

UInt8 *AUNeuralNetVAD::SaveExtendedScopes(AUNeuralNetVAD *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUNeuralNetVAD::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v4;
  const __CFNumber *Value;
  int valuePtr;

  v4 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v4)
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("auversion"));
    if (Value && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr) && valuePtr == 67073)
      AUNeuralNetVAD::UpdateState((AUNeuralNetVAD *)this);
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
  }
  return v4;
}

uint64_t AUNeuralNetVAD::GetParameterValueStrings(AUNeuralNetVAD *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  __int128 *v6;
  CFIndex v7;
  const __CFArray *v8;
  __int128 v9;
  __int128 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3 == 18)
  {
    v6 = &xmmword_1E69CF438;
    goto LABEL_10;
  }
  if (a3 == 15)
  {
    v9 = xmmword_1E69CF410;
    v10 = *(_OWORD *)&off_1E69CF420;
    v11 = CFSTR("Uniform");
    v7 = 5;
    goto LABEL_12;
  }
  if (a3 != 11)
    return 0;
  v6 = &xmmword_1E69CF3F8;
LABEL_10:
  v9 = *v6;
  *(_QWORD *)&v10 = *((_QWORD *)v6 + 2);
  v7 = 3;
LABEL_12:
  v8 = CFArrayCreate(0, (const void **)&v9, v7, 0);
  result = 0;
  *a4 = v8;
  return result;
}

double AUNeuralNetVAD::GetLatency(AUNeuralNetVAD *this)
{
  return 0.0;
}

double AUNeuralNetVAD::GetTailTime(AUNeuralNetVAD *this)
{
  return 0.05;
}

uint64_t AUNeuralNetVAD::SupportsTail(AUNeuralNetVAD *this)
{
  return 1;
}

BOOL AUNeuralNetVAD::StreamFormatWritable(AUNeuralNetVAD *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUNeuralNetVAD::SupportedNumChannels(AUNeuralNetVAD *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNeuralNetVAD::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUNeuralNetVAD::ValidFormat(AUNeuralNetVAD *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 2)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUNeuralNetVAD::ChangeStreamFormat(AUNeuralNetVAD *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Element;
  NSObject *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v6 = a3;
  v7 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  v9 = 0;
  if (v7 == 1 && !v6)
  {
    v10 = *((_QWORD *)this + 15);
    if (v10)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 1))
        return 0;
    }
    else
    {
      v11 = *((_QWORD *)this + 12);
      if ((unint64_t)(*((_QWORD *)this + 13) - v11) < 9 || !*(_QWORD *)(v11 + 8))
        return 0;
    }
    Element = ausdk::AUScope::SafeGetElement((AUNeuralNetVAD *)((char *)this + 80), 1u);
    v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(_QWORD *)Element + 56))(Element, a5);
    if (AUNeuralNetVADLogScope(void)::once != -1)
      dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_5723);
    if (AUNeuralNetVADLogScope(void)::scope)
    {
      v13 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
      if (!*(_QWORD *)AUNeuralNetVADLogScope(void)::scope)
        return v9;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15 = 136315394;
      v16 = "AUNeuralNetVAD.cpp";
      v17 = 1024;
      v18 = 1127;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.\n", (uint8_t *)&v15, 0x12u);
    }
  }
  return v9;
}

uint64_t AUNeuralNetVAD::GetScopeExtended(AUNeuralNetVAD *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 552;
  else
    return 0;
}

BOOL AUNeuralNetVAD::ValidDFTBlockSize(AUNeuralNetVAD *this, char a2)
{
  return (a2 & 0xF) == 0;
}

os_log_t ___ZL22AUNeuralNetVADLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "nnvad");
  *v0 = result;
  AUNeuralNetVADLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void AUNeuralNetVAD::UpdateState(AUNeuralNetVAD *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;
  uint64_t v11;
  ausdk::AUElement *v12;
  ausdk::AUElement **v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  float Parameter;
  uint64_t v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  ausdk::AUElement *v44;
  ausdk::AUElement **v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  uint64_t v49;
  ausdk::AUElement *v50;
  ausdk::AUElement **v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  ausdk::AUElement *v56;
  ausdk::AUElement **v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  ausdk::AUElement **v60;
  uint64_t v61;
  ausdk::AUElement *v62;
  ausdk::AUElement **v63;
  DirectionalVAD *v64;
  uint64_t v65;
  uint64_t v66;
  ausdk::AUElement *v67;
  ausdk::AUElement **v68;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v3, 3u);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
  }
  else
  {
    v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v7)
      v6 = 0;
    else
      v6 = *v7;
  }
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v6, 4u);
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v9, 5u);
  v11 = *((_QWORD *)this + 9);
  if (v11)
  {
    v12 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
  }
  else
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v13)
      v12 = 0;
    else
      v12 = *v13;
  }
  *((float *)this + 167) = ausdk::AUElement::GetParameter(v12, 6u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  Parameter = ausdk::AUElement::GetParameter(v15, 7u);
  *((float *)this + 168) = Parameter;
  if (*((_BYTE *)this + 600))
  {
    v18 = *((_QWORD *)this + 81);
    if (v18)
      *(float *)(v18 + 8) = Parameter;
  }
  v19 = *((_QWORD *)this + 9);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  v22 = ausdk::AUElement::GetParameter(v20, 8u);
  *((_DWORD *)this + 169) = v22;
  if (*((_BYTE *)this + 600))
  {
    v23 = *((_QWORD *)this + 81);
    if (v23)
      *(_DWORD *)(v23 + 20) = v22;
  }
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  v27 = ausdk::AUElement::GetParameter(v25, 9u);
  *((float *)this + 170) = v27;
  if (*((_BYTE *)this + 600))
  {
    v28 = *((_QWORD *)this + 81);
    if (v28)
      *(float *)(v28 + 12) = v27;
  }
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  v32 = ausdk::AUElement::GetParameter(v30, 0xAu);
  *((float *)this + 171) = v32;
  if (*((_BYTE *)this + 600))
  {
    v33 = *((_QWORD *)this + 81);
    if (v33)
      *(float *)(v33 + 16) = v32;
  }
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  *((_DWORD *)this + 172) = (int)ausdk::AUElement::GetParameter(v35, 0xBu);
  v37 = *((_QWORD *)this + 9);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  *((_BYTE *)this + 692) = ausdk::AUElement::GetParameter(v38, 0xCu) != 0.0;
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  *((_DWORD *)this + 176) = (int)ausdk::AUElement::GetParameter(v41, 0xFu);
  v43 = *((_QWORD *)this + 9);
  if (v43)
  {
    v44 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 0);
  }
  else
  {
    v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v45)
      v44 = 0;
    else
      v44 = *v45;
  }
  *((float *)this + 174) = ausdk::AUElement::GetParameter(v44, 0xDu);
  v46 = *((_QWORD *)this + 9);
  if (v46)
  {
    v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
  }
  else
  {
    v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v48)
      v47 = 0;
    else
      v47 = *v48;
  }
  *((float *)this + 175) = ausdk::AUElement::GetParameter(v47, 0xEu);
  v49 = *((_QWORD *)this + 9);
  if (v49)
  {
    v50 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0);
  }
  else
  {
    v51 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v51)
      v50 = 0;
    else
      v50 = *v51;
  }
  *((float *)this + 177) = ausdk::AUElement::GetParameter(v50, 0x10u);
  v52 = *((_QWORD *)this + 9);
  if (v52)
  {
    v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
  }
  else
  {
    v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v54)
      v53 = 0;
    else
      v53 = *v54;
  }
  *((float *)this + 178) = ausdk::AUElement::GetParameter(v53, 0x11u);
  v55 = *((_QWORD *)this + 9);
  if (v55)
  {
    v56 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 0);
  }
  else
  {
    v57 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v57)
      v56 = 0;
    else
      v56 = *v57;
  }
  *((_DWORD *)this + 179) = (int)ausdk::AUElement::GetParameter(v56, 0x12u);
  v58 = *((_QWORD *)this + 9);
  if (v58)
  {
    v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 0);
  }
  else
  {
    v60 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v60)
      v59 = 0;
    else
      v59 = *v60;
  }
  *((float *)this + 180) = ausdk::AUElement::GetParameter(v59, 0x13u);
  v61 = *((_QWORD *)this + 9);
  if (v61)
  {
    v62 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 0);
  }
  else
  {
    v63 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v63)
      v62 = 0;
    else
      v62 = *v63;
  }
  *((float *)this + 181) = ausdk::AUElement::GetParameter(v62, 0x14u);
  v64 = (DirectionalVAD *)*((_QWORD *)this + 95);
  if (v64)
  {
    DirectionalVAD::setTargetDirection(v64, *((float *)this + 174), *((float *)this + 175));
    DirectionalVAD::setShapeParameter(*((DirectionalVAD **)this + 95), *((float *)this + 177));
    DirectionalVAD::setConditionalTargetPrior(*((DirectionalVAD **)this + 95), *((float *)this + 178));
    v65 = *((_QWORD *)this + 95);
    *(_DWORD *)(v65 + 64) = *((_DWORD *)this + 179);
    DirectionalVAD::setCurrentDirection((float **)v65, *((float *)this + 180), *((float *)this + 181));
  }
  v66 = *((_QWORD *)this + 9);
  if (v66)
  {
    v67 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 0);
  }
  else
  {
    v68 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v68)
      v67 = 0;
    else
      v67 = *v68;
  }
  *((_BYTE *)this + 732) = ausdk::AUElement::GetParameter(v67, 0x16u) != 0.0;
}

uint64_t *std::unique_ptr<NeuralNetVAD>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      sparse_matrix_destroy(v3);
      *(_QWORD *)(v2 + 72) = 0;
    }
    v4 = *(void **)(v2 + 192);
    if (v4)
    {
      *(_QWORD *)(v2 + 200) = v4;
      operator delete(v4);
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 176), 0);
    v5 = *(void **)(v2 + 128);
    if (v5)
    {
      *(_QWORD *)(v2 + 136) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 104);
    if (v6)
    {
      *(_QWORD *)(v2 + 112) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(_QWORD *)(v2 + 88) = v7;
      operator delete(v7);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

_QWORD *std::unique_ptr<DirectionalVAD>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (void *)v2[29];
    if (v3)
    {
      v2[30] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[26];
    if (v4)
    {
      v2[27] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[23];
    if (v5)
    {
      v2[24] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[20];
    if (v6)
    {
      v2[21] = v6;
      operator delete(v6);
    }
    v7 = (void *)v2[17];
    if (v7)
    {
      v2[18] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[12];
    if (v8)
    {
      v2[13] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[9];
    if (v9)
    {
      v2[10] = v9;
      operator delete(v9);
    }
    v10 = v2[6];
    v2[6] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    v11 = v2[5];
    v2[5] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v12 = v2[4];
    v2[4] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t VoiceProcessorV2::ReadBuffer(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v6;
  unint64_t v7;
  void **v8;
  unint64_t v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  void **v13;
  unint64_t v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;
  void **v18;
  unint64_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  int v25;

  if (!*(_BYTE *)(a1 + 16177))
    return 1937006964;
  result = 1651532146;
  switch(a2)
  {
    case 0:
      v6 = *(_DWORD **)(a1 + 1048);
      if (!*v6 || !*a3)
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_37:
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_38:
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_39:
        _os_assert_log();
        _os_crash();
        __break(1u);
        JUMPOUT(0x1B62B029CLL);
      }
      v7 = 0;
      v8 = (void **)(a3 + 4);
      do
      {
        v9 = *v6;
        if (v7 >= v9)
          v10 = v9 - 1;
        else
          v10 = v7;
        memcpy(*v8, *(const void **)&v6[4 * v10 + 4], *((unsigned int *)v8 - 1));
        ++v7;
        v8 += 2;
      }
      while (v7 < *a3);
      break;
    case 1:
      v11 = *(_DWORD **)(a1 + 1040);
      if (!*v11 || !*a3)
        goto LABEL_37;
      v12 = 0;
      v13 = (void **)(a3 + 4);
      do
      {
        v14 = *v11;
        if (v12 >= v14)
          v15 = v14 - 1;
        else
          v15 = v12;
        memcpy(*v13, *(const void **)&v11[4 * v15 + 4], *((unsigned int *)v13 - 1));
        ++v12;
        v13 += 2;
      }
      while (v12 < *a3);
      break;
    case 2:
      v16 = *(_DWORD **)(a1 + 1424);
      if (!*v16 || !*a3)
        goto LABEL_38;
      v17 = 0;
      v18 = (void **)(a3 + 4);
      do
      {
        v19 = *v16;
        if (v17 >= v19)
          v20 = v19 - 1;
        else
          v20 = v17;
        memcpy(*v18, *(const void **)&v16[4 * v20 + 4], *((unsigned int *)v18 - 1));
        ++v17;
        v18 += 2;
      }
      while (v17 < *a3);
      break;
    case 6:
      v21 = *(_DWORD **)(a1 + 1088);
      if (!*v21 || !*a3)
        goto LABEL_39;
      v22 = 0;
      v23 = (void **)(a3 + 4);
      do
      {
        v24 = *v21;
        if (v22 >= v24)
          v25 = v24 - 1;
        else
          v25 = v22;
        memcpy(*v23, *(const void **)&v21[4 * v25 + 4], *((unsigned int *)v23 - 1));
        ++v22;
        v23 += 2;
      }
      while (v22 < *a3);
      break;
    default:
      return result;
  }
  return 0;
}

uint64_t VoiceProcessorV2::WriteBuffer(uint64_t a1, int a2, _DWORD *a3)
{
  _DWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  int v9;
  uint64_t result;
  _DWORD *v11;
  unint64_t v12;
  void **v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  _DWORD *exception;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16177))
    return 1937006964;
  switch(a2)
  {
    case 5:
      v16 = *(unsigned int *)(a1 + 1444);
      if ((v16 - 65) <= 0xFFFFFFBF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v45 = "vpProcessUplink_v2.cpp";
          v46 = 1024;
          v47 = 90;
          _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69EE218;
        exception[2] = -50;
      }
      MEMORY[0x1E0C80A78](a1);
      v18 = &buf[-v17];
      bzero(&buf[-v17], v19);
      v20 = *a3;
      if (!(_DWORD)v20)
      {
LABEL_52:
        _os_assert_log();
        _os_crash();
        __break(1u);
      }
      v21 = 0;
      v22 = v18 + 8;
      do
      {
        if (v21 >= v20)
          v23 = v20 - 1;
        else
          v23 = v21;
        *v22++ = *(_OWORD *)&a3[4 * v23 + 2];
        ++v21;
      }
      while (v16 != v21);
      v24 = *(_DWORD *)(a1 + 508);
      v25 = *(_DWORD *)(a1 + 1440);
      v26 = *(_DWORD *)(a1 + 1448);
      if (v24)
        v27 = v25 == v26;
      else
        v27 = 1;
      if (v27)
        return 0;
      v28 = 0;
      v29 = v25 - v26;
      if (v29 >= v24)
        v30 = *(_DWORD *)(a1 + 508);
      else
        v30 = v29;
      v31 = v25 - *(_DWORD *)(a1 + 1456);
      if (v31 >= v30)
        v32 = v30;
      else
        v32 = v31;
      v33 = (const void **)(v18 + 16);
      do
      {
        v34 = *v33;
        v33 += 2;
        memcpy((void *)(*(_QWORD *)(a1 + 1464) + 4* (*(_DWORD *)(a1 + 1456) + *(_DWORD *)(a1 + 1440) * v28++)), v34, 4 * v32);
        v35 = *(unsigned int *)(a1 + 1444);
      }
      while (v28 < v35);
      if (v30 > v31 && (_DWORD)v35)
      {
        v36 = 0;
        v37 = (uint64_t *)(v18 + 16);
        do
        {
          v38 = *v37;
          v37 += 2;
          memcpy((void *)(*(_QWORD *)(a1 + 1464) + 4 * (*(_DWORD *)(a1 + 1440) * v36++)), (const void *)(v38 + 4 * v32), 4 * (v30 - v32));
        }
        while (v36 < *(unsigned int *)(a1 + 1444));
      }
      *(_DWORD *)(a1 + 1448) += v30;
      v39 = *(_DWORD *)(a1 + 1456) + v30;
      *(_DWORD *)(a1 + 1456) = v39;
      v40 = *(_DWORD *)(a1 + 1440);
      v41 = v39 >= v40;
      v42 = v39 - v40;
      if (!v41)
        return 0;
      result = 0;
      *(_DWORD *)(a1 + 1456) = v42;
      break;
    case 4:
      if (*a3)
      {
        v11 = *(_DWORD **)(a1 + 1072);
        if (*v11)
        {
          v12 = 0;
          v13 = (void **)(v11 + 4);
          do
          {
            v14 = *a3;
            if (v12 >= v14)
              v15 = v14 - 1;
            else
              v15 = v12;
            memcpy(*v13, *(const void **)&a3[4 * v15 + 4], *((unsigned int *)v13 - 1));
            ++v12;
            v13 += 2;
          }
          while (v12 < *v11);
          return 0;
        }
      }
      goto LABEL_51;
    case 3:
      if (*a3)
      {
        v5 = *(_DWORD **)(a1 + 1080);
        if (*v5)
        {
          v6 = 0;
          v7 = (void **)(v5 + 4);
          do
          {
            v8 = *a3;
            if (v6 >= v8)
              v9 = v8 - 1;
            else
              v9 = v6;
            memcpy(*v7, *(const void **)&a3[4 * v9 + 4], *((unsigned int *)v7 - 1));
            ++v6;
            v7 += 2;
          }
          while (v6 < *v5);
          return 0;
        }
      }
      _os_assert_log();
      _os_crash();
      __break(1u);
LABEL_51:
      _os_assert_log();
      _os_crash();
      __break(1u);
      goto LABEL_52;
    default:
      return 1651532146;
  }
  return result;
}

uint64_t VoiceProcessorV2::RunUplinkHardwareDSP(VoiceProcessorV2 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  int v13;
  int v14;
  const AudioBufferList *v15;
  VoiceProcessorV2 *v16;
  unsigned int *v17;
  AudioBufferList *v18;
  UInt32 mDataByteSize;
  unsigned int v20;
  unsigned int v21;
  const AudioTimeStamp *v22;
  AudioBufferList *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  const AudioBufferList *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  _OWORD *v35;
  const AudioBufferList *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  double mSampleTime;
  double v41;
  double v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  Float64 v46;
  UInt64 mHostTime;
  Float64 mRateScalar;
  AudioTimeStampFlags mFlags;
  int *v50;
  float v51;
  unsigned int v52;
  const AudioBufferList *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE buf[40];
  UInt64 v61;
  __int16 v62;
  Float64 v63;
  __int16 v64;
  AudioTimeStampFlags v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 12872;
  v7 = (unsigned int *)((char *)this + 2484);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (*((_DWORD *)this + 620))
  {
    v9 = flt_1B662D228[*((_BYTE *)this + 476) == 0];
    if (*((_BYTE *)this + 476))
      VoiceProcessorV2::LogIOError((uint64_t)this, v9, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: tryer acquire failed");
    else
      VoiceProcessorV2::LogIOError((uint64_t)this, v9, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: not ok to process?!");
LABEL_7:
    CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3112);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
    v10 = 1937006964;
    if (*((_DWORD *)this + 3112) == 1)
      VoiceProcessorV2::LogNonTransientErrors(this, 1);
    goto LABEL_96;
  }
  if (!*((_BYTE *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.005, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: not ok to process?!");
    goto LABEL_7;
  }
  if (*((_BYTE *)this + 15897))
  {
    if (*((_QWORD *)this + 1571))
    {
      v11 = (double)mach_absolute_time() * 0.0000000416666667;
      *((double *)this + 1984) = v11;
      if (*((double *)this + 1985) == 0.0)
        *((double *)this + 1985) = v11;
    }
  }
  *((_DWORD *)this + 578) = *((_DWORD *)this + 576);
  v12 = atomic_load((unsigned int *)this + 577);
  *((_DWORD *)this + 576) = v12;
  *((_DWORD *)this + 581) = *((_DWORD *)this + 579);
  v13 = atomic_load((unsigned int *)this + 580);
  *((_DWORD *)this + 579) = v13;
  if (v6[3025])
  {
    if (v13 != *((_DWORD *)this + 581))
      VoiceProcessorV2::PListWriteSetDeviceOrientationParameters(this, v13);
    v14 = *((_DWORD *)this + 576);
    if (v14 != *((_DWORD *)this + 578) && v6[3025])
      VoiceProcessorV2::PListWriteSetUIOrientationParameters(this, v14);
  }
  CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
  ++*((_DWORD *)this + 3112);
  CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
  if (*((_DWORD *)this + 3112) == 1)
    VoiceProcessorV2::LogNonTransientErrors(this, 1);
  if (!v6[3025])
  {
    v17 = (unsigned int *)((char *)this + 648);
    v18 = a2;
    goto LABEL_27;
  }
  *v6 = 1;
  v16 = (VoiceProcessorV2 *)*((_QWORD *)this + 1893);
  if (v16)
  {
    v17 = (unsigned int *)((char *)this + 648);
    VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(v16, a2, v15);
    v18 = (AudioBufferList *)*((_QWORD *)this + 1893);
LABEL_27:
    mDataByteSize = v18->mBuffers[0].mDataByteSize;
    v20 = *v17;
    goto LABEL_29;
  }
  mDataByteSize = a2->mBuffers[0].mDataByteSize;
  v20 = *((_DWORD *)this + 162);
LABEL_29:
  v21 = mDataByteSize / v20;
  v59 = 0;
  v10 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 0, mDataByteSize / v20, *((_DWORD *)this + 124), a2, &v59);
  if ((_DWORD)v10)
    goto LABEL_96;
  if (v6[3025])
  {
    v23 = (AudioBufferList *)*((_QWORD *)this + 1893);
    v24 = v59;
    if (v23)
    {
      v25 = v59;
      if (!v59)
        v25 = *((_DWORD *)this + 124);
      VoiceProcessorV2::InjectionFilesReadSignal(this, 4, v25, v23);
      v26 = v24;
      if (!(_DWORD)v24)
        v26 = *((unsigned int *)this + 124);
      v27 = (const AudioBufferList *)*((_QWORD *)this + 1893);
      if (v6[3025] || v6[3026])
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v26, v27, a3);
        v27 = (const AudioBufferList *)*((_QWORD *)this + 1893);
      }
      v28 = v24;
      if (!(_DWORD)v24)
        v28 = *((unsigned int *)this + 124);
      v29 = *((_QWORD *)this + 1994);
      if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      {
        v57 = *((_QWORD *)this + 1994);
        v55 = v28;
        v54 = v27;
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5835);
        v29 = v57;
        v27 = v54;
        v28 = v55;
      }
      if (AudioIssueDetectorLibraryLoader(void)::libSym)
        goto LABEL_55;
    }
  }
  else
  {
    v24 = v59;
    v30 = v59;
    if (!v59)
      v30 = *((unsigned int *)this + 124);
    if (v6[3026])
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 1u, v30, a2, a3);
    v28 = v24;
    if (!(_DWORD)v24)
      v28 = *((unsigned int *)this + 124);
    v29 = *((_QWORD *)this + 1994);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    {
      v58 = *((_QWORD *)this + 1994);
      v56 = v28;
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5835);
      v29 = v58;
      v28 = v56;
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      v27 = a2;
LABEL_55:
      AudioIssueDetectorLibraryLoader(void)::libSym(v29, 1, 0, v27, v28, a3);
      LODWORD(v24) = v59;
    }
  }
  if ((_DWORD)v24)
  {
    v31 = (_DWORD *)*((_QWORD *)this + 129);
    if (*v31)
    {
      v32 = 0;
      v33 = 4 * v24;
      v34 = 4;
      do
      {
        bzero(*(void **)&v31[v34], v33);
        ++v32;
        v31 = (_DWORD *)*((_QWORD *)this + 129);
        v34 += 4;
      }
      while (v32 < *v31);
    }
    goto LABEL_66;
  }
  v35 = (_OWORD *)((char *)this + 624);
  if (!v6[3025])
  {
    v39 = *((_OWORD *)this + 40);
    *(_OWORD *)buf = *v35;
    *(_OWORD *)&buf[16] = v39;
    *(_QWORD *)&buf[32] = *((_QWORD *)this + 82);
    v38 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), a2, v21, *((AudioBufferList **)this + 129), 1);
LABEL_65:
    v10 = v38;
    if ((_DWORD)v38)
      goto LABEL_96;
    goto LABEL_66;
  }
  v36 = (const AudioBufferList *)*((_QWORD *)this + 1893);
  if (v36)
  {
    v37 = *((_OWORD *)this + 40);
    *(_OWORD *)buf = *v35;
    *(_OWORD *)&buf[16] = v37;
    *(_QWORD *)&buf[32] = *((_QWORD *)this + 82);
    v38 = VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 105), v36, v21, *((AudioBufferList **)this + 129), 1);
    goto LABEL_65;
  }
LABEL_66:
  if (!*((_BYTE *)this + 1689))
  {
    *((_BYTE *)this + 1689) = 1;
    mSampleTime = a3->mSampleTime;
    *((_QWORD *)this + 215) = *(_QWORD *)&a3->mSampleTime;
    *((double *)this + 213) = mSampleTime;
    if (v6[3025] || v6[3026])
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, mSampleTime, 1);
    *((_OWORD *)this + 111) = 0u;
    *((_OWORD *)this + 110) = 0u;
    *((_OWORD *)this + 109) = 0u;
    *((_OWORD *)this + 108) = 0u;
    *((_DWORD *)this + 478) = 0;
  }
  v41 = *((double *)this + 213);
  v42 = a3->mSampleTime;
  if (v41 == a3->mSampleTime)
  {
    *((_QWORD *)this + 214) = 0;
  }
  else
  {
    if (v6[3025] || v6[3026])
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v41, v42, 1);
      v42 = a3->mSampleTime;
      v41 = *((double *)this + 213);
    }
    *((double *)this + 214) = v42 - v41;
    if (v42 < v41)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v43 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v44 = (*v43 ? *v43 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = *((_QWORD *)this + 213);
          v46 = a3->mSampleTime;
          mHostTime = a3->mHostTime;
          mRateScalar = a3->mRateScalar;
          mFlags = a3->mFlags;
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = "vpProcessUplink_v2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 246;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v45;
          *(_WORD *)&buf[28] = 2048;
          *(Float64 *)&buf[30] = v46;
          *(_WORD *)&buf[38] = 2048;
          v61 = mHostTime;
          v62 = 2048;
          v63 = mRateScalar;
          v64 = 1024;
          v65 = mFlags;
          _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", buf, 0x40u);
        }
      }
      v50 = (int *)*((_QWORD *)this + 1570);
      if (v50 && (v6[3025] || v6[3026]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v50, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 246, "RunUplinkHardwareDSP", "mic sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 213), a3->mSampleTime, a3->mHostTime, a3->mRateScalar, a3->mFlags);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.008, (float)*((unsigned int *)this + 3112), 0.0, 0.0, "mic sample time jumped backwards");
      v42 = a3->mSampleTime;
    }
  }
  LODWORD(v41) = *((_DWORD *)this + 124);
  *((double *)this + 213) = v42 + (double)*(unint64_t *)&v41;
  VoiceProcessorV2::LoadMatchingReferenceForMicSignalAndFillTsMic(this, v22, a3->mSampleTime);
  v51 = *((float *)this + 350);
  *((_BYTE *)this + 1404) = v51 != 0.0;
  if (v51 != 0.0)
    VoiceProcessorV2::PreSRCMicClipDetection(this);
  v10 = 0;
  do
LABEL_96:
    v52 = __ldaxr(v7);
  while (__stlxr(v52 - 1, v7));
  return v10;
}

void sub_1B62B0D84(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::LoadMatchingReferenceForMicSignalAndFillTsMic(VoiceProcessorV2 *this, const AudioTimeStamp *a2, double a3)
{
  char *v4;
  _DWORD *v5;
  unint64_t v6;
  void **v7;
  double v8;
  int v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  signed int v24;
  double v25;
  double v26;
  int v27;
  _QWORD *v29;
  NSObject *v30;
  int *v31;
  double v32;
  int v33;
  _QWORD *v35;
  NSObject *v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41;
  NSObject *v42;
  int *v43;
  int v44;
  int v45;
  _QWORD *v46;
  NSObject *v47;
  int *v48;
  _DWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  _BYTE v59[44];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 12460;
  if (!*((_BYTE *)this + 12460))
  {
    v8 = a3 - (double)*((int *)this + 296);
    v9 = CADeprecated::AudioRingBuffer::Fetch(*((const void ****)this + 150), *((AudioBufferList **)this + 130), *((_DWORD *)this + 123), (uint64_t)v8);
    if (!v9)
    {
      v4[2673] = 0;
      if (*v4)
        goto LABEL_2;
      goto LABEL_104;
    }
    v10 = v9;
    v11 = (_DWORD *)*((_QWORD *)this + 130);
    if (*v11)
    {
      v12 = 0;
      v13 = (void **)(v11 + 4);
      do
      {
        bzero(*v13, *((unsigned int *)v13 - 1));
        ++v12;
        v13 += 2;
      }
      while (v12 < *v11);
    }
    v14 = *((_QWORD *)this + 150);
    v15 = *(_DWORD *)(v14 + 904);
    v16 = v14 + 24 * (v15 & 0x1F);
    v17 = (uint64_t *)(v16 + 136);
    v18 = (uint64_t *)(v16 + 144);
    v19 = (_DWORD *)(v16 + 152);
    v20 = 7;
    do
    {
      v21 = *v17;
      v22 = *v18;
    }
    while (*v19 != v15 && v20-- != 0);
    v24 = *((_DWORD *)this + 123);
    v25 = v8 + (double)v24 + -1.0;
    if (v10 == -1)
    {
      v32 = v25 - (double)v21 + 1.0;
      v33 = (int)v32;
      if ((int)v32 >= 1 && v24 > v33)
      {
        v44 = CADeprecated::AudioRingBuffer::Fetch((const void ***)v14, *((AudioBufferList **)this + 151), (int)v32, *v17);
        if (v44)
        {
          v45 = v44;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v46 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            v47 = (*v46 ? *v46 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316930;
              v53 = "vpProcessUplink_v2.cpp";
              v54 = 1024;
              v55 = 579;
              v56 = 1024;
              v57 = v33;
              v58 = 1024;
              *(_DWORD *)v59 = v45;
              *(_WORD *)&v59[4] = 2048;
              *(_QWORD *)&v59[6] = v21;
              *(_WORD *)&v59[14] = 2048;
              *(_QWORD *)&v59[16] = v22;
              *(_WORD *)&v59[24] = 2048;
              *(double *)&v59[26] = v8;
              *(_WORD *)&v59[34] = 2048;
              *(double *)&v59[36] = v25;
              _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: tsref ring buffer: <slightly behind> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x46u);
            }
          }
          v48 = (int *)*((_QWORD *)this + 1570);
          if (v48 && (v4[3437] || v4[3438]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v48, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 579, "LoadMatchingReferenceForMicSignalAndFillTsMic", "warning: tsref ring buffer: <slightly behind> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v33, v45, v21, v22, v8, v25);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3112), (float)v45, (float)v33, "warning: tsref ring buffer: <slightly behind> couldn't read required");
        }
        v49 = (_DWORD *)*((_QWORD *)this + 130);
        if (*v49)
        {
          v50 = 0;
          v51 = 4;
          do
          {
            memcpy((void *)(*(_QWORD *)&v49[v51] + 4 * (*((_DWORD *)this + 123) - v33)), *(const void **)(*((_QWORD *)this + 151) + v51 * 4), 4 * v33);
            ++v50;
            v49 = (_DWORD *)*((_QWORD *)this + 130);
            v51 += 4;
          }
          while (v50 < *v49);
        }
        goto LABEL_100;
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v35 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316674;
          v53 = "vpProcessUplink_v2.cpp";
          v54 = 1024;
          v55 = 590;
          v56 = 1024;
          v57 = v33;
          v58 = 2048;
          *(_QWORD *)v59 = v21;
          *(_WORD *)&v59[8] = 2048;
          *(_QWORD *)&v59[10] = v22;
          *(_WORD *)&v59[18] = 2048;
          *(double *)&v59[20] = v8;
          *(_WORD *)&v59[28] = 2048;
          *(double *)&v59[30] = v25;
          _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> tsref ring buffer: <slightly behind> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x40u);
        }
      }
      v37 = (int *)*((_QWORD *)this + 1570);
      if (v37 && (v4[3437] || v4[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v37, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 590, "LoadMatchingReferenceForMicSignalAndFillTsMic", "tsref ring buffer: <slightly behind> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v33, v21, v22, v8, v25);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3112), (float)v33, (float)v21, "tsref ring buffer: <slightly behind> the calculated samples in range issue");
    }
    else if (v10 == 1)
    {
      v26 = (double)(v22 - 1) - v8 + 1.0;
      v27 = (int)v26;
      if ((int)v26 >= 1 && v24 > v27)
      {
        v39 = CADeprecated::AudioRingBuffer::Fetch((const void ***)v14, *((AudioBufferList **)this + 130), (int)v26, (uint64_t)v8);
        if (v39)
        {
          v40 = v39;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v41 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            v42 = (*v41 ? *v41 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316930;
              v53 = "vpProcessUplink_v2.cpp";
              v54 = 1024;
              v55 = 558;
              v56 = 1024;
              v57 = v27;
              v58 = 1024;
              *(_DWORD *)v59 = v40;
              *(_WORD *)&v59[4] = 2048;
              *(_QWORD *)&v59[6] = v21;
              *(_WORD *)&v59[14] = 2048;
              *(_QWORD *)&v59[16] = v22;
              *(_WORD *)&v59[24] = 2048;
              *(double *)&v59[26] = v8;
              *(_WORD *)&v59[34] = 2048;
              *(double *)&v59[36] = v25;
              _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: tsref ring buffer: <slightly ahead> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x46u);
            }
          }
          v43 = (int *)*((_QWORD *)this + 1570);
          if (v43 && (v4[3437] || v4[3438]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v43, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 558, "LoadMatchingReferenceForMicSignalAndFillTsMic", "warning: tsref ring buffer: <slightly ahead> couldn't read required %d samples, err %d, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v27, v40, v21, v22, v8, v25);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3112), (float)v40, (float)v27, "warning: tsref ring buffer: <slightly ahead> couldn't read required samples");
        }
LABEL_100:
        v38 = 0;
        v4[2673] = 0;
        goto LABEL_101;
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v29 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v30 = (*v29 ? *v29 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316674;
          v53 = "vpProcessUplink_v2.cpp";
          v54 = 1024;
          v55 = 566;
          v56 = 1024;
          v57 = v27;
          v58 = 2048;
          *(_QWORD *)v59 = v21;
          *(_WORD *)&v59[8] = 2048;
          *(_QWORD *)&v59[10] = v22;
          *(_WORD *)&v59[18] = 2048;
          *(double *)&v59[20] = v8;
          *(_WORD *)&v59[28] = 2048;
          *(double *)&v59[30] = v25;
          _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> tsref ring buffer: <slightly ahead> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", buf, 0x40u);
        }
      }
      v31 = (int *)*((_QWORD *)this + 1570);
      if (v31 && (v4[3437] || v4[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v31, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 566, "LoadMatchingReferenceForMicSignalAndFillTsMic", "tsref ring buffer: <slightly ahead> the calculated samples in range is %d?!, buf time bounds [%ld, %ld], required sample bounds [%.2lf, %.2lf]", v27, v21, v22, v8, v25);
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.01, (float)*((unsigned int *)this + 3112), (float)v27, (float)v21, "warning: tsref ring buffer: <slightly ahead> the calculated samples range issue");
    }
    v38 = 1;
LABEL_101:
    if (*v4 || v38 && !v4[2673])
      goto LABEL_2;
LABEL_104:
    CopyAllBuffersABL(*((UInt32 **)this + 131), *((const AudioBufferList **)this + 129));
    return;
  }
LABEL_2:
  v5 = (_DWORD *)*((_QWORD *)this + 131);
  if (*v5)
  {
    v6 = 0;
    v7 = (void **)(v5 + 4);
    do
    {
      bzero(*v7, *((unsigned int *)v7 - 1));
      ++v6;
      v7 += 2;
    }
    while (v6 < *v5);
  }
}

void VoiceProcessorV2::PreSRCMicClipDetection(VoiceProcessorV2 *this)
{
  _DWORD *v1;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  float __C;

  v1 = (_DWORD *)*((_QWORD *)this + 131);
  if (*v1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      __C = 0.0;
      vDSP_maxmgv(*(const float **)&v1[v3 + 4], 1, &__C, *((unsigned int *)this + 124));
      v5 = __C <= 0.999;
      *(_BYTE *)(*((_QWORD *)this + 176) + v4) = __C > 0.999;
      v6 = *(void **)(*((_QWORD *)this + 178) + v3 * 4 + 16);
      v7 = *((_QWORD *)this + 131) + v3 * 4;
      if (v5)
      {
        bzero(v6, *(unsigned int *)(v7 + 12));
      }
      else
      {
        memcpy(v6, *(const void **)(v7 + 16), *(unsigned int *)(v7 + 12));
        ++*((_DWORD *)this + 370);
      }
      ++v4;
      v1 = (_DWORD *)*((_QWORD *)this + 131);
      v3 += 4;
    }
    while (v4 < *v1);
  }
}

uint64_t VoiceProcessorV2::RunUplinkDynamicsDSP(VoiceProcessorV2 *this, AudioBufferList *ioData, AudioTimeStamp *a3, uint64_t a4)
{
  _WORD *v6;
  OpaqueAudioComponentInstance *v7;
  AudioBufferList ioActionFlags;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = (_WORD *)((char *)this + 15897);
  if ((*((_BYTE *)this + 4664) & 0x10) != 0 && (*((_BYTE *)this + 4680) & 0x10) != 0)
  {
    v7 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 415);
    if (v7)
    {
      ioActionFlags.mNumberBuffers = 512;
      AudioUnitProcess(v7, &ioActionFlags.mNumberBuffers, a3, a4, ioData);
      if (*v6)
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x30u, a4, ioData, a3);
    }
  }
  if (*(_BYTE *)v6)
  {
    *(_QWORD *)&ioActionFlags.mNumberBuffers = 1;
    *(_QWORD *)&ioActionFlags.mBuffers[0].mNumberChannels = 0x800000001;
    ioActionFlags.mBuffers[0].mData = v12;
    v12[0] = 0;
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x5Au, 2, &ioActionFlags, a3);
  }
  return 0;
}

uint64_t VoiceProcessorV2::Process(VoiceProcessorV2 *this, const AudioBufferList *a2, AudioTimeStamp *a3, AudioBufferList *a4, AudioTimeStamp *a5, unsigned int *a6, void *a7, unsigned int *a8, AudioStreamPacketDescription *a9)
{
  unint64_t v9;
  AudioTimeStamp *v10;
  unsigned int *v12;
  unsigned int v13;
  AudioTimeStamp *v14;
  const AudioTimeStamp *v15;
  const AudioTimeStamp *v16;
  _OWORD *v17;
  double v18;
  char *v19;
  double v20;
  unsigned int v21;
  float v22;
  unsigned int v23;
  uint64_t *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  void **v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  void **v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CA::AudioSampleRateConverter **v62;
  uint64_t v63;
  const AudioBufferList *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  const void **v72;
  const void *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  _QWORD *v80;
  NSObject *v81;
  int *v82;
  double v83;
  double v84;
  char *v85;
  unint64_t v86;
  void **p_mData;
  double v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  Float64 v92;
  uint64_t v93;
  int *v94;
  uint64_t result;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v101;
  unint64_t v102;
  UInt32 v103;
  _DWORD *v104;
  int v105;
  BOOL v106;
  UInt32 v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  void **v112;
  void *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  _QWORD *v121;
  NSObject *v122;
  int *v123;
  uint64_t v124;
  CA::AudioSampleRateConverter **v125;
  unsigned int v126;
  UInt32 v127;
  int v128;
  UInt32 v129;
  UInt32 v130;
  uint64_t v131;
  unint64_t v132;
  const void **v133;
  const void *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  UInt32 v139;
  UInt32 v140;
  UInt32 v141;
  uint64_t v142;
  CA::AudioSampleRateConverter **v143;
  _QWORD *v144;
  NSObject *v145;
  uint64_t v146;
  int v147;
  int *v148;
  const void **v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  UInt32 v155;
  uint64_t v156;
  unint64_t v157;
  size_t v158;
  const void **v159;
  const void *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  UInt32 v165;
  UInt32 v166;
  UInt32 v167;
  _QWORD *v168;
  NSObject *v169;
  int *v170;
  AudioBufferList *v171;
  _QWORD *v172;
  NSObject *v173;
  UInt32 mDataByteSize;
  int v175;
  int *v176;
  uint64_t v177;
  double v178;
  unsigned int v179;
  float v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  int v189;
  uint64_t v190;
  double v191;
  int *v192;
  double v193;
  unsigned int v194;
  double v195;
  int *v196;
  int *v197;
  uint64_t v201;
  char *v204;
  unsigned int v205;
  unsigned int ExpectedNumberOfOutputFrames;
  AudioBufferList buf;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  int v211;
  uint64_t v212;

  v10 = a3;
  v212 = *MEMORY[0x1E0C80C00];
  v12 = (unsigned int *)((char *)this + 2484);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v204 = (char *)this + 15744;
  if (*((_DWORD *)this + 620))
  {
    if (*((_BYTE *)this + 476))
    {
      v14 = a5;
      VoiceProcessorV2::LogIOError((uint64_t)this, 21.006, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: tryer acquire failed");
LABEL_111:
      CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
      ++*((_DWORD *)this + 3112);
      CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
      if (*((_DWORD *)this + 3112) == 1)
        VoiceProcessorV2::LogNonTransientErrors(this, 1);
      LODWORD(v9) = *((_DWORD *)this + 128);
      v83 = *((double *)this + 83);
      if (*((double *)this + 108) <= 0.0)
        v84 = 24000.0;
      else
        v84 = *((double *)this + 108);
      *a6 = a4->mBuffers[0].mDataByteSize >> 2;
      if (*((_DWORD *)this + 20) == 1)
      {
        v85 = v204;
        if (a4->mNumberBuffers)
        {
          v86 = 0;
          p_mData = &a4->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v86;
            p_mData += 2;
          }
          while (v86 < a4->mNumberBuffers);
        }
      }
      else
      {
        *((_DWORD *)this + 319) = 0;
        *((_BYTE *)this + 1272) = 0;
        FadeOutOverOneFrame(*((AudioBufferList **)this + 158), a4);
        v85 = v204;
      }
      v88 = v83 * (double)v9 / v84;
      if (*((_BYTE *)this + 1856))
        *((double *)this + 224) = v88 + *((double *)this + 224);
      v89 = *(_OWORD *)&a3->mSampleTime;
      v90 = *(_OWORD *)&a3->mRateScalar;
      v91 = *(_OWORD *)&a3->mSMPTETime.mHours;
      *(_OWORD *)&v14->mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      *(_OWORD *)&v14->mSMPTETime.mHours = v91;
      *(_OWORD *)&v14->mSampleTime = v89;
      *(_OWORD *)&v14->mRateScalar = v90;
      *(_QWORD *)&v89 = *((_QWORD *)this + 216);
      v92 = v88 + *(double *)&v89;
      *((Float64 *)this + 216) = v92;
      v14->mSampleTime = v92;
      v14->mFlags |= 1u;
      LODWORD(v89) = *((_DWORD *)this + 124);
      *((double *)this + 213) = a3->mSampleTime + (double)(unint64_t)v89;
      if (v85[153] && *((_QWORD *)this + 1571))
      {
        v93 = mach_absolute_time();
        v94 = (int *)*((_QWORD *)this + 1571);
        if (VPTimestampLogScope(void)::once != -1)
          dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
        CALegacyLog::log(v94, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 483, "Process", "Bailed UL %f %f %f", a3->mSampleTime, *((double *)this + 1984), (double)v93 * 0.0000000416666667 - *((double *)this + 1984));
      }
      if (((*((_DWORD *)this + 20) - 2) & 0xFFFFFFFD) != 0)
        result = 1937006964;
      else
        result = 0;
      goto LABEL_132;
    }
LABEL_110:
    v14 = a5;
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.005, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "process: not ok to process?!");
    goto LABEL_111;
  }
  if (!*((_BYTE *)this + 476))
    goto LABEL_110;
  (*(void (**)(VoiceProcessorV2 *, const AudioBufferList *, AudioTimeStamp *, AudioBufferList *, AudioTimeStamp *, unsigned int *, void *))(*(_QWORD *)this + 192))(this, a2, a3, a4, a5, a6, a7);
  VoiceProcessorV2::SrcAndAppendToRingBuffer(this, 1, *((unsigned int *)this + 123), *((AudioBufferList **)this + 130), *((_DWORD **)this + 130), 0, v10, v15);
  VoiceProcessorV2::SrcAndAppendToRingBuffer(this, 0, *((unsigned int *)this + 124), *((AudioBufferList **)this + 131), *((_DWORD **)this + 178), (AudioBufferList *)*((unsigned __int8 *)this + 1404), v10, v16);
  v17 = (_OWORD *)((char *)this + 1792);
  if (!*((_BYTE *)this + 1856))
  {
    *((_OWORD *)this + 114) = 0u;
    *((_OWORD *)this + 115) = 0u;
    *v17 = 0u;
    *((_OWORD *)this + 113) = 0u;
    *((_BYTE *)this + 1856) = 1;
    *((double *)this + 224) = v10->mSampleTime * *((double *)this + 103) / *((double *)this + 78);
    *((_DWORD *)this + 479) = 0;
  }
  *((_QWORD *)this + 225) = v10->mHostTime;
  v18 = *((double *)this + 214);
  v19 = v204;
  if (v18 > 0.0)
  {
    v20 = v18 * *((double *)this + 103) / *((double *)this + 78);
    v21 = vcvtmd_u64_f64(v20);
    v22 = v20 - (double)v21 + *((float *)this + 479);
    if (v22 > 1.0)
    {
      v22 = v22 + -1.0;
      ++v21;
    }
    *((float *)this + 479) = v22;
    *((double *)this + 224) = *((double *)this + 224) + (double)v21;
  }
  v23 = *((_DWORD *)this + 127);
  if (*((_DWORD *)this + 334) >= v23)
  {
    v24 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    do
    {
      if (!*((_DWORD *)this + 1127) && *((_DWORD *)this + 324) < v23)
        break;
      if (v23)
      {
        v25 = (_DWORD *)*((_QWORD *)this + 134);
        if (*v25 == *((_DWORD *)this + 323))
        {
          v26 = *((_DWORD *)this + 324);
          if (v26)
          {
            if (v26 >= v23)
              v27 = v23;
            else
              v27 = *((_DWORD *)this + 324);
            v28 = *((_DWORD *)this + 322) - *((_DWORD *)this + 325);
            if (v28 >= v27)
              v29 = v27;
            else
              v29 = v28;
            if (*v25)
            {
              v30 = 0;
              v31 = (uint64_t *)(v25 + 4);
              v32 = (void **)(v25 + 4);
              do
              {
                v33 = *v32;
                v32 += 2;
                memcpy(v33, (const void *)(*((_QWORD *)this + 164)+ 4 * (*((_DWORD *)this + 325) + *((_DWORD *)this + 322) * v30++)), 4 * v29);
                v34 = *((unsigned int *)this + 323);
              }
              while (v30 < v34);
              v10 = a3;
              if (v27 > v28)
              {
                if ((_DWORD)v34)
                {
                  v35 = 0;
                  do
                  {
                    v36 = *v31;
                    v31 += 2;
                    memcpy((void *)(v36 + 4 * v29), (const void *)(*((_QWORD *)this + 164) + 4 * (*((_DWORD *)this + 322) * v35++)), 4 * (v27 - v29));
                  }
                  while (v35 < *((unsigned int *)this + 323));
                }
              }
            }
            *((_DWORD *)this + 324) -= v27;
            v37 = *((_DWORD *)this + 325) + v27;
            *((_DWORD *)this + 325) = v37;
            v38 = *((_DWORD *)this + 322);
            v39 = v37 >= v38;
            v40 = v37 - v38;
            v17 = (_OWORD *)((char *)this + 1792);
            v24 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
            if (v39)
              *((_DWORD *)this + 325) = v40;
          }
        }
      }
      v41 = *((_DWORD *)this + 127);
      v42 = (_DWORD *)*((_QWORD *)this + 135);
      v43 = *v42;
      if (v41)
        v44 = v43 == *((_DWORD *)this + 333);
      else
        v44 = 0;
      if (v44)
      {
        v45 = *((_DWORD *)this + 334);
        if (v45)
        {
          if (v45 >= v41)
            v46 = *((_DWORD *)this + 127);
          else
            v46 = *((_DWORD *)this + 334);
          v47 = *((_DWORD *)this + 332) - *((_DWORD *)this + 335);
          if (v47 >= v46)
            v48 = v46;
          else
            v48 = v47;
          if (v43)
          {
            v49 = 0;
            v50 = (uint64_t *)(v42 + 4);
            v51 = (void **)(v42 + 4);
            do
            {
              v52 = *v51;
              v51 += 2;
              memcpy(v52, (const void *)(*((_QWORD *)this + 169)+ 4 * (*((_DWORD *)this + 335) + *((_DWORD *)this + 332) * v49++)), 4 * v48);
              v53 = *((unsigned int *)this + 333);
            }
            while (v49 < v53);
            v10 = a3;
            if (v46 > v47)
            {
              if ((_DWORD)v53)
              {
                v54 = 0;
                do
                {
                  v55 = *v50;
                  v50 += 2;
                  memcpy((void *)(v55 + 4 * v48), (const void *)(*((_QWORD *)this + 169) + 4 * (*((_DWORD *)this + 332) * v54++)), 4 * (v46 - v48));
                }
                while (v54 < *((unsigned int *)this + 333));
              }
            }
          }
          *((_DWORD *)this + 334) -= v46;
          v56 = *((_DWORD *)this + 335) + v46;
          *((_DWORD *)this + 335) = v56;
          v57 = *((_DWORD *)this + 332);
          v39 = v56 >= v57;
          v58 = v56 - v57;
          v17 = (_OWORD *)((char *)this + 1792);
          v24 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
          if (v39)
            *((_DWORD *)this + 335) = v58;
        }
      }
      if (!*((_BYTE *)this + 1856))
        std::__throw_bad_optional_access[abi:ne180100]();
      (*(void (**)(VoiceProcessorV2 *, _OWORD *))(*(_QWORD *)this + 200))(this, v17);
      if (!*((_BYTE *)this + 1856))
        std::__throw_bad_optional_access[abi:ne180100]();
      v59 = *((_QWORD *)this + 1996);
      v60 = *((_QWORD *)this + 136);
      v61 = *((unsigned int *)this + 127);
      if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
        dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_48);
      if (v24[4])
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))v24[4])(v59, 42, v60, v61, v17);
      if (!*((_BYTE *)this + 1856))
        std::__throw_bad_optional_access[abi:ne180100]();
      v62 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 249);
      v63 = *((unsigned int *)this + 127);
      if (v62)
      {
        v64 = (const AudioBufferList *)*((_QWORD *)this + 137);
        ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v62);
        VoiceProcessor::SampleRateConverter::Convert(*((CA::AudioSampleRateConverter ***)this + 249), (unsigned int *)this + 127, &ExpectedNumberOfOutputFrames, *((const AudioBufferList **)this + 136), *((const AudioBufferList **)this + 137));
        v63 = ExpectedNumberOfOutputFrames;
      }
      else
      {
        v64 = (const AudioBufferList *)*((_QWORD *)this + 136);
        ExpectedNumberOfOutputFrames = *((_DWORD *)this + 127);
      }
      if (v19[153] || v19[154])
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x2Fu, v63, v64, v10);
      (*(void (**)(VoiceProcessorV2 *, const AudioBufferList *, _OWORD *, uint64_t))(*(_QWORD *)this + 208))(this, v64, v17, v63);
      if (v64->mNumberBuffers == *((_DWORD *)this + 305))
      {
        v65 = 0;
        if ((_DWORD)v63)
        {
          v66 = *((_DWORD *)this + 304);
          v67 = v66 - *((_DWORD *)this + 306);
          if (v67)
          {
            if (v67 >= v63)
              v65 = v63;
            else
              v65 = v66 - *((_DWORD *)this + 306);
            v68 = v66 - *((_DWORD *)this + 308);
            if (v68 >= v65)
              v69 = v65;
            else
              v69 = v68;
            if (v64->mNumberBuffers)
            {
              v70 = 0;
              v71 = &v64->mBuffers[0].mData;
              v72 = (const void **)&v64->mBuffers[0].mData;
              do
              {
                v73 = *v72;
                v72 += 2;
                memcpy((void *)(*((_QWORD *)this + 155)+ 4 * (*((_DWORD *)this + 308) + *((_DWORD *)this + 304) * v70++)), v73, 4 * v69);
                v74 = *((unsigned int *)this + 305);
              }
              while (v70 < v74);
              v10 = a3;
              if (v65 > v68)
              {
                if ((_DWORD)v74)
                {
                  v75 = 0;
                  do
                  {
                    v76 = (char *)*v71;
                    v71 += 2;
                    memcpy((void *)(*((_QWORD *)this + 155) + 4 * (*((_DWORD *)this + 304) * v75++)), &v76[4 * v69], 4 * (v65 - v69));
                  }
                  while (v75 < *((unsigned int *)this + 305));
                }
              }
            }
            *((_DWORD *)this + 306) += v65;
            v77 = *((_DWORD *)this + 308) + v65;
            *((_DWORD *)this + 308) = v77;
            v78 = *((_DWORD *)this + 304);
            v39 = v77 >= v78;
            v79 = v77 - v78;
            if (v39)
              *((_DWORD *)this + 308) = v79;
            v19 = v204;
            v17 = (_OWORD *)((char *)this + 1792);
            v24 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
          }
        }
      }
      else
      {
        v65 = 0;
      }
      if (v65 != (_DWORD)v63)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v80 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v81 = (*v80 ? *v80 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
          {
            buf.mNumberBuffers = 136315906;
            *(_QWORD *)(&buf.mNumberBuffers + 1) = "vpProcessUplink_v2.cpp";
            LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
            *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 395;
            WORD1(buf.mBuffers[0].mData) = 1024;
            HIDWORD(buf.mBuffers[0].mData) = v63;
            v208 = 1024;
            LODWORD(v209) = v65;
            _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> mNewOutRingBuff has encountered an overrun: tried to write %u but only had space for %u samples", (uint8_t *)&buf, 0x1Eu);
          }
        }
        v82 = (int *)*((_QWORD *)this + 1570);
        if (v82 && (v19[153] || v19[154]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v82, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 395, "Process", "mNewOutRingBuff has encountered an overrun: tried to write %u but only had space for %u samples", v63, v65);
        }
      }
      v23 = *((_DWORD *)this + 127);
      *((double *)this + 224) = *((double *)this + 224) + (double)v23;
      *((_BYTE *)this + 2081) = *((_BYTE *)this + 2080);
    }
    while (*((_DWORD *)this + 334) >= v23);
    v18 = *((double *)this + 214);
  }
  v97 = *((_QWORD *)this + 235);
  v98 = *((_QWORD *)this + 234);
  v99 = *((_QWORD *)this + 233) * *((unsigned int *)this + 124) * v97 / v98;
  v100 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = v99;
  *((_QWORD *)this + 235) = ++v97;
  v101 = v97 > v98;
  v102 = v97 - v98;
  if (v101)
  {
    *((_QWORD *)this + 235) = v102;
    *((_QWORD *)this + 236) = 0;
  }
  v103 = v99 - v100;
  *((_DWORD *)this + 474) = v99 - v100;
  v104 = (_DWORD *)*((_QWORD *)this + 157);
  v105 = *v104;
  if (v103)
    v106 = v105 == *((_DWORD *)this + 305);
  else
    v106 = 0;
  if (v106 && (v107 = *((_DWORD *)this + 306)) != 0)
  {
    if (v107 >= v103)
      v108 = v103;
    else
      v108 = *((_DWORD *)this + 306);
    v109 = *((_DWORD *)this + 304) - *((_DWORD *)this + 307);
    if (v109 >= v108)
      v110 = v108;
    else
      v110 = v109;
    if (v105)
    {
      v111 = 0;
      v112 = (void **)(v104 + 4);
      do
      {
        v113 = *v112;
        v112 += 2;
        memcpy(v113, (const void *)(*((_QWORD *)this + 155)+ 4 * (*((_DWORD *)this + 307) + *((_DWORD *)this + 304) * v111++)), 4 * v110);
        v114 = *((unsigned int *)this + 305);
      }
      while (v111 < v114);
      if (v108 > v109 && (_DWORD)v114)
      {
        v115 = 0;
        v116 = (uint64_t *)(v104 + 4);
        do
        {
          v117 = *v116;
          v116 += 2;
          memcpy((void *)(v117 + 4 * v110), (const void *)(*((_QWORD *)this + 155) + 4 * (*((_DWORD *)this + 304) * v115++)), 4 * (v108 - v110));
        }
        while (v115 < *((unsigned int *)this + 305));
      }
    }
    *((_DWORD *)this + 306) -= v108;
    v118 = *((_DWORD *)this + 307) + v108;
    *((_DWORD *)this + 307) = v118;
    v119 = *((_DWORD *)this + 304);
    v39 = v118 >= v119;
    v120 = v118 - v119;
    if (v39)
      *((_DWORD *)this + 307) = v120;
    v10 = a3;
  }
  else
  {
    v108 = 0;
  }
  if (v108 != v103)
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 21.0, (float)*((unsigned int *)this + 3112), (float)v103, (float)v108, "process: ERROR output buffer has encountered an underrun");
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v121 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v122 = (*v121 ? *v121 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        buf.mNumberBuffers = 136315906;
        *(_QWORD *)(&buf.mNumberBuffers + 1) = "vpProcessUplink_v2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 618;
        WORD1(buf.mBuffers[0].mData) = 1024;
        HIDWORD(buf.mBuffers[0].mData) = v103;
        v208 = 1024;
        LODWORD(v209) = v108;
        _os_log_impl(&dword_1B5ED0000, v122, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> process: ERROR output buffer has encountered an underrun, need %d, have %d samples", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v123 = (int *)*((_QWORD *)this + 1570);
    if (v123 && (v204[153] || v204[154]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v123, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 618, "HandleUplinkOutputTimeStamps", "process: ERROR output buffer has encountered an underrun, need %d, have %d samples", v103, v108);
    }
  }
  if (v204[153])
  {
    v124 = *((_QWORD *)this + 157);
    ExpectedNumberOfOutputFrames = v103;
    if (*v204)
    {
      v125 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 1969);
      if (v125)
      {
        v126 = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v125);
      }
      else
      {
        v126 = v103;
        if (*((_DWORD *)this + 89) == *((_DWORD *)this + 243))
        {
          v205 = v103;
          if (*(_DWORD *)v124 == *((_DWORD *)this + 3945))
          {
            v127 = 0;
            if (v103)
            {
              v128 = *((_DWORD *)this + 3944);
              v126 = v103;
              v129 = v128 - *((_DWORD *)this + 3946);
              if (!v129)
                goto LABEL_248;
              if (v129 >= v103)
                v127 = v103;
              else
                v127 = v128 - *((_DWORD *)this + 3946);
              v130 = v128 - *((_DWORD *)this + 3948);
              if (v130 >= v127)
                v131 = v127;
              else
                v131 = v130;
              if (*(_DWORD *)v124)
              {
                v132 = 0;
                v133 = (const void **)(v124 + 16);
                do
                {
                  v134 = *v133;
                  v133 += 2;
                  memcpy((void *)(*((_QWORD *)this + 1975)+ 4 * (*((_DWORD *)this + 3948) + *((_DWORD *)this + 3944) * v132++)), v134, 4 * v131);
                  v135 = *((unsigned int *)this + 3945);
                }
                while (v132 < v135);
                if (v127 > v130 && (_DWORD)v135)
                {
                  v136 = 0;
                  v137 = (uint64_t *)(v124 + 16);
                  do
                  {
                    v138 = *v137;
                    v137 += 2;
                    memcpy((void *)(*((_QWORD *)this + 1975) + 4 * (*((_DWORD *)this + 3944) * v136++)), (const void *)(v138 + 4 * v131), 4 * (v127 - v131));
                  }
                  while (v136 < *((unsigned int *)this + 3945));
                }
              }
              *((_DWORD *)this + 3946) += v127;
              v139 = *((_DWORD *)this + 3948) + v127;
              *((_DWORD *)this + 3948) = v139;
              v140 = *((_DWORD *)this + 3944);
              v39 = v139 >= v140;
              v141 = v139 - v140;
              if (v39)
                *((_DWORD *)this + 3948) = v141;
              v126 = v103;
              goto LABEL_246;
            }
          }
          else
          {
            v127 = 0;
          }
          v126 = v103;
LABEL_248:
          if (v127 != v126)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v168 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v169 = (*v168 ? *v168 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
              {
                buf.mNumberBuffers = 136315906;
                *(_QWORD *)(&buf.mNumberBuffers + 1) = "vpDebug_Loopback.cpp";
                LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
                *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 84;
                WORD1(buf.mBuffers[0].mData) = 1024;
                HIDWORD(buf.mBuffers[0].mData) = v127;
                v208 = 1024;
                LODWORD(v209) = v126;
                _os_log_impl(&dword_1B5ED0000, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> loopbackwrite ERROR wrote %d (requested %d) frames", (uint8_t *)&buf, 0x1Eu);
              }
            }
            v170 = (int *)*((_QWORD *)this + 1570);
            if (v170 && (v204[153] || v204[154]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v170, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 84, "LoopBackWrite", "loopbackwrite ERROR wrote %d (requested %d) frames", v127, v126);
            }
          }
          goto LABEL_264;
        }
      }
      v205 = v126;
      if (v126 <= *((_DWORD *)this + 3940) && (v142 = *((_QWORD *)this + 1971)) != 0)
      {
        v143 = (CA::AudioSampleRateConverter **)*((_QWORD *)this + 1969);
        if (v143)
        {
          *(_QWORD *)&buf.mNumberBuffers = 1;
          buf.mBuffers[0] = *(AudioBuffer *)(v124 + 8);
          VoiceProcessor::SampleRateConverter::Convert(v143, &ExpectedNumberOfOutputFrames, &v205, &buf, (const AudioBufferList *)v142);
          v126 = v205;
        }
        else
        {
          memcpy(*(void **)(v142 + 16), *(const void **)(v124 + 16), 4 * v126);
        }
        v149 = (const void **)*((_QWORD *)this + 1971);
        LODWORD(v150) = *(_DWORD *)v149;
        if (*(_DWORD *)v149 >= 2u)
        {
          v151 = 1;
          v152 = 4;
          do
          {
            memcpy((void *)v149[v152], v149[2], 4 * v126);
            ++v151;
            v149 = (const void **)*((_QWORD *)this + 1971);
            v150 = *(unsigned int *)v149;
            v152 += 2;
          }
          while (v151 < v150);
          v10 = a3;
        }
        if ((_DWORD)v150 == *((_DWORD *)this + 3945))
        {
          v127 = 0;
          if (v126)
          {
            v153 = *((_DWORD *)this + 3944);
            v154 = v153 - *((_DWORD *)this + 3946);
            if (v154)
            {
              if (v154 >= v126)
                v127 = v126;
              else
                v127 = v153 - *((_DWORD *)this + 3946);
              v155 = v153 - *((_DWORD *)this + 3948);
              if (v155 >= v127)
                v156 = v127;
              else
                v156 = v155;
              if ((_DWORD)v150)
              {
                v157 = 0;
                v201 = v156;
                v158 = 4 * v156;
                v159 = v149 + 2;
                do
                {
                  v160 = *v159;
                  v159 += 2;
                  memcpy((void *)(*((_QWORD *)this + 1975)+ 4 * (*((_DWORD *)this + 3948) + *((_DWORD *)this + 3944) * v157++)), v160, v158);
                  v161 = *((unsigned int *)this + 3945);
                }
                while (v157 < v161);
                if (v127 > v155 && (_DWORD)v161)
                {
                  v162 = 0;
                  v163 = (uint64_t *)(v149 + 2);
                  do
                  {
                    v164 = *v163;
                    v163 += 2;
                    memcpy((void *)(*((_QWORD *)this + 1975) + 4 * (*((_DWORD *)this + 3944) * v162++)), (const void *)(v164 + 4 * v201), 4 * (v127 - v201));
                  }
                  while (v162 < *((unsigned int *)this + 3945));
                }
              }
              *((_DWORD *)this + 3946) += v127;
              v165 = *((_DWORD *)this + 3948) + v127;
              *((_DWORD *)this + 3948) = v165;
              v166 = *((_DWORD *)this + 3944);
              v39 = v165 >= v166;
              v167 = v165 - v166;
              if (v39)
                *((_DWORD *)this + 3948) = v167;
LABEL_246:
              v10 = a3;
              goto LABEL_248;
            }
          }
          goto LABEL_248;
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v144 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v145 = (*v144 ? *v144 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            v146 = *((_QWORD *)this + 1971);
            v147 = *((_DWORD *)this + 3940);
            buf.mNumberBuffers = 136316162;
            *(_QWORD *)(&buf.mNumberBuffers + 1) = "vpDebug_Loopback.cpp";
            LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
            *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 75;
            WORD1(buf.mBuffers[0].mData) = 1024;
            HIDWORD(buf.mBuffers[0].mData) = v126;
            v208 = 2048;
            v209 = v146;
            v210 = 1024;
            v211 = v147;
            _os_log_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> loopbackwrite: ERROR can't write %d frames to loopbackABL ABL=%p, capacity=%d", (uint8_t *)&buf, 0x28u);
          }
        }
        v148 = (int *)*((_QWORD *)this + 1570);
        if (v148 && (v204[153] || v204[154]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v148, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 75, "LoopBackWrite", "loopbackwrite: ERROR can't write %d frames to loopbackABL ABL=%p, capacity=%d", v126, *((const void **)this + 1971), *((_DWORD *)this + 3940));
        }
      }
      v127 = 0;
      goto LABEL_248;
    }
  }
LABEL_264:
  v171 = a4;
  if (*((_DWORD *)this + 252) * v103 > a4->mBuffers[0].mDataByteSize)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v172 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v173 = (*v172 ? *v172 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
      {
        mDataByteSize = a4->mBuffers[0].mDataByteSize;
        v175 = *((_DWORD *)this + 252) * v103;
        buf.mNumberBuffers = 136315906;
        *(_QWORD *)(&buf.mNumberBuffers + 1) = "vpProcessUplink_v2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 625;
        WORD1(buf.mBuffers[0].mData) = 1024;
        HIDWORD(buf.mBuffers[0].mData) = mDataByteSize;
        v208 = 1024;
        LODWORD(v209) = v175;
        _os_log_impl(&dword_1B5ED0000, v173, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESS - ioOutData buffer (%d bytes) smaller than what VP is configured to output (%d bytes)!\n", (uint8_t *)&buf, 0x1Eu);
      }
    }
    v176 = (int *)*((_QWORD *)this + 1570);
    if (v176 && (v204[153] || v204[154]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v176, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 625, "HandleUplinkOutputTimeStamps", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESS - ioOutData buffer (%d bytes) smaller than what VP is configured to output (%d bytes)!\n", a4->mBuffers[0].mDataByteSize, *((_DWORD *)this + 252) * v103);
    }
    v171 = a4;
    v103 = a4->mBuffers[0].mDataByteSize / *((_DWORD *)this + 252);
  }
  memcpy(v171->mBuffers[0].mData, *(const void **)(*((_QWORD *)this + 157) + 16), 4 * v103);
  *a6 = v103;
  v171->mBuffers[0].mDataByteSize = *((_DWORD *)this + 250) * v103;
  v177 = *a6;
  if (v204[153] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 9, v177, v171), v177 = *a6, v204[153])
    || v204[154])
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x31u, v177, a4, v10);
  }
  if (a8)
    *a8 = 0;
  if (v18 > 0.0)
  {
    v178 = *((double *)this + 123) * v18 / *((double *)this + 78);
    v179 = vcvtmd_u64_f64(v178);
    v180 = v178 - (double)v179 + *((float *)this + 478);
    if (v180 > 1.0)
    {
      v180 = v180 + -1.0;
      ++v179;
    }
    *((float *)this + 478) = v180;
    *((double *)this + 216) = *((double *)this + 216) + (double)v179;
  }
  v181 = *(_OWORD *)&v10->mSampleTime;
  v182 = *(_OWORD *)&v10->mRateScalar;
  v183 = *(_OWORD *)&v10->mSMPTETime.mHours;
  *(_OWORD *)&a5->mSMPTETime.mSubframes = *(_OWORD *)&v10->mSMPTETime.mSubframes;
  *(_OWORD *)&a5->mSMPTETime.mHours = v183;
  *(_OWORD *)&a5->mSampleTime = v181;
  *(_OWORD *)&a5->mRateScalar = v182;
  a5->mSampleTime = *((Float64 *)this + 216);
  a5->mFlags |= 1u;
  *((double *)this + 216) = *((double *)this + 216) + (double)v103;
  v184 = *((_QWORD *)this + 1994);
  v185 = *((unsigned __int8 *)this + 2080);
  v186 = *a6;
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5835);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v184, 49, v185 != 0, a4, v186, (char *)this + 1728);
  *((_DWORD *)this + 128) = *((_DWORD *)this + 127);
  v187 = *((_OWORD *)this + 40);
  *(_OWORD *)((char *)this + 664) = *((_OWORD *)this + 39);
  *(_OWORD *)((char *)this + 680) = v187;
  *((_QWORD *)this + 87) = *((_QWORD *)this + 82);
  *((_QWORD *)this + 112) = *((_QWORD *)this + 107);
  v188 = *(_OWORD *)((char *)this + 840);
  *((_OWORD *)this + 54) = *(_OWORD *)((char *)this + 824);
  *((_OWORD *)this + 55) = v188;
  v189 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 20) = v189;
  if (v189 != 1)
  {
    if (*((_BYTE *)this + 1272)
      || (v190 = FadeInOverFewFrames(*((AudioBufferList **)this + 158), a4, *((unsigned int *)this + 319), *((_DWORD *)this + 320)), *((_BYTE *)this + 1272) = v190, *((_DWORD *)this + 319) = HIDWORD(v190), (_BYTE)v190))
    {
      CopyAllBuffersABL(*((UInt32 **)this + 158), a4);
    }
  }
  if (v204[153] && *((_QWORD *)this + 1571))
  {
    v191 = (double)mach_absolute_time() * 0.0000000416666667;
    v192 = (int *)*((_QWORD *)this + 1571);
    if (VPTimestampLogScope(void)::once != -1)
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
    CALegacyLog::log(v192, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 437, "Process", "UL %f %f %f", a3->mSampleTime, *((double *)this + 1984), v191 - *((double *)this + 1984));
    v193 = *((double *)this + 1984);
    v194 = *((_DWORD *)this + 127);
    v195 = *((double *)this + 103);
    if (v191 - v193 >= (double)v194 / v195)
    {
      v196 = (int *)*((_QWORD *)this + 1571);
      if (VPTimestampLogScope(void)::once != -1)
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      CALegacyLog::log(v196, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 439, "Process", "UL ERROR, processing slower than RT - %f", v191 - *((double *)this + 1984));
      v193 = *((double *)this + 1984);
      v194 = *((_DWORD *)this + 127);
      v195 = *((double *)this + 103);
    }
    if (v193 - *((double *)this + 1985) > (double)(*((_DWORD *)this + 293) + v194) / v195)
    {
      v197 = (int *)*((_QWORD *)this + 1571);
      if (VPTimestampLogScope(void)::once != -1)
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_5_19938);
      CALegacyLog::log(v197, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 441, "Process", "UL ERROR, not being called in a timely manner - %f", *((double *)this + 1984) - *((double *)this + 1985));
      v193 = *((double *)this + 1984);
    }
    result = 0;
    *((double *)this + 1985) = v193;
  }
  else
  {
    result = 0;
  }
  do
LABEL_132:
    v96 = __ldaxr(v12);
  while (__stlxr(v96 - 1, v12));
  return result;
}

void sub_1B62B315C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke()
{
  void *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = dlerror();
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v1 = dlerror();
    v2 = 136315138;
    v3 = v1;
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

void VoiceProcessorV2::PostSRCMicClipDetection(VoiceProcessorV2 *this)
{
  unsigned int v2;
  _DWORD *v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  float __C;

  v2 = *((_DWORD *)this + 127);
  v3 = (_DWORD *)*((_QWORD *)this + 177);
  v4 = *v3;
  if (v2)
    v5 = v4 == *((_DWORD *)this + 361);
  else
    v5 = 0;
  if (v5)
  {
    v6 = *((_DWORD *)this + 362);
    if (v6)
    {
      if (v6 >= v2)
        v7 = *((_DWORD *)this + 127);
      else
        v7 = *((_DWORD *)this + 362);
      v8 = *((_DWORD *)this + 360) - *((_DWORD *)this + 363);
      if (v8 >= v7)
        v9 = v7;
      else
        v9 = v8;
      if (v4)
      {
        v10 = 0;
        v11 = (void **)(v3 + 4);
        do
        {
          v12 = *v11;
          v11 += 2;
          memcpy(v12, (const void *)(*((_QWORD *)this + 183)+ 4 * (*((_DWORD *)this + 363) + *((_DWORD *)this + 360) * v10++)), 4 * v9);
          v13 = *((unsigned int *)this + 361);
        }
        while (v10 < v13);
        if (v7 > v8 && (_DWORD)v13)
        {
          v14 = 0;
          v15 = (uint64_t *)(v3 + 4);
          do
          {
            v16 = *v15;
            v15 += 2;
            memcpy((void *)(v16 + 4 * v9), (const void *)(*((_QWORD *)this + 183) + 4 * (*((_DWORD *)this + 360) * v14++)), 4 * (v7 - v9));
          }
          while (v14 < *((unsigned int *)this + 361));
        }
      }
      *((_DWORD *)this + 362) -= v7;
      v17 = *((_DWORD *)this + 363) + v7;
      *((_DWORD *)this + 363) = v17;
      v18 = *((_DWORD *)this + 360);
      v19 = v17 >= v18;
      v20 = v17 - v18;
      if (v19)
        *((_DWORD *)this + 363) = v20;
    }
  }
  if (**((_DWORD **)this + 135))
  {
    v21 = 0;
    v22 = 16;
    do
    {
      __C = 0.0;
      vDSP_maxmgv(*(const float **)(*((_QWORD *)this + 177) + v22), 1, &__C, *((unsigned int *)this + 127));
      v23 = __C <= 0.00000001;
      *(_BYTE *)(*((_QWORD *)this + 176) + v21) = __C > 0.00000001;
      if (!v23)
        ++*((_DWORD *)this + 371);
      ++v21;
      v22 += 16;
    }
    while (v21 < **((unsigned int **)this + 135));
  }
}

void VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(VoiceProcessorV2 *this)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  float *v10;
  float __B;

  v1 = **((unsigned int **)this + 135);
  if ((_DWORD)v1)
  {
    v3 = 0;
    do
    {
      v4 = 0;
      v5 = v3++;
      if (v3 <= 1)
        v6 = 1;
      else
        v6 = v3;
      v7 = 1;
      do
      {
        if (((*((unsigned int *)this + 112) >> v4) & 1) != 0)
        {
          if (v7 == v6)
            goto LABEL_12;
          ++v7;
        }
        ++v4;
      }
      while (v4 != 32);
      v4 = 33;
LABEL_12:
      v8 = *((float *)this + 1090);
      v9 = *((_QWORD *)this + 262);
      if (v4 < (*((_QWORD *)this + 263) - v9) >> 2)
        v8 = v8 + *(float *)(v9 + 4 * v4);
      if (v8 != 0.0)
      {
        __B = __exp10f(v8 / 20.0);
        v10 = *(float **)(*((_QWORD *)this + 135) + 16 * v5 + 16);
        vDSP_vsmul(v10, 1, &__B, v10, 1, *((unsigned int *)this + 127));
        v1 = **((unsigned int **)this + 135);
      }
    }
    while (v3 < v1);
  }
}

uint64_t VoiceProcessorV2::PreflightUplink(VoiceProcessorV2 *this, unsigned int a2, unsigned int *a3)
{
  unsigned int *v4;
  unsigned int v5;
  float v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v4 = (unsigned int *)((char *)this + 2484);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*((_DWORD *)this + 620))
  {
    v6 = flt_1B662D310[*((_BYTE *)this + 476) == 0];
    if (*((_BYTE *)this + 476))
      VoiceProcessorV2::LogIOError((uint64_t)this, v6, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "preflight uplink: tryer acquire failed", a3);
    else
      VoiceProcessorV2::LogIOError((uint64_t)this, v6, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "preflight uplink: not ok to process?!", a3);
LABEL_7:
    CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3112);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
    v7 = 1937006964;
    if (*((_DWORD *)this + 3112) == 1)
      VoiceProcessorV2::LogNonTransientErrors(this, 1);
    goto LABEL_22;
  }
  if (!*((_BYTE *)this + 476))
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 31.005, (float)*((unsigned int *)this + 3112), (float)*((unsigned int *)this + 3113), 0.0, "preflight uplink: not ok to process?!", a3);
    goto LABEL_7;
  }
  if (a2)
  {
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)this + 234);
    v11 = *((_QWORD *)this + 236);
    v12 = *((_QWORD *)this + 235);
    v13 = *((unsigned int *)this + 124);
    do
    {
      v14 = v12 * *((_QWORD *)this + 233) * v13 / v10;
      v15 = v12 + 1;
      if (v15 <= v10)
        v16 = 0;
      else
        v16 = *((_QWORD *)this + 234);
      v17 = v14 - v11;
      if (v15 > v10)
        LODWORD(v14) = 0;
      v12 = v15 - v16;
      ++v9;
      v8 += v17;
      LODWORD(v11) = v14;
    }
    while (v8 < a2);
  }
  else
  {
    v9 = 0;
    LODWORD(v13) = *((_DWORD *)this + 124);
  }
  v7 = 0;
  *a3 = v13 * v9;
  do
LABEL_22:
    v18 = __ldaxr(v4);
  while (__stlxr(v18 - 1, v4));
  return v7;
}

void sub_1B62B38BC(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

AudioUnitParameterValue VoiceProcessorV2::DetectVoiceActivity(VoiceProcessorV2 *this, const AudioTimeStamp *a2, AudioUnitParameterValue result)
{
  OpaqueAudioComponentInstance *v4;
  __int128 v6;
  __int128 v7;
  AudioBufferList *v8;
  OSStatus v9;
  float v10;
  _BOOL8 v11;
  caulk::concurrent::messenger *v12;
  uint64_t v13;
  AudioUnitParameterValue outValue;
  AudioUnitRenderActionFlags ioActionFlags;
  AudioTimeStamp inTimeStamp;
  AudioBufferList *ioOutputBufferLists;
  AudioBufferList *inInputBufferLists[2];

  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 4663) & 0x20) != 0 && (*((_BYTE *)this + 4679) & 0x20) != 0)
  {
    v4 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 408);
    if (v4)
    {
      if (!*((_BYTE *)this + 2081) && *((_BYTE *)this + 2080))
      {
        AudioUnitReset(v4, 0, 0);
        v4 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 408);
      }
      v6 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inTimeStamp.mRateScalar = v6;
      v7 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v7;
      ioActionFlags = 512;
      v8 = (AudioBufferList *)*((_QWORD *)this + 136);
      ioOutputBufferLists = (AudioBufferList *)*((_QWORD *)this + 2056);
      inInputBufferLists[0] = v8;
      v9 = AudioUnitProcessMultiple(v4, &ioActionFlags, &inTimeStamp, *((_DWORD *)this + 127), 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
      outValue = 0.0;
      v10 = 0.0;
      if (!v9)
      {
        AudioUnitGetParameter(*((AudioUnit *)this + 408), 0x73707062u, 0, 0, &outValue);
        v10 = outValue;
      }
      if (v10 != *((float *)this + 4110) && *((_BYTE *)this + 2080) && *((_QWORD *)this + 2054))
      {
        v11 = v10 != 1.0;
        kdebug_trace();
        v12 = (caulk::concurrent::messenger *)*((_QWORD *)this + 2027);
        if (v12)
        {
          v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
          *(_DWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = this;
          *(_QWORD *)(v13 + 32) = v11;
          *(_QWORD *)v13 = &off_1E69CF520;
          *(_QWORD *)(v13 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v13);
        }
      }
      result = outValue;
      *((AudioUnitParameterValue *)this + 4110) = outValue;
    }
  }
  return result;
}

void caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::perform(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  int v5;
  int *v6;
  caulk::concurrent::message *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = (caulk::concurrent::message *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  (*(void (**)(void))(*(_QWORD *)(v2 + 16432) + 16))();
  kdebug_trace();
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v3 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v4 = (*v3 ? *v3 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 136315650;
      v10 = "vpProcessUplink_v2.cpp";
      v11 = 1024;
      v12 = 800;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Invoked the muted talker detection callback, event = %u", buf, 0x18u);
    }
  }
  v6 = *(int **)(v2 + 12560);
  if (v6 && (*(_BYTE *)(v2 + 15897) || *(_BYTE *)(v2 + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v6, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpProcessing/vpProcessUplink_v2.cpp", 800, "operator()", "Invoked the muted talker detection callback, event = %u", *(_DWORD *)(a1 + 32));
  }
  return caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::rt_cleanup::~rt_cleanup(&v8);
}

void sub_1B62B3C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<VoiceProcessorV2::DetectVoiceActivity(AudioTimeStamp const&)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void VoiceProcessorV2::InitDLSRCs(VoiceProcessorV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int FarEndVoiceMixChannelCount;
  int v7;
  unsigned int v8;
  unsigned int v9;
  double *v10;
  __int128 v11;
  double v12;
  char v13;
  int v14;
  double v15;
  float v16;
  _DWORD *v17;
  double *v18;
  float v19;
  int v20;
  float v21;
  double v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  double v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  double v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  double v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *__p[2];
  char v51;

  v2 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v3 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v3)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v4 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v4)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  v5 = *((_OWORD *)this + 14);
  *(_OWORD *)((char *)this + 248) = *((_OWORD *)this + 13);
  *(_OWORD *)((char *)this + 264) = v5;
  *((_QWORD *)this + 35) = *((_QWORD *)this + 30);
  FarEndVoiceMixChannelCount = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
  v7 = *((_DWORD *)this + 65);
  if ((v7 & 0x20) != 0)
  {
    v8 = 1;
  }
  else
  {
    v8 = *((_DWORD *)this + 69);
    if (!v8)
    {
      v9 = (*((_DWORD *)this + 70) + 7) >> 3;
      goto LABEL_12;
    }
  }
  v9 = *((_DWORD *)this + 68) / v8;
LABEL_12:
  v10 = (double *)((char *)this + 208);
  *((_DWORD *)this + 69) = FarEndVoiceMixChannelCount;
  *((_DWORD *)this + 67) = 1;
  *((_DWORD *)this + 68) = v9;
  *((_DWORD *)this + 66) = v9;
  *((_DWORD *)this + 65) = v7 | 0x20;
  v11 = *(_OWORD *)((char *)this + 264);
  *((_OWORD *)this + 18) = *(_OWORD *)((char *)this + 248);
  *((_OWORD *)this + 19) = v11;
  *((_QWORD *)this + 40) = *((_QWORD *)this + 35);
  v12 = COERCE_DOUBLE(GetVPPreferredClientSampleRate(*((_DWORD *)this + 17), *((_DWORD *)this + 19)));
  v14 = *((_DWORD *)this + 19);
  if ((v14 - 5) >= 2)
  {
    if (v14 == 1 && *((double *)this + 41) == 48000.0 && *v10 == 48000.0)
    {
      v16 = *((float *)this + 550);
      if (v16 > 0.0)
      {
        v17 = (_DWORD *)*((_QWORD *)this + 292);
        if (v17 != *((_DWORD **)this + 293) && *v17 != 1886614639)
        {
          v15 = fmaxf(v16, 16000.0);
          goto LABEL_26;
        }
      }
    }
  }
  else if (v13)
  {
    if (*((double *)this + 41) >= v12)
      v15 = v12;
    else
      v15 = *((double *)this + 41);
    goto LABEL_26;
  }
  if (*((double *)this + 26) >= *((double *)this + 41))
    v15 = *((double *)this + 41);
  else
    v15 = *((double *)this + 26);
LABEL_26:
  v18 = (double *)((char *)this + 288);
  *((double *)this + 36) = v15;
  v19 = *((float *)this + 550);
  if (v19 > 0.0 && v19 <= 16000.0)
  {
    v20 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 232))(this);
    v15 = *((double *)this + 36);
    if (v20)
    {
      v21 = v15;
      if (v21 > 16000.0)
        v21 = 16000.0;
      v15 = v21;
      *v18 = v21;
    }
  }
  v22 = *v10;
  if (v15 != *v10)
  {
    v23 = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)__p, v22, v15, this, v23, v24, v25);
    v26 = *((_QWORD *)this + 47);
    *((void **)this + 47) = __p[0];
    if (v26)
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    v15 = *v18;
  }
  v27 = *((double *)this + 41);
  if (v27 != v15)
  {
    v28 = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)__p, v15, v27, this, v28, v29, v30);
    v31 = *((_QWORD *)this + 48);
    *((void **)this + 48) = __p[0];
    if (v31)
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 288), *((_DWORD *)this + 121), (AudioBufferList **)this + 24);
  }
  v32 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 232))(this);
  v36 = *((double *)this + 41);
  if (v32)
  {
    v35 = *((double *)this + 103);
    if (v36 != v35)
    {
      VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)__p, v35, v36, this, 1, v33, v34);
      v38 = *((_QWORD *)this + 49);
      *((void **)this + 49) = __p[0];
      if (v38)
        std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      LODWORD(v37) = *((_DWORD *)this + 127);
      v39 = vcvtpd_u64_f64(*((double *)this + 41) * (double)v37 / *((double *)this + 103));
      if (*((_DWORD *)this + 121) <= v39)
        v40 = v39;
      else
        v40 = *((_DWORD *)this + 121);
      myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), v40, (AudioBufferList **)this + 1988);
      v36 = *((double *)this + 41);
    }
  }
  LODWORD(v35) = *((_DWORD *)this + 121);
  v41 = *((double *)this + 36);
  v42 = vcvtpd_u64_f64(v41 * (double)*(unint64_t *)&v35 / v36);
  v43 = (ceil(*((double *)this + 26) * (double)v42 / v41) + 1000.0);
  *((_DWORD *)this + 92) = v43;
  v44 = v42 + 1000;
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 208), v43, (AudioBufferList **)this + 13);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 248), *((_DWORD *)this + 92), (AudioBufferList **)this + 22);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 248), v44, (AudioBufferList **)this + 23);
  v45 = *((_QWORD *)this + 1995);
  std::string::basic_string[abi:ne180100]<0>(__p, "dlfev");
  v46 = *((unsigned int *)this + 92);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5928);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v45, __p, 51, (char *)this + 208, v46);
  if (v51 < 0)
    operator delete(__p[0]);
  v47 = *((_QWORD *)this + 1995);
  std::string::basic_string[abi:ne180100]<0>(__p, "dlout");
  v48 = *((unsigned int *)this + 121);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5928);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v47, __p, 68, (char *)this + 328, v48);
  if (v51 < 0)
    operator delete(__p[0]);
  v49 = *((_QWORD *)this + 1995);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_5928);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(v49);
}

void sub_1B62B4194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]()
{
  AudioSampleRateConverterDispose();
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t VoiceProcessorV2::InitializeDownlinkProcessing(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a1, uint64_t a2, UInt32 a3, uint64_t a4, void *a5)
{
  _BYTE *v10;
  int v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  NSObject *v16;
  int *v17;
  _QWORD *v18;
  NSObject *v19;
  void *v20;
  int *v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  NSObject *v28;
  int *v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  int *v37;
  double *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const void *v42;
  int v43;
  __int128 v44;
  int v45;
  UInt32 mChannelsPerFrame;
  UInt32 v47;
  unsigned int v48;
  _DWORD *v49;
  int v50;
  double v51;
  unsigned int v52;
  int v53;
  char v54;
  _DWORD *v55;
  unint64_t v56;
  void **v57;
  _QWORD *v58;
  NSObject *v59;
  int *v60;
  OpaqueAudioComponentInstance *v61;
  int v62;
  OpaqueAudioComponentInstance *v63;
  OpaqueAudioComponentInstance *v64;
  OpaqueAudioComponentInstance *v65;
  OpaqueAudioComponentInstance *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int ShouldUseOptimizedBlockSizeForFacePlant;
  double v74;
  int v75;
  _QWORD *v76;
  NSObject *v77;
  UInt32 v78;
  UInt32 v79;
  int *v80;
  _BYTE *v81;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v82;
  int v83;
  AudioStreamBasicDescription v84;
  void *v85[2];
  __int128 v86;
  uint64_t v87;
  uint8_t v88[4];
  const char *v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  AudioStreamBasicDescription v94;
  _BYTE buf[44];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v10 = (_BYTE *)(a1 + 12488);
  v82 = a1 + 2392;
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 2392) + 16))();
  v13 = (unsigned int *)(a1 + 2480);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v83 = v11;
  while (*(_DWORD *)(a1 + 2484))
    usleep(0x1F4u);
  ++VoiceProcessorV2::InitializeDownlinkProcessing(AudioStreamBasicDescription const&,unsigned int,AudioStreamBasicDescription const&,int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *))::initDownlinkProcessingCallCount;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v15 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v16 = (*v15 ? *v15 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeDownlink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 117;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = VoiceProcessorV2::InitializeDownlinkProcessing(AudioStreamBasicDescription const&,unsigned int,AudioStreamBasicDescription const&,int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *))::initDownlinkProcessingCallCount;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> initializedlp: call num %u", buf, 0x18u);
    }
  }
  v17 = *(int **)(a1 + 12560);
  if (v17 && (v10[3409] || v10[3410]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v17, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 117, "InitializeDownlinkProcessing", "initializedlp: call num %u", VoiceProcessorV2::InitializeDownlinkProcessing(AudioStreamBasicDescription const&,unsigned int,AudioStreamBasicDescription const&,int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *))::initDownlinkProcessingCallCount);
  }
  if (v10[3409])
  {
    if (*v10)
    {
      LODWORD(v12) = *(_DWORD *)(a1 + 484);
      VoiceProcessorV2::WriteTSOverload(a1, *(double *)(a1 + 12480) - (double)v12, *(double *)(a1 + 12480) - (double)v12, 2);
    }
    *v10 = 0;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v18 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      CAFormatter::CAFormatter((CAFormatter *)v85, (const AudioStreamBasicDescription *)a2);
      v20 = v85[0];
      CAFormatter::CAFormatter((CAFormatter *)&v94, (const AudioStreamBasicDescription *)a4);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "vpInitializeDownlink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 128;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a3;
      *(_WORD *)&buf[34] = 2080;
      *(Float64 *)&buf[36] = v94.mSampleRate;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> mix %s (blksz %u), voice %s", buf, 0x2Cu);
      if (*(_QWORD *)&v94.mSampleRate)
        free(*(void **)&v94.mSampleRate);
      if (v85[0])
        free(v85[0]);
    }
  }
  v21 = *(int **)(a1 + 12560);
  if (v21 && (v10[3409] || v10[3410]))
  {
    v81 = v10;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v22 = a5;
    v23 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)a2);
    v24 = *(const char **)buf;
    CAFormatter::CAFormatter((CAFormatter *)v85, (const AudioStreamBasicDescription *)a4);
    CALegacyLog::log(v21, 4, v23, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 128, "InitializeDownlinkProcessing", "mix %s (blksz %u), voice %s", v24, a3, (const char *)v85[0]);
    a5 = v22;
    if (v85[0])
      free(v85[0]);
    v10 = v81;
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v25;
  *(_QWORD *)&buf[32] = *(_QWORD *)(a2 + 32);
  v26 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v85 = *(_OWORD *)a4;
  v86 = v26;
  v87 = *(_QWORD *)(a4 + 32);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v27 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v84, (const CAStreamBasicDescription *)buf);
      LODWORD(v94.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&v94.mSampleRate + 4) = "vpInitializeDownlink.cpp";
      LOWORD(v94.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v94.mFormatFlags + 2) = 133;
      HIWORD(v94.mBytesPerPacket) = 2080;
      *(Float64 *)&v94.mFramesPerPacket = v84.mSampleRate;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp:   mix asbd = %s", (uint8_t *)&v94, 0x1Cu);
      if (*(_QWORD *)&v84.mSampleRate)
        free(*(void **)&v84.mSampleRate);
    }
  }
  v29 = *(int **)(a1 + 12560);
  if (v29 && (v10[3409] || v10[3410]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v30 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)&v94, (const CAStreamBasicDescription *)buf);
    CALegacyLog::log(v29, 5, v30, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 133, "InitializeDownlinkProcessing", "initializedlp:   mix asbd = %s", *(const char **)&v94.mSampleRate);
    if (*(_QWORD *)&v94.mSampleRate)
      free(*(void **)&v94.mSampleRate);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v31 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v32 = (*v31 ? *v31 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v84, (const CAStreamBasicDescription *)v85);
      LODWORD(v94.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&v94.mSampleRate + 4) = "vpInitializeDownlink.cpp";
      LOWORD(v94.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v94.mFormatFlags + 2) = 134;
      HIWORD(v94.mBytesPerPacket) = 2080;
      *(Float64 *)&v94.mFramesPerPacket = v84.mSampleRate;
      _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: voice asbd = %s", (uint8_t *)&v94, 0x1Cu);
      if (*(_QWORD *)&v84.mSampleRate)
        free(*(void **)&v84.mSampleRate);
    }
  }
  v33 = *(int **)(a1 + 12560);
  if (v33 && (v10[3409] || v10[3410]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v34 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)&v94, (const CAStreamBasicDescription *)v85);
    CALegacyLog::log(v33, 5, v34, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 134, "InitializeDownlinkProcessing", "initializedlp: voice asbd = %s", *(const char **)&v94.mSampleRate);
    if (*(_QWORD *)&v94.mSampleRate)
      free(*(void **)&v94.mSampleRate);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v35 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v94.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&v94.mSampleRate + 4) = "vpInitializeDownlink.cpp";
      LOWORD(v94.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v94.mFormatFlags + 2) = 135;
      HIWORD(v94.mBytesPerPacket) = 1024;
      v94.mFramesPerPacket = a3;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: mix blk sz = %d", (uint8_t *)&v94, 0x18u);
    }
  }
  v37 = *(int **)(a1 + 12560);
  if (v37 && (v10[3409] || v10[3410]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v37, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 135, "InitializeDownlinkProcessing", "initializedlp: mix blk sz = %d", a3);
  }
  v38 = (double *)(a1 + 328);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)&buf[32];
  v39 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 328) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 344) = v39;
  v40 = v86;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)v85;
  *(_OWORD *)(a1 + 224) = v40;
  *(_QWORD *)(a1 + 240) = v87;
  *(_DWORD *)(a1 + 484) = a3;
  *(_DWORD *)(a1 + 516) = a3;
  *(_DWORD *)(a1 + 520) = 1;
  if ((a3 & 3) == 0)
  {
    v48 = *(_DWORD *)(a1 + 72);
    if (v48 <= 0x2E && ((0x5100003FFFFEuLL >> v48) & 1) != 0)
    {
      v49 = *(_DWORD **)(a1 + 2336);
      if (v49 == *(_DWORD **)(a1 + 2344) || *v49 != 1886614639)
      {
        v50 = *(_DWORD *)(a1 + 76);
        if ((v50 - 5) >= 2)
        {
          if (v50 != 1)
          {
LABEL_180:
            *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 484) / a3;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v76 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              v77 = (*v76 ? *v76 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              {
                v78 = *(_DWORD *)(a1 + 516);
                v79 = *(_DWORD *)(a1 + 520);
                LODWORD(v94.mSampleRate) = 136315906;
                *(_QWORD *)((char *)&v94.mSampleRate + 4) = "vpInitializeDownlink.cpp";
                LOWORD(v94.mFormatFlags) = 1024;
                *(AudioFormatFlags *)((char *)&v94.mFormatFlags + 2) = 581;
                HIWORD(v94.mBytesPerPacket) = 1024;
                v94.mFramesPerPacket = v78;
                LOWORD(v94.mBytesPerFrame) = 1024;
                *(UInt32 *)((char *)&v94.mBytesPerFrame + 2) = v79;
                _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> +++ dl io blk size = %u, num dl io cycles = %u", (uint8_t *)&v94, 0x1Eu);
              }
            }
            v80 = *(int **)(a1 + 12560);
            if (v80 && (v10[3409] || v10[3410]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v80, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 581, "CalcDLIoBlkSz", "+++ dl io blk size = %u, num dl io cycles = %u", *(_DWORD *)(a1 + 516), *(_DWORD *)(a1 + 520));
            }
            goto LABEL_95;
          }
          ShouldUseOptimizedBlockSizeForFacePlant = VoiceProcessorV2::ShouldUseOptimizedBlockSizeForFacePlant((VoiceProcessorV2 *)a1);
          v52 = *(_DWORD *)(a1 + 516);
          if (ShouldUseOptimizedBlockSizeForFacePlant)
          {
            v74 = *v38;
            while ((double)v52 / v74 > 0.01)
            {
              a3 = v52 >> 1;
              *(_DWORD *)(a1 + 516) = v52 >> 1;
              if (v52 >= 0x82)
              {
                v75 = v52 & 6;
                v52 >>= 1;
                if (!v75)
                  continue;
              }
              goto LABEL_180;
            }
          }
        }
        else
        {
          v51 = *v38;
          v52 = a3;
          while ((double)v52 / v51 > 0.016)
          {
            a3 = v52 >> 1;
            *(_DWORD *)(a1 + 516) = v52 >> 1;
            if (v52 >= 0x82)
            {
              v53 = v52 & 6;
              v52 >>= 1;
              if (!v53)
                continue;
            }
            goto LABEL_180;
          }
        }
        a3 = v52;
        goto LABEL_180;
      }
    }
  }
LABEL_95:
  if (*(_DWORD *)(a1 + 356) == 1)
    *(_DWORD *)(a1 + 340) |= 0x20u;
  if (*(_DWORD *)(a1 + 236) == 1)
    *(_DWORD *)(a1 + 220) |= 0x20u;
  *(_QWORD *)(a1 + 12468) = 0;
  VoiceProcessorV2::InitDLSRCs((VoiceProcessorV2 *)a1);
  v41 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)&v94.mSampleRate = *(_OWORD *)v38;
  *(_OWORD *)&v94.mBytesPerPacket = v41;
  *(_QWORD *)&v94.mBitsPerChannel = *(_QWORD *)(a1 + 360);
  v94.mChannelsPerFrame = 4;
  myAllocABLDynamic(&v94, *(_DWORD *)(a1 + 484), (AudioBufferList **)(a1 + 200));
  if (a5)
    a5 = _Block_copy(a5);
  v42 = *(const void **)(a1 + 96);
  if (v42)
    _Block_release(v42);
  *(_QWORD *)(a1 + 96) = a5;
  if (!*(_QWORD *)(a1 + 1632))
  {
    if (*(_DWORD *)(a1 + 484) <= 0x1000u)
      v43 = 4096;
    else
      v43 = *(_DWORD *)(a1 + 484);
    v44 = *(_OWORD *)(a1 + 344);
    *(_OWORD *)&v84.mSampleRate = *(_OWORD *)v38;
    *(_OWORD *)&v84.mBytesPerPacket = v44;
    *(_QWORD *)&v84.mBitsPerChannel = *(_QWORD *)(a1 + 360);
    v45 = *(_DWORD *)(a1 + 340) & 0x20;
    if ((v84.mFormatFlags & 0x20) != 0)
    {
      mChannelsPerFrame = 1;
    }
    else
    {
      mChannelsPerFrame = v84.mChannelsPerFrame;
      if (!v84.mChannelsPerFrame)
      {
        v47 = (v84.mBitsPerChannel + 7) >> 3;
LABEL_122:
        v84.mChannelsPerFrame = 8;
        if (v45)
          v54 = 0;
        else
          v54 = 3;
        v84.mFramesPerPacket = 1;
        v84.mBytesPerFrame = v47 << v54;
        v84.mFormatFlags = v84.mFormatFlags & 0xFFFFFFDF | v45;
        v84.mBytesPerPacket = v47 << v54;
        myAllocABLDynamic(&v84, v43, (AudioBufferList **)(a1 + 1632));
        v55 = *(_DWORD **)(a1 + 1632);
        if (*v55)
        {
          v56 = 0;
          v57 = (void **)(v55 + 4);
          do
          {
            bzero(*v57, *((unsigned int *)v57 - 1));
            ++v56;
            v57 += 2;
          }
          while (v56 < *v55);
        }
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v58 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
        {
          v59 = (*v58 ? *v58 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v88 = 136315650;
            v89 = "vpInitializeDownlink.cpp";
            v90 = 1024;
            v91 = 208;
            v92 = 1024;
            v93 = v43;
            _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> DL Fade data size = %u", v88, 0x18u);
          }
        }
        v60 = *(int **)(a1 + 12560);
        if (v60 && (v10[3409] || v10[3410]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v60, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 208, "InitializeDownlinkProcessing", "DL Fade data size = %u", v43);
        }
        goto LABEL_143;
      }
    }
    v47 = v84.mBytesPerFrame / mChannelsPerFrame;
    goto LABEL_122;
  }
LABEL_143:
  VoiceProcessorV2::InitializeDLP((VoiceProcessorV2 *)a1);
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 8944, 1937141612, *(float *)(a1 + 12464));
  if ((*(_BYTE *)(a1 + 8832) & 0x10) != 0 && (*(_BYTE *)(a1 + 8840) & 0x10) != 0)
  {
    v61 = *(OpaqueAudioComponentInstance **)(a1 + 3528);
    if (v61)
      AudioUnitSetParameter(v61, 0x73766F6Cu, 0, 0, *(AudioUnitParameterValue *)(a1 + 12464), 0);
  }
  v62 = atomic_load((unsigned int *)(a1 + 2308));
  *(_DWORD *)(a1 + 2304) = v62;
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9760, 0, (float)v62);
  if ((*(_BYTE *)(a1 + 8836) & 0x40) != 0 && (*(_BYTE *)(a1 + 8844) & 0x40) != 0)
  {
    v63 = *(OpaqueAudioComponentInstance **)(a1 + 3800);
    if (v63)
      AudioUnitSetParameter(v63, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
  }
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9784, 0, (float)*(int *)(a1 + 2304));
  if ((*(_BYTE *)(a1 + 8836) & 0x80) != 0 && (*(_BYTE *)(a1 + 8844) & 0x80) != 0)
  {
    v64 = *(OpaqueAudioComponentInstance **)(a1 + 3808);
    if (v64)
      AudioUnitSetParameter(v64, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
  }
  AUPropAndParamHelper::AddItemToAUParamList(a1 + 9808, 0, (float)*(int *)(a1 + 2304));
  if ((*(_BYTE *)(a1 + 8837) & 1) != 0 && (*(_BYTE *)(a1 + 8845) & 1) != 0)
  {
    v65 = *(OpaqueAudioComponentInstance **)(a1 + 3816);
    if (v65)
      AudioUnitSetParameter(v65, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
  }
  if (*(_BYTE *)(a1 + 2245))
  {
    AUPropAndParamHelper::AddItemToAUParamList(a1 + 9856, 0, (float)*(int *)(a1 + 2304));
    if ((*(_BYTE *)(a1 + 8837) & 4) != 0 && (*(_BYTE *)(a1 + 8845) & 4) != 0)
    {
      v66 = *(OpaqueAudioComponentInstance **)(a1 + 3832);
      if (v66)
        AudioUnitSetParameter(v66, 0, 0, 0, (float)*(int *)(a1 + 2304), 0);
    }
  }
  if (v10[3409] || v10[3410])
  {
    VoiceProcessorV2::PListWriteInitializeDLPParameters((VoiceProcessorV2 *)a1);
    if (v10[3409])
      VoiceProcessorV2::LoopBackInitialize((VoiceProcessorV2 *)a1, v67, v68, v69, v70);
  }
  do
    v71 = __ldaxr(v13);
  while (__stlxr(v71 - 1, v13));
  if (v83)
    (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep))(*(_QWORD *)v82 + 24))(v82);
  return 0;
}

void sub_1B62B52FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  unsigned int *v32;
  unsigned int v34;

  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 - 1, v32));
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::InitializeDLP(VoiceProcessorV2 *this)
{
  int16x8_t *v2;
  _QWORD *v3;
  NSObject *v4;
  int16x8_t v5;
  void *p_outData;
  int16x8_t v7;
  void *p_p;
  int *v9;
  uint64_t v10;
  int16x8_t v11;
  const char *v12;
  int16x8_t v13;
  const char *v14;
  _QWORD *v15;
  NSObject *v16;
  int16x8_t v17;
  void *v18;
  int16x8_t v19;
  void *v20;
  int *v21;
  uint64_t v22;
  int16x8_t v23;
  const char *v24;
  int16x8_t v25;
  const char *v26;
  AudioStreamBasicDescription *v27;
  int16x8_t v28;
  _QWORD *v29;
  NSObject *v30;
  int *v31;
  _QWORD *v32;
  NSObject *v33;
  int *v34;
  _QWORD *v35;
  NSObject *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  PowerLogManager *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  std::pmr *Parameter;
  uint64_t v47;
  int v48;
  uint64_t default_resource;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  VoiceProcessorV2 *v56;
  _QWORD *v57;
  NSObject *v58;
  int *v59;
  _QWORD *v60;
  NSObject *v61;
  int *v62;
  VoiceProcessorV2 *v63;
  _QWORD *v64;
  NSObject *v65;
  int *v66;
  uint64_t i;
  uint64_t v68;
  int *v69;
  int v70;
  const char *v71;
  char *v72;
  OpaqueAudioComponentInstance *v73;
  const void **v74;
  _QWORD *v75;
  NSObject *v76;
  const char *v77;
  const char *v78;
  const void *v79;
  int *v80;
  const char *v81;
  const char *v82;
  Float64 mSampleRate;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  NSObject *v88;
  float v89;
  int *v90;
  uint64_t v91;
  _QWORD *v93;
  NSObject *v94;
  uint64_t v95;
  int *v96;
  _QWORD *v97;
  NSObject *v98;
  int *v99;
  const AudioStreamBasicDescription *v100;
  _DWORD *v101;
  unint64_t v102;
  void **v103;
  _DWORD *v104;
  unint64_t v105;
  void **v106;
  _DWORD *v107;
  unint64_t v108;
  void **v109;
  __int128 v110;
  UInt32 mChannelsPerFrame;
  UInt32 v112;
  _DWORD *v113;
  unint64_t v114;
  void **v115;
  _DWORD *v116;
  unint64_t v117;
  void **v118;
  VoiceProcessorV2 *v119;
  _QWORD *v120;
  NSObject *v121;
  int v122;
  int *v123;
  PowerLogManager *v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  __int128 v130;
  std::__shared_weak_count *shared_owners;
  unint64_t v132;
  unint64_t *p_shared_weak_owners;
  unint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  NSObject *v142;
  unsigned __int8 *v143;
  VoiceProcessorV2 *v144;
  float HeadsetSensitivity;
  unint64_t RefPortOwningDeviceID;
  int v147;
  _QWORD *v148;
  NSObject *v149;
  int *v150;
  _QWORD *v151;
  NSObject *v152;
  int *v153;
  int v154;
  unint64_t v155;
  unint64_t v156;
  int32x2_t v157;
  uint64_t v158;
  uint64x2_t v159;
  float32x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  uint64_t v163;
  float32x2_t v164;
  int32x2_t v165;
  uint32x2_t v166;
  float32x2_t v167;
  _QWORD *v168;
  NSObject *v169;
  int *v170;
  uint64_t v171;
  CFTypeRef v172;
  uint64_t v173;
  _QWORD *v174;
  NSObject *v175;
  int *v176;
  int32x2_t v177;
  uint64_t v178;
  uint64x2_t v179;
  float32x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  uint64_t v183;
  float32x2_t v184;
  int32x2_t v185;
  uint32x2_t v186;
  float32x2_t v187;
  _QWORD *v188;
  NSObject *v189;
  int *v190;
  CFArrayRef v191;
  CFDictionaryRef CFDictionaryRef;
  uint64_t v193;
  const void *v194;
  const void *v195;
  float v196;
  unsigned int OutputPortProductIDForPME;
  NSString *v198;
  NSString *v199;
  void *v200;
  CFNumberRef v201;
  applesauce::CF::TypeRef *v202;
  CFNumberRef v203;
  CFNumberRef v204;
  CFDictionaryRef v205;
  const void *v206;
  uint64_t j;
  const void *v208;
  const void *v209;
  const void *v210;
  uint64_t v211;
  unint64_t v212;
  AudioObjectID v213;
  _QWORD *v214;
  NSObject *v215;
  int *v216;
  _QWORD *v217;
  NSObject *v218;
  int *v219;
  _QWORD *v220;
  NSObject *v221;
  double v222;
  double v223;
  int *v224;
  std::runtime_error *v225;
  std::runtime_error *v226;
  std::runtime_error *v227;
  std::runtime_error *exception;
  AudioStreamBasicDescription *v229;
  _OWORD *v230;
  __int128 v231;
  __int128 v232;
  char *v233;
  CFNumberRef valuePtr;
  NSString *v236;
  NSString *v237;
  float v238;
  AudioStreamBasicDescription v239;
  UInt32 ioDataSize[2];
  CFTypeRef CFArray;
  CFTypeRef cf;
  void *outData;
  __int128 v244;
  void *__p;
  uint64_t v246;
  char v247;
  _BYTE buf[28];
  __int16 v249;
  void *v250;
  _BYTE block[48];
  __int128 v252;
  int v253;
  _BYTE v254[28];

  *(_QWORD *)&v254[4] = *MEMORY[0x1E0C80C00];
  v233 = (char *)this + 12460;
  v229 = (AudioStreamBasicDescription *)((char *)this + 584);
  if (VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(this))
  {
    v2 = (int16x8_t *)((char *)this + 328);
    if (!CAStreamBasicDescription::IsEqual((VoiceProcessorV2 *)((char *)this + 328), (const AudioStreamBasicDescription *)((char *)this + 584)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v3 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v4 = (*v3 ? *v3 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          v5 = *(int16x8_t *)((char *)this + 600);
          *(_OWORD *)block = *(_OWORD *)&v229->mSampleRate;
          *(int16x8_t *)&block[16] = v5;
          *(_QWORD *)&block[32] = *((_QWORD *)this + 77);
          p_outData = &outData;
          CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)&outData, v5);
          if (v244 < 0)
            p_outData = outData;
          v7 = v2[1];
          *(int16x8_t *)&v239.mSampleRate = *v2;
          *(int16x8_t *)&v239.mBytesPerPacket = v7;
          *(_QWORD *)&v239.mBitsPerChannel = v2[2].i64[0];
          CA::StreamDescription::AsString((CA::StreamDescription *)&v239, (uint64_t)&__p, v7);
          if (v247 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3067;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = p_outData;
          v249 = 2080;
          v250 = p_p;
          _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Updating hwRef to match dlMix format:\n was: %s\n now: %s", buf, 0x26u);
          if (v247 < 0)
            operator delete(__p);
          if (SHIBYTE(v244) < 0)
            operator delete(outData);
        }
      }
      v9 = (int *)*((_QWORD *)this + 1570);
      if (v9 && (v233[3437] || v233[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v10 = VPLogScope(void)::scope;
        v11 = *(int16x8_t *)&v229->mBytesPerPacket;
        *(_OWORD *)block = *(_OWORD *)&v229->mSampleRate;
        *(int16x8_t *)&block[16] = v11;
        *(_QWORD *)&block[32] = *(_QWORD *)&v229->mBitsPerChannel;
        v12 = buf;
        CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)buf, v11);
        if (buf[23] < 0)
          v12 = *(const char **)buf;
        v13 = v2[1];
        *(int16x8_t *)&v239.mSampleRate = *v2;
        *(int16x8_t *)&v239.mBytesPerPacket = v13;
        *(_QWORD *)&v239.mBitsPerChannel = v2[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)&v239, (uint64_t)&outData, v13);
        if (v244 >= 0)
          v14 = (const char *)&outData;
        else
          v14 = (const char *)outData;
        CALegacyLog::log(v9, 3, v10, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3067, "UpdateReferenceSignalFormat", "Updating hwRef to match dlMix format:\n was: %s\n now: %s", v12, v14);
LABEL_67:
        if (SHIBYTE(v244) < 0)
          operator delete(outData);
        v27 = v229;
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
  else if (*((double *)this + 68) != *((double *)this + 73)
         || *((_DWORD *)this + 138) != *((_DWORD *)this + 148)
         || *((_DWORD *)this + 139) != *((_DWORD *)this + 149)
         || *((_DWORD *)this + 140) != *((_DWORD *)this + 150)
         || *((_DWORD *)this + 141) != *((_DWORD *)this + 151)
         || *((_DWORD *)this + 142) != *((_DWORD *)this + 152)
         || *((_DWORD *)this + 143) != *((_DWORD *)this + 153)
         || *((_DWORD *)this + 144) != *((_DWORD *)this + 154))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v2 = (int16x8_t *)((char *)this + 544);
    v15 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v16 = (*v15 ? *v15 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(int16x8_t *)&v229->mBytesPerPacket;
        *(_OWORD *)block = *(_OWORD *)&v229->mSampleRate;
        *(int16x8_t *)&block[16] = v17;
        *(_QWORD *)&block[32] = *(_QWORD *)&v229->mBitsPerChannel;
        v18 = &outData;
        CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)&outData, v17);
        if (v244 < 0)
          v18 = outData;
        v19 = v2[1];
        *(int16x8_t *)&v239.mSampleRate = *v2;
        *(int16x8_t *)&v239.mBytesPerPacket = v19;
        *(_QWORD *)&v239.mBitsPerChannel = v2[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)&v239, (uint64_t)&__p, v19);
        if (v247 >= 0)
          v20 = &__p;
        else
          v20 = __p;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3079;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v18;
        v249 = 2080;
        v250 = v20;
        _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Updating hwRef to match extHwRef format:\n was:%s\n now:%s", buf, 0x26u);
        if (v247 < 0)
          operator delete(__p);
        if (SHIBYTE(v244) < 0)
          operator delete(outData);
      }
    }
    v21 = (int *)*((_QWORD *)this + 1570);
    if (v21 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v22 = VPLogScope(void)::scope;
      v23 = *(int16x8_t *)&v229->mBytesPerPacket;
      *(_OWORD *)block = *(_OWORD *)&v229->mSampleRate;
      *(int16x8_t *)&block[16] = v23;
      *(_QWORD *)&block[32] = *(_QWORD *)&v229->mBitsPerChannel;
      v24 = buf;
      CA::StreamDescription::AsString((CA::StreamDescription *)block, (uint64_t)buf, v23);
      if (buf[23] < 0)
        v24 = *(const char **)buf;
      v25 = v2[1];
      *(int16x8_t *)&v239.mSampleRate = *v2;
      *(int16x8_t *)&v239.mBytesPerPacket = v25;
      *(_QWORD *)&v239.mBitsPerChannel = v2[2].i64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)&v239, (uint64_t)&outData, v25);
      if (v244 >= 0)
        v26 = (const char *)&outData;
      else
        v26 = (const char *)outData;
      CALegacyLog::log(v21, 3, v22, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3079, "UpdateReferenceSignalFormat", "Updating hwRef to match extHwRef format:\n was:%s\n now:%s", v24, v26);
      goto LABEL_67;
    }
LABEL_71:
    v27 = v229;
LABEL_72:
    v28 = v2[1];
    *(int16x8_t *)&v27->mSampleRate = *v2;
    *(int16x8_t *)&v27->mBytesPerPacket = v28;
    *(_QWORD *)&v27->mBitsPerChannel = v2[2].i64[0];
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v29 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v30 = (*v29 ? *v29 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 303;
        _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> InitializeDLP: hwref and dlmix formats were mismatched -- calling Initialize again", block, 0x12u);
      }
    }
    v31 = (int *)*((_QWORD *)this + 1570);
    if (v31 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v31, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 303, "InitializeDLP", "InitializeDLP: hwref and dlmix formats were mismatched -- calling Initialize again");
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v32 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v33 = (*v32 ? *v32 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 304;
        _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (UpdateReferenceSignalFormat)", block, 0x12u);
      }
    }
    v34 = (int *)*((_QWORD *)this + 1570);
    if (v34 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v34, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 304, "InitializeDLP", "Begin self-reinit (UpdateReferenceSignalFormat)");
    }
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v35 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 306;
        _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (UpdateReferenceSignalFormat)", block, 0x12u);
      }
    }
    v37 = (int *)*((_QWORD *)this + 1570);
    if (v37 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v37, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 306, "InitializeDLP", "End self-reinit (UpdateReferenceSignalFormat)");
    }
  }
  CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
  *((_DWORD *)this + 3114) = 0;
  CADeprecated::CAMutex::Unlock((VoiceProcessorV2 *)((char *)this + 2576));
  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)this + 2000);
  v38 = *((_QWORD *)this + 2007);
  v39 = *((_QWORD *)this + 2006);
  while (v38 != v39)
  {
    v38 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v38);
  }
  *((_QWORD *)this + 2007) = v39;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)this + 4576);
  v40 = (PowerLogManager *)*((_QWORD *)this + 1989);
  if (v40)
    PowerLogManager::EndPowerTracking(v40);
  VoiceProcessorV2::InitDLSRCs(this);
  VoiceProcessorV2::InitializeVPParams(this);
  v41 = 0;
  v230 = (_OWORD *)((char *)this + 15912);
  do
  {
    if (((*((_QWORD *)this + 1104) >> v41) & 1) != 0 && ((0x17FFFFFFC7FFFFFFuLL >> v41) & 1) != 0)
    {
      VoiceProcessorV2::InstantiateAndConfigureEffectAU(this, v41, 0);
    }
    else
    {
      v42 = 0;
      v43 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
      while (1)
      {
        v44 = *v43;
        v43 += 18;
        if (v44 == (_DWORD)v41)
          break;
        if (++v42 == 62)
        {
          v45 = 0;
          goto LABEL_130;
        }
      }
      v45 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v42 + 1];
LABEL_130:
      Parameter = VoiceProcessorV2::DisposeAU(this, 1635083896, v45, (OpaqueAudioComponentInstance **)this + v41 + 437, 1);
    }
    ++v41;
  }
  while (v41 != 62);
  v47 = *((_QWORD *)this + 1104);
  if ((~*((_DWORD *)this + 2208) & 0xC0000000) == 0)
  {
    *(_QWORD *)block = *((_QWORD *)this + 41);
    *(_OWORD *)&block[8] = xmmword_1B6626900;
    *(_OWORD *)&block[24] = xmmword_1B6626910;
    v48 = *((_DWORD *)this + 129);
    default_resource = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v48, default_resource, &v239);
    vp::Audio_Buffer::operator=((_QWORD **)this + 343, &v239);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v239);
    v47 = *((_QWORD *)this + 1104);
  }
  if ((v47 & 0x4000) != 0)
  {
    *(_QWORD *)block = *((_QWORD *)this + 36);
    *(_OWORD *)&block[8] = xmmword_1B6626900;
    *(_OWORD *)&block[24] = xmmword_1B6626910;
    v50 = *((_DWORD *)this + 134);
    v51 = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v50, v51, &v239);
    vp::Audio_Buffer::operator=((_QWORD **)this + 346, &v239);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v239);
    AudioUnitGetParameter(*((AudioUnit *)this + 451), 8u, 0, 0, (AudioUnitParameterValue *)this + 569);
    Parameter = (std::pmr *)AudioUnitGetParameter(*((AudioUnit *)this + 451), 0x2Bu, 0, 0, (AudioUnitParameterValue *)this + 570);
    v47 = *((_QWORD *)this + 1104);
  }
  if ((~(_DWORD)v47 & 0x60000) == 0)
  {
    *(_QWORD *)block = *((_QWORD *)this + 41);
    *(_OWORD *)&block[8] = xmmword_1B6626900;
    *(_OWORD *)&block[24] = xmmword_1B6626910;
    v52 = *((_DWORD *)this + 129);
    v53 = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v52, v53, &v239);
    vp::Audio_Buffer::operator=((_QWORD **)this + 344, &v239);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v239);
    v47 = *((_QWORD *)this + 1104);
  }
  if ((~(_DWORD)v47 & 0x180000) == 0)
  {
    *(_QWORD *)block = *((_QWORD *)this + 41);
    *(_OWORD *)&block[8] = xmmword_1B6626900;
    *(_OWORD *)&block[24] = xmmword_1B6626910;
    v54 = *((_DWORD *)this + 129);
    v55 = std::pmr::get_default_resource(Parameter);
    vp::Audio_Buffer::create((uint64_t)block, v54, v55, &v239);
    vp::Audio_Buffer::operator=((_QWORD **)this + 345, &v239);
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v239);
    v47 = *((_QWORD *)this + 1104);
  }
  if ((v47 & 0x4400000) != 0)
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), *((_DWORD *)this + 129), (AudioBufferList **)this + 198);
  v56 = this;
  if (*((_DWORD *)this + 1127) != 1)
    goto LABEL_178;
  if (*((_DWORD *)this + 123) == *((_DWORD *)this + 121)
    && CAStreamBasicDescription::IsEqual((VoiceProcessorV2 *)((char *)this + 328), v229))
  {
    v56 = this;
    if (!*v233)
      goto LABEL_178;
    *v233 = 0;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v57 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v58 = (*v57 ? *v57 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 392;
        _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: ul-dl config no longer out of sync", block, 0x12u);
      }
    }
    v56 = this;
    v59 = (int *)*((_QWORD *)this + 1570);
    if (!v59 || !v233[3437] && !v233[3438])
      goto LABEL_178;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v59, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 392, "InitializeDLP", "initializedlp: ul-dl config no longer out of sync");
  }
  else
  {
    *v233 = 1;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v60 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v61 = (*v60 ? *v60 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 389;
        _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initializedlp: ul-dl config out of sync", block, 0x12u);
      }
    }
    v56 = this;
    v62 = (int *)*((_QWORD *)this + 1570);
    if (!v62 || !v233[3437] && !v233[3438])
      goto LABEL_178;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v62, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 389, "InitializeDLP", "initializedlp: ul-dl config out of sync");
  }
  v56 = this;
LABEL_178:
  if (*((_BYTE *)v56 + 478))
  {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)v56 + 1488), *((_DWORD *)v56 + 382), (AudioBufferList **)v56 + 197);
    v56 = this;
  }
  *((_BYTE *)v56 + 477) = 1;
  VoiceProcessorV2::InstantiateAndConfigureAuxAU(v56, 0);
  v63 = this;
  if (*((_BYTE *)this + 2083) || *((_BYTE *)this + 472))
  {
    (*((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float))this + 1555))(*((_QWORD *)this + 1554), 0, 0, 0, 0, *((float *)this + 1131));
    (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, float))this + 1555))(*((_QWORD *)this + 1554), 8, 0, 0, 0, *((float *)this + 1131));
    v63 = this;
  }
  VoiceProcessorV2::LogVPParams(v63);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v64 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v65 = (*v64 ? *v64 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)block = 136315394;
      *(_QWORD *)&block[4] = "vpDebug_Logging.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 67;
      _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ____________logdownlinkchain:begin___________", block, 0x12u);
    }
  }
  v66 = (int *)*((_QWORD *)this + 1570);
  if (v66 && (v233[3437] || v233[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v66, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 67, "LogVPDownlinkChain", "____________logdownlinkchain:begin___________");
  }
  for (i = 0; i != 62; ++i)
  {
    v68 = 0;
    v69 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
    while (1)
    {
      v70 = *v69;
      v69 += 18;
      if (v70 == (_DWORD)i)
        break;
      if (++v68 == 62)
      {
        v71 = 0;
        goto LABEL_204;
      }
    }
    v71 = (const char *)&VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v68 + 2];
LABEL_204:
    LODWORD(outData) = 0;
    LODWORD(__p) = 4;
    v72 = (char *)this + 8 * i;
    v73 = (OpaqueAudioComponentInstance *)*((_QWORD *)v72 + 437);
    if (v73)
      AudioUnitGetProperty(v73, 0x15u, 0, 0, &outData, (UInt32 *)&__p);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v74 = (const void **)(v72 + 3496);
    v75 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v76 = (*v75 ? *v75 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
      {
        if (i >= 0x3E)
          std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
        v77 = "ON";
        if (((*((_QWORD *)this + 1104) >> i) & 1) == 0)
          v77 = "OFF";
        v78 = "(bypassed)";
        if (!(_DWORD)outData)
          v78 = "";
        v79 = *v74;
        *(_DWORD *)block = 136316418;
        *(_QWORD *)&block[4] = "vpDebug_Logging.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 78;
        *(_WORD *)&block[18] = 2080;
        *(_QWORD *)&block[20] = v71;
        *(_WORD *)&block[28] = 2080;
        *(_QWORD *)&block[30] = v77;
        *(_WORD *)&block[38] = 2080;
        *(_QWORD *)&block[40] = v78;
        LOWORD(v252) = 2048;
        *(_QWORD *)((char *)&v252 + 2) = v79;
        _os_log_impl(&dword_1B5ED0000, v76, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>     %s: %s %s (%p)", block, 0x3Au);
      }
    }
    v80 = (int *)*((_QWORD *)this + 1570);
    if (v80 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      if (i >= 0x3E)
        std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
      v81 = "ON";
      if (((*((_QWORD *)this + 1104) >> i) & 1) == 0)
        v81 = "OFF";
      v82 = "(bypassed)";
      if (!(_DWORD)outData)
        v82 = "";
      CALegacyLog::log(v80, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 78, "LogVPDownlinkChain", "    %s: %s %s (%p)", v71, v81, v82, *v74);
    }
    memset(&v239, 0, 24);
    std::vector<std::pair<unsigned int,float>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((char *)&v239, *((uint64_t **)this + 3 * i + 1106), *((uint64_t **)this + 3 * i + 1107), (uint64_t)(*((_QWORD *)this + 3 * i + 1107) - *((_QWORD *)this + 3 * i + 1106)) >> 3);
    mSampleRate = v239.mSampleRate;
    if (*(_QWORD *)&v239.mFormatID == *(_QWORD *)&v239.mSampleRate)
    {
      mSampleRate = *(double *)&v239.mFormatID;
      if (*(_QWORD *)&v239.mFormatID)
        goto LABEL_250;
    }
    else
    {
      v84 = 0;
      v85 = (uint64_t)(*(_QWORD *)&v239.mFormatID - *(_QWORD *)&v239.mSampleRate) >> 3;
      v86 = 1;
      do
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v87 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v88 = (*v87 ? *v87 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)buf, *(_DWORD *)(*(_QWORD *)&mSampleRate + 8 * v84));
            v89 = *(float *)(*(_QWORD *)&mSampleRate + 8 * v84 + 4);
            *(_DWORD *)block = 136315906;
            *(_QWORD *)&block[4] = "vpDebug_Logging.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 82;
            *(_WORD *)&block[18] = 2080;
            *(_QWORD *)&block[20] = buf;
            *(_WORD *)&block[28] = 2048;
            *(double *)&block[30] = v89;
            _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>          param %s: %f", block, 0x26u);
          }
        }
        v90 = (int *)*((_QWORD *)this + 1570);
        if (v90 && (v233[3437] || v233[3438]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v91 = VPLogScope(void)::scope;
          CAX4CCString::CAX4CCString((CAX4CCString *)block, *(_DWORD *)(*(_QWORD *)&mSampleRate + 8 * v84));
          CALegacyLog::log(v90, 5, v91, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 82, "LogVPDownlinkChain", "         param %s: %f", block, *(float *)(*(_QWORD *)&mSampleRate + 8 * v84 + 4));
        }
        v84 = v86;
      }
      while (v85 > v86++);
      if (mSampleRate != 0.0)
      {
LABEL_250:
        operator delete(*(void **)&mSampleRate);
        continue;
      }
    }
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v93 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v94 = (*v93 ? *v93 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
    {
      v95 = *((_QWORD *)this + 1551);
      *(_DWORD *)block = 136315906;
      *(_QWORD *)&block[4] = "vpDebug_Logging.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 87;
      *(_WORD *)&block[18] = 2080;
      *(_QWORD *)&block[20] = "(DL)-AUXVP";
      *(_WORD *)&block[28] = 2048;
      *(_QWORD *)&block[30] = v95;
      _os_log_impl(&dword_1B5ED0000, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>     %s: ON (%p)", block, 0x26u);
    }
  }
  v96 = (int *)*((_QWORD *)this + 1570);
  if (v96 && (v233[3437] || v233[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v96, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 87, "LogVPDownlinkChain", "    %s: ON (%p)", "(DL)-AUXVP", *((const void **)this + 1551));
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v97 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v98 = (*v97 ? *v97 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)block = 136315394;
      *(_QWORD *)&block[4] = "vpDebug_Logging.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 88;
      _os_log_impl(&dword_1B5ED0000, v98, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ____________logdownlinkchain:end___________", block, 0x12u);
    }
  }
  v99 = (int *)*((_QWORD *)this + 1570);
  if (v99 && (v233[3437] || v233[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v99, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 88, "LogVPDownlinkChain", "____________logdownlinkchain:end___________");
  }
  v100 = (const AudioStreamBasicDescription *)((char *)this + 328);
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), *((_DWORD *)this + 121), (AudioBufferList **)this + 199);
  v101 = (_DWORD *)*((_QWORD *)this + 199);
  if (*v101)
  {
    v102 = 0;
    v103 = (void **)(v101 + 4);
    do
    {
      bzero(*v103, *((unsigned int *)v103 - 1));
      ++v102;
      v103 += 2;
    }
    while (v102 < *v101);
  }
  myAllocABLDynamic(v100, *((_DWORD *)this + 121), (AudioBufferList **)this + 200);
  v104 = (_DWORD *)*((_QWORD *)this + 200);
  if (*v104)
  {
    v105 = 0;
    v106 = (void **)(v104 + 4);
    do
    {
      bzero(*v106, *((unsigned int *)v106 - 1));
      ++v105;
      v106 += 2;
    }
    while (v105 < *v104);
  }
  myAllocABLDynamic(v100, *((_DWORD *)this + 121), (AudioBufferList **)this + 201);
  v107 = (_DWORD *)*((_QWORD *)this + 201);
  if (*v107)
  {
    v108 = 0;
    v109 = (void **)(v107 + 4);
    do
    {
      bzero(*v109, *((unsigned int *)v109 - 1));
      ++v108;
      v109 += 2;
    }
    while (v108 < *v107);
  }
  v110 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)&v239.mSampleRate = *(_OWORD *)&v100->mSampleRate;
  *(_OWORD *)&v239.mBytesPerPacket = v110;
  *(_QWORD *)&v239.mBitsPerChannel = *((_QWORD *)this + 45);
  if ((v239.mFormatFlags & 0x20) != 0)
  {
    mChannelsPerFrame = 1;
  }
  else
  {
    mChannelsPerFrame = v239.mChannelsPerFrame;
    if (!v239.mChannelsPerFrame)
    {
      v112 = (v239.mBitsPerChannel + 7) >> 3;
      goto LABEL_299;
    }
  }
  v112 = v239.mBytesPerFrame / mChannelsPerFrame;
LABEL_299:
  v239.mBytesPerFrame = v112;
  v239.mChannelsPerFrame = 1;
  v239.mBytesPerPacket = v112;
  v239.mFramesPerPacket = 1;
  v239.mFormatFlags |= 0x20u;
  myAllocABLDynamic(&v239, *((_DWORD *)this + 129), (AudioBufferList **)this + 202);
  v113 = (_DWORD *)*((_QWORD *)this + 202);
  if (*v113)
  {
    v114 = 0;
    v115 = (void **)(v113 + 4);
    do
    {
      bzero(*v115, *((unsigned int *)v115 - 1));
      ++v114;
      v115 += 2;
    }
    while (v114 < *v113);
  }
  myAllocABLDynamic(v100, *((_DWORD *)this + 129), (AudioBufferList **)this + 203);
  v116 = (_DWORD *)*((_QWORD *)this + 203);
  if (*v116)
  {
    v117 = 0;
    v118 = (void **)(v116 + 4);
    do
    {
      bzero(*v118, *((unsigned int *)v118 - 1));
      ++v117;
      v118 += 2;
    }
    while (v117 < *v116);
  }
  VoiceProcessorV2::SaveFilesInitializeDLP(this);
  if (v233[3437])
  {
    v119 = this;
    if (*((_DWORD *)this + 153))
    {
      if (*((_DWORD *)this + 1127) == 1)
      {
        myAllocABLDynamic(v229, *((_DWORD *)this + 123), (AudioBufferList **)this + 1892);
        v119 = this;
      }
      if (*((_BYTE *)v119 + 477))
        VoiceProcessorV2::OpenSignalInjectionFiles(this, 0);
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v120 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v121 = (*v120 ? *v120 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
        {
          v122 = *((_DWORD *)this + 153);
          *(_DWORD *)block = 136315650;
          *(_QWORD *)&block[4] = "vpDebug_FileInjection.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 111;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v122;
          _os_log_impl(&dword_1B5ED0000, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Failed to initialize downlink injection files due to unsupported format, mHwRefASBD.mChannelsPerFrame=%u", block, 0x18u);
        }
      }
      v123 = (int *)*((_QWORD *)this + 1570);
      if (v123 && (v233[3437] || v233[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v123, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 111, "InjectionFilesInitializeDLP", "Failed to initialize downlink injection files due to unsupported format, mHwRefASBD.mChannelsPerFrame=%u", *((_DWORD *)this + 153));
      }
    }
  }
  if (!*(_QWORD *)v230)
  {
    v128 = (std::__shared_weak_count *)operator new(0x68uLL);
    *(_OWORD *)&v128->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v128->__shared_owners_;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69CF588;
    v128[1].std::__shared_count = 0u;
    v128[1].__shared_weak_owners_ = (uint64_t)dispatch_queue_create("com.apple.SpeakerPowerQueueVP", 0);
    v128[2].std::__shared_count = 0u;
    *(_OWORD *)&v128[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v128[3].__shared_owners_ = 0u;
    LOBYTE(v128[4].__vftable) = 1;
    *(_QWORD *)&v130 = v128 + 1;
    *((_QWORD *)&v130 + 1) = v128;
    shared_owners = (std::__shared_weak_count *)v128[1].__shared_owners_;
    if (shared_owners)
    {
      if (shared_owners->__shared_owners_ != -1)
      {
LABEL_349:
        v139 = (std::__shared_weak_count *)*((_QWORD *)this + 1990);
        *v230 = v130;
        if (v139)
        {
          v140 = (unint64_t *)&v139->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        goto LABEL_327;
      }
      do
        v132 = __ldxr(p_shared_owners);
      while (__stxr(v132 + 1, p_shared_owners));
      v231 = v130;
      p_shared_weak_owners = (unint64_t *)&v128->__shared_weak_owners_;
      do
        v134 = __ldxr(p_shared_weak_owners);
      while (__stxr(v134 + 1, p_shared_weak_owners));
      v128[1].__vftable = (std::__shared_weak_count_vtbl *)&v128[1];
      v128[1].__shared_owners_ = (uint64_t)v128;
      std::__shared_weak_count::__release_weak(shared_owners);
      v130 = v231;
    }
    else
    {
      do
        v135 = __ldxr(p_shared_owners);
      while (__stxr(v135 + 1, p_shared_owners));
      v136 = (unint64_t *)&v128->__shared_weak_owners_;
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
      v128[1].__vftable = (std::__shared_weak_count_vtbl *)&v128[1];
      v128[1].__shared_owners_ = (uint64_t)v128;
    }
    do
      v138 = __ldaxr(p_shared_owners);
    while (__stlxr(v138 - 1, p_shared_owners));
    if (!v138)
    {
      v232 = v130;
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
      v130 = v232;
    }
    goto LABEL_349;
  }
LABEL_327:
  if ((*((_BYTE *)this + 8839) & 1) == 0 || (*((_BYTE *)this + 8847) & 1) == 0)
  {
    v124 = *(PowerLogManager **)v230;
    goto LABEL_330;
  }
  v124 = (PowerLogManager *)*((_QWORD *)this + 1989);
  if (*((_QWORD *)this + 493))
    PowerLogManager::SetPowerVendor(v124, (OpaqueAudioComponentInstance **)this + 493, 1936748595);
  else
LABEL_330:
    PowerLogManager::SetPowerVendor(v124, 0, 0);
  v125 = *(_QWORD *)v230;
  if (PowerLogManagerLogScope(void)::once != -1)
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_16853);
  v126 = MEMORY[0x1E0C81028];
  if (PowerLogManagerLogScope(void)::scope)
  {
    v127 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(_QWORD *)PowerLogManagerLogScope(void)::scope)
      goto LABEL_357;
  }
  else
  {
    v127 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)block = 136315394;
    *(_QWORD *)&block[4] = "PowerLogManager.cpp";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 285;
    _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_DEBUG, "%25s:%-5d will begin speaker power tracking...", block, 0x12u);
  }
LABEL_357:
  v142 = *(NSObject **)(v125 + 16);
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = ___ZN15PowerLogManager18BeginPowerTrackingEv_block_invoke;
  *(_QWORD *)&block[24] = &__block_descriptor_tmp_7_16869;
  *(_QWORD *)&block[32] = v125;
  dispatch_sync(v142, block);
  (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 248))(this);
  v144 = this;
  if ((*((_BYTE *)this + 8838) & 4) == 0)
    goto LABEL_491;
  if (!*((_QWORD *)this + 487))
    goto LABEL_491;
  HeadsetSensitivity = VoiceProcessorV2::GetHeadsetSensitivity((int **)this);
  AudioUnitSetParameter(*((AudioUnit *)this + 487), 1u, 0, 0, HeadsetSensitivity, 0);
  RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID((int **)this);
  v144 = this;
  if (!HIDWORD(RefPortOwningDeviceID))
    goto LABEL_491;
  memset(buf, 0, 24);
  outData = 0;
  v244 = 0uLL;
  v147 = **((_DWORD **)this + 292);
  if (v147 == 1885892674 || v147 == 1885892706)
  {
    cf = 0;
    ioDataSize[0] = 8;
    __p = (void *)0x676C6F62646F7663;
    LODWORD(v246) = 0;
    if (AudioObjectGetPropertyData(RefPortOwningDeviceID, (const AudioObjectPropertyAddress *)&__p, 0, 0, ioDataSize, &cf))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v148 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v149 = (*v148 ? *v148 : v126);
        if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136315394;
          *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 879;
          _os_log_impl(&dword_1B5ED0000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> [VolumeLimit] failed to get volume curve", block, 0x12u);
        }
      }
      v150 = (int *)*((_QWORD *)this + 1570);
      if (v150 && (v233[3437] || v233[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v150, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 879, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] failed to get volume curve");
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v151 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v152 = (*v151 ? *v151 : v126);
        if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)block = 136315394;
          *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 901;
          _os_log_impl(&dword_1B5ED0000, v152, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> [VolumeLimit] Creating volume curves", block, 0x12u);
        }
      }
      v153 = (int *)*((_QWORD *)this + 1570);
      if (v153 && (v233[3437] || v233[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v153, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 901, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] Creating volume curves");
      }
      v154 = *((_DWORD *)this + 596);
      if (v154 != 1634231920 && v154 != 1633759844)
      {
        std::vector<float>::vector(block, 2uLL);
        **(_QWORD **)block = 0x40000000C2980000;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        *(_QWORD *)buf = *(_QWORD *)block;
        *(_OWORD *)&buf[8] = *(_OWORD *)&block[8];
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&outData, *(char **)block, *(uint64_t *)&block[8], (uint64_t)(*(_QWORD *)&block[8] - *(_QWORD *)block) >> 2);
        goto LABEL_457;
      }
      v253 = 0;
      *(_OWORD *)block = xmmword_1B664D278;
      *(_OWORD *)&block[16] = unk_1B664D288;
      *(_OWORD *)&block[32] = xmmword_1B664D298;
      v252 = unk_1B664D2A8;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&outData, block, (uint64_t)v254, 0x11uLL);
      v155 = v244 - (_QWORD)outData;
      v156 = (((_QWORD)v244 - (_QWORD)outData) >> 2);
      std::vector<float>::vector(block, v156);
      if ((v155 >> 2))
      {
        v158 = 0;
        *(float *)v157.i32 = 78.0 / (float)((v155 >> 2) - 1);
        v159 = (uint64x2_t)vdupq_n_s64(v156 - 1);
        v160 = (float32x2_t)vdup_n_s32(0xC2980000);
        v161 = vdupq_n_s64(2uLL);
        v162 = (int64x2_t)xmmword_1B6626830;
        v163 = *(_QWORD *)block;
        v164 = (float32x2_t)vdup_lane_s32(v157, 0);
        do
        {
          v165 = vmovn_s64((int64x2_t)vcgeq_u64(v159, (uint64x2_t)v162));
          v166.i32[0] = v158;
          v166.i32[1] = v158 + 1;
          v167 = vmla_f32(v160, v164, vcvt_f32_u32(v166));
          if ((v165.i8[0] & 1) != 0)
            *(_DWORD *)(v163 + 4 * v158) = v167.i32[0];
          if ((v165.i8[4] & 1) != 0)
            *(_DWORD *)(v163 + 4 * v158 + 4) = v167.i32[1];
          v158 += 2;
          v162 = vaddq_s64(v162, v161);
        }
        while (((v156 + 1) & 0x1FFFFFFFELL) != v158);
      }
    }
    else
    {
      v172 = cf;
      if (cf)
        CFRetain(cf);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&CFArray, v172);
      if (!CFArray)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::vector<float>,0>((uint64_t)block, CFArray);
      if (outData)
      {
        *(_QWORD *)&v244 = outData;
        operator delete(outData);
      }
      outData = *(void **)block;
      v244 = *(_OWORD *)&block[8];
      v173 = (*(_QWORD *)&block[8] - *(_QWORD *)block) >> 2;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v174 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v175 = (*v174 ? *v174 : v126);
        if (os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)block = 136315650;
          *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 877;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v173;
          _os_log_impl(&dword_1B5ED0000, v175, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> [VolumeLimit] number of volume map steps: %u", block, 0x18u);
        }
      }
      v176 = (int *)*((_QWORD *)this + 1570);
      if (v176 && (v233[3437] || v233[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v176, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 877, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] number of volume map steps: %u", v173);
      }
      if (CFArray)
        CFRelease(CFArray);
      std::vector<float>::vector(block, v173);
      if ((_DWORD)v173)
      {
        v178 = 0;
        *(float *)v177.i32 = 78.0 / (float)(v173 - 1);
        v179 = (uint64x2_t)vdupq_n_s64((unint64_t)v173 - 1);
        v180 = (float32x2_t)vdup_n_s32(0xC2980000);
        v181 = vdupq_n_s64(2uLL);
        v182 = (int64x2_t)xmmword_1B6626830;
        v183 = *(_QWORD *)block;
        v184 = (float32x2_t)vdup_lane_s32(v177, 0);
        do
        {
          v185 = vmovn_s64((int64x2_t)vcgeq_u64(v179, (uint64x2_t)v182));
          v186.i32[0] = v178;
          v186.i32[1] = v178 + 1;
          v187 = vmla_f32(v180, v184, vcvt_f32_u32(v186));
          if ((v185.i8[0] & 1) != 0)
            *(_DWORD *)(v183 + 4 * v178) = v187.i32[0];
          if ((v185.i8[4] & 1) != 0)
            *(_DWORD *)(v183 + 4 * v178 + 4) = v187.i32[1];
          v178 += 2;
          v182 = vaddq_s64(v182, v181);
        }
        while (((v173 + 1) & 0x1FFFFFFFELL) != v178);
      }
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    *(_OWORD *)buf = *(_OWORD *)block;
    *(_QWORD *)&buf[16] = *(_QWORD *)&block[16];
LABEL_457:
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v188 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v189 = (*v188 ? *v188 : v126);
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)block = 136315394;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 929;
        _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] Setting volume curves", block, 0x12u);
      }
    }
    v190 = (int *)*((_QWORD *)this + 1570);
    if (v190 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v190, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 929, "SetVolumeCurveForVolumeLimit", "[VolumeLimit] Setting volume curves");
    }
    CFArray = applesauce::CF::details::make_CFArrayRef<float>(buf);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)block, "InputMap", &CFArray);
    v191 = applesauce::CF::details::make_CFArrayRef<float>(&outData);
    *(_QWORD *)ioDataSize = v191;
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&block[16], "OutputMap");
    if (v191)
      CFRetain(v191);
    *(_QWORD *)&block[24] = v191;
    __p = block;
    v246 = 2;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
    v193 = 0;
    cf = CFDictionaryRef;
    do
    {
      v194 = *(const void **)&block[v193 + 24];
      if (v194)
        CFRelease(v194);
      v195 = *(const void **)&block[v193 + 16];
      if (v195)
        CFRelease(v195);
      v193 -= 16;
    }
    while (v193 != -32);
    if (v191)
      CFRelease(v191);
    if (CFArray)
      CFRelease(CFArray);
    *(_QWORD *)block = CFDictionaryRef;
    AudioUnitSetProperty(*((AudioUnit *)this + 487), 0xFA01u, 0, 0, block, 8u);
    if (CFDictionaryRef)
      CFRelease(CFDictionaryRef);
    goto LABEL_486;
  }
  if (v147 == 1885892727)
  {
    *(_QWORD *)block = 0x40000000C2980000;
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(buf, block, (uint64_t)&block[8], 2uLL);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&outData, *(char **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
    goto LABEL_457;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v168 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v169 = (*v168 ? *v168 : v126);
    if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&__p, **((_DWORD **)this + 292));
      *(_DWORD *)block = 136315650;
      *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 923;
      *(_WORD *)&block[18] = 2080;
      *(_QWORD *)&block[20] = &__p;
      _os_log_impl(&dword_1B5ED0000, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Unsupported port type: %s", block, 0x1Cu);
    }
  }
  v170 = (int *)*((_QWORD *)this + 1570);
  if (v170 && (v233[3437] || v233[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v171 = VPLogScope(void)::scope;
    CAX4CCString::CAX4CCString((CAX4CCString *)block, **((_DWORD **)this + 292));
    CALegacyLog::log(v170, 1, v171, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 923, "SetVolumeCurveForVolumeLimit", "Unsupported port type: %s", block);
  }
LABEL_486:
  if (outData)
  {
    *(_QWORD *)&v244 = outData;
    operator delete(outData);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v144 = this;
LABEL_491:
  if ((*((_BYTE *)v144 + 8837) & 0x20) != 0 && *((_QWORD *)v144 + 482))
  {
    v196 = VoiceProcessorV2::GetHeadsetSensitivity((int **)v144);
    AudioUnitSetParameter(*((AudioUnit *)this + 482), 0x18u, 0, 0, v196, 0);
    AudioUnitSetParameter(*((AudioUnit *)this + 482), 0x1Au, 0, 0, 2.0, 0);
    OutputPortProductIDForPME = VoiceProcessorV2::GetOutputPortProductIDForPME(this);
    if (OutputPortProductIDForPME)
      AudioUnitSetParameter(*((AudioUnit *)this + 482), 0x1Bu, 0, 0, (float)OutputPortProductIDForPME, 0);
    v144 = this;
    if (v233[3437])
    {
      VoiceProcessorV2::GetRefPortUIDForPME((VoiceProcessorV2 *)&outData, this);
      v198 = (NSString *)outData;
      if (outData)
        CFRetain(outData);
      v237 = v198;
      if (va::PersonalAudioInterface::isPersonalMediaEnabled(&v237))
      {
        v199 = (NSString *)outData;
        if (outData)
          CFRetain(outData);
        v236 = v199;
        va::PersonalAudioInterface::getPreset((applesauce::CF::DictionaryRef *)&__p, &v236);
        if (v199)
          CFRelease(v199);
      }
      else
      {
        va::PersonalAudioInterface::getPreset((va::PersonalAudioInterface *)&__p);
      }
      if (v198)
        CFRelease(v198);
      v200 = __p;
      if (__p)
      {
        CFRetain(__p);
        cf = v200;
        applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)block, "hlc_paconfig", &cf);
        ioDataSize[0] = OutputPortProductIDForPME;
        v201 = CFNumberCreate(0, kCFNumberIntType, ioDataSize);
        CFArray = v201;
        if (!v201)
        {
          v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v225, "Could not construct");
        }
        v202 = applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)&block[16], "hlc_headset", &CFArray);
        LODWORD(valuePtr) = va::PersonalAudioInterface::isPersonalMediaEnabled(v202);
        v203 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        *(_QWORD *)ioDataSize = v203;
        if (!v203)
        {
          v226 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v226, "Could not construct");
        }
        applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)&block[32], "hlc_enable", (const void **)ioDataSize);
        v238 = v196;
        v204 = CFNumberCreate(0, kCFNumberFloatType, &v238);
        valuePtr = v204;
        if (!v204)
        {
          v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v227, "Could not construct");
        }
        applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>((applesauce::CF::TypeRef *)&v252, "hlc_sensitivity", (const void **)&valuePtr);
        *(_QWORD *)buf = block;
        *(_QWORD *)&buf[8] = 4;
        v205 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)buf);
        v206 = (const void *)*((_QWORD *)this + 279);
        *((_QWORD *)this + 279) = v205;
        if (v206)
          CFRelease(v206);
        for (j = 0; j != -64; j -= 16)
        {
          v208 = *(const void **)((char *)&v252 + j + 8);
          if (v208)
            CFRelease(v208);
          v209 = *(const void **)&block[j + 48];
          if (v209)
            CFRelease(v209);
        }
        CFRelease(v204);
        CFRelease(v203);
        CFRelease(v201);
        if (cf)
          CFRelease(cf);
        if (v233[3437])
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1751933808);
        v210 = (const void *)*((_QWORD *)this + 279);
        *((_QWORD *)this + 279) = 0;
        if (v210)
          CFRelease(v210);
        if (__p)
          CFRelease(__p);
      }
      if (outData)
        CFRelease(outData);
      v144 = this;
    }
  }
  v211 = *((_QWORD *)v144 + 1104);
  if ((v211 & 0x200000000000) != 0 && *((_QWORD *)this + 482)
    || (v211 & 0x4000000000000) != 0 && *((_QWORD *)this + 487))
  {
    v212 = VoiceProcessorV2::GetRefPortOwningDeviceID((int **)this);
    if (HIDWORD(v212))
    {
      v213 = v212;
      strcpy(buf, "dlovptuo");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(outData) = 4;
      LODWORD(__p) = 0;
      if (AudioObjectGetPropertyData(v212, (const AudioObjectPropertyAddress *)buf, 0, 0, (UInt32 *)&outData, &__p)
        && (**((_DWORD **)this + 292) != 1885892727
         || (*(_QWORD *)block = 0x6F757470766F6C64,
             *(_DWORD *)&block[8] = 1,
             LODWORD(cf) = 4,
             LODWORD(CFArray) = 0,
             AudioObjectGetPropertyData(v213, (const AudioObjectPropertyAddress *)block, 0, 0, (UInt32 *)&cf, &CFArray))))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v214 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v215 = (*v214 ? *v214 : v126);
          if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)block = 136315394;
            *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 705;
            _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error reading Hardware Volume!", block, 0x12u);
          }
        }
        v216 = (int *)*((_QWORD *)this + 1570);
        if (v216 && (v233[3437] || v233[3438]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v216, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 705, "GetHardwareVolume", "Error reading Hardware Volume!");
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v217 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          v218 = (*v217 ? *v217 : v126);
          if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)block = 136315906;
            *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 702;
            *(_WORD *)&block[18] = 2048;
            *(double *)&block[20] = *(float *)&__p;
            *(_WORD *)&block[28] = 1024;
            *(_DWORD *)&block[30] = v213;
            _os_log_impl(&dword_1B5ED0000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> HW Volume in %f dB from DeviceID %u !", block, 0x22u);
          }
        }
        v219 = (int *)*((_QWORD *)this + 1570);
        if (v219 && (v233[3437] || v233[3438]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v219, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 702, "GetHardwareVolume", "HW Volume in %f dB from DeviceID %u !", *(float *)&__p, v213);
        }
        (*(void (**)(VoiceProcessorV2 *, uint64_t, void **, uint64_t))(*(_QWORD *)this + 56))(this, 32797, &__p, 4);
      }
    }
  }
  buf[0] = 0;
  VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_disable_oaugain"), 0, buf, 0, v143);
  if (buf[0])
  {
    *((_QWORD *)this + 557) = 3259498496;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v220 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v221 = (*v220 ? *v220 : v126);
      if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
      {
        v222 = *((float *)this + 1114);
        v223 = *((float *)this + 1115);
        *(_DWORD *)block = 136315906;
        *(_QWORD *)&block[4] = "vpInitializeDownlink.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 518;
        *(_WORD *)&block[18] = 2048;
        *(double *)&block[20] = v222;
        *(_WORD *)&block[28] = 2048;
        *(double *)&block[30] = v223;
        _os_log_impl(&dword_1B5ED0000, v221, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Re-set mix gain range to [%f, %f]dB", block, 0x26u);
      }
    }
    v224 = (int *)*((_QWORD *)this + 1570);
    if (v224 && (v233[3437] || v233[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v224, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 518, "InitializeDLP", "Re-set mix gain range to [%f, %f]dB", *((float *)this + 1114), *((float *)this + 1115));
    }
  }
}

void sub_1B62B867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (__p)
    operator delete(__p);
  if (a54)
    operator delete(a54);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

float VoiceProcessorV2::GetHeadsetSensitivity(int **this)
{
  char *v2;
  unint64_t RefPortOwningDeviceID;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  NSObject *v10;
  int *v11;
  _QWORD *v13;
  NSObject *v14;
  int *v15;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  float outData;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _DWORD v24[7];

  *(_QWORD *)&v24[5] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 15897;
  outData = 105.0;
  RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID(this);
  if (!HIDWORD(RefPortOwningDeviceID)
    || (v4 = RefPortOwningDeviceID,
        *(_QWORD *)&inAddress.mSelector = 0x676C6F62646F7365,
        inAddress.mElement = 0,
        ioDataSize = 4,
        AudioObjectGetPropertyData(RefPortOwningDeviceID, &inAddress, 0, 0, &ioDataSize, &outData))
    || (outData > 50.0 ? (v5 = outData < 150.0) : (v5 = 0), !v5))
  {
    v6 = *((_DWORD *)this + 596);
    if (v6 <= 1647521841)
    {
      if (v6 <= 1633759843)
      {
        if (v6 == 1214329654)
          goto LABEL_23;
        v8 = 1214394677;
      }
      else
      {
        if (v6 == 1633759844 || v6 == 1634231920)
          goto LABEL_23;
        v8 = 1647393080;
      }
    }
    else
    {
      if (v6 <= 1647718502)
      {
        if (v6 == 1647521842)
          goto LABEL_40;
        if (v6 != 1647522096)
        {
          if (v6 == 1647718502)
          {
            v7 = 1120980173;
LABEL_24:
            outData = *(float *)&v7;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v9 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              v10 = (*v9 ? *v9 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                v20 = "vpInitializeDownlink.cpp";
                v21 = 1024;
                v22 = 839;
                v23 = 2048;
                *(double *)v24 = outData;
                _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Unable to read sensitivity from device setting default (%f)", buf, 0x1Cu);
              }
            }
            v11 = this[1570];
            if (v11 && (*v2 || v2[1]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 839, "GetHeadsetSensitivity", "Unable to read sensitivity from device setting default (%f)");
            }
            return outData;
          }
LABEL_40:
          v7 = 1121058816;
          goto LABEL_24;
        }
LABEL_23:
        v7 = 1120403456;
        goto LABEL_24;
      }
      if (v6 == 1647718503)
      {
        v7 = 1121045709;
        goto LABEL_24;
      }
      if (v6 == 1752709424)
        goto LABEL_23;
      v8 = 2003068262;
    }
    if (v6 != v8)
      goto LABEL_40;
    goto LABEL_23;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v13 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v14 = (*v13 ? *v13 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v20 = "vpInitializeDownlink.cpp";
      v21 = 1024;
      v22 = 789;
      v23 = 1024;
      v24[0] = v4;
      LOWORD(v24[1]) = 2048;
      *(double *)((char *)&v24[1] + 2) = outData;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Sensitivity from device(%u) = %f", buf, 0x22u);
    }
  }
  v15 = this[1570];
  if (v15 && (*v2 || v2[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v15, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 789, "GetHeadsetSensitivity", "Sensitivity from device(%u) = %f");
  }
  return outData;
}

unint64_t VoiceProcessorV2::GetOutputPortProductIDForPME(VoiceProcessorV2 *this)
{
  unint64_t result;
  unint64_t RefPortOwningDeviceID;
  unsigned int v4;
  uint64_t v5;
  OSStatus PropertyData;
  OSStatus v7;
  _QWORD *v8;
  NSObject *v9;
  int *v10;
  unint64_t v11;
  int *v12;
  AudioObjectPropertyAddress inAddress;
  OSStatus outData;
  UInt32 ioDataSize;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  OSStatus v20;
  __int16 v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 596) >> 1 == 823859251)
    return 8210;
  if ((**((_DWORD **)this + 292) | 0x20) != 0x70687062)
    return 0;
  result = VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct((int **)this);
  if ((_DWORD)result)
  {
    outData = 0;
    RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID((int **)this);
    v4 = RefPortOwningDeviceID;
    if (HIDWORD(RefPortOwningDeviceID))
    {
      *(_QWORD *)&inAddress.mSelector = 0x676C6F6262616964;
      inAddress.mElement = 0;
      ioDataSize = 4;
      PropertyData = AudioObjectGetPropertyData(RefPortOwningDeviceID, &inAddress, 0, 0, &ioDataSize, &outData);
      if (PropertyData)
      {
        v7 = PropertyData;
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v8 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v9 = (*v8 ? *v8 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            ioDataSize = 136315906;
            v16 = "vpInitializeDownlink.cpp";
            v17 = 1024;
            v18 = 679;
            v19 = 1024;
            v20 = v7;
            v21 = 1024;
            v22 = v4;
            _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting Bluetooth product ID for reference device %u", (uint8_t *)&ioDataSize, 0x1Eu);
          }
        }
        v10 = (int *)*((_QWORD *)this + 1570);
        if (v10 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
          {
            v12 = (int *)*((_QWORD *)this + 1570);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v10 = v12;
          }
          CALegacyLog::log(v10, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 679, "GetRefPortOwningDeviceBluetoothProductID", "error %d getting Bluetooth product ID for reference device %u", v7, v4);
        }
        v5 = 0;
      }
      else
      {
        v5 = 0x100000000;
        v7 = outData;
      }
      v4 = v7;
    }
    else
    {
      v5 = 0x100000000;
    }
    v11 = v5 & 0x100000000 | v4;
    if (v11 <= 0x100000000)
      return 0x100000000;
    else
      return v11;
  }
  return result;
}

unint64_t VoiceProcessorV2::GetRefPortUIDForPME(VoiceProcessorV2 *this, VoiceProcessorV2 *a2)
{
  unint64_t result;
  AudioObjectPropertyAddress v4;
  CFTypeRef outData;
  UInt32 ioDataSize;

  result = VoiceProcessorV2::GetRefPortID(a2);
  if (HIDWORD(result))
  {
    outData = 0;
    *(_QWORD *)&v4.mSelector = 0x6F75747070756964;
    v4.mElement = 0;
    ioDataSize = 8;
    result = AudioObjectGetPropertyData(result, &v4, 0, 0, &ioDataSize, &outData);
    if (!(_DWORD)result)
      return (unint64_t)applesauce::CF::StringRef::StringRef(this, outData);
  }
  *(_QWORD *)this = 0;
  return result;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::NumberRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

uint64_t VoiceProcessorV2::GetRefPortOwningDeviceID(int **this)
{
  unint64_t RefPortID;
  unsigned int v3;
  uint64_t v4;
  OSStatus PropertyData;
  OSStatus v6;
  _QWORD *v7;
  NSObject *v8;
  int *v9;
  int *v11;
  AudioObjectPropertyAddress inAddress;
  OSStatus outData;
  UInt32 ioDataSize;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  OSStatus v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  outData = 0;
  RefPortID = VoiceProcessorV2::GetRefPortID((VoiceProcessorV2 *)this);
  v3 = RefPortID;
  if (HIDWORD(RefPortID))
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F62706F776ELL;
    inAddress.mElement = 0;
    ioDataSize = 4;
    PropertyData = AudioObjectGetPropertyData(RefPortID, &inAddress, 0, 0, &ioDataSize, &outData);
    if (PropertyData)
    {
      v6 = PropertyData;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v7 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          ioDataSize = 136315906;
          v15 = "vpInitializeDownlink.cpp";
          v16 = 1024;
          v17 = 649;
          v18 = 1024;
          v19 = v6;
          v20 = 1024;
          v21 = v3;
          _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting owning device ID for reference port %u", (uint8_t *)&ioDataSize, 0x1Eu);
        }
      }
      v9 = this[1570];
      if (v9 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
        {
          v11 = this[1570];
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v9 = v11;
        }
        CALegacyLog::log(v9, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 649, "GetRefPortOwningDeviceID", "error %d getting owning device ID for reference port %u", v6, v3);
      }
      v4 = 0;
    }
    else
    {
      v4 = 0x100000000;
      v6 = outData;
    }
    v3 = v6;
  }
  else
  {
    v4 = 0x100000000;
  }
  return v4 & 0x100000000 | v3;
}

uint64_t VoiceProcessorV2::GetRefPortID(VoiceProcessorV2 *this)
{
  AudioObjectID v2;
  const void *v3;
  unsigned int PropertyData;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  int *v8;
  uint64_t v9;
  const __CFArray *v10;
  CFTypeID v11;
  unint64_t v12;
  AudioObjectPropertyAddress inAddress;
  const __CFArray *outData;
  UInt32 ioDataSize;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747064637073;
  inAddress.mElement = 0;
  v2 = *((_DWORD *)this + 284);
  v3 = (const void *)*((_QWORD *)this + 292);
  ioDataSize = 8;
  PropertyData = AudioObjectGetPropertyData(v2, &inAddress, 4u, v3, &ioDataSize, &outData);
  if (!PropertyData)
  {
    v10 = outData;
    if (outData)
    {
      v11 = CFGetTypeID(outData);
      if (v11 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v10))
        {
          v12 = applesauce::CF::details::at_as<unsigned int>(v10, 0);
          if ((v12 & 0xFF00000000) != 0)
            PropertyData = v12;
          else
            PropertyData = 0;
        }
        else
        {
          PropertyData = 0;
        }
        CFRelease(v10);
        goto LABEL_28;
      }
      CFRelease(v10);
    }
    PropertyData = 0;
LABEL_28:
    v9 = 0x100000000;
    return v9 | PropertyData;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v5 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v6 = (*v5 ? *v5 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *((_DWORD *)this + 284);
      ioDataSize = 136315906;
      v17 = "vpInitializeDownlink.cpp";
      v18 = 1024;
      v19 = 621;
      v20 = 1024;
      v21 = PropertyData;
      v22 = 1024;
      v23 = v7;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting port ID for reference device %u", (uint8_t *)&ioDataSize, 0x1Eu);
    }
  }
  v8 = (int *)*((_QWORD *)this + 1570);
  if (v8 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 621, "GetRefPortID", "error %d getting port ID for reference device %u", PropertyData, *((_DWORD *)this + 284));
  }
  v9 = 0;
  return v9 | PropertyData;
}

void sub_1B62B9A44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct(int **this)
{
  unint64_t RefPortOwningDeviceID;
  uint64_t v2;
  BOOL v3;
  AudioObjectPropertyAddress inAddress;
  int outData;
  UInt32 ioDataSize;

  outData = 0;
  RefPortOwningDeviceID = VoiceProcessorV2::GetRefPortOwningDeviceID(this);
  v2 = 0;
  if (HIDWORD(RefPortOwningDeviceID))
  {
    *(_QWORD *)&inAddress.mSelector = 0x676C6F6269616170;
    inAddress.mElement = 0;
    ioDataSize = 4;
    if (AudioObjectGetPropertyData(RefPortOwningDeviceID, &inAddress, 0, 0, &ioDataSize, &outData))
      v3 = 1;
    else
      v3 = outData == 0;
    return !v3;
  }
  return v2;
}

void std::__shared_ptr_emplace<PowerLogManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69CF588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PowerLogManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69CF588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<PowerLogManager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
        CACFDictionary::~CACFDictionary((CACFDictionary *)(v3 - 16));
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t VoiceProcessorV2::InitializeSpeakerTelemetryInput(VoiceProcessorV2 *this, const AudioStreamBasicDescription *a2, int a3)
{
  char *v6;
  char *v7;
  int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  NSObject *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  void *v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 12504;
  v7 = (char *)this + 2392;
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 299) + 16))((char *)this + 2392);
  v10 = (unsigned int *)((char *)this + 2480);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v12 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v13 = (*v12 ? *v12 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v24, a2);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpInitializeDownlink.cpp";
      v26 = 1024;
      v27 = 272;
      v28 = 2080;
      v29 = v24;
      v30 = 1024;
      v31 = a3;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initspkrtel: asbd = %s, blksz = %d", buf, 0x22u);
      if (v24)
        free(v24);
    }
  }
  v14 = (int *)*((_QWORD *)this + 1570);
  if (v14 && (v6[3393] || v6[3394]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v15 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, a2);
    CALegacyLog::log(v14, 5, v15, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeDownlink.cpp", 272, "InitializeSpeakerTelemetryInput", "initspkrtel: asbd = %s, blksz = %d", *(const char **)buf, a3);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  if (v6[3393])
  {
    if (*v6)
    {
      LODWORD(v9) = *((_DWORD *)this + 382);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1562) - (double)v9, *((double *)this + 1562) - (double)v9, 3);
    }
    *v6 = 0;
  }
  v16 = *(_QWORD *)&a2->mBitsPerChannel;
  v17 = *(_OWORD *)&a2->mSampleRate;
  *((_OWORD *)this + 94) = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 190) = v16;
  *((_OWORD *)this + 93) = v17;
  *((_DWORD *)this + 382) = a3;
  v18 = *((_DWORD *)this + 379);
  *((_DWORD *)this + 384) = 5 * a3;
  *((_DWORD *)this + 385) = v18;
  *((_DWORD *)this + 388) = 0;
  *((_QWORD *)this + 193) = 0;
  v19 = (void *)*((_QWORD *)this + 195);
  v20 = *((_QWORD *)this + 196) - (_QWORD)v19;
  v21 = (v18 * 5 * a3);
  if (v21 == v20 >> 2)
  {
    if (v20 >= 1)
      bzero(v19, 4 * (((unint64_t)v20 >> 2) - ((unint64_t)v20 > 3)) + 4);
  }
  else
  {
    std::valarray<float>::resize((uint64_t)this + 1560, v21, 0.0);
    a3 = *((_DWORD *)this + 382);
  }
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 1488), a3, (AudioBufferList **)this + 197);
  *((_BYTE *)this + 478) = 1;
  if (*((_DWORD *)this + 3144))
    VoiceProcessorV2::CreateSignalSaveFiles(this, 3);
  if (v6[3393] || v6[3394])
    VoiceProcessorV2::PListWriteInitializeSpkrTelParameters(this);
  do
    v22 = __ldaxr(v10);
  while (__stlxr(v22 - 1, v10));
  if (v8)
    (*(void (**)(char *))(*(_QWORD *)v7 + 24))(v7);
  return 0;
}

void sub_1B62B9EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v17;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::GetRefPortHLC2chStateForPME(VoiceProcessorV2 *this)
{
  unint64_t RefPortID;
  AudioObjectPropertyAddress inAddress;
  unsigned int outData;
  UInt32 ioDataSize;

  RefPortID = VoiceProcessorV2::GetRefPortID(this);
  if (!HIDWORD(RefPortID))
    return 0;
  *(_QWORD *)&inAddress.mSelector = 0x6F75747073706D65;
  inAddress.mElement = 0;
  outData = 0;
  ioDataSize = 4;
  if (AudioObjectGetPropertyData(RefPortID, &inAddress, 0, 0, &ioDataSize, &outData))
    return 0;
  else
    return outData;
}

void AUMultiChanEchoCanceler::~AUMultiChanEchoCanceler(AUMultiChanEchoCanceler *this)
{
  AUMultiChanEchoCanceler::~AUMultiChanEchoCanceler(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;

  *(_QWORD *)this = &off_1E69CF5C0;
  AUMultiChanEchoCanceler::Cleanup(this);
  v2 = (_BYTE *)*((_QWORD *)this + 93);
  if (v2)
  {
    v3 = (_BYTE *)*((_QWORD *)this + 94);
    if (v3 != v2)
      *((_QWORD *)this + 94) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *((_QWORD *)this + 93) = 0;
    *((_QWORD *)this + 94) = 0;
  }
  v4 = (_BYTE *)*((_QWORD *)this + 91);
  if (v4)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 92);
    if (v5 != v4)
      *((_QWORD *)this + 92) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v4);
    *((_QWORD *)this + 91) = 0;
    *((_QWORD *)this + 92) = 0;
  }
  v6 = (_BYTE *)*((_QWORD *)this + 89);
  if (v6)
  {
    v7 = (_BYTE *)*((_QWORD *)this + 90);
    if (v7 != v6)
      *((_QWORD *)this + 90) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v6);
    *((_QWORD *)this + 89) = 0;
    *((_QWORD *)this + 90) = 0;
  }
  v8 = (_BYTE *)*((_QWORD *)this + 87);
  if (v8)
  {
    v9 = (_BYTE *)*((_QWORD *)this + 88);
    if (v9 != v8)
      *((_QWORD *)this + 88) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v8);
    *((_QWORD *)this + 87) = 0;
    *((_QWORD *)this + 88) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUMultiChanEchoCanceler::Initialize(AUMultiChanEchoCanceler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t Element;
  unsigned int v8;
  uint64_t v9;
  double v10;
  uint64_t v12;
  ausdk::AUElement *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  ausdk::AUElement *v17;
  _QWORD *v18;
  float Parameter;
  uint64_t v20;
  ausdk::AUElement *v21;
  _QWORD *v22;
  unsigned int v23;
  float v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  _QWORD *v27;
  float v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  uint64_t v37;
  ausdk::AUElement *v38;
  ausdk::AUElement **v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  int v43;
  int v44;
  size_t v45;
  void *v46;
  void *v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  ausdk::AUElement **v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  ausdk::AUElement **v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  ausdk::AUElement **v64;
  uint64_t v65;
  ausdk::AUElement *v66;
  ausdk::AUElement **v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  ausdk::AUElement **v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  uint64_t v74;
  ausdk::AUElement *v75;
  ausdk::AUElement **v76;
  uint64_t v77;
  ausdk::AUElement *v78;
  ausdk::AUElement **v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  ausdk::AUElement **v82;
  uint64_t v83;
  ausdk::AUElement *v84;
  ausdk::AUElement **v85;
  uint64_t v86;
  ausdk::AUElement *v87;
  ausdk::AUElement **v88;
  uint64_t v89;
  ausdk::AUElement *v90;
  ausdk::AUElement **v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  ausdk::AUElement **v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  ausdk::AUElement **v97;
  uint64_t v98;
  ausdk::AUElement *v99;
  ausdk::AUElement **v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  uint64_t v107;
  ausdk::AUElement *v108;
  ausdk::AUElement **v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  uint64_t v113;
  ausdk::AUElement *v114;
  ausdk::AUElement **v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  ausdk::AUElement **v118;
  uint64_t v119;
  ausdk::AUElement *v120;
  ausdk::AUElement **v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  ausdk::AUElement *v129;
  ausdk::AUElement **v130;
  float v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  float v148;
  uint64_t v149;
  ausdk::AUElement *v150;
  ausdk::AUElement **v151;
  std::bad_alloc *exception;
  std::bad_alloc *v153;

  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  else
    v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if (v3 >= 2)
  {
    v6 = 1;
    do
    {
      Element = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), v6)+ 80))return 4294956428;
    }
    while ((_DWORD)v3 != ++v6);
  }
  if (v5 >= 2)
  {
    v8 = 1;
    do
    {
      v9 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), v8 - 1);
      if (*(double *)(v9 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), v8)+ 80))return 4294956428;
    }
    while ((_DWORD)v5 != ++v8);
  }
  v10 = *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 0) + 80);
  if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), 0) + 80))
    return 4294956428;
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  *(_OWORD *)((char *)this + 664) = 0u;
  *((int32x2_t *)this + 85) = vdup_n_s32(0xC2C80000);
  *((_DWORD *)this + 196) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 1u)+ 108);
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (_QWORD *)*((_QWORD *)this + 6);
    v13 = *((_QWORD **)this + 7) == v14 ? 0 : (ausdk::AUElement *)*v14;
  }
  *((float *)this + 198) = ausdk::AUElement::GetParameter(v13, 0x2Eu);
  v15 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 0);
  v16 = *((_QWORD *)this + 9);
  if (v16)
  {
    v17 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
  }
  else
  {
    v18 = (_QWORD *)*((_QWORD *)this + 6);
    v17 = *((_QWORD **)this + 7) == v18 ? 0 : (ausdk::AUElement *)*v18;
  }
  Parameter = ausdk::AUElement::GetParameter(v17, 0);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (_QWORD *)*((_QWORD *)this + 6);
    v21 = *((_QWORD **)this + 7) == v22 ? 0 : (ausdk::AUElement *)*v22;
  }
  v23 = Parameter;
  v24 = ausdk::AUElement::GetParameter(v21, 0x28u);
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (_QWORD *)*((_QWORD *)this + 6);
    v26 = *((_QWORD **)this + 7) == v27 ? 0 : (ausdk::AUElement *)*v27;
  }
  v28 = ausdk::AUElement::GetParameter(v26, 0x29u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (_QWORD *)*((_QWORD *)this + 6);
    v30 = *((_QWORD **)this + 7) == v31 ? 0 : (ausdk::AUElement *)*v31;
  }
  *((_DWORD *)this + 136) = ausdk::AUElement::GetParameter(v30, 0x27u);
  if (!v23)
    return 4294956428;
  if (v24 <= 5)
    v32 = 5;
  else
    v32 = v24;
  (*(void (**)(AUMultiChanEchoCanceler *))(*(_QWORD *)this + 64))(this);
  *((_DWORD *)this + 139) = *(double *)(v15 + 80);
  v33 = *((unsigned int *)this + 84);
  v34 = *((_QWORD *)this + 9);
  if (v34)
  {
    v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
  }
  else
  {
    v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v36)
      v35 = 0;
    else
      v35 = *v36;
  }
  *((_DWORD *)this + 191) = (int)ausdk::AUElement::GetParameter(v35, 0x2Au);
  v37 = *((_QWORD *)this + 9);
  if (v37)
  {
    v38 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 32))(v37, 0);
  }
  else
  {
    v39 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v39)
      v38 = 0;
    else
      v38 = *v39;
  }
  *((_DWORD *)this + 192) = (int)ausdk::AUElement::GetParameter(v38, 0x2Bu);
  v40 = *((_QWORD *)this + 9);
  if (v40)
  {
    v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
  }
  else
  {
    v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v42)
      v41 = 0;
    else
      v41 = *v42;
  }
  v43 = (int)ausdk::AUElement::GetParameter(v41, 0x2Cu);
  if (*((_DWORD *)this + 196) < v43)
    v43 = *((_DWORD *)this + 196);
  *((_DWORD *)this + 193) = v43;
  v44 = *((_DWORD *)this + 191);
  if (v44 == 3)
  {
    v43 = v43 + *((_DWORD *)this + 192) - 1;
  }
  else if (v44 != 2)
  {
    if (v44 == 1)
      v43 = *((_DWORD *)this + 192);
    else
      v43 = 1;
  }
  *((_DWORD *)this + 197) = v43;
  v45 = 4 * v33 * v43;
  v46 = malloc_type_malloc(v45, 0x2C8E6D5CuLL);
  v47 = v46;
  if (!v46 && v45)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v153 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v46, v45);
  *((_QWORD *)this + 97) = v47;
  v48 = (float)*((unsigned int *)this + 139) / (float)((float)v33 * 1000.0);
  v49 = (float)(ceilf(v48 * (float)v23) * (float)v33);
  v50 = (float)(ceilf(v48 * (float)v32) * (float)v33);
  *((_DWORD *)this + 135) = v49;
  v51 = (float)(ceilf(v48 * (float)v28) * (float)v33);
  *((_DWORD *)this + 137) = v50;
  if (v50 >= v51)
    v52 = v33 + v50;
  else
    v52 = v51;
  *((_DWORD *)this + 138) = v52;
  if (v52 >= v49)
  {
    *((_DWORD *)this + 138) = v49;
    *((_QWORD *)this + 68) = 0;
  }
  v53 = *((_QWORD *)this + 9);
  if (v53)
  {
    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
  }
  else
  {
    v55 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v55)
      v54 = 0;
    else
      v54 = *v55;
  }
  *((_DWORD *)this + 141) = ausdk::AUElement::GetParameter(v54, 9u);
  v56 = *((_QWORD *)this + 9);
  if (v56)
  {
    v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
  }
  else
  {
    v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v58)
      v57 = 0;
    else
      v57 = *v58;
  }
  *((_DWORD *)this + 142) = ausdk::AUElement::GetParameter(v57, 0xAu);
  v59 = *((_QWORD *)this + 9);
  if (v59)
  {
    v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
  }
  else
  {
    v61 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v61)
      v60 = 0;
    else
      v60 = *v61;
  }
  *((_DWORD *)this + 144) = ausdk::AUElement::GetParameter(v60, 0xBu);
  v62 = *((_QWORD *)this + 9);
  if (v62)
  {
    v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
  }
  else
  {
    v64 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v64)
      v63 = 0;
    else
      v63 = *v64;
  }
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v63, 0xCu);
  v65 = *((_QWORD *)this + 9);
  if (v65)
  {
    v66 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 0);
  }
  else
  {
    v67 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v67)
      v66 = 0;
    else
      v66 = *v67;
  }
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v66, 0xDu);
  v68 = *((_QWORD *)this + 9);
  if (v68)
  {
    v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, 0);
  }
  else
  {
    v70 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v70)
      v69 = 0;
    else
      v69 = *v70;
  }
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v69, 0xEu);
  v71 = *((_QWORD *)this + 9);
  if (v71)
  {
    v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
  }
  else
  {
    v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v73)
      v72 = 0;
    else
      v72 = *v73;
  }
  *((float *)this + 148) = ausdk::AUElement::GetParameter(v72, 0xFu);
  v74 = *((_QWORD *)this + 9);
  if (v74)
  {
    v75 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 0);
  }
  else
  {
    v76 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v76)
      v75 = 0;
    else
      v75 = *v76;
  }
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v75, 0x10u);
  v77 = *((_QWORD *)this + 9);
  if (v77)
  {
    v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 0);
  }
  else
  {
    v79 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v79)
      v78 = 0;
    else
      v78 = *v79;
  }
  *((float *)this + 150) = ausdk::AUElement::GetParameter(v78, 0x11u);
  v80 = *((_QWORD *)this + 9);
  if (v80)
  {
    v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0);
  }
  else
  {
    v82 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v82)
      v81 = 0;
    else
      v81 = *v82;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v81, 0x12u);
  v83 = *((_QWORD *)this + 9);
  if (v83)
  {
    v84 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 0);
  }
  else
  {
    v85 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v85)
      v84 = 0;
    else
      v84 = *v85;
  }
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v84, 0x13u);
  v86 = *((_QWORD *)this + 9);
  if (v86)
  {
    v87 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 0);
  }
  else
  {
    v88 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v88)
      v87 = 0;
    else
      v87 = *v88;
  }
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v87, 0x14u);
  v89 = *((_QWORD *)this + 9);
  if (v89)
  {
    v90 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0);
  }
  else
  {
    v91 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v91)
      v90 = 0;
    else
      v90 = *v91;
  }
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v90, 0x15u);
  v92 = *((_QWORD *)this + 9);
  if (v92)
  {
    v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 0);
  }
  else
  {
    v94 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v94)
      v93 = 0;
    else
      v93 = *v94;
  }
  *((float *)this + 155) = ausdk::AUElement::GetParameter(v93, 0x16u);
  v95 = *((_QWORD *)this + 9);
  if (v95)
  {
    v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 0);
  }
  else
  {
    v97 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v97)
      v96 = 0;
    else
      v96 = *v97;
  }
  *((float *)this + 158) = ausdk::AUElement::GetParameter(v96, 0x17u);
  v98 = *((_QWORD *)this + 9);
  if (v98)
  {
    v99 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 32))(v98, 0);
  }
  else
  {
    v100 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v100)
      v99 = 0;
    else
      v99 = *v100;
  }
  *((float *)this + 159) = ausdk::AUElement::GetParameter(v99, 0x18u);
  v101 = *((_QWORD *)this + 9);
  if (v101)
  {
    v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
  }
  else
  {
    v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v103)
      v102 = 0;
    else
      v102 = *v103;
  }
  *((float *)this + 156) = ausdk::AUElement::GetParameter(v102, 0x19u);
  v104 = *((_QWORD *)this + 9);
  if (v104)
  {
    v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
  }
  else
  {
    v106 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v106)
      v105 = 0;
    else
      v105 = *v106;
  }
  *((float *)this + 157) = ausdk::AUElement::GetParameter(v105, 0x1Au);
  v107 = *((_QWORD *)this + 9);
  if (v107)
  {
    v108 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v107 + 32))(v107, 0);
  }
  else
  {
    v109 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v109)
      v108 = 0;
    else
      v108 = *v109;
  }
  *((float *)this + 160) = ausdk::AUElement::GetParameter(v108, 0x1Bu);
  v110 = *((_QWORD *)this + 9);
  if (v110)
  {
    v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  }
  else
  {
    v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v112)
      v111 = 0;
    else
      v111 = *v112;
  }
  *((_BYTE *)this + 644) = ausdk::AUElement::GetParameter(v111, 0x1Cu) != 0.0;
  v113 = *((_QWORD *)this + 9);
  if (v113)
  {
    v114 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v113 + 32))(v113, 0);
  }
  else
  {
    v115 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v115)
      v114 = 0;
    else
      v114 = *v115;
  }
  *((float *)this + 162) = ausdk::AUElement::GetParameter(v114, 0x1Du);
  v116 = *((_QWORD *)this + 9);
  if (v116)
  {
    v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 0);
  }
  else
  {
    v118 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v118)
      v117 = 0;
    else
      v117 = *v118;
  }
  *((_DWORD *)this + 163) = (int)ausdk::AUElement::GetParameter(v117, 0x1Eu);
  v119 = *((_QWORD *)this + 9);
  if (v119)
  {
    v120 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 0);
  }
  else
  {
    v121 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v121)
      v120 = 0;
    else
      v120 = *v121;
  }
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v120, 0x1Fu);
  v122 = *((_QWORD *)this + 9);
  if (v122)
  {
    v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
  }
  else
  {
    v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v124)
      v123 = 0;
    else
      v123 = *v124;
  }
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v123, 0x20u);
  v125 = *((_QWORD *)this + 9);
  if (v125)
  {
    v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
  }
  else
  {
    v127 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v127)
      v126 = 0;
    else
      v126 = *v127;
  }
  *((_DWORD *)this + 140) = ausdk::AUElement::GetParameter(v126, 0x26u);
  v128 = *((_QWORD *)this + 9);
  if (v128)
  {
    v129 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0);
  }
  else
  {
    v130 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v130)
      v129 = 0;
    else
      v129 = *v130;
  }
  v131 = ausdk::AUElement::GetParameter(v129, 0x38u);
  *((float *)this + 143) = v131;
  aec_v4::aec_init((uint64_t **)this + 86, *((_DWORD *)this + 139), *((_DWORD *)this + 135), *((_DWORD *)this + 84), *((_DWORD *)this + 141), *((_DWORD *)this + 142), *((unsigned __int8 *)this + 644), *((_DWORD *)this + 140), *((float *)this + 145), *((float *)this + 146), *((float *)this + 147), *((float *)this + 148), *((float *)this + 149), *((float *)this + 150), *((float *)this + 151), *((float *)this + 152), *(_QWORD *)((char *)this + 612), COERCE_FLOAT(HIDWORD(*(_QWORD *)((char *)this + 612))), *((float *)this + 155),
    *((_QWORD *)this + 79),
    HIDWORD(*((_QWORD *)this + 79)),
    *((_QWORD *)this + 78),
    HIDWORD(*((_QWORD *)this + 78)),
    *((float *)this + 160),
    *((_DWORD *)this + 162),
    *((_DWORD *)this + 164),
    *((_DWORD *)this + 165),
    *((_QWORD *)this + 68),
    HIDWORD(*((_QWORD *)this + 68)),
    *((_DWORD *)this + 138),
    *((_DWORD *)this + 197),
    *((_DWORD *)this + 191),
    *((_DWORD *)this + 192),
    v131);
  v132 = *(_QWORD *)(*((_QWORD *)this + 86) + 16);
  if (v132)
    v133 = *(int *)(v132 + 88);
  else
    v133 = 0;
  std::valarray<float>::resize((uint64_t)this + 696, v133, 0.0);
  v134 = (void *)*((_QWORD *)this + 87);
  v135 = *((_QWORD *)this + 88) - (_QWORD)v134;
  if (v135 >= 1)
    bzero(v134, 4 * (((unint64_t)v135 >> 2) - ((unint64_t)v135 > 3)) + 4);
  v136 = *(_QWORD *)(*((_QWORD *)this + 86) + 16);
  if (v136)
    v137 = *(int *)(v136 + 88);
  else
    v137 = 0;
  std::valarray<float>::resize((uint64_t)this + 712, v137, 0.0);
  v138 = (void *)*((_QWORD *)this + 89);
  v139 = *((_QWORD *)this + 90) - (_QWORD)v138;
  if (v139 >= 1)
    bzero(v138, 4 * (((unint64_t)v139 >> 2) - ((unint64_t)v139 > 3)) + 4);
  v140 = *(_QWORD *)(*((_QWORD *)this + 86) + 16);
  if (v140)
    v141 = *(int *)(v140 + 88);
  else
    v141 = 0;
  std::valarray<float>::resize((uint64_t)this + 728, v141, 0.0);
  v142 = (void *)*((_QWORD *)this + 91);
  v143 = *((_QWORD *)this + 92) - (_QWORD)v142;
  if (v143 >= 1)
    bzero(v142, 4 * (((unint64_t)v143 >> 2) - ((unint64_t)v143 > 3)) + 4);
  v144 = *(_QWORD *)(*((_QWORD *)this + 86) + 16);
  if (v144)
    v145 = *(int *)(v144 + 88);
  else
    v145 = 0;
  std::valarray<float>::resize((uint64_t)this + 744, v145, 0.0);
  v146 = (void *)*((_QWORD *)this + 93);
  v147 = *((_QWORD *)this + 94) - (_QWORD)v146;
  if (v147 >= 1)
    bzero(v146, 4 * (((unint64_t)v147 >> 2) - ((unint64_t)v147 > 3)) + 4);
  v148 = (float)*((unsigned int *)this + 135);
  v149 = *((_QWORD *)this + 9);
  if (v149)
  {
    v150 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 0);
  }
  else
  {
    v151 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v151)
      v150 = 0;
    else
      v150 = *v151;
  }
  ausdk::AUElement::SetParameter(v150, 1u, v148, 0);
  return 0;
}

void AUMultiChanEchoCanceler::Cleanup(AUMultiChanEchoCanceler *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void **v28;
  void *v29;
  void **v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void **v79;
  void **v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  _QWORD *v92;
  void *v93;
  void *v94;

  v2 = *((_QWORD *)this + 86);
  if (v2)
  {
    v3 = *(void ***)(v2 + 64);
    if (v3)
    {
      if (!*v3 || (free(*v3), *v3 = 0, v2 = *((_QWORD *)this + 86), (v3 = *(void ***)(v2 + 64)) != 0))
      {
        free(v3);
        *(_QWORD *)(v2 + 64) = 0;
        v2 = *((_QWORD *)this + 86);
      }
    }
    v4 = *(_QWORD *)(v2 + 56);
    if (v4 && *(_QWORD *)v4)
    {
      free(*(void **)v4);
      *(_QWORD *)v4 = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v5 = *(void **)(v4 + 8);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(v4 + 8) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v6 = *(void **)(v4 + 16);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(v4 + 16) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v7 = *(void **)(v4 + 32);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(v4 + 32) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v8 = *(void **)(v4 + 48);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(v4 + 48) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v9 = *(void **)(v4 + 56);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(v4 + 56) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v10 = *(void **)(v4 + 64);
    if (v10)
    {
      free(v10);
      *(_QWORD *)(v4 + 64) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v11 = *(void **)(v4 + 72);
    if (v11)
    {
      free(v11);
      *(_QWORD *)(v4 + 72) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v12 = *(void **)(v4 + 80);
    if (v12)
    {
      free(v12);
      *(_QWORD *)(v4 + 80) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v13 = *(void **)(v4 + 112);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(v4 + 112) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v14 = *(void **)(v4 + 88);
    if (v14)
    {
      free(v14);
      *(_QWORD *)(v4 + 88) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v15 = *(void **)(v4 + 240);
    if (v15)
    {
      free(v15);
      *(_QWORD *)(v4 + 240) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v16 = *(void **)(v4 + 248);
    if (v16)
    {
      free(v16);
      *(_QWORD *)(v4 + 248) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v17 = *(void **)(v4 + 256);
    if (v17)
    {
      free(v17);
      *(_QWORD *)(v4 + 256) = 0;
      v2 = *((_QWORD *)this + 86);
      v4 = *(_QWORD *)(v2 + 56);
    }
    v18 = *(void **)(v4 + 272);
    if (v18)
    {
      free(v18);
      *(_QWORD *)(v4 + 272) = 0;
      v2 = *((_QWORD *)this + 86);
    }
    if (!*(_DWORD *)(*(_QWORD *)v2 + 100))
    {
      v19 = *(_QWORD **)(v2 + 56);
      v20 = (void *)v19[15];
      if (v20)
      {
        free(v20);
        v19[15] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v21 = (void *)v19[16];
      if (v21)
      {
        free(v21);
        v19[16] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v22 = (void *)v19[17];
      if (v22)
      {
        free(v22);
        v19[17] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v23 = (void *)v19[18];
      if (v23)
      {
        free(v23);
        v19[18] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v24 = (void *)v19[20];
      if (v24)
      {
        free(v24);
        v19[20] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v25 = (void *)v19[22];
      if (v25)
      {
        free(v25);
        v19[22] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v26 = (void *)v19[23];
      if (v26)
      {
        free(v26);
        v19[23] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v27 = (void *)v19[24];
      if (v27)
      {
        free(v27);
        v19[24] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v28 = (void **)v19[26];
      if (v28)
      {
        if (!*v28
          || (free(*v28),
              *v28 = 0,
              v2 = *((_QWORD *)this + 86),
              v19 = *(_QWORD **)(v2 + 56),
              (v28 = (void **)v19[26]) != 0))
        {
          free(v28);
          v19[26] = 0;
          v2 = *((_QWORD *)this + 86);
          v19 = *(_QWORD **)(v2 + 56);
        }
      }
      v29 = (void *)v19[27];
      if (v29)
      {
        free(v29);
        v19[27] = 0;
        v2 = *((_QWORD *)this + 86);
        v19 = *(_QWORD **)(v2 + 56);
      }
      v30 = (void **)v19[28];
      if (v30)
      {
        if (!*v30
          || (free(*v30),
              *v30 = 0,
              v2 = *((_QWORD *)this + 86),
              v19 = *(_QWORD **)(v2 + 56),
              (v30 = (void **)v19[28]) != 0))
        {
          free(v30);
          v19[28] = 0;
          v2 = *((_QWORD *)this + 86);
          v19 = *(_QWORD **)(v2 + 56);
        }
      }
      v31 = (void *)v19[29];
      if (v31)
      {
        free(v31);
        v19[29] = 0;
        v2 = *((_QWORD *)this + 86);
      }
      dft_v3::dftRemove((void **)(v2 + 72));
      v2 = *((_QWORD *)this + 86);
    }
    v32 = *(_QWORD **)(v2 + 56);
    v33 = (void *)v32[38];
    if (v33)
    {
      free(v33);
      v32[38] = 0;
      v2 = *((_QWORD *)this + 86);
      v32 = *(_QWORD **)(v2 + 56);
    }
    v34 = (void *)v32[40];
    if (v34)
    {
      free(v34);
      v32[40] = 0;
      v2 = *((_QWORD *)this + 86);
      v32 = *(_QWORD **)(v2 + 56);
    }
    v35 = (void *)v32[42];
    if (v35)
    {
      free(v35);
      v32[42] = 0;
      v2 = *((_QWORD *)this + 86);
      v32 = *(_QWORD **)(v2 + 56);
    }
    v36 = (void *)v32[44];
    if (v36)
    {
      free(v36);
      v32[44] = 0;
      v2 = *((_QWORD *)this + 86);
      v32 = *(_QWORD **)(v2 + 56);
    }
    v37 = (void *)v32[45];
    if (v37)
    {
      free(v37);
      v32[45] = 0;
      v2 = *((_QWORD *)this + 86);
      v32 = *(_QWORD **)(v2 + 56);
    }
    v38 = (void *)v32[46];
    if (v38)
    {
      free(v38);
      v32[46] = 0;
      v2 = *((_QWORD *)this + 86);
    }
    dft_v3::dftRemove((void **)(v2 + 80));
    lmsfilt_v3::removeLmsFilter((uint64_t *)(*((_QWORD *)this + 86) + 88));
    lmsfilt_v3::removeLmsFilter((uint64_t *)(*((_QWORD *)this + 86) + 96));
    v39 = (uint64_t *)*((_QWORD *)this + 86);
    if (*(int *)(*v39 + 104) >= 1)
    {
      lmsfilt_v3::removeLmsFilter(v39 + 13);
      lmsfilt_v3::removeLmsFilter((uint64_t *)(*((_QWORD *)this + 86) + 112));
      v39 = (uint64_t *)*((_QWORD *)this + 86);
      v40 = v39[7];
      v41 = *(void **)(v40 + 288);
      if (v41)
      {
        free(v41);
        *(_QWORD *)(v40 + 288) = 0;
        v39 = (uint64_t *)*((_QWORD *)this + 86);
        v40 = v39[7];
      }
      v42 = *(void **)(v40 + 296);
      if (v42)
      {
        free(v42);
        *(_QWORD *)(v40 + 296) = 0;
        v39 = (uint64_t *)*((_QWORD *)this + 86);
      }
    }
    v43 = (_QWORD *)v39[6];
    if (v43)
    {
      v44 = (void *)v43[39];
      if (v44)
      {
        free(v44);
        v43[39] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v45 = (void *)v43[41];
      if (v45)
      {
        free(v45);
        v43[41] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v46 = (void *)v43[1];
      if (v46)
      {
        free(v46);
        v43[1] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v47 = (void *)v43[6];
      if (v47)
      {
        free(v47);
        v43[6] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v48 = (void *)v43[7];
      if (v48)
      {
        free(v48);
        v43[7] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v49 = (void *)v43[8];
      if (v49)
      {
        free(v49);
        v43[8] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v50 = (void *)v43[9];
      if (v50)
      {
        free(v50);
        v43[9] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v51 = (void *)v43[10];
      if (v51)
      {
        free(v51);
        v43[10] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v52 = (void *)v43[15];
      if (v52)
      {
        free(v52);
        v43[15] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v53 = (void *)v43[13];
      if (v53)
      {
        free(v53);
        v43[13] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v54 = (void *)v43[79];
      if (v54)
      {
        free(v54);
        v43[79] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v55 = (void *)v43[14];
      if (v55)
      {
        free(v55);
        v43[14] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v56 = (void *)v43[12];
      if (v56)
      {
        free(v56);
        v43[12] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v57 = (void *)v43[20];
      if (v57)
      {
        free(v57);
        v43[20] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v58 = (void *)v43[21];
      if (v58)
      {
        free(v58);
        v43[21] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v59 = (void *)v43[22];
      if (v59)
      {
        free(v59);
        v43[22] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v60 = (void *)v43[23];
      if (v60)
      {
        free(v60);
        v43[23] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v61 = (void *)v43[24];
      if (v61)
      {
        free(v61);
        v43[24] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v62 = (void *)v43[25];
      if (v62)
      {
        free(v62);
        v43[25] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v63 = (void *)v43[26];
      if (v63)
      {
        free(v63);
        v43[26] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v64 = (void *)v43[37];
      if (v64)
      {
        free(v64);
        v43[37] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v65 = (void *)v43[38];
      if (v65)
      {
        free(v65);
        v43[38] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v66 = (void *)v43[56];
      if (v66)
      {
        free(v66);
        v43[56] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v67 = (void *)v43[57];
      if (v67)
      {
        free(v67);
        v43[57] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v68 = (void *)v43[58];
      if (v68)
      {
        free(v68);
        v43[58] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v69 = (void *)v43[59];
      if (v69)
      {
        free(v69);
        v43[59] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v70 = (void *)v43[62];
      if (v70)
      {
        free(v70);
        v43[62] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v71 = (void *)v43[63];
      if (v71)
      {
        free(v71);
        v43[63] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v72 = (void *)v43[60];
      if (v72)
      {
        free(v72);
        v43[60] = 0;
        v43 = (_QWORD *)v39[6];
      }
      v73 = (void *)v43[61];
      if (!v73 || (free(v73), v43[61] = 0, (v43 = (_QWORD *)v39[6]) != 0))
      {
        free(v43);
        v39[6] = 0;
      }
    }
    v74 = (uint64_t *)*((_QWORD *)this + 86);
    v75 = v74[1];
    if (v75)
    {
      v76 = *v74;
      if (*(_QWORD *)v75)
      {
        free(*(void **)v75);
        *(_QWORD *)v75 = 0;
        v75 = v74[1];
      }
      v77 = *(void **)(v75 + 8);
      if (v77)
      {
        free(v77);
        *(_QWORD *)(v75 + 8) = 0;
        v75 = v74[1];
      }
      v78 = *(void **)(v75 + 32);
      if (v78)
      {
        free(v78);
        *(_QWORD *)(v75 + 32) = 0;
        v75 = v74[1];
      }
      if (!*(_DWORD *)(v76 + 100))
      {
        v79 = *(void ***)(v75 + 56);
        if (v79 && *v79)
        {
          free(*v79);
          *v79 = 0;
          v75 = v74[1];
        }
        v80 = *(void ***)(v75 + 64);
        if (v80 && *v80)
        {
          free(*v80);
          *v80 = 0;
          v75 = v74[1];
        }
        v81 = *(void **)(v75 + 56);
        if (v81)
        {
          free(v81);
          *(_QWORD *)(v75 + 56) = 0;
          v75 = v74[1];
        }
        v82 = *(void **)(v75 + 64);
        if (v82)
        {
          free(v82);
          *(_QWORD *)(v75 + 64) = 0;
          v75 = v74[1];
        }
      }
      v83 = *(void **)(v75 + 88);
      if (v83)
      {
        free(v83);
        *(_QWORD *)(v75 + 88) = 0;
        v75 = v74[1];
      }
      v84 = *(void **)(v75 + 16);
      if (v84)
      {
        free(v84);
        *(_QWORD *)(v75 + 16) = 0;
        v75 = v74[1];
      }
      v85 = *(void **)(v75 + 24);
      if (v85)
      {
        free(v85);
        *(_QWORD *)(v75 + 24) = 0;
        v75 = v74[1];
      }
      v86 = *(void **)(v75 + 96);
      if (v86)
      {
        free(v86);
        *(_QWORD *)(v75 + 96) = 0;
        v75 = v74[1];
      }
      v87 = *(void **)(v75 + 104);
      if (v87)
      {
        free(v87);
        *(_QWORD *)(v75 + 104) = 0;
        v75 = v74[1];
      }
      v88 = *(void **)(v75 + 120);
      if (v88)
      {
        free(v88);
        *(_QWORD *)(v75 + 120) = 0;
        v75 = v74[1];
      }
      v89 = *(void **)(v75 + 128);
      if (v89)
      {
        free(v89);
        *(_QWORD *)(v75 + 128) = 0;
        v75 = v74[1];
      }
      v90 = *(void **)(v75 + 136);
      if (v90)
      {
        free(v90);
        *(_QWORD *)(v75 + 136) = 0;
        v75 = v74[1];
      }
      v91 = *(void **)(v75 + 144);
      if (!v91 || (free(v91), *(_QWORD *)(v75 + 144) = 0, (v75 = v74[1]) != 0))
      {
        free((void *)v75);
        v74[1] = 0;
      }
    }
    dft_v3::dftRemove(*((void ***)this + 86));
    v92 = (_QWORD *)*((_QWORD *)this + 86);
    v93 = (void *)v92[7];
    if (!v93 || (free(v93), v92[7] = 0, (v92 = (_QWORD *)*((_QWORD *)this + 86)) != 0))
      free(v92);
    *((_QWORD *)this + 86) = 0;
  }
  v94 = (void *)*((_QWORD *)this + 97);
  if (v94)
  {
    free(v94);
    *((_QWORD *)this + 97) = 0;
  }
}

uint64_t AUMultiChanEchoCanceler::Reset(AUMultiChanEchoCanceler *this)
{
  return 0;
}

uint64_t AUMultiChanEchoCanceler::GetPropertyInfo(AUMultiChanEchoCanceler *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 3799)
  {
    if (a2 == 3800)
    {
      *a6 = 0;
      v8 = 4 * *((_DWORD *)this + 135) * *((_DWORD *)this + 197);
    }
    else
    {
      if (a2 != 103800)
        return result;
      *a6 = 0;
      v8 = 8;
    }
  }
  else
  {
    if (a2 == 21)
    {
      *a6 = 1;
    }
    else
    {
      if (a2 != 3700)
        return result;
      *a6 = 0;
    }
    v8 = 4;
  }
  result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUMultiChanEchoCanceler::GetProperty(AUMultiChanEchoCanceler *this, int a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void **p_p;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 3799)
  {
    if (a2 == 3800 || a2 == 103800)
    {
      v10 = *((_QWORD *)this + 86);
      v11 = 16;
      if (*(int *)(*(_QWORD *)(v10 + 48) + 592) > 0)
        v11 = 40;
      memcpy(*((void **)this + 87), *(const void **)(*(_QWORD *)(v10 + v11) + 48), 4 * *(int *)(*(_QWORD *)(v10 + v11) + 88));
      if (a2 == 103800)
      {
        __p = 0;
        v16 = 0;
        v12 = (_DWORD *)*((_QWORD *)this + 87);
        v13 = (*((_DWORD *)this + 197) * *((_DWORD *)this + 135));
        v17 = 0;
        p_p = &__p;
        if ((_DWORD)v13)
        {
          v14 = 4 * v13;
          do
          {
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, v12++);
            v14 -= 4;
          }
          while (v14);
        }
        *a5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
        if (__p)
        {
          v16 = __p;
          operator delete(__p);
        }
      }
      else
      {
        memcpy(a5, *((const void **)this + 87), 4 * *((unsigned int *)this + 135) * (uint64_t)*((int *)this + 197));
      }
      return 0;
    }
  }
  else
  {
    if (a2 == 21)
    {
      v9 = (*(uint64_t (**)(AUMultiChanEchoCanceler *))(*(_QWORD *)this + 576))(this);
      result = 0;
      goto LABEL_19;
    }
    if (a2 == 3700)
    {
      result = 0;
      v9 = *((unsigned __int8 *)this + 376);
LABEL_19:
      *(_DWORD *)a5 = v9;
    }
  }
  return result;
}

void sub_1B62BB848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUMultiChanEchoCanceler::SetProperty(AUMultiChanEchoCanceler *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  int v8;
  int v9;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      v8 = *a5;
      v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUMultiChanEchoCanceler *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUMultiChanEchoCanceler *, BOOL))(*(_QWORD *)this + 584))(this, v8 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUMultiChanEchoCanceler::SetParameter(ausdk::AUElement ***this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUElement **v11;
  ausdk::AUElement **v12;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
LABEL_3:
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_4;
  }
  if (a2 > 0x29 || ((1 << a2) & 0x30000000001) == 0)
  {
    Scope = (ausdk::AUScope *)(this + 4);
    goto LABEL_3;
  }
  if (*((_BYTE *)this + 17))
    ++*((_DWORD *)this + 133);
  v11 = this[9];
  if (v11)
  {
    Element = (ausdk::AUElement *)(*((uint64_t (**)(ausdk::AUElement **, _QWORD))*v11 + 4))(this[9], 0);
  }
  else
  {
    v12 = this[6];
    if (this[7] == v12)
      Element = 0;
    else
      Element = *v12;
  }
LABEL_4:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUMultiChanEchoCanceler::CanScheduleParameters(AUMultiChanEchoCanceler *this)
{
  return 0;
}

uint64_t AUMultiChanEchoCanceler::ProcessMultipleBufferLists(AUMultiChanEchoCanceler *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v8;
  void *mData;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  float Parameter;
  float v21;
  vDSP_Length v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Element;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  _QWORD *v40;
  uint64_t v41;
  ausdk::AUElement *v42;
  _QWORD *v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  _QWORD *v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  _QWORD *v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  _QWORD *v52;
  uint64_t v53;
  ausdk::AUElement *v54;
  _QWORD *v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  _QWORD *v58;
  uint64_t v59;
  ausdk::AUElement *v60;
  _QWORD *v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  _QWORD *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  lmsfilt_v5 *v70;
  uint64_t v71;
  ausdk::AUElement *v72;
  ausdk::AUElement **v73;
  float v74;
  uint64_t v75;
  ausdk::AUElement *v76;
  ausdk::AUElement **v77;
  uint64_t v78;
  ausdk::AUElement *v79;
  ausdk::AUElement **v80;
  uint64_t v81;
  ausdk::AUElement *v82;
  ausdk::AUElement **v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  ausdk::AUElement **v86;
  uint64_t v87;
  ausdk::AUElement *v88;
  ausdk::AUElement **v89;
  uint64_t v90;
  ausdk::AUElement *v91;
  ausdk::AUElement **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  vDSP_Length v98;
  float v99;
  float v100;
  uint64_t v101;
  ausdk::AUElement *v102;
  ausdk::AUElement **v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  ausdk::AUElement **v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  ausdk::AUElement **v112;
  ausdk::AUElement **v113;
  float v114;
  void *v116;
  float v117;
  float v118;
  uint64_t __C;

  v8 = *((_DWORD *)this + 84);
  if (v8 != a3)
  {
    printf("AUMultiChanEchoCanceler::ProcessMultipleBufferLists error - wrong (%d) block size expected (%d)", a3, v8);
    return 4294956422;
  }
  v117 = 0.0;
  if (a6 < 2)
  {
    mData = 0;
  }
  else
  {
    mData = a7[1]->mBuffers[0].mData;
    if (a6 != 2)
    {
      v12 = a7[2]->mBuffers[0].mData;
      goto LABEL_8;
    }
  }
  v12 = 0;
LABEL_8:
  v14 = (*a5)->mBuffers[0].mData;
  v15 = (*a7)->mBuffers[0].mData;
  v16 = a5[1]->mBuffers[0].mData;
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  Parameter = ausdk::AUElement::GetParameter(v18, 2u);
  if (((*(uint64_t (**)(AUMultiChanEchoCanceler *))(*(_QWORD *)this + 576))(this) & 1) != 0
    || !*((_QWORD *)this + 86))
  {
    if (v14 != v15)
    {
      Element = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), 0);
      memcpy(v15, v14, (*(_DWORD *)(Element + 104) * a3));
      v28 = *((_QWORD *)this + 9);
      if (v28)
      {
        v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
      }
      else
      {
        v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v30)
          v29 = 0;
        else
          v29 = *v30;
      }
      ausdk::AUElement::SetParameter(v29, 3u, 0.0, 0);
      v31 = *((_QWORD *)this + 9);
      if (v31)
      {
        v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
      }
      else
      {
        v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v33)
          v32 = 0;
        else
          v32 = *v33;
      }
      ausdk::AUElement::SetParameter(v32, 0x24u, 0.0, 0);
    }
    return 0;
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
    v21 = 0.0;
    if (v14 && v16)
    {
      v22 = *((int *)this + 84);
      v23 = 4 * (int)v22;
      memcpy(*((void **)this + 97), v16, v23);
      v24 = *((_DWORD *)this + 191);
      v116 = mData;
      if ((v24 | 2) == 3)
      {
        if (*((int *)this + 192) >= 2)
        {
          vDSP_vsq((const float *)v16, 1, (float *)(*((_QWORD *)this + 97) + 4 * v22), 1, v22);
          if (*((int *)this + 192) >= 3)
            vDSP_vmul((const float *)v16, 1, (const float *)(*((_QWORD *)this + 97) + 4 * v22), 1, (float *)(*((_QWORD *)this + 97) + 8 * v22), 1, v22);
        }
        if (*((_DWORD *)this + 191) == 3 && *((int *)this + 193) >= 2)
        {
          v25 = 1;
          v26 = 32;
          do
          {
            memcpy((void *)(*((_QWORD *)this + 97) + 4 * ((int)v25++ + *((_DWORD *)this + 192) - 1) * (int)v22), *(const void **)((char *)&a5[1]->mNumberBuffers + v26), v23);
            v26 += 16;
          }
          while (v25 < *((int *)this + 193));
        }
      }
      else if (v24 == 2 && *((int *)this + 193) >= 2)
      {
        v34 = 4 * v22;
        v35 = 1;
        v36 = 32;
        v37 = v34;
        do
        {
          memcpy((void *)(*((_QWORD *)this + 97) + v37), *(const void **)((char *)&a5[1]->mNumberBuffers + v36), v23);
          ++v35;
          v37 += v34;
          v36 += 16;
        }
        while (v35 < *((int *)this + 193));
      }
      if (*((_DWORD *)this + 191) == 2)
      {
        v38 = *((_QWORD *)this + 9);
        if (v38)
        {
          v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
        }
        else
        {
          v40 = (_QWORD *)*((_QWORD *)this + 6);
          v39 = *((_QWORD **)this + 7) == v40 ? 0 : (ausdk::AUElement *)*v40;
        }
        **(_BYTE **)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) = ausdk::AUElement::GetParameter(v39, 0x2Fu) != 0.0;
        if (*((int *)this + 197) >= 2)
        {
          v41 = *((_QWORD *)this + 9);
          if (v41)
          {
            v42 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0);
          }
          else
          {
            v43 = (_QWORD *)*((_QWORD *)this + 6);
            v42 = *((_QWORD **)this + 7) == v43 ? 0 : (ausdk::AUElement *)*v43;
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 1) = ausdk::AUElement::GetParameter(v42, 0x30u) != 0.0;
          if (*((int *)this + 197) >= 3)
          {
            v44 = *((_QWORD *)this + 9);
            if (v44)
            {
              v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
            }
            else
            {
              v46 = (_QWORD *)*((_QWORD *)this + 6);
              v45 = *((_QWORD **)this + 7) == v46 ? 0 : (ausdk::AUElement *)*v46;
            }
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 2) = ausdk::AUElement::GetParameter(v45, 0x31u) != 0.0;
            if (*((int *)this + 197) >= 4)
            {
              v47 = *((_QWORD *)this + 9);
              if (v47)
              {
                v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
              }
              else
              {
                v49 = (_QWORD *)*((_QWORD *)this + 6);
                v48 = *((_QWORD **)this + 7) == v49 ? 0 : (ausdk::AUElement *)*v49;
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 3) = ausdk::AUElement::GetParameter(v48, 0x32u) != 0.0;
              if (*((int *)this + 197) >= 5)
              {
                v50 = *((_QWORD *)this + 9);
                if (v50)
                {
                  v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
                }
                else
                {
                  v52 = (_QWORD *)*((_QWORD *)this + 6);
                  v51 = *((_QWORD **)this + 7) == v52 ? 0 : (ausdk::AUElement *)*v52;
                }
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 4) = ausdk::AUElement::GetParameter(v51, 0x33u) != 0.0;
                if (*((int *)this + 197) >= 6)
                {
                  v53 = *((_QWORD *)this + 9);
                  if (v53)
                  {
                    v54 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 32))(v53, 0);
                  }
                  else
                  {
                    v55 = (_QWORD *)*((_QWORD *)this + 6);
                    v54 = *((_QWORD **)this + 7) == v55 ? 0 : (ausdk::AUElement *)*v55;
                  }
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 5) = ausdk::AUElement::GetParameter(v54, 0x34u) != 0.0;
                  if (*((int *)this + 197) >= 7)
                  {
                    v56 = *((_QWORD *)this + 9);
                    if (v56)
                    {
                      v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
                    }
                    else
                    {
                      v58 = (_QWORD *)*((_QWORD *)this + 6);
                      v57 = *((_QWORD **)this + 7) == v58 ? 0 : (ausdk::AUElement *)*v58;
                    }
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 6) = ausdk::AUElement::GetParameter(v57, 0x35u) != 0.0;
                    if (*((int *)this + 197) >= 8)
                    {
                      v59 = *((_QWORD *)this + 9);
                      if (v59)
                      {
                        v60 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0);
                      }
                      else
                      {
                        v61 = (_QWORD *)*((_QWORD *)this + 6);
                        v60 = *((_QWORD **)this + 7) == v61 ? 0 : (ausdk::AUElement *)*v61;
                      }
                      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120) + 7) = ausdk::AUElement::GetParameter(v60, 0x36u) != 0.0;
                      if (*((int *)this + 197) >= 9)
                      {
                        v62 = *((_QWORD *)this + 9);
                        if (v62)
                        {
                          v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 0);
                        }
                        else
                        {
                          v64 = (_QWORD *)*((_QWORD *)this + 6);
                          v63 = *((_QWORD **)this + 7) == v64 ? 0 : (ausdk::AUElement *)*v64;
                        }
                        v65 = ausdk::AUElement::GetParameter(v63, 0x37u) != 0.0;
                        v66 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 8) + 120);
                        *(_BYTE *)(v66 + 8) = v65;
                        v67 = *((unsigned int *)this + 197);
                        if ((int)v67 >= 10)
                        {
                          v68 = v67 - 9;
                          v69 = (_BYTE *)(v66 + 9);
                          do
                          {
                            *v69++ = *(_BYTE *)(v66 + 8);
                            --v68;
                          }
                          while (v68);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v70 = (lmsfilt_v5 *)*((_QWORD *)this + 97);
      v71 = *((_QWORD *)this + 9);
      if (v71)
      {
        v72 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0);
      }
      else
      {
        v73 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v73)
          v72 = 0;
        else
          v72 = *v73;
      }
      v74 = ausdk::AUElement::GetParameter(v72, 4u);
      aec_v4::run_aec(*((uint64_t **)this + 86), (_DWORD *)this + 166, (float *)this + 167, (_DWORD *)this + 168, (_DWORD *)this + 169, v70, v14, (float *)v15, &v117, (int)v74, (_DWORD *)this + 190, (_DWORD *)this + 198);
      v75 = *((_QWORD *)this + 9);
      if (v75)
      {
        v76 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 32))(v75, 0);
      }
      else
      {
        v77 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v77)
          v76 = 0;
        else
          v76 = *v77;
      }
      ausdk::AUElement::SetParameter(v76, 8u, *((float *)this + 167), 0);
      v78 = *((_QWORD *)this + 9);
      if (v78)
      {
        v79 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 0);
      }
      else
      {
        v80 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v80)
          v79 = 0;
        else
          v79 = *v80;
      }
      ausdk::AUElement::SetParameter(v79, 0x21u, (float)*((int *)this + 168), 0);
      v81 = *((_QWORD *)this + 9);
      if (v81)
      {
        v82 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 32))(v81, 0);
      }
      else
      {
        v83 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v83)
          v82 = 0;
        else
          v82 = *v83;
      }
      ausdk::AUElement::SetParameter(v82, 0x22u, *((float *)this + 169), 0);
      v84 = *((_QWORD *)this + 9);
      if (v84)
      {
        v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, 0);
      }
      else
      {
        v86 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v86)
          v85 = 0;
        else
          v85 = *v86;
      }
      ausdk::AUElement::SetParameter(v85, 0x25u, *((float *)this + 190), 0);
      v87 = *((_QWORD *)this + 9);
      if (v87)
      {
        v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0);
      }
      else
      {
        v89 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v89)
          v88 = 0;
        else
          v88 = *v89;
      }
      v21 = v117;
      ausdk::AUElement::SetParameter(v88, 0x2Du, v117, 0);
      v90 = *((_QWORD *)this + 9);
      if (v90)
      {
        v91 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 0);
      }
      else
      {
        v92 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v92)
          v91 = 0;
        else
          v91 = *v92;
      }
      ausdk::AUElement::SetParameter(v91, 0x2Eu, *((float *)this + 198), 0);
      if (v12)
        memcpy(v12, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 86) + 56) + 112), 4 * *((unsigned int *)this + 84));
      if (v116)
        memcpy(v116, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 86) + 56) + 72), 4 * *((unsigned int *)this + 84));
      if (Parameter == 0.0)
      {
        __C = 0;
        v118 = 0.0;
        v93 = *((_QWORD *)this + 88);
        v94 = *((_QWORD *)this + 87);
        v95 = *((_QWORD *)this + 86);
        v96 = 16;
        if (*(int *)(*(_QWORD *)(v95 + 48) + 592) > 0)
          v96 = 40;
        memcpy(*((void **)this + 87), *(const void **)(*(_QWORD *)(v95 + v96) + 48), 4 * *(int *)(*(_QWORD *)(v95 + v96) + 88));
        *(float *)&v97 = 0.0;
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 86) + 48) + 232))
          goto LABEL_144;
        v98 = ((unint64_t)(v93 - v94) >> 2);
        vDSP_vsub(*((const float **)this + 87), 1, *((const float **)this + 89), 1, *((float **)this + 91), 1, v98);
        vDSP_vsq(*((const float **)this + 91), 1, *((float **)this + 91), 1, v98);
        vDSP_sve(*((const float **)this + 91), 1, (float *)&__C + 1, v98);
        vDSP_vsq(*((const float **)this + 89), 1, *((float **)this + 93), 1, v98);
        vDSP_sve(*((const float **)this + 93), 1, (float *)&__C, v98);
        vDSP_vsq(*((const float **)this + 87), 1, *((float **)this + 93), 1, v98);
        vDSP_sve(*((const float **)this + 93), 1, &v118, v98);
        v99 = *(float *)&__C + 0.00000001;
        *(float *)&__C = (float)(v118 * 0.2) + (float)(v99 * 0.8);
        v100 = *((float *)&__C + 1) * 100.0 / *(float *)&__C;
        *(float *)&v97 = 800.0;
        if (v100 > 800.0)
LABEL_144:
          v100 = *(float *)&v97;
        std::valarray<float>::__assign_range((uint64_t)this + 712, *((_BYTE **)this + 87), *((_BYTE **)this + 88));
      }
      else
      {
        v100 = 0.0;
      }
      v101 = *((_QWORD *)this + 9);
      if (v101)
      {
        v102 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v101 + 32))(v101, 0);
      }
      else
      {
        v103 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v103)
          v102 = 0;
        else
          v102 = *v103;
      }
      ausdk::AUElement::SetParameter(v102, 3u, v100, 0);
      v13 = 0;
    }
    v104 = *((_QWORD *)this + 9);
    if (v104)
    {
      v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, 0);
    }
    else
    {
      v106 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v106)
        v105 = 0;
      else
        v105 = *v106;
    }
    v107 = ausdk::AUElement::GetParameter(v105, 0x23u);
    v108 = *((float *)this + 170);
    if (v21 >= v108)
      v109 = v21;
    else
      v109 = *((float *)this + 170);
    if (v109 < *((float *)this + 171))
      v109 = *((float *)this + 171);
    *((float *)this + 171) = v108;
    *((float *)this + 170) = v21;
    v110 = *((_QWORD *)this + 9);
    if (v109 <= v107)
    {
      if (v110)
      {
        v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
      }
      else
      {
        v113 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v113)
          v111 = 0;
        else
          v111 = *v113;
      }
      v114 = 0.0;
    }
    else
    {
      if (v110)
      {
        v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
      }
      else
      {
        v112 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v112)
          v111 = 0;
        else
          v111 = *v112;
      }
      v114 = 1.0;
    }
    ausdk::AUElement::SetParameter(v111, 0x24u, v114, 0);
  }
  return v13;
}

uint64_t AUMultiChanEchoCanceler::Render(AUMultiChanEchoCanceler *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUMultiChanEchoCanceler *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUMultiChanEchoCanceler *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUMultiChanEchoCanceler::BusCountWritable(AUMultiChanEchoCanceler *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUMultiChanEchoCanceler::GetParameterInfo(AUMultiChanEchoCanceler *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x38)
  {
    v6 = off_1E69CF810[a3];
    v7 = dword_1B664D2C0[a3];
    v8 = flt_1B664D3A4[a3];
    v9 = flt_1B664D488[a3];
    v10 = flt_1B664D56C[a3];
    v11 = dword_1B664D650[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUMultiChanEchoCanceler::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUMultiChanEchoCanceler::GetLatency(AUMultiChanEchoCanceler *this)
{
  return 0.0;
}

double AUMultiChanEchoCanceler::GetTailTime(AUMultiChanEchoCanceler *this)
{
  return 0.0;
}

uint64_t AUMultiChanEchoCanceler::SupportsTail(AUMultiChanEchoCanceler *this)
{
  return 1;
}

BOOL AUMultiChanEchoCanceler::StreamFormatWritable(AUMultiChanEchoCanceler *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMultiChanEchoCanceler::SupportedNumChannels(AUMultiChanEchoCanceler *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMultiChanEchoCanceler::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUMultiChanEchoCanceler::ValidFormat(AUMultiChanEchoCanceler *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result;

  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
  {
    if ((a4->mFormatFlags & 0x20) != 0)
    {
      result = 1;
      if (a3)
        return result;
      goto LABEL_5;
    }
    result = a4->mChannelsPerFrame == 1;
  }
  if (a3)
    return result;
LABEL_5:
  if (a4->mChannelsPerFrame == 1)
    return result;
  else
    return 0;
}

uint64_t AUMultiChanEchoCanceler::ShouldBypassEffect(AUMultiChanEchoCanceler *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUMultiChanEchoCanceler::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 528) = a2;
  return this;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_QWORD *LiteMatrixBase<float>::AssertSameDimensions(_QWORD *result, _QWORD *a2)
{
  NSObject *v2;
  const char *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*a2 != *result)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v4 = 136315394;
    v5 = "LiteMatrix.h";
    v6 = 1024;
    v7 = 54;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  matrix size mismatch";
    goto LABEL_11;
  }
  if (a2[1] != result[1])
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v4 = 136315394;
    v5 = "LiteMatrix.h";
    v6 = 1024;
    v7 = 55;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  matrix size mismatch";
    goto LABEL_11;
  }
  if (a2[3] - a2[2] != result[3] - result[2])
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v4 = 136315394;
    v5 = "LiteMatrix.h";
    v6 = 1024;
    v7 = 56;
    v2 = MEMORY[0x1E0C81028];
    v3 = "%25s:%-5d  matrix size inconsistency";
LABEL_11:
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v4, 0x12u);
LABEL_12:
    __break(1u);
  }
  return result;
}

void LiteMatrixBase<float>::operator-=(uint64_t a1, uint64_t a2)
{
  LiteMatrixBase<float>::AssertSameDimensions((_QWORD *)a1, (_QWORD *)a2);
  vDSP_vsub(*(const float **)(a1 + 16), 1, *(const float **)(a2 + 16), 1, *(float **)(a1 + 16), 1, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
}

void CLiteMatrix::operator+=(uint64_t a1, uint64_t a2)
{
  LiteMatrixBase<float>::AssertSameDimensions((_QWORD *)a1, (_QWORD *)a2);
  vDSP_vadd(*(const float **)(a1 + 16), 1, *(const float **)(a2 + 16), 1, *(float **)(a1 + 16), 1, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
}

void CLiteMatrix::SetWithTranposeOfOther(CLiteMatrix *this, const CLiteMatrix *a2)
{
  vDSP_Length v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 != *((_QWORD *)this + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v8 = 136315394;
    v9 = "LiteMatrix.cpp";
    v10 = 1024;
    v11 = 290;
    v7 = MEMORY[0x1E0C81028];
    goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 1);
  if (v4 != *(_QWORD *)this)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v8 = 136315394;
    v9 = "LiteMatrix.cpp";
    v10 = 1024;
    v11 = 291;
    v7 = MEMORY[0x1E0C81028];
LABEL_8:
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix dim mismatch", (uint8_t *)&v8, 0x12u);
LABEL_9:
    __break(1u);
  }
  vDSP_mtrans(*((const float **)a2 + 2), 1, *((float **)this + 2), 1, v4, *(_QWORD *)a2);
  v5 = *((_QWORD *)this + 2);
  v6 = ((*((_QWORD *)this + 3) - v5) >> 1) & 0xFFFFFFFFFFFFFFFCLL;
  vDSP_mtrans((const float *)(*((_QWORD *)a2 + 2) + v6), 1, (float *)(v5 + v6), 1, *((_QWORD *)a2 + 1), *(_QWORD *)a2);
}

void CLiteMatrix::SetWithConjugateTranposeOfOther(CLiteMatrix *this, const CLiteMatrix *a2)
{
  uint64_t v4;
  NSObject *v5;
  _BYTE v6[18];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 != *((_QWORD *)this + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_DWORD *)v6 = 136315394;
    *(_QWORD *)&v6[4] = "LiteMatrix.cpp";
    *(_WORD *)&v6[12] = 1024;
    *(_DWORD *)&v6[14] = 297;
    v5 = MEMORY[0x1E0C81028];
    goto LABEL_8;
  }
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)this)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_DWORD *)v6 = 136315394;
    *(_QWORD *)&v6[4] = "LiteMatrix.cpp";
    *(_WORD *)&v6[12] = 1024;
    *(_DWORD *)&v6[14] = 298;
    v5 = MEMORY[0x1E0C81028];
LABEL_8:
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix dim mismatch", v6, 0x12u);
LABEL_9:
    __break(1u);
  }
  CLiteMatrix::SetWithTranposeOfOther(this, a2);
  v4 = *((_QWORD *)this + 2) + 4 * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
  *(_QWORD *)v6 = *((_QWORD *)this + 2);
  *(_QWORD *)&v6[8] = v4;
  vDSP_zvconj((const DSPSplitComplex *)v6, 1, (const DSPSplitComplex *)v6, 1, *((_QWORD *)a2 + 1) * *(_QWORD *)a2);
}

void CLiteMatrix::ScaleCols(CLiteMatrix *this, const float **a2)
{
  unint64_t v4;
  const float *v5;
  const float *v6;
  float *v7;
  const float *v8;
  const float *v9;
  const float *v10;
  float *v11;

  if (*((_QWORD *)this + 1) != a2[1] - *a2)
    __assert_rtn("ScaleCols", "LiteMatrix.cpp", 366, "inputVector.size()==NumCols()");
  if (*(_QWORD *)this)
  {
    v4 = 0;
    do
    {
      v5 = (const float *)CLiteMatrix::Get(this, v4, 0);
      v6 = *a2;
      v7 = (float *)CLiteMatrix::Get(this, v4, 0);
      vDSP_vmul(v5, 1, v6, 1, v7, 1, *((_QWORD *)this + 1));
      CLiteMatrix::Get(this, v4, 0);
      v9 = v8;
      v10 = *a2;
      CLiteMatrix::Get(this, v4, 0);
      vDSP_vmul(v9, 1, v10, 1, v11, 1, *((_QWORD *)this + 1));
      ++v4;
    }
    while (v4 < *(_QWORD *)this);
  }
}

_QWORD *CLiteMatrix::SumRows(_QWORD *this, const CLiteMatrix *a2, CLiteMatrix *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const float *v7;
  unint64_t v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float __C;

  if (*(_QWORD *)a2 != 1)
    __assert_rtn("SumRows", "LiteMatrix.cpp", 376, "outputMatrix.NumRows()==1");
  v4 = (uint64_t)this;
  v5 = *((_QWORD *)a2 + 1);
  if (v5 != this[1])
    __assert_rtn("SumRows", "LiteMatrix.cpp", 377, "outputMatrix.NumCols()==inputMatrix.NumCols()");
  if (v5)
  {
    v6 = 0;
    v7 = (const float *)this[2];
    v8 = (unint64_t)((uint64_t)(this[3] - (_QWORD)v7) >> 2) >> 1;
    do
    {
      __C = 0.0;
      vDSP_sve(v7, v5, &__C, *(_QWORD *)v4);
      v12 = 0.0;
      vDSP_sve(&v7[v8], *(_QWORD *)(v4 + 8), &v12, *(_QWORD *)v4);
      v9 = __C;
      *(float *)CLiteMatrix::Get(a2, 0, v6) = v9;
      v10 = v12;
      this = (_QWORD *)CLiteMatrix::Get(a2, 0, v6);
      *v11 = v10;
      ++v6;
      v5 = *(_QWORD *)(v4 + 8);
      ++v7;
    }
    while (v6 < v5);
  }
  return this;
}

void CLiteMatrix::SetWithOther(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  float *v5;
  DSPSplitComplex v6;
  DSPSplitComplex __C;

  v2 = a2[1];
  if (v2 != *(_QWORD *)(a1 + 8))
    __assert_rtn("SetWithOther", "LiteMatrix.cpp", 408, "inputMatrix.NumCols()==NumCols()");
  v3 = *a2;
  if (*a2 != *(_QWORD *)a1)
    __assert_rtn("SetWithOther", "LiteMatrix.cpp", 409, "inputMatrix.NumRows()==NumRows()");
  v4 = (float *)(*(_QWORD *)(a1 + 16) + 4 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  __C.realp = *(float **)(a1 + 16);
  __C.imagp = v4;
  v5 = (float *)(a2[2] + 4 * ((a2[3] - a2[2]) >> 3));
  v6.realp = (float *)a2[2];
  v6.imagp = v5;
  vDSP_zvmov(&v6, 1, &__C, 1, v3 * v2);
}

void CLiteMatrix::ElementwiseMultiply(CLiteMatrix *this, const CLiteMatrix *a2, const CLiteMatrix *a3, CLiteMatrix *__Conjugate)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  NSObject *v9;
  DSPSplitComplex v10;
  DSPSplitComplex __B;
  _BYTE __A[18];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this != *(_QWORD *)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 442;
    v9 = MEMORY[0x1E0C81028];
    goto LABEL_14;
  }
  if (v4 != *(_QWORD *)a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 443;
    v9 = MEMORY[0x1E0C81028];
    goto LABEL_14;
  }
  v5 = *((_QWORD *)this + 1);
  if (v5 != *((_QWORD *)a3 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 444;
    v9 = MEMORY[0x1E0C81028];
    goto LABEL_14;
  }
  if (v5 != *((_QWORD *)a2 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 445;
    v9 = MEMORY[0x1E0C81028];
LABEL_14:
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  vector size mismatch", __A, 0x12u);
LABEL_15:
    __break(1u);
  }
  v6 = *((_QWORD *)this + 2) + 4 * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
  *(_QWORD *)__A = *((_QWORD *)this + 2);
  *(_QWORD *)&__A[8] = v6;
  v7 = (float *)(*((_QWORD *)a2 + 2) + 4 * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  __B.realp = (float *)*((_QWORD *)a2 + 2);
  __B.imagp = v7;
  v8 = (float *)(*((_QWORD *)a3 + 2) + 4 * ((uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3));
  v10.realp = (float *)*((_QWORD *)a3 + 2);
  v10.imagp = v8;
  vDSP_zvmul((const DSPSplitComplex *)__A, 1, &__B, 1, &v10, 1, v5 * v4, (int)__Conjugate);
}

void CLiteMatrix::MatrixMultiply(vDSP_Length *this, const CLiteMatrix *a2, const CLiteMatrix *a3, CLiteMatrix *a4)
{
  vDSP_Length v4;
  vDSP_Length v5;
  vDSP_Length __P;
  uint64_t v7;
  float *v8;
  float *v9;
  NSObject *v10;
  DSPSplitComplex __C;
  DSPSplitComplex __B;
  _BYTE __A[18];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *this;
  if (*this != *(_QWORD *)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 455;
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_11;
  }
  v5 = *((_QWORD *)a2 + 1);
  if (v5 != *((_QWORD *)a3 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 456;
    v10 = MEMORY[0x1E0C81028];
    goto LABEL_11;
  }
  __P = this[1];
  if (__P != *(_QWORD *)a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 457;
    v10 = MEMORY[0x1E0C81028];
LABEL_11:
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix size mismatch", __A, 0x12u);
LABEL_12:
    __break(1u);
  }
  v7 = this[2] + 4 * ((uint64_t)(this[3] - this[2]) >> 3);
  *(_QWORD *)__A = this[2];
  *(_QWORD *)&__A[8] = v7;
  v8 = (float *)(*((_QWORD *)a2 + 2) + 4 * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  __B.realp = (float *)*((_QWORD *)a2 + 2);
  __B.imagp = v8;
  v9 = (float *)(*((_QWORD *)a3 + 2) + 4 * ((uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3));
  __C.realp = (float *)*((_QWORD *)a3 + 2);
  __C.imagp = v9;
  vDSP_zmmul((const DSPSplitComplex *)__A, 1, &__B, 1, &__C, 1, v4, v5, __P);
}

void CLiteMatrix::MatrixMultiplyViaDotProducts(CLiteMatrix *this, CLiteMatrix *a2, CLiteMatrix *a3, CLiteMatrix *a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  unint64_t v13;
  float *v14;
  unint64_t i;
  NSObject *v16;
  int64x2_t v17;
  DSPSplitComplex __B;
  DSPSplitComplex __C;
  _BYTE __A[18];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this != *(_QWORD *)a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 469;
    v16 = MEMORY[0x1E0C81028];
    goto LABEL_18;
  }
  v7 = *((_QWORD *)a2 + 1);
  if (v7 != *((_QWORD *)a3 + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 470;
    v16 = MEMORY[0x1E0C81028];
    goto LABEL_18;
  }
  v9 = *((_QWORD *)this + 1);
  if (v9 != *(_QWORD *)a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    *(_DWORD *)__A = 136315394;
    *(_QWORD *)&__A[4] = "LiteMatrix.cpp";
    *(_WORD *)&__A[12] = 1024;
    *(_DWORD *)&__A[14] = 471;
    v16 = MEMORY[0x1E0C81028];
LABEL_18:
    _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d  matrix size mismatch", __A, 0x12u);
LABEL_19:
    __break(1u);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = v10 + 4 * ((*((_QWORD *)this + 3) - v10) >> 3);
  *(_QWORD *)__A = v10;
  *(_QWORD *)&__A[8] = v11;
  v12 = (float *)(*((_QWORD *)a3 + 2) + 4 * ((uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3));
  __C.realp = (float *)*((_QWORD *)a3 + 2);
  __C.imagp = v12;
  if (v4)
  {
    v13 = 0;
    v17 = vdupq_n_s64(4uLL);
    do
    {
      v14 = (float *)(*((_QWORD *)a2 + 2) + 4 * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
      __B.realp = (float *)*((_QWORD *)a2 + 2);
      __B.imagp = v14;
      if (v7)
      {
        for (i = 0; i < v7; ++i)
        {
          vDSP_zdotpr((const DSPSplitComplex *)__A, 1, &__B, *((_QWORD *)a2 + 1), &__C, *((_QWORD *)this + 1));
          __B = (DSPSplitComplex)vaddq_s64((int64x2_t)__B, v17);
          __C = (DSPSplitComplex)vaddq_s64((int64x2_t)__C, v17);
          v7 = *((_QWORD *)a3 + 1);
        }
        v9 = *((_QWORD *)this + 1);
        v10 = *(_QWORD *)__A;
        v11 = *(_QWORD *)&__A[8];
        v4 = *(_QWORD *)a3;
      }
      v10 += 4 * v9;
      v11 += 4 * v9;
      *(_QWORD *)__A = v10;
      *(_QWORD *)&__A[8] = v11;
      ++v13;
    }
    while (v13 < v4);
  }
}

double std::sqrt[abi:ne180100]<double>(double result, long double a2)
{
  double v2;
  double v3;
  long double v4;
  long double v6;

  v2 = INFINITY;
  if (fabs(a2) == INFINITY)
    return v2;
  if (fabs(result) != INFINITY)
  {
    v6 = result;
    v3 = sqrt(hypot(result, a2));
    v4 = atan2(a2, v6);
    std::polar[abi:ne180100]<double>(v3, v4 * 0.5);
    return result;
  }
  if (result <= 0.0)
    return 0.0;
  return result;
}

void std::polar[abi:ne180100]<double>(double a1, double a2)
{
  if ((*(_QWORD *)&a1 & 0x8000000000000000) == 0 && fabs(a2) != INFINITY)
    __sincos_stret(a2);
}

void std::vector<EndpointDecisionLayerVAD2::Decision>::reserve(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;

  v1 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= 0x1FuLL)
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x20uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFFCLL];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
        v7 = *((_DWORD *)v3 - 1);
        v3 -= 4;
        *((_DWORD *)v6 - 1) = v7;
        v6 -= 4;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 32;
    if (v1)
      operator delete(v1);
  }
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::default_delete<AU::SoundIsolation::MetricsReporter>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 176);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 160);
    *(_QWORD *)(v1 + 160) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(void **)(v1 + 128);
    if (v5)
    {
      *(_QWORD *)(v1 + 136) = v5;
      operator delete(v5);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 64));
    v6 = *(_QWORD **)(v1 + 56);
    if (v6 == (_QWORD *)(v1 + 32))
    {
      v7 = 4;
      v6 = (_QWORD *)(v1 + 32);
    }
    else
    {
      if (!v6)
        goto LABEL_14;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v1 + 16);
    v8 = *(std::__shared_weak_count **)(v1 + 8);
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::__shared_ptr_pointer<AU::SoundIsolation::MetricsReporter *,std::shared_ptr<AU::SoundIsolation::MetricsReporter>::__shared_ptr_default_delete<AU::SoundIsolation::MetricsReporter,AU::SoundIsolation::MetricsReporter>,std::allocator<AU::SoundIsolation::MetricsReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t std::__shared_ptr_pointer<AU::SoundIsolation::MetricsReporter *,std::shared_ptr<AU::SoundIsolation::MetricsReporter>::__shared_ptr_default_delete<AU::SoundIsolation::MetricsReporter,AU::SoundIsolation::MetricsReporter>,std::allocator<AU::SoundIsolation::MetricsReporter>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AU::SoundIsolation::MetricsReporter>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

void AU::SoundIsolation::MetricsReporter::getCAReporterIDs(AU::SoundIsolation::MetricsReporter *this, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a2 + 64);
  std::mutex::lock((std::mutex *)(a2 + 64));
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this, *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  std::mutex::unlock(v4);
}

void sub_1B62BDC4C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AU::SoundIsolation::MetricsReporter::setCAReporterIDs(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  void *v5;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v5 = *(void **)(a1 + 128);
  if (v5)
  {
    *(_QWORD *)(a1 + 136) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::mutex::unlock(v4);
}

void AU::SoundIsolation::MetricsReporter::reportAsync(uint64_t *a1, const void *a2, int *a3)
{
  std::chrono::system_clock::time_point v6;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  caulk::concurrent::messenger *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;

  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a1[2])
  {
    rep = v6.__d_.__rep_;
    v8 = (std::__shared_weak_count *)a1[1];
    if (!v8 || (v9 = *a1, (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    v12 = (caulk::concurrent::messenger *)a1[2];
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 216, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(_QWORD *)v15 = &off_1E69CFA48;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 24) = v9;
    *(_QWORD *)(v15 + 32) = v11;
    v16 = *a3;
    memmove((void *)(v15 + 40), a2, 0xA0uLL);
    *(_DWORD *)(v15 + 200) = v16;
    *(_QWORD *)(v15 + 208) = rep;
    *(_QWORD *)v15 = &off_1E69CFA20;
    caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v15);
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~rt_message_call(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69CFA48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

{
  *(_QWORD *)a1 = &off_1E69CFA48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
  caulk::concurrent::message *v2;

  v2 = (caulk::concurrent::message *)a1;
  AU::SoundIsolation::MetricsReporter::report(*(_QWORD *)(a1 + 24), a1 + 40, (_DWORD *)(a1 + 200), (_QWORD *)(a1 + 208));
  return caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B62BDF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void AU::SoundIsolation::MetricsReporter::report(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  std::mutex *v9;
  int16x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *i;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  void **v50;
  unsigned __int8 *v51;
  void **v52;
  unsigned __int8 *v53;
  void **v54;
  unsigned __int8 *v55;
  void **v56;
  unsigned __int8 *v57;
  void **v58;
  unsigned __int8 *v59;
  void **v60;
  unsigned __int8 *v61;
  void **v62;
  unsigned __int8 *v63;
  void **v64;
  unsigned __int8 *v65;
  void **v66;
  uint64_t *v67;
  uint64_t *v68;
  CFTypeRef v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  CFTypeRef v73;
  CFTypeRef cf;
  void *v75[2];
  char v76;
  std::string __p;
  _OWORD v78[2];
  int v79;
  void **v80;

  v9 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 168);
  if (!v12)
    goto LABEL_33;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = *a3;
    if (v12 <= v11)
      v14 = v11 % v12;
  }
  else
  {
    v14 = ((_DWORD)v12 - 1) & v11;
  }
  v15 = *(uint64_t ***)(*(_QWORD *)(a1 + 160) + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
  {
LABEL_18:
    if (v13.u32[0] > 1uLL)
    {
      v4 = *a3;
      if (v12 <= v11)
        v4 = v11 % v12;
    }
    else
    {
      v4 = ((_DWORD)v12 - 1) & v11;
    }
    v18 = *(uint64_t ***)(*(_QWORD *)(a1 + 160) + 8 * v4);
    if (v18)
    {
      for (i = *v18; i; i = (uint64_t *)*i)
      {
        v20 = i[1];
        if (v20 == v11)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v11)
            goto LABEL_89;
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v20 >= v12)
              v20 %= v12;
          }
          else
          {
            v20 &= v12 - 1;
          }
          if (v20 != v4)
            break;
        }
      }
    }
LABEL_33:
    v21 = operator new(0x20uLL);
    *v21 = 0;
    v21[1] = v11;
    *((_DWORD *)v21 + 4) = v11;
    v21[3] = *a4;
    v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 184) + 1);
    v10.i32[0] = *(_DWORD *)(a1 + 192);
    if (v12 && (float)(*(float *)v10.i32 * (float)v12) >= v22)
    {
      v11 = v4;
      goto LABEL_79;
    }
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v22 / *(float *)v10.i32);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v12 = *(_QWORD *)(a1 + 168);
    }
    if (*(_QWORD *)&prime <= v12)
    {
      if (*(_QWORD *)&prime >= v12)
        goto LABEL_75;
      v10.i32[0] = *(_DWORD *)(a1 + 192);
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)v10.i32);
      if (v12 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = *(_QWORD *)(a1 + 168);
        goto LABEL_75;
      }
      if (!*(_QWORD *)&prime)
      {
        v72 = *(void **)(a1 + 160);
        *(_QWORD *)(a1 + 160) = 0;
        if (v72)
          operator delete(v72);
        v12 = 0;
        *(_QWORD *)(a1 + 168) = 0;
        goto LABEL_75;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v27 = operator new(8 * *(_QWORD *)&prime);
    v28 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *(int8x8_t *)(a1 + 168) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v29++) = 0;
    while (*(_QWORD *)&prime != v29);
    v30 = *(_QWORD **)(a1 + 176);
    if (v30)
    {
      v31 = v30[1];
      v32 = (uint8x8_t)vcnt_s8(prime);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        if (v31 >= *(_QWORD *)&prime)
          v31 %= *(_QWORD *)&prime;
      }
      else
      {
        v31 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v31) = a1 + 176;
      v36 = (_QWORD *)*v30;
      if (*v30)
      {
        do
        {
          v37 = v36[1];
          if (v32.u32[0] > 1uLL)
          {
            if (v37 >= *(_QWORD *)&prime)
              v37 %= *(_QWORD *)&prime;
          }
          else
          {
            v37 &= *(_QWORD *)&prime - 1;
          }
          if (v37 != v31)
          {
            v38 = *(_QWORD *)(a1 + 160);
            if (!*(_QWORD *)(v38 + 8 * v37))
            {
              *(_QWORD *)(v38 + 8 * v37) = v30;
              goto LABEL_71;
            }
            *v30 = *v36;
            *v36 = **(_QWORD **)(*(_QWORD *)(a1 + 160) + 8 * v37);
            **(_QWORD **)(*(_QWORD *)(a1 + 160) + 8 * v37) = v36;
            v36 = v30;
          }
          v37 = v31;
LABEL_71:
          v30 = v36;
          v36 = (_QWORD *)*v36;
          v31 = v37;
        }
        while (v36);
      }
    }
    v12 = (unint64_t)prime;
LABEL_75:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11)
        v11 %= v12;
    }
    else
    {
      v11 = ((_DWORD)v12 - 1) & v11;
    }
LABEL_79:
    v39 = *(_QWORD *)(a1 + 160);
    v40 = *(_QWORD **)(v39 + 8 * v11);
    if (v40)
    {
      *v21 = *v40;
    }
    else
    {
      *v21 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v21;
      *(_QWORD *)(v39 + 8 * v11) = a1 + 176;
      if (!*v21)
      {
LABEL_88:
        ++*(_QWORD *)(a1 + 184);
        goto LABEL_89;
      }
      v41 = *(_QWORD *)(*v21 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v41 >= v12)
          v41 %= v12;
      }
      else
      {
        v41 &= v12 - 1;
      }
      v40 = (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v41);
    }
    *v40 = v21;
    goto LABEL_88;
  }
  while (1)
  {
    v17 = v16[1];
    if (v17 == v11)
      break;
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= v12)
        v17 %= v12;
    }
    else
    {
      v17 &= v12 - 1;
    }
    if (v17 != v14)
      goto LABEL_18;
LABEL_17:
    v16 = (uint64_t *)*v16;
    if (!v16)
      goto LABEL_18;
  }
  if (*((_DWORD *)v16 + 4) != (_DWORD)v11)
    goto LABEL_17;
  if ((*a4 - v16[3]) / 1000000 >= *(_QWORD *)(a1 + 152))
  {
    v16[3] = *a4;
LABEL_89:
    memset(v78, 0, sizeof(v78));
    v79 = 1065353216;
    switch(*a3)
    {
      case 0:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v75[0] = &__p;
        v42 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
        std::string::__assign_external((std::string *)(v42 + 40), "InputAndOutputFormatMismatch", 0x1CuLL);
        goto LABEL_103;
      case 1:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v75[0] = &__p;
        v47 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
        if ((char)v47[63] < 0)
        {
          *((_QWORD *)v47 + 6) = 20;
          v48 = (char *)*((_QWORD *)v47 + 5);
        }
        else
        {
          v48 = (char *)(v47 + 40);
          v47[63] = 20;
        }
        strcpy(v48, "InitializeBaseFailed");
        goto LABEL_103;
      case 2:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v75[0] = &__p;
        v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
        std::string::__assign_external((std::string *)(v45 + 40), "CreateProcessingGraphsFailed", 0x1CuLL);
        goto LABEL_103;
      case 3:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v75[0] = &__p;
        v46 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
        std::string::__assign_external((std::string *)(v46 + 40), "InitializationSuccessful", 0x18uLL);
        goto LABEL_103;
      case 4:
        std::string::basic_string[abi:ne180100]<0>(&__p, "vois_report_type");
        v75[0] = &__p;
        v43 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
        if ((char)v43[63] < 0)
        {
          *((_QWORD *)v43 + 6) = 17;
          v44 = (char *)*((_QWORD *)v43 + 5);
        }
        else
        {
          v44 = (char *)(v43 + 40);
          v43[63] = 17;
        }
        strcpy(v44, "ParametersUpdated");
LABEL_103:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        break;
      default:
        break;
    }
    if (*(_BYTE *)(a2 + 4))
    {
      std::to_string(&__p, *(_DWORD *)a2);
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_error_code");
      v80 = v75;
      v49 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v50 = (void **)(v49 + 40);
      if ((char)v49[63] < 0)
        operator delete(*v50);
      *(std::string *)v50 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 48))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)(a2 + 8), (uint64_t)&__p, v10);
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_input_format");
      v80 = v75;
      v51 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v52 = (void **)(v51 + 40);
      if ((char)v51[63] < 0)
        operator delete(*v52);
      *(std::string *)v52 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 96))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)(a2 + 56), (uint64_t)&__p, v10);
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_output_format");
      v80 = v75;
      v53 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v54 = (void **)(v53 + 40);
      if ((char)v53[63] < 0)
        operator delete(*v54);
      *(std::string *)v54 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 112))
    {
      std::to_string(&__p, *(_QWORD *)(a2 + 104));
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_initialization_duration_miliseconds");
      v80 = v75;
      v55 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v56 = (void **)(v55 + 40);
      if ((char)v55[63] < 0)
        operator delete(*v56);
      *(std::string *)v56 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 124))
    {
      std::to_string(&__p, *(float *)(a2 + 120));
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_parameter_wetdrymixpercent");
      v80 = v75;
      v57 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v58 = (void **)(v57 + 40);
      if ((char)v57[63] < 0)
        operator delete(*v58);
      *(std::string *)v58 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 132))
    {
      std::to_string(&__p, *(_DWORD *)(a2 + 128));
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_parameter_soundtoisolate");
      v80 = v75;
      v59 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v60 = (void **)(v59 + 40);
      if ((char)v59[63] < 0)
        operator delete(*v60);
      *(std::string *)v60 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 137))
    {
      std::to_string(&__p, *(unsigned __int8 *)(a2 + 136));
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_parameter_usetuningmode");
      v80 = v75;
      v61 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v62 = (void **)(v61 + 40);
      if ((char)v61[63] < 0)
        operator delete(*v62);
      *(std::string *)v62 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 144))
    {
      std::to_string(&__p, *(_DWORD *)(a2 + 140));
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_parameter_selectedtuningmode");
      v80 = v75;
      v63 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v64 = (void **)(v63 + 40);
      if ((char)v63[63] < 0)
        operator delete(*v64);
      *(std::string *)v64 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(_BYTE *)(a2 + 152))
    {
      std::to_string(&__p, *(_DWORD *)(a2 + 148));
      std::string::basic_string[abi:ne180100]<0>(v75, "vois_parameter_updatedtuningmode");
      v80 = v75;
      v65 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v78, (unsigned __int8 *)v75, (uint64_t)&std::piecewise_construct, (__int128 **)&v80);
      v66 = (void **)(v65 + 40);
      if ((char)v65[63] < 0)
        operator delete(*v66);
      *(std::string *)v66 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (v76 < 0)
      {
        operator delete(v75[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&cf, (uint64_t)v78);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v78);
    v67 = *(uint64_t **)(a1 + 128);
    v68 = *(uint64_t **)(a1 + 136);
    v69 = cf;
    while (v67 != v68)
    {
      v70 = *v67;
      if (v69)
        CFRetain(v69);
      v73 = v69;
      *(_QWORD *)&v78[0] = v70;
      v71 = *(_QWORD *)(a1 + 56);
      if (!v71)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _OWORD *, CFTypeRef *))(*(_QWORD *)v71 + 48))(v71, v78, &v73);
      if (v73)
        CFRelease(v73);
      ++v67;
    }
    if (v69)
      CFRelease(v69);
  }
  std::mutex::unlock(v9);
}

void sub_1B62BEBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::mutex *v23;

  if (a22 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a23);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E69CFA48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 24);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 216, 8);
  return a1;
}

void caulk::concurrent::details::message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::~message_call(caulk::concurrent::message *a1)
{
  *(_QWORD *)a1 = &off_1E69CFA48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
}

{
  *(_QWORD *)a1 = &off_1E69CFA48;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void caulk::concurrent::details::message_call<AU::SoundIsolation::MetricsReporter::reportAsync(AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&)::$_0,AU::SoundIsolation::MetricsReporter::Report const&,AU::SoundIsolation::MetricsReporter::ReportType const&,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>> const&>::perform(uint64_t a1)
{
  AU::SoundIsolation::MetricsReporter::report(*(_QWORD *)(a1 + 24), a1 + 40, (_DWORD *)(a1 + 200), (_QWORD *)(a1 + 208));
}

void AUNoiseSelector::~AUNoiseSelector(AUNoiseSelector *this)
{
  AUNoiseSelector::~AUNoiseSelector(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E69CFA70;
  v2 = (_QWORD *)((char *)this + 560);
  std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100]((_QWORD *)this + 70, 0);
  std::__hash_table<vp::vx::io::Object_ID<vp::vx::io::Node>,std::hash<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::equal_to<vp::vx::io::Object_ID<vp::vx::io::Node>>,std::allocator<vp::vx::io::Object_ID<vp::vx::io::Node>>>::~__hash_table((uint64_t)this + 568);
  std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100](v2, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUNoiseSelector::Initialize(AUNoiseSelector *this)
{
  unsigned int v2;
  ausdk::AUScope *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Element;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  int32x2_t v30;
  double v31;
  float32x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  int v38;

  v2 = 0;
  v3 = (AUNoiseSelector *)((char *)this + 80);
  while (1)
  {
    v4 = *((_QWORD *)this + 15);
    if (v4)
      LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      v5 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
    if (v2 >= v5)
      break;
    Element = ausdk::AUScope::SafeGetElement(v3, v2++);
    if (*(_DWORD *)(Element + 108) != 3)
      return 4294956421;
  }
  v7 = 0;
  while (1)
  {
    v8 = *((_QWORD *)this + 21);
    if (v8)
      LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    else
      v9 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v7 >= v9)
      break;
    v10 = ausdk::AUScope::SafeGetElement((AUNoiseSelector *)((char *)this + 128), v7++);
    if (*(_DWORD *)(v10 + 108) != 1)
      return 4294956421;
  }
  v12 = *((unsigned int *)this + 84);
  v13 = operator new();
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_DWORD *)(v13 + 44) = 0x40000000;
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 64) = 1082130432;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_DWORD *)(v13 + 88) = 619091349;
  *(_OWORD *)(v13 + 104) = xmmword_1B66A1E70;
  *(_DWORD *)(v13 + 120) = 1056964608;
  *(_QWORD *)(v13 + 144) = 0x3DCCCCCD3F000000;
  *(_DWORD *)(v13 + 152) = 1056964608;
  *(_QWORD *)(v13 + 160) = 20;
  *(_BYTE *)(v13 + 168) = 1;
  *(_QWORD *)(v13 + 328) = 0;
  *(_QWORD *)(v13 + 336) = 0;
  *(_QWORD *)(v13 + 320) = 0;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 240) = 0u;
  *(_OWORD *)(v13 + 240) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 272) = 0u;
  *(_OWORD *)(v13 + 272) = 0u;
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 304) = 0u;
  *(_QWORD *)(v13 + 304) = 0;
  std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100]((_QWORD *)this + 70, v13);
  v14 = *((_QWORD *)this + 70);
  if (v14)
  {
    v15 = (float)*((unsigned int *)this + 136);
    *(float *)v14 = v15;
    *(_QWORD *)(v14 + 8) = v12;
    *(_QWORD *)(v14 + 16) = v12;
    *(_OWORD *)(v14 + 24) = xmmword_1B66A1E80;
    std::vector<float>::resize(v14 + 176, v12);
    std::vector<float>::resize(v14 + 200, *(_QWORD *)(v14 + 16));
    std::vector<float>::resize(v14 + 224, *(_QWORD *)(v14 + 16));
    std::vector<float>::resize(v14 + 248, *(_QWORD *)(v14 + 16));
    std::vector<float>::resize(v14 + 272, *(_QWORD *)(v14 + 16));
    v16 = 2 * *(_QWORD *)(v14 + 16);
    v38 = 0;
    std::vector<float>::assign((char **)(v14 + 320), v16, &v38);
    v17 = CNoiseSuppressorV4::speex_preprocess_state_init(*(_DWORD *)(v14 + 16), (int)*(float *)v14, 0, 0, 0, 0, 1);
    *(_QWORD *)(v14 + 312) = v17;
    if (!v17)
      return 4294956421;
    v18 = v15 / (double)v12;
    *(_DWORD *)(v17 + 52) = -20;
    v19 = operator new();
    v20 = *(float *)v14;
    *(float *)v19 = v18;
    *(float *)(v19 + 4) = v20;
    *(_DWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 8) = 0;
    v21 = *(_QWORD *)(v14 + 296);
    *(_QWORD *)(v14 + 296) = v19;
    if (v21)
      MEMORY[0x1BCC95CEC](v21, 0x1000C408AA14F5FLL);
    v22 = operator new();
    v23 = *(float *)v14;
    *(float *)v22 = v18;
    *(float *)(v22 + 4) = v23;
    *(_DWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 8) = 0;
    v24 = *(_QWORD *)(v14 + 304);
    *(_QWORD *)(v14 + 304) = v22;
    if (v24)
      MEMORY[0x1BCC95CEC](v24, 0x1000C408AA14F5FLL);
    v25 = *(_QWORD *)(v14 + 296);
    v26 = *(float *)v25;
    if (*(float *)v25 <= 0.0
      || (*(float *)(v25 + 16) = expf(-1.0 / (float)(v26 * 0.05)),
          *(float *)(v25 + 20) = expf(-1.0 / (float)(v26 * 0.3)),
          *(_DWORD *)(v25 + 32) = 0,
          *(_QWORD *)(v25 + 24) = 0,
          v27 = *(_QWORD *)(v14 + 304),
          v28 = *(float *)v27,
          *(float *)v27 <= 0.0))
    {
      __assert_rtn("ComputeCoefFromTC", "MagDiffVAD.h", 120, "blockFs > 0");
    }
    *(float *)(v27 + 16) = expf(-1.0 / (float)(v28 * 0.01));
    *(float *)(v27 + 20) = expf(-1.0 / (float)(v28 * 0.1));
    *(_DWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 24) = 1082130432;
    *(_DWORD *)(v14 + 44) = 0x40000000;
    v29 = *(_QWORD *)(v14 + 8);
    *(double *)&v30 = (double)v29 + (double)v29;
    v31 = *(float *)v14 / *(double *)&v30;
    *(float *)&v31 = v31;
    v30.i32[0] = 1157234688;
    v32 = (float32x2_t)vdup_lane_s32(v30, 0);
    v32.f32[0] = *(float *)v14 * 0.5;
    v33 = vcvtq_f64_f32(vrnda_f32(vabs_f32(vdiv_f32(v32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v31, 0)))));
    v34 = (int8x16_t)vdupq_n_s64(v29);
    v35 = (int8x16_t)vcvtq_u64_f64(v33);
    v36 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v35, (uint64x2_t)v34), v34, v35);
    *(int8x16_t *)(v14 + 48) = v36;
    *(_DWORD *)(v14 + 64) = 1082130432;
    v37 = vcvtas_u32_f32(fabsf(100.0 / *(float *)&v31));
    *(_QWORD *)(v14 + 72) = v36.i64[0];
    if (v29 >= v37)
      v29 = v37;
    *(_QWORD *)(v14 + 80) = v29;
    *(_BYTE *)(v14 + 40) = 1;
  }
  return (*(uint64_t (**)(AUNoiseSelector *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
}

_QWORD *AUNoiseSelector::Cleanup(AUNoiseSelector *this)
{
  return std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100]((_QWORD *)this + 70, 0);
}

uint64_t AUNoiseSelector::Reset(AUNoiseSelector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_QWORD *)this + 70))
  {
    AUNoiseSelector::UpdateState(this);
    v2 = *((_QWORD *)this + 70);
    v3 = *(_QWORD *)(v2 + 296);
    if (v3)
      *(_QWORD *)(v3 + 8) = 0;
    v4 = *(_QWORD *)(v2 + 304);
    if (v4)
      *(_QWORD *)(v4 + 8) = 0;
  }
  return 0;
}

uint64_t AUNoiseSelector::GetPropertyInfo(AUNoiseSelector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUNoiseSelector::GetProperty(AUNoiseSelector *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = *((_DWORD *)this + 134);
  }
  result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUNoiseSelector::SetProperty(AUNoiseSelector *this, int a2, int a3, unsigned int a4, _BYTE *a5, unsigned int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5)
        return 0;
      else
        return 4294956445;
    }
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *((_DWORD *)this + 134) = *(_DWORD *)a5;
  }
  return result;
}

uint64_t AUNoiseSelector::SetParameter(AUNoiseSelector *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUNoiseSelector::CanScheduleParameters(AUNoiseSelector *this)
{
  return 0;
}

uint64_t AUNoiseSelector::ProcessMultipleBufferLists(AUNoiseSelector *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  unint64_t v11;
  AudioDSP::Utility *v12;
  uint64_t v13;
  unint64_t v14;
  const AudioBufferList **v15;
  AudioBufferList *v16;
  BOOL v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  AudioBufferList **v23;
  const AudioBufferList *v24;
  AudioBufferList *v25;
  AudioBuffer *mBuffers;
  uint64_t v27;
  vDSP_Length v28;
  uint64_t v29;
  float *v30;
  float *v31;
  unint64_t v32;
  double v33;
  vDSP_Length v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  const AudioBufferList *v38;
  AudioBufferList *v39;
  void *v40;
  AudioBufferList *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  vDSP_Length v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unint64_t v59;
  int v60;
  void *v61;
  float v62;
  uint64_t v63;
  ausdk::AUElement *v64;
  ausdk::AUElement **v65;
  float v66;
  uint64_t v67;
  ausdk::AUElement *v68;
  ausdk::AUElement **v69;
  unint64_t v70;
  uint64_t v71;
  const AudioBufferList *v72;
  AudioBufferList *v73;
  float *mData;
  vDSP_Length v75;
  float *v76;
  const float *v77;
  const float *v78;
  AudioBufferList *v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  float *v84;
  AudioBufferList *v85;
  const AudioBufferList *v86;
  AudioBufferList __A;
  __int128 v88;
  _BYTE v89[45];
  DSPSplitComplex v90;
  DSPSplitComplex v91;

  if (*((_BYTE *)this + 376) && *((_DWORD *)this + 84) != a3)
    return 4294956422;
  v89[0] = 0;
  v11 = a4;
  if (a4)
  {
    v12 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 137));
    v13 = a4 - 1;
    HIDWORD(v14) = 3;
    v15 = a5;
    while (1)
    {
      v16 = (AudioBufferList *)*v15;
      if (!*v15)
        return 4294956420;
      if (v16->mNumberBuffers != 3)
        return 4294956428;
      LODWORD(v14) = *((_DWORD *)this + 136);
      *(double *)&__A.mNumberBuffers = (double)v14;
      __A.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
      v88 = xmmword_1B66A0810;
      AudioDSP::Utility::DetectNonFinites(v12, v16, &__A, (const AudioStreamBasicDescription *)v89, (BOOL *)a5);
      v17 = v89[0] == 0;
      v19 = v13-- != 0;
      if (!v89[0])
      {
        ++v15;
        if (v19)
          continue;
      }
      goto LABEL_15;
    }
  }
  v17 = 1;
LABEL_15:
  v21 = a6;
  if (a6)
  {
    v22 = a6;
    v23 = a7;
    while (*v23)
    {
      if ((*v23)->mNumberBuffers != 1)
        return 4294956428;
      ++v23;
      if (!--v22)
        goto LABEL_20;
    }
    return 4294956420;
  }
LABEL_20:
  if (v17 || !*((_BYTE *)this + 552))
  {
    v20 = *((_QWORD *)this + 70);
    if (v20)
    {
      if (*((_DWORD *)this + 133) != *((_DWORD *)this + 132))
      {
        AUNoiseSelector::UpdateState(this);
        *((_DWORD *)this + 133) = *((_DWORD *)this + 132);
        v20 = *((_QWORD *)this + 70);
        if (!v20)
          goto LABEL_84;
      }
      v24 = *a5;
      v25 = *a7;
      if (*(_BYTE *)(v20 + 40))
      {
        v86 = *a5;
        mBuffers = v24->mBuffers;
        v27 = *(_QWORD *)(v20 + 104);
        v28 = *(_QWORD *)(v20 + 16);
        v29 = (uint64_t)mBuffers[*(_QWORD *)(v20 + 96)].mData + 4 * v28;
        *(_QWORD *)&__A.mNumberBuffers = mBuffers[*(_QWORD *)(v20 + 96)].mData;
        *(_QWORD *)&__A.mBuffers[0].mNumberChannels = v29;
        v91.realp = (float *)mBuffers[v27].mData;
        v91.imagp = &v91.realp[v28];
        v90.realp = (float *)mBuffers[*(_QWORD *)(v20 + 112)].mData;
        v90.imagp = &v90.realp[v28];
        *(_QWORD *)&v89[29] = v25->mBuffers[0].mData;
        *(_QWORD *)&v89[37] = *(_QWORD *)&v89[29] + 4 * v28;
        v84 = *(float **)&v89[37];
        v85 = v25;
        vDSP_zvabs((const DSPSplitComplex *)&__A, 1, *(float **)(v20 + 224), 1, v28);
        vDSP_zvabs(&v91, 1, *(float **)(v20 + 248), 1, *(_QWORD *)(v20 + 16));
        vDSP_zvabs(&v90, 1, *(float **)(v20 + 272), 1, *(_QWORD *)(v20 + 16));
        vDSP_vmin(*(const float **)(v20 + 224), 1, *(const float **)(v20 + 272), 1, *(float **)(v20 + 176), 1, *(_QWORD *)(v20 + 16));
        v30 = *(float **)(v20 + 320);
        v31 = &v30[*(_QWORD *)(v20 + 16)];
        *(_QWORD *)&v89[5] = v30;
        *(_OWORD *)&v89[13] = (unint64_t)v31;
        *(_DWORD *)&v89[1] = 0;
        vDSP_vfill((const float *)&v89[1], v30, 1, *(_QWORD *)(v20 + 56));
        vDSP_vfill((const float *)&v89[1], v31, 1, *(_QWORD *)(v20 + 56));
        v32 = *(_QWORD *)(v20 + 48);
        v33 = (double)*(unint64_t *)(v20 + 16) - (double)v32;
        if (v33 < 0.0)
          v33 = 0.0;
        v34 = (unint64_t)v33;
        vDSP_vfill((const float *)&v89[1], &v30[v32], 1, (unint64_t)v33);
        vDSP_vfill((const float *)&v89[1], &v31[*(_QWORD *)(v20 + 48)], 1, v34);
        CNoiseSuppressorV4::speex_preprocess_run_freq(*(_QWORD *)(v20 + 312), (const float **)&v89[5], 0, 0);
        v35 = *(_QWORD *)(v20 + 312);
        if (v35)
          v36 = *(_DWORD *)(v35 + 332);
        else
          v36 = 0;
        v44 = *(_QWORD *)(v20 + 80);
        v45 = (unint64_t)((double)*(unint64_t *)(v20 + 72) - (double)v44);
        vDSP_svesq((const float *)(*(_QWORD *)(v20 + 224) + 4 * v44), 1, (float *)&v89[25], v45);
        vDSP_svesq((const float *)(*(_QWORD *)(v20 + 248) + 4 * *(_QWORD *)(v20 + 80)), 1, (float *)&v89[21], v45);
        v46 = *(float **)(v20 + 304);
        v47 = *(float *)&v89[25];
        v48 = *(float *)(v20 + 88);
        if (*(float *)&v89[25] < v48)
          v47 = *(float *)(v20 + 88);
        if (*(float *)&v89[21] >= v48)
          v49 = *(float *)&v89[21];
        else
          v49 = *(float *)(v20 + 88);
        v50 = log10f(v47 + 2.2204e-16);
        v51 = (float)(v50 - log10f(v49 + 2.2204e-16)) * 10.0;
        v52 = v46[2];
        v53 = v46[3];
        v54 = 5;
        if (v51 > v53)
          v54 = 4;
        v55 = (float)(v51 * (float)(1.0 - v46[v54])) + (float)(v46[v54] * v53);
        v46[3] = v55;
        if (v55 <= v46[6])
          v56 = v46[8] * v52;
        else
          v56 = (float)(v55 * (float)(1.0 - v46[7])) + (float)(v46[7] * v52);
        v46[2] = v56;
        v57 = expf(v56 - *(float *)(v20 + 64));
        if (*(float *)(v20 + 124) <= *(float *)(v20 + 120) || *(_BYTE *)(v20 + 169))
        {
          v58 = v57 / (float)(v57 + 1.0);
          memcpy(v85->mBuffers[0].mData, v86->mBuffers[*(_QWORD *)(v20 + 104)].mData, v85->mBuffers[0].mDataByteSize);
          *(float *)(v20 + 128) = v58;
          *(_BYTE *)(v20 + 170) = 0;
        }
        else
        {
          if (*(_BYTE *)(v20 + 168))
            vDSP_vmin(*(const float **)(v20 + 224), 1, *(const float **)(v20 + 272), 1, *(float **)(v20 + 176), 1, *(_QWORD *)(v20 + 16));
          *(_DWORD *)&v89[1] = 507307272;
          vDSP_vsadd(*(const float **)(v20 + 272), 1, (const float *)&v89[1], *(float **)(v20 + 200), 1, *(_QWORD *)(v20 + 16));
          vDSP_vdiv(*(const float **)(v20 + 200), 1, *(const float **)(v20 + 176), 1, *(float **)(v20 + 200), 1, *(_QWORD *)(v20 + 16));
          vDSP_vmul(v90.realp, 1, *(const float **)(v20 + 200), 1, *(float **)&v89[29], 1, *(_QWORD *)(v20 + 16));
          vDSP_vmul(v90.imagp, 1, *(const float **)(v20 + 200), 1, v84, 1, *(_QWORD *)(v20 + 16));
          *(_DWORD *)(v20 + 128) = v36;
          *(_BYTE *)(v20 + 170) = 1;
        }
        vDSP_zvmov((const DSPSplitComplex *)&v89[29], 1, (const DSPSplitComplex *)&v89[5], 1, *(_QWORD *)(v20 + 16));
        if (*(float *)(v20 + 128) <= *(float *)(v20 + 144))
        {
          v59 = *(_QWORD *)(v20 + 136) + 1;
          *(_QWORD *)(v20 + 136) = v59;
          if (v59 <= *(_QWORD *)(v20 + 160))
            v60 = *(_DWORD *)(v20 + 152);
          else
            v60 = *(_DWORD *)(v20 + 148);
          *(_DWORD *)(v20 + 128) = v60;
        }
        else
        {
          *(_QWORD *)(v20 + 136) = 0;
        }
        if (!*((_DWORD *)this + 134))
        {
          v20 = 0;
LABEL_70:
          v62 = *(float *)(*((_QWORD *)this + 70) + 128);
          v63 = *((_QWORD *)this + 9);
          if (v63)
          {
            v64 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 0);
          }
          else
          {
            v65 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v65)
              v64 = 0;
            else
              v64 = *v65;
          }
          ausdk::AUElement::SetParameter(v64, 1u, v62, 0);
          if (*(_BYTE *)(*((_QWORD *)this + 70) + 170))
            v66 = 1.0;
          else
            v66 = 0.0;
          v67 = *((_QWORD *)this + 9);
          if (v67)
          {
            v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 0);
          }
          else
          {
            v69 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v69)
              v68 = 0;
            else
              v68 = *v69;
          }
          ausdk::AUElement::SetParameter(v68, 0xDu, v66, 0);
LABEL_84:
          if (a6 >= 2)
          {
            v70 = 1;
            do
            {
              if (v70 >= v11)
              {
                v79 = a7[v70];
                if (v79->mNumberBuffers)
                {
                  v80 = 0;
                  v81 = 0;
                  do
                  {
                    bzero(v79->mBuffers[v80].mData, v79->mBuffers[v80].mDataByteSize);
                    ++v81;
                    v79 = a7[v70];
                    ++v80;
                  }
                  while (v81 < v79->mNumberBuffers);
                }
              }
              else
              {
                v71 = *((_QWORD *)this + 70);
                v72 = a5[v70];
                v73 = a7[v70];
                if (*(_BYTE *)(v71 + 40))
                {
                  mData = (float *)v73->mBuffers[0].mData;
                  if (*(float *)(v71 + 124) <= *(float *)(v71 + 120))
                  {
                    memcpy(v73->mBuffers[0].mData, v72->mBuffers[*(_QWORD *)(v71 + 104)].mData, v73->mBuffers[0].mDataByteSize);
                  }
                  else
                  {
                    v75 = *(_QWORD *)(v71 + 16);
                    v76 = &mData[v75];
                    v77 = (const float *)v72->mBuffers[*(_QWORD *)(v71 + 112)].mData;
                    v78 = &v77[v75];
                    vDSP_vmul(v77, 1, *(const float **)(v71 + 200), 1, mData, 1, v75);
                    vDSP_vmul(v78, 1, *(const float **)(v71 + 200), 1, v76, 1, *(_QWORD *)(v71 + 16));
                  }
                  v20 = 0;
                }
                else
                {
                  if (v72->mBuffers[0].mDataByteSize <= v73->mBuffers[0].mDataByteSize)
                  {
                    v82 = v73->mBuffers[0].mData;
                    if (v72->mBuffers[0].mData != v82)
                      memcpy(v82, *(const void **)&v72[1].mBuffers[0].mNumberChannels, *(&v72[1].mNumberBuffers + 1));
                  }
                  v20 = 4294956429;
                }
              }
              ++v70;
            }
            while (v70 != v21);
          }
          return v20;
        }
        v20 = 0;
        v24 = *a5;
        v25 = *a7;
      }
      else
      {
        v20 = 4294956429;
      }
      if (v24->mBuffers[0].mDataByteSize <= v25->mBuffers[0].mDataByteSize)
      {
        v61 = v25->mBuffers[0].mData;
        if (v24->mBuffers[0].mData != v61)
          memcpy(v61, *(const void **)&v24[1].mBuffers[0].mNumberChannels, *(&v24[1].mNumberBuffers + 1));
      }
      goto LABEL_70;
    }
  }
  if (a6)
  {
    v37 = 0;
    do
    {
      if (v37 >= v11)
      {
        v41 = a7[v37];
        if (v41->mNumberBuffers)
        {
          v42 = 0;
          v43 = 0;
          do
          {
            bzero(v41->mBuffers[v42].mData, v41->mBuffers[v42].mDataByteSize);
            ++v43;
            v41 = a7[v37];
            ++v42;
          }
          while (v43 < v41->mNumberBuffers);
        }
      }
      else
      {
        v38 = a5[v37];
        v39 = a7[v37];
        if (v38->mBuffers[0].mDataByteSize <= v39->mBuffers[0].mDataByteSize)
        {
          v40 = v39->mBuffers[0].mData;
          if (v38->mBuffers[0].mData != v40)
            memcpy(v40, *(const void **)&v38[1].mBuffers[0].mNumberChannels, *(&v38[1].mNumberBuffers + 1));
        }
      }
      ++v37;
    }
    while (v37 != v21);
  }
  return 0;
}

uint64_t AUNoiseSelector::Render(AUNoiseSelector *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  ausdk::AUIOElement *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  v8 = (AUNoiseSelector *)((char *)this + 80);
  v9 = *((_QWORD *)this + 15);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  else
    v10 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v11 = 0;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      if (ausdk::AUBase::HasInput(this, v12))
      {
        Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, v12);
        result = ausdk::AUInputElement::PullInput(Element, a2, a3, v12, a4);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        v11 = 1;
      }
      v12 = (v12 + 1);
    }
    while ((_DWORD)v10 != (_DWORD)v12);
  }
  v15 = *((_QWORD *)this + 21);
  if (v15)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    LODWORD(v16) = v15;
  }
  else
  {
    v16 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  }
  v31[2] = v31;
  v17 = v16;
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v31 - v19;
  if (v18 >= 0x200)
    v21 = 512;
  else
    v21 = v18;
  bzero((char *)v31 - v19, v21);
  if ((_DWORD)v16)
  {
    v23 = 0;
    do
    {
      v24 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUNoiseSelector *)((char *)this + 128), v23);
      v22 = ausdk::AUIOElement::PrepareBuffer(v24, a4);
      *(_QWORD *)&v20[8 * v23++] = v22;
    }
    while (v17 != v23);
  }
  if ((v11 & 1) != 0)
    return 0;
  v31[1] = v31;
  MEMORY[0x1E0C80A78](v22);
  v27 = (char *)v31 - v26;
  if (v25 >= 0x200)
    v28 = 512;
  else
    v28 = v25;
  bzero((char *)v31 - v26, v28);
  if ((_DWORD)v10)
  {
    v29 = 0;
    do
    {
      v30 = ausdk::AUScope::SafeGetElement(v8, v29);
      *(_QWORD *)&v27[8 * v29++] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v30 + 144));
    }
    while (v10 != v29);
  }
  return (*(uint64_t (**)(AUNoiseSelector *, unsigned int *, uint64_t, uint64_t, char *, uint64_t, char *))(*(_QWORD *)this + 184))(this, a2, a4, v10, v27, v17, v20);
}

BOOL AUNoiseSelector::BusCountWritable(AUNoiseSelector *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUNoiseSelector::SetBusCount(AUNoiseSelector *this, int a2, unsigned int a3)
{
  unsigned int v3;
  int64x2_t *v4;
  uint64_t v5;

  v3 = a3 - 1;
  if (a2 == 1 && v3 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  v5 = 4294956445;
  if (a2 == 2 && v3 <= 1)
  {
    v4 = (int64x2_t *)((char *)this + 128);
    goto LABEL_7;
  }
  return v5;
}

uint64_t AUNoiseSelector::GetParameterInfo(AUNoiseSelector *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t result;
  char *v8;
  _QWORD *v9;
  const __CFString *v10;
  AudioUnitParameterValue v11;
  AudioUnitParameterUnit v12;
  int v13;
  AudioUnitParameterOptions v14;
  uint64_t v15;
  unsigned int v16;

  v16 = a3;
  a4->flags = 0;
  a4->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0xE)
  {
    v8 = (char *)this + 568;
    if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((_QWORD *)this + 71, a3))
    {
      v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v8, a3, &v16);
      v10 = (const __CFString *)v9[3];
      v11 = *((float *)v9 + 8);
      v12 = *((_DWORD *)v9 + 11);
      v13 = *((_DWORD *)v9 + 12);
      v14 = a4->flags | 0x8000000;
      v15 = *(_QWORD *)((char *)v9 + 36);
      a4->cfNameString = v10;
      a4->flags = v14;
      CFStringGetCString(v10, a4->name, 52, 0x8000100u);
      result = 0;
      a4->defaultValue = v11;
      *(_QWORD *)&a4->minValue = v15;
      a4->unit = v12;
      a4->flags |= v13;
    }
    else
    {
      return 4294956418;
    }
  }
  return result;
}

uint64_t AUNoiseSelector::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUNoiseSelector::GetParameterValueStrings(AUNoiseSelector *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  if (a2)
    return 4294956430;
  if (a3 != 12)
    return 0;
  v7 = xmmword_1E69CFCB0;
  v6 = CFArrayCreate(0, (const void **)&v7, 2, 0);
  result = 0;
  *a4 = v6;
  return result;
}

double AUNoiseSelector::GetLatency(AUNoiseSelector *this)
{
  return 0.0;
}

double AUNoiseSelector::GetTailTime(AUNoiseSelector *this)
{
  return 0.0;
}

uint64_t AUNoiseSelector::SupportsTail(AUNoiseSelector *this)
{
  return 1;
}

BOOL AUNoiseSelector::StreamFormatWritable(AUNoiseSelector *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUNoiseSelector::SupportedNumChannels(AUNoiseSelector *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNoiseSelector::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUNoiseSelector::ValidFormat(AUNoiseSelector *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;
  BOOL v6;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2)
  {
    v6 = a4->mChannelsPerFrame == 1;
  }
  else
  {
    if (a2 != 1)
      return result;
    v6 = a4->mChannelsPerFrame == 3;
  }
  if (v6)
    return result;
  else
    return 0;
}

uint64_t AUNoiseSelector::ChangeStreamFormat(AUNoiseSelector *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (a4->mSampleRate != a5->mSampleRate)
    *((_DWORD *)this + 136) = a5->mSampleRate;
  return 0;
}

uint64_t AUNoiseSelector::SetMaxFramesPerSlice(AUNoiseSelector *this, int a2)
{
  uint64_t result;

  result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 137) != a2)
    *((_DWORD *)this + 137) = a2;
  return result;
}

void AUNoiseSelector::UpdateState(AUNoiseSelector *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  unint64_t v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;

  if (*((_QWORD *)this + 70))
  {
    v2 = 0;
    while (2)
    {
      v3 = *((_QWORD *)this + 70);
      v4 = *((_QWORD *)this + 9);
      if (v4)
      {
        v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
      }
      else
      {
        v6 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v6)
          v5 = 0;
        else
          v5 = *v6;
      }
      Parameter = ausdk::AUElement::GetParameter(v5, v2);
      switch(v2)
      {
        case 0u:
          *(float *)(v3 + 124) = Parameter;
          goto LABEL_29;
        case 2u:
          *(float *)(v3 + 64) = Parameter;
          goto LABEL_29;
        case 3u:
          v8 = *(_QWORD *)(v3 + 8);
          v9 = *(float *)v3 / ((double)v8 + (double)v8);
          v10 = vcvtas_u32_f32(fabsf(Parameter / v9));
          if (v8 >= v10)
            v8 = v10;
          *(_QWORD *)(v3 + 80) = v8;
          goto LABEL_29;
        case 4u:
          v11 = *(_QWORD *)(v3 + 8);
          v12 = *(float *)v3 / ((double)v11 + (double)v11);
          v13 = vcvtas_u32_f32(fabsf(Parameter / v12));
          if (v11 >= v13)
            v11 = v13;
          *(_QWORD *)(v3 + 72) = v11;
          goto LABEL_29;
        case 5u:
          *(float *)(v3 + 44) = Parameter;
          goto LABEL_29;
        case 6u:
          v14 = *(_QWORD *)(v3 + 8);
          v15 = *(float *)v3 / ((double)v14 + (double)v14);
          v16 = vcvtas_u32_f32(fabsf(Parameter / v15));
          if (v14 >= v16)
            v14 = v16;
          *(_QWORD *)(v3 + 56) = v14;
          goto LABEL_29;
        case 7u:
          v17 = *(_QWORD *)(v3 + 8);
          v18 = *(float *)v3 / ((double)v17 + (double)v17);
          v19 = vcvtas_u32_f32(fabsf(Parameter / v18));
          if (v17 >= v19)
            v17 = v19;
          *(_QWORD *)(v3 + 48) = v17;
          goto LABEL_29;
        case 8u:
          *(float *)(v3 + 144) = Parameter;
          goto LABEL_29;
        case 9u:
          *(float *)(v3 + 148) = Parameter;
          goto LABEL_29;
        case 0xAu:
          *(float *)(v3 + 152) = Parameter;
          goto LABEL_29;
        case 0xBu:
          *(_QWORD *)(v3 + 160) = vcvtad_u64_f64((float)(*(float *)v3 * Parameter) / (double)*(unint64_t *)(v3 + 8));
          goto LABEL_29;
        case 0xCu:
          *(_BYTE *)(v3 + 168) = Parameter != 0.0;
          goto LABEL_29;
        case 0xEu:
          v20 = *(_QWORD *)(v3 + 304);
          if (v20)
            *(float *)(v20 + 24) = Parameter;
          goto LABEL_30;
        default:
LABEL_29:
          if (++v2 != 15)
            continue;
LABEL_30:
          *(_BYTE *)(*((_QWORD *)this + 70) + 169) = *((_DWORD *)this + 134) != 0;
          break;
      }
      break;
    }
  }
}

_QWORD *std::unique_ptr<NoiseSelectorCore>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = v2[39];
    if (v3)
    {
      CNoiseSuppressorV4::speex_preprocess_state_destroy(v3);
      v2[39] = 0;
    }
    v4 = (void *)v2[40];
    if (v4)
    {
      v2[41] = v4;
      operator delete(v4);
    }
    v5 = v2[38];
    v2[38] = 0;
    if (v5)
      MEMORY[0x1BCC95CEC](v5, 0x1000C408AA14F5FLL);
    v6 = v2[37];
    v2[37] = 0;
    if (v6)
      MEMORY[0x1BCC95CEC](v6, 0x1000C408AA14F5FLL);
    v7 = (void *)v2[34];
    if (v7)
    {
      v2[35] = v7;
      operator delete(v7);
    }
    v8 = (void *)v2[31];
    if (v8)
    {
      v2[32] = v8;
      operator delete(v8);
    }
    v9 = (void *)v2[28];
    if (v9)
    {
      v2[29] = v9;
      operator delete(v9);
    }
    v10 = (void *)v2[25];
    if (v10)
    {
      v2[26] = v10;
      operator delete(v10);
    }
    v11 = (void *)v2[22];
    if (v11)
    {
      v2[23] = v11;
      operator delete(v11);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

os_log_t ___ZL23AUNoiseSelectorLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aunsel");
  *v0 = result;
  AUNoiseSelectorLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t PrescriptiveAmplification::SetAudiogram(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;

  v3 = (a3 - a2) >> 2;
  v4 = *(unsigned int *)(result + 16);
  if (v3 != v4)
    __assert_rtn("SetAudiogram", "PrescriptiveAmplification.cpp", 90, "loss_dBHL.size()==mNumSubbands");
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(result + 48);
    do
    {
      v7 = *(float *)(a2 + 4 * v5);
      v8 = 0.0;
      if (v7 > 0.0)
      {
        v8 = 3.999;
        if (v7 < 80.0)
        {
          v9 = 1;
          do
          {
            v10 = v9;
            v11 = kEqualLoudnessModel_Loss_dBHL[v9++];
          }
          while (v7 > v11);
          v8 = (float)((float)(v7 - kEqualLoudnessModel_Loss_dBHL[v10 - 1])
                     / (float)(v11 - kEqualLoudnessModel_Loss_dBHL[v10 - 1]))
             + (float)(v10 - 1);
        }
      }
      if (v8 <= 3.95)
        v12 = v8;
      else
        v12 = 3.95;
      *(float *)(v6 + 4 * v5++) = v12;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t PrescriptiveAmplification::ComputeFdVectors(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  int v9;
  float v10;
  int v11;
  uint64_t v12;
  float v13;

  v1 = *(unsigned int *)(this + 16);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 24);
    v4 = *(_QWORD *)(this + 72);
    if (*(_DWORD *)(this + 20) == 1)
      v5 = (float *)&kPrescriptiveAmplification_SpeechBias;
    else
      v5 = (float *)&kPrescriptiveAmplification_DefaultBias;
    v6 = *(_QWORD *)(this + 96);
    do
    {
      v7 = *(float *)(v3 + 4 * v2);
      if (v7 <= 250.0)
      {
        v12 = 0;
        v13 = 0.0;
      }
      else if (v7 >= 30000.0)
      {
        v13 = 1.0;
        v12 = 7;
      }
      else
      {
        v8 = 1;
        do
        {
          v9 = v8;
          v10 = kEqualLoudnessModel_Freq_Hz[v8++];
        }
        while (v7 > v10);
        v11 = v9 - 1;
        v12 = (v9 - 1);
        v13 = (float)(v7 - kEqualLoudnessModel_Freq_Hz[v11]) / (float)(v10 - kEqualLoudnessModel_Freq_Hz[v11]);
      }
      this = 4 * v12 + 4;
      *(float *)(v4 + 4 * v2) = kPrescriptiveAmplification_ExpanderThresholdOffset_dB[v12]
                              + (float)(v13
                                      * (float)(*(float *)((char *)kPrescriptiveAmplification_ExpanderThresholdOffset_dB
                                                         + this)
                                              - kPrescriptiveAmplification_ExpanderThresholdOffset_dB[v12]));
      *(float *)(v6 + 4 * v2++) = v5[v12] + (float)(v13 * (float)(*(float *)((char *)v5 + this) - v5[v12]));
    }
    while (v2 != v1);
  }
  return this;
}

uint64_t PrescriptiveAmplification::PrescriptiveAmplification(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  void **v7;
  char **v8;
  char **v9;
  char **v10;
  char **v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v21;

  *(_OWORD *)a1 = xmmword_1B66A1E90;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = (unsigned int *)(a1 + 16);
  v7 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (char **)(a1 + 48);
  v9 = (char **)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = (char **)(a1 + 96);
  v11 = (char **)(a1 + 120);
  *(_OWORD *)(a1 + 144) = 0u;
  v12 = (char **)(a1 + 144);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v13 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  *(_DWORD *)(a1 + 16) = v13;
  v21 = 0;
  std::vector<float>::assign((char **)(a1 + 24), v13, &v21);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(*v7, *(const void **)a2, v14 - *(_QWORD *)a2);
  v15 = *v6;
  v21 = 0;
  std::vector<float>::assign(v11, v15, &v21);
  v16 = *v6;
  v21 = 0;
  std::vector<float>::assign(v12, v16, &v21);
  v17 = *v6;
  v21 = 0;
  std::vector<float>::assign(v8, v17, &v21);
  v18 = *v6;
  v21 = 0;
  std::vector<float>::assign(v9, v18, &v21);
  v19 = *v6;
  v21 = 0;
  std::vector<float>::assign(v10, v19, &v21);
  PrescriptiveAmplification::ComputeFdVectors(a1);
  PrescriptiveAmplification::SetAudiogram(a1, *a3, a3[1]);
  return a1;
}

void sub_1B62C0858(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v9 = (void *)v1[21];
  if (v9)
  {
    v1[22] = v9;
    operator delete(v9);
  }
  v10 = *v7;
  if (*v7)
  {
    v1[19] = v10;
    operator delete(v10);
  }
  v11 = *v6;
  if (*v6)
  {
    v1[16] = v11;
    operator delete(v11);
  }
  v12 = *v5;
  if (*v5)
  {
    v1[13] = v12;
    operator delete(v12);
  }
  v13 = *v4;
  if (*v4)
  {
    v1[10] = v13;
    operator delete(v13);
  }
  v14 = *v3;
  if (*v3)
  {
    v1[7] = v14;
    operator delete(v14);
  }
  v15 = *v2;
  if (*v2)
  {
    v1[4] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void PrescriptiveAmplification::SetFineTuningSimple(PrescriptiveAmplification *this, float a2, float a3)
{
  uint64_t v3;
  float v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;

  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3)
  {
    v5 = -a2;
    v6 = (float *)*((_QWORD *)this + 3);
    v7 = (float *)*((_QWORD *)this + 18);
    v8 = (float *)*((_QWORD *)this + 15);
    do
    {
      v9 = *v6;
      v10 = a2;
      if (*v6 <= 3000.0)
      {
        v10 = v5;
        if (v9 >= 750.0)
        {
          v11 = powf((float)(v9 + -750.0) * 0.00044444, 0.65);
          v10 = (float)((float)(1.0 - v11) * v5) + (float)(v11 * a2);
        }
      }
      *v8++ = v10;
      *v7++ = v10;
      ++v6;
      --v3;
    }
    while (v3);
  }
}

uint64_t PrescriptiveAmplification::GetGainTargets(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;

  v3 = (a3 - a2) / 24;
  if (v3 > *(unsigned int *)(result + 16))
    __assert_rtn("GetGainTargets", "PrescriptiveAmplification.cpp", 181, "numActiveSubbands <= mNumSubbands");
  if (a3 != a2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 48);
    v6 = *(_QWORD *)(result + 96);
    if (v3 <= 1)
      v3 = 1;
    do
    {
      v7 = 0;
      v8 = *(float *)(v5 + 4 * v4);
      v9 = (int)v8;
      v10 = v8 - (float)(int)v8;
      v11 = *(float *)(v6 + 4 * v4);
      v12 = 7 * v9;
      v13 = *(_QWORD *)(a2 + 24 * v4);
      v14 = (char *)&kEqualLoudnessModel_GainTable + 4 * v12 + 28;
      v15 = (char *)&kEqualLoudnessModel_GainTable + 4 * v12;
      do
      {
        *(float *)(v13 + v7) = v11
                             * (float)(*(float *)&v15[v7]
                                     + (float)(v10 * (float)(*(float *)&v14[v7] - *(float *)&v15[v7])));
        v7 += 4;
      }
      while (v7 != 28);
      ++v4;
    }
    while (v4 != v3);
    v16 = 0;
    v17 = *(_QWORD *)(result + 120);
    v18 = *(_QWORD *)(result + 144);
    v19 = *(_QWORD *)(result + 72);
    do
    {
      v20 = 0;
      v21 = *(_QWORD *)(a2 + 24 * v16);
      do
      {
        v22 = (float)((float)((float)(1.0 - *(float *)&kEqualLoudnessModel_FtWeight[v20]) * *(float *)(v18 + 4 * v16))
                    + (float)(*(float *)&kEqualLoudnessModel_FtWeight[v20] * *(float *)(v17 + 4 * v16)))
            + *(float *)(v21 + v20 * 4);
        *(float *)(v21 + v20 * 4) = v22;
        v23 = v22
            + (float)(*(float *)(result + 8)
                    * fmaxf((float)(*(float *)(result + 12) + *(float *)(v19 + 4 * v16))- *(float *)&kEqualLoudnessModel_Spl_dB[v20], 0.0));
        *(float *)(v21 + v20 * 4) = v23;
        v24 = *(float *)result * fmaxf(v23, 0.0);
        *(float *)(v21 + v20 * 4) = v24;
        *(float *)(v21 + v20 * 4) = *(float *)(result + 4) + v24;
        ++v20;
      }
      while (v20 != 7);
      ++v16;
    }
    while (v16 != v3);
  }
  return result;
}

float FrequencyDomainCompressor::SetParameter(float **this, uint64_t a2, float result)
{
  float *v3;
  uint64_t v5;
  float v6;
  float *v7;
  float *v8;
  uint64_t v9;
  float v10;
  unint64_t v11;

  if (FrequencyDomainCompressor::kMaxValue[a2] < result)
    result = FrequencyDomainCompressor::kMaxValue[a2];
  if (result < FrequencyDomainCompressor::kMinValue[a2])
    result = FrequencyDomainCompressor::kMinValue[a2];
  v3 = *this;
  (*this)[a2] = result;
  switch(a2)
  {
    case 0:
      result = *v3;
      v5 = *((unsigned int *)this + 13);
      if ((_DWORD)v5)
      {
        v6 = result - *((float *)this + 19);
        v7 = this[14];
        do
        {
          *v7 = v6 + *v7;
          ++v7;
          --v5;
        }
        while (v5);
        result = *v3;
      }
      *((float *)this + 19) = result;
      break;
    case 1:
      result = expf(-1.0 / (float)((float)(v3[1] * 0.001) * *((float *)this + 12)));
      *((float *)this + 15) = 1.0 - result;
      *((float *)this + 16) = result;
      break;
    case 2:
      result = expf(-1.0 / (float)((float)(v3[2] * 0.001) * *((float *)this + 12)));
      *((float *)this + 17) = 1.0 - result;
      *((float *)this + 18) = result;
      break;
    case 5:
      result = v3[5];
      v8 = this[11];
      v9 = (char *)this[12] - (char *)v8;
      if (v9)
      {
        v10 = result - *((float *)this + 20);
        v11 = v9 >> 2;
        if (v11 <= 1)
          v11 = 1;
        do
        {
          *v8 = v10 + *v8;
          ++v8;
          --v11;
        }
        while (v11);
        result = v3[5];
      }
      *((float *)this + 20) = result;
      break;
    case 6:
      result = v3[6];
      *((float *)this + 21) = result;
      break;
    default:
      return result;
  }
  return result;
}

void *FrequencyDomainCompressor::GetGainTargets(FrequencyDomainCompressor *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 13);
  v4 = *((unsigned int *)this + 14);
  MEMORY[0x1E0C80A78](this);
  v7 = (char *)v14 - v6;
  if ((_DWORD)v3)
  {
    v8 = 0;
    v9 = *(const void ***)(v5 + 24);
    v10 = 4 * v4;
    v11 = v3;
    do
    {
      v12 = *v9;
      v9 += 3;
      memcpy(&v7[4 * v8], v12, 4 * v4);
      v8 += v4;
      --v11;
    }
    while (v11);
  }
  else
  {
    v3 = 0;
    v10 = 4 * v4;
  }
  return memcpy(a2, v7, v10 * v3);
}

void AUChannelSelector::~AUChannelSelector(AUChannelSelector *this)
{
  AUChannelSelector::~AUChannelSelector(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  AUChannelSelector *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69CFD10;
  if (getAUChannelSelectorLog(void)::onceToken != -1)
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
  v2 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v6 = 134217984;
    v7 = this;
    _os_log_debug_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "[%p] destructed", (uint8_t *)&v6, 0xCu);
  }
  v3 = (void *)*((_QWORD *)this + 74);
  if (v3)
  {
    *((_QWORD *)this + 75) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 71);
  if (v4)
  {
    *((_QWORD *)this + 72) = v4;
    operator delete(v4);
  }
  if (*((_BYTE *)this + 552))
  {
    v5 = (void *)*((_QWORD *)this + 66);
    if (v5)
    {
      *((_QWORD *)this + 67) = v5;
      operator delete(v5);
    }
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUChannelSelector::Initialize(AUChannelSelector *this)
{
  uint64_t *v2;
  uint64_t **v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t Element;
  uint64_t v19;
  int v20;
  BOOL v22;
  NSObject *v23;
  const char *v24;
  int v25;
  BOOL v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  UInt32 mChannelsPerFrame;
  __int128 v35;
  UInt32 v36;
  NSObject *v37;
  NSObject *v38;
  unint64_t v39;
  std::vector<unsigned int>::size_type v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  int v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  uint64_t v59;
  _BYTE *v60;
  unsigned __int8 v61[8];
  uint64_t *v62;
  unsigned __int8 v63[8];
  uint64_t *v64;
  _BYTE v65[8];
  uint64_t v66;
  _BYTE v67[8];
  uint64_t v68;
  unsigned __int8 v69[8];
  uint64_t *v70;
  uint8_t v71[4];
  AUChannelSelector *v72;
  AudioStreamBasicDescription v73;
  _BYTE buf[32];
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v69[0] = 0;
  v70 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
  if (*((_BYTE *)this + 552))
  {
    v67[0] = 0;
    v68 = 0;
    nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned int>,0>((uint64_t)v67, (uint64_t)this + 528);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    v2 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "channel_map");
    v3 = (uint64_t **)&v68;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    v4 = *(_BYTE *)v2;
    *(_BYTE *)v2 = v67[0];
    v67[0] = v4;
    v5 = v2[1];
    v2[1] = v68;
    v68 = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    v6 = v67[0];
  }
  else
  {
    v65[0] = 0;
    v66 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "channel_map");
    v3 = (uint64_t **)&v66;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    v8 = *(_BYTE *)v7;
    *(_BYTE *)v7 = v65[0];
    v65[0] = v8;
    v9 = v7[1];
    v7[1] = v66;
    v66 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
    v6 = v65[0];
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v3, v6);
  v10 = (uint64_t *)*(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 108);
  v63[0] = 6;
  v64 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "num_input_channels");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  v12 = *(_BYTE *)v11;
  *(_BYTE *)v11 = v63[0];
  v63[0] = v12;
  v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v64;
  v64 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v64, v63[0]);
  v14 = (uint64_t *)*(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108);
  v61[0] = 6;
  v62 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "num_output_channels");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  v16 = *(_BYTE *)v15;
  *(_BYTE *)v15 = v61[0];
  v61[0] = v16;
  v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v62;
  v62 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, v61[0]);
  Element = ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0);
  v19 = ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0);
  v20 = *(_DWORD *)(Element + 88);
  v22 = v20 == 1718773105 && *(_DWORD *)(Element + 112) == 64;
  if (((v20 == 1819304813) & *(_BYTE *)(Element + 92)) == 0 && !v22)
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1)
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
    v23 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    v24 = "[%p] input format is not valid";
    goto LABEL_28;
  }
  v25 = *(_DWORD *)(v19 + 88);
  v27 = v25 == 1718773105 && *(_DWORD *)(v19 + 112) == 64;
  if (((v25 == 1819304813) & *(_BYTE *)(v19 + 92)) == 0 && !v27)
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1)
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
    v23 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    v24 = "[%p] output format is not valid";
LABEL_28:
    v28 = buf;
LABEL_72:
    _os_log_error_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, v24, v28, 0xCu);
LABEL_73:
    v53 = 4294956421;
    goto LABEL_74;
  }
  v29 = Element + 80;
  v30 = v19 + 80;
  v31 = *(_OWORD *)(Element + 96);
  *(_OWORD *)buf = *(_OWORD *)(Element + 80);
  *(_OWORD *)&buf[16] = v31;
  v75 = *(_QWORD *)(Element + 112);
  if ((buf[12] & 0x20) != 0)
  {
    v32 = 1;
    goto LABEL_33;
  }
  v32 = *(_DWORD *)&buf[28];
  if (*(_DWORD *)&buf[28])
  {
LABEL_33:
    v33 = *(_DWORD *)&buf[24] / v32;
    goto LABEL_34;
  }
  v33 = (v75 + 7) >> 3;
LABEL_34:
  mChannelsPerFrame = 1;
  *(_DWORD *)&buf[24] = v33;
  *(_DWORD *)&buf[28] = 1;
  *(_DWORD *)&buf[16] = v33;
  *(_DWORD *)&buf[20] = 1;
  *(_DWORD *)&buf[12] |= 0x20u;
  v35 = *(_OWORD *)(v19 + 96);
  *(_OWORD *)&v73.mSampleRate = *(_OWORD *)v30;
  *(_OWORD *)&v73.mBytesPerPacket = v35;
  *(_QWORD *)&v73.mBitsPerChannel = *(_QWORD *)(v19 + 112);
  if ((v73.mFormatFlags & 0x20) != 0 || (mChannelsPerFrame = v73.mChannelsPerFrame) != 0)
    v36 = v73.mBytesPerFrame / mChannelsPerFrame;
  else
    v36 = (v73.mBitsPerChannel + 7) >> 3;
  v73.mBytesPerFrame = v36;
  v73.mChannelsPerFrame = 1;
  v73.mBytesPerPacket = v36;
  v73.mFramesPerPacket = 1;
  v73.mFormatFlags |= 0x20u;
  if (*(double *)buf != v73.mSampleRate
    || *(_DWORD *)&buf[8] != v73.mFormatID
    || v33 != v36
    || (_DWORD)v75 != v73.mBitsPerChannel
    || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, &v73, 0, 0))
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1)
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
    v23 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_73;
    *(_DWORD *)v71 = 134217984;
    v72 = this;
    v24 = "[%p] I/O formats are not compatible";
    v28 = v71;
    goto LABEL_72;
  }
  if (getAUChannelSelectorLog(void)::onceToken != -1)
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
  v37 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v69, 4, 0x20u, 0, 0, buf);
    v60 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    LODWORD(v73.mSampleRate) = 134218242;
    *(_QWORD *)((char *)&v73.mSampleRate + 4) = this;
    LOWORD(v73.mFormatFlags) = 2080;
    *(_QWORD *)((char *)&v73.mFormatFlags + 2) = v60;
    _os_log_debug_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_DEBUG, "[%p] will initialize with configuration: %s", (uint8_t *)&v73, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (!*((_BYTE *)this + 552))
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1)
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
    v38 = getAUChannelSelectorLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = this;
      _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_INFO, "[%p] channel map is not set (AU will use default channel map instead)", buf, 0xCu);
    }
    v39 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 108);
    v40 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108);
    std::vector<unsigned int>::vector((std::vector<unsigned int> *)buf, v40);
    if ((_DWORD)v40)
    {
      v41 = 0;
      v42 = *(_QWORD *)buf;
      do
      {
        if (v41 >= v39)
          v43 = v39 - 1;
        else
          v43 = v41;
        *(_DWORD *)(v42 + 4 * v41++) = v43;
      }
      while (v40 != v41);
    }
    std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float>,void>((uint64_t)this + 528, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  v44 = *((_QWORD *)this + 67);
  v45 = *((_QWORD *)this + 66);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108) != (v44 - v45) >> 2)
  {
    if (getAUChannelSelectorLog(void)::onceToken != -1)
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
    v55 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_85;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    v56 = "[%p] failed to initialize - channel map size is not equal to number of output channels";
    v57 = v55;
    v58 = 12;
LABEL_84:
    _os_log_error_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_ERROR, v56, buf, v58);
LABEL_85:
    v53 = 4294956445;
    goto LABEL_74;
  }
  v46 = (unsigned int *)*((_QWORD *)this + 66);
  v47 = (unsigned int *)*((_QWORD *)this + 67);
  if (v46 != v47)
  {
    v48 = 0;
    while (1)
    {
      v49 = *v46;
      if (v49 >= *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 108))
        break;
      ++v48;
      if (++v46 == v47)
        goto LABEL_63;
    }
    if (getAUChannelSelectorLog(void)::onceToken != -1)
      dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
    v59 = getAUChannelSelectorLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_85;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v48;
    v56 = "[%p] failed to initialize - channel map element %d is larger than number of input channels";
    v57 = v59;
    v58 = 18;
    goto LABEL_84;
  }
LABEL_63:
  v50 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)buf = *(_OWORD *)v29;
  *(_OWORD *)&buf[16] = v50;
  v75 = *(_QWORD *)(v29 + 32);
  v51 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)&v73.mSampleRate = *(_OWORD *)v30;
  *(_OWORD *)&v73.mBytesPerPacket = v51;
  *(_QWORD *)&v73.mBitsPerChannel = *(_QWORD *)(v30 + 32);
  SimpleMeters::Initialize((AUChannelSelector *)((char *)this + 568), (const CAStreamBasicDescription *)buf, (const CAStreamBasicDescription *)&v73);
  if (getAUChannelSelectorLog(void)::onceToken != -1)
    dispatch_once(&getAUChannelSelectorLog(void)::onceToken, &__block_literal_global_6312);
  v52 = getAUChannelSelectorLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUChannelSelectorLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_debug_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEBUG, "[%p] did initialize", buf, 0xCu);
  }
  v53 = 0;
LABEL_74:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v69[0]);
  return v53;
}

void sub_1B62C16F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

void AUChannelSelector::Cleanup(AUChannelSelector *this)
{
  void *v2;

  if (!*((_BYTE *)this + 560) && *((_BYTE *)this + 552))
  {
    v2 = (void *)*((_QWORD *)this + 66);
    if (v2)
    {
      *((_QWORD *)this + 67) = v2;
      operator delete(v2);
    }
    *((_BYTE *)this + 552) = 0;
  }
  *((_QWORD *)this + 72) = *((_QWORD *)this + 71);
  *((_QWORD *)this + 75) = *((_QWORD *)this + 74);
}

uint64_t AUChannelSelector::Reset(AUChannelSelector *this)
{
  SimpleMeters::Reset((uint64_t)this + 568);
  return 0;
}

uint64_t AUChannelSelector::GetPropertyInfo(AUChannelSelector *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t Element;
  int v13;

  if (a2 == 3007)
  {
    v8 = 1;
    v9 = 4;
LABEL_12:
    v10 = 0;
    *a5 = v9;
    *a6 = v8;
    return v10;
  }
  if (a2 == 3099)
  {
    if (a3 > 1)
      v7 = 0;
    else
      v7 = (uint64_t)(*((_QWORD *)this + 72) - *((_QWORD *)this + 71)) >> 7;
    if ((a3 & 0xFFFFFFFD) == 0)
      v7 += (uint64_t)(*((_QWORD *)this + 75) - *((_QWORD *)this + 74)) >> 7;
    v8 = 0;
    v9 = 16 * v7;
    goto LABEL_12;
  }
  if (!a3)
  {
    switch(a2)
    {
      case 21:
        v10 = 0;
        *a6 = 1;
        v13 = 4;
        break;
      case 1667654509:
        v10 = 0;
        *a6 = *((_BYTE *)this + 17) ^ 1;
        v13 = 8;
        break;
      case 1936483181:
        *a6 = *((_BYTE *)this + 17) ^ 1;
        Element = ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0);
        v10 = 0;
        v13 = 4 * *(_DWORD *)(Element + 108);
        break;
      default:
        return 4294956417;
    }
    *a5 = v13;
    return v10;
  }
  return 4294956417;
}

uint64_t AUChannelSelector::GetProperty(int **this, int a2, unsigned int a3, int a4, _DWORD *a5, int *a6)
{
  uint64_t result;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  unsigned int v19;

  v19 = 0;
  if ((SimpleMeters::HandleGetProperty((SimpleMeters *)(this + 71), a2, a3, a5, &v19, a6) & 1) != 0)
    return v19;
  if (a3)
    return 4294956417;
  if (a2 == 21)
    goto LABEL_15;
  if (a2 == 1667654509)
  {
    if (!a4)
    {
      if (*((_BYTE *)this + 552))
      {
        v17 = v18;
        v18 = 0;
        *(_QWORD *)a5 = v17;
        applesauce::CF::ArrayRef::~ArrayRef(&v18);
        return 0;
      }
      return 4294956446;
    }
LABEL_15:
    result = 0;
    *a5 = *((_DWORD *)this + 141);
    return result;
  }
  if (a2 != 1936483181)
    return 4294956417;
  if (a4)
    goto LABEL_15;
  if (!*((_BYTE *)this + 552))
    return 4294956446;
  v12 = this[67];
  v13 = this[66];
  v14 = (char *)v12 - (char *)v13;
  if (v12 == v13)
    return 0;
  v15 = 0;
  v16 = v14 >> 2;
  do
  {
    result = 0;
    a5[v15] = v13[v15];
    ++v15;
  }
  while (v16 > v15);
  return result;
}

uint64_t AUChannelSelector::SetProperty(AUChannelSelector *this, int a2, int a3, int a4, int *a5, void *a6, int *a7)
{
  unsigned int v7;
  uint64_t result;
  unint64_t v14;
  void **v15;
  void *v16;
  void *__p[3];
  int *v18;

  v7 = a6;
  LODWORD(__p[0]) = 0;
  if (SimpleMeters::HandleSetProperty((AUChannelSelector *)((char *)this + 568), a2, a3, a5, a6, (int *)__p, a7))
    return LODWORD(__p[0]);
  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    result = 0;
    *((_DWORD *)this + 141) = *a5;
    return result;
  }
  if (a2 == 1667654509)
  {
    if (!a4)
    {
      std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float>,void>((uint64_t)this + 528, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_23;
    }
  }
  else if (a2 == 1936483181 && !a4)
  {
    __p[0] = a5;
    v14 = v7 >> 2;
    v15 = (void **)((char *)this + 528);
    if (*((_BYTE *)this + 17))
    {
      if (!*((_BYTE *)this + 552))
      {
        _os_assert_log();
        result = _os_crash();
        __break(1u);
        return result;
      }
      if (v14 != (uint64_t)(*((_QWORD *)this + 67) - *((_QWORD *)this + 66)) >> 2)
        return 4294956445;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)this + 528, (char *)a5, (uint64_t)&a5[v14], v14);
    }
    else
    {
      if (*((_BYTE *)this + 552))
      {
        v16 = *v15;
        if (*v15)
        {
          *((_QWORD *)this + 67) = v16;
          operator delete(v16);
        }
        *((_BYTE *)this + 552) = 0;
      }
      v18 = &a5[v14];
      std::optional<std::vector<unsigned int>>::emplace[abi:ne180100]<unsigned int const* const&,unsigned int const*,void>((uint64_t)this + 528, (const void **)__p, (uint64_t *)&v18);
    }
LABEL_23:
    result = 0;
    *((_BYTE *)this + 560) = 1;
    return result;
  }
  return 4294956417;
}

uint64_t AUChannelSelector::CanScheduleParameters(AUChannelSelector *this)
{
  return 0;
}

uint64_t AUChannelSelector::ProcessMultipleBufferLists(AUChannelSelector *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  ausdk::AUScope *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int i;
  uint64_t v29;
  BOOL v30;

  v11 = (AUChannelSelector *)((char *)this + 80);
  v12 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 80), 0) + 92);
  v13 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 92);
  if ((v12 & 0x20) != 0)
    v14 = 1;
  else
    v14 = *(unsigned int *)(ausdk::AUScope::SafeGetElement(v11, 0) + 108);
  v29 = v14;
  if ((v13 & 0x20) != 0)
    v15 = 1;
  else
    v15 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108);
  v16 = (uint64_t)*a5;
  v17 = (uint64_t)*a7;
  v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v11, 0) + 88);
  v19 = (v13 & 0x20) == 0 || v18 == 1718773105;
  v30 = v19;
  v20 = a3 << (v18 == 1718773105);
  if (v18 != 1718773105 && (v12 & 0x20) != 0)
    SimpleMeters::ProcessInputBufferList((AUChannelSelector *)((char *)this + 568), v20, (const AudioBufferList *)v16);
  v22 = 0;
  v23 = 4 * v15;
  while (v22 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUChannelSelector *)((char *)this + 128), 0) + 108))
  {
    v24 = *(unsigned int *)(*((_QWORD *)this + 66) + 4 * v22);
    if ((v12 & 0x20) != 0)
    {
      v25 = *(_DWORD **)(v16 + 16 * v24 + 16);
      if ((v13 & 0x20) != 0)
      {
LABEL_19:
        v26 = *(_DWORD **)(v17 + 16 * v22 + 16);
        goto LABEL_22;
      }
    }
    else
    {
      v25 = (_DWORD *)(*(_QWORD *)(v16 + 16) + 4 * v24);
      if ((v13 & 0x20) != 0)
        goto LABEL_19;
    }
    v26 = (_DWORD *)(*(_QWORD *)(v17 + 16) + 4 * v22);
LABEL_22:
    for (i = v20; i; --i)
    {
      *v26 = *v25;
      v26 = (_DWORD *)((char *)v26 + v23);
      v25 += v29;
    }
    ++v22;
  }
  if (!v30)
    SimpleMeters::ProcessOutputBufferList((AUChannelSelector *)((char *)this + 568), v20, (const AudioBufferList *)v17);
  return 0;
}

double AUChannelSelector::GetLatency(AUChannelSelector *this)
{
  return 0.0;
}

double AUChannelSelector::GetTailTime(AUChannelSelector *this)
{
  return 0.0;
}

uint64_t AUChannelSelector::SupportsTail(AUChannelSelector *this)
{
  return 1;
}

BOOL AUChannelSelector::StreamFormatWritable(AUChannelSelector *this, int a2, int a3)
{
  return (a2 - 1) <= 1 && a3 == 0 && *((_BYTE *)this + 17) == 0;
}

uint64_t AUChannelSelector::SupportedNumChannels(AUChannelSelector *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUChannelSelector::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 1;
}

uint64_t AUChannelSelector::ValidFormat(AUChannelSelector *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  AudioFormatID mFormatID;

  if ((a2 - 1) > 1 || a3 != 0)
    return 0;
  mFormatID = a4->mFormatID;
  if (mFormatID == 1718773105 && a4->mBitsPerChannel == 64)
    return 1;
  else
    return (mFormatID == 1819304813) & a4->mFormatFlags;
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::optional<std::vector<unsigned int>>::emplace[abi:ne180100]<unsigned int const* const&,unsigned int const*,void>(uint64_t a1, const void **a2, uint64_t *a3)
{
  void *v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  v7 = *a2;
  v8 = *a3;
  v9 = (*a3 - (uint64_t)*a2) >> 2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((_QWORD *)a1, v7, v8, v9);
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void `anonymous namespace'::convertChannelMapFromCF(_anonymous_namespace_ *this, CFTypeRef cf)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFArrayRef v7;
  CFIndex v8;
  unint64_t v9;
  const void *ValueAtIndex;
  const void *v11;
  int v12;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  CFTypeRef cfa;
  CFArrayRef theArray;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (cf)
    CFRetain(cf);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, cf);
  v4 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v6 = Count;
    v7 = theArray;
    if (theArray)
    {
      v8 = CFArrayGetCount(theArray);
      if (!v6)
      {
LABEL_33:
        if (theArray)
          CFRelease(theArray);
        return;
      }
    }
    else
    {
      v8 = 0;
      if (!Count)
        goto LABEL_33;
    }
    v9 = 0;
    do
    {
      if (v4 == v7 && v9 == v8)
        break;
      if (CFArrayGetCount(v4) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v4, v9);
        v11 = ValueAtIndex;
        if (ValueAtIndex)
          continue;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      CFRetain(ValueAtIndex);
      applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&cfa, v11);
      if (!cfa)
      {
        v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Could not construct");
      }
      v12 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cfa);
      v13 = v12;
      v15 = (_DWORD *)*((_QWORD *)this + 1);
      v14 = *((_QWORD *)this + 2);
      if ((unint64_t)v15 >= v14)
      {
        v17 = *(_DWORD **)this;
        v18 = ((uint64_t)v15 - *(_QWORD *)this) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 16, v21);
          v17 = *(_DWORD **)this;
          v15 = (_DWORD *)*((_QWORD *)this + 1);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v13;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *--v15;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *(_QWORD *)this = v23;
        *((_QWORD *)this + 1) = v16;
        *((_QWORD *)this + 2) = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v15 = v12;
        v16 = v15 + 1;
      }
      *((_QWORD *)this + 1) = v16;
      if (cfa)
        CFRelease(cfa);
      ++v9;
    }
    while (v9 != v6);
    goto LABEL_33;
  }
}

void sub_1B62C2198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B62C2268(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::ArrayRef *`anonymous namespace'::convertChannelMapToCF(applesauce::CF::ArrayRef *a1, int **a2)
{
  __CFArray *Mutable;
  int *v5;
  int *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2[1] - *a2, 0);
  v6 = *a2;
  v5 = a2[1];
  while (v6 != v5)
  {
    valuePtr = *v6;
    v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFArrayAppendValue(Mutable, v7);
    ++v6;
  }
  return applesauce::CF::ArrayRef::ArrayRef(a1, Mutable);
}

void sub_1B62C2354(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

os_log_t ___ZL23getAUChannelSelectorLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUChannelSelector");
  getAUChannelSelectorLog(void)::gLog = (uint64_t)result;
  return result;
}

