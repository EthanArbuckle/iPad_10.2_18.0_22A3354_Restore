void sub_1B64A99B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUEndpointVAD3::Render(AUEndpointVAD3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t Element;
  ausdk::AUInputElement *v10;
  uint64_t v11;
  uint64_t BufferList;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 84) < a4)
    return 4294956422;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 128), 0);
  v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
    v13[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    return (*(uint64_t (**)(AUEndpointVAD3 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUEndpointVAD3::GetParameterInfo(AUEndpointVAD3 *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  a4->flags = 0x40000000;
  a4->unitName = 0;
  return 4294956418;
}

double AUEndpointVAD3::GetLatency(AUEndpointVAD3 *this)
{
  float *v1;
  float v2;

  v1 = (float *)*((_QWORD *)this + 68);
  v2 = v1[36];
  if (v2 <= v1[37])
    v2 = v1[37];
  if (v1[35] > v2)
    v2 = v1[35];
  return (float)(v1[34] + v2);
}

double AUEndpointVAD3::GetTailTime(AUEndpointVAD3 *this)
{
  return 0.0;
}

uint64_t AUEndpointVAD3::SupportsTail(AUEndpointVAD3 *this)
{
  return 1;
}

BOOL AUEndpointVAD3::StreamFormatWritable(AUEndpointVAD3 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUEndpointVAD3::SupportedNumChannels(AUEndpointVAD3 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUEndpointVAD3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUEndpointVAD3::ValidFormat(AUEndpointVAD3 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUEndpointVAD3::ShouldBypassEffect(AUEndpointVAD3 *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t AUEndpointVAD3::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 536) = a2;
  return this;
}

uint64_t AUEndpointVAD3::HandleEvent(uint64_t this, const VAD3EventData *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 560);
  if (v2 != *(uint64_t **)(this + 568))
  {
    v4 = this;
    do
    {
      v5 = *v2++;
      this = (*(uint64_t (**)(uint64_t, const VAD3EventData *))(*(_QWORD *)v5 + 16))(v5, a2);
    }
    while (v2 != *(uint64_t **)(v4 + 568));
  }
  return this;
}

uint64_t AUEndpointVAD3::SetInputOutputAudioFormat(AUEndpointVAD3 *this, double *a2)
{
  uint64_t Element;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;

  *(double *)v6 = *a2;
  v6[1] = 0x296C70636DLL;
  v7 = xmmword_1B66A1000;
  v8 = 32;
  Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)Element + 56))(Element, v6);
  if (!(_DWORD)result)
  {
    v5 = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 128), 0);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 56))(v5, v6);
  }
  return result;
}

void `non-virtual thunk to'AUEndpointVAD3::~AUEndpointVAD3(AUEndpointVAD3 *this)
{
  AUEndpointVAD3::~AUEndpointVAD3((AUEndpointVAD3 *)((char *)this - 528));
}

{
  AUEndpointVAD3::~AUEndpointVAD3((AUEndpointVAD3 *)((char *)this - 528));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t `non-virtual thunk to'AUEndpointVAD3::HandleEvent(uint64_t this, const VAD3EventData *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 32);
  if (v2 != *(uint64_t **)(this + 40))
  {
    v4 = this;
    do
    {
      v5 = *v2++;
      this = (*(uint64_t (**)(uint64_t, const VAD3EventData *))(*(_QWORD *)v5 + 16))(v5, a2);
    }
    while (v2 != *(uint64_t **)(v4 + 40));
  }
  return this;
}

void AUEndpointVAD3::AddObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (_QWORD *)a1[71];
  v5 = a1[72];
  if ((unint64_t)v4 >= v5)
  {
    v7 = a1[70];
    v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v9 = v5 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    *v13 = a2;
    v6 = v13 + 1;
    v15 = (char *)a1[71];
    v16 = (char *)a1[70];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)a1[70];
    }
    a1[70] = v13;
    a1[71] = v6;
    a1[72] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  a1[71] = v6;
}

void AUSpeakerProtectionV2::~AUSpeakerProtectionV2(AUSpeakerProtectionV2 *this)
{
  AUSpeakerProtectionV2::~AUSpeakerProtectionV2(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void **v5;

  *(_QWORD *)this = &off_1E69E25C8;
  AUSpeakerProtectionV2::Cleanup(this);
  v2 = (void *)*((_QWORD *)this + 88);
  if (v2)
  {
    *((_QWORD *)this + 89) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 85);
  if (v3)
  {
    *((_QWORD *)this + 86) = v3;
    operator delete(v3);
  }
  for (i = 664; i != 632; i -= 16)
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i);
  v5 = (void **)((char *)this + 608);
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 576);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v5);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSpeakerProtectionV2::CreateExtendedElements(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  ausdk::AUScope::Initialize(this + 35, (ausdk::AUBase *)this, 4, 2);
  v2 = this[37].i64[1];
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (uint64_t *)this[36].i64[0];
    if ((uint64_t *)this[36].i64[1] == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v3 + 72), CFSTR("Left/Mono Speaker Settings"));
  v5 = this[37].i64[1];
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 1);
  }
  else
  {
    v7 = this[36].i64[0];
    if ((unint64_t)(this[36].i64[1] - v7) < 9)
      v6 = 0;
    else
      v6 = *(_QWORD *)(v7 + 8);
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v6 + 72), CFSTR("Right Speaker Settings"));
  v8 = this[37].i64[1];
  if (v8)
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  else
    v9 = *(_QWORD *)this[36].i64[0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, 34);
  v10 = this[37].i64[1];
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 1);
  else
    v11 = *(_QWORD *)(this[36].i64[0] + 8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, 34);
}

uint64_t AUSpeakerProtectionV2::Initialize(AUSpeakerProtectionV2 *this)
{
  ausdk::AUScope *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t Element;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  const AudioStreamBasicDescription *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  float Parameter;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  float v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  ausdk::AUElement **v36;
  float v37;
  uint64_t v38;
  ausdk::AUElement *v39;
  ausdk::AUElement **v40;
  float v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  float v45;
  uint64_t v46;
  ausdk::AUElement *v47;
  ausdk::AUElement **v48;
  float v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  float v53;
  uint64_t v54;
  ausdk::AUElement *v55;
  ausdk::AUElement **v56;
  float v57;
  uint64_t v58;
  ausdk::AUElement *v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  ausdk::AUElement *v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  ausdk::AUElement *v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float v72;
  ausdk::AUElement *v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  ausdk::AUElement *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  ausdk::AUElement *v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  float v87;
  ausdk::AUElement *v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  ausdk::AUElement *v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  ausdk::AUElement *v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  uint64_t v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  ausdk::AUElement *v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  ausdk::AUElement *v115;
  uint64_t v116;
  float v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  ausdk::AUElement *v123;
  ausdk::AUElement **v124;
  float v125;
  uint64_t v126;
  ausdk::AUElement *v127;
  ausdk::AUElement **v128;
  double v129;
  double v130;
  double v131;
  double v132;
  float v133;
  uint64_t v134;
  ausdk::AUElement *v135;
  ausdk::AUElement **v136;
  float v137;
  char *v138;
  unint64_t *v144;
  __n128 v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  __int128 v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _DWORD *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  double v176;
  double v177;
  double v178;
  float v179;
  float v180;
  float v181;
  double v182;
  float v183;
  double v184;
  float v185;
  double v186;
  float v187;
  double v188;
  float v189;
  double v190;
  float v191;
  double v192;
  float v193;
  double v194;
  float v195;
  double v196;
  float v197;
  double v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  AudioStreamBasicDescription v204;
  _OWORD v205[2];
  uint64_t v206;
  __int128 v207;
  char v208;

  v2 = (AUSpeakerProtectionV2 *)((char *)this + 80);
  v3 = *((_QWORD *)this + 15);
  if (v3)
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  else
    v4 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  if (v4 >= 2)
  {
    v5 = 1;
    do
    {
      Element = ausdk::AUScope::SafeGetElement(v2, v5 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v2, v5) + 80))
        return 4294956428;
    }
    while ((_DWORD)v4 != ++v5);
  }
  v7 = ausdk::AUScope::SafeGetElement(v2, 0);
  v8 = *(_OWORD *)(v7 + 96);
  v205[0] = *(_OWORD *)(v7 + 80);
  v205[1] = v8;
  v206 = *(_QWORD *)(v7 + 112);
  v9 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
  v10 = *(_OWORD *)(v9 + 96);
  *(_OWORD *)&v204.mSampleRate = *(_OWORD *)(v9 + 80);
  *(_OWORD *)&v204.mBytesPerPacket = v10;
  *(_QWORD *)&v204.mBitsPerChannel = *(_QWORD *)(v9 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v205, &v204, v11))
    return 4294956428;
  v12 = *(unsigned int *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108);
  v13 = *((_QWORD *)this + 75);
  if ((_DWORD)v12 == 2)
  {
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    }
    else
    {
      v17 = (uint64_t *)*((_QWORD *)this + 72);
      if (*((uint64_t **)this + 73) == v17)
        v14 = 0;
      else
        v14 = *v17;
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v14 + 72), CFSTR("Left Speaker Settings"));
    v19 = *((_QWORD *)this + 75);
    if (v19)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 1);
    }
    else
    {
      v21 = *((_QWORD *)this + 72);
      if ((unint64_t)(*((_QWORD *)this + 73) - v21) < 9)
        v20 = 0;
      else
        v20 = *(_QWORD *)(v21 + 8);
    }
    v22 = CFSTR("Right Speaker Settings");
  }
  else
  {
    if (v13)
    {
      v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
    }
    else
    {
      v18 = (uint64_t *)*((_QWORD *)this + 72);
      if (*((uint64_t **)this + 73) == v18)
        v16 = 0;
      else
        v16 = *v18;
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v16 + 72), CFSTR("Speaker Settings"));
    v23 = *((_QWORD *)this + 75);
    if (v23)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, 1);
    }
    else
    {
      v24 = *((_QWORD *)this + 72);
      if ((unint64_t)(*((_QWORD *)this + 73) - v24) < 9)
        v20 = 0;
      else
        v20 = *(_QWORD *)(v24 + 8);
    }
    v22 = CFSTR("N/A");
  }
  ausdk::Owned<__CFString const*>::operator=((const void **)(v20 + 72), v22);
  if (*((_BYTE *)this + 528) && (_DWORD)v12)
  {
    v25 = 0;
    v176 = *(double *)v205;
    do
    {
      v26 = *((_QWORD *)this + 9);
      if (v26)
      {
        v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
      }
      else
      {
        v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v28)
          v27 = 0;
        else
          v27 = *v28;
      }
      Parameter = ausdk::AUElement::GetParameter(v27, 2u);
      v30 = *((_QWORD *)this + 9);
      if (v30)
      {
        v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
      }
      else
      {
        v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v32)
          v31 = 0;
        else
          v31 = *v32;
      }
      v33 = ausdk::AUElement::GetParameter(v31, 4u);
      v34 = *((_QWORD *)this + 9);
      v200 = v33;
      if (v34)
      {
        v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
      }
      else
      {
        v36 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v36)
          v35 = 0;
        else
          v35 = *v36;
      }
      v37 = ausdk::AUElement::GetParameter(v35, 3u);
      v38 = *((_QWORD *)this + 9);
      if (v38)
      {
        v39 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0);
      }
      else
      {
        v40 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v40)
          v39 = 0;
        else
          v39 = *v40;
      }
      v41 = ausdk::AUElement::GetParameter(v39, 7u);
      v42 = *((_QWORD *)this + 9);
      v197 = v41;
      if (v42)
      {
        v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
      }
      else
      {
        v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v44)
          v43 = 0;
        else
          v43 = *v44;
      }
      v45 = ausdk::AUElement::GetParameter(v43, 8u);
      v46 = *((_QWORD *)this + 9);
      v195 = v45;
      if (v46)
      {
        v47 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 0);
      }
      else
      {
        v48 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v48)
          v47 = 0;
        else
          v47 = *v48;
      }
      v49 = ausdk::AUElement::GetParameter(v47, 9u);
      v50 = *((_QWORD *)this + 9);
      v193 = v49;
      if (v50)
      {
        v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
      }
      else
      {
        v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v52)
          v51 = 0;
        else
          v51 = *v52;
      }
      v53 = ausdk::AUElement::GetParameter(v51, 0xAu);
      v54 = *((_QWORD *)this + 9);
      v191 = v53;
      if (v54)
      {
        v55 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, 0);
      }
      else
      {
        v56 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v56)
          v55 = 0;
        else
          v55 = *v56;
      }
      v57 = ausdk::AUElement::GetParameter(v55, 0xBu);
      v58 = *((_QWORD *)this + 75);
      v189 = v57;
      if (v58)
      {
        v59 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 32))(v58, v25);
      }
      else
      {
        v60 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v60) >> 3)
          v59 = 0;
        else
          v59 = *(ausdk::AUElement **)(v60 + 8 * v25);
      }
      v61 = ausdk::AUElement::GetParameter(v59, 0xCu);
      v62 = *((_QWORD *)this + 75);
      v199 = v61;
      if (v62)
      {
        v63 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 32))(v62, v25);
      }
      else
      {
        v64 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v64) >> 3)
          v63 = 0;
        else
          v63 = *(ausdk::AUElement **)(v64 + 8 * v25);
      }
      v65 = ausdk::AUElement::GetParameter(v63, 0xDu);
      v66 = *((_QWORD *)this + 75);
      if (v66)
      {
        v67 = v65;
        v68 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v66 + 32))(v66, v25);
      }
      else
      {
        v67 = v65;
        v69 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v69) >> 3)
          v68 = 0;
        else
          v68 = *(ausdk::AUElement **)(v69 + 8 * v25);
      }
      v70 = ausdk::AUElement::GetParameter(v68, 0xEu);
      v71 = *((_QWORD *)this + 75);
      if (v71)
      {
        v72 = v70;
        v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v71 + 32))(v71, v25);
      }
      else
      {
        v72 = v70;
        v74 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v74) >> 3)
          v73 = 0;
        else
          v73 = *(ausdk::AUElement **)(v74 + 8 * v25);
      }
      v75 = ausdk::AUElement::GetParameter(v73, 0xFu);
      v76 = *((_QWORD *)this + 75);
      if (v76)
      {
        v77 = v75;
        v78 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v76 + 32))(v76, v25);
      }
      else
      {
        v77 = v75;
        v79 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v79) >> 3)
          v78 = 0;
        else
          v78 = *(ausdk::AUElement **)(v79 + 8 * v25);
      }
      v80 = ausdk::AUElement::GetParameter(v78, 0x10u);
      v81 = *((_QWORD *)this + 75);
      if (v81)
      {
        v82 = v80;
        v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v81 + 32))(v81, v25);
      }
      else
      {
        v82 = v80;
        v84 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v84) >> 3)
          v83 = 0;
        else
          v83 = *(ausdk::AUElement **)(v84 + 8 * v25);
      }
      v85 = ausdk::AUElement::GetParameter(v83, 0x11u);
      v86 = *((_QWORD *)this + 75);
      if (v86)
      {
        v87 = v85;
        v88 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v86 + 32))(v86, v25);
      }
      else
      {
        v87 = v85;
        v89 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v89) >> 3)
          v88 = 0;
        else
          v88 = *(ausdk::AUElement **)(v89 + 8 * v25);
      }
      v90 = ausdk::AUElement::GetParameter(v88, 0x12u);
      v91 = *((_QWORD *)this + 75);
      v187 = v90;
      if (v91)
      {
        v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v91 + 32))(v91, v25);
      }
      else
      {
        v93 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v93) >> 3)
          v92 = 0;
        else
          v92 = *(ausdk::AUElement **)(v93 + 8 * v25);
      }
      v94 = ausdk::AUElement::GetParameter(v92, 0x13u);
      v95 = *((_QWORD *)this + 75);
      v185 = v94;
      if (v95)
      {
        v96 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v95 + 32))(v95, v25);
      }
      else
      {
        v97 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v97) >> 3)
          v96 = 0;
        else
          v96 = *(ausdk::AUElement **)(v97 + 8 * v25);
      }
      v98 = ausdk::AUElement::GetParameter(v96, 0x14u);
      v99 = *((_QWORD *)this + 75);
      v183 = v98;
      if (v99)
      {
        v100 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v99 + 32))(v99, v25);
      }
      else
      {
        v101 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v101) >> 3)
          v100 = 0;
        else
          v100 = *(ausdk::AUElement **)(v101 + 8 * v25);
      }
      v102 = ausdk::AUElement::GetParameter(v100, 0x15u);
      v103 = *((_QWORD *)this + 75);
      v181 = v102;
      if (v103)
      {
        v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v103 + 32))(v103, v25);
      }
      else
      {
        v105 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v105) >> 3)
          v104 = 0;
        else
          v104 = *(ausdk::AUElement **)(v105 + 8 * v25);
      }
      v203 = ausdk::AUElement::GetParameter(v104, 0x16u);
      v106 = *((_QWORD *)this + 75);
      if (v106)
      {
        v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v106 + 32))(v106, v25);
      }
      else
      {
        v108 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v108) >> 3)
          v107 = 0;
        else
          v107 = *(ausdk::AUElement **)(v108 + 8 * v25);
      }
      v109 = ausdk::AUElement::GetParameter(v107, 0x19u);
      v110 = *((_QWORD *)this + 75);
      v180 = v109;
      if (v110)
      {
        v111 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v110 + 32))(v110, v25);
      }
      else
      {
        v112 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v112) >> 3)
          v111 = 0;
        else
          v111 = *(ausdk::AUElement **)(v112 + 8 * v25);
      }
      v113 = ausdk::AUElement::GetParameter(v111, 0x1Au);
      v114 = *((_QWORD *)this + 75);
      v202 = Parameter;
      v179 = v113;
      if (v114)
      {
        v115 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v114 + 32))(v114, v25);
      }
      else
      {
        v116 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v116) >> 3)
          v115 = 0;
        else
          v115 = *(ausdk::AUElement **)(v116 + 8 * v25);
      }
      v117 = ausdk::AUElement::GetParameter(v115, 0x1Bu);
      v118 = *((_QWORD *)this + 75);
      v201 = v37;
      if (v118)
      {
        v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v118 + 32))(v118, v25);
      }
      else
      {
        v120 = *((_QWORD *)this + 72);
        if (v25 >= (*((_QWORD *)this + 73) - v120) >> 3)
          v119 = 0;
        else
          v119 = *(ausdk::AUElement **)(v120 + 8 * v25);
      }
      v121 = ausdk::AUElement::GetParameter(v119, 0x1Cu);
      v122 = *((_QWORD *)this + 9);
      if (v122)
      {
        v123 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v122 + 32))(v122, 0);
      }
      else
      {
        v124 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v124)
          v123 = 0;
        else
          v123 = *v124;
      }
      v125 = ausdk::AUElement::GetParameter(v123, 0x1Du);
      v126 = *((_QWORD *)this + 9);
      if (v126)
      {
        v127 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v126 + 32))(v126, 0);
      }
      else
      {
        v128 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v128)
          v127 = 0;
        else
          v127 = *v128;
      }
      v178 = v197;
      v196 = v195;
      v192 = v191;
      v194 = v193;
      v177 = v82;
      v129 = v87;
      v188 = v187;
      v190 = v189;
      v184 = v183;
      v186 = v185;
      v182 = v181;
      v130 = v117;
      v131 = v121;
      v132 = v125;
      v133 = ausdk::AUElement::GetParameter(v127, 5u);
      v134 = *((_QWORD *)this + 9);
      v198 = v133;
      if (v134)
      {
        v135 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 32))(v134, 0);
      }
      else
      {
        v136 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v136)
          v135 = 0;
        else
          v135 = *v136;
      }
      v137 = ausdk::AUElement::GetParameter(v135, 0x20u);
      v138 = (char *)operator new(0x3E8uLL);
      *((float *)v138 + 32) = v199;
      *((float *)v138 + 39) = v200;
      *((float *)v138 + 46) = v203 / 0.1;
      *((float *)v138 + 55) = v203 / 0.1;
      *((float *)v138 + 49) = v203;
      *((float *)v138 + 58) = v203;
      *((double *)v138 + 46) = v178;
      *((double *)v138 + 47) = v196;
      *((double *)v138 + 48) = v194;
      *((double *)v138 + 49) = v192;
      *((double *)v138 + 50) = v190;
      *((double *)v138 + 51) = v67;
      *((double *)v138 + 52) = v72;
      *((double *)v138 + 53) = v77;
      *((double *)v138 + 54) = v177;
      *((double *)v138 + 55) = v129;
      *((double *)v138 + 56) = v188;
      *((double *)v138 + 57) = v186;
      *((double *)v138 + 58) = v184;
      *((double *)v138 + 59) = v182;
      *((double *)v138 + 60) = v203;
      *((double *)v138 + 61) = v180;
      *((double *)v138 + 62) = v179;
      *((double *)v138 + 63) = v130;
      *((double *)v138 + 64) = v131;
      *((float *)v138 + 130) = v137;
      *((float *)v138 + 38) = v202;
      *((float *)v138 + 27) = v201;
      *((float *)v138 + 15) = v202 - v201;
      *((float *)v138 + 18) = v202 - v201;
      *((_QWORD *)v138 + 109) = 0;
      *((float *)v138 + 219) = (float)(v202 - v201) / 0.1;
      *((double *)v138 + 113) = v198;
      __asm { FMOV            V0.2S, #1.0 }
      *((_QWORD *)v138 + 114) = _D0;
      *(_OWORD *)(v138 + 8) = 0u;
      v144 = (unint64_t *)(v138 + 8);
      *((double *)v138 + 124) = v132;
      *(_QWORD *)v138 = &off_1E69DF7F0;
      *((_QWORD *)v138 + 4) = 0x100000000;
      *((_DWORD *)v138 + 10) = 0;
      *(_OWORD *)(v138 + 44) = xmmword_1B66A2830;
      *((_QWORD *)v138 + 8) = 0;
      *(_OWORD *)(v138 + 76) = 0u;
      *(_OWORD *)(v138 + 92) = 0u;
      *((_DWORD *)v138 + 28) = v25;
      *((_QWORD *)v138 + 15) = 0;
      *(_OWORD *)(v138 + 132) = xmmword_1B6627E00;
      *((_WORD *)v138 + 74) = 257;
      *((_QWORD *)v138 + 20) = 0x42C800007FC00000;
      *(_OWORD *)(v138 + 168) = 0u;
      *(_QWORD *)(v138 + 188) = 0x3F80000000000000;
      *((_DWORD *)v138 + 54) = 0;
      *(_OWORD *)(v138 + 200) = 0u;
      *((_QWORD *)v138 + 28) = 0x3F80000000000000;
      *(_OWORD *)(v138 + 252) = 0u;
      *(_OWORD *)(v138 + 268) = 0u;
      *((_DWORD *)v138 + 87) = 0;
      *(_OWORD *)(v138 + 236) = 0u;
      *(_OWORD *)(v138 + 284) = 0u;
      *(_OWORD *)(v138 + 300) = 0u;
      *(_OWORD *)(v138 + 316) = 0u;
      *(_OWORD *)(v138 + 332) = 0u;
      *((_QWORD *)v138 + 44) = 1065353216;
      *((_DWORD *)v138 + 90) = 0;
      *((_DWORD *)v138 + 215) = 0;
      *(_OWORD *)(v138 + 828) = 0u;
      *(_OWORD *)(v138 + 844) = 0u;
      *(_OWORD *)(v138 + 796) = 0u;
      *(_OWORD *)(v138 + 812) = 0u;
      *(_OWORD *)(v138 + 764) = 0u;
      *(_OWORD *)(v138 + 780) = 0u;
      *(_OWORD *)(v138 + 732) = 0u;
      *(_OWORD *)(v138 + 748) = 0u;
      *(_OWORD *)(v138 + 700) = 0u;
      *(_OWORD *)(v138 + 716) = 0u;
      *(_OWORD *)(v138 + 668) = 0u;
      *(_OWORD *)(v138 + 684) = 0u;
      *(_OWORD *)(v138 + 636) = 0u;
      *(_OWORD *)(v138 + 652) = 0u;
      *(_OWORD *)(v138 + 604) = 0u;
      *(_OWORD *)(v138 + 620) = 0u;
      *(_OWORD *)(v138 + 572) = 0u;
      *(_OWORD *)(v138 + 588) = 0u;
      *(_OWORD *)(v138 + 540) = 0u;
      *(_OWORD *)(v138 + 556) = 0u;
      *(_OWORD *)(v138 + 524) = 0u;
      v138[864] = 1;
      *((_DWORD *)v138 + 217) = 0;
      *((_QWORD *)v138 + 3) = &off_1E69DF738;
      *((_OWORD *)v138 + 55) = 0u;
      *((_DWORD *)v138 + 224) = 1065353216;
      *(_OWORD *)(v138 + 924) = 0u;
      *(_OWORD *)(v138 + 940) = 0u;
      *(_OWORD *)(v138 + 956) = 0u;
      *(_OWORD *)(v138 + 972) = 0u;
      *((_DWORD *)v138 + 247) = 0;
      v145.n128_f32[0] = clsp::CLSPKernel_v3::ResetThermalState((clsp::CLSPKernel_v3 *)(v138 + 24));
      *((_DWORD *)v138 + 33) = 1065353216;
      *(_QWORD *)&v207 = v138 + 24;
      *((_QWORD *)&v207 + 1) = v138;
      v146 = (char *)*((_QWORD *)this + 77);
      v147 = *((_QWORD *)this + 78);
      if ((unint64_t)v146 >= v147)
      {
        v150 = (char *)*((_QWORD *)this + 76);
        v151 = (v146 - v150) >> 4;
        v152 = v151 + 1;
        if ((unint64_t)(v151 + 1) >> 60)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v153 = v147 - (_QWORD)v150;
        if (v153 >> 3 > v152)
          v152 = v153 >> 3;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF0)
          v154 = 0xFFFFFFFFFFFFFFFLL;
        else
          v154 = v152;
        if (v154 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v155 = (char *)operator new(16 * v154);
        v156 = &v155[16 * v151];
        v157 = *((_QWORD *)&v207 + 1);
        *(_OWORD *)v156 = v207;
        if (v157)
        {
          v158 = (unint64_t *)(v157 + 8);
          do
            v159 = __ldxr(v158);
          while (__stxr(v159 + 1, v158));
          v146 = (char *)*((_QWORD *)this + 77);
          v150 = (char *)*((_QWORD *)this + 76);
        }
        if (v146 == v150)
        {
          v145 = (__n128)vdupq_n_s64((unint64_t)v146);
          v160 = &v155[16 * v151];
        }
        else
        {
          v160 = &v155[16 * v151];
          do
          {
            v161 = *((_OWORD *)v146 - 1);
            v146 -= 16;
            *((_OWORD *)v160 - 1) = v161;
            v160 -= 16;
            *(_QWORD *)v146 = 0;
            *((_QWORD *)v146 + 1) = 0;
          }
          while (v146 != v150);
          v145 = *((__n128 *)this + 38);
        }
        v149 = v156 + 16;
        *((_QWORD *)this + 76) = v160;
        *((_QWORD *)this + 77) = v156 + 16;
        *((_QWORD *)this + 78) = &v155[16 * v154];
        v162 = v145.n128_i64[1];
        v163 = (void *)v145.n128_u64[0];
        while ((void *)v162 != v163)
          v162 = std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v162 - 16);
        if (v163)
          operator delete(v163);
      }
      else
      {
        *(_QWORD *)v146 = v207;
        *((_QWORD *)v146 + 1) = v138;
        do
          v148 = __ldxr(v144);
        while (__stxr(v148 + 1, v144));
        v149 = v146 + 16;
      }
      *((_QWORD *)this + 77) = v149;
      v164 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v25);
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v164 + 80))(v164, *((unsigned int *)this + 158), v145);
      v165 = *(_DWORD **)(*((_QWORD *)this + 76) + 16 * v25);
      v165[211] = *((_DWORD *)this + 159);
      (*(void (**)(_DWORD *, _QWORD, double))(*(_QWORD *)v165 + 16))(v165, *((unsigned int *)this + 84), v176);
      v166 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1))
      {
        v167 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      ++v25;
    }
    while (v25 != v12);
  }
  SimpleMeters::Initialize((AUSpeakerProtectionV2 *)((char *)this + 680), (const CAStreamBasicDescription *)v205, (const CAStreamBasicDescription *)&v204);
  if ((*((_BYTE *)this + 632) & 2) != 0)
  {
    v169 = operator new(0x48uLL);
    v169[1] = 0;
    v169[2] = 0;
    *v169 = &off_1E69E4F68;
    std::string::basic_string[abi:ne180100]<0>(&v207, "T_Coil");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v169 + 3), (uint64_t)&v207);
    if (v208 < 0)
      operator delete((void *)v207);
    *(_QWORD *)&v207 = v169 + 3;
    *((_QWORD *)&v207 + 1) = v169;
    std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 648, &v207);
    v170 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (*((_QWORD *)&v207 + 1))
    {
      v171 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    if (v12 >= 2)
    {
      std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,char const(&)[9],void>(&v207, "T_Coil_r");
      std::shared_ptr<vp::xml::_xmlNode const>::operator=[abi:ne180100]((uint64_t)this + 664, &v207);
      v173 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1))
      {
        v174 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
    }
  }
  return (*(uint64_t (**)(AUSpeakerProtectionV2 *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
}

void sub_1B64AAF40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  if (*(char *)(v2 - 153) < 0)
    operator delete(*(void **)(v2 - 176));
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void AUSpeakerProtectionV2::Cleanup(AUSpeakerProtectionV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 77);
  v3 = *((_QWORD *)this + 76);
  if (v2 != v3)
  {
    do
    {
      v4 = (__int128 *)(v3 + 16);
      if (v3 + 16 != v2)
      {
        do
        {
          v5 = *v4;
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          v6 = *(std::__shared_weak_count **)(v3 + 8);
          *(_OWORD *)v3 = v5;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          ++v4;
          v3 += 16;
        }
        while (v4 != (__int128 *)v2);
        v2 = *((_QWORD *)this + 77);
      }
      v9 = v3;
      while (v2 != v3)
      {
        v2 -= 16;
        std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v2);
      }
      *((_QWORD *)this + 77) = v3;
      v3 = *((_QWORD *)this + 76);
      v2 = v9;
    }
    while (v9 != v3);
  }
  *((_QWORD *)this + 86) = *((_QWORD *)this + 85);
  *((_QWORD *)this + 89) = *((_QWORD *)this + 88);
}

uint64_t AUSpeakerProtectionV2::Reset(AUSpeakerProtectionV2 *this)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char v6;
  char v7;
  clsp::CLSP_Log *v8;

  *((_QWORD *)this + 67) = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0)
                                     + 80);
  v2 = *((_QWORD *)this + 76);
  if (*((_QWORD *)this + 77) != v2)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v2 + 16 * v3) + 24))(*(_QWORD *)(v2 + 16 * v3), *((double *)this + 67));
      v3 = v4;
      v2 = *((_QWORD *)this + 76);
      ++v4;
    }
    while (v3 < (*((_QWORD *)this + 77) - v2) >> 4);
  }
  SimpleMeters::Reset((uint64_t)this + 680);
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = (clsp::CLSP_Log *)*((_QWORD *)this + 2 * v5 + 81);
    if (v8)
      clsp::CLSP_Log::FlushLog(v8);
    v6 = 0;
    v5 = 1;
  }
  while ((v7 & 1) != 0);
  return 0;
}

uint64_t AUSpeakerProtectionV2::GetPropertyInfo(AUSpeakerProtectionV2 *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  if (a2 == 3007)
  {
    v7 = 1;
    v8 = 4;
LABEL_12:
    result = 0;
    *a5 = v8;
    *a6 = v7;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1)
      v6 = 0;
    else
      v6 = (uint64_t)(*((_QWORD *)this + 86) - *((_QWORD *)this + 85)) >> 7;
    if ((a3 & 0xFFFFFFFD) == 0)
      v6 += (uint64_t)(*((_QWORD *)this + 89) - *((_QWORD *)this + 88)) >> 7;
    v7 = 0;
    v8 = 16 * v6;
    goto LABEL_12;
  }
  if (a3)
    return 4294956417;
  if (a2 == 64003)
  {
    result = 0;
    *a6 = 1;
    v10 = 8;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    *a6 = 1;
    v10 = 4;
  }
  *a5 = v10;
  return result;
}

uint64_t AUSpeakerProtectionV2::GetProperty(AUSpeakerProtectionV2 *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, int *a6)
{
  uint64_t result;
  int v11;
  unsigned int v12;

  v12 = 0;
  if (SimpleMeters::HandleGetProperty((AUSpeakerProtectionV2 *)((char *)this + 680), a2, a3, a5, &v12, a6))return v12;
  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    v11 = (*(uint64_t (**)(AUSpeakerProtectionV2 *))(*(_QWORD *)this + 576))(this);
    result = 0;
    *a5 = v11;
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::SetProperty(AUSpeakerProtectionV2 *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  unsigned int v7;
  uint64_t v12;
  int SInt32;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unsigned int *v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  int Count;
  int v159;
  unint64_t v160;
  unint64_t v161;
  const CFDictionaryValueCallBacks *v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v165;
  ausdk::AUElement *v166;
  uint64_t v167;
  unsigned int v168;
  char *__p;
  unint64_t v170;
  char *v171;
  CACFDictionary *v172;
  __int16 v173;
  unsigned int v174;
  int v175;
  CACFDictionary *Mutable;
  __int16 v177;
  CFArrayRef theArray;
  __int16 v179;
  int v180;
  int v181;

  v7 = a6;
  v174 = 0;
  if (SimpleMeters::HandleSetProperty((AUSpeakerProtectionV2 *)((char *)this + 680), a2, a3, a5, a6, (int *)&v174, a7))
    return v174;
  if (a3)
    return 4294956417;
  if (a2 == 64003)
  {
    v172 = *(CACFDictionary **)a5;
    v173 = 0;
    v181 = -1;
    SInt32 = CACFDictionary::GetSInt32((uint64_t)v172, CFSTR("Version"), &v181);
    v15 = v181;
    if (v181 == 2)
      v16 = SInt32 ^ 1;
    else
      v16 = 1;
    v180 = -1;
    if ((CACFDictionary::GetSInt32((uint64_t)v172, CFSTR("NumChannels"), &v180) & 1) != 0)
    {
      if (v15 == 2)
        v17 = 0;
      else
        v17 = -205;
      if (SInt32)
        v18 = v17;
      else
        v18 = -203;
      *((_DWORD *)this + 136) = v180;
    }
    else
    {
      if (v16)
        v16 = 2;
      else
        v16 = 1;
      v18 = -203;
    }
    v20 = operator new(0x10uLL);
    *v20 = CFSTR("TemperatureLimit");
    v20[1] = 2;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
    v23 = v22;
    v24 = &v21[16 * v22];
    *((_QWORD *)v21 + 2) = CFSTR("AmbientTemp");
    *((_QWORD *)v21 + 3) = 3;
    *(_OWORD *)v21 = *(_OWORD *)v20;
    operator delete(v20);
    v168 = v18;
    if (v23 < 3)
    {
      v27 = 3;
      if ((unint64_t)((v24 - v21) >> 3) > 3)
        v27 = (v24 - v21) >> 3;
      if ((unint64_t)(v24 - v21) >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v28);
      else
        v29 = 0;
      v30 = 0;
      v24 = (char *)(v28 + 16 * v29);
      *(_QWORD *)(v28 + 32) = CFSTR("ThermalGainAttackTime");
      *(_QWORD *)(v28 + 40) = 7;
      v25 = (char *)(v28 + 48);
      do
      {
        *(_OWORD *)(v28 + 32 + v30 - 16) = *(_OWORD *)&v21[v30 + 16];
        v30 -= 16;
      }
      while (v30 != -32);
      v26 = (char *)v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *((_QWORD *)v21 + 4) = CFSTR("ThermalGainAttackTime");
      *((_QWORD *)v21 + 5) = 7;
      v25 = v21 + 48;
      v26 = v21;
    }
    if (v25 >= v24)
    {
      v32 = (v25 - v26) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v33)
        v33 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v34 = 0xFFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v34);
      else
        v35 = 0;
      v36 = (_QWORD *)(v34 + 16 * v32);
      v24 = (char *)(v34 + 16 * v35);
      *v36 = CFSTR("ThermalGainReleaseTime");
      v36[1] = 8;
      v31 = (char *)(v36 + 2);
      if (v25 == v26)
        goto LABEL_56;
      do
      {
        *((_OWORD *)v36 - 1) = *((_OWORD *)v25 - 1);
        v36 -= 2;
        v25 -= 16;
      }
      while (v25 != v26);
      if (v26)
LABEL_56:
        operator delete(v26);
      v26 = (char *)v36;
    }
    else
    {
      *(_QWORD *)v25 = CFSTR("ThermalGainReleaseTime");
      *((_QWORD *)v25 + 1) = 8;
      v31 = v25 + 16;
    }
    if (v31 >= v24)
    {
      v38 = (v31 - v26) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v39)
        v39 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v40 = 0xFFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
        v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v40);
      else
        v41 = 0;
      v42 = (_QWORD *)(v40 + 16 * v38);
      v24 = (char *)(v40 + 16 * v41);
      *v42 = CFSTR("PeakDispAttackTime");
      v42[1] = 9;
      v37 = (char *)(v42 + 2);
      if (v31 == v26)
        goto LABEL_72;
      do
      {
        *((_OWORD *)v42 - 1) = *((_OWORD *)v31 - 1);
        v42 -= 2;
        v31 -= 16;
      }
      while (v31 != v26);
      if (v26)
LABEL_72:
        operator delete(v26);
      v26 = (char *)v42;
    }
    else
    {
      *(_QWORD *)v31 = CFSTR("PeakDispAttackTime");
      *((_QWORD *)v31 + 1) = 9;
      v37 = v31 + 16;
    }
    if (v37 >= v24)
    {
      v44 = (v37 - v26) >> 4;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v45)
        v45 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
        v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v46);
      else
        v47 = 0;
      v48 = (_QWORD *)(v46 + 16 * v44);
      v24 = (char *)(v46 + 16 * v47);
      *v48 = CFSTR("PeakDispDecayTime");
      v48[1] = 10;
      v43 = (char *)(v48 + 2);
      if (v37 == v26)
        goto LABEL_88;
      do
      {
        *((_OWORD *)v48 - 1) = *((_OWORD *)v37 - 1);
        v48 -= 2;
        v37 -= 16;
      }
      while (v37 != v26);
      if (v26)
LABEL_88:
        operator delete(v26);
      v26 = (char *)v48;
    }
    else
    {
      *(_QWORD *)v37 = CFSTR("PeakDispDecayTime");
      *((_QWORD *)v37 + 1) = 10;
      v43 = v37 + 16;
    }
    if (v43 >= v24)
    {
      v50 = (v43 - v26) >> 4;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v51)
        v51 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v52 = 0xFFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v52);
      else
        v53 = 0;
      v54 = (_QWORD *)(v52 + 16 * v50);
      v24 = (char *)(v52 + 16 * v53);
      *v54 = CFSTR("DispFBIntegrationTime");
      v54[1] = 11;
      v49 = (char *)(v54 + 2);
      if (v43 == v26)
        goto LABEL_104;
      do
      {
        *((_OWORD *)v54 - 1) = *((_OWORD *)v43 - 1);
        v54 -= 2;
        v43 -= 16;
      }
      while (v43 != v26);
      if (v26)
LABEL_104:
        operator delete(v26);
      v26 = (char *)v54;
    }
    else
    {
      *(_QWORD *)v43 = CFSTR("DispFBIntegrationTime");
      *((_QWORD *)v43 + 1) = 11;
      v49 = v43 + 16;
    }
    if (v49 >= v24)
    {
      v56 = (v49 - v26) >> 4;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v57)
        v57 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v58 = 0xFFFFFFFFFFFFFFFLL;
      else
        v58 = v57;
      if (v58)
        v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v58);
      else
        v59 = 0;
      v60 = (_QWORD *)(v58 + 16 * v56);
      v24 = (char *)(v58 + 16 * v59);
      *v60 = CFSTR("HardTempLimitHeadroom");
      v60[1] = 4;
      v55 = (char *)(v60 + 2);
      if (v49 == v26)
        goto LABEL_120;
      do
      {
        *((_OWORD *)v60 - 1) = *((_OWORD *)v49 - 1);
        v60 -= 2;
        v49 -= 16;
      }
      while (v49 != v26);
      if (v26)
LABEL_120:
        operator delete(v26);
      v26 = (char *)v60;
    }
    else
    {
      *(_QWORD *)v49 = CFSTR("HardTempLimitHeadroom");
      *((_QWORD *)v49 + 1) = 4;
      v55 = v49 + 16;
    }
    if (v55 >= v24)
    {
      v62 = (v55 - v26) >> 4;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v63)
        v63 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v64 = 0xFFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v64);
      else
        v65 = 0;
      v66 = (_QWORD *)(v64 + 16 * v62);
      v24 = (char *)(v64 + 16 * v65);
      *v66 = CFSTR("ThermalFFSpeedupFactor");
      v66[1] = 5;
      v61 = (char *)(v66 + 2);
      if (v55 == v26)
        goto LABEL_136;
      do
      {
        *((_OWORD *)v66 - 1) = *((_OWORD *)v55 - 1);
        v66 -= 2;
        v55 -= 16;
      }
      while (v55 != v26);
      if (v26)
LABEL_136:
        operator delete(v26);
      v26 = (char *)v66;
    }
    else
    {
      *(_QWORD *)v55 = CFSTR("ThermalFFSpeedupFactor");
      *((_QWORD *)v55 + 1) = 5;
      v61 = v55 + 16;
    }
    if (v61 >= v24)
    {
      v68 = (v61 - v26) >> 4;
      v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v24 - v26) >> 3 > v69)
        v69 = (v24 - v26) >> 3;
      if ((unint64_t)(v24 - v26) >= 0x7FFFFFFFFFFFFFF0)
        v70 = 0xFFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      if (v70)
        v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v70);
      v71 = (_QWORD *)(v70 + 16 * v68);
      *v71 = CFSTR("LookaheadDelay_ms");
      v71[1] = 29;
      v67 = (char *)(v71 + 2);
      if (v61 == v26)
        goto LABEL_151;
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v61 - 1);
        v71 -= 2;
        v61 -= 16;
      }
      while (v61 != v26);
      if (v26)
LABEL_151:
        operator delete(v26);
      v26 = (char *)v71;
    }
    else
    {
      *(_QWORD *)v61 = CFSTR("LookaheadDelay_ms");
      *((_QWORD *)v61 + 1) = 29;
      v67 = v61 + 16;
    }
    __p = v26;
    v72 = operator new(0x10uLL);
    *v72 = CFSTR("Rshunt");
    v72[1] = 13;
    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
    v75 = v74;
    v76 = &v73[16 * v74];
    *((_QWORD *)v73 + 2) = CFSTR("Rampout");
    *((_QWORD *)v73 + 3) = 14;
    *(_OWORD *)v73 = *(_OWORD *)v72;
    operator delete(v72);
    if (v75 < 3)
    {
      v79 = 3;
      if ((unint64_t)((v76 - v73) >> 3) > 3)
        v79 = (v76 - v73) >> 3;
      if ((unint64_t)(v76 - v73) >= 0x7FFFFFFFFFFFFFF0)
        v80 = 0xFFFFFFFFFFFFFFFLL;
      else
        v80 = v79;
      if (v80)
        v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v80);
      else
        v81 = 0;
      v82 = 0;
      v76 = (char *)(v80 + 16 * v81);
      *(_QWORD *)(v80 + 32) = CFSTR("mt");
      *(_QWORD *)(v80 + 40) = 15;
      v77 = (char *)(v80 + 48);
      do
      {
        *(_OWORD *)(v80 + 32 + v82 - 16) = *(_OWORD *)&v73[v82 + 16];
        v82 -= 16;
      }
      while (v82 != -32);
      v78 = (char *)v80;
      if (v73)
        operator delete(v73);
    }
    else
    {
      *((_QWORD *)v73 + 4) = CFSTR("mt");
      *((_QWORD *)v73 + 5) = 15;
      v77 = v73 + 48;
      v78 = v73;
    }
    if (v77 >= v76)
    {
      v84 = (v77 - v78) >> 4;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v85)
        v85 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v86 = 0xFFFFFFFFFFFFFFFLL;
      else
        v86 = v85;
      if (v86)
        v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v86);
      else
        v87 = 0;
      v88 = (_QWORD *)(v86 + 16 * v84);
      v76 = (char *)(v86 + 16 * v87);
      *v88 = CFSTR("ct");
      v88[1] = 16;
      v83 = (char *)(v88 + 2);
      if (v77 == v78)
        goto LABEL_181;
      do
      {
        *((_OWORD *)v88 - 1) = *((_OWORD *)v77 - 1);
        v88 -= 2;
        v77 -= 16;
      }
      while (v77 != v78);
      if (v78)
LABEL_181:
        operator delete(v78);
      v78 = (char *)v88;
    }
    else
    {
      *(_QWORD *)v77 = CFSTR("ct");
      *((_QWORD *)v77 + 1) = 16;
      v83 = v77 + 16;
    }
    if (v83 >= v76)
    {
      v90 = (v83 - v78) >> 4;
      v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v91)
        v91 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v92 = 0xFFFFFFFFFFFFFFFLL;
      else
        v92 = v91;
      if (v92)
        v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v92);
      else
        v93 = 0;
      v94 = (_QWORD *)(v92 + 16 * v90);
      v76 = (char *)(v92 + 16 * v93);
      *v94 = CFSTR("kt");
      v94[1] = 17;
      v89 = (char *)(v94 + 2);
      if (v83 == v78)
        goto LABEL_197;
      do
      {
        *((_OWORD *)v94 - 1) = *((_OWORD *)v83 - 1);
        v94 -= 2;
        v83 -= 16;
      }
      while (v83 != v78);
      if (v78)
LABEL_197:
        operator delete(v78);
      v78 = (char *)v94;
    }
    else
    {
      *(_QWORD *)v83 = CFSTR("kt");
      *((_QWORD *)v83 + 1) = 17;
      v89 = v83 + 16;
    }
    if (v89 >= v76)
    {
      v96 = (v89 - v78) >> 4;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v97)
        v97 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v98 = 0xFFFFFFFFFFFFFFFLL;
      else
        v98 = v97;
      if (v98)
        v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v98);
      else
        v99 = 0;
      v100 = (_QWORD *)(v98 + 16 * v96);
      v76 = (char *)(v98 + 16 * v99);
      *v100 = CFSTR("ag");
      v100[1] = 18;
      v95 = (char *)(v100 + 2);
      if (v89 == v78)
        goto LABEL_213;
      do
      {
        *((_OWORD *)v100 - 1) = *((_OWORD *)v89 - 1);
        v100 -= 2;
        v89 -= 16;
      }
      while (v89 != v78);
      if (v78)
LABEL_213:
        operator delete(v78);
      v78 = (char *)v100;
    }
    else
    {
      *(_QWORD *)v89 = CFSTR("ag");
      *((_QWORD *)v89 + 1) = 18;
      v95 = v89 + 16;
    }
    if (v95 >= v76)
    {
      v102 = (v95 - v78) >> 4;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v103)
        v103 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v104 = 0xFFFFFFFFFFFFFFFLL;
      else
        v104 = v103;
      if (v104)
        v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v104);
      else
        v105 = 0;
      v106 = (_QWORD *)(v104 + 16 * v102);
      v76 = (char *)(v104 + 16 * v105);
      *v106 = CFSTR("g_bw");
      v106[1] = 19;
      v101 = (char *)(v106 + 2);
      if (v95 == v78)
        goto LABEL_229;
      do
      {
        *((_OWORD *)v106 - 1) = *((_OWORD *)v95 - 1);
        v106 -= 2;
        v95 -= 16;
      }
      while (v95 != v78);
      if (v78)
LABEL_229:
        operator delete(v78);
      v78 = (char *)v106;
    }
    else
    {
      *(_QWORD *)v95 = CFSTR("g_bw");
      *((_QWORD *)v95 + 1) = 19;
      v101 = v95 + 16;
    }
    if (v101 >= v76)
    {
      v108 = (v101 - v78) >> 4;
      v109 = v108 + 1;
      if ((unint64_t)(v108 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v109)
        v109 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v110 = 0xFFFFFFFFFFFFFFFLL;
      else
        v110 = v109;
      if (v110)
        v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v110);
      else
        v111 = 0;
      v112 = (_QWORD *)(v110 + 16 * v108);
      v76 = (char *)(v110 + 16 * v111);
      *v112 = CFSTR("Q_d");
      v112[1] = 20;
      v107 = (char *)(v112 + 2);
      if (v101 == v78)
        goto LABEL_245;
      do
      {
        *((_OWORD *)v112 - 1) = *((_OWORD *)v101 - 1);
        v112 -= 2;
        v101 -= 16;
      }
      while (v101 != v78);
      if (v78)
LABEL_245:
        operator delete(v78);
      v78 = (char *)v112;
    }
    else
    {
      *(_QWORD *)v101 = CFSTR("Q_d");
      *((_QWORD *)v101 + 1) = 20;
      v107 = v101 + 16;
    }
    if (v107 >= v76)
    {
      v114 = (v107 - v78) >> 4;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v115)
        v115 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v116 = 0xFFFFFFFFFFFFFFFLL;
      else
        v116 = v115;
      if (v116)
        v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v116);
      else
        v117 = 0;
      v118 = (_QWORD *)(v116 + 16 * v114);
      v76 = (char *)(v116 + 16 * v117);
      *v118 = CFSTR("phi");
      v118[1] = 21;
      v113 = (char *)(v118 + 2);
      if (v107 == v78)
        goto LABEL_261;
      do
      {
        *((_OWORD *)v118 - 1) = *((_OWORD *)v107 - 1);
        v118 -= 2;
        v107 -= 16;
      }
      while (v107 != v78);
      if (v78)
LABEL_261:
        operator delete(v78);
      v78 = (char *)v118;
    }
    else
    {
      *(_QWORD *)v107 = CFSTR("phi");
      *((_QWORD *)v107 + 1) = 21;
      v113 = v107 + 16;
    }
    if (v113 >= v76)
    {
      v120 = (v113 - v78) >> 4;
      v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v121)
        v121 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v122 = 0xFFFFFFFFFFFFFFFLL;
      else
        v122 = v121;
      if (v122)
        v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v122);
      else
        v123 = 0;
      v124 = (_QWORD *)(v122 + 16 * v120);
      v76 = (char *)(v122 + 16 * v123);
      *v124 = CFSTR("x_lim");
      v124[1] = 22;
      v119 = (char *)(v124 + 2);
      if (v113 == v78)
        goto LABEL_277;
      do
      {
        *((_OWORD *)v124 - 1) = *((_OWORD *)v113 - 1);
        v124 -= 2;
        v113 -= 16;
      }
      while (v113 != v78);
      if (v78)
LABEL_277:
        operator delete(v78);
      v78 = (char *)v124;
    }
    else
    {
      *(_QWORD *)v113 = CFSTR("x_lim");
      *((_QWORD *)v113 + 1) = 22;
      v119 = v113 + 16;
    }
    if (v119 >= v76)
    {
      v126 = (v119 - v78) >> 4;
      v127 = v126 + 1;
      if ((unint64_t)(v126 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v127)
        v127 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v128 = 0xFFFFFFFFFFFFFFFLL;
      else
        v128 = v127;
      if (v128)
        v128 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v128);
      else
        v129 = 0;
      v130 = (_QWORD *)(v128 + 16 * v126);
      v76 = (char *)(v128 + 16 * v129);
      *v130 = CFSTR("Reb_20C");
      v130[1] = 12;
      v125 = (char *)(v130 + 2);
      if (v119 == v78)
        goto LABEL_293;
      do
      {
        *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
        v130 -= 2;
        v119 -= 16;
      }
      while (v119 != v78);
      if (v78)
LABEL_293:
        operator delete(v78);
      v78 = (char *)v130;
    }
    else
    {
      *(_QWORD *)v119 = CFSTR("Reb_20C");
      *((_QWORD *)v119 + 1) = 12;
      v125 = v119 + 16;
    }
    if (v125 >= v76)
    {
      v132 = (v125 - v78) >> 4;
      v133 = v132 + 1;
      if ((unint64_t)(v132 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v133)
        v133 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v134 = 0xFFFFFFFFFFFFFFFLL;
      else
        v134 = v133;
      if (v134)
        v134 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v134);
      else
        v135 = 0;
      v136 = (_QWORD *)(v134 + 16 * v132);
      v76 = (char *)(v134 + 16 * v135);
      *v136 = CFSTR("T_sett_vc");
      v136[1] = 25;
      v131 = (char *)(v136 + 2);
      if (v125 == v78)
        goto LABEL_309;
      do
      {
        *((_OWORD *)v136 - 1) = *((_OWORD *)v125 - 1);
        v136 -= 2;
        v125 -= 16;
      }
      while (v125 != v78);
      if (v78)
LABEL_309:
        operator delete(v78);
      v78 = (char *)v136;
    }
    else
    {
      *(_QWORD *)v125 = CFSTR("T_sett_vc");
      *((_QWORD *)v125 + 1) = 25;
      v131 = v125 + 16;
    }
    if (v131 >= v76)
    {
      v138 = (v131 - v78) >> 4;
      v139 = v138 + 1;
      if ((unint64_t)(v138 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v139)
        v139 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v140 = 0xFFFFFFFFFFFFFFFLL;
      else
        v140 = v139;
      if (v140)
        v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v140);
      else
        v141 = 0;
      v142 = (_QWORD *)(v140 + 16 * v138);
      v76 = (char *)(v140 + 16 * v141);
      *v142 = CFSTR("T_sett_mg");
      v142[1] = 26;
      v137 = (char *)(v142 + 2);
      if (v131 == v78)
        goto LABEL_325;
      do
      {
        *((_OWORD *)v142 - 1) = *((_OWORD *)v131 - 1);
        v142 -= 2;
        v131 -= 16;
      }
      while (v131 != v78);
      if (v78)
LABEL_325:
        operator delete(v78);
      v78 = (char *)v142;
    }
    else
    {
      *(_QWORD *)v131 = CFSTR("T_sett_mg");
      *((_QWORD *)v131 + 1) = 26;
      v137 = v131 + 16;
    }
    if (v137 >= v76)
    {
      v144 = (v137 - v78) >> 4;
      v145 = v144 + 1;
      if ((unint64_t)(v144 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v145)
        v145 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v146 = 0xFFFFFFFFFFFFFFFLL;
      else
        v146 = v145;
      if (v146)
        v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v146);
      else
        v147 = 0;
      v148 = (_QWORD *)(v146 + 16 * v144);
      v76 = (char *)(v146 + 16 * v147);
      *v148 = CFSTR("Tc_vc");
      v148[1] = 27;
      v143 = (char *)(v148 + 2);
      if (v137 == v78)
        goto LABEL_341;
      do
      {
        *((_OWORD *)v148 - 1) = *((_OWORD *)v137 - 1);
        v148 -= 2;
        v137 -= 16;
      }
      while (v137 != v78);
      if (v78)
LABEL_341:
        operator delete(v78);
      v78 = (char *)v148;
    }
    else
    {
      *(_QWORD *)v137 = CFSTR("Tc_vc");
      *((_QWORD *)v137 + 1) = 27;
      v143 = v137 + 16;
    }
    if (v143 >= v76)
    {
      v149 = (v143 - v78) >> 4;
      v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      if ((v76 - v78) >> 3 > v150)
        v150 = (v76 - v78) >> 3;
      if ((unint64_t)(v76 - v78) >= 0x7FFFFFFFFFFFFFF0)
        v151 = 0xFFFFFFFFFFFFFFFLL;
      else
        v151 = v150;
      if (v151)
        v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v151);
      v152 = (_QWORD *)(v151 + 16 * v149);
      *v152 = CFSTR("Tc_mg");
      v152[1] = 28;
      v171 = (char *)(v152 + 2);
      if (v143 == v78)
        goto LABEL_356;
      do
      {
        *((_OWORD *)v152 - 1) = *((_OWORD *)v143 - 1);
        v152 -= 2;
        v143 -= 16;
      }
      while (v143 != v78);
      if (v78)
LABEL_356:
        operator delete(v78);
      v78 = (char *)v152;
    }
    else
    {
      *(_QWORD *)v143 = CFSTR("Tc_mg");
      *((_QWORD *)v143 + 1) = 28;
      v171 = v143 + 16;
    }
    if (v67 != v26)
    {
      if ((unint64_t)((v67 - v26) >> 4) <= 1)
        v153 = 1;
      else
        v153 = (v67 - v26) >> 4;
      v154 = (unsigned int *)(v26 + 8);
      do
      {
        v155 = *((_QWORD *)this + 9);
        if (v155)
        {
          v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
        }
        else
        {
          v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
          if (*((ausdk::AUElement ***)this + 7) == v157)
            v156 = 0;
          else
            v156 = *v157;
        }
        v16 += AUSpeakerProtectionV2::SetParamFromPair((uint64_t)this, v156, *((__CFString **)v154 - 1), *v154, v172);
        v154 += 4;
        --v153;
      }
      while (v153);
    }
    theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v179 = 257;
    CACFDictionary::GetCACFArray(&v172, CFSTR("ChannelSpecificParams"), (CACFArray *)&theArray);
    Count = (int)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    if (Count == *((_DWORD *)this + 136))
      v159 = v16;
    else
      v159 = v16 + 1;
    clsp::ThermalStateVector_v3_separate<clsp::EL>::SetNumChannels(*((_DWORD *)this + 136), 0);
    if (*((_DWORD *)this + 136))
    {
      v160 = 0;
      v161 = (v171 - v78) >> 4;
      if (v161 <= 1)
        v161 = 1;
      v170 = v161;
      v162 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], v162);
        v177 = 257;
        CACFArray::GetCACFDictionary(&theArray, v160, (CACFDictionary *)&Mutable);
        v175 = -1;
        CACFDictionary::GetSInt32((uint64_t)Mutable, CFSTR("ChannelID"), &v175);
        if (v160 == v175)
        {
          v163 = (unsigned int *)(v78 + 8);
          v164 = v170;
          if (v171 != v78)
          {
            do
            {
              v165 = *((_QWORD *)this + 75);
              if (v165)
              {
                v166 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v165 + 32))(v165, v160);
              }
              else
              {
                v167 = *((_QWORD *)this + 72);
                if (v160 >= (*((_QWORD *)this + 73) - v167) >> 3)
                  v166 = 0;
                else
                  v166 = *(ausdk::AUElement **)(v167 + 8 * v160);
              }
              v159 += AUSpeakerProtectionV2::SetParamFromPair((uint64_t)this, v166, *((__CFString **)v163 - 1), *v163, Mutable);
              v163 += 4;
              --v164;
            }
            while (v164);
          }
        }
        else
        {
          ++v159;
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
        ++v160;
      }
      while (v160 < *((unsigned int *)this + 136));
    }
    if (v159)
    {
      v12 = 4294967246;
    }
    else
    {
      *((_BYTE *)this + 528) = 1;
      v12 = v168;
    }
    CACFArray::~CACFArray((CACFArray *)&theArray);
    if (v78)
      operator delete(v78);
    if (__p)
      operator delete(__p);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v172);
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    if (v7 >= 4)
    {
      v19 = *a5;
      if ((v19 != 0) != (*(unsigned int (**)(AUSpeakerProtectionV2 *))(*(_QWORD *)this + 576))(this))
        (*(void (**)(AUSpeakerProtectionV2 *, BOOL))(*(_QWORD *)this + 584))(this, v19 != 0);
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return v12;
}

void sub_1B64AC608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (__p)
    operator delete(__p);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a13);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV2::SetParameter(AUSpeakerProtectionV2 *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  ausdk::AUElement **v13;
  uint64_t v14;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 75);
    if (v10)
    {
      v9 = *(uint64_t (**)(void))(*(_QWORD *)v10 + 32);
      goto LABEL_7;
    }
    v14 = *((_QWORD *)this + 72);
    if (a4 < (unint64_t)((*((_QWORD *)this + 73) - v14) >> 3))
    {
      v11 = *(ausdk::AUElement **)(v14 + 8 * a4);
      goto LABEL_14;
    }
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  if (a3)
    return 4294956430;
  v8 = *((_QWORD *)this + 9);
  if (!v8)
  {
    v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) != v13)
    {
      v11 = *v13;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v9 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 32);
LABEL_7:
  v11 = (ausdk::AUElement *)v9();
LABEL_14:
  ausdk::AUElement::SetParameter(v11, a2, a5, 0);
  result = 0;
  ++*((_DWORD *)this + 137);
  return result;
}

uint64_t AUSpeakerProtectionV2::CanScheduleParameters(AUSpeakerProtectionV2 *this)
{
  return 0;
}

uint64_t AUSpeakerProtectionV2::ProcessMultipleBufferLists(AUSpeakerProtectionV2 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, const AudioBufferList **a7)
{
  SimpleMeters *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t Element;
  const AudioBufferList *v17;
  unint64_t mNumberBuffers;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  uint64_t v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  uint64_t v40;
  ausdk::AUElement *v41;
  ausdk::AUElement **v42;
  uint64_t v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  uint64_t v48;
  ausdk::AUElement *v49;
  ausdk::AUElement **v50;
  uint64_t v51;
  uint64_t v52;
  ausdk::AUElement *v53;
  ausdk::AUElement **v54;
  uint64_t v55;
  uint64_t v56;
  ausdk::AUElement *v57;
  ausdk::AUElement **v58;
  uint64_t v59;
  uint64_t v60;
  ausdk::AUElement *v61;
  ausdk::AUElement **v62;
  uint64_t v63;
  uint64_t v64;
  ausdk::AUElement *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ausdk::AUElement *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  ausdk::AUElement *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  ausdk::AUElement *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  ausdk::AUElement *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  ausdk::AUElement *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  ausdk::AUElement *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  ausdk::AUElement *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  ausdk::AUElement *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  ausdk::AUElement *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  ausdk::AUElement *v121;
  uint64_t v122;
  float Parameter;
  uint64_t v124;
  uint64_t v125;
  ausdk::AUElement *v126;
  ausdk::AUElement **v127;
  uint64_t v128;
  uint64_t v129;
  ausdk::AUElement *v130;
  ausdk::AUElement **v131;
  uint64_t v132;
  uint64_t v133;
  ausdk::AUElement *v134;
  ausdk::AUElement **v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  double v140;
  double v141;
  double v142;
  const char *v143;
  double v144;
  char *v145;
  float32x2_t **v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  float32x2_t *v150;
  uint64_t v151;
  ausdk::AUElement *v152;
  ausdk::AUElement **v153;
  uint64_t v154;
  uint64_t v155;
  ausdk::AUElement *v156;
  ausdk::AUElement **v157;
  uint64_t v158;
  char *v159;
  unsigned int v160;
  float32x2_t *v161;
  unsigned int v162;
  float32x2_t **v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  BOOL v172;
  float v174;
  float v175;
  unsigned int v176;
  float32x2_t **v177;
  float32x2_t v178;
  float32x2_t *v179;
  float32x2_t *v180;
  float v181;
  unsigned int v182;
  float32x2_t **v183;
  float32x2_t *v184;
  unint64_t v185;
  float v186;
  float v187;
  unsigned int v188;
  float v189;
  clsp::CLSP_Log *v190;
  uint64_t v191;
  double v192;
  float *v193;
  double v194;
  float DisplacementFilterGain;
  const char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  ausdk::AUElement *v200;
  uint64_t v201;
  uint64_t v202;
  float v203;
  uint64_t v204;
  ausdk::AUElement *v205;
  uint64_t v206;
  float v207;
  char *v208;
  clsp::CLSP_Log *v209;
  clsp::CLSP_Log **v210;
  clsp::CLSP_Log *v211;
  float v212;
  clsp::CLSP_Log *v213;
  clsp::CLSP_Log *v214;
  clsp::CLSP_Log *v215;
  float *v216;
  float v217;
  uint64_t v218;
  ausdk::AUElement *v219;
  ausdk::AUElement **v220;
  uint64_t v221;
  ausdk::AUElement *v222;
  ausdk::AUElement **v223;
  uint64_t v224;
  ausdk::AUElement *v225;
  ausdk::AUElement **v226;
  int v227;
  float __src;

  v11 = (AUSpeakerProtectionV2 *)((char *)this + 680);
  v12 = SimpleMeters::ProcessInputBufferList((AUSpeakerProtectionV2 *)((char *)this + 680), a3, *a5);
  if (!(_DWORD)v12)
  {
    if ((*(unsigned int (**)(AUSpeakerProtectionV2 *))(*(_QWORD *)this + 576))(this))
    {
      Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
      v17 = *a7;
      mNumberBuffers = (*a7)->mNumberBuffers;
      if ((_DWORD)mNumberBuffers)
      {
        v19 = Element;
        v20 = 0;
        v21 = 16;
        do
        {
          v22 = *(const void **)((char *)&(*a5)->mNumberBuffers + v21);
          v23 = *(void **)((char *)&v17->mNumberBuffers + v21);
          if (v22 != v23)
          {
            memcpy(v23, v22, *(_DWORD *)(v19 + 104) * a3);
            v17 = *a7;
            mNumberBuffers = (*a7)->mNumberBuffers;
          }
          ++v20;
          v21 += 16;
        }
        while (v20 < mNumberBuffers);
      }
      *((_BYTE *)this + 530) = 1;
    }
    else
    {
      if (*((_BYTE *)this + 530))
      {
        (*(void (**)(AUSpeakerProtectionV2 *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
        *((_BYTE *)this + 530) = 0;
      }
      if (!*((_BYTE *)this + 528)
        || (v25 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 80), 0) + 108),
            v26 = *((_QWORD *)this + 77),
            v27 = *((_QWORD *)this + 76),
            v25 != (v26 - v27) >> 4)
        || (_DWORD)v25 != *((_DWORD *)this + 136))
      {
        AUSpeakerProtectionV2::AttenuateInputToOutput(this, a3, a5, (AudioBufferList **)a7, v15);
        SimpleMeters::ProcessOutputBufferList(v11, a3, *a7);
        return 0;
      }
      v28 = *((_DWORD *)this + 137);
      if (v28 != *((_DWORD *)this + 138))
      {
        if (v26 != v27)
        {
          v227 = *((_DWORD *)this + 137);
          v29 = 0;
          v30 = 1;
          do
          {
            v31 = *(_QWORD *)(v27 + 16 * v29);
            v32 = *((_QWORD *)this + 9);
            if (v32)
            {
              v33 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 0);
            }
            else
            {
              v34 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v34)
                v33 = 0;
              else
                v33 = *v34;
            }
            *(float *)(v31 + 128) = ausdk::AUElement::GetParameter(v33, 2u);
            v35 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v36 = *((_QWORD *)this + 9);
            if (v36)
            {
              v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
            }
            else
            {
              v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v38)
                v37 = 0;
              else
                v37 = *v38;
            }
            *(float *)(v35 + 132) = ausdk::AUElement::GetParameter(v37, 4u);
            v39 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v40 = *((_QWORD *)this + 9);
            if (v40)
            {
              v41 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, 0);
            }
            else
            {
              v42 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v42)
                v41 = 0;
              else
                v41 = *v42;
            }
            *(float *)(v39 + 84) = ausdk::AUElement::GetParameter(v41, 3u);
            v43 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v44 = *((_QWORD *)this + 9);
            if (v44)
            {
              v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
            }
            else
            {
              v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v46)
                v45 = 0;
              else
                v45 = *v46;
            }
            *(double *)(v43 + 344) = ausdk::AUElement::GetParameter(v45, 7u);
            v47 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v48 = *((_QWORD *)this + 9);
            if (v48)
            {
              v49 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 32))(v48, 0);
            }
            else
            {
              v50 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v50)
                v49 = 0;
              else
                v49 = *v50;
            }
            *(double *)(v47 + 352) = ausdk::AUElement::GetParameter(v49, 8u);
            v51 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v52 = *((_QWORD *)this + 9);
            if (v52)
            {
              v53 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0);
            }
            else
            {
              v54 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v54)
                v53 = 0;
              else
                v53 = *v54;
            }
            *(double *)(v51 + 360) = ausdk::AUElement::GetParameter(v53, 9u);
            v55 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v56 = *((_QWORD *)this + 9);
            if (v56)
            {
              v57 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 32))(v56, 0);
            }
            else
            {
              v58 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v58)
                v57 = 0;
              else
                v57 = *v58;
            }
            *(double *)(v55 + 368) = ausdk::AUElement::GetParameter(v57, 0xAu);
            v59 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v60 = *((_QWORD *)this + 9);
            if (v60)
            {
              v61 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0);
            }
            else
            {
              v62 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v62)
                v61 = 0;
              else
                v61 = *v62;
            }
            *(double *)(v59 + 376) = ausdk::AUElement::GetParameter(v61, 0xBu);
            v63 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v64 = *((_QWORD *)this + 75);
            if (v64)
            {
              v65 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, v30 - 1);
            }
            else
            {
              v66 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v66) >> 3)
                v65 = 0;
              else
                v65 = *(ausdk::AUElement **)(v66 + 8 * v29);
            }
            *(double *)(v63 + 384) = ausdk::AUElement::GetParameter(v65, 0xDu);
            v67 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v68 = *((_QWORD *)this + 75);
            if (v68)
            {
              v69 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 32))(v68, v30 - 1);
            }
            else
            {
              v70 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v70) >> 3)
                v69 = 0;
              else
                v69 = *(ausdk::AUElement **)(v70 + 8 * v29);
            }
            *(double *)(v67 + 392) = ausdk::AUElement::GetParameter(v69, 0xEu);
            v71 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v72 = *((_QWORD *)this + 75);
            if (v72)
            {
              v73 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, v30 - 1);
            }
            else
            {
              v74 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v74) >> 3)
                v73 = 0;
              else
                v73 = *(ausdk::AUElement **)(v74 + 8 * v29);
            }
            *(double *)(v71 + 400) = ausdk::AUElement::GetParameter(v73, 0xFu);
            v75 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v76 = *((_QWORD *)this + 75);
            if (v76)
            {
              v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, v30 - 1);
            }
            else
            {
              v78 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v78) >> 3)
                v77 = 0;
              else
                v77 = *(ausdk::AUElement **)(v78 + 8 * v29);
            }
            *(double *)(v75 + 408) = ausdk::AUElement::GetParameter(v77, 0x10u);
            v79 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v80 = *((_QWORD *)this + 75);
            if (v80)
            {
              v81 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, v30 - 1);
            }
            else
            {
              v82 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v82) >> 3)
                v81 = 0;
              else
                v81 = *(ausdk::AUElement **)(v82 + 8 * v29);
            }
            *(double *)(v79 + 416) = ausdk::AUElement::GetParameter(v81, 0x11u);
            v83 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v84 = *((_QWORD *)this + 75);
            if (v84)
            {
              v85 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84 + 32))(v84, v30 - 1);
            }
            else
            {
              v86 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v86) >> 3)
                v85 = 0;
              else
                v85 = *(ausdk::AUElement **)(v86 + 8 * v29);
            }
            *(double *)(v83 + 424) = ausdk::AUElement::GetParameter(v85, 0x12u);
            v87 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v88 = *((_QWORD *)this + 75);
            if (v88)
            {
              v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, v30 - 1);
            }
            else
            {
              v90 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v90) >> 3)
                v89 = 0;
              else
                v89 = *(ausdk::AUElement **)(v90 + 8 * v29);
            }
            *(double *)(v87 + 432) = ausdk::AUElement::GetParameter(v89, 0x13u);
            v91 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v92 = *((_QWORD *)this + 75);
            if (v92)
            {
              v93 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, v30 - 1);
            }
            else
            {
              v94 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v94) >> 3)
                v93 = 0;
              else
                v93 = *(ausdk::AUElement **)(v94 + 8 * v29);
            }
            *(double *)(v91 + 440) = ausdk::AUElement::GetParameter(v93, 0x14u);
            v95 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v96 = *((_QWORD *)this + 75);
            if (v96)
            {
              v97 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, v30 - 1);
            }
            else
            {
              v98 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v98) >> 3)
                v97 = 0;
              else
                v97 = *(ausdk::AUElement **)(v98 + 8 * v29);
            }
            *(double *)(v95 + 448) = ausdk::AUElement::GetParameter(v97, 0x15u);
            v99 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v100 = *((_QWORD *)this + 75);
            if (v100)
            {
              v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, v30 - 1);
            }
            else
            {
              v102 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v102) >> 3)
                v101 = 0;
              else
                v101 = *(ausdk::AUElement **)(v102 + 8 * v29);
            }
            *(double *)(v99 + 456) = ausdk::AUElement::GetParameter(v101, 0x16u);
            v103 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v104 = *((_QWORD *)this + 75);
            if (v104)
            {
              v105 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v104 + 32))(v104, v30 - 1);
            }
            else
            {
              v106 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v106) >> 3)
                v105 = 0;
              else
                v105 = *(ausdk::AUElement **)(v106 + 8 * v29);
            }
            *(double *)(v103 + 464) = ausdk::AUElement::GetParameter(v105, 0x19u);
            v107 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v108 = *((_QWORD *)this + 75);
            if (v108)
            {
              v109 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v108 + 32))(v108, v30 - 1);
            }
            else
            {
              v110 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v110) >> 3)
                v109 = 0;
              else
                v109 = *(ausdk::AUElement **)(v110 + 8 * v29);
            }
            *(double *)(v107 + 472) = ausdk::AUElement::GetParameter(v109, 0x1Au);
            v111 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v112 = *((_QWORD *)this + 75);
            if (v112)
            {
              v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, v30 - 1);
            }
            else
            {
              v114 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v114) >> 3)
                v113 = 0;
              else
                v113 = *(ausdk::AUElement **)(v114 + 8 * v29);
            }
            *(double *)(v111 + 480) = ausdk::AUElement::GetParameter(v113, 0x1Bu);
            v115 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v116 = *((_QWORD *)this + 75);
            if (v116)
            {
              v117 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, v30 - 1);
            }
            else
            {
              v118 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v118) >> 3)
                v117 = 0;
              else
                v117 = *(ausdk::AUElement **)(v118 + 8 * v29);
            }
            *(double *)(v115 + 488) = ausdk::AUElement::GetParameter(v117, 0x1Cu);
            v119 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v120 = *((_QWORD *)this + 75);
            if (v120)
            {
              v121 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 32))(v120, v30 - 1);
            }
            else
            {
              v122 = *((_QWORD *)this + 72);
              if (v29 >= (*((_QWORD *)this + 73) - v122) >> 3)
                v121 = 0;
              else
                v121 = *(ausdk::AUElement **)(v122 + 8 * v29);
            }
            Parameter = ausdk::AUElement::GetParameter(v121, 0xCu);
            if (Parameter != -1.0)
              *(float *)(v119 + 104) = Parameter;
            v124 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v125 = *((_QWORD *)this + 9);
            if (v125)
            {
              v126 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 32))(v125, 0);
            }
            else
            {
              v127 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v127)
                v126 = 0;
              else
                v126 = *v127;
            }
            *(double *)(v124 + 968) = ausdk::AUElement::GetParameter(v126, 0x1Du);
            v128 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v129 = *((_QWORD *)this + 9);
            if (v129)
            {
              v130 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v129 + 32))(v129, 0);
            }
            else
            {
              v131 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v131)
                v130 = 0;
              else
                v130 = *v131;
            }
            *(double *)(v128 + 880) = ausdk::AUElement::GetParameter(v130, 5u);
            v132 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v29);
            v133 = *((_QWORD *)this + 9);
            if (v133)
            {
              v134 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 32))(v133, 0);
            }
            else
            {
              v135 = (ausdk::AUElement **)*((_QWORD *)this + 6);
              if (*((ausdk::AUElement ***)this + 7) == v135)
                v134 = 0;
              else
                v134 = *v135;
            }
            *(float *)(v132 + 496) = ausdk::AUElement::GetParameter(v134, 0x20u);
            v29 = v30;
            v136 = *((_QWORD *)this + 77);
            v27 = *((_QWORD *)this + 76);
            ++v30;
          }
          while (v29 < (v136 - v27) >> 4);
          v28 = v227;
          if (v136 != v27)
          {
            v137 = 0;
            v138 = 1;
            do
            {
              (*(void (**)(_QWORD, double))(**(_QWORD **)(v27 + 16 * v137) + 24))(*(_QWORD *)(v27 + 16 * v137), *((double *)this + 67));
              v137 = v138;
              v27 = *((_QWORD *)this + 76);
              ++v138;
            }
            while (v137 < (*((_QWORD *)this + 77) - v27) >> 4);
          }
        }
        *((_DWORD *)this + 138) = v28;
      }
      v140 = *((double *)this + 34);
      v139 = *((_QWORD *)this + 35);
      clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
      v141 = (double)v139 * 0.0000000416666667;
      v142 = v141 - *(double *)&qword_1EF136E88;
      clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 159) & 2), "RenderTime %d, RenderTimeDelta %f, HostTime %f", v143, (int)v140, v141 - *(double *)&qword_1EF136E88, *(_QWORD *)&v141);
      v144 = v141 + (double)a3 / *((double *)this + 67);
      clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
      qword_1EF136E88 = *(_QWORD *)&v144;
      v145 = (char *)*((_QWORD *)this + 77);
      v146 = (float32x2_t **)*((_QWORD *)this + 76);
      if (v145 == (char *)v146)
      {
        v146 = (float32x2_t **)*((_QWORD *)this + 77);
      }
      else
      {
        v147 = 0;
        v148 = 1;
        do
        {
          v149 = 16 * v147;
          v150 = v146[2 * v147];
          v151 = *((_QWORD *)this + 9);
          if (v151)
          {
            v152 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v151 + 32))(v151, 0);
          }
          else
          {
            v153 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v153)
              v152 = 0;
            else
              v152 = *v153;
          }
          v150[15].i8[4] = ausdk::AUElement::GetParameter(v152, 0) != 0.0;
          v154 = *(_QWORD *)(*((_QWORD *)this + 76) + v149);
          v155 = *((_QWORD *)this + 9);
          if (v155)
          {
            v156 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 0);
          }
          else
          {
            v157 = (ausdk::AUElement **)*((_QWORD *)this + 6);
            if (*((ausdk::AUElement ***)this + 7) == v157)
              v156 = 0;
            else
              v156 = *v157;
          }
          *(_BYTE *)(v154 + 125) = ausdk::AUElement::GetParameter(v156, 1u) != 0.0;
          v158 = *(_QWORD *)(*((_QWORD *)this + 76) + v149);
          v159 = clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState(v148 - 1);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v158 + 136))(v158, v159);
          (*(void (**)(_QWORD, double))(**(_QWORD **)(*((_QWORD *)this + 76) + v149) + 128))(*(_QWORD *)(*((_QWORD *)this + 76) + v149), v142);
          v147 = v148;
          v145 = (char *)*((_QWORD *)this + 77);
          v146 = (float32x2_t **)*((_QWORD *)this + 76);
          ++v148;
        }
        while (v147 < (v145 - (char *)v146) >> 4);
      }
      if (a3)
      {
        v160 = 0;
        v161 = *v146;
        v162 = (*v146)[1].u32[0];
        __asm { FMOV            V8.2S, #1.0 }
        v167 = (float32x2_t **)v145;
        do
        {
          if (a3 - v160 >= v162)
            v168 = v162;
          else
            v168 = a3 - v160;
          if (v167 == v146)
          {
            v171 = 0;
            v167 = v146;
          }
          else
          {
            v169 = 0;
            v170 = 1;
            do
            {
              (*(void (**)(float32x2_t *, char *, char *, uint64_t))(*(_QWORD *)v146[2 * v169] + 64))(v146[2 * v169], (char *)(*a5)->mBuffers[v169].mData + 4 * v160, (char *)(*a7)->mBuffers[v169].mData + 4 * v160, v168);
              v169 = v170;
              v145 = (char *)*((_QWORD *)this + 77);
              v146 = (float32x2_t **)*((_QWORD *)this + 76);
              v171 = (v145 - (char *)v146) >> 4;
              v172 = v171 > v170++;
            }
            while (v172);
            v161 = *v146;
            v162 = (*v146)[1].u32[0];
            v167 = (float32x2_t **)*((_QWORD *)this + 77);
          }
          if (v161[1].i32[1] == v162 && v171 != 0)
          {
            v174 = 0.0;
            v175 = 1.0;
            v176 = 1;
            v177 = v146;
            v178 = _D8;
            do
            {
              v180 = *v177;
              v177 += 2;
              v179 = v180;
              v181 = v180[8].f32[1];
              if (v181 < v175)
                v175 = v181;
              v178 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v178, v179[111]), (int8x8_t)v179[111], (int8x8_t)v178);
              if (v174 < v179[17].f32[1])
                v174 = v179[17].f32[1];
              v172 = v171 > v176++;
            }
            while (v172);
            v182 = 1;
            v183 = v146;
            do
            {
              v184 = *v183;
              v183 += 2;
              v184[8].f32[1] = v175;
              v184[111] = v178;
              v184[112].f32[0] = v174;
              v172 = v171 > v182++;
            }
            while (v172);
          }
          v160 += v168;
        }
        while (v160 < a3);
      }
      if (v145 == (char *)v146)
      {
        v186 = 1.0;
        v189 = 0.0;
        v187 = 0.0;
      }
      else
      {
        v185 = 0;
        v186 = 1.0;
        v187 = 0.0;
        v188 = 1;
        v189 = 0.0;
        do
        {
          v190 = (clsp::CLSP_Log *)(*((_DWORD *)this + 159) & 2);
          v191 = 16 * v185;
          v192 = (*(float (**)(float32x2_t *))(*(_QWORD *)v146[2 * v185] + 40))(v146[2 * v185]);
          v193 = *(float **)(*((_QWORD *)this + 76) + 16 * v185);
          v194 = v193[35];
          DisplacementFilterGain = ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain((ClosedLoopSpeakerProtectionKernel *)v193);
          clsp::CLSP_Log::printToSyslog(v190, "Ch %d; T_CL=%6.2f; T_OL=%6.2f; DGain=%5.2f; TGain=%6.4f; tgtgain=%4.2f, hlimgain=%f, fbhlgain=%f",
            v196,
            v188 - 1,
            *(_QWORD *)&v192,
            *(_QWORD *)&v194,
            DisplacementFilterGain,
            v193[27],
            v193[17],
            v193[222],
            v193[223]);
          v197 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v185);
          v198 = clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState(v188 - 1);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v197 + 144))(v197, v198);
          v199 = *((_QWORD *)this + 75);
          if (v199)
          {
            v200 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v199 + 32))(v199, v188 - 1);
          }
          else
          {
            v201 = *((_QWORD *)this + 72);
            if (v185 >= (*((_QWORD *)this + 73) - v201) >> 3)
              v200 = 0;
            else
              v200 = *(ausdk::AUElement **)(v201 + 8 * v185);
          }
          v202 = *(_QWORD *)(*((_QWORD *)this + 76) + 16 * v185);
          v203 = (*(float (**)(uint64_t))(*(_QWORD *)v202 + 40))(v202);
          ausdk::AUElement::SetParameter(v200, 0x17u, v203, 0);
          v204 = *((_QWORD *)this + 75);
          if (v204)
          {
            v205 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v204 + 32))(v204, v188 - 1);
          }
          else
          {
            v206 = *((_QWORD *)this + 72);
            if (v185 >= (*((_QWORD *)this + 73) - v206) >> 3)
              v205 = 0;
            else
              v205 = *(ausdk::AUElement **)(v206 + 8 * v185);
          }
          ausdk::AUElement::SetParameter(v205, 0x18u, *(float *)(*(_QWORD *)(*((_QWORD *)this + 76) + 16 * v185) + 140), 0);
          v207 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 76) + 16 * v185) + 512);
          v208 = (char *)this + 16 * v185;
          v209 = (clsp::CLSP_Log *)*((_QWORD *)v208 + 81);
          if (v209)
          {
            v210 = (clsp::CLSP_Log **)(v208 + 648);
            __src = (float)a3;
            clsp::CLSP_Log::LogCLSPData(v209, &__src, 1);
            v211 = *v210;
            if (*v210)
            {
              clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
              v212 = *(double *)&qword_1EF136E88;
              __src = v212;
              clsp::CLSP_Log::LogCLSPData(v211, &__src, 1);
              v213 = *v210;
              if (*v210)
              {
                __src = *(float *)(*(_QWORD *)(*((_QWORD *)this + 76) + v191) + 140);
                clsp::CLSP_Log::LogCLSPData(v213, &__src, 1);
                v214 = *v210;
                if (*v210)
                {
                  __src = (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 76) + v191) + 48))(*(_QWORD *)(*((_QWORD *)this + 76) + v191));
                  clsp::CLSP_Log::LogCLSPData(v214, &__src, 1);
                  v215 = *v210;
                  if (*v210)
                  {
                    __src = *(float *)(*(_QWORD *)(*((_QWORD *)this + 76) + v191) + 108);
                    clsp::CLSP_Log::LogCLSPData(v215, &__src, 1);
                  }
                }
              }
            }
          }
          v187 = v187 + v207;
          v146 = (float32x2_t **)*((_QWORD *)this + 76);
          v216 = (float *)v146[(unint64_t)v191 / 8];
          if (v216[27] < v186)
            v186 = v216[27];
          v217 = ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain((ClosedLoopSpeakerProtectionKernel *)v216);
          if (v217 < v189)
            v189 = v217;
          v185 = v188++;
        }
        while (v185 < (uint64_t)(*((_QWORD *)this + 77) - (_QWORD)v146) >> 4);
      }
      v218 = *((_QWORD *)this + 9);
      if (v218)
      {
        v219 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v218 + 32))(v218, 0);
      }
      else
      {
        v220 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v220)
          v219 = 0;
        else
          v219 = *v220;
      }
      ausdk::AUElement::SetParameter(v219, 0x21u, v187, 0);
      v221 = *((_QWORD *)this + 9);
      if (v221)
      {
        v222 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v221 + 32))(v221, 0);
      }
      else
      {
        v223 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v223)
          v222 = 0;
        else
          v222 = *v223;
      }
      ausdk::AUElement::SetParameter(v222, 0x1Eu, v186, 0);
      v224 = *((_QWORD *)this + 9);
      if (v224)
      {
        v225 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v224 + 32))(v224, 0);
      }
      else
      {
        v226 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v226)
          v225 = 0;
        else
          v225 = *v226;
      }
      ausdk::AUElement::SetParameter(v225, 0x1Fu, v189, 0);
      v17 = *a7;
    }
    return SimpleMeters::ProcessOutputBufferList(v11, a3, v17);
  }
  v14 = v12;
  AUSpeakerProtectionV2::AttenuateInputToOutput(this, a3, a5, (AudioBufferList **)a7, v13);
  return v14;
}

uint64_t AUSpeakerProtectionV2::Render(AUSpeakerProtectionV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v8 = (AUSpeakerProtectionV2 *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v14[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUSpeakerProtectionV2 *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v14, 1, &BufferList);
  }
  return result;
}

BOOL AUSpeakerProtectionV2::BusCountWritable(AUSpeakerProtectionV2 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUSpeakerProtectionV2::SetBusCount(AUSpeakerProtectionV2 *this, int a2, int a3)
{
  int64x2_t *v3;
  uint64_t v4;

  if (a2 == 1 && a3 == 1)
  {
    v3 = (int64x2_t *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v3, 1u);
    return 0;
  }
  v4 = 4294956445;
  if (a2 == 2 && a3 == 1)
  {
    v3 = (int64x2_t *)((char *)this + 128);
    goto LABEL_7;
  }
  return v4;
}

uint64_t AUSpeakerProtectionV2::GetParameterList(AUSpeakerProtectionV2 *this, int a2, unsigned int *__dst, unsigned int *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v32;
  int v33;
  size_t __n;
  unsigned int *v35;
  _QWORD __src[19];

  __src[17] = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v35 = a4;
    v24 = 28;
    v33 = 26;
    __n = 0x190000001BLL;
    __src[0] = 0x150000000CLL;
    v25 = 24;
    v29 = 23;
    v7 = 13;
    v8 = 14;
    v9 = 18;
    v32 = 20;
    v11 = 19;
    v28 = 22;
    v13 = 17;
    v14 = 16;
    v27 = 15;
    v16 = 64;
    v17 = 60;
    v18 = 56;
    v19 = 52;
    v20 = 48;
    v21 = 44;
    v22 = 40;
    v6 = 36;
    v23 = 32;
    v12 = 12;
    v15 = 8;
    v26 = 16;
    v10 = 20;
    v5 = 24;
    v4 = 28;
    v30 = 17;
  }
  else
  {
    if (a2)
    {
      v30 = 0;
      goto LABEL_9;
    }
    v35 = a4;
    LODWORD(__src[0]) = 2;
    v32 = 16;
    v4 = 31;
    __n = 30;
    v33 = 1;
    v5 = 33;
    v6 = 32;
    v7 = 29;
    v8 = 5;
    v9 = 11;
    v10 = 10;
    v11 = 9;
    v12 = 8;
    v13 = 7;
    v14 = 3;
    v15 = 4;
    v16 = 60;
    v17 = 56;
    v18 = 52;
    v19 = 48;
    v20 = 44;
    v21 = 40;
    v22 = 36;
    v23 = 28;
    v24 = 24;
    v25 = 20;
    v26 = 12;
    v27 = 4;
    v28 = 8;
    v29 = 32;
    v30 = 16;
  }
  *(_DWORD *)((char *)__src + v15) = v27;
  *(_DWORD *)((char *)__src + v12) = v14;
  *(_DWORD *)((char *)__src + v26) = v13;
  *(_DWORD *)((char *)__src + v32) = v28;
  *(_DWORD *)((char *)__src + v25) = v11;
  *(_DWORD *)((char *)__src + v24) = v10;
  *(_DWORD *)((char *)__src + v23) = v9;
  *(_DWORD *)((char *)__src + v6) = v8;
  *(_DWORD *)((char *)__src + v22) = v7;
  *(_DWORD *)((char *)__src + v21) = v29;
  *(_DWORD *)((char *)__src + v20) = v5;
  *(_DWORD *)((char *)__src + v19) = HIDWORD(__n);
  *(_DWORD *)((char *)__src + v18) = v33;
  *(_DWORD *)((char *)__src + v17) = __n;
  *(_DWORD *)((char *)__src + v16) = v4;
  if (__dst)
    memcpy(__dst, __src, 4 * v30);
  a4 = v35;
LABEL_9:
  *a4 = v30;
  return 0;
}

uint64_t AUSpeakerProtectionV2::GetParameterInfo(AUSpeakerProtectionV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t v5;
  int v11;
  AudioUnitParameterValue v12;
  AudioUnitParameterUnit v13;
  const __CFString *v14;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    v13 = kAudioUnitParameterUnit_Generic;
    _D8 = 0x4248000043020000;
    v12 = 10.0;
    v14 = CFSTR("temperature");
    v11 = 1073782784;
    switch(a3)
    {
      case 12:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4100000041200000;
        v11 = -1073741824;
        v12 = 0.0;
        v14 = CFSTR("Reb20C");
        goto LABEL_43;
      case 13:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3DCCCCCD40000000;
        v11 = -1073741824;
        v12 = 0.0;
        v14 = CFSTR("Rshunt");
        goto LABEL_43;
      case 14:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3ECCCCCD3FC00000;
        v11 = -1073741824;
        v12 = 0.0;
        v14 = CFSTR("Rampout");
        goto LABEL_43;
      case 15:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x387776C53A83126FLL;
        v11 = -1073741824;
        v12 = 0.0;
        v14 = CFSTR("mt");
        goto LABEL_43;
      case 16:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3EA18BB541200000;
        v11 = -1073741824;
        v14 = CFSTR("ct");
        v12 = 0.001;
        goto LABEL_43;
      case 17:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x44EA858645DAC000;
        v11 = -1073741824;
        v14 = CFSTR("kt");
        v12 = 100.0;
        goto LABEL_43;
      case 18:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4100000041700000;
        v11 = -1073741824;
        v12 = 5.0;
        v14 = CFSTR("ag");
        goto LABEL_43;
      case 19:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3F80000040000000;
        v11 = -1073741824;
        v12 = 0.25;
        v14 = CFSTR("g_bw");
        goto LABEL_43;
      case 20:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3F80000040400000;
        v11 = -1073741824;
        v12 = 0.5;
        v14 = CFSTR("Q_d");
        goto LABEL_43;
      case 21:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3F8B851F41200000;
        v11 = -1073741824;
        v14 = CFSTR("phi");
        goto LABEL_42;
      case 22:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3E99999A3F800000;
        v11 = -1073741824;
        v14 = CFSTR("x_lim");
LABEL_36:
        v12 = 0.000001;
        goto LABEL_43;
      case 23:
        goto LABEL_43;
      case 24:
        v13 = kAudioUnitParameterUnit_Generic;
        v14 = CFSTR("OL temperature");
        goto LABEL_43;
      case 25:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x42C8000043480000;
        v11 = -1073741824;
        v12 = 0.0;
        v14 = CFSTR("T_sett_vc");
        goto LABEL_43;
      case 26:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x41A0000043480000;
        v11 = -1073741824;
        v12 = 0.0;
        v14 = CFSTR("T_sett_mg");
        goto LABEL_43;
      case 27:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4040000042C80000;
        v11 = -1073741824;
        v14 = CFSTR("Tc_vc");
        goto LABEL_42;
      case 28:
        v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4334000043FA0000;
        v11 = -1073741824;
        v14 = CFSTR("Tc_mg");
LABEL_42:
        v12 = 0.1;
LABEL_43:
        buffer->cfNameString = v14;
        buffer->flags = 0x8000000;
        CFStringGetCString(v14, buffer->name, 52, 0x8000100u);
        v5 = 0;
        buffer->unit = v13;
        buffer->minValue = v12;
        *(_QWORD *)&buffer->maxValue = _D8;
        buffer->flags += v11;
        break;
      default:
        return 4294956418;
    }
  }
  else
  {
    if (!a2)
    {
      v5 = 4294956418;
      __asm { FMOV            V8.2S, #1.0 }
      v11 = -1073741824;
      v12 = 0.0;
      v13 = kAudioUnitParameterUnit_Boolean;
      v14 = CFSTR("thermal protection enabled");
      switch(a3)
      {
        case 0:
          goto LABEL_43;
        case 1:
          v14 = CFSTR("displacement protection enabled");
          goto LABEL_43;
        case 2:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x42C8000043160000;
          v14 = CFSTR("temperature limit");
          goto LABEL_43;
        case 3:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x4248000042C80000;
          v14 = CFSTR("ambient temperature");
          goto LABEL_43;
        case 4:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x4120000041A00000;
          v14 = CFSTR("hard temp limit headroom");
          goto LABEL_43;
        case 5:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3E8000003F800000;
          v14 = CFSTR("ThermalFFSpeedupFactor");
          goto LABEL_43;
        case 6:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3D23D70A41200000;
          v14 = CFSTR("Thermal kI");
          goto LABEL_43;
        case 7:
          _D8 = 0x3C23D70A44960000;
          v13 = kAudioUnitParameterUnit_Seconds;
          v14 = CFSTR("thermal gain attack time");
          goto LABEL_17;
        case 8:
          _D8 = 0x3F80000044960000;
          v13 = kAudioUnitParameterUnit_Seconds;
          v14 = CFSTR("thermal gain release time");
          goto LABEL_17;
        case 9:
          _D8 = 0x38D1B7173F000000;
          v13 = kAudioUnitParameterUnit_Seconds;
          v14 = CFSTR("peak attack time");
          goto LABEL_19;
        case 10:
          _D8 = 0x3F00000043B40000;
          v13 = kAudioUnitParameterUnit_Seconds;
          v14 = CFSTR("peak decay time");
LABEL_17:
          v11 = -1069547520;
          v12 = 0.0001;
          goto LABEL_43;
        case 11:
          _D8 = 0x3727C5AC43B40000;
          v13 = kAudioUnitParameterUnit_Seconds;
          v14 = CFSTR("feedback integration time");
LABEL_19:
          v11 = -1069547520;
          goto LABEL_36;
        case 29:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3F80000040000000;
          v14 = CFSTR("LookaheadDelay_ms");
          goto LABEL_43;
        case 30:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3F8000003FAAAAABLL;
          v14 = CFSTR("thermal gain");
          goto LABEL_23;
        case 31:
          _D8 = 0xC140000040800000;
          v12 = -12.0;
          v13 = kAudioUnitParameterUnit_Decibels;
          v14 = CFSTR("displacement gain");
LABEL_23:
          v11 = 1073782784;
          goto LABEL_43;
        case 32:
          _D8 = 0x40A0000041F00000;
          v13 = kAudioUnitParameterUnit_Seconds;
          v14 = CFSTR("spk pwr averaging window time");
          goto LABEL_42;
        case 33:
          v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 1101004800;
          v11 = 1077977088;
          v14 = CFSTR("modeled speaker power");
          goto LABEL_43;
        default:
          return v5;
      }
    }
    return 4294956418;
  }
  return v5;
}

UInt8 *AUSpeakerProtectionV2::SaveExtendedScopes(AUSpeakerProtectionV2 *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUSpeakerProtectionV2::RestoreState(AUSpeakerProtectionV2 *this, const void *a2)
{
  uint64_t result;

  if (!*((_BYTE *)this + 640))
    return 0;
  result = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  ++*((_DWORD *)this + 137);
  return result;
}

double AUSpeakerProtectionV2::GetLatency(AUSpeakerProtectionV2 *this)
{
  return 0.0;
}

double AUSpeakerProtectionV2::GetTailTime(AUSpeakerProtectionV2 *this)
{
  return 0.0;
}

uint64_t AUSpeakerProtectionV2::SupportsTail(AUSpeakerProtectionV2 *this)
{
  return 1;
}

BOOL AUSpeakerProtectionV2::StreamFormatWritable(AUSpeakerProtectionV2 *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpeakerProtectionV2::SupportedNumChannels(AUSpeakerProtectionV2 *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSpeakerProtectionV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 2;
}

BOOL AUSpeakerProtectionV2::ValidFormat(AUSpeakerProtectionV2 *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;

  if ((_DWORD)a2 == 2 || (result = 1, (_DWORD)a2 == 1) && !a3)
  {
    result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
    if ((_DWORD)result)
      return a4->mChannelsPerFrame - 1 < 2;
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::GetScopeExtended(AUSpeakerProtectionV2 *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 560;
  else
    return 0;
}

uint64_t AUSpeakerProtectionV2::ShouldBypassEffect(AUSpeakerProtectionV2 *this)
{
  return *((unsigned __int8 *)this + 529);
}

uint64_t AUSpeakerProtectionV2::SetBypassEffect(uint64_t this, char a2)
{
  *(_BYTE *)(this + 529) = a2;
  return this;
}

void AUSpeakerProtectionV2::AttenuateInputToOutput(AUSpeakerProtectionV2 *this, int a2, const AudioBufferList **a3, AudioBufferList **a4, float a5)
{
  uint64_t Element;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  int v14;
  float __B;

  __B = 0.1;
  Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
  v9 = (uint64_t)*a4;
  if ((*a4)->mNumberBuffers)
  {
    v10 = Element;
    v11 = 0;
    v12 = 16;
    do
    {
      v13 = *(float **)(v9 + v12);
      if ((*(_DWORD *)(v10 + 92) & 0x20) != 0)
        v14 = 1;
      else
        v14 = *(_DWORD *)(v10 + 108);
      vDSP_vsmul(*(const float **)((char *)&(*a3)->mNumberBuffers + v12), 1, &__B, v13, 1, (v14 * a2));
      ++v11;
      v9 = (uint64_t)*a4;
      v12 += 16;
    }
    while (v11 < (*a4)->mNumberBuffers);
  }
}

char *clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState(unsigned int a1)
{
  char *result;
  unsigned __int8 v3;
  int v4;

  clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
  if (0xAAAAAAAAAAAAAAABLL
     * ((qword_1EF136E70 - clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst) >> 3) <= a1)
  {
    result = &clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState;
    if ((v3 & 1) == 0)
    {
      result = &clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState;
      if (v4)
      {
        clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState = 0;
        unk_1EF136EA4 = 0;
        unk_1EF136E9C = 0;
        dword_1EF136EAC = 0;
        result = &clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState;
      }
    }
    clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState = 0;
  }
  else
  {
    clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
    if (0xAAAAAAAAAAAAAAABLL
       * ((qword_1EF136E70 - clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst) >> 3) <= a1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    return (char *)(clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst + 24 * a1);
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::SetParamFromPair(uint64_t a1, ausdk::AUElement *a2, __CFString *a3, unsigned int a4, CACFDictionary *this)
{
  uint64_t v8;
  float v10;

  v10 = 0.0;
  v8 = CACFDictionary::GetFloat32((uint64_t)this, a3, &v10) ^ 1;
  ausdk::AUElement::SetParameter(a2, a4, v10, 0);
  ++*(_DWORD *)(a1 + 548);
  return v8;
}

uint64_t VoiceProcessorV9::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  VoiceProcessorV9 *v3;
  size_t v4;
  int v5;
  const AudioBufferList *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const AudioBufferList *v10;
  const AudioBufferList *v11;
  unsigned int v12;
  unsigned int *v13;
  void *v14;
  const void **v15;
  _QWORD *v16;
  NSObject *v17;
  int v18;
  int *v19;
  OpaqueAudioComponentInstance *v20;
  UInt64 v21;
  UInt64 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t Parameter;
  uint64_t v29;
  AudioBufferList *v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  AudioBufferList *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  AudioBufferList *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  UInt64 v69;
  __int128 v70;
  __int128 v71;
  AudioUnitParameterValue v72;
  const float *v73;
  UInt64 v74;
  const float *v75;
  UInt64 v76;
  const float *v77;
  UInt64 v78;
  const float *v79;
  UInt64 v80;
  __int128 v81;
  __int128 v82;
  AudioUnit v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const float *v94;
  uint64_t v95;
  uint64_t v96;
  AudioUnitParameterID **v97;
  uint64_t v98;
  const AudioBufferList *v99;
  unsigned int v100;
  NSObject *v101;
  NSObject *v102;
  int v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const AudioBufferList *v108;
  uint64_t v109;
  uint64_t v110;
  const AudioBufferList *v111;
  uint64_t v112;
  uint64_t v113;
  const AudioBufferList *v114;
  void *v115;
  int v116;
  const float *v117;
  const float *v118;
  const float *v119;
  float *v120;
  float *v121;
  const float *v122;
  float *v123;
  const float *v124;
  float *v125;
  __int128 v126;
  __int128 v127;
  UInt64 v128;
  void *v129;
  size_t v130;
  float *v131;
  uint64_t v132;
  VPTimeFreqConverter *v133;
  UInt64 v134;
  uint64_t Property;
  const float *v136;
  UInt64 v137;
  VPTimeFreqConverter *v138;
  const float *v139;
  uint64_t v140;
  const float *v141;
  VPTimeFreqConverter *v142;
  const float *v143;
  uint64_t v144;
  const float *v145;
  uint64_t v146;
  uint64_t v147;
  VPTimeFreqConverter *v148;
  const float *v149;
  uint64_t v150;
  const float *v151;
  VPTimeFreqConverter *v152;
  const float *v153;
  uint64_t v154;
  const float *v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  AudioUnit v159;
  const float *v160;
  uint64_t v161;
  uint64_t v162;
  float *v163;
  float *v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  float v168;
  VPTimeFreqConverter *v169;
  const float *v170;
  UInt64 v171;
  UInt64 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  const AudioBufferList *v176;
  int v177;
  int v178;
  uint64_t v179;
  _BOOL4 v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  OpaqueAudioComponentInstance *v184;
  float v185;
  uint64_t v186;
  uint64_t v187;
  Float64 v188;
  Float64 v189;
  UInt64 v190;
  __int128 v191;
  __int128 v192;
  AudioUnitParameterValue v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  float *v197;
  AudioTimeStamp *p_inInputBufferLists;
  uint64_t v199;
  unsigned int v200;
  float *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  float *imagp;
  uint64_t v206;
  AudioBufferList *v207;
  float *v208;
  AudioUnitParameterValue v209;
  OpaqueAudioComponentInstance *v210;
  __int128 v211;
  __int128 v212;
  const AudioBufferList *v213;
  uint64_t v214;
  BOOL *v215;
  __int128 v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  float *v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  AudioUnitParameterValue *v234;
  uint64_t v235;
  uint64_t v236;
  OpaqueAudioComponentInstance *v237;
  __int128 v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  Float64 v242;
  uint64_t v243;
  uint64_t v244;
  OpaqueAudioComponentInstance *v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  const AudioBufferList *v249;
  OpaqueAudioComponentInstance *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  Float64 v262;
  UInt64 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  const AudioBufferList *v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  int v275;
  uint64_t v276;
  OpaqueAudioComponentInstance *v277;
  __int128 v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  OpaqueAudioComponentInstance *v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  AudioUnit v292;
  _BOOL4 v293;
  uint64_t v294;
  _BOOL4 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  void *v301;
  UInt64 v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  OpaqueAudioComponentInstance *v306;
  AudioUnitParameterID v307;
  int v308;
  AudioUnit v309;
  UInt64 v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  void *v318;
  unsigned int v319;
  int v320;
  char *v321;
  uint64_t *v322;
  uint64_t v323;
  VPTimeFreqConverter *v324;
  const float *v325;
  Float64 v326;
  uint64_t v327;
  VPTimeFreqConverter *v328;
  const float *v329;
  __int128 v330;
  __int128 v331;
  OSStatus v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  unsigned int v336;
  void *v337;
  _DWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t *v343;
  uint64_t *v344;
  uint64_t v345;
  _OWORD *v346;
  UInt64 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  OpaqueAudioComponentInstance *v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  const AudioBufferList *v358;
  char *v359;
  void *v360;
  uint64_t v361;
  __int128 v362;
  int v363;
  __int128 v364;
  __int128 v365;
  vDSP_Length v366;
  float *v367;
  float *v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  __int128 v372;
  AudioUnit v373;
  uint64_t v374;
  float v375;
  float v376;
  _BOOL4 v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  AudioUnit v383;
  UInt64 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  const AudioBufferList *v388;
  OpaqueAudioComponentInstance *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  AudioUnit v395;
  UInt64 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  const AudioBufferList *v400;
  BOOL v401;
  float *v402;
  uint64_t v403;
  char v404;
  BOOL v405;
  BOOL v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  const float *v411;
  char v412;
  float *v413;
  OpaqueAudioComponentInstance *v414;
  AudioUnitParameterValue *v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  float v420;
  BOOL v421;
  uint64_t v422;
  char *v423;
  OpaqueAudioComponentInstance *v424;
  AudioUnit *v425;
  void *v426;
  uint64_t v427;
  OpaqueAudioComponentInstance *v428;
  AudioUnitParameterID v429;
  AudioUnitParameterValue v430;
  UInt64 v431;
  UInt64 v432;
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  UInt64 v436;
  UInt64 v437;
  uint64_t v438;
  uint64_t v439;
  __int128 v440;
  __int128 v441;
  unsigned int v442;
  AudioUnitParameterValue v443;
  unsigned int v444;
  char v445;
  uint64_t v446;
  OpaqueAudioComponentInstance *v447;
  AudioUnitParameterID v448;
  OpaqueAudioComponentInstance *v449;
  unsigned int v450;
  OpaqueAudioComponentInstance *v451;
  __int128 v452;
  __int128 v453;
  OpaqueAudioComponentInstance *v454;
  __int128 v455;
  __int128 v456;
  OpaqueAudioComponentInstance *v457;
  __int128 v458;
  __int128 v459;
  uint64_t v460;
  OpaqueAudioComponentInstance *v461;
  __int128 v462;
  __int128 v463;
  OpaqueAudioComponentInstance *v464;
  __int128 v465;
  __int128 v466;
  int mSampleTime_low;
  OpaqueAudioComponentInstance *v468;
  OpaqueAudioComponentInstance *v469;
  __int128 v470;
  __int128 v471;
  unsigned __int8 v472;
  uint64_t v474;
  uint64_t v475;
  AudioUnitParameterValue *v476;
  AudioUnitParameterValue *v477;
  AudioUnitParameterValue *v478;
  AudioUnitParameterValue *v479;
  AudioUnitParameterValue *v480;
  int v481;
  _BOOL4 v482;
  int v483;
  const float *v484;
  AudioBufferList *v485;
  uint64_t *v486;
  char *v487;
  UInt64 v488;
  AudioUnitParameterValue v489;
  uint64_t v490;
  char v491;
  AudioUnitParameterValue v492;
  BOOL v493;
  BOOL v494;
  BOOL v495;
  BOOL v496;
  __int16 v497;
  AudioUnitRenderActionFlags v498;
  AudioUnitParameterValue v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  int v505;
  const AudioBufferList *v506;
  int v507;
  AudioTimeStamp v508;
  AudioBufferList v509;
  AudioBufferList *v510;
  uint64_t v511;
  DSPSplitComplex v512;
  DSPSplitComplex v513;
  AudioTimeStamp inInputBufferLists;
  AudioTimeStamp buf;
  uint64_t v516;

  v3 = (VoiceProcessorV9 *)this;
  v516 = *MEMORY[0x1E0C80C00];
  v4 = **(unsigned int **)(this + 1080);
  if ((_DWORD)v4)
    bzero(*(void **)(this + 1408), v4);
  if (*((_BYTE *)v3 + 1404))
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  if (!*((_BYTE *)v3 + 2083))
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  v5 = *((unsigned __int8 *)v3 + 15897);
  if (*((_BYTE *)v3 + 15897)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        v5 = *((unsigned __int8 *)v3 + 15897),
        *((_BYTE *)v3 + 15897))
    && *((_BYTE *)v3 + 15896)
    || *((_BYTE *)v3 + 15899))
  {
    v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
    if (v6->mNumberBuffers)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        bzero(v6->mBuffers[v7].mData, v6->mBuffers[v7].mDataByteSize);
        ++v8;
        v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
        ++v7;
      }
      while (v8 < v6->mNumberBuffers);
      v5 = *((unsigned __int8 *)v3 + 15897);
    }
  }
  else
  {
    v6 = (const AudioBufferList *)*((_QWORD *)v3 + 134);
  }
  v9 = *((unsigned int *)v3 + 127);
  if (v5 || *((_BYTE *)v3 + 15898))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v9, v6, a2);
    v9 = *((unsigned int *)v3 + 127);
    v10 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
    if (*((_BYTE *)v3 + 15897))
      goto LABEL_23;
  }
  else
  {
    v10 = (const AudioBufferList *)*((_QWORD *)v3 + 135);
  }
  if (!*((_BYTE *)v3 + 15898))
  {
    v11 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
    goto LABEL_26;
  }
LABEL_23:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v9, v10, a2);
  v9 = *((unsigned int *)v3 + 127);
  v11 = (const AudioBufferList *)*((_QWORD *)v3 + 177);
  if (*((_BYTE *)v3 + 15897))
  {
LABEL_27:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v9, v11, a2);
    goto LABEL_28;
  }
LABEL_26:
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_27;
LABEL_28:
  v499 = 0.0;
  if (*((_BYTE *)v3 + 2083)
    || *((_BYTE *)v3 + 2085)
    || *((_BYTE *)v3 + 472)
    || (v25 = *((_QWORD *)v3 + 582)) == 0 && (*((_BYTE *)v3 + 4664) & 0x7F) == 0)
  {
    v12 = 0;
    while (((*((_DWORD *)v3 + 116) >> v12) & 1) == 0)
    {
      if (++v12 == 32)
      {
        v12 = 33;
        break;
      }
    }
    v13 = (unsigned int *)*((_QWORD *)v3 + 135);
    if (v12 >= *v13)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v16 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = **((_DWORD **)v3 + 135);
          LODWORD(buf.mSampleTime) = 136315906;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v9.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 52;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v12;
          LOWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v18;
          _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
        }
      }
      v19 = (int *)*((_QWORD *)v3 + 1570);
      if (v19 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v19, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessUplink_v9.cpp", 52, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v12, **((_DWORD **)v3 + 135));
      }
      v14 = *(void **)(*((_QWORD *)v3 + 136) + 16);
      v15 = (const void **)*((_QWORD *)v3 + 135);
    }
    else
    {
      v14 = *(void **)(*((_QWORD *)v3 + 136) + 16);
      v15 = (const void **)&v13[4 * v12];
    }
    memcpy(v14, v15[2], *((unsigned int *)v15 + 3));
    if (*((_BYTE *)v3 + 2085))
    {
      if ((*((_BYTE *)v3 + 4662) & 0x20) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0)
      {
        v20 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
        if (v20)
        {
          v21 = *((_QWORD *)v3 + 499);
          inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
          inInputBufferLists.mHostTime = v21;
          v22 = *((_QWORD *)v3 + 501);
          v508.mSampleTime = inInputBufferLists.mSampleTime;
          v508.mHostTime = v22;
          v23 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v23;
          v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v24;
          v509.mNumberBuffers = 512;
          AudioUnitProcessMultiple(v20, &v509.mNumberBuffers, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 2u, (AudioBufferList **)&v508);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
          if ((*((_BYTE *)v3 + 4664) & 2) != 0 && (*((_BYTE *)v3 + 4680) & 2) != 0 && *((_QWORD *)v3 + 412))
          {
            AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v499);
            AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v499, 0);
          }
        }
      }
    }
    goto LABEL_900;
  }
  v498 = 0;
  *((_QWORD *)v3 + 2126) = 0;
  *((_QWORD *)v3 + 2127) = 0;
  *((_QWORD *)v3 + 2125) = 0;
  v488 = (UInt64)v3 + 17000;
  *((_DWORD *)v3 + 4250) = 1;
  *((_OWORD *)v3 + 1063) = *(_OWORD *)(*((_QWORD *)v3 + 134) + 8);
  if ((v25 & 1) != 0 && (*((_BYTE *)v3 + 4672) & 1) != 0)
  {
    this = *((_QWORD *)v3 + 347);
    if (this)
    {
      v26 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v26;
      v27 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v27;
      v498 = 512;
      this = AudioUnitProcess((AudioUnit)this, &v498, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
    }
  }
  MEMORY[0x1E0C80A78](this);
  v30 = (AudioBufferList *)((char *)&v475 - ((v29 + 15) & 0x3FFFFFFFF0));
  v31 = (_DWORD *)*((_QWORD *)v3 + 135);
  if (*v31)
  {
    v32 = 0;
    v33 = 2;
    v34 = v30;
    do
    {
      *(_QWORD *)&v34->mNumberBuffers = 0;
      *(_QWORD *)&v34->mBuffers[0].mNumberChannels = 0;
      v34->mBuffers[0].mData = 0;
      v34->mNumberBuffers = 1;
      v34->mBuffers[0] = *(AudioBuffer *)&v31[v33];
      ++v32;
      v33 += 4;
      ++v34;
    }
    while (v32 < *v31);
  }
  v35 = *((_QWORD *)v3 + 582);
  if ((v35 & 2) != 0 && (*((_BYTE *)v3 + 4672) & 2) != 0)
  {
    Parameter = *((_QWORD *)v3 + 348);
    if (Parameter)
    {
      v36 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v36;
      v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v37;
      v498 = 512;
      AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), v30);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v30, &buf);
      Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v30);
      v35 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v35 & 4) != 0 && (*((_BYTE *)v3 + 4672) & 4) != 0)
  {
    Parameter = *((_QWORD *)v3 + 349);
    if (Parameter)
    {
      v38 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v38;
      v39 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v39;
      v498 = 512;
      AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), v30 + 1);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v30 + 1, &buf);
      Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v30 + 1);
      v35 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v35 & 8) != 0 && (*((_BYTE *)v3 + 4672) & 8) != 0)
  {
    Parameter = *((_QWORD *)v3 + 350);
    if (Parameter)
    {
      v40 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v40;
      v41 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v41;
      v498 = 512;
      AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), v30 + 2);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v30 + 2, &buf);
      Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v30 + 2);
      v35 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v35 & 0x10) != 0 && (*((_BYTE *)v3 + 4672) & 0x10) != 0)
  {
    Parameter = *((_QWORD *)v3 + 351);
    if (Parameter)
    {
      v42 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v42;
      v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v43;
      v498 = 512;
      v44 = v30 + 3;
      AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), v44);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v44, &buf);
      Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v44);
    }
  }
  v45 = *((_QWORD *)v3 + 135);
  v46 = *(_DWORD *)v45;
  v486 = &v475;
  if (v46 >= 3)
  {
    v47 = *((_DWORD *)v3 + 3098);
    if (v46 != 3)
    {
      if (v47 == 2)
      {
        v48 = 0;
        *((_OWORD *)v3 + 1054) = *(_OWORD *)(v45 + 40);
        *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v45 + 56);
        v49 = 1;
        v50 = 3;
LABEL_115:
        v51 = 2;
LABEL_119:
        v52 = v45 + 8;
        *((_OWORD *)v3 + 1051) = *(_OWORD *)(v52 + 16 * v48);
        *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v52 + 16 * v49);
        goto LABEL_120;
      }
      v47 = *((_DWORD *)v3 + 3098);
      if (v47 <= 0xC && ((0x1028u >> v47) & 1) != 0)
      {
        v48 = 0;
        *((_OWORD *)v3 + 1054) = *(_OWORD *)(v45 + 24);
        *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v45 + 40);
        v49 = 3;
        v50 = 2;
        v51 = 1;
        goto LABEL_119;
      }
    }
    if (v47 != 14)
    {
      if (v47 == 9)
      {
        v48 = 0;
        *((_OWORD *)v3 + 1054) = *(_OWORD *)(v45 + 56);
        *(_OWORD *)((char *)v3 + 16888) = *(_OWORD *)(v45 + 40);
        v49 = 1;
        v50 = 2;
        v51 = 3;
      }
      else
      {
        v51 = 0;
        v50 = 0;
        v48 = 1;
        v49 = 2;
      }
      goto LABEL_119;
    }
    v50 = 0;
    v48 = 0;
    *((_OWORD *)v3 + 1054) = *(_OWORD *)(v45 + 40);
    v49 = 1;
    goto LABEL_115;
  }
  *((_OWORD *)v3 + 1051) = *(_OWORD *)(v45 + 8);
  if (*(_DWORD *)v45 < 2u)
  {
    v51 = 0;
    v50 = 0;
    v49 = 0;
    v48 = 0;
  }
  else
  {
    v51 = 0;
    v50 = 0;
    if (*(_BYTE *)(v488 + 64))
    {
      v49 = 0;
      *((_OWORD *)v3 + 1051) = *(_OWORD *)(v45 + 24);
      *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v45 + 8);
      v48 = 1;
    }
    else
    {
      v48 = 0;
      *(_OWORD *)((char *)v3 + 16840) = *(_OWORD *)(v45 + 24);
      v49 = 1;
    }
  }
LABEL_120:
  v53 = *((_QWORD *)v3 + 582);
  if ((v53 & 0x40) != 0 && (*((_BYTE *)v3 + 4672) & 0x40) != 0)
  {
    Parameter = *((_QWORD *)v3 + 353);
    if (Parameter)
    {
      v54 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v54;
      v55 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v55;
      v498 = 512;
      Parameter = AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16808));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
      v53 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v53 & 0x80) != 0 && (*((_BYTE *)v3 + 4672) & 0x80) != 0)
  {
    Parameter = *((_QWORD *)v3 + 354);
    if (Parameter)
    {
      v56 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v56;
      v57 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v57;
      v498 = 512;
      Parameter = AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16832));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16832), &buf);
      v53 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v53 & 0x100) != 0)
  {
    v58 = *((_QWORD *)v3 + 584);
    if ((v58 & 0x100) != 0)
    {
      Parameter = *((_QWORD *)v3 + 355);
      if (Parameter)
      {
        if ((v59 = v53 & v58, (v59 & 0x800000000000) != 0) && *((_QWORD *)v3 + 394)
          || (v59 & 0x800000000) != 0 && *((_QWORD *)v3 + 382)
          || (v59 & 0x8000000) != 0 && *((_QWORD *)v3 + 374))
        {
          v60 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v60;
          v61 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v61;
          v498 = 512;
          Parameter = AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16856));
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 8u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16856), &buf);
          v53 = *((_QWORD *)v3 + 582);
        }
      }
    }
  }
  if ((v53 & 0x200) != 0 && (*((_BYTE *)v3 + 4673) & 2) != 0)
  {
    Parameter = *((_QWORD *)v3 + 356);
    if (Parameter)
    {
      v62 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v62;
      v63 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v63;
      v498 = 512;
      Parameter = AudioUnitProcess((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)((char *)v3 + 16880));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16880), &buf);
      v53 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v53 & 0x8000000) != 0 && (*((_BYTE *)v3 + 4675) & 8) != 0)
  {
    Parameter = *((_QWORD *)v3 + 374);
    if (Parameter)
    {
      if (**((_BYTE **)v3 + 176))
        v64 = 1.0;
      else
        v64 = 0.0;
      AudioUnitSetParameter((AudioUnit)Parameter, 0x66616331u, 0, 0, v64, 0);
      if (*(_BYTE *)(*((_QWORD *)v3 + 176) + 1))
        v65 = 1.0;
      else
        v65 = 0.0;
      AudioUnitSetParameter(*((AudioUnit *)v3 + 374), 0x66616332u, 0, 0, v65, 0);
      if (*(_BYTE *)(*((_QWORD *)v3 + 176) + 2))
        v66 = 1.0;
      else
        v66 = 0.0;
      AudioUnitSetParameter(*((AudioUnit *)v3 + 374), 0x66616333u, 0, 0, v66, 0);
      v67 = 0;
      qmemcpy(&buf, "1dmr2dmr3dmr", 12);
      do
      {
        AudioUnitSetParameter(*((AudioUnit *)v3 + 374), *(_DWORD *)((char *)&buf.mSampleTime + v67), 0, 0, *((AudioUnitParameterValue *)v3 + 1092), 0);
        v67 += 4;
      }
      while (v67 != 12);
      v509.mNumberBuffers = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 1u, 0, 0, (AudioUnitParameterValue *)&v509.mNumberBuffers);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 374), 0x67746479u, 0, 0, *(AudioUnitParameterValue *)&v509.mNumberBuffers, 0);
      LODWORD(v513.realp) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v513);
      if (*((float *)v3 + 572) != *(float *)&v513.realp)
      {
        AudioUnitSetParameter(*((AudioUnit *)v3 + 374), 0x67747067u, 0, 0, *(AudioUnitParameterValue *)&v513.realp, 0);
        *((_DWORD *)v3 + 572) = v513.realp;
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 374), 0x67746467u, 0, 0, *((AudioUnitParameterValue *)v3 + 3117), 0);
      v68 = AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x6774706Du, 0, 0, (float)*((int *)v3 + 576), 0);
      MEMORY[0x1E0C80A78](v68);
      *(&v475 - 8) = 3;
      *(_OWORD *)(&v475 - 7) = *((_OWORD *)v3 + 1051);
      *(_OWORD *)(&v475 - 5) = *(_OWORD *)((char *)v3 + 16840);
      *(_OWORD *)(&v475 - 3) = *((_OWORD *)v3 + 1054);
      v69 = *((_QWORD *)v3 + 134);
      *(_QWORD *)&inInputBufferLists.mSampleTime = &v475 - 8;
      inInputBufferLists.mHostTime = v69;
      v508.mSampleTime = *((Float64 *)v3 + 136);
      v70 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v70;
      v71 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v71;
      LODWORD(v512.realp) = 512;
      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 374), (AudioUnitRenderActionFlags *)&v512, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v508);
      AudioUnitGetProperty(*((AudioUnit *)v3 + 374), 0x6E657374u, 0, 0, *(void **)(*((_QWORD *)v3 + 2171) + 16), (UInt32 *)(*((_QWORD *)v3 + 2171) + 12));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x20u, (*((_DWORD *)v3 + 127) + 1), *((const AudioBufferList **)v3 + 2171), &buf);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 374), 0x776E6466u, 0, 0, (AudioUnitParameterValue *)v3 + 4352);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 374), 0x67747370u, 0, 0, &v499);
      v72 = v499;
      *(AudioUnitParameterValue *)(v488 + 412) = v499;
      AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v72, 0);
      Parameter = AudioUnitGetParameter(*((AudioUnit *)v3 + 374), 0x67746774u, 0, 0, (AudioUnitParameterValue *)v3 + 3118);
      v53 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v53 & 0x200000) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0)
  {
    if (*((_QWORD *)v3 + 368))
    {
      Parameter = *((_QWORD *)v3 + 2188);
      if (Parameter)
      {
        v73 = (const float *)*((_QWORD *)v3 + 2103);
        v74 = *(_QWORD *)(*((_QWORD *)v3 + 2183) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2183) + 16);
        buf.mHostTime = v74;
        Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v73, (DSPSplitComplex *)&buf);
        v53 = *((_QWORD *)v3 + 582);
      }
    }
  }
  if ((v53 & 0x400000) != 0 && (*((_BYTE *)v3 + 4674) & 0x40) != 0)
  {
    if (*((_QWORD *)v3 + 369))
    {
      Parameter = *((_QWORD *)v3 + 2189);
      if (Parameter)
      {
        v75 = (const float *)*((_QWORD *)v3 + 2106);
        v76 = *(_QWORD *)(*((_QWORD *)v3 + 2184) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2184) + 16);
        buf.mHostTime = v76;
        Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v75, (DSPSplitComplex *)&buf);
        v53 = *((_QWORD *)v3 + 582);
      }
    }
  }
  if ((v53 & 0x800000) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0)
  {
    if (*((_QWORD *)v3 + 370))
    {
      Parameter = *((_QWORD *)v3 + 2190);
      if (Parameter)
      {
        v77 = (const float *)*((_QWORD *)v3 + 2109);
        v78 = *(_QWORD *)(*((_QWORD *)v3 + 2185) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2185) + 16);
        buf.mHostTime = v78;
        Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v77, (DSPSplitComplex *)&buf);
        v53 = *((_QWORD *)v3 + 582);
      }
    }
  }
  if ((v53 & 0x1000000) != 0 && (*((_BYTE *)v3 + 4675) & 1) != 0)
  {
    if (*((_QWORD *)v3 + 371))
    {
      Parameter = *((_QWORD *)v3 + 2191);
      if (Parameter)
      {
        v79 = (const float *)*((_QWORD *)v3 + 2112);
        v80 = *(_QWORD *)(*((_QWORD *)v3 + 2186) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2186) + 16);
        buf.mHostTime = v80;
        Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v79, (DSPSplitComplex *)&buf);
        v53 = *((_QWORD *)v3 + 582);
      }
    }
  }
  if (((v53 & 0x800000000000) == 0 || (*((_BYTE *)v3 + 4677) & 0x80) == 0 || !*((_QWORD *)v3 + 394))
    && (v53 & 0x400) != 0
    && (*((_BYTE *)v3 + 4673) & 4) != 0)
  {
    Parameter = *((_QWORD *)v3 + 357);
    if (Parameter)
    {
      MEMORY[0x1E0C80A78](Parameter);
      *(&v475 - 6) = 2;
      *(_OWORD *)(&v475 - 5) = *((_OWORD *)v3 + 1051);
      *(_OWORD *)(&v475 - 3) = *(_OWORD *)((char *)v3 + 16840);
      *(_QWORD *)&v508.mSampleTime = &v475 - 6;
      v508.mHostTime = 0;
      *(_QWORD *)&inInputBufferLists.mSampleTime = (char *)v3 + 16808;
      memset(&inInputBufferLists.mHostTime, 0, 24);
      v498 = 512;
      v81 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v81;
      v82 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v82;
      Parameter = AudioUnitProcessMultiple(v83, &v498, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 4u, (AudioBufferList **)&inInputBufferLists);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x63u, *((unsigned int *)v3 + 127), (const AudioBufferList *)((char *)v3 + 16808), &buf);
      v53 = *((_QWORD *)v3 + 582);
    }
  }
  v497 = 0;
  v84 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&buf.mRateScalar = v84;
  v85 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&buf.mSMPTETime.mHours = v85;
  if ((v53 & 0x2000000) != 0 && (*((_BYTE *)v3 + 4675) & 2) != 0 && *((_QWORD *)v3 + 372))
  {
    v86 = *((_QWORD *)v3 + 2098);
    if ((unint64_t)(*((_QWORD *)v3 + 2099) - v86) <= 0x20)
      goto LABEL_982;
    ECApplicator::apply(*(AudioUnitParameterID **)(v86 + 32), &buf, v48, (BOOL *)&v497, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
    v87 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x21u, v87, *((const AudioBufferList **)v3 + 136), &buf);
      v87 = *((unsigned int *)v3 + 127);
      v88 = *((_QWORD *)v3 + 422);
      if (*((_BYTE *)v3 + 15897))
        goto LABEL_214;
    }
    else
    {
      v88 = *((_QWORD *)v3 + 422);
    }
    if (!*((_BYTE *)v3 + 15898))
    {
LABEL_215:
      Parameter = *((_QWORD *)v3 + 2130);
      v89 = *(const float **)(v88 + 16);
      v90 = *((_QWORD *)v3 + 507);
      inInputBufferLists.mSampleTime = *(Float64 *)(v90 + 16);
      inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v87;
      if (Parameter)
      {
        Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v89, (DSPSplitComplex *)&inInputBufferLists);
        v87 = *((unsigned int *)v3 + 127);
        v90 = *((_QWORD *)v3 + 507);
      }
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x16u, v87, (const AudioBufferList *)v90, &buf);
      goto LABEL_220;
    }
LABEL_214:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x10u, v87, (const AudioBufferList *)v88, &buf);
    v88 = *((_QWORD *)v3 + 422);
    v87 = *((unsigned int *)v3 + 127);
    goto LABEL_215;
  }
LABEL_220:
  v496 = 0;
  if ((*((_BYTE *)v3 + 4659) & 4) == 0 || (*((_BYTE *)v3 + 4675) & 4) == 0 || !*((_QWORD *)v3 + 373))
    goto LABEL_236;
  v91 = *((_QWORD *)v3 + 2098);
  if ((unint64_t)(*((_QWORD *)v3 + 2099) - v91) <= 0x28)
    goto LABEL_982;
  ECApplicator::apply(*(AudioUnitParameterID **)(v91 + 40), &buf, v49, &v496, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
  v92 = *((unsigned int *)v3 + 127);
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x22u, v92, *((const AudioBufferList **)v3 + 136), &buf);
    v92 = *((unsigned int *)v3 + 127);
    v93 = *((_QWORD *)v3 + 2137);
    if (*((_BYTE *)v3 + 15897))
    {
LABEL_230:
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x11u, v92, (const AudioBufferList *)v93, &buf);
      v93 = *((_QWORD *)v3 + 2137);
      v92 = *((unsigned int *)v3 + 127);
      goto LABEL_231;
    }
  }
  else
  {
    v93 = *((_QWORD *)v3 + 2137);
  }
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_230;
LABEL_231:
  Parameter = *((_QWORD *)v3 + 2145);
  v94 = *(const float **)(v93 + 16);
  v95 = *((_QWORD *)v3 + 508);
  inInputBufferLists.mSampleTime = *(Float64 *)(v95 + 16);
  inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v92;
  if (Parameter)
  {
    Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v94, (DSPSplitComplex *)&inInputBufferLists);
    v92 = *((unsigned int *)v3 + 127);
    v95 = *((_QWORD *)v3 + 508);
  }
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x17u, v92, (const AudioBufferList *)v95, &buf);
LABEL_236:
  v96 = *((_QWORD *)v3 + 582);
  if ((v96 & 0x200000) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0 && *((_QWORD *)v3 + 368))
  {
    v97 = (AudioUnitParameterID **)*((_QWORD *)v3 + 2098);
    if (*((AudioUnitParameterID ***)v3 + 2099) == v97)
      goto LABEL_982;
    Parameter = ECApplicator::apply(*v97, &buf, v48, (BOOL *)&v497 + 1, (float *)v3 + 1046, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066);
    v98 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v98, (const AudioBufferList *)((char *)v3 + 16808), &buf);
      v98 = *((unsigned int *)v3 + 127);
      v99 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
      if (*((_BYTE *)v3 + 15897))
      {
LABEL_279:
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v98, v99, &buf);
        goto LABEL_265;
      }
    }
    else
    {
      v99 = (const AudioBufferList *)*((_QWORD *)v3 + 418);
    }
    if (*((_BYTE *)v3 + 15898))
      goto LABEL_279;
  }
  else if ((v96 & 0x8000000) == 0 || (*((_BYTE *)v3 + 4675) & 8) == 0 || !*((_QWORD *)v3 + 374))
  {
    v100 = 0;
    while (((*((_DWORD *)v3 + 116) >> v100) & 1) == 0)
    {
      if (++v100 == 32)
      {
        v100 = 33;
        break;
      }
    }
    if (v100 >= **((_DWORD **)v3 + 135))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v101 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v101)
      {
        v102 = v101;
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
        {
          v103 = **((_DWORD **)v3 + 135);
          LODWORD(inInputBufferLists.mSampleTime) = 136315906;
          *(_QWORD *)((char *)&inInputBufferLists.mSampleTime + 4) = "vpProcessUplink_v9.cpp";
          WORD2(inInputBufferLists.mHostTime) = 1024;
          *(_DWORD *)((char *)&inInputBufferLists.mHostTime + 6) = 479;
          WORD1(inInputBufferLists.mRateScalar) = 1024;
          HIDWORD(inInputBufferLists.mRateScalar) = v100;
          LOWORD(inInputBufferLists.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&inInputBufferLists.mWordClockTime + 2) = v103;
          _os_log_impl(&dword_1B5ED0000, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&inInputBufferLists, 0x1Eu);
        }
      }
      v104 = (int *)*((_QWORD *)v3 + 1570);
      if (v104 && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v104, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessUplink_v9.cpp", 479, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v100, **((_DWORD **)v3 + 135));
      }
      v100 = 0;
    }
    v105 = *((_QWORD *)v3 + 135) + 16 * v100;
    Parameter = (uint64_t)memcpy(*(void **)(*((_QWORD *)v3 + 136) + 16), *(const void **)(v105 + 16), *(unsigned int *)(v105 + 12));
  }
LABEL_265:
  if ((*((_BYTE *)v3 + 4664) & 0x20) != 0 && (*((_BYTE *)v3 + 4680) & 0x20) != 0)
  {
    Parameter = *((_QWORD *)v3 + 416);
    if (Parameter)
    {
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 135);
      inInputBufferLists.mHostTime = v488;
      v508.mSampleTime = *((Float64 *)v3 + 136);
      v498 = 512;
      Parameter = AudioUnitProcessMultiple((AudioUnit)Parameter, &v498, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v508);
    }
  }
  v495 = 0;
  if ((*((_BYTE *)v3 + 4658) & 0x40) != 0 && (*((_BYTE *)v3 + 4674) & 0x40) != 0 && *((_QWORD *)v3 + 369))
  {
    v106 = *((_QWORD *)v3 + 2098);
    if ((unint64_t)(*((_QWORD *)v3 + 2099) - v106) <= 8)
      goto LABEL_982;
    Parameter = ECApplicator::apply(*(AudioUnitParameterID **)(v106 + 8), &buf, v49, &v495, (float *)v3 + 1047, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067);
    v107 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v107, (const AudioBufferList *)((char *)v3 + 16832), &buf);
      v107 = *((unsigned int *)v3 + 127);
      v108 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
      if (*((_BYTE *)v3 + 15897))
      {
LABEL_282:
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v107, v108, &buf);
        goto LABEL_283;
      }
    }
    else
    {
      v108 = (const AudioBufferList *)*((_QWORD *)v3 + 419);
    }
    if (*((_BYTE *)v3 + 15898))
      goto LABEL_282;
  }
LABEL_283:
  v494 = 0;
  if ((*((_BYTE *)v3 + 4658) & 0x80) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0 && *((_QWORD *)v3 + 370))
  {
    v109 = *((_QWORD *)v3 + 2098);
    if ((unint64_t)(*((_QWORD *)v3 + 2099) - v109) <= 0x10)
      goto LABEL_982;
    Parameter = ECApplicator::apply(*(AudioUnitParameterID **)(v109 + 16), &buf, v51, &v494, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
    v110 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v110, (const AudioBufferList *)((char *)v3 + 16856), &buf);
      v110 = *((unsigned int *)v3 + 127);
      v111 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
      if (*((_BYTE *)v3 + 15897))
      {
LABEL_293:
        Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v110, v111, &buf);
        goto LABEL_294;
      }
    }
    else
    {
      v111 = (const AudioBufferList *)*((_QWORD *)v3 + 421);
    }
    if (*((_BYTE *)v3 + 15898))
      goto LABEL_293;
  }
LABEL_294:
  v493 = 0;
  if ((*((_BYTE *)v3 + 4659) & 1) == 0 || (*((_BYTE *)v3 + 4675) & 1) == 0 || !*((_QWORD *)v3 + 371))
    goto LABEL_305;
  v112 = *((_QWORD *)v3 + 2098);
  if ((unint64_t)(*((_QWORD *)v3 + 2099) - v112) <= 0x18)
LABEL_982:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  Parameter = ECApplicator::apply(*(AudioUnitParameterID **)(v112 + 24), &buf, v50, &v493, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
  v113 = *((unsigned int *)v3 + 127);
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
  {
    Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v113, (const AudioBufferList *)((char *)v3 + 16880), &buf);
    v113 = *((unsigned int *)v3 + 127);
    v114 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
    if (*((_BYTE *)v3 + 15897))
    {
LABEL_304:
      Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v113, v114, &buf);
      goto LABEL_305;
    }
  }
  else
  {
    v114 = (const AudioBufferList *)*((_QWORD *)v3 + 420);
  }
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_304;
LABEL_305:
  if ((*((_BYTE *)v3 + 8837) & 8) != 0 && (*((_BYTE *)v3 + 8845) & 8) != 0)
  {
    if (*((_QWORD *)v3 + 480))
    {
      *(_BYTE *)(v488 + 32) = 0;
      if ((*((_BYTE *)v3 + 4658) & 0x80) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0)
      {
        Parameter = *((_QWORD *)v3 + 370);
        if (Parameter)
        {
          if (*((_QWORD *)v3 + 2128))
          {
            LODWORD(inInputBufferLists.mSampleTime) = 0;
            Parameter = AudioUnitGetPropertyInfo((AudioUnit)Parameter, 0xF3Cu, 0, 0, (UInt32 *)&inInputBufferLists, 0);
            if (!(_DWORD)Parameter && LODWORD(inInputBufferLists.mSampleTime) == 4 * *((unsigned int *)v3 + 127))
            {
              v115 = *(void **)(*((_QWORD *)v3 + 2128) + 16);
              Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 370), 0xF3Cu, 0, 0, v115, (UInt32 *)&inInputBufferLists);
              v116 = Parameter;
              if (*((_BYTE *)v3 + 481))
                Parameter = AudioUnitSetProperty(*((AudioUnit *)v3 + 480), 0xF3Cu, 0, 0, v115, LODWORD(inInputBufferLists.mSampleTime));
              *(_BYTE *)(v488 + 32) = v116 == 0;
            }
          }
        }
      }
    }
  }
  if ((*((_BYTE *)v3 + 4660) & 8) != 0 && (*((_BYTE *)v3 + 4676) & 8) != 0 && *((_QWORD *)v3 + 382))
  {
    MEMORY[0x1E0C80A78](Parameter);
    v485 = (AudioBufferList *)(&v475 - 12);
    *((_OWORD *)&v475 - 6) = 0u;
    *((_OWORD *)&v475 - 5) = 0u;
    *((_OWORD *)&v475 - 3) = 0u;
    *((_OWORD *)&v475 - 2) = 0u;
    *((_OWORD *)&v475 - 4) = 0u;
    v474 = 0;
    *((_DWORD *)&v475 - 24) = 5;
    *(_OWORD *)(&v475 - 11) = *((_OWORD *)v3 + 1051);
    *(_OWORD *)(&v475 - 5) = *(_OWORD *)((char *)v3 + 16840);
    *(_OWORD *)(&v475 - 9) = *((_OWORD *)v3 + 1054);
    *(_OWORD *)(&v475 - 7) = *(_OWORD *)((char *)v3 + 16888);
    v487 = (char *)*((_QWORD *)v3 + 2127);
    v117 = *(const float **)(*((_QWORD *)v3 + 418) + 16);
    v484 = *(const float **)(*((_QWORD *)v3 + 419) + 16);
    v118 = v484;
    v119 = *(const float **)(*((_QWORD *)v3 + 421) + 16);
    v120 = *(float **)(*((_QWORD *)v3 + 420) + 16);
    v121 = *(float **)(*((_QWORD *)v3 + 2153) + 16);
    LODWORD(v512.realp) = 1048576000;
    vDSP_vadd(v117, 1, v119, 1, v121, 1, *((unsigned int *)v3 + 127));
    vDSP_vadd(v121, 1, v120, 1, v121, 1, *((unsigned int *)v3 + 127));
    vDSP_vadd(v121, 1, v118, 1, v121, 1, *((unsigned int *)v3 + 127));
    v122 = v121;
    v123 = v121;
    v124 = v119;
    v125 = (float *)v117;
    vDSP_vsmul(v122, 1, (const float *)&v512, v123, 1, *((unsigned int *)v3 + 127));
    *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2153) + 8);
    *(_QWORD *)&v509.mNumberBuffers = v485;
    v513.realp = (float *)*((_QWORD *)v3 + 136);
    v498 = 512;
    v126 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v126;
    v127 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v127;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 382), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v509, 1u, (AudioBufferList **)&v513);
    v128 = v488;
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2149) + 16) + 4 * *(unsigned int *)(v488 + 184)), v487, 4 * *((unsigned int *)v3 + 127));
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2150) + 16) + 4 * *(unsigned int *)(v128 + 184)), v117, 4 * *((unsigned int *)v3 + 127));
    v129 = (void *)(*(_QWORD *)(*((_QWORD *)v3 + 2151) + 16) + 4 * *(unsigned int *)(v128 + 184));
    v130 = 4 * *((unsigned int *)v3 + 127);
    v485 = (AudioBufferList *)v124;
    memcpy(v129, v124, v130);
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2203) + 16) + 4 * *(unsigned int *)(v128 + 184)), v120, 4 * *((unsigned int *)v3 + 127));
    v131 = (float *)v484;
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v3 + 2152) + 16) + 4 * *(unsigned int *)(v128 + 184)), v484, 4 * *((unsigned int *)v3 + 127));
    LODWORD(v506) = 4 * *((_DWORD *)v3 + 127);
    AudioUnitGetProperty(*((AudioUnit *)v3 + 382), 0x9087u, 0, 0, *(void **)(*((_QWORD *)v3 + 2154) + 16), (UInt32 *)&v506);
    v132 = *((unsigned int *)v3 + 127);
    v508.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2155) + 16);
    v508.mHostTime = *(_QWORD *)&v508.mSampleTime + 4 * v132;
    v133 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2156);
    if (v133)
    {
      VPTimeFreqConverter::Analyze(v133, *(const float **)(*((_QWORD *)v3 + 136) + 16), (DSPSplitComplex *)&v508);
      v132 = *((unsigned int *)v3 + 127);
    }
    memcpy(v487, *(const void **)(*((_QWORD *)v3 + 2149) + 16), 4 * v132);
    memcpy(v125, *(const void **)(*((_QWORD *)v3 + 2150) + 16), 4 * *((unsigned int *)v3 + 127));
    memcpy(v485, *(const void **)(*((_QWORD *)v3 + 2151) + 16), 4 * *((unsigned int *)v3 + 127));
    memcpy(v120, *(const void **)(*((_QWORD *)v3 + 2203) + 16), 4 * *((unsigned int *)v3 + 127));
    memcpy(v131, *(const void **)(*((_QWORD *)v3 + 2152) + 16), 4 * *((unsigned int *)v3 + 127));
    v134 = v488;
    memmove(*(void **)(*((_QWORD *)v3 + 2149) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2149) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v488 + 184));
    memmove(*(void **)(*((_QWORD *)v3 + 2150) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2150) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v134 + 184));
    memmove(*(void **)(*((_QWORD *)v3 + 2151) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2151) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v134 + 184));
    memmove(*(void **)(*((_QWORD *)v3 + 2203) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2203) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v134 + 184));
    memmove(*(void **)(*((_QWORD *)v3 + 2152) + 16), (const void *)(*(_QWORD *)(*((_QWORD *)v3 + 2152) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v134 + 184));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &inInputBufferLists);
  }
  Property = *((_QWORD *)v3 + 518);
  v136 = (const float *)*((_QWORD *)v3 + 2127);
  v137 = *(_QWORD *)(*((_QWORD *)v3 + 510) + 16) + 4 * *((unsigned int *)v3 + 127);
  inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 510) + 16);
  inInputBufferLists.mHostTime = v137;
  if (Property)
    Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v136, (DSPSplitComplex *)&inInputBufferLists);
  v492 = 0.0;
  if ((*((_BYTE *)v3 + 4658) & 0x20) != 0 && (*((_BYTE *)v3 + 4674) & 0x20) != 0 && *((_QWORD *)v3 + 368))
  {
    v138 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 512);
    v139 = (const float *)*((_QWORD *)v3 + 2103);
    v140 = *((unsigned int *)v3 + 127);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 428) + 16);
    inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v140;
    if (v138)
    {
      VPTimeFreqConverter::Analyze(v138, v139, (DSPSplitComplex *)&inInputBufferLists);
      v140 = *((unsigned int *)v3 + 127);
    }
    Property = *((_QWORD *)v3 + 516);
    v141 = *(const float **)(*((_QWORD *)v3 + 418) + 16);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 16);
    inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v140;
    if (Property)
    {
      Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v141, (DSPSplitComplex *)&inInputBufferLists);
      v140 = *((unsigned int *)v3 + 127);
    }
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v140, *((const AudioBufferList **)v3 + 428), &buf);
  }
  if ((*((_BYTE *)v3 + 4658) & 0x40) != 0 && (*((_BYTE *)v3 + 4674) & 0x40) != 0 && *((_QWORD *)v3 + 369))
  {
    v142 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 513);
    v143 = (const float *)*((_QWORD *)v3 + 2106);
    v144 = *((unsigned int *)v3 + 127);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 505) + 16);
    inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v144;
    if (v142)
    {
      VPTimeFreqConverter::Analyze(v142, v143, (DSPSplitComplex *)&inInputBufferLists);
      v144 = *((unsigned int *)v3 + 127);
    }
    Property = *((_QWORD *)v3 + 517);
    v145 = *(const float **)(*((_QWORD *)v3 + 419) + 16);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 32);
    inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v144;
    if (Property)
    {
      Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v145, (DSPSplitComplex *)&inInputBufferLists);
      v144 = *((unsigned int *)v3 + 127);
    }
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v144, *((const AudioBufferList **)v3 + 505), &buf);
  }
  v146 = *((_QWORD *)v3 + 582);
  if ((v146 & 0x800000) != 0)
  {
    v147 = *((_QWORD *)v3 + 584);
    if ((v147 & 0x800000) != 0)
    {
      if (*((_QWORD *)v3 + 370))
      {
        if ((v146 & v147 & 0x40000000000) != 0)
        {
          Property = *((_QWORD *)v3 + 389);
          if (Property)
            Property = AudioUnitGetParameter((AudioUnit)Property, 0x2Bu, 0, 0, &v492);
        }
        if (v492 != 0.0
          || (*((_BYTE *)v3 + 4661) & 0x80) != 0 && (*((_BYTE *)v3 + 4677) & 0x80) != 0 && *((_QWORD *)v3 + 394))
        {
          v148 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 514);
          v149 = (const float *)*((_QWORD *)v3 + 2109);
          v150 = *((unsigned int *)v3 + 127);
          inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 2167) + 16);
          inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v150;
          if (v148)
          {
            VPTimeFreqConverter::Analyze(v148, v149, (DSPSplitComplex *)&inInputBufferLists);
            v150 = *((unsigned int *)v3 + 127);
          }
          Property = *((_QWORD *)v3 + 2132);
          v151 = *(const float **)(*((_QWORD *)v3 + 421) + 16);
          inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 48);
          inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v150;
          if (Property)
          {
            Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v151, (DSPSplitComplex *)&inInputBufferLists);
            v150 = *((unsigned int *)v3 + 127);
          }
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x14u, v150, *((const AudioBufferList **)v3 + 2167), &buf);
        }
      }
    }
  }
  if ((*((_BYTE *)v3 + 4659) & 1) != 0 && (*((_BYTE *)v3 + 4675) & 1) != 0 && *((_QWORD *)v3 + 371))
  {
    v152 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 515);
    v153 = (const float *)*((_QWORD *)v3 + 2112);
    v154 = *((unsigned int *)v3 + 127);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 506) + 16);
    inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v154;
    if (v152)
    {
      VPTimeFreqConverter::Analyze(v152, v153, (DSPSplitComplex *)&inInputBufferLists);
      v154 = *((unsigned int *)v3 + 127);
    }
    Property = *((_QWORD *)v3 + 2096);
    v155 = *(const float **)(*((_QWORD *)v3 + 420) + 16);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 504) + 64);
    inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v154;
    if (Property)
    {
      Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v155, (DSPSplitComplex *)&inInputBufferLists);
      v154 = *((unsigned int *)v3 + 127);
    }
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v154, *((const AudioBufferList **)v3 + 506), &buf);
  }
  v156 = *((_QWORD *)v3 + 582);
  if ((v156 & 0x800) != 0 && (*((_BYTE *)v3 + 4673) & 8) != 0)
  {
    Property = *((_QWORD *)v3 + 358);
    if (Property)
    {
      MEMORY[0x1E0C80A78](Property);
      *(&v475 - 6) = 2;
      *(_OWORD *)(&v475 - 5) = *((_OWORD *)v3 + 1051);
      *(_OWORD *)(&v475 - 3) = *(_OWORD *)((char *)v3 + 16840);
      v513.realp = (float *)(&v475 - 6);
      v513.imagp = 0;
      v508.mSampleTime = *((Float64 *)v3 + 2172);
      memset(&v508.mHostTime, 0, 24);
      v498 = 512;
      v157 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v157;
      v158 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v158;
      AudioUnitProcessMultiple(v159, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v513, 4u, (AudioBufferList **)&v508);
      Property = *((_QWORD *)v3 + 2175);
      v160 = *(const float **)(*((_QWORD *)v3 + 2172) + 16);
      v161 = *((_QWORD *)v3 + 2173);
      v162 = *((unsigned int *)v3 + 127);
      *(_QWORD *)&v509.mNumberBuffers = *(_QWORD *)(v161 + 16);
      *(_QWORD *)&v509.mBuffers[0].mNumberChannels = *(_QWORD *)&v509.mNumberBuffers + 4 * v162;
      if (Property)
      {
        Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v160, (DSPSplitComplex *)&v509);
        v162 = *((unsigned int *)v3 + 127);
        v161 = *((_QWORD *)v3 + 2173);
      }
      if (*(_BYTE *)(v488 + 536))
      {
        *(_QWORD *)&v509.mNumberBuffers = *(_QWORD *)(*((_QWORD *)v3 + 428) + 16);
        *(_QWORD *)&v509.mBuffers[0].mNumberChannels = *(_QWORD *)&v509.mNumberBuffers + 4 * v162;
        v512.realp = *(float **)(v161 + 16);
        v512.imagp = &v512.realp[v162];
        v163 = *(float **)(*((_QWORD *)v3 + 2174) + 16);
        v164 = &v163[v162];
        vDSP_zvabs((const DSPSplitComplex *)&v509, 1, v163, 1, v162);
        vDSP_zvabs(&v512, 1, v164, 1, *((unsigned int *)v3 + 127));
        vDSP_vmin(v163, 1, v164, 1, v163, 1, *((unsigned int *)v3 + 127));
        LODWORD(v506) = 507307272;
        vDSP_vsadd(v164, 1, (const float *)&v506, v164, 1, *((unsigned int *)v3 + 127));
        vDSP_vdiv(v164, 1, v163, 1, v164, 1, *((unsigned int *)v3 + 127));
        vDSP_vmul(v512.realp, 1, v164, 1, v512.realp, 1, *((unsigned int *)v3 + 127));
        vDSP_vmul(v512.imagp, 1, v164, 1, v512.imagp, 1, *((unsigned int *)v3 + 127));
        v162 = *((unsigned int *)v3 + 127);
        v161 = *((_QWORD *)v3 + 2173);
      }
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x5Fu, v162, (const AudioBufferList *)v161, &inInputBufferLists);
      v156 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v156 & 0x10000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x10) != 0)
  {
    Property = *((_QWORD *)v3 + 375);
    if (Property)
    {
      v508.mSampleTime = *((Float64 *)v3 + 428);
      *(Float64 *)&v509.mNumberBuffers = v508.mSampleTime;
      v498 = 512;
      v165 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v165;
      v166 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v166;
      Property = AudioUnitProcessMultiple((AudioUnit)Property, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
      if (!(_DWORD)Property)
      {
        Property = AudioUnitGetProperty(*((AudioUnit *)v3 + 375), 0x1450u, 0, 0, *(void **)(*((_QWORD *)v3 + 2171) + 16), (UInt32 *)(*((_QWORD *)v3 + 2171) + 12));
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x20u, (*((_DWORD *)v3 + 127) + 1), *((const AudioBufferList **)v3 + 2171), &inInputBufferLists);
      }
      v156 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v156 & 0x80000000000) != 0)
  {
    v167 = *((_QWORD *)v3 + 584);
    if ((v167 & 0x80000000000) != 0)
    {
      Property = *((_QWORD *)v3 + 390);
      if (Property)
      {
        if ((v156 & v167 & 0x800000000000) == 0 || !*((_QWORD *)v3 + 394))
        {
          v168 = *((float *)v3 + 1055);
          if (v168 == 0.0)
          {
            v169 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2097);
            v170 = *(const float **)(*((_QWORD *)v3 + 424) + 16);
            v171 = *(_QWORD *)(*((_QWORD *)v3 + 435) + 16) + 4 * *((unsigned int *)v3 + 127);
            inInputBufferLists.mSampleTime = *(Float64 *)(*((_QWORD *)v3 + 435) + 16);
            inInputBufferLists.mHostTime = v171;
            if (v169)
            {
              VPTimeFreqConverter::Analyze(v169, v170, (DSPSplitComplex *)&inInputBufferLists);
              v168 = *((float *)v3 + 1055);
              Property = *((_QWORD *)v3 + 390);
            }
          }
          AudioUnitSetParameter((AudioUnit)Property, 6u, 0, 0, v168, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1059), 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1063), 0);
          memcpy(*(void **)(*((_QWORD *)v3 + 433) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 32), *((unsigned int *)v3 + 1071));
          v172 = *((_QWORD *)v3 + 433);
          v508.mSampleTime = *((Float64 *)v3 + 505);
          v508.mHostTime = v172;
          v508.mRateScalar = *((Float64 *)v3 + 511);
          memset(&v508.mWordClockTime, 0, 24);
          *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 431);
          *(_QWORD *)&v509.mBuffers[0].mNumberChannels = 0;
          v509.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 500);
          v173 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&inInputBufferLists.mRateScalar = v173;
          v174 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v174;
          v498 = 512;
          Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v508, 3u, (AudioBufferList **)&v509);
          v175 = *((unsigned int *)v3 + 127);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          {
            Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v175, *((const AudioBufferList **)v3 + 431), &inInputBufferLists);
            v175 = *((unsigned int *)v3 + 127);
            v176 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
            if (*((_BYTE *)v3 + 15897))
              goto LABEL_407;
          }
          else
          {
            v176 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
          }
          if (!*((_BYTE *)v3 + 15898))
          {
LABEL_408:
            v156 = *((_QWORD *)v3 + 582);
            goto LABEL_409;
          }
LABEL_407:
          Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v175, v176, &inInputBufferLists);
          goto LABEL_408;
        }
      }
    }
  }
LABEL_409:
  v491 = 0;
  if ((v156 & 0x20000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x20) != 0 && *((_QWORD *)v3 + 376))
  {
    v177 = 1;
    v178 = 1;
  }
  else if ((v156 & 0x100000000) != 0 && (*((_BYTE *)v3 + 4676) & 1) != 0)
  {
    v177 = 0;
    v178 = *((_QWORD *)v3 + 379) != 0;
  }
  else
  {
    v177 = 0;
    v178 = 0;
  }
  v179 = v156 & 0x40000000;
  if ((v156 & 0x40000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x40) != 0 && *((_QWORD *)v3 + 377))
  {
    v180 = 1;
    v177 = 1;
    v181 = 1;
    if ((v156 & 0x80000000) == 0)
      goto LABEL_434;
  }
  else
  {
    if ((v156 & 0x80000000) == 0)
    {
      v180 = 0;
      v181 = 1;
      goto LABEL_434;
    }
    v181 = 1;
    if ((*((_BYTE *)v3 + 4675) & 0x80) != 0)
    {
      v182 = *((_QWORD *)v3 + 378);
      v180 = v182 != 0;
      if (v182)
        v181 = 2;
      else
        v181 = 1;
    }
    else
    {
      v180 = 0;
    }
  }
  v183 = *((_QWORD *)v3 + 584);
  if ((v183 & 0x80000000) != 0 && *((_QWORD *)v3 + 378) && (v156 & v183 & 0x100000000) != 0 && *((_QWORD *)v3 + 379))
  {
    v181 = 2;
    v177 = 2;
  }
LABEL_434:
  if ((v156 & 0x20000000) == 0)
    goto LABEL_451;
  if ((*((_BYTE *)v3 + 4675) & 0x20) == 0)
    goto LABEL_451;
  Property = *((_QWORD *)v3 + 376);
  if (!Property)
    goto LABEL_451;
  AudioUnitSetProperty((AudioUnit)Property, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
  if ((*((_BYTE *)v3 + 4659) & 0x40) == 0 || (*((_BYTE *)v3 + 4675) & 0x40) == 0)
  {
    v184 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
LABEL_440:
    v185 = 2.0;
    goto LABEL_441;
  }
  v184 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 376);
  if (!*((_QWORD *)v3 + 377))
    goto LABEL_440;
  v185 = (float)*((unsigned int *)v3 + 684);
LABEL_441:
  AudioUnitSetParameter(v184, 0x1Bu, 0, 0, v185, 0);
  v186 = *((_QWORD *)v3 + 582);
  if ((v186 & 0x200000) != 0)
  {
    v187 = *((_QWORD *)v3 + 584);
    if ((v187 & 0x200000) != 0
      && *((_QWORD *)v3 + 368)
      && (v186 & v187 & 0x400000) != 0
      && *((_QWORD *)v3 + 369))
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x3Fu, 0, 0, *((float *)v3 + 1054) * *((float *)v3 + 1055), 0);
    }
  }
  *(_QWORD *)&v188 = *((_QWORD *)v3 + 138) + 24;
  *(_QWORD *)&v189 = *((_QWORD *)v3 + 139) + 24;
  if (**((_DWORD **)v3 + 135) <= 2u)
  {
    *(_QWORD *)&v508.mSampleTime = *((_QWORD *)v3 + 138) + 24;
    *(Float64 *)&v508.mHostTime = v189;
    v508.mRateScalar = 0.0;
    v508.mWordClockTime = v488;
    *(_OWORD *)&v508.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
  }
  else
  {
    v190 = *((_QWORD *)v3 + 140) + 24;
    *(_OWORD *)&v508.mSMPTETime.mSubframes = *((_OWORD *)v3 + 209);
    v508.mSampleTime = v189;
    v508.mHostTime = v190;
    v508.mRateScalar = v188;
    v508.mWordClockTime = v488;
  }
  *(_QWORD *)&v509.mNumberBuffers = 0;
  v498 = 512;
  AudioUnitSetParameter(*((AudioUnit *)v3 + 376), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1090), 0);
  v191 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v191;
  v192 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v192;
  Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 376), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
  v156 = *((_QWORD *)v3 + 582);
  v179 = v156 & 0x40000000;
LABEL_451:
  if (!v179 || (*((_BYTE *)v3 + 4675) & 0x40) == 0 || !*((_QWORD *)v3 + 377))
  {
    if ((v156 & 0x80000000) == 0 || (*((_BYTE *)v3 + 4675) & 0x80) == 0 || !*((_QWORD *)v3 + 378))
      goto LABEL_488;
    memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * *((unsigned int *)v3 + 127));
    memcpy(*(void **)(*((_QWORD *)v3 + 434) + 32), *(const void **)(*((_QWORD *)v3 + 506) + 16), 8 * *((unsigned int *)v3 + 127));
    v506 = (const AudioBufferList *)*((_QWORD *)v3 + 434);
    v201 = (float *)*((_QWORD *)v3 + 433);
    v513.realp = (float *)*((_QWORD *)v3 + 429);
    v513.imagp = v201;
    v202 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v202;
    v203 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v203;
    Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, &v506, 2u, (AudioBufferList **)&v513);
    v204 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v204, (const AudioBufferList *)v513.realp, &inInputBufferLists);
      v204 = *((unsigned int *)v3 + 127);
      imagp = v513.imagp;
      if (*((_BYTE *)v3 + 15897))
        goto LABEL_473;
    }
    else
    {
      imagp = v513.imagp;
    }
    if (!*((_BYTE *)v3 + 15898))
    {
LABEL_474:
      if ((*((_BYTE *)v3 + 4660) & 1) == 0 || (*((_BYTE *)v3 + 4676) & 1) == 0 || !*((_QWORD *)v3 + 379))
        goto LABEL_488;
      memcpy(*(void **)(*((_QWORD *)v3 + 435) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
      memcpy(*(void **)(*((_QWORD *)v3 + 430) + 16), *(const void **)(*((_QWORD *)v3 + 431) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
      LODWORD(v504) = 1092616192;
      v206 = *((_QWORD *)v3 + 433);
      *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 429);
      *(_QWORD *)&v509.mBuffers[0].mNumberChannels = v206;
      v207 = (AudioBufferList *)*((_QWORD *)v3 + 506);
      v509.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 435);
      v510 = v207;
      v511 = *((_QWORD *)v3 + 430);
      v208 = (float *)*((_QWORD *)v3 + 431);
      v209 = 10.0;
      v512.realp = (float *)*((_QWORD *)v3 + 428);
      v512.imagp = v208;
      if ((*((_BYTE *)v3 + 4662) & 0x80) != 0 && (*((_BYTE *)v3 + 4678) & 0x80) != 0)
      {
        v210 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
        if (v210)
        {
          AudioUnitGetParameter(v210, 9u, 0, 0, (AudioUnitParameterValue *)&v504);
          v209 = *(float *)&v504;
        }
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0xAu, 0, 0, v209, 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 379), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
      v211 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&v508.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&v508.mRateScalar = v211;
      v212 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&v508.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&v508.mSMPTETime.mHours = v212;
      Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v498, &v508, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v509, 2u, (AudioBufferList **)&v512);
      v196 = *((unsigned int *)v3 + 127);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      {
        Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v196, (const AudioBufferList *)v512.realp, &v508);
        v196 = *((unsigned int *)v3 + 127);
        v197 = v512.imagp;
        if (*((_BYTE *)v3 + 15897))
          goto LABEL_487;
      }
      else
      {
        v197 = v512.imagp;
      }
      if (!*((_BYTE *)v3 + 15898))
        goto LABEL_488;
LABEL_487:
      p_inInputBufferLists = &v508;
      v199 = (uint64_t)v3;
      v200 = 27;
      goto LABEL_460;
    }
LABEL_473:
    Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v204, (const AudioBufferList *)imagp, &inInputBufferLists);
    goto LABEL_474;
  }
  memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1040) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
  memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16 * *((unsigned int *)v3 + 1041) + 16), *(const void **)(*((_QWORD *)v3 + 505) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
  if (*((float *)v3 + 1066) == 0.0 && *((float *)v3 + 1067) == 0.0)
    v193 = 0.0;
  else
    v193 = 1.0;
  AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x20u, 0, 0, v193, 0);
  v508.mSampleTime = *((Float64 *)v3 + 434);
  *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 429);
  v194 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v194;
  v195 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v195;
  v498 = 512;
  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
  LODWORD(v513.realp) = 8 * *((_DWORD *)v3 + 127);
  AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE7Au, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 16), (UInt32 *)&v513);
  LODWORD(v513.realp) = 8 * *((_DWORD *)v3 + 127);
  Property = AudioUnitGetProperty(*((AudioUnit *)v3 + 377), 0xE79u, 0, 0, *(void **)(*((_QWORD *)v3 + 537) + 32), (UInt32 *)&v513);
  v196 = *((unsigned int *)v3 + 127);
  v197 = (float *)*((_QWORD *)v3 + 429);
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
  {
    p_inInputBufferLists = &inInputBufferLists;
    v199 = (uint64_t)v3;
    v200 = 10;
LABEL_460:
    Property = VoiceProcessorV2::SaveFilesWriteSignal(v199, v200, v196, (const AudioBufferList *)v197, p_inInputBufferLists);
  }
LABEL_488:
  MEMORY[0x1E0C80A78](Property);
  v213 = (const AudioBufferList *)(&v475 - 8);
  *((_OWORD *)&v475 - 3) = 0u;
  *((_OWORD *)&v475 - 2) = 0u;
  *((_OWORD *)&v475 - 4) = 0u;
  *((_DWORD *)&v475 - 16) = 3;
  *(double *)&v216 = MEMORY[0x1E0C80A78](v214);
  v487 = (char *)(&v475 - 8);
  v474 = 0;
  *((_OWORD *)&v475 - 3) = v216;
  *((_OWORD *)&v475 - 2) = v216;
  *((_OWORD *)&v475 - 4) = v216;
  *((_DWORD *)&v475 - 16) = v217;
  v218 = *((_QWORD *)v3 + 582);
  if ((v218 & 0x200000000) != 0 && (*((_BYTE *)v3 + 4676) & 2) != 0 && *((_QWORD *)v3 + 380)
    || (v218 & 0x400000000) != 0 && (*((_BYTE *)v3 + 4676) & 4) != 0 && *((_QWORD *)v3 + 381)
    || (v218 & 0x1000000000) != 0 && (*((_BYTE *)v3 + 4676) & 0x10) != 0 && *((_QWORD *)v3 + 383))
  {
    *(_OWORD *)(&v475 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
    *(_OWORD *)(&v475 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 505) + 8);
    *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 506) + 8);
    v219 = *((_QWORD *)v3 + 504);
    v220 = v487;
    *(_OWORD *)(v487 + 8) = *(_OWORD *)(v219 + 8);
    *(_OWORD *)(v220 + 24) = *(_OWORD *)(v219 + 24);
    v216 = *(_OWORD *)(v219 + 56);
    *(_OWORD *)(v220 + 40) = v216;
  }
  if ((v218 & 0x200000000) != 0 && (*((_BYTE *)v3 + 4676) & 2) != 0 && *((_QWORD *)v3 + 380))
  {
    v485 = (AudioBufferList *)(&v475 - 8);
    v481 = v181;
    v482 = v180;
    v483 = v177;
    LODWORD(v484) = v178;
    v221 = 0;
    v513.realp = (float *)*((_QWORD *)v3 + 523);
    LODWORD(v513.imagp) = *((_DWORD *)v3 + 1049);
    v512.realp = (float *)*((_QWORD *)v3 + 525);
    LODWORD(v512.imagp) = *((_DWORD *)v3 + 1053);
    v506 = (const AudioBufferList *)*((_QWORD *)v3 + 527);
    v507 = *((_DWORD *)v3 + 1057);
    v504 = *((_QWORD *)v3 + 529);
    v505 = *((_DWORD *)v3 + 1061);
    v502 = *((_QWORD *)v3 + 531);
    v503 = *((_DWORD *)v3 + 1065);
    do
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 9u, 4u, v221, *((AudioUnitParameterValue *)&v513.realp + v221), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 4u, v221, *((AudioUnitParameterValue *)&v512.realp + v221), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xBu, 4u, v221, *((AudioUnitParameterValue *)&v506 + v221), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xCu, 4u, v221, *((AudioUnitParameterValue *)&v504 + v221), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xDu, 4u, v221, *((AudioUnitParameterValue *)&v502 + v221), 0);
      ++v221;
    }
    while (v221 != 3);
    v213 = v485;
    *(_QWORD *)&v508.mSampleTime = v485;
    v508.mHostTime = (UInt64)v487;
    *(_QWORD *)&v509.mNumberBuffers = v485;
    *(_QWORD *)&v509.mBuffers[0].mNumberChannels = v487;
    v498 = 512;
    v222 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v222;
    v223 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v223;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 2u, (AudioBufferList **)&v509);
    v224 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x69u, v224, v213, &inInputBufferLists);
      v224 = *((unsigned int *)v3 + 127);
      v177 = v483;
      v178 = (int)v484;
      v181 = v481;
      v180 = v482;
      if (*((_BYTE *)v3 + 15897))
        goto LABEL_509;
    }
    else
    {
      v177 = v483;
      v178 = (int)v484;
      v181 = v481;
      v180 = v482;
    }
    if (!*((_BYTE *)v3 + 15898))
    {
LABEL_510:
      v218 = *((_QWORD *)v3 + 582);
      goto LABEL_511;
    }
LABEL_509:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Au, v224, (const AudioBufferList *)v487, &inInputBufferLists);
    goto LABEL_510;
  }
LABEL_511:
  if ((v218 & 0x400000000) != 0 && (*((_BYTE *)v3 + 4676) & 4) != 0 && *((_QWORD *)v3 + 381))
  {
    v485 = (AudioBufferList *)v213;
    v481 = v181;
    v482 = v180;
    v483 = v177;
    LODWORD(v484) = v178;
    v225 = 0;
    v513.realp = (float *)*((_QWORD *)v3 + 523);
    LODWORD(v513.imagp) = *((_DWORD *)v3 + 1049);
    v512.realp = (float *)*((_QWORD *)v3 + 525);
    LODWORD(v512.imagp) = *((_DWORD *)v3 + 1053);
    v506 = (const AudioBufferList *)*((_QWORD *)v3 + 527);
    v507 = *((_DWORD *)v3 + 1057);
    v504 = *((_QWORD *)v3 + 529);
    v505 = *((_DWORD *)v3 + 1061);
    v502 = *((_QWORD *)v3 + 531);
    v503 = *((_DWORD *)v3 + 1065);
    do
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x12u, 4u, v225, *((AudioUnitParameterValue *)&v513.realp + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x13u, 4u, v225, *((AudioUnitParameterValue *)&v512.realp + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x14u, 4u, v225, *((AudioUnitParameterValue *)&v506 + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x15u, 4u, v225, *((AudioUnitParameterValue *)&v504 + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0x16u, 4u, v225, *((AudioUnitParameterValue *)&v502 + v225), 0);
      ++v225;
    }
    while (v225 != 3);
    v213 = v485;
    *(_QWORD *)&v508.mSampleTime = v485;
    v508.mHostTime = (UInt64)v487;
    *(_QWORD *)&v509.mNumberBuffers = v485;
    *(_QWORD *)&v509.mBuffers[0].mNumberChannels = v487;
    v498 = 512;
    v226 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v226;
    v227 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v227;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 381), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 2u, (AudioBufferList **)&v509);
    v228 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Bu, v228, v213, &inInputBufferLists);
      v228 = *((unsigned int *)v3 + 127);
      v177 = v483;
      v178 = (int)v484;
      v181 = v481;
      v180 = v482;
      if (*((_BYTE *)v3 + 15897))
        goto LABEL_522;
    }
    else
    {
      v177 = v483;
      v178 = (int)v484;
      v181 = v481;
      v180 = v482;
    }
    if (!*((_BYTE *)v3 + 15898))
    {
LABEL_523:
      v218 = *((_QWORD *)v3 + 582);
      goto LABEL_524;
    }
LABEL_522:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Cu, v228, (const AudioBufferList *)v487, &inInputBufferLists);
    goto LABEL_523;
  }
LABEL_524:
  if ((v218 & 0x1000000000) != 0 && (*((_BYTE *)v3 + 4676) & 0x10) != 0 && *((_QWORD *)v3 + 383))
  {
    v485 = (AudioBufferList *)v213;
    v481 = v181;
    v482 = v180;
    v483 = v177;
    LODWORD(v484) = v178;
    v229 = 0;
    v230 = (float *)*((_QWORD *)v3 + 523);
    v477 = (AudioUnitParameterValue *)((char *)v3 + 4184);
    v512.realp = v230;
    LODWORD(v512.imagp) = *((_DWORD *)v3 + 1049);
    v478 = (AudioUnitParameterValue *)((char *)v3 + 4200);
    v506 = (const AudioBufferList *)*((_QWORD *)v3 + 525);
    v507 = *((_DWORD *)v3 + 1053);
    v479 = (AudioUnitParameterValue *)((char *)v3 + 4216);
    v504 = *((_QWORD *)v3 + 527);
    v505 = *((_DWORD *)v3 + 1057);
    v480 = (AudioUnitParameterValue *)((char *)v3 + 4232);
    v502 = *((_QWORD *)v3 + 529);
    v503 = *((_DWORD *)v3 + 1061);
    v476 = (AudioUnitParameterValue *)((char *)v3 + 4248);
    v500 = *((_QWORD *)v3 + 531);
    v501 = *((_DWORD *)v3 + 1065);
    do
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x64u, 4u, v229, *((AudioUnitParameterValue *)&v512.realp + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x65u, 4u, v229, *((AudioUnitParameterValue *)&v506 + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x66u, 4u, v229, *((AudioUnitParameterValue *)&v504 + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x67u, 4u, v229, *((AudioUnitParameterValue *)&v502 + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 383), 0x68u, 4u, v229, *((AudioUnitParameterValue *)&v500 + v229), 0);
      ++v229;
    }
    while (v229 != 3);
    *(_QWORD *)&v509.mNumberBuffers = 1;
    *(_QWORD *)&v509.mBuffers[0].mNumberChannels = 0;
    v509.mBuffers[0].mData = 0;
    v509.mBuffers[0] = *(AudioBuffer *)(*((_QWORD *)v3 + 504) + 8);
    v513.realp = (float *)&v485->mNumberBuffers;
    v513.imagp = (float *)v487;
    v508.mSampleTime = *((Float64 *)v3 + 428);
    v508.mHostTime = (UInt64)&v509;
    v508.mRateScalar = 0.0;
    v508.mWordClockTime = 0;
    v498 = 512;
    v231 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v231;
    v232 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v232;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 383), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v513, 4u, (AudioBufferList **)&v508);
    HIDWORD(v490) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0xAu, 0, 0, (AudioUnitParameterValue *)&v490 + 1);
    v233 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x64u, v233, *((const AudioBufferList **)v3 + 428), &inInputBufferLists);
      v233 = *((unsigned int *)v3 + 127);
      v177 = v483;
      v178 = (int)v484;
      v181 = v481;
      v180 = v482;
      v234 = v476;
      if (*((_BYTE *)v3 + 15897))
        goto LABEL_535;
    }
    else
    {
      v177 = v483;
      v178 = (int)v484;
      v181 = v481;
      v180 = v482;
      v234 = v476;
    }
    if (!*((_BYTE *)v3 + 15898))
    {
LABEL_536:
      AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x64u, 4u, 0, v477);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x65u, 4u, 0, v478);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x66u, 4u, 0, v479);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x67u, 4u, 0, v480);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 383), 0x68u, 4u, 0, v234);
      goto LABEL_537;
    }
LABEL_535:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x65u, v233, &v509, &inInputBufferLists);
    goto LABEL_536;
  }
LABEL_537:
  if (v177 == 2)
  {
    VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v180, v178, (BOOL *)&v491, *(AudioUnitParameterValue *)&v216);
  }
  else if (v177 == 1)
  {
    VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v180, v178, &v491, v215);
  }
  if (v181 == 1)
    VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, HIBYTE(v497) != 0, v495, v180, v491 != 0);
  else
    VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, HIBYTE(v497) != 0, v493, v180, v491 != 0);
  LODWORD(v506) = 0;
  if ((*((_QWORD *)v3 + 582) & 0x1000000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x1000000000000) != 0)
  {
    v235 = *((_QWORD *)v3 + 395);
    if (v235)
    {
      MEMORY[0x1E0C80A78](v235);
      *((_OWORD *)&v475 - 3) = 0u;
      *((_OWORD *)&v475 - 2) = 0u;
      *((_OWORD *)&v475 - 4) = 0u;
      *((_DWORD *)&v475 - 16) = 3;
      *(double *)&v238 = MEMORY[0x1E0C80A78](v236);
      v474 = 0;
      *((_OWORD *)&v475 - 3) = v238;
      *((_OWORD *)&v475 - 2) = v238;
      *((_OWORD *)&v475 - 4) = v238;
      *((_DWORD *)&v475 - 16) = v239;
      *(_OWORD *)(v240 - 56) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
      *(_OWORD *)(v240 - 40) = *(_OWORD *)(*((_QWORD *)v3 + 431) + 8);
      *(_OWORD *)(v240 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
      v241 = *((_QWORD *)v3 + 504);
      *(_OWORD *)(&v475 - 7) = *(_OWORD *)(v241 + 8);
      *(_OWORD *)(&v475 - 5) = *(_OWORD *)(v241 + 24);
      *(_OWORD *)(&v475 - 3) = *(_OWORD *)(v241 + 40);
      v508.mSampleTime = v242;
      v508.mHostTime = (UInt64)(&v475 - 8);
      *(_OWORD *)&v509.mNumberBuffers = *((_OWORD *)v3 + 1084);
      if ((v243 & v244 & 0x400000000000000) != 0)
      {
        v245 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 405);
        if (v245)
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          AudioUnitGetParameter(v245, 0, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 395), 0, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 395), 0xDu, 0, 0, (AudioUnitParameterValue *)&v506);
          v237 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 395);
        }
      }
      v246 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v246;
      v247 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v247;
      AudioUnitProcessMultiple(v237, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 2u, (AudioBufferList **)&v509);
      v248 = *((unsigned int *)v3 + 127);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Fu, v248, *((const AudioBufferList **)v3 + 2168), &inInputBufferLists);
        v248 = *((unsigned int *)v3 + 127);
        v249 = (const AudioBufferList *)*((_QWORD *)v3 + 2169);
        if (*((_BYTE *)v3 + 15897))
        {
LABEL_556:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x80u, v248, v249, &inInputBufferLists);
          goto LABEL_557;
        }
      }
      else
      {
        v249 = (const AudioBufferList *)*((_QWORD *)v3 + 2169);
      }
      if (*((_BYTE *)v3 + 15898))
        goto LABEL_556;
    }
  }
LABEL_557:
  v250 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((_QWORD *)v3 + 432) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 16), *((unsigned int *)v3 + 1071));
  v251 = *((_QWORD *)v3 + 582);
  if ((v251 & 0x800000) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0 && *((_QWORD *)v3 + 370) && v492 == 1.0)
  {
    v250 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((_QWORD *)v3 + 2131) + 16), *(const void **)(*((_QWORD *)v3 + 504) + 48), *((unsigned int *)v3 + 1071));
    v251 = *((_QWORD *)v3 + 582);
  }
  if ((v251 & 0x200000000000) != 0)
  {
    v252 = *((_QWORD *)v3 + 584);
    if ((v252 & 0x200000000000) != 0)
    {
      if (*((_QWORD *)v3 + 392))
      {
        LODWORD(v513.realp) = 1092616192;
        if ((v251 & v252 & 0x80000000000000) != 0)
        {
          v250 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
          if (v250)
          {
            v250 = (OpaqueAudioComponentInstance *)AudioUnitGetParameter(v250, 9u, 0, 0, (AudioUnitParameterValue *)&v513);
            v251 = *((_QWORD *)v3 + 582);
          }
        }
        if ((v251 & 0x80000000) != 0 && (*((_BYTE *)v3 + 4675) & 0x80) != 0 && *((_QWORD *)v3 + 378))
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          LODWORD(v508.mSampleTime) = 0;
          v509.mNumberBuffers = 0;
          AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0x18u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0x19u, 0, 0, (AudioUnitParameterValue *)&v508);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 5u, 0, 0, (AudioUnitParameterValue *)&v509.mNumberBuffers);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 3u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 4u, 0, 0, *(AudioUnitParameterValue *)&v508.mSampleTime, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 5u, 0, 0, *(AudioUnitParameterValue *)&v509.mNumberBuffers, 0);
          v250 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 6u, 0, 0, *(AudioUnitParameterValue *)&v513.realp, 0);
        }
        MEMORY[0x1E0C80A78](v250);
        v474 = 0;
        *((_OWORD *)&v475 - 3) = 0u;
        *((_OWORD *)&v475 - 2) = 0u;
        *((_DWORD *)&v475 - 12) = 2;
        v253 = *((_QWORD *)v3 + 428);
        *(&v475 - 4) = *(_QWORD *)(v253 + 16);
        *(&v475 - 5) = *(_QWORD *)(v253 + 8);
        v254 = *((_QWORD *)v3 + 431);
        v474 = *(_QWORD *)(v254 + 16);
        *(&v475 - 3) = *(_QWORD *)(v254 + 8);
        *(double *)&v256 = MEMORY[0x1E0C80A78](v255);
        *((_OWORD *)&v475 - 3) = v256;
        *((_OWORD *)&v475 - 2) = v256;
        *((_DWORD *)&v475 - 12) = v257;
        MEMORY[0x1E0C80A78](v258);
        *(&v475 - 3) = 0;
        v474 = 0;
        *(&v475 - 4) = 0;
        *((_DWORD *)&v475 - 8) = 1;
        v259 = *((_QWORD *)v3 + 432);
        *(_QWORD *)(v260 - 32) = *(_QWORD *)(v259 + 16);
        *(_QWORD *)(v260 - 40) = *(_QWORD *)(v259 + 8);
        v261 = *((_QWORD *)v3 + 504);
        *(_QWORD *)(v260 - 16) = *(_QWORD *)(v261 + 32);
        *(_QWORD *)(v260 - 24) = *(_QWORD *)(v261 + 24);
        v474 = *(_QWORD *)(v259 + 16);
        *(&v475 - 3) = *(_QWORD *)(v259 + 8);
        v508.mSampleTime = v262;
        v508.mHostTime = v263;
        *(Float64 *)&v509.mNumberBuffers = v262;
        *(_QWORD *)&v509.mBuffers[0].mNumberChannels = &v475 - 4;
        v264 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v264;
        v265 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v265;
        v498 = 512;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 392), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 2u, (AudioBufferList **)&v509);
        v266 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x81u, v266, *((const AudioBufferList **)v3 + 428), &inInputBufferLists);
          v266 = *((unsigned int *)v3 + 127);
          v267 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
          if (*((_BYTE *)v3 + 15897))
            goto LABEL_578;
        }
        else
        {
          v267 = (const AudioBufferList *)*((_QWORD *)v3 + 431);
        }
        if (!*((_BYTE *)v3 + 15898))
        {
LABEL_579:
          v251 = *((_QWORD *)v3 + 582);
          goto LABEL_580;
        }
LABEL_578:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x82u, v266, v267, &inInputBufferLists);
        goto LABEL_579;
      }
    }
  }
LABEL_580:
  if ((v251 & 0x400000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x400000000000) != 0)
  {
    v268 = *((_QWORD *)v3 + 393);
    if (v268)
    {
      MEMORY[0x1E0C80A78](v268);
      *((_OWORD *)&v475 - 3) = 0u;
      *((_OWORD *)&v475 - 2) = 0u;
      *((_DWORD *)&v475 - 12) = 2;
      *(double *)&v270 = MEMORY[0x1E0C80A78](v269);
      v474 = 0;
      *((_OWORD *)&v475 - 3) = v270;
      *((_OWORD *)&v475 - 2) = v270;
      *((_DWORD *)&v475 - 12) = v271;
      *(_OWORD *)(v272 - 40) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
      *(_OWORD *)(v272 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 2168) + 8);
      *(_OWORD *)(&v475 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 504) + 8);
      *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2169) + 8);
      *(double *)&v274 = MEMORY[0x1E0C80A78](v273);
      *((_OWORD *)&v475 - 3) = v274;
      *((_OWORD *)&v475 - 2) = v274;
      *((_DWORD *)&v475 - 12) = v275;
      *(double *)&v278 = MEMORY[0x1E0C80A78](v276);
      v474 = 0;
      *((_OWORD *)&v475 - 3) = v278;
      *((_OWORD *)&v475 - 2) = v278;
      *((_DWORD *)&v475 - 12) = v279;
      v280 = *((_QWORD *)v3 + 2170);
      *(_OWORD *)(v281 - 40) = *(_OWORD *)(v280 + 8);
      *(_OWORD *)(v281 - 24) = *(_OWORD *)(v280 + 24);
      *(_OWORD *)(&v475 - 5) = *(_OWORD *)(v280 + 40);
      *(_OWORD *)(&v475 - 3) = *(_OWORD *)(v280 + 56);
      if ((v282 & v283 & 0x1000000000000) != 0)
      {
        v284 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 395);
        if (v284)
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          AudioUnitGetParameter(v284, 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 0, 4u, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 396), 0, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          v277 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 393);
        }
      }
      *(_QWORD *)&v508.mSampleTime = &v475 - 6;
      v508.mHostTime = (UInt64)(&v475 - 6);
      *(_QWORD *)&v509.mNumberBuffers = &v475 - 6;
      *(_QWORD *)&v509.mBuffers[0].mNumberChannels = &v475 - 6;
      v285 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v285;
      v286 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v286;
      v498 = 512;
      AudioUnitProcessMultiple(v277, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 2u, (AudioBufferList **)&v509);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x83u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2170), &inInputBufferLists);
      v251 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v251 & 0x2000000000000) != 0)
  {
    v287 = *((_QWORD *)v3 + 584);
    if ((v287 & 0x2000000000000) != 0)
    {
      v288 = *((_QWORD *)v3 + 396);
      if (v288)
      {
        if ((v251 & v287 & 0x400000000000) != 0 && *((_QWORD *)v3 + 393))
        {
          MEMORY[0x1E0C80A78](v288);
          v474 = 0;
          *((_OWORD *)&v475 - 3) = 0u;
          *((_OWORD *)&v475 - 2) = 0u;
          *((_DWORD *)&v475 - 12) = 2;
          v289 = *((_QWORD *)v3 + 2170);
          *(_OWORD *)(&v475 - 5) = *(_OWORD *)(v289 + 8);
          *(_OWORD *)(&v475 - 3) = *(_OWORD *)(v289 + 24);
          *(_QWORD *)&v508.mSampleTime = &v475 - 6;
          *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 431);
          v290 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&inInputBufferLists.mRateScalar = v290;
          v291 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v291;
          v498 = 512;
          AudioUnitProcessMultiple(v292, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 431), &inInputBufferLists);
          v251 = *((_QWORD *)v3 + 582);
        }
      }
    }
  }
  if ((v251 & 0x20000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0 && *((_QWORD *)v3 + 400))
    v293 = 1;
  else
    v293 = (v251 & 0x80000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 0x80) != 0 && *((_QWORD *)v3 + 402) != 0;
  LODWORD(v504) = 0;
  LODWORD(v502) = 0;
  v294 = AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v504);
  v295 = *(float *)&v504 < 1.0 && v293;
  if (v293)
  {
    LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
    if (*(float *)&v504 < 1.0)
      vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, *((unsigned int *)v3 + 127));
    vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
    v296 = *((_QWORD *)v3 + 582);
  }
  else
  {
    v296 = *((_QWORD *)v3 + 582);
    if ((v296 & 0x40000000000) == 0 || (*((_BYTE *)v3 + 4677) & 4) == 0 || !*((_QWORD *)v3 + 389))
      goto LABEL_624;
  }
  if ((v296 & 0x800000000000) != 0 && (*((_BYTE *)v3 + 4677) & 0x80) != 0 && *((_QWORD *)v3 + 394))
  {
LABEL_624:
    LODWORD(v487) = 0;
    goto LABEL_625;
  }
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
  {
    v294 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 428), &buf);
    v296 = *((_QWORD *)v3 + 582);
  }
  LODWORD(v487) = 1;
LABEL_625:
  if ((v296 & 0x4000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 4) != 0)
  {
    v294 = *((_QWORD *)v3 + 397);
    if (v294)
    {
      v498 = 512;
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 428);
      v508.mSampleTime = *((Float64 *)v3 + 429);
      v294 = AudioUnitProcessMultiple((AudioUnit)v294, &v498, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v508);
      v297 = *((_QWORD *)v3 + 2144);
      v300 = *(_DWORD *)(v297 + 12);
      v298 = v297 + 12;
      v299 = v300;
      v301 = *(void **)(v298 + 4);
      if ((_DWORD)v294
        || (v294 = AudioUnitGetProperty(*((AudioUnit *)v3 + 397), 0x3ECu, 0, 0, *(void **)(v298 + 4), (UInt32 *)v298),
            (_DWORD)v294))
      {
        if (v299 >= 4)
          memset_pattern16(v301, &unk_1B6627B80, v299 & 0xFFFFFFFC);
      }
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        v294 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x72u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 428), &buf);
      v296 = *((_QWORD *)v3 + 582);
    }
  }
  v485 = (AudioBufferList *)*((_QWORD *)v3 + 2202);
  if ((v296 & 0x20000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 0x20) != 0)
  {
    v294 = *((_QWORD *)v3 + 400);
    if (v294)
    {
      v302 = *((_QWORD *)v3 + 499);
      v508.mSampleTime = *((Float64 *)v3 + 428);
      v508.mHostTime = v302;
      *(_QWORD *)&v508.mRateScalar = (char *)v3 + 16808;
      v303 = *((_QWORD *)v3 + 501);
      *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 429);
      *(_QWORD *)&v509.mBuffers[0].mNumberChannels = v303;
      v509.mBuffers[0].mData = v485;
      v498 = 512;
      v304 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v304;
      v305 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v305;
      AudioUnitProcessMultiple((AudioUnit)v294, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v508, 3u, (AudioBufferList **)&v509);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, &v499);
      v294 = AudioUnitGetParameter(*((AudioUnit *)v3 + 400), 1u, 0, 0, (AudioUnitParameterValue *)v3 + 4353);
      if ((*((_BYTE *)v3 + 4664) & 2) == 0 || (*((_BYTE *)v3 + 4680) & 2) == 0 || !*((_QWORD *)v3 + 412))
        goto LABEL_652;
      v306 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400);
      v307 = 2;
      goto LABEL_651;
    }
  }
  if ((v296 & 0x80000000000000) == 0 || (*((_BYTE *)v3 + 4678) & 0x80) == 0)
  {
    v308 = 1;
    goto LABEL_656;
  }
  v294 = *((_QWORD *)v3 + 402);
  v308 = 1;
  if (!v294)
    goto LABEL_656;
  MEMORY[0x1E0C80A78](v294);
  *(&v475 - 3) = 0;
  v474 = 0;
  *(&v475 - 4) = 0;
  *((_DWORD *)&v475 - 8) = 1;
  *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2170) + 8);
  AudioUnitSetParameter(v309, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4172), 0);
  v310 = *((_QWORD *)v3 + 431);
  *(_QWORD *)&v508.mSampleTime = &v475 - 4;
  v508.mHostTime = v310;
  v508.mRateScalar = *((Float64 *)v3 + 499);
  v508.mWordClockTime = (UInt64)v3 + 16808;
  v311 = *((_QWORD *)v3 + 436);
  *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 429);
  *(_QWORD *)&v509.mBuffers[0].mNumberChannels = v311;
  v509.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 501);
  v510 = v485;
  v312 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v312;
  v313 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v313;
  v498 = 512;
  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 402), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v508, 4u, (AudioBufferList **)&v509);
  v294 = AudioUnitGetParameter(*((AudioUnit *)v3 + 402), 2u, 0, 0, &v499);
  if ((*((_BYTE *)v3 + 4664) & 2) != 0 && (*((_BYTE *)v3 + 4680) & 2) != 0 && *((_QWORD *)v3 + 412))
  {
    v306 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402);
    v307 = 9;
LABEL_651:
    AudioUnitGetParameter(v306, v307, 0, 0, (AudioUnitParameterValue *)&v502);
    v294 = AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v502, 0);
  }
LABEL_652:
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    v294 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &inInputBufferLists);
  v308 = 0;
LABEL_656:
  v314 = *((_QWORD *)v3 + 582);
  if ((v314 & 0x200000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 2) != 0)
  {
    v294 = *((_QWORD *)v3 + 404);
    if (v294)
    {
      v508.mSampleTime = *((Float64 *)v3 + 428);
      *(_QWORD *)&v509.mNumberBuffers = 0;
      v315 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v315;
      v316 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v316;
      v498 = 512;
      v317 = *((_QWORD *)v3 + 502);
      v318 = *(void **)(v317 + 16);
      v319 = *(_DWORD *)(v317 + 12);
      v294 = AudioUnitProcessMultiple((AudioUnit)v294, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
      if ((_DWORD)v294
        || (v294 = AudioUnitGetProperty(*((AudioUnit *)v3 + 404), 0x13EDu, 0, 0, *(void **)(*((_QWORD *)v3 + 502) + 16), (UInt32 *)(*((_QWORD *)v3 + 502) + 12)), (_DWORD)v294))
      {
        if (v319 >= 4)
          memset_pattern16(v318, &unk_1B6627B80, v319 & 0xFFFFFFFC);
      }
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        v294 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x52u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 502), &inInputBufferLists);
      v314 = *((_QWORD *)v3 + 582);
    }
  }
  if ((v314 & 0x400000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 4) != 0)
  {
    if (*((_QWORD *)v3 + 405))
    {
      v320 = *(_DWORD *)(v488 + 280);
      if (v320)
      {
        if (v320 == 1)
        {
          v321 = (char *)v3 + 1104;
          v322 = (uint64_t *)((char *)v3 + 1128);
        }
        else
        {
          v321 = (char *)v3 + 1112;
          v322 = (uint64_t *)((char *)v3 + 1120);
        }
        v323 = *v322;
        v324 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2146);
        v325 = *(const float **)(*(_QWORD *)v321 + 40);
        v326 = *((double *)v3 + 2142);
        v327 = *((unsigned int *)v3 + 127);
        inInputBufferLists.mSampleTime = *(Float64 *)(*(_QWORD *)&v326 + 16);
        inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v327;
        if (v324)
        {
          VPTimeFreqConverter::Analyze(v324, v325, (DSPSplitComplex *)&inInputBufferLists);
          v326 = *((double *)v3 + 2142);
          v327 = *((unsigned int *)v3 + 127);
        }
        v328 = (VPTimeFreqConverter *)*((_QWORD *)v3 + 2147);
        v329 = *(const float **)(v323 + 40);
        inInputBufferLists.mSampleTime = *(Float64 *)(*(_QWORD *)&v326 + 32);
        inInputBufferLists.mHostTime = *(_QWORD *)&inInputBufferLists.mSampleTime + 4 * v327;
        if (v328)
        {
          VPTimeFreqConverter::Analyze(v328, v329, (DSPSplitComplex *)&inInputBufferLists);
          v326 = *((double *)v3 + 2142);
          LODWORD(v327) = *((_DWORD *)v3 + 127);
        }
        v508.mSampleTime = v326;
        *(Float64 *)&v509.mNumberBuffers = v326;
        v498 = 512;
        v330 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v330;
        v331 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v331;
        v332 = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 405), &v498, &inInputBufferLists, v327, 1u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2142), &inInputBufferLists);
        v333 = *((_QWORD *)v3 + 2143);
        v336 = *(_DWORD *)(v333 + 12);
        v334 = v333 + 12;
        v335 = v336;
        v337 = *(void **)(v334 + 4);
        if ((v332 || AudioUnitGetProperty(*((AudioUnit *)v3 + 405), 0x15FEu, 0, 0, *(void **)(v334 + 4), (UInt32 *)v334))&& v335 >= 4)
        {
          memset_pattern16(v337, &unk_1B6627B80, v335 & 0xFFFFFFFC);
        }
        v338 = (_DWORD *)(v488 + 408);
        v294 = AudioUnitGetParameter(*((AudioUnit *)v3 + 405), 0, 0, 0, (AudioUnitParameterValue *)(v488 + 408));
        if ((_DWORD)v294)
          *v338 = 0;
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          v294 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Eu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2143), &inInputBufferLists);
        v314 = *((_QWORD *)v3 + 582);
      }
    }
  }
  if ((v314 & 0x40000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x40000000000) != 0 && *((_QWORD *)v3 + 389))
  {
    MEMORY[0x1E0C80A78](v294);
    *(&v475 - 4) = 0;
    *(&v475 - 3) = 0;
    *((_DWORD *)&v475 - 8) = 1;
    MEMORY[0x1E0C80A78](v339);
    *(&v475 - 4) = 0;
    *(&v475 - 3) = 0;
    v474 = 0;
    *((_DWORD *)&v475 - 8) = v342;
    if ((v340 & v341 & 0x400000000000) != 0)
    {
      v343 = &v475 - 3;
      v344 = &v475 - 3;
      if (*((_QWORD *)v3 + 393))
      {
        v345 = *((_QWORD *)v3 + 2170);
        *(_OWORD *)v343 = *(_OWORD *)(v345 + 8);
        v346 = (_OWORD *)(v345 + 40);
LABEL_699:
        *(_OWORD *)v344 = *v346;
        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
        *(_QWORD *)&v508.mSampleTime = &v475 - 4;
        v508.mHostTime = (UInt64)(&v475 - 4);
        v347 = *((_QWORD *)v3 + 501);
        v508.mRateScalar = *((Float64 *)v3 + 511);
        v508.mWordClockTime = v347;
        *(_QWORD *)&v508.mSMPTETime.mSubframes = v485;
        *(_QWORD *)&v508.mSMPTETime.mType = 0;
        v348 = *((_QWORD *)v3 + 582);
        if ((v348 & 0x800000000000) != 0 && (*((_BYTE *)v3 + 4677) & 0x80) != 0 && *((_QWORD *)v3 + 394))
          *(_QWORD *)&v508.mSMPTETime.mType = *((_QWORD *)v3 + 507);
        if (!v295)
          v508.mWordClockTime = 0;
        v349 = *((_QWORD *)v3 + 509);
        *(_QWORD *)&v509.mNumberBuffers = 0;
        *(_QWORD *)&v509.mBuffers[0].mNumberChannels = v349;
        v509.mBuffers[0].mData = 0;
        if ((v348 & 0x2000000) != 0
          && (v350 = *((_QWORD *)v3 + 584), (v350 & 0x2000000) != 0)
          && (v351 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 372)) != 0
          && (v348 & v350 & 0x200000) != 0
          && *((_QWORD *)v3 + 368))
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          *(_QWORD *)&v508.mSMPTETime.mType = *((_QWORD *)v3 + 507);
          AudioUnitGetParameter(v351, 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0x2Au, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 389), 0x29u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
        }
        else if ((v348 & 0x800000) != 0 && (*((_BYTE *)v3 + 4674) & 0x80) != 0 && *((_QWORD *)v3 + 370) && v492 == 1.0)
        {
          *(_QWORD *)&v508.mSMPTETime.mType = *((_QWORD *)v3 + 2131);
        }
        v352 = 4008;
        if (v295)
          v352 = 3992;
        v353 = *(void **)((char *)v3 + v352);
        if (v295)
          v354 = 3448;
        else
          v354 = 3432;
        *(_QWORD *)&v509.mNumberBuffers = *(_QWORD *)((char *)v3 + v354);
        v509.mBuffers[0].mData = v353;
        v355 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v355;
        v356 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v356;
        v498 = 512;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 389), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v508, 3u, (AudioBufferList **)&v509);
        if ((v308 | !v295) == 1)
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x20u, 0, 0, &v499);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 389), 0x20u, 0, 0, (AudioUnitParameterValue *)v3 + 4353);
        }
        v357 = *((unsigned int *)v3 + 127);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v357, *(const AudioBufferList **)((char *)v3 + v354), &inInputBufferLists);
          v357 = *((unsigned int *)v3 + 127);
          v358 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
          if (*((_BYTE *)v3 + 15897))
            goto LABEL_729;
        }
        else
        {
          v358 = (const AudioBufferList *)*((_QWORD *)v3 + 499);
        }
        if (!*((_BYTE *)v3 + 15898))
        {
LABEL_730:
          v314 = *((_QWORD *)v3 + 582);
          goto LABEL_731;
        }
LABEL_729:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v357, v358, &inInputBufferLists);
        goto LABEL_730;
      }
    }
    else
    {
      v343 = &v475 - 3;
      v344 = &v475 - 3;
    }
    *(_OWORD *)v343 = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
    v346 = (_OWORD *)(*((_QWORD *)v3 + 432) + 8);
    goto LABEL_699;
  }
LABEL_731:
  if ((v314 & 0x800000000000) != 0 && (*((_BYTE *)v3 + 4677) & 0x80) != 0 && *((_QWORD *)v3 + 394))
  {
    LODWORD(v500) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x25u, 0, 0, (AudioUnitParameterValue *)&v500);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 394), 0, 4u, 2u, *(AudioUnitParameterValue *)&v500, 0);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 394), 0, 4u, 3u, *(AudioUnitParameterValue *)&v500, 0);
    if ((*((_BYTE *)v3 + 4657) & 8) != 0 && (*((_BYTE *)v3 + 4673) & 8) != 0)
    {
      if (*((_QWORD *)v3 + 358))
        v359 = (char *)v3 + 17384;
      else
        v359 = (char *)v3 + 3424;
    }
    else
    {
      v359 = (char *)v3 + 3424;
    }
    v360 = memcpy(*(void **)(*((_QWORD *)v3 + 2187) + 16), *(const void **)(*(_QWORD *)v359 + 16), *(unsigned int *)(*(_QWORD *)v359 + 12));
    MEMORY[0x1E0C80A78](v360);
    v474 = 0;
    *((_OWORD *)&v475 - 3) = 0u;
    *((_OWORD *)&v475 - 2) = 0u;
    *((_OWORD *)&v475 - 5) = 0u;
    *((_OWORD *)&v475 - 4) = 0u;
    *((_DWORD *)&v475 - 20) = 4;
    *(_OWORD *)(&v475 - 9) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
    *(_OWORD *)(&v475 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
    *(_OWORD *)(&v475 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 506) + 8);
    *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 505) + 8);
    *(double *)&v362 = MEMORY[0x1E0C80A78](v361);
    v474 = 0;
    *((_OWORD *)&v475 - 3) = v362;
    *((_OWORD *)&v475 - 2) = v362;
    *((_OWORD *)&v475 - 5) = v362;
    *((_OWORD *)&v475 - 4) = v362;
    *((_DWORD *)&v475 - 20) = v363;
    *(_OWORD *)(&v475 - 9) = *(_OWORD *)(*((_QWORD *)v3 + 2183) + 8);
    *(_OWORD *)(&v475 - 7) = *(_OWORD *)(*((_QWORD *)v3 + 2185) + 8);
    *(_OWORD *)(&v475 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 2186) + 8);
    *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2184) + 8);
    *(_QWORD *)&v508.mSampleTime = &v475 - 10;
    v508.mHostTime = (UInt64)(&v475 - 10);
    *(_QWORD *)&v509.mNumberBuffers = &v475 - 10;
    *(_QWORD *)&v509.mBuffers[0].mNumberChannels = &v475 - 10;
    v364 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v364;
    v365 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v365;
    v498 = 512;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 394), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v508, 2u, (AudioBufferList **)&v509);
    v366 = *((unsigned int *)v3 + 127);
    v513.realp = *(float **)(*((_QWORD *)v3 + 2187) + 16);
    v513.imagp = &v513.realp[v366];
    v512.realp = *(float **)(*((_QWORD *)v3 + 428) + 16);
    v512.imagp = &v512.realp[v366];
    v367 = *(float **)(*((_QWORD *)v3 + 2174) + 16);
    v368 = &v367[v366];
    vDSP_zvabs(&v513, 1, v367, 1, v366);
    vDSP_zvabs(&v512, 1, v368, 1, *((unsigned int *)v3 + 127));
    vDSP_vmin(v367, 1, v368, 1, v367, 1, *((unsigned int *)v3 + 127));
    HIDWORD(v490) = 507307272;
    vDSP_vsadd(v368, 1, (const float *)&v490 + 1, v368, 1, *((unsigned int *)v3 + 127));
    vDSP_vdiv(v368, 1, v367, 1, v368, 1, *((unsigned int *)v3 + 127));
    vDSP_vmul(v512.realp, 1, v368, 1, v512.realp, 1, *((unsigned int *)v3 + 127));
    vDSP_vmul(v512.imagp, 1, v368, 1, v512.imagp, 1, *((unsigned int *)v3 + 127));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x84u, *((unsigned int *)v3 + 127), (const AudioBufferList *)(&v475 - 10), &inInputBufferLists);
    v314 = *((_QWORD *)v3 + 582);
  }
  if ((v314 & 0x2000000000000) != 0)
  {
    v369 = *((_QWORD *)v3 + 584);
    if ((v369 & 0x2000000000000) != 0)
    {
      v370 = *((_QWORD *)v3 + 396);
      if (v370)
      {
        if ((v314 & v369 & 0x800000000000) != 0 && *((_QWORD *)v3 + 394))
        {
          MEMORY[0x1E0C80A78](v370);
          v474 = 0;
          *((_OWORD *)&v475 - 3) = 0u;
          *((_OWORD *)&v475 - 2) = 0u;
          *((_DWORD *)&v475 - 12) = 2;
          *(_OWORD *)(&v475 - 5) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
          *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
          *(_QWORD *)&v508.mSampleTime = &v475 - 6;
          *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 431);
          v371 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&inInputBufferLists.mRateScalar = v371;
          v372 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v372;
          v498 = 512;
          AudioUnitProcessMultiple(v373, &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
          if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 431), &inInputBufferLists);
          v314 = *((_QWORD *)v3 + 582);
        }
      }
    }
  }
  if ((v314 & 0x800000000000) == 0
    || (v374 = *((_QWORD *)v3 + 584), (v374 & 0x800000000000) == 0)
    || !*((_QWORD *)v3 + 394))
  {
    v377 = 0;
    if ((v314 & 0x80000000000) == 0)
      goto LABEL_780;
LABEL_759:
    v378 = *((_QWORD *)v3 + 584);
    if ((v378 & 0x80000000000) == 0)
      goto LABEL_780;
    v379 = *((_QWORD *)v3 + 390);
    if (!v379 || (v314 & v378 & 0x800000000000) == 0 || !*((_QWORD *)v3 + 394))
      goto LABEL_780;
    MEMORY[0x1E0C80A78](v379);
    *(&v475 - 4) = 0;
    *(&v475 - 3) = 0;
    *((_DWORD *)&v475 - 8) = 1;
    MEMORY[0x1E0C80A78](v380);
    *(&v475 - 3) = 0;
    v474 = 0;
    *(&v475 - 4) = 0;
    *((_DWORD *)&v475 - 8) = v381;
    *(_OWORD *)(v382 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 428) + 8);
    *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 431) + 8);
    AudioUnitSetParameter(v383, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
    *(_QWORD *)&v508.mSampleTime = &v475 - 4;
    v508.mHostTime = (UInt64)(&v475 - 4);
    v384 = *((_QWORD *)v3 + 501);
    *(_QWORD *)&v508.mRateScalar = &v475 - 4;
    v508.mWordClockTime = v384;
    *(_QWORD *)&v508.mSMPTETime.mSubframes = v485;
    *(_QWORD *)&v508.mSMPTETime.mType = 0;
    *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 431);
    *(_QWORD *)&v509.mBuffers[0].mNumberChannels = 0;
    v509.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 500);
    v385 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v385;
    v386 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v386;
    v498 = 512;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v508, 3u, (AudioBufferList **)&v509);
    v387 = *((unsigned int *)v3 + 127);
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v387, *((const AudioBufferList **)v3 + 431), &inInputBufferLists);
      v387 = *((unsigned int *)v3 + 127);
      v388 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
      if (*((_BYTE *)v3 + 15897))
        goto LABEL_776;
    }
    else
    {
      v388 = (const AudioBufferList *)*((_QWORD *)v3 + 500);
    }
    if (!*((_BYTE *)v3 + 15898))
    {
LABEL_777:
      if (v377)
        vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, *(const float **)(*((_QWORD *)v3 + 500) + 16), 1, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
      v314 = *((_QWORD *)v3 + 582);
      goto LABEL_780;
    }
LABEL_776:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v387, v388, &inInputBufferLists);
    goto LABEL_777;
  }
  LODWORD(inInputBufferLists.mSampleTime) = 0;
  LODWORD(v508.mSampleTime) = 0;
  v375 = 0.0;
  if ((v314 & v374 & 0x200000) != 0)
  {
    v389 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 368);
    v376 = 0.0;
    if (v389)
    {
      AudioUnitGetParameter(v389, 0x43u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x47u, 0, 0, (AudioUnitParameterValue *)&v508);
      v376 = *(float *)&inInputBufferLists.mSampleTime;
      v375 = *(float *)&v508.mSampleTime;
      v314 = *((_QWORD *)v3 + 582);
    }
  }
  else
  {
    v376 = 0.0;
  }
  v377 = v375 != 0.0 && v376 != 0.0;
  if ((v314 & 0x80000000000) != 0)
    goto LABEL_759;
LABEL_780:
  if ((v314 & 0x100000000000) == 0)
    goto LABEL_795;
  v390 = *((_QWORD *)v3 + 584);
  if ((v390 & 0x100000000000) == 0)
    goto LABEL_795;
  v391 = *((_QWORD *)v3 + 391);
  if (!v391 || (v314 & v390 & 0x800000000000) != 0 && *((_QWORD *)v3 + 394))
    goto LABEL_795;
  MEMORY[0x1E0C80A78](v391);
  *(&v475 - 4) = 0;
  *(&v475 - 3) = 0;
  *((_DWORD *)&v475 - 8) = 1;
  MEMORY[0x1E0C80A78](v392);
  *(&v475 - 3) = 0;
  v474 = 0;
  *(&v475 - 4) = 0;
  *((_DWORD *)&v475 - 8) = v393;
  *(_OWORD *)(v394 - 24) = *(_OWORD *)(*((_QWORD *)v3 + 2167) + 8);
  *(_OWORD *)(&v475 - 3) = *(_OWORD *)(*((_QWORD *)v3 + 504) + 40);
  AudioUnitSetParameter(v395, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1054), 0);
  AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1058), 0);
  AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1062), 0);
  *(_QWORD *)&v508.mSampleTime = &v475 - 4;
  v508.mHostTime = (UInt64)(&v475 - 4);
  v396 = *((_QWORD *)v3 + 501);
  v508.mRateScalar = *((Float64 *)v3 + 511);
  v508.mWordClockTime = v396;
  *(_QWORD *)&v508.mSMPTETime.mSubframes = v485;
  *(_QWORD *)&v508.mSMPTETime.mType = 0;
  *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 431);
  *(_QWORD *)&v509.mBuffers[0].mNumberChannels = 0;
  v509.mBuffers[0].mData = (void *)*((_QWORD *)v3 + 2179);
  v397 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v397;
  v398 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v398;
  v498 = 512;
  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v508, 3u, (AudioBufferList **)&v509);
  v399 = *((unsigned int *)v3 + 127);
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x26u, v399, *((const AudioBufferList **)v3 + 431), &inInputBufferLists);
    v399 = *((unsigned int *)v3 + 127);
    v400 = (const AudioBufferList *)*((_QWORD *)v3 + 2179);
    if (*((_BYTE *)v3 + 15897))
    {
LABEL_791:
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x51u, v399, v400, &inInputBufferLists);
      goto LABEL_792;
    }
  }
  else
  {
    v400 = (const AudioBufferList *)*((_QWORD *)v3 + 2179);
  }
  if (*((_BYTE *)v3 + 15898))
    goto LABEL_791;
LABEL_792:
  if (*(float *)&v506 != 0.0)
    vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, *(const float **)(*((_QWORD *)v3 + 2179) + 16), 1, *(float **)(*((_QWORD *)v3 + 499) + 16), 1, *((unsigned int *)v3 + 127));
  v314 = *((_QWORD *)v3 + 582);
LABEL_795:
  if ((v314 & 0x40000000000) != 0 && (*((_BYTE *)v3 + 4677) & 4) != 0 && *((_QWORD *)v3 + 389))
  {
    if (!v295)
    {
LABEL_809:
      if ((*((_BYTE *)v3 + 4677) & 4) != 0)
      {
        v405 = *((_QWORD *)v3 + 389) != 0;
LABEL_812:
        v406 = v405 || v293;
        v404 = (char)v487;
        if (!v406)
        {
          LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
          v407 = *((_DWORD *)v3 + 127);
          vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((_QWORD *)v3 + 501) + 16), 1, v407);
          memcpy(*(void **)(*((_QWORD *)v3 + 429) + 16), *(const void **)(*((_QWORD *)v3 + 428) + 16), 8 * v407);
        }
        goto LABEL_850;
      }
LABEL_810:
      v405 = 0;
      goto LABEL_812;
    }
  }
  else if ((v314 & 0x80000000000) == 0
         || (*((_BYTE *)v3 + 4677) & 8) == 0
         || (*((_QWORD *)v3 + 390) ? (v401 = v295) : (v401 = 0), !v401))
  {
    if ((v314 & 0x40000000000) == 0)
      goto LABEL_810;
    goto LABEL_809;
  }
  v402 = *(float **)(*((_QWORD *)v3 + 501) + 16);
  memcpy(*(void **)(*((_QWORD *)v3 + 434) + 16), v402, 4 * *((unsigned int *)v3 + 127));
  vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 499) + 16), 1, v402, 1, v402, 1, *((unsigned int *)v3 + 127));
  v403 = *((_QWORD *)v3 + 582);
  if ((v403 & 0x200000000000000) != 0)
  {
    v404 = (char)v487;
    if ((*((_BYTE *)v3 + 4679) & 2) != 0 && *((_QWORD *)v3 + 404))
    {
      vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 502) + 16), 1, v402, 1, v402, 1, *((unsigned int *)v3 + 127));
      v403 = *((_QWORD *)v3 + 582);
    }
  }
  else
  {
    v404 = (char)v487;
  }
  if ((v403 & 0x400000000000000) != 0 && (*((_BYTE *)v3 + 4679) & 4) != 0 && *((_QWORD *)v3 + 405))
  {
    vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 2143) + 16), 1, v402, 1, v402, 1, *((unsigned int *)v3 + 127));
    v403 = *((_QWORD *)v3 + 582);
  }
  if ((v403 & 0x4000000000000) != 0 && (*((_BYTE *)v3 + 4678) & 4) != 0 && *((_QWORD *)v3 + 397))
  {
    vDSP_vmin(*(const float **)(*((_QWORD *)v3 + 2144) + 16), 1, v402, 1, v402, 1, *((unsigned int *)v3 + 127));
    v403 = *((_QWORD *)v3 + 582);
  }
  if ((v403 & 0x800) != 0)
  {
    v408 = *((_QWORD *)v3 + 584);
    if ((v408 & 0x800) != 0
      && *((_QWORD *)v3 + 358)
      && ((v403 & v408 & 0x800000000000) == 0 || !*((_QWORD *)v3 + 394)))
    {
      v409 = *((_QWORD *)v3 + 2173);
      goto LABEL_845;
    }
  }
  if ((v403 & 0x400000000000) == 0 || (*((_BYTE *)v3 + 4677) & 0x40) == 0 || !*((_QWORD *)v3 + 393))
  {
    if ((v403 & 0x800000000000) != 0 && (*((_BYTE *)v3 + 4677) & 0x80) != 0)
    {
      if (*((_QWORD *)v3 + 394))
        v412 = v377;
      else
        v412 = 1;
      v410 = *((unsigned int *)v3 + 127);
      if ((v412 & 1) == 0)
      {
        v409 = *((_QWORD *)v3 + 2187);
        goto LABEL_838;
      }
    }
    else
    {
      v410 = *((unsigned int *)v3 + 127);
    }
    v409 = *((_QWORD *)v3 + 428);
LABEL_838:
    v411 = *(const float **)(v409 + 16);
    goto LABEL_846;
  }
  v409 = *((_QWORD *)v3 + 2170);
LABEL_845:
  v411 = *(const float **)(v409 + 16);
  v410 = *((unsigned int *)v3 + 127);
LABEL_846:
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, v410, (const AudioBufferList *)v409, &buf);
  v413 = *(float **)(*((_QWORD *)v3 + 429) + 16);
  vDSP_vmul(v411, 1, v402, 1, v413, 1, *((unsigned int *)v3 + 127));
  vDSP_vmul(&v411[*((unsigned int *)v3 + 127) + 1], 1, v402 + 1, 1, &v413[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
  v411[*((unsigned int *)v3 + 127)] = v411[*((unsigned int *)v3 + 127)] * v402[*((_DWORD *)v3 + 127) - 1];
LABEL_850:
  if (((v404 & 1) != 0 || (*((_BYTE *)v3 + 4661) & 4) != 0 && (*((_BYTE *)v3 + 4677) & 4) != 0 && *((_QWORD *)v3 + 389))
    && (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898)))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
  }
  if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
  {
    v414 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
    if (v414)
    {
      if (*((_DWORD *)v3 + 3098) == 12)
      {
        v415 = (AudioUnitParameterValue *)*((_QWORD *)v3 + 2157);
        *v415 = v499;
        v416 = *(_DWORD *)(v488 + 184);
        v417 = *((_DWORD *)v3 + 127);
        v418 = v416 % v417;
        v419 = vcvtms_u32_f32((float)v416 / (float)v417);
        if (v418)
          v420 = (float)((float)((float)v418 / (float)v417) * v415[v419 + 1])
               + (float)((float)(1.0 - (float)((float)v418 / (float)v417)) * v415[v419]);
        else
          v420 = v415[v419];
        v499 = v420;
        memmove(v415 + 1, v415, *((_QWORD *)v3 + 2158) - (_QWORD)v415 - 4);
        v414 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
      }
      AudioUnitSetParameter(v414, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3117), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1046), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1050), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 3u, 0, 0, v499, 0);
      LODWORD(v513.realp) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 0x1Cu, 0, 0, (AudioUnitParameterValue *)&v513);
      if (*(float *)&v513.realp == 1.0)
      {
        LODWORD(inInputBufferLists.mSampleTime) = -1082130432;
        AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 0x1Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
        v421 = *(float *)&inInputBufferLists.mSampleTime != 2.0 || *(float *)&inInputBufferLists.mSampleTime == 1.0;
        v422 = 168;
        if (!v421)
          v422 = 176;
        v423 = (char *)v3 + v422;
        v424 = (OpaqueAudioComponentInstance *)*((_QWORD *)v423 + 347);
        if (v424)
        {
          v425 = (AudioUnit *)(v423 + 2776);
          LODWORD(v508.mSampleTime) = 0;
          if (!AudioUnitGetPropertyInfo(v424, 0xED8u, 0, 0, (UInt32 *)&v508, 0))
          {
            v426 = (void *)*((_QWORD *)v3 + 2180);
            if (*((_QWORD *)v3 + 2181) - (_QWORD)v426 >= (unint64_t)LODWORD(v508.mSampleTime))
              AudioUnitGetProperty(*v425, 0xED8u, 0, 0, v426, (UInt32 *)&v508);
          }
          v509.mNumberBuffers = 0;
          AudioUnitGetParameter(*v425, 1u, 0, 0, (AudioUnitParameterValue *)&v509.mNumberBuffers);
          AudioUnitSetProperty(*((AudioUnit *)v3 + 407), 0x846u, 0, 0, *((const void **)v3 + 2180), vcvts_n_u32_f32(*(float *)&v509.mNumberBuffers, 2uLL));
        }
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
      LODWORD(v512.realp) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 368), 0x2Du, 0, 0, (AudioUnitParameterValue *)&v512);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x23u, 0, 0, *(AudioUnitParameterValue *)&v512.realp, 0);
      LODWORD(v500) = 1120403456;
      v427 = *((_QWORD *)v3 + 582);
      if ((v427 & 0x10000000) != 0
        && (*((_BYTE *)v3 + 4675) & 0x10) != 0
        && (v428 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 375)) != 0
        || (v427 & 0x10000000000000) != 0
        && (*((_BYTE *)v3 + 4678) & 0x10) != 0
        && (v428 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 399)) != 0
        || (v427 & 0x20000000000000) != 0
        && (*((_BYTE *)v3 + 4678) & 0x20) != 0
        && (v428 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 400)) != 0)
      {
        v429 = 2;
      }
      else
      {
        if ((v427 & 0x80000000000000) == 0
          || (*((_BYTE *)v3 + 4678) & 0x80) == 0
          || (v428 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 402)) == 0)
        {
          v430 = 100.0;
          goto LABEL_892;
        }
        v429 = 9;
      }
      AudioUnitGetParameter(v428, v429, 0, 0, (AudioUnitParameterValue *)&v500);
      v430 = *(float *)&v500;
LABEL_892:
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x25u, 0, 0, v430, 0);
      if (*((_DWORD *)v3 + 3098) == 12)
      {
        v431 = *((_QWORD *)v3 + 510);
        v508.mSampleTime = *((Float64 *)v3 + 418);
        v508.mHostTime = v431;
        v432 = *((_QWORD *)v3 + 432);
        v508.mRateScalar = *((Float64 *)v3 + 2155);
        v508.mWordClockTime = v432;
        v433 = *((_QWORD *)v3 + 2154);
        *(_QWORD *)&v508.mSMPTETime.mSubframes = 0;
        *(_QWORD *)&v508.mSMPTETime.mType = v433;
        *(_QWORD *)&v509.mNumberBuffers = 0;
        v498 = 512;
        v434 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v434;
        v435 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v435;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 407), &v498, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v508, 1u, (AudioBufferList **)&v509);
        v490 = 4;
        AudioUnitGetProperty(*((AudioUnit *)v3 + 407), 0x15u, 0, 0, (char *)&v490 + 4, (UInt32 *)&v490);
        if (!HIDWORD(v490))
        {
          v489 = 0.0;
          AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 0xBu, 0, 0, &v489);
          vDSP_vsmul(*(const float **)(*((_QWORD *)v3 + 136) + 16), 1, &v489, *(float **)(*((_QWORD *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
        }
      }
      else
      {
        v436 = *((_QWORD *)v3 + 510);
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 418);
        inInputBufferLists.mHostTime = v436;
        v437 = *((_QWORD *)v3 + 509);
        inInputBufferLists.mRateScalar = *((Float64 *)v3 + 429);
        inInputBufferLists.mWordClockTime = v437;
        v438 = *((_QWORD *)v3 + 501);
        *(_QWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *((_QWORD *)v3 + 499);
        *(_QWORD *)&inInputBufferLists.mSMPTETime.mType = v438;
        v439 = *((_QWORD *)v3 + 434);
        *(_QWORD *)&inInputBufferLists.mSMPTETime.mHours = v485;
        *(_QWORD *)&inInputBufferLists.mFlags = v439;
        *(_QWORD *)&v509.mNumberBuffers = *((_QWORD *)v3 + 136);
        v498 = 512;
        v440 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&v508.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&v508.mRateScalar = v440;
        v441 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&v508.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&v508.mSMPTETime.mHours = v441;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 407), &v498, &v508, *((_DWORD *)v3 + 127), 8u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v509);
      }
      LODWORD(inInputBufferLists.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
      *((_DWORD *)v3 + 3118) = LODWORD(inInputBufferLists.mSampleTime);
      if ((*((_BYTE *)v3 + 4664) & 2) != 0 && (*((_BYTE *)v3 + 4680) & 2) != 0 && *((_QWORD *)v3 + 412))
      {
        AudioUnitGetParameter(*((AudioUnit *)v3 + 407), 2u, 0, 0, &v499);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 412), 0x23u, 0, 0, v499, 0);
      }
    }
  }
LABEL_900:
  v509.mNumberBuffers = 0;
  v442 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  v444 = v442;
  if (!*((_BYTE *)v3 + 2080))
  {
    if ((v442 & 1) == 0)
      goto LABEL_921;
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v443);
LABEL_909:
    v446 = *((_QWORD *)v3 + 582);
    if ((v446 & 0x2000000000000000) != 0
      && (*((_BYTE *)v3 + 4679) & 0x20) != 0
      && (v447 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 408)) != 0)
    {
      v448 = 1936748646;
    }
    else
    {
      if ((v446 & 0x1000000000000000) == 0
        || (*((_BYTE *)v3 + 4679) & 0x10) == 0
        || (v447 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407)) == 0)
      {
        *(AudioUnitParameterValue *)&v509.mNumberBuffers = v499;
        goto LABEL_919;
      }
      v448 = 2;
    }
    AudioUnitGetParameter(v447, v448, 0, 0, (AudioUnitParameterValue *)&v509.mNumberBuffers);
    goto LABEL_919;
  }
  if (*((_QWORD *)v3 + 2054))
    v445 = 1;
  else
    v445 = v442;
  if ((v445 & 1) != 0)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v443);
    if ((v444 & 1) != 0)
      goto LABEL_909;
  }
LABEL_919:
  if (*((_BYTE *)v3 + 2080))
  {
    bzero(*(void **)(*((_QWORD *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    v509.mNumberBuffers = 0;
    goto LABEL_922;
  }
LABEL_921:
  *((_DWORD *)v3 + 4110) = 0;
LABEL_922:
  if ((*((_BYTE *)v3 + 8833) & 0x80) != 0 && (*((_BYTE *)v3 + 8841) & 0x80) != 0)
  {
    v449 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 452);
    v450 = v449 ? v444 : 0;
    if (v450 == 1)
      AudioUnitSetParameter(v449, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v509.mNumberBuffers, 0);
  }
  if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  if ((*((_BYTE *)v3 + 4663) & 8) != 0 && (*((_BYTE *)v3 + 4679) & 8) != 0)
  {
    v451 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 406);
    if (v451)
    {
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
      v508.mSampleTime = inInputBufferLists.mSampleTime;
      LODWORD(v513.realp) = 512;
      v452 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v452;
      v453 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v453;
      AudioUnitProcessMultiple(v451, (AudioUnitRenderActionFlags *)&v513, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v508);
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  if (*((_BYTE *)v3 + 2085))
  {
    if ((*((_BYTE *)v3 + 4664) & 0x40) != 0 && (*((_BYTE *)v3 + 4680) & 0x40) != 0)
    {
      v454 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 417);
      if (v454)
      {
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
        v508.mSampleTime = inInputBufferLists.mSampleTime;
        LODWORD(v513.realp) = 512;
        v455 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v455;
        v456 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v456;
        AudioUnitProcessMultiple(v454, (AudioUnitRenderActionFlags *)&v513, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v508);
        if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
    }
  }
  if ((*((_QWORD *)v3 + 582) & 0x8000000000000000) != 0 && (*((_QWORD *)v3 + 584) & 0x8000000000000000) != 0)
  {
    v457 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 410);
    if (v457)
    {
      v458 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v458;
      v459 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v459;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v457, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
  }
  v460 = *((_QWORD *)v3 + 583);
  if ((v460 & 1) != 0 && (*((_BYTE *)v3 + 4680) & 1) != 0)
  {
    v461 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 411);
    if (v461)
    {
      v462 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v462;
      v463 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v463;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v461, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      v460 = *((_QWORD *)v3 + 583);
    }
  }
  if ((v460 & 2) != 0
    && (*((_BYTE *)v3 + 4680) & 2) != 0
    && (v464 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 412)) != 0)
  {
    v465 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v465;
    v466 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v466;
    LODWORD(inInputBufferLists.mSampleTime) = 512;
    AudioUnitProcess(v464, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0 && *((_QWORD *)v3 + 407))
    {
      LODWORD(v508.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 1u, 0, 0, (AudioUnitParameterValue *)&v508);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 407), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v508.mSampleTime, 0);
    }
    LODWORD(v508.mSampleTime) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 412), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v508);
    mSampleTime_low = LODWORD(v508.mSampleTime);
    if (*((float *)v3 + 572) != *(float *)&v508.mSampleTime)
    {
      if ((*((_BYTE *)v3 + 4663) & 0x10) != 0 && (*((_BYTE *)v3 + 4679) & 0x10) != 0)
      {
        v468 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 407);
        if (v468)
        {
          AudioUnitSetParameter(v468, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v508.mSampleTime, 0);
          mSampleTime_low = LODWORD(v508.mSampleTime);
        }
      }
      *((_DWORD *)v3 + 572) = mSampleTime_low;
    }
  }
  else if ((*((_BYTE *)v3 + 4663) & 0x40) != 0 && ((*((_BYTE *)v3 + 4679) & 0x40) != 0 || *((_BYTE *)v3 + 472)))
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1091) / 20.0);
    vDSP_vsmul(*(const float **)(*((_QWORD *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((_QWORD *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((_BYTE *)v3 + 15897) || *((_BYTE *)v3 + 15898))
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  VoiceProcessorV6::ProcessLevelDrivenSuppressor((uint64_t)v3, a2);
  if ((*((_BYTE *)v3 + 4664) & 8) != 0 && (*((_BYTE *)v3 + 4680) & 8) != 0)
  {
    v469 = (OpaqueAudioComponentInstance *)*((_QWORD *)v3 + 414);
    if (v469)
    {
      v470 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v470;
      v471 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v471;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      v472 = atomic_load(gWirelessChargingMatIsAttached);
      AudioUnitSetParameter(v469, 5u, 0, 0, (float)(v472 & 1), 0);
      AudioUnitProcess(*((AudioUnit *)v3 + 414), (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    }
  }
  return 0;
}

void std::default_delete<FreqDomainConvolver>::operator()[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 10));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 6));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 2));
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)a1);
  JUMPOUT(0x1BCC95CECLL);
}

void CrossCorrelator::~CrossCorrelator(CrossCorrelator *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    std::default_delete<FreqDomainConvolver>::operator()[abi:ne180100](v2);
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

void VPStrategyManager::~VPStrategyManager(VPStrategyManager *this)
{
  VPStrategyManager::~VPStrategyManager(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v7;
  __CFNotificationCenter *v8;
  __CFNotificationCenter *v9;
  __CFNotificationCenter *v10;
  __CFNotificationCenter *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          v12 = 136315394;
          v13 = "vpStrategyManager.mm";
          v14 = 1024;
          v15 = 170;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v12, 0x12u);
        }

      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v4 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v4)
      goto LABEL_18;
  }
  else
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v12 = 136315394;
    v13 = "vpStrategyManager.mm";
    v14 = 1024;
    v15 = 171;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyed VPStrategyManager", (uint8_t *)&v12, 0x12u);
  }

LABEL_18:
  if (_os_feature_enabled_impl())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, this, CFSTR("AUVoiceIODuckingLevelDefault"), 0);
    v7 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v7, this, CFSTR("AUVoiceIODuckingLevelMin"), 0);
    v8 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v8, this, CFSTR("AUVoiceIODuckingLevelMid"), 0);
    v9 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v9, this, CFSTR("AUVoiceIODuckingLevelMax"), 0);
    v10 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v10, this, CFSTR("AUVoiceIOEnableAdvancedDucking"), 0);
    v11 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v11, this, CFSTR("AUVoiceIODisableAdvancedDucking"), 0);
  }
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  vp::Context::~Context((VPStrategyManager *)((char *)this + 8));
}

uint64_t VPStrategyManager::InitializeHWInput(unint64_t **this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, unsigned int a4, AudioObjectID a5, unsigned int a6, unsigned int *a7, const AudioStreamBasicDescription *a8, const AudioChannelLayout *a9, uint64_t a10, unsigned int a11, unsigned int *a12)
{
  NSObject *v13;
  NSObject *v14;
  unint64_t *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t i;
  unint64_t *v19;
  int v20;
  VPPropertyItem *v21;
  VPPropertyItem *v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  int v27;
  std::string *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  NSObject *v37;
  NSObject *v38;
  unint64_t *v39;
  _opaque_pthread_t *v40;
  _opaque_pthread_t *v41;
  NSObject *v42;
  id v43;
  id v44;
  id v45;
  NSObject *v46;
  uint64_t VoiceProcessorVersion;
  unint64_t v48;
  unsigned int v49;
  NSObject *v50;
  id v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unsigned int v56;
  unint64_t *v57;
  _DWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unsigned int v62;
  BOOL v63;
  unint64_t *v64;
  NSObject *v65;
  id v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t *v73;
  BOOL v74;
  uint64_t *v75;
  unint64_t v76;
  NSObject *v77;
  id v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSObject *v83;
  id v84;
  unint64_t v85;
  NSObject *v86;
  id v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  id v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned __int8 v109;
  unsigned int (**v110)(void *, _QWORD);
  NSObject *v111;
  NSObject *v112;
  NSObject *v113;
  NSObject *v114;
  id v115;
  NSObject *v116;
  os_log_type_t v117;
  const char *v118;
  uint32_t v119;
  id v120;
  int v121;
  id v122;
  int v123;
  unint64_t *v124;
  _opaque_pthread_t *v125;
  _opaque_pthread_t *v126;
  NSObject *v127;
  id v128;
  int v129;
  id v130;
  int v132;
  uint64_t v133;
  NSObject *v134;
  id v135;
  NSObject *v136;
  id v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v142;
  int v146;
  uint64_t v147;
  int v148;
  int v152;
  uint64_t v153;
  _BYTE buf[44];
  _DWORD v155[4];
  std::string v156;
  __int16 v157;
  const char *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v13 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v13)
      {
        v14 = v13;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 323;
          _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  VPStrategyManager::CheckRequiredState(this, 10);
  VPStrategyManager::SetState((uint64_t)this, 4uLL, &__block_literal_global_13);
  v147 = (uint64_t)(this[25] + 15);
  v152 = (*(uint64_t (**)(void))(*(_QWORD *)v147 + 16))();
  v15 = this[25];
  v16 = (unsigned int *)(v15 + 26);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  while (*((_DWORD *)v15 + 53))
    usleep(0x1F4u);
  for (i = 0; i != 5; ++i)
  {
    v19 = this[25];
    v20 = VPStrategyManager::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::propertiesToClear[i];
    v21 = std::remove_if[abi:ne180100]<std::__wrap_iter<VPPropertyQueue::QueueEntry *>,VPPropertyQueue::DoErase::{lambda(std::__wrap_iter<VPPropertyQueue::QueueEntry *> &)#1}>((VPPropertyItem *)v19[12], (VPPropertyItem *)v19[13], v20);
    v22 = (VPPropertyItem *)v19[13];
    std::vector<VPPropertyQueue::QueueEntry>::erase((uint64_t)(v19 + 12), v21, v22);
    if (v22 == v21)
      continue;
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v23 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v23)
        continue;
    }
    else
    {
      v24 = (void *)MEMORY[0x1E0C81028];
      v25 = MEMORY[0x1E0C81028];
      v23 = v24;
    }
    v26 = v23;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      v27 = bswap32(v20);
      *(_DWORD *)&buf[1] = v27;
      if (((char)v27 - 32) > 0x5E
        || (((__int16)v27 >> 8) - 32) > 0x5E
        || ((v27 << 8 >> 24) - 32) > 0x5E
        || ((v27 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v156, v20);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v156, buf);
      }
      v28 = &v156;
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = (std::string *)v156.__r_.__value_.__r.__words[0];
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[13] - v19[12]) >> 4);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "vpPropertyQueue.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 31;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v20;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = v28;
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v29;
      _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d removed property 0x%x %s (size=%lu)", buf, 0x2Cu);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
    }

  }
  do
    v30 = __ldaxr(v16);
  while (__stlxr(v30 - 1, v16));
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v153, (uint64_t)(this[25] + 26), 0);
  v31 = (uint64_t)(this[25] + 29);
  v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  v32 = this[25];
  v33 = (unsigned int *)(v32 + 40);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v142 = v31;
  while (*((_DWORD *)v32 + 81))
    usleep(0x1F4u);
  v35 = 0;
  if (a6 && a7)
    v35 = *a7;
  v36 = 0;
  if (a11 && a12)
    v36 = *a12;
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v37 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v37)
      {
        v38 = v37;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 266;
          _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  v39 = this[25];
  v40 = pthread_self();
  v41 = (_opaque_pthread_t *)atomic_load(v39 + 31);
  if (!pthread_equal(v40, v41))
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v42 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v42)
        goto LABEL_66;
    }
    else
    {
      v42 = MEMORY[0x1E0C81028];
      v43 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 268;
      _os_log_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d vpLock must be held!", buf, 0x12u);
    }

  }
LABEL_66:
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v44 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v44)
      goto LABEL_75;
  }
  else
  {
    v44 = (id)MEMORY[0x1E0C81028];
    v45 = MEMORY[0x1E0C81028];
  }
  v46 = v44;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)&v156, v35);
    CAX4CCString::CAX4CCString((CAX4CCString *)v155, v36);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 270;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = &v156;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v155;
    _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d ref port type %s, mic port type %s", buf, 0x26u);
  }

LABEL_75:
  if (!*((_BYTE *)this + 220) || (VoiceProcessorVersion = *((unsigned int *)this + 54), !(_DWORD)VoiceProcessorVersion))
    VoiceProcessorVersion = GetVoiceProcessorVersion((const vp::Context *)(this + 1), a5, v35, HIDWORD(a10), v36);
  v48 = this[25][28];
  if (v48)
  {
    v49 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v48 + 112))(v48);
    if (v49 != (_DWORD)VoiceProcessorVersion)
    {
      if (VPStrategyMgrScope(void)::once != -1)
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
      if (VPStrategyMgrScope(void)::scope)
      {
        v50 = *(id *)VPStrategyMgrScope(void)::scope;
        if (!v50)
          goto LABEL_89;
      }
      else
      {
        v50 = MEMORY[0x1E0C81028];
        v51 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 291;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v49;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = VoiceProcessorVersion;
        _os_log_impl(&dword_1B5ED0000, v50, OS_LOG_TYPE_INFO, "%25s:%-5d Switching from VoiceProcessorV%u to VoiceProcessorV%u", buf, 0x1Eu);
      }

LABEL_89:
      v52 = this[25];
      v53 = v52[42];
      if (v53)
      {
        v54 = v52[42];
        while (1)
        {
          while (1)
          {
            v55 = (unint64_t *)v54;
            v56 = *(_DWORD *)(v54 + 32);
            if (v49 >= v56)
              break;
            v54 = *v55;
            v57 = v55;
            if (!*v55)
              goto LABEL_98;
          }
          if (v56 >= v49)
            break;
          v54 = v55[1];
          if (!v54)
          {
            v57 = v55 + 1;
            goto LABEL_98;
          }
        }
      }
      else
      {
        v57 = v52 + 42;
        v55 = v52 + 42;
LABEL_98:
        v58 = operator new(0x30uLL);
        v58[8] = v49;
        v59 = v52[28];
        v52[28] = 0;
        *((_QWORD *)v58 + 5) = v59;
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
        *((_QWORD *)v58 + 2) = v55;
        *v57 = (unint64_t)v58;
        v60 = *(_QWORD *)v52[41];
        if (v60)
        {
          v52[41] = v60;
          v58 = (_DWORD *)*v57;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v52[42], (uint64_t *)v58);
        ++v52[43];
        v52 = this[25];
        v53 = v52[42];
      }
      if (v53)
      {
        v61 = v52 + 42;
        do
        {
          v62 = *(_DWORD *)(v53 + 32);
          v63 = v62 >= VoiceProcessorVersion;
          if (v62 >= VoiceProcessorVersion)
            v64 = (unint64_t *)v53;
          else
            v64 = (unint64_t *)(v53 + 8);
          if (v63)
            v61 = (unint64_t *)v53;
          v53 = *v64;
        }
        while (*v64);
        if (v61 != v52 + 42 && VoiceProcessorVersion >= *((_DWORD *)v61 + 8))
        {
          if (VPStrategyMgrScope(void)::once != -1)
            dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
          if (VPStrategyMgrScope(void)::scope)
          {
            v65 = *(id *)VPStrategyMgrScope(void)::scope;
            if (!v65)
              goto LABEL_121;
          }
          else
          {
            v65 = MEMORY[0x1E0C81028];
            v66 = MEMORY[0x1E0C81028];
          }
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 295;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = VoiceProcessorVersion;
            _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a previously cached VoiceProcessorV%u!", buf, 0x18u);
          }

LABEL_121:
          v67 = this[25];
          v68 = v61[5];
          v61[5] = 0;
          v69 = v67[28];
          v67[28] = v68;
          if (v69)
            (*(void (**)(unint64_t))(*(_QWORD *)v69 + 8))(v69);
          VPPropertyQueue::AssignIsSetOnVPStateForAllProperties((VPPropertyQueue *)(this[25] + 12), 0);
          v70 = this[25];
          v71 = (unint64_t *)v61[1];
          if (v71)
          {
            do
            {
              v72 = v71;
              v71 = (unint64_t *)*v71;
            }
            while (v71);
          }
          else
          {
            v73 = v61;
            do
            {
              v72 = (unint64_t *)v73[2];
              v74 = *v72 == (_QWORD)v73;
              v73 = v72;
            }
            while (!v74);
          }
          if ((unint64_t *)v70[41] == v61)
            v70[41] = (unint64_t)v72;
          v75 = (uint64_t *)v70[42];
          --v70[43];
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v75, (uint64_t *)v61);
          v76 = v61[5];
          v61[5] = 0;
          if (v76)
            (*(void (**)(unint64_t))(*(_QWORD *)v76 + 8))(v76);
          operator delete(v61);
        }
      }
    }
    if (this[25][28])
    {
      v148 = 0;
      goto LABEL_167;
    }
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v77 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v77)
      goto LABEL_145;
  }
  else
  {
    v77 = MEMORY[0x1E0C81028];
    v78 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 304;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = VoiceProcessorVersion;
    _os_log_impl(&dword_1B5ED0000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating a new VoiceProcessorV%u", buf, 0x18u);
  }

LABEL_145:
  vp::create((vp *)VoiceProcessorVersion, (vp::v3 *)(this + 1), (VoiceProcessorV3 **)buf);
  v79 = this[25];
  v80 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v81 = v79[28];
  v79[28] = v80;
  if (v81)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v81 + 8))(v81);
    v82 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  }
  VPPropertyQueue::AssignIsSetOnVPStateForAllProperties((VPPropertyQueue *)(this[25] + 12), 0);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v83 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v83)
      goto LABEL_157;
  }
  else
  {
    v83 = MEMORY[0x1E0C81028];
    v84 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 307;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = VoiceProcessorVersion;
    _os_log_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created a new VoiceProcessorV%u", buf, 0x18u);
  }

LABEL_157:
  v85 = this[25][28];
  v148 = 2 * (v85 == 0);
  if (!v85)
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v86 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v86)
        goto LABEL_167;
    }
    else
    {
      v86 = MEMORY[0x1E0C81028];
      v87 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 354;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v148;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "InitializeHWInput";
      _os_log_impl(&dword_1B5ED0000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
    }

  }
LABEL_167:
  v88 = this[25];
  v89 = v88[12];
  v90 = v88[13];
  if (v89 == v90)
  {
    v91 = 0;
    v95 = 0;
  }
  else
  {
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    do
    {
      if (*(_BYTE *)(v89 + 40))
      {
        v95 = v92;
      }
      else if (v94 >= v93)
      {
        v96 = (v94 - v91) >> 3;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 61)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if ((v93 - v91) >> 2 > v97)
          v97 = (v93 - v91) >> 2;
        if ((unint64_t)(v93 - v91) >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        if (v98)
        {
          if (v98 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v99 = (char *)operator new(8 * v98);
        }
        else
        {
          v99 = 0;
        }
        v100 = &v99[8 * v96];
        *(_QWORD *)v100 = v89;
        v95 = v100 + 8;
        while (v92 != v91)
        {
          v101 = *((_QWORD *)v92 - 1);
          v92 -= 8;
          *((_QWORD *)v100 - 1) = v101;
          v100 -= 8;
        }
        v93 = &v99[8 * v98];
        if (v91)
          operator delete(v91);
        v91 = v100;
        v94 = v95;
      }
      else
      {
        *(_QWORD *)v94 = v89;
        v94 += 8;
        v95 = v94;
      }
      v89 += 48;
      v92 = v95;
    }
    while (v89 != v90);
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v102 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v102)
      goto LABEL_201;
  }
  else
  {
    v102 = MEMORY[0x1E0C81028];
    v103 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
  {
    v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88[13] - v88[12]) >> 4);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpPropertyQueue.h";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 55;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = (v95 - v91) >> 3;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v104;
    _os_log_impl(&dword_1B5ED0000, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d got %lu unset properties (size=%lu)", buf, 0x26u);
  }

LABEL_201:
  if (v95 != v91)
  {
    v105 = 0;
    v106 = (v95 - v91) >> 3;
    v107 = 1;
    do
    {
      v108 = *(unsigned int **)&v91[8 * v105];
      if ((v109 & 1) == 0
      {
        v155[0] = 1953915762;
        std::vector<unsigned int>::vector[abi:ne180100](&v156, v155, 1uLL);
        *(_DWORD *)buf = 1;
        memset(&buf[8], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[8], v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_, (uint64_t)(v156.__r_.__value_.__l.__size_ - v156.__r_.__value_.__r.__words[0]) >> 2);
        std::map<unsigned int,std::vector<unsigned int>>::map[abi:ne180100]((uint64_t *)buf, 1);
        if (*(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (v156.__r_.__value_.__r.__words[0])
        {
          v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
          operator delete(v156.__r_.__value_.__l.__data_);
        }
        __cxa_atexit((void (*)(void *))std::map<unsigned int,std::vector<unsigned int>>::~map[abi:ne180100], &VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion, &dword_1B5ED0000);
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN17VPStrategyManager13DoSetPropertyEP14VPPropertyItem_block_invoke;
      *(_QWORD *)&buf[24] = &__block_descriptor_40_e8_B12__0I8l;
      *(_QWORD *)&buf[32] = this;
      v110 = (unsigned int (**)(void *, _QWORD))_Block_copy(buf);
      if (VPStrategyMgrScope(void)::once != -1)
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
      if (VPStrategyMgrScope(void)::scope)
      {
        if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
        {
          v111 = *(id *)VPStrategyMgrScope(void)::scope;
          if (v111)
          {
            v112 = v111;
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v156.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
              WORD2(v156.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = 243;
              _os_log_impl(&dword_1B5ED0000, v112, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v156, 0x12u);
            }

          }
        }
      }
      if (!VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28]))
        goto LABEL_261;
      if (!v108)
      {
        if (VPStrategyMgrScope(void)::once != -1)
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
        if (VPStrategyMgrScope(void)::scope)
        {
          v113 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v113)
            goto LABEL_261;
        }
        else
        {
          v113 = MEMORY[0x1E0C81028];
          v115 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v156.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
          WORD2(v156.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = 260;
          v116 = v113;
          v117 = OS_LOG_TYPE_ERROR;
          v118 = "%25s:%-5d null pointer for property!";
          v119 = 18;
          goto LABEL_259;
        }
        goto LABEL_260;
      }
      if (v110[2](v110, *v108))
      {
        if (VPStrategyMgrScope(void)::once != -1)
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
        if (VPStrategyMgrScope(void)::scope)
        {
          v113 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v113)
            goto LABEL_261;
        }
        else
        {
          v113 = MEMORY[0x1E0C81028];
          v120 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
        {
          v121 = *v108;
          LODWORD(v156.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
          WORD2(v156.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = 249;
          WORD1(v156.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v156.__r_.__value_.__r.__words[2]) = v121;
          v116 = v113;
          v117 = OS_LOG_TYPE_DEBUG;
          v118 = "%25s:%-5d this vp version does not support property 0x%x";
          v119 = 24;
          goto LABEL_259;
        }
        goto LABEL_260;
      }
      if (VPStrategyMgrScope(void)::once != -1)
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
      if (VPStrategyMgrScope(void)::scope)
      {
        v114 = *(id *)VPStrategyMgrScope(void)::scope;
        if (!v114)
          goto LABEL_240;
      }
      else
      {
        v114 = MEMORY[0x1E0C81028];
        v122 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
      {
        v123 = *v108;
        LODWORD(v156.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
        WORD2(v156.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = 253;
        WORD1(v156.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v156.__r_.__value_.__r.__words[2]) = v123;
        _os_log_impl(&dword_1B5ED0000, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting property 0x%x", (uint8_t *)&v156, 0x18u);
      }

LABEL_240:
      v124 = this[25];
      v125 = pthread_self();
      v126 = (_opaque_pthread_t *)atomic_load(v124 + 31);
      if (pthread_equal(v125, v126))
        goto LABEL_250;
      if (VPStrategyMgrScope(void)::once != -1)
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
      if (VPStrategyMgrScope(void)::scope)
      {
        v127 = *(id *)VPStrategyMgrScope(void)::scope;
        if (!v127)
          goto LABEL_250;
      }
      else
      {
        v127 = MEMORY[0x1E0C81028];
        v128 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v156.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
        WORD2(v156.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = 254;
        _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d vpLock must be held!", (uint8_t *)&v156, 0x12u);
      }

LABEL_250:
      v129 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this[25][28] + 56))(this[25][28]);
      if (v129)
      {
        if (VPStrategyMgrScope(void)::once != -1)
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
        if (VPStrategyMgrScope(void)::scope)
        {
          v113 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v113)
            goto LABEL_261;
        }
        else
        {
          v113 = MEMORY[0x1E0C81028];
          v130 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v156.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
          WORD2(v156.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = 256;
          WORD1(v156.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v156.__r_.__value_.__r.__words[2]) = v129;
          v157 = 2080;
          v158 = "DoSetProperty";
          v116 = v113;
          v117 = OS_LOG_TYPE_ERROR;
          v118 = "%25s:%-5d Error code %i reported at %s";
          v119 = 34;
LABEL_259:
          _os_log_impl(&dword_1B5ED0000, v116, v117, v118, (uint8_t *)&v156, v119);
        }
LABEL_260:

      }
LABEL_261:

      v105 = v107;
    }
    while (v106 > v107++);
  }
  VPPropertyQueue::AssignIsSetOnVPStateForAllProperties((VPPropertyQueue *)(this[25] + 12), 1);
  if (VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28]))
    v132 = (*(uint64_t (**)(unint64_t, const AudioStreamBasicDescription *, _QWORD, _QWORD, _QWORD, _QWORD, unsigned int *, const AudioStreamBasicDescription *, _QWORD, uint64_t, unsigned int, unsigned int *))(*(_QWORD *)this[25][28] + 16))(this[25][28], a2, 0, a4, a5, a6, a7, a8, 0, a10, a11, a12);
  else
    v132 = 2;
  v133 = v132 | v148;
  if ((_DWORD)v133)
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v134 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v134)
        goto LABEL_282;
    }
    else
    {
      v134 = MEMORY[0x1E0C81028];
      v135 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 370;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v133;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "InitializeHWInput";
      _os_log_impl(&dword_1B5ED0000, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
    }

  }
LABEL_282:
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v136 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v136)
      goto LABEL_291;
  }
  else
  {
    v136 = MEMORY[0x1E0C81028];
    v137 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 372;
    _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d Finished initializing the VP using cached data", buf, 0x12u);
  }

LABEL_291:
  if (v91)
    operator delete(v91);
  do
    v138 = __ldaxr(v33);
  while (__stlxr(v138 - 1, v33));
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142);
  v139 = (unsigned int *)(v153 + 4);
  do
    v140 = __ldaxr(v139);
  while (__stlxr(v140 - 1, v139));
  return v133;
}

void sub_1B64B55C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  unsigned int *v38;
  void *v39;
  uint64_t v40;
  void *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;

  if (__p)
    operator delete(__p);
  v42 = *(void **)(v40 - 160);
  if (v42)
  {
    *(_QWORD *)(v40 - 152) = v42;
    operator delete(v42);
  }
  operator delete(v39);
  do
    v43 = __ldaxr(v38);
  while (__stlxr(v43 - 1, v38));
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  v44 = (unsigned int *)(a35 + 4);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::InitializeOutput(unint64_t **this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  NSObject *v11;
  NSObject *v12;
  AudioChannelLayout *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v11 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v11)
      {
        v12 = v11;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "vpStrategyManager.mm";
          v17 = 1024;
          v18 = 378;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  return VPStrategyManager::RedirectWrapper_Initializing<AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &,AudioStreamBasicDescription &,AudioChannelLayout *&,unsigned int &,unsigned int &,unsigned int &>(this, (uint64_t (*)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))0x18, 1, (uint64_t)a2, &v14, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
}

uint64_t VPStrategyManager::InitializeDownlinkProcessing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v18[5];
  _BYTE buf[12];
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          v20 = 1024;
          v21 = 388;
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        v13 = v12;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.h";
          v20 = 1024;
          v21 = 130;
          _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  VPStrategyManager::CheckRequiredState((unint64_t **)a1, 4);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(buf, *(_QWORD *)(a1 + 200) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*(_QWORD *)(a1 + 200) + 224)))
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, id))(**(_QWORD **)(*(_QWORD *)(a1 + 200) + 224)
                                                                           + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 224), a2, a3, a4, v9);
  else
    v14 = 2;
  v15 = (unsigned int *)(*(_QWORD *)buf + 4);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZN17VPStrategyManager28InitializeDownlinkProcessingERK27AudioStreamBasicDescriptionjS2_U13block_pointerFiP15AudioBufferListP14AudioTimeStampPjE_block_invoke;
  v18[3] = &__block_descriptor_40_e5_v8__0l;
  v18[4] = a1;
  VPStrategyManager::SetState(a1, 8uLL, v18);

  return v14;
}

void sub_1B64B5AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  unsigned int *v17;
  unsigned int v18;

  v17 = (unsigned int *)(a15 + 4);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));

  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::InitializeSpeakerTelemetryInput(unint64_t **this, const AudioStreamBasicDescription *a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v6)
      {
        v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v13 = 136315394;
          *(_QWORD *)&v13[4] = "vpStrategyManager.mm";
          v14 = 1024;
          v15 = 446;
          _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v13, 0x12u);
        }

      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v13 = 136315394;
          *(_QWORD *)&v13[4] = "vpStrategyManager.h";
          v14 = 1024;
          v15 = 130;
          _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v13, 0x12u);
        }

      }
    }
  }
  VPStrategyManager::CheckRequiredState(this, 4);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(v13, (uint64_t)(this[25] + 40), 0);
  if (VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28]))
    result = (*(uint64_t (**)(unint64_t, const AudioStreamBasicDescription *, uint64_t))(*(_QWORD *)this[25][28] + 40))(this[25][28], a2, a3);
  else
    result = 2;
  v11 = (unsigned int *)(*(_QWORD *)v13 + 4);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  return result;
}

void sub_1B64B5D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  v9 = (unsigned int *)(a9 + 4);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::GetProperty(VPStrategyManager *this, uint64_t a2, void *a3, uint64_t a4, unsigned int *a5)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  NSObject *v22;
  id v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v27;
  _BYTE buf[12];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          v29 = 1024;
          v30 = 491;
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v27, *((_QWORD *)this + 25) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v12 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
    v13 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v29 = 1024;
    v30 = 493;
    v31 = 1024;
    v32 = a2;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v14 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v14)
      {
        v15 = v14;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.h";
          v29 = 1024;
          v30 = 141;
          _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(buf, *((_QWORD *)this + 25) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)))
  {
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, void *, uint64_t, unsigned int *))(**(_QWORD **)(*((_QWORD *)this + 25) + 224)
                                                                                      + 48))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3, a4, a5);
    v17 = v16;
    v18 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!(_DWORD)v16)
      goto LABEL_43;
  }
  else
  {
    v20 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    v17 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v22 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v22)
      goto LABEL_43;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
    v23 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v29 = 1024;
    v30 = 495;
    v31 = 1024;
    v32 = v17;
    v33 = 2080;
    v34 = "GetProperty";
    _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_43:
  v24 = (unsigned int *)(v27 + 4);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  return v17;
}

void sub_1B64B6134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  v10 = (unsigned int *)(a10 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::SetProperty(VPStrategyManager *this, unsigned int a2, const void **a3, size_t a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  id v25;
  char v26;
  int64x2_t *v27;
  VPPropertyItem *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  int v32;
  const void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  void *v39;
  std::string::size_type v40;
  _BYTE *size;
  size_t v42;
  int v43;
  const void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  int64x2_t v49;
  char *v50;
  id v51;
  id v52;
  NSObject *v53;
  const char *v54;
  int v55;
  unsigned int v56;
  std::string *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v63;
  VPPropertyItem *v64;
  VPPropertyItem *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int __val;
  uint64_t v69;
  std::string v70;
  char *v71;
  uint64_t v72;
  _BYTE buf[44];
  __int16 v74;
  _BOOL4 v75;
  __int16 v76;
  unint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 500;
          _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 502;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (a3 && (_DWORD)a4)
  {
    v12 = *((_QWORD *)this + 25);
    v14 = *(_QWORD *)(v12 + 120);
    v13 = v12 + 120;
    v15 = (*(uint64_t (**)(uint64_t))(v14 + 16))(v13);
    v16 = (char *)&v75 + 2;
    v17 = *((_QWORD *)this + 25);
    v18 = (unsigned int *)(v17 + 208);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    while (*(_DWORD *)(v17 + 212))
      usleep(0x1F4u);
    CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v69, *((_QWORD *)this + 25) + 320, 0);
    __val = a2;
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 14);
    v20 = *((_QWORD *)this + 25);
    v67 = *(_QWORD *)(v20 + 224);
    if (!v67)
    {
      v66 = 0;
      goto LABEL_46;
    }
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v21 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v21)
      {
LABEL_45:
        v66 = (*(uint64_t (**)(_QWORD, _QWORD, const void **, size_t))(**(_QWORD **)(*((_QWORD *)this + 25)
                                                                                             + 224)
                                                                               + 56))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), __val, a3, a4);
        v20 = *((_QWORD *)this + 25);
LABEL_46:
        v26 = v67 != 0;
        v27 = (int64x2_t *)(v20 + 96);
        v28 = std::remove_if[abi:ne180100]<std::__wrap_iter<VPPropertyQueue::QueueEntry *>,VPPropertyQueue::DoErase::{lambda(std::__wrap_iter<VPPropertyQueue::QueueEntry *> &)#1}>(*(VPPropertyItem **)(v20 + 96), *(VPPropertyItem **)(v20 + 104), __val);
        v64 = *(VPPropertyItem **)(v20 + 104);
        std::vector<VPPropertyQueue::QueueEntry>::erase(v20 + 96, v28, v64);
        v65 = v28;
        *(_DWORD *)buf = __val;
        buf[4] = 0;
        memset(&buf[8], 0, 32);
        if (__val - 32783 > 1)
        {
          if (__val != 32798)
          {
            *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = 0uLL;
            v70.__r_.__value_.__r.__words[0] = __val;
            AUPropertyItem::SetData((AUPropertyItem *)&v70, a4, a3);
            v39 = (void *)v70.__r_.__value_.__r.__words[2];
            *(_QWORD *)&buf[8] = v70.__r_.__value_.__r.__words[0];
            *(_DWORD *)&buf[16] = v70.__r_.__value_.__r.__words[1];
            AUPropertyItem::SetData((AUPropertyItem *)&buf[8], HIDWORD(v70.__r_.__value_.__r.__words[1]), (const void *)v70.__r_.__value_.__r.__words[2]);
            if (v39)
              free(v39);
LABEL_51:
            buf[40] = v67 != 0;
            v29 = *(_QWORD *)(v20 + 112);
            v30 = *(_QWORD *)(v20 + 104);
            if (v30 >= v29)
            {
              v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v27->i64[0]) >> 4);
              v63 = v15;
              if (v34 + 1 > 0x555555555555555)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v27->i64[0]) >> 4);
              v36 = 2 * v35;
              if (2 * v35 <= v34 + 1)
                v36 = v34 + 1;
              if (v35 >= 0x2AAAAAAAAAAAAAALL)
                v37 = 0x555555555555555;
              else
                v37 = v36;
              v72 = v20 + 112;
              if (v37)
              {
                if (v37 > 0x555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v38 = operator new(48 * v37);
              }
              else
              {
                v38 = 0;
              }
              v40 = (std::string::size_type)&v38[48 * v34];
              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v70.__r_.__value_.__l.__size_ = v40;
              v70.__r_.__value_.__r.__words[2] = v40;
              v71 = &v38[48 * v37];
              *(_DWORD *)v40 = *(_DWORD *)buf;
              *(_BYTE *)(v40 + 4) = buf[4];
              *(_DWORD *)(v40 + 20) = 0;
              *(_QWORD *)(v40 + 24) = 0;
              size = buf;
              if ((_BYTE *)v40 != buf)
              {
                v43 = *(_DWORD *)&buf[16];
                v42 = *(unsigned int *)&buf[20];
                v44 = *(const void **)&buf[24];
                *(_QWORD *)(v40 + 8) = *(_QWORD *)&buf[8];
                *(_DWORD *)(v40 + 16) = v43;
                AUPropertyItem::SetData((AUPropertyItem *)(v40 + 8), v42, v44);
                v26 = buf[40];
                size = (_BYTE *)v70.__r_.__value_.__l.__size_;
                v16 = (char *)(v70.__r_.__value_.__r.__words[2] + 48);
              }
              *(_QWORD *)(v40 + 32) = *(_QWORD *)&buf[32];
              *(_QWORD *)&buf[32] = 0;
              v38[48 * v34 + 40] = v26;
              v70.__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
              v46 = *(_QWORD *)(v20 + 96);
              v45 = *(_QWORD *)(v20 + 104);
              if (v45 == v46)
              {
                v49 = vdupq_n_s64(v45);
              }
              else
              {
                v47 = 0;
                do
                {
                  v48 = &size[v47];
                  *(_DWORD *)&size[v47 - 48] = *(_DWORD *)(v45 + v47 - 48);
                  *(v48 - 44) = 0;
                  *(_OWORD *)&size[v47 - 40] = 0u;
                  *(_OWORD *)(v48 - 24) = 0u;
                  VPPropertyItem::operator=((VPPropertyItem *)&size[v47 - 48], v45 + v47 - 48);
                  *(v48 - 8) = *(_BYTE *)(v45 + v47 - 8);
                  v47 -= 48;
                }
                while (v45 + v47 != v46);
                size += v47;
                v49 = *v27;
                v16 = (char *)v70.__r_.__value_.__r.__words[2];
              }
              *(_QWORD *)(v20 + 96) = size;
              *(_QWORD *)(v20 + 104) = v16;
              *(int64x2_t *)&v70.__r_.__value_.__r.__words[1] = v49;
              v50 = *(char **)(v20 + 112);
              *(_QWORD *)(v20 + 112) = v71;
              v71 = v50;
              v70.__r_.__value_.__r.__words[0] = v49.i64[0];
              std::__split_buffer<VPPropertyQueue::QueueEntry>::~__split_buffer((uint64_t)&v70);
              v15 = v63;
              v22 = v66;
            }
            else
            {
              *(_DWORD *)v30 = *(_DWORD *)buf;
              *(_BYTE *)(v30 + 4) = buf[4];
              *(_DWORD *)(v30 + 20) = 0;
              *(_QWORD *)(v30 + 24) = 0;
              v22 = v66;
              if ((_BYTE *)v30 != buf)
              {
                v32 = *(_DWORD *)&buf[16];
                v31 = *(unsigned int *)&buf[20];
                v33 = *(const void **)&buf[24];
                *(_QWORD *)(v30 + 8) = *(_QWORD *)&buf[8];
                *(_DWORD *)(v30 + 16) = v32;
                AUPropertyItem::SetData((AUPropertyItem *)(v30 + 8), v31, v33);
                v26 = buf[40];
              }
              *(_QWORD *)(v30 + 32) = *(_QWORD *)&buf[32];
              *(_QWORD *)&buf[32] = 0;
              *(_BYTE *)(v30 + 40) = v26;
              v16 = (char *)(v30 + 48);
              *(_QWORD *)(v20 + 104) = v30 + 48;
            }
            *(_QWORD *)(v20 + 104) = v16;
            VPPropertyItem::~VPPropertyItem((VPPropertyItem *)buf);
            if (VPStrategyMgrScope(void)::once != -1)
              dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
            if (VPStrategyMgrScope(void)::scope)
            {
              v51 = *(id *)VPStrategyMgrScope(void)::scope;
              if (!v51)
              {
LABEL_96:
                v59 = (unsigned int *)(v69 + 4);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                do
                  v61 = __ldaxr(v18);
                while (__stlxr(v61 - 1, v18));
                if (v15)
                  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
                return v22;
              }
            }
            else
            {
              v51 = (id)MEMORY[0x1E0C81028];
              v52 = MEMORY[0x1E0C81028];
            }
            v53 = v51;
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
            {
              if (v64 == v65)
                v54 = "added";
              else
                v54 = "replaced";
              v55 = bswap32(__val);
              *(_DWORD *)&buf[1] = v55;
              if (((char)v55 - 32) > 0x5E
                || (((__int16)v55 >> 8) - 32) > 0x5E
                || ((v55 << 8 >> 24) - 32) > 0x5E
                || ((v55 >> 24) - 32) > 0x5E)
              {
                v56 = __val;
                std::to_string(&v70, __val);
              }
              else
              {
                strcpy(&buf[5], "'");
                buf[0] = 39;
                std::string::basic_string[abi:ne180100]<0>(&v70, buf);
                v56 = __val;
              }
              v57 = &v70;
              if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v57 = (std::string *)v70.__r_.__value_.__r.__words[0];
              v58 = (uint64_t)(*(_QWORD *)(v20 + 104) - *(_QWORD *)(v20 + 96)) >> 4;
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "vpPropertyQueue.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 22;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v54;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v56;
              *(_WORD *)&buf[34] = 2080;
              *(_QWORD *)&buf[36] = v57;
              v74 = 1024;
              v75 = v67 != 0;
              v76 = 2048;
              v77 = 0xAAAAAAAAAAAAAAABLL * v58;
              _os_log_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s property 0x%x %s, setOnVP=%d (size=%lu)", buf, 0x3Cu);
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v70.__r_.__value_.__l.__data_);
            }

            goto LABEL_96;
          }
          buf[4] = 1;
        }
        else
        {
          buf[4] = 1;
          a3 = (const void **)*a3;
        }
        VPPropertyItem::SetCFDictionary((VPPropertyItem *)buf, (CFDictionaryRef)a3);
        goto LABEL_51;
      }
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
      v25 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 512;
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d set on vp", buf, 0x12u);
    }

    goto LABEL_45;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  v22 = 1651532146;
  if (VPStrategyMgrScope(void)::scope)
  {
    v23 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v23)
      return v22;
  }
  else
  {
    v23 = MEMORY[0x1E0C81028];
    v24 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 519;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a3;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = a4;
    _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d bad prop data = %p, size = %u", buf, 0x22u);
  }

  return v22;
}

void sub_1B64B6AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27)
{
  unsigned int *v27;
  uint64_t v28;
  void *v29;
  int v30;
  _QWORD *v31;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v36 = v28;
  if (v29)
    free(v29);
  if (a27)
    free(a27);
  *v31 = 0;
  v31[1] = 0;
  v33 = (unsigned int *)(a18 + 4);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  do
    v35 = __ldaxr(v27);
  while (__stlxr(v35 - 1, v27));
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  _Unwind_Resume(exception_object);
}

uint64_t VPStrategyManager::Process(VPStrategyManager *this, const AudioBufferList *a2, const AudioTimeStamp *a3, AudioBufferList *a4, AudioTimeStamp *a5, unsigned int *a6, void *a7, unsigned int *a8, AudioStreamPacketDescription *a9)
{
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  unsigned int v22;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v16 = *((_QWORD *)this + 25);
  v17 = (unsigned int *)(v16 + 324);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)) && !*(_DWORD *)(v16 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    v19 = (*(uint64_t (**)(_QWORD, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, AudioTimeStamp *, unsigned int *, void *, unsigned int *, AudioStreamPacketDescription *))(**(_QWORD **)(*((_QWORD *)this + 25) + 224) + 64))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3, a4, a5, a6, a7, a8, a9);
    if (!(_DWORD)v19)
      goto LABEL_15;
  }
  else
  {
    a4->mBuffers[0].mDataByteSize = 0;
    *a6 = 0;
    v19 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v20 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v20)
      goto LABEL_15;
  }
  else
  {
    v20 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v26 = "vpStrategyManager.mm";
    v27 = 1024;
    v28 = 542;
    v29 = 1024;
    v30 = v19;
    v31 = 2080;
    v32 = "Process";
    _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_15:
  kdebug_trace();
  do
    v22 = __ldaxr(v17);
  while (__stlxr(v22 - 1, v17));
  return v19;
}

void sub_1B64B6E40(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::ProcessDownlinkAudio(VPStrategyManager *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  uint64_t v22;
  unsigned int v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v14 = *((_QWORD *)this + 25);
  v15 = (unsigned int *)(v14 + 324);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)) && !*(_DWORD *)(v14 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    v22 = (*(uint64_t (**)(_QWORD, AudioBufferList *, AudioBufferList *, AudioBufferList *, AudioBufferList *, uint64_t, const AudioTimeStamp *))(**(_QWORD **)(*((_QWORD *)this + 25) + 224) + 72))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3, a4, a5, a6, a7);
    v18 = v22;
    do
      v23 = __ldaxr(v15);
    while (__stlxr(v23 - 1, v15));
    if (!(_DWORD)v22)
      goto LABEL_16;
  }
  else
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    v18 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v19 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v19)
      goto LABEL_16;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
    v20 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v24 = 136315906;
    v25 = "vpStrategyManager.mm";
    v26 = 1024;
    v27 = 550;
    v28 = 1024;
    v29 = v18;
    v30 = 2080;
    v31 = "ProcessDownlinkAudio";
    _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", (uint8_t *)&v24, 0x22u);
  }

LABEL_16:
  kdebug_trace();
  return v18;
}

void sub_1B64B7084(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::AppendSpeakerTelemetryData(VPStrategyManager *this, const AudioBufferList *a2, uint64_t a3, const AudioTimeStamp *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v16;
  unsigned int v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 25);
  v9 = (unsigned int *)(v8 + 324);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)) && !*(_DWORD *)(v8 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    v16 = (*(uint64_t (**)(_QWORD, const AudioBufferList *, uint64_t, const AudioTimeStamp *))(**(_QWORD **)(*((_QWORD *)this + 25) + 224) + 80))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3, a4);
    v12 = v16;
    do
      v17 = __ldaxr(v9);
    while (__stlxr(v17 - 1, v9));
    if (!(_DWORD)v16)
      return v12;
  }
  else
  {
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    v12 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v13 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v13)
      return v12;
  }
  else
  {
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v18 = 136315906;
    v19 = "vpStrategyManager.mm";
    v20 = 1024;
    v21 = 557;
    v22 = 1024;
    v23 = v12;
    v24 = 2080;
    v25 = "AppendSpeakerTelemetryData";
    _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", (uint8_t *)&v18, 0x22u);
  }

  return v12;
}

void sub_1B64B726C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::SetDownLinkVolume(VPStrategyManager *this, float a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  id v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[5];
  std::__shared_weak_count *v23;
  uint64_t v24;
  __int16 v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v4 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v4)
      {
        v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v27 = "vpStrategyManager.mm";
          v28 = 1024;
          v29 = 416;
          _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  atomic_store(LODWORD(a2), (unsigned int *)(*((_QWORD *)this + 25) + 216));
  v6 = *((_QWORD *)this + 25);
  v7 = *(_QWORD *)(v6 + 8);
  v24 = v6 + 8;
  v25 = 0;
  v8 = (*(uint64_t (**)(void))(v7 + 32))();
  HIBYTE(v25) = v8;
  if (v8)
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v9 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v9)
      {
LABEL_24:
        VPStrategyManager::VPSMImplementation::CommitVolumeIfInRunningState(*((VPStrategyManager::VPSMImplementation **)this
                                                                            + 25));
        goto LABEL_39;
      }
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "vpStrategyManager.mm";
      v28 = 1024;
      v29 = 422;
      _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d state lock acquired without contention", buf, 0x12u);
    }

    goto LABEL_24;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (!VPStrategyMgrScope(void)::scope)
  {
    v10 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
    goto LABEL_26;
  }
  v10 = *(id *)VPStrategyMgrScope(void)::scope;
  if (v10)
  {
LABEL_26:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v27 = "vpStrategyManager.mm";
      v28 = 1024;
      v29 = 426;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d state lock not acquired; deferring", buf, 0x12u);
    }

  }
  v14 = *((_QWORD *)this + 25);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  dispatch_get_global_queue(0, 0);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = v17;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3321888768;
  v22[2] = ___ZN17VPStrategyManager17SetDownLinkVolumeEf_block_invoke;
  v22[3] = &__block_descriptor_48_ea8_32c64_ZTSNSt3__18weak_ptrIN17VPStrategyManager18VPSMImplementationEEE_e5_v8__0l;
  v22[4] = v14;
  v23 = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  dispatch_async(v17, v22);

  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
LABEL_39:
  if ((_BYTE)v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  return 0;
}

void sub_1B64B75E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 24))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t VPStrategyManager::SetMode(VPStrategyManager *this, int a2)
{
  NSObject *v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v4 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v4)
      {
        v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          v7 = 136315394;
          v8 = "vpStrategyManager.mm";
          v9 = 1024;
          v10 = 452;
          _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v7, 0x12u);
        }

      }
    }
  }
  v7 = a2;
  return VPStrategyManager::SetProperty(this, 0x8013u, (const void **)&v7, 4uLL);
}

uint64_t VPStrategyManager::GetMaxOutputPacketInfo(unint64_t **this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  NSObject *v11;
  NSObject *v12;
  AudioChannelLayout *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v11 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v11)
      {
        v12 = v11;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "vpStrategyManager.mm";
          v17 = 1024;
          v18 = 383;
          _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  return VPStrategyManager::RedirectWrapper_Initializing<AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &,AudioStreamBasicDescription &,AudioChannelLayout *&,unsigned int &,unsigned int &,unsigned int &>(this, (uint64_t (*)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))0x68, 1, (uint64_t)a2, &v14, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
}

NSObject *VPStrategyManager::GetVersion(VPStrategyManager *this)
{
  char *v1;
  uint64_t v2;
  NSObject *result;
  NSObject *v4;
  id v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + 200;
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v8, *((_QWORD *)this + 25) + 320, 0);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  }
  else
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      result = *(id *)VPStrategyMgrScope(void)::scope;
      v4 = result;
      if (!result)
        goto LABEL_12;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "vpStrategyManager.mm";
      v11 = 1024;
      v12 = 466;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Actually the VoiceProcessorInterface* owned by VPStrategyManager the is a nullptr, so we can only report that this VP's version is 0!", buf, 0x12u);
    }

    result = 0;
  }
LABEL_12:
  v6 = (unsigned int *)(v8 + 4);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  return result;
}

void sub_1B64B79CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  v10 = (unsigned int *)(a10 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  _Unwind_Resume(a1);
}

_QWORD *VPStrategyManager::DumpState(_QWORD *this, __sFILE *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(this[25] + 324);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  if (a2)
  {
    this = *(_QWORD **)(this[25] + 224);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 120))(this);
  }
  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  return this;
}

void sub_1B64B7A48(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::AppendReferenceSignal(VPStrategyManager *this, const AudioBufferList *a2, const AudioTimeStamp *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v14;
  unsigned int v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 25);
  v7 = (unsigned int *)(v6 + 324);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)) && !*(_DWORD *)(v6 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    v14 = (*(uint64_t (**)(_QWORD, const AudioBufferList *, const AudioTimeStamp *))(**(_QWORD **)(*((_QWORD *)this + 25) + 224)
                                                                                             + 128))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3);
    v10 = v14;
    do
      v15 = __ldaxr(v7);
    while (__stlxr(v15 - 1, v7));
    if (!(_DWORD)v14)
      return v10;
  }
  else
  {
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    v10 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v11 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v11)
      return v10;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v16 = 136315906;
    v17 = "vpStrategyManager.mm";
    v18 = 1024;
    v19 = 563;
    v20 = 1024;
    v21 = v10;
    v22 = 2080;
    v23 = "AppendReferenceSignal";
    _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", (uint8_t *)&v16, 0x22u);
  }

  return v10;
}

void sub_1B64B7C24(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::AddPropertyListenerBlock(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  NSObject *v20;
  id v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          v27 = 1024;
          v28 = 569;
          _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v25, *(_QWORD *)(a1 + 200) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v27 = 1024;
    v28 = 571;
    v29 = 1024;
    v30 = a2;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding listener for property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        v13 = v12;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.h";
          v27 = 1024;
          v28 = 141;
          _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(buf, *(_QWORD *)(a1 + 200) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*(_QWORD *)(a1 + 200) + 224)))
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, id, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 200) + 224) + 136))(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 224), a2, v7, a4);
    v15 = v14;
    v16 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!(_DWORD)v14)
      goto LABEL_43;
  }
  else
  {
    v18 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    v15 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v20 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v20)
      goto LABEL_43;
  }
  else
  {
    v20 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v27 = 1024;
    v28 = 573;
    v29 = 1024;
    v30 = v15;
    v31 = 2080;
    v32 = "AddPropertyListenerBlock";
    _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_43:
  v22 = (unsigned int *)(v25 + 4);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));

  return v15;
}

void sub_1B64B802C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  unsigned int *v12;
  unsigned int v13;

  v12 = (unsigned int *)(a10 + 4);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));

  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::RemovePropertyListenerBlock(VPStrategyManager *this, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  NSObject *v18;
  id v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v23;
  _BYTE buf[12];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v6)
      {
        v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          v25 = 1024;
          v26 = 579;
          _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v23, *((_QWORD *)this + 25) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v8 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v25 = 1024;
    v26 = 581;
    v27 = 1024;
    v28 = a2;
    _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing listener for property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.h";
          v25 = 1024;
          v26 = 141;
          _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(buf, *((_QWORD *)this + 25) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)))
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 25) + 224) + 144))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3);
    v13 = v12;
    v14 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!(_DWORD)v12)
      goto LABEL_43;
  }
  else
  {
    v16 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    v13 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v18 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v18)
      goto LABEL_43;
  }
  else
  {
    v18 = MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v25 = 1024;
    v26 = 583;
    v27 = 1024;
    v28 = v13;
    v29 = 2080;
    v30 = "RemovePropertyListenerBlock";
    _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_43:
  v20 = (unsigned int *)(v23 + 4);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  return v13;
}

void sub_1B64B8460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  v10 = (unsigned int *)(a10 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::GetPropertyInfo(VPStrategyManager *this, uint64_t a2, unsigned int *a3, unsigned __int8 *a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  NSObject *v20;
  id v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
          v27 = 1024;
          v28 = 482;
          _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v25, *((_QWORD *)this + 25) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v27 = 1024;
    v28 = 484;
    v29 = 1024;
    v30 = a2;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting property info with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        v13 = v12;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpStrategyManager.h";
          v27 = 1024;
          v28 = 141;
          _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(buf, *((_QWORD *)this + 25) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((_QWORD *)this + 25) + 224)))
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, unsigned __int8 *))(**(_QWORD **)(*((_QWORD *)this + 25) + 224)
                                                                                        + 152))(*(_QWORD *)(*((_QWORD *)this + 25) + 224), a2, a3, a4);
    v15 = v14;
    v16 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!(_DWORD)v14)
      goto LABEL_43;
  }
  else
  {
    v18 = (unsigned int *)(*(_QWORD *)buf + 4);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    v15 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v20 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v20)
      goto LABEL_43;
  }
  else
  {
    v20 = MEMORY[0x1E0C81028];
    v21 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "vpStrategyManager.mm";
    v27 = 1024;
    v28 = 486;
    v29 = 1024;
    v30 = v15;
    v31 = 2080;
    v32 = "GetPropertyInfo";
    _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_43:
  v22 = (unsigned int *)(v25 + 4);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  return v15;
}

void sub_1B64B8888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  v10 = (unsigned int *)(a10 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  _Unwind_Resume(a1);
}

void VPStrategyManager::PreflightUplink(VPStrategyManager *this, unsigned int a2, unsigned int *a3)
{
  abort();
}

void VPStrategyManager::PreflightDownlink(VPStrategyManager *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  abort();
}

void VPStrategyManager::ReadBuffer()
{
  abort();
}

void VPStrategyManager::WriteBuffer()
{
  abort();
}

void VPStrategyManager::RunUplinkHardwareDSP(VPStrategyManager *this, const AudioBufferList *a2, const AudioTimeStamp *a3)
{
  abort();
}

void VPStrategyManager::RunUplinkEchoDSP(VPStrategyManager *this, const AudioTimeStamp *a2)
{
  abort();
}

void VPStrategyManager::RunUplinkDynamicsDSP(VPStrategyManager *this, AudioBufferList *a2, const AudioTimeStamp *a3)
{
  abort();
}

BOOL VPStrategyManager::CheckHasVP(VPStrategyManager *this)
{
  NSObject *v2;
  id v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v2)
        return this != 0;
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
      v3 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "vpStrategyManager.h";
      v7 = 1024;
      v8 = 162;
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d vp is nullptr!", (uint8_t *)&v5, 0x12u);
    }

  }
  return this != 0;
}

os_log_t ___Z18VPStrategyMgrScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "vp");
  *v0 = result;
  VPStrategyMgrScope(void)::scope = (uint64_t)v0;
  return result;
}

void VPStrategyManager::CheckRequiredState(unint64_t **this, uint64_t a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  id v13;
  id v14;
  int v15;
  void **v16;
  void **v17;
  void **v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load(this[25]);
  if ((v3 & a2) == 0)
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v13 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v13)
        return;
    }
    else
    {
      v13 = (id)MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    v5 = v13;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      VPStrategyManager::StateAsString((VPStrategyManager *)v21, v3);
      v15 = v22;
      v16 = (void **)v21[0];
      VPStrategyManager::StateAsString((VPStrategyManager *)__p, a2);
      v17 = v21;
      if (v15 < 0)
        v17 = v16;
      if (v20 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v24 = "vpStrategyManager.h";
      v25 = 1024;
      v26 = 153;
      v27 = 2080;
      v28 = v17;
      v29 = 2080;
      v30 = v18;
      v10 = "%25s:%-5d Invalid state: %s! At this point, we require state: %s";
      v11 = v5;
      v12 = OS_LOG_TYPE_ERROR;
      goto LABEL_28;
    }
LABEL_32:

    return;
  }
  if (v3 != 8)
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
      {
        v4 = *(id *)VPStrategyMgrScope(void)::scope;
        if (v4)
        {
          v5 = v4;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            VPStrategyManager::StateAsString((VPStrategyManager *)v21, v3);
            v6 = v22;
            v7 = (void **)v21[0];
            VPStrategyManager::StateAsString((VPStrategyManager *)__p, a2);
            v8 = v21;
            if (v6 < 0)
              v8 = v7;
            if (v20 >= 0)
              v9 = __p;
            else
              v9 = (void **)__p[0];
            *(_DWORD *)buf = 136315906;
            v24 = "vpStrategyManager.h";
            v25 = 1024;
            v26 = 156;
            v27 = 2080;
            v28 = v8;
            v29 = 2080;
            v30 = v9;
            v10 = "%25s:%-5d State is: %s which is an acceptable state for this point: {%s}";
            v11 = v5;
            v12 = OS_LOG_TYPE_DEBUG;
LABEL_28:
            _os_log_impl(&dword_1B5ED0000, v11, v12, v10, buf, 0x26u);
            if (v20 < 0)
              operator delete(__p[0]);
            if (v22 < 0)
              operator delete(v21[0]);
            goto LABEL_32;
          }
          goto LABEL_32;
        }
      }
    }
  }
}

void sub_1B64B8D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::StateAsString(VPStrategyManager *this, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  size_t v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  __int128 v13;
  _OWORD v14[4];
  void *__p;
  char v16;
  _QWORD v17[20];

  v17[19] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    v13 = xmmword_1E69E2968;
    v14[0] = unk_1E69E2978;
    v14[1] = xmmword_1E69E2988;
    std::map<unsigned long long,char const*>::map[abi:ne180100]((uint64_t *)&v13, 3);
    __cxa_atexit((void (*)(void *))std::map<unsigned long long,char const*>::~map[abi:ne180100], &VPStrategyManager::StateAsString(unsigned long long)::stateNames, &dword_1B5ED0000);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v13);
  v5 = VPStrategyManager::StateAsString(unsigned long long)::stateNames;
  if ((uint64_t *)VPStrategyManager::StateAsString(unsigned long long)::stateNames == &qword_1EF136ED0)
    goto LABEL_15;
  v6 = 0;
  do
  {
    if ((*(_QWORD *)(v5 + 32) & a2) != 0)
    {
      if ((v6 & 1) != 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" OR ", 4);
      v7 = strlen(*(const char **)(v5 + 40));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(_QWORD *)(v5 + 40), v7);
      v6 = 1;
    }
    v8 = *(uint64_t **)(v5 + 8);
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = *(uint64_t **)(v5 + 16);
        v10 = *v9 == v5;
        v5 = (uint64_t)v9;
      }
      while (!v10);
    }
    v5 = (uint64_t)v9;
  }
  while (v9 != &qword_1EF136ED0);
  if ((v6 & 1) == 0)
LABEL_15:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"*invalid*", 9);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v14 + 8, this);
  *(_QWORD *)&v13 = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v14[0] = v11;
  *((_QWORD *)&v14[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCC95BE4](v17);
}

void sub_1B64B8F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,char const*>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _OWORD *v13;
  unint64_t v14;

  qword_1EF136ED8 = 0;
  qword_1EF136ED0 = 0;
  VPStrategyManager::StateAsString(unsigned long long)::stateNames = (uint64_t)&qword_1EF136ED0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[2 * a2];
    v5 = &qword_1EF136ED0;
    while (1)
    {
      if (v5 == &qword_1EF136ED0)
      {
        v7 = &qword_1EF136ED0;
      }
      else
      {
        v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          v8 = &qword_1EF136ED0;
          do
          {
            v7 = (uint64_t *)v8[2];
            v9 = *v7 == (_QWORD)v8;
            v8 = v7;
          }
          while (v9);
        }
        v10 = *v2;
        if (v7[4] >= (unint64_t)*v2)
        {
          if (v3)
          {
            v12 = &qword_1EF136ED0;
            while (1)
            {
              while (1)
              {
                v11 = (uint64_t *)v3;
                v14 = *(_QWORD *)(v3 + 32);
                if (v10 >= v14)
                  break;
                v3 = *v11;
                v12 = v11;
                if (!*v11)
                  goto LABEL_18;
              }
              if (v14 >= v10)
                break;
              v12 = v11 + 1;
              v3 = v11[1];
              if (!v3)
                goto LABEL_18;
            }
          }
          else
          {
            v11 = &qword_1EF136ED0;
            v12 = &qword_1EF136ED0;
          }
          goto LABEL_17;
        }
      }
      if (v3)
        v11 = v7;
      else
        v11 = &qword_1EF136ED0;
      if (v3)
        v12 = v7 + 1;
      else
        v12 = &qword_1EF136ED0;
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        v13 = operator new(0x30uLL);
        v13[2] = *(_OWORD *)v2;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v11;
        *v12 = (uint64_t)v13;
        if (*(_QWORD *)VPStrategyManager::StateAsString(unsigned long long)::stateNames)
        {
          VPStrategyManager::StateAsString(unsigned long long)::stateNames = *(_QWORD *)VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          v13 = (_OWORD *)*v12;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF136ED0, (uint64_t *)v13);
        ++qword_1EF136ED8;
      }
      v2 += 2;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)VPStrategyManager::StateAsString(unsigned long long)::stateNames;
      v3 = qword_1EF136ED0;
    }
  }
  return result;
}

void sub_1B64B9124(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy((_QWORD *)qword_1EF136ED0);
  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned long long,char const*>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t VPStrategyManager::RedirectWrapper_Initializing<AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &,AudioStreamBasicDescription &,AudioChannelLayout *&,unsigned int &,unsigned int &,unsigned int &>(unint64_t **this, uint64_t (*a2)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int v21;
  _BYTE v22[12];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v16 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v16)
      {
        v17 = v16;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v22 = 136315394;
          *(_QWORD *)&v22[4] = "vpStrategyManager.h";
          v23 = 1024;
          v24 = 130;
          _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v22, 0x12u);
        }

      }
    }
  }
  VPStrategyManager::CheckRequiredState(this, 4);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(v22, (uint64_t)(this[25] + 40), 0);
  if (VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28]))
  {
    v18 = (_QWORD *)(this[25][28] + (a3 >> 1));
    if ((a3 & 1) != 0)
      a2 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*v18 + a2);
    result = a2(v18, a4, *a5, a6, a7, a8);
  }
  else
  {
    result = 2;
  }
  v20 = (unsigned int *)(*(_QWORD *)v22 + 4);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  return result;
}

void sub_1B64B931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  v9 = (unsigned int *)(a9 + 4);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  _Unwind_Resume(a1);
}

void VPStrategyManager::VPSMImplementation::CommitVolumeIfInRunningState(VPStrategyManager::VPSMImplementation *this)
{
  NSObject *v2;
  NSObject *v3;
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void **v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v15 = "vpStrategyManager.mm";
          v16 = 1024;
          v17 = 400;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  v4 = pthread_self();
  v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 3);
  if (!pthread_equal(v4, v5))
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v6)
        goto LABEL_19;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "vpStrategyManager.mm";
      v16 = 1024;
      v17 = 401;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d stateMutex must be held!", buf, 0x12u);
    }

  }
LABEL_19:
  v8 = atomic_load((unint64_t *)this);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v9 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v9)
      {
        v10 = v9;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          VPStrategyManager::StateAsString((VPStrategyManager *)__p, v8);
          v11 = v13 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          v15 = "vpStrategyManager.mm";
          v16 = 1024;
          v17 = 403;
          v18 = 2080;
          v19 = v11;
          _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d state = %s", buf, 0x1Cu);
          if (v13 < 0)
            operator delete(__p[0]);
        }

      }
    }
  }
  if (v8 == 8)
    VPStrategyManager::VPSMImplementation::CommitVolume(this);
}

void sub_1B64B95F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN17VPStrategyManager17SetDownLinkVolumeEf_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  VPStrategyManager::VPSMImplementation *v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  int v9;
  NSObject *v10;
  id v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_10;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = *(VPStrategyManager::VPSMImplementation **)(a1 + 32)) == 0)
  {
LABEL_10:
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v6)
        goto LABEL_19;
    }
    else
    {
      v6 = MEMORY[0x1E0C81028];
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "vpStrategyManager.mm";
      v16 = 1024;
      v17 = 437;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d vpsm already destroyed", buf, 0x12u);
    }

LABEL_19:
    if (!v3)
      return;
    goto LABEL_36;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v5 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v5)
      goto LABEL_25;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v15 = "vpStrategyManager.mm";
    v16 = 1024;
    v17 = 431;
    _os_log_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d waiting for locks asynchronously", buf, 0x12u);
  }

LABEL_25:
  v9 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 1) + 16))((_QWORD *)v4 + 1);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (!VPStrategyMgrScope(void)::scope)
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
    goto LABEL_31;
  }
  v10 = *(id *)VPStrategyMgrScope(void)::scope;
  if (v10)
  {
LABEL_31:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v15 = "vpStrategyManager.mm";
      v16 = 1024;
      v17 = 433;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d locks acquired", buf, 0x12u);
    }

  }
  VPStrategyManager::VPSMImplementation::CommitVolumeIfInRunningState(v4);
  if (v9)
    (*(void (**)(_QWORD *))(*((_QWORD *)v4 + 1) + 24))((_QWORD *)v4 + 1);
LABEL_36:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B64B9914(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_ea8_32c64_ZTSNSt3__18weak_ptrIN17VPStrategyManager18VPSMImplementationEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c64_ZTSNSt3__18weak_ptrIN17VPStrategyManager18VPSMImplementationEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void VPStrategyManager::VPSMImplementation::CommitVolume(VPStrategyManager::VPSMImplementation *this)
{
  NSObject *v2;
  NSObject *v3;
  float v4;
  int v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  uint32_t v13;
  id v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          v15 = 136315394;
          v16 = "vpStrategyManager.h";
          v17 = 1024;
          v18 = 184;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v15, 0x12u);
        }

      }
    }
  }
  if (!*((_QWORD *)this + 28))
  {
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v7 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v7)
        return;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v12 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    v15 = 136315394;
    v16 = "vpStrategyManager.h";
    v17 = 1024;
    v18 = 196;
    v9 = "%25s:%-5d vp is nullptr";
    v10 = v7;
    v11 = OS_LOG_TYPE_ERROR;
    goto LABEL_32;
  }
  v4 = COERCE_FLOAT(atomic_load((unsigned int *)this + 54));
  if (v4 != -1.0)
  {
    v5 = (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 28) + 88))(*((_QWORD *)this + 28), v4);
    if (!v5)
      return;
    v6 = v5;
    if (VPStrategyMgrScope(void)::once != -1)
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
    if (VPStrategyMgrScope(void)::scope)
    {
      v7 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v7)
        return;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315906;
      v16 = "vpStrategyManager.h";
      v17 = 1024;
      v18 = 189;
      v19 = 1024;
      v20 = v6;
      v21 = 2080;
      v22 = "CommitVolume";
      v9 = "%25s:%-5d Error code %i reported at %s";
      v10 = v7;
      v11 = OS_LOG_TYPE_ERROR;
      v13 = 34;
      goto LABEL_36;
    }
LABEL_37:

    return;
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        v7 = v8;
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          goto LABEL_37;
        v15 = 136315394;
        v16 = "vpStrategyManager.h";
        v17 = 1024;
        v18 = 192;
        v9 = "%25s:%-5d no volume to set now";
        v10 = v7;
        v11 = OS_LOG_TYPE_DEBUG;
LABEL_32:
        v13 = 18;
LABEL_36:
        _os_log_impl(&dword_1B5ED0000, v10, v11, v9, (uint8_t *)&v15, v13);
        goto LABEL_37;
      }
    }
  }
}

VPPropertyItem *std::remove_if[abi:ne180100]<std::__wrap_iter<VPPropertyQueue::QueueEntry *>,VPPropertyQueue::DoErase(unsigned int)::{lambda(std::__wrap_iter<VPPropertyQueue::QueueEntry *> &)#1}>(VPPropertyItem *result, VPPropertyItem *this, int a3)
{
  VPPropertyItem *i;
  VPPropertyItem *v6;

  if (result == this)
    return this;
  while (*(_DWORD *)result != a3)
  {
    result = (VPPropertyItem *)((char *)result + 48);
    if (result == this)
      return this;
  }
  if (result != this)
  {
    for (i = (VPPropertyItem *)((char *)result + 48); i != this; i = (VPPropertyItem *)((char *)i + 48))
    {
      if (*(_DWORD *)i != a3)
      {
        v6 = VPPropertyItem::operator=(result, (uint64_t)i);
        *((_BYTE *)v6 + 40) = *((_BYTE *)i + 40);
        result = (VPPropertyItem *)((char *)v6 + 48);
      }
    }
  }
  return result;
}

void std::vector<VPPropertyQueue::QueueEntry>::erase(uint64_t a1, VPPropertyItem *this, VPPropertyItem *a3)
{
  VPPropertyItem *v3;
  VPPropertyItem *v4;
  VPPropertyItem *v6;
  uint64_t v7;

  if (this != a3)
  {
    v3 = a3;
    v4 = this;
    v6 = *(VPPropertyItem **)(a1 + 8);
    if (a3 != v6)
    {
      v7 = 16 * ((a3 - this) >> 4);
      do
      {
        VPPropertyItem::operator=(v4, (uint64_t)v4 + v7);
        *((_BYTE *)v4 + 40) = *((_BYTE *)v4 + v7 + 40);
        v4 = (VPPropertyItem *)((char *)v4 + 48);
      }
      while ((VPPropertyItem *)((char *)v4 + v7) != v6);
      v3 = *(VPPropertyItem **)(a1 + 8);
    }
    while (v3 != v4)
    {
      v3 = (VPPropertyItem *)((char *)v3 - 48);
      VPPropertyItem::~VPPropertyItem(v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
}

void VPPropertyItem::~VPPropertyItem(VPPropertyItem *this)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
  {
    CFRelease(v2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      v3 = *((_QWORD *)this + 4);
      v5 = 136315650;
      v6 = "vpPropertyItem.h";
      v7 = 1024;
      v8 = 51;
      v9 = 2048;
      v10 = v3;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%25s:%-5d released %p", (uint8_t *)&v5, 0x1Cu);
    }
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

void sub_1B64B9EF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__split_buffer<VPPropertyQueue::QueueEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    VPPropertyItem::~VPPropertyItem((VPPropertyItem *)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

VPPropertyItem *VPPropertyItem::operator=(VPPropertyItem *this, uint64_t a2)
{
  size_t v4;
  int v5;
  const void *v6;

  if (this != (VPPropertyItem *)a2)
  {
    *(_DWORD *)this = *(_DWORD *)a2;
    *((_BYTE *)this + 4) = *(_BYTE *)(a2 + 4);
    VPPropertyItem::SetCFDictionary(this, *(CFDictionaryRef *)(a2 + 32));
    v5 = *(_DWORD *)(a2 + 16);
    v4 = *(unsigned int *)(a2 + 20);
    v6 = *(const void **)(a2 + 24);
    *((_QWORD *)this + 1) = *(_QWORD *)(a2 + 8);
    *((_DWORD *)this + 4) = v5;
    AUPropertyItem::SetData((VPPropertyItem *)((char *)this + 8), v4, v6);
  }
  return this;
}

void VPPropertyItem::SetCFDictionary(VPPropertyItem *this, CFDictionaryRef theDict)
{
  const void *v4;
  const __CFDictionary *v5;
  CFDictionaryRef Copy;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  CFDictionaryRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)*((_QWORD *)this + 4);
  if (v4)
  {
    CFRelease(v4);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      v5 = (const __CFDictionary *)*((_QWORD *)this + 4);
      v7 = 136315650;
      v8 = "vpPropertyItem.h";
      v9 = 1024;
      v10 = 101;
      v11 = 2048;
      v12 = v5;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%25s:%-5d released %p", (uint8_t *)&v7, 0x1Cu);
    }
  }
  *((_QWORD *)this + 4) = 0;
  if (theDict)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
    *((_QWORD *)this + 4) = Copy;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      v7 = 136315650;
      v8 = "vpPropertyItem.h";
      v9 = 1024;
      v10 = 106;
      v11 = 2048;
      v12 = Copy;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%25s:%-5d copied %p", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void ___ZN17VPStrategyManager28InitializeDownlinkProcessingERK27AudioStreamBasicDescriptionjS2_U13block_pointerFiP15AudioBufferListP14AudioTimeStampPjE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v2 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315394;
    v5 = "vpStrategyManager.mm";
    v6 = 1024;
    v7 = 392;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d updating volume", (uint8_t *)&v4, 0x12u);
  }

LABEL_10:
  VPStrategyManager::VPSMImplementation::CommitVolume(*(VPStrategyManager::VPSMImplementation **)(v1 + 200));
}

void VPStrategyManager::SetState(uint64_t a1, unint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void **v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v6)
      {
        v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v18 = "vpStrategyManager.h";
          v19 = 1024;
          v20 = 169;
          _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }

      }
    }
  }
  v8 = *(_QWORD *)(a1 + 200);
  v10 = *(_QWORD *)(v8 + 8);
  v9 = v8 + 8;
  v11 = (*(uint64_t (**)(uint64_t))(v10 + 16))(v9);
  v5[2](v5);
  atomic_store(a2, *(unint64_t **)(a1 + 200));
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        v13 = v12;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          VPStrategyManager::StateAsString((VPStrategyManager *)__p, a2);
          v14 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315650;
          v18 = "vpStrategyManager.h";
          v19 = 1024;
          v20 = 173;
          v21 = 2080;
          v22 = v14;
          _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if (v16 < 0)
            operator delete(__p[0]);
        }

      }
    }
  }
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);

}

void sub_1B64BA464(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  int v3;
  void *v4;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);

  _Unwind_Resume(a1);
}

void VPPropertyQueue::AssignIsSetOnVPStateForAllProperties(VPPropertyQueue *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  id v8;
  unint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (*(unsigned __int8 *)(v4 + 40) != a2)
      {
        ++v6;
        *(_BYTE *)(v4 + 40) = a2;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    v7 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v7)
      return;
  }
  else
  {
    v7 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
    v10 = 136316162;
    v11 = "vpPropertyQueue.h";
    v12 = 1024;
    v13 = 44;
    v14 = 1024;
    v15 = a2;
    v16 = 1024;
    v17 = v6;
    v18 = 2048;
    v19 = v9;
    _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d setOnVP set to %d. %d items flipped (size=%lu)", (uint8_t *)&v10, 0x28u);
  }

}

uint64_t *std::map<unsigned int,std::vector<unsigned int>>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;

  qword_1EF136EF8 = 0;
  qword_1EF136EF0 = 0;
  VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion = (uint64_t)&qword_1EF136EF0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[4 * a2];
    v5 = &qword_1EF136EF0;
    while (1)
    {
      if (v5 == &qword_1EF136EF0)
      {
        v7 = &qword_1EF136EF0;
      }
      else
      {
        v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          v8 = &qword_1EF136EF0;
          do
          {
            v7 = (uint64_t *)v8[2];
            v9 = *v7 == (_QWORD)v8;
            v8 = v7;
          }
          while (v9);
        }
        v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 8) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            v12 = (uint64_t **)&qword_1EF136EF0;
            while (1)
            {
              while (1)
              {
                v11 = (uint64_t *)v3;
                v15 = *(_DWORD *)(v3 + 32);
                if (v10 >= v15)
                  break;
                v3 = *v11;
                v12 = (uint64_t **)v11;
                if (!*v11)
                  goto LABEL_18;
              }
              if (v15 >= v10)
                break;
              v12 = (uint64_t **)(v11 + 1);
              v3 = v11[1];
              if (!v3)
                goto LABEL_18;
            }
          }
          else
          {
            v11 = &qword_1EF136EF0;
            v12 = (uint64_t **)&qword_1EF136EF0;
          }
          goto LABEL_17;
        }
      }
      if (v3)
        v11 = v7;
      else
        v11 = &qword_1EF136EF0;
      if (v3)
        v12 = (uint64_t **)(v7 + 1);
      else
        v12 = (uint64_t **)&qword_1EF136EF0;
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        v13 = operator new(0x40uLL);
        v14 = *(_DWORD *)v2;
        v13[5] = 0;
        *((_DWORD *)v13 + 8) = v14;
        v13[6] = 0;
        v13[7] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13 + 5, (const void *)v2[1], v2[2], (v2[2] - v2[1]) >> 2);
        result = std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)&VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion, (uint64_t)v11, v12, v13);
      }
      v2 += 4;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion;
      v3 = qword_1EF136EF0;
    }
  }
  return result;
}

void sub_1B64BA7A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy((_QWORD *)qword_1EF136EF0);
  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned int,std::vector<unsigned int>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

BOOL ___ZN17VPStrategyManager13DoSetPropertyEP14VPPropertyItem_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 200) + 224);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
  v5 = qword_1EF136EF0;
  if (!qword_1EF136EF0)
    return 0;
  v6 = &qword_1EF136EF0;
  v7 = qword_1EF136EF0;
  do
  {
    v8 = *(_DWORD *)(v7 + 32);
    v9 = v8 >= v4;
    if (v8 >= v4)
      v10 = (uint64_t *)v7;
    else
      v10 = (uint64_t *)(v7 + 8);
    if (v9)
      v6 = (uint64_t *)v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == &qword_1EF136EF0 || v4 < *((_DWORD *)v6 + 8))
    return 0;
  while (1)
  {
    while (1)
    {
      v12 = *(_DWORD *)(v5 + 32);
      if (v4 >= v12)
        break;
      v5 = *(_QWORD *)v5;
      if (!v5)
        goto LABEL_18;
    }
    if (v12 >= v4)
      break;
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
LABEL_18:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  v14 = *(_DWORD **)(v5 + 40);
  v13 = *(_DWORD **)(v5 + 48);
  if (v14 != v13)
  {
    while (*v14 != a2)
    {
      if (++v14 == v13)
      {
        v14 = v13;
        return v14 != v13;
      }
    }
  }
  return v14 != v13;
}

void sub_1B64BAB50(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t DefaultDuckingCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7;
  const void *v8;

  v8 = 0;
  v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 0;
  return VPStrategyManager::SetProperty(this, 0x6F616463u, &v8, 8uLL);
}

uint64_t MinDuckingLevelCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7;
  const void *v8;

  v8 = 0;
  v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 10;
  return VPStrategyManager::SetProperty(this, 0x6F616463u, &v8, 8uLL);
}

uint64_t MidDuckingLevelCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7;
  const void *v8;

  v8 = 0;
  v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 20;
  return VPStrategyManager::SetProperty(this, 0x6F616463u, &v8, 8uLL);
}

uint64_t MaxDuckingLevelCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7;
  const void *v8;

  v8 = 0;
  v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 30;
  return VPStrategyManager::SetProperty(this, 0x6F616463u, &v8, 8uLL);
}

uint64_t EnableAdvancedDuckingCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7;
  const void *v8;

  v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  LOBYTE(v8) = 1;
  return VPStrategyManager::SetProperty(this, 0x6F616463u, &v8, 8uLL);
}

uint64_t DisableAdvancedDuckingCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7;
  const void *v8;

  v8 = 0;
  v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  LOBYTE(v8) = 0;
  return VPStrategyManager::SetProperty(this, 0x6F616463u, &v8, 8uLL);
}

void VPStrategyManager::VPSMImplementation::~VPSMImplementation(VPStrategyManager::VPSMImplementation *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _BYTE v5[12];
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (VPStrategyMgrScope(void)::once != -1)
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_18270);
  if (VPStrategyMgrScope(void)::scope)
  {
    if ((*(_BYTE *)(VPStrategyMgrScope(void)::scope + 8) & 1) != 0)
    {
      v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v5 = 136315394;
          *(_QWORD *)&v5[4] = "vpStrategyManager.h";
          v6 = 1024;
          v7 = 181;
          _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v5, 0x12u);
        }

      }
    }
  }
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::destroy(*((_QWORD **)this + 42));
  *((_QWORD *)this + 29) = &off_1E69EDF70;
  pthread_mutex_destroy((pthread_mutex_t *)this + 4);
  v4 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 15) = &off_1E69EDF70;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 144));
  *(_QWORD *)v5 = (char *)this + 96;
  std::vector<VPPropertyQueue::QueueEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  *((_QWORD *)this + 1) = &off_1E69EDF70;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32));
}

void sub_1B64BAF1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<VPPropertyQueue::QueueEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        VPPropertyItem::~VPPropertyItem((VPPropertyItem *)(v4 - 48));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<VPStrategyManager::VPSMImplementation *,std::shared_ptr<VPStrategyManager::VPSMImplementation>::__shared_ptr_default_delete<VPStrategyManager::VPSMImplementation,VPStrategyManager::VPSMImplementation>,std::allocator<VPStrategyManager::VPSMImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

VPStrategyManager::VPSMImplementation *std::__shared_ptr_pointer<VPStrategyManager::VPSMImplementation *,std::shared_ptr<VPStrategyManager::VPSMImplementation>::__shared_ptr_default_delete<VPStrategyManager::VPSMImplementation,VPStrategyManager::VPSMImplementation>,std::allocator<VPStrategyManager::VPSMImplementation>>::__on_zero_shared(uint64_t a1)
{
  VPStrategyManager::VPSMImplementation *result;

  result = *(VPStrategyManager::VPSMImplementation **)(a1 + 24);
  if (result)
  {
    VPStrategyManager::VPSMImplementation::~VPSMImplementation(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t AUSM::ChannelGeometry::update(float32x4_t **this, simd_quatf *a2)
{
  unsigned __int8 v3;
  float32x4_t *v4;
  __int32 v5;
  BOOL v6;
  float32x4_t v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  float v11;
  float v12;
  float32x4_t *v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float32x4_t *v17;
  unsigned int v18;
  float v19;
  __float2 v20;
  __float2 v21;
  float32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  __float2 v26;
  int8x16_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t *v64;
  __int32 v65;
  __int32 v66;
  __int32 v67;
  uint64_t result;
  unsigned int v69;
  float SnappedCoordinates;
  float v71;
  float v72;
  unsigned __int8 v73;
  float32x4_t *v74;
  float32x4_t v75;
  int32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  __float2 v81;
  __float2 v82;
  float32x4_t v83;
  int32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float Parameter;
  float v94;
  float32x4_t v95;
  int32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t *v105;
  int v106;
  unsigned int v107;
  float32x4_t *v108;
  float32x4_t v109;
  float v110;
  unint64_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t *v114;
  float32x4_t *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unsigned int v120;
  unsigned int v121;
  float32x4_t v122;
  unsigned int v123;
  float32x4_t *v124;
  unsigned int v125;
  unsigned __int8 v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float v132;
  float32x4_t v133;
  float v134;
  float32x4_t v135;
  int32x4_t v136;
  int8x16_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int32x4_t v141;
  int8x16_t v142;
  float32x4_t v143;
  float v144;
  int32x4_t v145;
  int8x16_t v146;
  float32x2_t v147;
  float32x4_t v148;
  unsigned __int32 v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x4_t v152;
  int32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  unsigned int v157;
  float32x4_t *v158;
  unsigned int v159;
  unsigned __int8 v160;
  unsigned int v161;
  float32x4_t *v162;
  unsigned int v163;
  unsigned __int8 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  unsigned int v168;
  unsigned int v169;
  float32x4_t *v170;
  float v171;
  float v172;
  float32x4_t v173;
  float32x4_t v174;
  int32x4_t v175;
  int8x16_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int32x4_t v180;
  int8x16_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int32x4_t v186;
  int8x16_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int32x4_t v192;
  int8x16_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  int32x4_t v199;
  int8x16_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  int32x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  int32x4_t v210;
  int8x16_t v211;
  float32x4_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float v222;
  unsigned int v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t *v227;
  AUSM::DistanceGain *v228;
  float v229;
  float32x4_t v230;
  float v231;
  float32x4_t v232;
  float v233;
  int v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  unsigned int v238;
  unsigned int v239;
  float32x4_t *v240;
  float v241;
  float32x4_t v242;
  float32x4_t v243;
  int32x4_t v244;
  int8x16_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int32x4_t v251;
  int8x16_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  int32x4_t v257;
  int8x16_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  int32x4_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  int32x4_t v267;
  int8x16_t v268;
  float32x4_t v269;
  __int32 v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float v274;
  float32x4_t v275;
  int v276;
  float32x4_t v277;

  v3 = atomic_load((unsigned __int8 *)this + 688);
  v4 = *this;
  v5 = (*this)[15].i32[1];
  if ((v3 & 1) != 0 || (v5 == *((_DWORD *)this + 173) ? (v6 = (_DWORD)a2 == 0) : (v6 = 0), !v6))
  {
    *((_DWORD *)this + 173) = v5;
    atomic_store(0, (unsigned __int8 *)this + 688);
    __dmb(0xBu);
    v7 = v4[5];
    v8 = atomic_load((unsigned int *)(v4->i64[1] + 80));
    v271 = v7;
    if (v8 == 1
      || !v8 && *(_DWORD *)(v4->i64[0] + 108) > 1u
      || (v9 = atomic_load((unsigned int *)(v4->i64[1] + 72)), v9 == 5))
    {
      *((_OWORD *)this + 3) = 0u;
      v10 = xmmword_1B66282F0;
    }
    else
    {
      v69 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
      if (v69 != 3)
      {
        Parameter = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 2u);
        v94 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 0x22u);
        v95 = vmulq_f32(v271, (float32x4_t)xmmword_1B66A07B0);
        v96 = (int32x4_t)vnegq_f32(v95);
        v97 = (int8x16_t)vtrn2q_s32((int32x4_t)v95, vtrn1q_s32((int32x4_t)v95, v96));
        v98 = vmlaq_n_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v96, 8uLL), (float32x4_t)0), (float32x4_t)vextq_s8(v97, v97, 8uLL), Parameter * v94);
        v99 = (float32x4_t)vrev64q_s32((int32x4_t)v95);
        v99.i32[0] = v96.i32[1];
        v99.i32[3] = v96.i32[2];
        v100 = vmlaq_f32(v98, (float32x4_t)0, v99);
        v101 = (int32x4_t)vnegq_f32(v100);
        v102 = (int8x16_t)vtrn2q_s32((int32x4_t)v100, vtrn1q_s32((int32x4_t)v100, v101));
        v103 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v100, (int8x16_t)v101, 8uLL), *(float32x2_t *)v271.f32, 1), (float32x4_t)vextq_s8(v102, v102, 8uLL), v271.f32[0]);
        v104 = (float32x4_t)vrev64q_s32((int32x4_t)v100);
        v104.i32[0] = v101.i32[1];
        v104.i32[3] = v101.i32[2];
        *((float32x4_t *)this + 3) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v100, v271, 3), v104, v271, 2), v103);
        if (this[1][28].i8[9])
        {
          v105 = *this;
          v106 = (*this)[6].u8[0];
          *((_BYTE *)this + 128) = v106;
          if (v106)
          {
            v107 = atomic_load((unsigned int *)(v105->i64[1] + 224));
            v108 = *this + 7;
            if (v107 == 1)
            {
              v109 = *v108;
            }
            else
            {
              v136 = (int32x4_t)vnegq_f32(*v108);
              v137 = (int8x16_t)vtrn2q_s32(*(int32x4_t *)v108, vtrn1q_s32(*(int32x4_t *)v108, v136));
              v138 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v108, (int8x16_t)v136, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v137, v137, 8uLL));
              v139 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v108);
              v139.i32[0] = v136.i32[1];
              v139.i32[3] = v136.i32[2];
              v140 = vaddq_f32(vaddq_f32(v139, vmulq_f32(*v108, (float32x4_t)0)), v138);
              v141 = (int32x4_t)vnegq_f32(v140);
              v142 = (int8x16_t)vtrn2q_s32((int32x4_t)v140, vtrn1q_s32((int32x4_t)v140, v141));
              v143 = (float32x4_t)vrev64q_s32((int32x4_t)v140);
              v143.i32[0] = v141.i32[1];
              v143.i32[3] = v141.i32[2];
              v109 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v140, v271, 3), v143, (float32x4_t)vdupq_laneq_s32((int32x4_t)v271, 2)), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v140, (int8x16_t)v141, 8uLL), *(float32x2_t *)v271.f32, 1), (float32x4_t)vextq_s8(v142, v142, 8uLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v271.f32, 0)));
            }
            *((float32x4_t *)this + 9) = v109;
          }
LABEL_13:
          *((_BYTE *)this + 64) = 0;
          v11 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 0x1Cu);
          v12 = v11;
          if (!this[1][28].i8[8])
            goto LABEL_41;
          if (v11 <= 0.0)
            goto LABEL_41;
          v13 = *this;
          v14 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
          if (v14 == 1 || !v14 && *(_DWORD *)(v13->i64[0] + 108) > 1u)
            goto LABEL_41;
          v15 = atomic_load((unsigned int *)(v13->i64[1] + 72));
          if (v15 == 5)
            goto LABEL_41;
          v16 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 0x1Du);
          v17 = *this;
          if (v16 <= 0.0)
          {
            v110 = ausdk::AUElement::GetParameter((ausdk::AUElement *)v17->i64[0], 0x1Eu);
            if (v110 <= 0.0)
            {
LABEL_41:
              *((float *)this + 17) = v12;
              v114 = *this;
              v115 = this[1];
              *((float32x4_t *)this + 7) = (*this)[3];
              this[20] = (float32x4_t *)vrev64_s32(*(int32x2_t *)&v114[4].i32[1]);
              *((_DWORD *)this + 42) = v115[33].i32[1];
              v116 = *((_OWORD *)this + 6);
              *((_OWORD *)this + 13) = *((_OWORD *)this + 5);
              *((_OWORD *)this + 14) = v116;
              v117 = *((_OWORD *)this + 4);
              *((_OWORD *)this + 11) = *((_OWORD *)this + 3);
              *((_OWORD *)this + 12) = v117;
              v118 = *((_OWORD *)this + 9);
              v119 = *((_OWORD *)this + 7);
              *((_OWORD *)this + 16) = *((_OWORD *)this + 8);
              *((_OWORD *)this + 17) = v118;
              *((_OWORD *)this + 15) = v119;
              *(_OWORD *)((char *)this + 284) = *(_OWORD *)((char *)this + 156);
              v120 = atomic_load((unsigned int *)(v114->i64[1] + 80));
              if (v120 != 1 && (v120 || *(_DWORD *)(v114->i64[0] + 108) <= 1u))
              {
                v121 = atomic_load((unsigned int *)(v114->i64[1] + 72));
                if (v121 != 5)
                {
                  v122 = *((float32x4_t *)this + 3);
                  v123 = *((_DWORD *)this + 11);
                  if (!*(_BYTE *)(*(_QWORD *)((*this)->i64[1] + 232) + 2544))
                  {
                    v124 = this[1];
                    v125 = atomic_load(&v124[25].u32[2]);
                    if (v125 || v124[25].i32[3])
                    {
                      v272 = *((float32x4_t *)this + 3);
                      AUSM::SoundStage::warp((uint64_t)this[1], (float32x4_t *)this + 11, (float *)this + 73, (float *)this + 74, *((_DWORD *)this + 11));
                      v122 = v272;
                    }
                  }
                  if (this[1][65].i8[12])
                  {
                    v126 = atomic_load((unsigned __int8 *)(*(_QWORD *)((*this)->i64[1] + 232) + 163));
                    if ((v126 & 1) != 0)
                    {
                      v273 = v122;
                      AUSM::SoundStage::warp((uint64_t)&this[1][36], (float32x4_t *)this + 11, (float *)this + 73, (float *)this + 74, v123);
                      v122 = v273;
                    }
                  }
                  if (*((_BYTE *)this + 128))
                  {
                    v127 = vmulq_f32(v122, v122);
                    v128 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1)));
                    if (sqrtf(v128.f32[0]) > 0.001)
                    {
                      v129 = *((float32x4_t *)this + 11);
                      v130 = vmulq_f32(v129, v129);
                      v131 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1)));
                      if (sqrtf(v131.f32[0]) > 0.001)
                      {
                        v132 = sqrtf(vmulq_f32(v128, v131).f32[0]);
                        if (v132 <= 0.0001)
                        {
                          v135.i64[0] = 0;
                          v135.i32[2] = 0;
                          v144 = 1.0;
                        }
                        else
                        {
                          v133 = vmulq_f32(v122, v129);
                          v134 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1))).f32[0];
                          if ((float)((float)(v134 / v132) + 1.0) >= 0.0001)
                          {
                            v145 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v129, (int32x4_t)v129), (int8x16_t)v129, 0xCuLL), vnegq_f32(v122)), v129, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), (int8x16_t)v122, 0xCuLL));
                            v135 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v145, v145), (int8x16_t)v145, 0xCuLL);
                            v144 = v134 + v132;
                          }
                          else
                          {
                            if (fabsf(v122.f32[0]) <= fabsf(v122.f32[2]))
                            {
                              v135.i32[0] = 0;
                              v135.f32[1] = -v122.f32[2];
                              v135.i32[2] = v122.i32[1];
                            }
                            else
                            {
                              v135 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v122.f32[1]), (int32x4_t)v122);
                            }
                            v144 = 0.0;
                          }
                        }
                        v135.f32[3] = v144;
                        v146 = (int8x16_t)vmulq_f32(v135, v135);
                        v147 = vadd_f32(*(float32x2_t *)v146.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL));
                        if (vaddv_f32(v147) == 0.0)
                        {
                          v148 = (float32x4_t)xmmword_1B6629CC0;
                        }
                        else
                        {
                          v149 = vadd_f32(v147, (float32x2_t)vdup_lane_s32((int32x2_t)v147, 1)).u32[0];
                          v150 = vrsqrte_f32((float32x2_t)v149);
                          v151 = vmul_f32(v150, vrsqrts_f32((float32x2_t)v149, vmul_f32(v150, v150)));
                          v148 = vmulq_n_f32(v135, vmul_f32(v151, vrsqrts_f32((float32x2_t)v149, vmul_f32(v151, v151))).f32[0]);
                        }
                        v152 = *((float32x4_t *)this + 17);
                        v153 = (int32x4_t)vnegq_f32(v152);
                        v154 = (int8x16_t)vtrn2q_s32((int32x4_t)v152, vtrn1q_s32((int32x4_t)v152, v153));
                        v155 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v152, (int8x16_t)v153, 8uLL), *(float32x2_t *)v148.f32, 1), (float32x4_t)vextq_s8(v154, v154, 8uLL), v148.f32[0]);
                        v156 = (float32x4_t)vrev64q_s32((int32x4_t)v152);
                        v156.i32[0] = v153.i32[1];
                        v156.i32[3] = v153.i32[2];
                        *((float32x4_t *)this + 17) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v152, v148, 3), v156, v148, 2), v155);
                      }
                    }
                  }
                  if (*((_BYTE *)this + 192))
                  {
                    v276 = 1065353216;
                    v277.i32[0] = 1065353216;
                    v157 = *((_DWORD *)this + 11);
                    if (!*(_BYTE *)(*(_QWORD *)((*this)->i64[1] + 232) + 2544))
                    {
                      v158 = this[1];
                      v159 = atomic_load(&v158[25].u32[2]);
                      if (v159 || v158[25].i32[3])
                        AUSM::SoundStage::warp((uint64_t)this[1], (float32x4_t *)this + 13, v277.f32, (float *)&v276, *((_DWORD *)this + 11));
                    }
                    if (this[1][65].i8[12])
                    {
                      v160 = atomic_load((unsigned __int8 *)(*(_QWORD *)((*this)->i64[1] + 232) + 163));
                      if ((v160 & 1) != 0)
                        AUSM::SoundStage::warp((uint64_t)&this[1][36], (float32x4_t *)this + 13, v277.f32, (float *)&v276, v157);
                    }
                    v161 = *((_DWORD *)this + 11);
                    if (!*(_BYTE *)(*(_QWORD *)((*this)->i64[1] + 232) + 2544))
                    {
                      v162 = this[1];
                      v163 = atomic_load(&v162[25].u32[2]);
                      if (v163 || v162[25].i32[3])
                        AUSM::SoundStage::warp((uint64_t)this[1], (float32x4_t *)this + 14, v277.f32, (float *)&v276, *((_DWORD *)this + 11));
                    }
                    if (this[1][65].i8[12])
                    {
                      v164 = atomic_load((unsigned __int8 *)(*(_QWORD *)((*this)->i64[1] + 232) + 163));
                      if ((v164 & 1) != 0)
                        AUSM::SoundStage::warp((uint64_t)&this[1][36], (float32x4_t *)this + 14, v277.f32, (float *)&v276, v161);
                    }
                  }
                }
              }
              v4 = *this;
              v65 = this[1][64].i32[2];
LABEL_85:
              *((_DWORD *)this + 174) = v65;
              v165 = *((_OWORD *)this + 16);
              *((_OWORD *)this + 23) = *((_OWORD *)this + 15);
              *((_OWORD *)this + 24) = v165;
              *((_OWORD *)this + 25) = *((_OWORD *)this + 17);
              v166 = *((_OWORD *)this + 12);
              *((_OWORD *)this + 19) = *((_OWORD *)this + 11);
              *((_OWORD *)this + 20) = v166;
              v167 = *((_OWORD *)this + 14);
              *((_OWORD *)this + 21) = *((_OWORD *)this + 13);
              *((_OWORD *)this + 22) = v167;
              *(_OWORD *)((char *)this + 412) = *(_OWORD *)((char *)this + 284);
              v168 = atomic_load((unsigned int *)(v4->i64[1] + 80));
              if (v168 != 1 && (v168 || *(_DWORD *)(v4->i64[0] + 108) <= 1u))
              {
                v169 = atomic_load((unsigned int *)(v4->i64[1] + 72));
                if (v169 != 5)
                {
                  if (!(*this)[4].i8[12])
                  {
                    v170 = this[1];
                    v277 = v170[29];
                    v172 = v170[30].f32[1];
LABEL_94:
                    v173 = *((float32x4_t *)this + 11);
                    v174 = vmulq_f32(v277, (float32x4_t)xmmword_1B66A07B0);
                    v175 = (int32x4_t)vnegq_f32(v174);
                    v176 = (int8x16_t)vtrn2q_s32((int32x4_t)v174, vtrn1q_s32((int32x4_t)v174, v175));
                    v177 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v174, (int8x16_t)v175, 8uLL), *(float32x2_t *)v173.f32, 1), (float32x4_t)vextq_s8(v176, v176, 8uLL), v173.f32[0]);
                    v178 = (float32x4_t)vrev64q_s32((int32x4_t)v174);
                    v178.i32[0] = v175.i32[1];
                    v178.i32[3] = v175.i32[2];
                    v179 = vmlaq_laneq_f32(v177, v178, v173, 2);
                    v180 = (int32x4_t)vnegq_f32(v179);
                    v181 = (int8x16_t)vtrn2q_s32((int32x4_t)v179, vtrn1q_s32((int32x4_t)v179, v180));
                    v182 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v179, (int8x16_t)v180, 8uLL), *(float32x2_t *)v277.f32, 1), (float32x4_t)vextq_s8(v181, v181, 8uLL), v277.f32[0]);
                    v183 = (float32x4_t)vrev64q_s32((int32x4_t)v179);
                    v183.i32[0] = v180.i32[1];
                    v183.i32[3] = v180.i32[2];
                    *((float32x4_t *)this + 19) = vmulq_n_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v179, v277, 3), v183, v277, 2), v182), v172);
                    if (*((_BYTE *)this + 256))
                    {
                      v184 = v170[29];
                      v185 = *((float32x4_t *)this + 17);
                      v186 = (int32x4_t)vnegq_f32(v185);
                      v187 = (int8x16_t)vtrn2q_s32((int32x4_t)v185, vtrn1q_s32((int32x4_t)v185, v186));
                      v188 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v185, (int8x16_t)v186, 8uLL), *(float32x2_t *)v184.f32, 1), (float32x4_t)vextq_s8(v187, v187, 8uLL), v184.f32[0]);
                      v189 = (float32x4_t)vrev64q_s32((int32x4_t)v185);
                      v189.i32[0] = v186.i32[1];
                      v189.i32[3] = v186.i32[2];
                      *((float32x4_t *)this + 25) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v185, v184, 3), v189, v184, 2), v188);
                    }
                    if (*((_BYTE *)this + 192))
                    {
                      v190 = v170[29];
                      v191 = vmulq_f32(v190, (float32x4_t)xmmword_1B66A07B0);
                      v192 = (int32x4_t)vnegq_f32(v191);
                      v193 = (int8x16_t)vtrn2q_s32((int32x4_t)v191, vtrn1q_s32((int32x4_t)v191, v192));
                      v194 = *((float32x4_t *)this + 13);
                      v195 = *((float32x4_t *)this + 14);
                      v196 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v191, (int8x16_t)v192, 8uLL), *(float32x2_t *)v194.f32, 1), (float32x4_t)vextq_s8(v193, v193, 8uLL), v194.f32[0]);
                      v197 = (float32x4_t)vrev64q_s32((int32x4_t)v191);
                      v197.i32[0] = v192.i32[1];
                      v197.i32[3] = v192.i32[2];
                      v198 = vmlaq_laneq_f32(v196, v197, v194, 2);
                      v199 = (int32x4_t)vnegq_f32(v198);
                      v200 = (int8x16_t)vtrn2q_s32((int32x4_t)v198, vtrn1q_s32((int32x4_t)v198, v199));
                      v201 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v198, (int8x16_t)v199, 8uLL), *(float32x2_t *)v190.f32, 1), (float32x4_t)vextq_s8(v200, v200, 8uLL), v190.f32[0]);
                      v202 = (float32x4_t)vrev64q_s32((int32x4_t)v198);
                      v202.i32[0] = v199.i32[1];
                      v202.i32[3] = v199.i32[2];
                      *((float32x4_t *)this + 21) = vmulq_n_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v198, v190, 3), v202, v190, 2), v201), v170[30].f32[1]);
                      v203 = v170[29];
                      v204 = vmulq_f32(v203, (float32x4_t)xmmword_1B66A07B0);
                      v205 = (int32x4_t)vnegq_f32(v204);
                      v206 = (int8x16_t)vtrn2q_s32((int32x4_t)v204, vtrn1q_s32((int32x4_t)v204, v205));
                      v207 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v204, (int8x16_t)v205, 8uLL), *(float32x2_t *)v195.f32, 1), (float32x4_t)vextq_s8(v206, v206, 8uLL), v195.f32[0]);
                      v208 = (float32x4_t)vrev64q_s32((int32x4_t)v204);
                      v208.i32[0] = v205.i32[1];
                      v208.i32[3] = v205.i32[2];
                      v209 = vmlaq_laneq_f32(v207, v208, v195, 2);
                      v210 = (int32x4_t)vnegq_f32(v209);
                      v211 = (int8x16_t)vtrn2q_s32((int32x4_t)v209, vtrn1q_s32((int32x4_t)v209, v210));
                      v212 = (float32x4_t)vrev64q_s32((int32x4_t)v209);
                      v212.i32[0] = v210.i32[1];
                      v212.i32[3] = v210.i32[2];
                      *((float32x4_t *)this + 22) = vmulq_n_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v209, v203, 3), v212, v203, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v209, (int8x16_t)v210, 8uLL), *(float32x2_t *)v203.f32, 1), (float32x4_t)vextq_s8(v211, v211, 8uLL), v203.f32[0])), v170[30].f32[1]);
                    }
                    goto LABEL_98;
                  }
                  v170 = this[1];
                  v171 = v170[27].f32[1];
                  if (v171 < 1.0)
                  {
                    v277 = v170[29];
                    v172 = v170[30].f32[1];
                    if (v171 > 0.0)
                    {
                      v274 = v170[30].f32[1];
                      AUSM::SoundStage::headLockTransitionDirection(&v277, a2, v171);
                      v172 = v171 + (float)((float)(1.0 - v171) * v274);
                    }
                    goto LABEL_94;
                  }
                }
              }
LABEL_98:
              v4 = *this;
              v66 = this[1][64].i32[3];
              goto LABEL_99;
            }
            LODWORD(v111) = 0;
            *((float *)&v111 + 1) = -v110;
            v112 = *((float32x4_t *)this + 3);
            v113 = vaddq_f32((float32x4_t)v111, v112);
            v63 = vsubq_f32(v112, (float32x4_t)v111);
            *((float32x4_t *)this + 5) = v113;
          }
          else
          {
            v18 = atomic_load((unsigned int *)(v17->i64[1] + 80));
            if (v18 == 3)
            {
              v19 = *((float *)this + 5);
              v20 = __sincosf_stret((float)(*((float *)this + 4) * 0.017453) * 0.5);
              v21 = __sincosf_stret((float)(v19 * 0.017453) * 0.5);
              v22.f32[0] = -(float)((float)(v20.__sinval * v21.__sinval)
                                  - (float)((float)(v20.__cosval * v21.__cosval) * 0.0));
              v22.f32[1] = (float)(v20.__sinval * (float)(v21.__cosval * 0.0)) + (float)(v21.__sinval * v20.__cosval);
              v22.f32[2] = (float)(v20.__cosval * (float)(v21.__sinval * -0.0)) + (float)(v21.__cosval * v20.__sinval);
              v22.f32[3] = (float)(v20.__cosval * v21.__cosval) + (float)((float)(v20.__sinval * v21.__sinval) * 0.0);
              v23 = (int32x4_t)vnegq_f32(v22);
              v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, v23));
              v25 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
              v25.i32[0] = v23.i32[1];
              v25.i32[3] = v23.i32[2];
              v271 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v22, v271, 3), v25, v271, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v23, 8uLL), *(float32x2_t *)v271.f32, 1), (float32x4_t)vextq_s8(v24, v24, 8uLL), v271.f32[0]));
            }
            v26 = __sincosf_stret((float)(v16 * -0.017453) * 0.5);
            v27 = (int8x16_t)vmulq_f32(v271, v271);
            *(float32x2_t *)v27.i8 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
            v27.i32[0] = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)).u32[0];
            v28 = vrecpe_f32((float32x2_t)v27.u32[0]);
            v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27.u32[0], v28));
            v30 = vmulq_n_f32(vmulq_f32(v271, (float32x4_t)xmmword_1B66A07B0), vmul_f32(v29, vrecps_f32((float32x2_t)v27.u32[0], v29)).f32[0]);
            v31 = (int32x4_t)vnegq_f32(v30);
            v32 = (int8x16_t)vtrn2q_s32((int32x4_t)v30, vtrn1q_s32((int32x4_t)v30, v31));
            v33 = (float32x4_t)vrev64q_s32((int32x4_t)v30);
            v33.i32[0] = v31.i32[1];
            v33.i32[3] = v31.i32[2];
            v34 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v30, v26.__cosval + (float)((float)(v26.__sinval * 0.0) * 0.0)), v33, v26.__sinval - (float)(v26.__cosval * 0.0)), vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v31, 8uLL), (float)(v26.__sinval * 0.0) + (float)(v26.__cosval * 0.0)), (float32x4_t)vextq_s8(v32, v32, 8uLL), -(float)((float)(v26.__sinval * 0.0) - (float)(v26.__cosval * 0.0))));
            v35 = (int32x4_t)vnegq_f32(v34);
            v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
            v37 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), *(float32x2_t *)v271.f32, 1), (float32x4_t)vextq_s8(v36, v36, 8uLL), v271.f32[0]);
            v38 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
            v38.i32[0] = v35.i32[1];
            v38.i32[3] = v35.i32[2];
            v39 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v34, v271, 3), v38, v271, 2), v37);
            v40 = *((float32x4_t *)this + 3);
            v41 = vmulq_f32(v39, (float32x4_t)xmmword_1B66A07B0);
            v42 = (int32x4_t)vnegq_f32(v41);
            v43 = (int8x16_t)vtrn2q_s32((int32x4_t)v41, vtrn1q_s32((int32x4_t)v41, v42));
            v44 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v42, 8uLL), *(float32x2_t *)v40.f32, 1), (float32x4_t)vextq_s8(v43, v43, 8uLL), v40.f32[0]);
            v45 = (float32x4_t)vrev64q_s32((int32x4_t)v41);
            v45.i32[0] = v42.i32[1];
            v45.i32[3] = v42.i32[2];
            v46 = vmlaq_laneq_f32(v44, v45, v40, 2);
            v47 = (int32x4_t)vnegq_f32(v46);
            v48 = (int8x16_t)vtrn2q_s32((int32x4_t)v46, vtrn1q_s32((int32x4_t)v46, v47));
            v49 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v47, 8uLL), *(float32x2_t *)v39.f32, 1), (float32x4_t)vextq_s8(v48, v48, 8uLL), v39.f32[0]);
            v50 = (float32x4_t)vrev64q_s32((int32x4_t)v46);
            v50.i32[0] = v47.i32[1];
            v50.i32[3] = v47.i32[2];
            v51 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v46, v39, 3), v50, v39, 2), v49);
            v52 = (int8x16_t)vmulq_f32(v39, v39);
            *(float32x2_t *)v52.i8 = vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
            v52.i32[0] = vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1)).u32[0];
            *(float32x2_t *)v50.f32 = vrecpe_f32((float32x2_t)v52.u32[0]);
            *(float32x2_t *)v50.f32 = vmul_f32(*(float32x2_t *)v50.f32, vrecps_f32((float32x2_t)v52.u32[0], *(float32x2_t *)v50.f32));
            v53 = vmulq_n_f32(v41, vmul_f32(*(float32x2_t *)v50.f32, vrecps_f32((float32x2_t)v52.u32[0], *(float32x2_t *)v50.f32)).f32[0]);
            v54 = vmulq_f32(v53, (float32x4_t)xmmword_1B66A07B0);
            v55 = (int32x4_t)vnegq_f32(v54);
            v56 = (int8x16_t)vtrn2q_s32((int32x4_t)v54, vtrn1q_s32((int32x4_t)v54, v55));
            v57 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v55, 8uLL), *(float32x2_t *)v40.f32, 1), (float32x4_t)vextq_s8(v56, v56, 8uLL), v40.f32[0]);
            v58 = (float32x4_t)vrev64q_s32((int32x4_t)v54);
            v58.i32[0] = v55.i32[1];
            v58.i32[3] = v55.i32[2];
            v59 = vmlaq_laneq_f32(v57, v58, v40, 2);
            v60 = (int32x4_t)vnegq_f32(v59);
            v61 = (int8x16_t)vtrn2q_s32((int32x4_t)v59, vtrn1q_s32((int32x4_t)v59, v60));
            v62 = (float32x4_t)vrev64q_s32((int32x4_t)v59);
            v62.i32[0] = v60.i32[1];
            v62.i32[3] = v60.i32[2];
            v63 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v59, v53, 3), v62, v53, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v60, 8uLL), *(float32x2_t *)v53.f32, 1), (float32x4_t)vextq_s8(v61, v61, 8uLL), v53.f32[0]));
            *((float32x4_t *)this + 5) = v51;
          }
          *((float32x4_t *)this + 6) = v63;
          *((_BYTE *)this + 64) = 1;
          goto LABEL_41;
        }
LABEL_12:
        *((_BYTE *)this + 128) = 0;
        goto LABEL_13;
      }
      SnappedCoordinates = *((float *)this + 4);
      v71 = *((float *)this + 5);
      v72 = *((float *)this + 6);
      v73 = atomic_load((unsigned __int8 *)&(*this)[15]);
      v74 = *this;
      if ((v73 & 1) == 0)
      {
        if (v74[10].i8[1])
        {
          SnappedCoordinates = AUSM::SnapCoordinates::getSnappedCoordinates((uint64_t)&v74[12].i64[1], 0, 0, SnappedCoordinates, v71);
          v74 = *this;
          v7 = v271;
        }
        if (v74[10].i8[2])
        {
          SnappedCoordinates = AUSM::SnapCoordinates::getExcludedCoordinates((uint64_t)&v74[12].i64[1], (AUSM::ExclusionZone **)v74[2].i64[0], (BOOL)v74, SnappedCoordinates, v71);
          v74 = *this;
          v7 = v271;
        }
      }
      v75 = v74[7];
      v76 = (int32x4_t)vnegq_f32(v75);
      v77 = (int8x16_t)vtrn2q_s32((int32x4_t)v75, vtrn1q_s32((int32x4_t)v75, v76));
      v78 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v76, 8uLL), *(float32x2_t *)v7.f32, 1), (float32x4_t)vextq_s8(v77, v77, 8uLL), v7.f32[0]);
      v79 = (float32x4_t)vrev64q_s32((int32x4_t)v75);
      v79.i32[0] = v76.i32[1];
      v79.i32[3] = v76.i32[2];
      v271 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v75, v7, 3), v79, v7, 2), v78);
      v80 = v71 * 0.017453;
      v81 = __sincosf_stret(SnappedCoordinates * 0.017453);
      v82 = __sincosf_stret(v80);
      v83 = vmulq_f32(v271, (float32x4_t)xmmword_1B66A07B0);
      v84 = (int32x4_t)vnegq_f32(v83);
      v85 = (int8x16_t)vtrn2q_s32((int32x4_t)v83, vtrn1q_s32((int32x4_t)v83, v84));
      v86 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v84, 8uLL), (float)(v81.__sinval * v72) * v82.__cosval);
      v87 = (float32x4_t)vrev64q_s32((int32x4_t)v83);
      v87.i32[0] = v84.i32[1];
      v87.i32[3] = v84.i32[2];
      v88 = vmlaq_n_f32(vmlaq_n_f32(v86, (float32x4_t)vextq_s8(v85, v85, 8uLL), (float)(v81.__cosval * v72) * v82.__cosval), v87, -(float)(v72 * v82.__sinval));
      v89 = (int32x4_t)vnegq_f32(v88);
      v90 = (int8x16_t)vtrn2q_s32((int32x4_t)v88, vtrn1q_s32((int32x4_t)v88, v89));
      v91 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v89, 8uLL), *(float32x2_t *)v271.f32, 1), (float32x4_t)vextq_s8(v90, v90, 8uLL), v271.f32[0]);
      v92 = (float32x4_t)vrev64q_s32((int32x4_t)v88);
      v92.i32[0] = v89.i32[1];
      v92.i32[3] = v89.i32[2];
      *((float32x4_t *)this + 3) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v88, v271, 3), v92, v271, 2), v91);
      v10 = xmmword_1B6629CC0;
    }
    *((_OWORD *)this + 9) = v10;
    goto LABEL_12;
  }
  v64 = this[1];
  v65 = v64[64].i32[2];
  if (*((_DWORD *)this + 174) != v65)
    goto LABEL_85;
  v66 = v64[64].i32[3];
  if (*((_DWORD *)this + 175) != v66)
  {
LABEL_99:
    *((_DWORD *)this + 175) = v66;
    v213 = *((_OWORD *)this + 24);
    *((_OWORD *)this + 31) = *((_OWORD *)this + 23);
    *((_OWORD *)this + 32) = v213;
    *((_OWORD *)this + 33) = *((_OWORD *)this + 25);
    v214 = *((_OWORD *)this + 20);
    *((_OWORD *)this + 27) = *((_OWORD *)this + 19);
    *((_OWORD *)this + 28) = v214;
    v215 = *((_OWORD *)this + 22);
    *((_OWORD *)this + 29) = *((_OWORD *)this + 21);
    *((_OWORD *)this + 30) = v215;
    *(_OWORD *)((char *)this + 540) = *(_OWORD *)((char *)this + 412);
    v216 = atomic_load((unsigned int *)(v4->i64[1] + 80));
    if (v216 != 1 && (v216 || *(_DWORD *)(v4->i64[0] + 108) <= 1u))
    {
      v217 = atomic_load((unsigned int *)(v4->i64[1] + 72));
      if (v217 != 5 && (!(*this)[4].i8[12] || this[1][27].f32[1] < 1.0))
      {
        v218 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
        v219 = this[1];
        if (v218 != 3 || v219[27].f32[2] > 0.0)
        {
          v220 = v219[31];
          v221 = vmulq_f32(v220, v220);
          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v221, 2), vaddq_f32(v221, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 1))).f32[0]) > 0.001)
          {
            if ((*this)[4].i8[12])
            {
              v222 = v219[27].f32[1];
              if (v222 > 0.0 && v222 < 1.0)
                v220 = vmulq_n_f32(v220, 1.0 - v222);
            }
            v223 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
            if (v223 == 3)
              v220 = vmulq_n_f32(v220, this[1][27].f32[2]);
            v224 = *((float32x4_t *)this + 19);
            if (*((_BYTE *)this + 320))
            {
              v225 = vsubq_f32(*((float32x4_t *)this + 30), v220);
              *((float32x4_t *)this + 29) = vsubq_f32(*((float32x4_t *)this + 29), v220);
              *((float32x4_t *)this + 30) = v225;
            }
            v275 = vsubq_f32(v224, v220);
            v226 = vmulq_f32(v224, v224);
            v227 = *this;
            v228 = (AUSM::DistanceGain *)((char *)&(*this)[10].u64[1] + 4);
            v229 = AUSM::DistanceGain::calculateDistanceGain(v228, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v226, 2), vaddq_f32(v226, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v226.f32, 1))).f32[0]));
            v230 = v275;
            v231 = v229;
            if (v229 > 0.000001)
            {
              v232 = vmulq_f32(v275, v275);
              v233 = AUSM::DistanceGain::calculateDistanceGain(v228, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v232, 2), vaddq_f32(v232, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v232.f32, 1))).f32[0]));
              AUSM::InputGeometry::clampDistanceGain((ausdk::AUElement **)v227, (float)(v233 / v231) * *((float *)this + 104), v227[4].f32[1]);
              *((_DWORD *)this + 136) = v234;
              v230 = v275;
            }
            *((float32x4_t *)this + 27) = v230;
          }
        }
      }
    }
    v4 = *this;
    v67 = this[1][65].i32[0];
    goto LABEL_120;
  }
  v67 = v64[65].i32[0];
  if (*((_DWORD *)this + 176) == v67)
  {
    result = 0;
    goto LABEL_134;
  }
LABEL_120:
  *((_DWORD *)this + 176) = v67;
  v235 = *((_OWORD *)this + 32);
  *((_OWORD *)this + 39) = *((_OWORD *)this + 31);
  *((_OWORD *)this + 40) = v235;
  *((_OWORD *)this + 41) = *((_OWORD *)this + 33);
  v236 = *((_OWORD *)this + 28);
  *((_OWORD *)this + 35) = *((_OWORD *)this + 27);
  *((_OWORD *)this + 36) = v236;
  v237 = *((_OWORD *)this + 30);
  *((_OWORD *)this + 37) = *((_OWORD *)this + 29);
  *((_OWORD *)this + 38) = v237;
  *(_OWORD *)((char *)this + 668) = *(_OWORD *)((char *)this + 540);
  v238 = atomic_load((unsigned int *)(v4->i64[1] + 80));
  if (v238 != 1 && (v238 || *(_DWORD *)(v4->i64[0] + 108) <= 1u))
  {
    v239 = atomic_load((unsigned int *)(v4->i64[1] + 72));
    if (v239 != 5)
    {
      if (!(*this)[4].i8[12])
      {
        v277 = this[1][32];
LABEL_129:
        v242 = v277;
        v243 = vmulq_f32(v277, (float32x4_t)xmmword_1B66A07B0);
        v244 = (int32x4_t)vnegq_f32(v243);
        v245 = (int8x16_t)vtrn2q_s32((int32x4_t)v243, vtrn1q_s32((int32x4_t)v243, v244));
        v246 = (float32x4_t)vextq_s8(v245, v245, 8uLL);
        v247 = (float32x4_t)vextq_s8((int8x16_t)v243, (int8x16_t)v244, 8uLL);
        v248 = (float32x4_t)vrev64q_s32((int32x4_t)v243);
        v248.i32[0] = v244.i32[1];
        v248.i32[3] = v244.i32[2];
        v249 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v247, (float32x2_t)this[54], 1), v246, COERCE_FLOAT(*((_OWORD *)this + 27))), v248, *((float32x4_t *)this + 27), 2);
        v250 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v277.f32, 0);
        v251 = (int32x4_t)vnegq_f32(v249);
        v252 = (int8x16_t)vtrn2q_s32((int32x4_t)v249, vtrn1q_s32((int32x4_t)v249, v251));
        v253 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v249, (int8x16_t)v251, 8uLL), *(float32x2_t *)v277.f32, 1);
        v254 = (float32x4_t)vrev64q_s32((int32x4_t)v249);
        v254.i32[0] = v251.i32[1];
        v254.i32[3] = v251.i32[2];
        v255 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v277, 2);
        *((float32x4_t *)this + 35) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v249, v277, 3), v254, v277, 2), vmlaq_n_f32(v253, (float32x4_t)vextq_s8(v252, v252, 8uLL), v277.f32[0]));
        if (*((_BYTE *)this + 512))
        {
          v256 = *((float32x4_t *)this + 33);
          v257 = (int32x4_t)vnegq_f32(v256);
          v258 = (int8x16_t)vtrn2q_s32((int32x4_t)v256, vtrn1q_s32((int32x4_t)v256, v257));
          v259 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v256, (int8x16_t)v257, 8uLL), *(float32x2_t *)v242.f32, 1), (float32x4_t)vextq_s8(v258, v258, 8uLL), v250);
          v260 = (float32x4_t)vrev64q_s32((int32x4_t)v256);
          v260.i32[0] = v257.i32[1];
          v260.i32[3] = v257.i32[2];
          *((float32x4_t *)this + 41) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v256, v242, 3), v260, v255), v259);
        }
        if (*((_BYTE *)this + 448))
        {
          v261 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v247, (float32x2_t)this[58], 1), v246, COERCE_FLOAT(*((_OWORD *)this + 29))), v248, *((float32x4_t *)this + 29), 2);
          v262 = (int32x4_t)vnegq_f32(v261);
          v263 = (int8x16_t)vtrn2q_s32((int32x4_t)v261, vtrn1q_s32((int32x4_t)v261, v262));
          v264 = (float32x4_t)vrev64q_s32((int32x4_t)v261);
          v264.i32[0] = v262.i32[1];
          v264.i32[3] = v262.i32[2];
          v265 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v261, v242, 3), v264, v255), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v261, (int8x16_t)v262, 8uLL), *(float32x2_t *)v242.f32, 1), (float32x4_t)vextq_s8(v263, v263, 8uLL), v250));
          v266 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v247, (float32x2_t)this[60], 1), v246, COERCE_FLOAT(*((_OWORD *)this + 30))), v248, *((float32x4_t *)this + 30), 2);
          v267 = (int32x4_t)vnegq_f32(v266);
          v268 = (int8x16_t)vtrn2q_s32((int32x4_t)v266, vtrn1q_s32((int32x4_t)v266, v267));
          v269 = (float32x4_t)vrev64q_s32((int32x4_t)v266);
          v269.i32[0] = v267.i32[1];
          v269.i32[3] = v267.i32[2];
          *((float32x4_t *)this + 37) = v265;
          *((float32x4_t *)this + 38) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v266, v242, 3), v269, v255), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v266, (int8x16_t)v267, 8uLL), *(float32x2_t *)v242.f32, 1), (float32x4_t)vextq_s8(v268, v268, 8uLL), v250));
        }
        goto LABEL_133;
      }
      v240 = this[1];
      v241 = v240[27].f32[1];
      if (v241 < 1.0)
      {
        v277 = v240[32];
        if (v241 > 0.0)
          AUSM::SoundStage::headLockTransitionDirection(&v277, a2, v241);
        goto LABEL_129;
      }
    }
  }
LABEL_133:
  v64 = this[1];
  result = 1;
LABEL_134:
  v270 = v64[65].i32[2];
  if (v270 != *((_DWORD *)this + 177))
  {
    *((_DWORD *)this + 177) = v270;
    return 1;
  }
  return result;
}

void AUDistance::~AUDistance(AUDistance *this)
{
  AUDistance::~AUDistance(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  NSObject *v2;
  _BYTE v3[12];
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E69E2AB0;
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v2 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v3 = 136315394;
    *(_QWORD *)&v3[4] = "AUDistance.cpp";
    v4 = 1024;
    v5 = 75;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Destructed.", v3, 0x12u);
  }
LABEL_9:
  std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, 0);
  std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, 0);
  *(_QWORD *)v3 = (char *)this + 568;
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
  ausdk::AUBase::~AUBase(this);
}

void AUDistance::CreateExtendedElements(AUDistance *this)
{
  unint64_t i;
  std::string *v3;
  __int128 v4;
  void **v5;
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  ausdk::AUScope::Initialize((int64x2_t *)((char *)this + 552), this, 4, 16);
  for (i = 0; i != 16; ++i)
  {
    std::to_string(&v10, i);
    v3 = std::string::insert(&v10, 0, "Mic", 3uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v12 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    v7 = *((_QWORD *)this + 74);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 32))(v7, i);
    }
    else
    {
      v9 = *((_QWORD *)this + 71);
      if (i >= (*((_QWORD *)this + 72) - v9) >> 3)
        v8 = 0;
      else
        v8 = *(_QWORD *)(v9 + 8 * i);
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(v8 + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B64BC350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUDistance::Initialize(AUDistance *this)
{
  NSObject *v2;
  uint64_t Element;
  unsigned int v4;
  uint64_t v5;
  char v6;
  char v7;
  int64x2_t *Scope;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  int v14;
  uint64_t result;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  NSObject *v45;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (!getDistanceLogScope(void)::scope)
  {
    v2 = MEMORY[0x1E0C81028];
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v46 = 136315394;
      v47 = "AUDistance.cpp";
      v48 = 1024;
      v49 = 83;
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing.", (uint8_t *)&v46, 0x12u);
    }
    goto LABEL_9;
  }
  v2 = *(NSObject **)getDistanceLogScope(void)::scope;
  if (*(_QWORD *)getDistanceLogScope(void)::scope)
    goto LABEL_7;
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 80), 0);
  v4 = 0;
  v5 = *(_QWORD *)(Element + 80);
  *((_DWORD *)this + 154) = *(_DWORD *)(Element + 108);
  *((_QWORD *)this + 76) = v5;
  v6 = 1;
  do
  {
    v7 = v6;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 80), v4) + 108) != *((_DWORD *)this + 154))
    {
      if (getDistanceLogScope(void)::once != -1)
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
      if (getDistanceLogScope(void)::scope)
      {
        v11 = *(NSObject **)getDistanceLogScope(void)::scope;
        if (!*(_QWORD *)getDistanceLogScope(void)::scope)
          return 4294956421;
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = *((_DWORD *)this + 154);
        v46 = 136315650;
        v47 = "AUDistance.cpp";
        v48 = 1024;
        v49 = 96;
        v50 = 1024;
        v51 = v12;
LABEL_42:
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d The number of input channels not equal to the number of expected channels (%u).", (uint8_t *)&v46, 0x18u);
      }
      return 4294956421;
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 128), 0) + 108) != *((_DWORD *)this + 154))
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v11 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956421;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = *((_DWORD *)this + 154);
      v46 = 136315650;
      v47 = "AUDistance.cpp";
      v48 = 1024;
      v49 = 105;
      v50 = 1024;
      v51 = v14;
      goto LABEL_42;
    }
    return 4294956421;
  }
  Scope = (int64x2_t *)ausdk::AUBase::GetScope(this, 4u);
  ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 84);
  if (!*((_BYTE *)this + 600))
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v13 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      {
LABEL_48:
        result = 0;
        *((_BYTE *)this + 544) = 1;
        *((_QWORD *)this + 79) = 0;
        *((_DWORD *)this + 160) = 0;
        return result;
      }
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 136315394;
      v47 = "AUDistance.cpp";
      v48 = 1024;
      v49 = 119;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting the layers plist! Setting AU in Bypass mode.", (uint8_t *)&v46, 0x12u);
    }
    goto LABEL_48;
  }
  (*(void (**)(AUDistance *))(*(_QWORD *)this + 64))(this);
  v9 = *((_QWORD *)this + 82);
  if (!v9)
    return 0;
  if (*((double *)this + 76) != *(double *)v9)
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v10 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        goto LABEL_52;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 136315394;
      v47 = "AUDistance.cpp";
      v48 = 1024;
      v49 = 139;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate is not supported! Setting AU in Bypass mode.", (uint8_t *)&v46, 0x12u);
    }
LABEL_52:
    *((_BYTE *)this + 544) = 1;
    v9 = *((_QWORD *)this + 82);
  }
  if (*((_DWORD *)this + 151) != *(_DWORD *)(v9 + 8))
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v16 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        goto LABEL_62;
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 136315394;
      v47 = "AUDistance.cpp";
      v48 = 1024;
      v49 = 145;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block size is not supported! Setting AU in Bypass mode.", (uint8_t *)&v46, 0x12u);
    }
LABEL_62:
    *((_BYTE *)this + 544) = 1;
    v9 = *((_QWORD *)this + 82);
  }
  if (*((_DWORD *)this + 154) != *(_DWORD *)(v9 + 12))
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v17 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        goto LABEL_72;
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 136315394;
      v47 = "AUDistance.cpp";
      v48 = 1024;
      v49 = 151;
      _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Number of microphones is not supported! Setting AU in Bypass mode.", (uint8_t *)&v46, 0x12u);
    }
LABEL_72:
    *((_BYTE *)this + 544) = 1;
  }
  (*(void (**)(AUDistance *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v18 = *((_QWORD *)this + 9);
  if (v18)
  {
    v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
  }
  else
  {
    v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v20)
      v19 = 0;
    else
      v19 = *v20;
  }
  ausdk::AUElement::SetParameter(v19, 0, (float)*(unsigned int *)(*((_QWORD *)this + 82) + 16), 0);
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
    v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
  }
  else
  {
    v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v23)
      v22 = 0;
    else
      v22 = *v23;
  }
  ausdk::AUElement::SetParameter(v22, 1u, *(float *)(*((_QWORD *)this + 82) + 20), 0);
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v25 = 0;
    else
      v25 = *v26;
  }
  ausdk::AUElement::SetParameter(v25, 3u, *(float *)(*((_QWORD *)this + 82) + 44), 0);
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  ausdk::AUElement::SetParameter(v28, 4u, *((float *)this + 158), 0);
  v30 = *((_QWORD *)this + 9);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  ausdk::AUElement::SetParameter(v31, 5u, *((float *)this + 159), 0);
  v33 = *((_QWORD *)this + 9);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  ausdk::AUElement::SetParameter(v34, 6u, *((float *)this + 160), 0);
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  ausdk::AUElement::SetParameter(v37, 7u, sqrtf(*(float *)(*((_QWORD *)this + 82) + 160)), 0);
  v39 = *((_QWORD *)this + 9);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  ausdk::AUElement::SetParameter(v40, 8u, sqrtf(*(float *)(*((_QWORD *)this + 82) + 164)), 0);
  v42 = *((_QWORD *)this + 9);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  ausdk::AUElement::SetParameter(v43, 2u, (float)*(unsigned int *)(*((_QWORD *)this + 82) + 208), 0);
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v45 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      return 0;
  }
  else
  {
    v45 = MEMORY[0x1E0C81028];
  }
  result = os_log_type_enabled(v45, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    v46 = 136315394;
    v47 = "AUDistance.cpp";
    v48 = 1024;
    v49 = 171;
    _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully Initialized.", (uint8_t *)&v46, 0x12u);
    return 0;
  }
  return result;
}

void AUDistance::Cleanup(AUDistance *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v2 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "AUDistance.cpp";
    v6 = 1024;
    v7 = 180;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Cleanup.", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((_BYTE *)this + 600))
  {
    v3 = *((_QWORD *)this + 82);
    (*(void (**)(_QWORD))(***(_QWORD ***)(v3 + 256) + 48))(**(_QWORD **)(v3 + 256));
    vDSP_vclr(*(float **)(v3 + 64), 1, (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 2);
    vDSP_vclr(*(float **)(v3 + 88), 1, (uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 2);
    vDSP_vclr(*(float **)(v3 + 112), 1, (uint64_t)(*(_QWORD *)(v3 + 120) - *(_QWORD *)(v3 + 112)) >> 2);
    vDSP_vclr(*(float **)(v3 + 136), 1, (uint64_t)(*(_QWORD *)(v3 + 144) - *(_QWORD *)(v3 + 136)) >> 2);
    vDSP_vclr(*(float **)(v3 + 224), 1, (uint64_t)(*(_QWORD *)(v3 + 232) - *(_QWORD *)(v3 + 224)) >> 2);
    *(_DWORD *)(v3 + 44) = 1065353216;
    *(_DWORD *)(v3 + 196) = 0;
    *(_DWORD *)(v3 + 200) = 0;
    *(_DWORD *)(v3 + 204) = *(_DWORD *)(v3 + 40);
    *(_DWORD *)(v3 + 212) = 0;
    *(_WORD *)(v3 + 216) = 256;
    *(float *)(v3 + 168) = *(float *)(v3 + 164) + *(float *)(v3 + 160);
  }
  *((_QWORD *)this + 79) = 0;
  *((_DWORD *)this + 160) = 0;
}

uint64_t AUDistance::Reset(AUDistance *this)
{
  NSObject *v1;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v1 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      return 0;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    v3 = 136315394;
    v4 = "AUDistance.cpp";
    v5 = 1024;
    v6 = 194;
    _os_log_impl(&dword_1B5ED0000, v1, OS_LOG_TYPE_INFO, "%25s:%-5d Resetting the AU.", (uint8_t *)&v3, 0x12u);
  }
  return 0;
}

uint64_t AUDistance::GetPropertyInfo(AUDistance *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a3 || a2 != 3700 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDistance::GetProperty(AUDistance *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 544;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDistance::SetProperty(AUDistance *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t v6;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  NeuralNet *v16;
  uint64_t *v17;
  NSObject *v18;
  int ScalarFrom;
  NSObject **v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  NSObject **v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int v29;
  NSObject **v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject **v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  int v39;
  NSObject **v40;
  NSObject *v41;
  double v42;
  NSObject *v43;
  int v44;
  NSObject **v45;
  NSObject *v46;
  double v47;
  NSObject *v48;
  float *v49;
  int v50;
  NSObject **v51;
  NSObject *v52;
  double v53;
  float v54;
  float v55;
  NSObject **v56;
  NSObject *v57;
  NSObject *v58;
  int v59;
  NSObject **v60;
  NSObject *v61;
  float v62;
  NSObject *v63;
  NSObject *v64;
  int v65;
  NSObject **v66;
  NSObject *v67;
  float v68;
  NSObject *v69;
  NSObject *v70;
  int v71;
  NSObject **v72;
  NSObject *v73;
  int v74;
  NSObject *v75;
  int v76;
  int SparseMatrix;
  NSObject **v78;
  NSObject *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  NSObject **v91;
  NSObject *v92;
  const char *v93;
  _DWORD *v94;
  _DWORD *exception;
  const char *v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t *v99[2];
  CFTypeRef cf;
  float v101;
  float v102;
  uint8_t buf[4];
  const char *v104;
  __int16 v105;
  int v106;
  __int16 v107;
  _BYTE v108[10];
  __int16 v109;
  int v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (a3)
    return 4294956417;
  if (a2 != 3700)
  {
    if (a2 != 3696)
    {
      if (a2 == 21)
      {
        v6 = 0;
        *((_BYTE *)this + 544) = *a5 != 0;
        return v6;
      }
      return 4294956417;
    }
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v10 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        goto LABEL_20;
    }
    else
    {
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v104 = "AUDistance.cpp";
      v105 = 1024;
      v106 = 350;
      _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the property PropertyIDs::DistanceEstimatorNeuralNet", buf, 0x12u);
    }
LABEL_20:
    if (a5)
    {
      v11 = *(const void **)a5;
      if (v11)
      {
        CFRetain(v11);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v11);
      }
      else
      {
        cf = 0;
      }
      if (*((_QWORD *)this + 82))
        std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, 0);
      v13 = (const __CFDictionary *)cf;
      if (getDistanceLogScope(void)::once != -1)
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
      v14 = getDistanceLogScope(void)::scope;
      v15 = operator new();
      *(_OWORD *)(v15 + 64) = 0u;
      *(_DWORD *)(v15 + 40) = 629145600;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 128) = 0u;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 160) = xmmword_1B6627E00;
      *(_OWORD *)(v15 + 176) = xmmword_1B6627DC0;
      *(_OWORD *)(v15 + 192) = xmmword_1B6627DC0;
      *(_QWORD *)(v15 + 224) = 0;
      *(_QWORD *)(v15 + 232) = 0;
      *(_QWORD *)(v15 + 240) = 0;
      *(_QWORD *)(v15 + 256) = 0;
      *(_QWORD *)(v15 + 264) = v14;
      v16 = (NeuralNet *)operator new();
      NeuralNet::NeuralNet((uint64_t)v16, v13, *(uint64_t **)(v15 + 264));
      std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v15 + 256), v16);
      v17 = *(uint64_t **)(v15 + 264);
      v99[0] = v17;
      if (v17)
      {
        v18 = *v17;
        if (!*v17)
          goto LABEL_39;
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 27;
        _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading SampleRate from topLevelDict.", buf, 0x12u);
      }
LABEL_39:
      ScalarFrom = DictionaryBlobReader::ReadScalarFromDictionary<double>((NSObject ***)v99, v13, CFSTR("SampleRate"), (uint64_t *)v15);
      v20 = *(NSObject ***)(v15 + 264);
      if (ScalarFrom)
      {
        if (v20)
          v88 = *v20;
        else
          v88 = 0;
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          goto LABEL_257;
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 29;
        v107 = 1024;
        *(_DWORD *)v108 = -66741;
        v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"SampleRate not loaded\"";
        goto LABEL_256;
      }
      if (v20)
      {
        v21 = *v20;
        if (!*v20)
          goto LABEL_52;
      }
      else
      {
        v21 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_QWORD *)v15;
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 30;
        v107 = 2048;
        *(_QWORD *)v108 = v22;
        _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved sample rate (%g Hz).", buf, 0x1Cu);
        v20 = *(NSObject ***)(v15 + 264);
      }
      if (v20)
      {
        v23 = *v20;
        if (!*v20)
          goto LABEL_52;
      }
      else
      {
        v23 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 33;
        _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading BlockSize from topLevelDict.", buf, 0x12u);
      }
LABEL_52:
      v24 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(v99, v13, CFSTR("BlockSize"), (_DWORD *)(v15 + 8));
      v25 = *(NSObject ***)(v15 + 264);
      if (v24)
      {
        if (v25)
          v88 = *v25;
        else
          v88 = 0;
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          goto LABEL_257;
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 35;
        v107 = 1024;
        *(_DWORD *)v108 = -66741;
        v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"BlockSize not loaded.\"";
        goto LABEL_256;
      }
      if (v25)
      {
        v26 = *v25;
        if (!*v25)
          goto LABEL_65;
      }
      else
      {
        v26 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_DWORD *)(v15 + 8);
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 36;
        v107 = 1024;
        *(_DWORD *)v108 = v27;
        _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved sample rate (%u).", buf, 0x18u);
        v25 = *(NSObject ***)(v15 + 264);
      }
      if (v25)
      {
        v28 = *v25;
        if (!*v25)
          goto LABEL_65;
      }
      else
      {
        v28 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 39;
        _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading NumInputChannels from topLevelDict.", buf, 0x12u);
      }
LABEL_65:
      v29 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(v99, v13, CFSTR("NumInputChannels"), (_DWORD *)(v15 + 12));
      v30 = *(NSObject ***)(v15 + 264);
      if (v29)
      {
        if (v30)
          v88 = *v30;
        else
          v88 = 0;
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          goto LABEL_257;
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 41;
        v107 = 1024;
        *(_DWORD *)v108 = -66741;
        v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"NumInputChannels not loaded.\"";
        goto LABEL_256;
      }
      if (v30)
      {
        v31 = *v30;
        if (!*v30)
          goto LABEL_78;
      }
      else
      {
        v31 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        v32 = *(_DWORD *)(v15 + 12);
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 42;
        v107 = 1024;
        *(_DWORD *)v108 = v32;
        _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of input channels (%u).", buf, 0x18u);
        v30 = *(NSObject ***)(v15 + 264);
      }
      if (v30)
      {
        v33 = *v30;
        if (!*v30)
          goto LABEL_78;
      }
      else
      {
        v33 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 45;
        _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading NumContextFrames from topLevelDict.", buf, 0x12u);
      }
LABEL_78:
      v34 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(v99, v13, CFSTR("NumContextFrames"), (_DWORD *)(v15 + 16));
      v35 = *(NSObject ***)(v15 + 264);
      if (v34)
      {
        if (v35)
          v88 = *v35;
        else
          v88 = 0;
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          goto LABEL_257;
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 47;
        v107 = 1024;
        *(_DWORD *)v108 = -66741;
        v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"NumContextFrames not loaded.\"";
        goto LABEL_256;
      }
      if (v35)
      {
        v36 = *v35;
        if (!*v35)
          goto LABEL_91;
      }
      else
      {
        v36 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        v37 = *(_DWORD *)(v15 + 16);
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 48;
        v107 = 1024;
        *(_DWORD *)v108 = v37;
        _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of context frames (%u).", buf, 0x18u);
        v35 = *(NSObject ***)(v15 + 264);
      }
      if (v35)
      {
        v38 = *v35;
        if (!*v35)
          goto LABEL_91;
      }
      else
      {
        v38 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 51;
        _os_log_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading MCLPOutScale from topLevelDict.", buf, 0x12u);
      }
LABEL_91:
      v39 = DictionaryBlobReader::ReadScalarFromDictionary<float>(v99, v13, CFSTR("MCLPOutScale"), kCFNumberFloat32Type, (float *)(v15 + 32));
      v40 = *(NSObject ***)(v15 + 264);
      if (v39)
      {
        if (v40)
          v88 = *v40;
        else
          v88 = 0;
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          goto LABEL_257;
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 53;
        v107 = 1024;
        *(_DWORD *)v108 = -66741;
        v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"MCLPOutScale not loaded.\"";
        goto LABEL_256;
      }
      if (v40)
      {
        v41 = *v40;
        if (!*v40)
        {
LABEL_104:
          v44 = DictionaryBlobReader::ReadScalarFromDictionary<float>(v99, v13, CFSTR("ECOutScale"), kCFNumberFloat32Type, (float *)(v15 + 36));
          v45 = *(NSObject ***)(v15 + 264);
          if (!v44)
          {
            if (v45)
            {
              v46 = *v45;
              if (!*v45)
                goto LABEL_117;
            }
            else
            {
              v46 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              v47 = *(float *)(v15 + 36);
              *(_DWORD *)buf = 136315650;
              v104 = "DistanceEstimator.cpp";
              v105 = 1024;
              v106 = 60;
              v107 = 2048;
              *(double *)v108 = v47;
              _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved ECOutScale (%g).", buf, 0x1Cu);
              v45 = *(NSObject ***)(v15 + 264);
            }
            if (v45)
            {
              v48 = *v45;
              if (!*v45)
                goto LABEL_117;
            }
            else
            {
              v48 = MEMORY[0x1E0C81028];
            }
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v104 = "DistanceEstimator.cpp";
              v105 = 1024;
              v106 = 63;
              _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading LambdaPSD_TC from topLevelDict.", buf, 0x12u);
            }
LABEL_117:
            v49 = (float *)(v15 + 20);
            v50 = DictionaryBlobReader::ReadScalarFromDictionary<float>(v99, v13, CFSTR("LambdaPSD_TC"), kCFNumberFloat32Type, (float *)(v15 + 20));
            v51 = *(NSObject ***)(v15 + 264);
            if (!v50)
            {
              if (v51)
              {
                v52 = *v51;
                if (!*v51)
                  goto LABEL_124;
              }
              else
              {
                v52 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
              {
                v53 = *v49;
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 66;
                v107 = 2048;
                *(double *)v108 = v53;
                _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved the time constant for PSD (%g).", buf, 0x1Cu);
              }
LABEL_124:
              v54 = 0.0;
              if (*v49 != 0.0)
              {
                v55 = *(double *)v15;
                v54 = expf((float)((float)-(float)*(unsigned int *)(v15 + 8) / v55) / *v49);
              }
              *(float *)(v15 + 24) = v54;
              *(float *)(v15 + 28) = 1.0 - v54;
              v56 = *(NSObject ***)(v15 + 264);
              if (v56)
              {
                v57 = *v56;
                if (!*v56)
                  goto LABEL_138;
              }
              else
              {
                v57 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 72;
                v107 = 2048;
                *(double *)v108 = v54;
                _os_log_impl(&dword_1B5ED0000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d Internally set the forgetting factor for PSD as (%g).", buf, 0x1Cu);
                v56 = *(NSObject ***)(v15 + 264);
              }
              if (v56)
              {
                v58 = *v56;
                if (!*v56)
                  goto LABEL_138;
              }
              else
              {
                v58 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 75;
                _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading KalmanProcessStd from topLevelDict.", buf, 0x12u);
              }
LABEL_138:
              v102 = 0.0;
              v59 = DictionaryBlobReader::ReadScalarFromDictionary<float>(v99, v13, CFSTR("KalmanProcessStd"), kCFNumberFloat32Type, &v102);
              v60 = *(NSObject ***)(v15 + 264);
              if (v59)
              {
                if (v60)
                  v89 = *v60;
                else
                  v89 = 0;
                if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v104 = "DistanceEstimator.cpp";
                  v105 = 1024;
                  v106 = 78;
                  v107 = 1024;
                  *(_DWORD *)v108 = -66741;
                  _os_log_impl(&dword_1B5ED0000, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"KalmanProcessStd not loaded.\"", buf, 0x18u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69EE218;
                exception[2] = -66741;
              }
              if (v60)
              {
                v61 = *v60;
                if (!*v60)
                {
                  *(float *)(v15 + 160) = v102 * v102;
                  goto LABEL_161;
                }
              }
              else
              {
                v61 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 79;
                v107 = 2048;
                *(double *)v108 = v102;
                _os_log_impl(&dword_1B5ED0000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved Kalman process std (%g).", buf, 0x1Cu);
                v60 = *(NSObject ***)(v15 + 264);
              }
              v62 = v102 * v102;
              *(float *)(v15 + 160) = v102 * v102;
              if (v60)
              {
                v63 = *v60;
                if (!*v60)
                  goto LABEL_161;
              }
              else
              {
                v63 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 83;
                v107 = 2048;
                *(double *)v108 = v62;
                _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d Internally set the Kalman process variance as (%g).", buf, 0x1Cu);
                v60 = *(NSObject ***)(v15 + 264);
              }
              if (v60)
              {
                v64 = *v60;
                if (!*v60)
                  goto LABEL_161;
              }
              else
              {
                v64 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 86;
                _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading KalmanObservationStd from topLevelDict.", buf, 0x12u);
              }
LABEL_161:
              v101 = 0.0;
              v65 = DictionaryBlobReader::ReadScalarFromDictionary<float>(v99, v13, CFSTR("KalmanObservationStd"), kCFNumberFloat32Type, &v101);
              v66 = *(NSObject ***)(v15 + 264);
              if (v65)
              {
                if (v66)
                  v90 = *v66;
                else
                  v90 = 0;
                if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                  goto LABEL_272;
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 89;
                v107 = 1024;
                *(_DWORD *)v108 = -66741;
                v96 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"KalmanObservationStd not loaded.\"";
                goto LABEL_271;
              }
              if (v66)
              {
                v67 = *v66;
                if (!*v66)
                {
                  *(float *)(v15 + 164) = v101 * v101;
LABEL_180:
                  v71 = DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(v99, v13, CFSTR("WaitFrames"), (_DWORD *)(v15 + 208));
                  v72 = *(NSObject ***)(v15 + 264);
                  if (!v71)
                  {
                    if (v72)
                    {
                      v73 = *v72;
                      if (!*v72)
                        goto LABEL_193;
                    }
                    else
                    {
                      v73 = MEMORY[0x1E0C81028];
                    }
                    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                    {
                      v74 = *(_DWORD *)(v15 + 208);
                      *(_DWORD *)buf = 136315650;
                      v104 = "DistanceEstimator.cpp";
                      v105 = 1024;
                      v106 = 100;
                      v107 = 1024;
                      *(_DWORD *)v108 = v74;
                      _os_log_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved waitFrames (%u).", buf, 0x18u);
                      v72 = *(NSObject ***)(v15 + 264);
                    }
                    if (v72)
                    {
                      v75 = *v72;
                      if (!*v72)
                        goto LABEL_193;
                    }
                    else
                    {
                      v75 = MEMORY[0x1E0C81028];
                    }
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136315394;
                      v104 = "DistanceEstimator.cpp";
                      v105 = 1024;
                      v106 = 103;
                      _os_log_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading FFT2Mel matrix from topLevelDict", buf, 0x12u);
                    }
LABEL_193:
                    v76 = *(_DWORD *)(v15 + 8) + 1;
                    *(_DWORD *)(v15 + 48) = v76;
                    SparseMatrix = DictionaryBlobReader::ReadSparseMatrix(v99, v13, CFSTR("FFT2Mel"), (unsigned int *)(v15 + 52), CFSTR("NumMelBands"), v76, CFSTR("NumFFTBins"), (sparse_m_float **)(v15 + 56));
                    v78 = *(NSObject ***)(v15 + 264);
                    if (!SparseMatrix)
                    {
                      if (v78)
                      {
                        v79 = *v78;
                        if (!*v78)
                          goto LABEL_200;
                      }
                      else
                      {
                        v79 = MEMORY[0x1E0C81028];
                      }
                      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136315394;
                        v104 = "DistanceEstimator.cpp";
                        v105 = 1024;
                        v106 = 107;
                        _os_log_impl(&dword_1B5ED0000, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retreived FFT2Mel.", buf, 0x12u);
                      }
LABEL_200:
                      v80 = (*(_DWORD *)(v15 + 48) * *(_DWORD *)(v15 + 12));
                      *(_DWORD *)buf = 0;
                      std::vector<float>::assign((char **)(v15 + 64), v80, buf);
                      v81 = (*(_DWORD *)(v15 + 48) * *(_DWORD *)(v15 + 12));
                      *(_DWORD *)buf = 0;
                      std::vector<float>::assign((char **)(v15 + 88), v81, buf);
                      v82 = (*(_DWORD *)(v15 + 48) * *(_DWORD *)(v15 + 12));
                      *(_DWORD *)buf = 0;
                      std::vector<float>::assign((char **)(v15 + 112), v82, buf);
                      v83 = (*(_DWORD *)(v15 + 48) * *(_DWORD *)(v15 + 12));
                      *(_DWORD *)buf = 0;
                      std::vector<float>::assign((char **)(v15 + 136), v83, buf);
                      *(_DWORD *)(v15 + 44) = 1065353216;
                      *(_DWORD *)(v15 + 196) = 0;
                      *(_DWORD *)(v15 + 200) = 0;
                      *(_DWORD *)(v15 + 204) = *(_DWORD *)(v15 + 40);
                      *(_DWORD *)(v15 + 212) = 0;
                      *(_WORD *)(v15 + 216) = 256;
                      *(float *)(v15 + 168) = *(float *)(v15 + 164) + *(float *)(v15 + 160);
                      v84 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v15 + 256) + 24))(**(_QWORD **)(v15 + 256));
                      v85 = v84;
                      *(_DWORD *)(v15 + 248) = v84;
                      v86 = 2 * *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 52);
                      if (v86 != v84)
                      {
                        v91 = *(NSObject ***)(v15 + 264);
                        if (v91)
                          v92 = *v91;
                        else
                          v92 = 0;
                        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136316162;
                          v104 = "DistanceEstimator.cpp";
                          v105 = 1024;
                          v106 = 139;
                          v107 = 1024;
                          *(_DWORD *)v108 = -10878;
                          *(_WORD *)&v108[4] = 1024;
                          *(_DWORD *)&v108[6] = v85;
                          v109 = 1024;
                          v110 = v86;
                          _os_log_impl(&dword_1B5ED0000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [mInputSize != featureVectorSize is false]: \"mInputSize of NeuralNet (%u) is not matching the feature vector size (%u).\"", buf, 0x24u);
                        }
                        v98 = __cxa_allocate_exception(0x10uLL);
                        *(_QWORD *)v98 = &off_1E69EE218;
                        v98[2] = -10878;
                      }
                      *(_DWORD *)buf = 0;
                      std::vector<float>::assign((char **)(v15 + 224), v84, buf);
                      std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, v15);
                      if (getDistanceLogScope(void)::once != -1)
                        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
                      if (getDistanceLogScope(void)::scope)
                      {
                        v87 = *(NSObject **)getDistanceLogScope(void)::scope;
                        if (!*(_QWORD *)getDistanceLogScope(void)::scope)
                        {
LABEL_209:
                          v6 = 0;
                          *((_BYTE *)this + 600) = 1;
                          if (cf)
                            CFRelease(cf);
                          return v6;
                        }
                      }
                      else
                      {
                        v87 = MEMORY[0x1E0C81028];
                      }
                      if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 136315394;
                        v104 = "AUDistance.cpp";
                        v105 = 1024;
                        v106 = 369;
                        _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully loaded DistanceEstimator plist.\n", buf, 0x12u);
                      }
                      goto LABEL_209;
                    }
                    if (v78)
                      v90 = *v78;
                    else
                      v90 = 0;
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      v104 = "DistanceEstimator.cpp";
                      v105 = 1024;
                      v106 = 106;
                      v107 = 1024;
                      *(_DWORD *)v108 = -66741;
                      v96 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"FFT2Mel matrix not loaded.\"";
                      goto LABEL_271;
                    }
LABEL_272:
                    v97 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v97 = &off_1E69EE218;
                    v97[2] = -66741;
                  }
                  if (v72)
                    v90 = *v72;
                  else
                    v90 = 0;
                  if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                    goto LABEL_272;
                  *(_DWORD *)buf = 136315650;
                  v104 = "DistanceEstimator.cpp";
                  v105 = 1024;
                  v106 = 99;
                  v107 = 1024;
                  *(_DWORD *)v108 = -66741;
                  v96 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"WaitFrames not loaded.\"";
LABEL_271:
                  _os_log_impl(&dword_1B5ED0000, v90, OS_LOG_TYPE_ERROR, v96, buf, 0x18u);
                  goto LABEL_272;
                }
              }
              else
              {
                v67 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 90;
                v107 = 2048;
                *(double *)v108 = v101;
                _os_log_impl(&dword_1B5ED0000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved Kalman observation std (%g).", buf, 0x1Cu);
                v66 = *(NSObject ***)(v15 + 264);
              }
              v68 = v101 * v101;
              *(float *)(v15 + 164) = v101 * v101;
              if (v66)
              {
                v69 = *v66;
                if (!*v66)
                  goto LABEL_180;
              }
              else
              {
                v69 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 94;
                v107 = 2048;
                *(double *)v108 = v68;
                _os_log_impl(&dword_1B5ED0000, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Internally set the Kalman observation variance as (%g).", buf, 0x1Cu);
                v66 = *(NSObject ***)(v15 + 264);
              }
              if (v66)
              {
                v70 = *v66;
                if (!*v66)
                  goto LABEL_180;
              }
              else
              {
                v70 = MEMORY[0x1E0C81028];
              }
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                v104 = "DistanceEstimator.cpp";
                v105 = 1024;
                v106 = 97;
                _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading WaitFrames from topLevelDict", buf, 0x12u);
              }
              goto LABEL_180;
            }
            if (v51)
              v88 = *v51;
            else
              v88 = 0;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v104 = "DistanceEstimator.cpp";
              v105 = 1024;
              v106 = 65;
              v107 = 1024;
              *(_DWORD *)v108 = -66741;
              v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"LambdaPSD_TC not loaded.\"";
              goto LABEL_256;
            }
LABEL_257:
            v94 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v94 = &off_1E69EE218;
            v94[2] = -66741;
          }
          if (v45)
            v88 = *v45;
          else
            v88 = 0;
          if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            goto LABEL_257;
          *(_DWORD *)buf = 136315650;
          v104 = "DistanceEstimator.cpp";
          v105 = 1024;
          v106 = 59;
          v107 = 1024;
          *(_DWORD *)v108 = -66741;
          v93 = "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"ECOutScale not loaded.\"";
LABEL_256:
          _os_log_impl(&dword_1B5ED0000, v88, OS_LOG_TYPE_ERROR, v93, buf, 0x18u);
          goto LABEL_257;
        }
      }
      else
      {
        v41 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        v42 = *(float *)(v15 + 32);
        *(_DWORD *)buf = 136315650;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 54;
        v107 = 2048;
        *(double *)v108 = v42;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved MCLPOutScale (%g).", buf, 0x1Cu);
        v40 = *(NSObject ***)(v15 + 264);
      }
      if (v40)
      {
        v43 = *v40;
        if (!*v40)
          goto LABEL_104;
      }
      else
      {
        v43 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v104 = "DistanceEstimator.cpp";
        v105 = 1024;
        v106 = 57;
        _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading ECOutScale from topLevelDict.", buf, 0x12u);
      }
      goto LABEL_104;
    }
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v12 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956445;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v104 = "AUDistance.cpp";
      v105 = 1024;
      v106 = 353;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n", buf, 0x12u);
    }
    return 4294956445;
  }
  v6 = 4294956445;
  if (a6 >= 4)
  {
    if (*(_BYTE *)a5)
      return 0;
    else
      return 4294956445;
  }
  return v6;
}

void sub_1B64BE930(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B64BE954(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, std::exception a11, int a12, const void *a13, uint64_t a14, __int128 buf, __int16 a16, __int16 a17, int a18)
{
  _QWORD *v18;
  void **v19;
  void **v20;
  void **v21;
  NeuralNet **v22;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _DWORD *exception_ptr;
  NSObject *v31;

  std::unique_ptr<NeuralNet>::reset[abi:ne180100](v22, 0);
  v25 = *v21;
  if (*v21)
  {
    v18[29] = v25;
    operator delete(v25);
  }
  v26 = *a9;
  if (*a9)
  {
    v18[18] = v26;
    operator delete(v26);
  }
  v27 = *v20;
  if (*v20)
  {
    v18[15] = v27;
    operator delete(v27);
  }
  v28 = *a10;
  if (*a10)
  {
    v18[12] = v28;
    operator delete(v28);
  }
  v29 = *v19;
  if (*v19)
  {
    v18[9] = v29;
    operator delete(v29);
  }
  MEMORY[0x1BCC95CEC](v18, 0x10E0C407F801DA4);
  if (a2 != 2)
  {
    applesauce::CF::DictionaryRef::~DictionaryRef(&a13);
    JUMPOUT(0x1B64BE944);
  }
  exception_ptr = __cxa_get_exception_ptr(a1);
  a11.__vftable = (std::exception_vtbl *)&off_1E69EE218;
  a12 = exception_ptr[2];
  __cxa_begin_catch(a1);
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v31 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      goto LABEL_20;
  }
  else
  {
    v31 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315650;
    *(_QWORD *)((char *)&buf + 4) = "AUDistance.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 364;
    a17 = 1024;
    a18 = a12;
    _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not load DistanceEstimator plist, exception (%d).\n", (uint8_t *)&buf, 0x18u);
  }
LABEL_20:
  std::exception::~exception(&a11);
  __cxa_end_catch();
  JUMPOUT(0x1B64BE288);
}

uint64_t AUDistance::SetParameter(AUDistance *this, unsigned int a2, int a3, uint64_t a4, float a5)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  uint64_t result;
  ausdk::AUElement **v13;
  uint64_t v14;

  if (a3 == 4)
  {
    v10 = *((_QWORD *)this + 74);
    if (v10)
    {
      v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a4);
    }
    else
    {
      v14 = *((_QWORD *)this + 71);
      if (a4 >= (unint64_t)((*((_QWORD *)this + 72) - v14) >> 3))
        v11 = 0;
      else
        v11 = *(ausdk::AUElement **)(v14 + 8 * a4);
    }
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    return 0;
  }
  else if (a3)
  {
    return 4294956418;
  }
  else
  {
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
    }
    else
    {
      v13 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v13)
        v9 = 0;
      else
        v9 = *v13;
    }
    ausdk::AUElement::SetParameter(v9, a2, a5, 0);
    result = 0;
    ++*((_QWORD *)this + 66);
  }
  return result;
}

uint64_t AUDistance::CanScheduleParameters(AUDistance *this)
{
  return 0;
}

uint64_t AUDistance::ProcessMultipleBufferLists(AUDistance *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  unsigned int Parameter;
  float32x2_t *v25;
  int *v26;
  int v27;
  const AudioBufferList *v28;
  AudioDSP::Utility *v29;
  BOOL *v30;
  NSObject *v31;
  NSObject *v33;
  NSObject *v34;
  const char *v35;
  int v36;
  const char *v37;
  int v38;
  uint64_t v39;
  BOOL *v40;
  NSObject *v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  ausdk::AUElement *v45;
  ausdk::AUElement **v46;
  uint64_t v47;
  ausdk::AUElement *v48;
  ausdk::AUElement **v49;
  uint64_t v50;
  ausdk::AUElement *v51;
  ausdk::AUElement **v52;
  unsigned __int8 v53;
  __int16 v54;
  int v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  AudioBufferList v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v9 = (int)a3;
  v67 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 66);
  if (*((_QWORD *)this + 67) != v11)
  {
    v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
    }
    else
    {
      v14 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v14)
        v13 = 0;
      else
        v13 = *v14;
    }
    *((float *)this + 157) = ausdk::AUElement::GetParameter(v13, 3u);
    v15 = *((_QWORD *)this + 9);
    if (v15)
    {
      v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
    }
    else
    {
      v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v17)
        v16 = 0;
      else
        v16 = *v17;
    }
    *((float *)this + 161) = ausdk::AUElement::GetParameter(v16, 7u);
    v18 = *((_QWORD *)this + 9);
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
    }
    else
    {
      v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v20)
        v19 = 0;
      else
        v19 = *v20;
    }
    *((float *)this + 162) = ausdk::AUElement::GetParameter(v19, 8u);
    v21 = *((_QWORD *)this + 9);
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v23)
        v22 = 0;
      else
        v22 = *v23;
    }
    Parameter = ausdk::AUElement::GetParameter(v22, 2u);
    *((_DWORD *)this + 156) = Parameter;
    v25 = (float32x2_t *)*((_QWORD *)this + 82);
    if (v25)
    {
      v25[5].i32[1] = *((_DWORD *)this + 157);
      v25[20] = vmul_f32(*(float32x2_t *)((char *)this + 644), *(float32x2_t *)((char *)this + 644));
      v25[26].i32[0] = Parameter;
    }
    *((_QWORD *)this + 67) = v11;
  }
  if (*((_DWORD *)this + 84) != v9)
    return 4294956422;
  v26 = (int *)*a5;
  if (!*a5)
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v33 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v33 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v63.mNumberBuffers = 136315394;
      *(_QWORD *)(&v63.mNumberBuffers + 1) = "AUDistance.cpp";
      LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 801;
      v35 = "%25s:%-5d MCLPOutSignals cannot be NULL. It is a required input.";
LABEL_69:
      _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&v63, 0x12u);
    }
    return 4294956420;
  }
  v27 = *v26;
  if (*v26 != *((_DWORD *)this + 154))
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v34 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v34 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v36 = *((_DWORD *)this + 154);
    v63.mNumberBuffers = 136315650;
    *(_QWORD *)(&v63.mNumberBuffers + 1) = "AUDistance.cpp";
    LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
    *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 807;
    WORD1(v63.mBuffers[0].mData) = 1024;
    HIDWORD(v63.mBuffers[0].mData) = v36;
    v37 = "%25s:%-5d Input MCLPOutSignals buffer expected with (%u) channels.";
LABEL_91:
    _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, v37, (uint8_t *)&v63, 0x18u);
    return 4294956428;
  }
  v28 = a5[1];
  if (!v28)
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v33 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956420;
    }
    else
    {
      v33 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v63.mNumberBuffers = 136315394;
      *(_QWORD *)(&v63.mNumberBuffers + 1) = "AUDistance.cpp";
      LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 815;
      v35 = "%25s:%-5d ECOutSignals cannot be NULL. It is a required input.";
      goto LABEL_69;
    }
    return 4294956420;
  }
  if (v28->mNumberBuffers != v27)
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v34 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v34 = MEMORY[0x1E0C81028];
    }
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      return 4294956428;
    v38 = *((_DWORD *)this + 154);
    v63.mNumberBuffers = 136315650;
    *(_QWORD *)(&v63.mNumberBuffers + 1) = "AUDistance.cpp";
    LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
    *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 821;
    WORD1(v63.mBuffers[0].mData) = 1024;
    HIDWORD(v63.mBuffers[0].mData) = v38;
    v37 = "%25s:%-5d Input ECOutSignals buffer expected with (%u) channels.";
    goto LABEL_91;
  }
  if (*a7 && (*a7)->mNumberBuffers != v27)
  {
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v34 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v34 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v42 = *((_DWORD *)this + 154);
      v63.mNumberBuffers = 136315650;
      *(_QWORD *)(&v63.mNumberBuffers + 1) = "AUDistance.cpp";
      LOWORD(v63.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v63.mBuffers[0].mDataByteSize + 2) = 831;
      WORD1(v63.mBuffers[0].mData) = 1024;
      HIDWORD(v63.mBuffers[0].mData) = v42;
      v37 = "%25s:%-5d Output OutputSignals buffer expected with (%u) channels.";
      goto LABEL_91;
    }
    return 4294956428;
  }
  v54 = 0;
  v53 = 0;
  v29 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 151));
  *(_QWORD *)&v63.mNumberBuffers = *((_QWORD *)this + 76);
  v63.mBuffers[0] = (AudioBuffer)xmmword_1B6626900;
  v64 = 4;
  v65 = v27;
  v66 = 32;
  AudioDSP::Utility::DetectNonFinites(v29, v26, &v63, (const AudioStreamBasicDescription *)((char *)&v54 + 1), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v29, a5[1], &v63, (const AudioStreamBasicDescription *)&v54, v30);
  if (*((_BYTE *)this + 544) || HIBYTE(v54) | v54 && *((_BYTE *)this + 620))
  {
    *((_QWORD *)this + 79) = 0;
    *((_DWORD *)this + 160) = 0;
    CopyBufferList(&(*a5)->mNumberBuffers, *a7);
    if (HIBYTE(v54) | v54)
    {
      if (getDistanceLogScope(void)::once != -1)
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
      if (getDistanceLogScope(void)::scope)
      {
        v31 = *(NSObject **)getDistanceLogScope(void)::scope;
        if (!*(_QWORD *)getDistanceLogScope(void)::scope)
          goto LABEL_107;
      }
      else
      {
        v31 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v55 = 136315906;
        v56 = "AUDistance.cpp";
        v57 = 1024;
        v58 = 860;
        v59 = 1024;
        v60 = HIBYTE(v54);
        v61 = 1024;
        v62 = v54;
        _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDistance: (MCLPOutSignals, ECOutSignals) is NOT finite: (%d, %d)", (uint8_t *)&v55, 0x1Eu);
      }
    }
  }
  else
  {
    DistanceEstimator::processBufferList(*((DistanceEstimator **)this + 82), *a5, a5[1], *a7);
    v39 = *((_QWORD *)this + 82);
    *((_QWORD *)this + 79) = *(_QWORD *)(v39 + 196);
    *((float *)this + 160) = sqrtf(*(float *)(v39 + 204));
    AudioDSP::Utility::DetectNonFinites(v29, *a7, &v63, (const AudioStreamBasicDescription *)&v53, v40);
    if (v53 && *((_BYTE *)this + 620))
    {
      if (getDistanceLogScope(void)::once != -1)
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
      if (getDistanceLogScope(void)::scope)
      {
        v41 = *(NSObject **)getDistanceLogScope(void)::scope;
        if (!*(_QWORD *)getDistanceLogScope(void)::scope)
          goto LABEL_100;
      }
      else
      {
        v41 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        v55 = 136315650;
        v56 = "AUDistance.cpp";
        v57 = 1024;
        v58 = 882;
        v59 = 1024;
        v60 = v53;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDistance: (OutputSignals) is NOT finite: (%d)", (uint8_t *)&v55, 0x18u);
        if (getDistanceLogScope(void)::once != -1)
          dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
      }
LABEL_100:
      if (getDistanceLogScope(void)::scope)
      {
        v43 = *(NSObject **)getDistanceLogScope(void)::scope;
        if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        {
LABEL_106:
          (*(void (**)(AUDistance *))(*(_QWORD *)this + 64))(this);
          CopyBufferList(&(*a5)->mNumberBuffers, *a7);
          goto LABEL_107;
        }
      }
      else
      {
        v43 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        v55 = 136315394;
        v56 = "AUDistance.cpp";
        v57 = 1024;
        v58 = 885;
        _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reseting the distance estimator.\n", (uint8_t *)&v55, 0x12u);
      }
      goto LABEL_106;
    }
  }
LABEL_107:
  v44 = *((_QWORD *)this + 9);
  if (v44)
  {
    v45 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 32))(v44, 0);
  }
  else
  {
    v46 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v46)
      v45 = 0;
    else
      v45 = *v46;
  }
  ausdk::AUElement::SetParameter(v45, 4u, *((float *)this + 158), 0);
  v47 = *((_QWORD *)this + 9);
  if (v47)
  {
    v48 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 0);
  }
  else
  {
    v49 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v49)
      v48 = 0;
    else
      v48 = *v49;
  }
  ausdk::AUElement::SetParameter(v48, 5u, *((float *)this + 159), 0);
  v50 = *((_QWORD *)this + 9);
  if (v50)
  {
    v51 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, 0);
  }
  else
  {
    v52 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v52)
      v51 = 0;
    else
      v51 = *v52;
  }
  ausdk::AUElement::SetParameter(v51, 6u, *((float *)this + 160), 0);
  return 0;
}

uint64_t AUDistance::Render(AUDistance *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  ausdk::AUScope *v10;
  char i;
  char v12;
  ausdk::AUInputElement *Element;
  uint64_t v14;
  ausdk::AUIOElement *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v21;
  _BYTE buf[18];
  __int16 v23;
  int v24;
  uint64_t v25;

  v8 = 0;
  v9 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v10 = (AUDistance *)((char *)this + 80);
  for (i = 1; ; i = 0)
  {
    v12 = i;
    if (!ausdk::AUBase::HasInput(this, v8))
    {
      v9 = 1;
      goto LABEL_6;
    }
    Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
    v14 = ausdk::AUInputElement::PullInput(Element, a2, a3, v8, a4);
    if ((_DWORD)v14)
      break;
LABEL_6:
    v8 = 1;
    if ((v12 & 1) == 0)
    {
      v15 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 128), 0);
      v16 = 0;
      v21 = ausdk::AUIOElement::PrepareBuffer(v15, a4);
      if ((v9 & 1) == 0)
      {
        v17 = ausdk::AUScope::SafeGetElement(v10, 0);
        *(_QWORD *)buf = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
        v18 = ausdk::AUScope::SafeGetElement(v10, 1u);
        *(_QWORD *)&buf[8] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
        return (*(uint64_t (**)(AUDistance *, unsigned int *, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 2, buf, 1, &v21);
      }
      return v16;
    }
  }
  v16 = v14;
  if (getDistanceLogScope(void)::once != -1)
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
  if (getDistanceLogScope(void)::scope)
  {
    v19 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(_QWORD *)getDistanceLogScope(void)::scope)
      return v16;
  }
  else
  {
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AUDistance.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 734;
    v23 = 1024;
    v24 = v8;
    _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Pull failed on input (%u)", buf, 0x18u);
  }
  return v16;
}

uint64_t AUDistance::GetParameterList(AUDistance *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    a3[8] = 8;
  }
  result = 0;
  *a4 = 9;
  return result;
}

uint64_t AUDistance::GetParameterInfo(AUDistance *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  AudioUnitParameterValue v7;
  AudioUnitParameterOptions v8;
  const __CFString *v9;
  AudioUnitParameterOptions v10;

  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
    return 4294956418;
  if (a2)
    return 4294956430;
  switch(a3)
  {
    case 0:
      buffer->cfNameString = CFSTR("Number of context frames for NeuralNet");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Number of context frames for NeuralNet"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v6 = 0x4100000000000000;
      goto LABEL_10;
    case 1:
      buffer->cfNameString = CFSTR("Forgetting factor for input PSD estimation (time constant in seconds)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Forgetting factor for input PSD estimation (time constant in seconds)"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x4040000000000000;
      v7 = 0.5;
      goto LABEL_11;
    case 2:
      buffer->cfNameString = CFSTR("Wait time between restarting the estimate smoothing (in frames)");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Wait time between restarting the estimate smoothing (in frames)"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x4348000000000000;
      v7 = 50.0;
      goto LABEL_18;
    case 3:
      buffer->cfNameString = CFSTR("VAD for the input signal at the current frame");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("VAD for the input signal at the current frame"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      v6 = 0x3F80000000000000;
LABEL_10:
      *(_QWORD *)&buffer->minValue = v6;
      v7 = 1.0;
LABEL_11:
      v8 = buffer->flags | 0x40008000;
      goto LABEL_19;
    case 4:
      v9 = CFSTR("Distance estimated at the current frame");
      goto LABEL_15;
    case 5:
      v9 = CFSTR("Mean of the distance estimate");
      goto LABEL_15;
    case 6:
      v9 = CFSTR("Standard deviation of the distance estimate");
LABEL_15:
      buffer->cfNameString = v9;
      buffer->flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      v10 = buffer->flags | 0x40008000;
      buffer->defaultValue = 0.0;
      buffer->flags = v10;
      return result;
    case 7:
      buffer->cfNameString = CFSTR("Kalman filter process standard deviation");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Kalman filter process standard deviation"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(_QWORD *)&buffer->minValue = 0x3F0000003C23D70ALL;
      v7 = 0.1;
      goto LABEL_18;
    case 8:
      buffer->cfNameString = CFSTR("Kalman filter observation standard deviation");
      buffer->flags = 0x8000000;
      CFStringGetCString(CFSTR("Kalman filter observation standard deviation"), buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(_QWORD *)&buffer->minValue = 0x400000003C23D70ALL;
      v7 = 0.5;
LABEL_18:
      v8 = buffer->flags | 0xC0000000;
LABEL_19:
      buffer->defaultValue = v7;
      buffer->flags = v8;
      break;
    default:
      return 4294956418;
  }
  return result;
}

UInt8 *AUDistance::SaveExtendedScopes(AUDistance *this, __CFData *a2)
{
  ausdk::AUScope *Scope;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUDistance::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
  return result;
}

uint64_t AUDistance::GetParameterValueStrings(AUDistance *this, int a2, unsigned int a3, const __CFArray **a4)
{
  BOOL v4;

  if (a4)
    v4 = a2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  else
    return 4294956430;
}

double AUDistance::GetLatency(AUDistance *this)
{
  return 0.0;
}

double AUDistance::GetTailTime(AUDistance *this)
{
  return 0.0;
}

uint64_t AUDistance::SupportsTail(AUDistance *this)
{
  return 1;
}

BOOL AUDistance::StreamFormatWritable(AUDistance *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUDistance::SupportedNumChannels(AUDistance *this, const AUChannelInfo **a2)
{
  uint64_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  __int16 *v6;
  int16x8x2_t v8;

  v2 = 0;
  v3 = (int16x8_t)xmmword_1B66A1330;
  v4.i64[0] = 0x1000100010001;
  v4.i64[1] = 0x1000100010001;
  v5.i64[0] = 0x8000800080008;
  v5.i64[1] = 0x8000800080008;
  do
  {
    v8.val[0] = vaddq_s16(v3, v4);
    v8.val[1] = v8.val[0];
    v6 = (__int16 *)((char *)&AUDistance::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs + v2);
    vst2q_s16(v6, v8);
    v3 = vaddq_s16(v3, v5);
    v2 += 32;
  }
  while (v2 != 64);
  if (a2)
    *a2 = (const AUChannelInfo *)&AUDistance::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 16;
}

uint64_t AUDistance::ValidFormat(AUDistance *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;

  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105)
    result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    result = 0;
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t AUDistance::ChangeStreamFormat(AUDistance *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Element;
  NSObject *v13;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v6 = a3;
  v7 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  v9 = 0;
  if (v7 == 1 && !v6)
  {
    v10 = *((_QWORD *)this + 15);
    if (v10)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 1))
        return 0;
    }
    else
    {
      v11 = *((_QWORD *)this + 12);
      if ((unint64_t)(*((_QWORD *)this + 13) - v11) < 9 || !*(_QWORD *)(v11 + 8))
        return 0;
    }
    Element = ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 80), 1u);
    v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(_QWORD *)Element + 56))(Element, a5);
    if (getDistanceLogScope(void)::once != -1)
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_18387);
    if (getDistanceLogScope(void)::scope)
    {
      v13 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(_QWORD *)getDistanceLogScope(void)::scope)
        return v9;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15 = 136315394;
      v16 = "AUDistance.cpp";
      v17 = 1024;
      v18 = 679;
      _os_log_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.", (uint8_t *)&v15, 0x12u);
    }
  }
  return v9;
}

uint64_t AUDistance::GetScopeExtended(AUDistance *this, int a2)
{
  if (a2 == 4)
    return (uint64_t)this + 552;
  else
    return 0;
}

os_log_t ___Z19getDistanceLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "audstn");
  *v0 = result;
  getDistanceLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t *std::unique_ptr<DistanceEstimator>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 56);
    if (v3)
    {
      sparse_matrix_destroy(v3);
      *(_QWORD *)(v2 + 56) = 0;
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 256), 0);
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 256), 0);
    v4 = *(void **)(v2 + 224);
    if (v4)
    {
      *(_QWORD *)(v2 + 232) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 136);
    if (v5)
    {
      *(_QWORD *)(v2 + 144) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 112);
    if (v6)
    {
      *(_QWORD *)(v2 + 120) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 88);
    if (v7)
    {
      *(_QWORD *)(v2 + 96) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 64);
    if (v8)
    {
      *(_QWORD *)(v2 + 72) = v8;
      operator delete(v8);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void EndpointVAD3::~EndpointVAD3(EndpointVAD3 *this)
{
  EndpointVAD3::~EndpointVAD3(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void **v28;

  *(_QWORD *)this = &off_1E69E2D00;
  *((_BYTE *)this + 8) = 0;
  v2 = (void **)((char *)this + 112);
  v3 = (_QWORD *)*((_QWORD *)this + 14);
  v4 = (_QWORD *)*((_QWORD *)this + 15);
  while (v4 != v3)
  {
    v6 = (_QWORD *)*--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
      std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v5);
  }
  *((_QWORD *)this + 15) = v3;
  *((_QWORD *)this + 64) = *((_QWORD *)this + 63);
  v7 = (const void *)*((_QWORD *)this + 21);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 21) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 22);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 22) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 23);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 23) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 24);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 24) = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 25);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 25) = 0;
  }
  v12 = (const void *)*((_QWORD *)this + 26);
  if (v12)
  {
    CFRelease(v12);
    *((_QWORD *)this + 26) = 0;
  }
  VAD3Configuration::~VAD3Configuration((EndpointVAD3 *)((char *)this + 536));
  v13 = (void *)*((_QWORD *)this + 63);
  if (v13)
  {
    *((_QWORD *)this + 64) = v13;
    operator delete(v13);
  }
  v28 = (void **)((char *)this + 480);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v28);
  v28 = (void **)((char *)this + 456);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
  v28 = (void **)((char *)this + 432);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v28);
  v14 = (void *)*((_QWORD *)this + 51);
  if (v14)
  {
    *((_QWORD *)this + 52) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 48);
  if (v15)
  {
    *((_QWORD *)this + 49) = v15;
    operator delete(v15);
  }
  v16 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v16)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v16);
  v17 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v17)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v17);
  v18 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v19)
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v19);
  v20 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v21)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v21);
  v22 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v22)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v22);
  v23 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v23)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v23);
  v24 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v24)
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v24);
  v25 = (void *)*((_QWORD *)this + 33);
  if (v25)
  {
    *((_QWORD *)this + 34) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 30);
  if (v26)
  {
    *((_QWORD *)this + 31) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 27);
  if (v27)
  {
    *((_QWORD *)this + 28) = v27;
    operator delete(v27);
  }
  v28 = v2;
  std::vector<std::unique_ptr<EndpointDecisionLayerVAD3>>::__destroy_vector::operator()[abi:ne180100](&v28);
  std::unique_ptr<MixViterbiProd>::reset[abi:ne180100]((uint64_t *)this + 13, 0);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

void std::vector<std::unique_ptr<EndpointDecisionLayerVAD3>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  v2 = (uint64_t *)a1[25];
  a1[25] = 0;
  if (v2)
    std::default_delete<MRRingBuffer<DataTimeStamp>>::operator()[abi:ne180100](v2);
  v3 = (uint64_t *)a1[24];
  a1[24] = 0;
  if (v3)
    std::default_delete<MRRingBuffer<AUEndpointVAD3_Decision>>::operator()[abi:ne180100](v3);
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::vector<std::vector<std::vector<float>>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B64C03B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EndpointVAD3::TranslateFullPosteriorsToMarginalized(uint64_t a1, float ***a2, uint64_t *a3, unsigned int **a4, int **a5)
{
  uint64_t *i;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  float **v14;
  float **v15;
  void ***v16;
  int *v17;
  int *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void **j;
  _BYTE *v23;
  float *v24;
  float *v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  unsigned int v31;
  int v32;
  int *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  std::vector<std::vector<std::vector<float>>>::resize(a3, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  for (i = (uint64_t *)*a3; i != (uint64_t *)a3[1]; i += 3)
  {
    std::vector<std::vector<float>>::resize(i, a4[1] - *a4);
    v11 = *i;
    if (*i != i[1])
    {
      v12 = *a4;
      do
      {
        v13 = *v12++;
        std::vector<float>::resize(v11, v13);
        v11 += 24;
      }
      while (v11 != i[1]);
    }
  }
  v15 = *a2;
  v14 = a2[1];
  if (v15 != v14)
  {
    v16 = (void ***)*a3;
    v18 = *a5;
    v17 = a5[1];
    if ((unint64_t)(v17 - v18) <= 1)
      v19 = 1;
    else
      v19 = v17 - v18;
    do
    {
      v20 = *v16;
      v21 = v16[1];
      for (j = *v16; j != v21; j += 3)
      {
        v23 = j[1];
        if (*j != v23)
          bzero(*j, ((v23 - (_BYTE *)*j - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      }
      v24 = *v15;
      v25 = v15[1];
      if (*v15 != v25)
      {
        v26 = 0;
        do
        {
          if (v17 != v18)
          {
            v27 = *(unsigned int **)(a1 + 592);
            v28 = v19;
            v29 = v26;
            v30 = v18;
            do
            {
              v31 = *v27++;
              v32 = v29 / v31;
              v29 %= v31;
              *v30++ = v32;
              --v28;
            }
            while (v28);
            v33 = v18;
            v34 = (uint64_t *)v20;
            do
            {
              v36 = *v34;
              v34 += 3;
              v35 = v36;
              LODWORD(v36) = *v33++;
              *(float *)(v35 + 4 * v36) = *v24 + *(float *)(v35 + 4 * v36);
            }
            while (v33 != v17);
          }
          ++v26;
          ++v24;
        }
        while (v24 != v25);
      }
      v16 += 3;
      v15 += 3;
    }
    while (v15 != v14);
  }
}

void EndpointVAD3::UpdateAndDispatchDecisions(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t *a4, uint64_t a5, unsigned int a6)
{
  uint64_t *v6;
  unsigned int v7;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  double v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  __int128 v37;
  __int128 v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  int64_t v53;
  void *v54;
  double v55;
  double v56;
  double *v57;
  double *v58;
  unsigned int v59;
  double v60;
  double v61;
  unsigned int v62;
  double v63;
  BOOL v64;
  double *v65;
  unsigned int v66;
  double *v67;
  unsigned int v68;
  unint64_t v70;
  double *v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  char *v82;
  char *v83;
  unint64_t v84;
  __int128 v85;
  double *v86;
  int64_t v87;
  uint64_t v88;
  __int128 *v89;
  char v90;
  double v91;
  char v92;
  __int128 v93;
  int v94;
  unint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  float v99;
  int v100;
  double *v101;
  double v102;
  float v103;
  float v104;
  float v105;
  double *v106;
  int v107;
  double v108;
  double v109;
  float v110;
  float v111;
  float v112;
  float v113;
  BOOL v114;
  int v115;
  int v116;
  float64x2_t v117;
  double *v118;
  int v119;
  double *v120;
  int v121;
  int v122;
  double v123;
  double v124;
  double v125;
  float64x2_t v126;
  double v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  signed int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  float64_t v135;
  int v136;
  float64_t v137;
  uint64_t *v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  double v150;
  double v151;
  _QWORD *v152;
  _QWORD *i;
  uint64_t v154;
  uint64_t v155;
  _QWORD *j;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  NSObject *v160;
  uint64_t v161;
  int v163;
  _QWORD *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  _BYTE buf[24];
  char *v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2 != a2[1])
  {
    v7 = a6;
    v11 = a6;
    v161 = a5 + 144;
    v166 = a5 + 168;
    v170 = a6;
    v171 = *a4;
    do
    {
      v12 = *v6;
      v13 = (v6[1] - *v6) >> 2;
      if (v13 <= v11)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      if (!*(_BYTE *)(a5 + 224))
      {
        v14 = *a4;
        v15 = a4[1];
        if (*a4 == v15)
        {
          v17 = 0.0;
        }
        else
        {
          v16 = 0;
          v17 = 0.0;
          do
          {
            if (v16)
            {
              if (*(double *)(v14 + v16 + 8) < v17)
                v17 = *(double *)(v14 + v16 + 8);
            }
            else
            {
              v17 = *(double *)(v14 + 8);
            }
            v16 += 16;
          }
          while (v14 + v16 != v15);
        }
        v18 = *(double *)(a5 + 128) * v17;
        *(_DWORD *)(a5 + 144) = 0;
        *(double *)(a5 + 152) = v18;
        *(double *)(a5 + 160) = v17;
        *(_QWORD *)(v166 + 16) = *(_QWORD *)(v161 + 16);
        *(_OWORD *)v166 = *(_OWORD *)v161;
        *(_BYTE *)(a5 + 224) = 1;
        v12 = *v6;
        v13 = (v6[1] - *v6) >> 2;
      }
      v173 = 0;
      if (v13 <= v11)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v11)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v169 = v6;
      ++*(_DWORD *)(a5 + 220);
      *(_DWORD *)buf = *(_DWORD *)(v12 + 4 * v11);
      *(_OWORD *)&buf[8] = *(_OWORD *)v171;
      *(_QWORD *)(a5 + 104) = *(_QWORD *)(a5 + 96);
      v20 = *(char **)(a5 + 16);
      v19 = *(char **)(a5 + 24);
      v21 = v19 - v20;
      if (v19 == v20)
      {
        v23 = *(char **)(a5 + 24);
      }
      else
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
        v23 = *(char **)(a5 + 16);
        do
        {
          v24 = v22 >> 1;
          v25 = &v23[24 * (v22 >> 1)];
          v26 = *((double *)v25 + 2);
          v27 = v25 + 24;
          v22 += ~(v22 >> 1);
          if (*(double *)&buf[16] > v26)
            v22 = v24;
          else
            v23 = v27;
        }
        while (v22);
      }
      v28 = *(_QWORD *)(a5 + 32);
      if ((unint64_t)v19 >= v28)
      {
        v32 = 1 - 0x5555555555555555 * (v21 >> 3);
        if (v32 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v28 - (_QWORD)v20) >> 3) > v32)
          v32 = 0x5555555555555556 * ((uint64_t)(v28 - (_QWORD)v20) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v20) >> 3) >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v32;
        if (v33)
        {
          v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v33);
        }
        else
        {
          v35 = 0;
          v34 = 0;
        }
        v39 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v20) >> 3);
        v40 = &v35[8 * ((v23 - v20) >> 3)];
        v41 = &v35[24 * v34];
        if (v39 == v34)
        {
          if (v23 - v20 < 1)
          {
            if (v23 == v20)
              v43 = 1;
            else
              v43 = 0x5555555555555556 * ((v23 - v20) >> 3);
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v43);
            v40 = &v44[24 * (v43 >> 2)];
            v41 = &v44[24 * v45];
            if (v35)
              operator delete(v35);
          }
          else
          {
            if (v39 >= -1)
              v42 = v39 + 1;
            else
              v42 = v39 + 2;
            v40 -= 24 * (v42 >> 1);
          }
        }
        v46 = *(_OWORD *)buf;
        *((_QWORD *)v40 + 2) = *(_QWORD *)&buf[16];
        *(_OWORD *)v40 = v46;
        v47 = *(char **)(a5 + 16);
        v48 = v40;
        if (v47 != v23)
        {
          v49 = v23;
          v50 = v40;
          do
          {
            v51 = *(_OWORD *)(v49 - 24);
            v48 = v50 - 24;
            *((_QWORD *)v50 - 1) = *((_QWORD *)v49 - 1);
            *(_OWORD *)(v50 - 24) = v51;
            v49 -= 24;
            v50 -= 24;
          }
          while (v49 != v47);
        }
        v52 = *(char **)(a5 + 24);
        v53 = v52 - v23;
        if (v52 != v23)
          memmove(v40 + 24, v23, v52 - v23);
        v54 = *(void **)(a5 + 16);
        *(_QWORD *)(a5 + 16) = v48;
        *(_QWORD *)(a5 + 24) = &v40[v53 + 24];
        *(_QWORD *)(a5 + 32) = v41;
        v7 = a6;
        if (v54)
          operator delete(v54);
      }
      else if (v23 == v19)
      {
        v38 = *(_OWORD *)buf;
        *((_QWORD *)v19 + 2) = *(_QWORD *)&buf[16];
        *(_OWORD *)v19 = v38;
        *(_QWORD *)(a5 + 24) = v19 + 24;
      }
      else
      {
        v29 = v19 - 24;
        v30 = *(_QWORD *)(a5 + 24);
        while (v29 < v19)
        {
          v31 = *(_OWORD *)v29;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)v29 + 2);
          *(_OWORD *)v30 = v31;
          v30 += 24;
          v29 += 24;
        }
        *(_QWORD *)(a5 + 24) = v30;
        if (v19 != v23 + 24)
          memmove(v23 + 24, v23, v19 - (v23 + 24));
        v36 = buf;
        if (v23 <= buf)
          v36 = &buf[24 * (*(_QWORD *)(a5 + 24) > (unint64_t)buf)];
        v37 = *(_OWORD *)v36;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v36 + 2);
        *(_OWORD *)v23 = v37;
      }
      v55 = *(double *)&buf[16];
      v56 = *(double *)(a5 + 40);
      if (*(double *)&buf[16] > v56)
      {
        *(_QWORD *)(a5 + 40) = *(_QWORD *)&buf[16];
        v56 = v55;
      }
      v57 = *(double **)(a5 + 16);
      v58 = *(double **)(a5 + 24);
      v59 = -1431655765 * ((unint64_t)((char *)v58 - (char *)v57) >> 3);
      v60 = *(double *)a5;
      v61 = v56 - *(double *)a5;
      v62 = *(_DWORD *)(a5 + 8);
      v63 = *(v58 - 1);
      v64 = v62 < v59 || v63 < v61;
      v65 = *(double **)(a5 + 24);
      if (v64)
      {
        v66 = v59 - 1;
        v65 = *(double **)(a5 + 24);
        while (1)
        {
          v67 = v65;
          v65 -= 3;
          if (v65 == v57)
            break;
          v68 = v66 - 1;
          if (v66-- <= v62)
          {
            v66 = v68;
            if (*(v67 - 4) >= v61)
              goto LABEL_76;
          }
        }
        v65 = *(double **)(a5 + 16);
      }
LABEL_76:
      v70 = *(_QWORD *)(a5 + 96);
      if (v58 != v65)
      {
        *(_QWORD *)(a5 + 104) = v70;
        v71 = v65;
        do
        {
          v72 = *(_QWORD *)(a5 + 112);
          if (v70 >= v72)
          {
            v74 = *(_QWORD *)(a5 + 96);
            v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v74) >> 3);
            v76 = v75 + 1;
            if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v74) >> 3);
            if (2 * v77 > v76)
              v76 = 2 * v77;
            if (v77 >= 0x555555555555555)
              v78 = 0xAAAAAAAAAAAAAAALL;
            else
              v78 = v76;
            if (v78)
              v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v78);
            else
              v79 = 0;
            v80 = v78 + 24 * v75;
            v81 = *(_OWORD *)v71;
            *(double *)(v80 + 16) = v71[2];
            *(_OWORD *)v80 = v81;
            v83 = *(char **)(a5 + 96);
            v82 = *(char **)(a5 + 104);
            v84 = v80;
            if (v82 != v83)
            {
              do
              {
                v85 = *(_OWORD *)(v82 - 24);
                *(_QWORD *)(v84 - 8) = *((_QWORD *)v82 - 1);
                *(_OWORD *)(v84 - 24) = v85;
                v84 -= 24;
                v82 -= 24;
              }
              while (v82 != v83);
              v82 = *(char **)(a5 + 96);
            }
            v70 = v80 + 24;
            *(_QWORD *)(a5 + 96) = v84;
            *(_QWORD *)(a5 + 104) = v80 + 24;
            *(_QWORD *)(a5 + 112) = v78 + 24 * v79;
            if (v82)
              operator delete(v82);
          }
          else
          {
            v73 = *(_OWORD *)v71;
            *(double *)(v70 + 16) = v71[2];
            *(_OWORD *)v70 = v73;
            v70 += 24;
          }
          *(_QWORD *)(a5 + 104) = v70;
          v71 += 3;
        }
        while (v71 != v58);
        v86 = *(double **)(a5 + 24);
        v87 = (char *)v86 - (char *)v58;
        if (v86 != v58)
          memmove(v65, v58, (char *)v86 - (char *)v58);
        v58 = (double *)((char *)v65 + v87);
        *(_QWORD *)(a5 + 24) = (char *)v65 + v87;
        v63 = *(double *)((char *)v65 + v87 - 8);
        v56 = *(double *)(a5 + 40);
        v60 = *(double *)a5;
        v70 = *(_QWORD *)(a5 + 96);
      }
      *(double *)(a5 + 48) = v63;
      v88 = *(_QWORD *)(a5 + 104);
      if (v70 != v88)
      {
        v89 = 0;
        v90 = 1;
        v91 = 0.0;
        do
        {
          v92 = v90 | (*(double *)(v70 + 16) > v91);
          v90 = 0;
          if ((v92 & 1) != 0)
          {
            v89 = (__int128 *)v70;
            v91 = *(double *)(v70 + 16);
          }
          v70 += 24;
        }
        while (v70 != v88);
        if (v89)
        {
          *(_BYTE *)(a5 + 136) = 0;
          v93 = *v89;
          *(_QWORD *)(v166 + 16) = *((_QWORD *)v89 + 2);
          *(_OWORD *)v166 = v93;
        }
      }
      if (v56 - *(double *)(a5 + 160) <= v60)
      {
        v94 = *(unsigned __int8 *)(a5 + 136);
      }
      else
      {
        v94 = 0;
        *(_BYTE *)(a5 + 136) = 0;
      }
      v95 = v170;
      v96 = *(_DWORD *)(a5 + 120);
      v97 = v96 == 0;
      v98 = 88;
      if (!v96)
        v98 = 92;
      v99 = *(float *)(a5 + v98);
      v100 = *(_DWORD *)(a5 + 168);
      v101 = *(double **)(a5 + 16);
      if (v58 == v101)
      {
        v111 = 0.0;
        v112 = 0.0;
      }
      else
      {
        v102 = v56 - v60;
        if (v94)
          v102 = *(double *)(a5 + 184);
        v103 = *(v58 - 1) - v102;
        v104 = v103 + 0.0;
        if (v100 == v97)
          v105 = v103 + 0.0;
        else
          v105 = 0.0;
        v106 = v58 - 4;
        while (1)
        {
          v107 = *((_DWORD *)v106 + 2);
          if (v106 + 1 == v101)
            break;
          v108 = v106[3];
          v109 = *v106;
          v106 -= 3;
          v103 = v109 - v108;
          v104 = v103 + v104;
          if (v107 == v97)
            v110 = v103;
          else
            v110 = -0.0;
          v105 = v105 + v110;
        }
        v111 = v103 + v104;
        if (v107 != v97)
          v103 = -0.0;
        v112 = v105 + v103;
      }
      v113 = v60 * v99;
      v114 = (float)(v112 / v111) >= v99 && v112 > v113;
      if (v114)
        v115 = 2;
      else
        v115 = 0;
      if (v96)
        v116 = v115;
      else
        v116 = (float)(v112 / v111) >= v99 && v112 > v113;
      v117 = 0uLL;
      if (v116 == 2)
      {
        if (v100)
        {
          if (v58 != v101)
          {
            v118 = v58;
            while (1)
            {
              v119 = *((_DWORD *)v118 - 6);
              v118 -= 3;
              if (!v119)
                break;
              v58 = v118;
              if (v118 == v101)
                goto LABEL_149;
            }
            v117.f64[0] = 0.0;
            v117.f64[1] = *(v58 - 1);
          }
        }
        else
        {
          v117.f64[1] = *(float64_t *)(a5 + 184);
        }
LABEL_149:
        v122 = 0;
        v123 = *(double *)(a5 + 128);
        v124 = vmuld_lane_f64(v123, v117, 1);
        v125 = *(double *)(a5 + 80);
        v126.f64[0] = v123 * v125;
        v117.f64[0] = v124;
      }
      else
      {
        if (v116 != 1)
          goto LABEL_156;
        if (v100 == 1)
        {
          v117.f64[1] = *(float64_t *)(a5 + 184);
        }
        else if (v58 != v101)
        {
          v120 = v58;
          while (1)
          {
            v121 = *((_DWORD *)v120 - 6);
            v120 -= 3;
            if (v121 == 1)
              break;
            v58 = v120;
            if (v120 == v101)
              goto LABEL_151;
          }
          v117.f64[0] = 0.0;
          v117.f64[1] = *(v58 - 1);
        }
LABEL_151:
        v127 = *(double *)(a5 + 128);
        v128 = vmuld_lane_f64(v127, v117, 1);
        v125 = *(double *)(a5 + 72);
        v126.f64[0] = v127 * v125;
        v117.f64[0] = v128;
        v122 = 1;
      }
      v130 = *(_QWORD *)(a5 + 192);
      v129 = *(_QWORD *)(a5 + 200);
      v131 = *(_DWORD *)(v130 + 8);
      if (v131 != *(_DWORD *)(v129 + 8))
      {
        if (EndpointVAD3LogScope(void)::once != -1)
          dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
        if (EndpointVAD3LogScope(void)::scope)
        {
          v160 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
          if (*(_QWORD *)EndpointVAD3LogScope(void)::scope)
            goto LABEL_205;
        }
        else
        {
          v160 = MEMORY[0x1E0C81028];
LABEL_205:
          if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "EndpointDecisionLayerVAD3.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 281;
            _os_log_impl(&dword_1B5ED0000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d Internal decision history buffers must have the same size", buf, 0x12u);
          }
        }
        abort();
      }
      v126.f64[1] = v125;
      v117 = vaddq_f64(v117, v126);
      v132 = *(int *)(v130 + 12);
      *(_DWORD *)(*(_QWORD *)v130 + 4 * v132) = v116;
      *(_DWORD *)(v130 + 12) = ((int)v132 + 1) % v131;
      v133 = *(int *)(v129 + 12);
      *(float64x2_t *)(*(_QWORD *)v129 + 16 * v133) = v117;
      *(_DWORD *)(v129 + 12) = ((int)v133 + 1) % v131;
      v134 = *(_DWORD *)(a5 + 208);
      if (v134 + 1 < v131)
        v131 = v134 + 1;
      *(_DWORD *)(a5 + 208) = v131;
      *(_DWORD *)(a5 + 120) = v122;
LABEL_156:
      LODWORD(v173) = 0;
      HIDWORD(v173) = v116;
      v135 = v117.f64[1];
      v136 = *(_DWORD *)(a5 + 212);
      v137 = 0.0;
      if (v136 == 1)
      {
        v163 = v116;
        v164 = a3;
        v140 = *(uint64_t **)(a5 + 192);
        v141 = *(_QWORD *)(a5 + 200);
        v142 = *v140;
        v143 = *((_DWORD *)v140 + 2);
        v144 = v143 - *((_DWORD *)v140 + 3);
        v145 = *(_DWORD *)(v142 + 4 * (v143 + ~(v144 % v143)));
        v146 = *(_DWORD *)(a5 + 208);
        v172 = *(_OWORD *)(*(_QWORD *)v141
                         + 16
                         * (*(_DWORD *)(v141 + 8)
                          + ~((*(_DWORD *)(v141 + 8) - *(_DWORD *)(v141 + 12)) % *(_DWORD *)(v141 + 8))));
        v165 = v146;
        if (v146 >= 2)
        {
          v147 = v144 + 1;
          v148 = -v146;
          v149 = -1;
          do
          {
            MRRingBuffer<DataTimeStamp>::GetSample(v141, --v149);
            if (v150 > *((double *)&v172 + 1))
            {
              v145 = *(_DWORD *)(v142 + 4 * (v143 + ~(v147 % v143)));
              *((double *)&v172 + 1) = v150;
            }
            ++v147;
          }
          while (v148 != v149);
        }
        v139 = 0;
        if (!v165)
        {
          a3 = v164;
          v7 = a6;
          v138 = v169;
          v95 = v170;
          v116 = v163;
          goto LABEL_174;
        }
        a3 = v164;
        v138 = v169;
        v95 = v170;
        v116 = v163;
        if (v145 != 2)
        {
          v7 = a6;
          goto LABEL_174;
        }
        v151 = *(double *)(v171 + 8);
        v7 = a6;
        if (v151 - *(double *)(a5 + 160) >= *(double *)(a5 + 56)
          && v151 - *((double *)&v172 + 1) >= *(double *)(a5 + 64))
        {
          *(_DWORD *)(a5 + 212) = 2;
          v139 = 4;
          LODWORD(v173) = 4;
          v137 = *((double *)&v172 + 1);
          goto LABEL_174;
        }
LABEL_169:
        v139 = 0;
        goto LABEL_174;
      }
      if (v136)
      {
        v139 = 0;
        v138 = v169;
        goto LABEL_174;
      }
      v138 = v169;
      if (v96 != 0 || !v114)
        goto LABEL_169;
      *(_DWORD *)(a5 + 212) = 1;
      v139 = 3;
      LODWORD(v173) = 3;
      v137 = v117.f64[1];
LABEL_174:
      if ((v116 - 1) <= 1)
      {
        *(_QWORD *)buf = &off_1E69DF828;
        *(_DWORD *)&buf[8] = 0;
        *(_DWORD *)&buf[12] = v7;
        *(float64_t *)&buf[16] = v135;
        v175 = (char *)&v173 + 4;
        v152 = *(_QWORD **)(a1 + 504);
        if (v152 != *(_QWORD **)(a1 + 512))
        {
          do
          {
            (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v152 + 16))(*v152, buf);
            ++v152;
          }
          while (v152 != *(_QWORD **)(a1 + 512));
          v139 = v173;
        }
        v95 = v170;
      }
      if ((v139 - 3) <= 1)
      {
        *(_QWORD *)buf = &off_1E69DF828;
        *(_DWORD *)&buf[8] = 1;
        *(_DWORD *)&buf[12] = v7;
        *(float64_t *)&buf[16] = v137;
        v175 = (char *)&v173;
        for (i = *(_QWORD **)(a1 + 504); i != *(_QWORD **)(a1 + 512); ++i)
          (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*i + 16))(*i, buf);
        v95 = v170;
      }
      v154 = *v138;
      if (v95 >= (v138[1] - *v138) >> 2)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v155 = *(_QWORD *)(v171 + 8);
      *(_QWORD *)buf = &off_1E69DF828;
      *(_DWORD *)&buf[8] = 2;
      *(_DWORD *)&buf[12] = v7;
      *(_QWORD *)&buf[16] = v155;
      v175 = (char *)(v154 + 4 * v95);
      for (j = *(_QWORD **)(a1 + 504); j != *(_QWORD **)(a1 + 512); ++j)
        (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*j + 16))(*j, buf);
      v157 = *a3;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v170)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v158 = *(_QWORD *)(v171 + 8);
      *(_QWORD *)buf = &off_1E69DF828;
      *(_DWORD *)&buf[8] = 3;
      *(_DWORD *)&buf[12] = v7;
      *(_QWORD *)&buf[16] = v158;
      v175 = (char *)(v157 + 24 * v170);
      v159 = *(_QWORD **)(a1 + 504);
      if (v159 != j)
      {
        do
        {
          (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v159 + 16))(*v159, buf);
          ++v159;
        }
        while (v159 != *(_QWORD **)(a1 + 512));
      }
      v11 = v170;
      v171 += 16;
      a3 += 3;
      v6 = v138 + 3;
    }
    while (v6 != a2[1]);
  }
}

void sub_1B64C12F0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float FeaturesDSPWrapper::GetCurrentProcessedFeatures(uint64_t a1, float **a2)
{
  float result;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float v12;

  std::vector<float>::resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int *)(v5 + 8);
  if ((_DWORD)v6)
  {
    v8 = v5 + 24;
    v7 = *(float **)(v5 + 24);
    v9 = (uint64_t)(*(_QWORD *)(v8 + 8) - (_QWORD)v7) >> 2;
    v10 = *a2;
    v11 = a2[1] - *a2;
    do
    {
      if (!v9)
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      if (!v11)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v12 = *v7++;
      result = v12;
      *v10++ = v12;
      --v11;
      --v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

float FeaturesDSPWrapper::GetCurrentProcessedSuperFeatures(_QWORD *a1, float **a2)
{
  float result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  std::vector<float>::resize((uint64_t)a2, ((a1[8] - a1[7]) >> 2));
  v5 = (unsigned int *)a1[7];
  v6 = a1[8] - (_QWORD)v5;
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    v7 = v6 >> 2;
    v8 = *a2;
    v9 = a2[1] - *a2;
    v10 = ((unint64_t)v6 >> 2);
    do
    {
      if (!v7)
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
      v11 = *v5;
      v12 = *(_QWORD *)(a1[2] + 24);
      if (v11 >= (*(_QWORD *)(a1[2] + 32) - v12) >> 2)
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      if (!v9)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      result = *(float *)(v12 + 4 * v11);
      *v8++ = result;
      ++v5;
      --v9;
      --v7;
      --v10;
    }
    while (v10);
  }
  return result;
}

void EndpointVAD3::DoneProcessingAudio(EndpointVAD3 *this, double a2)
{
  unint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::string *v15;
  std::string v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20[3];
  float **v21[3];
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE buf[28];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  if (*((_DWORD *)this + 6) != 1)
  {
    std::string::__assign_external(&v16, "DoneProcessingAudio() should not be called with real time operation mode or on the real time thread.", 0x64uLL);
    if (EndpointVAD3LogScope(void)::once != -1)
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_8_17324);
    if (EndpointVAD3LogScope(void)::scope)
    {
      v14 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(_QWORD *)EndpointVAD3LogScope(void)::scope)
        goto LABEL_26;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = &v16;
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v16.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "EndpointVAD3.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 490;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v15;
      _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
LABEL_26:
    abort();
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  __p = 0;
  v18 = 0;
  v19 = 0;
  v3 = *(unsigned int *)(*((_QWORD *)this + 13) + 236);
  std::vector<std::vector<unsigned int>>::resize(&v22, v3);
  std::vector<std::vector<float>>::resize((uint64_t *)v21, v3);
  std::vector<std::vector<std::vector<float>>>::resize(v20, v3);
  std::vector<std::span<float,18446744073709551615ul>>::resize((char **)&__p, v3);
  v4 = *((_QWORD *)this + 13);
  memset(buf, 0, 24);
  MixViterbiProd::decodeRaw_Post(v4, v3, (std::vector<unsigned int> *)buf, (uint64_t *)v21);
  v5 = *(int **)buf;
  v6 = *(int **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v7 = *(uint64_t **)(v4 + 184);
    v8 = *v7;
    v9 = *((_DWORD *)v7 + 3);
    do
    {
      v10 = *v5++;
      *(_DWORD *)(v8 + 4 * v9) = v10;
      v9 = (*((_DWORD *)v7 + 3) + 1) % *((_DWORD *)v7 + 2);
      *((_DWORD *)v7 + 3) = v9;
    }
    while (v5 != v6);
  }
  MixViterbiProd::convertRawStateSequenceToProd(v4, buf, &v22);
  MixViterbiProd::retrieveTimeStamps(v4, 1 - v3, 0, (char **)&__p);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  EndpointVAD3::TranslateFullPosteriorsToMarginalized((uint64_t)this, v21, v20, *((unsigned int ***)this + 47), (int **)this + 48);
  v11 = __p;
  if (v23 != v22 && v18 != __p)
  {
    v12 = *((_QWORD *)this + 14);
    if (*((_QWORD *)this + 15) != v12)
    {
      v13 = 0;
      do
      {
        EndpointVAD3::UpdateAndDispatchDecisions((uint64_t)this, &v22, (_QWORD *)v20[0], (uint64_t *)&__p, *(_QWORD *)(v12 + 8 * v13), v13);
        ++v13;
        v12 = *((_QWORD *)this + 14);
      }
      while (v13 < (*((_QWORD *)this + 15) - v12) >> 3);
    }
  }
  if (v11)
    operator delete(v11);
  *(_QWORD *)buf = v20;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1B64C179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::InitializeHWInput(VoiceProcessorV2 *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int *a7, const AudioStreamBasicDescription *a8, const AudioChannelLayout *a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int *a13)
{
  char *v17;
  char *v18;
  int v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  NSObject *v24;
  int *v25;
  _BYTE *v26;
  _QWORD *v27;
  NSObject *v28;
  int v29;
  void *v30;
  int *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  _QWORD *v35;
  NSObject *v36;
  int *v37;
  _QWORD *v38;
  NSObject *v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  int *v44;
  uint64_t v45;
  _QWORD *v46;
  NSObject *v47;
  int *v48;
  double mSampleRate;
  AudioFormatID mFormatID;
  AudioFormatFlags mFormatFlags;
  UInt32 mFramesPerPacket;
  UInt32 mBytesPerPacket;
  UInt32 mBytesPerFrame;
  UInt32 mChannelsPerFrame;
  UInt32 mBitsPerChannel;
  double v57;
  AudioFormatFlags v58;
  AudioFormatID v59;
  UInt32 v60;
  UInt32 v61;
  UInt32 v62;
  UInt32 v63;
  UInt32 v64;
  UInt32 v65;
  uint64_t v66;
  _BOOL4 v67;
  UInt32 v68;
  int v69;
  UInt32 v70;
  AudioFormatFlags v71;
  int v72;
  BOOL v73;
  UInt32 v74;
  _BOOL4 v75;
  _BOOL4 v76;
  UInt32 v77;
  AudioFormatFlags v78;
  int v79;
  UInt32 v80;
  AudioFormatFlags v81;
  int v82;
  unsigned __int8 *v84;
  char v85;
  uint64_t v86;
  NSObject *v87;
  const char *v88;
  unsigned int v89;
  void *v91;
  void *v92;
  NSObject *v93;
  NSObject *v94;
  int *v95;
  uint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  NSObject *v99;
  unsigned int v100;
  int *v101;
  uint64_t v102;
  unsigned int v103;
  _QWORD *v104;
  NSObject *v105;
  NSObject *v106;
  NSObject *v107;
  unint64_t v108;
  _QWORD *v109;
  NSObject *v110;
  unsigned int v111;
  int *v112;
  uint64_t v113;
  unsigned int v114;
  int *v115;
  unsigned int *v116;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  UInt32 v122;
  NSObject *v123;
  NSObject *v124;
  int *v125;
  __int128 v126;
  NSObject *v127;
  NSObject *v128;
  void *v129;
  int v130;
  int *v131;
  uint64_t v132;
  const char *v133;
  int v134;
  __int128 v135;
  NSObject *v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  void *v141;
  const void *v142;
  const void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 *v147;
  NSObject *v148;
  NSObject *v149;
  int *v150;
  char *v151;
  char *v152;
  int v153;
  unsigned int v157;
  unsigned int v158;
  _BYTE *v159;
  char v160;
  void *v161;
  void *v162;
  _BYTE v163[32];
  uint64_t v164;
  void *v165[2];
  _BYTE buf[44];
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  void **v170;
  __int16 v171;
  void *v172;
  __int16 v173;
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v17 = (char *)this + 12460;
  v18 = (char *)this + 2360;
  v152 = (char *)this + 2392;
  v19 = (*(uint64_t (**)(void))(*((_QWORD *)this + 299) + 16))();
  v21 = (unsigned int *)((char *)this + 2480);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v153 = v19;
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  if (v17[3437])
  {
    if (*((_BYTE *)this + 1688))
    {
      LODWORD(v20) = *((_DWORD *)this + 123);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 212) - (double)v20, *((double *)this + 212) - (double)v20, 0);
    }
    if (*((_BYTE *)this + 1689) && (v17[3437] || v17[3438]))
    {
      LODWORD(v20) = *((_DWORD *)this + 124);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 213) - (double)v20, *((double *)this + 213) - (double)v20, 1);
    }
  }
  v151 = v18;
  *((_WORD *)this + 844) = 0;
  if (*((_BYTE *)this + 1856))
    *((_BYTE *)this + 1856) = 0;
  *((_DWORD *)this + 284) = a5;
  *((_DWORD *)this + 285) = a11;
  ++VoiceProcessorV2::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::InitHWCallCount;
  v159 = v17;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v23 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v24 = (*v23 ? *v23 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 58;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = VoiceProcessorV2::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::InitHWCallCount;
      _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> call num %u", buf, 0x18u);
    }
  }
  v25 = (int *)*((_QWORD *)this + 1570);
  if (v25 && (v159[3437] || v159[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v25, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 58, "InitializeHWInput", "call num %u", VoiceProcessorV2::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::InitHWCallCount);
  }
  v158 = 0;
  if (a6)
  {
    v26 = v159;
    if (a7)
      v158 = *a7;
  }
  else
  {
    v26 = v159;
  }
  v157 = 0;
  if (a12 && a13)
    v157 = *a13;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v27 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      v29 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
      CAX4CCString::CAX4CCString((CAX4CCString *)v163, v158);
      CAFormatter::CAFormatter((CAFormatter *)&v162, a2);
      v30 = v162;
      CAX4CCString::CAX4CCString((CAX4CCString *)v165, v157);
      CAFormatter::CAFormatter((CAFormatter *)&v161, a8);
      *(_DWORD *)buf = 136317186;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v29;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = v163;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = v30;
      v167 = 2048;
      v168 = a4;
      v169 = 2080;
      v170 = v165;
      v171 = 2080;
      v172 = v161;
      v173 = 2048;
      v174 = a10;
      _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> VPV%u REF %s %s (blksz %lu) MIC %s %s (blksz %lu)", buf, 0x54u);
      if (v161)
        free(v161);
      if (v162)
        free(v162);
    }
  }
  v31 = (int *)*((_QWORD *)this + 1570);
  if (v31 && (v26[3437] || v26[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v32 = VPLogScope(void)::scope;
    v33 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 112))(this);
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, v158);
    CAFormatter::CAFormatter((CAFormatter *)v165, a2);
    v34 = (const char *)v165[0];
    CAX4CCString::CAX4CCString((CAX4CCString *)v163, v157);
    CAFormatter::CAFormatter((CAFormatter *)&v162, a8);
    CALegacyLog::log(v31, 4, v32, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 63, "InitializeHWInput", "VPV%u REF %s %s (blksz %lu) MIC %s %s (blksz %lu)", v33, buf, v34, a4, v163, (const char *)v162, a10);
    v26 = v159;
    if (v162)
      free(v162);
    if (v165[0])
      free(v165[0]);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v35 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v36 = (*v35 ? *v35 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a5;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a11;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref audiodeviceid = %lu      mic audiodeviceid = %lu", buf, 0x26u);
    }
  }
  v37 = (int *)*((_QWORD *)this + 1570);
  if (v37 && (v26[3437] || v26[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v37, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 65, "InitializeHWInput", "ref audiodeviceid = %lu      mic audiodeviceid = %lu", a5, a11);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v38 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v39 = (*v38 ? *v38 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)v163, a2);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = *(_QWORD *)v163;
      _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> inRefASBD passed in = %s", buf, 0x1Cu);
      if (*(_QWORD *)v163)
        free(*(void **)v163);
    }
  }
  v40 = (int *)*((_QWORD *)this + 1570);
  if (v40 && (v26[3437] || v26[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v41 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, a2);
    CALegacyLog::log(v40, 5, v41, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 71, "InitializeHWInput", "inRefASBD passed in = %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v42 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v43 = (*v42 ? *v42 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)v163, a8);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 72;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = *(_QWORD *)v163;
      _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> inMicASBD passed in = %s", buf, 0x1Cu);
      if (*(_QWORD *)v163)
        free(*(void **)v163);
    }
  }
  v44 = (int *)*((_QWORD *)this + 1570);
  if (v44 && (v26[3437] || v26[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v45 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, a8);
    CALegacyLog::log(v44, 5, v45, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 72, "InitializeHWInput", "inMicASBD passed in = %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v46 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v47 = (*v46 ? *v46 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 73;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a4;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a10;
      _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> hw io blocksizes passed in REF = %lu MIC = %lu", buf, 0x26u);
    }
  }
  v48 = (int *)*((_QWORD *)this + 1570);
  if (v48 && (v26[3437] || v26[3438]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v48, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 73, "InitializeHWInput", "hw io blocksizes passed in REF = %lu MIC = %lu", a4, a10);
  }
  mSampleRate = a2->mSampleRate;
  mFormatID = a2->mFormatID;
  mFormatFlags = a2->mFormatFlags;
  mBytesPerPacket = a2->mBytesPerPacket;
  mFramesPerPacket = a2->mFramesPerPacket;
  mBytesPerFrame = a2->mBytesPerFrame;
  mChannelsPerFrame = a2->mChannelsPerFrame;
  mBitsPerChannel = a2->mBitsPerChannel;
  v57 = a8->mSampleRate;
  v59 = a8->mFormatID;
  v58 = a8->mFormatFlags;
  v60 = a8->mBytesPerPacket;
  v61 = a8->mFramesPerPacket;
  v62 = a8->mBytesPerFrame;
  v63 = a8->mChannelsPerFrame;
  v64 = mBitsPerChannel >> 3;
  v65 = a8->mBitsPerChannel;
  if (mFormatID != 1819304813)
    goto LABEL_122;
  if (mFramesPerPacket != 1)
    goto LABEL_122;
  if (mBytesPerFrame != mBytesPerPacket)
    goto LABEL_122;
  if (v64 > mBytesPerFrame)
    goto LABEL_122;
  if (!mChannelsPerFrame)
    goto LABEL_122;
  v68 = a2->mBytesPerPacket;
  if ((mFormatFlags & 0x20) == 0)
  {
    v68 = mBytesPerPacket / mChannelsPerFrame;
    if (mBytesPerPacket % mChannelsPerFrame)
      goto LABEL_122;
  }
  v66 = mFormatFlags & 1;
  if ((mFormatFlags & 2) == 0 && 8 * v68 == mBitsPerChannel && (mFormatFlags & 1) == 0 && (mFormatFlags & 4) != 0)
  {
    v69 = (mFormatFlags >> 7) & 0x3F;
    if ((v69 != 24 || v68 != 4) && !v69 && v68 == 2)
      goto LABEL_160;
  }
  if ((mFormatFlags & 0x20) != 0)
  {
    v71 = a2->mFormatFlags & 2;
    v70 = a2->mBytesPerPacket;
  }
  else
  {
    v70 = mBytesPerPacket / mChannelsPerFrame;
    if (mBytesPerPacket % mChannelsPerFrame)
      goto LABEL_122;
    v71 = a2->mFormatFlags & 2;
    LODWORD(v66) = a2->mFormatFlags & 1;
  }
  if (!v71 && 8 * v70 == mBitsPerChannel)
  {
    if ((_DWORD)v66)
    {
      v66 = 8068;
      if ((mFormatFlags & 0x1F84) == 0 && v70 == 4)
      {
LABEL_160:
        v72 = 1;
        goto LABEL_168;
      }
    }
  }
LABEL_122:
  v66 = 0;
  if (mFormatID == 1819304813 && mFramesPerPacket == 1 && mBytesPerFrame == mBytesPerPacket && v64 <= mBytesPerFrame)
  {
    v67 = 0;
    if (mChannelsPerFrame)
    {
      if ((mFormatFlags & 0x20) != 0
        || (v73 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame,
            mBytesPerPacket /= mChannelsPerFrame,
            v73))
      {
        v66 = 0;
        v67 = 1;
        if ((mFormatFlags & 2) == 0 && 8 * mBytesPerPacket == mBitsPerChannel)
        {
          if ((mFormatFlags & 1) != 0)
          {
            v66 = 0;
            v67 = (a2->mFormatFlags & 0x1F84) == 0;
          }
          else if ((mFormatFlags & 4) != 0)
          {
            v73 = (a2->mFormatFlags & 0x1F80) == 0xC00 && mBytesPerPacket == 4;
            v66 = v73;
          }
          else
          {
            v66 = 0;
          }
        }
      }
      else
      {
        v66 = 0;
        v67 = 0;
      }
    }
  }
  else
  {
    v67 = 0;
  }
  v72 = v66 & v67;
LABEL_168:
  v74 = v65 >> 3;
  if (v59 != 1819304813)
    goto LABEL_169;
  if (v61 != 1)
    goto LABEL_169;
  if (v62 != v60)
    goto LABEL_169;
  if (v74 > v62)
    goto LABEL_169;
  if (!v63)
    goto LABEL_169;
  v77 = a8->mBytesPerPacket;
  if ((v58 & 0x20) == 0)
  {
    v77 = v60 / v63;
    if (v60 % v63)
      goto LABEL_169;
  }
  v78 = a8->mFormatFlags & 1;
  if ((v58 & 2) == 0 && 8 * v77 == v65 && (v58 & 1) == 0 && (v58 & 4) != 0)
  {
    v79 = (v58 >> 7) & 0x3F;
    if ((v79 != 24 || v77 != 4) && !v79 && v77 == 2)
      goto LABEL_207;
  }
  if ((v58 & 0x20) != 0)
  {
    v81 = a8->mFormatFlags & 2;
    v80 = a8->mBytesPerPacket;
  }
  else
  {
    v80 = v60 / v63;
    if (v60 % v63)
      goto LABEL_169;
    v81 = a8->mFormatFlags & 2;
    v78 = a8->mFormatFlags & 1;
  }
  if (!v81 && 8 * v80 == v65 && v78 && (v58 & 0x1F84) == 0 && v80 == 4)
  {
LABEL_207:
    v82 = 1;
    goto LABEL_215;
  }
LABEL_169:
  v75 = 0;
  if (v59 == 1819304813 && v61 == 1 && v62 == v60 && v74 <= v62)
  {
    v76 = 0;
    if (v63)
    {
      if ((v58 & 0x20) != 0 || (v73 = v60 == v60 / v63 * v63, v60 /= v63, v73))
      {
        v75 = 0;
        v76 = 1;
        if ((v58 & 2) == 0 && 8 * v60 == v65)
        {
          if ((v58 & 1) != 0)
          {
            v75 = 0;
            v76 = (a8->mFormatFlags & 0x1F84) == 0;
          }
          else
          {
            v75 = (v58 & 4) != 0 && (a8->mFormatFlags & 0x1F80) == 0xC00 && v60 == 4;
          }
        }
      }
      else
      {
        v75 = 0;
        v76 = 0;
      }
    }
  }
  else
  {
    v76 = 0;
  }
  v82 = v75 && v76;
LABEL_215:
  LOBYTE(v161) = 0;
  VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_allow_multi_ch_ref"), 0, (float *)&v161, (unsigned __int8 *)v66);
  LOBYTE(v161) = v161 | (v158 == 1886745455);
  if (_os_feature_enabled_impl())
  {
    v85 = v161 | (v158 == 1885889645);
    LOBYTE(v161) = v85;
  }
  else
  {
    v85 = (char)v161;
  }
  if (!v85 && mChannelsPerFrame >= 9)
    v72 = 0;
  v160 = 0;
  VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, CFSTR("vp_allow_multi_ch_mic"), 0, (float *)&v160, v84);
  v160 |= v157 == 1886745449;
  if (!v160 && v63 >= 6)
    v82 = 0;
  if ((v72 & v82 & 1) == 0)
  {
    v86 = 1650879860;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_231;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 117;
    v87 = MEMORY[0x1E0C81028];
    v88 = "%25s:%-5d  unsupported stream format";
    goto LABEL_230;
  }
  if (mSampleRate == 0.0)
  {
    v86 = 1852008051;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_231;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 118;
    v87 = MEMORY[0x1E0C81028];
    v88 = "%25s:%-5d  unsupported Ref sample rate";
    goto LABEL_230;
  }
  if (v57 == 0.0)
  {
    v86 = 1852008051;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 119;
      v87 = MEMORY[0x1E0C81028];
      v88 = "%25s:%-5d  unsupported Mic sample rate";
LABEL_230:
      _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_ERROR, v88, buf, 0x12u);
      goto LABEL_231;
    }
    goto LABEL_231;
  }
  if (!a6 || !a7)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v104 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v105 = (*v104 ? *v104 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 123;
        _os_log_impl(&dword_1B5ED0000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to initialize - no reference ports", buf, 0x12u);
      }
    }
    v86 = *((_QWORD *)this + 1570);
    if (!v86)
      goto LABEL_231;
    if (v159[3437] || v159[3438])
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log((int *)v86, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 123, "InitializeHWInput", "failed to initialize - no reference ports");
    }
LABEL_302:
    v86 = 0;
    goto LABEL_231;
  }
  memset(buf, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(buf, a7, (uint64_t)&a7[a6], a6);
  v91 = (void *)*((_QWORD *)this + 292);
  if (v91)
  {
    *((_QWORD *)this + 293) = v91;
    operator delete(v91);
    *((_QWORD *)this + 292) = 0;
    *((_QWORD *)this + 293) = 0;
    *((_QWORD *)this + 294) = 0;
  }
  *((_OWORD *)this + 146) = *(_OWORD *)buf;
  *((_QWORD *)this + 294) = *(_QWORD *)&buf[16];
  if (a12 && a13)
  {
    memset(buf, 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(buf, a13, (uint64_t)&a13[a12], a12);
    v92 = *(void **)v151;
    if (*(_QWORD *)v151)
    {
      *((_QWORD *)this + 296) = v92;
      operator delete(v92);
      *(_QWORD *)v151 = 0;
      *((_QWORD *)v151 + 1) = 0;
      *((_QWORD *)v151 + 2) = 0;
    }
    *(_OWORD *)v151 = *(_OWORD *)buf;
    *((_QWORD *)this + 297) = *(_QWORD *)&buf[16];
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v93 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
    if (v93)
    {
      v94 = v93;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 142;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a6;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = a12;
        _os_log_impl(&dword_1B5ED0000, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> inNumRefPorts = %u  inNumMicPorts = %u ", buf, 0x1Eu);
      }
    }
    v95 = (int *)*((_QWORD *)this + 1570);
    if (v95 && (v159[3437] || v159[3438]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v95, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 142, "InitializeHWInput", "inNumRefPorts = %u  inNumMicPorts = %u ", a6, a12);
    }
    v96 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (*((_QWORD *)this + 293) != *((_QWORD *)this + 292))
    {
      v97 = 0;
      do
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v98 = (_QWORD *)v96[43];
        if (v98 && CALegacyLog::LogEnabled(5, v96[43], 0))
        {
          v99 = (*v98 ? *v98 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            v100 = a7[v97];
            CAX4CCString::CAX4CCString((CAX4CCString *)v163, v100);
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 146;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v97;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v100;
            *(_WORD *)&buf[34] = 2080;
            *(_QWORD *)&buf[36] = v163;
            _os_log_impl(&dword_1B5ED0000, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> refPortType %lu = %u = %s", buf, 0x2Cu);
          }
        }
        v101 = (int *)*((_QWORD *)this + 1570);
        if (v101 && (v159[3437] || v159[3438]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v102 = v96[43];
          v103 = a7[v97];
          CAX4CCString::CAX4CCString((CAX4CCString *)buf, v103);
          CALegacyLog::log(v101, 5, v102, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 146, "InitializeHWInput", "refPortType %lu = %u = %s", v97, v103, buf);
          v96 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
        }
        ++v97;
      }
      while (v97 < (uint64_t)(*((_QWORD *)this + 293) - *((_QWORD *)this + 292)) >> 2);
    }
    if (*((_QWORD *)this + 296) != *((_QWORD *)this + 295))
    {
      v108 = 0;
      do
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v109 = (_QWORD *)v96[43];
        if (v109 && CALegacyLog::LogEnabled(5, v96[43], 0))
        {
          v110 = (*v109 ? *v109 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
          {
            v111 = a13[v108];
            CAX4CCString::CAX4CCString((CAX4CCString *)v163, v111);
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 150;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v108;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v111;
            *(_WORD *)&buf[34] = 2080;
            *(_QWORD *)&buf[36] = v163;
            _os_log_impl(&dword_1B5ED0000, v110, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> micPortType %lu = %u = %s", buf, 0x2Cu);
          }
        }
        v112 = (int *)*((_QWORD *)this + 1570);
        if (v112 && (v159[3437] || v159[3438]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v113 = v96[43];
          v114 = a13[v108];
          CAX4CCString::CAX4CCString((CAX4CCString *)buf, v114);
          CALegacyLog::log(v112, 5, v113, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 150, "InitializeHWInput", "micPortType %lu = %u = %s", v108, v114, buf);
          v96 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
        }
        ++v108;
      }
      while (v108 < (uint64_t)(*((_QWORD *)this + 296) - *((_QWORD *)this + 295)) >> 2);
    }
    if (!v159[3717])
    {
      *((_DWORD *)this + 596) = 0;
      v115 = (int *)*((_QWORD *)this + 292);
      v116 = (unsigned int *)*v115;
      if (((_DWORD)v116 - 1885892674) <= 0x35
        && ((1 << (v116 - 66)) & 0x20000100000001) != 0)
      {
        VoiceProcessorV2::GetAndPrintPortSubtype(*((_DWORD *)this + 284), v116, (unsigned int *)this + 596);
        v115 = (int *)*((_QWORD *)this + 292);
      }
      *((_DWORD *)this + 597) = 0;
      GetAndPrintPortTypeProperty(0x6F757470u, *v115, *((_DWORD *)this + 284), 0x70657074u, "end point", (unsigned int *)this + 597);
    }
    v118 = *(_OWORD *)&a8->mSampleRate;
    v119 = *(_OWORD *)&a8->mBytesPerPacket;
    *((_QWORD *)this + 82) = *(_QWORD *)&a8->mBitsPerChannel;
    *((_OWORD *)this + 39) = v118;
    *((_OWORD *)this + 40) = v119;
    *((_DWORD *)this + 124) = a10;
    v120 = *(_OWORD *)&a2->mSampleRate;
    v121 = *(_OWORD *)&a2->mBytesPerPacket;
    *((_QWORD *)this + 72) = *(_QWORD *)&a2->mBitsPerChannel;
    *((_OWORD *)this + 34) = v120;
    *((_OWORD *)this + 35) = v121;
    *((_DWORD *)this + 122) = a4;
    if ((VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(this) & 1) != 0)
    {
      v122 = a2->mChannelsPerFrame;
      *(Float64 *)v163 = a2->mSampleRate;
      *(_OWORD *)&v163[8] = xmmword_1B6626900;
      *(_DWORD *)&v163[24] = 4;
      *(_DWORD *)&v163[28] = v122;
      v164 = 32;
      if (CAStreamBasicDescription::IsEqual((CAStreamBasicDescription *)v163, (const AudioStreamBasicDescription *)((char *)this + 584))&& *((_DWORD *)this + 123) == a4)
      {
        if (*v159)
        {
          if (*((_DWORD *)this + 121) == a4
            && CAStreamBasicDescription::IsEqual((VoiceProcessorV2 *)((char *)this + 328), (const AudioStreamBasicDescription *)((char *)this + 584)))
          {
            *v159 = 0;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v123 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
            if (v123)
            {
              v124 = v123;
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 199;
                _os_log_impl(&dword_1B5ED0000, v124, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ul-dl config no longer out of sync", buf, 0x12u);
              }
            }
            v125 = (int *)*((_QWORD *)this + 1570);
            if (v125 && (v159[3437] || v159[3438]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v125, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 199, "InitializeHWInput", "ul-dl config no longer out of sync");
            }
          }
          else
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v148 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v148)
            {
              v149 = v148;
              if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 201;
                _os_log_impl(&dword_1B5ED0000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ul-dl config still out of sync ?!", buf, 0x12u);
              }
            }
            v150 = (int *)*((_QWORD *)this + 1570);
            if (v150 && (v159[3437] || v159[3438]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v150, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 201, "InitializeHWInput", "ul-dl config still out of sync ?!");
            }
          }
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v127 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
        if (v127)
        {
          v128 = v127;
          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
          {
            CAFormatter::CAFormatter((CAFormatter *)v165, (const AudioStreamBasicDescription *)((char *)this + 584));
            v129 = v165[0];
            v130 = *((_DWORD *)this + 123);
            CAFormatter::CAFormatter((CAFormatter *)&v162, a8);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 190;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v129;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v130;
            *(_WORD *)&buf[34] = 2080;
            *(_QWORD *)&buf[36] = v162;
            v167 = 1024;
            LODWORD(v168) = a10;
            _os_log_impl(&dword_1B5ED0000, v128, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ul-dl config out of sync mHwRefASBD = %s, %d\t inMicASBD = %s %d", buf, 0x32u);
            if (v162)
              free(v162);
            if (v165[0])
              free(v165[0]);
          }
        }
        v131 = (int *)*((_QWORD *)this + 1570);
        if (v131 && (v159[3437] || v159[3438]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v132 = VPLogScope(void)::scope;
          CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 584));
          v133 = *(const char **)buf;
          v134 = *((_DWORD *)this + 123);
          CAFormatter::CAFormatter((CAFormatter *)v165, a8);
          CALegacyLog::log(v131, 5, v132, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 190, "InitializeHWInput", "ul-dl config out of sync mHwRefASBD = %s, %d\t inMicASBD = %s %d", v133, v134, (const char *)v165[0], a10);
          if (v165[0])
            free(v165[0]);
          if (*(_QWORD *)buf)
            free(*(void **)buf);
        }
        v135 = *(_OWORD *)&v163[16];
        *(_OWORD *)((char *)this + 584) = *(_OWORD *)v163;
        *(_OWORD *)((char *)this + 600) = v135;
        *((_QWORD *)this + 77) = v164;
        *((_DWORD *)this + 123) = a4;
        *v159 = 1;
      }
    }
    else
    {
      *((_DWORD *)this + 123) = *((_DWORD *)this + 122);
      v126 = *((_OWORD *)this + 35);
      *(_OWORD *)((char *)this + 584) = *((_OWORD *)this + 34);
      *(_OWORD *)((char *)this + 600) = v126;
      *((_QWORD *)this + 77) = *((_QWORD *)this + 72);
    }
    if (*((double *)this + 78) != *((double *)this + 73))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v136 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v136)
      {
        v137 = v136;
        if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
        {
          v138 = *((_QWORD *)this + 73);
          v139 = *((_QWORD *)this + 78);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 208;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v138;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v139;
          _os_log_impl(&dword_1B5ED0000, v137, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fs mismatched! REF=%fHz, MIC=%fHz", buf, 0x26u);
        }
      }
      v140 = (int *)*((_QWORD *)this + 1570);
      if (v140 && (v159[3437] || v159[3438]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v140, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 208, "InitializeHWInput", "fs mismatched! REF=%fHz, MIC=%fHz", *((double *)this + 73), *((double *)this + 78));
      }
    }
    *((_QWORD *)this + 263) = *((_QWORD *)this + 262);
    *((_QWORD *)this + 267) = *((_QWORD *)this + 266);
    applesauce::CF::ArrayRef::operator=((const void **)this + 269);
    v141 = (void *)*((_QWORD *)this + 273);
    if (v141)
    {
      free(v141);
      *((_QWORD *)this + 273) = 0;
    }
    *((_DWORD *)this + 548) = 0;
    v142 = (const void *)*((_QWORD *)this + 276);
    if (v142)
    {
      CFRelease(v142);
      *((_QWORD *)this + 276) = 0;
    }
    v143 = (const void *)*((_QWORD *)this + 277);
    if (v143)
    {
      CFRelease(v143);
      *((_QWORD *)this + 277) = 0;
    }
    *((_BYTE *)this + 474) = 1;
    if (*((_BYTE *)this + 475))
      v86 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
    else
      v86 = 0;
    if (v159[3356])
      fflush((FILE *)*MEMORY[0x1E0C80C10]);
    if (v159[3437] || v159[3438])
    {
      VoiceProcessorV2::PListWriteInitializeHwInputParameters(this);
      if (v159[3437])
        VoiceProcessorV2::LoopBackInitialize(this, v144, v145, v146, v147);
    }
    goto LABEL_231;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v106 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
  if (v106)
  {
    v107 = v106;
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 133;
      _os_log_impl(&dword_1B5ED0000, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to initialize - no microphone ports", buf, 0x12u);
    }
  }
  v86 = *((_QWORD *)this + 1570);
  if (v86)
  {
    if (v159[3437] || v159[3438])
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log((int *)v86, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 133, "InitializeHWInput", "failed to initialize - no microphone ports");
    }
    goto LABEL_302;
  }
  do
LABEL_231:
    v89 = __ldaxr(v21);
  while (__stlxr(v89 - 1, v21));
  if (v153)
    (*(void (**)(char *))(*(_QWORD *)v152 + 24))(v152);
  return v86;
}

void sub_1B64C37A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  unsigned int *v34;
  unsigned int v36;

  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 24))(a18);
  _Unwind_Resume(exception_object);
}

const void **applesauce::CF::ArrayRef::operator=(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t VoiceProcessorV2::InitializeOutput(VoiceProcessorV2 *this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  char *v12;
  int v13;
  const AudioStreamBasicDescription *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  _QWORD *v18;
  NSObject *v19;
  int *v20;
  __int128 v21;
  _DWORD *v22;
  AudioChannelLayoutTag mChannelLayoutTag;
  uint64_t mNumberChannelDescriptions;
  _DWORD *v25;
  AudioChannelDescription *mChannelDescriptions;
  BOOL v27;
  _QWORD *v29;
  NSObject *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  UInt32 v36;
  Float64 mSampleRate;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  const char *v44;
  unsigned int *v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  int *v52;
  unsigned int v53;
  unsigned int v55;
  int v56;
  __int128 v57;
  _DWORD *v58;
  unint64_t v59;
  void **v60;
  NSObject *v61;
  NSObject *v62;
  int *v63;
  NSObject *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int *v71;
  char *v72;
  int v73;
  _BYTE v74[12];
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  AudioStreamBasicDescription buf;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v12 = (char *)this + 15816;
  v72 = (char *)this + 2392;
  v13 = (*(uint64_t (**)(void))(*((_QWORD *)this + 299) + 16))();
  v15 = (unsigned int *)((char *)this + 2480);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v73 = v13;
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  v71 = a4;
  ++VoiceProcessorV2::InitializeOutput(AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &)::InitOutputCallCount;
  v17 = a6;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v18 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 247;
      HIWORD(buf.mBytesPerPacket) = 1024;
      buf.mFramesPerPacket = VoiceProcessorV2::InitializeOutput(AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &)::InitOutputCallCount;
      _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> call num %u", (uint8_t *)&buf, 0x18u);
    }
  }
  v20 = (int *)*((_QWORD *)this + 1570);
  if (v20 && (v12[81] || v12[82]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v20, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 247, "InitializeOutput", "call num %u", VoiceProcessorV2::InitializeOutput(AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &)::InitOutputCallCount);
  }
  if (*((_BYTE *)this + 475))
  {
    v21 = *(_OWORD *)&a2->mBytesPerPacket;
    *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&a2->mSampleRate;
    *(_OWORD *)&buf.mBytesPerPacket = v21;
    *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)&a2->mBitsPerChannel;
    if (CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&buf, (const AudioStreamBasicDescription *)((char *)this + 984), v14))
    {
      if (a3)
      {
        v22 = (_DWORD *)*((_QWORD *)this + 287);
        mChannelLayoutTag = a3->mChannelLayoutTag;
        if (a3->mChannelLayoutTag == v22[4])
        {
          if (mChannelLayoutTag == 0x10000)
          {
            if (a3->mChannelBitmap == v22[5])
              goto LABEL_134;
          }
          else
          {
            if (mChannelLayoutTag)
              goto LABEL_134;
            mNumberChannelDescriptions = a3->mNumberChannelDescriptions;
            if ((_DWORD)mNumberChannelDescriptions == v22[6])
            {
              if (!(_DWORD)mNumberChannelDescriptions)
                goto LABEL_134;
              v25 = v22 + 7;
              mChannelDescriptions = a3->mChannelDescriptions;
              while (mChannelDescriptions->mChannelLabel == *v25)
              {
                if (mChannelDescriptions->mChannelLabel == 100)
                {
                  v27 = *(_QWORD *)&mChannelDescriptions->mChannelLabel == *(_QWORD *)v25
                     && *(_QWORD *)mChannelDescriptions->mCoordinates == *((_QWORD *)v25 + 1);
                  if (!v27 || LODWORD(mChannelDescriptions->mCoordinates[2]) != (unint64_t)v25[4])
                    break;
                }
                v25 += 5;
                ++mChannelDescriptions;
                if (!--mNumberChannelDescriptions)
                  goto LABEL_134;
              }
            }
          }
        }
      }
    }
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v29 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    v30 = (*v29 ? *v29 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      CAFormatter::CAFormatter((CAFormatter *)v74, a2);
      LODWORD(buf.mSampleRate) = 136315650;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 254;
      HIWORD(buf.mBytesPerPacket) = 2080;
      *(_QWORD *)&buf.mFramesPerPacket = *(_QWORD *)v74;
      _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> ioOutASBD passed in = %s", (uint8_t *)&buf, 0x1Cu);
      if (*(_QWORD *)v74)
        free(*(void **)v74);
    }
  }
  v31 = (int *)*((_QWORD *)this + 1570);
  if (v31 && (v12[81] || v12[82]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v32 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)&buf, a2);
    CALegacyLog::log(v31, 4, v32, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 254, "InitializeOutput", "ioOutASBD passed in = %s", *(const char **)&buf.mSampleRate);
    if (*(_QWORD *)&buf.mSampleRate)
      free(*(void **)&buf.mSampleRate);
  }
  if (a2->mSampleRate == 0.0)
  {
    v33 = 1852008051;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 257;
      v34 = MEMORY[0x1E0C81028];
      v35 = "%25s:%-5d  unsupported Out sample rate";
LABEL_106:
      _os_log_impl(&dword_1B5ED0000, v34, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&buf, 0x12u);
      goto LABEL_107;
    }
    goto LABEL_107;
  }
  if (a2->mFormatID == 1819304813)
  {
    if (a2->mChannelsPerFrame != 1)
    {
      v36 = a2->mBitsPerChannel >> 3;
      a2->mBytesPerFrame = v36;
      a2->mChannelsPerFrame = 1;
      a2->mBytesPerPacket = v36;
      a2->mFramesPerPacket = 1;
    }
    if (a3)
    {
      if (LOWORD(a3->mChannelLayoutTag) != 1)
      {
        v33 = 593717363;
        v42 = v73;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_108;
        LODWORD(buf.mSampleRate) = 136315394;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 274;
        v43 = MEMORY[0x1E0C81028];
        v44 = "%25s:%-5d  number of channels mismatches";
LABEL_88:
        _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, v44, (uint8_t *)&buf, 0x12u);
        goto LABEL_108;
      }
      CAAudioChannelLayout::operator=((unsigned int **)this + 287, &a3->mChannelLayoutTag);
      goto LABEL_84;
    }
    mSampleRate = COERCE_DOUBLE(CAAudioChannelLayout::RefCountedLayout::operator new((CAAudioChannelLayout::RefCountedLayout *)0xC));
    **(_QWORD **)&mSampleRate = off_1E69EE240;
    *(_QWORD *)(*(_QWORD *)&mSampleRate + 8) = 0xC00000001;
    *(_QWORD *)(*(_QWORD *)&mSampleRate + 16) = 0;
    *(_DWORD *)(*(_QWORD *)&mSampleRate + 24) = 0;
    *(_DWORD *)(*(_QWORD *)&mSampleRate + 16) = 6553601;
    buf.mSampleRate = mSampleRate;
    v38 = (unsigned int *)*((_QWORD *)this + 287);
    if (v38 != *(unsigned int **)&mSampleRate)
    {
      if (v38)
      {
        v39 = v38 + 2;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
        mSampleRate = buf.mSampleRate;
        *((_QWORD *)this + 287) = *(_QWORD *)&buf.mSampleRate;
        if (mSampleRate == 0.0)
          goto LABEL_83;
      }
      else
      {
        *((Float64 *)this + 287) = mSampleRate;
      }
      v45 = (unsigned int *)(*(_QWORD *)&mSampleRate + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
LABEL_83:
    CAAudioChannelLayout::~CAAudioChannelLayout((unsigned int **)&buf);
LABEL_84:
    v47 = *(_OWORD *)&a2->mSampleRate;
    v48 = *(_OWORD *)&a2->mBytesPerPacket;
    *((_QWORD *)this + 127) = *(_QWORD *)&a2->mBitsPerChannel;
    *(_OWORD *)((char *)this + 984) = v47;
    *(_OWORD *)((char *)this + 1000) = v48;
    if (!*((_BYTE *)this + 474))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v50 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v51 = (*v50 ? *v50 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.mSampleRate) = 136315394;
          *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
          LOWORD(buf.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 289;
          _os_log_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: Initialize output called before Initialize hw input was called!", (uint8_t *)&buf, 0x12u);
        }
      }
      v52 = (int *)*((_QWORD *)this + 1570);
      if (v52 && (v12[81] || v12[82]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v52, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 289, "InitializeOutput", "ERROR: Initialize output called before Initialize hw input was called!");
      }
      v33 = 1768843636;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_107;
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 290;
      v34 = MEMORY[0x1E0C81028];
      v35 = "%25s:%-5d  Initialize output called before init hw was called";
      goto LABEL_106;
    }
    v33 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 240))(this);
    if ((_DWORD)v33)
    {
      v42 = v73;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_108;
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 284;
      v43 = MEMORY[0x1E0C81028];
      v44 = "%25s:%-5d  could not initialize EC/ES";
      goto LABEL_88;
    }
    *v71 = *((_DWORD *)this + 420);
    *a5 = *((_DWORD *)this + 421);
    *v17 = 0;
    if (!*((_QWORD *)this + 158))
    {
      LODWORD(v49) = *((_DWORD *)this + 124);
      v55 = vcvtpd_u64_f64(*((double *)this + 123) * (double)v49 / *((double *)this + 78));
      if (v55 <= *((_DWORD *)this + 420))
        v55 = *((_DWORD *)this + 420);
      if (v55 <= 0x1000)
        v56 = 4096;
      else
        v56 = v55;
      v57 = *(_OWORD *)((char *)this + 1000);
      *(_OWORD *)&buf.mSampleRate = *(_OWORD *)((char *)this + 984);
      *(_OWORD *)&buf.mBytesPerPacket = v57;
      *(_QWORD *)&buf.mBitsPerChannel = *((_QWORD *)this + 127);
      buf.mChannelsPerFrame = 2;
      myAllocABLDynamic(&buf, v56, (AudioBufferList **)this + 158);
      v58 = (_DWORD *)*((_QWORD *)this + 158);
      if (*v58)
      {
        v59 = 0;
        v60 = (void **)(v58 + 4);
        do
        {
          bzero(*v60, *((unsigned int *)v60 - 1));
          ++v59;
          v60 += 2;
        }
        while (v59 < *v58);
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v61 = CALog::LogObjIfEnabled(4, VPLogScope(void)::scope);
      if (v61)
      {
        v62 = v61;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v74 = 136315650;
          *(_QWORD *)&v74[4] = "vpInitializeUplink.cpp";
          v75 = 1024;
          v76 = 310;
          v77 = 1024;
          v78 = v56;
          _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> UL fade data size = %u", v74, 0x18u);
        }
      }
      v63 = (int *)*((_QWORD *)this + 1570);
      if (v63 && (v12[81] || v12[82]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v63, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 310, "InitializeOutput", "UL fade data size = %u", v56);
      }
    }
LABEL_134:
    *((_BYTE *)this + 475) = 1;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    if (VPLogScope(void)::scope && *(int *)(VPLogScope(void)::scope + 8) >= 6)
    {
      v64 = *(_QWORD *)VPLogScope(void)::scope ? *(NSObject **)VPLogScope(void)::scope : MEMORY[0x1E0C81028];
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        CAFormatter::CAFormatter((CAFormatter *)v74, a2);
        LODWORD(buf.mSampleRate) = 136315650;
        *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 316;
        HIWORD(buf.mBytesPerPacket) = 2080;
        *(_QWORD *)&buf.mFramesPerPacket = *(_QWORD *)v74;
        _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initialize output: ioOutASBD passed OUT = %s", (uint8_t *)&buf, 0x1Cu);
        if (*(_QWORD *)v74)
          free(*(void **)v74);
      }
    }
    v65 = (int *)*((_QWORD *)this + 1570);
    if (v65 && (v12[81] || v12[82]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v66 = VPLogScope(void)::scope;
      CAFormatter::CAFormatter((CAFormatter *)&buf, a2);
      CALegacyLog::log(v65, 6, v66, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 316, "InitializeOutput", "initialize output: ioOutASBD passed OUT = %s", *(const char **)&buf.mSampleRate);
      if (*(_QWORD *)&buf.mSampleRate)
        free(*(void **)&buf.mSampleRate);
    }
    if (v12[81] || v12[82])
    {
      VoiceProcessorV2::PListWriteInitializeOutputParameters(this);
      if (v12[81])
        VoiceProcessorV2::LoopBackInitialize(this, v67, v68, v69, v70);
    }
    v33 = 0;
    goto LABEL_107;
  }
  v33 = 1852008051;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 258;
    v34 = MEMORY[0x1E0C81028];
    v35 = "%25s:%-5d  unsupported out format";
    goto LABEL_106;
  }
LABEL_107:
  v42 = v73;
LABEL_108:
  if (*v12)
    fflush((FILE *)*MEMORY[0x1E0C80C10]);
  do
    v53 = __ldaxr(v15);
  while (__stlxr(v53 - 1, v15));
  if (v42)
    (*(void (**)(char *))(*(_QWORD *)v72 + 24))(v72);
  return v33;
}

void sub_1B64C4524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  unsigned int *v20;
  unsigned int v22;

  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::GetMaxOutputPacketInfo(VoiceProcessorV2 *this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  char *v12;
  char *v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  const void *v17;
  uint64_t v18;
  AudioStreamBasicDescription *v19;
  AudioChannelLayout *v20;
  int v21;
  _QWORD *v22;
  NSObject *v23;
  int *v24;
  AudioChannelLayout *v25;
  AudioStreamBasicDescription *v26;
  unsigned int v27;
  int *v29;
  char *v30;
  CFTypeRef cf;
  _BYTE buf[12];
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = (char *)this + 15897;
  v13 = (char *)this + 2392;
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 299) + 16))((char *)this + 2392);
  v15 = (unsigned int *)((char *)this + 2480);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  if (*((_BYTE *)this + 475))
  {
    *a4 = *((_DWORD *)this + 420);
    *a5 = *((_DWORD *)this + 421);
    *a6 = 0;
    if (*v12)
    {
      if (*((_QWORD *)this + 1884))
      {
        *(_QWORD *)buf = 0;
        VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
        v17 = *(const void **)buf;
        if (*(_QWORD *)buf)
        {
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&cf, 55);
          WriteItemToDictionary((__CFDictionary **)buf, &cf, 1, 4uLL, (const char *)this + 1680);
          if (cf)
            CFRelease(cf);
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&cf, 56);
          WriteItemToDictionary((__CFDictionary **)buf, &cf, 1, 4uLL, (const char *)this + 1684);
          if (cf)
            CFRelease(cf);
          CFRelease(v17);
        }
      }
    }
    v18 = 0;
  }
  else
  {
    v30 = v13;
    v19 = a2;
    v20 = a3;
    v21 = v14;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v22 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        v33 = 1024;
        v34 = 342;
        _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> GetMaxOutputPacketInfo : InitializeOutput hasn't been called yet!", buf, 0x12u);
      }
    }
    v24 = (int *)*((_QWORD *)this + 1570);
    v14 = v21;
    v25 = v20;
    v26 = v19;
    v13 = v30;
    if (v24 && (*v12 || v12[1]))
    {
      if (VPLogScope(void)::once != -1)
      {
        v29 = (int *)*((_QWORD *)this + 1570);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v24 = v29;
      }
      CALegacyLog::log(v24, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 342, "GetMaxOutputPacketInfo", "GetMaxOutputPacketInfo : InitializeOutput hasn't been called yet!", v30);
    }
    v18 = (*(uint64_t (**)(VoiceProcessorV2 *, AudioStreamBasicDescription *, AudioChannelLayout *, unsigned int *, unsigned int *, unsigned int *))(*(_QWORD *)this + 24))(this, v26, v25, a4, a5, a6);
  }
  do
    v27 = __ldaxr(v15);
  while (__stlxr(v27 - 1, v15));
  if (v14)
    (*(void (**)(char *))(*(_QWORD *)v13 + 24))(v13);
  return v18;
}

void sub_1B64C48DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *(_QWORD **)(a1 + 8);
      v6 = *(_QWORD **)a1;
      if (v5 != v4)
      {
        do
        {
          v7 = *--v5;
          *v5 = 0;
          if (v7)
            std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
        }
        while (v5 != v4);
        v6 = *(_QWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v6);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t VoiceProcessorV2::Initialize(VoiceProcessorV2 *this)
{
  CADeprecated::CAMutex *v2;
  unsigned int **v3;
  int32x2_t v4;
  int32x2_t v5;
  uint8x8_t v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  float v10;
  double v11;
  unsigned int v12;
  double v13;
  char v14;
  _QWORD *v15;
  NSObject *v16;
  int *v17;
  double v18;
  double v19;
  unint64_t v20;
  _DWORD *v21;
  float v22;
  NSObject *v23;
  NSObject *v24;
  int *v25;
  float v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  double v30;
  double v31;
  int v32;
  double v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const AudioStreamBasicDescription *v42;
  _QWORD *v43;
  NSObject *v44;
  int *v45;
  uint64_t v46;
  _QWORD *v47;
  NSObject *v48;
  int *v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  int *v53;
  uint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  VoiceProcessorV2 *v63;
  uint8x8_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  double *v70;
  unsigned int v71;
  VoiceProcessorV2 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  VoiceProcessorV2 **v79;
  double *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  double mSampleRate;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned __int8 *v105;
  NSObject *v106;
  const char *v107;
  uint64_t v108;
  _QWORD *v109;
  NSObject *v110;
  int *v111;
  int v112;
  unsigned int NextFFTFriendlyBlkSz;
  _QWORD *v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  _QWORD *v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  _QWORD *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  VoiceProcessorV2 *v129;
  unsigned int v130;
  _QWORD *v131;
  NSObject *v132;
  int *v133;
  uint64_t v134;
  VoiceProcessorV2 *v135;
  _DWORD *v136;
  unint64_t v137;
  void **v138;
  uint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  size_t v143;
  void *v144;
  BOOL v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  VoiceProcessorV2 *v150;
  unint64_t v151;
  unint64_t v152;
  AudioObjectID v153;
  OSStatus PropertyData;
  _QWORD *v155;
  NSObject *v156;
  int *v157;
  AudioObjectID v158;
  OSStatus v159;
  _QWORD *v160;
  NSObject *v161;
  int *v162;
  _QWORD *v163;
  NSObject *v164;
  int v165;
  int *v166;
  _QWORD *v167;
  NSObject *v168;
  int v169;
  int *v170;
  unsigned int v171;
  float v172;
  unsigned int v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  VPTimeFreqConverter *v177;
  VPTimeFreqConverter *v178;
  VPTimeFreqConverter *v179;
  VPTimeFreqConverter *v180;
  VPTimeFreqConverter *v181;
  VPTimeFreqConverter *v182;
  VPTimeFreqConverter *v183;
  VPTimeFreqConverter *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  int *v188;
  int v189;
  int v190;
  _QWORD *v191;
  NSObject *v192;
  int *v193;
  _QWORD *v194;
  NSObject *v195;
  int *v196;
  uint64_t i;
  uint64_t v198;
  int *v199;
  int v200;
  const char *v201;
  char *v202;
  OpaqueAudioComponentInstance *v203;
  const void **v204;
  _QWORD *v205;
  NSObject *v206;
  const void *v207;
  const char *v208;
  const char *v209;
  int *v210;
  const char *v211;
  const char *v212;
  _DWORD *v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  _QWORD *v217;
  NSObject *v218;
  float v219;
  int *v220;
  uint64_t v221;
  _QWORD *v222;
  NSObject *v223;
  uint64_t v224;
  int *v225;
  _QWORD *v226;
  NSObject *v227;
  int *v228;
  float *v229;
  AudioObjectID v230;
  OSStatus v231;
  _QWORD *v232;
  NSObject *v233;
  int *v234;
  _DWORD *v235;
  AudioObjectID v236;
  OSStatus v237;
  _QWORD *v238;
  NSObject *v239;
  int *v240;
  _DWORD *v241;
  AudioObjectID v242;
  OSStatus v243;
  _QWORD *v244;
  NSObject *v245;
  int *v246;
  _QWORD *v247;
  NSObject *v248;
  int v249;
  int *v250;
  _QWORD *v251;
  NSObject *v252;
  int v253;
  int *v254;
  int v255;
  _QWORD *v256;
  NSObject *v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int *v264;
  NSObject *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int *v274;
  _QWORD *v275;
  NSObject *v276;
  double v277;
  int *v278;
  int v279;
  int v280;
  _QWORD *v281;
  NSObject *v282;
  int v283;
  int *v284;
  _QWORD *v285;
  NSObject *v286;
  int v287;
  int *v288;
  _QWORD *v289;
  NSObject *v290;
  double v291;
  int v292;
  int *v293;
  double v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  BOOL v300;
  unsigned int v301;
  _QWORD *v302;
  NSObject *v303;
  int v304;
  double v305;
  int v306;
  int v307;
  int *v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  void *v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  int v322;
  void *v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  void *v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int *v336;
  unint64_t v337;
  void **v338;
  _QWORD *v339;
  NSObject *v340;
  double v341;
  int *v342;
  int v343;
  int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  unint64_t v349;
  const void **v350;
  const void *v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  unint64_t v364;
  const void **v365;
  const void *v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  float v374;
  float v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t v379;
  VoiceProcessorV2 *v380;
  uint64_t v381;
  __int128 v382;
  double v383;
  unsigned int ExpectedNumberOfOutputFrames;
  unint64_t v385;
  unsigned int v386;
  unsigned int v387;
  unint64_t v388;
  unsigned int v389;
  CA::AudioSampleRateConverter **v390;
  unsigned int v391;
  unint64_t v392;
  unsigned int v393;
  _QWORD *v394;
  NSObject *v395;
  double v396;
  Float64 v397;
  Float64 v398;
  int *v399;
  _QWORD *v400;
  NSObject *v401;
  int *v402;
  _QWORD *v403;
  NSObject *v404;
  int *v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  double v415;
  float v416;
  double v417;
  unsigned int v418;
  _QWORD *v419;
  NSObject *v420;
  Float64 v421;
  int *v422;
  int v423;
  unsigned int v424;
  int v425;
  void *v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  double v433;
  double v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  double v439;
  OpaqueAudioComponentInstance *v440;
  double v441;
  double v442;
  _QWORD *v443;
  NSObject *v444;
  int *v445;
  int v446;
  VoiceProcessorV2 *v447;
  const __CFString *v448;
  CFTypeID v449;
  const void *v450;
  const __CFString *v451;
  CFTypeID v452;
  const void *v453;
  _QWORD *v454;
  NSObject *v455;
  int v456;
  int v457;
  int *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  __int128 v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  CASmartPreferences *v475;
  float v476;
  _QWORD *v477;
  uint64_t v478;
  _QWORD *v479;
  VoiceProcessorV2 **v480;
  uint64_t v481;
  _BYTE *v482;
  _QWORD *v483;
  VoiceProcessorV2 **v484;
  uint64_t v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  float v489;
  BOOL v490;
  VoiceProcessorV2 *v491;
  _QWORD *v492;
  NSObject *v493;
  double v494;
  int *v495;
  uint64_t *v496;
  uint64_t *v497;
  uint64_t *j;
  _QWORD *v499;
  NSObject *v500;
  int *v501;
  NSObject *global_queue;
  NSObject *v503;
  const void *v504;
  uint64_t v505;
  void *v506;
  _QWORD *v507;
  _DWORD *v508;
  unint64_t ShouldUseOptimizedBlockSizeForFacePlant;
  double v511;
  float v512;
  float v513;
  float v515;
  unsigned int v516;
  float v517;
  int k;
  float v519;
  float v520;
  BOOL v521;
  unsigned int v522;
  std::bad_alloc *v523;
  std::bad_alloc *v524;
  std::bad_alloc *exception;
  std::bad_alloc *v526;
  _DWORD *v527;
  _DWORD *v528;
  uint64_t v529;
  AudioStreamBasicDescription *v530;
  AudioStreamBasicDescription *v531;
  AudioStreamBasicDescription *v532;
  AudioStreamBasicDescription *v533;
  AudioStreamBasicDescription *v534;
  AudioStreamBasicDescription *v535;
  uint64_t v536;
  unsigned int **v537;
  AudioStreamBasicDescription *v538;
  const AudioStreamBasicDescription *v539;
  char *v540;
  VoiceProcessorV2 *v541;
  UInt32 ioDataSize[4];
  __int128 v543;
  uint64_t v544;
  float __A;
  UInt32 v546[2];
  _BYTE buf[50];
  __int128 v548;
  _QWORD outData[3];
  _QWORD *v550;
  VoiceProcessorV2 *v551;
  char *v552;
  unint64_t v553;
  VoiceProcessorV2 **v554;
  uint64_t v555;

  v555 = *MEMORY[0x1E0C80C00];
  v2 = (VoiceProcessorV2 *)((char *)this + 2576);
  CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
  *((_DWORD *)this + 3112) = 0;
  CADeprecated::CAMutex::Unlock(v2);
  *((_DWORD *)this + 3113) = 0;
  v3 = (unsigned int **)((char *)this + 2296);
  CAAudioChannelLayout::operator=((unsigned int **)this + 287, 0);
  v4.i32[0] = *((_DWORD *)this + 100);
  v4.i32[1] = *((_DWORD *)this + 112);
  v5 = vceqz_s32(v4);
  *((int32x2_t *)this + 51) = vsub_s32((int32x2_t)vbic_s8((int8x8_t)vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)v4))), (int8x8_t)v5), v5);
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)this + 101));
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.i32[0];
  if (!*((_DWORD *)this + 101))
    v7 = 1;
  *((_DWORD *)this + 104) = v7;
  v541 = this;
  if (VoiceProcessorV2::ShouldInteractWithControlCenter(this))
  {
    v551 = this;
    v8 = atomic_load((unint64_t *)this + 2066);
    if (v8 != -1)
    {
      *(_QWORD *)buf = &v551;
      *(_QWORD *)ioDataSize = buf;
      std::__call_once((std::once_flag::_State_type *)this + 2066, ioDataSize, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::Initialize(void)::$_0 &&>>);
    }
  }
  (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 560))(this);
  v540 = (char *)this + 15133;
  if (!*((_BYTE *)this + 16177) || (v10 = *((float *)this + 4053), v10 == 0.0))
  {
    if (!*((_BYTE *)this + 15897)
      || (LOBYTE(ioDataSize[0]) = 0,
          *(_DWORD *)buf = 0,
          VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_epio_samplerate"), (const __CFString *)2, buf, (BOOL *)ioDataSize, v9), !LOBYTE(ioDataSize[0]))|| (v10 = *(float *)buf, *(float *)buf == 0.0))
    {
      v11 = *((double *)this + 123);
      v12 = *((_DWORD *)this + 19);
      if (v12 - 5 <= 1)
      {
        v13 = COERCE_DOUBLE(GetVPPreferredClientSampleRate(*((_DWORD *)this + 17), v12));
        if (v14)
          v11 = v13;
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v15 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v16 = (*v15 ? *v15 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 489;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v11;
          _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> preferredClientSampleRate: %g", buf, 0x1Cu);
        }
      }
      v17 = (int *)*((_QWORD *)this + 1570);
      if (v17 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 489, "CalcEpIoSampleRate", "preferredClientSampleRate: %g", v11);
      }
      v18 = *((double *)this + 78);
      v19 = 32000.0;
      HIDWORD(v20) = 1088784512;
      if (v18 == 44100.0 && *((double *)this + 123) == 44100.0)
      {
        LODWORD(v20) = *((_DWORD *)this + 124);
        if (fmod((double)v20 * 0.5, 1.0) == 0.0)
          v19 = 22050.0;
      }
      if (v18 == 48000.0 && *((_DWORD *)this + 19) == 1 && *((double *)this + 123) == 48000.0)
      {
        v21 = (_DWORD *)*((_QWORD *)this + 295);
        if (v21 != *((_DWORD **)this + 296) && *v21 != 1886614633)
        {
          v22 = *((float *)this + 550);
          if (v22 == 0.0)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v23 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v23)
            {
              v24 = v23;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 516;
                _os_log_impl(&dword_1B5ED0000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> calcasbds: mPrimaryCodecSampleRate should be used to determin epio sample rate, but it is zero! setting the max epio sample rate to 16000", buf, 0x12u);
              }
            }
            v25 = (int *)*((_QWORD *)this + 1570);
            v19 = 16000.0;
            if (v25 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v25, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 516, "CalcEpIoSampleRate", "calcasbds: mPrimaryCodecSampleRate should be used to determin epio sample rate, but it is zero! setting the max epio sample rate to 16000");
            }
          }
          else
          {
            v19 = fmax(v22, 16000.0);
          }
        }
      }
      v26 = *((float *)this + 550);
      if (v26 > 0.0
        && v26 <= 16000.0
        && (*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 232))(this)
        && v19 > 16000.0)
      {
        v19 = 16000.0;
      }
      *(_DWORD *)&buf[8] = 1186693120;
      *(_QWORD *)buf = 0x467A000045FA0000;
      v27 = *((_DWORD *)this + 18);
      if (v27 != 52 && v27 != 49)
        goto LABEL_65;
      v28 = 0;
      v29 = &buf[12];
      while (v11 != *(float *)&buf[4 * v28])
      {
        if (++v28 == 3)
          goto LABEL_63;
      }
      v29 = &buf[4 * v28];
LABEL_63:
      if (v29 - buf == 12 && !*((_DWORD *)this + 19))
      {
        v10 = 24000.0;
      }
      else
      {
LABEL_65:
        v30 = *((double *)this + 78);
        if (v30 >= v11)
          v30 = v11;
        if (v19 >= v30)
          v31 = v30;
        else
          v31 = v19;
        if (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((_BYTE *)this + 16544) & 4) != 0)
          v31 = 24000.0;
        v10 = v31;
      }
    }
  }
  v32 = *((_DWORD *)this + 102);
  v33 = v10;
  *((double *)this + 98) = v33;
  *(_OWORD *)((char *)this + 792) = xmmword_1B6626900;
  *((_DWORD *)this + 202) = 4;
  *((_DWORD *)this + 203) = v32;
  *((_QWORD *)this + 102) = 32;
  v34 = *((_DWORD *)this + 103);
  *((double *)this + 103) = v33;
  *((_OWORD *)this + 52) = xmmword_1B6626900;
  *((_DWORD *)this + 212) = 4;
  *((_DWORD *)this + 213) = v34;
  *((_QWORD *)this + 107) = 32;
  v35 = *((_DWORD *)this + 104);
  *((double *)this + 113) = v33;
  *((_OWORD *)this + 57) = xmmword_1B6626900;
  *((_DWORD *)this + 232) = 4;
  *((_DWORD *)this + 233) = v35;
  *((_QWORD *)this + 117) = 32;
  v36 = *((_OWORD *)this + 49);
  v37 = *((_OWORD *)this + 50);
  *((_QWORD *)this + 92) = *((_QWORD *)this + 102);
  *((_OWORD *)this + 44) = v36;
  *((_OWORD *)this + 45) = v37;
  *((_QWORD *)this + 88) = *((_QWORD *)this + 73);
  v38 = *(_OWORD *)((char *)this + 824);
  v39 = *(_OWORD *)((char *)this + 840);
  v535 = (AudioStreamBasicDescription *)((char *)this + 824);
  *((_QWORD *)this + 97) = *((_QWORD *)this + 107);
  *(_OWORD *)((char *)this + 744) = v38;
  *(_OWORD *)((char *)this + 760) = v39;
  v539 = (const AudioStreamBasicDescription *)((char *)this + 744);
  *((_QWORD *)this + 93) = *((_QWORD *)this + 78);
  v40 = *(_OWORD *)((char *)this + 984);
  v41 = *(_OWORD *)((char *)this + 1000);
  v532 = (AudioStreamBasicDescription *)((char *)this + 984);
  *((_QWORD *)this + 122) = *((_QWORD *)this + 127);
  *((_OWORD *)this + 59) = v40;
  *((_OWORD *)this + 60) = v41;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v42 = (const AudioStreamBasicDescription *)((char *)this + 784);
  v43 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v44 = (*v43 ? *v43 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v42);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 594;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = *(_QWORD *)ioDataSize;
      _os_log_impl(&dword_1B5ED0000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> calcasbds: mEpRefASBD format: %s", buf, 0x1Cu);
      if (*(_QWORD *)ioDataSize)
        free(*(void **)ioDataSize);
    }
  }
  v45 = (int *)*((_QWORD *)this + 1570);
  if (v45 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v46 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v42);
    CALegacyLog::log(v45, 5, v46, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 594, "CalcASBDs", "calcasbds: mEpRefASBD format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v47 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v48 = (*v47 ? *v47 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v535);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 595;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = *(_QWORD *)ioDataSize;
      _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcasbds: mEpMicASBD (ignore the # of channels) format: %s", buf, 0x1Cu);
      if (*(_QWORD *)ioDataSize)
        free(*(void **)ioDataSize);
    }
  }
  v49 = (int *)*((_QWORD *)this + 1570);
  if (v49 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v50 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v535);
    CALegacyLog::log(v49, 3, v50, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 595, "CalcASBDs", "calcasbds: mEpMicASBD (ignore the # of channels) format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v538 = (AudioStreamBasicDescription *)((char *)this + 904);
  v51 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v52 = (*v51 ? *v51 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v538);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 596;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = *(_QWORD *)ioDataSize;
      _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcasbds: mEpOutASBD format: %s", buf, 0x1Cu);
      if (*(_QWORD *)ioDataSize)
        free(*(void **)ioDataSize);
    }
  }
  v53 = (int *)*((_QWORD *)this + 1570);
  if (v53 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v54 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v538);
    CALegacyLog::log(v53, 3, v54, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 596, "CalcASBDs", "calcasbds: mEpOutASBD format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  v533 = (AudioStreamBasicDescription *)((char *)this + 944);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v55 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    v56 = (*v55 ? *v55 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v533);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 597;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = *(_QWORD *)ioDataSize;
      _os_log_impl(&dword_1B5ED0000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcasbds: mUsOutASBD format: %s", buf, 0x1Cu);
      if (*(_QWORD *)ioDataSize)
        free(*(void **)ioDataSize);
    }
  }
  v57 = (int *)*((_QWORD *)this + 1570);
  if (v57 && (*((_BYTE *)this + 15897) || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v58 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v533);
    CALegacyLog::log(v57, 3, v58, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 597, "CalcASBDs", "calcasbds: mUsOutASBD format: %s", *(const char **)buf);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
  }
  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)this + 1997);
  v59 = *((_QWORD *)this + 2004);
  v60 = *((_QWORD *)this + 2003);
  while (v59 != v60)
  {
    v59 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v59);
  }
  *((_QWORD *)v541 + 2004) = v60;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)v541 + 4616);
  VoiceProcessorV2::InitializeVPParams(v541);
  v63 = v541;
  if ((*((_BYTE *)v541 + 4659) & 8) != 0)
  {
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)v541 + 384))(v541);
    v63 = v541;
  }
  if ((*((_BYTE *)v63 + 4664) & 0x40) != 0)
  {
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)v63 + 392))(v63);
    v63 = v541;
  }
  v64 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v63 + 112));
  v64.i16[0] = vaddlv_u8(v64);
  v65 = v64.i32[0];
  if (!*((_DWORD *)v63 + 112))
    v65 = 1;
  *((_DWORD *)v63 + 103) = v65;
  *((_DWORD *)v63 + 213) = v65;
  *((_DWORD *)v63 + 193) = v65;
  v66 = (uint64_t)v63 + 1928;
  if (*((_BYTE *)v63 + 1952))
  {
    *(_QWORD *)buf = (char *)v63 + 1928;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)v63 + 1952) = 0;
  }
  v67 = (uint64_t)v63 + 1960;
  if (*((_BYTE *)v63 + 1984))
  {
    *(_QWORD *)buf = (char *)v63 + 1960;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)v63 + 1984) = 0;
  }
  v68 = (uint64_t)v63 + 1368;
  if (*((_BYTE *)v63 + 1392))
  {
    *(_QWORD *)buf = (char *)v63 + 1368;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)v63 + 1392) = 0;
  }
  v534 = (AudioStreamBasicDescription *)((char *)v63 + 584);
  v69 = *((_QWORD *)v63 + 249);
  *((_QWORD *)v63 + 249) = 0;
  if (v69)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  if (v534->mSampleRate != v42->mSampleRate)
  {
    v536 = (uint64_t)v63 + 1368;
    memset(ioDataSize, 0, sizeof(ioDataSize));
    *(_QWORD *)&v543 = 0;
    v70 = (double *)v541;
    if (*((_DWORD *)v541 + 203))
    {
      v71 = 0;
      while (1)
      {
        VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)&v551, v70[73], v70[98], (VoiceProcessorV2 *)v70, 1, v61, v62);
        v72 = v551;
        if (!v551)
          break;
        v73 = *(_QWORD *)&ioDataSize[2];
        if (*(_QWORD *)&ioDataSize[2] >= (unint64_t)v543)
        {
          v75 = (uint64_t)(*(_QWORD *)&ioDataSize[2] - *(_QWORD *)ioDataSize) >> 3;
          if ((unint64_t)(v75 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v76 = (uint64_t)(v543 - *(_QWORD *)ioDataSize) >> 2;
          if (v76 <= v75 + 1)
            v76 = v75 + 1;
          if ((_QWORD)v543 - *(_QWORD *)ioDataSize >= 0x7FFFFFFFFFFFFFF8uLL)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v76;
          *(_QWORD *)&buf[32] = &v543;
          if (v77)
            v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v77);
          else
            v78 = 0;
          v79 = (VoiceProcessorV2 **)(v77 + 8 * v75);
          *(_QWORD *)buf = v77;
          *(_QWORD *)&buf[8] = v79;
          *(_QWORD *)&buf[24] = v77 + 8 * v78;
          v551 = 0;
          *v79 = v72;
          *(_QWORD *)&buf[16] = v79 + 1;
          std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(ioDataSize, buf);
          v74 = *(_QWORD *)&ioDataSize[2];
          std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          **(_QWORD **)&ioDataSize[2] = v551;
          v74 = v73 + 8;
        }
        *(_QWORD *)&ioDataSize[2] = v74;
        ++v71;
        v70 = (double *)v541;
        if (v71 >= *((_DWORD *)v541 + 203))
          goto LABEL_176;
      }
      v101 = 1651532146;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 714;
        _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ERROR: can't create ref src", buf, 0x12u);
      }
      *(_QWORD *)buf = ioDataSize;
      std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v68 = v536;
      goto LABEL_237;
    }
LABEL_176:
    std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(v66, (uint64_t)ioDataSize);
    *(_QWORD *)buf = ioDataSize;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v68 = v536;
  }
  v531 = (AudioStreamBasicDescription *)((char *)v541 + 624);
  if (*((double *)v541 + 78) != v535->mSampleRate)
  {
    v537 = v3;
    memset(ioDataSize, 0, sizeof(ioDataSize));
    *(_QWORD *)&v543 = 0;
    v551 = 0;
    v552 = 0;
    v553 = 0;
    v80 = (double *)v541;
    if (*((_DWORD *)v541 + 213))
    {
      v81 = 0;
      while (1)
      {
        VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)outData, v80[78], v80[103], (VoiceProcessorV2 *)v80, 1, v61, v62);
        v84 = outData[0];
        if (!outData[0])
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_236;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 728;
          v106 = MEMORY[0x1E0C81028];
          v107 = "%25s:%-5d  ERROR: can't create mic src";
          goto LABEL_235;
        }
        v85 = *(_QWORD *)&ioDataSize[2];
        if (*(_QWORD *)&ioDataSize[2] >= (unint64_t)v543)
        {
          v87 = (uint64_t)(*(_QWORD *)&ioDataSize[2] - *(_QWORD *)ioDataSize) >> 3;
          if ((unint64_t)(v87 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v88 = (uint64_t)(v543 - *(_QWORD *)ioDataSize) >> 2;
          if (v88 <= v87 + 1)
            v88 = v87 + 1;
          v89 = (char *)((_QWORD)v543 - *(_QWORD *)ioDataSize >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v88);
          *(_QWORD *)&buf[32] = &v543;
          if (v89)
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>((unint64_t)v89);
          else
            v90 = 0;
          v91 = &v89[8 * v87];
          *(_QWORD *)buf = v89;
          *(_QWORD *)&buf[8] = v91;
          *(_QWORD *)&buf[24] = &v89[8 * v90];
          outData[0] = 0;
          *(_QWORD *)v91 = v84;
          *(_QWORD *)&buf[16] = v91 + 8;
          std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(ioDataSize, buf);
          v86 = *(_QWORD *)&ioDataSize[2];
          std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          outData[0] = 0;
          **(_QWORD **)&ioDataSize[2] = v84;
          v86 = v85 + 8;
        }
        *(_QWORD *)&ioDataSize[2] = v86;
        VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)v546, *((double *)v541 + 78), *((double *)v541 + 103), v541, 1, v82, v83);
        v92 = *(_QWORD *)v546;
        if (!*(_QWORD *)v546)
          break;
        v93 = v552;
        if ((unint64_t)v552 >= v553)
        {
          v95 = (v552 - (char *)v551) >> 3;
          if ((unint64_t)(v95 + 1) >> 61)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v96 = (uint64_t)(v553 - (_QWORD)v551) >> 2;
          if (v96 <= v95 + 1)
            v96 = v95 + 1;
          if (v553 - (unint64_t)v551 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v96;
          *(_QWORD *)&buf[32] = &v553;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v97);
          else
            v98 = 0;
          v99 = (_QWORD *)(v97 + 8 * v95);
          *(_QWORD *)buf = v97;
          *(_QWORD *)&buf[8] = v99;
          *(_QWORD *)&buf[24] = v97 + 8 * v98;
          *(_QWORD *)v546 = 0;
          *v99 = v92;
          *(_QWORD *)&buf[16] = v99 + 1;
          std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(&v551, buf);
          v94 = v552;
          std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *(_QWORD *)v546 = 0;
          *(_QWORD *)v552 = v92;
          v94 = v93 + 8;
        }
        v552 = v94;
        ++v81;
        v80 = (double *)v541;
        if (v81 >= *((_DWORD *)v541 + 213))
          goto LABEL_207;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_236;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 732;
      v106 = MEMORY[0x1E0C81028];
      v107 = "%25s:%-5d  ERROR: can't create mic clip src";
LABEL_235:
      _os_log_impl(&dword_1B5ED0000, v106, OS_LOG_TYPE_ERROR, v107, buf, 0x12u);
LABEL_236:
      v101 = 1651532146;
      *(_QWORD *)buf = &v551;
      std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = ioDataSize;
      std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_237;
    }
LABEL_207:
    std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(v67, (uint64_t)ioDataSize);
    std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(v68, (uint64_t)&v551);
    *(_QWORD *)buf = &v551;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = ioDataSize;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v3 = v537;
  }
  mSampleRate = v532->mSampleRate;
  if (v538->mSampleRate == v532->mSampleRate)
    goto LABEL_212;
  VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)ioDataSize, v538->mSampleRate, mSampleRate, v541, 1, v61, v62);
  if (*(_QWORD *)ioDataSize)
  {
    v69 = *((_QWORD *)v541 + 249);
    *((_QWORD *)v541 + 249) = *(_QWORD *)ioDataSize;
    if (v69)
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
LABEL_212:
    v101 = 0;
    goto LABEL_213;
  }
  v101 = 1651532146;
  v69 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)v69)
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 743;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ERROR: can't create output src", buf, 0x12u);
  }
LABEL_213:
  if (!(_DWORD)v101)
  {
    v102 = *((_DWORD *)v541 + 123);
    *((_DWORD *)v541 + 125) = v102;
    v103 = *((_DWORD *)v541 + 124);
    *((_DWORD *)v541 + 126) = v103;
    if (*((_BYTE *)v541 + 1952))
    {
      mSampleRate = *((double *)v541 + 73);
      *((_DWORD *)v541 + 125) = vcvtpd_u64_f64(*((double *)v541 + 98) * (float)v102 / mSampleRate);
    }
    if (*((_BYTE *)v541 + 1984))
    {
      mSampleRate = *((double *)v541 + 78);
      *((_DWORD *)v541 + 126) = vcvtpd_u64_f64(*((double *)v541 + 103) * (float)v103 / mSampleRate);
    }
    if (v540[1044])
    {
      v104 = *((_DWORD *)v541 + 4052);
      if (v104)
        goto LABEL_263;
    }
    if (v540[764])
    {
      LOBYTE(v551) = 0;
      *(_DWORD *)buf = 0;
      VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_epio_blksz"), (const __CFString *)1, buf, (BOOL *)&v551, v62);
      if ((_BYTE)v551)
      {
        v104 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_263;
      }
      LOBYTE(outData[0]) = 0;
      ioDataSize[0] = 0;
      VoiceProcessorV2::ReadDefaultsOverride(CFSTR("vp_epio_blksz_ms"), (const __CFString *)2, (BOOL *)ioDataSize, (BOOL *)outData, v105);
      if (LOBYTE(outData[0]))
      {
        if (*(float *)ioDataSize != 0.0)
        {
          v104 = (v535->mSampleRate * *(float *)ioDataSize * 0.001);
LABEL_263:
          *((_DWORD *)v541 + 127) = v104;
          *((_DWORD *)v541 + 131) = v104;
          if (*((_QWORD *)v541 + 249))
            *((_DWORD *)v541 + 131) = vcvtpd_u64_f64(*((double *)v541 + 123) * (float)v104 / *((double *)v541 + 113));
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v114 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v115 = (*v114 ? *v114 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
            {
              v116 = *((unsigned int *)v541 + 123);
              v117 = *((unsigned int *)v541 + 124);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 568;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v116;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v117;
              _os_log_impl(&dword_1B5ED0000, v115, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcblkzsizes: mHwRefBlkSz = %lu, mHwMicBlkSz = %lu", buf, 0x26u);
            }
          }
          v118 = (int *)*((_QWORD *)v541 + 1570);
          if (v118 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v118, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 568, "CalcBlkSzs", "calcblkzsizes: mHwRefBlkSz = %lu, mHwMicBlkSz = %lu", *((unsigned int *)v541 + 123), *((unsigned int *)v541 + 124));
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v119 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v120 = (*v119 ? *v119 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
            {
              v121 = *((unsigned int *)v541 + 125);
              v122 = *((unsigned int *)v541 + 126);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 569;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v121;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v122;
              _os_log_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcblkzsizes: mDsRefBlkSz = %lu, mDsMicBlkSz = %lu", buf, 0x26u);
            }
          }
          v123 = (int *)*((_QWORD *)v541 + 1570);
          if (v123 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v123, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 569, "CalcBlkSzs", "calcblkzsizes: mDsRefBlkSz = %lu, mDsMicBlkSz = %lu", *((unsigned int *)v541 + 125), *((unsigned int *)v541 + 126));
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v124 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v125 = (*v124 ? *v124 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
            {
              v126 = *((unsigned int *)v541 + 127);
              v127 = *((unsigned int *)v541 + 131);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 570;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v126;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v127;
              _os_log_impl(&dword_1B5ED0000, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcblkzsizes: mEpIoBlkSz  = %lu, mUsOutBlkSz = %lu", buf, 0x26u);
            }
          }
          v128 = (int *)*((_QWORD *)v541 + 1570);
          if (v128 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v128, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 570, "CalcBlkSzs", "calcblkzsizes: mEpIoBlkSz  = %lu, mUsOutBlkSz = %lu", *((unsigned int *)v541 + 127), *((unsigned int *)v541 + 131));
          }
          v129 = v541;
          if (*((_DWORD *)v541 + 248) == 1819304813)
          {
            v130 = *((_DWORD *)v541 + 253);
            if (v130 >= 2)
            {
              *((_DWORD *)v541 + 250) /= v130;
              *((_DWORD *)v541 + 252) /= v130;
              *((_DWORD *)v541 + 253) = 1;
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v131 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v132 = (*v131 ? *v131 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
              {
                CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v532);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1024;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = *(_QWORD *)ioDataSize;
                _os_log_impl(&dword_1B5ED0000, v132, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initialize: mOutASBD computed = %s", buf, 0x1Cu);
                if (*(_QWORD *)ioDataSize)
                  free(*(void **)ioDataSize);
              }
            }
            v129 = v541;
            v133 = (int *)*((_QWORD *)v541 + 1570);
            if (v133 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v134 = VPLogScope(void)::scope;
              CAFormatter::CAFormatter((CAFormatter *)buf, v532);
              CALegacyLog::log(v133, 5, v134, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 1024, "Initialize", "initialize: mOutASBD computed = %s", *(const char **)buf);
              if (*(_QWORD *)buf)
                free(*(void **)buf);
              v129 = v541;
            }
          }
          v530 = (AudioStreamBasicDescription *)((char *)v129 + 704);
          myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)v129 + 704), *((_DWORD *)v129 + 123), (AudioBufferList **)v129 + 128);
          myAllocABLDynamic(v539, *((_DWORD *)v541 + 124), (AudioBufferList **)v541 + 129);
          myAllocABLDynamic(v530, *((_DWORD *)v541 + 123), (AudioBufferList **)v541 + 130);
          myAllocABLDynamic(v539, *((_DWORD *)v541 + 124), (AudioBufferList **)v541 + 131);
          myAllocABLDynamic(v42, *((_DWORD *)v541 + 125), (AudioBufferList **)v541 + 132);
          myAllocABLDynamic(v535, *((_DWORD *)v541 + 126), (AudioBufferList **)v541 + 133);
          myAllocABLDynamic(v42, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 134);
          myAllocABLDynamic(v535, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 135);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 136);
          myAllocABLDynamic(v533, *((_DWORD *)v541 + 131), (AudioBufferList **)v541 + 137);
          v135 = v541;
          if (*((_BYTE *)v541 + 2244) && *((_DWORD *)v541 + 18) == 22)
          {
            myAllocABLDynamic(v42, *((_DWORD *)v541 + 418), (AudioBufferList **)v541 + 207);
            v136 = (_DWORD *)*((_QWORD *)v541 + 207);
            if (*v136)
            {
              v137 = 0;
              v138 = (void **)(v136 + 4);
              do
              {
                bzero(*v138, *((unsigned int *)v138 - 1));
                ++v137;
                v138 += 2;
              }
              while (v137 < *v136);
            }
            v139 = *((unsigned int *)v541 + 418);
            v140 = malloc_type_malloc(4 * v139, 0x2C8E6D5CuLL);
            v141 = v140;
            if ((_DWORD)v139 && !v140)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v526 = std::bad_alloc::bad_alloc(exception);
            }
            bzero(v140, 4 * v139);
            v135 = v541;
            *((_QWORD *)v541 + 208) = v141;
          }
          v142 = (void *)*((_QWORD *)v135 + 176);
          if (v142)
          {
            free(v142);
            *((_QWORD *)v135 + 176) = 0;
          }
          v143 = **((unsigned int **)v541 + 131);
          v144 = malloc_type_malloc(v143, 0x7C51E058uLL);
          if ((_DWORD)v143)
            v145 = v144 == 0;
          else
            v145 = 0;
          if (v145)
          {
            v523 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v524 = std::bad_alloc::bad_alloc(v523);
          }
          *((_QWORD *)v541 + 176) = v144;
          myAllocABLDynamic(v535, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 177);
          myAllocABLDynamic(v539, *((_DWORD *)v541 + 124), (AudioBufferList **)v541 + 178);
          myAllocABLDynamic(v535, *((_DWORD *)v541 + 126), (AudioBufferList **)v541 + 179);
          v146 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)v541 + 138, v146);
          CADeprecated::CABufferList::AllocateBuffers(*((_QWORD *)v541 + 138), *((_DWORD *)v541 + 212) * *((_DWORD *)v541 + 127));
          v147 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)v541 + 139, v147);
          CADeprecated::CABufferList::AllocateBuffers(*((_QWORD *)v541 + 139), *((_DWORD *)v541 + 212) * *((_DWORD *)v541 + 127));
          v148 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)v541 + 140, v148);
          CADeprecated::CABufferList::AllocateBuffers(*((_QWORD *)v541 + 140), *((_DWORD *)v541 + 212) * *((_DWORD *)v541 + 127));
          v149 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)v541 + 141, v149);
          CADeprecated::CABufferList::AllocateBuffers(*((_QWORD *)v541 + 141), *((_DWORD *)v541 + 212) * *((_DWORD *)v541 + 127));
          v150 = v541;
          if (*((_DWORD *)v541 + 248) == 1819304813)
          {
            *((_DWORD *)v541 + 133) = *((_DWORD *)v541 + 131);
            CAAudioChannelLayout::operator=(v3, 0);
            v150 = v541;
            LODWORD(v151) = *((_DWORD *)v541 + 126);
            LODWORD(v152) = *((_DWORD *)v541 + 127);
            *((_DWORD *)v541 + 420) = *((_DWORD *)v541 + 131) * vcvtpd_u64_f64((double)v151 / (double)v152);
            *((_DWORD *)v541 + 421) = *((_DWORD *)v541 + 250);
          }
          myAllocABLDynamic(v530, *((_DWORD *)v150 + 123), (AudioBufferList **)v150 + 151);
          *((_DWORD *)v541 + 288) = 0;
          *((_DWORD *)v541 + 294) = 0;
          *((_DWORD *)v541 + 293) = 0;
          v153 = *((_DWORD *)v541 + 285);
          strcpy(buf, "tfastpni");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          v528 = (_DWORD *)((char *)v541 + 1172);
          PropertyData = AudioObjectGetPropertyData(v153, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v541 + 1172);
          if (PropertyData)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v155 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v156 = (*v155 ? *v155 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1589;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = PropertyData;
                _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting input safety offset", buf, 0x18u);
              }
            }
            v157 = (int *)*((_QWORD *)v541 + 1570);
            if (v157 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v157, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1589, "GetHardwareSafetyOffsets", "error %d getting input safety offset", PropertyData);
            }
          }
          v158 = *((_DWORD *)v541 + 284);
          strcpy(buf, "tfasptuo");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          v527 = (_DWORD *)((char *)v541 + 1176);
          v159 = AudioObjectGetPropertyData(v158, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v541 + 1176);
          if (v159)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v160 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v161 = (*v160 ? *v160 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1592;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v159;
                _os_log_impl(&dword_1B5ED0000, v161, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting output safety offset", buf, 0x18u);
              }
            }
            v162 = (int *)*((_QWORD *)v541 + 1570);
            if (v162 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v162, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1592, "GetHardwareSafetyOffsets", "error %d getting output safety offset", v159);
            }
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v163 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v164 = (*v163 ? *v163 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG))
            {
              v165 = *v528;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1594;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v165;
              _os_log_impl(&dword_1B5ED0000, v164, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Input safety offset of the aggregate device is %u", buf, 0x18u);
            }
          }
          v166 = (int *)*((_QWORD *)v541 + 1570);
          if (v166 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v166, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1594, "GetHardwareSafetyOffsets", "Input safety offset of the aggregate device is %u", *v528);
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v167 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v168 = (*v167 ? *v167 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
            {
              v169 = *v527;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1595;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v169;
              _os_log_impl(&dword_1B5ED0000, v168, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Output safety offset of the aggregate device is %u", buf, 0x18u);
            }
          }
          v170 = (int *)*((_QWORD *)v541 + 1570);
          if (v170 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v170, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1595, "GetHardwareSafetyOffsets", "Output safety offset of the aggregate device is %u", *v527);
          }
          (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)v541 + 264))(v541);
          *((_BYTE *)v541 + 476) = 1;
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 418);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 419);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 421);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 420);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 422);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 423);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 424);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 425);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 426);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 427);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 436);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 2056);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 428);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 429);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 430);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 431);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 433);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 435);
          myAllocABLDynamic(v535, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 434);
          myAllocABLDynamic(v535, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 432);
          v171 = *((_DWORD *)v541 + 127);
          *((uint32x2_t *)v541 + 535) = vshl_u32((uint32x2_t)vdup_n_s32(v171), (uint32x2_t)0x300000002);
          v172 = *((double *)v541 + 103);
          v173 = (float)((float)((float)v171 * 1000.0) / v172);
          if (v171 <= v173)
            v173 = 1;
          *((_DWORD *)v541 + 1072) = v173;
          myAllocABLDynamic(v535, 2 * v171, (AudioBufferList **)v541 + 537);
          v174 = *((_QWORD *)v541 + 537);
          v175 = *(char **)(v174 + 16);
          v176 = *((unsigned int *)v541 + 127);
          if ((_DWORD)v176)
          {
            memset_pattern16(v175, &unk_1B66A2B30, 4 * v176);
            bzero(&v175[4 * (v176 - 1) + 4], 4 * v176);
          }
          if (*((_DWORD *)v541 + 103) >= 2u)
          {
            memcpy(*(void **)(v174 + 32), v175, 8 * v176);
            LODWORD(v176) = *((_DWORD *)v541 + 127);
          }
          myAllocABLDynamic(v538, v176, (AudioBufferList **)v541 + 499);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 500);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 501);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 502);
          myAllocABLDynamic(v538, *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 503);
          __A = 1.0;
          vDSP_vfill(&__A, *(float **)(*((_QWORD *)v541 + 499) + 16), 1, *((unsigned int *)v541 + 127));
          vDSP_vfill(&__A, *(float **)(*((_QWORD *)v541 + 500) + 16), 1, *((unsigned int *)v541 + 127));
          vDSP_vfill(&__A, *(float **)(*((_QWORD *)v541 + 501) + 16), 1, *((unsigned int *)v541 + 127));
          vDSP_vfill(&__A, *(float **)(*((_QWORD *)v541 + 502) + 16), 1, *((unsigned int *)v541 + 127));
          vDSP_vfill(&__A, *(float **)(*((_QWORD *)v541 + 503) + 16), 1, *((unsigned int *)v541 + 127));
          myAllocABLDynamic(v535, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 504);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 505);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 506);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 510);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 511);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 507);
          myAllocABLDynamic(v538, 2 * *((_DWORD *)v541 + 127), (AudioBufferList **)v541 + 509);
          v177 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 512);
          if (v177)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v177);
            MEMORY[0x1BCC95CEC]();
          }
          v178 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 513);
          if (v178)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v178);
            MEMORY[0x1BCC95CEC]();
          }
          v179 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 514);
          if (v179)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v179);
            MEMORY[0x1BCC95CEC]();
          }
          v180 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 515);
          if (v180)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v180);
            MEMORY[0x1BCC95CEC]();
          }
          v181 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 516);
          if (v181)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v181);
            MEMORY[0x1BCC95CEC]();
          }
          v182 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 517);
          if (v182)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v182);
            MEMORY[0x1BCC95CEC]();
          }
          v183 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 518);
          if (v183)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v183);
            MEMORY[0x1BCC95CEC]();
          }
          v184 = (VPTimeFreqConverter *)*((_QWORD *)v541 + 519);
          if (v184)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v184);
            MEMORY[0x1BCC95CEC]();
          }
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 512);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 513);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 514);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 515);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 516);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 517);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 518);
          VPTimeFreqConverter_Create(2, *((_DWORD *)v541 + 127), (VPTimeFreqConverter **)v541 + 519);
          (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)v541 + 256))(v541);
          v185 = 0;
          v186 = (char *)v541 + 4656;
          do
          {
            if (((*(_QWORD *)&v186[8 * (v185 >> 6)] >> v185) & 1) == 0 || (_DWORD)v185 == 62)
            {
              v187 = 0;
              v188 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
              while (1)
              {
                v189 = *v188;
                v188 += 18;
                if (v189 == (_DWORD)v185)
                  break;
                if (++v187 == 71)
                {
                  v190 = 0;
                  goto LABEL_440;
                }
              }
              v190 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v187 + 1];
LABEL_440:
              VoiceProcessorV2::DisposeAU(v541, 1635083896, v190, (OpaqueAudioComponentInstance **)v541 + v185 + 347, 1);
            }
            else
            {
              VoiceProcessorV2::InstantiateAndConfigureEffectAU(v541, v185, 1);
            }
            ++v185;
          }
          while (v185 != 71);
          VoiceProcessorV2::InstantiateAndConfigureAuxAU(v541, 1);
          v529 = VoiceProcessorV2::ApplyBeamDirection(v541);
          if ((_DWORD)v529)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v191 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v192 = (*v191 ? *v191 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1217;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v529;
                _os_log_impl(&dword_1B5ED0000, v192, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error %d from applying beam direction", buf, 0x18u);
              }
            }
            v193 = (int *)*((_QWORD *)v541 + 1570);
            if (v193 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v193, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 1217, "Initialize", "Error %d from applying beam direction", v529);
            }
          }
          VoiceProcessorV2::LogVPParams(v541);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v194 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v195 = (*v194 ? *v194 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v195, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "vpDebug_Logging.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 42;
              _os_log_impl(&dword_1B5ED0000, v195, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ____________loguplinkchain:begin___________", buf, 0x12u);
            }
          }
          v196 = (int *)*((_QWORD *)v541 + 1570);
          if (v196 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v196, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 42, "LogVPUplinkChain", "____________loguplinkchain:begin___________");
          }
          for (i = 0; i != 71; ++i)
          {
            v198 = 0;
            v199 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
            while (1)
            {
              v200 = *v199;
              v199 += 18;
              if (v200 == (_DWORD)i)
                break;
              if (++v198 == 71)
              {
                v201 = 0;
                goto LABEL_479;
              }
            }
            v201 = (const char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v198 + 2];
LABEL_479:
            LODWORD(outData[0]) = 0;
            v546[0] = 4;
            v202 = (char *)v541 + 8 * i;
            v203 = (OpaqueAudioComponentInstance *)*((_QWORD *)v202 + 347);
            if (v203)
              AudioUnitGetProperty(v203, 0x15u, 0, 0, outData, v546);
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v204 = (const void **)(v202 + 2776);
            v205 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v206 = (*v205 ? *v205 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
              {
                if (i >= 0x47)
                  std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
                v207 = *v204;
                v208 = "ON";
                if (((*(_QWORD *)&v186[8 * (i >> 6)] >> i) & 1) == 0)
                  v208 = "OFF";
                v209 = "";
                if (LODWORD(outData[0]))
                  v209 = "(bypassed)";
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "vpDebug_Logging.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 53;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v201;
                *(_WORD *)&buf[28] = 2080;
                *(_QWORD *)&buf[30] = v208;
                *(_WORD *)&buf[38] = 2080;
                *(_QWORD *)&buf[40] = v209;
                *(_WORD *)&buf[48] = 2048;
                *(_QWORD *)&v548 = v207;
                _os_log_impl(&dword_1B5ED0000, v206, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>     %s: %s %s (%p)", buf, 0x3Au);
              }
            }
            v210 = (int *)*((_QWORD *)v541 + 1570);
            if (v210 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              if (i >= 0x47)
                std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
              v211 = "ON";
              if (((*(_QWORD *)&v186[8 * (i >> 6)] >> i) & 1) == 0)
                v211 = "OFF";
              v212 = "";
              if (LODWORD(outData[0]))
                v212 = "(bypassed)";
              CALegacyLog::log(v210, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 53, "LogVPUplinkChain", "    %s: %s %s (%p)", v201, v211, v212, *v204);
            }
            memset(ioDataSize, 0, sizeof(ioDataSize));
            *(_QWORD *)&v543 = 0;
            std::vector<std::pair<unsigned int,float>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,float>*,std::pair<unsigned int,float>*>((char *)ioDataSize, *((uint64_t **)v541 + 3 * i + 586), *((uint64_t **)v541 + 3 * i + 587), (uint64_t)(*((_QWORD *)v541 + 3 * i + 587) - *((_QWORD *)v541 + 3 * i + 586)) >> 3);
            v213 = *(_DWORD **)ioDataSize;
            if (*(_QWORD *)&ioDataSize[2] == *(_QWORD *)ioDataSize)
            {
              v213 = *(_DWORD **)&ioDataSize[2];
            }
            else
            {
              v214 = 0;
              v215 = (uint64_t)(*(_QWORD *)&ioDataSize[2] - *(_QWORD *)ioDataSize) >> 3;
              v216 = 1;
              do
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v217 = (_QWORD *)VPLogScope(void)::scope;
                if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
                {
                  v218 = (*v217 ? *v217 : MEMORY[0x1E0C81028]);
                  if (os_log_type_enabled(v218, OS_LOG_TYPE_DEBUG))
                  {
                    CAX4CCString::CAX4CCString((CAX4CCString *)&v551, v213[2 * v214]);
                    v219 = *(float *)&v213[2 * v214 + 1];
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "vpDebug_Logging.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 57;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = &v551;
                    *(_WORD *)&buf[28] = 2048;
                    *(double *)&buf[30] = v219;
                    _os_log_impl(&dword_1B5ED0000, v218, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>          param %s: %f", buf, 0x26u);
                  }
                }
                v220 = (int *)*((_QWORD *)v541 + 1570);
                if (v220 && (v540[764] || v540[765]))
                {
                  if (VPLogScope(void)::once != -1)
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                  v221 = VPLogScope(void)::scope;
                  CAX4CCString::CAX4CCString((CAX4CCString *)buf, v213[2 * v214]);
                  CALegacyLog::log(v220, 5, v221, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 57, "LogVPUplinkChain", "         param %s: %f", buf, *(float *)&v213[2 * v214 + 1]);
                }
                v214 = v216;
                v490 = v215 > v216++;
              }
              while (v490);
            }
            if (v213)
              operator delete(v213);
            v186 = (char *)v541 + 4656;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v222 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v223 = (*v222 ? *v222 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v223, OS_LOG_TYPE_DEBUG))
            {
              v224 = *((_QWORD *)v541 + 1550);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpDebug_Logging.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 61;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "(UL)-AUXVP";
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v224;
              _os_log_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp>     %s: ON (%p)", buf, 0x26u);
            }
          }
          v225 = (int *)*((_QWORD *)v541 + 1570);
          if (v225 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v225, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 61, "LogVPUplinkChain", "    %s: ON (%p)", "(UL)-AUXVP", *((const void **)v541 + 1550));
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v226 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v227 = (*v226 ? *v226 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v227, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "vpDebug_Logging.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 62;
              _os_log_impl(&dword_1B5ED0000, v227, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ____________loguplinkchain:end___________", buf, 0x12u);
            }
          }
          v228 = (int *)*((_QWORD *)v541 + 1570);
          if (v228 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v228, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Logging.cpp", 62, "LogVPUplinkChain", "____________loguplinkchain:end___________");
          }
          v229 = (float *)((char *)v541 + 1156);
          *((_DWORD *)v541 + 289) = 1065353216;
          v230 = *((_DWORD *)v541 + 285);
          strcpy(buf, "cycnbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          v231 = AudioObjectGetPropertyData(v230, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v541 + 1156);
          if (v231)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v232 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v233 = (*v232 ? *v232 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1622;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v231;
                _os_log_impl(&dword_1B5ED0000, v233, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting IOCycleUsage", buf, 0x18u);
              }
            }
            v234 = (int *)*((_QWORD *)v541 + 1570);
            if (v234 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v234, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1622, "GetHardwarePresentationLatency", "error %d getting IOCycleUsage", v231);
            }
          }
          *((_DWORD *)v541 + 287) = 0;
          v235 = (_DWORD *)((char *)v541 + 1164);
          *((_DWORD *)v541 + 292) = 0;
          *((_DWORD *)v541 + 291) = 0;
          v236 = *((_DWORD *)v541 + 285);
          strcpy(buf, "cntltpni");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          v237 = AudioObjectGetPropertyData(v236, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v541 + 1164);
          if (v237)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v238 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v239 = (*v238 ? *v238 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1627;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v237;
                _os_log_impl(&dword_1B5ED0000, v239, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting input latency", buf, 0x18u);
              }
            }
            v240 = (int *)*((_QWORD *)v541 + 1570);
            if (v240 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v240, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1627, "GetHardwarePresentationLatency", "error %d getting input latency", v237);
            }
          }
          v241 = (_DWORD *)((char *)v541 + 1168);
          v242 = *((_DWORD *)v541 + 284);
          strcpy(buf, "cntlptuo");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          v243 = AudioObjectGetPropertyData(v242, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v541 + 1168);
          if (v243)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v244 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v245 = (*v244 ? *v244 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1631;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v243;
                _os_log_impl(&dword_1B5ED0000, v245, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting output latency", buf, 0x18u);
              }
            }
            v246 = (int *)*((_QWORD *)v541 + 1570);
            if (v246 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v246, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1631, "GetHardwarePresentationLatency", "error %d getting output latency", v243);
            }
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v247 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v248 = (*v247 ? *v247 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v248, OS_LOG_TYPE_DEBUG))
            {
              v249 = *v235;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1633;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v249;
              _os_log_impl(&dword_1B5ED0000, v248, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Input latency of the aggregate device is %u", buf, 0x18u);
            }
          }
          v250 = (int *)*((_QWORD *)v541 + 1570);
          if (v250 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v250, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1633, "GetHardwarePresentationLatency", "Input latency of the aggregate device is %u", *v235);
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v251 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v252 = (*v251 ? *v251 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v252, OS_LOG_TYPE_DEBUG))
            {
              v253 = *v241;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1634;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v253;
              _os_log_impl(&dword_1B5ED0000, v252, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Output latency of the aggregate device is %u", buf, 0x18u);
            }
          }
          v254 = (int *)*((_QWORD *)v541 + 1570);
          if (v254 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v254, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1634, "GetHardwarePresentationLatency", "Output latency of the aggregate device is %u", *v241);
          }
          (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)v541 + 280))(v541);
          v255 = *((_DWORD *)v541 + 1127);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v256 = (_QWORD *)VPLogScope(void)::scope;
          if (v255)
          {
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              v257 = (*v256 ? *v256 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
              {
                v258 = *((_DWORD *)v541 + 285);
                v259 = *((_DWORD *)v541 + 291);
                v260 = *((_DWORD *)v541 + 293);
                v261 = *((_DWORD *)v541 + 284);
                v262 = *((_DWORD *)v541 + 292);
                v263 = *((_DWORD *)v541 + 294);
                *(_DWORD *)buf = 136316930;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1658;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v258;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v259;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v260;
                *(_WORD *)&buf[36] = 1024;
                *(_DWORD *)&buf[38] = v261;
                *(_WORD *)&buf[42] = 1024;
                *(_DWORD *)&buf[44] = v262;
                *(_WORD *)&buf[48] = 1024;
                LODWORD(v548) = v263;
                _os_log_impl(&dword_1B5ED0000, v257, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> input {deviceID=%d, latency=%u, safety offset=%u}, output {deviceID=%d, output latency=%u, safety offset=%u}", buf, 0x36u);
              }
            }
            v264 = (int *)*((_QWORD *)v541 + 1570);
            if (v264 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v264, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1658, "GetHardwarePresentationLatency", "input {deviceID=%d, latency=%u, safety offset=%u}, output {deviceID=%d, output latency=%u, safety offset=%u}", *((_DWORD *)v541 + 285), *((_DWORD *)v541 + 291), *((_DWORD *)v541 + 293), *((_DWORD *)v541 + 284), *((_DWORD *)v541 + 292), *((_DWORD *)v541 + 294));
            }
          }
          else
          {
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              v265 = (*v256 ? *v256 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
              {
                v266 = *((_DWORD *)v541 + 285);
                v267 = *((_DWORD *)v541 + 291);
                v268 = *((_DWORD *)v541 + 293);
                v269 = *((_DWORD *)v541 + 284);
                v270 = *((_DWORD *)v541 + 292);
                v271 = *((_DWORD *)v541 + 287);
                v272 = *((_DWORD *)v541 + 294);
                v273 = *((_DWORD *)v541 + 288);
                *(_DWORD *)buf = 136317442;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1656;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v266;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v267;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v268;
                *(_WORD *)&buf[36] = 1024;
                *(_DWORD *)&buf[38] = v269;
                *(_WORD *)&buf[42] = 1024;
                *(_DWORD *)&buf[44] = v270;
                *(_WORD *)&buf[48] = 1024;
                LODWORD(v548) = v271;
                WORD2(v548) = 1024;
                *(_DWORD *)((char *)&v548 + 6) = v272;
                WORD5(v548) = 1024;
                HIDWORD(v548) = v273;
                _os_log_impl(&dword_1B5ED0000, v265, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> input {deviceID=%d, latency=%u, safety offset=%u}, output {deviceID=%d, output latency=%u, tap stream latency=%u, safety offset=%u, tap stream input safety offset=%u}", buf, 0x42u);
              }
            }
            v274 = (int *)*((_QWORD *)v541 + 1570);
            if (v274 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v274, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1656, "GetHardwarePresentationLatency", "input {deviceID=%d, latency=%u, safety offset=%u}, output {deviceID=%d, output latency=%u, tap stream latency=%u, safety offset=%u, tap stream input safety offset=%u}", *((_DWORD *)v541 + 285), *((_DWORD *)v541 + 291), *((_DWORD *)v541 + 293), *((_DWORD *)v541 + 284), *((_DWORD *)v541 + 292), *((_DWORD *)v541 + 287), *((_DWORD *)v541 + 294), *((_DWORD *)v541 + 288));
            }
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v275 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v276 = (*v275 ? *v275 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
            {
              v277 = *v229;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1661;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v277;
              _os_log_impl(&dword_1B5ED0000, v276, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> iocycleusage = %f", buf, 0x1Cu);
            }
          }
          v278 = (int *)*((_QWORD *)v541 + 1570);
          if (v278 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v278, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1661, "GetHardwarePresentationLatency", "iocycleusage = %f", *v229);
          }
          *((_DWORD *)v541 + 298) = 0;
          v279 = *((_DWORD *)v541 + 596);
          v280 = (int)(float)((float)(*((float *)v541 + 1111)
                                    + (float)(*((_DWORD *)v541 + 292) + *((_DWORD *)v541 + 291)))
                            - (float)*((unsigned int *)v541 + 287));
          *((_DWORD *)v541 + 296) = v280;
          if (v280 < 0)
          {
            if (v279 == 1781740087)
            {
              *((_DWORD *)v541 + 298) = -v280;
              *((_DWORD *)v541 + 296) = 0;
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v285 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
              {
                v286 = (*v285 ? *v285 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG))
                {
                  v287 = *((_DWORD *)v541 + 298);
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1992;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v287;
                  _os_log_impl(&dword_1B5ED0000, v286, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> *added* ref-mic delay=%u samples by delaying epmic (samples at hwmic rate, will be converted to epmic rate)", buf, 0x18u);
                }
              }
              v288 = (int *)*((_QWORD *)v541 + 1570);
              if (v288 && (v540[764] || v540[765]))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v288, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1992, "UpdateHWPresentationLatencyAndRefToMicDelay", "*added* ref-mic delay=%u samples by delaying epmic (samples at hwmic rate, will be converted to epmic rate)", *((_DWORD *)v541 + 298));
              }
            }
            else
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v281 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                v282 = (*v281 ? *v281 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
                {
                  v283 = *((_DWORD *)v541 + 296);
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1994;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v283;
                  _os_log_impl(&dword_1B5ED0000, v282, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> negative mCorrectedPresentationDelay (%d) clamped to zero", buf, 0x18u);
                }
              }
              v284 = (int *)*((_QWORD *)v541 + 1570);
              if (v284 && (v540[764] || v540[765]))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v284, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1994, "UpdateHWPresentationLatencyAndRefToMicDelay", "negative mCorrectedPresentationDelay (%d) clamped to zero", *((_DWORD *)v541 + 296));
              }
              *((_DWORD *)v541 + 296) = 0;
            }
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v289 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v290 = (*v289 ? *v289 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v290, OS_LOG_TYPE_DEFAULT))
            {
              v291 = *((float *)v541 + 1111);
              v292 = *((_DWORD *)v541 + 296);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2045;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v291;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v292;
              _os_log_impl(&dword_1B5ED0000, v290, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> realworld correction=%f, corrected latency=%d", buf, 0x22u);
            }
          }
          v293 = (int *)*((_QWORD *)v541 + 1570);
          if (v293 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v293, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2045, "UpdateHWPresentationLatencyAndRefToMicDelay", "realworld correction=%f, corrected latency=%d", *((float *)v541 + 1111), *((_DWORD *)v541 + 296));
          }
          v294 = *((double *)v541 + 93) * *((float *)v541 + 1092) / 1000.0;
          v295 = llround(v294);
          v296 = v295 & ~(v295 >> 31);
          *((_DWORD *)v541 + 297) = v296;
          v297 = *((_DWORD *)v541 + 296);
          if (*((_DWORD *)v541 + 1127))
            v298 = *v528 + v297 + *v527;
          else
            v298 = *((_DWORD *)v541 + 296);
          if (v295 >= 1)
          {
            if (v298 >= v296)
              v299 = v295 & ~(v295 >> 31);
            else
              v299 = v298;
            v300 = v296 >= v298;
            v301 = v296 - v298;
            if (v301 != 0 && v300 && v279 == 1781740087)
            {
              *((_DWORD *)v541 + 298) += v301;
              v299 = v298;
            }
            *((_DWORD *)v541 + 296) = v297 - v299;
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v302 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v303 = (*v302 ? *v302 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v303, OS_LOG_TYPE_DEBUG))
              {
                v304 = *((_DWORD *)v541 + 297);
                v305 = *((float *)v541 + 1092);
                v306 = *((_DWORD *)v541 + 296);
                v307 = *((_DWORD *)v541 + 298);
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2096;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v304;
                *(_WORD *)&buf[24] = 2048;
                *(double *)&buf[26] = v305;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v306;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v307;
                _os_log_impl(&dword_1B5ED0000, v303, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> after adjusting for ref-mic delay=%d samples (%f msec), corrected latency=%d, additional mic delay(@hwmic rate)=%u", buf, 0x2Eu);
              }
            }
            v308 = (int *)*((_QWORD *)v541 + 1570);
            if (v308 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v308, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2096, "UpdateHWPresentationLatencyAndRefToMicDelay", "after adjusting for ref-mic delay=%d samples (%f msec), corrected latency=%d, additional mic delay(@hwmic rate)=%u", *((_DWORD *)v541 + 297), *((float *)v541 + 1092), *((_DWORD *)v541 + 296), *((_DWORD *)v541 + 298));
            }
          }
          *((_DWORD *)v541 + 297) = 0;
          *((_DWORD *)v541 + 1092) = 0;
          if (!*((_BYTE *)v541 + 2247))
          {
            *((_BYTE *)v541 + 2247) = 1;
            goto LABEL_945;
          }
          v309 = *((_DWORD *)v541 + 127);
          v310 = v309 - 1 + *((_DWORD *)v541 + 125);
          if (v309 - 1 + *((_DWORD *)v541 + 126) > v310)
            v310 = v309 - 1 + *((_DWORD *)v541 + 126);
          v311 = (*((double *)v541 + 103) * (float)*((unsigned int *)v541 + 298) / *((double *)v541 + 93));
          v312 = vcvtpd_u64_f64((double)v310 / (double)v309) + 40;
          v313 = v311 + v312 * v309;
          v314 = *((_DWORD *)v541 + 102);
          *((_DWORD *)v541 + 322) = v313;
          *((_DWORD *)v541 + 323) = v314;
          *((_DWORD *)v541 + 326) = 0;
          *((_QWORD *)v541 + 162) = 0;
          v315 = (void *)*((_QWORD *)v541 + 164);
          v316 = *((_QWORD *)v541 + 165) - (_QWORD)v315;
          v317 = v313 * v314;
          if (v317 == v316 >> 2)
          {
            if (v316 < 1)
              goto LABEL_766;
            v318 = (unint64_t)v316 >> 2;
            v319 = ((unint64_t)v316 >> 2) + 1;
            bzero(*((void **)v541 + 164), 4 * (v319 - ((unint64_t)v316 > 3)));
          }
          else
          {
            std::valarray<float>::resize((uint64_t)v541 + 1312, v317, 0.0);
            v315 = (void *)*((_QWORD *)v541 + 164);
            v320 = *((_QWORD *)v541 + 165) - (_QWORD)v315;
            if (v320 < 1)
              goto LABEL_766;
            v318 = (unint64_t)v320 >> 2;
            v319 = ((unint64_t)v320 >> 2) + 1;
          }
          bzero(v315, 4 * (v319 - (v318 != 0)));
LABEL_766:
          *((_DWORD *)v541 + 324) = 0;
          *((_DWORD *)v541 + 326) = 0;
          v321 = v311 + *((_DWORD *)v541 + 127) * v312;
          v322 = *((_DWORD *)v541 + 103);
          *((_DWORD *)v541 + 332) = v321;
          *((_DWORD *)v541 + 333) = v322;
          *((_DWORD *)v541 + 336) = 0;
          *((_QWORD *)v541 + 167) = 0;
          v323 = (void *)*((_QWORD *)v541 + 169);
          v324 = *((_QWORD *)v541 + 170) - (_QWORD)v323;
          v325 = v321 * v322;
          if (v325 == v324 >> 2)
          {
            if (v324 < 1)
              goto LABEL_772;
            v326 = (unint64_t)v324 >> 2;
            v327 = ((unint64_t)v324 >> 2) + 1;
            bzero(*((void **)v541 + 169), 4 * (v327 - ((unint64_t)v324 > 3)));
          }
          else
          {
            std::valarray<float>::resize((uint64_t)v541 + 1352, v325, 0.0);
            v323 = (void *)*((_QWORD *)v541 + 169);
            v328 = *((_QWORD *)v541 + 170) - (_QWORD)v323;
            if (v328 < 1)
              goto LABEL_772;
            v326 = (unint64_t)v328 >> 2;
            v327 = ((unint64_t)v328 >> 2) + 1;
          }
          bzero(v323, 4 * (v327 - (v326 != 0)));
LABEL_772:
          *((_DWORD *)v541 + 334) = 0;
          *((_DWORD *)v541 + 336) = 0;
          v329 = *((_DWORD *)v541 + 103);
          *((_DWORD *)v541 + 360) = v321;
          *((_DWORD *)v541 + 361) = v329;
          *((_DWORD *)v541 + 364) = 0;
          *((_QWORD *)v541 + 181) = 0;
          v330 = (void *)*((_QWORD *)v541 + 183);
          v331 = *((_QWORD *)v541 + 184) - (_QWORD)v330;
          v332 = v329 * v321;
          if (v332 == v331 >> 2)
          {
            if (v331 < 1)
              goto LABEL_778;
            v333 = (unint64_t)v331 >> 2;
            v334 = ((unint64_t)v331 >> 2) + 1;
            bzero(*((void **)v541 + 183), 4 * (v334 - ((unint64_t)v331 > 3)));
          }
          else
          {
            std::valarray<float>::resize((uint64_t)v541 + 1464, v332, 0.0);
            v330 = (void *)*((_QWORD *)v541 + 183);
            v335 = *((_QWORD *)v541 + 184) - (_QWORD)v330;
            if (v335 < 1)
              goto LABEL_778;
            v333 = (unint64_t)v335 >> 2;
            v334 = ((unint64_t)v335 >> 2) + 1;
          }
          bzero(v330, 4 * (v334 - (v333 != 0)));
LABEL_778:
          *((_DWORD *)v541 + 362) = 0;
          *((_DWORD *)v541 + 364) = 0;
          if (v311)
          {
            *(_QWORD *)ioDataSize = 0;
            if (!myAllocABLDynamic(v535, v311, (AudioBufferList **)ioDataSize))
            {
              v336 = *(unsigned int **)ioDataSize;
              if (**(_DWORD **)ioDataSize)
              {
                v337 = 0;
                v338 = (void **)(*(_QWORD *)ioDataSize + 16);
                do
                {
                  bzero(*v338, *((unsigned int *)v338 - 1));
                  ++v337;
                  v338 += 2;
                }
                while (v337 < *v336);
              }
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v339 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
              {
                v340 = (*v339 ? *v339 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v340, OS_LOG_TYPE_INFO))
                {
                  v341 = v535->mSampleRate;
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 807;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = (double)v311 * 1000.0 / v341;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v311;
                  _os_log_impl(&dword_1B5ED0000, v340, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> initrefmicringbuffers : delaying mic by %.2f ms (%d samples)", buf, 0x22u);
                }
              }
              v342 = (int *)*((_QWORD *)v541 + 1570);
              if (v342 && (v540[764] || v540[765]))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v342, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 807, "InitRefMicRingBuffers", "initrefmicringbuffers : delaying mic by %.2f ms (%d samples)", (double)v311 * 1000.0 / v535->mSampleRate, v311);
              }
              v343 = *v336;
              if (*v336 == *((_DWORD *)v541 + 333))
              {
                v344 = *((_DWORD *)v541 + 332);
                v345 = v344 - *((_DWORD *)v541 + 334);
                if (v345)
                {
                  if (v345 >= v311)
                    v346 = v311;
                  else
                    v346 = v344 - *((_DWORD *)v541 + 334);
                  v347 = v344 - *((_DWORD *)v541 + 336);
                  if (v347 >= v346)
                    v348 = v346;
                  else
                    v348 = v347;
                  if (v343)
                  {
                    v349 = 0;
                    v350 = (const void **)(v336 + 4);
                    do
                    {
                      v351 = *v350;
                      v350 += 2;
                      memcpy((void *)(*((_QWORD *)v541 + 169)+ 4 * (*((_DWORD *)v541 + 336) + *((_DWORD *)v541 + 332) * v349++)), v351, 4 * v348);
                      v352 = *((unsigned int *)v541 + 333);
                    }
                    while (v349 < v352);
                    if (v346 > v347 && (_DWORD)v352)
                    {
                      v353 = 0;
                      v354 = (uint64_t *)(v336 + 4);
                      do
                      {
                        v355 = *v354;
                        v354 += 2;
                        memcpy((void *)(*((_QWORD *)v541 + 169) + 4 * (*((_DWORD *)v541 + 332) * v353++)), (const void *)(v355 + 4 * v348), 4 * (v346 - v348));
                      }
                      while (v353 < *((unsigned int *)v541 + 333));
                    }
                  }
                  *((_DWORD *)v541 + 334) += v346;
                  v356 = *((_DWORD *)v541 + 336) + v346;
                  *((_DWORD *)v541 + 336) = v356;
                  v357 = *((_DWORD *)v541 + 332);
                  v300 = v356 >= v357;
                  v358 = v356 - v357;
                  if (v300)
                    *((_DWORD *)v541 + 336) = v358;
                }
                v343 = *v336;
              }
              if (v343 == *((_DWORD *)v541 + 361))
              {
                v359 = *((_DWORD *)v541 + 360);
                v360 = v359 - *((_DWORD *)v541 + 362);
                if (v360)
                {
                  if (v360 >= v311)
                    v361 = v311;
                  else
                    v361 = v359 - *((_DWORD *)v541 + 362);
                  v362 = v359 - *((_DWORD *)v541 + 364);
                  if (v362 >= v361)
                    v363 = v361;
                  else
                    v363 = v362;
                  if (v343)
                  {
                    v364 = 0;
                    v365 = (const void **)(v336 + 4);
                    do
                    {
                      v366 = *v365;
                      v365 += 2;
                      memcpy((void *)(*((_QWORD *)v541 + 183)+ 4 * (*((_DWORD *)v541 + 364) + *((_DWORD *)v541 + 360) * v364++)), v366, 4 * v363);
                      v367 = *((unsigned int *)v541 + 361);
                    }
                    while (v364 < v367);
                    if (v361 > v362 && (_DWORD)v367)
                    {
                      v368 = 0;
                      v369 = (uint64_t *)(v336 + 4);
                      do
                      {
                        v370 = *v369;
                        v369 += 2;
                        memcpy((void *)(*((_QWORD *)v541 + 183) + 4 * (*((_DWORD *)v541 + 360) * v368++)), (const void *)(v370 + 4 * v363), 4 * (v361 - v363));
                      }
                      while (v368 < *((unsigned int *)v541 + 361));
                    }
                  }
                  *((_DWORD *)v541 + 362) += v361;
                  v371 = *((_DWORD *)v541 + 364) + v361;
                  *((_DWORD *)v541 + 364) = v371;
                  v372 = *((_DWORD *)v541 + 360);
                  v300 = v371 >= v372;
                  v373 = v371 - v372;
                  if (v300)
                    *((_DWORD *)v541 + 364) = v373;
                }
              }
            }
            myFreeABLDynamic((AudioBufferList **)ioDataSize);
          }
          v374 = (float)*((unsigned int *)v541 + 293) + (float)*((unsigned int *)v541 + 294);
          v375 = (float)*((unsigned int *)v541 + 123);
          v376 = vcvtps_u32_f32((float)((float)(v374 + (float)*((int *)v541 + 296)) + (float)(v375 * 3.5)) / v375);
          v377 = vcvtps_u32_f32((float)(v374 + (float)(v375 * 10.0)) / v375);
          if (v377 <= v376)
            v378 = v376;
          else
            v378 = v377;
          v379 = operator new();
          *(_QWORD *)v379 = &off_1E69EE198;
          *(_OWORD *)(v379 + 8) = 0u;
          *(_OWORD *)(v379 + 24) = 0u;
          *(_OWORD *)(v379 + 40) = 0u;
          *(_OWORD *)(v379 + 56) = 0u;
          *(_OWORD *)(v379 + 72) = 0u;
          *(_OWORD *)(v379 + 88) = 0u;
          *(_OWORD *)(v379 + 100) = 0u;
          bzero((void *)(v379 + 120), 0x314uLL);
          *(_WORD *)(v379 + 908) = 1;
          v380 = v541;
          v381 = *((_QWORD *)v541 + 150);
          if (v381 != v379)
          {
            if (v381)
              (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
            v380 = v541;
            *((_QWORD *)v541 + 150) = v379;
          }
          v382 = *(_OWORD *)&v530->mBytesPerPacket;
          *(_OWORD *)buf = *(_OWORD *)&v530->mSampleRate;
          *(_OWORD *)&buf[16] = v382;
          *(_QWORD *)&buf[32] = *(_QWORD *)&v530->mBitsPerChannel;
          CADeprecated::AudioRingBuffer::Allocate((CADeprecated::AudioRingBuffer *)v379, (const CAStreamBasicDescription *)buf, *((_DWORD *)v380 + 123) * v378);
          if (*((_BYTE *)v541 + 1984)
            && (ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(***((CA::AudioSampleRateConverter ****)v541 + 245)),
                LODWORD(v385) = *((_DWORD *)v541 + 124),
                v383 = *((double *)v541 + 103) * (double)v385 / *((double *)v541 + 78),
                ExpectedNumberOfOutputFrames < vcvtmd_u64_f64(v383)))
          {
            v386 = vcvtpd_u64_f64(v383) - ExpectedNumberOfOutputFrames;
          }
          else
          {
            v386 = 0;
          }
          if (*((_BYTE *)v541 + 1952)
            && (v387 = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(***((CA::AudioSampleRateConverter ****)v541
                                                                                       + 241)),
                LODWORD(v388) = *((_DWORD *)v541 + 123),
                v383 = *((double *)v541 + 98) * (double)v388 / *((double *)v541 + 73),
                v387 < vcvtmd_u64_f64(v383)))
          {
            v389 = vcvtpd_u64_f64(v383) - v387;
          }
          else
          {
            v389 = 0;
          }
          v390 = (CA::AudioSampleRateConverter **)*((_QWORD *)v541 + 249);
          if (v390
            && (v391 = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v390),
                LODWORD(v392) = *((_DWORD *)v541 + 127),
                v383 = *((double *)v541 + 123) * (double)v392 / *((double *)v541 + 103),
                v391 < vcvtmd_u64_f64(v383)))
          {
            v393 = vcvtpd_u64_f64(v383) - v391;
          }
          else
          {
            v393 = 0;
          }
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v394 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v395 = (*v394 ? *v394 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v395, OS_LOG_TYPE_DEBUG))
            {
              v396 = v534->mSampleRate;
              v397 = v531->mSampleRate;
              v398 = v532->mSampleRate;
              *(_DWORD *)buf = 136316930;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 673;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v389;
              *(_WORD *)&buf[24] = 2048;
              *(double *)&buf[26] = v396;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v386;
              *(_WORD *)&buf[40] = 2048;
              *(Float64 *)&buf[42] = v397;
              LOWORD(v548) = 1024;
              *(_DWORD *)((char *)&v548 + 2) = v393;
              WORD3(v548) = 2048;
              *((Float64 *)&v548 + 1) = v398;
              _os_log_impl(&dword_1B5ED0000, v395, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> calcsrclatencysamples: ref src ltnc = %d samples(@%f Hz), mic src ltnc = %d samples(@%f Hz), out src ltnc = %d samples(@%f Hz)", buf, 0x42u);
            }
          }
          v399 = (int *)*((_QWORD *)v541 + 1570);
          if (v399 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v399, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 673, "CalcSRCLatencySamples", "calcsrclatencysamples: ref src ltnc = %d samples(@%f Hz), mic src ltnc = %d samples(@%f Hz), out src ltnc = %d samples(@%f Hz)", v389, v534->mSampleRate, v386, v531->mSampleRate, v393, v532->mSampleRate);
          }
          if (v386)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v400 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v401 = (*v400 ? *v400 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 877;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v386;
                _os_log_impl(&dword_1B5ED0000, v401, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> initrefmicringbuffers : mic buffer src ltnc padding %d samples", buf, 0x18u);
              }
            }
            v402 = (int *)*((_QWORD *)v541 + 1570);
            if (v402 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v402, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 877, "InitRefMicRingBuffers", "initrefmicringbuffers : mic buffer src ltnc padding %d samples", v386);
            }
          }
          if (v389)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v403 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v404 = (*v403 ? *v403 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v404, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 882;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v389;
                _os_log_impl(&dword_1B5ED0000, v404, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> initrefmicringbuffers : ref buffer src ltnc padding %d samples", buf, 0x18u);
              }
            }
            v405 = (int *)*((_QWORD *)v541 + 1570);
            if (v405 && (v540[764] || v540[765]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              CALegacyLog::log(v405, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 882, "InitRefMicRingBuffers", "initrefmicringbuffers : ref buffer src ltnc padding %d samples", v389);
            }
          }
          v406 = *((double *)v541 + 123);
          LODWORD(v383) = *((_DWORD *)v541 + 124);
          v407 = (double)*(unint64_t *)&v383;
          v408 = *((double *)v541 + 78);
          v409 = *((double *)v541 + 103);
          v410 = v409 * v407 / v408;
          v411 = vcvtpd_u64_f64(v410);
          v412 = *((_DWORD *)v541 + 127);
          if (vcvtmd_u64_f64(v410) >= v411)
          {
            if (v411)
            {
              v413 = *((_DWORD *)v541 + 127);
              do
              {
                v414 = v411;
                v411 = v413 % v411;
                v413 = v414;
              }
              while (v411);
            }
            else
            {
              v414 = *((_DWORD *)v541 + 127);
            }
            v412 = (v412 / v414 - 1) * v414;
          }
          v417 = v406 * (double)v412 / v409;
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v418 = vcvtpd_u64_f64(v417);
          v419 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v420 = (*v419 ? *v419 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v420, OS_LOG_TYPE_DEBUG))
            {
              v421 = v532->mSampleRate;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 693;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v418;
              *(_WORD *)&buf[24] = 2048;
              *(Float64 *)&buf[26] = v421;
              _os_log_impl(&dword_1B5ED0000, v420, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> calcbufferinglatencysamples: %d samples(@%f Hz)", buf, 0x22u);
            }
          }
          v422 = (int *)*((_QWORD *)v541 + 1570);
          if (v422 && (v540[764] || v540[765]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v422, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 693, "CalcBufferingLatencySamples", "calcbufferinglatencysamples: %d samples(@%f Hz)", v418, v532->mSampleRate);
          }
          v423 = vcvtpd_u64_f64(v406 * v407 / v408);
          v424 = v393 + v418;
          v425 = *((_DWORD *)v541 + 104);
          *((_DWORD *)v541 + 304) = v424 + v423;
          *((_DWORD *)v541 + 305) = v425;
          *((_DWORD *)v541 + 308) = 0;
          *((_QWORD *)v541 + 153) = 0;
          v426 = (void *)*((_QWORD *)v541 + 155);
          v427 = *((_QWORD *)v541 + 156) - (_QWORD)v426;
          v428 = (v424 + v423) * v425;
          if (v428 == v427 >> 2)
          {
            if (v427 >= 1)
            {
              v429 = (unint64_t)v427 >> 2;
              v430 = ((unint64_t)v427 >> 2) + 1;
              bzero(*((void **)v541 + 155), 4 * (v430 - ((unint64_t)v427 > 3)));
LABEL_933:
              bzero(v426, 4 * (v430 - (v429 != 0)));
            }
          }
          else
          {
            std::valarray<float>::resize((uint64_t)v541 + 1240, v428, 0.0);
            v426 = (void *)*((_QWORD *)v541 + 155);
            v431 = *((_QWORD *)v541 + 156) - (_QWORD)v426;
            if (v431 >= 1)
            {
              v429 = (unint64_t)v431 >> 2;
              v430 = ((unint64_t)v431 >> 2) + 1;
              goto LABEL_933;
            }
          }
          if (v424 >= v424 + v423)
            v432 = v424 + v423;
          else
            v432 = v424;
          *((_DWORD *)v541 + 306) = v432;
          *((_DWORD *)v541 + 308) = v432;
          myAllocABLDynamic(v533, v423, (AudioBufferList **)v541 + 157);
          v433 = *((double *)v541 + 123);
          v434 = *((double *)v541 + 78);
          if (v434)
          {
            v435 = v434;
            v436 = v433;
            do
            {
              v437 = v435;
              v435 = v436 % v435;
              v436 = v437;
            }
            while (v435);
          }
          else
          {
            v437 = v433;
          }
          if (!*((_BYTE *)v541 + 1904))
            *((_BYTE *)v541 + 1904) = 1;
          v529 = 0;
          *((_QWORD *)v541 + 233) = v433 / v437;
          *((_QWORD *)v541 + 234) = v434 / v437;
          *(_OWORD *)((char *)v541 + 1880) = xmmword_1B66A0DC0;
          *((_DWORD *)v541 + 474) = 0;
          v294 = *((double *)v541 + 544) + v433 * (double)v386 / v434 + (double)v424;
          *((double *)v541 + 544) = v294;
LABEL_945:
          v438 = 0;
          v439 = 0.0;
          do
          {
            if (((*((_QWORD *)v541 + (v438 >> 6) + 582) >> v438) & 1) != 0 && (_DWORD)v438 != 62)
            {
              v440 = (OpaqueAudioComponentInstance *)*((_QWORD *)v541 + v438 + 347);
              if (v440)
              {
                *(_QWORD *)buf = 0;
                ioDataSize[0] = 8;
                AudioUnitGetProperty(v440, 0xCu, 0, 0, buf, ioDataSize);
                v294 = *(double *)buf;
                if ((v438 - 54) >= 0xFFFFFFFD)
                  v294 = -0.0;
                v439 = v439 + v294;
              }
            }
            ++v438;
          }
          while (v438 != 71);
          LODWORD(v294) = *((_DWORD *)v541 + 127);
          v441 = (double)*(unint64_t *)&v294 / *((double *)v541 + 103);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v442 = v439 + v441;
          v443 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v444 = (*v443 ? *v443 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v444, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 632;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v442;
              _os_log_impl(&dword_1B5ED0000, v444, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> calcinternalprocessinglatency: %f sec", buf, 0x1Cu);
            }
          }
          v445 = (int *)*((_QWORD *)v541 + 1570);
          v446 = v540[764];
          if (v445)
          {
            if (!v540[764] && !v540[765])
            {
              v447 = v541;
              *((double *)v541 + 544) = v442 + *((double *)v541 + 544);
              goto LABEL_986;
            }
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v445, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 632, "CalcInternalProcessingLatency", "calcinternalprocessinglatency: %f sec", v442);
            v446 = v540[764];
          }
          v447 = v541;
          *((double *)v541 + 544) = v442 + *((double *)v541 + 544);
          if (v446)
          {
            v448 = (const __CFString *)*((_QWORD *)v541 + 567);
            if (v448 && (CFRetain(*((CFTypeRef *)v541 + 567)), v449 = CFGetTypeID(v448), v449 != CFStringGetTypeID()))
            {
              *(_QWORD *)ioDataSize = 0;
              CFRelease(v448);
              v448 = 0;
            }
            else
            {
              *(_QWORD *)ioDataSize = v448;
            }
            VoiceProcessorV2::Initialize(void)::$_1::operator()((CFStringRef *)buf, v541, v448);
            if (v448)
              CFRelease(v448);
            v450 = *(const void **)buf;
            AUProcessingBlockBase::SetName(*((AUProcessingBlockBase **)v541 + 1564), *(const __CFString **)buf);
            v451 = (const __CFString *)*((_QWORD *)v541 + 569);
            if (v451 && (CFRetain(*((CFTypeRef *)v541 + 569)), v452 = CFGetTypeID(v451), v452 != CFStringGetTypeID()))
            {
              v551 = 0;
              CFRelease(v451);
              v451 = 0;
            }
            else
            {
              v551 = (VoiceProcessorV2 *)v451;
            }
            VoiceProcessorV2::Initialize(void)::$_1::operator()((CFStringRef *)ioDataSize, v541, v451);
            if (v451)
              CFRelease(v451);
            v453 = *(const void **)ioDataSize;
            AUProcessingBlockBase::SetName(*((AUProcessingBlockBase **)v541 + 1565), *(const __CFString **)ioDataSize);
            if (v453)
              CFRelease(v453);
            if (v450)
              CFRelease(v450);
            v447 = v541;
          }
LABEL_986:
          if (*((_BYTE *)v447 + 476))
            VoiceProcessorV2::SaveFilesInitialize(v541);
          if (v540[764])
          {
            if (*((_DWORD *)v541 + 153) && *((_DWORD *)v541 + 163))
            {
              if (*((_BYTE *)v541 + 476))
              {
                myAllocABLDynamic(v534, *((_DWORD *)v541 + 123), (AudioBufferList **)v541 + 1892);
                myAllocABLDynamic(v531, *((_DWORD *)v541 + 124), (AudioBufferList **)v541 + 1893);
                VoiceProcessorV2::OpenSignalInjectionFiles(v541, 1);
              }
            }
            else
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v454 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                v455 = (*v454 ? *v454 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v455, OS_LOG_TYPE_ERROR))
                {
                  v456 = *((_DWORD *)v541 + 153);
                  v457 = *((_DWORD *)v541 + 163);
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 93;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v456;
                  *(_WORD *)&buf[24] = 1024;
                  *(_DWORD *)&buf[26] = v457;
                  _os_log_impl(&dword_1B5ED0000, v455, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Failed to initialize uplink injection files due to unsupported format, mHwRefASBD.mChannelsPerFrame=%u, mHwMicASBD.mChannelsPerFrame=%u", buf, 0x1Eu);
                }
              }
              v458 = (int *)*((_QWORD *)v541 + 1570);
              if (v458 && (v540[764] || v540[765]))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                CALegacyLog::log(v458, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 93, "InjectionFilesInitialize", "Failed to initialize uplink injection files due to unsupported format, mHwRefASBD.mChannelsPerFrame=%u, mHwMicASBD.mChannelsPerFrame=%u", *((_DWORD *)v541 + 153), *((_DWORD *)v541 + 163));
              }
            }
          }
          if (v540[683])
            fflush((FILE *)*MEMORY[0x1E0C80C10]);
          v459 = *((_QWORD *)v541 + 1994);
          std::string::basic_string[abi:ne180100]<0>(buf, "hwmic");
          v460 = *((unsigned int *)v541 + 124);
          if (AudioIssueDetectorLibraryLoader(void)::once != -1)
            dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_18697);
          if (AudioIssueDetectorLibraryLoader(void)::libSym)
            AudioIssueDetectorLibraryLoader(void)::libSym(v459, buf, 1, v531, v460);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v461 = *((_QWORD *)v541 + 1994);
          std::string::basic_string[abi:ne180100]<0>(buf, "ulout");
          v462 = *((unsigned int *)v541 + 420);
          if (AudioIssueDetectorLibraryLoader(void)::once != -1)
            dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_18697);
          if (AudioIssueDetectorLibraryLoader(void)::libSym)
            AudioIssueDetectorLibraryLoader(void)::libSym(v461, buf, 49, v532, v462);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v463 = *((_QWORD *)v541 + 1994);
          if (AudioIssueDetectorLibraryLoader(void)::once != -1)
            dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_18697);
          if (AudioIssueDetectorLibraryLoader(void)::libSym)
            AudioIssueDetectorLibraryLoader(void)::libSym(v463);
          v464 = *(_OWORD *)((char *)v541 + 920);
          *(_OWORD *)ioDataSize = *(_OWORD *)&v538->mSampleRate;
          v543 = v464;
          v544 = *((_QWORD *)v541 + 117);
          if ((ioDataSize[3] & 0x20) != 0)
          {
            v465 = 1;
          }
          else
          {
            v465 = HIDWORD(v543);
            if (!HIDWORD(v543))
            {
              v466 = (v544 + 7) >> 3;
              goto LABEL_1031;
            }
          }
          v466 = DWORD2(v543) / v465;
LABEL_1031:
          *((_QWORD *)&v543 + 1) = v466 | 0x100000000;
          *(_QWORD *)&v543 = *((_QWORD *)&v543 + 1);
          ioDataSize[3] |= 0x20u;
          v467 = *((_QWORD *)v541 + 1996);
          if (v467 != 561211748)
          {
            if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
              dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_89);
            if (!AudioDataAnalysisManagerLibraryLoader(void)::libSym)
            {
              memset(buf, 0, 24);
              goto LABEL_1038;
            }
            AudioDataAnalysisManagerLibraryLoader(void)::libSym(v467);
          }
          memset(buf, 0, 24);
          if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
            dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_89);
LABEL_1038:
          if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
            v468 = AudioDataAnalysisManagerLibraryLoader(void)::libSym(3, buf);
          else
            v468 = 560033897;
          *((_QWORD *)v541 + 1996) = v468;
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
            v468 = *((_QWORD *)v541 + 1996);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "epout");
          v469 = *((unsigned int *)v541 + 127);
          if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
            dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_89);
          if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
            AudioDataAnalysisManagerLibraryLoader(void)::libSym(v468, 42, buf, ioDataSize, v469, 0);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v470 = *((_DWORD *)v541 + 19);
          if (v470 == 4 || v470 == 2)
          {
            v471 = *((_QWORD *)v541 + 1996);
            if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
              dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_89);
            if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
            {
              AudioDataAnalysisManagerLibraryLoader(void)::libSym(v471, CFSTR("com.apple.facetime"));
              goto LABEL_1059;
            }
          }
          else
          {
            v472 = *((_QWORD *)v541 + 1996);
            v473 = *((_QWORD *)v541 + 272);
            if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
              dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_89);
            if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
            {
              AudioDataAnalysisManagerLibraryLoader(void)::libSym(v472, v473);
LABEL_1059:
              v474 = *((_QWORD *)v541 + 1996);
              if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1)
                dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_89);
LABEL_1062:
              if (AudioDataAnalysisManagerLibraryLoader(void)::libSym)
                AudioDataAnalysisManagerLibraryLoader(void)::libSym(v474);
              VoiceProcessorV2::ReportMetrics(v541);
              *v540 = 1;
              v475 = (CASmartPreferences *)(*(uint64_t (**)(VoiceProcessorV2 *))(*(_QWORD *)v541 + 616))(v541);
              if ((_DWORD)v475)
                v476 = 1.0;
              else
                v476 = 0.459;
              outData[0] = &off_1E69DA760;
              outData[1] = &VoiceProcessorV2::UpdateIOCycleUsage(void)::override_iocycleusage;
              v550 = outData;
              CASmartPreferences::instance(v475);
              *(_QWORD *)buf = CASmartPreferences::InterpretFloat;
              v477 = &buf[8];
              v478 = (uint64_t)v550;
              if (v550)
              {
                if (v550 == outData)
                {
                  *(_QWORD *)&buf[32] = &buf[8];
                  (*(void (**)(_QWORD *, _BYTE *))(outData[0] + 24))(outData, &buf[8]);
LABEL_1072:
                  v554 = 0;
                  v479 = operator new(0x30uLL);
                  v480 = (VoiceProcessorV2 **)v479;
                  v481 = *(_QWORD *)buf;
                  v482 = *(_BYTE **)&buf[32];
                  *v479 = &off_1E69DA718;
                  v479[1] = v481;
                  if (v482)
                  {
                    if (v482 == &buf[8])
                    {
                      v479[5] = v479 + 2;
                      (*(void (**)(_BYTE *))(*(_QWORD *)&buf[8] + 24))(&buf[8]);
LABEL_1078:
                      v554 = v480;
                      CASmartPreferences::_RegisterFirstHandler((uint64_t)&CASmartPreferences::instance(void)::global, CFSTR("faceplanter_iocycleusage"), CFSTR("com.apple.coreaudio"), &v551);
                      v484 = v554;
                      if (v554 == &v551)
                      {
                        v485 = 4;
                        v484 = &v551;
                      }
                      else
                      {
                        if (!v554)
                          goto LABEL_1083;
                        v485 = 5;
                      }
                      (*((void (**)(void))*v484 + v485))();
LABEL_1083:
                      if (*(_BYTE **)&buf[32] == &buf[8])
                      {
                        v486 = 4;
                      }
                      else
                      {
                        if (!*(_QWORD *)&buf[32])
                          goto LABEL_1088;
                        v486 = 5;
                        v477 = *(_QWORD **)&buf[32];
                      }
                      (*(void (**)(_QWORD *))(*v477 + 8 * v486))(v477);
LABEL_1088:
                      v487 = v550;
                      if (v550 == outData)
                      {
                        v488 = 4;
                        v487 = outData;
                      }
                      else
                      {
                        if (!v550)
                          goto LABEL_1093;
                        v488 = 5;
                      }
                      (*(void (**)(void))(*v487 + 8 * v488))();
LABEL_1093:
                      v489 = *(float *)&VoiceProcessorV2::UpdateIOCycleUsage(void)::override_iocycleusage;
                      v490 = *(float *)&VoiceProcessorV2::UpdateIOCycleUsage(void)::override_iocycleusage > 1.0
                          || *(float *)&VoiceProcessorV2::UpdateIOCycleUsage(void)::override_iocycleusage < 0.0;
                      if (v490)
                        v489 = v476;
                      v491 = v541;
                      if (v489 != *((float *)v541 + 290))
                      {
                        *((float *)v541 + 290) = v489;
                        if (VPLogScope(void)::once != -1)
                          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                        v492 = (_QWORD *)VPLogScope(void)::scope;
                        if (VPLogScope(void)::scope
                          && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
                        {
                          v493 = (*v492 ? *v492 : MEMORY[0x1E0C81028]);
                          if (os_log_type_enabled(v493, OS_LOG_TYPE_DEFAULT))
                          {
                            v494 = *((float *)v541 + 290);
                            *(_DWORD *)buf = 136315650;
                            *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 3139;
                            *(_WORD *)&buf[18] = 2048;
                            *(double *)&buf[20] = v494;
                            _os_log_impl(&dword_1B5ED0000, v493, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Notifying PreferredIOCycleUsage changed to %f", buf, 0x1Cu);
                          }
                        }
                        v495 = (int *)*((_QWORD *)v541 + 1570);
                        if (v495 && (v540[764] || v540[765]))
                        {
                          if (VPLogScope(void)::once != -1)
                            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                          CALegacyLog::log(v495, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3139, "UpdateIOCycleUsage", "Notifying PreferredIOCycleUsage changed to %f", *((float *)v541 + 290));
                        }
                        std::mutex::lock((std::mutex *)((char *)v541 + 2664));
                        v496 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((_QWORD *)v541 + 538, 0x70696F63u);
                        if (v496)
                        {
                          v497 = (uint64_t *)v496[3];
                          for (j = (uint64_t *)v496[4]; v497 != j; v497 += 2)
                          {
                            if (v497[1])
                            {
                              if (VPLogScope(void)::once != -1)
                                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                              v499 = (_QWORD *)VPLogScope(void)::scope;
                              if (VPLogScope(void)::scope
                                && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
                              {
                                v500 = (*v499 ? *v499 : MEMORY[0x1E0C81028]);
                                if (os_log_type_enabled(v500, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = 136315650;
                                  *(_QWORD *)&buf[4] = "VoiceProcessor_v2.cpp";
                                  *(_WORD *)&buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 1043;
                                  *(_WORD *)&buf[18] = 1024;
                                  *(_DWORD *)&buf[20] = 1885957987;
                                  _os_log_impl(&dword_1B5ED0000, v500, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Dispatch acync listener for property ID: %d", buf, 0x18u);
                                }
                              }
                              v501 = (int *)*((_QWORD *)v541 + 1570);
                              if (v501 && (v540[764] || v540[765]))
                              {
                                if (VPLogScope(void)::once != -1)
                                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                                CALegacyLog::log(v501, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1043, "NotifyPropertyChanged", "Dispatch acync listener for property ID: %d", 1885957987);
                              }
                              global_queue = dispatch_get_global_queue(0, 0);
                              v503 = global_queue;
                              if (global_queue)
                                dispatch_retain(global_queue);
                              v505 = *v497;
                              v504 = (const void *)v497[1];
                              if (v504)
                                v506 = _Block_copy(v504);
                              else
                                v506 = 0;
                              v507 = (_QWORD *)operator new();
                              v508 = v507;
                              *v507 = v505;
                              v507[1] = 0;
                              if (!v506)
                              {
                                *((_DWORD *)v507 + 4) = 1885957987;
                                *(_QWORD *)buf = 0;
                                dispatch_async_f(v503, v507, (dispatch_function_t)applesauce::dispatch::v1::async<VoiceProcessorV2::NotifyPropertyChanged::$_0>(dispatch_queue_s *,VoiceProcessorV2::NotifyPropertyChanged::$_0 &&)::{lambda(void *)#1}::__invoke);
                                std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
                                if (!v503)
                                  continue;
LABEL_1140:
                                dispatch_release(v503);
                                continue;
                              }
                              v507[1] = _Block_copy(v506);
                              v508[4] = 1885957987;
                              *(_QWORD *)buf = 0;
                              dispatch_async_f(v503, v508, (dispatch_function_t)applesauce::dispatch::v1::async<VoiceProcessorV2::NotifyPropertyChanged::$_0>(dispatch_queue_s *,VoiceProcessorV2::NotifyPropertyChanged::$_0 &&)::{lambda(void *)#1}::__invoke);
                              std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
                              _Block_release(v506);
                              if (v503)
                                goto LABEL_1140;
                            }
                          }
                        }
                        std::mutex::unlock((std::mutex *)((char *)v541 + 2664));
                        v491 = v541;
                      }
                      if (VoiceProcessorV2::ShouldInteractWithControlCenter(v491))
                        (*(void (**)(VoiceProcessorV2 *, uint64_t))(*(_QWORD *)v541 + 584))(v541, 14);
                      return v529;
                    }
                    v483 = &buf[32];
                    v479[5] = v482;
                  }
                  else
                  {
                    v483 = v479 + 5;
                  }
                  *v483 = 0;
                  goto LABEL_1078;
                }
                v478 = (*(uint64_t (**)(void))(*v550 + 16))();
              }
              *(_QWORD *)&buf[32] = v478;
              goto LABEL_1072;
            }
          }
          v474 = *((_QWORD *)v541 + 1996);
          goto LABEL_1062;
        }
      }
    }
    v112 = *((_DWORD *)v541 + 19);
    if ((v112 - 2) >= 5)
    {
      if (v112 == 1)
      {
        ShouldUseOptimizedBlockSizeForFacePlant = VoiceProcessorV2::ShouldUseOptimizedBlockSizeForFacePlant(v541);
        v511 = 0.012;
        if ((_DWORD)ShouldUseOptimizedBlockSizeForFacePlant)
          v511 = 0.01;
        LODWORD(ShouldUseOptimizedBlockSizeForFacePlant) = vcvtpd_u64_f64(v511 * *((double *)v541 + 103));
        NextFFTFriendlyBlkSz = BlockSizeHelper::GetNextFFTFriendlyBlkSz(ShouldUseOptimizedBlockSizeForFacePlant);
        goto LABEL_262;
      }
      if (v112 != 8)
      {
        v415 = *((double *)v541 + 103);
        if (*((_BYTE *)v541 + 1984))
        {
          LODWORD(mSampleRate) = *((_DWORD *)v541 + 124);
          v416 = v415 / *((double *)v541 + 78) * (double)*(unint64_t *)&mSampleRate;
        }
        else
        {
          v416 = (float)*((unsigned int *)v541 + 124);
        }
        if (fmodf(v416, 1.0) == 0.0)
        {
          v512 = (float)vcvtpd_u64_f64(v415 * 0.008);
          v513 = (float)vcvtmd_u64_f64(v415 * 0.02);
          if (v416 < v512 || v416 > v513)
          {
            v515 = (float)vcvtpd_u64_f64(v415 * 0.01);
            v516 = -1;
            v517 = 0.0;
            for (k = 2; k != 8; ++k)
            {
              if (v416 < v512)
                v519 = v416 * (float)k;
              else
                v519 = v416 / (float)k;
              v520 = fmodf(v519, 1.0);
              if (v519 < v512
                || (v520 == 0.0 ? (v521 = v519 > v513) : (v521 = 1),
                    v521
                 || (v69 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v519), v519 != (float)v69)))
              {
                v519 = v517;
              }
              else
              {
                v522 = vabds_f32(v519, v515);
                v490 = v516 > v522;
                v516 = v522;
                if (!v490)
                  break;
              }
              v517 = v519;
            }
            if (v517 != 0.0)
            {
              v104 = v517;
              goto LABEL_263;
            }
          }
          else
          {
            v104 = v416;
            v69 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v416);
            if (v416 == (float)v69)
              goto LABEL_263;
          }
        }
      }
    }
    LODWORD(v69) = vcvtpd_u64_f64(v535->mSampleRate * 0.01);
    NextFFTFriendlyBlkSz = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v69);
LABEL_262:
    v104 = NextFFTFriendlyBlkSz;
    goto LABEL_263;
  }
LABEL_237:
  if (*((_BYTE *)v541 + 1952))
  {
    *(_QWORD *)buf = v66;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)v541 + 1952) = 0;
  }
  if (*((_BYTE *)v541 + 1984))
  {
    *(_QWORD *)buf = v67;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)v541 + 1984) = 0;
  }
  if (*((_BYTE *)v541 + 1392))
  {
    *(_QWORD *)buf = v68;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((_BYTE *)v541 + 1392) = 0;
  }
  v108 = *((_QWORD *)v541 + 249);
  *((_QWORD *)v541 + 249) = 0;
  if (v108)
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v109 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v110 = (*v109 ? *v109 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1010;
      _os_log_impl(&dword_1B5ED0000, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> initialize: error initializing sample rate converters", buf, 0x12u);
    }
  }
  v111 = (int *)*((_QWORD *)v541 + 1570);
  if (v111 && (v540[764] || v540[765]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v111, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 1010, "Initialize", "initialize: error initializing sample rate converters");
  }
  return v101;
}

void sub_1B64CB5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::Initialize(void)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  const applesauce::CF::StringRef *v3;
  const __CFString **v4;
  const void *v5;
  const __CFString *v6;
  _QWORD *v7;
  NSObject *v8;
  void **v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  _DWORD *v14;
  const applesauce::CF::StringRef *v15;
  const applesauce::CF::StringRef *v16;
  _QWORD *v17;
  NSObject *v18;
  int v19;
  int *v20;
  _QWORD *v21;
  NSObject *v22;
  int v23;
  int *v24;
  int v25;
  _QWORD *v26;
  NSObject *v27;
  int *v28;
  void *__p[2];
  char v30;
  _BYTE buf[12];
  __int16 v32;
  int v33;
  __int16 v34;
  void **v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = **a1;
  v2 = *v1;
  vp::GetBundleIDForAVFoundationSPI((applesauce::CF::StringRef *)buf, *(_DWORD *)(*v1 + 76), *(CFTypeRef *)(*v1 + 2176), *(_DWORD *)(*v1 + 64));
  v4 = (const __CFString **)(v2 + 16552);
  v5 = *(const void **)(v2 + 16552);
  v6 = *(const __CFString **)buf;
  *(_QWORD *)(v2 + 16552) = *(_QWORD *)buf;
  if (v5)
  {
    CFRelease(v5);
    v6 = *v4;
  }
  if (v6)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v7 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        applesauce::CF::convert_to<std::string,0>(*v4, (uint64_t)__p);
        v9 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        v32 = 1024;
        v33 = 945;
        v34 = 2080;
        v35 = v9;
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> The bundleID for AVFoundationSPI is %s", buf, 0x1Cu);
        if (v30 < 0)
          operator delete(__p[0]);
      }
    }
    v10 = (_BYTE *)(v2 + 15897);
    v11 = *(int **)(v2 + 12560);
    if (v11 && (*v10 || *(_BYTE *)(v2 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v12 = VPLogScope(void)::scope;
      applesauce::CF::convert_to<std::string,0>(*v4, (uint64_t)buf);
      if (SBYTE3(v35) >= 0)
        v13 = buf;
      else
        v13 = *(const char **)buf;
      CALegacyLog::log(v11, 3, v12, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 945, "operator()", "The bundleID for AVFoundationSPI is %s", v13);
      if (SBYTE3(v35) < 0)
        operator delete(*(void **)buf);
    }
    v14 = (_DWORD *)(v2 + 16536);
    vp::InitializeControlCenterListenersForBundleID(*(vp **)(v2 + 16552), v3);
    *(_DWORD *)(v2 + 16536) = vp::GetRequestedChatFlavorForBundleID(*(vp **)(v2 + 16552), v15);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v17 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v18 = (*v17 ? *v17 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *v14;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        v32 = 1024;
        v33 = 950;
        v34 = 1024;
        LODWORD(v35) = v19;
        _os_log_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> At VP's first time init, the chat flavor is selected as %d", buf, 0x18u);
      }
    }
    v20 = *(int **)(v2 + 12560);
    if (v20 && (*v10 || *(_BYTE *)(v2 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v20, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 950, "operator()", "At VP's first time init, the chat flavor is selected as %d", *v14);
    }
    if (*v10)
      VoiceProcessorV2::PListWriteSetPropertyParameters((VoiceProcessorV2 *)v2, 1718384242);
    *(_BYTE *)(v2 + 2268) = vp::IsAutomaticChatFlavorEnabledForBundleID((vp *)(v2 + 16552), v16);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v21 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v22 = (*v21 ? *v21 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(unsigned __int8 *)(v2 + 2268);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
        v32 = 1024;
        v33 = 954;
        v34 = 1024;
        LODWORD(v35) = v23;
        _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> At VP's first time init, automatic chat flavor enabled is selected as %d", buf, 0x18u);
      }
    }
    v24 = *(int **)(v2 + 12560);
    v25 = *v10;
    if (v24)
    {
      if (!*v10 && !*(_BYTE *)(v2 + 15898))
      {
LABEL_61:
        if (*v14)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v26 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            v27 = (*v26 ? *v26 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "vpInitializeUplink.cpp";
              v32 = 1024;
              v33 = 959;
              _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Forcing bypass to false due to chat flavor", buf, 0x12u);
            }
          }
          v28 = *(int **)(v2 + 12560);
          if (v28 && (*v10 || *(_BYTE *)(v2 + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v28, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 959, "operator()", "Forcing bypass to false due to chat flavor");
          }
          *(_BYTE *)(v2 + 472) = 0;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 592))(v2);
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 600))(v2);
        return;
      }
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v24, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 954, "operator()", "At VP's first time init, automatic chat flavor enabled is selected as %d", *(unsigned __int8 *)(v2 + 2268));
      v25 = *v10;
    }
    if (v25)
      VoiceProcessorV2::PListWriteSetPropertyParameters((VoiceProcessorV2 *)v2, 1635085677);
    goto LABEL_61;
  }
}

void sub_1B64CBE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::Initialize(void)::$_1::operator()(CFStringRef *a1, VoiceProcessorV2 *a2, const __CFString *a3)
{
  uint64_t v5;
  std::string *end;
  unsigned int FarEndVoiceMixChannelCount;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  size_t size;
  void *p_v;
  std::vector<std::string>::pointer v16;
  const std::string::value_type *first;
  std::string::size_type end_high;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  std::string *v23;
  CFIndex v24;
  CFStringRef v25;
  std::runtime_error *exception;
  std::vector<std::string> v27;
  std::string v28;
  std::__split_buffer<std::string> __v;

  if (a3)
  {
    applesauce::CF::convert_to<std::string,0>(a3, (uint64_t)&v28);
    memset(&v27, 0, sizeof(v27));
    if (*((_BYTE *)a2 + 2244))
    {
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v27.__end_cap_, 1uLL);
      __v.__begin_ = __v.__first_;
      __v.__end_ = __v.__first_;
      __v.__end_cap_.__value_ = &__v.__first_[v5];
      std::string::basic_string[abi:ne180100]<0>(__v.__first_->__r_.__value_.__r.__words, "media");
      ++__v.__end_;
      std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
      end = v27.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v27.__end_ = end;
    }
    else
    {
      end = 0;
    }
    if (*((_BYTE *)a2 + 2245))
    {
      FarEndVoiceMixChannelCount = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(a2);
      end = v27.__end_;
      if (FarEndVoiceMixChannelCount >= 2)
      {
        if (v27.__end_ >= v27.__end_cap_.__value_)
        {
          v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3);
          if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v9 = 0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3);
          if (v9 <= v8 + 1)
            v9 = v8 + 1;
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) >= 0x555555555555555)
            v10 = 0xAAAAAAAAAAAAAAALL;
          else
            v10 = v9;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
          if (v10)
            v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v27.__end_cap_, v10);
          else
            v11 = 0;
          __v.__first_ = v11;
          __v.__begin_ = v11 + v8;
          __v.__end_ = __v.__begin_;
          __v.__end_cap_.__value_ = &v11[v10];
          std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, "spatial");
          ++__v.__end_;
          std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
          end = v27.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v27.__end_->__r_.__value_.__r.__words, "spatial");
          ++end;
        }
        v27.__end_ = end;
      }
    }
    if (v27.__begin_ != end)
    {
      std::string::append(&v28, " (", 2uLL);
      begin = v27.__begin_;
      for (i = v27.__end_; begin != i; ++begin)
      {
        if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
        else
          size = begin->__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__v, size + 2);
        if (SHIBYTE(__v.__end_) >= 0)
          p_v = &__v;
        else
          p_v = __v.__first_;
        if (size)
        {
          if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = begin;
          else
            v16 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
          memmove(p_v, v16, size);
        }
        strcpy((char *)p_v + size, ", ");
        if (SHIBYTE(__v.__end_) >= 0)
          first = (const std::string::value_type *)&__v;
        else
          first = (const std::string::value_type *)__v.__first_;
        if (SHIBYTE(__v.__end_) >= 0)
          end_high = HIBYTE(__v.__end_);
        else
          end_high = (std::string::size_type)__v.__begin_;
        std::string::append(&v28, first, end_high);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
        v19 = --v28.__r_.__value_.__l.__size_;
      }
      else
      {
        v19 = HIBYTE(v28.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v28.__r_.__value_.__s + 23) = v19 & 0x7F;
        v20 = &v28;
      }
      v20->__r_.__value_.__s.__data_[v19] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
        v21 = --v28.__r_.__value_.__l.__size_;
      }
      else
      {
        v21 = HIBYTE(v28.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v28.__r_.__value_.__s + 23) = v21 & 0x7F;
        v22 = &v28;
      }
      v22->__r_.__value_.__s.__data_[v21] = 0;
      std::string::append(&v28, ")", 1uLL);
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v28;
    else
      v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      v24 = v28.__r_.__value_.__l.__size_;
    v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
    *a1 = v25;
    if (!v25)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v27;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_1B64CC1D8(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::string> *a13, void *__pa, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a11;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (a19 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_18702()
{
  void *v0;
  char *v1;
  int v2;
  char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
    goto LABEL_5;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315138;
    v3 = dlerror();
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v1 = dlerror();
    v2 = 136315138;
    v3 = v1;
    _os_log_error_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

void VoiceProcessorV2::OpenSignalInjectionFiles(VoiceProcessorV2 *this, uint64_t a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const char *v12;
  size_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  uint64_t v17;
  __int128 v18;
  int *v19;
  int v20;
  char *v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  _QWORD *v29;
  NSObject *v30;
  void **v31;
  int *v32;
  void **v33;
  _QWORD *v34;
  NSObject *v35;
  void **v36;
  int *v37;
  void **v38;
  uint64_t v39;
  int *v40;
  int v41;
  char *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  _QWORD *v48;
  NSObject *v49;
  void **v50;
  int *v51;
  void **v52;
  _QWORD *v53;
  NSObject *v54;
  void **v55;
  int *v56;
  void **v57;
  uint64_t v58;
  int *v59;
  int v60;
  char *v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  _QWORD *v67;
  NSObject *v68;
  void **v69;
  int *v70;
  void **v71;
  _QWORD *v72;
  NSObject *v73;
  void **v74;
  int *v75;
  void **v76;
  double v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  NSObject *v82;
  void **v83;
  int *v84;
  void **v85;
  _QWORD *v86;
  NSObject *v87;
  void **v88;
  int *v89;
  void **v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  NSObject *v96;
  void **v97;
  uint64_t v98;
  int *v99;
  void **v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  NSObject *v105;
  void **v106;
  uint64_t v107;
  int *v108;
  void **v109;
  uint64_t v110;
  int *v111;
  int v112;
  char *v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v117;
  char v118;
  _QWORD *v119;
  NSObject *v120;
  void **v121;
  int *v122;
  void **v123;
  double v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  _QWORD *v128;
  NSObject *v129;
  void **v130;
  int *v131;
  void **v132;
  _QWORD *v133;
  NSObject *v134;
  void **v135;
  int *v136;
  void **v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  NSObject *v145;
  void **v146;
  uint64_t v147;
  int *v148;
  void **v149;
  OSStatus v150;
  void *v151[2];
  unsigned __int8 v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::__fs::filesystem::path ioNumberFrames;
  AudioStreamBasicDescription v159;
  ExtAudioFileRef inExtAudioFile;
  std::string v161;
  void *v162[2];
  uint64_t v163;
  void *__p[2];
  uint64_t v165;
  _BYTE buf[50];
  std::string::value_type __s[16];
  char v168[16];
  std::string v169;
  _QWORD v170[5];

  v170[2] = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v165 = 0;
  v162[0] = 0;
  v162[1] = 0;
  v163 = 0;
  memset(&v161, 0, sizeof(v161));
  std::string::append[abi:ne180100]<char const*,0>(&v161, "/tmp/", "");
  v4 = 0;
  v150 = 0;
  v5 = (char *)this + 15897;
  do
  {
    v6 = 1 << v4;
    if (((1 << v4) & *((unsigned int *)this + 3788)) != 0 || (v6 & *((_DWORD *)this + 3862)) != 0)
    {
      if ((_DWORD)a2)
      {
        if (v4 <= 0xB && ((1 << v4) & 0xC07) != 0)
          goto LABEL_388;
      }
      else
      {
        v7 = *((_DWORD *)this + 1127);
        if (v7 == 1)
        {
          if (v4 >= 4 && (v4 & 0xE) != 0xA)
            goto LABEL_388;
        }
        else if (!v7 && (v4 > 0xB || ((1 << v4) & 0xC07) == 0))
        {
          goto LABEL_388;
        }
      }
      if (((1 << v4) & *((unsigned int *)this + 3788)) != 0)
      {
        vp::Audio_File::Audio_File(&inExtAudioFile);
        VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)&v159, (uint64_t)this, v4);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v168, **((_DWORD **)this + 292));
        std::string::basic_string[abi:ne180100]<0>(&v153, v168);
        v8 = std::string::insert(&v153, 0, "vp.inject.", 0xAuLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        v10 = std::string::append(&v154, ".", 1uLL);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, **((_DWORD **)this + 295));
        v13 = strlen(v12);
        v14 = std::string::append(&v155, __s, v13);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v169.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        v16 = std::string::append(&v169, ".", 1uLL);
        v17 = 0;
        v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v18;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        v19 = kVPInjectionAndAdditionFileIndexToCodeArray;
        while (1)
        {
          v20 = *v19;
          v19 += 4;
          if (v4 == v20)
            break;
          if (++v17 == 12)
          {
            v21 = "badinjectionfile";
            goto LABEL_21;
          }
        }
        v21 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v17 + 2];
LABEL_21:
        std::string::basic_string[abi:ne180100]<0>(v151, v21);
        if ((v152 & 0x80u) == 0)
          v22 = v151;
        else
          v22 = (void **)v151[0];
        if ((v152 & 0x80u) == 0)
          v23 = v152;
        else
          v23 = (std::string::size_type)v151[1];
        v24 = std::string::append(&v156, (const std::string::value_type *)v22, v23);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v157, ".wav", 4uLL);
        v27 = v26->__r_.__value_.__r.__words[0];
        v170[0] = v26->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v170 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
        v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v27;
        *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v170 + 7);
        ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v170[0];
        *((_BYTE *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v28;
        v170[0] = 0;
        *(_QWORD *)((char *)v170 + 7) = 0;
        std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
        if (SHIBYTE(v165) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)buf;
        v165 = *(_QWORD *)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if ((char)v152 < 0)
          operator delete(v151[0]);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v153.__r_.__value_.__l.__data_);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v29 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v30 = (*v29 ? *v29 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            v31 = __p;
            if (v165 < 0)
              v31 = (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 264;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v31;
            _os_log_impl(&dword_1B5ED0000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening route-specific injection file %s", buf, 0x1Cu);
          }
        }
        v32 = (int *)*((_QWORD *)this + 1570);
        if (v32 && (*v5 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v33 = __p;
          if (v165 < 0)
            v33 = (void **)__p[0];
          CALegacyLog::log(v32, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 264, "OpenSignalInjectionFiles", "opening route-specific injection file %s", (const char *)v33);
        }
        vp::Audio_File::open_for_reading((uint64_t)__p, &v159, (std::string::size_type *)buf);
        vp::Audio_File::operator=((uint64_t *)&inExtAudioFile, (uint64_t *)buf);
        vp::Audio_File::~Audio_File((vp::Audio_File *)buf);
        if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v34 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v35 = (*v34 ? *v34 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              v36 = __p;
              if (v165 < 0)
                v36 = (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 267;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v36;
              _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error opening injection file %s", buf, 0x1Cu);
            }
          }
          v37 = (int *)*((_QWORD *)this + 1570);
          if (v37 && (*v5 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v38 = __p;
            if (v165 < 0)
              v38 = (void **)__p[0];
            CALegacyLog::log(v37, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 267, "OpenSignalInjectionFiles", "error opening injection file %s", (const char *)v38);
          }
        }
        if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          v39 = 0;
          v40 = kVPInjectionAndAdditionFileIndexToCodeArray;
          while (1)
          {
            v41 = *v40;
            v40 += 4;
            if (v4 == v41)
              break;
            if (++v39 == 12)
            {
              v42 = "badinjectionfile";
              goto LABEL_90;
            }
          }
          v42 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v39 + 2];
LABEL_90:
          std::string::basic_string[abi:ne180100]<0>(&v156, v42);
          v43 = std::string::insert(&v156, 0, "vp.inject.", 0xAuLL);
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          v45 = std::string::append(&v157, ".wav", 4uLL);
          v46 = v45->__r_.__value_.__r.__words[0];
          v169.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
          v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v46;
          *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
          ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
          *((_BYTE *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v47;
          std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
          if (SHIBYTE(v165) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = *(_OWORD *)buf;
          v165 = *(_QWORD *)&buf[16];
          buf[23] = 0;
          buf[0] = 0;
          if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v156.__r_.__value_.__l.__data_);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v48 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v49 = (*v48 ? *v48 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            {
              v50 = __p;
              if (v165 < 0)
                v50 = (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 287;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v50;
              _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening generic injection file %s", buf, 0x1Cu);
            }
          }
          v51 = (int *)*((_QWORD *)this + 1570);
          if (v51 && (*v5 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v52 = __p;
            if (v165 < 0)
              v52 = (void **)__p[0];
            CALegacyLog::log(v51, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 287, "OpenSignalInjectionFiles", "opening generic injection file %s", (const char *)v52);
          }
          vp::Audio_File::open_for_reading((uint64_t)__p, &v159, (std::string::size_type *)buf);
          vp::Audio_File::operator=((uint64_t *)&inExtAudioFile, (uint64_t *)buf);
          vp::Audio_File::~Audio_File((vp::Audio_File *)buf);
          if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v53 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v54 = (*v53 ? *v53 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
              {
                v55 = __p;
                if (v165 < 0)
                  v55 = (void **)__p[0];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 290;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v55;
                _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error opening injection file %s", buf, 0x1Cu);
              }
            }
            v56 = (int *)*((_QWORD *)this + 1570);
            if (v56 && (*v5 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v57 = __p;
              if (v165 < 0)
                v57 = (void **)__p[0];
              CALegacyLog::log(v56, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 290, "OpenSignalInjectionFiles", "error opening injection file %s", (const char *)v57);
            }
          }
        }
        if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          v58 = 0;
          v59 = kVPInjectionAndAdditionFileIndexToCodeArray;
          while (1)
          {
            v60 = *v59;
            v59 += 4;
            if (v4 == v60)
              break;
            if (++v58 == 12)
            {
              v61 = "badinjectionfile";
              goto LABEL_143;
            }
          }
          v61 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v58 + 2];
LABEL_143:
          std::string::basic_string[abi:ne180100]<0>(&v156, v61);
          v62 = std::string::insert(&v156, 0, "iiii.000.", 9uLL);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          v64 = std::string::append(&v157, ".wav", 4uLL);
          v65 = v64->__r_.__value_.__r.__words[0];
          v169.__r_.__value_.__r.__words[0] = v64->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7);
          v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v65;
          *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
          ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
          *((_BYTE *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v66;
          std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
          if (SHIBYTE(v165) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = *(_OWORD *)buf;
          v165 = *(_QWORD *)&buf[16];
          buf[23] = 0;
          buf[0] = 0;
          if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v156.__r_.__value_.__l.__data_);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v67 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v68 = (*v67 ? *v67 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              v69 = __p;
              if (v165 < 0)
                v69 = (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 311;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v69;
              _os_log_impl(&dword_1B5ED0000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening injection file %s", buf, 0x1Cu);
            }
          }
          v70 = (int *)*((_QWORD *)this + 1570);
          if (v70 && (*v5 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v71 = __p;
            if (v165 < 0)
              v71 = (void **)__p[0];
            CALegacyLog::log(v70, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 311, "OpenSignalInjectionFiles", "opening injection file %s", (const char *)v71);
          }
          vp::Audio_File::open_for_reading((uint64_t)__p, &v159, (std::string::size_type *)buf);
          vp::Audio_File::operator=((uint64_t *)&inExtAudioFile, (uint64_t *)buf);
          vp::Audio_File::~Audio_File((vp::Audio_File *)buf);
          if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v72 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v73 = (*v72 ? *v72 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
              {
                v74 = __p;
                if (v165 < 0)
                  v74 = (void **)__p[0];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 314;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v74;
                _os_log_impl(&dword_1B5ED0000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error opening injection file %s", buf, 0x1Cu);
              }
            }
            v75 = (int *)*((_QWORD *)this + 1570);
            if (v75 && (*v5 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v76 = __p;
              if (v165 < 0)
                v76 = (void **)__p[0];
              CALegacyLog::log(v75, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 314, "OpenSignalInjectionFiles", "error opening injection file %s", (const char *)v76);
            }
          }
        }
        if (vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          vp::Audio_File::get_property<CA::StreamDescription,(decltype(nullptr))0>(&inExtAudioFile, 0x66666D74u, (uint64_t)buf);
          caulk::expected<CA::StreamDescription,int>::value((uint64_t)buf);
          v77 = *(double *)buf;
          v78 = vp::Audio_File::get_property<long long,(decltype(nullptr))0>(&inExtAudioFile, 0x2366726Du);
          if (v79)
            v80 = v78;
          else
            v80 = 0;
          if (v159.mSampleRate == v77)
          {
            *((_QWORD *)this + 3 * v4 + 1897) = v80;
          }
          else
          {
            *((_QWORD *)this + 3 * v4 + 1897) = vcvtmd_s64_f64(v159.mSampleRate * (double)v80 / v77);
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v81 = (_QWORD *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v82 = (*v81 ? *v81 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                v83 = __p;
                if (v165 < 0)
                  v83 = (void **)__p[0];
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 325;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v83;
                *(_WORD *)&buf[28] = 2048;
                *(double *)&buf[30] = v77;
                *(_WORD *)&buf[38] = 2048;
                *(Float64 *)&buf[40] = v159.mSampleRate;
                _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> injection file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", buf, 0x30u);
              }
            }
            v84 = (int *)*((_QWORD *)this + 1570);
            if (v84 && (*v5 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v85 = __p;
              if (v165 < 0)
                v85 = (void **)__p[0];
              CALegacyLog::log(v84, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 325, "OpenSignalInjectionFiles", "injection file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", (const char *)v85, v77, v159.mSampleRate);
            }
          }
          v94 = a2;
          if (v150 || (v101 = (char *)this + 24 * v4, v102 = *((_QWORD *)v101 + 1897), v102 < 1))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v95 = (_QWORD *)VPLogScope(void)::scope;
            a2 = v94;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              v96 = (*v95 ? *v95 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
              {
                v97 = __p;
                if (v165 < 0)
                  v97 = (void **)__p[0];
                v98 = *((_QWORD *)this + 3 * v4 + 1897);
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 339;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v150;
                *(_WORD *)&buf[24] = 2080;
                *(_QWORD *)&buf[26] = v97;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v98;
                _os_log_impl(&dword_1B5ED0000, v96, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error %d getting length of injection file %s, length %d", buf, 0x28u);
              }
            }
            v99 = (int *)*((_QWORD *)this + 1570);
            if (v99 && (*v5 || *((_BYTE *)this + 15898)))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v100 = __p;
              if (v165 < 0)
                v100 = (void **)__p[0];
              CALegacyLog::log(v99, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 339, "OpenSignalInjectionFiles", "error %d getting length of injection file %s, length %d", v150, (const char *)v100, *((_QWORD *)this + 3 * v4 + 1897));
            }
          }
          else
          {
            LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_) = *((_QWORD *)v101 + 1897);
            myAllocABLDynamic(&v159, v102, (AudioBufferList **)v101 + 1895);
            v150 = ExtAudioFileRead(inExtAudioFile, (UInt32 *)&ioNumberFrames, *((AudioBufferList **)v101 + 1895));
            v103 = v101 + 15176;
            if (v150 || LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_) != *(_DWORD *)v103)
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v104 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                v105 = (*v104 ? *v104 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                {
                  v106 = __p;
                  if (v165 < 0)
                    v106 = (void **)__p[0];
                  v107 = *v103;
                  *(_DWORD *)buf = 136316418;
                  *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 335;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = v106;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v150;
                  *(_WORD *)&buf[34] = 2048;
                  *(_QWORD *)&buf[36] = v107;
                  *(_WORD *)&buf[44] = 1024;
                  *(_DWORD *)&buf[46] = ioNumberFrames.__pn_.__r_.__value_.__l.__data_;
                  _os_log_impl(&dword_1B5ED0000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", buf, 0x32u);
                }
              }
              v108 = (int *)*((_QWORD *)this + 1570);
              if (v108 && (*v5 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v109 = __p;
                if (v165 < 0)
                  v109 = (void **)__p[0];
                CALegacyLog::log(v108, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 335, "OpenSignalInjectionFiles", "error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", (const char *)v109, v150, *v103, LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_));
              }
              *v103 = LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
            }
            a2 = v94;
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v86 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            v87 = (*v86 ? *v86 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
            {
              v88 = __p;
              if (v165 < 0)
                v88 = (void **)__p[0];
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 341;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v150;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = v88;
              _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d opening injection file %s, will use original (not injected) signal", buf, 0x22u);
            }
          }
          v89 = (int *)*((_QWORD *)this + 1570);
          if (v89 && (*v5 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v90 = __p;
            if (v165 < 0)
              v90 = (void **)__p[0];
            CALegacyLog::log(v89, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 341, "OpenSignalInjectionFiles", "error %d opening injection file %s, will use original (not injected) signal", v150, (const char *)v90);
          }
          v91 = (char *)this + 24 * v4;
          if (*((_QWORD *)v91 + 1895))
          {
            v92 = v91 + 15160;
            myFreeABLDynamic((AudioBufferList **)v91 + 1895);
            *v92 = 0;
          }
          v93 = (char *)this + 24 * v4;
          *((_QWORD *)v93 + 1897) = 0;
          *((_QWORD *)v93 + 1896) = 0;
        }
        vp::Audio_File::~Audio_File((vp::Audio_File *)&inExtAudioFile);
      }
    }
    if ((v6 & *((_DWORD *)this + 3862)) != 0)
    {
      VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)&v159, (uint64_t)this, v4);
      v110 = 0;
      v111 = kVPInjectionAndAdditionFileIndexToCodeArray;
      while (1)
      {
        v112 = *v111;
        v111 += 4;
        if (v4 == v112)
          break;
        if (++v110 == 12)
        {
          v113 = "badinjectionfile";
          goto LABEL_288;
        }
      }
      v113 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v110 + 2];
LABEL_288:
      std::string::basic_string[abi:ne180100]<0>(&v156, v113);
      v114 = std::string::insert(&v156, 0, "aaaa.000.", 9uLL);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      v116 = std::string::append(&v157, ".wav", 4uLL);
      v117 = v116->__r_.__value_.__r.__words[0];
      v169.__r_.__value_.__r.__words[0] = v116->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v116->__r_.__value_.__r.__words[1] + 7);
      v118 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v117;
      *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
      ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
      *((_BYTE *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v118;
      std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
      if (SHIBYTE(v163) < 0)
        operator delete(v162[0]);
      *(_OWORD *)v162 = *(_OWORD *)buf;
      v163 = *(_QWORD *)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v119 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v120 = (*v119 ? *v119 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
        {
          v121 = v162;
          if (v163 < 0)
            v121 = (void **)v162[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 367;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v121;
          _os_log_impl(&dword_1B5ED0000, v120, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening addition file %s", buf, 0x1Cu);
        }
      }
      v122 = (int *)*((_QWORD *)this + 1570);
      if (v122 && (*v5 || *((_BYTE *)this + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v123 = v162;
        if (v163 < 0)
          v123 = (void **)v162[0];
        CALegacyLog::log(v122, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 367, "OpenSignalInjectionFiles", "opening addition file %s", (const char *)v123);
      }
      vp::Audio_File::open_for_reading((uint64_t)v162, &v159, (std::string::size_type *)&ioNumberFrames);
      if (vp::Audio_File::operator BOOL(&ioNumberFrames))
      {
        vp::Audio_File::get_property<CA::StreamDescription,(decltype(nullptr))0>((ExtAudioFileRef *)&ioNumberFrames, 0x66666D74u, (uint64_t)buf);
        caulk::expected<CA::StreamDescription,int>::value((uint64_t)buf);
        v124 = *(double *)buf;
        v125 = vp::Audio_File::get_property<long long,(decltype(nullptr))0>((ExtAudioFileRef *)&ioNumberFrames, 0x2366726Du);
        if (v126)
          v127 = v125;
        else
          v127 = 0;
        if (v159.mSampleRate == v124)
        {
          *((_QWORD *)this + 3 * v4 + 1934) = v127;
        }
        else
        {
          *((_QWORD *)this + 3 * v4 + 1934) = vcvtmd_s64_f64(v159.mSampleRate * (double)v127 / v124);
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v128 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v129 = (*v128 ? *v128 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
            {
              v130 = v162;
              if (v163 < 0)
                v130 = (void **)v162[0];
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 378;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v130;
              *(_WORD *)&buf[28] = 2048;
              *(double *)&buf[30] = v124;
              *(_WORD *)&buf[38] = 2048;
              *(Float64 *)&buf[40] = v159.mSampleRate;
              _os_log_impl(&dword_1B5ED0000, v129, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> addition file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", buf, 0x30u);
            }
          }
          v131 = (int *)*((_QWORD *)this + 1570);
          if (v131 && (*v5 || *((_BYTE *)this + 15898)))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v132 = v162;
            if (v163 < 0)
              v132 = (void **)v162[0];
            CALegacyLog::log(v131, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 378, "OpenSignalInjectionFiles", "addition file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", (const char *)v132, v124, v159.mSampleRate);
          }
        }
        if (!v150)
        {
          v141 = (char *)this + 24 * v4;
          v142 = *((_QWORD *)v141 + 1934);
          if (v142 < 1)
          {
            v150 = 0;
          }
          else
          {
            LODWORD(v157.__r_.__value_.__l.__data_) = *((_QWORD *)v141 + 1934);
            myAllocABLDynamic(&v159, v142, (AudioBufferList **)v141 + 1932);
            v150 = ExtAudioFileRead((ExtAudioFileRef)ioNumberFrames.__pn_.__r_.__value_.__l.__data_, (UInt32 *)&v157, *((AudioBufferList **)v141 + 1932));
            v143 = v141 + 15472;
            if (v150 || LODWORD(v157.__r_.__value_.__l.__data_) != *(_DWORD *)v143)
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v144 = (_QWORD *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                v145 = (*v144 ? *v144 : MEMORY[0x1E0C81028]);
                if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                {
                  v146 = v162;
                  if (v163 < 0)
                    v146 = (void **)v162[0];
                  v147 = *v143;
                  *(_DWORD *)buf = 136316418;
                  *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 388;
                  *(_WORD *)&buf[18] = 2080;
                  *(_QWORD *)&buf[20] = v146;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v150;
                  *(_WORD *)&buf[34] = 2048;
                  *(_QWORD *)&buf[36] = v147;
                  *(_WORD *)&buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v157.__r_.__value_.__l.__data_;
                  _os_log_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", buf, 0x32u);
                }
              }
              v148 = (int *)*((_QWORD *)this + 1570);
              if (v148 && (*v5 || *((_BYTE *)this + 15898)))
              {
                if (VPLogScope(void)::once != -1)
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
                v149 = v162;
                if (v163 < 0)
                  v149 = (void **)v162[0];
                CALegacyLog::log(v148, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 388, "OpenSignalInjectionFiles", "error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", (const char *)v149, v150, *v143, LODWORD(v157.__r_.__value_.__l.__data_));
              }
              *v143 = LODWORD(v157.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v133 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v134 = (*v133 ? *v133 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
          {
            v135 = v162;
            if (v163 < 0)
              v135 = (void **)v162[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpDebug_FileInjection.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 393;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v150;
            *(_WORD *)&buf[24] = 2080;
            *(_QWORD *)&buf[26] = v135;
            _os_log_impl(&dword_1B5ED0000, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error-%d opening addition file %s, will use original (not added) signal", buf, 0x22u);
          }
        }
        v136 = (int *)*((_QWORD *)this + 1570);
        if (v136 && (*v5 || *((_BYTE *)this + 15898)))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v137 = v162;
          if (v163 < 0)
            v137 = (void **)v162[0];
          CALegacyLog::log(v136, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 393, "OpenSignalInjectionFiles", "error-%d opening addition file %s, will use original (not added) signal", v150, (const char *)v137);
        }
        v138 = (char *)this + 24 * v4;
        if (*((_QWORD *)v138 + 1932))
        {
          v139 = v138 + 15456;
          myFreeABLDynamic((AudioBufferList **)v138 + 1932);
          *v139 = 0;
        }
        v140 = (char *)this + 24 * v4;
        *((_QWORD *)v140 + 1934) = 0;
        *((_QWORD *)v140 + 1933) = 0;
      }
      vp::Audio_File::~Audio_File((vp::Audio_File *)&ioNumberFrames);
    }
LABEL_388:
    ++v4;
  }
  while (v4 != 12);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163) < 0)
    operator delete(v162[0]);
  if (SHIBYTE(v165) < 0)
    operator delete(__p[0]);
}

void sub_1B64CE5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;

  if (a59 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a67);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex(uint64_t this, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  switch(a3)
  {
    case 0:
      v5 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)this = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(this + 16) = v5;
      v6 = *(_QWORD *)(a2 + 240);
      goto LABEL_10;
    case 1:
    case 2:
    case 11:
      v3 = (_OWORD *)(a2 + 328);
      v4 = *(_QWORD *)(a2 + 360);
      goto LABEL_13;
    case 3:
      v3 = (_OWORD *)(a2 + 584);
      v4 = *(_QWORD *)(a2 + 616);
      goto LABEL_13;
    case 4:
      v7 = *(_OWORD *)(a2 + 640);
      *(_OWORD *)this = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(this + 16) = v7;
      v6 = *(_QWORD *)(a2 + 656);
      goto LABEL_10;
    case 5:
      v8 = *(_OWORD *)(a2 + 720);
      *(_OWORD *)this = *(_OWORD *)(a2 + 704);
      *(_OWORD *)(this + 16) = v8;
      v6 = *(_QWORD *)(a2 + 736);
      goto LABEL_10;
    case 6:
      v3 = (_OWORD *)(a2 + 744);
      v4 = *(_QWORD *)(a2 + 776);
      goto LABEL_13;
    case 7:
      v9 = *(_OWORD *)(a2 + 800);
      *(_OWORD *)this = *(_OWORD *)(a2 + 784);
      *(_OWORD *)(this + 16) = v9;
      v6 = *(_QWORD *)(a2 + 816);
LABEL_10:
      *(_QWORD *)(this + 32) = v6;
      return this;
    case 8:
      v3 = (_OWORD *)(a2 + 824);
      v4 = *(_QWORD *)(a2 + 856);
      goto LABEL_13;
    case 9:
      v3 = (_OWORD *)(a2 + 984);
      v4 = *(_QWORD *)(a2 + 1016);
LABEL_13:
      *(_QWORD *)(this + 32) = v4;
      v10 = v3[1];
      *(_OWORD *)this = *v3;
      *(_OWORD *)(this + 16) = v10;
      return this;
    case 10:
      v11 = *(_DWORD *)(a2 + 340);
      v12 = *(_DWORD *)(a2 + 356);
      v13 = *(_QWORD *)(a2 + 360);
      if (v12 >= 2)
        v14 = 2;
      else
        v14 = *(_DWORD *)(a2 + 356);
      if ((v11 & 0x20) != 0)
      {
        v12 = 1;
      }
      else if (!v12)
      {
        v15 = (v13 + 7) >> 3;
        goto LABEL_22;
      }
      v15 = *(_DWORD *)(a2 + 352) / v12;
LABEL_22:
      if ((v11 & 0x20) != 0)
        v16 = 1;
      else
        v16 = v14;
      v17 = v15 * v16;
      *(_QWORD *)this = *(_QWORD *)(a2 + 328);
      *(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 336);
      *(_DWORD *)(this + 12) = v11;
      *(_DWORD *)(this + 16) = v17;
      *(_DWORD *)(this + 20) = 1;
      *(_DWORD *)(this + 24) = v17;
      *(_DWORD *)(this + 28) = v14;
      *(_QWORD *)(this + 32) = v13;
      return this;
    default:
      *(_QWORD *)(this + 32) = 0;
      *(_OWORD *)this = 0u;
      *(_OWORD *)(this + 16) = 0u;
      return this;
  }
}

uint64_t caulk::expected<CA::StreamDescription,int>::value(uint64_t result)
{
  int *v1;
  _DWORD *exception;
  int v3;

  if (!*(_BYTE *)(result + 40))
  {
    v1 = (int *)result;
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_1E69AB878;
    exception[2] = v3;
  }
  return result;
}

void VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(VoiceProcessorV2 *this, AudioBufferList *a2, const AudioBufferList *a3)
{
  uint64_t v5;
  uint64_t v6;
  UInt32 *p_mDataByteSize;
  UInt32 *v8;
  UInt32 v9;
  UInt32 v10;
  UInt32 v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  void *mData;
  size_t mDataByteSize;

  v5 = *(unsigned int *)this;
  if ((_DWORD)v5 != a2->mNumberBuffers)
  {
    v12 = 1;
    if (!(_DWORD)v5)
      return;
    goto LABEL_11;
  }
  if ((_DWORD)v5)
  {
    v6 = 0;
    p_mDataByteSize = &a2->mBuffers[0].mDataByteSize;
    v8 = (UInt32 *)((char *)this + 12);
    while (1)
    {
      v10 = *v8;
      v8 += 4;
      v9 = v10;
      v11 = *p_mDataByteSize;
      p_mDataByteSize += 4;
      if (v9 < v11)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)this;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  v12 = (_DWORD)v6 != (_DWORD)v5;
  if ((_DWORD)v5)
  {
LABEL_11:
    v13 = 0;
    v14 = 0;
    do
    {
      if (!v12
        && (mData = a2->mBuffers[v13].mData) != 0
        && (mDataByteSize = a2->mBuffers[v13].mDataByteSize, (_DWORD)mDataByteSize))
      {
        memcpy(*(void **)((char *)this + v13 * 16 + 16), mData, mDataByteSize);
      }
      else
      {
        bzero(*(void **)((char *)this + v13 * 16 + 16), *(unsigned int *)((char *)this + v13 * 16 + 12));
      }
      ++v14;
      ++v13;
    }
    while (v14 < *(unsigned int *)this);
  }
}

void VoiceProcessorV2::InjectionFilesReadSignal(VoiceProcessorV2 *this, uint64_t a2, unsigned int a3, AudioBufferList *a4)
{
  uint64_t v8;
  char *v9;
  int *v10;
  int v11;
  unint64_t v12;
  size_t v13;
  _QWORD *v14;
  char *v15;
  CAStreamBasicDescription *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CAStreamBasicDescription *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  int v30;
  CAStreamBasicDescription *v31;
  unsigned int v32;
  _QWORD *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  vDSP_Length v42;
  vDSP_Length v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  CAStreamBasicDescription *v51;
  unsigned int v52;
  _BYTE v53[24];
  CAStreamBasicDescription *v54;

  v8 = 1 << a2;
  if (((1 << a2) & *((unsigned int *)this + 3788)) != 0)
  {
    v9 = (char *)this + 24 * a2;
    v10 = (int *)*((_QWORD *)v9 + 1895);
    if (v10)
    {
      v11 = *v10;
      if (*v10 == a4->mNumberBuffers)
      {
        VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)v53, (uint64_t)this, a2);
        v12 = v54;
        v13 = v54 * a3;
        if (a4->mBuffers[0].mDataByteSize >= v13)
        {
          v52 = a3;
          v14 = v9 + 15160;
          v15 = (char *)this + 24 * a2;
          v16 = (CAStreamBasicDescription *)(v15 + 15168);
          v17 = *((_QWORD *)v15 + 1896);
          v18 = *((_QWORD *)v15 + 1897);
          if (v17 >= v18)
          {
            v17 = 0;
            *(_QWORD *)v16 = 0;
          }
          v19 = (v12 * v17);
          v20 = (v12 * (v18 - v17));
          v21 = (v13 - v20);
          if (v13 <= v20)
          {
            if (v11)
            {
              v25 = v16;
              v26 = 0;
              v27 = 16;
              do
              {
                memcpy(*(void **)((char *)&a4->mNumberBuffers + v27), (const void *)(*(_QWORD *)(*v14 + v27) + v19), v13);
                ++v26;
                v27 += 16;
              }
              while (v26 < a4->mNumberBuffers);
              v16 = v25;
              v17 = *(_QWORD *)v25;
            }
            a3 = v52;
            v24 = v17 + v52;
          }
          else
          {
            v51 = v16;
            if (v11)
            {
              v50 = v12;
              v22 = 0;
              v23 = 16;
              do
              {
                memcpy(*(void **)((char *)&a4->mNumberBuffers + v23), (const void *)(*(_QWORD *)(*v14 + v23) + v19), v20);
                memcpy((void *)(*(_QWORD *)((char *)&a4->mNumberBuffers + v23) + v20), *(const void **)(*v14 + v23), v21);
                ++v22;
                v23 += 16;
              }
              while (v22 < a4->mNumberBuffers);
              v12 = v50;
            }
            v24 = CAStreamBasicDescription::BytesToFrames((CAStreamBasicDescription *)v12, v21);
            a3 = v52;
            v16 = v51;
          }
          *(_QWORD *)v16 = v24;
        }
      }
    }
  }
  if ((v8 & *((_DWORD *)this + 3862)) != 0)
  {
    v28 = (char *)this + 24 * a2;
    v29 = (int *)*((_QWORD *)v28 + 1932);
    if (v29)
    {
      v30 = *v29;
      if (*v29 == a4->mNumberBuffers)
      {
        VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)v53, (uint64_t)this, a2);
        v31 = (CAStreamBasicDescription *)v54;
        v32 = (_DWORD)v54 * a3;
        if (a4->mBuffers[0].mDataByteSize >= v54 * a3)
        {
          v33 = v28 + 15456;
          v34 = (char *)this + 24 * a2;
          v35 = (uint64_t *)(v34 + 15464);
          v36 = *((_QWORD *)v34 + 1933);
          v37 = *((_QWORD *)v34 + 1934);
          if (v36 >= v37)
          {
            v36 = 0;
            *v35 = 0;
          }
          v38 = v37 - v36;
          v39 = v32 - (_DWORD)v31 * v38;
          if (v32 <= v31 * v38)
          {
            if (v30)
            {
              v46 = 0;
              v47 = v36;
              v48 = 16;
              v49 = a3;
              do
              {
                vDSP_vadd((const float *)(*(_QWORD *)(*v33 + v48) + 4 * v47), 1, *(const float **)((char *)&a4->mNumberBuffers + v48), 1, *(float **)((char *)&a4->mNumberBuffers + v48), 1, a3);
                ++v46;
                v48 += 16;
              }
              while (v46 < a4->mNumberBuffers);
              v36 = *v35;
            }
            else
            {
              v49 = a3;
            }
            v45 = v36 + v49;
          }
          else
          {
            if (v30)
            {
              v40 = 0;
              v41 = v36;
              v42 = v38;
              v43 = a3 - v38;
              v44 = 16;
              do
              {
                vDSP_vadd((const float *)(*(_QWORD *)(*v33 + v44) + 4 * v41), 1, *(const float **)((char *)&a4->mNumberBuffers + v44), 1, *(float **)((char *)&a4->mNumberBuffers + v44), 1, v42);
                vDSP_vadd((const float *)(*(_QWORD *)(*v33 + v44) + 4 * *v35), 1, (const float *)(*(_QWORD *)((char *)&a4->mNumberBuffers + v44) + 4 * v42), 1, *(float **)((char *)&a4->mNumberBuffers + v44), 1, v43);
                ++v40;
                v44 += 16;
              }
              while (v40 < a4->mNumberBuffers);
            }
            v45 = CAStreamBasicDescription::BytesToFrames(v31, v39);
          }
          *v35 = v45;
        }
      }
    }
  }
}

uint64_t CAStreamBasicDescription::BytesToFrames(CAStreamBasicDescription *this, unsigned int a2)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)this)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "CAStreamBasicDescription.h";
      v5 = 1024;
      v6 = 273;
      _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  bytesPerFrame must be > 0 in BytesToFrames", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
  return a2 / this;
}

void AUFIREngine::~AUFIREngine(AUFIREngine *this)
{
  AUFIREngine::~AUFIREngine(this);
  JUMPOUT(0x1BCC95CE0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_1E69E2FC0;
  v2 = (void *)*((_QWORD *)this + 355);
  if (v2)
  {
    *((_QWORD *)this + 356) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 352);
  if (v3)
  {
    *((_QWORD *)this + 353) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 88) = &off_1E69E3260;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue((uint64_t)this + 768);
  std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100]((AUFIREngineKernel **)this + 83, 0);
  v7 = (void **)((char *)this + 640);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(_QWORD *)this = off_1E69E6E50;
  v4 = (void *)*((_QWORD *)this + 76);
  if (v4)
  {
    *((_QWORD *)this + 77) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 73);
  if (v5)
  {
    *((_QWORD *)this + 74) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 70);
  if (v6)
  {
    *((_QWORD *)this + 71) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 551) < 0)
    operator delete(*((void **)this + 66));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUFIREngine::Initialize(AUFIREngine *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int i;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t j;
  uint64_t v11;
  float **v12;
  float v13;
  float *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  AUFIREngineKernel *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  __int128 v25;
  _QWORD *v26;
  void *__p;
  __int128 v28;
  uint64_t v29[4];
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  _BYTE buf[24];
  char v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AUJBase::Initialize(this);
  if ((_DWORD)v2)
  {
    v3 = v2;
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v4 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v4)
        return v3;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v23 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUFIREngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 138;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v3;
      _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d AUJBase init failed: %d\n", buf, 0x18u);
    }

  }
  else
  {
    for (i = 0; ; ++i)
    {
      v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108);
      if (i >= *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 108) * v6)
        break;
      if (!(*(unsigned int (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 576))(this, i + 1000000, 0, 0))(*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, i + 1000000, 0, 0, 0, 0.0);
      if (!(*(unsigned int (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 576))(this, i + 2000000, 0, 0))(*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, i + 2000000, 0, 0, 0, 0.0);
      if (!(*(unsigned int (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 576))(this, i + 3000000, 0, 0))(*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, i + 3000000, 0, 0, 0, 0.0);
    }
    if (!*((_BYTE *)this + 633))
    {
      v7 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108);
      v8 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 108);
      std::vector<float>::vector(&__p, 1uLL);
      std::vector<std::vector<float>>::vector(v29, v7, (uint64_t)&__p);
      if (__p)
      {
        *(_QWORD *)&v28 = __p;
        operator delete(__p);
      }
      std::vector<std::vector<std::vector<float>>>::vector(&__p, v8, v29);
      v9 = (uint64_t *)__p;
      if ((_DWORD)v8)
      {
        for (j = 0; j != v8; ++j)
        {
          if ((_DWORD)v7)
          {
            v11 = 0;
            v12 = (float **)v9[3 * j];
            do
            {
              if (j == v11)
                v13 = 1.0;
              else
                v13 = 0.0;
              v14 = *v12;
              v12 += 3;
              *v14 = v13;
              ++v11;
            }
            while (v7 != v11);
          }
        }
        v9 = (uint64_t *)__p;
      }
      v35 = v9;
      v36 = v28;
      v28 = 0uLL;
      __p = 0;
      v26 = 0;
      v25 = 0uLL;
      v29[3] = (uint64_t)&v25;
      v30 = 0;
      v15 = operator new(0x18uLL);
      *(_QWORD *)&v25 = v15;
      *((_QWORD *)&v25 + 1) = v15;
      v26 = v15 + 3;
      v31 = v15;
      v32 = v15;
      *(_QWORD *)buf = &v26;
      *(_QWORD *)&buf[8] = &v31;
      *(_QWORD *)&buf[16] = &v32;
      v34 = 0;
      v15[1] = 0;
      v15[2] = 0;
      *v15 = 0;
      std::vector<std::vector<std::vector<float>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(v15, v35, (uint64_t *)v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v35) >> 3));
      v32 += 3;
      v16 = v32;
      v34 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<float>>>>,std::vector<std::vector<std::vector<float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
      *((_QWORD *)&v25 + 1) = v16;
      *(_QWORD *)buf = &v35;
      std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &__p;
      std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v29;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate((void ***)this + 80);
      *((_OWORD *)this + 40) = v25;
      *((_QWORD *)this + 82) = v26;
      v26 = 0;
      v25 = 0uLL;
      *(_QWORD *)buf = &v25;
      std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    AUFIREngine::ValidateConfiguration((uint64_t)this);
    if (*((_QWORD *)this + 81) == *((_QWORD *)this + 80))
      __assert_rtn("Initialize", "AUFIREngine.mm", 106, "mFIRMatrix.size()");
    v17 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108);
    v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 108);
    v19 = *((_DWORD *)this + 84);
    v20 = (AUFIREngineKernel *)operator new(0xAC0uLL, (std::align_val_t)0x40uLL);
    AUFIREngineKernel::AUFIREngineKernel((uint64_t)v20, v17, v18, v19, (uint64_t *)this + 80);
    std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100]((AUFIREngineKernel **)this + 83, v20);
    AUFIREngine::ForwardParamsToKernel(this, *((AUFIREngineKernel **)this + 83), 0);
    *((_BYTE *)this + 632) = 0;
    v21 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108);
    *(_QWORD *)buf = 0;
    std::vector<float *>::assign((char **)this + 352, v21, buf);
    v22 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 108);
    *(_QWORD *)buf = 0;
    std::vector<float *>::assign((char **)this + 355, v22, buf);
    (*(void (**)(AUFIREngine *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    return 0;
  }
  return v3;
}

void sub_1B64CF338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 buf,__int16 a24,__int16 a25,int a26,int a27,int a28)
{
  uint64_t v28;
  uint64_t v29;
  _DWORD *v32;
  _DWORD *v33;
  NSObject *v34;
  NSObject *v35;
  int v36;
  NSObject *v37;

  if (a2)
  {
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<float>>>>,std::vector<std::vector<std::vector<float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&buf);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&a19);
    *(_QWORD *)&buf = v29 - 112;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    *(_QWORD *)&buf = &__p;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    *(_QWORD *)&buf = &a16;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v32 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v33 = v32;
      if (AUJBase::AUJBaseLogScope(void)::once != -1)
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
      CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = v34;
      if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        v36 = v33[66];
        LODWORD(buf) = 136315906;
        *(_QWORD *)((char *)&buf + 4) = "AUFIREngine.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 119;
        a25 = 2080;
        *(_QWORD *)(v28 + 20) = v33 + 2;
        LOWORD(a28) = 1024;
        *(_DWORD *)(v28 + 30) = v36;
        _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d FIREngine Exception: %s (Err=%d)\n", (uint8_t *)&buf, 0x22u);
      }
    }
    else
    {
      if (AUJBase::AUJBaseLogScope(void)::once != -1)
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
      CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
      v37 = objc_claimAutoreleasedReturnValue();
      v35 = v37;
      if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "AUFIREngine.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 134;
        _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Threw an unknown exception\n", (uint8_t *)&buf, 0x12u);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64CF2BCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUFIREngine::Reset(AUFIREngine *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 83);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 152);
    v3 = *(_QWORD *)(v1 + 160);
    while (v2 != v3)
    {
      vDSP_vclr(*(float **)v2, 1, (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 2);
      v4 = *(_QWORD *)(v2 + 24);
      v5 = *(_QWORD *)(v2 + 32);
      while (v4 != v5)
      {
        v6 = *(void **)(v4 + 16);
        v7 = *(_QWORD *)(v4 + 24) - (_QWORD)v6;
        if (v7 >= 1)
          bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
        v4 += 32;
      }
      *(_DWORD *)(v2 + 48) = 0;
      v2 += 56;
    }
  }
  return 0;
}

uint64_t AUFIREngine::GetPropertyInfo(AUFIREngine *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v10;
  int v11;

  if (a3)
    return 4294956417;
  v10 = 8;
  result = 4294956417;
  if (a2 > 1717924719)
  {
    if (a2 != 1717924720)
    {
      v11 = 1718186611;
LABEL_8:
      if (a2 != v11)
        return result;
    }
  }
  else
  {
    if (a2 != 21)
    {
      v11 = 1668179559;
      goto LABEL_8;
    }
    if (!(*(unsigned int (**)(AUFIREngine *))(*(_QWORD *)this + 600))(this))
      return 4294956417;
    v10 = 4;
  }
  result = 0;
  *a6 = 1;
  *a5 = v10;
  return result;
}

uint64_t AUFIREngine::GetProperty(uint64_t ***this, int a2, int a3, unsigned int a4, __CFDictionary **a5)
{
  uint64_t result;
  __CFDictionary *Mutable;
  CFArrayRef v9;
  CFDictionaryRef CFDictionaryRef;
  CFDictionaryRef v11;
  _QWORD v12[2];

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 1717924719)
  {
    if (a2 == 1717924720)
    {
      v12[0] = 0;
      v12[1] = 0;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v12);
    }
    else
    {
      if (a2 != 1718186611)
        return result;
      CFDictionaryRef = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<std::vector<float>>>>(this + 80);
    }
    v11 = CFDictionaryRef;
    result = 0;
    *a5 = v11;
    return result;
  }
  if (a2 == 21)
  {
    if (((unsigned int (*)(uint64_t ***))(*this)[75])(this))
    {
      result = 0;
      *(_DWORD *)a5 = *((unsigned __int8 *)this + 552);
      return result;
    }
    return 4294956417;
  }
  if (a2 == 1668179559)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (this[80] != this[81])
    {
      v9 = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<std::vector<float>>>>(this + 80);
      v12[0] = v9;
      CFDictionaryAddValue(Mutable, CFSTR("FIR_Matrices"), v9);
      if (v9)
        CFRelease(v9);
    }
    result = 0;
    *a5 = Mutable;
  }
  return result;
}

void sub_1B64CF830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t AUFIREngine::SetProperty(AUFIREngine *this, int a2, int a3, int a4, CFTypeRef *a5, int a6)
{
  uint64_t v6;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  CFTypeRef v14;
  CFNumberRef v15;
  const __CFDictionary *v16;
  id v17;
  CFTypeRef v18;
  id v19;
  CFTypeID v20;
  CFTypeRef v21;
  float ****v23;
  float ****v24;
  uint64_t v25;
  float ***v26;
  float ***v27;
  uint64_t *v28;
  float **v29;
  float **v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float *v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  CFTypeRef v38;
  id v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *exception;
  std::runtime_error *v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  CFTypeRef cf;
  uint8_t *v50;
  uint8_t buf[40];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = 4294956417;
  if (a4 | a3 || !a5)
    return v6;
  if (a2 == 1668179559)
  {
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v12 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v12)
        goto LABEL_43;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUFIREngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 355;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property ConfigPlist", buf, 0x12u);
    }

LABEL_43:
    if (a6 != 8)
      return 4294956445;
    v18 = *a5;
    if (v18)
    {
      CFRetain(v18);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v44, v18);
    }
    else
    {
      v44 = 0;
    }
    if (!*((_BYTE *)this + 17))
    {
      GetFilterMatrix((const applesauce::CF::DictionaryRef *)buf, (CFDictionaryRef *)&v44);
      std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate((void ***)this + 80);
      *((_OWORD *)this + 40) = *(_OWORD *)buf;
      *((_QWORD *)this + 82) = *(_QWORD *)&buf[16];
      memset(buf, 0, 24);
      *(_QWORD *)&v47 = buf;
LABEL_97:
      std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
LABEL_98:
      *((_BYTE *)this + 633) = 1;
      (*(void (**)(AUFIREngine *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 1668179559, 0, 0);
      v6 = 0;
      v38 = v44;
      if (!v44)
        return v6;
      goto LABEL_91;
    }
    GetFilterMatrix((const applesauce::CF::DictionaryRef *)buf, (CFDictionaryRef *)&v44);
    v23 = (float ****)*((_QWORD *)this + 81);
    v24 = (float ****)*((_QWORD *)this + 80);
    v25 = *(_QWORD *)buf;
    if ((char *)v23 - (char *)v24 == *(_QWORD *)&buf[8] - *(_QWORD *)buf)
    {
      while (v24 != v23)
      {
        v27 = *v24;
        v26 = v24[1];
        v28 = *(uint64_t **)v25;
        if ((char *)v26 - (char *)*v24 != *(_QWORD *)(v25 + 8) - *(_QWORD *)v25)
          goto LABEL_72;
        while (v27 != v26)
        {
          v30 = *v27;
          v29 = v27[1];
          v31 = *v28;
          if ((char *)v29 - (char *)*v27 != v28[1] - *v28)
            goto LABEL_72;
          while (v30 != v29)
          {
            v32 = *v30;
            v33 = v30[1];
            v34 = *(float **)v31;
            if ((char *)v33 - (char *)*v30 != *(_QWORD *)(v31 + 8) - *(_QWORD *)v31)
              goto LABEL_72;
            while (v32 != v33)
            {
              if (*v32 != *v34)
                goto LABEL_72;
              ++v32;
              ++v34;
            }
            v30 += 3;
            v31 += 24;
          }
          v27 += 3;
          v28 += 3;
        }
        v24 += 3;
        v25 += 24;
      }
      *(_QWORD *)&v47 = buf;
      goto LABEL_97;
    }
LABEL_72:
    std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate((void ***)this + 80);
    *((_OWORD *)this + 40) = *(_OWORD *)buf;
    *((_QWORD *)this + 82) = *(_QWORD *)&buf[16];
    memset(buf, 0, 24);
    *(_QWORD *)&v47 = buf;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v35 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v35)
      {
LABEL_95:

        AUFIREngineKernel::SetMatrixFIRs(*((float **)this + 83), (uint64_t *)this + 80);
        *((_BYTE *)this + 632) = 1;
        goto LABEL_98;
      }
    }
    else
    {
      v35 = MEMORY[0x1E0C81028];
      v39 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUFIREngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 380;
      _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting new FIR matrix", buf, 0x12u);
    }
    goto LABEL_95;
  }
  if (a2 == 1717924720)
  {
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v11 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v11)
        goto LABEL_25;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUFIREngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 413;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property SetParameters", buf, 0x12u);
    }

LABEL_25:
    if (a6 == 8)
    {
      v14 = *a5;
      if (v14)
      {
        CFRetain(v14);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v14);
        if (*(_QWORD *)buf)
        {
          if (CFDictionaryGetCount(*(CFDictionaryRef *)buf))
          {
            CFDictionaryApplyFunction(*(CFDictionaryRef *)buf, (CFDictionaryApplierFunction)AUFIREngine::ParseSetParameters, this);
            LODWORD(v44) = 1;
            v15 = CFNumberCreate(0, kCFNumberIntType, &v44);
            *(_QWORD *)&v47 = v15;
            if (!v15)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            if (!*(_QWORD *)buf)
            {
              v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v43, "Could not construct");
            }
            if (!CFDictionaryContainsKey(*(CFDictionaryRef *)buf, v15)
              || (v16 = (const __CFDictionary *)*applesauce::CF::DictionaryRef::operator->(buf)) != 0
              && (unint64_t)CFDictionaryGetCount(v16) >= 2)
            {
              *((_BYTE *)this + 632) = 1;
            }
            (*(void (**)(AUFIREngine *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 1717924720, 0, 0);
            CFRelease(v15);
          }
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
          return 0;
        }
      }
      else
      {
        *(_QWORD *)buf = 0;
      }
      v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }
    return 4294956445;
  }
  if (a2 != 1718186611)
    return v6;
  if (AUJBase::AUJBaseLogScope(void)::once != -1)
    dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
  if (AUJBase::AUJBaseLogScope(void)::scope)
  {
    v10 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
    if (!v10)
      goto LABEL_50;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUFIREngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 331;
    _os_log_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property FIRMatrices", buf, 0x12u);
  }

LABEL_50:
  v20 = CFGetTypeID(*a5);
  if (v20 != CFArrayGetTypeID())
    return 4294956445;
  v21 = *a5;
  if (!v21)
  {
    cf = 0;
LABEL_103:
    v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
  }
  CFRetain(v21);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v21);
  if (!cf)
    goto LABEL_103;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  applesauce::CF::convert_as<std::vector<std::vector<std::vector<std::vector<float>>>>,0>((uint64_t)buf, (const __CFArray *)cf);
  v48 = 0;
  v47 = 0uLL;
  if (buf[24])
  {
    std::vector<std::vector<std::vector<std::vector<float>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<float>>>*,std::vector<std::vector<std::vector<float>>>*>(&v47, *(uint64_t ***)buf, *(uint64_t ***)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
    v50 = buf;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
  }
  std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate((void ***)this + 80);
  *((_OWORD *)this + 40) = v47;
  *((_QWORD *)this + 82) = v48;
  v48 = 0;
  v47 = 0uLL;
  *(_QWORD *)buf = &v47;
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v44;
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *((_BYTE *)this + 633) = 1;
  if (*((_BYTE *)this + 17))
  {
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v36 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v36)
      {
LABEL_89:
        AUFIREngineKernel::SetMatrixFIRs(*((float **)this + 83), (uint64_t *)this + 80);
        *((_BYTE *)this + 632) = 1;
        goto LABEL_90;
      }
    }
    else
    {
      v36 = MEMORY[0x1E0C81028];
      v37 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUFIREngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 342;
      _os_log_impl(&dword_1B5ED0000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting new FIR matrix", buf, 0x12u);
    }

    goto LABEL_89;
  }
LABEL_90:
  (*(void (**)(AUFIREngine *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 1718186611, 0, 0);
  v6 = 0;
  v38 = cf;
  if (cf)
LABEL_91:
    CFRelease(v38);
  return v6;
}

void sub_1B64D0128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, int buf, uint64_t a20,__int16 a21,int a22,__int16 a23,uint64_t a24,__int16 a25,int a26)
{
  applesauce::CF::NumberRef::~NumberRef(&a13);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&buf);
  _Unwind_Resume(a1);
}

uint64_t AUFIREngine::GetParameter(AUFIREngine *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t AUFIREngine::SetParameter(AUFIREngine *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5;
  int v6;
  int v7;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  AUJBase::SetParameter(this, a2, a3, a4, a5);
  if (v7 != 1 && !(v5 | v6))
    *((_BYTE *)this + 632) = 1;
  return 0;
}

uint64_t AUFIREngine::ProcessMultipleBufferLists(AUFIREngine *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  char v11;
  AUFIREngineKernel **v12;
  char *v13;
  char v14;
  BOOL v15;
  AUFIREngineKernel *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  AUFIREngineKernel *v21;
  uint64_t v22;
  uint64_t v23;
  float **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  int v34;
  const float *v35;
  float *v36;
  const float *v37;
  unsigned int v38;
  vDSP_Length v39;
  unsigned int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  int32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  float32x4_t *v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float **v52;
  float *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  DSPComplex *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  unsigned int v71;
  DSPSplitComplex *v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char *v80;
  const float *v81;
  const float *v82;
  float *v83;
  unsigned int v84;
  float __B;
  float __C;

  if (a4 != 1 || a6 != 1)
    __assert_rtn("ProcessMultipleBufferLists", "AUFIREngine.mm", 479, "inNumberInputBufferLists == 1 && inNumberOutputBufferLists == 1");
  v11 = 0;
  v12 = (AUFIREngineKernel **)((char *)this + 664);
  v13 = (char *)this + 768;
  do
  {
    v14 = v11;
    v15 = ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::pop((uint64_t)v13, v12);
    v11 = 1;
  }
  while (v15);
  if ((v14 & 1) != 0)
  {
    (*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 0, 0, 0, 0, 0.0);
    (*(void (**)(AUFIREngine *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 1668179559, 0, 0);
  }
  if (*((_BYTE *)this + 632))
  {
    v16 = *v12;
    if (!*((_DWORD *)*v12 + 597))
    {
      *((_BYTE *)this + 632) = 0;
      AUFIREngine::ForwardParamsToKernel(this, v16, (v14 & 1) == 0);
    }
  }
  v17 = 0;
  v18 = 16;
  while (v17 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108))
  {
    *(_QWORD *)(*((_QWORD *)this + 352) + 8 * v17++) = *(_QWORD *)((char *)&(*a5)->mNumberBuffers + v18);
    v18 += 16;
  }
  v19 = 0;
  v20 = 16;
  while (v19 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 108))
  {
    *(_QWORD *)(*((_QWORD *)this + 355) + 8 * v19++) = *(_QWORD *)((char *)&(*a7)->mNumberBuffers + v20);
    v20 += 16;
  }
  v21 = *v12;
  if (*((_DWORD *)*v12 + 2) != a3)
  {
    v24 = (float **)*((_QWORD *)this + 355);
    goto LABEL_44;
  }
  v22 = (uint64_t)(*((_QWORD *)this + 353) - *((_QWORD *)this + 352)) >> 3;
  v23 = *(unsigned int *)v21;
  v24 = (float **)*((_QWORD *)this + 355);
  if (v22 != v23
    || (v25 = (uint64_t)(*((_QWORD *)this + 356) - (_QWORD)v24) >> 3, v26 = *((unsigned int *)v21 + 1), v25 != v26))
  {
LABEL_44:
    v52 = (float **)*((_QWORD *)this + 356);
    while (v24 != v52)
    {
      v53 = *v24++;
      vDSP_vclr(v53, 1, a3);
    }
    return 0;
  }
  if ((_DWORD)v23)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = (_QWORD *)(*((_QWORD *)v21 + 4) + v27);
      *v29 = *(_QWORD *)(*((_QWORD *)this + 352) + 8 * v28);
      v29[1] = a3;
      ++v28;
      v27 += 16;
    }
    while (v22 != v28);
  }
  if ((_DWORD)v26)
  {
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = (_QWORD *)(*((_QWORD *)v21 + 7) + v30);
      *v32 = *(_QWORD *)(*((_QWORD *)this + 355) + 8 * v31);
      v32[1] = a3;
      ++v31;
      v30 += 16;
    }
    while (v25 != v31);
  }
  v84 = *((_DWORD *)v21 + 597);
  if (v84)
  {
    v33 = *((_DWORD *)v21 + 676);
    v34 = v33 ^ 1;
    v35 = (const float *)*((_QWORD *)v21 + 19 * (v33 ^ 1) + 306);
    v36 = (float *)*((_QWORD *)v21 + 19 * v33 + 306);
    __B = -1.0;
    __C = 1.0;
    if (a3)
    {
      v37 = (const float *)((char *)v21 + 2396);
      v38 = *((_DWORD *)v21 + 598);
      v39 = a3;
      if (v84 <= v38 + 1)
        v40 = v38 + 1;
      else
        v40 = v84;
      v41 = v40 + ~v38;
      if ((unint64_t)a3 - 1 < v41)
        v41 = a3 - 1;
      if (v41 >= 0xC && ((char *)v21 + 2400 > (char *)v35 ? (v42 = v37 >= &v35[v41 + 1]) : (v42 = 1), v42))
      {
        v43 = (v41 + 1) & 7;
        if (!v43)
          v43 = 8;
        v44 = v41 + 1 - v43;
        v45 = vaddq_s32(vdupq_n_s32(v38), (int32x4_t)xmmword_1B6626920);
        v46 = vld1q_dup_f32(v37);
        v47 = ~v41 + v43;
        v48 = (float32x4_t *)(v35 + 4);
        v49.i64[0] = 0x100000001;
        v49.i64[1] = 0x100000001;
        v50.i64[0] = 0x500000005;
        v50.i64[1] = 0x500000005;
        v51.i64[0] = 0x800000008;
        v51.i64[1] = 0x800000008;
        do
        {
          v48[-1] = vmulq_f32(v46, vcvtq_f32_u32((uint32x4_t)vaddq_s32(v45, v49)));
          *v48 = vmulq_f32(v46, vcvtq_f32_u32((uint32x4_t)vaddq_s32(v45, v50)));
          v45 = vaddq_s32(v45, v51);
          v48 += 2;
          v47 += 8;
        }
        while (v47);
        v38 += v44;
      }
      else
      {
        v44 = 0;
      }
      while (1)
      {
        v35[v44] = *v37 * (float)++v38;
        if (v38 >= v84)
          break;
        if (a3 == ++v44)
        {
          *((_DWORD *)v21 + 598) = v38;
          goto LABEL_52;
        }
      }
      *((_DWORD *)v21 + 598) = v38;
      *((_DWORD *)v21 + 597) = 0;
      vDSP_vfill(&__C, (float *)&v35[v44], 1, a3 - v44);
    }
    else
    {
      v39 = 0;
    }
LABEL_52:
    vDSP_vsmsa(v35, 1, &__B, &__C, v36, 1, v39);
    if (!*((_DWORD *)v21 + 597))
    {
      *((_DWORD *)v21 + 597) = 0;
      *((_DWORD *)v21 + 676) = v34;
    }
  }
  if (*(_DWORD *)v21)
  {
    v55 = 0;
    while (1)
    {
      v56 = *((_QWORD *)v21 + 19);
      v57 = v56 + 56 * v55;
      v58 = *((_QWORD *)v21 + 4);
      v59 = *((unsigned int *)v21 + 2);
      if ((_DWORD)v59)
        memmove(*(void **)v57, (const void *)(*(_QWORD *)v57 + 4 * v59), 4 * v59);
      v60 = v58 + 16 * v55;
      v61 = *(_QWORD *)(v60 + 8);
      if (v61)
        memmove((void *)(*(_QWORD *)v57 + 4 * v59), *(const void **)v60, 4 * v61);
      v62 = *(DSPComplex **)v57;
      v63 = (void *)(*(_QWORD *)v57 + 4 * v59 + 4 * *((unsigned int *)v21 + 2));
      v64 = *(_QWORD *)(v57 + 8) - (_QWORD)v63;
      if (v64 >= 1)
        bzero(v63, 4 * (((unint64_t)v64 >> 2) - ((unint64_t)v64 > 3)) + 4);
      v65 = v56 + 56 * v55;
      v68 = *(_QWORD *)(v65 + 24);
      v67 = (_QWORD *)(v65 + 24);
      v66 = v68;
      if (v68 == v67[1])
        goto LABEL_70;
      if (*((_DWORD *)v21 + 597))
        break;
      v73 = v56 + 56 * v55;
      v74 = *(_DWORD *)(v73 + 48);
      v70 = (_DWORD *)(v73 + 48);
      v72 = (DSPSplitComplex *)(v66 + 32 * v74);
      if (!*((_BYTE *)v21 + 152 * *((unsigned int *)v21 + 676) + 2544))
        goto LABEL_65;
      vDSP_vclr(v72->realp, 1, *((unsigned int *)v21 + 5));
      vDSP_vclr(v72->imagp, 1, *((unsigned int *)v21 + 5));
LABEL_68:
      v75 = (*v70 + 1);
      *v70 = v75;
      if (v75 >= (uint64_t)(v67[1] - *v67) >> 5)
        *v70 = 0;
LABEL_70:
      if (v84)
      {
        AUFIREngineKernel::ProcessXfadeChannel((uint64_t)v21, (uint64_t)v21 + 2400, v55, *((_QWORD *)v21 + 303), (uint64_t)(*((_QWORD *)v21 + 304) - *((_QWORD *)v21 + 303)) >> 4, 0);
        AUFIREngineKernel::ProcessXfadeChannel((uint64_t)v21, (uint64_t)v21 + 2552, v55, *((_QWORD *)v21 + 322), (uint64_t)(*((_QWORD *)v21 + 323) - *((_QWORD *)v21 + 322)) >> 4, 0);
        if (*((_DWORD *)v21 + 1))
        {
          v76 = 0;
          do
          {
            v77 = 0;
            v78 = 1;
            do
            {
              v79 = v78;
              v80 = (char *)v21 + 152 * v77;
              v81 = *(const float **)(*((_QWORD *)v80 + 300) + 24 * v76);
              v82 = (const float *)*((_QWORD *)v80 + 306);
              v83 = *(float **)(*((_QWORD *)v21 + 7) + 16 * v76);
              if (v77 | v55)
                vDSP_vma(v81, 1, v82, 1, v83, 1, v83, 1, *((unsigned int *)v21 + 2));
              else
                vDSP_vmul(v81, 1, v82, 1, v83, 1, *((unsigned int *)v21 + 2));
              v78 = 0;
              v77 = 1;
            }
            while ((v79 & 1) != 0);
            ++v76;
          }
          while (v76 < *((unsigned int *)v21 + 1));
        }
      }
      else
      {
        AUFIREngineKernel::ProcessXfadeChannel((uint64_t)v21, (uint64_t)v21 + 152 * *((unsigned int *)v21 + 676) + 2400, v55, *((_QWORD *)v21 + 7), (uint64_t)(*((_QWORD *)v21 + 8) - *((_QWORD *)v21 + 7)) >> 4, v55 != 0);
      }
      if (++v55 >= (unint64_t)*(unsigned int *)v21)
        return 0;
    }
    v69 = v56 + 56 * v55;
    v71 = *(_DWORD *)(v69 + 48);
    v70 = (_DWORD *)(v69 + 48);
    v72 = (DSPSplitComplex *)(v66 + 32 * v71);
LABEL_65:
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUFIREngineKernel *)((char *)v21 + 136), v62, v72, 1.0);
    goto LABEL_68;
  }
  return 0;
}

uint64_t AUFIREngine::GetParameterInfo(AUFIREngine *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  unsigned int v7;
  ausdk::AUScope *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  unsigned int v12;
  ausdk::AUScope *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  ausdk::AUScope *v18;
  uint64_t v19;
  uint64_t Element;
  const __CFString *v21;
  AudioUnitParameterOptions v22;
  BOOL v23;
  uint64_t v24;
  float v25;

  buffer->flags = -1073741824;
  if (a2)
    return 4294956418;
  v7 = a3 - 1000000;
  if (a3 - 1000000 < 0xF4240)
  {
    v8 = (AUFIREngine *)((char *)this + 80);
    v9 = v7 / *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108) + 1;
    v10 = v7 % *(_DWORD *)(ausdk::AUScope::SafeGetElement(v8, 0) + 108) + 1;
    v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Mute: In %u Out %u"), v10, v9);
LABEL_7:
    buffer->cfNameString = v11;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 2;
    v16 = 1065353216;
    goto LABEL_8;
  }
  v12 = a3 - 2000000;
  if (a3 - 2000000 < 0xF4240)
  {
    v13 = (AUFIREngine *)((char *)this + 80);
    v14 = v12 / *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108) + 1;
    v15 = v12 % *(_DWORD *)(ausdk::AUScope::SafeGetElement(v13, 0) + 108) + 1;
    v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Bypass: In %u Out %u"), v15, v14);
    goto LABEL_7;
  }
  if (a3 >= 0x2DC6C0)
  {
    v17 = a3 - 3000000;
    v18 = (AUFIREngine *)((char *)this + 80);
    v19 = (a3 - 3000000) / *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108) + 1;
    Element = ausdk::AUScope::SafeGetElement(v18, 0);
    v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Gain: In %u Out %u"), v17 % *(_DWORD *)(Element + 108) + 1, v19);
    buffer->cfNameString = v21;
    v22 = buffer->flags | 0x8000010;
LABEL_18:
    buffer->flags = v22;
    CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 0xC2C000000000000DLL;
    v16 = 1103101952;
    goto LABEL_8;
  }
  if (a3 == 2)
  {
    v21 = CFSTR("Global Gain");
    buffer->cfNameString = CFSTR("Global Gain");
    v22 = -939524096;
    goto LABEL_18;
  }
  if (a3 == 1)
  {
    buffer->cfNameString = CFSTR("Blend Time");
    buffer->flags = -939524096;
    CFStringGetCString(CFSTR("Blend Time"), buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 0x3F80000000000018;
    v16 = 0x41A00000461C4000;
  }
  else
  {
    if (a3)
      return 4294956418;
    buffer->cfNameString = CFSTR("FIR Matrix");
    buffer->flags = -939524096;
    CFStringGetCString(CFSTR("FIR Matrix"), buffer->name, 52, 0x8000100u);
    v24 = *((_QWORD *)this + 81) - *((_QWORD *)this + 80);
    v23 = *((_QWORD *)this + 81) == *((_QWORD *)this + 80);
    *(_QWORD *)&buffer->unit = 1;
    v25 = 1000.0;
    if (!v23)
      v25 = (float)(0xAAAAAAAAAAAAAAABLL * (v24 >> 3) - 1);
    v16 = LODWORD(v25);
  }
LABEL_8:
  result = 0;
  *(_QWORD *)&buffer->maxValue = v16;
  return result;
}

double AUFIREngine::GetLatency(AUFIREngine *this)
{
  return 0.0;
}

_QWORD *AUFIREngine::GetValidChannelCounts@<X0>(_QWORD *a1@<X8>)
{
  int v3;

  v3 = -65537;
  return std::vector<AUChannelInfo>::vector(a1, &v3);
}

uint64_t AUFIREngine::PresetWasSet(uint64_t this)
{
  *(_BYTE *)(this + 632) = 1;
  return this;
}

uint64_t AUFIREngine::HasCustomViewInDSPAUBundle(AUFIREngine *this)
{
  return 1;
}

BOOL ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::pop(uint64_t a1, AUFIREngineKernel **a2)
{
  _BOOL8 v4;
  AUFIREngineKernel *v5;
  AUFIREngineKernel *v6;
  std::runtime_error *exception;
  AUFIREngineKernel *v9;
  AUFIREngineKernel *v10;

  v10 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v10);
  if (v4)
  {
    v5 = v10;
    if (!v10)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1B64D10D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUFIREngine::ForwardParamsToKernel(AUFIREngine *this, AUFIREngineKernel *a2, int a3)
{
  uint64_t v5;
  uint64_t Element;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t i;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v25;
  int v26;
  float v27;

  v5 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108);
  Element = ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0);
  if ((_DWORD)v5)
  {
    v7 = 0;
    v25 = *(unsigned int *)(Element + 108);
    v26 = 3000000;
    v8 = 2000000;
    v9 = 1000000;
    do
    {
      if ((_DWORD)v25)
      {
        v10 = 0;
        for (i = 0; i != v25; ++i)
        {
          v27 = 0.0;
          (*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, (v9 + v10), 0, 0, &v27);
          v12.n128_f32[0] = v27;
          v13 = *(_QWORD *)(*((_QWORD *)a2 + 295) + 24 * v7);
          v14 = i >> 6;
          v15 = 1 << i;
          if (v27 == 0.0)
            v16 = *(_QWORD *)(v13 + 8 * v14) & ~v15;
          else
            v16 = *(_QWORD *)(v13 + 8 * v14) | v15;
          *(_QWORD *)(v13 + 8 * v14) = v16;
          v27 = 0.0;
          (*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this + 144))(this, (v8 + v10), 0, 0, &v27, v12);
          v17.n128_f32[0] = v27;
          v18 = *(_QWORD *)(*((_QWORD *)a2 + 292) + 24 * v7);
          if (v27 == 0.0)
            v19 = *(_QWORD *)(v18 + 8 * v14) & ~v15;
          else
            v19 = *(_QWORD *)(v18 + 8 * v14) | v15;
          *(_QWORD *)(v18 + 8 * v14) = v19;
          v27 = 0.0;
          (*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this + 144))(this, (v26 + v10), 0, 0, &v27, v17);
          *(float *)(*(_QWORD *)(*((_QWORD *)a2 + 289) + 24 * v7) + 4 * i) = __exp10f(v27 * 0.05);
          v10 += v5;
        }
      }
      ++v7;
      ++v26;
      ++v8;
      ++v9;
    }
    while (v7 != v5);
  }
  v27 = 0.0;
  (*(void (**)(AUFIREngine *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 2, 0, 0, &v27);
  *((float *)a2 + 577) = __exp10f(v27 * 0.05);
  v27 = 0.0;
  (*(void (**)(AUFIREngine *, _QWORD, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v27);
  if (*((_DWORD *)a2 + 3) > v27)
    *((_DWORD *)a2 + 576) = v27;
  v27 = 0.0;
  (*(void (**)(AUFIREngine *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 1, 0, 0, &v27);
  v20 = (float)(v27 / 1000.0);
  v21 = (*(double *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 80) * v20);
  *((_DWORD *)a2 + 596) = v21;
  if (a3)
  {
    if (*((_DWORD *)a2 + 597))
      __assert_rtn("CommitChanges", "AUFIREngineKernel.cpp", 541, "!IsFading()");
    v22 = *((_DWORD *)a2 + 676);
    v23 = v22 ^ 1;
    *((_DWORD *)a2 + 597) = v21;
    *((_DWORD *)a2 + 598) = 0;
    if (v21 <= 1)
      v21 = 1;
    *((float *)a2 + 599) = 1.0 / (float)v21;
    AUFIREngineKernel::PrepareXfadeChannel(a2, v22 ^ 1);
    if (!*((_DWORD *)a2 + 597))
    {
      *((_DWORD *)a2 + 597) = 0;
      *((_DWORD *)a2 + 676) = v23;
    }
  }
  else
  {
    *((_DWORD *)a2 + 597) = 0;
    *((_DWORD *)a2 + 676) = 0;
    AUFIREngineKernel::PrepareXfadeChannel(a2, 0);
  }
}

AUFIREngineKernel *std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](AUFIREngineKernel **a1, AUFIREngineKernel *a2)
{
  AUFIREngineKernel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AUFIREngineKernel::~AUFIREngineKernel(result);
    JUMPOUT(0x1BCC95CE0);
  }
  return result;
}

void AUFIREngineKernel::~AUFIREngineKernel(AUFIREngineKernel *this)
{
  uint64_t i;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  MEMORY[0x1BCC95008]((char *)this + 2712);
  for (i = 0; i != -304; i -= 152)
  {
    v3 = (char *)this + i;
    v9 = (void **)((char *)this + i + 2672);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    v9 = (void **)((char *)this + i + 2640);
    std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100](&v9);
    std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + i + 2624);
    v4 = *(void **)((char *)this + i + 2600);
    if (v4)
    {
      *((_QWORD *)v3 + 326) = v4;
      operator delete(v4);
    }
    v5 = (void *)*((_QWORD *)v3 + 322);
    if (v5)
    {
      *(_QWORD *)((char *)this + i + 2584) = v5;
      operator delete(v5);
    }
    v9 = (void **)(v3 + 2552);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  v9 = (void **)((char *)this + 2360);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 2336);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 2312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  *((_QWORD *)this + 24) = &off_1E69E32A0;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue((uint64_t)this + 256);
  std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100]((void ***)this + 22, 0);
  v9 = (void **)((char *)this + 152);
  std::vector<AUFIREngineKernel::InputChannel>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  CDSPSplitComplex::~CDSPSplitComplex((AUFIREngineKernel *)((char *)this + 104));
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
}

void GetFilterMatrix(const applesauce::CF::DictionaryRef *a1, CFDictionaryRef *a2)
{
  const __CFDictionary *v4;
  const __CFArray *v5;
  const void *v6;
  const void *v7;
  CFTypeID v8;
  _BYTE *v9;
  const __CFArray *v10;
  CFIndex Count;
  unint64_t v12;
  int v13;
  const __CFArray *v14;
  unint64_t v15;
  int v16;
  CFArrayRef v17;
  unint64_t v18;
  unsigned int i;
  const void *ValueAtIndex;
  const void *v21;
  CFTypeID v22;
  const void *Value;
  const void *v24;
  CFTypeID v25;
  int v26;
  void **v27;
  CFTypeRef v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  void **v35;
  uint64_t v36;
  const applesauce::CF::DictionaryRef *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void **v45;
  void **v46;
  uint64_t v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *exception;
  std::runtime_error *v53;
  std::runtime_error *v54;
  std::runtime_error *v55;
  std::runtime_error *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  unint64_t v59;
  const __CFArray *v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  void *__p[2];
  uint64_t v65;
  CFTypeRef cf;
  unsigned __int8 v67;
  CFArrayRef v68;
  CFArrayRef theArray;
  const __CFArray *v70;
  const void *v71;
  __int128 v72;
  void *v73;
  __int128 v74;
  void *v75;
  void **v76;
  void **v77;
  void **v78;
  void **v79;
  void **v80;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (applesauce::CF::details::has_key<__CFString const* const&>(*a2, CFSTR("FIR_Matrices")))
  {
    v4 = *a2;
    if (!*a2)
    {
      v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v53, "Could not construct");
    }
    v72 = 0uLL;
    v73 = 0;
    v5 = (const __CFArray *)applesauce::CF::details::at_key<__CFString const* const&>(v4, CFSTR("FIR_Matrices"));
    if (v5)
    {
      applesauce::CF::convert_as<std::vector<std::vector<std::vector<std::vector<float>>>>,0>((uint64_t)&v76, v5);
      v75 = 0;
      v74 = 0uLL;
      if ((_BYTE)v79)
      {
        std::vector<std::vector<std::vector<std::vector<float>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<float>>>*,std::vector<std::vector<std::vector<float>>>*>(&v74, (uint64_t **)v76, (uint64_t **)v77, 0xAAAAAAAAAAAAAAABLL * (v77 - v76));
        if ((_BYTE)v79)
        {
          __p[0] = &v76;
          std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        goto LABEL_18;
      }
    }
    else
    {
      LOBYTE(v76) = 0;
      LOBYTE(v79) = 0;
      v75 = 0;
      v74 = 0uLL;
    }
    v72 = 0uLL;
    v73 = 0;
LABEL_18:
    std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate((void ***)a1);
    *(_OWORD *)a1 = v74;
    *((_QWORD *)a1 + 2) = v75;
    v75 = 0;
    v74 = 0uLL;
    v76 = (void **)&v74;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v76);
    v76 = (void **)&v72;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v76);
    return;
  }
  if (!*a2)
  {
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>(*a2, CFSTR("FIR_NamedMatrices")))
    return;
  if (!*a2)
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>(*a2, CFSTR("FIR_Table")))
    return;
  if (!*a2)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
  }
  v6 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, CFSTR("FIR_Table"));
  if (v6)
  {
    v7 = v6;
    CFRetain(v6);
    v8 = CFGetTypeID(v7);
    if (v8 == CFDictionaryGetTypeID())
    {
      v76 = (void **)v7;
      LOBYTE(v77) = 1;
      CFRetain(v7);
      v71 = v7;
      v9 = (_BYTE *)std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
      goto LABEL_22;
    }
    CFRelease(v7);
  }
  LOBYTE(v76) = 0;
  LOBYTE(v77) = 0;
  v71 = 0;
  v9 = (_BYTE *)std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
  v7 = 0;
LABEL_22:
  if (!*a2)
  {
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v9, *a2, CFSTR("FIR_NamedMatrices"));
  if (!(_BYTE)v77)
  {
    v70 = 0;
    goto LABEL_104;
  }
  v10 = (const __CFArray *)v76;
  if (!v76)
  {
    v70 = 0;
LABEL_104:
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
    v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
  }
  CFRetain(v76);
  v70 = v10;
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
  Count = CFArrayGetCount(v10);
  if (Count)
  {
    v12 = 0;
    v13 = 0;
    v59 = Count;
    v60 = v10;
    while (1)
    {
      v74 = 0uLL;
      v75 = 0;
      v76 = 0;
      applesauce::CF::at_or<applesauce::CF::ArrayRef>(&theArray, v10, v12, &v76);
      if (v76)
        CFRelease(v76);
      v61 = v13;
      v14 = theArray;
      if (!theArray)
      {
        v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
      }
      v15 = 0;
      v16 = 0;
LABEL_31:
      if (CFArrayGetCount(v14) > v15)
        break;
      v37 = a1;
      v38 = (_QWORD *)*((_QWORD *)a1 + 1);
      v39 = *((_QWORD *)a1 + 2);
      if ((unint64_t)v38 >= v39)
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - *(_QWORD *)a1) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(_QWORD *)a1) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x555555555555555)
          v44 = 0xAAAAAAAAAAAAAAALL;
        else
          v44 = v42;
        v80 = (void **)((char *)a1 + 16);
        v45 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v44);
        v46 = &v45[3 * v41];
        v76 = v45;
        v77 = v46;
        v79 = &v45[3 * v47];
        *v46 = 0;
        v46[1] = 0;
        v46[2] = 0;
        *(_OWORD *)v46 = v74;
        v46[2] = v75;
        v74 = 0uLL;
        v75 = 0;
        v78 = v46 + 3;
        v37 = a1;
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v76);
        v40 = (_QWORD *)*((_QWORD *)a1 + 1);
        std::__split_buffer<std::vector<std::vector<std::vector<float>>>>::~__split_buffer((uint64_t)&v76);
      }
      else
      {
        *v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
        *(_OWORD *)v38 = v74;
        v38[2] = v75;
        v74 = 0uLL;
        v75 = 0;
        v40 = v38 + 3;
        *((_QWORD *)a1 + 1) = v38 + 3;
      }
      *((_QWORD *)v37 + 1) = v40;
      CFRelease(v14);
      v76 = (void **)&v74;
      std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v76);
      v12 = (v61 + 1);
      v13 = v61 + 1;
      v10 = v60;
      if (v59 <= v12)
        goto LABEL_88;
    }
    v72 = 0uLL;
    v73 = 0;
    v76 = 0;
    applesauce::CF::at_or<applesauce::CF::ArrayRef>(&v68, v14, v15, &v76);
    if (v76)
      CFRelease(v76);
    v17 = v68;
    if (!v68)
    {
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v50, "Could not construct");
    }
    v18 = 0;
    for (i = 1; ; ++i)
    {
      if (CFArrayGetCount(v17) <= v18)
      {
        v29 = *((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1) >= (unint64_t)v75)
        {
          v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3);
          v32 = v31 + 1;
          if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((uint64_t)v75 - (uint64_t)v74) >> 3) > v32)
            v32 = 0x5555555555555556 * (((uint64_t)v75 - (uint64_t)v74) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v75 - (uint64_t)v74) >> 3) >= 0x555555555555555)
            v33 = 0xAAAAAAAAAAAAAAALL;
          else
            v33 = v32;
          v80 = &v75;
          v34 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v33);
          v35 = &v34[3 * v31];
          v76 = v34;
          v77 = v35;
          v79 = &v34[3 * v36];
          *v35 = 0;
          v35[1] = 0;
          v35[2] = 0;
          *(_OWORD *)v35 = v72;
          v35[2] = v73;
          v72 = 0uLL;
          v73 = 0;
          v78 = v35 + 3;
          std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v74, &v76);
          v30 = *((_QWORD *)&v74 + 1);
          std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v76);
        }
        else
        {
          **((_QWORD **)&v74 + 1) = 0;
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v29 + 16) = 0;
          *(_OWORD *)v29 = v72;
          *(_QWORD *)(v29 + 16) = v73;
          v72 = 0uLL;
          v73 = 0;
          v30 = v29 + 24;
        }
        *((_QWORD *)&v74 + 1) = v30;
        CFRelease(v17);
        v76 = (void **)&v72;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v76);
        v15 = ++v16;
        goto LABEL_31;
      }
      applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&cf, v17, v18);
      if (!v67)
        break;
      __p[0] = 0;
      __p[1] = 0;
      v65 = 0;
LABEL_49:
      if (!cf)
      {
        v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Could not construct");
      }
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v76, (const __CFArray *)cf);
      v63 = 0;
      v62 = 0uLL;
      if ((_BYTE)v79)
      {
        v27 = v76;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v62, v76, (uint64_t)v77, ((char *)v77 - (char *)v76) >> 2);
        if (v27)
          operator delete(v27);
      }
      *(_OWORD *)__p = v62;
      v65 = v63;
LABEL_54:
      std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)&v72, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      v18 = i;
    }
    if (CFArrayGetCount(v17) > v18)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v17, v18);
      v21 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFRetain(ValueAtIndex);
        v22 = CFGetTypeID(v21);
        if (v22 == CFStringGetTypeID())
        {
          v76 = (void **)v21;
          LOBYTE(v77) = 1;
          if (!v7)
          {
            v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v49, "Could not construct");
          }
          Value = CFDictionaryGetValue((CFDictionaryRef)v7, v21);
          v24 = Value;
          if (Value)
          {
            CFRetain(Value);
            v25 = CFGetTypeID(v24);
            if (v25 == CFArrayGetTypeID())
            {
              __p[0] = (void *)v24;
              v26 = 1;
LABEL_59:
              LOBYTE(__p[1]) = v26;
              if (v67 == v26)
              {
                if (v67)
                {
                  v28 = cf;
                  cf = __p[0];
                  __p[0] = (void *)v28;
                }
              }
              else if (v67)
              {
                if (cf)
                  CFRelease(cf);
                v67 = 0;
              }
              else
              {
                cf = __p[0];
                __p[0] = 0;
                v67 = 1;
              }
              std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
LABEL_48:
              std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
              __p[0] = 0;
              __p[1] = 0;
              v65 = 0;
              if (!v67)
                goto LABEL_54;
              goto LABEL_49;
            }
            CFRelease(v24);
          }
          v26 = 0;
          LOBYTE(__p[0]) = 0;
          goto LABEL_59;
        }
        CFRelease(v21);
      }
    }
    LOBYTE(v76) = 0;
    LOBYTE(v77) = 0;
    goto LABEL_48;
  }
LABEL_88:
  CFRelease(v10);
  if (v7)
    CFRelease(v7);
}

void sub_1B64D1F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,const void *a35,uint64_t a36)
{
  uint64_t v36;

  applesauce::CF::DictionaryRef::~DictionaryRef(&a35);
  *(_QWORD *)(v36 - 160) = a12;
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 160));
  _Unwind_Resume(a1);
}

uint64_t AUFIREngine::ValidateConfiguration(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  CAXException *exception;
  CAXException *v7;
  _BYTE v8[16];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(this + 640);
  if (v1 != *(_QWORD **)(this + 648))
  {
    v2 = v1[1] - *v1;
    if (!v2
      || (v3 = this,
          0xAAAAAAAAAAAAAAABLL * (v2 >> 3) != *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 128), 0)+ 108)))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v8, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        v10 = "AUFIREngine.mm";
        v11 = 1024;
        v12 = 58;
        v13 = 2080;
        v14 = v8;
        v15 = 2080;
        v16 = "Matrix outputs to AU output format validation";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Matrix outputs to AU output format validation", -1);
    }
    v4 = *(_QWORD *)(*v1 + 8) - *(_QWORD *)*v1;
    if (!v4
      || (v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3),
          this = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v3 + 80), 0),
          v5 != *(_DWORD *)(this + 108)))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v8, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        v10 = "AUFIREngine.mm";
        v11 = 1024;
        v12 = 60;
        v13 = 2080;
        v14 = v8;
        v15 = 2080;
        v16 = "Matrix inputs to AU input format validation";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v7 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v7, "Matrix inputs to AU input format validation", -1);
    }
  }
  return this;
}

void sub_1B64D2330(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<AUFIREngineKernel,unsigned int,unsigned int,unsigned int,std::vector<std::vector<std::vector<std::vector<float>>>> &>(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  void *v10;
  uint64_t result;

  v10 = operator new(0xAC0uLL, (std::align_val_t)0x40uLL);
  result = AUFIREngineKernel::AUFIREngineKernel((uint64_t)v10, a2, a3, a4, a5);
  *a1 = v10;
  return result;
}

void sub_1B64D23B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CE0](v1, 64);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_stash<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::store(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BOOL8 v6;
  AUFIREngineKernel *v8;
  uint64_t v9;

  v8 = 0;
  v4 = a1 + 64;
  while (ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::pop(v4, &v8));
  if (!*a2)
    __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
  v5 = (unsigned __int8 *)(a1 + 2049);
  do
    __ldaxr(v5);
  while (__stlxr(1u, v5));
  v9 = *a2;
  v6 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 128, &v9);
  if (v6)
    *a2 = 0;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::drain_trash(v4);
  if (v8)
  {
    AUFIREngineKernel::~AUFIREngineKernel(v8);
    MEMORY[0x1BCC95CE0]();
  }
  return v6;
}

void sub_1B64D2494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AUFIREngineKernel *a9)
{
  std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

void AUFIREngine::ParseSetParameters(AUFIREngine *this, const void *a2, AUJBase *a3, void *a4)
{
  uint64_t v7;
  float v8;
  std::runtime_error *exception;
  std::runtime_error *v10;
  CFTypeRef cf;
  CFTypeRef v12;

  if (!this)
  {
    v12 = 0;
LABEL_12:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(this);
  applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&v12, this);
  if (!v12)
    goto LABEL_12;
  v7 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v12);
  if (a2)
    CFRetain(a2);
  applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&cf, a2);
  if (!cf)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  v8 = applesauce::CF::convert_to<float,0>((const __CFNumber *)cf);
  AUJBase::SetParameter(a3, v7, 0, 0, v8);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
}

void sub_1B64D25C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a9);
  applesauce::CF::NumberRef::~NumberRef(&a10);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  _BOOL8 result;
  AUFIREngineKernel *v3;

  v3 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  while (1)
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result)
      break;
    if (!v3)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    AUFIREngineKernel::~AUFIREngineKernel(v3);
    MEMORY[0x1BCC95CE0]();
  }
  return result;
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef>(_QWORD *a1, const __CFArray *a2, unint64_t a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(_BYTE *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  char v9;

  if (CFArrayGetCount(theArray) <= a3)
    goto LABEL_6;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  v7 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_6;
  CFRetain(ValueAtIndex);
  v8 = CFGetTypeID(v7);
  if (v8 != CFArrayGetTypeID())
  {
    CFRelease(v7);
LABEL_6:
    v9 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v7;
  v9 = 1;
LABEL_7:
  a1[8] = v9;
}

void applesauce::CF::convert_as<std::vector<std::vector<std::vector<std::vector<float>>>>,0>(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID;
  CFIndex Count;
  int v5;
  uint64_t v6;
  CFIndex v7;
  const void *ValueAtIndex;
  CFTypeID v9;
  int v10;
  CFIndex v11;
  uint64_t v12;
  const void *v13;
  CFTypeID v14;
  int v15;
  CFIndex v16;
  const __CFArray *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  void *v37;
  char v38;
  __int128 v39;
  _QWORD v40[2];
  __int128 v41;
  void *v42;
  char v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  void *v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  void **v52;

  TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    Count = CFArrayGetCount(a2);
    v5 = Count;
    v39 = 0uLL;
    v40[0] = 0;
    if (Count << 32)
    {
      if (Count << 32 < 0)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v52 = (void **)v40;
      v48 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((int)Count);
      v49 = v48;
      v50 = v48;
      v51 = &v48[3 * v6];
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v39, &v48);
      std::__split_buffer<std::vector<std::vector<std::vector<float>>>>::~__split_buffer((uint64_t)&v48);
    }
    if (v5 < 1)
    {
LABEL_50:
      *(_OWORD *)a1 = v39;
      *(_QWORD *)(a1 + 16) = v40[0];
      v40[0] = 0;
      v39 = 0uLL;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      v7 = 0;
      v35 = v5;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
        if (!ValueAtIndex)
          break;
        v9 = CFArrayGetTypeID();
        if (v9 != CFGetTypeID(ValueAtIndex))
          break;
        v10 = CFArrayGetCount((CFArrayRef)ValueAtIndex);
        v44 = 0uLL;
        v45 = 0;
        std::vector<std::vector<std::vector<float>>>::reserve(&v44, v10);
        if (v10 < 1)
        {
LABEL_35:
          v36 = v44;
          v37 = v45;
          v45 = 0;
          v44 = 0uLL;
          v38 = 1;
        }
        else
        {
          v11 = 0;
          v12 = v10;
          while (1)
          {
            v13 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, v11);
            if (!v13)
              break;
            v14 = CFArrayGetTypeID();
            if (v14 != CFGetTypeID(v13))
              break;
            v15 = CFArrayGetCount((CFArrayRef)v13);
            v46 = 0uLL;
            v47 = 0;
            std::vector<std::vector<float>>::reserve((uint64_t *)&v46, v15);
            if (v15 < 1)
            {
LABEL_20:
              v41 = v46;
              v42 = v47;
              v47 = 0;
              v46 = 0uLL;
              v43 = 1;
            }
            else
            {
              v16 = 0;
              while (1)
              {
                v17 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v13, v16);
                applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v48, v17);
                if (!(_BYTE)v51)
                  break;
                std::vector<std::vector<float>>::emplace_back<std::vector<float>>((uint64_t *)&v46, (uint64_t)&v48);
                if ((_BYTE)v51 && v48)
                  operator delete(v48);
                if (v15 == ++v16)
                  goto LABEL_20;
              }
              LOBYTE(v41) = 0;
              v43 = 0;
            }
            v48 = (void **)&v46;
            std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v48);
            if (!v43)
              break;
            v18 = *((_QWORD *)&v44 + 1);
            if (*((_QWORD *)&v44 + 1) >= (unint64_t)v45)
            {
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3);
              v21 = v20 + 1;
              if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((uint64_t)v45 - (uint64_t)v44) >> 3) > v21)
                v21 = 0x5555555555555556 * (((uint64_t)v45 - (uint64_t)v44) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v45 - (uint64_t)v44) >> 3) >= 0x555555555555555)
                v22 = 0xAAAAAAAAAAAAAAALL;
              else
                v22 = v21;
              v52 = &v45;
              v23 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v22);
              v24 = &v23[3 * v20];
              v48 = v23;
              v49 = v24;
              v51 = &v23[3 * v25];
              *v24 = 0;
              v24[1] = 0;
              v24[2] = 0;
              *(_OWORD *)v24 = v41;
              v24[2] = v42;
              v41 = 0uLL;
              v42 = 0;
              v50 = v24 + 3;
              std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v44, &v48);
              v19 = *((_QWORD *)&v44 + 1);
              std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v48);
            }
            else
            {
              **((_QWORD **)&v44 + 1) = 0;
              *(_QWORD *)(v18 + 8) = 0;
              *(_QWORD *)(v18 + 16) = 0;
              *(_OWORD *)v18 = v41;
              *(_QWORD *)(v18 + 16) = v42;
              v41 = 0uLL;
              v42 = 0;
              v19 = v18 + 24;
            }
            *((_QWORD *)&v44 + 1) = v19;
            if (v43)
            {
              v48 = (void **)&v41;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v48);
            }
            if (++v11 == v12)
              goto LABEL_35;
          }
          LOBYTE(v36) = 0;
          v38 = 0;
        }
        v48 = (void **)&v44;
        std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v48);
        if (!v38)
          break;
        v26 = *((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1) >= v40[0])
        {
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v39 + 1) - v39) >> 3);
          v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v40[0] - v39) >> 3) > v29)
            v29 = 0x5555555555555556 * ((uint64_t)(v40[0] - v39) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40[0] - v39) >> 3) >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v29;
          v52 = (void **)v40;
          v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v30);
          v32 = &v31[3 * v28];
          v48 = v31;
          v49 = v32;
          v51 = &v31[3 * v33];
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          *(_OWORD *)v32 = v36;
          v32[2] = v37;
          v36 = 0uLL;
          v37 = 0;
          v50 = v32 + 3;
          std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v39, &v48);
          v27 = *((_QWORD *)&v39 + 1);
          std::__split_buffer<std::vector<std::vector<std::vector<float>>>>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          **((_QWORD **)&v39 + 1) = 0;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 16) = 0;
          *(_OWORD *)v26 = v36;
          *(_QWORD *)(v26 + 16) = v37;
          v36 = 0uLL;
          v37 = 0;
          v27 = v26 + 24;
        }
        *((_QWORD *)&v39 + 1) = v27;
        if (v38)
        {
          v48 = (void **)&v36;
          std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v48);
        }
        if (++v7 == v35)
          goto LABEL_50;
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }
    v48 = (void **)&v39;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v48);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<std::vector<float>>>>(uint64_t ***a1)
{
  unint64_t v2;
  uint64_t **i;
  uint64_t **v4;
  CFArrayRef *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  unint64_t v16;
  CFArrayRef v17;
  uint64_t *v19[3];
  int64x2_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  unint64_t v24;
  unint64_t *v25;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v20 = 0uLL;
  v21 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve(&v20, v2);
  v4 = *a1;
  for (i = a1[1]; v4 != i; v4 += 3)
  {
    memset(v19, 0, sizeof(v19));
    std::vector<std::vector<std::vector<float>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(v19, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (v4[1] - *v4));
    v5 = (CFArrayRef *)v20.i64[1];
    if (v20.i64[1] >= v21)
    {
      v7 = (v20.i64[1] - v20.i64[0]) >> 3;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v8 = (uint64_t)(v21 - v20.i64[0]) >> 2;
      if (v8 <= v7 + 1)
        v8 = v7 + 1;
      if (v21 - v20.i64[0] >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      v25 = &v21;
      if (v9)
        v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
      else
        v10 = 0;
      v22 = (int64x2_t *)v9;
      v23.i64[0] = v9 + 8 * v7;
      v23.i64[1] = v23.i64[0];
      v24 = v9 + 8 * v10;
      *(_QWORD *)v23.i64[0] = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(v19);
      v11 = v23.i64[0];
      v6 = v23.i64[1] + 8;
      v23.i64[1] += 8;
      v12 = (_QWORD *)v20.i64[1];
      v13 = (_QWORD *)v20.i64[0];
      if (v20.i64[1] == v20.i64[0])
      {
        v15 = vdupq_n_s64(v20.u64[1]);
      }
      else
      {
        do
        {
          v14 = *--v12;
          *(_QWORD *)(v11 - 8) = v14;
          v11 -= 8;
          *v12 = 0;
        }
        while (v12 != v13);
        v15 = v20;
        v6 = v23.i64[1];
      }
      v20.i64[0] = v11;
      v20.i64[1] = v6;
      v23 = v15;
      v16 = v21;
      v21 = v24;
      v24 = v16;
      v22 = (int64x2_t *)v15.i64[0];
      std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *v5 = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(v19);
      v6 = (uint64_t)(v5 + 1);
    }
    v20.i64[1] = v6;
    v22 = (int64x2_t *)v19;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  }
  v17 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v20);
  v22 = &v20;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return v17;
}

void sub_1B64D2E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<applesauce::CF::ArrayRef>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
        *(_QWORD *)v6 = 0;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(uint64_t **a1)
{
  unint64_t v2;
  uint64_t *i;
  uint64_t *v4;
  CFArrayRef *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  unint64_t v16;
  CFArrayRef v17;
  uint64_t v19[3];
  int64x2_t v20;
  unint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  unint64_t v24;
  unint64_t *v25;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v20 = 0uLL;
  v21 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve(&v20, v2);
  v4 = *a1;
  for (i = a1[1]; v4 != i; v4 += 3)
  {
    memset(v19, 0, sizeof(v19));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v19, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3));
    v5 = (CFArrayRef *)v20.i64[1];
    if (v20.i64[1] >= v21)
    {
      v7 = (v20.i64[1] - v20.i64[0]) >> 3;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v8 = (uint64_t)(v21 - v20.i64[0]) >> 2;
      if (v8 <= v7 + 1)
        v8 = v7 + 1;
      if (v21 - v20.i64[0] >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      v25 = &v21;
      if (v9)
        v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
      else
        v10 = 0;
      v22 = (int64x2_t *)v9;
      v23.i64[0] = v9 + 8 * v7;
      v23.i64[1] = v23.i64[0];
      v24 = v9 + 8 * v10;
      *(_QWORD *)v23.i64[0] = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(v19);
      v11 = v23.i64[0];
      v6 = v23.i64[1] + 8;
      v23.i64[1] += 8;
      v12 = (_QWORD *)v20.i64[1];
      v13 = (_QWORD *)v20.i64[0];
      if (v20.i64[1] == v20.i64[0])
      {
        v15 = vdupq_n_s64(v20.u64[1]);
      }
      else
      {
        do
        {
          v14 = *--v12;
          *(_QWORD *)(v11 - 8) = v14;
          v11 -= 8;
          *v12 = 0;
        }
        while (v12 != v13);
        v15 = v20;
        v6 = v23.i64[1];
      }
      v20.i64[0] = v11;
      v20.i64[1] = v6;
      v23 = v15;
      v16 = v21;
      v21 = v24;
      v24 = v16;
      v22 = (int64x2_t *)v15.i64[0];
      std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *v5 = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(v19);
      v6 = (uint64_t)(v5 + 1);
    }
    v20.i64[1] = v6;
    v22 = (int64x2_t *)v19;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  }
  v17 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v20);
  v22 = &v20;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return v17;
}

void sub_1B64D3168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<float>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t i;
  uint64_t v4;
  CFArrayRef *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  unint64_t v16;
  CFArrayRef v17;
  void *__p;
  void *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  unint64_t v26;
  unint64_t *v27;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v22 = 0uLL;
  v23 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve(&v22, v2);
  v4 = *a1;
  for (i = a1[1]; v4 != i; v4 += 24)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
    v5 = (CFArrayRef *)v22.i64[1];
    if (v22.i64[1] >= v23)
    {
      v7 = (v22.i64[1] - v22.i64[0]) >> 3;
      if ((unint64_t)(v7 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v8 = (uint64_t)(v23 - v22.i64[0]) >> 2;
      if (v8 <= v7 + 1)
        v8 = v7 + 1;
      if (v23 - v22.i64[0] >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      v27 = &v23;
      if (v9)
        v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
      else
        v10 = 0;
      v24 = (int64x2_t *)v9;
      v25.i64[0] = v9 + 8 * v7;
      v25.i64[1] = v25.i64[0];
      v26 = v9 + 8 * v10;
      *(_QWORD *)v25.i64[0] = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      v11 = v25.i64[0];
      v6 = v25.i64[1] + 8;
      v25.i64[1] += 8;
      v12 = (_QWORD *)v22.i64[1];
      v13 = (_QWORD *)v22.i64[0];
      if (v22.i64[1] == v22.i64[0])
      {
        v15 = vdupq_n_s64(v22.u64[1]);
      }
      else
      {
        do
        {
          v14 = *--v12;
          *(_QWORD *)(v11 - 8) = v14;
          v11 -= 8;
          *v12 = 0;
        }
        while (v12 != v13);
        v15 = v22;
        v6 = v25.i64[1];
      }
      v22.i64[0] = v11;
      v22.i64[1] = v6;
      v25 = v15;
      v16 = v23;
      v23 = v26;
      v26 = v16;
      v24 = (int64x2_t *)v15.i64[0];
      std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v24);
    }
    else
    {
      *v5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      v6 = (uint64_t)(v5 + 1);
    }
    v22.i64[1] = v6;
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  v17 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v22);
  v24 = &v22;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  return v17;
}

void sub_1B64D3378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  __p = &a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  AUFIREngineKernel *v3;

  *(_QWORD *)a1 = &off_1E69E3280;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::drain_trash(a1);
  v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v3))
  {
    if (v3)
    {
      AUFIREngineKernel::~AUFIREngineKernel(v3);
      MEMORY[0x1BCC95CE0]();
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

_QWORD *ca::concurrent::deferred_deletion_stash<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69E3260;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69E3260;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

void VoiceProcessorV5::~VoiceProcessorV5(AudioBufferList **this)
{
  VoiceProcessorV5::~VoiceProcessorV5(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  VPTimeFreqConverter *v2;
  VPTimeFreqConverter *v3;

  *this = (AudioBufferList *)&off_1E69E32E0;
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::invalidate((uint64_t)(this + 2075));
  myFreeABLDynamic(this + 2131);
  v2 = (VPTimeFreqConverter *)this[2130];
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1BCC95CEC]();
    this[2130] = 0;
  }
  v3 = (VPTimeFreqConverter *)this[2132];
  if (v3)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v3);
    MEMORY[0x1BCC95CEC]();
    this[2132] = 0;
  }
  VoiceProcessorV4::~VoiceProcessorV4((VoiceProcessorV4 *)this);
}

uint64_t VoiceProcessorV5::GetVersion(VoiceProcessorV5 *this)
{
  return 5;
}

uint64_t VoiceProcessorV5::Initialize(VoiceProcessorV5 *this)
{
  int v2;
  int v3;
  uint64_t result;

  *((_DWORD *)this + 100) = 0;
  v2 = *((_DWORD *)this + 153);
  if (v2)
  {
    v3 = 0;
    do
    {
      v3 = (2 * v3) | 1;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 100) = v3;
  }
  result = VoiceProcessorV2::Initialize(this);
  if (!(_DWORD)result)
  {
    VoiceProcessorV4::InitializeV4Specifics(this);
    VoiceProcessorV5::InitializeV5Specifics(this);
    (*(void (**)(VoiceProcessorV5 *))(*(_QWORD *)this + 696))(this);
    result = 0;
    *((_BYTE *)this + 17064) = 0;
  }
  return result;
}

void VoiceProcessorV5::SetupUplinkBasicAUChain(VoiceProcessorV5 *this)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v7;
  int v8;

  v2 = (unint64_t *)((char *)this + 4656);
  v7 = (char *)this + 4656;
  v8 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)&v7);
  v3 = *((_QWORD *)this + 582);
  v4 = *((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = v4 | 0x11;
  *((_QWORD *)this + 582) = v3 | 0xC220040000010040;
  if (*((_BYTE *)this + 1676))
    *v2 = v3 | 0xD220040000010040;
  v5 = *((_DWORD *)this + 571);
  if (v5 == 1 || v5 == -1)
    *((_QWORD *)this + 583) = v4 | 0x13;
}

void VoiceProcessorV5::SetupUplinkLiteAUChain(VoiceProcessorV5 *this)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v7;
  int v8;

  v2 = (unint64_t *)((char *)this + 4656);
  v7 = (char *)this + 4656;
  v8 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,71ul>>((uint64_t)&v7);
  v3 = *((_QWORD *)this + 582);
  v4 = *((_QWORD *)this + 583);
  *((_QWORD *)this + 583) = v4 | 0x10;
  *((_QWORD *)this + 582) = v3 | 0xC000040000010040;
  if (*((_BYTE *)this + 1676))
    *v2 = v3 | 0xD000040000010040;
  v5 = *((_DWORD *)this + 571);
  if (v5 == 1 || v5 == -1)
    *((_QWORD *)this + 583) = v4 | 0x12;
}

uint64_t VoiceProcessorV5::SetupUplink_MMNS(uint64_t this, unsigned int a2)
{
  unint64_t v2;

  if (a2 != 1)
  {
    v2 = *(_QWORD *)(this + 4656) & 0xFD5FD7FFFFFDFF7FLL;
    *(_QWORD *)(this + 4656) = v2 + 0x80280000020080;
    if (a2)
    {
      *(_QWORD *)(this + 4656) = v2 | 0x80280000020086;
      if (a2 >= 3)
      {
        *(_QWORD *)(this + 4656) = v2 | 0x8028000002008ELL;
        if (a2 != 3)
          *(_QWORD *)(this + 4656) = v2 | 0x802801800E029ELL;
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV5::SetupUplink_BF_MS(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 < 2)
  {
    if (a2 && (a3 & 1) == 0)
    {
      v4 = *(_QWORD *)(this + 4656) | 2;
      goto LABEL_9;
    }
  }
  else
  {
    v3 = *(_QWORD *)(this + 4656);
    *(_QWORD *)(this + 4656) = v3 | 0x60020081;
    if ((a3 & 1) == 0)
    {
      *(_QWORD *)(this + 4656) = v3 | 0x60020087;
      if (a2 != 2)
      {
        *(_QWORD *)(this + 4656) = v3 | 0x6002008F;
        if (a2 >= 4)
        {
          v4 = v3 | 0x6002009F;
LABEL_9:
          *(_QWORD *)(this + 4656) = v4;
        }
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV5::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 != 1)
  {
    v2 = *(_QWORD *)(this + 4656);
    v3 = 537002143;
    if (a2 == 3)
      v3 = 537002127;
    v4 = v2 | v3;
    if (a2 < 3)
      v4 = v2 | 0x20020087;
    if (!a2)
      v4 = v2 | 0x20020081;
    *(_QWORD *)(this + 4656) = v4 & 0xFDFFFFDFDFEFFBFFLL | 0x200002000100400;
  }
  return this;
}

uint64_t VoiceProcessorV5::SetupUplink_SCLP_PMWF_BeamIt(uint64_t this, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)(this + 4656) = *(_QWORD *)(this + 4656) & 0xFDFFFFE9FFF5FD7FLL | 0x16000A0280;
    *(_DWORD *)(this + 12392) = 9;
  }
  return this;
}

void VoiceProcessorV5::SetupDownlinkBasicAUChain(VoiceProcessorV5 *this)
{
  VoiceProcessorV4::SetupDownlinkBasicAUChain(this);
  *((_QWORD *)this + 1104) = *((_QWORD *)this + 1104) & 0xEFFF7FFFFFFFFFFFLL | 0x800000000000;
}

void VoiceProcessorV5::ApplyCustomTelephonyDSPOverrides(int8x16_t *this, CFDictionaryRef theDict, int a3)
{
  const __CFNumber *Value;
  const __CFNumber *v7;
  uint64_t v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  __int8 *v17;
  float v18;
  int v19;
  const __CFArray *v20;
  const __CFArray *v21;
  unsigned int Count;
  uint64_t v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  __int8 *v28;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const void *v37;
  float valuePtr;

  if (theDict && CFDictionaryGetCount(theDict))
  {
    if (a3)
    {
      if (CFDictionaryContainsKey(theDict, CFSTR("noise suppression")))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("noise suppression"));
        if (Value)
        {
          v7 = Value;
          CFRetain(Value);
          valuePtr = 0.0;
          CFNumberGetValue(v7, kCFNumberFloat32Type, &valuePtr);
          CFRelease(v7);
          v8 = this[291].i64[0];
          this[291].i64[1] |= 0x10uLL;
          this[291].i64[0] = v8 & 0xFF5FFFFFFFFFFFFFLL | 0x20000000000000;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)&this[372].i64[1], 0, valuePtr);
        }
      }
      if (CFDictionaryContainsKey(theDict, CFSTR("agc")))
      {
        v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("agc"));
        if (v9)
        {
          v10 = v9;
          CFRetain(v9);
          valuePtr = 0.0;
          CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
          CFRelease(v10);
          v11 = this[291].i64[1];
          v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
          v13 = v11 | 0x12;
          if (LODWORD(valuePtr) == 1)
            v14 = v13;
          else
            v14 = v12;
          this[291].i64[1] = v14;
        }
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("gain")))
    {
      v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("gain"));
      if (v15)
      {
        v16 = v15;
        CFRetain(v15);
        valuePtr = 0.0;
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        CFRelease(v16);
        if (a3)
        {
          this[291] = vorrq_s8(this[291], (int8x16_t)xmmword_1B66A0610);
          v17 = &this[436].i8[8];
          v18 = valuePtr;
          v19 = 1;
        }
        else
        {
          this[552].i64[0] |= 0x800800000000000uLL;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)&this[678].i64[1], 0, valuePtr);
          v18 = valuePtr;
          v17 = &this[678].i8[8];
          v19 = 8;
        }
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v17, v19, v18);
      }
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("eq")))
    {
      v20 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("eq"));
      if (v20)
      {
        v21 = v20;
        CFRetain(v20);
        Count = CFArrayGetCount(v21);
        v23 = 9640;
        if (a3)
        {
          v23 = 6200;
          this[291].i64[0] |= 0x8000000000000000;
          v24 = (int8x16_t *)((char *)this + 4664);
          v25 = 16;
        }
        else
        {
          v24 = this + 552;
          v25 = 0x800200000000;
        }
        v24->i64[0] |= v25;
        if (Count >= 0xA)
          v26 = 10;
        else
          v26 = Count;
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = &this->i8[v23];
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v27);
            if (ValueAtIndex)
            {
              v30 = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterType"))
                && CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterFrequency")))
              {
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 1000, 0.0);
                v31 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterType"));
                if (v31)
                {
                  v32 = v31;
                  CFRetain(v31);
                  valuePtr = 0.0;
                  CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
                  CFRelease(v32);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 2000, (float)LODWORD(valuePtr));
                }
                v33 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterFrequency"));
                if (v33)
                {
                  v34 = v33;
                  CFRetain(v33);
                  valuePtr = 0.0;
                  CFNumberGetValue(v34, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v34);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 3000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterGain")))
              {
                v35 = (const __CFNumber *)CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterGain"));
                if (v35)
                {
                  v36 = v35;
                  CFRetain(v35);
                  valuePtr = 0.0;
                  CFNumberGetValue(v36, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v36);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 4000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, CFSTR("AUNBandEQ_FilterBandwidth")))
              {
                v37 = CFDictionaryGetValue(v30, CFSTR("AUNBandEQ_FilterBandwidth"));
                CFRetain(v37);
                valuePtr = 0.0;
                CFNumberGetValue((CFNumberRef)v37, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v37);
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v28, v27 + 5000, valuePtr);
              }
              CFRelease(v30);
            }
            ++v27;
          }
          while (v26 != v27);
        }
        CFRelease(v21);
      }
    }
  }
}

uint64_t VoiceProcessorV5::SetupECApplicator(VoiceProcessorV5 *this)
{
  ECApplicator **v2;
  ECApplicator **v3;
  ECApplicator *v4;
  ECApplicator **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  ECApplicator **v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  ECApplicator *v18;
  int64x2_t v19;
  ECApplicator *v20;
  unint64_t v21;
  ECApplicator *v22;
  ECApplicator **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  ECApplicator **v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  ECApplicator *v36;
  int64x2_t v37;
  ECApplicator *v38;
  unint64_t v39;
  ECApplicator *v40;
  ECApplicator **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  ECApplicator **v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  ECApplicator *v54;
  int64x2_t v55;
  ECApplicator *v56;
  unint64_t v57;
  ECApplicator *v58;
  ECApplicator **v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  ECApplicator **v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  ECApplicator *v72;
  int64x2_t v73;
  ECApplicator *v74;
  unint64_t v75;
  ECApplicator *v76;
  ECApplicator **v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  ECApplicator **v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  ECApplicator *v90;
  int64x2_t v91;
  ECApplicator *v92;
  unint64_t v93;
  AudioBufferList *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t v101;
  AudioBufferList **v102[3];
  AudioBufferList *v103[2];
  AudioBufferList **v104[3];
  AudioBufferList *v105[2];
  AudioBufferList **v106[3];
  AudioBufferList *v107[2];
  AudioBufferList **v108[3];
  AudioBufferList *v109[2];
  AudioBufferList *v110[2];
  AudioBufferList **v111;
  int64x2_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = (ECApplicator **)*((_QWORD *)this + 2099);
  v3 = (ECApplicator **)*((_QWORD *)this + 2098);
  while (v2 != v3)
    std::unique_ptr<ECApplicator>::reset[abi:ne180100](--v2);
  *((_QWORD *)this + 2099) = v3;
  v4 = (ECApplicator *)operator new();
  ECApplicator::ECApplicator(v4, this, 16, 3);
  v108[0] = (AudioBufferList **)v4;
  v5 = (ECApplicator **)*((_QWORD *)this + 2099);
  v6 = *((_QWORD *)this + 2100);
  if ((unint64_t)v5 >= v6)
  {
    v7 = *((_QWORD *)this + 2098);
    v8 = ((uint64_t)v5 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    v114 = (char *)this + 16800;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v11);
    else
      v12 = 0;
    v13 = (ECApplicator **)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    v113 = v14;
    v108[0] = 0;
    *v13 = v4;
    v15 = v13 + 1;
    v112.i64[1] = (uint64_t)(v13 + 1);
    v16 = (_QWORD *)*((_QWORD *)this + 2099);
    v17 = (_QWORD *)*((_QWORD *)this + 2098);
    if (v16 == v17)
    {
      v20 = 0;
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = (ECApplicator *)*--v16;
        *v16 = 0;
        *--v13 = v18;
      }
      while (v16 != v17);
      v19 = *((int64x2_t *)this + 1049);
      v15 = (_QWORD *)v112.i64[1];
      v14 = v113;
      v20 = (ECApplicator *)v108[0];
    }
    *((_QWORD *)this + 2098) = v13;
    *((_QWORD *)this + 2099) = v15;
    v112 = v19;
    v21 = *((_QWORD *)this + 2100);
    *((_QWORD *)this + 2100) = v14;
    v113 = v21;
    v111 = (AudioBufferList **)v19.i64[0];
    std::__split_buffer<std::unique_ptr<ECApplicator>>::~__split_buffer((uint64_t)&v111);
    *((_QWORD *)this + 2099) = v15;
    if (v20)
    {
      ECApplicator::~ECApplicator(v20);
      MEMORY[0x1BCC95CEC]();
    }
  }
  else
  {
    *v5 = v4;
    *((_QWORD *)this + 2099) = v5 + 1;
  }
  v22 = (ECApplicator *)operator new();
  ECApplicator::ECApplicator(v22, this, 17, 3);
  v108[0] = (AudioBufferList **)v22;
  v23 = (ECApplicator **)*((_QWORD *)this + 2099);
  v24 = *((_QWORD *)this + 2100);
  if ((unint64_t)v23 >= v24)
  {
    v25 = *((_QWORD *)this + 2098);
    v26 = ((uint64_t)v23 - v25) >> 3;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v28 = v24 - v25;
    if (v28 >> 2 > v27)
      v27 = v28 >> 2;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    v114 = (char *)this + 16800;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v29);
    else
      v30 = 0;
    v31 = (ECApplicator **)(v29 + 8 * v26);
    v32 = v29 + 8 * v30;
    v113 = v32;
    v108[0] = 0;
    *v31 = v22;
    v33 = v31 + 1;
    v112.i64[1] = (uint64_t)(v31 + 1);
    v34 = (_QWORD *)*((_QWORD *)this + 2099);
    v35 = (_QWORD *)*((_QWORD *)this + 2098);
    if (v34 == v35)
    {
      v38 = 0;
      v37 = vdupq_n_s64((unint64_t)v34);
    }
    else
    {
      do
      {
        v36 = (ECApplicator *)*--v34;
        *v34 = 0;
        *--v31 = v36;
      }
      while (v34 != v35);
      v37 = *((int64x2_t *)this + 1049);
      v33 = (_QWORD *)v112.i64[1];
      v32 = v113;
      v38 = (ECApplicator *)v108[0];
    }
    *((_QWORD *)this + 2098) = v31;
    *((_QWORD *)this + 2099) = v33;
    v112 = v37;
    v39 = *((_QWORD *)this + 2100);
    *((_QWORD *)this + 2100) = v32;
    v113 = v39;
    v111 = (AudioBufferList **)v37.i64[0];
    std::__split_buffer<std::unique_ptr<ECApplicator>>::~__split_buffer((uint64_t)&v111);
    *((_QWORD *)this + 2099) = v33;
    if (v38)
    {
      ECApplicator::~ECApplicator(v38);
      MEMORY[0x1BCC95CEC]();
    }
  }
  else
  {
    *v23 = v22;
    *((_QWORD *)this + 2099) = v23 + 1;
  }
  v40 = (ECApplicator *)operator new();
  ECApplicator::ECApplicator(v40, this, 18, 3);
  v108[0] = (AudioBufferList **)v40;
  v41 = (ECApplicator **)*((_QWORD *)this + 2099);
  v42 = *((_QWORD *)this + 2100);
  if ((unint64_t)v41 >= v42)
  {
    v43 = *((_QWORD *)this + 2098);
    v44 = ((uint64_t)v41 - v43) >> 3;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v46 = v42 - v43;
    if (v46 >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v114 = (char *)this + 16800;
    if (v47)
      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v47);
    else
      v48 = 0;
    v49 = (ECApplicator **)(v47 + 8 * v44);
    v50 = v47 + 8 * v48;
    v113 = v50;
    v108[0] = 0;
    *v49 = v40;
    v51 = v49 + 1;
    v112.i64[1] = (uint64_t)(v49 + 1);
    v52 = (_QWORD *)*((_QWORD *)this + 2099);
    v53 = (_QWORD *)*((_QWORD *)this + 2098);
    if (v52 == v53)
    {
      v56 = 0;
      v55 = vdupq_n_s64((unint64_t)v52);
    }
    else
    {
      do
      {
        v54 = (ECApplicator *)*--v52;
        *v52 = 0;
        *--v49 = v54;
      }
      while (v52 != v53);
      v55 = *((int64x2_t *)this + 1049);
      v51 = (_QWORD *)v112.i64[1];
      v50 = v113;
      v56 = (ECApplicator *)v108[0];
    }
    *((_QWORD *)this + 2098) = v49;
    *((_QWORD *)this + 2099) = v51;
    v112 = v55;
    v57 = *((_QWORD *)this + 2100);
    *((_QWORD *)this + 2100) = v50;
    v113 = v57;
    v111 = (AudioBufferList **)v55.i64[0];
    std::__split_buffer<std::unique_ptr<ECApplicator>>::~__split_buffer((uint64_t)&v111);
    *((_QWORD *)this + 2099) = v51;
    if (v56)
    {
      ECApplicator::~ECApplicator(v56);
      MEMORY[0x1BCC95CEC]();
    }
  }
  else
  {
    *v41 = v40;
    *((_QWORD *)this + 2099) = v41 + 1;
  }
  v58 = (ECApplicator *)operator new();
  ECApplicator::ECApplicator(v58, this, 19, 3);
  v108[0] = (AudioBufferList **)v58;
  v59 = (ECApplicator **)*((_QWORD *)this + 2099);
  v60 = *((_QWORD *)this + 2100);
  if ((unint64_t)v59 >= v60)
  {
    v61 = *((_QWORD *)this + 2098);
    v62 = ((uint64_t)v59 - v61) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v64 = v60 - v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v114 = (char *)this + 16800;
    if (v65)
      v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v65);
    else
      v66 = 0;
    v67 = (ECApplicator **)(v65 + 8 * v62);
    v68 = v65 + 8 * v66;
    v113 = v68;
    v108[0] = 0;
    *v67 = v58;
    v69 = v67 + 1;
    v112.i64[1] = (uint64_t)(v67 + 1);
    v70 = (_QWORD *)*((_QWORD *)this + 2099);
    v71 = (_QWORD *)*((_QWORD *)this + 2098);
    if (v70 == v71)
    {
      v74 = 0;
      v73 = vdupq_n_s64((unint64_t)v70);
    }
    else
    {
      do
      {
        v72 = (ECApplicator *)*--v70;
        *v70 = 0;
        *--v67 = v72;
      }
      while (v70 != v71);
      v73 = *((int64x2_t *)this + 1049);
      v69 = (_QWORD *)v112.i64[1];
      v68 = v113;
      v74 = (ECApplicator *)v108[0];
    }
    *((_QWORD *)this + 2098) = v67;
    *((_QWORD *)this + 2099) = v69;
    v112 = v73;
    v75 = *((_QWORD *)this + 2100);
    *((_QWORD *)this + 2100) = v68;
    v113 = v75;
    v111 = (AudioBufferList **)v73.i64[0];
    std::__split_buffer<std::unique_ptr<ECApplicator>>::~__split_buffer((uint64_t)&v111);
    *((_QWORD *)this + 2099) = v69;
    if (v74)
    {
      ECApplicator::~ECApplicator(v74);
      MEMORY[0x1BCC95CEC]();
    }
  }
  else
  {
    *v59 = v58;
    *((_QWORD *)this + 2099) = v59 + 1;
  }
  v76 = (ECApplicator *)operator new();
  ECApplicator::ECApplicator(v76, this, 20, 3);
  v108[0] = (AudioBufferList **)v76;
  v77 = (ECApplicator **)*((_QWORD *)this + 2099);
  v78 = *((_QWORD *)this + 2100);
  if ((unint64_t)v77 >= v78)
  {
    v80 = *((_QWORD *)this + 2098);
    v81 = ((uint64_t)v77 - v80) >> 3;
    if ((unint64_t)(v81 + 1) >> 61)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v82 = v78 - v80;
    v83 = v82 >> 2;
    if (v82 >> 2 <= (unint64_t)(v81 + 1))
      v83 = v81 + 1;
    if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    v114 = (char *)this + 16800;
    if (v84)
      v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v84);
    else
      v85 = 0;
    v86 = (ECApplicator **)(v84 + 8 * v81);
    v87 = v84 + 8 * v85;
    v113 = v87;
    v108[0] = 0;
    *v86 = v76;
    v79 = (uint64_t *)(v86 + 1);
    v112.i64[1] = (uint64_t)(v86 + 1);
    v88 = (_QWORD *)*((_QWORD *)this + 2099);
    v89 = (_QWORD *)*((_QWORD *)this + 2098);
    if (v88 == v89)
    {
      v92 = 0;
      v91 = vdupq_n_s64((unint64_t)v88);
    }
    else
    {
      do
      {
        v90 = (ECApplicator *)*--v88;
        *v88 = 0;
        *--v86 = v90;
      }
      while (v88 != v89);
      v91 = *((int64x2_t *)this + 1049);
      v79 = (uint64_t *)v112.i64[1];
      v87 = v113;
      v92 = (ECApplicator *)v108[0];
    }
    *((_QWORD *)this + 2098) = v86;
    *((_QWORD *)this + 2099) = v79;
    v112 = v91;
    v93 = *((_QWORD *)this + 2100);
    *((_QWORD *)this + 2100) = v87;
    v113 = v93;
    v111 = (AudioBufferList **)v91.i64[0];
    std::__split_buffer<std::unique_ptr<ECApplicator>>::~__split_buffer((uint64_t)&v111);
    *((_QWORD *)this + 2099) = v79;
    if (v92)
    {
      ECApplicator::~ECApplicator(v92);
      MEMORY[0x1BCC95CEC]();
      v79 = (uint64_t *)*((_QWORD *)this + 2099);
    }
  }
  else
  {
    *v77 = v76;
    v79 = (uint64_t *)(v77 + 1);
    *((_QWORD *)this + 2099) = v79;
  }
  v94 = (AudioBufferList *)*((_QWORD *)this + 134);
  v110[0] = (AudioBufferList *)((char *)this + 16808);
  v110[1] = v94;
  v111 = (AudioBufferList **)((char *)this + 1088);
  v112.i64[0] = (uint64_t)this + 3344;
  v112.i64[1] = (uint64_t)this + 3384;
  v109[0] = (AudioBufferList *)((char *)this + 16832);
  v109[1] = v94;
  v108[0] = (AudioBufferList **)((char *)this + 1088);
  v108[1] = (AudioBufferList **)((char *)this + 3352);
  v108[2] = (AudioBufferList **)((char *)this + 3392);
  v107[0] = (AudioBufferList *)((char *)this + 16856);
  v107[1] = v94;
  v106[0] = (AudioBufferList **)((char *)this + 1088);
  v106[1] = (AudioBufferList **)((char *)this + 3368);
  v106[2] = (AudioBufferList **)((char *)this + 3400);
  v105[0] = (AudioBufferList *)((char *)this + 16880);
  v105[1] = v94;
  v104[0] = (AudioBufferList **)((char *)this + 1088);
  v104[1] = (AudioBufferList **)((char *)this + 3360);
  v104[2] = (AudioBufferList **)((char *)this + 3408);
  v103[0] = (AudioBufferList *)((char *)this + 16832);
  v103[1] = v94;
  v102[0] = (AudioBufferList **)((char *)this + 1088);
  v102[1] = (AudioBufferList **)((char *)this + 3376);
  v102[2] = (AudioBufferList **)((char *)this + 3416);
  v95 = (uint64_t *)*((_QWORD *)this + 2098);
  if (v79 == v95)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  ECApplicator::setInputOutputABLs(*v95, v110, &v111);
  v96 = *((_QWORD *)this + 2098);
  if ((unint64_t)(*((_QWORD *)this + 2099) - v96) <= 8)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  ECApplicator::setInputOutputABLs(*(_QWORD *)(v96 + 8), v109, v108);
  v97 = *((_QWORD *)this + 2098);
  if ((unint64_t)(*((_QWORD *)this + 2099) - v97) <= 0x10)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  ECApplicator::setInputOutputABLs(*(_QWORD *)(v97 + 16), v107, v106);
  v98 = *((_QWORD *)this + 2098);
  if ((unint64_t)(*((_QWORD *)this + 2099) - v98) <= 0x18)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  ECApplicator::setInputOutputABLs(*(_QWORD *)(v98 + 24), v105, v104);
  v99 = *((_QWORD *)this + 2098);
  if ((unint64_t)(*((_QWORD *)this + 2099) - v99) <= 0x20)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  result = ECApplicator::setInputOutputABLs(*(_QWORD *)(v99 + 32), v103, v102);
  v101 = *((_QWORD *)this + 2098);
  if ((unint64_t)(*((_QWORD *)this + 2099) - v101) <= 0x20)
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  *(_BYTE *)(*(_QWORD *)(v101 + 32) + 12) = 0;
  return result;
}

void sub_1B64D45D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::unique_ptr<ECApplicator>::reset[abi:ne180100]((ECApplicator **)va);
  _Unwind_Resume(a1);
}

void VoiceProcessorV5::InitializeV5Specifics(VoiceProcessorV5 *this)
{
  VPTimeFreqConverter *v2;
  VPTimeFreqConverter *v3;

  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 824), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2131);
  v2 = (VPTimeFreqConverter *)*((_QWORD *)this + 2130);
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1BCC95CEC]();
  }
  v3 = (VPTimeFreqConverter *)*((_QWORD *)this + 2132);
  if (v3)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v3);
    MEMORY[0x1BCC95CEC]();
  }
  VPTimeFreqConverter_Create(2, *((_DWORD *)this + 127), (VPTimeFreqConverter **)this + 2130);
  VPTimeFreqConverter_Create(2, *((_DWORD *)this + 127), (VPTimeFreqConverter **)this + 2132);
}

void vp::v5::create(vp::v5 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;

  v5 = operator new();
  VoiceProcessorV4::VoiceProcessorV4((VoiceProcessorV4 *)v5, this);
  *(_QWORD *)v5 = &off_1E69E32E0;
  *(_QWORD *)(v5 + 17040) = 0;
  *(_QWORD *)(v5 + 17056) = 0;
  *(_QWORD *)(v5 + 17048) = 0;
  *(_BYTE *)(v5 + 17064) = 0;
  *(_BYTE *)(v5 + 479) = 1;
  *a2 = v5;
}

void sub_1B64D47E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10F3C4078261557);
  _Unwind_Resume(a1);
}

void AUSpeechLevelEstimator::~AUSpeechLevelEstimator(AUSpeechLevelEstimator *this)
{
  AUSpeechLevelEstimator::~AUSpeechLevelEstimator(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  *(_QWORD *)this = &off_1E69E35B8;
  v2 = (void *)*((_QWORD *)this + 88);
  if (v2)
  {
    *((_QWORD *)this + 89) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 85);
  if (v3)
  {
    *((_QWORD *)this + 86) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 82);
  if (v4)
  {
    *((_QWORD *)this + 83) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 79);
  if (v5)
  {
    *((_QWORD *)this + 80) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v6)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v6);
  v7 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v7)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v7);
  v8 = (_QWORD *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v8)
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v8);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUSpeechLevelEstimator::Initialize(AUSpeechLevelEstimator *this)
{
  uint64_t Element;
  float v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  int v10;
  char v11;
  float v13;
  _QWORD *v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;

  Element = ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 80), 0);
  if (*(_DWORD *)(Element + 88) != 1718773105 || *(_DWORD *)(Element + 108) != 1 || *(_DWORD *)(Element + 104) != 8)
    return 4294956428;
  v5 = *(double *)(Element + 80);
  v6 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 136) = v6;
  *((_DWORD *)this + 137) = v6 + 1;
  *((float *)this + 132) = v5;
  v7 = (_DWORD *)ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 128), 0);
  if (v7[27] != 1)
    return 4294956428;
  v8 = v7[26];
  if (v8 != 8 && v8 != 4)
    return 4294956428;
  v10 = v7[22];
  if (v10 == 1718773105)
  {
    v11 = 1;
    goto LABEL_20;
  }
  if (v10 == 1819304813)
  {
    v11 = 0;
LABEL_20:
    *((_BYTE *)this + 540) = v11;
  }
  v13 = (float)v6;
  (*(void (**)(AUSpeechLevelEstimator *))(*(_QWORD *)this + 584))(this);
  (*(void (**)(AUSpeechLevelEstimator *))(*(_QWORD *)this + 592))(this);
  *((_WORD *)this + 300) = 0;
  *((_OWORD *)this + 36) = 0u;
  v14 = (_QWORD *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v14)
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v14);
  v15 = v13 + 1.0;
  if (*((_BYTE *)this + 556))
  {
    v16 = operator new();
    v17 = (unint64_t)v15;
    SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::SmoothedNoiseEstimator(v16, (unint64_t)v15, v5, v5 / v13);
    v18 = (_QWORD *)*((_QWORD *)this + 76);
    *((_QWORD *)this + 76) = v16;
    if (v18)
      std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v18);
    (*(void (**)(AUSpeechLevelEstimator *))(*(_QWORD *)this + 600))(this);
    *((_QWORD *)this + 74) = 0;
  }
  else
  {
    v17 = (unint64_t)v15;
  }
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  AWeight<float>::Generate((_QWORD *)(v19 + 8), v17, v5);
  v20 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = v19;
  if (v20)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v20);
  v21 = operator new();
  *(_DWORD *)v21 = 0;
  CWeight<float>::Generate((_QWORD *)(v21 + 8), v17, v5);
  v22 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = v21;
  if (v22)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v22);
  v23 = *((unsigned int *)this + 137);
  v27 = 0;
  std::vector<float>::assign((char **)this + 79, v23, &v27);
  v24 = *((unsigned int *)this + 137);
  v27 = 0;
  std::vector<float>::assign((char **)this + 82, v24, &v27);
  v25 = *((unsigned int *)this + 137);
  v27 = 0;
  std::vector<float>::assign((char **)this + 88, v25, &v27);
  v26 = *((unsigned int *)this + 137);
  v27 = 0;
  std::vector<float>::assign((char **)this + 85, v26, &v27);
  return 0;
}

void sub_1B64D4A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1090C40C1A4C78ELL);
  _Unwind_Resume(a1);
}

uint64_t AUSpeechLevelEstimator::Reset(AUSpeechLevelEstimator *this)
{
  *((_OWORD *)this + 36) = xmmword_1B6627BC0;
  *((_QWORD *)this + 74) = 1;
  *((_WORD *)this + 300) = 0;
  return 0;
}

uint64_t AUSpeechLevelEstimator::GetPropertyInfo(AUSpeechLevelEstimator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 5199)
  {
    if (a2 == 5200)
    {
      *a6 = 1;
    }
    else
    {
      if (a2 != 5300)
        return result;
      *a6 = 0;
    }
    v8 = 4 * *((_DWORD *)this + 137);
  }
  else
  {
    if (a2 == 21)
    {
      *a6 = 1;
    }
    else
    {
      if (a2 != 3700)
        return result;
      *a6 = 0;
    }
    v8 = 4;
  }
  result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUSpeechLevelEstimator::GetProperty(AUSpeechLevelEstimator *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  int v7;
  _BYTE *v8;
  _BYTE *v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 5199)
  {
    if (a2 == 5200)
    {
      if (*((_BYTE *)this + 17))
      {
        v8 = (_BYTE *)*((_QWORD *)this + 79);
        v9 = (_BYTE *)*((_QWORD *)this + 80);
        goto LABEL_16;
      }
    }
    else
    {
      if (a2 != 5300)
        return result;
      if (*((_BYTE *)this + 17))
      {
        v8 = (_BYTE *)*((_QWORD *)this + 82);
        v9 = (_BYTE *)*((_QWORD *)this + 83);
LABEL_16:
        if (v9 != v8)
          memmove(__dst, v8, v9 - v8);
        return 0;
      }
    }
    return 4294956429;
  }
  if (a2 == 21)
  {
    result = 0;
    v7 = *((_DWORD *)this + 134);
    goto LABEL_13;
  }
  if (a2 == 3700)
  {
    result = 0;
    v7 = *((unsigned __int8 *)this + 376);
LABEL_13:
    *__dst = v7;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::SetProperty(AUSpeechLevelEstimator *this, int a2, int a3, unsigned int a4, _DWORD *__src, size_t __n)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  if (a2 != 5200)
  {
    if (a2 == 21)
    {
      result = 0;
      *((_DWORD *)this + 134) = *__src;
      return result;
    }
    return 4294956417;
  }
  if (!*((_BYTE *)this + 17))
    return 4294956429;
  if (__n != 4 * *((unsigned int *)this + 137))
    return 4294956445;
  memcpy(*((void **)this + 79), __src, __n);
  return 0;
}

uint64_t AUSpeechLevelEstimator::SetParameter(AUSpeechLevelEstimator *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  ausdk::AUElement *Element;

  if (!a3)
  {
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    if ((a2 & 0xFFFFFFFE) == 0xA)
    {
      ++*((_DWORD *)this + 146);
    }
    else if (a2 > 7)
    {
      if ((a2 & 0xFFFFFFFE) == 8)
        ++*((_DWORD *)this + 144);
    }
    else if (*((_QWORD *)this + 76))
    {
      AUSpeechLevelEstimator::RefreshKernelParamValue(this, a2);
    }
  }
  return 0;
}

uint64_t AUSpeechLevelEstimator::CanScheduleParameters(AUSpeechLevelEstimator *this)
{
  return 0;
}

uint64_t AUSpeechLevelEstimator::ProcessMultipleBufferLists(AUSpeechLevelEstimator *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  vDSP_Length v16;
  uint64_t v17;
  const void **v18;
  _BOOL4 v19;
  char v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float __B;
  DSPSplitComplex __A;

  if (*((_DWORD *)this + 136) != a3)
    return 4294956422;
  result = 4294956428;
  if (a4 == 1 && a6 == 1)
  {
    if (*((_BYTE *)this + 540) && 2 * a3)
      memmove((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, 4 * (2 * a3));
    v11 = *((_DWORD *)this + 144);
    if (v11 != *((_DWORD *)this + 145))
    {
      (*(void (**)(AUSpeechLevelEstimator *, unsigned int *))(*(_QWORD *)this + 584))(this, a2);
      *((_DWORD *)this + 145) = v11;
    }
    v12 = *((_DWORD *)this + 146);
    if (v12 != *((_DWORD *)this + 147))
    {
      (*(void (**)(AUSpeechLevelEstimator *))(*(_QWORD *)this + 592))(this);
      *((_DWORD *)this + 147) = v12;
    }
    v13 = *((_DWORD *)this + 148);
    if (v13 != *((_DWORD *)this + 149))
    {
      (*(void (**)(AUSpeechLevelEstimator *))(*(_QWORD *)this + 600))(this);
      *((_DWORD *)this + 149) = v13;
    }
    if (*((_DWORD *)this + 134))
    {
      if (!*((_BYTE *)this + 601))
      {
        v14 = (uint64_t)(*((_QWORD *)this + 83) - *((_QWORD *)this + 82)) >> 2;
        LODWORD(__A.realp) = 0;
        std::vector<float>::assign((char **)this + 82, v14, &__A);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 12, 0, 0, 0, 0.0);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 13, 0, 0, 0, 0.0);
        *((_BYTE *)this + 601) = 1;
      }
      if (!*((_BYTE *)this + 600))
      {
        v15 = (uint64_t)(*((_QWORD *)this + 80) - *((_QWORD *)this + 79)) >> 2;
        LODWORD(__A.realp) = 0;
        std::vector<float>::assign((char **)this + 79, v15, &__A);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 14, 0, 0, 0, 0.0);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 15, 0, 0, 0, 0.0);
        *((_BYTE *)this + 600) = 1;
      }
      if (!*((_BYTE *)this + 540))
        vDSP_vclr((float *)(*a7)->mBuffers[0].mData, 1, *((unsigned int *)this + 136));
      return 0;
    }
    v16 = *((unsigned int *)this + 136);
    __A.realp = (float *)(*a5)->mBuffers[0].mData;
    __A.imagp = &__A.realp[v16];
    vDSP_zvmags(&__A, 1, *((float **)this + 88), 1, v16);
    **((float **)this + 88) = *__A.realp * *__A.realp;
    *(float *)(*((_QWORD *)this + 89) - 4) = *__A.imagp * *__A.imagp;
    v17 = *((_QWORD *)this + 76);
    if (v17)
    {
      v18 = (const void **)SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(*((_QWORD *)this + 76));
      if (*((float *)this + 182) == 1.0)
        memcpy(*((void **)this + 79), *v18, 4 * *((unsigned int *)this + 137));
      else
        vDSP_vsmul((const float *)*v18, 1, (const float *)this + 182, *((float **)this + 79), 1, (uint64_t)(*((_QWORD *)this + 80) - *((_QWORD *)this + 79)) >> 2);
      *((_BYTE *)this + 600) = 0;
    }
    else if (!*((_BYTE *)this + 600))
    {
      vDSP_vclr(*((float **)this + 79), 1, (uint64_t)(*((_QWORD *)this + 80) - *((_QWORD *)this + 79)) >> 2);
    }
    if (*((_BYTE *)this + 558))
      v19 = *((float *)this + 140) > *((float *)this + 141);
    else
      v19 = 1;
    if (*((_BYTE *)this + 559) && v19)
    {
      if (*((float *)this + 142) < *((float *)this + 143))
        goto LABEL_34;
    }
    else
    {
      if (*((_BYTE *)this + 559))
        v19 = 0;
      if (v19)
      {
LABEL_34:
        if (*((float *)this + 182) == 1.0)
          memcpy(*((void **)this + 85), *((const void **)this + 88), 4 * *((unsigned int *)this + 137));
        else
          vDSP_vsmul(*((const float **)this + 88), 1, (const float *)this + 182, *((float **)this + 85), 1, (uint64_t)(*((_QWORD *)this + 89) - *((_QWORD *)this + 88)) >> 2);
        if (*((_BYTE *)this + 557))
        {
          vDSP_vsub(*((const float **)this + 79), 1, *((const float **)this + 85), 1, *((float **)this + 85), 1, *((unsigned int *)this + 137));
          __B = 0.0;
          vDSP_vthr(*((const float **)this + 85), 1, &__B, *((float **)this + 85), 1, (uint64_t)(*((_QWORD *)this + 86) - *((_QWORD *)this + 85)) >> 2);
        }
        AddMultiplyRVectorRScalarMultiplyRVectorRScalar<std::vector<float>,std::vector<float>,std::vector<float>>((uint64_t)this + 656, *((const float **)this + 82), *((_QWORD *)this + 83), *((const float **)this + 85), *((_QWORD *)this + 86), *((float *)this + 133), 1.0 - *((float *)this + 133));
        *((_BYTE *)this + 601) = 0;
        v20 = 1;
        if (!v17)
          goto LABEL_45;
        goto LABEL_40;
      }
    }
    v20 = 0;
    if (!v17)
    {
LABEL_45:
      if (!*((_BYTE *)this + 600))
      {
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 14, 0, 0, 0, 0.0);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 15, 0, 0, 0, 0.0);
        *((_BYTE *)this + 600) = 1;
      }
      goto LABEL_47;
    }
LABEL_40:
    v21 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((_QWORD *)this + 77), *((const float **)this + 79), *((_QWORD *)this + 80));
    (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 14, 0, 0, 0, v21);
    v22 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((_QWORD *)this + 78), *((const float **)this + 79), *((_QWORD *)this + 80));
    (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 15, 0, 0, 0, v22);
LABEL_47:
    if ((v20 & 1) != 0 || !*((_BYTE *)this + 601))
    {
      v23 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((_QWORD *)this + 77), *((const float **)this + 82), *((_QWORD *)this + 83));
      (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 12, 0, 0, 0, v23);
      v24 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((_QWORD *)this + 78), *((const float **)this + 82), *((_QWORD *)this + 83));
      (*(void (**)(AUSpeechLevelEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 13, 0, 0, 0, v24);
      *((_BYTE *)this + 601) = 1;
    }
    if (!*((_BYTE *)this + 540))
      memcpy((*a7)->mBuffers[0].mData, *((const void **)this + 82), 4 * *((unsigned int *)this + 136));
    return 0;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::Render(AUSpeechLevelEstimator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t BufferList;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = (AUSpeechLevelEstimator *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUSpeechLevelEstimator *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::GetParameterList(AUSpeechLevelEstimator *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  *a4 = 0;
  if (a2)
    return 4294956418;
  result = 0;
  if (a3)
  {
    *a3 = 0;
    ++*a4;
    a3[1] = 1;
    ++*a4;
    a3[2] = 2;
    ++*a4;
    a3[3] = 3;
    ++*a4;
    a3[4] = 4;
    ++*a4;
    a3[5] = 5;
    ++*a4;
    a3[6] = 6;
    ++*a4;
    a3[7] = 7;
    ++*a4;
    a3[8] = 8;
    ++*a4;
    a3[9] = 9;
    ++*a4;
    a3[10] = 10;
    ++*a4;
    a3[11] = 11;
    ++*a4;
    a3[12] = 12;
    ++*a4;
    a3[13] = 13;
    ++*a4;
    a3[14] = 14;
    ++*a4;
    a3[15] = 15;
    ++*a4;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::GetParameterInfo(AUSpeechLevelEstimator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  if (a2)
    return 4294956430;
  buffer->unitName = 0;
  buffer->flags = 0x40000000;
  if (a3 > 0xF)
    return 4294956418;
  v6 = off_1E69E3818[a3];
  v7 = dword_1B66850C8[a3];
  v8 = flt_1B6685108[a3];
  v9 = flt_1B6685148[a3];
  v10 = flt_1B6685188[a3];
  v11 = dword_1B66851C8[a3];
  buffer->cfNameString = v6;
  buffer->flags = 1207959552;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v7;
  buffer->minValue = v8;
  buffer->maxValue = v9;
  buffer->defaultValue = v10;
  buffer->flags |= v11;
  return result;
}

uint64_t AUSpeechLevelEstimator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
  {
    (*((void (**)(OpaqueAudioComponentInstance **))*this + 73))(this);
    (*((void (**)(OpaqueAudioComponentInstance **))*this + 74))(this);
    (*((void (**)(OpaqueAudioComponentInstance **))*this + 75))(this);
  }
  return v3;
}

uint64_t AUSpeechLevelEstimator::GetParameterValueStrings(AUSpeechLevelEstimator *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  const void *v7[2];

  result = 0;
  v7[1] = *(const void **)MEMORY[0x1E0C80C00];
  if (!a2 && a4)
  {
    if (a3)
    {
      return 4294956417;
    }
    else
    {
      v7[0] = CFSTR("Basic");
      v6 = CFArrayCreate(0, v7, 1, 0);
      result = 0;
      *a4 = v6;
    }
  }
  return result;
}

double AUSpeechLevelEstimator::GetLatency(AUSpeechLevelEstimator *this)
{
  return 0.0;
}

double AUSpeechLevelEstimator::GetTailTime(AUSpeechLevelEstimator *this)
{
  return 0.0;
}

uint64_t AUSpeechLevelEstimator::SupportsTail(AUSpeechLevelEstimator *this)
{
  return 1;
}

BOOL AUSpeechLevelEstimator::StreamFormatWritable(AUSpeechLevelEstimator *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSpeechLevelEstimator::SupportedNumChannels(AUSpeechLevelEstimator *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUSpeechLevelEstimator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUSpeechLevelEstimator::ValidFormat(AUSpeechLevelEstimator *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  _BOOL8 result;
  AudioFormatID mFormatID;
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerFrame;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
    result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  if (v5 == 2)
  {
    mFormatID = a4->mFormatID;
    mBytesPerFrame = a4->mBytesPerFrame;
    mChannelsPerFrame = a4->mChannelsPerFrame;
    if (mBytesPerFrame == 8 && mFormatID == 1718773105 && mChannelsPerFrame == 1)
      return 1;
    return mBytesPerFrame == 4 && mFormatID == 1819304813 && mChannelsPerFrame == 1;
  }
  if (v5 == 1)
  {
    result = 0;
    if (a4->mBytesPerFrame == 8 && a4->mFormatID == 1718773105)
      return a4->mChannelsPerFrame == 1;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::Version(AUSpeechLevelEstimator *this)
{
  return 67072;
}

float AUSpeechLevelEstimator::UpdateStaticParams(AUSpeechLevelEstimator *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  uint64_t v13;
  ausdk::AUElement *v14;
  ausdk::AUElement **v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  ausdk::AUElement *v20;
  ausdk::AUElement **v21;
  uint64_t v22;
  ausdk::AUElement *v23;
  ausdk::AUElement **v24;
  uint64_t v25;
  ausdk::AUElement *v26;
  ausdk::AUElement **v27;
  uint64_t v28;
  ausdk::AUElement *v29;
  ausdk::AUElement **v30;
  uint64_t v31;
  ausdk::AUElement *v32;
  ausdk::AUElement **v33;
  float v34;
  float *v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  float v39;
  float *v40;
  float result;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0);
  *((_DWORD *)this + 138) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)v6 + 32))(v6, 0, Parameter);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  v9 = ausdk::AUElement::GetParameter(v7, 1u);
  v10 = v9 / 10.0;
  if (v9 > 200.0)
    v10 = 20.0;
  v11 = v9 < -100.0;
  v12 = -10.0;
  if (!v11)
    v12 = v10;
  *((float *)this + 182) = __exp10f(v12);
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0);
  }
  else
  {
    v15 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v15)
      v14 = 0;
    else
      v14 = *v15;
  }
  v16 = ausdk::AUElement::GetParameter(v14, 6u);
  v17 = 5.0;
  if (v16 <= 5.0)
    v17 = v16;
  v11 = v16 < 0.0;
  v18 = 0.0;
  if (!v11)
    v18 = v17;
  *((float *)this + 133) = expf(-1.0 / (float)(*((float *)this + 132) * v18));
  v19 = *((_QWORD *)this + 9);
  if (v19)
  {
    v20 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0);
  }
  else
  {
    v21 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v21)
      v20 = 0;
    else
      v20 = *v21;
  }
  *((_BYTE *)this + 556) = ausdk::AUElement::GetParameter(v20, 2u) != 0.0;
  v22 = *((_QWORD *)this + 9);
  if (v22)
  {
    v23 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0);
  }
  else
  {
    v24 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v24)
      v23 = 0;
    else
      v23 = *v24;
  }
  *((_BYTE *)this + 557) = ausdk::AUElement::GetParameter(v23, 3u) != 0.0;
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    v26 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0);
  }
  else
  {
    v27 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v27)
      v26 = 0;
    else
      v26 = *v27;
  }
  *((_BYTE *)this + 558) = ausdk::AUElement::GetParameter(v26, 4u) != 0.0;
  v28 = *((_QWORD *)this + 9);
  if (v28)
  {
    v29 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
  }
  else
  {
    v30 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v30)
      v29 = 0;
    else
      v29 = *v30;
  }
  *((_BYTE *)this + 559) = ausdk::AUElement::GetParameter(v29, 5u) != 0.0;
  v31 = *((_QWORD *)this + 9);
  if (v31)
  {
    v32 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0);
  }
  else
  {
    v33 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v33)
      v32 = 0;
    else
      v32 = *v33;
  }
  v34 = ausdk::AUElement::GetParameter(v32, 8u);
  v35 = (float *)((char *)this + 564);
  *((float *)this + 141) = v34;
  if (v34 > 1.0)
    v35 = &AUSpeechLevelEstimator::kVAD_Max;
  if (v34 < 0.0)
    v35 = &AUSpeechLevelEstimator::kVAD_Min;
  *((float *)this + 141) = *v35;
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  v39 = ausdk::AUElement::GetParameter(v37, 9u);
  v40 = (float *)((char *)this + 572);
  *((float *)this + 143) = v39;
  if (v39 > 200.0)
    v40 = (float *)&AUSpeechLevelEstimator::kEchoLevel_dB_Max;
  if (v39 < -100.0)
    v40 = (float *)&AUSpeechLevelEstimator::kEchoLevel_dB_Min;
  result = *v40;
  *((float *)this + 143) = *v40;
  return result;
}

void AUSpeechLevelEstimator::UpdateDynamicParams(AUSpeechLevelEstimator *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  BOOL v5;
  float v6;
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;
  float v10;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  v5 = ausdk::AUElement::GetParameter(v3, 0xAu) == 0.0;
  v6 = 0.0;
  if (!v5)
    v6 = 1.0;
  *((float *)this + 140) = v6;
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  v5 = ausdk::AUElement::GetParameter(v8, 0xBu) == 0.0;
  v10 = 0.0;
  if (!v5)
    v10 = 1.0;
  *((float *)this + 142) = v10;
}

void AUSpeechLevelEstimator::UpdateKernParams(AUSpeechLevelEstimator *this)
{
  AUSpeechLevelEstimator::RefreshKernelParamValue(this, 7u);
}

void AUSpeechLevelEstimator::RefreshKernelParamValue(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  float *v8;
  float v9;
  BOOL v10;
  float v11;

  v4 = a1[9];
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = (ausdk::AUElement **)a1[6];
    if ((ausdk::AUElement **)a1[7] == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, a2);
  if (a2 == 7)
  {
    v8 = (float *)a1[76];
    if (v8)
    {
      v9 = 5.0;
      if (Parameter <= 5.0)
        v9 = Parameter;
      v10 = Parameter < 0.0;
      v11 = 0.0;
      if (!v10)
        v11 = v9;
      v8[70] = expf(-1.0 / (float)(*v8 * v11));
    }
  }
}

void std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *CWeight<float>::Generate(_QWORD *a1, unint64_t a2, float a3)
{
  _QWORD *result;
  uint64x2_t v6;
  unint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  _DWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int64x2_t v14;
  int32x4_t v15;
  int32x2_t v16;
  uint64x2_t v17;
  uint64x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int64x2_t v21;

  result = std::vector<float>::vector(a1, a2);
  if (a2)
  {
    v6 = (uint64x2_t)vdupq_n_s64(a2 - 1);
    v7 = (a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v8 = (int64x2_t)xmmword_1B6627110;
    v9 = (int64x2_t)xmmword_1B6626830;
    v10 = (_DWORD *)(*result + 8);
    v11 = (float32x4_t)vdupq_n_s32(0x43D428CAu);
    v12 = (float32x4_t)vdupq_n_s32(0x4D0DCF73u);
    v13 = (float32x4_t)vdupq_n_s32(0x4D0ED319u);
    v14 = vdupq_n_s64(4uLL);
    do
    {
      v15 = (int32x4_t)vcgeq_u64(v6, (uint64x2_t)v9);
      *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
      v16 = (int32x2_t)vmovn_s32(v15);
      v17.i64[0] = v8.i64[0] * v8.i64[0];
      v17.i64[1] = v8.i64[1] * v8.i64[1];
      v18.i64[0] = v9.i64[0] * v9.i64[0];
      v18.i64[1] = v9.i64[1] * v9.i64[1];
      v19 = vmulq_n_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v18)), vcvtq_f64_u64(v17)), a3 / (float)(2 * a2 - 2)), a3 / (float)(2 * a2 - 2));
      v20 = vmulq_f32(vdivq_f32(v19, vaddq_f32(v19, v11)), vdivq_f32(v13, vaddq_f32(v19, v12)));
      if ((v16.i8[0] & 1) != 0)
      {
        v16 = (int32x2_t)vmulq_f32(v20, v20).u64[0];
        *(v10 - 2) = v16.i32[0];
      }
      if ((vmovn_s32(v15).i8[2] & 1) != 0)
        *(v10 - 1) = vmulq_f32(v20, v20).i32[1];
      v21 = (int64x2_t)vcgeq_u64(v6, (uint64x2_t)v8);
      if ((vmovn_s32(vmovn_hight_s64(v16, v21)).i32[1] & 1) != 0)
        *v10 = vmulq_f32(v20, v20).i32[2];
      if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v21, v21)).i8[6] & 1) != 0)
        v10[1] = vmulq_f32(v20, v20).i32[3];
      v8 = vaddq_s64(v8, v14);
      v9 = vaddq_s64(v9, v14);
      v10 += 4;
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

os_log_t ___Z25getParametricProcessorLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "ParametricProcessor");
  getParametricProcessorLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t EndpointVAD::Uninitialize(EndpointVAD *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  void **v18;

  if (*(_BYTE *)this)
  {
    v2 = *((_QWORD *)this + 24);
    if (v2)
    {
      EndpointVADDSPChain::Uninitialize(*((_QWORD *)this + 24));
      AudioComponentInstanceDispose(*(AudioComponentInstance *)(v2 + 64));
      *(_QWORD *)(v2 + 64) = 0;
      AudioComponentInstanceDispose(*(AudioComponentInstance *)(v2 + 56));
      *(_QWORD *)(v2 + 56) = 0;
      MEMORY[0x1BCC95CEC](v2, 0x1020C40CAB7616CLL);
    }
    if (*((_QWORD *)this + 25))
      myFreeABLDynamic((AudioBufferList **)this + 25);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      MEMORY[0x1BCC95CC8](v3, 0x1000C8052888210);
    v4 = (uint64_t *)*((_QWORD *)this + 28);
    if (v4)
    {
      v5 = *v4;
      if (*v4)
      {
        v18 = (void **)(v5 + 72);
        std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
        v18 = (void **)(v5 + 48);
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
        v18 = (void **)(v5 + 24);
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
        v6 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v6;
          operator delete(v6);
        }
        MEMORY[0x1BCC95CEC](v5, 0xA0C400E294FEBLL);
      }
      v7 = v4[1];
      if (v7)
        MEMORY[0x1BCC95CEC](v7, 0x1000C40451B5BE8);
      v8 = (void *)v4[15];
      if (v8)
      {
        v4[16] = (uint64_t)v8;
        operator delete(v8);
      }
      v9 = (void *)v4[12];
      if (v9)
      {
        v4[13] = (uint64_t)v9;
        operator delete(v9);
      }
      v10 = (void *)v4[9];
      if (v10)
      {
        v4[10] = (uint64_t)v10;
        operator delete(v10);
      }
      v11 = (void *)v4[6];
      if (v11)
      {
        v4[7] = (uint64_t)v11;
        operator delete(v11);
      }
      v12 = (void *)v4[3];
      if (v12)
      {
        v4[4] = (uint64_t)v12;
        operator delete(v12);
      }
      MEMORY[0x1BCC95CEC](v4, 0x1070C40333FFEABLL);
    }
    v13 = *((_QWORD *)this + 27);
    if (v13)
    {
      v14 = *(void **)(v13 + 24);
      if (v14)
      {
        *(_QWORD *)(v13 + 32) = v14;
        operator delete(v14);
      }
      v15 = *(void **)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)(v13 + 8) = v15;
        operator delete(v15);
      }
      MEMORY[0x1BCC95CEC](v13, 0x10C407BD0BEC4);
    }
    v16 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    std::__optional_destruct_base<BlockProcessor,false>::reset[abi:ne180100]((_BYTE *)this + 56);
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 3) = 0;
    *(_BYTE *)this = 0;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 28) = 0;
  }
  result = *((_QWORD *)this + 1);
  if (result)
  {
    result = MEMORY[0x1BCC95CEC](result, 0xC400A2AC0F1);
    *((_QWORD *)this + 1) = 0;
  }
  return result;
}

_BYTE *std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100](_BYTE *a1)
{
  if (a1[64])
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(a1 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)a1);
  }
  return a1;
}

void std::__optional_destruct_base<BlockProcessor,false>::reset[abi:ne180100](_BYTE *a1)
{
  if (a1[64])
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(a1 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)a1);
    a1[64] = 0;
  }
}

float64_t EndpointVAD::BlockProcessFunc(EndpointVAD *this, void *a2, uint64_t a3, AudioBufferList **a4, AudioBufferList **a5)
{
  UInt32 v5;
  const AudioTimeStamp *v7;
  AudioBufferList *v8;
  uint64_t v9;
  float64x2_t v10;
  OSStatus v11;
  AudioUnit *v12;
  OpaqueAudioComponentInstance *v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  _OWORD *v30;
  unint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  float *v87;
  _DWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  double v93;
  float v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  AudioBufferList *v103;
  uint64_t v104;
  AudioBufferList *v105;
  AudioBufferList **mData;
  uint64_t v107;
  AudioBufferList *v108;
  int v109;
  AudioBufferList *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  AudioBufferList *v128;
  _QWORD *v129;
  uint64_t v130;
  _BOOL4 v131;
  float64_t v132;
  AudioBufferList *inInputBufferLists;
  float32x2_t v134;
  float v135;
  int8x8_t v136;
  int v137;
  float32x2_t v138;
  AudioBufferList *ioOutputBufferLists;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;

  v5 = a2;
  v142 = *MEMORY[0x1E0C80C00];
  v7 = (const AudioTimeStamp *)((char *)this + 128);
  v8 = *a4;
  v9 = *((_QWORD *)this + 24);
  Biquad::Process_Float32(*(Biquad **)(v9 + 48), *(float **)(*(_QWORD *)a3 + 16), (float *)(*a4)->mBuffers[0].mData, (int)a2);
  LODWORD(v128) = 512;
  inInputBufferLists = v8;
  ioOutputBufferLists = v8;
  if (AudioUnitProcessMultiple(*(AudioUnit *)(v9 + 56), (AudioUnitRenderActionFlags *)&v128, v7, v5, 1u, (const AudioBufferList **)&inInputBufferLists, 1u, &ioOutputBufferLists))
  {
    goto LABEL_140;
  }
  v11 = AudioUnitProcess(*(AudioUnit *)(v9 + 64), (AudioUnitRenderActionFlags *)&v128, v7, v5, v8);
  ++*(_DWORD *)(v9 + 4);
  if (v11)
    goto LABEL_140;
  v12 = (AudioUnit *)*((_QWORD *)this + 24);
  AudioUnitGetParameter(v12[7], 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
  AudioUnitGetParameter(v12[7], 2u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists + 1);
  v13 = v12[8];
  v12 += 8;
  AudioUnitGetParameter(v13, 0x3Du, 0, 0, (AudioUnitParameterValue *)&v134);
  AudioUnitGetParameter(*v12, 0x3Cu, 0, 0, (AudioUnitParameterValue *)&v134 + 1);
  v137 = 1056964608;
  AudioUnitGetParameter(*v12, 0x3Bu, 0, 0, (AudioUnitParameterValue *)&v138);
  AudioUnitGetParameter(*v12, 0x37u, 0, 0, (AudioUnitParameterValue *)&v138 + 1);
  v14 = 0;
  v15 = 0;
  v16 = 0.0;
  if (*(float *)&inInputBufferLists > 0.5)
    v16 = 1.0;
  v135 = v16;
  __asm { FMOV            V2.2S, #1.0 }
  v21 = (int8x8_t)vcgt_f32(v134, v138);
  v136 = vand_s8(v21, _D2);
  v131 = *(float *)&inInputBufferLists > 0.5;
  *(int32x2_t *)&v10.f64[0] = vrev64_s32((int32x2_t)vand_s8(v21, (int8x8_t)0x100000001));
  v132 = v10.f64[0];
  v22 = *((_QWORD *)this + 27);
  v23 = *(_QWORD *)(v22 + 24);
  v24 = **(_DWORD **)v22;
  v25 = v23 + 4;
  do
  {
    v26 = *(_BOOL4 *)((char *)&v131 + v14);
    if (v26 + 1 > v24)
      break;
    v15 += *(_DWORD *)(v25 + v14) * v26;
    v14 += 4;
  }
  while (v14 != 12);
  v27 = *((_QWORD *)this + 28);
  v28 = *(_DWORD *)(v27 + 144);
  if (v28 >= *(_DWORD *)(*(_QWORD *)(v27 + 8) + 12))
  {
    v34 = *(_DWORD *)(v27 + 152);
    if (v34 < *(_DWORD *)(v27 + 148))
      *(_DWORD *)(v27 + 152) = v34 + 1;
  }
  else
  {
    v29 = *(_DWORD *)(v27 + 148) + 1;
    *(_DWORD *)(v27 + 144) = v28 + 1;
    *(_DWORD *)(v27 + 148) = v29;
    v30 = (_OWORD *)(v27 + 168);
    v32 = *(_OWORD **)(v27 + 80);
    v31 = *(_QWORD *)(v27 + 88);
    if ((unint64_t)v32 >= v31)
    {
      v35 = *(_QWORD *)(v27 + 72);
      v36 = ((uint64_t)v32 - v35) >> 4;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v38 = v31 - v35;
      if (v38 >> 3 > v37)
        v37 = v38 >> 3;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v39);
      else
        v40 = 0;
      v41 = (_OWORD *)(v39 + 16 * v36);
      v42 = v39 + 16 * v40;
      *v41 = *v30;
      v33 = v41 + 1;
      v44 = *(char **)(v27 + 72);
      v43 = *(char **)(v27 + 80);
      if (v43 != v44)
      {
        do
        {
          *--v41 = *((_OWORD *)v43 - 1);
          v43 -= 16;
        }
        while (v43 != v44);
        v43 = *(char **)(v27 + 72);
      }
      *(_QWORD *)(v27 + 72) = v41;
      *(_QWORD *)(v27 + 80) = v33;
      *(_QWORD *)(v27 + 88) = v42;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *v32 = *v30;
      v33 = v32 + 1;
    }
    *(_QWORD *)(v27 + 80) = v33;
    v46 = *(_QWORD **)(v27 + 128);
    v45 = *(_QWORD *)(v27 + 136);
    if ((unint64_t)v46 >= v45)
    {
      v48 = *(_QWORD *)(v27 + 120);
      v49 = ((uint64_t)v46 - v48) >> 3;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v50 = v45 - v48;
      v51 = v50 >> 2;
      if (v50 >> 2 <= (unint64_t)(v49 + 1))
        v51 = v49 + 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v52);
      else
        v53 = 0;
      v54 = (_QWORD *)(v52 + 8 * v49);
      v55 = v52 + 8 * v53;
      *v54 = *(_QWORD *)(v27 + 184);
      v47 = v54 + 1;
      v57 = *(char **)(v27 + 120);
      v56 = *(char **)(v27 + 128);
      if (v56 != v57)
      {
        do
        {
          v58 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v54 = v58;
        }
        while (v56 != v57);
        v56 = *(char **)(v27 + 120);
      }
      *(_QWORD *)(v27 + 120) = v54;
      *(_QWORD *)(v27 + 128) = v47;
      *(_QWORD *)(v27 + 136) = v55;
      if (v56)
        operator delete(v56);
    }
    else
    {
      *v46 = *(_QWORD *)(v27 + 184);
      v47 = v46 + 1;
    }
    v59 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 128) = v47;
    v60 = *(char **)(v27 + 32);
    if ((unint64_t)v60 >= v59)
    {
      v62 = *(char **)(v27 + 24);
      v63 = (v60 - v62) >> 2;
      if ((unint64_t)(v63 + 1) >> 62)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      v64 = v59 - (_QWORD)v62;
      v65 = (uint64_t)(v59 - (_QWORD)v62) >> 1;
      if (v65 <= v63 + 1)
        v65 = v63 + 1;
      if (v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v66 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      if (v66)
      {
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27 + 40, v66);
        v62 = *(char **)(v27 + 24);
        v60 = *(char **)(v27 + 32);
      }
      else
      {
        v67 = 0;
      }
      v68 = &v67[4 * v63];
      v69 = &v67[4 * v66];
      *(_DWORD *)v68 = 0;
      v61 = v68 + 4;
      while (v60 != v62)
      {
        v70 = *((_DWORD *)v60 - 1);
        v60 -= 4;
        *((_DWORD *)v68 - 1) = v70;
        v68 -= 4;
      }
      *(_QWORD *)(v27 + 24) = v68;
      *(_QWORD *)(v27 + 32) = v61;
      *(_QWORD *)(v27 + 40) = v69;
      if (v62)
        operator delete(v62);
    }
    else
    {
      *(_DWORD *)v60 = 0;
      v61 = v60 + 4;
    }
    *(_QWORD *)(v27 + 32) = v61;
    v71 = *(int *)(v27 + 144);
    if ((_DWORD)v71 == 1)
    {
      v72 = *(_QWORD *)(*(_QWORD *)v27 + 48);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)v27 + 56) - v72) >> 3) <= v15)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v73 = *(_QWORD *)(v27 + 128);
      v10 = vcvtq_f64_f32(vmul_f32(**(float32x2_t **)(v72 + 24 * v15), (float32x2_t)0x3C23D7003F7D70A4));
      *(float64x2_t *)(*(_QWORD *)(v27 + 80) - 16) = v10;
      *(_QWORD *)(v73 - 8) = 0;
    }
    else
    {
      v74 = *(_QWORD **)v27;
      *(_DWORD *)(v27 + 152) = *(_DWORD *)(v27 + 148) - *(_DWORD *)(*(_QWORD *)(v27 + 8) + 8);
      v75 = *(_QWORD *)(v27 + 96);
      v76 = *(_QWORD *)(v27 + 104);
      if (v75 != v76)
      {
        v77 = v71 - 2;
        v78 = *(_QWORD *)(v27 + 72);
        if (v77 >= (*(_QWORD *)(v27 + 80) - v78) >> 4)
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v79 = v78 + 16 * v77;
        v80 = (uint64_t *)v74[3];
        v81 = *(_QWORD *)(v27 + 96);
        do
        {
          v82 = 0;
          v83 = *v80;
          do
          {
            *(double *)(v81 + 8 * v82) = *(double *)(v79 + 8 * v82) * *(float *)(v83 + 4 * v82);
            ++v82;
          }
          while (v82 != 2);
          v80 += 3;
          v81 += 16;
        }
        while (v81 != v76);
      }
      v84 = v74[9];
      if (0xAAAAAAAAAAAAAAABLL * ((v74[10] - v84) >> 3) <= v15)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v85 = (_QWORD *)(v84 + 24 * v15);
      v86 = *(int *)(v27 + 160);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85[1] - *v85) >> 3) <= v86)
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v87 = *(float **)(*v85 + 24 * (int)v86);
      v88 = (_DWORD *)(*(_QWORD *)(v27 + 128) - 8);
      v89 = *(_QWORD **)(v27 + 80);
      v90 = v89 - 2;
      do
      {
        v91 = 0;
        v92 = 0;
        v93 = 0.0;
        do
        {
          if (*(double *)(v75 + 8 * v91) >= v93)
          {
            v93 = *(double *)(v75 + 8 * v91);
            v92 = v91;
          }
          ++v91;
        }
        while (v91 != 2);
        v94 = *v87++;
        v10.f64[0] = v93 * v94;
        *v90++ = *(_QWORD *)&v10.f64[0];
        *v88++ = v92;
        v75 += 16;
      }
      while (v90 != v89);
      *(_DWORD *)(v27 + 160) = v15;
    }
  }
  v95 = *(unsigned int *)(v27 + 152);
  if ((v95 & 0x80000000) != 0)
    goto LABEL_133;
  v96 = *(_DWORD *)(v27 + 156);
  if ((int)v95 <= v96)
  {
    v117 = *(_QWORD *)(v27 + 48);
    if (v95 >= (*(_QWORD *)(v27 + 56) - v117) >> 2)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v118 = *(_QWORD *)(v27 + 24);
    if (v95 >= (*(_QWORD *)(v27 + 32) - v118) >> 2)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    *(_DWORD *)(v118 + 4 * v95) = *(_DWORD *)(v117 + 4 * v95);
    goto LABEL_133;
  }
  v97 = *(unsigned int *)(v27 + 148);
  v98 = v97 - 1;
  if ((v96 & 0x80000000) == 0 && v98 <= v96)
    goto LABEL_128;
  v140 = 0;
  v141 = 0;
  ioOutputBufferLists = (AudioBufferList *)&v140;
  if (*(_DWORD *)(v27 + 20))
  {
    v99 = 0;
    do
    {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&ioOutputBufferLists, v99, v99);
      ++v99;
    }
    while (v99 < *(_DWORD *)(v27 + 20));
  }
  v100 = 0;
  v101 = 0;
  v129 = 0;
  v130 = 0;
  v128 = (AudioBufferList *)&v129;
  v102 = *(_QWORD *)(v27 + 128) + 8 * (v97 - ((*(_QWORD *)(v27 + 128) - *(_QWORD *)(v27 + 120)) >> 3)) + 8;
  do
  {
    while (1)
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v100);
      v129 = 0;
      v130 = 0;
      v128 = (AudioBufferList *)&v129;
      v103 = ioOutputBufferLists;
      if (ioOutputBufferLists == (AudioBufferList *)&v140)
      {
        v107 = 0;
        v108 = (AudioBufferList *)&v129;
      }
      else
      {
        do
        {
          v104 = *(&v103[1].mNumberBuffers + 1);
          if (v104 >= 2)
            std::__throw_out_of_range[abi:ne180100]("array::at");
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v128, *(_DWORD *)(v102 - 8 + 4 * v104), *(_DWORD *)(v102 - 8 + 4 * v104));
          v105 = *(AudioBufferList **)&v103->mBuffers[0].mNumberChannels;
          if (v105)
          {
            do
            {
              mData = (AudioBufferList **)v105;
              v105 = *(AudioBufferList **)&v105->mNumberBuffers;
            }
            while (v105);
          }
          else
          {
            do
            {
              mData = (AudioBufferList **)v103->mBuffers[0].mData;
              _ZF = *mData == v103;
              v103 = (AudioBufferList *)mData;
            }
            while (!_ZF);
          }
          v103 = (AudioBufferList *)mData;
        }
        while (mData != (AudioBufferList **)&v140);
        v107 = v130;
        v108 = v128;
        if (v130 == 1)
        {
          v101 = *(&v128[1].mNumberBuffers + 1);
          v109 = 1;
          goto LABEL_97;
        }
      }
      v109 = 0;
      --v98;
LABEL_97:
      v110 = ioOutputBufferLists;
      v100 = v140;
      v111 = v129;
      ioOutputBufferLists = v108;
      v140 = v129;
      v128 = v110;
      v129 = v100;
      v112 = v141;
      v141 = v107;
      v130 = v112;
      if (v107)
      {
        v111[2] = &v140;
        v113 = v100 + 2;
        if (!v112)
          v113 = (uint64_t *)&v128;
        *v113 = (uint64_t)&v129;
        v102 -= 8;
        if ((v109 & 1) != 0)
        {
          LOBYTE(v107) = 0;
        }
        else
        {
          _ZF = v102 == *(_QWORD *)(v27 + 120) || v98 == 0;
          LOBYTE(v107) = !_ZF;
        }
      }
      else
      {
        ioOutputBufferLists = (AudioBufferList *)&v140;
        v114 = v112 ? v100 + 2 : (uint64_t *)&v128;
        *v114 = (uint64_t)&v129;
        v102 -= 8;
      }
      v116 = *(_DWORD *)(v27 + 156);
      if ((v116 & 0x80000000) == 0)
        break;
      if ((v107 & 1) == 0)
      {
        if (!v109)
          goto LABEL_127;
        goto LABEL_126;
      }
    }
    if (v98 <= v116)
      LOBYTE(v107) = 0;
  }
  while ((v107 & 1) != 0);
  if (v98 <= v116)
    LOBYTE(v109) = 0;
  if ((v109 & 1) != 0)
  {
LABEL_126:
    EndpointVADRTViterbi::expandWithZerosIfNecessary((char **)(v27 + 48), v98);
    EndpointVADRTViterbi::backtraceBackpointerArray(v27, *(_DWORD **)(v27 + 48), *(_QWORD *)(v27 + 56), v98, *(_DWORD *)(v27 + 156) + 1, v101);
    *(_DWORD *)(v27 + 156) = v98;
    v100 = v129;
  }
LABEL_127:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v100);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v140);
  LODWORD(v95) = *(_DWORD *)(v27 + 152);
  v96 = *(_DWORD *)(v27 + 156);
LABEL_128:
  if ((int)v95 <= v96)
  {
    v119 = *(_QWORD *)(v27 + 48);
    if ((int)v95 >= (unint64_t)((*(_QWORD *)(v27 + 56) - v119) >> 2))
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    v120 = *(_QWORD *)(v27 + 24);
    if ((int)v95 >= (unint64_t)((*(_QWORD *)(v27 + 32) - v120) >> 2))
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    *(_DWORD *)(v120 + 4 * (int)v95) = *(_DWORD *)(v119 + 4 * (int)v95);
  }
  else
  {
    EndpointVADRTViterbi::decodeStateSequence((EndpointVADRTViterbi *)v27, *(_DWORD *)(v27 + 148), v95);
  }
LABEL_133:
  if (!(*(_DWORD *)(v27 + 144) % **(_DWORD **)(v27 + 8)))
  {
    v121 = *(_QWORD *)(v27 + 80);
    v122 = 0.0;
    v123 = -16;
    do
    {
      v122 = v122 + *(double *)(v121 + v123);
      v123 += 8;
    }
    while (v123);
    v10 = vmulq_n_f64(*(float64x2_t *)(v121 - 16), 1.0 / v122);
    *(float64x2_t *)(v121 - 16) = v10;
  }
  v124 = 0;
  v125 = *((_QWORD *)this + 3);
  v126 = *((_DWORD *)this + 8);
  do
  {
    *(_DWORD *)(v125 + 4 * (v126 + v124)) = *((_DWORD *)&inInputBufferLists + v124);
    ++v124;
  }
  while (v124 != 10);
  *((_DWORD *)this + 8) = v126 + 10;
LABEL_140:
  LODWORD(v10.f64[0]) = *((_DWORD *)this + 11);
  v10.f64[0] = *((double *)this + 16) + (double)*(unint64_t *)&v10.f64[0];
  *((_QWORD *)this + 16) = *(_QWORD *)&v10.f64[0];
  return v10.f64[0];
}

void sub_1B64D6B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a10);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a20);
  _Unwind_Resume(a1);
}

void EndpointVADViterbiModel::~EndpointVADViterbiModel(EndpointVADViterbiModel *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void AUPeakPowerGuard::~AUPeakPowerGuard(AUPeakPowerGuard *this)
{
  AUPeakPowerGuard::~AUPeakPowerGuard(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E69E3A88;
  v2 = (const void *)*((_QWORD *)this + 271);
  if (v2)
    CFRelease(v2);
  AUDspLib::~AUDspLib(this);
}

uint64_t AUPeakPowerGuard::Initialize(DspLib::PeakPowerGuard::Algorithm **this)
{
  uint64_t v2;
  const __CFDictionary *v3;
  DspLib::PeakPowerGuard::Algorithm *v4;

  v2 = AUDspLib::Initialize((AUDspLib *)this);
  v3 = this[271];
  if (v3)
  {
    v4 = this[66];
    if (v4)
      DspLib::PeakPowerGuard::Algorithm::setAdmittanceFilterCoeffSet(v4, v3);
  }
  return v2;
}

uint64_t AUPeakPowerGuard::GetPropertyInfo(AUPeakPowerGuard *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 6611 || a3 != 0)
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  *a6 = 0;
  *a5 = 8;
  return 0;
}

uint64_t AUPeakPowerGuard::GetProperty(CFTypeRef *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  uint64_t result;
  CFTypeRef v9;
  const __CFDictionary *v10;

  if (a2 != 6611 || a3 != 0)
    return AUDspLib::GetProperty((AUDspLib *)this, a2, a3, a4, a5, a6);
  v9 = this[271];
  if (!v9)
    return 4294956445;
  CFRetain(this[271]);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v10, v9);
  result = 0;
  *a5 = v10;
  return result;
}

uint64_t AUPeakPowerGuard::SetProperty(DspLib::PeakPowerGuard::Algorithm **this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  DspLib::PeakPowerGuard::Algorithm *v11;
  const __CFDictionary *Copy;
  DspLib::PeakPowerGuard::Algorithm *v13;

  if (a2 != 6611 || a3 != 0)
    return AUDspLib::SetProperty((AUDspLib *)this, a2, a3, a4, a5, a6, a7);
  v11 = this[271];
  if (v11)
    CFRelease(v11);
  Copy = CFDictionaryCreateCopy(0, *(CFDictionaryRef *)a5);
  this[271] = Copy;
  v13 = this[66];
  if (v13 && !DspLib::PeakPowerGuard::Algorithm::setAdmittanceFilterCoeffSet(v13, Copy))
    return 4294956429;
  else
    return 0;
}

uint64_t AUPeakPowerGuard::Version(AUPeakPowerGuard *this)
{
  return 66563;
}

DspLib::PeakPowerGuard::Algorithm *AUPeakPowerGuard::newDspLibAlgorithm(AUPeakPowerGuard *this)
{
  DspLib::PeakPowerGuard::Algorithm *v1;

  v1 = (DspLib::PeakPowerGuard::Algorithm *)operator new();
  DspLib::PeakPowerGuard::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B64D6D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C40285BE8E4);
  _Unwind_Resume(a1);
}

os_log_t ___ZL27getNeuralTranscoderLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "AUSpatialMixerV2");
  *v0 = result;
  getNeuralTranscoderLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t NeuralTranscoder::NeuralTranscoder(uint64_t a1, CFURLRef *a2, int a3, int a4, uint64_t a5, float a6)
{
  _QWORD *v10;
  void ***v11;
  void **v12;
  size_t v13;
  UInt8 *v14;
  const std::string::value_type *v15;
  uint64_t v16;
  const char *v17;
  std::string *p_p;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  CFPropertyListRef v22;
  const __CFString *v23;
  std::string::size_type size;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v26;
  CFURLRef PathComponent;
  CFStringRef v28;
  uint64_t *v29;
  NeuralNet *v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  const __CFDictionary *v34;
  uint64_t *v35;
  NeuralNet *v36;
  const __CFNumber *v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint32_t v41;
  const __CFNumber *v42;
  uint64_t v43;
  int v44;
  const __CFNumber *v45;
  uint64_t v46;
  int v47;
  int v48;
  const __CFNumber *v49;
  uint64_t v50;
  const __CFNumber *v51;
  unsigned int v52;
  uint64_t v53;
  const __CFNumber *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int16 v57;
  BOOL v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  NSObject *v65;
  void *v66;
  int v67;
  const char *v68;
  uint64_t v69;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  void *v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  NSObject *v83;
  void *v84;
  float v85;
  unsigned int v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  int v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  unsigned int v98;
  float v99;
  float v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char **v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  int v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  float32x4_t *v115;
  int v116;
  float *v117;
  float v118;
  int v119;
  uint64_t i;
  IR::FixedIntegerDelay *v121;
  _QWORD *v122;
  void **v123;
  float v124;
  int v125;
  float v126;
  float v127;
  float v128;
  _QWORD *v129;
  long double v130;
  std::string::size_type v131;
  __int128 v132;
  void **v133;
  NSObject *v134;
  void *v135;
  int v136;
  std::string *v137;
  void *v138;
  int v139;
  std::string *v140;
  std::runtime_error *v141;
  std::runtime_error *v142;
  std::runtime_error *v143;
  std::runtime_error *v144;
  std::runtime_error *v145;
  std::runtime_error *v146;
  std::runtime_error *v147;
  std::runtime_error *v148;
  std::runtime_error *exception;
  std::runtime_error *v150;
  uint64_t *v151;
  uint64_t *v152;
  float32x4_t **v153;
  char **v154;
  char **v155;
  uint64_t *v156;
  unsigned int v157[2];
  char v158;
  int v159;
  __CFDictionary *v160;
  std::string v161;
  unsigned int __val[2];
  char v163;
  std::string *v164;
  __CFDictionary *v165;
  CFDictionaryRef theDict;
  CFDataRef data;
  stat v168;
  std::string __p;
  _BYTE v170[10];
  __int16 v171;
  int v172;
  UInt8 buffer[1032];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v154 = (char **)(a1 + 32);
  *(_OWORD *)(a1 + 72) = 0u;
  v156 = (uint64_t *)(a1 + 72);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0x10000000200;
  *(_QWORD *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 12451844;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  v151 = (uint64_t *)(a1 + 224);
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v153 = (float32x4_t **)(a1 + 136);
  *(_OWORD *)(a1 + 184) = 0u;
  v10 = (_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 248) = 0;
  v11 = (void ***)(a1 + 248);
  *(_OWORD *)(a1 + 168) = 0u;
  v155 = (char **)(a1 + 8);
  v12 = (void **)(a1 + 160);
  v152 = (uint64_t *)(a1 + 208);
  *(_DWORD *)(a1 + 244) = 1195081728;
  *(_DWORD *)(a1 + 256) = 1132068864;
  *(_BYTE *)(a1 + 260) = 1;
  *(float *)(a1 + 240) = a6;
  *(_DWORD *)(a1 + 112) = a4;
  if (*(char *)(a5 + 23) >= 0)
    v13 = *(unsigned __int8 *)(a5 + 23);
  else
    v13 = *(_QWORD *)(a5 + 8);
  v14 = buffer;
  std::string::basic_string[abi:ne180100]((uint64_t)buffer, v13 + 17);
  if ((buffer[23] & 0x80u) != 0)
    v14 = *(UInt8 **)buffer;
  if (v13)
  {
    if (*(char *)(a5 + 23) >= 0)
      v15 = (const std::string::value_type *)a5;
    else
      v15 = *(const std::string::value_type **)a5;
    memmove(v14, v15, v13);
  }
  strcpy((char *)&v14[v13], "|NeuralTranscoder");
  if (*(char *)(a1 + 183) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)buffer;
  v12[2] = *(void **)&buffer[16];
  if (!ChannelLayoutTagIsSupportedHOA(a3))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v21 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      return a1;
    if (*(char *)(a1 + 183) < 0)
      v12 = (void **)*v12;
    *(_DWORD *)buffer = 136315394;
    *(_QWORD *)&buffer[4] = v12;
    *(_WORD *)&buffer[12] = 2080;
    *(_QWORD *)&buffer[14] = "NeuralTranscoder";
    v17 = "[%s|%s] Error creating neural network - input tag is not FOA/HOA";
LABEL_34:
    p_p = (std::string *)buffer;
    v19 = v21;
    v20 = 22;
LABEL_35:
    _os_log_error_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, v17, (uint8_t *)p_p, v20);
    return a1;
  }
  if (!*a2)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v21 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      return a1;
    if (*(char *)(a1 + 183) < 0)
      v12 = (void **)*v12;
    *(_DWORD *)buffer = 136315394;
    *(_QWORD *)&buffer[4] = v12;
    *(_WORD *)&buffer[12] = 2080;
    *(_QWORD *)&buffer[14] = "NeuralTranscoder";
    v17 = "[%s|%s] Error creating neural network - neural transcoder plist was not provided";
    goto LABEL_34;
  }
  CFURLGetFileSystemRepresentation(*a2, 1u, buffer, 1024);
  if (!stat((const char *)buffer, &v168))
  {
    *(_DWORD *)(a1 + 128) = a3;
    CFURLGetFileSystemRepresentation(*a2, 1u, buffer, 1024);
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)buffer);
    applesauce::CF::make_DataRef((const char *)&__p, &data);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!data)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v31 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 183) < 0)
          v12 = (void **)*v12;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
        *(_QWORD *)v170 = buffer;
        _os_log_error_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_ERROR, "[%s|%s] Error creating neural network - error loading plist file: %s", (uint8_t *)&__p, 0x20u);
      }
      goto LABEL_140;
    }
    v22 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v22);
    if (!theDict)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v32 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_138;
      if (*(char *)(a1 + 183) < 0)
        v12 = (void **)*v12;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
      v33 = "[%s|%s] Error creating neural network - error creating plist object";
      goto LABEL_86;
    }
    if (!applesauce::CF::details::has_key<char const(&)[17]>((_BOOL8)theDict, "ModelNetPathBase"))
      goto LABEL_52;
    if (!theDict)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    if (applesauce::CF::details::has_key<char const(&)[17]>((_BOOL8)theDict, "ModelNetPathBase"))
    {
      if (!theDict)
      {
        v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v150, "Could not construct");
      }
      v23 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[17]>(theDict, "ModelNetPathBase");
      if (v23)
      {
        applesauce::CF::convert_as<std::string,0>((uint64_t)&__p, v23);
        if (v170[0])
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!size)
          {
LABEL_52:
            MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
            if (!*a2)
            {
              v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v148, "Could not construct");
            }
            v26 = MutableCopy;
            PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *a2);
            applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&__p, PathComponent);
            v28 = CFURLCopyPath((CFURLRef)__p.__r_.__value_.__l.__data_);
            if (__p.__r_.__value_.__r.__words[0])
              CFRelease(__p.__r_.__value_.__l.__data_);
            CFDictionarySetValue(v26, CFSTR("ModelNetPathBase"), v28);
            CFRelease(v28);
            if (getNeuralTranscoderLogScope(void)::once != -1)
              dispatch_once(&getNeuralTranscoderLogScope(void)::once, &__block_literal_global_19105);
            v29 = (uint64_t *)getNeuralTranscoderLogScope(void)::scope;
            v30 = (NeuralNet *)operator new();
            NeuralNet::NeuralNet((uint64_t)v30, v26, v29);
            std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)a1, v30);
            CFRelease(v26);
LABEL_74:
            if (*(_QWORD *)a1)
            {
              if (!theDict)
              {
                v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v141, "Could not construct");
              }
              v37 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>(theDict, "BlockSize");
              if (v37)
              {
                v38 = applesauce::CF::convert_as<unsigned int,0>(v37);
                if ((v38 & 0xFF00000000) != 0)
                  v39 = v38;
                else
                  v39 = 0;
              }
              else
              {
                v39 = 0;
              }
              *(_DWORD *)(a1 + 104) = v39;
              if (!theDict)
              {
                v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v142, "Could not construct");
              }
              v42 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[22]>(theDict, "NumberOfInputChannels");
              if (v42)
              {
                v43 = applesauce::CF::convert_as<unsigned int,0>(v42);
                if ((v43 & 0xFF00000000) != 0)
                  v44 = v43;
                else
                  v44 = 0;
              }
              else
              {
                v44 = 0;
              }
              *(_DWORD *)(a1 + 56) = v44;
              if (!theDict)
              {
                v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v143, "Could not construct");
              }
              v45 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[23]>(theDict, "NumberOfOutputChannels");
              if (v45)
              {
                v46 = applesauce::CF::convert_as<unsigned int,0>(v45);
                if ((v46 & 0xFF00000000) != 0)
                  v47 = v46;
                else
                  v47 = 0;
              }
              else
              {
                v47 = 0;
              }
              *(_DWORD *)(a1 + 60) = v47;
              if (!theDict)
              {
                v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v144, "Could not construct");
              }
              v48 = *(_DWORD *)(a1 + 104) >> 1;
              v49 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>(theDict, "LookaheadSize");
              if (v49)
              {
                v50 = applesauce::CF::convert_as<unsigned int,0>(v49);
                if ((v50 & 0xFF00000000) != 0)
                  v48 = v50;
              }
              *(_DWORD *)(a1 + 108) = v48;
              if (!theDict)
              {
                v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v145, "Could not construct");
              }
              v51 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[11]>(theDict, "SampleRate");
              v52 = 48000;
              if (v51)
              {
                v53 = applesauce::CF::convert_as<unsigned int,0>(v51);
                if ((v53 & 0xFF00000000) != 0)
                  v52 = v53;
                else
                  v52 = 48000;
              }
              *(float *)(a1 + 244) = (float)v52;
              if (!theDict)
              {
                v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v146, "Could not construct");
              }
              v54 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[18]>(theDict, "HighPassFrequency");
              v55 = 250;
              if (v54)
              {
                v56 = applesauce::CF::convert_as<unsigned int,0>(v54);
                if ((v56 & 0xFF00000000) != 0)
                  v55 = v56;
                else
                  v55 = 250;
              }
              *(float *)(a1 + 256) = (float)v55;
              if (!theDict)
              {
                v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v147, "Could not construct");
              }
              v57 = applesauce::CF::details::find_at_key_or_optional<BOOL,char const(&)[12]>(theDict, "UseHighPass");
              if ((_BYTE)v57)
                v58 = 0;
              else
                v58 = v57 >= 0x100u;
              v59 = !v58;
              *(_BYTE *)(a1 + 260) = v59;
              if (*(_DWORD *)(a1 + 104) && (v60 = *(_DWORD *)(a1 + 56)) != 0 && (v61 = *(_DWORD *)(a1 + 60)) != 0)
              {
                v62 = *(unsigned __int16 *)(a1 + 128);
                if (v62 == v60)
                {
                  v63 = 3;
                  while (v63 != 11)
                  {
                    v64 = v63 * v63;
                    if (v61 == v63 * v63)
                    {
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v65 = getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      {
                        v78 = v12;
                        if (*(char *)(a1 + 183) < 0)
                          v78 = *v12;
                        v79 = *(_DWORD *)(a1 + 60);
                        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
                        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v78;
                        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                        HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
                        *(_DWORD *)v170 = v79;
                        v68 = "[%s|%s] Neural network has valid %u output channels; FOA channels will be predicted";
LABEL_165:
                        _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEFAULT, v68, (uint8_t *)&__p, 0x1Cu);
                      }
LABEL_166:
                      if (*(_BYTE *)(a1 + 125))
                      {
                        v80 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 60);
                      }
                      else
                      {
                        if (*(_BYTE *)(a1 + 260))
                          *(_BYTE *)(a1 + 260) = 0;
                        v80 = *(_DWORD *)(a1 + 60);
                      }
                      *(_DWORD *)(a1 + 64) = v80;
                      v81 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 104));
                      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                      std::vector<float>::assign(v155, v81, &__p);
                      if (*(_BYTE *)(a1 + 260))
                      {
                        v82 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 104));
                        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                        std::vector<float>::assign(v154, v82, &__p);
                      }
                      if (*(float *)(a1 + 240) == *(float *)(a1 + 244))
                        goto LABEL_198;
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v83 = getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      {
                        v84 = v12;
                        if (*(char *)(a1 + 183) < 0)
                          v84 = *v12;
                        v85 = *(float *)(a1 + 240);
                        v86 = *(float *)(a1 + 244);
                        LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
                        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v84;
                        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                        HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
                        *(_DWORD *)v170 = v86;
                        *(_WORD *)&v170[4] = 1024;
                        *(_DWORD *)&v170[6] = v85;
                        _os_log_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_DEFAULT, "[%s|%s] Neural network has a sample rate = %u; input has a sample rate = %u --- initializing s"
                          "ample rate converters",
                          (uint8_t *)&__p,
                          0x22u);
                      }
                      CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v164, 1);
                      v87 = (const void *)*MEMORY[0x1E0CFFD20];
                      CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v165, (const void *)*MEMORY[0x1E0CFFD20], *(float *)(a1 + 240));
                      v88 = (const void *)*MEMORY[0x1E0CFFD30];
                      CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v165, (const void *)*MEMORY[0x1E0CFFD30], *(float *)(a1 + 244));
                      v89 = (const void *)*MEMORY[0x1E0CFFD28];
                      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v165, (const void *)*MEMORY[0x1E0CFFD28], *(_DWORD *)(a1 + 56));
                      v90 = (const void *)*MEMORY[0x1E0CFFD38];
                      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v165, (const void *)*MEMORY[0x1E0CFFD38], 64);
                      CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)__val);
                      if (v163)
                      {
                        if (*(_BYTE *)(a1 + 216))
                        {
                          v91 = *v152;
                          v92 = *(_QWORD *)__val;
                        }
                        else
                        {
                          v91 = 0;
                          v92 = *(_QWORD *)__val;
                          *(_BYTE *)(a1 + 216) = 1;
                        }
                        *(_QWORD *)__val = v91;
                        *(_QWORD *)(a1 + 208) = v92;
                        CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v159, 1);
                        CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v160, v87, *(float *)(a1 + 244));
                        CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v160, v88, *(float *)(a1 + 240));
                        CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v160, v89, *(_DWORD *)(a1 + 64));
                        CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v160, v90, 64);
                        CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)v157);
                        if (v158)
                        {
                          v94 = 0;
                          if (*(_BYTE *)(a1 + 232))
                          {
                            v95 = *v151;
                            *v151 = *(_QWORD *)v157;
                            *(_QWORD *)v157 = v95;
                          }
                          else
                          {
                            v97 = *(_QWORD *)v157;
                            *(_QWORD *)v157 = 0;
                            *(_QWORD *)(a1 + 224) = v97;
                            *(_BYTE *)(a1 + 232) = 1;
                          }
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1)
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                          v96 = getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
                            v138 = v12;
                            if (*(char *)(a1 + 183) < 0)
                              v138 = *v12;
                            v139 = bswap32(v157[0]);
                            *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1) = v139;
                            if (((char)v139 - 32) > 0x5E
                              || (((__int16)v139 >> 8) - 32) > 0x5E
                              || ((v139 << 8 >> 24) - 32) > 0x5E
                              || ((v139 >> 24) - 32) > 0x5E)
                            {
                              std::to_string(&v161, v157[0]);
                            }
                            else
                            {
                              *(_WORD *)((char *)__p.__r_.__value_.__r.__words + 5) = 39;
                              __p.__r_.__value_.__s.__data_[0] = 39;
                              std::string::basic_string[abi:ne180100]<0>(&v161, (char *)&__p);
                            }
                            v140 = &v161;
                            if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                              v140 = (std::string *)v161.__r_.__value_.__r.__words[0];
                            LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
                            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v138;
                            WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                            HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
                            *(_QWORD *)v170 = v140;
                            _os_log_error_impl(&dword_1B5ED0000, v96, OS_LOG_TYPE_ERROR, "[%s|%s] failed to create neural network output SRC with error code %s", (uint8_t *)&__p, 0x20u);
                            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v161.__r_.__value_.__l.__data_);
                          }
                          v94 = 1;
                        }
                        caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)v157);
                        CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v159);
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1)
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                        v93 = getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                        {
                          v135 = v12;
                          if (*(char *)(a1 + 183) < 0)
                            v135 = *v12;
                          v136 = bswap32(__val[0]);
                          *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1) = v136;
                          if (((char)v136 - 32) > 0x5E
                            || (((__int16)v136 >> 8) - 32) > 0x5E
                            || ((v136 << 8 >> 24) - 32) > 0x5E
                            || ((v136 >> 24) - 32) > 0x5E)
                          {
                            std::to_string(&v161, __val[0]);
                          }
                          else
                          {
                            *(_WORD *)((char *)__p.__r_.__value_.__r.__words + 5) = 39;
                            __p.__r_.__value_.__s.__data_[0] = 39;
                            std::string::basic_string[abi:ne180100]<0>(&v161, (char *)&__p);
                          }
                          v137 = &v161;
                          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            v137 = (std::string *)v161.__r_.__value_.__r.__words[0];
                          LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
                          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v135;
                          WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
                          *(_QWORD *)v170 = v137;
                          _os_log_error_impl(&dword_1B5ED0000, v93, OS_LOG_TYPE_ERROR, "[%s|%s] failed to create neural network input SRC with error code %s", (uint8_t *)&__p, 0x20u);
                          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v161.__r_.__value_.__l.__data_);
                        }
                        v94 = 1;
                      }
                      caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)__val);
                      CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v164);
                      if (!v94)
                      {
LABEL_198:
                        std::vector<std::vector<float>>::resize(v156, *(unsigned int *)(a1 + 64));
                        v98 = *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 104);
                        if (*(_BYTE *)(a1 + 216))
                        {
                          if (*(_BYTE *)(a1 + 232))
                          {
                            v99 = *(float *)(a1 + 240);
                            v100 = *(float *)(a1 + 244);
                            if (v99 > v100)
                              v98 = vcvtps_u32_f32((float)(v99 * (float)v98) / v100) + 16;
                          }
                        }
                        if (*(_DWORD *)(a1 + 64))
                        {
                          v101 = 0;
                          v102 = 0;
                          v103 = v98;
                          do
                          {
                            v104 = (char **)(*v156 + v101);
                            LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                            std::vector<float>::assign(v104, v103, &__p);
                            ++v102;
                            v101 += 24;
                          }
                          while (v102 < *(unsigned int *)(a1 + 64));
                        }
                        v105 = *(_DWORD *)(a1 + 128);
                        if (v105 == 7012356 || (v105 & 0xFFFF0000) == 0xBF0000)
                        {
                          std::vector<float>::resize((uint64_t)v153, *(unsigned int *)(a1 + 56));
                          v106 = *(_DWORD *)(a1 + 56);
                          v107 = 0x40000000;
                          do
                          {
                            v108 = v107;
                            v107 >>= 2;
                          }
                          while (v108 > v106);
                          if (v108)
                          {
                            LODWORD(v109) = 0;
                            do
                            {
                              v110 = v108 + v109;
                              v111 = 2 * v108;
                              if (v106 < v108 + v109)
                              {
                                v110 = 0;
                                v111 = 0;
                              }
                              v106 -= v110;
                              v112 = v111 + v109;
                              v109 = (v111 + v109) >> 1;
                              v113 = v108 > 3;
                              v108 >>= 2;
                            }
                            while (v113);
                            if (v112 >= 2)
                            {
                              v114 = 0;
                              v115 = *v153;
                              v116 = -1;
                              do
                              {
                                v117 = &v115->f32[(v114 * v114)];
                                v118 = 1.0 / sqrtf((float)((float)v114 * 2.0) + 1.0);
                                v119 = v116;
                                do
                                {
                                  *v117++ = v118;
                                  v58 = __CFADD__(v119++, 1);
                                }
                                while (!v58);
                                ++v114;
                                v116 -= 2;
                              }
                              while (v114 != v109);
                            }
                          }
                          if (*(_DWORD *)(a1 + 128) == 7012356)
                            **v153 = vmulq_f32(**v153, (float32x4_t)xmmword_1B66A2840);
                        }
                        if (*(_BYTE *)(a1 + 125))
                        {
                          std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)v10, 4uLL);
                          for (i = 0; i != 32; i += 8)
                          {
                            v121 = (IR::FixedIntegerDelay *)operator new();
                            IR::FixedIntegerDelay::FixedIntegerDelay(v121, *(_DWORD *)(a1 + 108), 1);
                            v122 = *(_QWORD **)(*v10 + i);
                            *(_QWORD *)(*v10 + i) = v121;
                            if (v122)
                              std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v122);
                          }
                        }
                        if (*(_BYTE *)(a1 + 260))
                        {
                          v123 = (void **)operator new();
                          v124 = *(float *)(a1 + 244);
                          v125 = *(_DWORD *)(a1 + 56);
                          if (*(char *)(a5 + 23) < 0)
                            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
                          else
                            __p = *(std::string *)a5;
                          ParametricFilters::ParametricFilters((uint64_t)v123, v125, 0, 4, (__int128 *)&__p, v124);
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p.__r_.__value_.__l.__data_);
                          std::unique_ptr<ParametricFilters>::reset[abi:ne180100](v11, v123);
                          v126 = *(float *)(a1 + 256);
                          v127 = *(float *)(a1 + 244);
                          std::vector<BiquadCoefficients>::vector(&__p, 4uLL);
                          v128 = (float)((float)(v126 + v126) / v127) * 3.1416;
                          v129 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
                          if (v128 <= 0.0)
                          {
                            *(_QWORD *)__p.__r_.__value_.__l.__data_ = 0;
                            v129[1] = 0;
                            v129[3] = 0;
                            v129[4] = 0;
                            v129[2] = 0x3FF0000000000000;
                            v131 = __p.__r_.__value_.__r.__words[0];
                            *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 40) = 0;
                            *(_QWORD *)(v131 + 48) = 0;
                            *(_QWORD *)(v131 + 64) = 0;
                            *(_QWORD *)(v131 + 72) = 0;
                            *(_QWORD *)(v131 + 56) = 0x3FF0000000000000;
                          }
                          else
                          {
                            v130 = fmin(v128, 3.11017673);
                            BiquadCoefficients::SetPriv((BiquadCoefficients *)__p.__r_.__value_.__l.__data_, 2, v130, 0.5411961, 0.0);
                            BiquadCoefficients::SetPriv((BiquadCoefficients *)(__p.__r_.__value_.__r.__words[0] + 40), 2, v130, 1.30656296, 0.0);
                            v131 = __p.__r_.__value_.__r.__words[0];
                          }
                          v132 = *(_OWORD *)(v131 + 16);
                          *(_OWORD *)(v131 + 80) = *(_OWORD *)v131;
                          *(_OWORD *)(v131 + 96) = v132;
                          *(_QWORD *)(v131 + 112) = *(_QWORD *)(v131 + 32);
                          *(_OWORD *)(v131 + 120) = *(_OWORD *)(v131 + 40);
                          *(_OWORD *)(v131 + 136) = *(_OWORD *)(v131 + 56);
                          *(_QWORD *)(v131 + 152) = *(_QWORD *)(v131 + 72);
                          v133 = *v11;
                          memset(&v161, 0, sizeof(v161));
                          ParametricFilters::setParametricFilters((uint64_t)v133, &__p, &v161);
                          v164 = &v161;
                          std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
                          if (__p.__r_.__value_.__r.__words[0])
                          {
                            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                        }
                        *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 104);
                        *(_BYTE *)(a1 + 124) = 1;
                        if (getAUSMV2Log(void)::onceToken != -1)
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                        v134 = getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
                        {
                          if (*(char *)(a1 + 183) < 0)
                            v12 = (void **)*v12;
                          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
                          WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                          _os_log_impl(&dword_1B5ED0000, v134, OS_LOG_TYPE_DEFAULT, "[%s|%s] Neural Transcoder Successfully Initialized", (uint8_t *)&__p, 0x16u);
                        }
                      }
                      goto LABEL_138;
                    }
                    ++v63;
                    if (v61 == v64 - 4)
                    {
                      *(_BYTE *)(a1 + 125) = 1;
                      *(_DWORD *)(a1 + 120) = 4;
                      if (getAUSMV2Log(void)::onceToken != -1)
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                      v65 = getAUSMV2Log(void)::gLog;
                      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
                      {
                        v66 = v12;
                        if (*(char *)(a1 + 183) < 0)
                          v66 = *v12;
                        v67 = *(_DWORD *)(a1 + 60);
                        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
                        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
                        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                        HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
                        *(_DWORD *)v170 = v67;
                        v68 = "[%s|%s] Neural network has valid %u output channels; assuming FOA passthrough mode";
                        goto LABEL_165;
                      }
                      goto LABEL_166;
                    }
                  }
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v76 = getAUSMV2Log(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    goto LABEL_138;
                  if (*(char *)(a1 + 183) < 0)
                    v12 = (void **)*v12;
                  v77 = *(_DWORD *)(a1 + 60);
                  LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
                  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                  HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
                  *(_DWORD *)v170 = v77;
                  v33 = "[%s|%s] Error creating neural network - %u output channels is not supported";
                  v40 = v76;
                  v41 = 28;
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1)
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                  v71 = getAUSMV2Log(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    goto LABEL_138;
                  if (*(char *)(a1 + 183) < 0)
                    v12 = (void **)*v12;
                  v72 = *(_DWORD *)(a1 + 56);
                  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
                  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                  HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
                  *(_DWORD *)v170 = v62;
                  *(_WORD *)&v170[4] = 1024;
                  *(_DWORD *)&v170[6] = v72;
                  v33 = "[%s|%s] Error creating neural network - inconsistent number of input channels between layout and"
                        " plist - Layout = %u, Plist = %u";
                  v40 = v71;
                  v41 = 34;
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1)
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
                v69 = getAUSMV2Log(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                  goto LABEL_138;
                if (*(char *)(a1 + 183) < 0)
                  v12 = (void **)*v12;
                v73 = *(_DWORD *)(a1 + 104);
                v74 = *(_DWORD *)(a1 + 56);
                v75 = *(_DWORD *)(a1 + 60);
                LODWORD(__p.__r_.__value_.__l.__data_) = 136316162;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
                WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
                HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
                *(_DWORD *)v170 = v73;
                *(_WORD *)&v170[4] = 1024;
                *(_DWORD *)&v170[6] = v74;
                v171 = 1024;
                v172 = v75;
                v33 = "[%s|%s] Error creating neural network - Frame size = %u, Num Inputs = %u, Num Outputs = %u";
                v40 = v69;
                v41 = 40;
              }
LABEL_152:
              _os_log_error_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&__p, v41);
LABEL_138:
              if (theDict)
                CFRelease(theDict);
LABEL_140:
              if (data)
                CFRelease(data);
              return a1;
            }
            if (getAUSMV2Log(void)::onceToken != -1)
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
            v32 = getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              goto LABEL_138;
            if (*(char *)(a1 + 183) < 0)
              v12 = (void **)*v12;
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
            v33 = "[%s|%s] Error creating neural network - failure loading neural plist";
LABEL_86:
            v40 = v32;
            v41 = 22;
            goto LABEL_152;
          }
        }
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
      }
    }
    v34 = theDict;
    if (getNeuralTranscoderLogScope(void)::once != -1)
      dispatch_once(&getNeuralTranscoderLogScope(void)::once, &__block_literal_global_19105);
    v35 = (uint64_t *)getNeuralTranscoderLogScope(void)::scope;
    v36 = (NeuralNet *)operator new();
    NeuralNet::NeuralNet((uint64_t)v36, v34, v35);
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)a1, v36);
    goto LABEL_74;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v16 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 183) < 0)
      v12 = (void **)*v12;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"NeuralTranscoder";
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    *(_QWORD *)v170 = buffer;
    v17 = "[%s|%s] Error creating neural network - neural transcoder plist does not exist: %s";
    p_p = &__p;
    v19 = v16;
    v20 = 32;
    goto LABEL_35;
  }
  return a1;
}

void sub_1B64D869C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf,CFTypeRef a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,__int16 a54,int a55,__int16 a56,uint64_t a57,uint64_t a58)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void NeuralTranscoder::process(_QWORD **a1, uint64_t *a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t RequiredNumberOfInputFrames;
  uint64_t v15;
  unint64_t v16;
  const float *const *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  const float *const *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  vDSP_Length v42;
  float *v43;
  void *v44;
  unint64_t v45;
  float *const *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float *const *v51;
  size_t v52;
  vDSP_Length v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  float **v57;
  float **v58;
  float *const *ExpectedNumberOfOutputFrames;
  unint64_t v60;
  const float *const *v61;
  size_t v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned int v65;
  float *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unsigned int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (*a1 && *((_BYTE *)a1 + 124))
  {
    v5 = *((_DWORD *)a1 + 28);
    if (v5 >= a3)
      v5 = a3;
    v89 = v5;
    if (*((_DWORD *)a1 + 16))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = (void **)&a1[9][v6];
        v9 = (char *)*v8 + 4 * *((unsigned int *)a1 + 29);
        memmove(*v8, v9, ((_BYTE *)v8[1] - v9) & 0xFFFFFFFFFFFFFFFCLL);
        ++v7;
        v6 += 3;
      }
      while (v7 < *((unsigned int *)a1 + 16));
    }
    if (v89)
    {
      v87 = (uint64_t *)(a1 + 1);
      v88 = (uint64_t *)(a1 + 4);
      v10 = *((_DWORD *)a1 + 26);
      v11 = *((_DWORD *)a1 + 24);
      v12 = v89;
      do
      {
        v13 = v10 - v11;
        if (*((_BYTE *)a1 + 216))
        {
          RequiredNumberOfInputFrames = AudioSampleRateConverterGetRequiredNumberOfInputFrames();
          v15 = RequiredNumberOfInputFrames;
          if (RequiredNumberOfInputFrames > v12)
          {
            RequiredNumberOfInputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames((CA::AudioSampleRateConverter *)a1[26]);
            v13 = RequiredNumberOfInputFrames;
            v15 = v12;
          }
          v90 = &v86;
          MEMORY[0x1E0C80A78](RequiredNumberOfInputFrames);
          v17 = (const float *const *)((char *)&v86 - ((v16 + 15) & 0xFFFFFFFF0));
          if (v16 >= 0x200)
            v18 = 512;
          else
            v18 = v16;
          bzero((char *)&v86 - ((v16 + 15) & 0xFFFFFFFF0), v18);
          v19 = *((unsigned int *)a1 + 14);
          MEMORY[0x1E0C80A78](v20);
          v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFF0);
          if (v21 >= 0x200)
            v23 = 512;
          else
            v23 = v21;
          bzero((char *)&v86 - ((v21 + 15) & 0xFFFFFFFF0), v23);
          if ((_DWORD)v19)
          {
            v24 = 0;
            v25 = *((_DWORD *)a1 + 32);
            v26 = *a2;
            v27 = v89 - v12;
            v28 = *((_DWORD *)a1 + 26);
            v29 = *((_DWORD *)a1 + 24);
            v30 = a1[1];
            do
            {
              if (v25 == 7012356)
                v31 = kFuMa2ACNMapping[v24];
              else
                v31 = v24;
              v17[v24] = (const float *const)(*(_QWORD *)(v26 + 32 * v31) + 4 * v27);
              *(_QWORD *)&v22[8 * v24++] = (char *)v30 + 4 * v29;
              v29 += v28;
            }
            while (v19 != v24);
          }
          v32 = v17;
          v33 = v15;
          CA::AudioSampleRateConverter::Process((CA::AudioSampleRateConverter *)a1[26], v32, v15, v22, (float *const *)v13);
          *((_DWORD *)a1 + 24) += v13;
          v11 = *((_DWORD *)a1 + 24);
        }
        else
        {
          if (v13 >= v12)
            v33 = v12;
          else
            v33 = v13;
          if (*((_DWORD *)a1 + 14))
          {
            v34 = 0;
            v35 = v33;
            v36 = v89 - v12;
            v37 = (_QWORD *)v35;
            v38 = 4 * v35;
            do
            {
              if (*((_DWORD *)a1 + 32) == 7012356)
                v39 = kFuMa2ACNMapping[v34];
              else
                v39 = v34;
              memcpy((char *)a1[1] + 4 * (*((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 26) * v34++), (const void *)(*(_QWORD *)(*a2 + 32 * v39) + 4 * v36), v38);
            }
            while (v34 < *((unsigned int *)a1 + 14));
            v11 = *((_DWORD *)a1 + 24);
            v33 = (uint64_t)v37;
          }
          v11 += v33;
          *((_DWORD *)a1 + 24) = v11;
        }
        v10 = *((_DWORD *)a1 + 26);
        if (v11 >= v10)
        {
          v90 = (uint64_t *)v33;
          if (a1[18] != a1[17] && *((_DWORD *)a1 + 14))
          {
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = *((unsigned int *)a1 + 26);
              v43 = (float *)a1[1] + (v42 * v41);
              vDSP_vsmul(v43, 1, (const float *)((char *)a1[17] + v40), v43, 1, v42);
              ++v41;
              v40 += 4;
            }
            while (v41 < *((unsigned int *)a1 + 14));
          }
          if (*((_BYTE *)a1 + 260))
          {
            v44 = memcpy(a1[4], a1[1], (char *)a1[2] - (char *)a1[1]);
            MEMORY[0x1E0C80A78](v44);
            v46 = (float *const *)((char *)&v86 - ((v45 + 15) & 0xFFFFFFFF0));
            if (v45 >= 0x200)
              v47 = 512;
            else
              v47 = v45;
            bzero((char *)&v86 - ((v45 + 15) & 0xFFFFFFFF0), v47);
            v48 = *((unsigned int *)a1 + 14);
            MEMORY[0x1E0C80A78](v49);
            v51 = (float *const *)((char *)&v86 - ((v50 + 15) & 0xFFFFFFFF0));
            if (v50 >= 0x200)
              v52 = 512;
            else
              v52 = v50;
            bzero((char *)&v86 - ((v50 + 15) & 0xFFFFFFFF0), v52);
            v53 = *((unsigned int *)a1 + 26);
            if ((_DWORD)v48)
            {
              v54 = 0;
              v55 = *v88;
              v56 = *v87;
              v57 = (float **)v46;
              v58 = (float **)v51;
              do
              {
                *v57++ = (float *)(v55 + 4 * v54);
                *v58++ = (float *)(v56 + 4 * v54);
                v54 += v53;
                --v48;
              }
              while (v48);
            }
            ParametricFilters::process((uint64_t)a1[31], v51, v46, v53, 0);
            (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)**a1 + 72))(**a1, v88);
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)**a1 + 72))(**a1, v87);
          }
          LODWORD(ExpectedNumberOfOutputFrames) = *((_DWORD *)a1 + 26);
          if (*((_BYTE *)a1 + 232))
          {
            ExpectedNumberOfOutputFrames = (float *const *)CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames((CA::AudioSampleRateConverter *)a1[28]);
            MEMORY[0x1E0C80A78](ExpectedNumberOfOutputFrames);
            v61 = (const float *const *)((char *)&v86 - ((v60 + 15) & 0xFFFFFFFF0));
            if (v60 >= 0x200)
              v62 = 512;
            else
              v62 = v60;
            bzero((char *)&v86 - ((v60 + 15) & 0xFFFFFFFF0), v62);
            if (*((_BYTE *)a1 + 125) && *((_DWORD *)a1 + 30))
            {
              v64 = 0;
              v65 = *((_DWORD *)a1 + 26);
              v66 = (float *)a1[1];
              do
              {
                IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)a1[23][v64], &v66[v65 * v64], &v66[v65 * v64], v65);
                v65 = *((_DWORD *)a1 + 26);
                v66 = (float *)a1[1];
                v61[v64] = &v66[v65 * v64];
                ++v64;
              }
              while (v64 < *((unsigned int *)a1 + 30));
            }
            if (*((_DWORD *)a1 + 15))
            {
              v67 = 0;
              do
              {
                v63 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 40))(**a1);
                (&v61[v67])[*((_DWORD *)a1 + 30)] = (const float *const)(*v63 + 4 * *((_DWORD *)a1 + 26) * v67);
                ++v67;
              }
              while (v67 < *((_DWORD *)a1 + 15));
            }
            v68 = *((unsigned int *)a1 + 16);
            MEMORY[0x1E0C80A78](v63);
            v70 = (char *)&v86 - ((v69 + 15) & 0xFFFFFFFF0);
            if (v69 >= 0x200)
              v71 = 512;
            else
              v71 = v69;
            bzero((char *)&v86 - ((v69 + 15) & 0xFFFFFFFF0), v71);
            if ((_DWORD)v68)
            {
              v72 = a1[9];
              v73 = *((unsigned int *)a1 + 25);
              v74 = v70;
              do
              {
                v75 = *v72;
                v72 += 3;
                *v74++ = v75 + 4 * v73;
                --v68;
              }
              while (v68);
            }
            CA::AudioSampleRateConverter::Process((CA::AudioSampleRateConverter *)a1[28], v61, *((_DWORD *)a1 + 26), v70, ExpectedNumberOfOutputFrames);
          }
          else
          {
            if (*((_BYTE *)a1 + 125) && *((_DWORD *)a1 + 30))
            {
              v76 = 0;
              v77 = 0;
              do
              {
                IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)a1[23][v77], (float *)a1[1] + (*((_DWORD *)a1 + 26) * v77), (float *)(a1[9][v76] + 4 * *((unsigned int *)a1 + 25)), ExpectedNumberOfOutputFrames);
                ++v77;
                v76 += 3;
              }
              while (v77 < *((unsigned int *)a1 + 30));
            }
            if (*((_DWORD *)a1 + 15))
            {
              v78 = 0;
              do
              {
                v79 = *((unsigned int *)a1 + 25);
                v80 = a1[9][3 * v78 + 3 * *((_DWORD *)a1 + 30)];
                v81 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 40))(**a1);
                memcpy((void *)(v80 + 4 * v79), (const void *)(*v81 + 4 * *((_DWORD *)a1 + 26) * v78++), 4 * *((unsigned int *)a1 + 26));
              }
              while (v78 < *((_DWORD *)a1 + 15));
            }
          }
          v10 = *((_DWORD *)a1 + 26);
          v11 = *((_DWORD *)a1 + 24) - v10;
          v82 = *((_DWORD *)a1 + 25) + (_DWORD)ExpectedNumberOfOutputFrames;
          *((_DWORD *)a1 + 24) = v11;
          *((_DWORD *)a1 + 25) = v82;
          LODWORD(v33) = (_DWORD)v90;
        }
        v12 = (v12 - v33);
      }
      while ((_DWORD)v12);
    }
    v83 = *((_DWORD *)a1 + 25);
    v84 = v83 >= v89;
    v85 = v83 - v89;
    if (v84)
      *((_DWORD *)a1 + 25) = v85;
    *((_DWORD *)a1 + 29) = v89;
  }
}

void sub_1B64D9598(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void covarianceBasedAdaptiveFilter::calculateSharpeningFilter(covarianceBasedAdaptiveFilter *this, CLiteMatrix *a2, const float **a3, CLiteMatrix *a4, CLiteMatrix *a5, char a6, float a7)
{
  CLiteMatrix *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t j;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  CLiteMatrix *v36;
  float *v37;
  float *v38;
  float *v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  int64_t v44;
  float v45;
  float v46;
  int64_t k;
  const float *v48;
  const float *v49;
  float *v50;
  float *v51;
  float *v52;
  BOOL v53;
  float *v54;
  float v55;
  float *v56;
  float v57;
  float v58;
  uint64_t v59;
  int64_t v60;
  float *v61;
  float v62;
  float *v63;
  float v64;
  int64_t v65;
  float v66;
  float *v67;
  CLiteMatrix *v68;
  uint64_t v69;
  CLiteMatrix *v70;
  CLiteMatrix *v71;
  char *v72;
  CLiteMatrix *v73;
  CLiteMatrix *v74;
  CLiteMatrix *v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  CLiteMatrix *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t m;
  float v85;
  int v86;
  int v87;
  _DWORD *v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  double v102;
  float v103;
  NSObject *v104;
  CLiteMatrix *v105;
  char *v106;
  char v107;
  vDSP_Length *v108;
  int v109;
  char __jobvt;
  char __uplo[4];
  __CLPK_integer __info;
  DSPSplitComplex __lda;
  DSPSplitComplex __n;
  _BYTE __m[18];
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v109 = *(_QWORD *)a5;
  v14 = (covarianceBasedAdaptiveFilter *)((char *)this + 144);
  CLiteMatrix::SetWithOther((uint64_t)this + 144, (uint64_t *)a5);
  v15 = (_QWORD *)((char *)this + 1672);
  __uplo[0] = 76;
  v16 = *((_DWORD *)this + 36);
  LODWORD(__n.realp) = v16;
  if (v16 <= 1)
    v16 = 1;
  __info = 0;
  LODWORD(__lda.realp) = v16;
  CLiteMatrix::ToCLPKComplex(v14, (_QWORD *)this + 209);
  cpotrf_(__uplo, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 209), (__CLPK_integer *)&__lda, &__info);
  v106 = (char *)a2;
  v107 = a6;
  if (__uplo[0] == 76)
  {
    v26 = *((_QWORD *)this + 18);
    v27 = *((_QWORD *)this + 19);
    if (v26 * v27 == (uint64_t)(*((_QWORD *)this + 210) - *((_QWORD *)this + 209)) >> 3)
    {
      if (v27)
      {
        v28 = 0;
        for (i = 0; i < v27; ++i)
        {
          if (v26)
          {
            v30 = 0;
            v31 = 8 * v28;
            do
            {
              if (i <= v30)
              {
                v33 = *(_DWORD *)(*v15 + v31);
                *(_DWORD *)CLiteMatrix::Get(v14, v30, i) = v33;
                v32 = *(_DWORD *)(*v15 + v31 + 4);
              }
              else
              {
                *(_DWORD *)CLiteMatrix::Get(v14, v30, i) = 0;
                v32 = 0;
              }
              CLiteMatrix::Get(v14, v30, i);
              *v34 = v32;
              ++v30;
              v26 = *(_QWORD *)v14;
              v31 += 8;
            }
            while (v30 < *(_QWORD *)v14);
            v28 += v30;
            v27 = *((_QWORD *)this + 19);
          }
        }
      }
      goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__m = 136315394;
      *(_QWORD *)&__m[4] = "LiteMatrix.h";
      *(_WORD *)&__m[12] = 1024;
      *(_DWORD *)&__m[14] = 390;
      v104 = MEMORY[0x1E0C81028];
      goto LABEL_108;
    }
LABEL_109:
    __break(1u);
    return;
  }
  if (__uplo[0] == 85)
  {
    v17 = *((_QWORD *)this + 18);
    v18 = *((_QWORD *)this + 19);
    if (v17 * v18 == (uint64_t)(*((_QWORD *)this + 210) - *((_QWORD *)this + 209)) >> 3)
    {
      if (v18)
      {
        v19 = 0;
        for (j = 0; j < v18; ++j)
        {
          if (v17)
          {
            v21 = 0;
            v22 = 8 * v19;
            do
            {
              if (j >= v21)
              {
                v24 = *(_DWORD *)(*v15 + v22);
                *(_DWORD *)CLiteMatrix::Get(v14, v21, j) = v24;
                v23 = *(_DWORD *)(*v15 + v22 + 4);
              }
              else
              {
                *(_DWORD *)CLiteMatrix::Get(v14, v21, j) = 0;
                v23 = 0;
              }
              CLiteMatrix::Get(v14, v21, j);
              *v25 = v23;
              ++v21;
              v17 = *(_QWORD *)v14;
              v22 += 8;
            }
            while (v21 < *(_QWORD *)v14);
            v19 += v21;
            v18 = *((_QWORD *)this + 19);
          }
        }
      }
      goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__m = 136315394;
      *(_QWORD *)&__m[4] = "LiteMatrix.h";
      *(_WORD *)&__m[12] = 1024;
      *(_DWORD *)&__m[14] = 362;
      v104 = MEMORY[0x1E0C81028];
LABEL_108:
      _os_log_impl(&dword_1B5ED0000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d  bad argument size", __m, 0x12u);
      goto LABEL_109;
    }
    goto LABEL_109;
  }
LABEL_28:
  v35 = *(_QWORD *)a4;
  if (*(_QWORD *)a4 != *((_QWORD *)a4 + 1))
    __assert_rtn("singularValueDecompositionOnlyUandS", "MatrixDecompositions.cpp", 82, "Cx.NumRows()==Cx.NumCols()");
  if (*((_QWORD *)this + 63) != v35)
    __assert_rtn("singularValueDecompositionOnlyUandS", "MatrixDecompositions.cpp", 85, "U.NumRows()==Cx.NumRows()");
  if (*((_QWORD *)this + 64) != v35)
    __assert_rtn("singularValueDecompositionOnlyUandS", "MatrixDecompositions.cpp", 86, "U.NumCols()==Cx.NumRows()");
  *(_DWORD *)__m = *(_QWORD *)a4;
  LODWORD(__n.realp) = v35;
  CLiteMatrix::ToCLPKComplex(a4, (_QWORD *)this + 209);
  __info = 0;
  LODWORD(__lda.realp) = 3 * v35;
  __uplo[0] = 83;
  __jobvt = 78;
  cgesvd_(__uplo, &__jobvt, (__CLPK_integer *)__m, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 209), (__CLPK_integer *)__m, *((__CLPK_real **)this + 73), *((__CLPK_complex **)this + 215), (__CLPK_integer *)__m, 0, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 221), (__CLPK_integer *)&__lda, *((__CLPK_real **)this + 224), &__info);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 63, (_QWORD *)this + 215);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 544), (covarianceBasedAdaptiveFilter *)((char *)this + 504));
  vvsqrtf(*((float **)this + 73), *((const float **)this + 73), &v109);
  CLiteMatrix::SetWithOther((uint64_t)this + 184, (uint64_t *)this + 63);
  CLiteMatrix::ScaleCols((covarianceBasedAdaptiveFilter *)((char *)this + 184), (const float **)this + 73);
  v37 = (float *)*((_QWORD *)this + 73);
  v38 = (float *)*((_QWORD *)this + 74);
  if (v37 != v38)
  {
    v39 = v37 + 1;
    if (v37 + 1 != v38)
    {
      v40 = *v37;
      v41 = v37 + 1;
      do
      {
        v42 = *v41++;
        v43 = v42;
        if (v40 < v42)
        {
          v40 = v43;
          v37 = v39;
        }
        v39 = v41;
      }
      while (v41 != v38);
    }
  }
  if (v109 >= 1)
  {
    v44 = 0;
    v45 = (float)(*v37 * a7) + 0.00000011921;
    do
    {
      v46 = *(float *)(*((_QWORD *)this + 73) + 4 * v44);
      if (v46 < v45)
        v46 = v45;
      *(float *)CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 608), v44, v44) = 1.0 / v46;
      ++v44;
    }
    while (v44 < v109);
  }
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 76, (covarianceBasedAdaptiveFilter *)((char *)this + 544), (covarianceBasedAdaptiveFilter *)((char *)this + 672), v36);
  if (v109 < 1)
  {
    v49 = (const float *)*((_QWORD *)this + 89);
  }
  else
  {
    for (k = 0; k < v109; v49[k++] = *v48)
    {
      v48 = (const float *)CLiteMatrix::Get(a4, k, k);
      v49 = (const float *)*((_QWORD *)this + 89);
    }
  }
  vvsqrtf(*((float **)this + 203), v49, &v109);
  v50 = (float *)*((_QWORD *)this + 203);
  v51 = (float *)*((_QWORD *)this + 204);
  v52 = v50 + 1;
  v53 = v50 == v51 || v52 == v51;
  v54 = (float *)*((_QWORD *)this + 203);
  if (!v53)
  {
    v55 = *v50;
    v54 = (float *)*((_QWORD *)this + 203);
    v56 = v50 + 1;
    do
    {
      v57 = *v56++;
      v58 = v57;
      if (v55 < v57)
      {
        v55 = v58;
        v54 = v52;
      }
      v52 = v56;
    }
    while (v56 != v51);
  }
  v59 = v109;
  if (v109 < 1)
  {
    v67 = (float *)*((_QWORD *)this + 92);
  }
  else
  {
    v60 = (char *)v54 - (char *)v50;
    v61 = (float *)*((_QWORD *)this + 89);
    v62 = (float)(*(float *)((char *)v61 + v60) * 0.001) + 0.00000011921;
    v63 = (float *)*((_QWORD *)this + 206);
    do
    {
      v64 = v62;
      if (*v50 >= v62)
        v64 = *v61;
      *v63++ = v64;
      ++v61;
      ++v50;
      --v59;
    }
    while (v59);
    v65 = 0;
    do
    {
      v66 = (float)(*(float *)CLiteMatrix::Get(a5, v65, v65)
                  / (float)(*(float *)(*((_QWORD *)this + 206) + 4 * v65) + 0.00000011921))
          + 0.00001;
      v67 = (float *)*((_QWORD *)this + 92);
      v67[v65++] = v66;
    }
    while (v65 < v109);
  }
  vvsqrtf(v67, v67, &v109);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 920), (covarianceBasedAdaptiveFilter *)((char *)this + 184));
  CLiteMatrix::ScaleCols((covarianceBasedAdaptiveFilter *)((char *)this + 920), (const float **)this + 92);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 115, v14, (covarianceBasedAdaptiveFilter *)((char *)this + 960), v68);
  v69 = *((_QWORD *)this + 120);
  if (v69 != *((_QWORD *)this + 121))
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 105, "Cx.NumRows()==Cx.NumCols()");
  if (*((_QWORD *)this + 130) != v69)
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 108, "U.NumRows()==Cx.NumRows()");
  if (*((_QWORD *)this + 131) != v69)
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 109, "U.NumCols()==Cx.NumRows()");
  if (*((_QWORD *)this + 140) != v69)
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 110, "VH.NumRows()==Cx.NumCols()");
  if (*((_QWORD *)this + 141) != v69)
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 111, "VH.NumCols()==Cx.NumCols()");
  *(_DWORD *)__m = *((_QWORD *)this + 120);
  LODWORD(__n.realp) = v69;
  CLiteMatrix::ToCLPKComplex((covarianceBasedAdaptiveFilter *)((char *)this + 960), (_QWORD *)this + 209);
  __info = 0;
  LODWORD(__lda.realp) = 3 * v69;
  __uplo[0] = 83;
  __jobvt = 65;
  cgesvd_(__uplo, &__jobvt, (__CLPK_integer *)__m, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 209), (__CLPK_integer *)__m, *((__CLPK_real **)this + 212), *((__CLPK_complex **)this + 215), (__CLPK_integer *)__m, *((__CLPK_complex **)this + 218), (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 221), (__CLPK_integer *)&__lda, *((__CLPK_real **)this + 224), &__info);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 130, (_QWORD *)this + 215);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 140, (_QWORD *)this + 218);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 130, (covarianceBasedAdaptiveFilter *)((char *)this + 1120), (covarianceBasedAdaptiveFilter *)((char *)this + 1200), v70);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 1160), (covarianceBasedAdaptiveFilter *)((char *)this + 1200));
  CLiteMatrix::MatrixMultiply((vDSP_Length *)v14, (covarianceBasedAdaptiveFilter *)((char *)this + 1160), (covarianceBasedAdaptiveFilter *)((char *)this + 1240), v71);
  v72 = (char *)this + 1400;
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 155, (covarianceBasedAdaptiveFilter *)((char *)this + 672), (covarianceBasedAdaptiveFilter *)((char *)this + 1400), v73);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 175, a4, (covarianceBasedAdaptiveFilter *)((char *)this + 1320), v74);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 1440), (covarianceBasedAdaptiveFilter *)((char *)this + 1400));
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 165, (covarianceBasedAdaptiveFilter *)((char *)this + 1440), (covarianceBasedAdaptiveFilter *)((char *)this + 1360), v75);
  if ((v107 & 1) != 0)
  {
    v76 = *((_QWORD *)a5 + 2) + 4 * ((uint64_t)(*((_QWORD *)a5 + 3) - *((_QWORD *)a5 + 2)) >> 3);
    *(_QWORD *)__m = *((_QWORD *)a5 + 2);
    *(_QWORD *)&__m[8] = v76;
    v77 = (float *)*((_QWORD *)this + 172);
    v78 = &v77[(uint64_t)(*((_QWORD *)this + 173) - (_QWORD)v77) >> 3];
    __n.realp = v77;
    __n.imagp = v78;
    v79 = (float *)(*((_QWORD *)this + 187) + 4 * ((uint64_t)(*((_QWORD *)this + 188) - *((_QWORD *)this + 187)) >> 3));
    __lda.realp = (float *)*((_QWORD *)this + 187);
    __lda.imagp = v79;
    *(_DWORD *)__uplo = -1518338048;
    __info = 629145600;
    vDSP_viclip(v77, 1, (const float *)__uplo, (const float *)&__info, v77, 1, *(_QWORD *)a5 * *((_QWORD *)a5 + 1));
    vDSP_viclip(v78, 1, (const float *)__uplo, (const float *)&__info, v78, 1, *(_QWORD *)a5 * *((_QWORD *)a5 + 1));
    vDSP_zvdiv(&__n, 1, (const DSPSplitComplex *)__m, 1, &__lda, 1, *(_QWORD *)a5 * *((_QWORD *)a5 + 1));
    vDSP_vclr(*((float **)this + 192), 1, (uint64_t)(*((_QWORD *)this + 193) - *((_QWORD *)this + 192)) >> 2);
    v81 = *((_QWORD *)this + 190);
    if (v81 != *((_QWORD *)this + 186))
      __assert_rtn("Diag", "LiteMatrix.cpp", 418, "outputMatrix.NumRows()==inputMatrix.NumCols()");
    if (*((_QWORD *)this + 191) != v81)
      __assert_rtn("Diag", "LiteMatrix.cpp", 419, "outputMatrix.NumCols()==inputMatrix.NumCols()");
    v82 = (unint64_t *)((char *)this + 1520);
    v83 = *((_QWORD *)this + 185);
    if (v81 < v83)
      v83 = *((_QWORD *)this + 190);
    v105 = (covarianceBasedAdaptiveFilter *)((char *)this + 1400);
    if (v83)
    {
      for (m = 0; m < v89; ++m)
      {
        v85 = CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1480), m, m);
        *(float *)CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1520), m, m) = v85;
        CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1480), m, m);
        v87 = v86;
        CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1520), m, m);
        *v88 = v87;
        v89 = *((_QWORD *)this + 185);
        if (*((_QWORD *)this + 186) < v89)
          v89 = *((_QWORD *)this + 186);
      }
      v81 = *((_QWORD *)this + 191);
    }
    v108 = (vDSP_Length *)((char *)this + 1560);
    if (v81)
    {
      v90 = 0;
      v91 = 0;
      v92 = *((_QWORD *)this + 192);
      v93 = v92 + 4 * ((*((_QWORD *)this + 193) - v92) >> 3);
      v94 = *((_QWORD *)this + 197);
      v95 = v94 + 4 * ((*((_QWORD *)this + 198) - v94) >> 3);
      v96 = *v82;
      if (v96 <= 1)
        v97 = 1;
      else
        v97 = v96;
      v98 = v96;
      do
      {
        if (v98)
        {
          v99 = v91;
          v100 = v97;
          do
          {
            v101 = std::sqrt[abi:ne180100]<double>(*(float *)(v92 + 4 * v99), *(float *)(v93 + 4 * v99));
            *(float *)(v94 + 4 * v99) = v101;
            v103 = v102;
            *(float *)(v95 + 4 * v99++) = v103;
            --v100;
          }
          while (v100);
          v98 = v96;
          v91 = v99;
        }
        ++v90;
      }
      while (v81 > v90);
    }
    CLiteMatrix::MatrixMultiply(v108, v105, (const CLiteMatrix *)v106, v80);
  }
  else
  {
    CLiteMatrix::SetWithOther((uint64_t)a3, (uint64_t *)a5);
    LiteMatrixBase<float>::operator-=((uint64_t)a3, (uint64_t)this + 1360);
    *(_DWORD *)__m = -1082130432;
    vDSP_vsmul(a3[2], 1, (const float *)__m, (float *)a3[2], 1, a3[3] - a3[2]);
    *(_OWORD *)v106 = *(_OWORD *)v72;
    if (v72 != v106)
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v106 + 16, *((char **)this + 177), *((_QWORD *)this + 178), (uint64_t)(*((_QWORD *)this + 178) - *((_QWORD *)this + 177)) >> 2);
  }
}

uint64_t VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(VoiceProcessor::SampleRateConverter *this)
{
  return AudioSampleRateConverterGetRequiredNumberOfInputFrames();
}

uint64_t VoiceProcessor::SampleRateConverter::Convert(CA::AudioSampleRateConverter **this, unsigned int *a2, unsigned int *a3, const AudioBufferList *a4, const AudioBufferList *a5)
{
  uint64_t NumberOfChannels;
  UInt32 v11;
  unint64_t v12;
  uint64_t v13;
  const float *const *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  void **p_mData;
  const float **v19;
  const float *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void **v24;
  _QWORD *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t result;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  NumberOfChannels = AudioSampleRateConverterGetNumberOfChannels();
  v11 = NumberOfChannels;
  MEMORY[0x1E0C80A78](NumberOfChannels);
  v14 = (const float *const *)((char *)v30 - v13);
  if (v12 >= 0x200)
    v15 = 512;
  else
    v15 = v12;
  bzero((char *)v30 - v13, v15);
  LODWORD(v17) = a4->mNumberBuffers;
  if (v11 >= a4->mNumberBuffers)
    v17 = v17;
  else
    v17 = v11;
  if ((_DWORD)v17)
  {
    p_mData = &a4->mBuffers[0].mData;
    v19 = (const float **)v14;
    do
    {
      v20 = (const float *)*p_mData;
      p_mData += 2;
      *v19++ = v20;
      --v17;
    }
    while (v17);
  }
  MEMORY[0x1E0C80A78](v16);
  v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFF0);
  bzero(v22, v15);
  LODWORD(v23) = a5->mNumberBuffers;
  if (v11 >= a5->mNumberBuffers)
    v23 = v23;
  else
    v23 = v11;
  if ((_DWORD)v23)
  {
    v24 = &a5->mBuffers[0].mData;
    v25 = v22;
    do
    {
      v26 = *v24;
      v24 += 2;
      *v25++ = v26;
      --v23;
    }
    while (v23);
  }
  v27 = *a2;
  v28 = *a3;
  result = CA::AudioSampleRateConverter::Process(*this, v14, *a2, v22, (float *const *)*a3);
  *a2 = v27;
  *a3 = v28;
  return result;
}

void sub_1B64DA2F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AUXTC::~AUXTC(AUXTC *this)
{
  AUXTC::~AUXTC(this);
  JUMPOUT(0x1BCC95CE0);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E69E3DF8;
  v2 = *((_QWORD *)this + 617);
  *((_QWORD *)this + 617) = 0;
  if (v2)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 4936, v2);
  v3 = *((_QWORD *)this + 616);
  *((_QWORD *)this + 616) = 0;
  if (v3)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 4928, v3);
  *((_QWORD *)this + 352) = &off_1E69E4328;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue((uint64_t)this + 2880);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 2776);
  std::mutex::~mutex((std::mutex *)((char *)this + 2704));

  DspLib::XTC::Algorithm::~Algorithm((AUXTC *)((char *)this + 2168));
  AUDspLib::~AUDspLib(this);
}

void AUXTC::Cleanup(AUXTC *this)
{
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)this + 2769;
  atomic_store(0, (unsigned __int8 *)this + 2769);
  caulk::concurrent::messenger::drain(*((caulk::concurrent::messenger **)this + 347));
  atomic_store(1u, v2);
  AUDspLib::Cleanup(this);
}

uint64_t AUXTC::GetPropertyInfo(AUXTC *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 6620)
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  result = 0;
  *a6 = 1;
  *a5 = 8;
  return result;
}

uint64_t AUXTC::GetProperty(id *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  uint64_t result;
  const __CFDictionary *v8;

  if (a2 != 6620)
    return AUDspLib::GetProperty((AUDspLib *)this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  v8 = (const __CFDictionary *)this[337];
  result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUXTC::SetProperty(AUXTC *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  id v9;

  if (a2 != 6620)
    return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
  if (a3)
    return 4294956430;
  if ((_DWORD)a6 != 8)
    return 4294956445;
  v9 = *(id *)a5;
  applesauce::dispatch::v1::queue::get(*(id *)a5);
  objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    std::mutex::lock((std::mutex *)((char *)this + 2704));
    objc_msgSend(*((id *)this + 337), "addEntriesFromDictionary:", v9);
    if (load_W_filters(*((NSDictionary **)this + 337), (AUXTC *)((char *)this + 2168)))
    {
      AUXTC::enqueueNewFIRMatrix((uint64_t)this);
      *((_BYTE *)this + 2768) = 1;
    }
    std::mutex::unlock((std::mutex *)((char *)this + 2704));
  }

  return 0;
}

void sub_1B64DA498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

DspLib *AUXTC::SetParameter(AUXTC *this, unsigned int a2, uint64_t a3, uint64_t a4, float a5, uint64_t a6)
{
  DspLib *v12;
  DspLib *v13;
  unsigned int v14;
  int v15;

  v12 = (DspLib *)AUDspLib::SetParameter(this, a2, a3, a4, a5);
  v13 = v12;
  v14 = *((_DWORD *)this + 439) - 1;
  if (v14 >= a2)
    v14 = a2;
  v15 = *(_DWORD *)(*((_QWORD *)this + 211) + 4 * v14);
  if (v15 == 1)
  {
    AUXTC::mDeviceOrientationCachedPrevious = AUXTC::mDeviceOrientationCachedCurrent;
    AUXTC::mDeviceOrientationCachedCurrent = vcvtas_u32_f32(a5);
  }
  else if (v15 == 16)
  {
    if (DspLib::isEqual(v12, *((float *)this + 1236), a5, 1.0e-20))
      return v13;
    *((float *)this + 1236) = a5;
  }
  else if (a2 == 1869769061)
  {
    (*(void (**)(AUXTC *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)this + 152))(this, 1, a3, a4, a6, a5);
  }
  else if (a2 == 1937141612)
  {
    (*(void (**)(AUXTC *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)this + 152))(this, 16, a3, a4, a6, a5);
  }
  if (!(_DWORD)v13)
    AUXTC::enqueueNewFIRMatrix((uint64_t)this);
  return v13;
}

uint64_t AUXTC::ProcessBufferLists(AUXTC *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  DspLib::AlgorithmBase *v9;
  char v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  void **p_mData;
  void **i;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  float *const *v22;
  size_t v23;
  unsigned int *v24;
  uint64_t v25;
  void **v26;
  float **v27;
  uint64_t v28;
  float *v29;
  _BYTE v31[96];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 17))
    return 4294956429;
  v9 = (AUXTC *)((char *)this + 2168);
  if (*((float *)this + 604) >= 1.0)
  {
    v10 = 0;
    do
    {
      v11 = v10;
      v12 = ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::pop((uint64_t)this + 2880, (uint64_t *)this + 617);
      v10 = 1;
    }
    while (v12);
    if ((v11 & 1) != 0)
    {
      v13 = *((_QWORD *)this + 616);
      v14 = *((_QWORD *)this + 617);
      *((_QWORD *)this + 616) = v14;
      *((_QWORD *)this + 617) = v13;
      DspLib::XTC::Algorithm::setFIRMatrixAndTriggerCrossFade((uint64_t)v9, v14);
    }
  }
  result = SimpleMeters::ProcessInputBufferList((AUXTC *)((char *)this + 1832), a5, a3);
  if (!(_DWORD)result)
  {
    if (a3 != a4)
    {
      v16 = 0;
      p_mData = &a3->mBuffers[0].mData;
      for (i = &a4->mBuffers[0].mData; ; i += 2)
      {
        v19 = (unsigned int *)*((_QWORD *)this + 268);
        v20 = v19 == *((unsigned int **)this + 269) ? 0 : *v19;
        if (v16 >= v20)
          break;
        result = (uint64_t)*i;
        if (*p_mData != *i)
          result = (uint64_t)memcpy((void *)result, *p_mData, 4 * a5);
        ++v16;
        p_mData += 2;
      }
    }
    if (!*((_BYTE *)this + 2113) && !*((_BYTE *)this + 1584) && *((_BYTE *)this + 2768))
    {
      MEMORY[0x1E0C80A78](result);
      v22 = (float *const *)&v31[-((v21 + 15) & 0xFFFFFFFF0) - 8];
      if (v21 >= 0x200)
        v23 = 512;
      else
        v23 = v21;
      bzero(&v31[-((v21 + 15) & 0xFFFFFFFF0) - 8], v23);
      v24 = (unsigned int *)*((_QWORD *)this + 268);
      if (v24 == *((unsigned int **)this + 269))
      {
        LODWORD(v25) = 0;
      }
      else
      {
        v25 = *v24;
        if ((_DWORD)v25)
        {
          v26 = &a4->mBuffers[0].mData;
          v27 = (float **)v22;
          v28 = v25;
          do
          {
            v29 = (float *)*v26;
            v26 += 2;
            *v27++ = v29;
            --v28;
          }
          while (v28);
        }
      }
      DspLibBuffer::DspLibBuffer((DspLibBuffer *)v31, v22, a5, v25);
      DspLib::AlgorithmBase::process(v9, (DspLibBuffer *)v31, (DspLibBuffer *)v31, 1u, 1);
      AUDspLib::enqueueStatusForInstance(this, 0, *((DspLib::AlgorithmBase **)this + 66), a5);
      DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v31);
    }
    SimpleMeters::ProcessOutputBufferList((AUXTC *)((char *)this + 1832), a5, a4);
    return 0;
  }
  return result;
}

void sub_1B64DA848(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t AUXTC::GetParameterInfo(AUXTC *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  unsigned int v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v9;
  int v10;
  const __CFString *v11;
  uint64_t result;

  if (a3 == 1869769061)
    v4 = 1;
  else
    v4 = a3;
  if (a3 == 1937141612)
    v5 = 16;
  else
    v5 = v4;
  v6 = a3 == 1937141612 || a3 == 1869769061;
  if ((a2 & 0xFFFFFFFB) != 0 || v5 >= *((_DWORD *)this + 439))
    return 4294956418;
  v9 = *(unsigned int *)(*((_QWORD *)this + 211) + 4 * v5);
  buffer->unit = *(_DWORD *)(*((_QWORD *)this + 201) + 4 * v9);
  v10 = *(_DWORD *)(*((_QWORD *)this + 203) + 4 * v9);
  buffer->minValue = *(AudioUnitParameterValue *)(*((_QWORD *)this + 205) + 4 * v9);
  buffer->maxValue = *(AudioUnitParameterValue *)(*((_QWORD *)this + 207) + 4 * v9);
  buffer->defaultValue = *(AudioUnitParameterValue *)(*((_QWORD *)this + 213) + 4 * v5);
  v11 = *(const __CFString **)(*((_QWORD *)this + 199) + 8 * v9);
  buffer->cfNameString = v11;
  buffer->flags = v10 | 0xC8800000;
  CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
  if (*((_QWORD *)this + 216))
  {
    buffer->clumpID = *(_DWORD *)(*((_QWORD *)this + 215) + 4 * v5);
    buffer->flags |= 0x100000u;
  }
  result = 0;
  if (v6)
    buffer->flags |= 0x10000000u;
  return result;
}

uint64_t AUXTC::SaveState(CFPropertyListRef *this, ausdk **a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  float *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  void *v19;
  double v20;
  void *v21;
  void *v22;
  int v23;
  double v24;
  void *v25;
  void *v26;
  double v27;
  void *v28;
  void *v29;
  int v30;
  double v31;
  void *v32;
  void *v33;
  double v34;
  void *v35;
  void *v36;
  int v37;
  double v38;
  void *v39;
  void *v40;
  double v41;
  void *v42;
  void *v43;
  int v44;
  double v45;
  void *v46;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  NSObject *v71;
  uint64_t v72;
  id v73;
  id *v75;
  DspLib::XTC::Algorithm *v76;
  void *v77;
  CFPropertyListRef *v78;
  void *v79;
  void *DeepCopy;
  char v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id obj;
  id obja;
  void *v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  id v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  void *__p[3];
  uint8_t v101[128];
  uint8_t buf[4];
  const char *v103;
  __int16 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  AUDspLib::SaveState((AUDspLib *)this, a2);
  DeepCopy = (void *)CFPropertyListCreateDeepCopy(0, this[337], 2uLL);
  if (DeepCopy)
  {
    v75 = (id *)a2;
    v4 = 0;
    v78 = this;
    v76 = (DspLib::XTC::Algorithm *)(this + 271);
    v5 = 1;
    do
    {
      v81 = v5;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Setup_%d"), v4);
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = (float *)v78[68];
      if ((_DWORD)v4 == vcvtas_u32_f32(fmaxf(v7[23], 0.0)))
      {
LABEL_4:
        v77 = (void *)v6;
        objc_msgSend(DeepCopy, "objectForKey:", v6);
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "objectForKey:", CFSTR("W"));
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = DspLib::XTC::Algorithm::wFilters(v76, v4);
          v8 = v9;
          v11 = *(_QWORD *)(v10 + 32);
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          obj = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v11)
          {
            v13 = 0;
            v14 = (_QWORD *)(v10 + 16);
            v15 = (_QWORD *)(v10 + 96);
            v16 = (_QWORD *)(v10 + 176);
            v17 = (_QWORD *)(v10 + 256);
            v18 = 1;
            do
            {
              v19 = (void *)MEMORY[0x1E0CB37E8];
              *(float *)&v20 = DspLib::ComplexSpan::operator[](v14, v13);
              objc_msgSend(v19, "numberWithFloat:", v20);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v89, "setObject:atIndexedSubscript:", v21, v13);

              v22 = (void *)MEMORY[0x1E0CB37E8];
              DspLib::ComplexSpan::operator[](v14, v13);
              LODWORD(v24) = v23;
              objc_msgSend(v22, "numberWithFloat:", v24);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(obj, "setObject:atIndexedSubscript:", v25, v13);

              v26 = (void *)MEMORY[0x1E0CB37E8];
              *(float *)&v27 = DspLib::ComplexSpan::operator[](v15, v13);
              objc_msgSend(v26, "numberWithFloat:", v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v86, "setObject:atIndexedSubscript:", v28, v13);

              v29 = (void *)MEMORY[0x1E0CB37E8];
              DspLib::ComplexSpan::operator[](v15, v13);
              LODWORD(v31) = v30;
              objc_msgSend(v29, "numberWithFloat:", v31);
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v85, "setObject:atIndexedSubscript:", v32, v13);

              v33 = (void *)MEMORY[0x1E0CB37E8];
              *(float *)&v34 = DspLib::ComplexSpan::operator[](v16, v13);
              objc_msgSend(v33, "numberWithFloat:", v34);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v84, "setObject:atIndexedSubscript:", v35, v13);

              v36 = (void *)MEMORY[0x1E0CB37E8];
              DspLib::ComplexSpan::operator[](v16, v13);
              LODWORD(v38) = v37;
              objc_msgSend(v36, "numberWithFloat:", v38);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v82, "setObject:atIndexedSubscript:", v39, v13);

              v40 = (void *)MEMORY[0x1E0CB37E8];
              *(float *)&v41 = DspLib::ComplexSpan::operator[](v17, v13);
              objc_msgSend(v40, "numberWithFloat:", v41);
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "setObject:atIndexedSubscript:", v42, v13);

              v43 = (void *)MEMORY[0x1E0CB37E8];
              DspLib::ComplexSpan::operator[](v17, v13);
              LODWORD(v45) = v44;
              objc_msgSend(v43, "numberWithFloat:", v45);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "setObject:atIndexedSubscript:", v46, v13);

              v13 = v18;
            }
            while (v11 > v18++);
          }
          objc_msgSend(v8, "setObject:forKey:", v89, CFSTR("W11real"));
          objc_msgSend(v8, "setObject:forKey:", obj, CFSTR("W11imag"));
          objc_msgSend(v8, "setObject:forKey:", v86, CFSTR("W12real"));
          objc_msgSend(v8, "setObject:forKey:", v85, CFSTR("W12imag"));
          objc_msgSend(v8, "setObject:forKey:", v84, CFSTR("W21real"));
          objc_msgSend(v8, "setObject:forKey:", v82, CFSTR("W21imag"));
          objc_msgSend(v8, "setObject:forKey:", v83, CFSTR("W22real"));
          objc_msgSend(v8, "setObject:forKey:", v12, CFSTR("W22imag"));

          objc_msgSend(v79, "setObject:forKey:", v8, CFSTR("W"));
        }
        v90 = v8;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("W11real"), CFSTR("W11imag"), CFSTR("W12real"), CFSTR("W12imag"), CFSTR("W21real"), CFSTR("W21imag"), CFSTR("W22real"), CFSTR("W22imag"), 0, v75);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        obja = v48;
        v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v91, v101, 16);
        if (v49)
        {
          v50 = *(_QWORD *)v92;
          do
          {
            for (i = 0; i != v49; ++i)
            {
              if (*(_QWORD *)v92 != v50)
                objc_enumerationMutation(obja);
              v52 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * i);
              v53 = v90;
              v54 = v52;
              objc_msgSend(v53, "objectForKey:", v54);
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              std::vector<float>::vector(__p, objc_msgSend(v55, "count"));
              v98 = 0u;
              v99 = 0u;
              v96 = 0u;
              v97 = 0u;
              v56 = v55;
              v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v96, buf, 16);
              if (v57)
              {
                LODWORD(v58) = 0;
                v59 = *(_QWORD *)v97;
                do
                {
                  v60 = 0;
                  v58 = (int)v58;
                  do
                  {
                    if (*(_QWORD *)v97 != v59)
                      objc_enumerationMutation(v56);
                    objc_msgSend(*(id *)(*((_QWORD *)&v96 + 1) + 8 * v60), "floatValue");
                    *((_DWORD *)__p[0] + v58++) = v61;
                    ++v60;
                  }
                  while (v57 != v60);
                  v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v96, buf, 16);
                }
                while (v57);
              }

              objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", __p[0], 4 * objc_msgSend(v56, "count"));
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              v95 = 0;
              objc_msgSend(v62, "compressedDataUsingAlgorithm:error:", 3, &v95);
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              v64 = v95;

              if (!v64)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
                v65 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v53, "setObject:forKey:", v65, CFSTR("WDataIsCompressed"));

                objc_msgSend(v53, "setObject:forKey:", v63, v54);
              }

              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }

            }
            v48 = obja;
            v49 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v91, v101, 16);
          }
          while (v49);
        }

        v66 = v77;
      }
      else
      {
        v67 = 0;
        v68 = (char *)(v7 + 24);
        while (v67 != 6)
        {
          v69 = v67;
          v70 = vcvtas_u32_f32(fmaxf(*(float *)&v68[4 * v67++], 0.0));
          if ((_DWORD)v4 == v70)
          {
            if ((unint64_t)(v69 + 23) <= 0x1C)
              goto LABEL_4;
            break;
          }
        }
        v66 = (void *)v6;
        objc_msgSend(DeepCopy, "removeObjectForKey:", v6);
      }

      v5 = 0;
      v4 = 1;
    }
    while ((v81 & 1) != 0);
    v71 = *v75;
    -[NSObject setObject:forKey:](v71, "setObject:forKey:", DeepCopy, CFSTR("DspLibXTC_customFilterDictionary"));
    v72 = 0;
    goto LABEL_44;
  }
  if (AUXTCLogScope(void)::once != -1)
    dispatch_once(&AUXTCLogScope(void)::once, &__block_literal_global_19235);
  if (!AUXTCLogScope(void)::scope)
  {
    v71 = MEMORY[0x1E0C81028];
    v73 = MEMORY[0x1E0C81028];
    goto LABEL_41;
  }
  v71 = *(id *)AUXTCLogScope(void)::scope;
  if (v71)
  {
LABEL_41:
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v103 = "AUXTC.mm";
      v104 = 1024;
      v105 = 339;
      _os_log_impl(&dword_1B5ED0000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d Error encountered while creating deep copy of filter dictionary", buf, 0x12u);
    }
    v72 = 4294956421;
LABEL_44:

    goto LABEL_45;
  }
  v72 = 4294956421;
LABEL_45:

  return v72;
}

void sub_1B64DB258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  void *v51;

  _Unwind_Resume(a1);
}

uint64_t AUXTC::RestoreState(AUXTC *this, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t j;
  void *v9;
  void *v10;
  BOOL v11;
  CFPropertyListRef DeepCopy;
  void *v13;
  NSDictionary *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  uint64_t v21;
  float v22;
  ausdk::AUScope *v23;
  ausdk::AUElement *Element;
  unsigned int v25;
  ausdk::AUElement *v26;
  unsigned int v27;
  ausdk::AUElement *v28;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "objectForKey:", CFSTR("DspLibXTC_customFilterDictionary"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 2768) = 0;
  if (!v30)
    goto LABEL_24;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v4 = v30;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (!v5)
  {

LABEL_12:
    DeepCopy = CFPropertyListCreateDeepCopy(0, v4, 2uLL);
    v13 = (void *)*((_QWORD *)this + 337);
    *((_QWORD *)this + 337) = DeepCopy;

    v14 = (NSDictionary *)*((_QWORD *)this + 337);
    if (v14)
    {
      if (load_W_filters(v14, (AUXTC *)((char *)this + 2168)))
      {
        *((_BYTE *)this + 2768) = 1;
        AUXTC::newFIRMatrix((AUXTC *)&v35, (uint64_t)this);
        ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::store((uint64_t)this + 2816, &v35);
        v15 = v35;
        v35 = 0;
        if (v15)
          std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&v35, v15);
      }
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v16 = *((id *)this + 337);
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v32 != v18)
            objc_enumerationMutation(v16);
          objc_msgSend(*((id *)this + 337), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "removeObjectForKey:", CFSTR("W"));

        }
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
      }
      while (v17);
    }

    goto LABEL_24;
  }
  v6 = *(_QWORD *)v37;
  v7 = 1;
  do
  {
    for (j = 0; j != v5; ++j)
    {
      if (*(_QWORD *)v37 != v6)
        objc_enumerationMutation(v4);
      objc_msgSend(v4, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * j));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForKey:", CFSTR("W"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10 != 0;

      v7 &= v11;
    }
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  }
  while (v5);

  if ((v7 & 1) != 0)
    goto LABEL_12;
LABEL_24:
  v21 = AUDspLib::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  v22 = *((float *)this + 1236);
  v23 = (AUXTC *)((char *)this + 32);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v23, 0);
  ausdk::AUElement::SetParameter(Element, 0x10u, v22, 0);
  v25 = AUXTC::mDeviceOrientationCachedPrevious;
  v26 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v23, 0);
  ausdk::AUElement::SetParameter(v26, 1u, (float)v25, 0);
  v27 = AUXTC::mDeviceOrientationCachedCurrent;
  v28 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v23, 0);
  ausdk::AUElement::SetParameter(v28, 1u, (float)v27, 0);

  return v21;
}

void sub_1B64DB75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;

  v21 = a20;
  a20 = 0;
  if (v21)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&a20, v21);

  _Unwind_Resume(a1);
}

uint64_t AUXTC::GetParameterValueStrings(AUXTC *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  unsigned int v4;
  int v6;
  __CFString **v7;
  CFIndex v8;
  uint64_t result;
  const __CFArray *v10;

  if (a3 == 1869769061)
    v4 = 1;
  else
    v4 = a3;
  if (a3 == 1937141612)
    v4 = 16;
  if (v4 > 0x3F)
    return 4294956418;
  if (!a4)
    return 0;
  v6 = *(_DWORD *)(*((_QWORD *)this + 211) + 4 * v4);
  if (v6 == 1)
  {
    v7 = DspLib::XTC::DeviceOrientations::kNames;
    v8 = 7;
  }
  else if ((v6 - 23) > 6)
  {
    if (v6 == 15)
    {
      v7 = DspLib::XTC::TestNoiseGeneratorModes::kNames;
    }
    else
    {
      if (v6)
        return 4294956418;
      v7 = DspLib::XTC::BypassModes::kNames;
    }
    v8 = 3;
  }
  else
  {
    v7 = DspLib::XTC::Setups::kNames;
    v8 = 4;
  }
  v10 = CFArrayCreate(0, (const void **)v7, v8, 0);
  result = 0;
  *a4 = v10;
  return result;
}

uint64_t AUXTC::SupportedNumChannels(AUXTC *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUXTC::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  return 1;
}

uint64_t AUXTC::Version(AUXTC *this)
{
  return 197890;
}

uint64_t AUXTC::deleteAlgorithms(AUXTC *this)
{
  *((_QWORD *)this + 66) = 0;
  AUDspLib::deleteAlgorithms(this);
  return 0;
}

uint64_t AUXTC::newDspLibAlgorithm(AUXTC *this)
{
  return (uint64_t)this + 2168;
}

uint64_t load_W_filters(NSDictionary *a1, DspLib::XTC::Algorithm *a2)
{
  NSDictionary *v3;
  NSDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = -[NSDictionary count](v3, "count");
    v6 = 0;
    if (a2 && v5)
    {
      -[NSDictionary objectForKey:](v4, "objectForKey:", CFSTR("CoefficientsLandscape"));
      v7 = objc_claimAutoreleasedReturnValue();

      if (v7)
      {
        v8 = DspLib::XTC::Algorithm::wFilters(a2, 0);
        LOBYTE(v7) = read_W_dictionary(v4, v8, CFSTR("CoefficientsLandscape"));
        v9 = v7 ^ 1;
      }
      else
      {
        v9 = 0;
      }
      -[NSDictionary objectForKey:](v4, "objectForKey:", CFSTR("CoefficientsPortrait"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        v11 = DspLib::XTC::Algorithm::wFilters(a2, 1);
        if (read_W_dictionary(v4, v11, CFSTR("CoefficientsPortrait")))
          LOBYTE(v7) = 1;
        else
          v9 = 1;
      }
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = v13;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Setup_%d"), v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSDictionary objectForKey:](v4, "objectForKey:", v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          v17 = DspLib::XTC::Algorithm::wFilters(a2, v12);
          if (read_W_dictionary(v4, v17, v15))
            LOBYTE(v7) = 1;
          else
            v9 = 1;
        }

        v13 = 0;
        v12 = 1;
      }
      while ((v14 & 1) != 0);
      v6 = v7 & ((v9 & 1) == 0);
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1B64DBAAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AUXTC::newFIRMatrix(AUXTC *this, uint64_t a2)
{
  DspLib::XTC::FIRMatrix *v4;
  __n128 v5;

  v4 = (DspLib::XTC::FIRMatrix *)operator new();
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *(_QWORD *)this = v4;
  DspLib::XTC::FIRMatrix::initialize(v4, *(unsigned int *)(a2 + 2200));
  DspLib::XTC::Algorithm::setParametersAndDesignFilters((DspLib::XTC::Algorithm *)(a2 + 2168), *(const void **)(a2 + 544), (uint64_t)(*(_QWORD *)(a2 + 552) - *(_QWORD *)(a2 + 544)) >> 2, v4, v5);
}

void sub_1B64DBB60(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)v1, v2);
  _Unwind_Resume(a1);
}

void ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::store(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v4 = a1 + 64;
  while (ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::pop(v4, &v7));
  if (!*a2)
    __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
  v5 = (unsigned __int8 *)(a1 + 2049);
  do
    __ldaxr(v5);
  while (__stlxr(1u, v5));
  v8 = *a2;
  if (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 128, &v8))
  {
    *a2 = 0;
  }
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::drain_trash(v4);
  v6 = v7;
  v7 = 0;
  if (v6)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&v7, v6);
}

void sub_1B64DBC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10;

  v10 = a9;
  a9 = 0;
  if (v10)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&a9, v10);
  _Unwind_Resume(exception_object);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::pop(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &v11);
  if (v4)
  {
    v5 = v11;
    if (!v11)
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v10 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v10))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
      v7 = *a2;
      *a2 = v5;
      if (v7)
        std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)a2, v7);
    }
    else
    {
      *a2 = v11;
    }
  }
  return v4;
}

void sub_1B64DBD40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::drain_trash(uint64_t a1)
{
  unsigned int *v1;
  uint64_t i;
  _BOOL8 result;
  uint64_t v4;

  v4 = 0;
  v1 = (unsigned int *)(a1 + 1024);
  for (i = a1 + 1984; ; std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100](i, v4))
  {
    result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v4);
    if (!result)
      break;
    if (!v4)
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
  }
  return result;
}

uint64_t read_W_dictionary(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  char isKindOfClass;
  id v16;
  void *v17;
  unsigned int v18;
  uint64_t i;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  float v25;
  float v26;
  void *v27;
  float v28;
  void *v29;
  float v30;
  float v31;
  void *v32;
  float v33;
  void *v34;
  float v35;
  float v36;
  void *v37;
  float v38;
  void *v39;
  float v40;
  float v41;
  void *v42;
  float v43;
  uint64_t v44;
  uint64_t j;
  void *v46;
  char v47;
  void *v48;
  DspLib::ComplexSpan *v50;
  DspLib::ComplexSpan *v51;
  DspLib::ComplexSpan *v52;
  DspLib::ComplexSpan *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  DSPComplex v68;
  DSPComplex v69;
  DSPComplex v70;
  DSPComplex v71;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "objectForKey:", CFSTR("SampleRate"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (!v9 || (objc_msgSend(v9, "floatValue"), !a2))
    {
      v44 = 0;
LABEL_54:

      goto LABEL_55;
    }
    *(_DWORD *)(a2 + 8) = v11;
    objc_msgSend(v8, "objectForKey:", CFSTR("W"));
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      objc_msgSend(v12, "objectForKey:", CFSTR("W11real"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        v16 = v13;
        objc_msgSend(v16, "objectForKey:", CFSTR("W11real"));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        if (v67)
        {
          objc_msgSend(v16, "objectForKey:", CFSTR("W11imag"));
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          if (v66)
          {
            objc_msgSend(v16, "objectForKey:", CFSTR("W21real"));
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            if (v65)
            {
              objc_msgSend(v16, "objectForKey:", CFSTR("W21imag"));
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              if (v64)
              {
                objc_msgSend(v16, "objectForKey:", CFSTR("W12real"));
                v63 = (void *)objc_claimAutoreleasedReturnValue();
                if (v63)
                {
                  objc_msgSend(v16, "objectForKey:", CFSTR("W12imag"));
                  v62 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v62)
                  {
                    objc_msgSend(v16, "objectForKey:", CFSTR("W22real"));
                    v17 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v17)
                    {
                      objc_msgSend(v16, "objectForKey:", CFSTR("W22imag"));
                      v61 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v61)
                      {
                        v55 = v17;
                        v18 = objc_msgSend(v67, "count");
                        *(_QWORD *)a2 = v18;
                        v53 = (DspLib::ComplexSpan *)(a2 + 16);
                        v54 = v18;
                        for (i = 16; i != 336; i += 80)
                          DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a2 + i), *(_QWORD *)a2);
                        v17 = v55;
                        if (v54)
                        {
                          v20 = 0;
                          v51 = (DspLib::ComplexSpan *)(a2 + 96);
                          v52 = (DspLib::ComplexSpan *)(a2 + 176);
                          v50 = (DspLib::ComplexSpan *)(a2 + 256);
                          while (1)
                          {
                            objc_msgSend(v67, "objectAtIndex:", v20);
                            v60 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v60)
                              goto LABEL_44;
                            objc_msgSend(v66, "objectAtIndex:", v20);
                            v59 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v59)
                              goto LABEL_43;
                            objc_msgSend(v65, "objectAtIndex:", v20);
                            v58 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v58)
                              goto LABEL_42;
                            objc_msgSend(v64, "objectAtIndex:", v20);
                            v57 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v57)
                              break;
                            objc_msgSend(v63, "objectAtIndex:", v20);
                            v56 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v56)
                            {
                              v48 = 0;
                              goto LABEL_40;
                            }
                            objc_msgSend(v62, "objectAtIndex:", v20);
                            v21 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v21)
                              goto LABEL_39;
                            objc_msgSend(v17, "objectAtIndex:", v20);
                            v22 = (void *)objc_claimAutoreleasedReturnValue();
                            if (!v22)
                            {
                              v17 = v55;
LABEL_39:
                              v48 = v56;

LABEL_40:
LABEL_41:

LABEL_42:
LABEL_43:

                              goto LABEL_44;
                            }
                            objc_msgSend(v61, "objectAtIndex:", v20);
                            v23 = (void *)objc_claimAutoreleasedReturnValue();

                            v17 = v55;
                            if (!v23)
                              goto LABEL_44;
                            objc_msgSend(v67, "objectAtIndex:", v20);
                            v24 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v24, "floatValue");
                            v26 = v25;
                            objc_msgSend(v66, "objectAtIndex:", v20);
                            v27 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v27, "floatValue");
                            v68.imag = v28;
                            v68.real = v26;
                            DspLib::ComplexSpan::setElement(v53, v20, v68);

                            objc_msgSend(v65, "objectAtIndex:", v20);
                            v29 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v29, "floatValue");
                            v31 = v30;
                            objc_msgSend(v64, "objectAtIndex:", v20);
                            v32 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v32, "floatValue");
                            v69.imag = v33;
                            v69.real = v31;
                            DspLib::ComplexSpan::setElement(v52, v20, v69);

                            objc_msgSend(v63, "objectAtIndex:", v20);
                            v34 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v34, "floatValue");
                            v36 = v35;
                            objc_msgSend(v62, "objectAtIndex:", v20);
                            v37 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v37, "floatValue");
                            v70.imag = v38;
                            v70.real = v36;
                            DspLib::ComplexSpan::setElement(v51, v20, v70);

                            objc_msgSend(v55, "objectAtIndex:", v20);
                            v39 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v39, "floatValue");
                            v41 = v40;
                            objc_msgSend(v61, "objectAtIndex:", v20);
                            v42 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v42, "floatValue");
                            v71.imag = v43;
                            v71.real = v41;
                            DspLib::ComplexSpan::setElement(v50, v20, v71);

                            if (v54 == ++v20)
                              goto LABEL_27;
                          }

                          goto LABEL_41;
                        }
LABEL_27:

                        goto LABEL_35;
                      }
LABEL_44:

                    }
                  }

                }
              }

            }
          }

        }
      }
      else
      {
        objc_msgSend(v13, "objectForKey:", CFSTR("W11real"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        v47 = objc_opt_isKindOfClass();

        if ((v47 & 1) != 0 && (parseCoefficientsData(v13, (unint64_t *)a2) & 1) != 0)
        {
LABEL_35:
          v44 = 1;
LABEL_53:

          goto LABEL_54;
        }
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      for (j = 16; j != 336; j += 80)
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a2 + j), *(_QWORD *)a2);
    }
    v44 = 0;
    goto LABEL_53;
  }
  v44 = 0;
LABEL_55:

  return v44;
}

void sub_1B64DC3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  _Unwind_Resume(a1);
}

uint64_t parseCoefficientsData(void *a1, unint64_t *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char *v11;
  void *v12;
  int v13;
  uint64_t v14;
  char *v15;
  id v16;
  unint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71[3];
  DSPComplex v72;
  DSPComplex v73;
  DSPComplex v74;
  DSPComplex v75;

  v71[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(v3, "objectForKey:", CFSTR("W11real"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v3, "objectForKey:", CFSTR("W11imag"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      v10 = 0;
      v14 = 0;
LABEL_41:

      goto LABEL_42;
    }
    objc_msgSend(v3, "objectForKey:", CFSTR("W21real"));
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v10 = 0;
      v14 = 0;
LABEL_40:

      goto LABEL_41;
    }
    objc_msgSend(v3, "objectForKey:", CFSTR("W21imag"));
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v10 = 0;
      v14 = 0;
LABEL_39:

      goto LABEL_40;
    }
    objc_msgSend(v3, "objectForKey:", CFSTR("W12real"));
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v10 = 0;
      v14 = 0;
LABEL_38:

      goto LABEL_39;
    }
    v56 = v7;
    objc_msgSend(v3, "objectForKey:", CFSTR("W12imag"));
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      v10 = 0;
      v14 = 0;
LABEL_37:

      v7 = v56;
      goto LABEL_38;
    }
    objc_msgSend(v3, "objectForKey:", CFSTR("W22real"));
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v14 = 0;
LABEL_36:

      goto LABEL_37;
    }
    v53 = v9;
    v54 = v8;
    v52 = v6;
    v55 = v10;
    objc_msgSend(v3, "objectForKey:", CFSTR("W22imag"));
    v11 = (char *)objc_claimAutoreleasedReturnValue();
    if (!v11)
    {
      v15 = 0;
      v10 = 0;
      v14 = 0;
      v6 = v52;
      v9 = v53;
      v8 = v54;
LABEL_35:

      goto LABEL_36;
    }
    v51 = v11;
    objc_msgSend(v3, "objectForKey:", CFSTR("WDataIsCompressed"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "BOOLValue");

    if (v13)
    {
      v71[0] = 0;
      objc_msgSend(v4, "decompressedDataUsingAlgorithm:error:", 3, v71);
      v63 = (char *)objc_claimAutoreleasedReturnValue();
      v10 = v71[0];

      v6 = v52;
      v9 = v53;
      v8 = v54;
      if (v10)
      {
        v14 = 0;
LABEL_33:
        v4 = v63;
LABEL_34:
        v15 = v51;
        goto LABEL_35;
      }
      v70 = 0;
      objc_msgSend(v5, "decompressedDataUsingAlgorithm:error:", 3, &v70);
      v62 = (char *)objc_claimAutoreleasedReturnValue();
      v10 = v70;

      v6 = v52;
      v9 = v53;
      v8 = v54;
      if (v10)
        goto LABEL_31;
      v69 = 0;
      objc_msgSend(v54, "decompressedDataUsingAlgorithm:error:", 3, &v69);
      v8 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v69;

      v6 = v52;
      v9 = v53;
      if (v10)
        goto LABEL_31;
      v68 = 0;
      v54 = v8;
      objc_msgSend(v53, "decompressedDataUsingAlgorithm:error:", 3, &v68);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v10 = v68;

      v6 = v52;
      if (v10
        || (v67 = 0,
            v53 = v9,
            v54 = v8,
            objc_msgSend(v52, "decompressedDataUsingAlgorithm:error:", 3, &v67),
            v6 = (id)objc_claimAutoreleasedReturnValue(),
            v10 = v67,
            v52,
            v10))
      {
LABEL_31:
        v14 = 0;
LABEL_32:
        v5 = v62;
        goto LABEL_33;
      }
      v66 = 0;
      v53 = v9;
      v54 = v8;
      v52 = v6;
      objc_msgSend(v56, "decompressedDataUsingAlgorithm:error:", 3, &v66);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v66;

      if (v10)
      {
        v14 = 0;
LABEL_47:
        v56 = v48;
        goto LABEL_32;
      }
      v65 = 0;
      v53 = v9;
      v54 = v8;
      v56 = v48;
      v52 = v6;
      objc_msgSend(v55, "decompressedDataUsingAlgorithm:error:", 3, &v65);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v65;

      if (v10)
      {
        v14 = 0;
        v55 = v49;
        goto LABEL_47;
      }
      v64 = 0;
      v53 = v9;
      v54 = v8;
      v56 = v48;
      v52 = v6;
      objc_msgSend(v51, "decompressedDataUsingAlgorithm:error:", 3, &v64);
      v61 = (char *)objc_claimAutoreleasedReturnValue();
      v10 = v64;

      if (v10)
      {
        v14 = 0;
        v15 = v61;
        v5 = v62;
        v55 = v49;
        v56 = v48;
        v4 = v63;
        goto LABEL_35;
      }
      v51 = v61;
      v54 = v8;
      v55 = v49;
      v53 = v9;
      v56 = v48;
      v5 = v62;
      v4 = v63;
    }
    else
    {
      v6 = v52;
    }
    v16 = v56;
    v52 = v6;
    v17 = objc_msgSend(v4, "length");
    v60 = (v17 >> 2);
    *a2 = v60;
    v57 = a2 + 2;
    for (i = 2; i != 42; i += 10)
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)&a2[i], *a2);
    v50 = (uint64_t)&v50;
    v20 = 4 * v60;
    v21 = MEMORY[0x1E0C80A78](v19);
    v63 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    v22 = objc_msgSend(v4, "length", v21);
    v23 = objc_msgSend(v4, "getBytes:length:", v63, v22);
    v24 = MEMORY[0x1E0C80A78](v23);
    v62 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    v25 = objc_msgSend(v5, "length", v24);
    v26 = objc_msgSend(v5, "getBytes:length:", v62, v25);
    v27 = MEMORY[0x1E0C80A78](v26);
    v59 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    v28 = objc_msgSend(v54, "length", v27);
    v29 = objc_msgSend(v54, "getBytes:length:", v59, v28);
    v30 = MEMORY[0x1E0C80A78](v29);
    v58 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    v31 = objc_msgSend(v53, "length", v30);
    v32 = objc_msgSend(v53, "getBytes:length:", v58, v31);
    v33 = MEMORY[0x1E0C80A78](v32);
    v61 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    v34 = objc_msgSend(v6, "length", v33);
    v35 = objc_msgSend(v6, "getBytes:length:", v61, v34);
    v36 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    v37 = objc_msgSend(v16, "getBytes:length:", v36, objc_msgSend(v16, "length", MEMORY[0x1E0C80A78](v35)));
    v38 = MEMORY[0x1E0C80A78](v37);
    v39 = objc_msgSend(v55, "length", v38);
    v40 = objc_msgSend(v55, "getBytes:length:", v36, v39);
    v41 = MEMORY[0x1E0C80A78](v40);
    v42 = objc_msgSend(v51, "length", v41);
    objc_msgSend(v51, "getBytes:length:", v36, v42);
    if ((v17 & 0x3FFFFFFFCLL) != 0)
    {
      v43 = 0;
      v44 = a2 + 22;
      v45 = a2 + 12;
      v46 = a2 + 32;
      do
      {
        v72.real = *(float *)&v63[4 * v43];
        v72.imag = *(float *)&v62[4 * v43];
        DspLib::ComplexSpan::setElement(v57, v43, v72);
        v73.real = *(float *)&v61[4 * v43];
        v73.imag = *(float *)&v36[4 * v43];
        DspLib::ComplexSpan::setElement(v44, v43, v73);
        v74.real = *(float *)&v59[4 * v43];
        v74.imag = *(float *)&v58[4 * v43];
        DspLib::ComplexSpan::setElement(v45, v43, v74);
        v75.real = *(float *)&v36[4 * v43];
        v75.imag = v75.real;
        DspLib::ComplexSpan::setElement(v46, v43++, v75);
      }
      while (v60 != v43);
    }
    v10 = 0;
    v14 = 1;
    v6 = v52;
    v9 = v53;
    v8 = v54;
    goto LABEL_34;
  }
  v14 = 0;
LABEL_42:

  return v14;
}

void sub_1B64DCCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Unwind_Resume(a1);
}

os_log_t ___ZL13AUXTCLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "AUXTC");
  *v0 = result;
  AUXTCLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t AUXTC::enqueueNewFIRMatrix(uint64_t this)
{
  unsigned __int8 v1;
  uint64_t v2;
  caulk::concurrent::messenger *v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)(this + 2769));
  if ((v1 & 1) != 0)
  {
    v2 = this;
    if (*(_BYTE *)(this + 17))
    {
      v3 = *(caulk::concurrent::messenger **)(this + 2776);
      v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 40, 8);
      *(_DWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = v2;
      *(_QWORD *)v4 = &off_1E69E4388;
      *(_QWORD *)(v4 + 8) = 0;
      return caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v4);
    }
  }
  return this;
}

void caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::perform(caulk::concurrent::message *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  caulk::concurrent::message *v5;
  uint64_t v6;

  v5 = a1;
  v1 = *((_QWORD *)a1 + 3);
  v2 = atomic_load((unsigned __int8 *)(v1 + 2769));
  if ((v2 & 1) != 0)
  {
    AUXTC::newFIRMatrix((AUXTC *)&v6, v1);
    ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::store(v1 + 2816, &v6);
    v3 = v6;
    v6 = 0;
    if (v3)
      std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::rt_cleanup::~rt_cleanup(&v5);
}

void sub_1B64DCF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::rt_cleanup::~rt_cleanup(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 40, 8);
  return a1;
}

uint64_t ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E69E4348;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::drain_trash(a1);
  for (i = 0;
        boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((unsigned int *)(a1 + 64), &i);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 1024));
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue((unsigned int *)(a1 + 64));
  return a1;
}

void ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(a1);
  JUMPOUT(0x1BCC95CE0);
}

_QWORD *ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69E4328;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_stash(_QWORD *a1)
{
  *a1 = &off_1E69E4328;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  JUMPOUT(0x1BCC95CE0);
}

void iPMWF_HRLS_vDSP::InitializeFilter(iPMWF_HRLS_vDSP *this)
{
  unsigned int v2;

  if (*((_DWORD *)this + 24) == 1)
  {
    memcpy(*((void **)this + 18), *((const void **)this + 99), 4 * *((unsigned int *)this + 10));
    memcpy((void *)(*((_QWORD *)this + 18) + 4 * *((unsigned int *)this + 10)), *((const void **)this + 102), 4 * *((unsigned int *)this + 10));
  }
  else if (*((_DWORD *)this + 8))
  {
    v2 = 0;
    do
      vDSP_vfill((const float *)this + 18, (float *)(*((_QWORD *)this + 18) + 4 * (*((_DWORD *)this + 9) + *((_DWORD *)this + 10)) * v2++), 1, *((unsigned int *)this + 9));
    while (v2 < *((_DWORD *)this + 8));
  }
}

os_log_t ___ZL17AUDenoiseLogScopev_block_invoke_19328()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "audnos");
  *v0 = result;
  AUDenoiseLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void iPMWF_HRLS_vDSP::FilterToCommonUsingSteering(uint64_t a1, _QWORD *a2, float **a3)
{
  int v6;
  float *v7;
  unsigned int v8;
  vDSP_Length __N;
  uint64_t v10;
  unsigned int v11;
  float *v12;
  DSPSplitComplex __B;
  DSPSplitComplex __A;
  DSPSplitComplex __D;

  vDSP_vclr(*a3, 1, (2 * *(_DWORD *)(a1 + 36)));
  v6 = *(_DWORD *)(a1 + 32);
  v7 = &(*a3)[*(unsigned int *)(a1 + 36)];
  __D.realp = *a3;
  __D.imagp = v7;
  if (v6)
  {
    v8 = 0;
    do
    {
      __N = *(unsigned int *)(a1 + 36);
      v10 = *(_QWORD *)(a1 + 144);
      v11 = *(_DWORD *)(a1 + 40) + __N * v8;
      __A.realp = (float *)(v10 + 4 * __N * v8);
      __A.imagp = (float *)(v10 + 4 * v11);
      v12 = (float *)(*a2 + 4 * v11);
      __B.realp = (float *)(*a2 + 4 * __N * v8);
      __B.imagp = v12;
      vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 32));
  }
}

void iPMWF_HRLS_vDSP::FilterSignal(uint64_t a1, _QWORD *a2, float **a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  float *v9;
  float *v10;
  int v11;
  vDSP_Length __N;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  float *v16;
  unsigned int v17;
  DSPSplitComplex __B;
  DSPSplitComplex __A;
  DSPSplitComplex __D;

  vDSP_vclr(*a3, 1, (2 * *(_DWORD *)(a1 + 40)));
  if (*(_DWORD *)(a1 + 32))
  {
    v6 = 0;
    do
    {
      v7 = 0;
      v8 = *(_DWORD *)(a1 + 36) * v6;
      v9 = &(*a3)[v8];
      v10 = &(*a3)[*(_DWORD *)(a1 + 40) + v8];
      __D.realp = v9;
      __D.imagp = v10;
      do
      {
        __N = *(unsigned int *)(a1 + 36);
        v11 = *(_DWORD *)(a1 + 40);
        v13 = __N * v7 + v11 * v6;
        v14 = *(_QWORD *)(a1 + 144);
        v15 = *(_DWORD *)(a1 + 44) + v13;
        __A.realp = (float *)(v14 + 4 * v13);
        __A.imagp = (float *)(v14 + 4 * v15);
        v16 = (float *)(*a2 + 4 * (__N * v7 + v11));
        __B.realp = (float *)(*a2 + 4 * __N * v7);
        __B.imagp = v16;
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
        ++v7;
        v17 = *(_DWORD *)(a1 + 32);
      }
      while (v7 < v17);
      ++v6;
    }
    while (v6 < v17);
  }
}

void iPMWF_HRLS_vDSP::FilterCommonToFinalUsingSteering(uint64_t a1, float *a2, _QWORD *a3)
{
  int v3;
  float *v4;
  unsigned int v7;
  vDSP_Length v8;
  float *v9;
  float *v10;
  DSPSplitComplex v11;
  DSPSplitComplex __C;
  DSPSplitComplex __A;

  v3 = *(_DWORD *)(a1 + 32);
  v4 = &a2[*(unsigned int *)(a1 + 36)];
  __A.realp = a2;
  __A.imagp = v4;
  if (v3)
  {
    v7 = 0;
    do
    {
      v8 = *(unsigned int *)(a1 + 36);
      v9 = (float *)(*a3 + 4 * (*(_DWORD *)(a1 + 40) + v8 * v7));
      __C.realp = (float *)(*a3 + 4 * v8 * v7);
      __C.imagp = v9;
      v10 = (float *)(*(_QWORD *)(a1 + 816) + 4 * v8 * v7);
      v11.realp = (float *)(*(_QWORD *)(a1 + 792) + 4 * v8 * v7);
      v11.imagp = v10;
      vDSP_zvmul(&__A, 1, &v11, 1, &__C, 1, v8, 1);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 32));
  }
}

void iPMWF_HRLS_vDSP::ProcessEchoOneInformedFrame(iPMWF_HRLS_vDSP *this)
{
  _QWORD *v2;
  float **v3;

  v2 = (_QWORD *)((char *)this + 384);
  v3 = (float **)((char *)this + 528);
  if (*((_DWORD *)this + 24) == 1)
  {
    iPMWF_HRLS_vDSP::FilterToCommonUsingSteering((uint64_t)this, (_QWORD *)this + 48, v3);
    iPMWF_HRLS_vDSP::FilterCommonToFinalUsingSteering((uint64_t)this, *((float **)this + 66), v2);
  }
  else
  {
    iPMWF_HRLS_vDSP::FilterSignal((uint64_t)this, (_QWORD *)this + 48, v3);
    memcpy(*((void **)this + 48), *((const void **)this + 66), 4 * (2 * *((_DWORD *)this + 10)));
  }
}

void iPMWF_HRLS_vDSP::ProcessBufferList(iPMWF_HRLS_vDSP *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7)
{
  unint64_t v14;
  unint64_t v15;
  void **p_mData;
  float v17;
  const float *v18;
  unint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  void **v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  const void **v39;
  char *v40;
  unsigned int v41;
  float **v42;
  const AudioBufferList *v43;
  iPMWF_HRLS_vDSP *v44;
  _QWORD *v45;
  float **v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  vDSP_Length v50;
  const float *v51;
  vDSP_Length v52;
  float v53;
  unsigned int v54;
  uint64_t v55;
  vDSP_Length v56;
  uint64_t v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  float *v65;
  float *v66;
  int v67;
  vDSP_Length __N;
  unsigned int v69;
  float *v70;
  float *v71;
  uint64_t v72;
  unsigned int v73;
  vDSP_Length v74;
  uint64_t v75;
  float *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  float *v81;
  float *v82;
  int v83;
  vDSP_Length v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  vDSP_Length v90;
  float *v91;
  unsigned int v92;
  unsigned int i;
  vDSP_Length v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  vDSP_Length v99;
  float *v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  float *v108;
  float *v109;
  vDSP_Length v110;
  unsigned int v111;
  float *v112;
  float *v113;
  float *v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  vDSP_Length v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  vDSP_Length v128;
  float *v129;
  vDSP_Length v130;
  float *v131;
  iPMWF_HRLS_vDSP *v132;
  _QWORD *v133;
  unsigned int v134;
  vDSP_Length v135;
  float *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  vDSP_Length v144;
  int v145;
  float *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int j;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  float *v155;
  float *v156;
  vDSP_Length v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  float *v162;
  float *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  uint64_t v171;
  float *v172;
  float *v173;
  vDSP_Length v174;
  unsigned int v175;
  uint64_t v176;
  float *v177;
  unsigned int v178;
  float *v179;
  float *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  float *v187;
  float *v188;
  int v189;
  vDSP_Length v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  vDSP_Length v199;
  unsigned int v200;
  uint64_t v201;
  float *v202;
  float *v203;
  unsigned int v204;
  vDSP_Length v205;
  float *v206;
  uint64_t v207;
  char *v208;
  float *v209;
  _QWORD *v210;
  float *v211;
  char *v212;
  uint64_t v213;
  const float **v214;
  uint64_t v215;
  vDSP_Length v216;
  uint64_t v217;
  float *mData;
  float *v219;
  uint64_t v220;
  int v221;
  unsigned int v222;
  uint64_t v223;
  float v224;
  uint64_t v225;
  uint64_t v226;
  float v227;
  float v228;
  float v229;
  float v230;
  uint64_t v231;
  _QWORD *v232;
  float *v233;
  float *__A;
  const AudioBufferList *v235;
  DSPSplitComplex v236;
  DSPSplitComplex __D;
  DSPSplitComplex __B;
  DSPSplitComplex v239;
  DSPSplitComplex __C;

  LODWORD(v14) = *((_DWORD *)this + 8);
  if ((_DWORD)v14)
  {
    v15 = 0;
    p_mData = &a2->mBuffers[0].mData;
    v17 = 0.0;
    do
    {
      v18 = (const float *)*p_mData;
      p_mData += 2;
      v17 = cblas_sdsdot(2 * *((_DWORD *)this + 9) - 2, v17, v18, 1, v18, 1);
      ++v15;
      v14 = *((unsigned int *)this + 8);
    }
    while (v15 < v14);
  }
  else
  {
    v17 = 0.0;
  }
  if (v17 <= *((float *)this + 7) || (LODWORD(v17) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((_DWORD)v14)
    {
      v20 = 0;
      v21 = &a2->mBuffers[0].mData;
      v22 = &a4->mBuffers[0].mData;
      do
      {
        v24 = *v22;
        v22 += 2;
        v23 = v24;
        v25 = *v21;
        v21 += 2;
        memcpy(v23, v25, 4 * (2 * *((_DWORD *)this + 9) - 2));
        ++v20;
        v26 = *((unsigned int *)this + 8);
      }
      while (v20 < v26);
      if ((_DWORD)v26 && a6 != 0)
      {
        v28 = 0;
        v29 = &a3->mBuffers[0].mData;
        v30 = &a5->mBuffers[0].mData;
        do
        {
          v32 = *v30;
          v30 += 2;
          v31 = v32;
          v33 = *v29;
          v29 += 2;
          memcpy(v31, v33, 4 * (2 * *((_DWORD *)this + 9) - 2));
          ++v28;
        }
        while (v28 < *((unsigned int *)this + 8));
      }
    }
    return;
  }
  __A = (float *)((char *)this + 28);
  v235 = a3;
  if ((_DWORD)v14)
  {
    v34 = 0;
    v35 = &a2->mBuffers[0].mData;
    do
    {
      memcpy((void *)(*((_QWORD *)this + 45) + 4 * (*((_DWORD *)this + 9) * v34)), *v35, 4 * *((unsigned int *)this + 9));
      v36 = (char *)*v35;
      v35 += 2;
      memcpy((void *)(*((_QWORD *)this + 45)+ 4 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 9) * v34++ + 1)), &v36[4 * *((unsigned int *)this + 9)], 4 * (*((_DWORD *)this + 9) - 2));
    }
    while (v34 < *((unsigned int *)this + 8));
  }
  v37 = (_QWORD *)((char *)this + 360);
  vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 33, *((float **)this + 45), 1, (2 * *((_DWORD *)this + 10)));
  if (!a6)
    goto LABEL_28;
  if (*((_DWORD *)this + 8))
  {
    v38 = 0;
    v39 = (const void **)&v235->mBuffers[0].mData;
    do
    {
      memcpy((void *)(*((_QWORD *)this + 48) + 4 * (*((_DWORD *)this + 9) * v38)), *v39, 4 * *((unsigned int *)this + 9));
      v40 = (char *)*v39;
      v39 += 2;
      memcpy((void *)(*((_QWORD *)this + 48)+ 4 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 9) * v38++ + 1)), &v40[4 * *((unsigned int *)this + 9)], 4 * (*((_DWORD *)this + 9) - 2));
    }
    while (v38 < *((unsigned int *)this + 8));
  }
  vDSP_vsmul(*((const float **)this + 48), 1, (const float *)this + 33, *((float **)this + 48), 1, (2 * *((_DWORD *)this + 10)));
  if (*((_BYTE *)this + 101))
  {
LABEL_28:
    if (a7)
      goto LABEL_29;
LABEL_36:
    v42 = (float **)((char *)this + 528);
    v43 = v235;
    v44 = this;
    if (*((_DWORD *)this + 24) == 1)
      goto LABEL_93;
    v45 = (_QWORD *)((char *)this + 360);
    goto LABEL_136;
  }
  iPMWF_HRLS_vDSP::ProcessEchoOneInformedFrame(this);
  vDSP_vsmul(*((const float **)this + 48), 1, (const float *)this + 34, *((float **)this + 48), 1, (2 * *((_DWORD *)this + 10)));
  if (!a7)
    goto LABEL_36;
LABEL_29:
  if (*((_DWORD *)this + 21) >= *((_DWORD *)this + 22))
  {
    memcpy(*((void **)this + 27), *((const void **)this + 72), 4 * *((unsigned int *)this + 9));
  }
  else
  {
    vDSP_vfill(__A, *((float **)this + 27), 1, *((unsigned int *)this + 9));
    ++*((_DWORD *)this + 21);
  }
  LODWORD(__C.realp) = *((_DWORD *)this + 9);
  vDSP_vsmsa(*((const float **)this + 27), 1, (const float *)this + 20, (const float *)this + 3, *((float **)this + 30), 1, LODWORD(__C.realp));
  v41 = *((_DWORD *)this + 26);
  if (v41 == 2)
  {
    *(float *)&v239.realp = *((float *)this + 3) + (float)(*((float *)this + 20) * *((float *)this + 31));
    vDSP_vfill((const float *)&v239, *((float **)this + 30), 1, *((unsigned int *)this + 9));
  }
  else if (v41 <= 1)
  {
    vDSP_vsmsa(*((const float **)this + 27), 1, (const float *)this + 20, (const float *)this + 3, *((float **)this + 30), 1, *((unsigned int *)this + 9));
  }
  vDSP_vneg(*((const float **)this + 30), 1, *((float **)this + 33), 1, *((unsigned int *)this + 9));
  vDSP_vsadd(*((const float **)this + 33), 1, (const float *)this + 18, *((float **)this + 33), 1, *((unsigned int *)this + 9));
  vvsqrtf(*((float **)this + 42), *((const float **)this + 33), (const int *)&__C);
  vvsqrtf(*((float **)this + 39), *((const float **)this + 30), (const int *)&__C);
  vDSP_svdiv((const float *)this + 18, *((const float **)this + 39), 1, *((float **)this + 39), 1, *((unsigned int *)this + 9));
  v43 = v235;
  if (!*((_BYTE *)this + 101) || *((_DWORD *)this + 26) == 1)
  {
    v46 = (float **)((char *)this + 528);
    v47 = (_QWORD *)((char *)this + 360);
    if (*((_DWORD *)this + 24) == 1)
    {
      iPMWF_HRLS_vDSP::FilterToCommonUsingSteering((uint64_t)this, v47, v46);
      if (*((_DWORD *)this + 26) != 1)
        goto LABEL_51;
      v48 = *((_QWORD *)this + 66);
      v49 = *((unsigned int *)this + 27);
      v50 = (*((_DWORD *)this + 28) - v49);
      LODWORD(__C.realp) = 0;
      LODWORD(v239.realp) = 0;
      v51 = (const float *)(v48 + 4 * v49);
      vDSP_svesq(v51, 1, (float *)&__C, v50);
      v52 = v50;
      v43 = v235;
      vDSP_svesq(&v51[*((unsigned int *)this + 9)], 1, (float *)&v239, v52);
      v53 = (float)(*(float *)&__C.realp + *(float *)&v239.realp) / (float)*((unsigned int *)this + 8);
    }
    else
    {
      iPMWF_HRLS_vDSP::FilterSignal((uint64_t)this, v47, v46);
      if (*((_DWORD *)this + 26) != 1)
        goto LABEL_51;
      if (*((_DWORD *)this + 8))
      {
        v54 = 0;
        v55 = *((unsigned int *)this + 27);
        v56 = (*((_DWORD *)this + 28) - v55);
        v57 = *((_QWORD *)this + 66) + 4 * v55;
        v58 = 0.0;
        do
        {
          LODWORD(__C.realp) = 0;
          LODWORD(v239.realp) = 0;
          vDSP_svesq((const float *)(v57 + 4 * *((_DWORD *)this + 9) * v54), 1, (float *)&__C, v56);
          vDSP_svesq((const float *)(v57 + 4 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 9) * v54)), 1, (float *)&v239, v56);
          v58 = (float)(v58 + *(float *)&__C.realp) + *(float *)&v239.realp;
          ++v54;
          v59 = *((_DWORD *)this + 8);
        }
        while (v54 < v59);
        v53 = v58 / (float)v59;
        v43 = v235;
        v37 = (_QWORD *)((char *)this + 360);
      }
      else
      {
        v53 = NAN;
      }
    }
    *(float *)&__C.realp = 1.0 / fmaxf(*((float *)this + 30), powf(v53, *((float *)this + 29)));
    vDSP_vfill((const float *)&__C, *((float **)this + 69), 1, *((unsigned int *)this + 9));
    vDSP_vmul(*((const float **)this + 42), 1, *((const float **)this + 69), 1, *((float **)this + 42), 1, *((unsigned int *)this + 9));
  }
LABEL_51:
  v232 = v37;
  if ((*((_DWORD *)this + 8) & 0x7FFFFFFF) != 0)
  {
    v60 = 0;
    do
    {
      vDSP_vmul(*((const float **)this + 42), 1, (const float *)(*((_QWORD *)this + 45) + 4 * *((_DWORD *)this + 9) * v60), 1, (float *)(*((_QWORD *)this + 78) + 4 * *((_DWORD *)this + 9) * v60), 1, *((unsigned int *)this + 9));
      ++v60;
    }
    while (v60 < 2 * *((_DWORD *)this + 8));
  }
  vDSP_vclr(*((float **)this + 60), 1, (2 * *((_DWORD *)this + 10)));
  vDSP_vneg((const float *)(*((_QWORD *)this + 21) + 4 * *((unsigned int *)this + 11)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 11));
  if (*((_DWORD *)this + 8))
  {
    v61 = 0;
    do
    {
      v62 = 0;
      v63 = *((_DWORD *)this + 9) * v61;
      v64 = *((_QWORD *)this + 60);
      v65 = (float *)(v64 + 4 * v63);
      v66 = (float *)(v64 + 4 * (*((_DWORD *)this + 10) + v63));
      __C.realp = v65;
      __C.imagp = v66;
      do
      {
        __N = *((unsigned int *)this + 9);
        v67 = *((_DWORD *)this + 10);
        v69 = v67 * v62 + __N * v61;
        v70 = (float *)(*((_QWORD *)this + 21) + 4 * v69);
        v71 = (float *)(*((_QWORD *)this + 57) + 4 * v69);
        v239.realp = v70;
        v239.imagp = v71;
        v72 = *((_QWORD *)this + 78);
        __B.realp = (float *)(v72 + 4 * __N * v62);
        __B.imagp = (float *)(v72 + 4 * (__N * v62 + v67));
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, __N);
        ++v62;
      }
      while (v62 < *((_DWORD *)this + 8));
      vDSP_zrvmul(&__C, 1, *((const float **)this + 39), 1, &__C, 1, *((unsigned int *)this + 9));
      ++v61;
    }
    while (v61 < *((_DWORD *)this + 8));
  }
  vDSP_vclr(*((float **)this + 81), 1, *((unsigned int *)this + 9));
  if (*((_DWORD *)this + 8))
  {
    v73 = 0;
    do
    {
      v74 = *((unsigned int *)this + 9);
      v75 = *((_QWORD *)this + 60);
      v76 = (float *)(v75 + 4 * (*((_DWORD *)this + 10) + v74 * v73));
      __C.realp = (float *)(v75 + 4 * v74 * v73);
      __C.imagp = v76;
      vDSP_zvmgsa(&__C, 1, *((const float **)this + 81), 1, *((float **)this + 81), 1, v74);
      ++v73;
    }
    while (v73 < *((_DWORD *)this + 8));
  }
  vDSP_vsadd(*((const float **)this + 81), 1, (const float *)this + 18, *((float **)this + 81), 1, *((unsigned int *)this + 9));
  LODWORD(__D.realp) = *((_DWORD *)this + 9);
  vvsqrtf(*((float **)this + 81), *((const float **)this + 81), (const int *)&__D);
  vDSP_vdiv(*((const float **)this + 81), 1, *((const float **)this + 39), 1, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_vneg(*((const float **)this + 54), 1, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_vclr(*((float **)this + 51), 1, (2 * *((_DWORD *)this + 10)));
  if (*((_DWORD *)this + 8))
  {
    v77 = 0;
    do
    {
      v78 = 0;
      v79 = *((_DWORD *)this + 9) * v77;
      v80 = *((_QWORD *)this + 51);
      v81 = (float *)(v80 + 4 * v79);
      v82 = (float *)(v80 + 4 * (*((_DWORD *)this + 10) + v79));
      __C.realp = v81;
      __C.imagp = v82;
      do
      {
        v84 = *((unsigned int *)this + 9);
        v83 = *((_DWORD *)this + 10);
        v85 = v84 * v78 + v83 * v77;
        v86 = *((_QWORD *)this + 21);
        v87 = *((_DWORD *)this + 11) + v85;
        v239.realp = (float *)(v86 + 4 * v85);
        v239.imagp = (float *)(v86 + 4 * v87);
        v88 = *((_QWORD *)this + 60);
        __B.realp = (float *)(v88 + 4 * v84 * v78);
        __B.imagp = (float *)(v88 + 4 * (v84 * v78 + v83));
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v84);
        ++v78;
      }
      while (v78 < *((_DWORD *)this + 8));
      vDSP_zrvmul(&__C, 1, *((const float **)this + 54), 1, &__C, 1, *((unsigned int *)this + 9));
      ++v77;
    }
    while (v77 < *((_DWORD *)this + 8));
  }
  if ((*((_DWORD *)this + 13) & 0x7FFFFFFF) != 0)
  {
    v89 = 0;
    do
    {
      v90 = *((unsigned int *)this + 9);
      v91 = (float *)(*((_QWORD *)this + 21) + 4 * v90 * v89);
      vDSP_vmul(v91, 1, *((const float **)this + 39), 1, v91, 1, v90);
      ++v89;
    }
    while (v89 < 2 * *((_DWORD *)this + 13));
  }
  vDSP_vsadd(*((const float **)this + 81), 1, (const float *)this + 18, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_svdiv((const float *)this + 18, *((const float **)this + 54), 1, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_vneg((const float *)(*((_QWORD *)this + 60) + 4 * *((unsigned int *)this + 10)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 10));
  v92 = *((_DWORD *)this + 8);
  if (v92)
  {
    for (i = 0; i < v92; ++i)
    {
      v94 = *((unsigned int *)this + 9);
      v95 = *((_DWORD *)this + 10);
      v96 = *((_QWORD *)this + 51);
      __C.realp = (float *)(v96 + 4 * v94 * i);
      __C.imagp = (float *)(v96 + 4 * (v94 * i + v95));
      vDSP_zrvmul(&__C, 1, *((const float **)this + 54), 1, &__C, 1, v94);
      v92 = *((_DWORD *)this + 8);
      if (!v92)
        break;
      v97 = 0;
      v98 = v95 * i;
      do
      {
        v99 = *((unsigned int *)this + 9);
        v100 = (float *)(*((_QWORD *)this + 57) + 4 * v99 * v97);
        v239.realp = (float *)(*((_QWORD *)this + 60) + 4 * v99 * v97);
        v239.imagp = v100;
        v101 = v99 * v97 + v98;
        v102 = *((_QWORD *)this + 21);
        LODWORD(v100) = *((_DWORD *)this + 11) + v101;
        __B.realp = (float *)(v102 + 4 * v101);
        __B.imagp = (float *)(v102 + 4 * v100);
        vDSP_zvma(&v239, 1, &__C, 1, &__B, 1, &__B, 1, v99);
        ++v97;
        v92 = *((_DWORD *)this + 8);
      }
      while (v97 < v92);
    }
  }
  v103 = *((_DWORD *)this + 24);
  v233 = (float *)((char *)this + 72);
  if (!v103)
  {
    vDSP_vsmul(*((const float **)this + 93), 1, (const float *)this + 2, *((float **)this + 93), 1, (2 * *((_DWORD *)this + 11)));
    vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 19, *((float **)this + 78), 1, (2 * *((_DWORD *)this + 10)));
    if ((*((_DWORD *)this + 13) & 0x7FFFFFFF) != 0)
    {
      v134 = 0;
      do
      {
        v135 = *((unsigned int *)this + 9);
        v136 = (float *)(*((_QWORD *)this + 87) + 4 * v135 * v134);
        vDSP_vmul(v136, 1, *((const float **)this + 30), 1, v136, 1, v135);
        ++v134;
      }
      while (v134 < 2 * *((_DWORD *)this + 13));
    }
    if ((*((_DWORD *)this + 8) & 0x7FFFFFFF) != 0)
    {
      v137 = 0;
      do
      {
        vDSP_vmul((const float *)(*((_QWORD *)this + 45) + 4 * *((_DWORD *)this + 9) * v137), 1, *((const float **)this + 33), 1, (float *)(*((_QWORD *)this + 63) + 4 * *((_DWORD *)this + 9) * v137), 1, *((unsigned int *)this + 9));
        ++v137;
      }
      while (v137 < 2 * *((_DWORD *)this + 8));
    }
    vDSP_vneg((const float *)(*((_QWORD *)this + 45) + 4 * *((unsigned int *)this + 10)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 10));
    if (*((_DWORD *)this + 8))
    {
      v138 = 0;
      do
      {
        v139 = 0;
        v140 = *((_DWORD *)this + 9) * v138;
        v141 = *((_QWORD *)this + 78);
        v142 = *((_DWORD *)this + 10) + v140;
        __C.realp = (float *)(v141 + 4 * v140);
        __C.imagp = (float *)(v141 + 4 * v142);
        v143 = *((_QWORD *)this + 63);
        v239.realp = (float *)(v143 + 4 * v140);
        v239.imagp = (float *)(v143 + 4 * v142);
        do
        {
          v144 = *((unsigned int *)this + 9);
          v145 = *((_DWORD *)this + 10);
          v146 = (float *)(*((_QWORD *)this + 57) + 4 * v144 * v139);
          __B.realp = (float *)(*((_QWORD *)this + 45) + 4 * v144 * v139);
          __B.imagp = v146;
          v147 = v144 * v139 + v145 * v138;
          v148 = *((_QWORD *)this + 93);
          LODWORD(v146) = *((_DWORD *)this + 11) + v147;
          __D.realp = (float *)(v148 + 4 * v147);
          __D.imagp = (float *)(v148 + 4 * v146);
          v149 = *((_QWORD *)this + 87);
          v236.realp = (float *)(v149 + 4 * v147);
          v236.imagp = (float *)(v149 + 4 * v146);
          vDSP_zvma(&__B, 1, &__C, 1, &__D, 1, &__D, 1, v144);
          vDSP_zvma(&__B, 1, &v239, 1, &v236, 1, &v236, 1, *((unsigned int *)this + 9));
          ++v139;
          v150 = *((_DWORD *)this + 8);
        }
        while (v139 < v150);
        ++v138;
      }
      while (v138 < v150);
    }
    vDSP_vsub(*((const float **)this + 87), 1, *((const float **)this + 93), 1, *((float **)this + 90), 1, (2 * *((_DWORD *)this + 11)));
    goto LABEL_112;
  }
  if (v103 != 1)
  {
    if (v92)
    {
      for (j = 0; j < v164; ++j)
      {
        v152 = 0;
        v153 = *((_DWORD *)this + 9) * j;
        v154 = *((_QWORD *)this + 99);
        v155 = (float *)(v154 + 4 * v153);
        v156 = (float *)(v154 + 4 * (*((_DWORD *)this + 10) + v153));
        __C.realp = v155;
        __C.imagp = v156;
        do
        {
          v157 = *((unsigned int *)this + 9);
          v158 = *((_DWORD *)this + 10);
          v159 = *((_QWORD *)this + 99);
          v239.realp = (float *)(v159 + 4 * v157 * v152);
          v239.imagp = (float *)(v159 + 4 * (v158 + v157 * v152));
          v160 = v157 * v152 + v158 * j;
          v161 = *((_QWORD *)this + 90);
          v162 = (float *)(v161 + 4 * v160);
          v163 = (float *)(v161 + 4 * (*((_DWORD *)this + 11) + v160));
          __B.realp = v162;
          __B.imagp = v163;
          vDSP_zvmul(&__C, 1, &v239, 1, &__B, 1, v157, -1);
          ++v152;
          v164 = *((_DWORD *)this + 8);
        }
        while (v152 < v164);
      }
    }
LABEL_112:
    vDSP_vneg((const float *)(*((_QWORD *)this + 21) + 4 * *((unsigned int *)this + 11)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 11));
    vDSP_vclr(*((float **)this + 84), 1, (2 * *((_DWORD *)this + 11)));
    if (*((_DWORD *)this + 8))
    {
      v165 = 0;
      do
      {
        v166 = 0;
        v167 = *((_DWORD *)this + 10) * v165;
        do
        {
          v168 = 0;
          v169 = *((_DWORD *)this + 10) * v166;
          v170 = v167 + *((_DWORD *)this + 9) * v166;
          v171 = *((_QWORD *)this + 84);
          v172 = (float *)(v171 + 4 * v170);
          v173 = (float *)(v171 + 4 * (*((_DWORD *)this + 11) + v170));
          __C.realp = v172;
          __C.imagp = v173;
          do
          {
            v174 = *((unsigned int *)this + 9);
            v175 = v174 * v168 + v167;
            v176 = *((_QWORD *)this + 21);
            v177 = (float *)(v176 + 4 * (*((_DWORD *)this + 11) + v175));
            v239.realp = (float *)(v176 + 4 * v175);
            v239.imagp = v177;
            v178 = v174 * v168 + v169;
            v179 = (float *)(v176 + 4 * v178);
            v180 = (float *)(*((_QWORD *)this + 57) + 4 * v178);
            __B.realp = v179;
            __B.imagp = v180;
            vDSP_zvma(&__B, 1, &v239, 1, &__C, 1, &__C, 1, v174);
            ++v168;
            v181 = *((_DWORD *)this + 8);
          }
          while (v168 < v181);
          ++v166;
        }
        while (v166 < v181);
        ++v165;
      }
      while (v165 < v181);
    }
    vDSP_vclr(*((float **)this + 18), 1, (2 * *((_DWORD *)this + 11)));
    if (*((_DWORD *)this + 8))
    {
      v182 = 0;
      do
      {
        v183 = 0;
        do
        {
          v184 = 0;
          v185 = *((_DWORD *)this + 10) * v182 + *((_DWORD *)this + 9) * v183;
          v186 = *((_QWORD *)this + 18);
          v187 = (float *)(v186 + 4 * v185);
          v188 = (float *)(v186 + 4 * (*((_DWORD *)this + 11) + v185));
          __C.realp = v187;
          __C.imagp = v188;
          do
          {
            v190 = *((unsigned int *)this + 9);
            v189 = *((_DWORD *)this + 10);
            v191 = v189 * v182 + v190 * v184;
            v192 = *((_QWORD *)this + 90);
            v193 = *((_DWORD *)this + 11);
            v239.realp = (float *)(v192 + 4 * v191);
            v239.imagp = (float *)(v192 + 4 * (v193 + v191));
            v194 = v189 * v184 + v190 * v183;
            v195 = *((_QWORD *)this + 84);
            __B.realp = (float *)(v195 + 4 * v194);
            __B.imagp = (float *)(v195 + 4 * (v193 + v194));
            vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v190);
            ++v184;
            v196 = *((_DWORD *)this + 8);
          }
          while (v184 < v196);
          ++v183;
        }
        while (v183 < v196);
        ++v182;
      }
      while (v182 < v196);
    }
    vDSP_vclr(*((float **)this + 24), 1, *((unsigned int *)this + 9));
    v197 = *((unsigned int *)this + 9);
    __C.realp = (float *)*((_QWORD *)this + 54);
    __C.imagp = &__C.realp[v197];
    vDSP_vclr(__C.realp, 1, (2 * v197));
    if (*((_DWORD *)this + 8))
    {
      v198 = 0;
      do
      {
        v199 = *((unsigned int *)this + 9);
        v200 = (v199 + *((_DWORD *)this + 10)) * v198;
        v201 = *((_QWORD *)this + 18);
        v202 = (float *)(v201 + 4 * v200);
        v203 = (float *)(v201 + 4 * (*((_DWORD *)this + 11) + v200));
        v239.realp = v202;
        v239.imagp = v203;
        vDSP_zvadd(&v239, 1, &__C, 1, &__C, 1, v199);
        ++v198;
      }
      while (v198 < *((_DWORD *)this + 8));
    }
    vDSP_zvabs(&__C, 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    vDSP_vthr(*((const float **)this + 24), 1, __A, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    v43 = v235;
    if (*((_DWORD *)this + 24) != 1)
      vDSP_vsadd(*((const float **)this + 24), 1, (const float *)this + 5, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    vDSP_svdiv(v233, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    if ((*((_DWORD *)this + 13) & 0x7FFFFFFF) != 0)
    {
      v204 = 0;
      do
      {
        v205 = *((unsigned int *)this + 9);
        v206 = (float *)(*((_QWORD *)this + 18) + 4 * v205 * v204);
        vDSP_vmul(v206, 1, *((const float **)this + 24), 1, v206, 1, v205);
        ++v204;
      }
      while (v204 < 2 * *((_DWORD *)this + 13));
    }
    if (!*((_BYTE *)this + 101))
      goto LABEL_137;
    v42 = (float **)((char *)this + 528);
    v44 = this;
    v45 = v232;
LABEL_136:
    iPMWF_HRLS_vDSP::FilterSignal((uint64_t)v44, v45, v42);
LABEL_137:
    memcpy(*((void **)this + 45), *((const void **)this + 66), 4 * (2 * *((_DWORD *)this + 10)));
    goto LABEL_138;
  }
  vDSP_vclr(*((float **)this + 60), 1, (2 * *((_DWORD *)this + 10)));
  vDSP_vclr(*((float **)this + 24), 1, *((unsigned int *)this + 9));
  vDSP_vneg((const float *)(*((_QWORD *)this + 21) + 4 * *((unsigned int *)this + 11)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 11));
  if (*((_DWORD *)this + 8))
  {
    v104 = 0;
    do
    {
      v105 = 0;
      v106 = *((_DWORD *)this + 9) * v104;
      v107 = *((_QWORD *)this + 60);
      v108 = (float *)(v107 + 4 * v106);
      v109 = (float *)(v107 + 4 * (*((_DWORD *)this + 10) + v106));
      __C.realp = v108;
      __C.imagp = v109;
      do
      {
        v110 = *((unsigned int *)this + 9);
        v111 = v106 + *((_DWORD *)this + 10) * v105;
        v112 = (float *)(*((_QWORD *)this + 21) + 4 * v111);
        v113 = (float *)(*((_QWORD *)this + 57) + 4 * v111);
        v239.realp = v112;
        v239.imagp = v113;
        v114 = (float *)(*((_QWORD *)this + 102) + 4 * v110 * v105);
        __B.realp = (float *)(*((_QWORD *)this + 99) + 4 * v110 * v105);
        __B.imagp = v114;
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v110);
        ++v105;
      }
      while (v105 < *((_DWORD *)this + 8));
      vDSP_zvmgsa(&__C, 1, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
      ++v104;
    }
    while (v104 < *((_DWORD *)this + 8));
  }
  vDSP_vclr(*((float **)this + 18), 1, (2 * *((_DWORD *)this + 10)));
  if (*((_DWORD *)this + 8))
  {
    v115 = 0;
    do
    {
      v116 = 0;
      v117 = *((_DWORD *)this + 10);
      v118 = *((_DWORD *)this + 9) * v115;
      v119 = v117 * v115;
      v120 = *((_QWORD *)this + 18);
      __C.realp = (float *)(v120 + 4 * v118);
      __C.imagp = (float *)(v120 + 4 * (v118 + v117));
      do
      {
        v121 = *((unsigned int *)this + 9);
        v122 = *((_DWORD *)this + 10);
        v123 = *((_QWORD *)this + 21);
        v124 = v121 * v116 + v119 + *((_DWORD *)this + 11);
        v239.realp = (float *)(v123 + 4 * (v121 * v116 + v119));
        v239.imagp = (float *)(v123 + 4 * v124);
        v125 = *((_QWORD *)this + 60);
        __B.realp = (float *)(v125 + 4 * v121 * v116);
        __B.imagp = (float *)(v125 + 4 * (v122 + v121 * v116));
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v121);
        ++v116;
        v126 = *((_DWORD *)this + 8);
      }
      while (v116 < v126);
      ++v115;
    }
    while (v115 < v126);
  }
  vDSP_vthr(*((const float **)this + 24), 1, __A, *((float **)this + 24), 1, *((unsigned int *)this + 9));
  vDSP_svdiv(v233, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
  if ((*((_DWORD *)this + 8) & 0x7FFFFFFF) != 0)
  {
    v127 = 0;
    do
    {
      v128 = *((unsigned int *)this + 9);
      v129 = (float *)(*((_QWORD *)this + 18) + 4 * v128 * v127);
      vDSP_vmul(v129, 1, *((const float **)this + 24), 1, v129, 1, v128);
      ++v127;
    }
    while (v127 < 2 * *((_DWORD *)this + 8));
  }
  v130 = *((unsigned int *)this + 10);
  __C.realp = (float *)*((_QWORD *)this + 18);
  __C.imagp = &__C.realp[v130];
  v239 = __C;
  vDSP_zvconj(&__C, 1, &v239, 1, v130);
  if (!*((_BYTE *)this + 101))
  {
    v131 = (float *)*((_QWORD *)this + 66);
    v132 = this;
    v133 = v232;
    goto LABEL_94;
  }
  v42 = (float **)((char *)this + 528);
  v44 = this;
  v37 = v232;
LABEL_93:
  iPMWF_HRLS_vDSP::FilterToCommonUsingSteering((uint64_t)v44, v37, v42);
  v131 = (float *)*((_QWORD *)this + 66);
  v132 = this;
  v133 = v37;
LABEL_94:
  iPMWF_HRLS_vDSP::FilterCommonToFinalUsingSteering((uint64_t)v132, v131, v133);
LABEL_138:
  vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 34, *((float **)this + 45), 1, (2 * *((_DWORD *)this + 10)));
  if (a6 && *((_BYTE *)this + 101))
  {
    iPMWF_HRLS_vDSP::ProcessEchoOneInformedFrame(this);
    vDSP_vsmul(*((const float **)this + 48), 1, (const float *)this + 34, *((float **)this + 48), 1, (2 * *((_DWORD *)this + 10)));
  }
  if (*((_DWORD *)this + 8))
  {
    v207 = 0;
    while (1)
    {
      v208 = (char *)a4 + 16 * v207;
      v211 = (float *)*((_QWORD *)v208 + 2);
      v210 = v208 + 16;
      v209 = v211;
      v212 = (char *)a5 + 16 * v207;
      v215 = *((_QWORD *)v212 + 2);
      v214 = (const float **)(v212 + 16);
      v213 = v215;
      v216 = *((unsigned int *)this + 9);
      if ((_DWORD)v216)
        break;
      v216 = 0;
LABEL_162:
      vDSP_vmul(*((const float **)this + 75), 1, v209, 1, v209, 1, v216);
      vDSP_vmul((const float *)(*((_QWORD *)this + 75) + 4), 1, (const float *)(*v210 + 4 * *((unsigned int *)this + 9)), 1, (float *)(*v210 + 4 * *((unsigned int *)this + 9)), 1, (*((_DWORD *)this + 9) - 2));
      if ((a6 & 1) != 0)
      {
        vDSP_vmul(*((const float **)this + 75), 1, *v214, 1, (float *)*v214, 1, *((unsigned int *)this + 9));
        vDSP_vmul((const float *)(*((_QWORD *)this + 75) + 4), 1, &(*v214)[*((unsigned int *)this + 9)], 1, (float *)&(*v214)[*((unsigned int *)this + 9)], 1, (*((_DWORD *)this + 9) - 2));
      }
      if (++v207 >= (unint64_t)*((unsigned int *)this + 8))
        return;
    }
    v217 = 0;
    mData = (float *)a2->mBuffers[v207].mData;
    v219 = (float *)v43->mBuffers[v207].mData;
    v220 = (v216 - 1);
    v221 = v216 * v207;
    while (1)
    {
      v222 = v221 + v217;
      if (!v217 || v220 == v217)
      {
        v229 = *(float *)(*((_QWORD *)this + 45) + 4 * v222);
        v230 = mData[v217];
        if ((float)(v229 * v229) <= (float)(v230 * (float)(*((float *)this + 32) * v230)))
        {
          v209[v217] = (float)(v230 * *((float *)this + 4)) + (float)((float)(1.0 - *((float *)this + 4)) * v229);
          if (a6)
          {
            v228 = (float)(*((float *)this + 4) * v219[v217])
                 + (float)((float)(1.0 - *((float *)this + 4))
                         * *(float *)(*((_QWORD *)this + 48) + 4 * (v221 + v217)));
LABEL_157:
            v226 = v217;
LABEL_158:
            *(float *)(v213 + 4 * v226) = v228;
          }
        }
        else
        {
          v209[v217] = v230;
          if (a6)
          {
            v228 = v219[v217];
            goto LABEL_157;
          }
        }
      }
      else
      {
        v223 = *((_QWORD *)this + 45);
        v224 = *(float *)(v223 + 4 * v222);
        v225 = (v221 + v217 + *((_DWORD *)this + 10));
        v226 = (v220 + v217);
        v227 = mData[v217];
        if ((float)((float)(*(float *)(v223 + 4 * v225) * *(float *)(v223 + 4 * v225))
                   + (float)(v224 * v224)) <= (float)(*((float *)this + 32)
                                                    * (float)((float)(mData[v226]
                                                                    * mData[v226])
                                                            + (float)(v227 * v227))))
        {
          v209[v217] = (float)(v227 * *((float *)this + 4)) + (float)((float)(1.0 - *((float *)this + 4)) * v224);
          v209[v226] = (float)(*((float *)this + 4) * mData[v226])
                     + (float)((float)(1.0 - *((float *)this + 4)) * *(float *)(v223 + 4 * v225));
          if (a6)
          {
            v231 = *((_QWORD *)this + 48);
            *(float *)(v213 + 4 * v217) = (float)(*((float *)this + 4) * v219[v217])
                                        + (float)((float)(1.0 - *((float *)this + 4))
                                                * *(float *)(v231 + 4 * (v221 + v217)));
            v228 = (float)(*((float *)this + 4) * v219[v226])
                 + (float)((float)(1.0 - *((float *)this + 4)) * *(float *)(v231 + 4 * v225));
            goto LABEL_158;
          }
        }
        else
        {
          v209[v217] = v227;
          v209[v226] = mData[v226];
          if (a6)
          {
            *(float *)(v213 + 4 * v217) = v219[v217];
            v228 = v219[v226];
            goto LABEL_158;
          }
        }
      }
      if (v216 == ++v217)
        goto LABEL_162;
    }
  }
}

_DWORD *CmhBEAMprocOpt::deallocate_memory(_DWORD *this)
{
  _DWORD *v1;
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t j;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t k;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (*this)
  {
    v1 = this;
    *this = 0;
    v2 = this[14];
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*((_QWORD *)v1 + 17) + 8 * i);
        if (v4)
        {
          MEMORY[0x1BCC95CC8](v4, 0x1000C8052888210);
          v2 = v1[14];
        }
      }
    }
    v5 = *((_QWORD *)v1 + 17);
    if (v5)
      MEMORY[0x1BCC95CC8](v5, 0x80C80B8603338);
    v6 = *((_QWORD *)v1 + 20);
    if (v6)
      MEMORY[0x1BCC95CC8](v6, 0x1000C8052888210);
    v7 = *((_QWORD *)v1 + 21);
    if (v7)
      MEMORY[0x1BCC95CC8](v7, 0x1000C8052888210);
    if (*((_QWORD *)v1 + 16))
    {
      v8 = v1[3];
      if (v8 < 1)
        goto LABEL_20;
      for (j = 0; j < v8; ++j)
      {
        v10 = *(_QWORD *)(*((_QWORD *)v1 + 16) + 8 * j);
        if (v10)
        {
          MEMORY[0x1BCC95CC8](v10, 0x1000C8052888210);
          v8 = v1[3];
        }
      }
      if (*((_QWORD *)v1 + 16))
LABEL_20:
        MEMORY[0x1BCC95CC8]();
      *((_QWORD *)v1 + 16) = 0;
    }
    if (*((_QWORD *)v1 + 19))
    {
      v11 = v1[14];
      if (v11 < 0)
        goto LABEL_29;
      v12 = 0;
      v13 = -1;
      do
      {
        v14 = *(_QWORD *)(*((_QWORD *)v1 + 19) + v12);
        if (v14)
        {
          MEMORY[0x1BCC95CC8](v14, 0x1000C8052888210);
          v11 = v1[14];
        }
        ++v13;
        v12 += 16;
      }
      while (v13 < v11);
      if (*((_QWORD *)v1 + 19))
LABEL_29:
        MEMORY[0x1BCC95CEC]();
      *((_QWORD *)v1 + 19) = 0;
    }
    if (*((_QWORD *)v1 + 18))
    {
      v15 = v1[3];
      if (v15 < 1)
        goto LABEL_38;
      v16 = 0;
      for (k = 0; k < v15; ++k)
      {
        v18 = *(_QWORD *)(*((_QWORD *)v1 + 18) + v16);
        if (v18)
        {
          MEMORY[0x1BCC95CC8](v18, 0x1000C8052888210);
          v15 = v1[3];
        }
        v16 += 16;
      }
      if (*((_QWORD *)v1 + 18))
LABEL_38:
        MEMORY[0x1BCC95CEC]();
      *((_QWORD *)v1 + 18) = 0;
    }
    v19 = *((_QWORD *)v1 + 22);
    if (v19)
      MEMORY[0x1BCC95CC8](v19, 0x1000C8052888210);
    if (*((_QWORD *)v1 + 14))
    {
      v20 = v1[14];
      if (v20 < 0)
        goto LABEL_49;
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(*((_QWORD *)v1 + 14) + 8 * v21);
        if (v22)
        {
          MEMORY[0x1BCC95CC8](v22, 0x1000C8052888210);
          v20 = v1[14];
        }
      }
      while (v21++ < v20);
      if (*((_QWORD *)v1 + 14))
LABEL_49:
        MEMORY[0x1BCC95CC8]();
      *((_QWORD *)v1 + 14) = 0;
    }
    v24 = *((_QWORD *)v1 + 12);
    if (v24)
      MEMORY[0x1BCC95CC8](v24, 0x80C80B8603338);
    this = (_DWORD *)*((_QWORD *)v1 + 13);
    if (this)
      JUMPOUT(0x1BCC95CC8);
  }
  return this;
}

uint64_t CmhBEAMprocOpt::process(CmhBEAMprocOpt *this, float **a2, float **a3, float **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  float *v14;
  float v15;
  int v16;
  float *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t i;
  int v32;
  const float *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  _DWORD *v37;
  uint64_t v38;
  float *v39;
  float *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t j;
  int v47;
  const float *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)this)
    return 1;
  if (*((_DWORD *)this + 30) == 1)
  {
    if (*((int *)this + 14) >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        LPFilterBank::Analysis((CmhBEAMprocOpt *)((char *)this + 1392), v8, a2[v8], (DSPSplitComplex *)(*((_QWORD *)this + 19) + v7));
        ++v8;
        v7 += 16;
      }
      while (v8 < *((int *)this + 14));
    }
    if (*((_DWORD *)this + 3) == 2)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        memcpy(*(void **)(*((_QWORD *)this + 18) + v9), *(const void **)(*((_QWORD *)this + 19) + v9), 4 * *((int *)this + 5));
        ++v10;
        v9 += 16;
      }
      while (v10 < *((int *)this + 3));
    }
    else
    {
      memcpy(**((void ***)this + 18), *(const void **)(*((_QWORD *)this + 19) + 16 * *((int *)this + 1)), 4 * *((int *)this + 5));
    }
    goto LABEL_61;
  }
  v12 = *((_DWORD *)this + 7);
  if (v12 >= 1)
  {
    v13 = 0;
    v14 = *a2;
    do
    {
      v15 = (float)(*((float *)this + 21) * (float)(*v14 - *((float *)this + 16)))
          + (float)(*((float *)this + 20) * *((float *)this + 17));
      *((float *)this + 17) = v15;
      *((float *)this + 16) = *v14;
      *v14++ = v15;
      ++v13;
    }
    while (v12 > (unsigned __int16)v13);
    v16 = 0;
    v17 = a2[1];
    do
    {
      v18 = (float)(*((float *)this + 21) * (float)(*v17 - *((float *)this + 18)))
          + (float)(*((float *)this + 20) * *((float *)this + 19));
      *((float *)this + 19) = v18;
      *((float *)this + 18) = *v17;
      *v17++ = v18;
      ++v16;
    }
    while (v12 > (unsigned __int16)v16);
  }
  if (*((int *)this + 14) >= 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      LPFilterBank::Analysis((CmhBEAMprocOpt *)((char *)this + 1392), v20, a2[v20], (DSPSplitComplex *)(*((_QWORD *)this + 19) + v19));
      ++v20;
      v19 += 16;
    }
    while (v20 < *((int *)this + 14));
  }
  CmhBEAM2NOpt::process((CmhBEAMprocOpt *)((char *)this + 184), *((const DSPSplitComplex **)this + 19), *((DSPSplitComplex **)this + 18));
  v21 = (*((_DWORD *)this + 265) + *((_DWORD *)this + 271));
  v22 = *((_QWORD *)this + 133);
  if ((int)v21 < 1)
  {
    v25 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    do
    {
      if (*(_DWORD *)(v22 + 4 * v23) == 1)
        v24 = v23;
      ++v23;
    }
    while (v21 != v23);
    v25 = v24;
  }
  if (*(_DWORD *)(v22 + 4 * v25))
  {
    if (*((int *)this + 3) >= 1)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        vDSP_ztoc((const DSPSplitComplex *)(*((_QWORD *)this + 18) + v26), 1, *(DSPComplex **)(*((_QWORD *)this + 16) + 8 * v27++), 2, (uint64_t)(*((_DWORD *)this + 5) + (*((int *)this + 5) < 0)) >> 1);
        v26 += 16;
      }
      while (v27 < *((int *)this + 3));
    }
    Cns::process((uint64_t)this + 1056, *((float ***)this + 16));
    if (*((int *)this + 3) >= 1)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        vDSP_ctoz(*(const DSPComplex **)(*((_QWORD *)this + 16) + 8 * v29++), 2, (const DSPSplitComplex *)(*((_QWORD *)this + 18) + v28), 1, (uint64_t)(*((_DWORD *)this + 5) + (*((int *)this + 5) < 0)) >> 1);
        v28 += 16;
      }
      while (v29 < *((int *)this + 3));
    }
  }
  if (*((_DWORD *)this + 2))
  {
    CmhBEAMprocOpt::post_res_ns_proc(this);
    *((_DWORD *)this + 76) = *((_DWORD *)this + 23);
  }
  else
  {
    v30 = *((_DWORD *)this + 3);
    if (v30 >= 1)
    {
      for (i = 0; i < v30; ++i)
      {
        v32 = *((_DWORD *)this + 271) + *((_DWORD *)this + 265) - 1;
        if (v32 >= (int)i)
          v32 = i;
        if (*(_DWORD *)(*((_QWORD *)this + 133) + 4 * v32))
        {
          v33 = (const float *)*((_QWORD *)this + 22);
          v34 = *((unsigned int *)this + 272);
          if ((int)v34 >= 1)
          {
            v35 = *(_QWORD *)(*((_QWORD *)this + 173) + 112 * (int)i + 16);
            v36 = (int *)*((_QWORD *)this + 161);
            v37 = (_DWORD *)*((_QWORD *)this + 22);
            do
            {
              v38 = *v36++;
              *v37++ = *(_DWORD *)(v35 + 4 * v38);
              --v34;
            }
            while (v34);
          }
          v39 = (float *)(*(_QWORD *)(*((_QWORD *)this + 18) + 16 * i) + 4);
          vDSP_vmul(v39, 1, v33, 1, v39, 1, *((int *)this + 12));
          v40 = (float *)(*(_QWORD *)(*((_QWORD *)this + 18) + 16 * i + 8) + 4);
          vDSP_vmul(v40, 1, v33, 1, v40, 1, *((int *)this + 12));
          v30 = *((_DWORD *)this + 3);
        }
      }
    }
  }
  if (*((_DWORD *)this + 77))
    goto LABEL_61;
  v41 = *((_DWORD *)this + 48);
  if (v41 >= 1)
    v42 = 1;
  else
    v42 = *((_DWORD *)this + 48);
  v43 = *((_QWORD *)this + 74);
  v54[0] = *(_DWORD *)(v43 + 136 * v42 - 28);
  v44 = *((_DWORD *)this + 3);
  if (v44 == 2)
  {
    if (v41 >= 2)
      v41 = 2;
    v54[1] = *(_DWORD *)(v43 + 136 * v41 - 28);
    goto LABEL_55;
  }
  if (v44 >= 1)
  {
LABEL_55:
    v45 = 0;
    for (j = 0; j < v44; ++j)
    {
      if (v54[j] == 1)
      {
        v47 = *((_DWORD *)this + 48) - 1;
        if (v47 >= (int)j)
          v47 = j;
        v48 = *(const float **)(*((_QWORD *)this + 74) + 136 * v47 + 120);
        v49 = (float *)(*(_QWORD *)(*((_QWORD *)this + 18) + v45) + 4);
        vDSP_vmul(v49, 1, v48, 1, v49, 1, *((int *)this + 12));
        v50 = (float *)(*(_QWORD *)(*((_QWORD *)this + 18) + v45 + 8) + 4);
        vDSP_vmul(v50, 1, v48, 1, v50, 1, *((int *)this + 12));
        v44 = *((_DWORD *)this + 3);
      }
      v45 += 16;
    }
  }
LABEL_61:
  if (*((int *)this + 3) >= 1)
  {
    v51 = 0;
    v52 = 0;
    do
    {
      v53 = *((_QWORD *)this + 18) + v51;
      **(_DWORD **)(v53 + 8) = 0;
      **(_DWORD **)v53 = 0;
      LPFilterBank::Synthesis((CmhBEAMprocOpt *)((char *)this + 1392), v52, (const DSPSplitComplex *)v53, a3[v52]);
      ++v52;
      v51 += 16;
    }
    while (v52 < *((int *)this + 3));
  }
  return 0;
}

void CmhBEAMprocOpt::post_res_ns_proc(CmhBEAMprocOpt *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  DSPSplitComplex __Z;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (*((_DWORD *)this + 265) + *((_DWORD *)this + 271));
  v3 = *((_QWORD *)this + 133);
  if ((int)v2 < 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (*(_DWORD *)(v3 + 4 * v4) == 1)
        v5 = v4;
      ++v4;
    }
    while (v2 != v4);
    v6 = v5;
  }
  v7 = *((_QWORD *)this + 14);
  if (*(_DWORD *)(v3 + 4 * v6))
  {
    Cns::comf_noise(*(float **)v7, (float *)*((unsigned int *)this + 5));
    v7 = *((_QWORD *)this + 14);
  }
  else
  {
    v8 = *((unsigned int *)this + 5);
    if ((int)v8 >= 1)
      bzero(*(void **)v7, 4 * v8);
  }
  v9 = *((unsigned int *)this + 12);
  if ((int)v9 >= 1)
    memset_pattern16(*(void **)(v7 + 8), &unk_1B6627B80, 4 * v9);
  if (*((int *)this + 3) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *((_DWORD *)this + 271) + *((_DWORD *)this + 265) - 1;
      if (v11 >= (int)v10)
        v11 = v10;
      v12 = (float *)*((_QWORD *)this + 22);
      if (*(_DWORD *)(*((_QWORD *)this + 133) + 4 * v11) == 1)
      {
        v13 = *((unsigned int *)this + 272);
        if ((int)v13 >= 1)
        {
          v14 = *(_QWORD *)(*((_QWORD *)this + 173) + 112 * (int)v10 + 16);
          v15 = (int *)*((_QWORD *)this + 161);
          v16 = (_DWORD *)*((_QWORD *)this + 22);
          do
          {
            v17 = *v15++;
            *v16++ = *(_DWORD *)(v14 + 4 * v17);
            --v13;
          }
          while (v13);
        }
        LODWORD(v18) = *((_DWORD *)this + 12);
      }
      else
      {
        v18 = *((unsigned int *)this + 12);
        if ((int)v18 >= 1)
          memset_pattern16(*((void **)this + 22), &unk_1B6627B80, 4 * v18);
      }
      vDSP_vmul(v12, 1, *(const float **)(*((_QWORD *)this + 14) + 8), 1, v12, 1, (int)v18);
      v19 = (float *)(*(_QWORD *)(*((_QWORD *)this + 18) + 16 * v10) + 4);
      vDSP_vmul(v19, 1, v12, 1, v19, 1, *((int *)this + 12));
      v20 = (float *)(*(_QWORD *)(*((_QWORD *)this + 18) + 16 * v10 + 8) + 4);
      vDSP_vmul(v20, 1, v12, 1, v20, 1, *((int *)this + 12));
      MEMORY[0x1E0C80A78](v21);
      v22 = *((int *)this + 5);
      __Z.realp = (float *)((char *)&v25 - v23);
      __Z.imagp = (float *)((char *)&v25 + 4 * v22 - v23);
      if ((int)v22 >= 0)
        v24 = v22;
      else
        v24 = v22 + 1;
      vDSP_ctoz(**((const DSPComplex ***)this + 14), 2, &__Z, 1, (uint64_t)v24 >> 1);
      Cns::add_comf_noise((uint64_t)this + 1056, *(DSPSplitComplex **)(*((_QWORD *)this + 18) + 16 * v10), *(const DSPSplitComplex **)(*((_QWORD *)this + 18) + 16 * v10 + 8), __Z.realp, __Z.imagp, v12, v10);
      ++v10;
    }
    while (v10 < *((int *)this + 3));
  }
}

uint64_t CmhBEAMprocOpt::setModelFreqEQVector(CmhBEAMprocOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, **((_QWORD **)this + 37), 93.75, (float *)*((unsigned int *)this + 53), (float)*((int *)this + 49) / (float)*((int *)this + 50));
  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, *(_QWORD *)(*((_QWORD *)this + 37) + 8), 93.75, (float *)*((unsigned int *)this + 53), (float)*((int *)this + 49) / (float)*((int *)this + 50));
}

float CmhBEAMprocOpt::setModelFreqCompVector(CmhBEAMprocOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt *v3;

  v3 = (CmhBEAMprocOpt *)((char *)this + 184);
  CmhBEAM2NOpt::setModelFreqCompVector((CmhBEAMprocOpt *)((char *)this + 184), a2, 0);
  return CmhBEAM2NOpt::setModelFreqCompVector(v3, a2, 1u);
}

void CmhBEAMprocOpt::setWNG(CmhBEAMprocOpt *this, float a2)
{
  void **v3;
  float v4;

  v3 = (void **)((char *)this + 184);
  v4 = __exp10(a2 * 0.1);
  *((float *)this + 116) = v4;
  CmhBEAM2NOpt::calc_wng_beta_bound(v3, v4);
}

void lmsfilt_v4::initLmsFilter(int a1, int a2, int a3, uint64_t a4, float ***a5, int a6)
{
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  float *v17;
  float *v19;
  float *v20;
  float *v22;
  float *v23;
  float *v25;
  float *v26;
  BOOL v27;
  float *v28;
  float *v29;
  BOOL v30;
  float *v31;
  float **v32;
  int v33;
  int v34;
  int v35;
  std::bad_alloc *exception;
  std::bad_alloc *v37;
  float __A;

  __A = 0.0;
  v11 = *(_DWORD *)(a4 + 16);
  v12 = *(_DWORD *)(a4 + 44);
  v13 = malloc_type_malloc(0x60uLL, 0x2C8E6D5CuLL);
  if (!v13)
    goto LABEL_32;
  v13[10] = 0;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *(_OWORD *)v13 = 0u;
  *a5 = (float **)v13;
  *((_DWORD *)v13 + 8) = v12;
  *((_DWORD *)v13 + 9) = v12 * v11;
  v14 = v12 * v11 * a6;
  *((_DWORD *)v13 + 22) = v14;
  *((_DWORD *)v13 + 23) = a6;
  v15 = 4 * v14;
  v16 = 4 * v14;
  v17 = (float *)malloc_type_malloc(4 * v14, 0x2C8E6D5CuLL);
  if (4 * v14 && v17 == 0)
    goto LABEL_32;
  v19 = v17;
  bzero(v17, v15);
  **a5 = v19;
  v20 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL);
  if (v16 && v20 == 0)
    goto LABEL_32;
  v22 = v20;
  bzero(v20, v15);
  (*a5)[1] = v22;
  v23 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL);
  if (v16 && v23 == 0)
    goto LABEL_32;
  v25 = v23;
  bzero(v23, v15);
  (*a5)[2] = v25;
  v26 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL);
  v27 = v16 && v26 == 0;
  if (v27
    || ((v28 = v26, bzero(v26, v15), (*a5)[3] = v28, v29 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL), v16)
      ? (v30 = v29 == 0)
      : (v30 = 0),
        v30))
  {
LABEL_32:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v37 = std::bad_alloc::bad_alloc(exception);
  }
  v31 = v29;
  bzero(v29, v15);
  (*a5)[6] = v31;
  vDSP_vfill(&__A, **a5, 1, v14);
  vDSP_vfill(&__A, (*a5)[1], 1, v14);
  vDSP_vfill(&__A, (*a5)[2], 1, v14);
  vDSP_vfill(&__A, (*a5)[3], 1, v14);
  vDSP_vfill(&__A, (*a5)[6], 1, v14);
  v32 = *a5;
  *((float *)v32 + 10) = (float)(1.0 - *(float *)(a4 + 92)) + (float)(1.0 - *(float *)(a4 + 92));
  *((_DWORD *)v32 + 11) = 1;
  v32[7] = 0;
  *((_DWORD *)v32 + 16) = 0;
  *((_DWORD *)v32 + 17) = a1;
  *((_DWORD *)v32 + 18) = 0;
  *((_DWORD *)v32 + 19) = v12 - 1;
  v33 = a3 / v11;
  if (a3 / v11 >= v12)
    v33 = v12;
  v34 = (a3 - a2) / v11;
  *((_DWORD *)v32 + 20) = v34;
  *((_DWORD *)v32 + 21) = v33;
  if (v33 - v34 <= 1)
  {
    if (v12 == 4)
      v35 = -1;
    else
      v35 = 0;
    if (v12 > 4)
      v35 = -2;
    *((_DWORD *)v32 + 20) = v33 + v35;
  }
}

void lmsfilt_v4::runLmsFilter_v4(DSPSplitComplex *this, DSPSplitComplex *a2, DSPSplitComplex *a3, uint64_t a4, int *a5, uint64_t a6, float *a7, float *a8, float *a9, float *a10, int *a11, unsigned __int8 *a12, int a13, int a14, int a15, int a16, const BOOL *a17)
{
  DSPSplitComplex *v21;
  uint64_t v24;
  vDSP_Length v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int v31;
  const float *v32;
  float *v33;
  size_t v34;
  float *v35;
  int *v36;
  int v37[2];
  int v38[2];
  uint64_t v39;
  float *v40;
  float *v41;
  DSPSplitComplex *v42;
  float *v43;
  uint64_t v44;
  DSPSplitComplex v46;

  v36 = a5;
  v21 = a3;
  v24 = a10;
  v25 = (int)a3;
  vDSP_vclr(a2->realp, 1, (int)a3);
  vDSP_vclr(a2->imagp, 1, v25);
  if ((int)a10 < 2)
  {
    LODWORD(v35) = HIDWORD(a9);
    lmsfilt_v3::runLmsFilter_v3(this, v21, a4, (uint64_t)v36, a6, a7, a8, (float *)a9, v35, v36, v37[0], v37[1]);
    v34 = 4 * v25;
    memcpy(a2->realp, this->realp, v34);
    memcpy(a2->imagp, this->imagp, v34);
  }
  else
  {
    v39 = a6;
    v40 = a7;
    v41 = a8;
    v42 = a2;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v43 = (float *)v25;
    v44 = 4 * v25;
    v29 = v36;
    v30 = HIDWORD(a9);
    *(_QWORD *)v38 = v21;
    do
    {
      v31 = *a12++;
      v32 = (float *)((char *)this->realp + v26);
      v33 = (float *)((char *)this->imagp + v26);
      if (v31)
      {
        v46.realp = (float *)((char *)this->realp + v26);
        v46.imagp = v33;
        LODWORD(v35) = v30;
        lmsfilt_v3::runLmsFilter_v3(&v46, v21, a4 + v27 * 4, (uint64_t)&v29[v27], v39 + v28 * 4, &v40[v28], v41, (float *)a9, v35, v36, v38[0], v38[1]);
        vDSP_vadd(v32, 1, v42->realp, 1, v42->realp, 1, (vDSP_Length)v43);
        v21 = *(DSPSplitComplex **)v38;
        vDSP_vadd(v33, 1, v42->imagp, 1, v42->imagp, 1, (vDSP_Length)v43);
      }
      else
      {
        vDSP_vclr((float *)((char *)this->realp + v26), 1, (vDSP_Length)v43);
        vDSP_vclr(v33, 1, (vDSP_Length)v43);
      }
      v30 = HIDWORD(a9);
      v28 += SHIDWORD(a10);
      v27 += (int)a11;
      v26 += v44;
      --v24;
    }
    while (v24);
  }
}

uint64_t VoiceProcessor_Create(vp *a1, uint64_t a2)
{
  NSObject *v4;
  vp *v5;
  PlatformUtilities_iOS *v6;
  const __CFString *v7;
  CFTypeID v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  CFTypeID TypeID;
  const __CFString *v13;
  CFTypeID v14;
  CFTypeID v15;
  const __CFString *v16;
  CFTypeID v17;
  CFTypeID v18;
  int ProductType;
  uint64_t (**v20)(void *, uint64_t, uint8_t *);
  uint64_t VoiceProcessorVersion;
  uint64_t v22;
  std::__shared_mutex_base *v23;
  caulk::concurrent::messenger *v24;
  uint64_t v25;
  vp *v26;
  NSObject *v27;
  uint64_t result;
  std::string v29;
  const __CFString *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  uint8_t buf[8];
  CFTypeRef v35;
  __int16 v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string __p;
  char v42;
  char v43;
  int v44;
  char v45;
  int v46;
  int v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  CFTypeRef cf;
  char v54;
  std::string v55;

  vp::log(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "creating", buf, 2u);
  }

  if (!a1)
  {
    vp::log(v5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
LABEL_12:
      v11 = 1650553447;

      return v11;
    }
    *(_WORD *)buf = 0;
    v10 = "VoiceProcessor_Create BadArgument (outVoiceProcessor)";
LABEL_85:
    _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
    goto LABEL_12;
  }
  if (!a2)
  {
    vp::log(v5);
    v9 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "VoiceProcessor_Create BadArgument (inConfiguration)";
    goto LABEL_85;
  }
  *(_DWORD *)buf = 0;
  v35 = 0;
  v36 = 256;
  std::__fs::filesystem::path::path[abi:ne180100]<char [23],void>(&v37, "/Library/Audio/Tunings");
  memset(&v38, 0, sizeof(v38));
  std::string::append[abi:ne180100]<char const*,0>(&v38, "/tmp/AudioCapture/VP/", "");
  std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>(&v39, "/usr/local/lib/");
  v40 = 256;
  v6 = (PlatformUtilities_iOS *)std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
  v42 = 0;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = -1;
  LOBYTE(v47) = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  cf = 0;
  v54 = 0;
  v7 = *(const __CFString **)a2;
  if (*(_QWORD *)a2)
  {
    CFRetain(*(CFTypeRef *)a2);
    v8 = CFGetTypeID(v7);
    if (v8 == CFStringGetTypeID())
    {
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v32 = __p;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v55, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        v55 = v32;
      TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(v7))
      {
        applesauce::CF::details::CFString_get_value<false>((uint64_t)&v33, v7);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
      }
      else
      {
        v33 = v55;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v33;
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = 0;
      v33.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      CFRelease(v7);
    }
    else
    {
      v31.__r_.__value_.__r.__words[0] = 0;
      CFRelease(v7);
    }
  }
  if (*(_DWORD *)(a2 + 12))
  {
    v47 = *(_DWORD *)(a2 + 12);
    v48 = 1;
  }
  v13 = *(const __CFString **)(a2 + 16);
  if (v13)
  {
    CFRetain(*(CFTypeRef *)(a2 + 16));
    v14 = CFGetTypeID(v13);
    if (v14 == CFStringGetTypeID())
    {
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      else
        v31 = v38;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v55, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v55 = v31;
      v15 = CFStringGetTypeID();
      if (v15 == CFGetTypeID(v13))
      {
        applesauce::CF::details::CFString_get_value<false>((uint64_t)&v33, v13);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
      }
      else
      {
        v33 = v55;
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v38 = v33;
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = 0;
      v33.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      CFRelease(v13);
    }
    else
    {
      v29.__r_.__value_.__r.__words[0] = 0;
      CFRelease(v13);
    }
  }
  v16 = *(const __CFString **)(a2 + 24);
  if (v16)
  {
    CFRetain(v16);
    v17 = CFGetTypeID(v16);
    if (v17 == CFStringGetTypeID())
    {
      v30 = v16;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
      else
        v29 = v37;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v55, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v55 = v29;
      v18 = CFStringGetTypeID();
      if (v18 == CFGetTypeID(v16))
      {
        applesauce::CF::details::CFString_get_value<false>((uint64_t)&v33, v16);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
      }
      else
      {
        v33 = v55;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v37 = v33;
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = 0;
      v33.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      CFRelease(v16);
    }
    else
    {
      v30 = 0;
      CFRelease(v16);
    }
  }
  ProductType = PlatformUtilities_iOS::GetProductType(v6);
  if (!v45)
    v45 = 1;
  v44 = ProductType;
  v20 = (uint64_t (**)(void *, uint64_t, uint8_t *))gVoiceProcessorBaseFactory;
  VoiceProcessorVersion = GetVoiceProcessorVersion((const vp::Context *)buf, 0, 0, 0, 0);
  v22 = v20[2](v20, VoiceProcessorVersion, buf);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v35)
    CFRelease(v35);
  v23 = (std::__shared_mutex_base *)operator new();
  v24 = (caulk::concurrent::messenger *)std::__shared_mutex_base::__shared_mutex_base(v23);
  v23[1].__mut_.__m_.__sig = v22;
  v25 = caulk::concurrent::messenger::shared_logging_priority(v24);
  MEMORY[0x1BCC94FFC](v23[1].__mut_.__m_.__opaque, 0, v25);
  if (v23[1].__mut_.__m_.__sig)
  {
    v26 = (vp *)caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)&v23[1].__mut_.__m_.__opaque[16]);
    v23[1].__mut_.__m_.__opaque[24] = 0;
    v23[7].__gate2_.__cv_.__opaque[8] = 0;
    v23[7].__gate2_.__cv_.__opaque[16] = 0;
    v23[13].__gate2_.__cv_.__opaque[16] = 0;
    *(_QWORD *)a1 = v23;
    vp::log(v26);
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEFAULT, "created", buf, 2u);
    }

    return 0;
  }
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

void sub_1B64E01D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int16 buf,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  vp *v48;
  NSObject *v49;

  applesauce::CF::StringRef::~StringRef(&a12);
  vp::Context::~Context((vp::Context *)&buf);
  v48 = (vp *)__cxa_begin_catch(a1);
  vp::log(v48);
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
  {
    buf = 0;
    _os_log_fault_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_FAULT, "failed to create voice processor due to unknown exception", (uint8_t *)&buf, 2u);
  }

  __cxa_end_catch();
  JUMPOUT(0x1B64E0174);
}

uint64_t VoiceProcessor_Destroy(uint64_t a1)
{
  NSObject *v2;
  vp *v3;
  uint64_t v4;
  vp *v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t buf[16];

  vp::log((vp *)a1);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "destroying", buf, 2u);
  }

  if (a1)
  {
    if (*(_BYTE *)(a1 + 2320))
    {
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2288));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2280));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2272));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2264));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2256));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2248));
    }
    if (*(_BYTE *)(a1 + 1304))
    {
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1280));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1272));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1264));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1256));
    }
    MEMORY[0x1BCC95008](a1 + 176);
    v4 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
    std::mutex::~mutex((std::mutex *)a1);
    v5 = (vp *)MEMORY[0x1BCC95CEC]();
    vp::log(v5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_DEFAULT, "destroyed", v9, 2u);
    }
    v7 = 0;
  }
  else
  {
    v7 = 1651664230;
    vp::log(v3);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_FAULT, "failed to destroy voice processor due to bad reference", v10, 2u);
    }
  }

  return v7;
}

uint64_t VoiceProcessor_GetVersion(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  uint8_t buf[88];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *a2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 112))(*(_QWORD *)(a1 + 168));
      return ErrorFromOSStatus(0);
    }
    else
    {
      return 1650553447;
    }
  }
  else
  {
    vp::log(0);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_FAULT, "failed to get version due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1B64E0600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,int a22,__int16 a23,char a24,char a25,_QWORD *a26,__int16 *a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,__int16 *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  vp *v40;
  NSObject *v41;
  _QWORD *v42;
  void **p_p;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t j;

  if (a2)
  {
    v40 = (vp *)__cxa_begin_catch(exception_object);
    vp::log(v40);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a30, "call_name");
      a34 = &a30;
      a35 = 1;
      a38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a36, vp::call_traits<(vp::call_type)0>::name);
      a39 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v39 - 144, (uint64_t)&a30, 2, 1, 2);
      *(_QWORD *)(v39 - 128) = v39 - 144;
      *(_BYTE *)(v39 - 120) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      a26 = 0;
      LOBYTE(a23) = 3;
      v42 = operator new(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v42, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetVersion, ArgTypeList = <>]");
      a26 = v42;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23);
      a27 = &a23;
      a28 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v39 - 112, (uint64_t)&a18, 2, 1, 2);
      *(_QWORD *)(v39 - 96) = v39 - 112;
      *(_BYTE *)(v39 - 88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v39 - 144, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v39 - 80) = 136315138;
      *(_QWORD *)(v39 - 76) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v39 - 80), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a10);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a11, a10);
      v44 = 0;
      v45 = v39 - 144;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v45 + v44 + 32);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v45 + v44 + 40), *(unsigned __int8 *)(v45 + v44 + 32));
        v44 -= 32;
      }
      while (v44 != -64);
      for (i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23 + i * 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&a26)[i], *((unsigned __int8 *)&a23 + i * 8));
      }
      for (j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a36 + j);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a37 + j), *((unsigned __int8 *)&a36 + j));
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E0540);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessor_InitializeUplink(vp *a1, unsigned int *a2)
{
  uint64_t v2;
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (a1)
  {
    if (a2)
    {
      v2 = VoiceProcessorImplementation::InitializeUplink(a1, a2);
      return ErrorFromOSStatus(v2);
    }
    else
    {
      vp::log(a1);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v6 = 0;
        _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "VoiceProcessor_InitializeUplink BadArgument (inConfiguration)", v6, 2u);
      }

      return 1650553447;
    }
  }
  else
  {
    vp::log(0);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_FAULT, "failed to initialize uplink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

uint64_t VoiceProcessor_InitializeDownlink(uint64_t a1, unsigned int *a2)
{
  char *v2;
  unsigned int *v3;
  uint8_t *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned __int8 v29;
  uint64_t *v30;
  uint64_t *v31;
  uint8_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned __int8 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint8_t v39;
  uint64_t v40;
  void **v41;
  vp *v42;
  uint64_t v43;
  vp *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t result;
  NSObject *v48;
  const char *v49;
  vp *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  vp *v54;
  uint64_t v55;
  double *v56;
  vp *v57;
  vp *v58;
  vp *v59;
  void **v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  vp *v73;
  int v74;
  NSObject *v75;
  std::pmr *v76;
  __int128 v77;
  int v78;
  uint64_t default_resource;
  std::pmr *v80;
  __int128 v81;
  uint64_t v82;
  std::pmr *v83;
  __int128 v84;
  uint64_t v85;
  vp *v86;
  NSObject *v87;
  uint64_t v88;
  void *v89;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v94;
  NSObject *log;
  os_log_t loga;
  uint64_t aBlock;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, const AudioBufferList *, uint64_t, _DWORD *);
  void *v100;
  uint64_t v101;
  unsigned __int8 v102[8];
  uint64_t *v103;
  char v104[8];
  uint64_t *v105;
  unsigned __int8 v106[8];
  uint64_t *v107;
  unsigned __int8 v108[8];
  uint64_t *v109;
  void *v110;
  uint64_t *v111;
  char v112;
  void *__p[115];
  uint64_t v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  __int128 v122;
  char v123;
  uint8_t buf[4];
  void **v125;
  uint8_t v126[4];
  _BYTE v127[12];
  __int128 v128;
  __int128 v129;
  _QWORD v130[3];
  char v131;
  char v132[8];
  uint64_t *v133;
  __int128 v134;
  __int128 v135;
  _QWORD v136[3];
  char v137;
  uint8_t v138[16];
  __int128 v139;
  uint64_t v140;
  _QWORD v141[2];
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v6 = buf;
      vp::log((vp *)a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        log = v7;
        v102[0] = 0;
        v103 = 0;
        v8 = (uint64_t *)*a2;
        v106[0] = 5;
        v107 = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
        v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v102, "topology");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
        v10 = *(_BYTE *)v9;
        *(_BYTE *)v9 = v106[0];
        v106[0] = v10;
        v11 = (uint64_t *)v9[1];
        v9[1] = (uint64_t)v107;
        v107 = v11;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v107, v106[0]);
        v12 = a2[1];
        v104[0] = 0;
        v105 = 0;
        if ((_DWORD)v12)
        {
          v2 = (char *)&v134 + 8;
          v3 = (unsigned int *)&v128 + 2;
          v13 = a2 + 62;
          do
          {
            v108[0] = 0;
            v109 = 0;
            v14 = *(v13 - 60);
            v138[0] = 5;
            *(_QWORD *)&v138[8] = v14;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
            v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "type");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
            v16 = *(_BYTE *)v15;
            *(_BYTE *)v15 = v138[0];
            v138[0] = v16;
            v17 = v15[1];
            v15[1] = *(_QWORD *)&v138[8];
            *(_QWORD *)&v138[8] = v17;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v138[8], v138[0]);
            v18 = *(v13 - 59);
            LOBYTE(v134) = 6;
            *((_QWORD *)&v134 + 1) = v18;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v134);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v134);
            v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "io_block_size");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v134);
            v20 = *(_BYTE *)v19;
            *(_BYTE *)v19 = v134;
            LOBYTE(v134) = v20;
            v21 = v19[1];
            v19[1] = *((_QWORD *)&v134 + 1);
            *((_QWORD *)&v134 + 1) = v21;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v134);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v134 + 1, v134);
            LODWORD(aBlock) = *(v13 - 58);
            v98 = (uint64_t)(v13 - 57);
            LOBYTE(v128) = 0;
            *((_QWORD *)&v128 + 1) = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorDownlinkTerminalType>>((uint64_t)&v128, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v128);
            v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "input_types");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v128);
            v23 = *(_BYTE *)v22;
            *(_BYTE *)v22 = v128;
            LOBYTE(v128) = v23;
            v24 = v22[1];
            v22[1] = *((_QWORD *)&v128 + 1);
            *((_QWORD *)&v128 + 1) = v24;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v128);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v128 + 1, v128);
            LODWORD(aBlock) = *(v13 - 58);
            v98 = (uint64_t)(v13 - 52);
            LOBYTE(v110) = 0;
            v111 = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)&v110, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v110);
            v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "input_formats");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v110);
            v26 = *(_BYTE *)v25;
            *(_BYTE *)v25 = (_BYTE)v110;
            LOBYTE(v110) = v26;
            v27 = (uint64_t *)v25[1];
            v25[1] = (uint64_t)v111;
            v111 = v27;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v110);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v111, v110);
            LODWORD(aBlock) = *(v13 - 2);
            v98 = (uint64_t)(v13 - 1);
            v132[0] = 0;
            v133 = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorDownlinkTerminalType>>((uint64_t)v132, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v132);
            v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "output_types");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v132);
            v29 = *(_BYTE *)v28;
            *(_BYTE *)v28 = v132[0];
            v132[0] = v29;
            v30 = (uint64_t *)v28[1];
            v28[1] = (uint64_t)v133;
            v133 = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v132);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v133, v132[0]);
            LODWORD(aBlock) = *(v13 - 2);
            v98 = (uint64_t)v13;
            v126[0] = 0;
            *(_QWORD *)&v127[4] = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)v126, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
            v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v108, "output_formats");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
            v32 = *(_BYTE *)v31;
            *(_BYTE *)v31 = v126[0];
            v126[0] = v32;
            v33 = v31[1];
            v31[1] = *(_QWORD *)&v127[4];
            *(_QWORD *)&v127[4] = v33;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v127[4], v126[0]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back((uint64_t)v104, (uint64_t)v108);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v109, v108[0]);
            v13 += 70;
            --v12;
          }
          while (v12);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v104);
        v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v102, "node_configurations");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v104);
        v35 = *(_BYTE *)v34;
        *(_BYTE *)v34 = v104[0];
        v104[0] = v35;
        v36 = (uint64_t *)v34[1];
        v34[1] = (uint64_t)v105;
        v105 = v36;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v34);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v104);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v105, v104[0]);
        v37 = a2[229];
        v138[0] = 6;
        *(_QWORD *)&v138[8] = v37;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
        v6 = buf;
        v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v102, "client_io_block_size");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
        v39 = *(_BYTE *)v38;
        *(_BYTE *)v38 = v138[0];
        v138[0] = v39;
        v40 = v38[1];
        v38[1] = *(_QWORD *)&v138[8];
        *(_QWORD *)&v138[8] = v40;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v38);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v138);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v138[8], v138[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v102, 4, 0x20u, 0, 0, __p);
        if (SHIBYTE(__p[2]) >= 0)
          v41 = __p;
        else
          v41 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v125 = v41;
        v7 = log;
        _os_log_impl(&dword_1B5ED0000, log, OS_LOG_TYPE_DEFAULT, "initializing downlink with configuration: %s", buf, 0xCu);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v103, v102[0]);
      }

      if (*a2 == 1)
      {
        if (a2[1] == 1)
        {
          if (a2[2] == 1)
          {
            v43 = a2[4];
            if ((v43 - 3) <= 0xFFFFFFFD)
            {
              v44 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has wrong number of inputs");
              vp::log(v44);
              v45 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
              {
                v60 = __p;
                if (SHIBYTE(__p[2]) < 0)
                  v60 = (void **)__p[0];
LABEL_107:
                *(_DWORD *)v138 = 136315138;
                *(_QWORD *)&v138[4] = v60;
                _os_log_error_impl(&dword_1B5ED0000, (os_log_t)v45, OS_LOG_TYPE_ERROR, "downlink configuration is not valid - %s", v138, 0xCu);
              }
LABEL_57:

              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_33;
            }
            v53 = 0;
            while (a2[v53 + 5])
            {
              if (v43 == ++v53)
              {
                v54 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has no far-end-voice input");
                vp::log(v54);
                v45 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
                {
LABEL_71:
                  v65 = __p;
                  if (SHIBYTE(__p[2]) < 0)
                    v65 = (void **)__p[0];
                  *(_DWORD *)v138 = 136315138;
                  *(_QWORD *)(v6 + 180) = v65;
                  _os_log_error_impl(&dword_1B5ED0000, (os_log_t)v45, OS_LOG_TYPE_ERROR, "downlink configuration is not valid - %s", v138, 0xCu);
                }
                goto LABEL_57;
              }
            }
            v55 = 0;
            v56 = (double *)&a2[10 * v53 + 10];
            while (a2[v55 + 5] != 4)
            {
              if (v43 == ++v55)
                goto LABEL_49;
            }
            if (*v56 != *(double *)&a2[10 * v55 + 10])
            {
              v57 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node far-end-voice and telemetry input sample rates are not equal");
              vp::log(v57);
              v45 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
                goto LABEL_57;
              v60 = __p;
              if (SHIBYTE(__p[2]) < 0)
                v60 = (void **)__p[0];
              goto LABEL_107;
            }
LABEL_49:
            if (a2[60] != 1)
            {
              v58 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has wrong number of outputs");
              vp::log(v58);
              v45 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
                goto LABEL_57;
              v60 = __p;
              if (SHIBYTE(__p[2]) < 0)
                v60 = (void **)__p[0];
              goto LABEL_107;
            }
            if (a2[61] != 5)
            {
              v59 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has no downlink output");
              vp::log(v59);
              v45 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
                goto LABEL_57;
              v60 = __p;
              if (SHIBYTE(__p[2]) < 0)
                v60 = (void **)__p[0];
              goto LABEL_107;
            }
            if (a2[228] >= 0x11)
            {
              vp::log(v42);
              v45 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
                goto LABEL_32;
              LOWORD(__p[0]) = 0;
              v49 = "downlink configuration is not valid - speaker telemetry input data sources count is out of bounds";
              goto LABEL_31;
            }
            v61 = a2[229];
            vp::log(v42);
            v62 = objc_claimAutoreleasedReturnValue();
            v45 = (uint64_t)v62;
            if ((_DWORD)v61)
            {
              if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
              {
                LOWORD(__p[0]) = 0;
                _os_log_impl(&dword_1B5ED0000, (os_log_t)v45, OS_LOG_TYPE_INFO, "downlink configuration is valid!", (uint8_t *)__p, 2u);
              }

              v6 = (uint8_t *)(a1 + 192);
              caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
              if (*a2 != 1)
              {
                result = _os_crash();
                __break(1u);
                return result;
              }
              v63 = a2[1];
              if (!(_DWORD)v63)
              {
LABEL_70:
                _os_crash();
                __break(1u);
                goto LABEL_71;
              }
              v45 = 0;
              v64 = 61;
              while (a2[v64 - 59] != 1)
              {
                ++v45;
                v64 += 70;
                if (v63 == v45)
                  goto LABEL_70;
              }
              v66 = a2[70 * v45 + 4];
              if ((_DWORD)v66)
              {
                v67 = 0;
                LODWORD(v2) = a2[229];
                v68 = v64 * 4 - 224;
                while (*(unsigned int *)((char *)a2 + v68))
                {
                  ++v67;
                  v68 += 4;
                  if (v66 == v67)
                    goto LABEL_78;
                }
              }
              else
              {
LABEL_78:
                _os_crash();
                __break(1u);
              }
              v69 = &a2[70 * v45];
              v70 = v69[60];
              if ((_DWORD)v70)
              {
                v61 = 0;
                v3 = &v69[10 * v67 + 10];
                while (a2[v64] != 5)
                {
                  ++v61;
                  ++v64;
                  if (v70 == v61)
                    goto LABEL_83;
                }
              }
              else
              {
LABEL_83:
                _os_crash();
                __break(1u);
              }
              v71 = 4 * a2[228];
              *(_DWORD *)v138 = 32796;
              __p[0] = a2 + 212;
              LODWORD(v134) = v71;
              v72 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, (unsigned int *)v138, __p, (unsigned int *)&v134);
              if (v72 >= 0x100000000)
                v52 = 0x100000000;
              else
                v52 = v72;
              if (!(_DWORD)v52)
              {
                aBlock = MEMORY[0x1E0C809B0];
                v98 = 3221225472;
                v99 = ___ZN28VoiceProcessorImplementation18InitializeDownlinkERK35VoiceProcessorDownlinkConfiguration_block_invoke;
                v100 = &__block_descriptor_40_e99_i32__0__AudioBufferList_I_1_AudioBuffer_II_v___8__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16_I24l;
                v101 = a1;
                loga = (os_log_t)_Block_copy(&aBlock);
                std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
                v94 = (uint64_t)&a2[70 * v45 + 62 + 10 * v61];
                v73 = (vp *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168));
                v74 = (int)v73;
                if ((_DWORD)v73)
                {
                  vp::log(v73);
                  v75 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                  {
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v138);
                    *(_QWORD *)&v139 = v138;
                    BYTE8(v139) = 1;
                    LOBYTE(v140) = 5;
                    v141[0] = v74;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v140);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v140);
                    v141[1] = &v140;
                    v142 = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, (uint64_t)v138, 2, 1, 2);
                    __p[2] = __p;
                    LOBYTE(__p[3]) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&v134, "call_name");
                    *(_QWORD *)&v135 = &v134;
                    BYTE8(v135) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v136, vp::call_traits<(vp::call_type)3>::name);
                    v136[2] = v136;
                    v137 = 1;
                    __p[6] = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p[4], (uint64_t)&v134, 2, 1, 2);
                    LOBYTE(__p[7]) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&v128);
                    *(_QWORD *)&v129 = &v128;
                    BYTE8(v129) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[378],char [378],0>((uint64_t)v130);
                    v130[2] = v130;
                    v131 = 1;
                    __p[10] = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p[8], (uint64_t)&v128, 2, 1, 2);
                    LOBYTE(__p[11]) = 1;
                    v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v132, (uint64_t)__p, 3, 1, 2);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v88, 4, 0x20u, 0, 0, &v110);
                    if (v112 >= 0)
                      v89 = &v110;
                    else
                      v89 = v110;
                    *(_DWORD *)v126 = 136315138;
                    *(_QWORD *)v127 = v89;
                    _os_log_error_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_ERROR, "legacy call failed: %s", v126, 0xCu);
                    if (v112 < 0)
                      operator delete(v110);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v132);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v133, v132[0]);
                    for (i = 0; i != -12; i -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p[i + 8]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p[i + 9], LOBYTE(__p[i + 8]));
                    }
                    for (j = 0; j != -8; j -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v130[j]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v130[j + 1], LOBYTE(v130[j]));
                    }
                    for (k = 0; k != -8; k -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v136[k]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v136[k + 1], LOBYTE(v136[k]));
                    }
                    for (m = 0; m != -8; m -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v141[m - 1]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v141[m], LOBYTE(v141[m - 1]));
                    }
                  }

                }
                std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
                v76 = (std::pmr *)memcpy(__p, a2, sizeof(__p));
                LOBYTE(v114) = 0;
                HIDWORD(v114) = (_DWORD)v2;
                v115 = (int)v2;
                v77 = *((_OWORD *)v3 + 1);
                *(_OWORD *)v138 = *(_OWORD *)v3;
                v139 = v77;
                v140 = *((_QWORD *)v3 + 4);
                v78 = 2 * a2[229];
                default_resource = std::pmr::get_default_resource(v76);
                v80 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v138, v78, default_resource, &v116);
                v81 = *((_OWORD *)v3 + 1);
                v134 = *(_OWORD *)v3;
                v135 = v81;
                v136[0] = *((_QWORD *)v3 + 4);
                v82 = std::pmr::get_default_resource(v80);
                vp::Audio_Buffer::create((uint64_t)&v134, 0, v82, &v117);
                vp::Audio_File::Audio_File(&v118);
                vp::Audio_File::Audio_File(&v119);
                v83 = (std::pmr *)vp::Audio_File::Audio_File(&v120);
                v84 = *(_OWORD *)(v94 + 16);
                v128 = *(_OWORD *)v94;
                v129 = v84;
                v130[0] = *(_QWORD *)(v94 + 32);
                v85 = std::pmr::get_default_resource(v83);
                vp::Audio_Buffer::create((uint64_t)&v128, 0, v85, &v121);
                v122 = 0u;
                v123 = 0;
                if (*(_BYTE *)(a1 + 2320))
                {
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2288));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2280));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2272));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2264));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2256));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2248));
                  *(_BYTE *)(a1 + 2320) = 0;
                }
                memcpy((void *)(a1 + 1312), __p, 0x398uLL);
                *(_QWORD *)(a1 + 2232) = v114;
                *(_DWORD *)(a1 + 2240) = v115;
                vp::objc::ID::ID((_QWORD *)(a1 + 2248), (uint64_t *)&v116);
                vp::objc::ID::ID((_QWORD *)(a1 + 2256), (uint64_t *)&v117);
                vp::objc::ID::ID((_QWORD *)(a1 + 2264), &v118);
                vp::objc::ID::ID((_QWORD *)(a1 + 2272), &v119);
                vp::objc::ID::ID((_QWORD *)(a1 + 2280), &v120);
                vp::objc::ID::ID((_QWORD *)(a1 + 2288), (uint64_t *)&v121);
                *(_OWORD *)(a1 + 2296) = v122;
                *(_BYTE *)(a1 + 2312) = v123;
                *(_BYTE *)(a1 + 2320) = 1;
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v121);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v120);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v119);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v118);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v117);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v116);
                vp::log(v86);
                v87 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
                {
                  LOWORD(__p[0]) = 0;
                  _os_log_impl(&dword_1B5ED0000, v87, OS_LOG_TYPE_INFO, "initialized downlink", (uint8_t *)__p, 2u);
                }

                v52 = 0;
              }
              caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 192));
              return ErrorFromOSStatus(v52);
            }
            if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
              goto LABEL_32;
            LOWORD(__p[0]) = 0;
            v49 = "downlink configuration is not valid - client I/O block size can't be 0";
            goto LABEL_31;
          }
          vp::log(v42);
          v45 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            v49 = "downlink configuration is not valid - 'AllOfDownlinkDSPWithFarEndVoiceOnly' node configuration not found";
            goto LABEL_31;
          }
LABEL_32:

LABEL_33:
          vp::log(v50);
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_error_impl(&dword_1B5ED0000, v51, OS_LOG_TYPE_ERROR, "failed to initialize downlink due to bad configuration", (uint8_t *)__p, 2u);
          }

          v52 = 1650681447;
          return ErrorFromOSStatus(v52);
        }
        vp::log(v42);
        v45 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
          goto LABEL_32;
        LOWORD(__p[0]) = 0;
        v49 = "downlink configuration is not valid - wrong number of node configurations";
      }
      else
      {
        vp::log(v42);
        v45 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v45, OS_LOG_TYPE_ERROR))
          goto LABEL_32;
        LOWORD(__p[0]) = 0;
        v49 = "downlink configuration is not valid - topology is not supported";
      }
LABEL_31:
      _os_log_error_impl(&dword_1B5ED0000, (os_log_t)v45, OS_LOG_TYPE_ERROR, v49, (uint8_t *)__p, 2u);
      goto LABEL_32;
    }
    vp::log((vp *)a1);
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_ERROR, "VoiceProcessor_InitializeDownlink BadArgument (inConfiguration)", (uint8_t *)__p, 2u);
    }

    return 1650553447;
  }
  else
  {
    vp::log(0);
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_FAULT, "failed to initialize downlink due to bad reference", (uint8_t *)__p, 2u);
    }

    return 1651664230;
  }
}

void sub_1B64E1BE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  vp *v37;
  NSObject *v38;
  unint64_t *v39;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v37 = (vp *)__cxa_begin_catch(a1);
    vp::log(v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(v36 - 176, "call_name");
      *(_QWORD *)(v36 - 160) = v36 - 176;
      *(_BYTE *)(v36 - 152) = 1;
      *(_QWORD *)(v36 - 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(v36 - 144, vp::call_traits<(vp::call_type)3>::name);
      *(_BYTE *)(v36 - 120) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a29, v36 - 176, 2, 1, 2);
      a31 = (uint64_t)&a29;
      a32 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(v36 - 240);
      *(_QWORD *)(v36 - 224) = v36 - 240;
      *(_BYTE *)(v36 - 216) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[378],char [378],0>(v36 - 208);
      *(_QWORD *)(v36 - 192) = v36 - 208;
      *(_BYTE *)(v36 - 184) = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a33, v36 - 240, 2, 1, 2);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a26, (uint64_t)&a29, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a26, 4, 0x20u, 0, 0, &STACK[0x4B0]);
      if (SLOBYTE(STACK[0x4C7]) >= 0)
        v39 = &STACK[0x4B0];
      else
        v39 = (unint64_t *)STACK[0x4B0];
      *(_DWORD *)(v36 - 256) = 136315138;
      STACK[0x4F4] = (unint64_t)v39;
      _os_log_error_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 256), 0xCu);
      if (SLOBYTE(STACK[0x4C7]) < 0)
        operator delete((void *)STACK[0x4B0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a26);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a29 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 240 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 176 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E160CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_GetPropertyInfo(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v9;
  __int16 v10;
  uint8_t buf[16];

  if (!a1)
  {
    v4 = 1651664230;
    vp::log(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_FAULT, "failed to get property info due to bad reference", buf, 2u);
    }
    goto LABEL_10;
  }
  if (!a3)
  {
    v4 = 1650553447;
    vp::log(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_10:

      return v4;
    }
    v10 = 0;
    v6 = "VoiceProcessor_GetPropertyInfo BadArgument (outPropertySize)";
    v7 = (uint8_t *)&v10;
LABEL_13:
    _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    goto LABEL_10;
  }
  if (!a4)
  {
    v4 = 1650553447;
    vp::log(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    v9 = 0;
    v6 = "VoiceProcessor_GetPropertyInfo BadArgument (outPropertyIsWritable)";
    v7 = (uint8_t *)&v9;
    goto LABEL_13;
  }
  return 1651536498;
}

uint64_t VoiceProcessor_GetParameter(vp *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];
  uint8_t buf[16];

  if (!a1)
  {
    v3 = 1651664230;
    vp::log(0);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_FAULT, "failed to get parameter due to bad reference", buf, 2u);
    }
    goto LABEL_8;
  }
  if (!a3)
  {
    v3 = 1650553447;
    vp::log(a1);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "VoiceProcessor_GetParameter BadArgument (outParameterValue)", v6, 2u);
    }
LABEL_8:

    return v3;
  }
  return 1651532146;
}

uint64_t VoiceProcessor_SetParameter(vp *a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  vp::log(a1);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a1)
  {
    v6 = 1651532146;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, "VoiceProcessor_SetParameter BadParameterID (%d)", (uint8_t *)v8, 8u);
    }
  }
  else
  {
    v6 = 1651664230;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_FAULT, "failed to set parameter due to bad reference", (uint8_t *)v8, 2u);
    }
  }

  return v6;
}

uint64_t VoiceProcessor_GetUplinkParameterList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v11;
  __int16 v12;
  uint8_t buf[16];

  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v5 = 0;
        *a5 = 0;
        return v5;
      }
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        v5 = 1650553447;

        return v5;
      }
      v11 = 0;
      v8 = "VoiceProcessor_GetUplinkParameterList BadArgument (ioParameterCount)";
      v9 = (uint8_t *)&v11;
    }
    else
    {
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_11;
      v12 = 0;
      v8 = "VoiceProcessor_GetUplinkParameterList BadArgument (outParameterList)";
      v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  vp::log(0);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_FAULT, "failed to get uplink parameter list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_GetDownlinkParameterList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v11;
  __int16 v12;
  uint8_t buf[16];

  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v5 = 0;
        *a5 = 0;
        return v5;
      }
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        v5 = 1650553447;

        return v5;
      }
      v11 = 0;
      v8 = "VoiceProcessor_GetDownlinkParameterList BadArgument (ioParameterCount)";
      v9 = (uint8_t *)&v11;
    }
    else
    {
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_11;
      v12 = 0;
      v8 = "VoiceProcessor_GetDownlinkParameterList BadArgument (outParameterList)";
      v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  vp::log(0);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_FAULT, "failed to get downlink parameter list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_GetProperty(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v9;
  __int16 v10;
  uint8_t buf[16];

  if (!a1)
  {
    v4 = 1651664230;
    vp::log(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_FAULT, "failed to get property due to bad reference", buf, 2u);
    }
    goto LABEL_10;
  }
  if (!a3)
  {
    v4 = 1650553447;
    vp::log(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_10:

      return v4;
    }
    v10 = 0;
    v6 = "VoiceProcessor_GetProperty BadArgument (outPropertyData)";
    v7 = (uint8_t *)&v10;
LABEL_13:
    _os_log_error_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    goto LABEL_10;
  }
  if (!a4)
  {
    v4 = 1650553447;
    vp::log(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    v9 = 0;
    v6 = "VoiceProcessor_GetProperty BadArgument (outPropertySize)";
    v7 = (uint8_t *)&v9;
    goto LABEL_13;
  }
  return 1651536498;
}

uint64_t VoiceProcessor_SetProperty(vp *a1, int a2, uint64_t a3)
{
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    vp::log(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (a3)
    {
      v7 = 1651536498;
      if (v6)
      {
        v12[0] = 67109120;
        v12[1] = a2;
        v8 = "VoiceProcessor_SetProperty BadPropertyID (%d)";
        v9 = v5;
        v10 = 8;
LABEL_10:
        _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)v12, v10);
      }
    }
    else
    {
      v7 = 1650553447;
      if (v6)
      {
        LOWORD(v12[0]) = 0;
        v8 = "VoiceProcessor_SetProperty BadArgument (inPropertyData)";
        v9 = v5;
        v10 = 2;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = 1651664230;
    vp::log(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v12[0]) = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v5, OS_LOG_TYPE_FAULT, "failed to set property due to bad reference", (uint8_t *)v12, 2u);
    }
  }

  return v7;
}

uint64_t VoiceProcessor_GetUplinkPropertyList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v11;
  __int16 v12;
  uint8_t buf[16];

  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v5 = 0;
        *a5 = 0;
        return v5;
      }
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        v5 = 1650553447;

        return v5;
      }
      v11 = 0;
      v8 = "VoiceProcessor_GetUplinkPropertyList BadArgument (ioPropertyCount)";
      v9 = (uint8_t *)&v11;
    }
    else
    {
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_11;
      v12 = 0;
      v8 = "VoiceProcessor_GetUplinkPropertyList BadArgument (outPropertyList)";
      v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  vp::log(0);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_FAULT, "failed to get uplink property list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_GetDownlinkPropertyList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v11;
  __int16 v12;
  uint8_t buf[16];

  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v5 = 0;
        *a5 = 0;
        return v5;
      }
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        v5 = 1650553447;

        return v5;
      }
      v11 = 0;
      v8 = "VoiceProcessor_GetDownlinkPropertyList BadArgument (ioPropertyCount)";
      v9 = (uint8_t *)&v11;
    }
    else
    {
      vp::log(a1);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_11;
      v12 = 0;
      v8 = "VoiceProcessor_GetDownlinkPropertyList BadArgument (outPropertyList)";
      v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  vp::log(0);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_FAULT, "failed to get downlink property list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_PreflightUplink(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  vp *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  char v19;
  uint8_t buf[88];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a4)
    {
      v18 = a1 + 192;
      v7 = (vp *)caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
      v19 = (char)v7;
      if ((_DWORD)v7)
      {
        if (!*(_BYTE *)(a1 + 1304) || !*(_BYTE *)(a1 + 2320))
        {
          vp::log(v7);
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "PreflightUplink BadState", buf, 2u);
          }

          v13 = 1651733601;
          goto LABEL_23;
        }
        v8 = 0;
        *(_DWORD *)(a1 + 1292) = 0;
        *(_DWORD *)(a1 + 1296) = a3;
        v9 = *(_DWORD *)(a1 + 1288);
        v10 = a3 - v9;
        if (a3 > v9)
        {
          if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
          {
            v13 = 1651270507;
            goto LABEL_23;
          }
          v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 160))(*(_QWORD *)(a1 + 168), v10, a1 + 1292);
          if (v11)
          {
            v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
            *(_DWORD *)(v12 + 16) = 0;
            *(_DWORD *)(v12 + 24) = v11;
            *(_QWORD *)(v12 + 32) = "PreflightUplink";
            *(_QWORD *)(v12 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProce"
                                    "ssorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type"
                                    "::PreflightUplink, ArgTypeList = <unsigned int, unsigned int *>]";
            *(_QWORD *)v12 = &off_1E69E4568;
            *(_QWORD *)(v12 + 8) = 0;
            caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v12);
          }
          std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
          v8 = *(_DWORD *)(a1 + 1292);
        }
        v13 = 0;
        *a4 = v8;
        *(_BYTE *)(a1 + 1300) = 1;
      }
      else
      {
        v13 = 1651270507;
      }
LABEL_23:
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
      return ErrorFromOSStatus(v13);
    }
    vp::log((vp *)a1);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_PreflightUplink BadArgument (outNumRequiredUplinkInputSamples)", buf, 2u);
    }

    return 1650553447;
  }
  else
  {
    vp::log(0);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_FAULT, "failed to preflight uplink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1B64E2B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  vp *v39;
  NSObject *v40;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v39 = (vp *)__cxa_begin_catch(a1);
    vp::log(v39);
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a29, "call_name");
      a33 = &a29;
      a34 = 1;
      a37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a35, &vp::call_traits<(vp::call_type)14>::name);
      a38 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 176, (uint64_t)&a29, 2, 1, 2);
      *(_QWORD *)(v38 - 160) = v38 - 176;
      *(_BYTE *)(v38 - 152) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a20);
      a22 = &a20;
      a23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[233],char [233],0>((uint64_t)&a24, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::PreflightUplink, ArgTypeList = <unsigned int, unsigned int *>]");
      a26 = &a24;
      a27 = 1;
      *(_QWORD *)(v38 - 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 144, (uint64_t)&a20, 2, 1, 2);
      *(_BYTE *)(v38 - 120) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a12, v38 - 176, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a12, 4, 0x20u, 0, 0, &__p);
      if (a19 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v38 - 112) = 136315138;
      *(_QWORD *)(v38 - 108) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v38 - 112), 0xCu);
      if (a19 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a12);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v38 - 176 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a20 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a29 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E29C0);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_ProcessUplink(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v16;
  uint64_t v17;
  uint8_t v18[16];
  uint8_t buf[8];
  char v20;

  if (!a1)
  {
    vp::log(0);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_FAULT, "failed to process uplink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
  if (!a2)
  {
    vp::log((vp *)a1);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_ERROR, "VoiceProcessor_ProcessUplink BadArgument (ioData)", buf, 2u);
    }
    v13 = 1650553447;

    return v13;
  }
  *(_QWORD *)buf = a1 + 192;
  v4 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
  v20 = v4;
  if ((v4 & 1) == 0)
  {
    v9 = 1651270507;
    vp::log((vp *)v4);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      v11 = "ProcessUplink BadLock";
      goto LABEL_27;
    }
LABEL_28:

    goto LABEL_29;
  }
  if (*(_BYTE *)(a1 + 1304))
  {
    if (*(_BYTE *)(a1 + 2320))
    {
      v5 = *(unsigned int *)(a1 + 204);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = *a2;
        v8 = 208;
        while (*(_DWORD *)(a1 + v8) != v7)
        {
          ++v6;
          v8 += 280;
          if (v5 == v6)
            goto LABEL_10;
        }
        if (*(_DWORD *)(a1 + 200 + 280 * v6 + 12))
          goto LABEL_33;
        if (*(_BYTE *)(a1 + 1300))
        {
          *(_BYTE *)(a1 + 1300) = 0;
LABEL_33:
          switch(v7)
          {
            case 0:
              v17 = VoiceProcessorImplementation::ProcessAllOfULDSP(a1, (uint64_t)a2);
              break;
            case 1:
              v17 = VoiceProcessorImplementation::ProcessULHardwareDSP(a1, (uint64_t)a2);
              break;
            case 2:
              v17 = VoiceProcessorImplementation::ProcessULEchoDSP(a1, (uint64_t)a2);
              break;
            case 3:
              v17 = VoiceProcessorImplementation::ProcessULDynamicsDSP(a1, (uint64_t)a2);
              break;
            default:
              v9 = 1650553447;
              vp::log((vp *)v4);
              v10 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
                goto LABEL_28;
              *(_WORD *)v18 = 0;
              v11 = "ProcessUplink BadArgument (nodeType)";
              goto LABEL_27;
          }
          v9 = v17;
          goto LABEL_29;
        }
        v9 = 1651733601;
        vp::log((vp *)v4);
        v10 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        *(_WORD *)v18 = 0;
        v11 = "ProcessUplink BadState preflight";
        goto LABEL_27;
      }
LABEL_10:
      v9 = 1651076964;
      vp::log((vp *)v4);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        v11 = "ProcessUplink BadIOData";
LABEL_27:
        _os_log_error_impl(&dword_1B5ED0000, v10, OS_LOG_TYPE_ERROR, v11, v18, 2u);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
LABEL_25:
    v9 = 1651733601;
    vp::log((vp *)v4);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      v11 = "ProcessUplink BadState (downlink)";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  vp::log((vp *)v4);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v18 = 0;
    _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "ProcessUplink BadState (uplink)", v18, 2u);
  }

  if (!*(_BYTE *)(a1 + 2320))
    goto LABEL_25;
  v9 = 1651733601;
LABEL_29:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
  return ErrorFromOSStatus(v9);
}

void sub_1B64E3098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_PreflightDownlink(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  char v21;
  uint8_t buf[88];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v20 = a1 + 192;
        v9 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
        v21 = v9;
        if ((v9 & 1) == 0)
        {
          vp::log((vp *)v9);
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "PreflightDownlink BadLock", buf, 2u);
          }

          v13 = 1651270507;
          goto LABEL_34;
        }
        if (*(_BYTE *)(a1 + 1304))
        {
          if (*(_BYTE *)(a1 + 2320))
          {
            v10 = *(_DWORD *)(a1 + 2300);
            if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
            {
              v13 = 1651270507;
              goto LABEL_34;
            }
            v11 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 168))(*(_QWORD *)(a1 + 168), (v10 + a3), a1 + 2304, a1 + 2308);
            if (v11)
            {
              v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
              *(_DWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = v11;
              *(_QWORD *)(v12 + 32) = "PreflightDownlink";
              *(_QWORD *)(v12 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoicePro"
                                      "cessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_"
                                      "type::PreflightDownlink, ArgTypeList = <unsigned int, unsigned int *, unsigned int *>]";
              *(_QWORD *)v12 = &off_1E69E4710;
              *(_QWORD *)(v12 + 8) = 0;
              caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v12);
            }
            std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
            if (*(_DWORD *)(a1 + 2304) > (*(_DWORD *)(a1 + 2300) + a3))
            {
              _os_assert_log();
              _os_crash();
              __break(1u);
            }
            else if (!(*(_DWORD *)(a1 + 2308) % *(_DWORD *)(a1 + 2240)))
            {
              v13 = 0;
              *(_DWORD *)(a1 + 2304) = a3;
              *a4 = a3;
              *a5 = *(_DWORD *)(a1 + 2308);
              *(_BYTE *)(a1 + 2312) = 1;
LABEL_34:
              std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v20);
              return ErrorFromOSStatus(v13);
            }
            _os_assert_log();
            _os_crash();
            __break(1u);
          }
        }
        else
        {
          vp::log((vp *)v9);
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B5ED0000, v18, OS_LOG_TYPE_ERROR, "PreflightDownlink BadState (uplink)", buf, 2u);
          }

          if (*(_BYTE *)(a1 + 2320))
            goto LABEL_32;
        }
        vp::log((vp *)v9);
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_ERROR, "PreflightDownlink BadState (downlink)", buf, 2u);
        }

LABEL_32:
        v13 = 1651733601;
        goto LABEL_34;
      }
      vp::log((vp *)a1);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_PreflightDownlink BadArgument (outNumProducesDownlinkOutputSamples)", buf, 2u);
      }
    }
    else
    {
      vp::log((vp *)a1);
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_PreflightDownlink BadArgument (outNumConsumedDownlinkInputSamples)", buf, 2u);
      }
    }

    return 1650553447;
  }
  vp::log(0);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_FAULT, "failed to preflight downlink due to bad reference", buf, 2u);
  }

  return 1651664230;
}

void sub_1B64E3498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  vp *v39;
  NSObject *v40;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v39 = (vp *)__cxa_begin_catch(exception_object);
    vp::log(v39);
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a29, "call_name");
      a33 = &a29;
      a34 = 1;
      a37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a35, &vp::call_traits<(vp::call_type)15>::name);
      a38 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 176, (uint64_t)&a29, 2, 1, 2);
      *(_QWORD *)(v38 - 160) = v38 - 176;
      *(_BYTE *)(v38 - 152) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a20);
      a22 = &a20;
      a23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[251],char [251],0>((uint64_t)&a24);
      a26 = &a24;
      a27 = 1;
      *(_QWORD *)(v38 - 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 144, (uint64_t)&a20, 2, 1, 2);
      *(_BYTE *)(v38 - 120) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a12, v38 - 176, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a12, 4, 0x20u, 0, 0, &__p);
      if (a19 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v38 - 112) = 136315138;
      *(_QWORD *)(v38 - 108) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v38 - 112), 0xCu);
      if (a19 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a12);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v38 - 176 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a20 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a29 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E31B0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessor_ProcessDownlink(uint64_t a1, int *a2)
{
  AudioBufferList *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint64_t result;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  double *v28;
  unsigned int *audio_buffer_list;
  _DWORD *v30;
  unsigned int *v31;
  const AudioBufferList *v32;
  unsigned int *v33;
  _DWORD *v34;
  const AudioBufferList *v35;
  unsigned int v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  AudioBufferList *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, double *);
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t i;
  util *v49;
  uint64_t v50;
  char v51;
  uint8_t buf[16];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    vp::log(0);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_FAULT, "failed to process downlink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
  if (!a2)
  {
    vp::log((vp *)a1);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_ProcessDownlink BadArgument (ioData)", buf, 2u);
    }

    return 1650553447;
  }
  v50 = a1 + 192;
  v5 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
  v51 = v5;
  if ((v5 & 1) == 0)
  {
    v11 = 1651270507;
    vp::log((vp *)v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v13 = "ProcessDownlink BadLock";
      goto LABEL_26;
    }
    goto LABEL_64;
  }
  if (!*(_BYTE *)(a1 + 1304))
  {
    vp::log((vp *)v5);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "ProcessDownlink BadState (uplink)", buf, 2u);
    }

    if (*(_BYTE *)(a1 + 2320))
    {
      v11 = 1651733601;
LABEL_65:
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v50);
      return ErrorFromOSStatus(v11);
    }
LABEL_24:
    v11 = 1651733601;
    vp::log((vp *)v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v13 = "ProcessDownlink BadState (downlink)";
      goto LABEL_26;
    }
    goto LABEL_64;
  }
  if (!*(_BYTE *)(a1 + 2320))
    goto LABEL_24;
  v6 = *(unsigned int *)(a1 + 1316);
  if (!(_DWORD)v6)
  {
LABEL_10:
    v11 = 1651076964;
    vp::log((vp *)v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v13 = "ProcessDownlink BadIOData";
      goto LABEL_26;
    }
LABEL_64:

    goto LABEL_65;
  }
  v7 = 0;
  v8 = a1 + 1312;
  v9 = *a2;
  v10 = 1320;
  while (*(_DWORD *)(a1 + v10) != v9)
  {
    ++v7;
    v10 += 280;
    if (v6 == v7)
      goto LABEL_10;
  }
  if (!*(_DWORD *)(v8 + 280 * v7 + 12))
  {
    if (*(_BYTE *)(a1 + 2312))
    {
      *(_BYTE *)(a1 + 2312) = 0;
      goto LABEL_30;
    }
    v11 = 1651733601;
    vp::log((vp *)v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_64;
    *(_WORD *)buf = 0;
    v13 = "ProcessDownlink BadState (preflight)";
LABEL_26:
    _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
    goto LABEL_64;
  }
LABEL_30:
  if (v9 == 1)
  {
    v18 = 0;
    v19 = 1320;
    while (*(_DWORD *)(a1 + v19) != 1)
    {
      ++v18;
      v19 += 280;
      if (v6 == v18)
      {
        _os_crash();
        __break(1u);
        break;
      }
    }
    v20 = *(unsigned int *)(v8 + 280 * v18 + 16);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = v19 + 12;
      v23 = v19 + 236;
      while (*(_DWORD *)(a1 + v22))
      {
        ++v21;
        v22 += 4;
        if (v20 == v21)
          goto LABEL_42;
      }
    }
    else
    {
LABEL_42:
      _os_crash();
      __break(1u);
    }
    v24 = *(unsigned int **)&a2[2 * v21 + 2];
    if (v24)
    {
      if (*(_QWORD *)&a2[2 * v21 + 12])
      {
        v25 = *(unsigned int *)(v8 + 280 * v18 + 240);
        if ((_DWORD)v25)
        {
          v26 = 0;
          v2 = (AudioBufferList *)a2[v21 + 22];
          while (*(_DWORD *)(a1 + v23) != 5)
          {
            ++v26;
            v23 += 4;
            if (v25 == v26)
              goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          _os_crash();
          __break(1u);
        }
        v27 = *(unsigned int **)&a2[2 * v26 + 28];
        if (v27)
        {
          v28 = *(double **)&a2[2 * v26 + 30];
          if (v28)
          {
            if (*(_DWORD *)(a1 + 2304) == (_DWORD)v2)
            {
              if (*(_DWORD *)(a1 + 2296))
              {
                audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2248));
                v30 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
                util::make_abl_view(audio_buffer_list, v30, *(unsigned int *)(a1 + 2296) | 0x100000000, (*(_DWORD *)(a1 + 2300) + *(_DWORD *)(a1 + 2296)) | 0x100000000);
                v31 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
                v32 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2248));
                util::copy_abl_data(v31, v32, (AudioBufferList *)*(unsigned int *)(a1 + 2300));
                *(_DWORD *)(a1 + 2296) = 0;
              }
              v33 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2248));
              v34 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
              util::make_abl_view(v33, v34, *(unsigned int *)(a1 + 2300) | 0x100000000, (*(_DWORD *)(a1 + 2300) + (_DWORD)v2) | 0x100000000);
              v35 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
              util::copy_abl_data(v24, v35, v2);
              *(_DWORD *)(a1 + 2300) += (_DWORD)v2;
              if (*(_DWORD *)(a1 + 2240) <= *(_DWORD *)(a1 + 2308))
              {
                v36 = 0;
                while (1)
                {
                  v37 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2288));
                  v38 = *(_DWORD *)(a1 + 2240);
                  v39 = v38 * v36++;
                  util::make_abl_view(v27, v37, v39 | 0x100000000, (v38 * v36) | 0x100000000);
                  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
                    break;
                  v41 = *(_QWORD *)(a1 + 168);
                  v42 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, double *))(*(_QWORD *)v41 + 72);
                  v43 = vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2288));
                  v44 = v42(v41, 0, 0, 0, v43, *(unsigned int *)(a1 + 2240), v28);
                  if (v44)
                  {
                    v45 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
                    *(_DWORD *)(v45 + 16) = 0;
                    *(_DWORD *)(v45 + 24) = v44;
                    *(_QWORD *)(v45 + 32) = "ProcessDownlinkAudio";
                    *(_QWORD *)(v45 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<Vo"
                                            "iceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType"
                                            " = vp::call_type::ProcessDownlinkAudio, ArgTypeList = <std::nullptr_t, std::"
                                            "nullptr_t, std::nullptr_t, vp::Audio_Buffer &, const unsigned int &, AudioTimeStamp &>]";
                    *(_QWORD *)v45 = &off_1E69E4740;
                    *(_QWORD *)(v45 + 8) = 0;
                    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v45);
                  }
                  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
                  v11 = 0;
                  v46 = *(_DWORD *)(a1 + 2240);
                  *v28 = *v28 + (double)v46;
                  if (v36 >= *(_DWORD *)(a1 + 2308) / v46)
                    goto LABEL_65;
                }
                v11 = 1651270507;
                v47 = a2[27];
                if ((_DWORD)v47)
                {
                  for (i = 0; i < v47; ++i)
                  {
                    v49 = *(util **)&a2[2 * i + 28];
                    if (v49)
                    {
                      util::zero_fill_abl(v49, v40);
                      v47 = a2[27];
                    }
                  }
                }
              }
              else
              {
                v11 = 0;
              }
              goto LABEL_65;
            }
LABEL_77:
            _os_assert_log();
            _os_crash();
            __break(1u);
          }
LABEL_76:
          _os_assert_log();
          _os_crash();
          __break(1u);
          goto LABEL_77;
        }
LABEL_75:
        _os_assert_log();
        _os_crash();
        __break(1u);
        goto LABEL_76;
      }
    }
    else
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_75;
  }
  if (v9)
  {
    v11 = 1650553447;
    vp::log((vp *)v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_64;
    *(_WORD *)buf = 0;
    v13 = "ProcessDownlink BadArgument (nodeType)";
    goto LABEL_26;
  }
  result = _os_crash();
  __break(1u);
  return result;
}

void sub_1B64E3FB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B64E3FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_GetBaseFactory_Private(_QWORD *a1)
{
  void *v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[16];

  if (a1)
  {
    v2 = _Block_copy(gVoiceProcessorBaseFactory);
    result = 0;
    *a1 = v2;
  }
  else
  {
    vp::log(0);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_ERROR, "VoiceProcessor_GetBaseFactory_Private BadArgument (outFactory)", v5, 2u);
    }

    return 1650553447;
  }
  return result;
}

uint64_t VoiceProcessor_SetBaseFactory_Private(const void *a1)
{
  void *v1;
  void *v2;

  if (!a1)
    a1 = &__block_literal_global_19509;
  v1 = _Block_copy(a1);
  v2 = gVoiceProcessorBaseFactory;
  gVoiceProcessorBaseFactory = v1;

  return 0;
}

uint64_t VoiceProcessor_GetParameter_Private(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  int v12[27];
  uint8_t buf[88];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a3)
    {
      v12[0] = 4;
      v6 = 1651270507;
      if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, int *))(**(_QWORD **)(a1 + 168) + 48))(*(_QWORD *)(a1 + 168), a2, a3, 4, v12);
        v6 = 0x1626C6300;
        if (v7)
        {
          v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
          *(_DWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = v7;
          *(_QWORD *)(v8 + 32) = "GetProperty";
          *(_QWORD *)(v8 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcesso"
                                 "rBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetP"
                                 "roperty, ArgTypeList = <unsigned int &, float *&, unsigned int &, unsigned int *>]";
          *(_QWORD *)v8 = &off_1E69E4770;
          *(_QWORD *)(v8 + 8) = 0;
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v8);
        }
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
      }
      if (v6 >= 0x100000000)
        v9 = 0x100000000;
      else
        v9 = v6;
      return ErrorFromOSStatus(v9);
    }
    else
    {
      return 1650553447;
    }
  }
  else
  {
    vp::log(0);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_FAULT, "failed to get parameter due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1B64E4254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _QWORD *v36;
  uint64_t v37;
  vp *v38;
  NSObject *v39;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v38 = (vp *)__cxa_begin_catch(a1);
    vp::log(v38);
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      v36[6] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)6>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v37 - 160, (uint64_t)&a27, 2, 1, 2);
      v36[10] = v37 - 160;
      *(_BYTE *)(v37 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[257],char [257],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetProperty, ArgTypeList = <unsigned int &, float *&, unsigned int &, unsigned int *>]");
      a24 = &a22;
      a25 = 1;
      v36[14] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v37 - 128, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v37 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v37 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v37 - 96) = 136315138;
      *(_QWORD *)((char *)v36 + 132) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v37 - 96), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v37 - 160 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E41A4);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_SetParameter_Private(uint64_t a1, uint64_t a2, float a3)
{
  int v5;
  uint64_t v6;
  NSObject *v8;
  float v9[43];
  uint8_t buf[88];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9[0] = a3;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, float *, uint64_t))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), a2, v9, 4);
    if (v5)
    {
      v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = v5;
      *(_QWORD *)(v6 + 32) = "SetProperty";
      *(_QWORD *)(v6 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBas"
                             "e>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty,"
                             " ArgTypeList = <unsigned int &, float *, const unsigned int &>]";
      *(_QWORD *)v6 = &off_1E69E47A0;
      *(_QWORD *)(v6 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v6);
    }
    std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
    return ErrorFromOSStatus(0x100000000);
  }
  else
  {
    vp::log(0);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_FAULT, "failed to set parameter due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1B64E4590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45)
{
  uint64_t v45;
  vp *v46;
  NSObject *v47;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v46 = (vp *)__cxa_begin_catch(a1);
    vp::log(v46);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)7>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v45 - 144, (uint64_t)&a27, 2, 1, 2);
      a39 = v45 - 144;
      *(_BYTE *)(v45 - 120) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[246],char [246],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty, ArgTypeList = <unsigned int &, float *, const unsigned int &>]");
      a24 = &a22;
      a25 = 1;
      a43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v45 - 112, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v45 - 88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v45 - 144, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      p_p = __p;
      if (a17 >= 0)
        p_p = (void **)&__p;
      *(_DWORD *)(v45 - 80) = 136315138;
      *(_QWORD *)((char *)&a45 + 4) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v45 - 80), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v45 - 144 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E44F0);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_GetProperty_Private(std::__shared_mutex_base *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t result;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t buf[88];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    result = 1650553447;
    if (a3 && a4)
    {
      v9 = 1651270507;
      if (std::__shared_mutex_base::try_lock_shared(this))
      {
        v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)this[1].__mut_.__m_.__sig
                                                                                           + 48))(this[1].__mut_.__m_.__sig, a2, a3, *a4, a4);
        v9 = 0x1626C6300;
        if (v10)
        {
          v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
          *(_DWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = v10;
          *(_QWORD *)(v11 + 32) = "GetProperty";
          *(_QWORD *)(v11 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcess"
                                  "orBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Ge"
                                  "tProperty, ArgTypeList = <unsigned int &, void *&, unsigned int &, unsigned int *&>]";
          *(_QWORD *)v11 = &off_1E69E47C8;
          *(_QWORD *)(v11 + 8) = 0;
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)this[1].__mut_.__m_.__opaque, (caulk::concurrent::message *)v11);
        }
        std::__shared_mutex_base::unlock_shared(this);
      }
      if (v9 >= 0x100000000)
        v12 = 0x100000000;
      else
        v12 = v9;
      return ErrorFromOSStatus(v12);
    }
  }
  else
  {
    vp::log(0);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_FAULT, "failed to get property due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
  return result;
}

void sub_1B64E490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  vp *v37;
  NSObject *v38;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v37 = (vp *)__cxa_begin_catch(a1);
    vp::log(v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)6>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(_QWORD *)(v36 - 144) = v36 - 160;
      *(_BYTE *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[257],char [257],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetProperty, ArgTypeList = <unsigned int &, void *&, unsigned int &, unsigned int *&>]");
      a24 = &a22;
      a25 = 1;
      *(_QWORD *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v36 - 96) = 136315138;
      *(_QWORD *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E4868);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessor_SetProperty_Private(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  NSObject *v6;
  unsigned int v7;
  uint8_t buf[12];
  unsigned int v9;

  if (a1)
  {
    if (a3)
    {
      v9 = a2;
      *(_QWORD *)buf = a3;
      v7 = a4;
      v4 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v9, buf, &v7);
      if (v4 >= 0x100000000)
        v4 = 0x100000000;
      return ErrorFromOSStatus(v4);
    }
    else
    {
      return 1650553447;
    }
  }
  else
  {
    vp::log(0);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_FAULT, "failed to set property due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

id vp::log(vp *this)
{
  if (vp::log(void)::onceToken != -1)
    dispatch_once(&vp::log(void)::onceToken, &__block_literal_global_6);
  return (id)vp::log(void)::g_log;
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(uint64_t a1, unsigned int *a2, _QWORD *a3, unsigned int *a4)
{
  int v8;
  uint64_t v9;

  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), *a2, *a3, *a4);
  if (v8)
  {
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 24) = v8;
    *(_QWORD *)(v9 + 32) = "SetProperty";
    *(_QWORD *)(v9 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>"
                           "::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty, Arg"
                           "TypeList = <unsigned int &, const void *&, unsigned int &>]";
    *(_QWORD *)v9 = &off_1E69E47F0;
    *(_QWORD *)(v9 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v9);
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  return 0x1626C6300;
}

void sub_1B64E4CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  vp *v37;
  NSObject *v38;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v37 = (vp *)__cxa_begin_catch(a1);
    vp::log(v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)7>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 144, (uint64_t)&a27, 2, 1, 2);
      *(_QWORD *)(v36 - 128) = v36 - 144;
      *(_BYTE *)(v36 - 120) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[246],char [246],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty, ArgTypeList = <unsigned int &, const void *&, unsigned int &>]");
      a24 = &a22;
      a25 = 1;
      *(_QWORD *)(v36 - 96) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 112, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v36 - 88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 144, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v36 - 80) = 136315138;
      *(_QWORD *)(v36 - 76) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 80), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 144 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E4CA0);
  }
  _Unwind_Resume(a1);
}

uint64_t ErrorFromOSStatus(uint64_t result)
{
  int v1;

  if ((int)result <= 1651270506)
  {
    if ((int)result > 1650681446)
    {
      if ((_DWORD)result == 1650681447)
        return result;
      v1 = 1651076964;
    }
    else
    {
      if (!(_DWORD)result)
        return result;
      v1 = 1650553447;
    }
  }
  else if ((int)result > 1651733600)
  {
    if ((_DWORD)result == 1651733601)
      return result;
    v1 = 2004186175;
  }
  else
  {
    if ((result - 1651270507) < 2)
      return result;
    v1 = 1651664230;
  }
  if ((_DWORD)result != v1)
    return 2004186175;
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "call_signature");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E4FC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[246],char [246],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E5034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "call_status");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E5548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN2vpL3logEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "voice_processor_spi");
  v1 = (void *)vp::log(void)::g_log;
  vp::log(void)::g_log = (uint64_t)v0;

}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[257],char [257],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E55EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E5924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E5DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E6274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

unsigned int *util::make_abl_view(unsigned int *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  _QWORD *i;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;

  if (!result)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  if (!a2)
  {
LABEL_18:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  v4 = *result;
  if ((_DWORD)v4 != *a2)
  {
LABEL_19:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_20;
  }
  if (!(_DWORD)v4)
    return result;
  if ((a3 & 0xFF00000000) != 0)
    v5 = a3;
  else
    v5 = 0;
  v6 = result + 2;
  for (i = a2 + 4; ; i += 2)
  {
    v9 = *v6;
    v8 = v6[1];
    v10 = *v6 * v5;
    if (4 * v10 > v8)
      break;
    *i = *((_QWORD *)v6 + 1) + 4 * v10;
    *((_DWORD *)i - 2) = v9;
    if ((a4 & 0xFF00000000) != 0)
    {
      if (v5 > a4)
        goto LABEL_21;
      v11 = *v6 * a4;
      if (v8 < 4 * (unint64_t)v11)
        goto LABEL_22;
      v12 = 4 * (v11 - v10);
    }
    else
    {
      v12 = v8 - 4 * v10;
    }
    *((_DWORD *)i - 1) = v12;
    v6 += 4;
    if (!--v4)
      return result;
  }
LABEL_20:
  _os_crash();
  __break(1u);
LABEL_21:
  _os_crash();
  __break(1u);
LABEL_22:
  result = (unsigned int *)_os_crash();
  __break(1u);
  return result;
}

unsigned int *util::copy_abl_data(unsigned int *this, const AudioBufferList *a2, AudioBufferList *a3)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;

  if (!this)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_11:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v4 = this;
  if (*this != a2->mNumberBuffers)
  {
LABEL_12:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*this)
    return this;
  v5 = 0;
  v6 = 0;
  v7 = 4 * a3;
  while (v4[v5 + 3] >= v7)
  {
    if (a2->mBuffers[v5 / 4].mDataByteSize < v7)
      goto LABEL_14;
    this = (unsigned int *)memcpy(a2->mBuffers[v5 / 4].mData, *(const void **)&v4[v5 + 4], v7);
    ++v6;
    v5 += 4;
    if (v6 >= *v4)
      return this;
  }
LABEL_13:
  _os_crash();
  __break(1u);
LABEL_14:
  this = (unsigned int *)_os_crash();
  __break(1u);
  return this;
}

void util::zero_fill_abl(util *this, AudioBufferList *a2)
{
  uint64_t v3;
  void **i;

  if (*(_DWORD *)this)
  {
    v3 = 0;
    for (i = (void **)((char *)this + 16); *i; i += 2)
    {
      bzero(*i, *((unsigned int *)i - 1));
      if (++v3 >= (unint64_t)*(unsigned int *)this)
        return;
    }
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[316],char [316],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::ProcessDownlinkAudio, ArgTypeList = <std::nullptr_t, std::nullptr_t, std::nullptr_t, vp::Audio_Buffer &, const unsigned int &, AudioTimeStamp &>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E66A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E69D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[251],char [251],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::PreflightDownlink, ArgTypeList = <unsigned int, unsigned int *, unsigned int *>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E6BB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E6EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t VoiceProcessorImplementation::ProcessAllOfULDSP(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *audio_buffer_list;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  unsigned int *v24;
  _DWORD *v25;
  _DWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  AudioBufferList *v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  const AudioBufferList *v46;
  uint64_t v47;
  unsigned int *v48;
  _DWORD *v49;
  AudioBufferList *v50;
  unsigned int *v51;
  const AudioBufferList *v52;
  unsigned int *v53;
  uint64_t result;
  NSObject *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  __int128 *v60;
  unsigned int *v61;
  caulk::concurrent::messenger *v62;
  double *v63;
  AudioBufferList *v64;
  vp::Audio_Buffer *v65;
  vp::Audio_Buffer *v66;
  vp::Audio_Buffer *v67;
  vp::Audio_Buffer *v68;
  void *v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  _OWORD v74[4];
  uint8_t buf[4];
  int v76;
  __int16 v77;
  unsigned int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 0);
  v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0);
  v6 = *(unsigned int **)(a2 + 8 * v5 + 8);
  if (!v6)
    goto LABEL_38;
  v7 = v5;
  v60 = *(__int128 **)(a2 + 8 * v5 + 32);
  if (!v60)
  {
LABEL_39:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_40;
  }
  v8 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2);
  v61 = *(unsigned int **)(a2 + 8 * v8 + 8);
  if (!v61)
  {
LABEL_40:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_41;
  }
  v9 = v8;
  v10 = *(__int128 **)(a2 + 8 * v8 + 32);
  if (!v10)
  {
LABEL_41:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_42;
  }
  v11 = util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3);
  v64 = *(AudioBufferList **)(a2 + 8 * v11 + 72);
  if (!v64)
  {
LABEL_42:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_43;
  }
  v63 = *(double **)(a2 + 8 * v11 + 96);
  if (!v63)
  {
LABEL_43:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_44;
  }
  v12 = *(_DWORD *)(a2 + 4 * v7 + 56);
  if (v12 != *(_DWORD *)(a1 + 1292))
  {
LABEL_44:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  if (*(_DWORD *)(a2 + 4 * v9 + 56) != v12)
  {
LABEL_45:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_46:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  if (v12 % *(_DWORD *)(a1 + 1236))
    goto LABEL_46;
  v13 = *(_DWORD *)(a1 + 1288);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 1296);
    audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 1280));
    if (v13 >= v14)
    {
      util::copy_abl_data(audio_buffer_list, v64, (AudioBufferList *)*(unsigned int *)(a1 + 1296));
      v13 = *(_DWORD *)(a1 + 1296);
      *(_DWORD *)(a1 + 1288) -= v13;
      *v63 = *v63 + (double)v13;
      v12 = *(_DWORD *)(a1 + 1292);
      if (v12)
      {
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    else
    {
      util::copy_abl_data(audio_buffer_list, v64, (AudioBufferList *)*(unsigned int *)(a1 + 1288));
      v13 = *(_DWORD *)(a1 + 1288);
      *(_DWORD *)(a1 + 1288) = 0;
      *v63 = *v63 + (double)v13;
      v12 = *(_DWORD *)(a1 + 1292);
    }
  }
  v16 = *(_DWORD *)(a1 + 1236);
  if (v16 > v12)
    return 0;
  v57 = a2;
  v18 = 0;
  v19 = v12 / v16;
  v66 = (vp::Audio_Buffer *)(a1 + 1256);
  v67 = (vp::Audio_Buffer *)(a1 + 1264);
  v68 = (vp::Audio_Buffer *)(a1 + 1272);
  v65 = (vp::Audio_Buffer *)(a1 + 1280);
  v20 = v19 - 1;
  v56 = v19;
  if (v19 <= 1)
    v19 = 1;
  v58 = v20;
  v59 = v19;
  v62 = (caulk::concurrent::messenger *)(a1 + 176);
  while (1)
  {
    v21 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v66);
    v22 = v18 + 1;
    util::make_abl_view(v6, v21, (*(_DWORD *)(a1 + 1236) * v18) | 0x100000000, (*(_DWORD *)(a1 + 1236) * (v18 + 1)) | 0x100000000);
    v23 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v67);
    util::make_abl_view(v61, v23, (*(_DWORD *)(a1 + 1236) * v18) | 0x100000000, (*(_DWORD *)(a1 + 1236) * (v18 + 1)) | 0x100000000);
    if (*(_DWORD *)(a1 + 1296) - v13 >= *(_DWORD *)(a1 + 1248))
    {
      v26 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      util::make_abl_view(&v64->mNumberBuffers, v26, v13 | 0x100000000, 0);
    }
    else
    {
      v24 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v65);
      v25 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      util::make_abl_view(v24, v25, 0, 0);
      if (*(_DWORD *)(a1 + 1288))
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_38:
        _os_assert_log();
        _os_crash();
        __break(1u);
        goto LABEL_39;
      }
    }
    v27 = v10[3];
    v29 = *v10;
    v28 = v10[1];
    v74[2] = v10[2];
    v74[3] = v27;
    v74[0] = v29;
    v74[1] = v28;
    *(double *)v74 = *(double *)&v29 + (double)(*(_DWORD *)(a1 + 1236) * v18);
    v30 = vp::Audio_Buffer::get_audio_buffer_list(v67);
    if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
      break;
    v32 = (*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 168) + 128))(*(_QWORD *)(a1 + 168), v30, v74);
    if (v32)
    {
      v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v33 + 16) = 0;
      *(_DWORD *)(v33 + 24) = v32;
      *(_QWORD *)(v33 + 32) = "AppendReferenceSignal";
      *(_QWORD *)(v33 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBa"
                              "se>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::AppendRefe"
                              "renceSignal, ArgTypeList = <AudioBufferList &, CA::TimeStamp &>]";
      *(_QWORD *)v33 = &off_1E69E4598;
      *(_QWORD *)(v33 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v62, (caulk::concurrent::message *)v33);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
    v73 = 0;
    v34 = v60[3];
    v36 = *v60;
    v35 = v60[1];
    v71 = v60[2];
    v72 = v34;
    *(_OWORD *)v69 = v36;
    v70 = v35;
    *(double *)v69 = *(double *)&v36 + (double)(*(_DWORD *)(a1 + 1236) * v18);
    v37 = vp::Audio_Buffer::get_audio_buffer_list(v66);
    v38 = vp::Audio_Buffer::get_audio_buffer_list(v68);
    if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
      break;
    v39 = (*(uint64_t (**)(_QWORD, uint64_t, void **, uint64_t, double *, unsigned int *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), v37, v69, v38, v63, &v73, 0, 0, 0);
    if (v39)
    {
      v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v40 + 16) = 0;
      *(_DWORD *)(v40 + 24) = v39;
      *(_QWORD *)(v40 + 32) = "Process";
      *(_QWORD *)(v40 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBa"
                              "se>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Process, A"
                              "rgTypeList = <AudioBufferList &, CA::TimeStamp &, AudioBufferList &, AudioTimeStamp &, uns"
                              "igned int &, std::nullptr_t, std::nullptr_t, std::nullptr_t>]";
      *(_QWORD *)v40 = &off_1E69E45C8;
      *(_QWORD *)(v40 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v62, (caulk::concurrent::message *)v40);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
    if (*(_DWORD *)(a1 + 1296) - v13 >= *(_DWORD *)(a1 + 1248))
    {
      v13 += v73;
    }
    else
    {
      v41 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      util::make_abl_view(&v64->mNumberBuffers, v41, v13 | 0x100000000, 0);
      v42 = *(_DWORD *)(a1 + 1296);
      v43 = v42 - v13;
      v44 = v73;
      v45 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v65);
      v46 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      if (v43 <= v44)
      {
        util::copy_abl_data(v45, v46, (AudioBufferList *)(v42 - v13));
        v47 = v73;
        v48 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v65);
        v49 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
        util::make_abl_view(v48, v49, v43 | 0x100000000, v47 | 0x100000000);
        v50 = (AudioBufferList *)(v47 - v43);
        v51 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v68);
        v52 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v65);
        v53 = util::copy_abl_data(v51, v52, v50);
        *(_DWORD *)(a1 + 1288) = (_DWORD)v50;
        v13 = v42;
        if (v18 != v58)
        {
          vp::log((vp *)v53);
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109376;
            v76 = v18;
            v77 = 1024;
            v78 = v56;
            _os_log_fault_impl(&dword_1B5ED0000, v55, OS_LOG_TYPE_FAULT, "I/O rate mismatch has occurred on I/O cycle %u out of %d", buf, 0xEu);
          }

          std::terminate();
        }
      }
      else
      {
        util::copy_abl_data(v45, v46, (AudioBufferList *)v73);
        v13 += v73;
        *(_DWORD *)(a1 + 1288) = 0;
      }
    }
    ++v18;
    if (v22 == v59)
      return 0;
  }
  v17 = 1651270507;
  VoiceProcessorImplementation::ZeroOut(v57, v31);
  return v17;
}

void sub_1B64E7B58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessULHardwareDSP(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  AudioBufferList *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  AudioBufferList *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  AudioBufferList *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[22];
  unsigned int v26[16];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 1);
  v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0);
  v6 = *(_QWORD *)(a2 + 8 * v5 + 8);
  if (!v6)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
  v7 = *(_QWORD *)(a2 + 8 * v5 + 32);
  if (!v7)
  {
LABEL_26:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  v8 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2);
  v9 = *(_QWORD *)(a2 + 8 * v8 + 8);
  if (!v9)
  {
LABEL_27:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  v10 = *(_QWORD *)(a2 + 8 * v8 + 32);
  if (!v10)
  {
LABEL_28:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_29;
  }
  v25[0] = *(_QWORD *)(a2
                     + 8
                     * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0)+ 72);
  if (!v25[0])
  {
LABEL_29:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  v24 = *(_QWORD *)(a2
                  + 8
                  * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 1)+ 72);
  if (!v24)
  {
LABEL_30:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_31:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  v23 = *(_QWORD *)(a2
                  + 8
                  * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2)+ 72);
  if (!v23)
    goto LABEL_31;
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    v14 = 1651270507;
LABEL_13:
    VoiceProcessorImplementation::ZeroOut(a2, v11);
    return v14;
  }
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 128))(*(_QWORD *)(a1 + 168), v9, v10);
  if (v12)
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = v12;
    *(_QWORD *)(v13 + 32) = "AppendReferenceSignal";
    *(_QWORD *)(v13 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase"
                            ">::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::AppendReferenc"
                            "eSignal, ArgTypeList = <AudioBufferList &, AudioTimeStamp &>]";
    *(_QWORD *)v13 = &off_1E69E45F0;
    *(_QWORD *)(v13 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v13);
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    VoiceProcessorImplementation::ZeroOut(a2, v17);
    return 1651270507;
  }
  v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 192))(*(_QWORD *)(a1 + 168), v6, v7);
  if (v18)
  {
    v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v19 + 16) = 0;
    *(_DWORD *)(v19 + 24) = v18;
    *(_QWORD *)(v19 + 32) = "RunUplinkHardwareDSP";
    *(_QWORD *)(v19 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase"
                            ">::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkHardw"
                            "areDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&>]";
    *(_QWORD *)v19 = &off_1E69E4620;
    *(_QWORD *)(v19 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v19);
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  v26[0] = 0;
  v20 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v26, v25);
  if (!HIDWORD(v20))
  {
    v14 = v20;
    goto LABEL_13;
  }
  v26[0] = 1;
  v21 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v26, &v23);
  if (HIDWORD(v21))
  {
    v26[0] = 2;
    v21 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v26, &v24);
    if (HIDWORD(v21))
      return 0;
  }
  v14 = v21;
  VoiceProcessorImplementation::ZeroOut(a2, v22);
  return v14;
}

void sub_1B64E7EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,__int16 *a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  vp *v51;
  NSObject *v52;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v51 = (vp *)__cxa_begin_catch(a1);
    vp::log(v51);
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a29, "call_name");
      a33 = &a29;
      a34 = 1;
      a37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a35, &vp::call_traits<(vp::call_type)9>::name);
      a38 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a40, (uint64_t)&a29, 2, 1, 2);
      a44 = &a40;
      a45 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a20);
      a22 = &a20;
      a23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[247],char [247],0>((uint64_t)&a24);
      a26 = &a24;
      a27 = 1;
      a48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a46, (uint64_t)&a20, 2, 1, 2);
      a49 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a12, (uint64_t)&a40, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a12, 4, 0x20u, 0, 0, &__p);
      if (a19 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v50 - 128) = 136315138;
      *(_QWORD *)(v49 + 4) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v50 - 128), 0xCu);
      if (a19 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a12);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a40 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a20 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a29 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E7DDCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessULEchoDSP(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unint64_t v10;
  AudioBufferList *v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  AudioBufferList *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD v23[22];
  unsigned int v24[22];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 2);
  v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0);
  v23[0] = *(_QWORD *)(a2 + 8 * v5 + 8);
  if (!v23[0])
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
  v6 = *(_QWORD *)(a2 + 8 * v5 + 32);
  if (!v6)
  {
LABEL_26:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  v7 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2);
  v8 = *(_DWORD **)(a2 + 8 * v7 + 8);
  v22 = v8;
  if (!v8)
  {
LABEL_27:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  if (!*(_QWORD *)(a2 + 8 * v7 + 32))
  {
LABEL_28:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_29;
  }
  v9 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 1);
  v21 = *(_QWORD *)(a2 + 8 * v9 + 8);
  if (!v21)
  {
LABEL_29:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a2 + 8 * v9 + 32))
  {
LABEL_30:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_31:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  v20 = *(_QWORD *)(a2
                  + 8
                  * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3)+ 72);
  if (!v20)
    goto LABEL_31;
  v24[0] = 3;
  v10 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(a1, v24, v23);
  if (HIDWORD(v10))
  {
    if (*v8)
    {
      v13 = 0;
      v14 = (void **)(v8 + 4);
      do
      {
        bzero(*v14, *((unsigned int *)v14 - 1));
        ++v13;
        v14 += 2;
      }
      while (v13 < *v8);
    }
    v24[0] = 4;
    v15 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(a1, v24, &v22);
    if (HIDWORD(v15))
    {
      v24[0] = 5;
      v15 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(a1, v24, &v21);
      if (HIDWORD(v15))
      {
        v12 = 1651270400;
        if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
        {
          v12 = 1651270507;
          goto LABEL_10;
        }
        v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 200))(*(_QWORD *)(a1 + 168), v6);
        if (v18)
        {
          v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
          *(_DWORD *)(v19 + 16) = 0;
          *(_DWORD *)(v19 + 24) = v18;
          *(_QWORD *)(v19 + 32) = "RunUplinkHardwareDSP";
          *(_QWORD *)(v19 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcess"
                                  "orBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Ru"
                                  "nUplinkEchoDSP, ArgTypeList = <AudioTimeStamp *&>]";
          *(_QWORD *)v19 = &off_1E69E46B0;
          *(_QWORD *)(v19 + 8) = 0;
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v19);
          v18 = 0;
        }
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
        if (v18)
          goto LABEL_10;
        v24[0] = 6;
        v15 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v24, &v20);
        if (HIDWORD(v15))
          return 0;
      }
    }
    v12 = v15;
    VoiceProcessorImplementation::ZeroOut(a2, v16);
    return v12;
  }
  v12 = v10;
LABEL_10:
  VoiceProcessorImplementation::ZeroOut(a2, v11);
  return v12;
}

void sub_1B64E8598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,uint64_t *a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,__int16 *a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  vp *v41;
  NSObject *v42;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v41 = (vp *)__cxa_begin_catch(a1);
    vp::log(v41);
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a31, "call_name");
      a35 = &a31;
      a36 = 1;
      a39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a37, &vp::call_traits<(vp::call_type)10>::name);
      a40 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v40 - 160, (uint64_t)&a31, 2, 1, 2);
      *(_QWORD *)(v40 - 144) = v40 - 160;
      *(_BYTE *)(v40 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a22);
      a24 = &a22;
      a25 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[223],char [223],0>((uint64_t)&a26);
      a28 = &a26;
      a29 = 1;
      *(_QWORD *)(v40 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v40 - 128, (uint64_t)&a22, 2, 1, 2);
      *(_BYTE *)(v40 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a14, v40 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a14, 4, 0x20u, 0, 0, &__p);
      if (a21 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v40 - 96) = 136315138;
      *(_QWORD *)(v40 - 92) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v42, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v40 - 96), 0xCu);
      if (a21 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a14);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v40 - 160 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a22 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a31 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E84E4);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessULDynamicsDSP(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  AudioBufferList *v8;
  uint64_t v9;
  uint64_t v10;
  AudioBufferList *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;

  v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 3);
  v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3);
  v6 = *(unsigned int **)(a2 + 8 * v5 + 8);
  if (!v6)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(a2 + 8 * v5 + 32);
  if (!v7)
  {
LABEL_13:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_14:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  v8 = (AudioBufferList *)*(unsigned int *)(a2 + 4 * v5 + 56);
  v9 = a2
     + 8
     * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3);
  v10 = *(_QWORD *)(v9 + 72);
  if (!v10)
    goto LABEL_14;
  util::copy_abl_data(v6, *(const AudioBufferList **)(v9 + 72), v8);
  v12 = 1651270507;
  if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, AudioBufferList *))(**(_QWORD **)(a1 + 168) + 208))(*(_QWORD *)(a1 + 168), v10, v7, v8);
    v12 = 0x1626C6300;
    if (v13)
    {
      v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 24) = v13;
      *(_QWORD *)(v14 + 32) = "RunUplinkDynamicsDSP";
      *(_QWORD *)(v14 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBa"
                              "se>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkD"
                              "ynamicsDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&, unsigned int &>]";
      *(_QWORD *)v14 = &off_1E69E46E0;
      *(_QWORD *)(v14 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v14);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  else
  {
    VoiceProcessorImplementation::ZeroOut(a2, v11);
  }
  if (v12 >= 0x100000000)
    return 0x100000000;
  else
    return v12;
}

void sub_1B64E8924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  vp *v37;
  NSObject *v38;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v37 = (vp *)__cxa_begin_catch(a1);
    vp::log(v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)11>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(_QWORD *)(v36 - 144) = v36 - 160;
      *(_BYTE *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[263],char [263],0>((uint64_t)&a22);
      a24 = &a22;
      a25 = 1;
      *(_QWORD *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v36 - 96) = 136315138;
      *(_QWORD *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E889CLL);
  }
  _Unwind_Resume(a1);
}

_DWORD *util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2)
  {
    result = (_DWORD *)(a1 + 8);
    while (*result != a2)
    {
      result += 70;
      if (!--v2)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    result = 0;
    v5 = a1 + 12;
    while (*(_DWORD *)(v5 + 4 * result) != a2)
    {
      if (v2 == ++result)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v2)
  {
    result = 0;
    v5 = a1 + 148;
    while (*(_DWORD *)(v5 + 4 * result) != a2)
    {
      if (v2 == ++result)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void VoiceProcessorImplementation::ZeroOut(uint64_t a1, AudioBufferList *a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  util *v6;

  v2 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = a1 + 72;
    do
    {
      v6 = *(util **)(v5 + 8 * v4);
      if (v6)
      {
        util::zero_fill_abl(v6, a2);
        v2 = *(unsigned int *)(a1 + 68);
      }
      ++v4;
    }
    while (v4 < v2);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[263],char [263],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkDynamicsDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&, unsigned int &>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E8C88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E8FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  v6 = 1651270507;
  if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 184))(*(_QWORD *)(a1 + 168), *a2, *a3);
    v6 = 0x1626C6300;
    if (v7)
    {
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = "WriteBuffer";
      *(_QWORD *)(v8 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBas"
                             "e>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::WriteBuffer,"
                             " ArgTypeList = <vp::BufferID, AudioBufferList *&>]";
      *(_QWORD *)v8 = &off_1E69E4680;
      *(_QWORD *)(v8 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v8);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  return v6;
}

void sub_1B64E9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  vp *v37;
  NSObject *v38;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v37 = (vp *)__cxa_begin_catch(a1);
    vp::log(v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)13>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(_QWORD *)(v36 - 144) = v36 - 160;
      *(_BYTE *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[233],char [233],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::WriteBuffer, ArgTypeList = <vp::BufferID, AudioBufferList *&>]");
      a24 = &a22;
      a25 = 1;
      *(_QWORD *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v36 - 96) = 136315138;
      *(_QWORD *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E920CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;

  v6 = 1651270507;
  if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 176))(*(_QWORD *)(a1 + 168), *a2, *a3);
    v6 = 0x1626C6300;
    if (v7)
    {
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = "ReadBuffer";
      *(_QWORD *)(v8 + 40) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBas"
                             "e>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::ReadBuffer, "
                             "ArgTypeList = <vp::BufferID, AudioBufferList *&>]";
      *(_QWORD *)v8 = &off_1E69E4650;
      *(_QWORD *)(v8 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v8);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  return v6;
}

void sub_1B64E9534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  vp *v37;
  NSObject *v38;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v37 = (vp *)__cxa_begin_catch(a1);
    vp::log(v37);
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)12>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(_QWORD *)(v36 - 144) = v36 - 160;
      *(_BYTE *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[232],char [232],0>((uint64_t)&a22);
      a24 = &a22;
      a25 = 1;
      *(_QWORD *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(_BYTE *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      *(_DWORD *)(v36 - 96) = 136315138;
      *(_QWORD *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64E94F0);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[232],char [232],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::ReadBuffer, ArgTypeList = <vp::BufferID, AudioBufferList *&>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E975C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[223],char [223],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkEchoDSP, ArgTypeList = <AudioTimeStamp *&>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64E9C70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64E9FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[233],char [233],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EA18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64EA4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[247],char [247],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkHardwareDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EA6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64EA9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64EAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[332],char [332],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Process, ArgTypeList = <AudioBufferList &, CA::TimeStamp &, AudioBufferList &, AudioTimeStamp &, unsigned int &, std::nullptr_t, std::nullptr_t, std::nullptr_t>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EB05C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64EB394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[245],char [245],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::AppendReferenceSignal, ArgTypeList = <AudioBufferList &, CA::TimeStamp &>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EB570(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64EB8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE7performEv(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  NSObject *v3;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  caulk::concurrent::message *v10;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  char *v15;
  char *v16;
  _BYTE v17[16];
  _BYTE *v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  _BYTE v23[16];
  _BYTE *v24;
  char v25;
  _BYTE v26[16];
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  _BYTE *v30;
  char v31;
  _BYTE v32[8];
  _QWORD v33[2];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  _QWORD v38[3];
  char v39;
  _BYTE v40[16];
  _BYTE *v41;
  char v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = (caulk::concurrent::message *)a1;
  v1 = *(int *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  v15 = *(char **)(a1 + 40);
  v16 = v2;
  vp::log((vp *)a1);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    v30 = v29;
    v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    v24 = v23;
    v25 = 1;
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    v18 = v17;
    v19 = 1;
    v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    v41 = v40;
    v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v44 = v5;
    _os_log_error_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE10rt_cleanupD2Ev(&v10);
}

void sub_1B64EBD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t ___ZN28VoiceProcessorImplementation18InitializeDownlinkERK35VoiceProcessorDownlinkConfiguration_block_invoke(uint64_t a1, const AudioBufferList *a2, uint64_t a3, _DWORD *a4)
{
  unsigned int *v6;
  unsigned int *audio_buffer_list;
  _DWORD *v8;
  unsigned int *v9;

  v6 = *(unsigned int **)(a1 + 32);
  audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(v6 + 562));
  v8 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(v6 + 564));
  util::make_abl_view(audio_buffer_list, v8, v6[574] | 0x100000000, (v6[575] + v6[574]) | 0x100000000);
  v9 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(v6 + 564));
  util::copy_abl_data(v9, a2, (AudioBufferList *)*a4);
  v6[574] += *a4;
  v6[575] -= *a4;
  return 0;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[378],char [378],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::InitializeDownlinkProcessing, ArgTypeList = <const AudioStreamBasicDescription &, unsigned int &, const AudioStreamBasicDescription &, int (^__strong &)(AudioBufferList *, AudioTimeStamp *, unsigned int *)>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EBFD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorDownlinkTerminalType>>(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7[8];
  uint64_t *v8;

  if (*a2)
  {
    v4 = 0;
    do
    {
      v5 = *((_QWORD *)a2 + 1);
      v8 = 0;
      v6 = (uint64_t *)*(unsigned int *)(v5 + 4 * v4);
      v7[0] = 5;
      v8 = v6;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a1, (uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      ++v4;
    }
    while (v4 < *a2);
  }
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned __int8 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned __int8 v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  unsigned __int8 v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned __int8 v40;
  uint64_t *v41;
  unsigned __int8 v43[8];
  uint64_t *v44;
  unsigned __int8 v45[8];
  uint64_t *v46;
  unsigned __int8 v47[8];
  uint64_t *v48;
  unsigned __int8 v49[8];
  uint64_t *v50;
  unsigned __int8 v51[8];
  uint64_t *v52;
  unsigned __int8 v53[8];
  uint64_t *v54;
  unsigned __int8 v55[8];
  uint64_t *v56;
  unsigned __int8 v57[8];
  uint64_t *v58;
  unsigned __int8 v59[8];
  uint64_t *v60;
  unsigned __int8 v61[8];
  uint64_t *v62;

  if (*a2)
  {
    v3 = 0;
    v4 = 36;
    do
    {
      v5 = *((_QWORD *)a2 + 1);
      v43[0] = 0;
      v44 = 0;
      v6 = *(uint64_t **)(v5 + v4 - 36);
      v61[0] = 7;
      v62 = v6;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "sample_rate");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      v8 = *(_BYTE *)v7;
      *(_BYTE *)v7 = v61[0];
      v61[0] = v8;
      v9 = (uint64_t *)v7[1];
      v7[1] = (uint64_t)v62;
      v62 = v9;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, v61[0]);
      v10 = (uint64_t *)*(unsigned int *)(v5 + v4 - 28);
      v59[0] = 6;
      v60 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "format_id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      v12 = *(_BYTE *)v11;
      *(_BYTE *)v11 = v59[0];
      v59[0] = v12;
      v13 = (uint64_t *)v11[1];
      v11[1] = (uint64_t)v60;
      v60 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v60, v59[0]);
      v14 = (uint64_t *)*(unsigned int *)(v5 + v4 - 24);
      v57[0] = 6;
      v58 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "foramt_flags");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      v16 = *(_BYTE *)v15;
      *(_BYTE *)v15 = v57[0];
      v57[0] = v16;
      v17 = (uint64_t *)v15[1];
      v15[1] = (uint64_t)v58;
      v58 = v17;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v58, v57[0]);
      v18 = (uint64_t *)*(unsigned int *)(v5 + v4 - 20);
      v55[0] = 6;
      v56 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bytes_per_packet");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      v20 = *(_BYTE *)v19;
      *(_BYTE *)v19 = v55[0];
      v55[0] = v20;
      v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v56;
      v56 = v21;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);
      v22 = (uint64_t *)*(unsigned int *)(v5 + v4 - 16);
      v53[0] = 6;
      v54 = v22;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "frames_per_packet");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      v24 = *(_BYTE *)v23;
      *(_BYTE *)v23 = v53[0];
      v53[0] = v24;
      v25 = (uint64_t *)v23[1];
      v23[1] = (uint64_t)v54;
      v54 = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
      v26 = (uint64_t *)*(unsigned int *)(v5 + v4 - 12);
      v51[0] = 6;
      v52 = v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bytes_per_frame");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      v28 = *(_BYTE *)v27;
      *(_BYTE *)v27 = v51[0];
      v51[0] = v28;
      v29 = (uint64_t *)v27[1];
      v27[1] = (uint64_t)v52;
      v52 = v29;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
      v30 = (uint64_t *)*(unsigned int *)(v5 + v4 - 8);
      v49[0] = 6;
      v50 = v30;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "channels_per_frame");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      v32 = *(_BYTE *)v31;
      *(_BYTE *)v31 = v49[0];
      v49[0] = v32;
      v33 = (uint64_t *)v31[1];
      v31[1] = (uint64_t)v50;
      v50 = v33;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
      v34 = (uint64_t *)*(unsigned int *)(v5 + v4 - 4);
      v47[0] = 6;
      v48 = v34;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bits_per_channel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      v36 = *(_BYTE *)v35;
      *(_BYTE *)v35 = v47[0];
      v47[0] = v36;
      v37 = (uint64_t *)v35[1];
      v35[1] = (uint64_t)v48;
      v48 = v37;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
      v38 = (uint64_t *)*(unsigned int *)(v5 + v4);
      v45[0] = 6;
      v46 = v38;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "reserved");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      v40 = *(_BYTE *)v39;
      *(_BYTE *)v39 = v45[0];
      v45[0] = v40;
      v41 = (uint64_t *)v39[1];
      v39[1] = (uint64_t)v46;
      v46 = v41;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a1, (uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
      ++v3;
      v4 += 40;
    }
    while (v3 < *a2);
  }
}

void sub_1B64EC5B8(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t VoiceProcessorImplementation::InitializeUplink(_BYTE *a1, unsigned int *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned __int8 v29;
  uint64_t *v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint8_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  char v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned __int8 v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  unsigned __int8 v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned __int8 v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  unsigned __int8 v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned __int8 v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  unsigned __int8 v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  unsigned __int8 v84;
  uint64_t *v85;
  void **v86;
  vp *v87;
  uint64_t IsValid;
  NSObject *v89;
  const char *v90;
  uint64_t i;
  vp *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  NSObject *v96;
  _DWORD *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  float v103;
  NSObject *v104;
  unint64_t v105;
  _DWORD *v107;
  double *v108;
  _DWORD *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  const void *v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t v121;
  const void *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  int v126;
  std::pmr *v127;
  __int128 v128;
  __int128 v129;
  uint64_t default_resource;
  std::pmr *v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  std::pmr *v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  std::pmr *v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  vp *v143;
  NSObject *v144;
  NSObject *v145;
  const char *v146;
  NSObject *log;
  uint8_t v148[16];
  __int128 v149;
  uint64_t v150;
  _OWORD v151[2];
  uint64_t v152;
  _OWORD v153[2];
  uint64_t v154;
  _OWORD v155[2];
  uint64_t v156;
  void *__p[129];
  char v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  int v166;
  unsigned int v167;
  int v168;
  char v169;
  unsigned __int8 v170[8];
  uint64_t *v171;
  unsigned __int8 v172[8];
  uint64_t *v173;
  unsigned __int8 v174[8];
  uint64_t *v175;
  unsigned __int8 v176[8];
  uint64_t *v177;
  unsigned __int8 v178[8];
  uint64_t *v179;
  unsigned __int8 v180[8];
  uint64_t *v181;
  _BYTE v182[8];
  uint64_t *v183;
  unsigned __int8 v184[8];
  uint64_t *v185;
  unsigned __int8 v186[8];
  uint64_t *v187;
  unsigned __int8 v188[8];
  uint64_t *v189;
  int v190;
  uint64_t *v191;
  unsigned int v192;
  uint64_t *v193;
  uint8_t buf[4];
  void **v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  vp::log((vp *)a1);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    log = v4;
    v170[0] = 0;
    v171 = 0;
    v5 = (uint64_t *)*a2;
    v184[0] = 5;
    v185 = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "topology");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    v7 = *(_BYTE *)v6;
    *(_BYTE *)v6 = v184[0];
    v184[0] = v7;
    v8 = (uint64_t *)v6[1];
    v6[1] = (uint64_t)v185;
    v185 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v185, v184[0]);
    v9 = a2[1];
    v182[0] = 0;
    v183 = 0;
    if ((_DWORD)v9)
    {
      v10 = a2 + 42;
      do
      {
        v186[0] = 0;
        v187 = 0;
        v11 = *(v10 - 40);
        LOBYTE(v155[0]) = 5;
        *((_QWORD *)&v155[0] + 1) = v11;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "type");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        v13 = *(_BYTE *)v12;
        *(_BYTE *)v12 = v155[0];
        LOBYTE(v155[0]) = v13;
        v14 = v12[1];
        v12[1] = *((_QWORD *)&v155[0] + 1);
        *((_QWORD *)&v155[0] + 1) = v14;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v155 + 1, LOBYTE(v155[0]));
        v15 = *(v10 - 39);
        LOBYTE(v153[0]) = 6;
        *((_QWORD *)&v153[0] + 1) = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "io_block_size");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        v17 = *(_BYTE *)v16;
        *(_BYTE *)v16 = v153[0];
        LOBYTE(v153[0]) = v17;
        v18 = v16[1];
        v16[1] = *((_QWORD *)&v153[0] + 1);
        *((_QWORD *)&v153[0] + 1) = v18;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v153 + 1, LOBYTE(v153[0]));
        *(_DWORD *)v148 = *(v10 - 38);
        *(_QWORD *)&v148[8] = v10 - 37;
        LOBYTE(v151[0]) = 0;
        *((_QWORD *)&v151[0] + 1) = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorUplinkTerminalType>>((uint64_t)v151, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
        v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "input_types");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
        v20 = *(_BYTE *)v19;
        *(_BYTE *)v19 = v151[0];
        LOBYTE(v151[0]) = v20;
        v21 = v19[1];
        v19[1] = *((_QWORD *)&v151[0] + 1);
        *((_QWORD *)&v151[0] + 1) = v21;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v151 + 1, LOBYTE(v151[0]));
        *(_DWORD *)v148 = *(v10 - 38);
        *(_QWORD *)&v148[8] = v10 - 34;
        LOBYTE(v192) = 0;
        v193 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)&v192, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
        v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "input_formats");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
        v23 = *(_BYTE *)v22;
        *(_BYTE *)v22 = v192;
        LOBYTE(v192) = v23;
        v24 = (uint64_t *)v22[1];
        v22[1] = (uint64_t)v193;
        v193 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v193, v192);
        *(_DWORD *)v148 = *(v10 - 4);
        *(_QWORD *)&v148[8] = v10 - 3;
        LOBYTE(v190) = 0;
        v191 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorUplinkTerminalType>>((uint64_t)&v190, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
        v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "output_types");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
        v26 = *(_BYTE *)v25;
        *(_BYTE *)v25 = v190;
        LOBYTE(v190) = v26;
        v27 = (uint64_t *)v25[1];
        v25[1] = (uint64_t)v191;
        v191 = v27;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v191, v190);
        *(_DWORD *)v148 = *(v10 - 4);
        *(_QWORD *)&v148[8] = v10;
        v188[0] = 0;
        v189 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)v188, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
        v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "output_formats");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
        v29 = *(_BYTE *)v28;
        *(_BYTE *)v28 = v188[0];
        v188[0] = v29;
        v30 = (uint64_t *)v28[1];
        v28[1] = (uint64_t)v189;
        v189 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v189, v188[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back((uint64_t)v182, (uint64_t)v186);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v187, v186[0]);
        v10 += 70;
        --v9;
      }
      while (v9);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
    v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "node_configurations");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
    v32 = *(_BYTE *)v31;
    *(_BYTE *)v31 = v182[0];
    v182[0] = v32;
    v33 = (uint64_t *)v31[1];
    v31[1] = (uint64_t)v183;
    v183 = v33;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v183, v182[0]);
    v34 = a2[212];
    LOBYTE(v155[0]) = 6;
    *((_QWORD *)&v155[0] + 1) = v34;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_port_type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    v36 = *(_BYTE *)v35;
    *(_BYTE *)v35 = v155[0];
    LOBYTE(v155[0]) = v36;
    v37 = v35[1];
    v35[1] = *((_QWORD *)&v155[0] + 1);
    *((_QWORD *)&v155[0] + 1) = v37;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v155 + 1, LOBYTE(v155[0]));
    v38 = *((_QWORD *)a2 + 107);
    LOBYTE(v153[0]) = 7;
    *((_QWORD *)&v153[0] + 1) = v38;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_hardware_sample_rate");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    v40 = *(_BYTE *)v39;
    *(_BYTE *)v39 = v153[0];
    LOBYTE(v153[0]) = v40;
    v41 = v39[1];
    v39[1] = *((_QWORD *)&v153[0] + 1);
    *((_QWORD *)&v153[0] + 1) = v41;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v153 + 1, LOBYTE(v153[0]));
    v42 = a2[216];
    LOBYTE(v151[0]) = 6;
    *((_QWORD *)&v151[0] + 1) = v42;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_hardware_input_latency");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    v44 = *(_BYTE *)v43;
    *(_BYTE *)v43 = v151[0];
    LOBYTE(v151[0]) = v44;
    v45 = v43[1];
    v43[1] = *((_QWORD *)&v151[0] + 1);
    *((_QWORD *)&v151[0] + 1) = v45;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v151 + 1, LOBYTE(v151[0]));
    v46 = a2[217];
    v148[0] = 6;
    *(_QWORD *)&v148[8] = v46;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_hardware_input_safety_offset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    v48 = *(_BYTE *)v47;
    *(_BYTE *)v47 = v148[0];
    v148[0] = v48;
    v49 = v47[1];
    v47[1] = *(_QWORD *)&v148[8];
    *(_QWORD *)&v148[8] = v49;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v148[8], v148[0]);
    v50 = (uint64_t *)a2[230];
    LOBYTE(v192) = 6;
    v193 = v50;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_port_type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    v52 = *(_BYTE *)v51;
    *(_BYTE *)v51 = v192;
    LOBYTE(v192) = v52;
    v53 = (uint64_t *)v51[1];
    v51[1] = (uint64_t)v193;
    v193 = v53;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v193, v192);
    v54 = (uint64_t *)*((_QWORD *)a2 + 116);
    LOBYTE(v190) = 7;
    v191 = v54;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_sample_rate");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    v56 = *(_BYTE *)v55;
    *(_BYTE *)v55 = v190;
    LOBYTE(v190) = v56;
    v57 = (uint64_t *)v55[1];
    v55[1] = (uint64_t)v191;
    v191 = v57;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v191, v190);
    v58 = (uint64_t *)a2[234];
    v188[0] = 6;
    v189 = v58;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_input_latency");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    v60 = *(_BYTE *)v59;
    *(_BYTE *)v59 = v188[0];
    v188[0] = v60;
    v61 = (uint64_t *)v59[1];
    v59[1] = (uint64_t)v189;
    v189 = v61;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v189, v188[0]);
    v62 = (uint64_t *)a2[235];
    v186[0] = 6;
    v187 = v62;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_input_safety_offset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    v64 = *(_BYTE *)v63;
    *(_BYTE *)v63 = v186[0];
    v186[0] = v64;
    v65 = (uint64_t *)v63[1];
    v63[1] = (uint64_t)v187;
    v187 = v65;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v187, v186[0]);
    v66 = (uint64_t *)a2[236];
    v180[0] = 6;
    v181 = v66;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_output_latency");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    v68 = *(_BYTE *)v67;
    *(_BYTE *)v67 = v180[0];
    v180[0] = v68;
    v69 = (uint64_t *)v67[1];
    v67[1] = (uint64_t)v181;
    v181 = v69;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v181, v180[0]);
    v70 = (uint64_t *)a2[237];
    v178[0] = 6;
    v179 = v70;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_output_safety_offset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    v72 = *(_BYTE *)v71;
    *(_BYTE *)v71 = v178[0];
    v178[0] = v72;
    v73 = (uint64_t *)v71[1];
    v71[1] = (uint64_t)v179;
    v179 = v73;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v71);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v179, v178[0]);
    v74 = (uint64_t *)a2[255];
    v176[0] = 6;
    v177 = v74;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "client_io_block_size");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    v76 = *(_BYTE *)v75;
    *(_BYTE *)v75 = v176[0];
    v176[0] = v76;
    v77 = (uint64_t *)v75[1];
    v75[1] = (uint64_t)v177;
    v177 = v77;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v75);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v177, v176[0]);
    v78 = (uint64_t *)a2[256];
    v174[0] = 6;
    v175 = v78;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    v79 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_is_hardware_tap_stream");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    v80 = *(_BYTE *)v79;
    *(_BYTE *)v79 = v174[0];
    v174[0] = v80;
    v81 = (uint64_t *)v79[1];
    v79[1] = (uint64_t)v175;
    v175 = v81;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v175, v174[0]);
    v82 = (uint64_t *)a2[257];
    v172[0] = 6;
    v173 = v82;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "chat_flavor");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    v84 = *(_BYTE *)v83;
    *(_BYTE *)v83 = v172[0];
    v172[0] = v84;
    v85 = (uint64_t *)v83[1];
    v83[1] = (uint64_t)v173;
    v173 = v85;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v83);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v173, v172[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v170);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v170, 4, 0x20u, 0, 0, __p);
    if (SHIBYTE(__p[2]) >= 0)
      v86 = __p;
    else
      v86 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v195 = v86;
    v4 = log;
    _os_log_impl(&dword_1B5ED0000, log, OS_LOG_TYPE_DEFAULT, "initializing uplink with configuration: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v170);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v171, v170[0]);
  }

  if (*a2 != 1)
  {
    if (*a2)
    {
      vp::log(v87);
      v89 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        goto LABEL_58;
      LOWORD(__p[0]) = 0;
      v90 = "uplink configuration is not valid - topology is not supported";
      goto LABEL_29;
    }
    if (a2[1] != 1)
    {
      vp::log(v87);
      v89 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        goto LABEL_58;
      LOWORD(__p[0]) = 0;
      v90 = "uplink configuration is not valid - wrong number of node configurations";
      goto LABEL_29;
    }
    IsValid = (uint64_t)(a2 + 2);
    if (a2[2])
    {
      vp::log((vp *)IsValid);
      v89 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v90 = "uplink configuration is not valid - 'AllOfUplinkDSP' node configuration not found";
        goto LABEL_29;
      }
      goto LABEL_58;
    }
    goto LABEL_44;
  }
  if (a2[1] != 3)
  {
    vp::log(v87);
    v89 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
      goto LABEL_58;
    LOWORD(__p[0]) = 0;
    v90 = "uplink configuration is not valid - wrong number of node configurations";
    goto LABEL_29;
  }
  for (i = 2; i != 212; i += 70)
  {
    v92 = (vp *)&a2[i];
    if (a2[i] == 1)
    {
      IsValid = VoiceProcessorImplementation::IsValid((uint64_t)v92);
      if (!(_DWORD)IsValid)
        goto LABEL_59;
      v93 = a2[1];
      if (!(_DWORD)v93)
      {
LABEL_35:
        vp::log((vp *)IsValid);
        v89 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        LOWORD(__p[0]) = 0;
        v90 = "uplink configuration is not valid - 'EchoDSP' node configuration not found";
        goto LABEL_29;
      }
      IsValid = (uint64_t)(a2 + 2);
      while (*(_DWORD *)IsValid != 2)
      {
        IsValid += 280;
        if (!--v93)
          goto LABEL_35;
      }
      IsValid = VoiceProcessorImplementation::IsValid(IsValid);
      if (!(_DWORD)IsValid)
        goto LABEL_59;
      v94 = a2[1];
      if (!(_DWORD)v94)
      {
LABEL_42:
        vp::log((vp *)IsValid);
        v89 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        LOWORD(__p[0]) = 0;
        v90 = "uplink configuration is not valid - 'DynamicsDSP' node configuration not found";
        goto LABEL_29;
      }
      IsValid = (uint64_t)(a2 + 2);
      while (*(_DWORD *)IsValid != 3)
      {
        IsValid += 280;
        if (!--v94)
          goto LABEL_42;
      }
LABEL_44:
      IsValid = VoiceProcessorImplementation::IsValid(IsValid);
      if ((IsValid & 1) == 0)
        goto LABEL_59;
      if (a2[229] >= 8)
      {
        vp::log((vp *)IsValid);
        v89 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        LOWORD(__p[0]) = 0;
        v90 = "uplink configuration is not valid - microphone trim gains count is out of bounds";
        goto LABEL_29;
      }
      if (a2[248] >= 8)
      {
        vp::log((vp *)IsValid);
        v89 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        LOWORD(__p[0]) = 0;
        v90 = "uplink configuration is not valid - reference trim gains count is out of bounds";
        goto LABEL_29;
      }
      v95 = a2[255];
      vp::log((vp *)IsValid);
      v96 = objc_claimAutoreleasedReturnValue();
      v89 = v96;
      if (!v95)
      {
        if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        LOWORD(__p[0]) = 0;
        v90 = "uplink configuration is not valid - client I/O block size can't be 0";
LABEL_29:
        _os_log_error_impl(&dword_1B5ED0000, v89, OS_LOG_TYPE_ERROR, v90, (uint8_t *)__p, 2u);
        goto LABEL_58;
      }
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1B5ED0000, v89, OS_LOG_TYPE_INFO, "uplink configuration is valid!", (uint8_t *)__p, 2u);
      }

      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
      if (*a2 == 1)
      {
        v107 = util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 1);
        v108 = (double *)util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 2);
        v109 = util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 3);
        v98 = v107[1];
        v192 = v98;
        v99 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v107, 0);
        v100 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v107, 2);
        v101 = util::get_output_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v109);
        v102 = *((_DWORD *)v108 + 1);
        v103 = v108[3];
      }
      else
      {
        if (*a2)
        {
          v123 = _os_crash();
          __break(1u);
          goto LABEL_119;
        }
        v97 = util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 0);
        v98 = a2[255];
        v192 = v98;
        v99 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v97, 0);
        v100 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v97, 2);
        v101 = util::get_output_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v97);
        v102 = 0;
        v103 = 0.0;
      }
      if (v99)
      {
        if (v100)
        {
          if (v101)
          {
            LODWORD(v151[0]) = a2[256];
            LODWORD(v155[0]) = 32792;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            v110 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            if (!HIDWORD(v110))
            {
              v105 = v110;
              if ((_DWORD)v110)
                goto LABEL_90;
            }
            LODWORD(v151[0]) = a2[257];
            LODWORD(v155[0]) = 1718384242;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            v111 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            if (!HIDWORD(v111))
            {
              v105 = v111;
              if ((_DWORD)v111)
                goto LABEL_90;
            }
            *(_QWORD *)&v155[0] = *((_QWORD *)a2 + 107);
            LODWORD(v153[0]) = 1986884466;
            __p[0] = v155;
            LODWORD(v151[0]) = 8;
            v112 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v153, __p, (unsigned int *)v151);
            if (!HIDWORD(v112))
            {
              v105 = v112;
              if ((_DWORD)v112)
                goto LABEL_90;
            }
            LODWORD(v151[0]) = a2[216];
            LODWORD(v155[0]) = 1986881900;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            v113 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            if (!HIDWORD(v113))
            {
              v105 = v113;
              if ((_DWORD)v113)
                goto LABEL_90;
            }
            LODWORD(v151[0]) = a2[217];
            LODWORD(v155[0]) = 1986881903;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            v114 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            v105 = v114 >= 0x100000000 ? 0x100000000 : v114;
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<double,(decltype(nullptr))0>((uint64_t)a1, 0x76727372u, *((double *)a2 + 116));
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x7672696Cu, a2[234]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x7672696Fu, a2[235]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x76726F6Cu, a2[236]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x76726F6Fu, a2[237]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x65706273u, v102);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<float,(decltype(nullptr))0>((uint64_t)a1, v103);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x8013u, a2[249]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x74766374u, a2[250]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<double,(decltype(nullptr))0>((uint64_t)a1, 0x74766372u, *((double *)a2 + 126));
            if ((_DWORD)v105)
              goto LABEL_90;
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x8005u, a2[254]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v115 = a2[229];
            if (v115)
            {
              LODWORD(v155[0]) = 32780;
              __p[0] = a2 + 221;
              LODWORD(v153[0]) = 4 * v115;
              v116 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
              v117 = 0x100000000;
              if (v116 < 0x100000000)
                v117 = v116;
              v105 = v117;
              if ((_DWORD)v117)
                goto LABEL_90;
            }
            v118 = (const void *)*((_QWORD *)a2 + 109);
            if (v118)
            {
              applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)__p, v118);
              v105 = VoiceProcessorImplementation::SetProperty<applesauce::CF::DictionaryRef,(decltype(nullptr))0>((uint64_t)a1, 0x800Fu, (uint64_t)__p[0]);
              applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
              if ((_DWORD)v105)
                goto LABEL_90;
            }
            v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x8014u, a2[220]);
            if ((_DWORD)v105)
              goto LABEL_90;
            v119 = a2[248];
            if (v119)
            {
              LODWORD(v155[0]) = 32781;
              __p[0] = a2 + 240;
              LODWORD(v153[0]) = 4 * v119;
              v120 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
              v121 = 0x100000000;
              if (v120 < 0x100000000)
                v121 = v120;
              v105 = v121;
              if ((_DWORD)v121)
                goto LABEL_90;
            }
            v122 = (const void *)*((_QWORD *)a2 + 119);
            if (v122)
            {
              applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)__p, v122);
              v105 = VoiceProcessorImplementation::SetProperty<applesauce::CF::DictionaryRef,(decltype(nullptr))0>((uint64_t)a1, 0x8010u, (uint64_t)__p[0]);
              applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
              if ((_DWORD)v105)
                goto LABEL_90;
            }
            LODWORD(v153[0]) = 0;
            LODWORD(v151[0]) = 1;
            __p[0] = a2 + 230;
            *(_DWORD *)v148 = 0;
            v190 = 1;
            *(_QWORD *)&v155[0] = a2 + 212;
            v123 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)1,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*>((uint64_t)a1, v100, &v192, (unsigned int *)v153, (unsigned int *)v151, __p, v99, &v192, v148, &v190, v155);
            if ((v123 & 0xFF00000000) != 0)
            {
              v124 = *(_OWORD *)v101;
              v125 = *(_OWORD *)(v101 + 16);
              __p[4] = *(void **)(v101 + 32);
              *(_OWORD *)__p = v124;
              *(_OWORD *)&__p[2] = v125;
              LODWORD(v155[0]) = 0;
              LODWORD(v153[0]) = 0;
              LODWORD(v151[0]) = 0;
              v123 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)2,CA::StreamDescription &,decltype(nullptr),unsigned int &,unsigned int &,unsigned int &>((uint64_t)a1, (uint64_t)__p, (uint64_t)v155, (uint64_t)v153, (uint64_t)v151);
              if ((v123 & 0xFF00000000) != 0)
              {
                if (*(double *)__p == *(double *)v101
                  && (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)&__p[1], *(int32x4_t *)(v101 + 8))), 0x1FuLL)), (int8x16_t)xmmword_1B6625FE0)) & 0xF) == 0&& LODWORD(__p[3]) == *(_DWORD *)(v101 + 24)&& *(void **)((char *)&__p[3] + 4) == *(void **)(v101 + 28))
                {
                  if (LODWORD(v153[0]) == 4)
                  {
                    v126 = v155[0];
                    v127 = (std::pmr *)memcpy(__p, a2, sizeof(__p));
                    v158 = 0;
                    v159 = v98;
                    v160 = 0;
                    v161 = v155[0];
                    v128 = *(_OWORD *)v99;
                    v129 = *(_OWORD *)(v99 + 16);
                    v156 = *(_QWORD *)(v99 + 32);
                    v155[0] = v128;
                    v155[1] = v129;
                    default_resource = std::pmr::get_default_resource(v127);
                    v131 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v155, 0, default_resource, &v162);
                    v132 = *(_OWORD *)v100;
                    v133 = *(_OWORD *)(v100 + 16);
                    v154 = *(_QWORD *)(v100 + 32);
                    v153[0] = v132;
                    v153[1] = v133;
                    v134 = std::pmr::get_default_resource(v131);
                    v135 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v153, 0, v134, &v163);
                    v136 = *(_OWORD *)v101;
                    v137 = *(_OWORD *)(v101 + 16);
                    v152 = *(_QWORD *)(v101 + 32);
                    v151[0] = v136;
                    v151[1] = v137;
                    v138 = std::pmr::get_default_resource(v135);
                    v139 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v151, 0, v138, &v164);
                    v140 = *(_OWORD *)v101;
                    v141 = *(_OWORD *)(v101 + 16);
                    v150 = *(_QWORD *)(v101 + 32);
                    *(_OWORD *)v148 = v140;
                    v149 = v141;
                    v142 = std::pmr::get_default_resource(v139);
                    vp::Audio_Buffer::create((uint64_t)v148, v126, v142, &v165);
                    v166 = 0;
                    v167 = v98;
                    v168 = v126;
                    v169 = 0;
                    std::__optional_destruct_base<VoiceProcessorImplementation::Uplink,false>::reset[abi:ne180100](a1 + 200);
                    std::construct_at[abi:ne180100]<VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink*>((uint64_t)(a1 + 200), (uint64_t)__p);
                    a1[1304] = 1;
                    VoiceProcessorImplementation::Uplink::~Uplink((VoiceProcessorImplementation::Uplink *)__p);
                    vp::log(v143);
                    v144 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
                    {
                      LOWORD(__p[0]) = 0;
                      _os_log_impl(&dword_1B5ED0000, v144, OS_LOG_TYPE_INFO, "initialized uplink", (uint8_t *)__p, 2u);
                    }

                    v105 = 0;
                    goto LABEL_90;
                  }
                  vp::log((vp *)v123);
                  v145 = objc_claimAutoreleasedReturnValue();
                  if (!os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                    goto LABEL_123;
                  *(_WORD *)v148 = 0;
                  v146 = "failed to initialize uplink - voice processor must output float data";
                }
                else
                {
                  vp::log((vp *)v123);
                  v145 = objc_claimAutoreleasedReturnValue();
                  if (!os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                  {
LABEL_123:

                    v105 = 1651270508;
                    goto LABEL_90;
                  }
                  *(_WORD *)v148 = 0;
                  v146 = "failed to initialize uplink - voice processor did not accept requested output format";
                }
                _os_log_error_impl(&dword_1B5ED0000, v145, OS_LOG_TYPE_ERROR, v146, v148, 2u);
                goto LABEL_123;
              }
            }
LABEL_119:
            v105 = v123;
LABEL_90:
            caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 192));
            return v105;
          }
LABEL_94:
          _os_assert_log();
          _os_crash();
          __break(1u);
        }
      }
      else
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
      }
      _os_assert_log();
      _os_crash();
      __break(1u);
      goto LABEL_94;
    }
  }
  vp::log(v92);
  v89 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    v90 = "uplink configuration is not valid - 'HardwareDSP' node configuration not found";
    goto LABEL_29;
  }
LABEL_58:

LABEL_59:
  vp::log((vp *)IsValid);
  v104 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1B5ED0000, v104, OS_LOG_TYPE_ERROR, "failed to initialize uplink due to bad configuration", (uint8_t *)__p, 2u);
  }

  return 1650681447;
}

void sub_1B64EDDA8(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex *v1;

  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2)
  {
    result = (_DWORD *)(a1 + 8);
    while (*result != a2)
    {
      result += 70;
      if (!--v2)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = 0;
    while (*(_DWORD *)(a1 + 12 + 4 * v3) != a2)
    {
      if (v2 == ++v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    a1 = _os_crash();
    __break(1u);
  }
  return a1 + 40 * v3 + 24;
}

uint64_t util::get_output_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 144);
  if ((_DWORD)v1)
  {
    v2 = 0;
    while (*(_DWORD *)(a1 + 148 + 4 * v2) != 3)
    {
      if (v1 == ++v2)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    a1 = _os_crash();
    __break(1u);
  }
  return a1 + 40 * v2 + 160;
}

unint64_t VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t result;
  int v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;

  v7 = a2;
  v6 = &v4;
  v4 = a3;
  v5 = 4;
  result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v7, &v6, &v5);
  if (result >= 0x100000000)
    return 0x100000000;
  return result;
}

unint64_t VoiceProcessorImplementation::SetProperty<double,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, double a3)
{
  unint64_t result;
  double v4;
  unsigned int v5;
  double *v6;
  unsigned int v7;

  v4 = a3;
  v7 = a2;
  v6 = &v4;
  v5 = 8;
  result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v7, &v6, &v5);
  if (result >= 0x100000000)
    return 0x100000000;
  return result;
}

unint64_t VoiceProcessorImplementation::SetProperty<float,(decltype(nullptr))0>(uint64_t a1, float a2)
{
  unint64_t result;
  float v3;
  unsigned int v4;
  float *v5;
  unsigned int v6;

  v3 = a2;
  v6 = 1701868402;
  v5 = &v3;
  v4 = 4;
  result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v6, &v5, &v4);
  if (result >= 0x100000000)
    return 0x100000000;
  return result;
}

unint64_t VoiceProcessorImplementation::SetProperty<applesauce::CF::DictionaryRef,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;

  v4 = a3;
  v7 = a2;
  v6 = &v4;
  v5 = 8;
  result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v7, &v6, &v5);
  if (result >= 0x100000000)
    return 0x100000000;
  return result;
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)1,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*>(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _QWORD *a6, uint64_t a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _QWORD *a11)
{
  vp *v19;
  int v20;
  NSObject *v21;
  void **v23;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v28;
  void *__p[2];
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _BYTE v34[16];
  _BYTE *v35;
  char v36;
  _BYTE v37[16];
  _BYTE *v38;
  char v39;
  _QWORD v40[3];
  char v41;
  _BYTE v42[16];
  uint64_t v43;
  char v44;
  _BYTE v45[8];
  uint64_t *v46;
  uint8_t buf[4];
  void **v48;
  _BYTE v49[16];
  _BYTE *v50;
  char v51;
  _BYTE v52[16];
  _BYTE *v53;
  char v54;
  _BYTE v55[16];
  _BYTE *v56;
  char v57;
  _BYTE v58[8];
  _QWORD v59[2];
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  HIDWORD(v28) = *a9;
  LODWORD(v28) = *a8;
  v19 = (vp *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, _DWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), a2, 0, *a3, *a4, *a5, *a6, a7, 0, v28, *a10, *a11);
  v20 = (int)v19;
  if ((_DWORD)v19)
  {
    vp::log(v19);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v55);
      v56 = v55;
      v57 = 1;
      v58[0] = 5;
      v59[0] = v20;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v58);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v58);
      v59[1] = v58;
      v60 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v37, (uint64_t)v55, 2, 1, 2);
      v38 = v37;
      v39 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v49, "call_name");
      v50 = v49;
      v51 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v52, vp::call_traits<(vp::call_type)1>::name);
      v53 = v52;
      v54 = 1;
      v40[2] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v49, 2, 1, 2);
      v41 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v31);
      v32 = v31;
      v33 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[407],char [407],0>((uint64_t)v34);
      v35 = v34;
      v36 = 1;
      v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v42, (uint64_t)v31, 2, 1, 2);
      v44 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v45, (uint64_t)v37, 3, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v45, 4, 0x20u, 0, 0, __p);
      if (v30 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v48 = v23;
      _os_log_error_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
      if (v30 < 0)
        operator delete(__p[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
      for (i = 0; i != -96; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v42[i]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42[i + 8], v42[i]);
      }
      for (j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v34[j + 8], v34[j]);
      }
      for (k = 0; k != -64; k -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v52[k]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v52[k + 8], v52[k]);
      }
      for (m = 0; m != -8; m -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v58[m * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v59[m], v58[m * 8]);
      }
    }

  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  return 0x1626C6300;
}

void sub_1B64EE5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int buf)
{
  uint64_t v40;
  uint64_t v41;
  vp *v42;
  NSObject *v43;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v42 = (vp *)__cxa_begin_catch(a1);
    vp::log(v42);
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(v41 - 152, "call_name");
      *(_QWORD *)(v41 - 136) = v41 - 152;
      *(_BYTE *)(v41 - 128) = 1;
      *(_QWORD *)(v41 - 104) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(v41 - 120, vp::call_traits<(vp::call_type)1>::name);
      *(_BYTE *)(v41 - 96) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a28, v41 - 152, 2, 1, 2);
      a30 = &a28;
      a31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(v41 - 216);
      *(_QWORD *)(v41 - 200) = v41 - 216;
      *(_BYTE *)(v41 - 192) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[407],char [407],0>(v41 - 184);
      *(_QWORD *)(v41 - 168) = v41 - 184;
      *(_BYTE *)(v41 - 160) = 1;
      a34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a32, v41 - 216, 2, 1, 2);
      a35 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a14, (uint64_t)&a28, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a14, 4, 0x20u, 0, 0, &__p);
      if (a22 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      buf = 136315138;
      *(_QWORD *)(v40 + 4) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)&buf, 0xCu);
      if (a22 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a14);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a28 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v41 - 216 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v41 - 152 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64EE2F0);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)2,CA::StreamDescription &,decltype(nullptr),unsigned int &,unsigned int &,unsigned int &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  vp *v10;
  int v11;
  NSObject *v12;
  void **v14;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  void *__p[2];
  char v20;
  _BYTE v21[16];
  _BYTE *v22;
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  _BYTE *v28;
  char v29;
  _QWORD v30[3];
  char v31;
  _BYTE v32[16];
  uint64_t v33;
  char v34;
  _BYTE v35[8];
  uint64_t *v36;
  uint8_t buf[4];
  void **v38;
  _BYTE v39[16];
  _BYTE *v40;
  char v41;
  _BYTE v42[16];
  _BYTE *v43;
  char v44;
  _BYTE v45[16];
  _BYTE *v46;
  char v47;
  _BYTE v48[8];
  _QWORD v49[2];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v10 = (vp *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168)
                                                                                            + 24))(*(_QWORD *)(a1 + 168), a2, 0, a3, a4, a5);
  v11 = (int)v10;
  if ((_DWORD)v10)
  {
    vp::log(v10);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v45);
      v46 = v45;
      v47 = 1;
      v48[0] = 5;
      v49[0] = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
      v49[1] = v48;
      v50 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v27, (uint64_t)v45, 2, 1, 2);
      v28 = v27;
      v29 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v39, "call_name");
      v40 = v39;
      v41 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v42, &vp::call_traits<(vp::call_type)2>::name);
      v43 = v42;
      v44 = 1;
      v30[2] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v39, 2, 1, 2);
      v31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v21);
      v22 = v21;
      v23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[293],char [293],0>((uint64_t)v24);
      v25 = v24;
      v26 = 1;
      v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v32, (uint64_t)v21, 2, 1, 2);
      v34 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v27, 3, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v35, 4, 0x20u, 0, 0, __p);
      if (v20 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v38 = v14;
      _os_log_error_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
      if (v20 < 0)
        operator delete(__p[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35[0]);
      for (i = 0; i != -96; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[i]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v32[i + 8], v32[i]);
      }
      for (j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[j + 8], v24[j]);
      }
      for (k = 0; k != -64; k -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v42[k]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42[k + 8], v42[k]);
      }
      for (m = 0; m != -8; m -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48[m * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v49[m], v48[m * 8]);
      }
    }

  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  return 0x1626C6300;
}

void sub_1B64EEAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int buf)
{
  uint64_t v36;
  uint64_t v37;
  vp *v38;
  NSObject *v39;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    v38 = (vp *)__cxa_begin_catch(a1);
    vp::log(v38);
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(v37 - 136, "call_name");
      *(_QWORD *)(v37 - 120) = v37 - 136;
      *(_BYTE *)(v37 - 112) = 1;
      *(_QWORD *)(v37 - 88) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(v37 - 104, &vp::call_traits<(vp::call_type)2>::name);
      *(_BYTE *)(v37 - 80) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a24, v37 - 136, 2, 1, 2);
      a26 = &a24;
      a27 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(v37 - 200);
      *(_QWORD *)(v37 - 184) = v37 - 200;
      *(_BYTE *)(v37 - 176) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[293],char [293],0>(v37 - 168);
      *(_QWORD *)(v37 - 152) = v37 - 168;
      *(_BYTE *)(v37 - 144) = 1;
      a30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a28, v37 - 200, 2, 1, 2);
      a31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, (uint64_t)&a24, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a18 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      buf = 136315138;
      *(_QWORD *)(v36 + 4) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)&buf, 0xCu);
      if (a18 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a24 + i));
      for (j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v37 - 200 + j));
      for (k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v37 - 136 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1B64EE818);
  }
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<VoiceProcessorImplementation::Uplink,false>::reset[abi:ne180100](_BYTE *a1)
{
  if (a1[1104])
  {
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1080));
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1072));
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1064));
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1056));
    a1[1104] = 0;
  }
}

uint64_t std::construct_at[abi:ne180100]<VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink*>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  memcpy((void *)a1, (const void *)a2, 0x408uLL);
  v4 = *(_DWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_DWORD *)(a1 + 1048) = v4;
  vp::objc::ID::ID((_QWORD *)(a1 + 1056), (uint64_t *)(a2 + 1056));
  vp::objc::ID::ID((_QWORD *)(a1 + 1064), (uint64_t *)(a2 + 1064));
  vp::objc::ID::ID((_QWORD *)(a1 + 1072), (uint64_t *)(a2 + 1072));
  vp::objc::ID::ID((_QWORD *)(a1 + 1080), (uint64_t *)(a2 + 1080));
  v5 = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a1 + 1093) = *(_QWORD *)(a2 + 1093);
  *(_QWORD *)(a1 + 1088) = v5;
  return a1;
}

void VoiceProcessorImplementation::Uplink::~Uplink(VoiceProcessorImplementation::Uplink *this)
{
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorImplementation::Uplink *)((char *)this + 1080));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorImplementation::Uplink *)((char *)this + 1072));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorImplementation::Uplink *)((char *)this + 1064));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorImplementation::Uplink *)((char *)this + 1056));
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[293],char [293],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::InitializeOutput, ArgTypeList = <CA::StreamDescription &, std::nullptr_t, unsigned int &, unsigned int &, unsigned int &>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EEE0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[407],char [407],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::InitializeHWInput, ArgTypeList = <const AudioStreamBasicDescription &, std::nullptr_t, unsigned int &, int, int, const unsigned int *, const AudioStreamBasicDescription &, std::nullptr_t, unsigned int &, int, int, const unsigned int *>]");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1B64EEE78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::IsValid(uint64_t a1)
{
  char v2;
  uint64_t v3;
  char v4;
  vp *v5;
  NSObject *v6;
  char v7;
  uint64_t v8;
  char v9;
  vp *v10;
  uint64_t v11;
  vp *v12;
  vp *v13;
  vp *v14;
  vp *v15;
  vp *v16;
  char v17;
  uint64_t v18;
  double *v19;
  char v20;
  vp *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  vp *v26;
  uint64_t v27;
  _QWORD *v28;
  vp *v29;
  vp *v30;
  vp *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  vp *v37;
  uint64_t v38;
  uint64_t v39;
  void *p_p;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *__p;
  _QWORD *v49;
  uint64_t v50;
  __int128 buf;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(_DWORD *)(a1 + 8) != 2)
      {
        v13 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has wrong number of inputs");
        vp::log(v13);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      v2 = 0;
      v3 = 0;
      while (1)
      {
        v4 = v2;
        if (!*(_DWORD *)(a1 + 4 * v3 + 12))
          break;
        v2 = 1;
        v3 = 1;
        if ((v4 & 1) != 0)
        {
          v5 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has no microphone input");
          vp::log(v5);
          v6 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          p_p = &__p;
          if (v50 < 0)
            p_p = __p;
          goto LABEL_120;
        }
      }
      v17 = 0;
      v18 = 0;
      v19 = (double *)(a1 + 40 * v3 + 24);
      while (1)
      {
        v20 = v17;
        if (*(_DWORD *)(a1 + 4 * v18 + 12) == 2)
          break;
        v17 = 1;
        v18 = 1;
        if ((v20 & 1) != 0)
        {
          v21 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has no reference input");
          vp::log(v21);
          v6 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          p_p = &__p;
          if (v50 < 0)
            p_p = __p;
          goto LABEL_120;
        }
      }
      if (*v19 != *(double *)(a1 + 40 * v18 + 24))
      {
        v31 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node microphone and reference input sample rates are not equal");
        vp::log(v31);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 144) == 1)
      {
        if (*(_DWORD *)(a1 + 148) == 3)
        {
          if (*v19 == *(double *)(a1 + 160))
            return 1;
          std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node microphone input and uplink output sample rates are not equal");
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has no uplink output");
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has wrong number of outputs");
      }
      goto LABEL_139;
    case 1:
      if (*(_DWORD *)(a1 + 8) != 2)
      {
        v14 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has wrong number of inputs");
        vp::log(v14);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = v7;
        if (!*(_DWORD *)(a1 + 4 * v8 + 12))
          break;
        v7 = 1;
        v8 = 1;
        if ((v9 & 1) != 0)
        {
          v10 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no microphone input");
          vp::log(v10);
          v6 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          p_p = &__p;
          if (v50 < 0)
            p_p = __p;
          goto LABEL_120;
        }
      }
      v22 = 0;
      v23 = 0;
      v24 = (_QWORD *)(a1 + 40 * v8 + 24);
      while (1)
      {
        v25 = v22;
        if (*(_DWORD *)(a1 + 4 * v23 + 12) == 2)
          break;
        v22 = 1;
        v23 = 1;
        if ((v25 & 1) != 0)
        {
          v26 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no reference input");
          vp::log(v26);
          v6 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          p_p = &__p;
          if (v50 < 0)
            p_p = __p;
          goto LABEL_120;
        }
      }
      v32 = *(_QWORD *)(a1 + 40 * v23 + 24);
      *(_QWORD *)&buf = *v24;
      *((_QWORD *)&buf + 1) = v32;
      std::set<double>::set[abi:ne180100]((uint64_t **)&__p, (double *)&buf, 2);
      v33 = v50;
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v49);
      if (v33 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node input sample rates are not equal");
        goto LABEL_139;
      }
      if (*(_DWORD *)(a1 + 144) != 3)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has wrong number of outputs");
        goto LABEL_139;
      }
      v34 = 0;
      while (*(_DWORD *)(a1 + 148 + 4 * v34))
      {
        if (++v34 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no microphone output");
          goto LABEL_139;
        }
      }
      v42 = 0;
      v43 = (_QWORD *)(a1 + 40 * v34 + 160);
      while (*(_DWORD *)(a1 + 148 + 4 * v42) != 2)
      {
        if (++v42 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no microphone clip data output");
          goto LABEL_139;
        }
      }
      v44 = 0;
      v45 = (uint64_t *)(a1 + 40 * v42 + 160);
      while (*(_DWORD *)(a1 + 148 + 4 * v44) != 2)
      {
        if (++v44 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no reference output");
          goto LABEL_139;
        }
      }
      v46 = *v45;
      *(_QWORD *)&buf = *v43;
      *((_QWORD *)&buf + 1) = v46;
      v52 = *(_QWORD *)(a1 + 40 * v44 + 160);
      std::set<double>::set[abi:ne180100]((uint64_t **)&__p, (double *)&buf, 3);
      v47 = v50;
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v49);
      if (v47 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node output sample rates are not equal");
        goto LABEL_139;
      }
      if (*(double *)v24 != *(double *)v43)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node I/O sample rates are not equal");
        goto LABEL_139;
      }
      if (!*(_DWORD *)(a1 + 4))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node doesn't support variable I/O block size");
        goto LABEL_139;
      }
      return 1;
    case 2:
      if (*(_DWORD *)(a1 + 8) != 3)
      {
        v15 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has wrong number of inputs");
        vp::log(v15);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      v11 = 0;
      while (*(_DWORD *)(a1 + 12 + 4 * v11))
      {
        if (++v11 == 3)
        {
          v12 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no microphone input");
          vp::log(v12);
          v6 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            goto LABEL_65;
          p_p = &__p;
          if (v50 < 0)
            p_p = __p;
          goto LABEL_120;
        }
      }
      v27 = 0;
      v28 = (_QWORD *)(a1 + 40 * v11 + 24);
      break;
    case 3:
      if (*(_DWORD *)(a1 + 8) != 1)
      {
        v16 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has wrong number of inputs");
        vp::log(v16);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 12) != 3)
      {
        v30 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has no voice data input");
        vp::log(v30);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 144) != 1)
      {
        v37 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has wrong number of outputs");
        vp::log(v37);
        v6 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        p_p = &__p;
        if (v50 < 0)
          p_p = __p;
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 148) == 3)
      {
        if (*(double *)(a1 + 24) == *(double *)(a1 + 160))
        {
          if (*(_DWORD *)(a1 + 4))
            return 1;
          std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node doesn't support variable I/O block size");
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node I/O sample rates are not equal");
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has no voice data output");
      }
LABEL_139:
      VoiceProcessorImplementation::IsValid(VoiceProcessorUplinkNodeConfiguration const&)const::{lambda(std::string const&)#1}::operator()((char *)&__p);
      goto LABEL_140;
    default:
      return 0;
  }
  while (*(_DWORD *)(a1 + 12 + 4 * v27) != 1)
  {
    if (++v27 == 3)
    {
      v29 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no microphone clip data input");
      vp::log(v29);
      v6 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_65;
      p_p = &__p;
      if (v50 < 0)
        p_p = __p;
LABEL_120:
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = p_p;
      _os_log_error_impl(&dword_1B5ED0000, v6, OS_LOG_TYPE_ERROR, "uplink configuration is not valid - %s", (uint8_t *)&buf, 0xCu);
LABEL_65:

LABEL_140:
      if (SHIBYTE(v50) < 0)
        operator delete(__p);
      return 0;
    }
  }
  v35 = 0;
  v36 = (uint64_t *)(a1 + 40 * v27 + 24);
  while (*(_DWORD *)(a1 + 12 + 4 * v35) != 2)
  {
    if (++v35 == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no reference input");
      goto LABEL_139;
    }
  }
  v38 = *v36;
  *(_QWORD *)&buf = *v28;
  *((_QWORD *)&buf + 1) = v38;
  v52 = *(_QWORD *)(a1 + 40 * v35 + 24);
  std::set<double>::set[abi:ne180100]((uint64_t **)&__p, (double *)&buf, 3);
  v39 = v50;
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v49);
  if (v39 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node input sample rates are not equal");
    goto LABEL_139;
  }
  if (*(_DWORD *)(a1 + 144) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has wrong number of outputs");
    goto LABEL_139;
  }
  if (*(_DWORD *)(a1 + 148) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no voice data output");
    goto LABEL_139;
  }
  if (*(double *)v28 != *(double *)(a1 + 160))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node I/O sample rates are not equal");
    goto LABEL_139;
  }
  if (!*(_DWORD *)(a1 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node doesn't support variable I/O block size");
    goto LABEL_139;
  }
  return 1;
}

void sub_1B64EFA48(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void VoiceProcessorImplementation::IsValid(VoiceProcessorUplinkNodeConfiguration const&)const::{lambda(std::string const&)#1}::operator()(char *a1)
{
  NSObject *v2;
  char *v3;
  int v4;
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  vp::log((vp *)a1);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v3 = a1;
    else
      v3 = *(char **)a1;
    v4 = 136315138;
    v5 = v3;
    _os_log_error_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "uplink configuration is not valid - %s", (uint8_t *)&v4, 0xCu);
  }

}

uint64_t **std::set<double>::set[abi:ne180100](uint64_t **a1, double *a2, uint64_t a3)
{
  uint64_t *v4;
  double *v5;
  uint64_t *v6;
  double *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  double v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = &a2[a3];
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_9;
      v10 = v6;
      v11 = v4;
      if (v6)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v5;
      if (*((double *)v9 + 4) < *v5)
      {
LABEL_9:
        v14 = (uint64_t **)(v6 ? v9 : v4);
        v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        v14 = (uint64_t **)v4;
        v15 = (uint64_t **)v4;
        if (v6)
        {
          v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v6;
              v18 = *((double *)v6 + 4);
              if (v13 >= v18)
                break;
              v6 = (uint64_t *)*v6;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v18 >= v13)
              break;
            v15 = (uint64_t **)(v6 + 1);
            v6 = (uint64_t *)v6[1];
            if (!v6)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = (uint64_t *)operator new(0x28uLL);
        v16[4] = *(_QWORD *)v5;
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v15 = v16;
        v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          v16 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v5 == v7)
        break;
      v8 = (uint64_t **)*a1;
      v6 = a1[1];
    }
  }
  return a1;
}

void sub_1B64EFC64(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorUplinkTerminalType>>(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7[8];
  uint64_t *v8;

  if (*a2)
  {
    v4 = 0;
    do
    {
      v5 = *((_QWORD *)a2 + 1);
      v8 = 0;
      v6 = (uint64_t *)*(unsigned int *)(v5 + 4 * v4);
      v7[0] = 5;
      v8 = v6;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a1, (uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      ++v4;
    }
    while (v4 < *a2);
  }
}

void clsp::CLSP_Log::getLogDirectory(std::__fs::filesystem::path *this)
{
  char *v2;
  char *v3;
  std::string __p;
  std::string v6;

  v2 = getenv("TMPDIR");
  memset(&v6, 0, sizeof(v6));
  v3 = v2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(&v6, v2, v3);
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, "CLSPLogs/", "");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v6, this);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1B64EFDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CLSP_Log_FlushBuffer(FILE **a1)
{
  std::__shared_weak_count *v2;
  FILE *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  FILE *v6;
  unint64_t v7;
  uint64_t size;
  int v9;
  int v10;
  int base;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  unsigned __int8 *p;
  int v19;
  unint64_t *v20;
  unint64_t v21;

  v3 = a1[4];
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (*a1)
  {
    v6 = a1[6];
    v7 = ((char *)a1[7] - (char *)v6) >> 2;
    while (1)
    {
      size = v3->_bf._size;
      v9 = HIDWORD(v3->_bf._base) - size;
      v10 = v9;
      if (v9 < 0)
        v10 = LODWORD(v3->_bf._base) + v9;
      if (!v10)
        break;
      base = (int)v3->_bf._base;
      v12 = v9 + (base & (v9 >> 31));
      if (v12 >= v7)
        v13 = v7;
      else
        v13 = v12;
      v14 = (4 * v13);
      v15 = (base - size);
      if (v13 <= v15)
      {
        p = &v3->_p[4 * size];
        v17 = (char *)v6;
      }
      else
      {
        v16 = v14 - 4 * v15;
        memcpy(v6, &v3->_p[4 * size], 4 * v15);
        v17 = (char *)v6 + 4 * v15;
        p = v3->_p;
        v14 = v16;
      }
      memcpy(v17, p, v14);
      v19 = *(&v3->_bf._size + 1) - v13;
      v3->_bf._size = (v13 + v3->_bf._size) % LODWORD(v3->_bf._base);
      *(&v3->_bf._size + 1) = v19;
      fwrite(v6, v13, 4uLL, *a1);
    }
    fflush(*a1);
  }
  if (v2)
  {
    v20 = (unint64_t *)&v2->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B64EFF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CLSP_LogQueueFinalizer(FILE **a1)
{
  CLSP_Log_FlushBuffer(a1);
  if (*a1)
  {
    fclose(*a1);
    *a1 = 0;
  }
  DspLib::LogContext::~LogContext((DspLib::LogContext *)a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t clsp::CLSP_Log::CLSP_Log(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__fs::filesystem::path *p_p;
  std::__fs::filesystem::path *v9;
  const __CFString *v10;
  const char *CStringPtr;
  const char *v12;
  std::__fs::filesystem::path *v13;
  unsigned int v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  NSObject *v28;
  std::string v30;
  char *v31;
  stat v32;
  std::__fs::filesystem::path __p;
  char __str[512];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = xmmword_1B66A2850;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = operator new(0x40uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E69E48C8;
  v7 = std::vector<float>::vector(v6 + 3, 0x20000uLL);
  v6[7] = 0;
  v6[6] = 0x20000;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  clsp::CLSP_Log::getLogDirectory(&__p);
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v32) == -1)
  {
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
    mkdir((const char *)v9, 0x1FFu);
  }
  v10 = (const __CFString *)MGGetStringAnswer();
  CStringPtr = CFStringGetCStringPtr(v10, 0x8000100u);
  v12 = "";
  if (CStringPtr)
    v12 = CStringPtr;
  v13 = &__p;
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  v14 = llround(*(double *)(a3 + 8));
  if (*(char *)(a2 + 23) >= 0)
    v15 = (const char *)a2;
  else
    v15 = *(const char **)a2;
  snprintf(__str, 0x200uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", (const char *)v13, v12, *(_DWORD *)a3, *(char *)(a3 + 4), *(char *)(a3 + 5), *(char *)(a3 + 6), *(char *)(a3 + 7), v14, v15);
  v16 = (char *)operator new();
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  v31 = v16;
  *(_QWORD *)v16 = fopen(__str, "wb");
  v18 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)v16 + 5);
  *((_QWORD *)v16 + 4) = v18;
  *((_QWORD *)v16 + 5) = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::vector<float>::resize((uint64_t)(v16 + 48), *(_QWORD *)(a1 + 8));
  std::string::operator=((std::string *)(v16 + 8), (const std::string *)a2);
  std::string::basic_string[abi:ne180100]<0>(&v30, "com.apple.coreaudio.");
  v24 = *(char *)(a2 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)a2;
  else
    v25 = *(const std::string::value_type **)a2;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a2 + 23);
  else
    v26 = *(_QWORD *)(a2 + 8);
  v27 = std::string::append(&v30, v25, v26);
  if ((v27->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
  v28 = dispatch_queue_create((const char *)v27, 0);
  *(_QWORD *)(a1 + 40) = v28;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    v28 = *(NSObject **)(a1 + 40);
    if (v28)
      goto LABEL_34;
  }
  else if (v28)
  {
LABEL_34:
    dispatch_set_context(v28, v16);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 40), (dispatch_function_t)CLSP_LogQueueFinalizer);
    goto LABEL_37;
  }
  DspLib::LogContext::~LogContext((DspLib::LogContext *)v16);
  MEMORY[0x1BCC95CEC]();
LABEL_37:
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B64F02BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,DspLib::LogContext *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a24 < 0)
    operator delete(__p);
  std::unique_ptr<clsp::CLSPLogContext>::reset[abi:ne180100](&a25);
  if (a49 < 0)
    operator delete(a44);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100](v49 + 24);
  _Unwind_Resume(a1);
}

DspLib::LogContext *std::unique_ptr<clsp::CLSPLogContext>::reset[abi:ne180100](DspLib::LogContext **a1)
{
  DspLib::LogContext *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    DspLib::LogContext::~LogContext(result);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E48C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<clsp::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69E48C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC95CECLL);
}

void std::__shared_ptr_emplace<clsp::CircularBuffer<float>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t clsp::CLSP_Log::CLSP_Log(uint64_t a1, uint64_t a2)
{
  CATimeUtilities *v4;
  uint64_t CurrentGregorianDate;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = CFTimeZoneCopySystem();
  CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v4);
  v7 = v6;
  CFRelease(v4);
  v9[0] = CurrentGregorianDate;
  v9[1] = v7;
  return clsp::CLSP_Log::CLSP_Log(a1, a2, (uint64_t)v9);
}

void clsp::CLSP_Log::FlushLog(clsp::CLSP_Log *this)
{
  NSObject *v2;
  void *context;

  if (*((_QWORD *)this + 2))
  {
    v2 = *((_QWORD *)this + 5);
    context = dispatch_get_context(v2);
    dispatch_async_f(v2, context, (dispatch_function_t)CLSP_Log_FlushBuffer);
    *((_QWORD *)this + 2) = 0;
  }
}

void clsp::CLSP_Log::~CLSP_Log(dispatch_object_t *this)
{
  clsp::CLSP_Log::FlushLog((clsp::CLSP_Log *)this);
  dispatch_release(this[5]);
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
}

void clsp::CLSP_Log::LogCLSPData(clsp::CLSP_Log *this, const float *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  int v11;
  size_t v12;
  void *v13;
  const float *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = a3;
  v7 = *((_QWORD *)this + 3);
  v8 = *(_DWORD *)(v7 + 28);
  if ((unint64_t)a3
     + (int)((*(_DWORD *)(v7 + 24) & ((int)(v8 - *(_DWORD *)(v7 + 32)) >> 31)) + v8 - *(_DWORD *)(v7 + 32)) >= *(unsigned int *)(v7 + 24))
  {
    do
    {
      dispatch_sync(*((dispatch_queue_t *)this + 5), &__block_literal_global_19714);
      v7 = *((_QWORD *)this + 3);
      v8 = *(_DWORD *)(v7 + 28);
      v9 = *(unsigned int *)(v7 + 24);
    }
    while (v6 + (int)((v9 & ((int)(v8 - *(_DWORD *)(v7 + 32)) >> 31)) + v8 - *(_DWORD *)(v7 + 32)) >= v9);
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(v7 + 24);
  }
  v10 = (4 * a3);
  v11 = v9 - v8;
  if (v9 - v8 >= a3)
  {
    v13 = (void *)(*(_QWORD *)v7 + 4 * v8);
    v14 = __src;
  }
  else
  {
    v12 = (v10 - 4 * v11);
    memcpy((void *)(*(_QWORD *)v7 + 4 * v8), __src, (4 * v11));
    v13 = *(void **)v7;
    v14 = &__src[v11];
    v10 = v12;
  }
  memcpy(v13, v14, v10);
  *(_DWORD *)(v7 + 36) += a3;
  *(_DWORD *)(v7 + 28) = (*(_DWORD *)(v7 + 28) + a3) % *(_DWORD *)(v7 + 24);
  v15 = *((_QWORD *)this + 1);
  v16 = *((_QWORD *)this + 2) + a3;
  *((_QWORD *)this + 2) = v16;
  if (v16 >= v15)
    clsp::CLSP_Log::FlushLog(this);
}

void clsp::CLSP_Log::printToSyslog(clsp::CLSP_Log *this, const char *a2, const char *a3, ...)
{
  std::__shared_weak_count *size;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  _QWORD block[4];
  std::string __p;
  std::string v14;
  va_list v15;
  va_list va;

  va_start(va, a3);
  if ((_DWORD)this)
  {
    va_copy(v15, va);
    clsp::CLSP_Log::SyslogMsgBuffer((clsp::CLSP_Log *)&v14);
    size = (std::__shared_weak_count *)v14.__r_.__value_.__l.__size_;
    v5 = *(char **)v14.__r_.__value_.__l.__data_;
    if (!v14.__r_.__value_.__l.__size_)
      goto LABEL_6;
    v6 = (unint64_t *)(v14.__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if (!a2)
        return;
    }
    else
    {
LABEL_6:
      if (!a2)
        return;
    }
    clsp::CLSP_Log::SyslogMsgBuffer((clsp::CLSP_Log *)&v14);
    vsnprintf(v5, *(_QWORD *)(v14.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v14.__r_.__value_.__l.__data_, a2, v15);
    v8 = (std::__shared_weak_count *)v14.__r_.__value_.__l.__size_;
    if (v14.__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(v14.__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, v5);
    if (clsp::CLSP_Log::SyslogQueue(void)::once != -1)
      dispatch_once(&clsp::CLSP_Log::SyslogQueue(void)::once, &__block_literal_global_14_19719);
    v11 = clsp::CLSP_Log::SyslogQueue(void)::gLogQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN4clsp8CLSP_Log13printToSyslogEiPKcz_block_invoke;
    block[3] = &__block_descriptor_tmp_10;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      __p = v14;
    dispatch_async(v11, block);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1B64F078C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void clsp::CLSP_Log::SyslogMsgBuffer(clsp::CLSP_Log *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  {
    std::allocate_shared[abi:ne180100]<std::vector<char>,std::allocator<std::vector<char>>,clsp::CLSP_Log::CLSP_Log_Constants,void>(0x400u);
    __cxa_atexit((void (*)(void *))std::shared_ptr<std::vector<char>>::~shared_ptr[abi:ne180100], &clsp::CLSP_Log::SyslogMsgBuffer(void)::gMsgBuffer, &dword_1B5ED0000);
  }
  v3 = unk_1EF137110;
  *(_QWORD *)this = clsp::CLSP_Log::SyslogMsgBuffer(void)::gMsgBuffer;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_1B64F0840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN4clsp8CLSP_Log13printToSyslogEiPKcz_block_invoke()
{
  return CFLog();
}

dispatch_queue_t ___ZN4clsp8CLSP_Log11SyslogQueueEv_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coreaudio.syslog", 0);
  clsp::CLSP_Log::SyslogQueue(void)::gLogQueue = (uint64_t)result;
  return result;
}

std::vector<char> *std::allocate_shared[abi:ne180100]<std::vector<char>,std::allocator<std::vector<char>>,clsp::CLSP_Log::CLSP_Log_Constants,void>(unsigned int a1)
{
  std::vector<char> *v2;
  std::vector<char> *result;

  v2 = (std::vector<char> *)operator new(0x30uLL);
  v2->__end_ = 0;
  v2->__end_cap_.__value_ = 0;
  v2->__begin_ = (std::vector<char>::pointer)&unk_1E69BF8C0;
  result = std::vector<char>::vector(v2 + 1, a1);
  clsp::CLSP_Log::SyslogMsgBuffer(void)::gMsgBuffer = (uint64_t)result;
  unk_1EF137110 = v2;
  return result;
}

void sub_1B64F090C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t spp3Subsystem(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&spp3Subsystem(void)::onceflag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&spp3Subsystem(void)::onceflag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<spp3Subsystem(void)::$_0 &&>>);
  }
  return spp3Subsystem(void)::scope;
}

os_log_t std::__call_once_proxy[abi:ne180100]<std::tuple<spp3Subsystem(void)::$_0 &&>>()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "spp3");
  *v0 = result;
  spp3Subsystem(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t spp3SubsystemAsync(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&spp3SubsystemAsync(void)::onceflag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&spp3SubsystemAsync(void)::onceflag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<spp3SubsystemAsync(void)::$_0 &&>>);
  }
  return spp3SubsystemAsync(void)::scope;
}

os_log_t std::__call_once_proxy[abi:ne180100]<std::tuple<spp3SubsystemAsync(void)::$_0 &&>>()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "spp3");
  *v0 = result;
  spp3SubsystemAsync(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t shouldTraceRender(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&shouldTraceRender(void)::onceflag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&shouldTraceRender(void)::onceflag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<shouldTraceRender(void)::$_0 &&>>);
  }
  return shouldTraceRender(void)::traceRender;
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<shouldTraceRender(void)::$_0 &&>>()
{
  _QWORD *result;
  uint64_t v1;
  _QWORD v2[3];
  _QWORD *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2[0] = &off_1E69E4900;
  v3 = v2;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)CFSTR("clsp_trace_iothread"), CFSTR("com.apple.coreaudio"), (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v2);
  result = v3;
  if (v3 == v2)
  {
    v1 = 4;
    result = v2;
  }
  else
  {
    if (!v3)
      return result;
    v1 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1))();
}

void sub_1B64F0B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1BCC95CECLL);
}

_QWORD *std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69E4900;
  return result;
}

void std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69E4900;
}

void std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, char *a2)
{
  shouldTraceRender(void)::traceRender = *a2;
}

void VoiceProcessorV2::LoopBackInitialize(VoiceProcessorV2 *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  char *v5;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  AudioBufferList **v14;
  int v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  const char *v24;
  int v25;
  int v26;
  int *v27;
  const char *v28;
  _BYTE buf[12];
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = (char *)this + 15744;
  if (!*((_BYTE *)this + 15744) || !*((_BYTE *)this + 476) || !*((_BYTE *)this + 477))
    return;
  v7 = *((double *)this + 41);
  v8 = *((double *)this + 118);
  if (v7 == v8)
  {
    v13 = *((_QWORD *)this + 1969);
    *((_QWORD *)this + 1969) = 0;
    if (v13)
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    v12 = 2 * *((_DWORD *)this + 131);
    if (*((_DWORD *)this + 89) == *((_DWORD *)this + 243))
    {
      *((_DWORD *)this + 3940) = 0;
      v14 = (AudioBufferList **)((char *)this + 15768);
      goto LABEL_14;
    }
  }
  else
  {
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)buf, v8, v7, this, 1, a4, a5);
    v10 = *((_QWORD *)this + 1969);
    *((_QWORD *)this + 1969) = *(_QWORD *)buf;
    if (v10)
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    LODWORD(v9) = *((_DWORD *)this + 131);
    v11 = ceil(*((double *)this + 41) * (double)v9 / *((double *)this + 118));
    v12 = (v11 + v11);
  }
  *((_DWORD *)this + 3940) = v12;
  v14 = (AudioBufferList **)((char *)this + 15768);
  if (v12)
  {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), v12, v14);
    goto LABEL_15;
  }
LABEL_14:
  myFreeABLDynamic(v14);
LABEL_15:
  v15 = *((_DWORD *)this + 89);
  *((_DWORD *)this + 3944) = v12;
  *((_DWORD *)this + 3945) = v15;
  *((_DWORD *)this + 3948) = 0;
  *((_QWORD *)this + 1973) = 0;
  v16 = (void *)*((_QWORD *)this + 1975);
  v17 = *((_QWORD *)this + 1976) - (_QWORD)v16;
  v18 = (v15 * v12);
  if (v18 == v17 >> 2)
  {
    if (v17 >= 1)
    {
      v19 = (unint64_t)v17 >> 2;
      v20 = ((unint64_t)v17 >> 2) + 1;
      bzero(*((void **)this + 1975), 4 * (v20 - ((unint64_t)v17 > 3)));
LABEL_20:
      bzero(v16, 4 * (v20 - (v19 != 0)));
    }
  }
  else
  {
    std::valarray<float>::resize((uint64_t)this + 15800, v18, 0.0);
    v16 = (void *)*((_QWORD *)this + 1975);
    v21 = *((_QWORD *)this + 1976) - (_QWORD)v16;
    if (v21 >= 1)
    {
      v19 = (unint64_t)v21 >> 2;
      v20 = ((unint64_t)v21 >> 2) + 1;
      goto LABEL_20;
    }
  }
  *((_DWORD *)this + 3946) = 0;
  *((_DWORD *)this + 3948) = 0;
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v22 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    v23 = (*v22 ? *v22 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v24 = "ON";
      v25 = *((_DWORD *)this + 243);
      if (!*((_QWORD *)this + 1969))
        v24 = "OFF";
      v26 = *((_DWORD *)this + 89);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "vpDebug_Loopback.cpp";
      v30 = 1024;
      v31 = 50;
      v32 = 2080;
      v33 = v24;
      v34 = 1024;
      v35 = v25;
      v36 = 1024;
      v37 = v26;
      _os_log_impl(&dword_1B5ED0000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loopbackinitialize SRC=%s, usOut#chan=%d, dlMix#chan=%d", buf, 0x28u);
    }
  }
  v27 = (int *)*((_QWORD *)this + 1570);
  if (v27 && (v5[153] || v5[154]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    if (*((_QWORD *)this + 1969))
      v28 = "ON";
    else
      v28 = "OFF";
    CALegacyLog::log(v27, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 50, "LoopBackInitialize", "loopbackinitialize SRC=%s, usOut#chan=%d, dlMix#chan=%d", v28, *((_DWORD *)this + 243), *((_DWORD *)this + 89));
  }
}

void VoiceProcessorV2::LoopBackRead(VoiceProcessorV2 *this, unsigned int a2, AudioBufferList *a3)
{
  char *v3;
  unsigned int v7;
  unsigned int v8;
  UInt32 mNumberBuffers;
  BOOL v10;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  void **p_mData;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  _QWORD *v25;
  NSObject *v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  int *v32;
  unsigned int v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 15744;
  if (*((_BYTE *)this + 15744))
  {
    v7 = *((_DWORD *)this + 3946);
    if (v7 >= a2)
      v8 = a2;
    else
      v8 = *((_DWORD *)this + 3946);
    mNumberBuffers = a3->mNumberBuffers;
    if (v8)
      v10 = mNumberBuffers == *((_DWORD *)this + 3945);
    else
      v10 = 0;
    if (!v10 || v7 == 0)
    {
      v8 = 0;
    }
    else
    {
      v12 = *((_DWORD *)this + 3944) - *((_DWORD *)this + 3947);
      if (v12 >= v8)
        v13 = v8;
      else
        v13 = v12;
      if (mNumberBuffers)
      {
        v14 = 0;
        p_mData = &a3->mBuffers[0].mData;
        do
        {
          v16 = *p_mData;
          p_mData += 2;
          memcpy(v16, (const void *)(*((_QWORD *)this + 1975)+ 4 * (*((_DWORD *)this + 3947) + *((_DWORD *)this + 3944) * v14++)), 4 * v13);
          v17 = *((unsigned int *)this + 3945);
        }
        while (v14 < v17);
        if (v8 > v12 && (_DWORD)v17)
        {
          v18 = 0;
          v19 = &a3->mBuffers[0].mData;
          do
          {
            v20 = (char *)*v19;
            v19 += 2;
            memcpy(&v20[4 * v13], (const void *)(*((_QWORD *)this + 1975) + 4 * (*((_DWORD *)this + 3944) * v18++)), 4 * (v8 - v13));
          }
          while (v18 < *((unsigned int *)this + 3945));
        }
      }
      *((_DWORD *)this + 3946) -= v8;
      v21 = *((_DWORD *)this + 3947) + v8;
      *((_DWORD *)this + 3947) = v21;
      v22 = *((_DWORD *)this + 3944);
      v23 = v21 >= v22;
      v24 = v21 - v22;
      if (v23)
        *((_DWORD *)this + 3947) = v24;
    }
    v33 = a2 - v8;
    if (a2 > v8)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v25 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v26 = (*v25 ? *v25 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v35 = "vpDebug_Loopback.cpp";
          v36 = 1024;
          v37 = 100;
          v38 = 1024;
          v39 = v8;
          v40 = 1024;
          v41 = a2;
          _os_log_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> loopbackread ERROR read %d (requested %d) frames", buf, 0x1Eu);
        }
      }
      v27 = (int *)*((_QWORD *)this + 1570);
      if (v27 && (v3[153] || v3[154]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v27, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 100, "LoopBackRead", "loopbackread ERROR read %d (requested %d) frames", v8, a2);
      }
      if (a3->mNumberBuffers)
      {
        v28 = 0;
        v29 = 16;
        do
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v30 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v31 = (*v30 ? *v30 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              v35 = "vpDebug_Loopback.cpp";
              v36 = 1024;
              v37 = 102;
              v38 = 1024;
              v39 = a2 - v8;
              v40 = 1024;
              v41 = v28;
              _os_log_impl(&dword_1B5ED0000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loopbackread filled %d zeros in outABL channel %d", buf, 0x1Eu);
            }
          }
          v32 = (int *)*((_QWORD *)this + 1570);
          if (v32 && (v3[153] || v3[154]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            CALegacyLog::log(v32, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 102, "LoopBackRead", "loopbackread filled %d zeros in outABL channel %d", v33, v28);
          }
          bzero((void *)(*(_QWORD *)((char *)&a3->mNumberBuffers + v29) + 4 * v8), 4 * v33);
          ++v28;
          v29 += 16;
        }
        while (v28 < a3->mNumberBuffers);
      }
    }
  }
}

void AUCPMSVolumeV1::~AUCPMSVolumeV1(AUCPMSVolumeV1 *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69E4948;
  v2 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v2)
    std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](v2);
  *(_QWORD *)this = &off_1E69E4B98;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 544);
  ausdk::AUBase::~AUBase(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69E4948;
  v2 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v2)
    std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](v2);
  *(_QWORD *)this = &off_1E69E4B98;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 544);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUCPMSVolumeV1::Initialize(AUCPMSVolumeV1 *this)
{
  NSObject *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  const AudioStreamBasicDescription *v7;
  double v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  NSObject *v11;
  NSObject *v12;
  int16x8_t v13;
  std::string *v14;
  int16x8_t v15;
  _BYTE *v16;
  uint64_t result;
  ausdk::AUElement **v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  float Parameter;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  float v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  float v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  unint64_t v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  unint64_t v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  NSObject *v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  AUCPMSVolumeV1 *v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  std::string::size_type v98;
  AUCPMSVolumeV1 *v99;
  AUCPMSVolumeV1 *v100;
  BOOL v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  float v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  float v125;
  std::string *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  void **v134;
  NSObject *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  std::string *v139;
  std::string *v140;
  NSObject *v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  std::string *v145;
  std::string *v146;
  NSObject *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  std::string *v151;
  std::string *v152;
  AUCPMSVolumeV1 *v153;
  float *v154;
  char *v155;
  _BYTE *v156;
  uint64_t v157;
  _BYTE *v158;
  float v159;
  char **v160;
  char **v161;
  char *v162;
  __int128 v163;
  AUCPMSVolumeV1 *v164;
  AUCPMSVolumeV1 *v165;
  float v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  float *v170;
  float v171;
  float v172;
  unsigned int v173;
  unsigned int v174;
  float32x2_t v175;
  uint64_t v176;
  float v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  NSObject *v185;
  NSObject *v186;
  void *v187[2];
  int64_t v188;
  _QWORD v189[2];
  AudioStreamBasicDescription v190;
  _OWORD v191[2];
  uint64_t v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  std::string v197;
  std::string v198;
  std::string v199;
  std::string v200;
  std::string v201;
  std::string v202;
  std::string v203;
  std::string v204;
  std::string v205;
  std::string v206;
  std::string v207;
  std::string v208;
  std::string v209;
  std::string v210;
  std::string v211;
  _BYTE __p[32];
  std::string v214;
  _BYTE buf[40];
  __int128 v216;
  __int128 v217;
  float v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    v2 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      goto LABEL_9;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 44;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Starting initialization.", buf, 0x12u);
  }
LABEL_9:
  Element = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  v191[0] = *(_OWORD *)(Element + 80);
  v191[1] = v4;
  v192 = *(_QWORD *)(Element + 112);
  v5 = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v190.mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v190.mBytesPerPacket = v6;
  *(_QWORD *)&v190.mBitsPerChannel = *(_QWORD *)(v5 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v191, &v190, v7))
  {
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v11 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = &v214;
      CA::StreamDescription::AsString((CA::StreamDescription *)v191, (uint64_t)&v214, v13);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v214.__r_.__value_.__r.__words[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)&v190, (uint64_t)__p, v15);
      if (__p[23] >= 0)
        v16 = __p;
      else
        v16 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v14;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v16;
      _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: Input and output formats need to be equivalent, but we have:\n[Input:  %s], and\n[Output: %s]", buf, 0x26u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
    }
    return 4294956428;
  }
  if (*((_BYTE *)this + 584))
  {
    v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0) + 80);
    v9 = *((_QWORD *)this + 9);
    if (v9)
    {
      v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
    }
    else
    {
      v18 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v18)
        v10 = 0;
      else
        v10 = *v18;
    }
    Parameter = ausdk::AUElement::GetParameter(v10, 0);
    v23 = *((_QWORD *)this + 9);
    if (v23)
    {
      v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
    }
    else
    {
      v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v25)
        v24 = 0;
      else
        v24 = *v25;
    }
    v26 = ausdk::AUElement::GetParameter(v24, 1u);
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    v30 = ausdk::AUElement::GetParameter(v28, 2u);
    if (*((_BYTE *)this + 608))
    {
      v31 = *((_QWORD *)this + 75);
      v32 = *((_QWORD *)this + 74);
    }
    else
    {
      v32 = 0x4248000042480000;
      v31 = 0x4248000042480000;
    }
    v189[0] = v32;
    v189[1] = v31;
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v33 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        goto LABEL_107;
    }
    else
    {
      v33 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      std::to_string((std::string *)__p, (float)(*(float *)&v32 * 1000.0));
      v34 = std::string::insert((std::string *)__p, 0, "Instantaneous: ", 0xFuLL);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v214, "mW; ", 4uLL);
      v37 = HIDWORD(v32);
      v38 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v210.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v38;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::to_string(&v211, (float)(*(float *)&v37 * 1000.0));
      v39 = std::string::insert(&v211, 0, "100ms: ", 7uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v39->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append((std::string *)__p, "mW; ", 4uLL);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v214;
      else
        v43 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        size = v214.__r_.__value_.__l.__size_;
      std::string::append(&v210, (const std::string::value_type *)v43, size);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      std::to_string(&v211, (float)(*(float *)&v31 * 1000.0));
      v45 = std::string::insert(&v211, 0, "1000ms: ", 8uLL);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v45->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append((std::string *)__p, "mW; ", 4uLL);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v214;
      else
        v49 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v50 = v214.__r_.__value_.__l.__size_;
      std::string::append(&v210, (const std::string::value_type *)v49, v50);
      v51 = HIDWORD(v31);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      std::to_string(&v211, (float)(*(float *)&v51 * 1000.0));
      v52 = std::string::insert(&v211, 0, "thermal: ", 9uLL);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v52->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append((std::string *)__p, "mW", 2uLL);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v214;
      else
        v56 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v57 = v214.__r_.__value_.__l.__size_;
      std::string::append(&v210, (const std::string::value_type *)v56, v57);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      v58 = &v210;
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = (std::string *)v210.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 79;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v58;
      _os_log_impl(&dword_1B5ED0000, v33, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with PowerBudget: [ %s ]", buf, 0x1Cu);
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v210.__r_.__value_.__l.__data_);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
    }
LABEL_107:
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v59 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
LABEL_241:
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v135 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            goto LABEL_268;
        }
        else
        {
          v135 = MEMORY[0x1E0C81028];
        }
        if (!os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
          goto LABEL_268;
        std::to_string((std::string *)__p, v30);
        while (1)
        {
          if ((__p[23] & 0x80000000) != 0)
          {
            v137 = *(_BYTE **)__p;
            if (*(_BYTE *)(*(_QWORD *)__p + *(_QWORD *)&__p[8] - 1) != 48)
            {
LABEL_253:
              v214 = *(std::string *)__p;
              memset(__p, 0, 24);
              while (1)
              {
                if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                {
                  v139 = (std::string *)v214.__r_.__value_.__r.__words[0];
                  if (*(_BYTE *)(v214.__r_.__value_.__r.__words[0] + v214.__r_.__value_.__l.__size_ - 1) != 46)
                  {
LABEL_260:
                    v211 = v214;
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    v140 = &v211;
                    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v140 = (std::string *)v211.__r_.__value_.__r.__words[0];
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 81;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = v140;
                    _os_log_impl(&dword_1B5ED0000, v135, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with Volume level: %s", buf, 0x1Cu);
                    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v211.__r_.__value_.__l.__data_);
                    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
                      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
LABEL_268:
                    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                    {
                      v141 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
                      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                        goto LABEL_295;
                    }
                    else
                    {
                      v141 = MEMORY[0x1E0C81028];
                    }
                    if (os_log_type_enabled(v141, OS_LOG_TYPE_INFO))
                    {
                      std::to_string((std::string *)__p, Parameter);
                      while (1)
                      {
                        if ((__p[23] & 0x80000000) != 0)
                        {
                          v143 = *(_BYTE **)__p;
                          if (*(_BYTE *)(*(_QWORD *)__p + *(_QWORD *)&__p[8] - 1) != 48)
                          {
LABEL_280:
                            v214 = *(std::string *)__p;
                            memset(__p, 0, 24);
                            while (1)
                            {
                              if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                              {
                                v145 = (std::string *)v214.__r_.__value_.__r.__words[0];
                                if (*(_BYTE *)(v214.__r_.__value_.__r.__words[0] + v214.__r_.__value_.__l.__size_ - 1) != 46)
                                {
LABEL_287:
                                  v211 = v214;
                                  if ((__p[23] & 0x80000000) != 0)
                                    operator delete(*(void **)__p);
                                  v146 = &v211;
                                  if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v146 = (std::string *)v211.__r_.__value_.__r.__words[0];
                                  *(_DWORD *)buf = 136315650;
                                  *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
                                  *(_WORD *)&buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 82;
                                  *(_WORD *)&buf[18] = 2080;
                                  *(_QWORD *)&buf[20] = v146;
                                  _os_log_impl(&dword_1B5ED0000, v141, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with Smoother attack TC: %s", buf, 0x1Cu);
                                  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v211.__r_.__value_.__l.__data_);
                                  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
                                    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
                                  goto LABEL_295;
                                }
                                v144 = --v214.__r_.__value_.__l.__size_;
                              }
                              else
                              {
                                if (__p[HIBYTE(v214.__r_.__value_.__r.__words[2]) + 31] != 46)
                                  goto LABEL_287;
                                v144 = HIBYTE(v214.__r_.__value_.__r.__words[2]) - 1;
                                *((_BYTE *)&v214.__r_.__value_.__s + 23) = (*((_BYTE *)&v214.__r_.__value_.__s + 23) - 1) & 0x7F;
                                v145 = &v214;
                              }
                              v145->__r_.__value_.__s.__data_[v144] = 0;
                            }
                          }
                          v142 = --*(_QWORD *)&__p[8];
                        }
                        else
                        {
                          if (__p[__p[23] - 1] != 48)
                            goto LABEL_280;
                          v142 = __p[23] - 1;
                          __p[23] = (__p[23] - 1) & 0x7F;
                          v143 = __p;
                        }
                        v143[v142] = 0;
                      }
                    }
LABEL_295:
                    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                    {
                      v147 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
                      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                        goto LABEL_320;
                    }
                    else
                    {
                      v147 = MEMORY[0x1E0C81028];
                    }
                    if (!os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
                      goto LABEL_320;
                    std::to_string((std::string *)__p, v26);
                    while (1)
                    {
                      if ((__p[23] & 0x80000000) != 0)
                      {
                        v149 = *(_BYTE **)__p;
                        if (*(_BYTE *)(*(_QWORD *)__p + *(_QWORD *)&__p[8] - 1) != 48)
                        {
LABEL_307:
                          v214 = *(std::string *)__p;
                          memset(__p, 0, 24);
                          while (1)
                          {
                            if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                            {
                              v151 = (std::string *)v214.__r_.__value_.__r.__words[0];
                              if (*(_BYTE *)(v214.__r_.__value_.__r.__words[0] + v214.__r_.__value_.__l.__size_ - 1) != 46)
                              {
LABEL_314:
                                v211 = v214;
                                if ((__p[23] & 0x80000000) != 0)
                                  operator delete(*(void **)__p);
                                v152 = &v211;
                                if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                  v152 = (std::string *)v211.__r_.__value_.__r.__words[0];
                                *(_DWORD *)buf = 136315650;
                                *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
                                *(_WORD *)&buf[12] = 1024;
                                *(_DWORD *)&buf[14] = 83;
                                *(_WORD *)&buf[18] = 2080;
                                *(_QWORD *)&buf[20] = v152;
                                _os_log_impl(&dword_1B5ED0000, v147, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with Smoother release TC: %s", buf, 0x1Cu);
                                if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v211.__r_.__value_.__l.__data_);
LABEL_320:
                                *(_QWORD *)&buf[8] = 0;
                                *(_QWORD *)&buf[16] = 0;
                                *(_QWORD *)buf = &buf[8];
                                v153 = (AUCPMSVolumeV1 *)*((_QWORD *)this + 68);
                                if (v153 != (AUCPMSVolumeV1 *)((char *)this + 552))
                                {
                                  do
                                  {
                                    v154 = (float *)((char *)v153 + 28);
                                    v155 = *(char **)&buf[8];
                                    v156 = &buf[8];
                                    if (*(_BYTE **)buf == &buf[8])
                                      goto LABEL_327;
                                    v157 = *(_QWORD *)&buf[8];
                                    v158 = &buf[8];
                                    if (*(_QWORD *)&buf[8])
                                    {
                                      do
                                      {
                                        v156 = (_BYTE *)v157;
                                        v157 = *(_QWORD *)(v157 + 8);
                                      }
                                      while (v157);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v156 = (_BYTE *)*((_QWORD *)v158 + 2);
                                        v101 = *(_QWORD *)v156 == (_QWORD)v158;
                                        v158 = v156;
                                      }
                                      while (v101);
                                    }
                                    v159 = *v154;
                                    if (*((float *)v156 + 7) < *v154)
                                    {
LABEL_327:
                                      if (*(_QWORD *)&buf[8])
                                        v160 = (char **)v156;
                                      else
                                        v160 = (char **)&buf[8];
                                      if (*(_QWORD *)&buf[8])
                                        v161 = (char **)(v156 + 8);
                                      else
                                        v161 = (char **)&buf[8];
                                    }
                                    else
                                    {
                                      v160 = (char **)&buf[8];
                                      v161 = (char **)&buf[8];
                                      if (*(_QWORD *)&buf[8])
                                      {
                                        v161 = (char **)&buf[8];
                                        while (1)
                                        {
                                          while (1)
                                          {
                                            v160 = (char **)v155;
                                            v166 = *((float *)v155 + 7);
                                            if (v159 >= v166)
                                              break;
                                            v155 = *(char **)v155;
                                            v161 = v160;
                                            if (!*v160)
                                              goto LABEL_334;
                                          }
                                          if (v166 >= v159)
                                            break;
                                          v161 = (char **)(v155 + 8);
                                          v155 = (char *)*((_QWORD *)v155 + 1);
                                          if (!v155)
                                            goto LABEL_334;
                                        }
                                      }
                                    }
                                    if (!*v161)
                                    {
LABEL_334:
                                      v162 = (char *)operator new(0x30uLL);
                                      v163 = *(_OWORD *)v154;
                                      *((_DWORD *)v162 + 11) = *((_DWORD *)v153 + 11);
                                      *(_OWORD *)(v162 + 28) = v163;
                                      *(_QWORD *)v162 = 0;
                                      *((_QWORD *)v162 + 1) = 0;
                                      *((_QWORD *)v162 + 2) = v160;
                                      *v161 = v162;
                                      if (**(_QWORD **)buf)
                                      {
                                        *(_QWORD *)buf = **(_QWORD **)buf;
                                        v162 = *v161;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], (uint64_t *)v162);
                                      ++*(_QWORD *)&buf[16];
                                    }
                                    v164 = (AUCPMSVolumeV1 *)*((_QWORD *)v153 + 1);
                                    if (v164)
                                    {
                                      do
                                      {
                                        v165 = v164;
                                        v164 = *(AUCPMSVolumeV1 **)v164;
                                      }
                                      while (v164);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v165 = (AUCPMSVolumeV1 *)*((_QWORD *)v153 + 2);
                                        v101 = *(_QWORD *)v165 == (_QWORD)v153;
                                        v153 = v165;
                                      }
                                      while (!v101);
                                    }
                                    v153 = v165;
                                  }
                                  while (v165 != (AUCPMSVolumeV1 *)((char *)this + 552));
                                }
                                (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 71) + 32))(&v214);
                                cpms::efficiency::AmpModelFactory((cpms::efficiency *)&buf[24], (const __CFDictionary **)&v214);
                                if (v214.__r_.__value_.__r.__words[0])
                                  CFRelease(v214.__r_.__value_.__l.__data_);
                                *(_QWORD *)&buf[32] = *((_QWORD *)this + 72);
                                LODWORD(v216) = cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>((uint64_t *)&buf[24], (float *)v189);
                                *(_QWORD *)((char *)&v216 + 4) = __PAIR64__(v168, v167);
                                HIDWORD(v216) = v169;
                                v170 = (float *)cpms::PowerLUT<float>::GetForVolumeLevel((uint64_t)buf, v30);
                                v171 = cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>((uint64_t *)&buf[24], v170);
                                *(_QWORD *)&v217 = __PAIR64__(v173, LODWORD(v171));
                                *((_QWORD *)&v217 + 1) = __PAIR64__(v174, LODWORD(v172));
                                v175 = vdiv_f32(*(float32x2_t *)&v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3400000034000000, (float32x2_t)__PAIR64__(v173, LODWORD(v171))), (int8x8_t)0x3400000034000000, (int8x8_t)__PAIR64__(v173, LODWORD(v171))));
                                if (v172 < 0.00000011921)
                                  v172 = 0.00000011921;
                                if (v175.f32[1] < v175.f32[0])
                                  v175.f32[0] = v175.f32[1];
                                if ((float)(*((float *)&v216 + 2) / v172) < v175.f32[0])
                                  v175.f32[0] = *((float *)&v216 + 2) / v172;
                                if (*(float *)&buf[36] < v175.f32[0])
                                  v175.i32[0] = *(_DWORD *)&buf[36];
                                if (*(float *)&buf[32] >= v175.f32[0])
                                  v175.i32[0] = *(_DWORD *)&buf[32];
                                v218 = sqrtf(v175.f32[0]);
                                v176 = operator new();
                                *(_DWORD *)v176 = 0;
                                *(float *)(v176 + 4) = expf(-1.0 / (float)(v26 * 100.0));
                                *(float *)(v176 + 8) = expf(-1.0 / (float)(Parameter * 100.0));
                                *(_DWORD *)(v176 + 12) = 1120403456;
                                *(_BYTE *)(v176 + 16) = 1;
                                v178 = *(_QWORD *)&buf[8];
                                *(_QWORD *)(v176 + 24) = *(_QWORD *)buf;
                                *(_QWORD *)(v176 + 32) = v178;
                                v179 = v176 + 32;
                                v180 = *(_QWORD *)&buf[16];
                                *(_QWORD *)(v176 + 40) = *(_QWORD *)&buf[16];
                                if (v180)
                                {
                                  *(_QWORD *)(v178 + 16) = v179;
                                  *(_QWORD *)buf = &buf[8];
                                  *(_QWORD *)&buf[8] = 0;
                                  *(_QWORD *)&buf[16] = 0;
                                }
                                else
                                {
                                  *(_QWORD *)(v176 + 24) = v179;
                                }
                                v181 = *(_QWORD *)&buf[24];
                                v182 = *(_QWORD *)&buf[32];
                                *(_QWORD *)&buf[24] = 0;
                                *(_QWORD *)(v176 + 48) = v181;
                                *(_QWORD *)(v176 + 56) = v182;
                                v183 = v217;
                                *(_OWORD *)(v176 + 64) = v216;
                                *(_OWORD *)(v176 + 80) = v183;
                                *(float *)(v176 + 96) = v218;
                                v177 = v8;
                                LODWORD(v181) = (int)(float)(v177 / 100.0);
                                *(_DWORD *)(v176 + 104) = v181;
                                *(_DWORD *)(v176 + 108) = v181;
                                *(_DWORD *)(v176 + 112) = 1065353216;
                                v184 = *((_QWORD *)this + 78);
                                *((_QWORD *)this + 78) = v176;
                                if (v184)
                                  std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](v184);
                                *(_QWORD *)&buf[24] = 0;
                                std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)&buf[8]);
                                if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
                                  dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
                                if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                                {
                                  v185 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
                                  if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                                    goto LABEL_377;
                                }
                                else
                                {
                                  v185 = MEMORY[0x1E0C81028];
                                }
                                if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 136315394;
                                  *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
                                  *(_WORD *)&buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 89;
                                  _os_log_impl(&dword_1B5ED0000, v185, OS_LOG_TYPE_INFO, "%25s:%-5d Kernel created successfully.", buf, 0x12u);
                                }
LABEL_377:
                                AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::RefreshParamsAndProps((uint64_t)this);
                                if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
                                  dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
                                if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                                {
                                  v186 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
                                  if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                                    return 0;
                                }
                                else
                                {
                                  v186 = MEMORY[0x1E0C81028];
                                }
                                if (!os_log_type_enabled(v186, OS_LOG_TYPE_INFO))
                                  return 0;
                                *(_DWORD *)buf = 136315394;
                                *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
                                *(_WORD *)&buf[12] = 1024;
                                *(_DWORD *)&buf[14] = 101;
                                v19 = "%25s:%-5d Ending initialization.";
                                v20 = v186;
                                v21 = OS_LOG_TYPE_INFO;
LABEL_385:
                                _os_log_impl(&dword_1B5ED0000, v20, v21, v19, buf, 0x12u);
                                return 0;
                              }
                              v150 = --v214.__r_.__value_.__l.__size_;
                            }
                            else
                            {
                              if (__p[HIBYTE(v214.__r_.__value_.__r.__words[2]) + 31] != 46)
                                goto LABEL_314;
                              v150 = HIBYTE(v214.__r_.__value_.__r.__words[2]) - 1;
                              *((_BYTE *)&v214.__r_.__value_.__s + 23) = (*((_BYTE *)&v214.__r_.__value_.__s + 23) - 1) & 0x7F;
                              v151 = &v214;
                            }
                            v151->__r_.__value_.__s.__data_[v150] = 0;
                          }
                        }
                        v148 = --*(_QWORD *)&__p[8];
                      }
                      else
                      {
                        if (__p[__p[23] - 1] != 48)
                          goto LABEL_307;
                        v148 = __p[23] - 1;
                        __p[23] = (__p[23] - 1) & 0x7F;
                        v149 = __p;
                      }
                      v149[v148] = 0;
                    }
                  }
                  v138 = --v214.__r_.__value_.__l.__size_;
                }
                else
                {
                  if (__p[HIBYTE(v214.__r_.__value_.__r.__words[2]) + 31] != 46)
                    goto LABEL_260;
                  v138 = HIBYTE(v214.__r_.__value_.__r.__words[2]) - 1;
                  *((_BYTE *)&v214.__r_.__value_.__s + 23) = (*((_BYTE *)&v214.__r_.__value_.__s + 23) - 1) & 0x7F;
                  v139 = &v214;
                }
                v139->__r_.__value_.__s.__data_[v138] = 0;
              }
            }
            v136 = --*(_QWORD *)&__p[8];
          }
          else
          {
            if (__p[__p[23] - 1] != 48)
              goto LABEL_253;
            v136 = __p[23] - 1;
            __p[23] = (__p[23] - 1) & 0x7F;
            v137 = __p;
          }
          v137[v136] = 0;
        }
      }
    }
    else
    {
      v59 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      std::to_string((std::string *)__p, *((_QWORD *)this + 70));
      v60 = std::string::insert((std::string *)__p, 0, "[", 1uLL);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v214, " LUT entries]\n", 0xEuLL);
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v193.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v64 = (AUCPMSVolumeV1 *)*((_QWORD *)this + 68);
      if (v64 != (AUCPMSVolumeV1 *)((char *)this + 552))
      {
        do
        {
          std::to_string(&v206, *((float *)v64 + 7) * 16.0);
          v65 = std::string::insert(&v206, 0, "  Volume level ", 0xFuLL);
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v207.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          v67 = std::string::append(&v207, "/16: ", 5uLL);
          v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v208.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          std::to_string((std::string *)__p, (float)(*((float *)v64 + 8) * 1000.0));
          v69 = std::string::insert((std::string *)__p, 0, "Instantaneous: ", 0xFuLL);
          v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v214.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          v71 = std::string::append(&v214, "mW; ", 4uLL);
          v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v205.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v214.__r_.__value_.__l.__data_);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          std::to_string(&v211, (float)(*((float *)v64 + 9) * 1000.0));
          v73 = std::string::insert(&v211, 0, "100ms: ", 7uLL);
          v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v73->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          v75 = std::string::append((std::string *)__p, "mW; ", 4uLL);
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v214.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v214;
          else
            v77 = (std::string *)v214.__r_.__value_.__r.__words[0];
          if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
          else
            v78 = v214.__r_.__value_.__l.__size_;
          std::string::append(&v205, (const std::string::value_type *)v77, v78);
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v214.__r_.__value_.__l.__data_);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v211.__r_.__value_.__l.__data_);
          std::to_string(&v211, (float)(*((float *)v64 + 10) * 1000.0));
          v79 = std::string::insert(&v211, 0, "1000ms: ", 8uLL);
          v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v79->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          v81 = std::string::append((std::string *)__p, "mW; ", 4uLL);
          v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v214.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v83 = &v214;
          else
            v83 = (std::string *)v214.__r_.__value_.__r.__words[0];
          if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
          else
            v84 = v214.__r_.__value_.__l.__size_;
          std::string::append(&v205, (const std::string::value_type *)v83, v84);
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v214.__r_.__value_.__l.__data_);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v211.__r_.__value_.__l.__data_);
          std::to_string(&v211, (float)(*((float *)v64 + 11) * 1000.0));
          v85 = std::string::insert(&v211, 0, "thermal: ", 9uLL);
          v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v85->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          v87 = std::string::append((std::string *)__p, "mW", 2uLL);
          v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v214.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = &v214;
          else
            v89 = (std::string *)v214.__r_.__value_.__r.__words[0];
          if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
          else
            v90 = v214.__r_.__value_.__l.__size_;
          std::string::append(&v205, (const std::string::value_type *)v89, v90);
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v214.__r_.__value_.__l.__data_);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v211.__r_.__value_.__l.__data_);
          if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = &v205;
          else
            v91 = (std::string *)v205.__r_.__value_.__r.__words[0];
          if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = HIBYTE(v205.__r_.__value_.__r.__words[2]);
          else
            v92 = v205.__r_.__value_.__l.__size_;
          v93 = std::string::append(&v208, (const std::string::value_type *)v91, v92);
          v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
          v209.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v94;
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          v95 = std::string::append(&v209, "\n", 1uLL);
          v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v210.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = &v210;
          else
            v97 = (std::string *)v210.__r_.__value_.__r.__words[0];
          if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v98 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
          else
            v98 = v210.__r_.__value_.__l.__size_;
          std::string::append(&v193, (const std::string::value_type *)v97, v98);
          if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v210.__r_.__value_.__l.__data_);
          if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v209.__r_.__value_.__l.__data_);
          if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v205.__r_.__value_.__l.__data_);
          if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v208.__r_.__value_.__l.__data_);
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v207.__r_.__value_.__l.__data_);
          if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v206.__r_.__value_.__l.__data_);
          v99 = (AUCPMSVolumeV1 *)*((_QWORD *)v64 + 1);
          if (v99)
          {
            do
            {
              v100 = v99;
              v99 = *(AUCPMSVolumeV1 **)v99;
            }
            while (v99);
          }
          else
          {
            do
            {
              v100 = (AUCPMSVolumeV1 *)*((_QWORD *)v64 + 2);
              v101 = *(_QWORD *)v100 == (_QWORD)v64;
              v64 = v100;
            }
            while (!v101);
          }
          v64 = v100;
        }
        while (v100 != (AUCPMSVolumeV1 *)((char *)this + 552));
      }
      v102 = std::string::insert(&v193, 0, "Amp system:\n-", 0xDuLL);
      v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      v194.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      v104 = std::string::append(&v194, "\n", 1uLL);
      v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v195.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      v106 = std::string::append(&v195, "-[Amplifier efficiency expression: ", 0x23uLL);
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v196.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 71) + 40))(&v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = &v214;
      else
        v108 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v109 = v214.__r_.__value_.__l.__size_;
      v110 = std::string::append(&v196, (const std::string::value_type *)v108, v109);
      v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v197.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0;
      v110->__r_.__value_.__r.__words[2] = 0;
      v110->__r_.__value_.__r.__words[0] = 0;
      v112 = std::string::append(&v197, "]", 1uLL);
      v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v198.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      v114 = std::string::append(&v198, "\n", 1uLL);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v199.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      v116 = std::string::append(&v199, "-[TargetGainRangeDB: [", 0x16uLL);
      v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v200.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      v118 = log10f(*((float *)this + 144));
      std::to_string((std::string *)__p, v118 * 10.0);
      if (__p[23] >= 0)
        v119 = __p;
      else
        v119 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v120 = __p[23];
      else
        v120 = *(_QWORD *)&__p[8];
      v121 = std::string::append(&v200, v119, v120);
      v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
      v201.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v122;
      v121->__r_.__value_.__l.__size_ = 0;
      v121->__r_.__value_.__r.__words[2] = 0;
      v121->__r_.__value_.__r.__words[0] = 0;
      v123 = std::string::append(&v201, ", ", 2uLL);
      v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v202.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      v125 = log10f(*((float *)this + 145));
      std::to_string(&v211, v125 * 10.0);
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = &v211;
      else
        v126 = (std::string *)v211.__r_.__value_.__r.__words[0];
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
      else
        v127 = v211.__r_.__value_.__l.__size_;
      v128 = std::string::append(&v202, (const std::string::value_type *)v126, v127);
      v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      v203.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      v130 = std::string::append(&v203, "] dB", 4uLL);
      v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v131;
      v130->__r_.__value_.__l.__size_ = 0;
      v130->__r_.__value_.__r.__words[2] = 0;
      v130->__r_.__value_.__r.__words[0] = 0;
      v132 = std::string::append(&v204, "\n", 1uLL);
      v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      v188 = v132->__r_.__value_.__r.__words[2];
      *(_OWORD *)v187 = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v203.__r_.__value_.__l.__data_);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v202.__r_.__value_.__l.__data_);
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v200.__r_.__value_.__l.__data_);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v199.__r_.__value_.__l.__data_);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v198.__r_.__value_.__l.__data_);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v196.__r_.__value_.__l.__data_);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v194.__r_.__value_.__l.__data_);
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      v134 = v187;
      if (v188 < 0)
        v134 = (void **)v187[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 80;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v134;
      _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with LUTSystem:\n%s", buf, 0x1Cu);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[0]);
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
    }
    goto LABEL_241;
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    v12 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      return 0;
  }
  else
  {
    v12 = MEMORY[0x1E0C81028];
  }
  result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AUCPMSVolumeV1.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 61;
    v19 = "%25s:%-5d ERROR: We have not been configured with a LUT system; we cannot initialize properly and will process"
          " in soft bypass.";
    v20 = v12;
    v21 = OS_LOG_TYPE_ERROR;
    goto LABEL_385;
  }
  return result;
}

void sub_1B64F3000(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;

  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    v3 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      goto LABEL_10;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)(v2 - 240) = 136315394;
    v4 = v2 - 240;
    *(_QWORD *)(v4 + 4) = "AUCPMSVolumeV1.cpp";
    *(_WORD *)(v2 - 228) = 1024;
    *(_DWORD *)(v4 + 14) = 96;
    _os_log_impl(&dword_1B5ED0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: We have not been configured fully; we could not initialize the kernel and will process in soft bypass.",
      (uint8_t *)(v2 - 240),
      0x12u);
  }
LABEL_10:
  __cxa_end_catch();
  JUMPOUT(0x1B64F2E40);
}

uint64_t AUCPMSVolumeV1::ProcessBufferLists(AUCPMSVolumeV1 *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  uint64_t mNumberBuffers;
  uint64_t v10;
  unint64_t v11;
  UInt32 *p_mDataByteSize;
  UInt32 *v13;
  void **v15;
  void **v16;
  uint64_t result;
  NSObject *v18;
  NSObject *v19;
  BOOL v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  float *v31;
  float *v32;
  float *v33;
  uint64_t v34;
  ausdk::AUElement *v35;
  UInt32 v36;
  UInt32 v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  UInt32 v41;
  UInt32 mDataByteSize;
  void **p_mData;
  void **v44;
  ausdk::AUElement **v45;
  float v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  UInt32 v52;
  __int16 v53;
  UInt32 v54;
  __int16 v55;
  UInt32 v56;
  __int16 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 17))
    return 4294956429;
  mNumberBuffers = a3->mNumberBuffers;
  if ((_DWORD)mNumberBuffers != a4->mNumberBuffers)
  {
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      v18 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v36 = a3->mNumberBuffers;
      v37 = a4->mNumberBuffers;
      v47 = 136315906;
      v48 = "AUCPMSVolumeV1.cpp";
      v49 = 1024;
      v50 = 134;
      v51 = 1024;
      v52 = v36;
      v53 = 1024;
      v54 = v37;
      v38 = "%25s:%-5d ERROR: Input bus (%u-ch) and output bus (%u-ch) have different channel counts.";
      v39 = v18;
      v40 = 30;
LABEL_59:
      _os_log_impl(&dword_1B5ED0000, v39, OS_LOG_TYPE_ERROR, v38, (uint8_t *)&v47, v40);
    }
    return 4294956428;
  }
  if ((_DWORD)mNumberBuffers)
  {
    v10 = 0;
    v11 = 4 * a5;
    p_mDataByteSize = &a4->mBuffers[0].mDataByteSize;
    v13 = &a3->mBuffers[0].mDataByteSize;
    do
    {
      if (v11 > *v13 || v11 > *p_mDataByteSize)
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1)
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_19764);
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          v19 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(_QWORD *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
            return 4294956428;
        }
        else
        {
          v19 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v41 = *v13;
          mDataByteSize = a4->mBuffers[v10].mDataByteSize;
          v47 = 136316418;
          v48 = "AUCPMSVolumeV1.cpp";
          v49 = 1024;
          v50 = 144;
          v51 = 1024;
          v52 = v10;
          v53 = 1024;
          v54 = v41;
          v55 = 1024;
          v56 = mDataByteSize;
          v57 = 1024;
          v58 = v11;
          v38 = "%25s:%-5d ERROR: (For ch-%i) input buffers hold %u bytes, output buffers hold %u bytes, but %u was expected.";
          v39 = v19;
          v40 = 42;
          goto LABEL_59;
        }
        return 4294956428;
      }
      ++v10;
      p_mDataByteSize += 4;
      v13 += 4;
    }
    while (mNumberBuffers != v10);
    if (*((unsigned __int16 *)this + 268) >= 0x100u && *((_WORD *)this + 268) != 0)
    {
      p_mData = &a4->mBuffers[0].mData;
      v44 = &a3->mBuffers[0].mData;
      do
      {
        if (a5)
          memmove(*p_mData, *v44, 4 * a5);
        p_mData += 2;
        v44 += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
      return 0;
    }
    if (*((_QWORD *)this + 78))
      goto LABEL_36;
    v15 = &a4->mBuffers[0].mData;
    v16 = &a3->mBuffers[0].mData;
    do
    {
      if (a5)
        memmove(*v15, *v16, 4 * a5);
      result = 0;
      v15 += 2;
      v16 += 2;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  else
  {
    v20 = *((unsigned __int16 *)this + 268) < 0x100u || *((_WORD *)this + 268) == 0;
    if (v20 && *((_QWORD *)this + 78))
    {
LABEL_36:
      AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::RefreshParamsAndProps((uint64_t)this);
      if ((int)a5 >= 1)
      {
        v22 = 0;
        v23 = *((_QWORD *)this + 78);
        v24 = *(_DWORD *)(v23 + 104);
        v25 = *(_DWORD *)(v23 + 108);
        v21.n128_u32[0] = 1.0;
        do
        {
          if (v25 == v24)
          {
            v26 = *(float *)(v23 + 96);
            if (*(_BYTE *)(v23 + 16))
            {
              *(_BYTE *)(v23 + 16) = 0;
            }
            else
            {
              if (*(float *)v23 >= v26)
                v27 = 8;
              else
                v27 = 4;
              v26 = (float)(*(float *)v23 * *(float *)(v23 + v27)) + (float)((float)(1.0 - *(float *)(v23 + v27)) * v26);
            }
            *(float *)v23 = v26;
            *(float *)(v23 + 112) = v26;
            v25 = 1;
          }
          else
          {
            ++v25;
          }
          v28 = a4->mNumberBuffers;
          v29 = &a4->mBuffers[0].mData;
          v30 = &a3->mBuffers[0].mData;
          if ((_DWORD)v28)
          {
            do
            {
              v32 = (float *)*v29;
              v29 += 2;
              v31 = v32;
              v33 = (float *)*v30;
              v30 += 2;
              v31[v22] = *(float *)(v23 + 112) * v33[v22];
              --v28;
            }
            while (v28);
          }
          ++v22;
        }
        while (v22 != a5);
        *(_DWORD *)(v23 + 108) = v25;
      }
      v34 = *((_QWORD *)this + 9);
      if (v34)
      {
        v35 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v34 + 32))(v34, 0, v21);
      }
      else
      {
        v45 = (ausdk::AUElement **)*((_QWORD *)this + 6);
        if (*((ausdk::AUElement ***)this + 7) == v45)
          v35 = 0;
        else
          v35 = *v45;
      }
      v46 = log10f(*(float *)(*((_QWORD *)this + 78) + 112));
      ausdk::AUElement::SetParameter(v35, 3u, v46 * 20.0, 0);
      result = 0;
      atomic_store(1u, (unsigned __int8 *)this + 619);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUCPMSVolumeV1::Render(AUCPMSVolumeV1 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v10;
  uint64_t BufferList;
  uint64_t v12;
  uint64_t v13;

  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v10 = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 128), 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUCPMSVolumeV1 *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this
                                                                                                  + 176))(this, a2, BufferList, v13, a4);
  }
  return result;
}

uint64_t AUCPMSVolumeV1::ValidFormat(AUCPMSVolumeV1 *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if ((a2 - 1) < 2 && a3 == 0)
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  else
    return 0;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::RefreshParamsAndProps(uint64_t a1)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  unsigned __int8 v5;
  float Parameter;
  uint64_t v7;
  unsigned __int8 v8;
  float v9;
  uint64_t v10;
  unsigned __int8 v11;
  float v12;
  uint64_t v13;
  float *v14;
  int v15;
  float v16;
  int v17;
  float32x2_t v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 v21;
  uint64_t v22;
  int v23;
  float v24;
  int v25;
  float32x2_t v26;
  float v27;
  float v28;
  uint64_t v30;
  char v31;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  v5 = atomic_load((unsigned __int8 *)(a1 + 616));
  if ((v5 & 1) != 0)
  {
    Parameter = ausdk::AUElement::GetParameter(v3, 0);
    v7 = *(_QWORD *)(a1 + 624);
    if (v7)
      *(float *)(v7 + 8) = expf(-1.0 / (float)(Parameter * *(float *)(v7 + 12)));
    atomic_store(0, (unsigned __int8 *)(a1 + 616));
  }
  v8 = atomic_load((unsigned __int8 *)(a1 + 617));
  if ((v8 & 1) != 0)
  {
    v9 = ausdk::AUElement::GetParameter(v3, 1u);
    v10 = *(_QWORD *)(a1 + 624);
    if (v10)
      *(float *)(v10 + 4) = expf(-1.0 / (float)(v9 * *(float *)(v10 + 12)));
    atomic_store(0, (unsigned __int8 *)(a1 + 617));
  }
  v11 = atomic_load((unsigned __int8 *)(a1 + 618));
  if ((v11 & 1) != 0)
  {
    v12 = ausdk::AUElement::GetParameter(v3, 2u);
    v13 = *(_QWORD *)(a1 + 624);
    if (v13)
    {
      v14 = (float *)cpms::PowerLUT<float>::GetForVolumeLevel(v13 + 24, v12);
      *(float *)(v13 + 80) = cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>((uint64_t *)(v13 + 48), v14);
      *(_DWORD *)(v13 + 84) = v15;
      *(float *)(v13 + 88) = v16;
      *(_DWORD *)(v13 + 92) = v17;
      v18 = vdiv_f32(*(float32x2_t *)(v13 + 64), (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)(v13 + 80)), (int8x8_t)0x3400000034000000, *(int8x8_t *)(v13 + 80)));
      if (v16 < 0.00000011921)
        v16 = 0.00000011921;
      if (v18.f32[1] < v18.f32[0])
        v18.f32[0] = v18.f32[1];
      if ((float)(*(float *)(v13 + 72) / v16) < v18.f32[0])
        v18.f32[0] = *(float *)(v13 + 72) / v16;
      if (*(float *)(v13 + 60) < v18.f32[0])
        v18.i32[0] = *(_DWORD *)(v13 + 60);
      if (*(float *)(v13 + 56) >= v18.f32[0])
        v18.i32[0] = *(_DWORD *)(v13 + 56);
      *(float *)(v13 + 96) = sqrtf(v18.f32[0]);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 618));
  }
  v19 = atomic_load((unsigned __int8 *)(a1 + 619));
  if ((v19 & 1) != 0)
  {
    ausdk::AUElement::GetParameter(v3, 3u);
    atomic_store(0, (unsigned __int8 *)(a1 + 619));
  }
  v30 = a1 + 528;
  v20 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 528));
  v31 = v20;
  if (v20)
  {
    v21 = atomic_load((unsigned __int8 *)(a1 + 620));
    if ((v21 & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 608))
      {
        v22 = *(_QWORD *)(a1 + 624);
        if (v22)
        {
          *(float *)(v22 + 64) = cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>((uint64_t *)(v22 + 48), (float *)(a1 + 592));
          *(_DWORD *)(v22 + 68) = v23;
          *(float *)(v22 + 72) = v24;
          *(_DWORD *)(v22 + 76) = v25;
          v26 = vdiv_f32(*(float32x2_t *)(v22 + 64), (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)(v22 + 80)), (int8x8_t)0x3400000034000000, *(int8x8_t *)(v22 + 80)));
          v27 = *(float *)(v22 + 88);
          if (v27 < 0.00000011921)
            v27 = 0.00000011921;
          v28 = v24 / v27;
          if (v26.f32[1] < v26.f32[0])
            v26.f32[0] = v26.f32[1];
          if (v28 < v26.f32[0])
            v26.f32[0] = v28;
          if (*(float *)(v22 + 60) < v26.f32[0])
            v26.i32[0] = *(_DWORD *)(v22 + 60);
          if (*(float *)(v22 + 56) >= v26.f32[0])
            v26.i32[0] = *(_DWORD *)(v22 + 56);
          *(float *)(v22 + 96) = sqrtf(v26.f32[0]);
        }
      }
      atomic_store(0, (unsigned __int8 *)(a1 + 620));
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::unlock((uint64_t)&v30);
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
}

void sub_1B64F3C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>(uint64_t *a1, float *a2)
{
  float v4;

  v4 = cpms::efficiency::AmpModelBase<float>::Compute(*a1, *a2);
  cpms::efficiency::AmpModelBase<float>::Compute(*a1, a2[1]);
  cpms::efficiency::AmpModelBase<float>::Compute(*a1, a2[2]);
  cpms::efficiency::AmpModelBase<float>::Compute(*a1, a2[3]);
  return v4;
}

float cpms::efficiency::AmpModelBase<float>::Compute(uint64_t a1, float a2)
{
  float *v4;
  float v5;
  void *__p;
  void *v8;
  float *v9;

  v4 = (float *)operator new(4uLL);
  __p = v4;
  *v4 = a2;
  v8 = v4 + 1;
  v9 = v4 + 1;
  v5 = (*(float (**)(uint64_t, void **))(*(_QWORD *)a1 + 16))(a1, &__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1B64F3D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *cpms::PowerLUT<float>::GetForVolumeLevel(uint64_t a1, float a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (v4)
  {
    v5 = v2;
    v6 = v3;
    do
    {
      v7 = v6 + 1;
      if (*((float *)v6 + 7) >= a2)
      {
        v7 = v6;
        v5 = v6;
      }
      v6 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 == v2)
    {
      do
      {
        v5 = v3;
        v3 = (_QWORD *)v3[1];
      }
      while (v3);
    }
  }
  else
  {
    do
    {
      v5 = (_QWORD *)v2[2];
      v8 = *v5 == (_QWORD)v2;
      v2 = v5;
    }
    while (v8);
  }
  return v5 + 4;
}

os_log_t ___ZN14AUTemplateBaseI14AUCPMSVolumeV1NSt3__15tupleIJN4cpms8VolumeV110Parameters18TC_smoother_attackENS5_19TC_smoother_releaseENS5_11VolumeLevelENS5_10OutputGainEEEENS2_IJN9AUGeneric10Properties6BypassENS4_10Properties9LUTSystemEEEENS2_IJNSE_11PowerBudgetEEEEE11GetLogScopeEv_block_invoke_19768()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "AUCPMSVolumeV1");
  *v0 = result;
  AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 32));
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t *BiquadInterpolator::BiquadInterpolator(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  CAXException *v14;
  CAXException *v16;
  CAXException *exception;
  CAXException *v18;
  _BYTE v19[16];
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v6 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v19, 0xFFFFFFCE);
      *(_DWORD *)buf = 136315906;
      v21 = "BiquadInterpolator.cpp";
      v22 = 1024;
      v23 = 59;
      v24 = 2080;
      v25 = v19;
      v26 = 2080;
      v27 = "No anchor points";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "No anchor points", -50);
  }
  v7 = (v5 - v6) >> 2;
  v8 = a1[3];
  if (v7 != 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v8) >> 3))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v19, 0xFFFFFFCE);
      *(_DWORD *)buf = 136315906;
      v21 = "BiquadInterpolator.cpp";
      v22 = 1024;
      v23 = 60;
      v24 = 2080;
      v25 = v19;
      v26 = 2080;
      v27 = "Anchor points must be paired with an anchor biquad";
      _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v18 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v18, "Anchor points must be paired with an anchor biquad", -50);
  }
  v9 = v7 - 1;
  v10 = (_QWORD *)(v8 + 32);
  v11 = (float *)(v6 + 4);
  while (v9)
  {
    if (*v11 < *(v11 - 1))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v19, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        v21 = "BiquadInterpolator.cpp";
        v22 = 1024;
        v23 = 64;
        v24 = 2080;
        v25 = v19;
        v26 = 2080;
        v27 = "Anchor points must monotonically ascend";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v16 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v16, "Anchor points must monotonically ascend", -1);
    }
    v12 = *v10 - *(v10 - 1);
    v13 = *(v10 - 3) - *(v10 - 4);
    --v9;
    v10 += 3;
    ++v11;
    if (v12 != v13)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v19, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        v21 = "BiquadInterpolator.cpp";
        v22 = 1024;
        v23 = 67;
        v24 = 2080;
        v25 = v19;
        v26 = 2080;
        v27 = "Anchor filters must be the same size";
        _os_log_impl(&dword_1B5ED0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v14 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v14, "Anchor filters must be the same size", -1);
    }
  }
  return a1;
}

void sub_1B64F42BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t BiquadInterpolator::GetCoefficientsAtPosition(uint64_t result, float *a2, uint64_t a3, float a4)
{
  int **v4;
  int **v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;

  v4 = *(int ***)(result + 24);
  v5 = *(int ***)(result + 32);
  if (v4 == v5)
    __assert_rtn("GetCoefficientsAtPosition", "BiquadInterpolator.cpp", 74, "!mAnchorBiquads.empty()");
  v6 = *(float **)result;
  v7 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result == v7)
    __assert_rtn("GetCoefficientsAtPosition", "BiquadInterpolator.cpp", 75, "!mAnchorPoints.empty()");
  v8 = (a3 - (uint64_t)a2) >> 2;
  v9 = *v4;
  v10 = v4[1];
  if (v8 != v10 - *v4)
    __assert_rtn("GetCoefficientsAtPosition", "BiquadInterpolator.cpp", 76, "outCoeffs.size() == mAnchorBiquads.front().size()");
  if (*v6 >= a4)
  {
    if (v10 != v9)
    {
      if (v8 <= 1)
        v15 = 1;
      else
        v15 = (a3 - (uint64_t)a2) >> 2;
      do
      {
        v16 = *v9++;
        *(_DWORD *)a2++ = v16;
        --v15;
      }
      while (v15);
    }
  }
  else if (*(float *)(v7 - 4) <= a4)
  {
    v17 = *(v5 - 3);
    v18 = (char *)*(v5 - 2) - (char *)v17;
    if (v18)
    {
      v19 = v18 >> 2;
      if (v19 <= 1)
        v19 = 1;
      do
      {
        v20 = *v17++;
        *(_DWORD *)a2++ = v20;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    v11 = (v7 - (uint64_t)v6) >> 2;
    v12 = v11 - 1;
    if (v11 != 1)
    {
      for (i = 0; ; ++i)
      {
        v14 = i + 1;
        if (v6[i] <= a4 && v6[i + 1] > a4)
          break;
        if (v12 == v14)
          return result;
      }
      v21 = (float *)v4[3 * i];
      v22 = (char *)v4[3 * i + 1] - (char *)v21;
      if (v22)
      {
        v23 = v22 >> 2;
        v24 = (float *)v4[3 * v14];
        if (v23 <= 1)
          v23 = 1;
        do
        {
          v25 = *v21++;
          v26 = v25;
          v27 = *v24++;
          *a2++ = v26 + (float)((float)(a4 - v6[i]) * (float)((float)(v27 - v26) / (float)(v6[v14] - v6[i])));
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<clsp::CLSP_Log,std::allocator<clsp::CLSP_Log>,std::string,CATimeUtilities::GregorianDate const&,void>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E69E4F68;
  result = clsp::CLSP_Log::CLSP_Log((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1B64F4524(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void AUHapticsProtection::~AUHapticsProtection(AUHapticsProtection *this)
{
  AUHapticsProtection::~AUHapticsProtection(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E69E4FA0;
  AUHapticsProtection::Cleanup(this);
  v2 = (void *)*((_QWORD *)this + 78);
  if (v2)
  {
    *((_QWORD *)this + 79) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 75);
  if (v3)
  {
    *((_QWORD *)this + 76) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 72);
  if (v4)
  {
    *((_QWORD *)this + 73) = v4;
    operator delete(v4);
  }
  std::unique_ptr<HapticTravelLimiter::HTL>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUHapticsProtection::Initialize(AUHapticsProtection *this)
{
  ausdk::AUScope *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  _BOOL4 AppBooleanValue;
  unint64_t CurrentGregorianDate;
  double v10;
  double v11;
  char *v12;
  int v13;
  Float64 v14;
  UInt32 v15;
  char *v16;
  Float64 v17;
  UInt32 v18;
  unint64_t v19;
  AudioStreamBasicDescription v20;
  AudioStreamBasicDescription v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = (AUHapticsProtection *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  v26 = *(_OWORD *)(Element + 80);
  v27 = v4;
  v28 = *(_QWORD *)(Element + 112);
  v5 = ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  v23 = *(_OWORD *)(v5 + 80);
  v24 = v6;
  v25 = *(_QWORD *)(v5 + 112);
  result = 4294956428;
  if (HIDWORD(v27) == 2 && HIDWORD(v24) == 1)
  {
    AUHapticsProtection::CreateHTLFromParams((AUHapticsProtection *)&v22, this);
    std::unique_ptr<HapticTravelLimiter::HTL>::reset[abi:ne180100]((uint64_t *)this + 66, v22);
    if (!*((_QWORD *)this + 66))
      __assert_rtn("Initialize", "AUHapticsProtection.cpp", 107, "mHTL");
    *((_DWORD *)this + 137) = *((_DWORD *)this + 136);
    (*(void (**)(AUHapticsProtection *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    SimpleMeters::Initialize((AUHapticsProtection *)((char *)this + 600), (const CAStreamBasicDescription *)&v26, (const CAStreamBasicDescription *)&v23);
    AppBooleanValue = CACFPreferencesGetAppBooleanValue(CFSTR("happ_file_saving"), CFSTR("com.apple.coreaudio"), 0);
    result = 0;
    *((_BYTE *)this + 552) = AppBooleanValue;
    if (AppBooleanValue)
    {
      CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(0);
      v11 = v10;
      v12 = (char *)operator new[]();
      v13 = (int)v11;
      snprintf(v12, 0x100uLL, "/tmp/%d%02d%02d.%02d%02d%02d.happ_in.caf", CurrentGregorianDate, (int)(CurrentGregorianDate >> 8) >> 24, (int)(CurrentGregorianDate >> 16) >> 24, (int)(CurrentGregorianDate >> 24) >> 24, SHIDWORD(CurrentGregorianDate) >> 24, (int)v11);
      v14 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
      v15 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108);
      v21.mSampleRate = v14;
      *(_QWORD *)&v21.mFormatID = 0x96C70636DLL;
      v21.mBytesPerPacket = 4 * v15;
      v21.mFramesPerPacket = 1;
      v21.mBytesPerFrame = 4 * v15;
      v21.mChannelsPerFrame = v15;
      *(_QWORD *)&v21.mBitsPerChannel = 32;
      CreateExtDebugCapture(v12, &v21, (ExtAudioFileRef *)this + 70);
      MEMORY[0x1BCC95CC8](v12, 0x1000C8077774924);
      v16 = (char *)operator new[]();
      snprintf(v16, 0x100uLL, "/tmp/%d%02d%02d.%02d%02d%02d.happ_out.caf", CurrentGregorianDate, (int)(CurrentGregorianDate >> 8) >> 24, (int)(CurrentGregorianDate >> 16) >> 24, (int)(CurrentGregorianDate >> 24) >> 24, SHIDWORD(CurrentGregorianDate) >> 24, v13);
      v17 = *(double *)(ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)this + 128), 0) + 80);
      v18 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)this + 128), 0) + 108);
      v20.mSampleRate = v17;
      *(_QWORD *)&v20.mFormatID = 0x96C70636DLL;
      v20.mBytesPerPacket = 4 * v18;
      v20.mFramesPerPacket = 1;
      v20.mBytesPerFrame = 4 * v18;
      v20.mChannelsPerFrame = v18;
      *(_QWORD *)&v20.mBitsPerChannel = 32;
      CreateExtDebugCapture(v16, &v20, (ExtAudioFileRef *)this + 71);
      MEMORY[0x1BCC95CC8](v16, 0x1000C8077774924);
      ExtAudioFileWriteAsync(*((ExtAudioFileRef *)this + 70), 0, 0);
      ExtAudioFileWriteAsync(*((ExtAudioFileRef *)this + 71), 0, 0);
      v19 = (2 * *((_DWORD *)this + 84));
      LODWORD(v22) = 0;
      std::vector<float>::resize((uint64_t)this + 576, v19, &v22);
      return 0;
    }
  }
  return result;
}

OpaqueExtAudioFile *AUHapticsProtection::Cleanup(AUHapticsProtection *this)
{
  OpaqueExtAudioFile *v2;
  OpaqueExtAudioFile *result;

  std::unique_ptr<HapticTravelLimiter::HTL>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  v2 = (OpaqueExtAudioFile *)*((_QWORD *)this + 70);
  if (v2)
  {
    ExtAudioFileDispose(v2);
    *((_QWORD *)this + 70) = 0;
  }
  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 71);
  if (result)
  {
    result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    *((_QWORD *)this + 71) = 0;
  }
  *((_QWORD *)this + 76) = *((_QWORD *)this + 75);
  *((_QWORD *)this + 79) = *((_QWORD *)this + 78);
  return result;
}

uint64_t AUHapticsProtection::Reset(AUHapticsProtection *this)
{
  float **v2;

  v2 = (float **)*((_QWORD *)this + 66);
  if (v2)
    HapticTravelLimiter::HTL::reset(v2);
  SimpleMeters::Reset((uint64_t)this + 600);
  return 0;
}

uint64_t AUHapticsProtection::GetPropertyInfo(AUHapticsProtection *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t result;

  if (a2 == 3007)
  {
    v7 = 1;
    v8 = 4;
LABEL_12:
    result = 0;
    *a5 = v8;
    *a6 = v7;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1)
      v6 = 0;
    else
      v6 = (uint64_t)(*((_QWORD *)this + 76) - *((_QWORD *)this + 75)) >> 7;
    if ((a3 & 0xFFFFFFFD) == 0)
      v6 += (uint64_t)(*((_QWORD *)this + 79) - *((_QWORD *)this + 78)) >> 7;
    v7 = 0;
    v8 = 16 * v6;
    goto LABEL_12;
  }
  if (a3 || a2 != 88000 && a2 != 21)
    return 4294956417;
  result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUHapticsProtection::GetProperty(AUHapticsProtection *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, int *a6)
{
  uint64_t result;
  int v11;
  unsigned int v12;

  v12 = 0;
  if (SimpleMeters::HandleGetProperty((AUHapticsProtection *)((char *)this + 600), a2, a3, a5, &v12, a6))
    return v12;
  if (a3)
    return 4294956417;
  if (a2 == 88000)
  {
    result = 0;
    v11 = *((_DWORD *)this + 134);
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    result = 0;
    v11 = *((_DWORD *)this + 135);
  }
  *a5 = v11;
  return result;
}

uint64_t AUHapticsProtection::SetProperty(AUHapticsProtection *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  uint64_t result;
  NSObject *v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  uint8_t buf[4];
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  if (SimpleMeters::HandleSetProperty((AUHapticsProtection *)((char *)this + 600), a2, a3, a5, a6, (int *)&v20, a7))
    return v20;
  if (a3)
    return 4294956417;
  if (a2 == 88000)
  {
    v15 = *a5;
    if (getAUHPLog(void)::onceToken != -1)
      dispatch_once(&getAUHPLog(void)::onceToken, &__block_literal_global_19909);
    v16 = getAUHPLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHPLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (v15 > 2)
        v17 = "Invalid";
      else
        v17 = off_1E69E5510[v15];
      *(_DWORD *)buf = 136315138;
      v22 = v17;
      _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEFAULT, "Setting ProtectionLevel to %s", buf, 0xCu);
    }
    if (*((_DWORD *)this + 134) == (_DWORD)v15)
      return 0;
    *((_DWORD *)this + 134) = v15;
    if ((_DWORD)v15 == 2)
    {
      v18 = 1;
    }
    else
    {
      if ((_DWORD)v15 != 1)
      {
        v18 = 0;
        v19 = 0;
        goto LABEL_27;
      }
      v18 = 0;
    }
    v19 = 1;
LABEL_27:
    result = 0;
    atomic_store(v18, (unsigned __int8 *)(*((_QWORD *)this + 66) + 13));
    atomic_store(v19, (unsigned __int8 *)(*((_QWORD *)this + 66) + 12));
    return result;
  }
  if (a2 != 21)
    return 4294956417;
  *((_DWORD *)this + 135) = *a5;
  if (getAUHPLog(void)::onceToken != -1)
    dispatch_once(&getAUHPLog(void)::onceToken, &__block_literal_global_19909);
  v12 = getAUHPLog(void)::gLog;
  v13 = os_log_type_enabled((os_log_t)getAUHPLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v13)
  {
    v14 = *((_DWORD *)this + 135);
    *(_DWORD *)buf = 67109120;
    LODWORD(v22) = v14;
    _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "Setting bypass to %u", buf, 8u);
    return 0;
  }
  return result;
}

uint64_t AUHapticsProtection::SetParameter(AUHapticsProtection *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 136);
  return result;
}

uint64_t AUHapticsProtection::CanScheduleParameters(AUHapticsProtection *this)
{
  return 0;
}

uint64_t AUHapticsProtection::ProcessMultipleBufferLists(AUHapticsProtection *this, unsigned int *a2, UInt32 a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, const AudioBufferList **a7)
{
  AUHapticsProtection *v10;
  int v11;
  SimpleMeters *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  vDSP_Length v22;
  uint64_t v23;
  const float *v24;
  const float *v25;
  float *Chunk;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float *v39;
  unsigned __int8 v40;
  float *v41;
  float *v42;
  float *v43;
  float *v44;
  float *v45;
  unsigned __int8 v46;
  float *v47;
  float *v48;
  float *v49;
  HapticTravelLimiter::ChunkAllocator *v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  const float *v61;
  vDSP_Length v62;
  SimpleMeters *v64;
  AUHapticsProtection *v65;
  AudioBufferList **v66;
  unsigned int v67;
  float *v68;
  const float *v69;
  const float *mData;
  unsigned int v71;
  float *v72;
  int v73;
  float *__D;
  float *v75;
  AudioBufferList ioData;
  float *v77;
  uint64_t v78;
  float *v79;
  uint64_t v80;
  float *__Y;
  HapticTravelLimiter::ChunkAllocator *v82;
  float __B;
  float *__C;
  uint64_t v85;
  float *__A;
  uint64_t v87;
  float *v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  float *v92;
  uint64_t v93;
  float *v94;
  uint64_t v95;
  float *v96;
  uint64_t v97;
  float *v98;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  float *v104;
  uint64_t v105;
  float *v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  float *v110;
  uint64_t v111;
  float *v112;
  uint64_t v113;
  float v114;
  float v115[3];

  v10 = this;
  v11 = *((_DWORD *)this + 136);
  if (*((_DWORD *)this + 137) != v11)
  {
    AUHapticsProtection::CreateHTLFromParams((AUHapticsProtection *)&ioData, this);
    std::unique_ptr<HapticTravelLimiter::HTL>::reset[abi:ne180100]((uint64_t *)v10 + 66, *(uint64_t *)&ioData.mNumberBuffers);
    if (!*((_QWORD *)v10 + 66))
      __assert_rtn("ProcessMultipleBufferLists", "AUHapticsProtection.cpp", 405, "mHTL");
    *((_DWORD *)v10 + 137) = v11;
  }
  v12 = (AUHapticsProtection *)((char *)v10 + 600);
  v13 = SimpleMeters::ProcessInputBufferList((AUHapticsProtection *)((char *)v10 + 600), a3, *a5);
  if (!(_DWORD)v13)
  {
    v69 = *(const float **)&(*a5)[1].mBuffers[0].mNumberChannels;
    mData = (const float *)(*a5)->mBuffers[0].mData;
    v68 = (float *)(*a7)->mBuffers[0].mData;
    if (*((_BYTE *)v10 + 552))
    {
      if (a3)
      {
        v14 = 0;
        v15 = *((_QWORD *)v10 + 72);
        v16 = *(int **)&(*a5)[1].mBuffers[0].mNumberChannels;
        v17 = (int *)(*a5)->mBuffers[0].mData;
        do
        {
          v18 = *v17++;
          *(_DWORD *)(v15 + 4 * v14) = v18;
          v19 = *v16++;
          *(_DWORD *)(v15 + 4 * (v14 + 1)) = v19;
          v14 += 2;
        }
        while (2 * a3 != v14);
      }
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mNumberChannels = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)v10 + 80), 0)+ 108);
      ioData.mBuffers[0].mDataByteSize = 4
                                       * a3
                                       * *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)v10 + 80), 0)+ 108);
      ioData.mBuffers[0].mData = (void *)*((_QWORD *)v10 + 72);
      ExtAudioFileWriteAsync(*((ExtAudioFileRef *)v10 + 70), a3, &ioData);
    }
    if (*((_DWORD *)v10 + 135))
    {
      ioData.mNumberBuffers = -1082130432;
      LODWORD(v112) = 1065353216;
      vDSP_vadd(mData, 1, v69, 1, v68, 1, a3);
      vDSP_vclip(v68, 1, (const float *)&ioData.mNumberBuffers, (const float *)&v112, v68, 1, a3);
    }
    else if (a3)
    {
      v20 = 0;
      v21 = a3;
      v66 = (AudioBufferList **)a7;
      v67 = a3;
      v64 = (AUHapticsProtection *)((char *)v10 + 600);
      v65 = v10;
      do
      {
        if (v21 >= 0x100)
          v22 = 256;
        else
          v22 = v21;
        v23 = *((_QWORD *)v10 + 66);
        if (*(_DWORD *)(v23 + 300) < v22)
          __assert_rtn("run", "htl.hpp", 741, "nFrames <= _allocator.getChunkSize()");
        v71 = v21 - 256;
        v24 = &mData[v20];
        v25 = &v69[v20];
        Chunk = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v106 = Chunk;
        v107 = v23 + 296;
        vDSP_vadd(v24, 1, v25, 1, Chunk, 1, v22);
        v73 = v20;
        v27 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v104 = v27;
        v105 = v23 + 296;
        v28 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v102 = v28;
        v103 = v23 + 296;
        v29 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v100 = v29;
        v101 = v23 + 296;
        vDSP_vsmul(v24, 1, (const float *)(v23 + 8), v27, 1, v22);
        vDSP_vsmul(v25, 1, (const float *)(v23 + 8), v28, 1, v22);
        vDSP_vsmul(Chunk, 1, (const float *)(v23 + 8), v29, 1, v22);
        vDSP_vabs(v29, 1, v29, 1, v22);
        v30 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v98 = v30;
        v99 = v23 + 296;
        v31 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v96 = v31;
        v97 = v23 + 296;
        vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v23 + 16), *(float **)(v23 + 24), v27, 1, v30, 1, v22);
        vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v23 + 40), *(float **)(v23 + 48), v28, 1, v31, 1, v22);
        v32 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v94 = v32;
        v95 = v23 + 296;
        v33 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v92 = v33;
        v93 = v23 + 296;
        v34 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v90 = v34;
        v91 = v23 + 296;
        HapticTravelLimiter::PlantModel::run((HapticTravelLimiter::PlantModel *)(v23 + 88), v30, v32, v22, (HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        HapticTravelLimiter::PlantModel::run((HapticTravelLimiter::PlantModel *)(v23 + 112), v31, v33, v22, (HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        HapticTravelLimiter::PlantModel::run((HapticTravelLimiter::PlantModel *)(v23 + 136), v31, v34, v22, (HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v35 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v88 = v35;
        v89 = v23 + 296;
        v36 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        *(_QWORD *)&ioData.mNumberBuffers = v36;
        *(_QWORD *)&ioData.mBuffers[0].mNumberChannels = v23 + 296;
        v37 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v112 = v37;
        v113 = v23 + 296;
        vDSP_vadd(v32, 1, v33, 1, v36, 1, v22);
        vDSP_vabs(v36, 1, v36, 1, v22);
        vDSP_vadd(v32, 1, v34, 1, v37, 1, v22);
        vDSP_vabs(v37, 1, v37, 1, v22);
        vDSP_vmax(v36, 1, v37, 1, v35, 1, v22);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v23 + 296, v37);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v23 + 296, v36);
        v38 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        __A = v38;
        v87 = v23 + 296;
        v39 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        __C = v39;
        v85 = v23 + 296;
        HapticTravelLimiter::SlidingWindowMax::update((HapticTravelLimiter::SlidingWindowMax *)(v23 + 240), v35, v38, v22);
        HapticTravelLimiter::SlidingWindowMax::update((HapticTravelLimiter::SlidingWindowMax *)(v23 + 256), v29, v39, v22);
        v40 = atomic_load((unsigned __int8 *)(v23 + 13));
        if ((v40 & 1) != 0)
          vDSP_vclr(__A, 1, v22);
        __B = 0.000000001;
        v41 = __C;
        vDSP_vthr(__C, 1, &__B, __C, 1, v22);
        v42 = __A;
        vDSP_vthr(__A, 1, &__B, __A, 1, v22);
        v43 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        __Y = v43;
        v82 = (HapticTravelLimiter::ChunkAllocator *)(v23 + 296);
        v44 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v79 = v44;
        v80 = v23 + 296;
        v45 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v77 = v45;
        v78 = v23 + 296;
        HapticTravelLimiter::ActivityDetector::run((HapticTravelLimiter::ActivityDetector *)(v23 + 160), v104, v44, v22);
        HapticTravelLimiter::ActivityDetector::run((HapticTravelLimiter::ActivityDetector *)(v23 + 184), v102, v45, v22);
        v46 = atomic_load((unsigned __int8 *)(v23 + 12));
        v114 = 0.0;
        v115[0] = 1.0;
        v72 = v42;
        v75 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        *(_QWORD *)&ioData.mNumberBuffers = v75;
        *(_QWORD *)&ioData.mBuffers[0].mNumberChannels = v23 + 296;
        v47 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        __D = v43;
        v112 = v47;
        v113 = v23 + 296;
        v48 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v110 = v48;
        v111 = v23 + 296;
        v49 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk((HapticTravelLimiter::ChunkAllocator *)(v23 + 296));
        v50 = (HapticTravelLimiter::ChunkAllocator *)(v46 & 1);
        v108 = v49;
        v109 = v23 + 296;
        HapticTravelLimiter::Compressor::generateLimits((HapticTravelLimiter::Compressor *)v44, v45, v48, *(float *)(v23 + 280), *(float *)(v23 + 288), *(float *)(v23 + 272), (float *)v22, (HapticTravelLimiter::ChunkAllocator *)(v23 + 296), v50);
        HapticTravelLimiter::Compressor::generateLimits((HapticTravelLimiter::Compressor *)v44, v45, v49, *(float *)(v23 + 284), *(float *)(v23 + 292), *(float *)(v23 + 276), (float *)v22, (HapticTravelLimiter::ChunkAllocator *)(v23 + 296), v50);
        vDSP_vdiv(v41, 1, v48, 1, v75, 1, v22);
        vDSP_vdiv(v72, 1, v49, 1, v47, 1, v22);
        vDSP_vmin(v75, 1, v47, 1, __D, 1, v22);
        vDSP_vclip(__D, 1, &v114, v115, __D, 1, v22);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v23 + 296, v49);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v23 + 296, v48);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v23 + 296, v47);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v23 + 296, v75);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v78, v77);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v80, v79);
        v51 = __Y;
        vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v23 + 64), *(float **)(v23 + 72), __Y, 1, __Y, 1, v22);
        if (*(_DWORD *)(v23 + 212) < v22)
          __assert_rtn("push", "htl.hpp", 93, "n <= _maxInputSize");
        v52 = &v68[v73];
        v53 = v106;
        v54 = *(unsigned int *)(v23 + 216);
        v55 = *(char **)(v23 + 232);
        v56 = &v55[4 * v54];
        v57 = *(_DWORD *)(v23 + 224) - v54;
        if (v57 >= v22)
          v58 = v22;
        else
          v58 = v57;
        memcpy(v56, v106, 4 * v58);
        memcpy(v55, &v53[v58], 4 * (v22 - v58));
        v59 = *(unsigned int *)(v23 + 220);
        v60 = *(_DWORD *)(v23 + 224);
        *(_DWORD *)(v23 + 216) = (*(_DWORD *)(v23 + 216) + (int)v22) % v60;
        v61 = *(const float **)(v23 + 232);
        if (v60 - v59 >= v22)
          v62 = v22;
        else
          v62 = v60 - v59;
        vDSP_vmul(&v61[v59], 1, v51, 1, v52, 1, v62);
        vDSP_vmul(v61, 1, &v51[v62], 1, &v52[v62], 1, (v22 - v62));
        if (*(_DWORD *)(v23 + 212) < v22)
          __assert_rtn("pop", "htl.hpp", 112, "n <= _maxInputSize");
        *(_DWORD *)(v23 + 220) = (*(_DWORD *)(v23 + 220) + v22) % *(_DWORD *)(v23 + 224);
        ioData.mNumberBuffers = 1065353216;
        LODWORD(v112) = -1082130432;
        vDSP_vclip(v52, 1, (const float *)&v112, (const float *)&ioData.mNumberBuffers, v52, 1, v22);
        HapticTravelLimiter::ChunkAllocator::freeChunk((uint64_t)v82, v51);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v85, __C);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v87, __A);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v89, v88);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v91, v90);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v93, v92);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v95, v94);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v97, v96);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v99, v98);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v101, v100);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v103, v102);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v105, v104);
        HapticTravelLimiter::ChunkAllocator::freeChunk(v107, v53);
        v20 = v73 + 256;
        v21 = v71;
        a7 = (const AudioBufferList **)v66;
        a3 = v67;
        v12 = v64;
        v10 = v65;
      }
      while (v73 + 256 < v67);
    }
    v13 = SimpleMeters::ProcessOutputBufferList(v12, a3, *a7);
    if (*((_BYTE *)v10 + 552))
      ExtAudioFileWriteAsync(*((ExtAudioFileRef *)v10 + 71), a3, *a7);
  }
  return v13;
}

void sub_1B64F565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;

  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a28);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a31);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a33);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a35);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a37);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a39);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)&a41);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)(v41 - 240));
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)(v41 - 224));
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)(v41 - 208));
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)(v41 - 192));
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)(v41 - 176));
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)(v41 - 160));
  _Unwind_Resume(a1);
}

uint64_t AUHapticsProtection::Render(AUHapticsProtection *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t BufferList;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = (AUHapticsProtection *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUHapticsProtection *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUHapticsProtection *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUHapticsProtection::GetParameterList(AUHapticsProtection *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t i;
  uint64_t result;

  if (a2)
  {
    LODWORD(i) = 0;
    result = 4294956430;
  }
  else if (a3)
  {
    for (i = 0; i != 47; ++i)
      a3[i] = i + 4096;
    result = 0;
  }
  else
  {
    result = 0;
    LODWORD(i) = 47;
  }
  *a4 = i;
  return result;
}

uint64_t AUHapticsProtection::GetParameterInfo(AUHapticsProtection *this, int a2, int a3, AudioUnitParameterInfo *a4)
{
  uint64_t result;
  unsigned int v6;
  char **v7;
  const char *v8;
  const __CFAllocator *Default;
  const __CFString *v10;
  AudioUnitParameterValue v11;

  if (a2)
    return 4294956418;
  a4->flags = 0;
  a4->unitName = 0;
  v6 = a3 - 4096;
  if ((a3 - 4096) > 0x2E)
    return 4294956418;
  v7 = &(&HapticTravelLimiter::HTL::paramInfo)[2 * v6];
  v8 = *v7;
  Default = CFAllocatorGetDefault();
  v10 = CFStringCreateWithCString(Default, v8, 0x600u);
  a4->cfNameString = v10;
  a4->flags |= 0x8000010u;
  CFStringGetCString(v10, a4->name, 52, 0x8000100u);
  result = 0;
  *(_QWORD *)&a4->minValue = v7[1];
  v11 = htlDefaultCoeffs[v6];
  a4->unit = kAudioUnitParameterUnit_Generic;
  a4->defaultValue = v11;
  a4->flags |= 0xC1000000;
  return result;
}

uint64_t AUHapticsProtection::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 136);
  return result;
}

double AUHapticsProtection::GetLatency(AUHapticsProtection *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 66);
  result = 0.0;
  if (v1)
  {
    if (!*((_DWORD *)this + 135))
      return (float)(*(float *)(v1 + 324) * *(float *)(v1 + 320));
  }
  return result;
}

double AUHapticsProtection::GetTailTime(AUHapticsProtection *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 66);
  result = 0.0;
  if (v1)
  {
    if (!*((_DWORD *)this + 135))
      return (float)(*(float *)(v1 + 324) * *(float *)(v1 + 320));
  }
  return result;
}

uint64_t AUHapticsProtection::SupportsTail(AUHapticsProtection *this)
{
  return 1;
}

BOOL AUHapticsProtection::StreamFormatWritable(AUHapticsProtection *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUHapticsProtection::SupportedNumChannels(AUHapticsProtection *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUHapticsProtection::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

void AUHapticsProtection::CreateHTLFromParams(AUHapticsProtection *this, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  int v30;
  unsigned int v31;
  int v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  __int128 v43;
  _OWORD v44[4];
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  __int128 v48;
  int v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  v4 = 0;
  v52 = *MEMORY[0x1E0C80C00];
  v46 = 0u;
  memset(v47, 0, 28);
  v45 = 0u;
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  memset(v42, 0, sizeof(v42));
  do
  {
    v5 = a2[9];
    if (v5)
    {
      v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
    }
    else
    {
      v7 = (ausdk::AUElement **)a2[6];
      if ((ausdk::AUElement **)a2[7] == v7)
        v6 = 0;
      else
        v6 = *v7;
    }
    *((float *)v42 + v4) = ausdk::AUElement::GetParameter(v6, v4 + 4096);
    ++v4;
  }
  while (v4 != 47);
  v8 = operator new();
  v9 = HIDWORD(v42[0]);
  v10 = sqrtf(*(float *)&v42[1] * *((float *)&v42[1] + 1));
  *(float *)v8 = 1.0 / *(float *)v42;
  *(float *)(v8 + 4) = v10;
  *(_DWORD *)(v8 + 8) = v9;
  *(_WORD *)(v8 + 12) = 0;
  v48 = v43;
  v49 = v44[0];
  HapticTravelLimiter::Biquad::Biquad(v8 + 16, (float32x2_t *)&v48, 1);
  v48 = *(_OWORD *)((char *)v44 + 4);
  v49 = DWORD1(v44[1]);
  HapticTravelLimiter::Biquad::Biquad(v8 + 40, (float32x2_t *)&v48, 1);
  v48 = *(_OWORD *)((char *)&v44[1] + 8);
  v50 = *(_OWORD *)((char *)&v44[2] + 12);
  v49 = DWORD2(v44[2]);
  v51 = HIDWORD(v44[3]);
  HapticTravelLimiter::Biquad::Biquad(v8 + 64, (float32x2_t *)&v48, 2);
  v11 = *(float *)v8;
  v13 = *((float *)&v45 + 1);
  v12 = *(float *)&v45;
  v14 = *((_QWORD *)&v45 + 1);
  *(_QWORD *)(v8 + 88) = 0;
  v15 = *((float *)&v46 + 1);
  v16 = (float)(v12 + v12) * 3.14159265;
  v17 = (float)((float)((float)((float)(*(float *)&v14 * *(float *)&v46) * v16) * v16) / *((float *)&v14 + 1))
      / (float)(v16 * v16);
  *(float *)(v8 + 96) = v17;
  *(float *)(v8 + 100) = (float)(v17 * v16) / v13;
  *(float *)(v8 + 104) = (float)(v17 * v16) * v16;
  *(float *)(v8 + 108) = v11;
  v18 = *((float *)&v47[1] + 1);
  v19 = *(float *)&v47[1] * *((float *)&v47[1] + 2);
  v21 = *((float *)v47 + 3);
  v20 = *((float *)v47 + 2);
  *(_QWORD *)(v8 + 112) = 0;
  v22 = (float)(v20 + v20) * 3.14159265;
  v23 = (float)((float)((float)(v19 * v22) * v22) / v18) / (float)(v22 * v22);
  *(float *)(v8 + 120) = v23;
  *(float *)(v8 + 124) = (float)(v23 * v22) / v21;
  *(float *)(v8 + 128) = (float)(v23 * v22) * v22;
  *(float *)(v8 + 132) = v11;
  v25 = *((float *)&v46 + 3);
  v24 = *((float *)&v46 + 2);
  v26 = *(_QWORD *)&v47[0];
  *(_QWORD *)(v8 + 136) = 0;
  v27 = (float)(v15 + v15) * 3.14159265;
  v28 = (float)((float)((float)((float)(v25 * *((float *)&v26 + 1)) * v27) * v27) / *(float *)&v26) / (float)(v27 * v27);
  *(float *)(v8 + 144) = v28;
  *(float *)(v8 + 148) = (float)(v28 * v27) / v24;
  *(float *)(v8 + 152) = (float)(v28 * v27) * v27;
  *(float *)(v8 + 156) = v11;
  v29 = *((float *)&v42[2] + 2);
  v30 = *((float *)&v42[2] + 3);
  HapticTravelLimiter::ActivityDetector::ActivityDetector((HapticTravelLimiter::ActivityDetector *)(v8 + 160), *((float *)&v42[2] + 2), *((float *)&v42[2] + 3));
  HapticTravelLimiter::ActivityDetector::ActivityDetector((HapticTravelLimiter::ActivityDetector *)(v8 + 184), v29, v30);
  v31 = *((float *)v42 + 1);
  *(_DWORD *)(v8 + 208) = *((float *)v42 + 1);
  *(_DWORD *)(v8 + 212) = 256;
  *(_QWORD *)(v8 + 216) = v31;
  *(_DWORD *)(v8 + 224) = v31 + 256;
  *(_QWORD *)(v8 + 232) = 0;
  *(_QWORD *)(v8 + 232) = HapticTravelLimiter::allocateAligned<float>(v31 + 256);
  v32 = *((float *)v42 + 2);
  HapticTravelLimiter::SlidingWindowMax::SlidingWindowMax((HapticTravelLimiter::SlidingWindowMax *)(v8 + 240), *((float *)v42 + 2));
  HapticTravelLimiter::SlidingWindowMax::SlidingWindowMax((HapticTravelLimiter::SlidingWindowMax *)(v8 + 256), v32);
  v33.i64[0] = *(_QWORD *)(v8 + 4);
  v33.i64[1] = v33.i64[0];
  v34 = *(float32x4_t *)((char *)&v42[1] + 8);
  *(int32x2_t *)(v8 + 272) = vrev64_s32(*(int32x2_t *)v33.f32);
  v35 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(v33, v34));
  *(int8x16_t *)(v8 + 280) = vextq_s8(v35, v35, 8uLL);
  *(_QWORD *)(v8 + 312) = 0;
  *(_QWORD *)(v8 + 296) = 0x10000000000;
  *(_DWORD *)(v8 + 304) = 0x2000;
  v36 = HapticTravelLimiter::allocateAligned<float>(0x2000);
  *(_QWORD *)(v8 + 312) = v36;
  memset(v36, 239, 4 * *(unsigned int *)(v8 + 304));
  v37 = v46;
  *(_OWORD *)(v8 + 448) = v45;
  *(_OWORD *)(v8 + 464) = v37;
  *(_OWORD *)(v8 + 480) = v47[0];
  *(_OWORD *)(v8 + 492) = *(_OWORD *)((char *)v47 + 12);
  v38 = v44[1];
  *(_OWORD *)(v8 + 384) = v44[0];
  *(_OWORD *)(v8 + 400) = v38;
  v39 = v44[3];
  *(_OWORD *)(v8 + 416) = v44[2];
  *(_OWORD *)(v8 + 432) = v39;
  v40 = v42[1];
  *(_OWORD *)(v8 + 320) = v42[0];
  *(_OWORD *)(v8 + 336) = v40;
  v41 = v43;
  *(_OWORD *)(v8 + 352) = v42[2];
  *(_OWORD *)(v8 + 368) = v41;
  HapticTravelLimiter::HTL::reset((float **)v8);
  *(_QWORD *)this = v8;
}

void sub_1B64F5E74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  vDSP_biquad_SetupStruct **v2;
  vDSP_biquad_SetupStruct **v3;
  vDSP_biquad_SetupStruct **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = (void *)v1[39];
  if (v6)
    free(v6);
  v7 = (void *)v1[33];
  if (v7)
    free(v7);
  v8 = (void *)v1[31];
  if (v8)
    free(v8);
  v9 = (void *)v1[29];
  if (v9)
    free(v9);
  v10 = (void *)v1[25];
  if (v10)
    free(v10);
  v11 = (void *)v1[22];
  if (v11)
    free(v11);
  HapticTravelLimiter::Biquad::~Biquad(v4);
  HapticTravelLimiter::Biquad::~Biquad(v3);
  HapticTravelLimiter::Biquad::~Biquad(v2);
  MEMORY[0x1BCC95CEC](v1, 0x10A0C4057275141);
  _Unwind_Resume(a1);
}

void sub_1B64F5F28()
{
  JUMPOUT(0x1B64F5EF8);
}

void sub_1B64F5F30()
{
  JUMPOUT(0x1B64F5F00);
}

void sub_1B64F5F38()
{
  JUMPOUT(0x1B64F5F08);
}

uint64_t *std::unique_ptr<HapticTravelLimiter::HTL>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 312);
    if (v3)
      free(v3);
    v4 = *(void **)(v2 + 264);
    if (v4)
      free(v4);
    v5 = *(void **)(v2 + 248);
    if (v5)
      free(v5);
    v6 = *(void **)(v2 + 232);
    if (v6)
      free(v6);
    v7 = *(void **)(v2 + 200);
    if (v7)
      free(v7);
    v8 = *(void **)(v2 + 176);
    if (v8)
      free(v8);
    HapticTravelLimiter::Biquad::~Biquad((vDSP_biquad_SetupStruct **)(v2 + 64));
    HapticTravelLimiter::Biquad::~Biquad((vDSP_biquad_SetupStruct **)(v2 + 40));
    HapticTravelLimiter::Biquad::~Biquad((vDSP_biquad_SetupStruct **)(v2 + 16));
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

uint64_t HapticTravelLimiter::ChunkAllocator::allocateChunk(HapticTravelLimiter::ChunkAllocator *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 1);
  v2 = *(unsigned int *)this;
  if (*((_DWORD *)this + 2) - (int)v2 < v1)
    __assert_rtn("allocateChunk", "htl.hpp", 231, "(_dataSize - _current) >= _chunkSize");
  v3 = *((_QWORD *)this + 2) + 4 * v2;
  *(_DWORD *)this = v1 + v2;
  return v3;
}

uint64_t HapticTravelLimiter::PlantModel::run(HapticTravelLimiter::PlantModel *this, const float *a2, float *a3, unsigned int a4, HapticTravelLimiter::ChunkAllocator *a5)
{
  float v10;
  vDSP_Length v11;
  vDSP_Length v13;
  uint64_t Chunk;

  Chunk = HapticTravelLimiter::ChunkAllocator::allocateChunk(a5);
  v13 = HapticTravelLimiter::ChunkAllocator::allocateChunk(a5);
  v10 = (float)(*a2 - *(float *)this) * *((float *)this + 5);
  *(float *)Chunk = v10;
  *(float *)v13 = (float)(v10 - *((float *)this + 1)) * *((float *)this + 5);
  v11 = a4 - 1;
  vDSP_vsub(a2, 1, a2 + 1, 1, (float *)(Chunk + 4), 1, v11);
  vDSP_vsmul((const float *)(Chunk + 4), 1, (const float *)this + 5, (float *)(Chunk + 4), 1, v11);
  vDSP_vsub((const float *)Chunk, 1, (const float *)(Chunk + 4), 1, (float *)(v13 + 4), 1, v11);
  vDSP_vsmul((const float *)(v13 + 4), 1, (const float *)this + 5, (float *)(v13 + 4), 1, v11);
  *(float *)this = a2[v11];
  *((_DWORD *)this + 1) = *(_DWORD *)(Chunk + 4 * v11);
  vDSP_vsmsma(a2, 1, (const float *)this + 4, (const float *)Chunk, 1, (const float *)this + 3, a3, 1, a4);
  vDSP_vsma((const float *)v13, 1, (const float *)this + 2, a3, 1, a3, 1, a4);
  HapticTravelLimiter::ChunkAllocator::freeChunk((uint64_t)a5, (float *)v13);
  return HapticTravelLimiter::ChunkAllocator::freeChunk((uint64_t)a5, (float *)Chunk);
}

void sub_1B64F61EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)va);
  _Unwind_Resume(a1);
}

uint64_t HapticTravelLimiter::ChunkAllocator::freeChunk(uint64_t this, float *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(this + 4);
  v3 = *(_DWORD *)this - v2;
  if (*(_DWORD *)this < v2)
    __assert_rtn("freeChunk", "htl.hpp", 239, "_current >= _chunkSize");
  *(_DWORD *)this = v3;
  if ((float *)(*(_QWORD *)(this + 16) + 4 * v3) != a2)
    __assert_rtn("freeChunk", "htl.hpp", 241, "chunkBegin == &_data[_current]");
  return this;
}

void *HapticTravelLimiter::SlidingWindowMax::update(HapticTravelLimiter::SlidingWindowMax *this, const float *a2, float *a3, unsigned int a4)
{
  size_t v7;
  vDSP_Length v8;

  if (*((_DWORD *)this + 1) < a4)
    __assert_rtn("update", "htl.hpp", 574, "n <= _maxInputSize");
  v7 = 4 * (*(_DWORD *)this - 1);
  v8 = a4;
  memcpy((void *)(*((_QWORD *)this + 1) + v7), a2, 4 * a4);
  vDSP_vswmax(*((const float **)this + 1), 1, a3, 1, v8, *(unsigned int *)this);
  return memmove(*((void **)this + 1), (const void *)(*((_QWORD *)this + 1) + 4 * a4), v7);
}

void HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk(HapticTravelLimiter::ChunkAllocator::Chunk *this)
{
  HapticTravelLimiter::ChunkAllocator::freeChunk(*((_QWORD *)this + 1), *(float **)this);
}

void *HapticTravelLimiter::ActivityDetector::run(HapticTravelLimiter::ActivityDetector *this, const float *__A, float *a3, vDSP_Length __N)
{
  unsigned int v4;
  unsigned int v7;
  size_t v8;
  vDSP_Length v9;
  float __C;

  if (*((_DWORD *)this + 2) < __N)
    __assert_rtn("run", "htl.hpp", 515, "n <= _maxInputLength");
  v4 = __N;
  __C = 1.0;
  v7 = *((_DWORD *)this + 1) - 1;
  v8 = 4 * v7;
  v9 = __N;
  vDSP_vabs(__A, 1, (float *)(*((_QWORD *)this + 2) + v8), 1, __N);
  vDSP_vthrsc((const float *)(*((_QWORD *)this + 2) + v8), 1, (const float *)this, &__C, (float *)(*((_QWORD *)this + 2) + v8), 1, v9);
  vDSP_vthres((const float *)(*((_QWORD *)this + 2) + v8), 1, &__C, (float *)(*((_QWORD *)this + 2) + v8), 1, v9);
  vDSP_vswmax(*((const float **)this + 2), 1, a3, 1, v9, *((unsigned int *)this + 1));
  return memmove(*((void **)this + 2), (const void *)(*((_QWORD *)this + 2) + 4 * v4), v8);
}

void HapticTravelLimiter::Compressor::generateLimits(HapticTravelLimiter::Compressor *this, const float *a2, float *__C, float a4, float a5, float a6, float *a7, HapticTravelLimiter::ChunkAllocator *a8, HapticTravelLimiter::ChunkAllocator *a9)
{
  char v9;
  vDSP_Length v14;
  float *v15;
  float *Chunk;
  float __A;
  float v18;
  float __B;

  v9 = (char)a9;
  v18 = a5;
  __B = a4;
  __A = a6;
  v14 = a7;
  vDSP_vfill(&__A, __C, 1, a7);
  if ((v9 & 1) == 0)
  {
    Chunk = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk(a8);
    v15 = (float *)HapticTravelLimiter::ChunkAllocator::allocateChunk(a8);
    vDSP_vsmul((const float *)this, 1, &__B, Chunk, 1, v14);
    vDSP_vsmul(a2, 1, &v18, v15, 1, v14);
    vDSP_vmax(Chunk, 1, v15, 1, Chunk, 1, v14);
    vDSP_vsub(Chunk, 1, __C, 1, __C, 1, v14);
    HapticTravelLimiter::ChunkAllocator::freeChunk((uint64_t)a8, v15);
    HapticTravelLimiter::ChunkAllocator::freeChunk((uint64_t)a8, Chunk);
  }
}

void sub_1B64F658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HapticTravelLimiter::ChunkAllocator::Chunk::~Chunk((HapticTravelLimiter::ChunkAllocator::Chunk *)va);
  _Unwind_Resume(a1);
}

void HapticTravelLimiter::Biquad::~Biquad(vDSP_biquad_SetupStruct **this)
{
  vDSP_biquad_SetupStruct *v2;
  vDSP_biquad_SetupStruct *v3;

  v2 = *this;
  if (v2)
    vDSP_biquad_DestroySetup(v2);
  v3 = this[1];
  if (v3)
    free(v3);
}

uint64_t HapticTravelLimiter::Biquad::Biquad(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  int v6;
  const double *v7;
  float32x2_t *v8;
  double *v9;
  double *__Coefficients[3];

  v6 = 2 * a3 + 2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 8) = HapticTravelLimiter::allocateAligned<float>(v6);
  std::vector<double>::vector(__Coefficients, (5 * a3));
  v7 = __Coefficients[0];
  if (a3)
  {
    v8 = (float32x2_t *)((char *)a2 + 20 * a3);
    v9 = __Coefficients[0] + 4;
    do
    {
      *((float64x2_t *)v9 - 2) = vcvtq_f64_f32(*a2);
      *((float64x2_t *)v9 - 1) = vcvtq_f64_f32(a2[1]);
      *v9 = a2[2].f32[0];
      v9 += 5;
      a2 = (float32x2_t *)((char *)a2 + 20);
    }
    while (a2 != v8);
  }
  *(_QWORD *)a1 = vDSP_biquad_CreateSetup(v7, a3);
  if (__Coefficients[0])
  {
    __Coefficients[1] = __Coefficients[0];
    operator delete(__Coefficients[0]);
  }
  return a1;
}

void sub_1B64F66A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

HapticTravelLimiter::ActivityDetector *HapticTravelLimiter::ActivityDetector::ActivityDetector(HapticTravelLimiter::ActivityDetector *this, float a2, int a3)
{
  *(float *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_DWORD *)this + 2) = 256;
  *((_QWORD *)this + 2) = 0;
  if (a2 <= 0.0)
    __assert_rtn("ActivityDetector", "htl.hpp", 484, "_threshold > 0");
  if (!a3)
    __assert_rtn("ActivityDetector", "htl.hpp", 485, "_timeout > 0");
  *((_QWORD *)this + 2) = HapticTravelLimiter::allocateAligned<float>(a3 + 255);
  return this;
}

void *HapticTravelLimiter::allocateAligned<float>(int a1)
{
  size_t v1;
  void *memptr;

  v1 = (4 * a1 + 60) & 0xFFFFFFC0;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x40uLL, v1, 0x8659570uLL))
    __assert_rtn("allocateAligned", "htl.hpp", 37, "ret == 0");
  if (!memptr)
    __assert_rtn("allocateAligned", "htl.hpp", 38, "alignedMemory != nullptr");
  bzero(memptr, v1);
  return memptr;
}

HapticTravelLimiter::SlidingWindowMax *HapticTravelLimiter::SlidingWindowMax::SlidingWindowMax(HapticTravelLimiter::SlidingWindowMax *this, int a2)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 256;
  *((_QWORD *)this + 1) = 0;
  if (!a2)
    __assert_rtn("SlidingWindowMax", "htl.hpp", 557, "_windowSize");
  *((_QWORD *)this + 1) = HapticTravelLimiter::allocateAligned<float>(a2 + 255);
  return this;
}

void HapticTravelLimiter::HTL::reset(float **this)
{
  float __A;
  float v3;
  float v4;

  __A = 0.0;
  vDSP_vfill(&__A, this[3], 1, *((unsigned int *)this + 8));
  v3 = 0.0;
  vDSP_vfill(&v3, this[6], 1, *((unsigned int *)this + 14));
  v4 = 1.0;
  vDSP_vfill(&v4, this[9], 1, *((unsigned int *)this + 20));
  this[11] = 0;
  this[14] = 0;
  this[17] = 0;
  vDSP_vclr(this[22], 1, (*((_DWORD *)this + 41) + *((_DWORD *)this + 42) - 1));
  vDSP_vclr(this[25], 1, (*((_DWORD *)this + 47) + *((_DWORD *)this + 48) - 1));
  this[27] = (float *)*((unsigned int *)this + 52);
  vDSP_vclr(this[29], 1, *((unsigned int *)this + 56));
  vDSP_vclr(this[31], 1, (*((_DWORD *)this + 60) + *((_DWORD *)this + 61) - 1));
  vDSP_vclr(this[33], 1, (*((_DWORD *)this + 64) + *((_DWORD *)this + 65) - 1));
}

os_log_t ___ZL10getAUHPLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "AUHapticsProtection");
  getAUHPLog(void)::gLog = (uint64_t)result;
  return result;
}

void CreateExtDebugCapture(const char *a1, const AudioStreamBasicDescription *a2, ExtAudioFileRef *a3)
{
  CFIndex v6;
  const __CFURL *v7;

  v6 = strlen(a1);
  v7 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)a1, v6, 0);
  ExtAudioFileCreateWithURL(v7, 0x63616666u, a2, 0, 1u, a3);
  ExtAudioFileSetProperty(*a3, 0x63666D74u, 0x28u, a2);
  CFRelease(v7);
}

void IVA_DirectiV_Rank1A::WAUpdate(IVA_DirectiV_Rank1A *this)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  float *v7;
  float *v8;
  float *v9;
  unsigned int v10;
  unsigned int i;
  float **v12;
  float *v13;
  float *v14;
  unsigned int v15;
  unsigned int v16;
  const DSPSplitComplex *v17;
  float *v18;
  unsigned int v19;
  unsigned int j;
  int k;
  int m;
  int v23;
  uint64_t v24;
  const DSPSplitComplex *v25;
  int n;
  int v27;
  uint64_t v28;
  const DSPSplitComplex *v29;
  const DSPSplitComplex *v30;
  unsigned int v31;
  unsigned int ii;
  unsigned int v33;
  unsigned int jj;
  uint64_t v35;
  const DSPSplitComplex *v36;
  int v37;
  const DSPSplitComplex *v38;
  unint64_t v39;
  unint64_t kk;
  unint64_t mm;
  float **v42;
  float *v43;
  float *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t nn;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  DSPSplitComplex __C;

  if (*((_DWORD *)this + 11))
  {
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)this + 141);
      v4 = *((_DWORD *)this + 13);
      v52 = *((_DWORD *)this + 12);
      memcpy(**((void ***)this + 165), **(const void ***)(v3 + 24 * v2), 4 * (v4 * v52));
      memcpy(*(void **)(*((_QWORD *)this + 165) + 8), *(const void **)(*(_QWORD *)(v3 + 24 * v2) + 8), 4 * (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vclr(*((float **)this + 150), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vclr(*((float **)this + 159), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      v5 = *((_DWORD *)this + 11);
      if (v5)
      {
        v6 = 0;
        do
        {
          vDSP_zvabs((const DSPSplitComplex *)(*((_QWORD *)this + 165) + 16 * (v6 + v6 * v5)), 1, *(float **)(*((_QWORD *)this + 168) + 16 * (v6 + v6 * v5)), 1, *((unsigned int *)this + 12));
          v7 = *(float **)(*((_QWORD *)this + 168) + 16 * (v6 + v6 * *((_DWORD *)this + 11)));
          vDSP_vthr(v7, 1, *((const float **)this + 19), v7, 1, *((unsigned int *)this + 12));
          v8 = *(float **)(*((_QWORD *)this + 168) + 16 * (v6 + v6 * *((_DWORD *)this + 11)));
          vvsqrtf(v8, v8, &v52);
          v9 = *(float **)(*((_QWORD *)this + 168) + 16 * (v6 + v6 * *((_DWORD *)this + 11)));
          vDSP_vthr(v9, 1, (const float *)this + 25, v9, 1, *((unsigned int *)this + 12));
          vDSP_vdiv(*(const float **)(*((_QWORD *)this + 168) + 16 * (v6 + v6 * *((_DWORD *)this + 11))), 1, *((const float **)this + 16), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
          v10 = v6 + 1;
          v5 = *((_DWORD *)this + 11);
          for (i = v6 + 1; i < v5; v5 = *((_DWORD *)this + 11))
          {
            vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 165) + 16 * (i + v6 * v5)), 1, *((const float **)this + 100), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 168) + 16 * (i + v6 * v5)), 1, *((unsigned int *)this + 12));
            ++i;
          }
          __C.realp = 0;
          __C.imagp = 0;
          v12 = (float **)*((_QWORD *)this + 73);
          v13 = *v12;
          v14 = v12[3];
          __C.realp = v13;
          __C.imagp = v14;
          v15 = v6 + 1;
          if (v10 < v5)
          {
            do
            {
              v16 = v6 + 1;
              if (v10 < v5)
              {
                do
                {
                  vDSP_zvmul((const DSPSplitComplex *)(*((_QWORD *)this + 168) + 16 * (v5 * v6 + v15)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 168) + 16 * (v16 + v5 * v6)), 1, &__C, 1, *((unsigned int *)this + 12), -1);
                  v17 = (const DSPSplitComplex *)(*((_QWORD *)this + 165) + 16 * (v16 + v15 * *((_DWORD *)this + 11)));
                  vDSP_zvsub(v17, 1, &__C, 1, v17, 1, *((unsigned int *)this + 12));
                  ++v16;
                  v5 = *((_DWORD *)this + 11);
                }
                while (v16 < v5);
              }
              ++v15;
            }
            while (v15 < v5);
          }
          ++v6;
        }
        while (v10 < v5);
      }
      vDSP_vclr(*((float **)this + 153), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vclr(*((float **)this + 162), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      v18 = (float *)*((_QWORD *)this + 19);
      __C.realp = (float *)*((_QWORD *)this + 16);
      __C.imagp = v18;
      v19 = *((_DWORD *)this + 11);
      if (v19)
      {
        for (j = 0; j < v19; ++j)
        {
          vDSP_zvdiv((const DSPSplitComplex *)(*((_QWORD *)this + 168) + 16 * (j + j * v19)), 1, &__C, 1, (const DSPSplitComplex *)(*((_QWORD *)this + 171) + 16 * (j + j * v19)), 1, *((unsigned int *)this + 12));
          if (j)
          {
            for (k = 0; k != j; ++k)
            {
              for (m = 0; m != j; ++m)
              {
                v23 = *((_DWORD *)this + 11);
                v24 = *((_QWORD *)this + 171);
                v25 = (const DSPSplitComplex *)(v24 + 16 * (v23 * k + j));
                vDSP_zvma((const DSPSplitComplex *)(v24 + 16 * (m + v23 * k)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 168) + 16 * (j + v23 * m)), 1, v25, 1, v25, 1, *((unsigned int *)this + 12));
              }
            }
            for (n = 0; n != j; ++n)
            {
              v27 = *((_DWORD *)this + 11);
              v28 = *((_QWORD *)this + 171);
              v29 = (const DSPSplitComplex *)(v28 + 16 * (j + v27 * n));
              vDSP_zvmul((const DSPSplitComplex *)(v28 + 16 * (j + j * v27)), 1, v29, 1, v29, 1, *((unsigned int *)this + 12), 1);
              v30 = (const DSPSplitComplex *)(*((_QWORD *)this + 171) + 16 * (j + *((_DWORD *)this + 11) * n));
              vDSP_zvneg(v30, 1, v30, 1, *((unsigned int *)this + 12));
            }
          }
          v19 = *((_DWORD *)this + 11);
        }
      }
      vDSP_vclr(**((float ***)this + 70), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vclr(*(float **)(*((_QWORD *)this + 70) + 8), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      v31 = *((_DWORD *)this + 11);
      if (v31)
      {
        for (ii = 0; ii < v31; ++ii)
        {
          v33 = 0;
          do
          {
            for (jj = ii; jj < v31; v31 = *((_DWORD *)this + 11))
            {
              v35 = *((_QWORD *)this + 171);
              v36 = (const DSPSplitComplex *)(v35 + 16 * (jj + v33 * v31));
              v37 = v31 * ii;
              v38 = (const DSPSplitComplex *)(*((_QWORD *)this + 70) + 16 * (v37 + v33));
              vDSP_zvcma(v36, 1, (const DSPSplitComplex *)(v35 + 16 * (jj + v37)), 1, v38, 1, v38, 1, *((unsigned int *)this + 12));
              ++jj;
            }
            ++v33;
          }
          while (v33 < v31);
        }
      }
      vDSP_vclr(*((float **)this + 76), 1, *((_DWORD *)this + 12) * v31);
      vDSP_vclr(*((float **)this + 79), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      v39 = *((unsigned int *)this + 11);
      if ((_DWORD)v39)
      {
        for (kk = 0; kk < v39; ++kk)
        {
          if (v39)
          {
            for (mm = 0; mm < v39; ++mm)
            {
              vDSP_zvma((const DSPSplitComplex *)(*((_QWORD *)this + 70) + 16 * (mm + kk * v39)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 132) + 16 * (v2 + v39 * mm)), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + 16 * kk), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + 16 * kk), 1, *((unsigned int *)this + 12));
              v39 = *((unsigned int *)this + 11);
            }
          }
        }
      }
      vDSP_vclr(**((float ***)this + 73), 1, *((unsigned int *)this + 12));
      vDSP_vclr(*(float **)(*((_QWORD *)this + 73) + 24), 1, *((unsigned int *)this + 12));
      __C.realp = 0;
      __C.imagp = 0;
      v42 = (float **)*((_QWORD *)this + 73);
      v43 = *v42;
      v44 = v42[3];
      __C.realp = v43;
      __C.imagp = v44;
      v45 = *((unsigned int *)this + 11);
      if ((_DWORD)v45)
      {
        v46 = 0;
        for (nn = 0; nn < v45; ++nn)
        {
          vDSP_zvcma((const DSPSplitComplex *)(*((_QWORD *)this + 94) + v46), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 132) + 16 * (v2 + v45 * nn)), 1, &__C, 1, &__C, 1, *((unsigned int *)this + 12));
          v45 = *((unsigned int *)this + 11);
          v46 += 16;
        }
      }
      vDSP_zvabs(&__C, 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_vsadd(*((const float **)this + 100), 1, (const float *)this + 24, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      vDSP_svdiv((const float *)this + 27, *((const float **)this + 100), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
      v48 = *((_DWORD *)this + 11);
      if (v48)
      {
        v49 = 0;
        v50 = 0;
        do
        {
          vDSP_zrvmul((const DSPSplitComplex *)(*((_QWORD *)this + 94) + v49), 1, *((const float **)this + 100), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 94) + v49), 1, *((unsigned int *)this + 12));
          ++v50;
          v51 = *((unsigned int *)this + 11);
          v49 += 16;
        }
        while (v50 < v51);
        v48 = *((_DWORD *)this + 11);
      }
      else
      {
        v51 = 0;
      }
      vDSP_vsub((const float *)(*((_QWORD *)this + 111) + 4 * v51 * v2 * *((unsigned int *)this + 12)), 1, *((const float **)this + 76), 1, *((float **)this + 82), 1, (*((_DWORD *)this + 12) * v48));
      vDSP_vadd((const float *)(*((_QWORD *)this + 120) + 4 * v2 * *((unsigned int *)this + 11) * *((unsigned int *)this + 12)), 1, *((const float **)this + 79), 1, *((float **)this + 85), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      vDSP_zvconj(*((const DSPSplitComplex **)this + 94), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 129) + 16 * v2 * *((unsigned int *)this + 11)), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      SeparationBase::rank1WInverseA(this, v2++);
    }
    while (v2 < *((unsigned int *)this + 11));
  }
  SeparationBase::minimumDistrotionPrinciple(this);
}

void IVA_DirectiV_Rank1A::CovarianceUpdate(IVA_DirectiV_Rank1A *this)
{
  unint64_t v2;
  const float *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  float __B;
  float v13;

  if (*((_DWORD *)this + 11))
  {
    v2 = 0;
    v3 = (const float *)((char *)this + 12);
    do
    {
      v13 = 0.0;
      v13 = *((float *)this + 4) / (float)(*(float *)(*((_QWORD *)this + 105) + 4 * v2) + *((float *)this + 30));
      __B = sqrtf(fmaxf(v13, 0.0));
      vDSP_vsmul(*(const float **)(*((_QWORD *)this + 135) + 24 * v2), 1, v3, *((float **)this + 64), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vsmul(*(const float **)(*((_QWORD *)this + 138) + 24 * v2), 1, v3, *((float **)this + 67), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 13)));
      vDSP_vsmul(*((const float **)this + 40), 1, &__B, *((float **)this + 82), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      vDSP_vsmul(*((const float **)this + 43), 1, &__B, *((float **)this + 85), 1, (*((_DWORD *)this + 12) * *((_DWORD *)this + 11)));
      v4 = *((unsigned int *)this + 11);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 16;
        do
        {
          v7 = v5 + 1;
          v8 = v6;
          for (i = v5 + 1; i < v4; v8 += 16)
          {
            vDSP_zvcma((const DSPSplitComplex *)(*((_QWORD *)this + 97) + v8), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 97) + 16 * v5), 1, (const DSPSplitComplex *)(*((_QWORD *)this + 70) + 16 * (i + v5 * v4)), 1, (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v2) + 16 * (i + v5 * v4)), 1, *((unsigned int *)this + 12));
            v10 = *(_QWORD *)(*((_QWORD *)this + 141) + 24 * v2);
            vDSP_zvconj((const DSPSplitComplex *)(v10 + 16 * (i + v5 * *((unsigned int *)this + 11))), 1, (const DSPSplitComplex *)(v10 + 16 * (v5 + i * *((unsigned int *)this + 11))), 1, *((unsigned int *)this + 12));
            ++i;
            v4 = *((unsigned int *)this + 11);
          }
          vDSP_zvmgsa((const DSPSplitComplex *)(*((_QWORD *)this + 55) + 16 * v5), 1, *((const float **)this + 144), 1, *((float **)this + 100), 1, *((unsigned int *)this + 12));
          v11 = 16 * (v5 + v5 * *((unsigned int *)this + 11));
          vDSP_vsma(*((const float **)this + 100), 1, &v13, *(const float **)(*((_QWORD *)this + 70) + v11), 1, *(float **)(*(_QWORD *)(*((_QWORD *)this + 141) + 24 * v2) + v11), 1, *((unsigned int *)this + 12));
          v4 = *((unsigned int *)this + 11);
          v6 += 16;
          ++v5;
        }
        while (v7 < v4);
      }
      else
      {
        v4 = 0;
      }
      ++v2;
    }
    while (v2 < v4);
  }
}

void SeparationBase::~SeparationBase(SeparationBase *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void **v40;

  *(_QWORD *)this = off_1E69EA598;
  v40 = (void **)((char *)this + 1128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  v40 = (void **)((char *)this + 1104);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  v40 = (void **)((char *)this + 1080);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  v2 = (void *)*((_QWORD *)this + 132);
  if (v2)
  {
    *((_QWORD *)this + 133) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 129);
  if (v3)
  {
    *((_QWORD *)this + 130) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 126);
  if (v4)
  {
    *((_QWORD *)this + 127) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 123);
  if (v5)
  {
    *((_QWORD *)this + 124) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 120);
  if (v6)
  {
    *((_QWORD *)this + 121) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 117);
  if (v7)
  {
    *((_QWORD *)this + 118) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 114);
  if (v8)
  {
    *((_QWORD *)this + 115) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 111);
  if (v9)
  {
    *((_QWORD *)this + 112) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 108);
  if (v10)
  {
    *((_QWORD *)this + 109) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 105);
  if (v11)
  {
    *((_QWORD *)this + 106) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 102);
  if (v12)
  {
    *((_QWORD *)this + 103) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 97);
  if (v13)
  {
    *((_QWORD *)this + 98) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 94);
  if (v14)
  {
    *((_QWORD *)this + 95) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 91);
  if (v15)
  {
    *((_QWORD *)this + 92) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 88);
  if (v16)
  {
    *((_QWORD *)this + 89) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 85);
  if (v17)
  {
    *((_QWORD *)this + 86) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 82);
  if (v18)
  {
    *((_QWORD *)this + 83) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 79);
  if (v19)
  {
    *((_QWORD *)this + 80) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 76);
  if (v20)
  {
    *((_QWORD *)this + 77) = v20;
    operator delete(v20);
  }
  v40 = (void **)((char *)this + 584);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  v21 = (void *)*((_QWORD *)this + 70);
  if (v21)
  {
    *((_QWORD *)this + 71) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 67);
  if (v22)
  {
    *((_QWORD *)this + 68) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 64);
  if (v23)
  {
    *((_QWORD *)this + 65) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 61);
  if (v24)
  {
    *((_QWORD *)this + 62) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 58);
  if (v25)
  {
    *((_QWORD *)this + 59) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 55);
  if (v26)
  {
    *((_QWORD *)this + 56) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 52);
  if (v27)
  {
    *((_QWORD *)this + 53) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 49);
  if (v28)
  {
    *((_QWORD *)this + 50) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 46);
  if (v29)
  {
    *((_QWORD *)this + 47) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 43);
  if (v30)
  {
    *((_QWORD *)this + 44) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 40);
  if (v31)
  {
    *((_QWORD *)this + 41) = v31;
    operator delete(v31);
  }
  v32 = (void *)*((_QWORD *)this + 37);
  if (v32)
  {
    *((_QWORD *)this + 38) = v32;
    operator delete(v32);
  }
  v33 = (void *)*((_QWORD *)this + 34);
  if (v33)
  {
    *((_QWORD *)this + 35) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 31);
  if (v34)
  {
    *((_QWORD *)this + 32) = v34;
    operator delete(v34);
  }
  v35 = (void *)*((_QWORD *)this + 28);
  if (v35)
  {
    *((_QWORD *)this + 29) = v35;
    operator delete(v35);
  }
  v36 = (void *)*((_QWORD *)this + 25);
  if (v36)
  {
    *((_QWORD *)this + 26) = v36;
    operator delete(v36);
  }
  v37 = (void *)*((_QWORD *)this + 22);
  if (v37)
  {
    *((_QWORD *)this + 23) = v37;
    operator delete(v37);
  }
  v38 = (void *)*((_QWORD *)this + 19);
  if (v38)
  {
    *((_QWORD *)this + 20) = v38;
    operator delete(v38);
  }
  v39 = (void *)*((_QWORD *)this + 16);
  if (v39)
  {
    *((_QWORD *)this + 17) = v39;
    operator delete(v39);
  }
}

uint64_t ___Z10VPLogScopev_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t result;

  result = CALegacyLog::RegisterScope((CALegacyLog *)0x7670626C, "vp", "vp_console_msgs", a4, a5, a6);
  VPLogScope(void)::scope = result;
  return result;
}

uint64_t ___Z19VPTimestampLogScopev_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t result;

  result = CALegacyLog::RegisterScope((CALegacyLog *)0x76707473, "vpts", "vp_save_timestamps", a4, a5, a6);
  VPTimestampLogScope(void)::scope = result;
  return result;
}

void AUBassQueen::~AUBassQueen(AUBassQueen *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUBassQueen::SetParameter(AUBassQueen *this, unsigned int a2, unsigned int a3, uint64_t a4, __n128 a5)
{
  float v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  if (*((_DWORD *)this + 439) <= a2)
    return 4294956418;
  v5 = a5.n128_f32[0];
  v6 = a4;
  v10 = *(unsigned int *)(*((_QWORD *)this + 211) + 4 * a2);
  v11 = *((_QWORD *)this + 66);
  if (v11)
    v12 = (v10 - 31) >= 2;
  else
    v12 = 1;
  if (v12)
    return AUDspLib::SetParameter(this, a2, a3, a4, a5.n128_f32[0]);
  *(_DWORD *)(*((_QWORD *)this + 68) + 4 * v10) = a5.n128_u32[0];
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 128))(v11, a5);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
  ausdk::AUElement::SetParameter(Element, a2, v5, 0);
  return 0;
}

uint64_t AUBassQueen::GetParameterInfo(AUBassQueen *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  AudioUnitParameterValue v10;
  const __CFString *v11;
  int v12;
  int v13;
  __CFString **v14;

  if ((a2 & 0xFFFFFFFB) != 0)
    return 4294956418;
  if (*((_DWORD *)this + 439) <= a3)
    return 4294956418;
  v8 = *(unsigned int *)(*((_QWORD *)this + 211) + 4 * a3);
  v9 = *(_DWORD *)(*((_QWORD *)this + 203) + 4 * v8);
  a4->unit = *(_DWORD *)(*((_QWORD *)this + 201) + 4 * v8);
  v10 = *(float *)(*((_QWORD *)this + 209) + 4 * v8);
  a4->flags = v9 - 1065353216;
  a4->defaultValue = v10;
  a4->minValue = DspLib::BassQueen::Parameters::min(*((_QWORD *)this + 68), (uint64_t)(*((_QWORD *)this + 69) - *((_QWORD *)this + 68)) >> 2, v8);
  a4->maxValue = DspLib::BassQueen::Parameters::max(*((_QWORD *)this + 68), (uint64_t)(*((_QWORD *)this + 69) - *((_QWORD *)this + 68)) >> 2, v8);
  if (v8 > 0x31)
  {
    v12 = DspLib::BassQueen::Parameters::loudspeakerModelMode(*((_QWORD *)this + 68));
    v13 = v8 - 50;
    if ((v8 - 50) > 4)
    {
      switch(v12)
      {
        case 1:
          v13 = v8 - 55;
          v14 = DspLib::LoudspeakerModel::Parameters::ThieleSmall::kNames;
          goto LABEL_9;
        case 2:
          v13 = v8 - 55;
          v14 = DspLib::LoudspeakerModel::Parameters::Sdomain_0::kNames;
          goto LABEL_9;
        case 3:
          v13 = v8 - 55;
          v14 = DspLib::LoudspeakerModel::Parameters::Sdomain_1::kNames;
          goto LABEL_9;
        case 4:
          v11 = &stru_1E69EEE40;
          break;
        default:
          v11 = CFSTR("--");
          break;
      }
    }
    else
    {
      v14 = DspLib::LoudspeakerModel::Parameters::kGeneralNames;
LABEL_9:
      v11 = v14[v13];
    }
  }
  else
  {
    v11 = DspLib::BassQueen::Parameters::kNames[v8];
  }
  a4->cfNameString = v11;
  a4->flags |= 0x8000000u;
  CFStringGetCString(v11, a4->name, 52, 0x8000100u);
  result = 0;
  if (*((_QWORD *)this + 216))
  {
    a4->clumpID = *(_DWORD *)(*((_QWORD *)this + 215) + 4 * a3);
    a4->flags |= 0x100000u;
  }
  return result;
}

uint64_t AUBassQueen::GetParameterValueStrings(AUBassQueen *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;

  if (!a4)
    return 0;
  if (*(_DWORD *)(*((_QWORD *)this + 211) + 4 * a3) != 50)
    return 4294956418;
  result = 0;
  *a4 = (const __CFArray *)&unk_1E6A12958;
  return result;
}

uint64_t AUBassQueen::Version(AUBassQueen *this)
{
  return 17301504;
}

DspLib::BassQueen::Algorithm *AUBassQueen::newDspLibAlgorithm(AUBassQueen *this)
{
  DspLib::BassQueen::Algorithm *v1;

  v1 = (DspLib::BassQueen::Algorithm *)operator new();
  DspLib::BassQueen::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B64F7A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C400C19676FLL);
  _Unwind_Resume(a1);
}

void AUECRMGS::~AUECRMGS(AUECRMGS *this)
{
  AUECRMGS::~AUECRMGS(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  *(_QWORD *)this = &off_1E69E5F28;
  std::unique_ptr<ecRMGS>::reset[abi:ne180100]((uint64_t *)this + 76, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 75, 0);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECRMGS::Initialize(AUECRMGS *this)
{
  NSObject *v2;
  uint64_t Element;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  BOOL v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  uint64_t v18;
  ausdk::AUElement *v19;
  ausdk::AUElement **v20;
  uint64_t v21;
  ausdk::AUElement *v22;
  ausdk::AUElement **v23;
  uint64_t v24;
  ausdk::AUElement *v25;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  float v50;
  float v51;
  int v52;
  float v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  float v57;
  int v58;
  int v59;
  float v60;
  float v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  NSObject *v71;
  _BOOL4 v72;
  uint8_t v73[16];

  v2 = AUECRMGSLogScope();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v73 = 0;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "AUECRMGS: Initialize.\n", v73, 2u);
  }
  Element = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 80), 0);
  v4 = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 80), 1u);
  v5 = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 128), 0);
  v6 = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 128), 1u);
  v7 = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 128), 2u);
  v8 = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 137) = v8;
  *((_DWORD *)this + 138) = *(_DWORD *)(v4 + 108);
  v9 = *(double *)(Element + 80);
  *((_DWORD *)this + 135) = v9;
  if (v9 != *(double *)(v4 + 80))
    return 4294956428;
  v10 = *(double *)(v5 + 80);
  v11 = v10 == v9 && v10 == *(double *)(v7 + 80);
  if (!v11 || v10 != *(double *)(v6 + 80))
    return 4294956428;
  v14 = *(_DWORD *)(v5 + 108);
  result = 4294956428;
  if (v14 == v8 && v14 == *(_DWORD *)(v6 + 108))
  {
    *((_DWORD *)this + 136) = *((_DWORD *)this + 84);
    v15 = *((_QWORD *)this + 9);
    if (v15)
    {
      v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
    }
    else
    {
      v17 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v17)
        v16 = 0;
      else
        v16 = *v17;
    }
    *((_DWORD *)this + 140) = ausdk::AUElement::GetParameter(v16, 0);
    v18 = *((_QWORD *)this + 9);
    if (v18)
    {
      v19 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0);
    }
    else
    {
      v20 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v20)
        v19 = 0;
      else
        v19 = *v20;
    }
    *((float *)this + 141) = ausdk::AUElement::GetParameter(v19, 1u);
    v21 = *((_QWORD *)this + 9);
    if (v21)
    {
      v22 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 0);
    }
    else
    {
      v23 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v23)
        v22 = 0;
      else
        v22 = *v23;
    }
    *((float *)this + 142) = ausdk::AUElement::GetParameter(v22, 2u);
    v24 = *((_QWORD *)this + 9);
    if (v24)
    {
      v25 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0);
    }
    else
    {
      v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v26)
        v25 = 0;
      else
        v25 = *v26;
    }
    *((float *)this + 143) = ausdk::AUElement::GetParameter(v25, 3u);
    v27 = *((_QWORD *)this + 9);
    if (v27)
    {
      v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
    }
    else
    {
      v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v29)
        v28 = 0;
      else
        v28 = *v29;
    }
    *((float *)this + 144) = ausdk::AUElement::GetParameter(v28, 4u);
    v30 = *((_QWORD *)this + 9);
    if (v30)
    {
      v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
    }
    else
    {
      v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v32)
        v31 = 0;
      else
        v31 = *v32;
    }
    *((_DWORD *)this + 145) = ausdk::AUElement::GetParameter(v31, 5u);
    v33 = *((_QWORD *)this + 9);
    if (v33)
    {
      v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
    }
    else
    {
      v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v35)
        v34 = 0;
      else
        v34 = *v35;
    }
    *((_DWORD *)this + 146) = ausdk::AUElement::GetParameter(v34, 6u);
    v36 = *((_QWORD *)this + 9);
    if (v36)
    {
      v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
    }
    else
    {
      v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v38)
        v37 = 0;
      else
        v37 = *v38;
    }
    *((_DWORD *)this + 147) = ausdk::AUElement::GetParameter(v37, 7u);
    v39 = *((_QWORD *)this + 9);
    if (v39)
    {
      v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
    }
    else
    {
      v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v41)
        v40 = 0;
      else
        v40 = *v41;
    }
    v42 = ausdk::AUElement::GetParameter(v40, 8u) != 0.0;
    *((_BYTE *)this + 592) = v42;
    *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
    v43 = *((_QWORD *)this + 76);
    if (!v43)
    {
      v44 = operator new();
      *(_DWORD *)v44 = 4;
      *(_OWORD *)(v44 + 4) = xmmword_1B66A2860;
      *(_DWORD *)(v44 + 20) = 1086324736;
      *(_OWORD *)(v44 + 24) = xmmword_1B66A2870;
      *(_OWORD *)(v44 + 40) = xmmword_1B66A2880;
      *(_QWORD *)(v44 + 56) = 0x3F0000003A800000;
      *(_QWORD *)(v44 + 64) = 0x24E6959500000003;
      *(_QWORD *)(v44 + 72) = 0x400000002;
      *(_QWORD *)(v44 + 80) = 0x3ECA3D713F1AE148;
      *(_DWORD *)(v44 + 92) = 1048576000;
      *(_BYTE *)(v44 + 88) = 0;
      bzero((void *)(v44 + 96), 0x228uLL);
      std::unique_ptr<ecRMGS>::reset[abi:ne180100]((uint64_t *)this + 76, v44);
      v43 = *((_QWORD *)this + 76);
      v42 = *((_BYTE *)this + 592);
    }
    v45 = *((_DWORD *)this + 136);
    v46 = (float)v45;
    v47 = *((_DWORD *)this + 135);
    v48 = (float)v45 / (float)v47;
    v49 = vcvtps_u32_f32((float)*((unsigned int *)this + 140) / (float)(v48 * 1000.0));
    *((_DWORD *)this + 139) = v49;
    v50 = *((float *)this + 143);
    v51 = *((float *)this + 141);
    v52 = *((_DWORD *)this + 144);
    v53 = *((float *)this + 142);
    v54 = *((_DWORD *)this + 137);
    v55 = *((_DWORD *)this + 138);
    v56 = *((_DWORD *)this + 145);
    *(_BYTE *)(v43 + 88) = v42;
    *(_DWORD *)(v43 + 20) = 1082130432;
    *(_QWORD *)(v43 + 72) = *((_QWORD *)this + 73);
    *(_DWORD *)(v43 + 68) = 619091349;
    *(_DWORD *)v43 = v49;
    *(float *)(v43 + 8) = __exp10f(v51 / 10.0);
    v57 = __exp10f(v53 / 10.0);
    if (v56 <= 1)
      v58 = 1;
    else
      v58 = v56;
    v59 = v58 + (v58 & 1) - 1;
    *(_DWORD *)(v43 + 64) = v59;
    *(_DWORD *)(v43 + 24) = v54;
    *(_DWORD *)(v43 + 28) = v55;
    *(_DWORD *)(v43 + 32) = v45;
    *(_DWORD *)(v43 + 36) = v47;
    *(_DWORD *)(v43 + 44) = 2 * v45;
    *(_DWORD *)(v43 + 48) = v45 & 0x7FFFFFFF;
    *(_DWORD *)(v43 + 52) = (v45 & 0x7FFFFFFF) + 1;
    *(_DWORD *)(v43 + 12) = v52;
    *(float *)(v43 + 16) = v57;
    *(float *)(v43 + 56) = 1.0 / (float)(v46 + v46);
    *(float *)(v43 + 60) = v46 + v46;
    *(float *)(v43 + 92) = 1.0 / (float)v54;
    v60 = 0.0;
    if (v50 > 0.0)
      v60 = expf((float)((float)-v46 / (float)v47) / v50);
    *(float *)(v43 + 4) = v60;
    v61 = expf(v48 / (float)((float)(v48 * (float)*(unsigned int *)v43) / -10.0));
    *(float *)(v43 + 80) = v61;
    *(float *)(v43 + 84) = 1.0 - v61;
    v62 = (v59 * v55);
    *(_DWORD *)(v43 + 40) = v62;
    v73[0] = 1;
    std::vector<BOOL>::assign(v43 + 96, v62, v73);
    v63 = *(unsigned int *)(v43 + 24);
    v73[0] = 1;
    std::vector<BOOL>::assign(v43 + 120, v63, v73);
    v64 = *(unsigned int *)(v43 + 40);
    *(_DWORD *)v73 = 0;
    std::vector<float>::assign((char **)(v43 + 144), v64, v73);
    v65 = (4 * *(_DWORD *)(v43 + 52));
    *(_DWORD *)v73 = 0;
    std::vector<float>::assign((char **)(v43 + 168), v65, v73);
    ecutils::fcn_vector_init<float>((uint64_t *)(v43 + 192), *(_DWORD *)(v43 + 40), 4 * *(_DWORD *)(v43 + 52), 0.0);
    v66 = (4 * *(_DWORD *)(v43 + 52));
    *(_DWORD *)v73 = 0;
    std::vector<float>::assign((char **)(v43 + 216), v66, v73);
    v67 = (4 * *(_DWORD *)(v43 + 52));
    *(_DWORD *)v73 = 0;
    std::vector<float>::assign((char **)(v43 + 240), v67, v73);
    v68 = *(unsigned int *)(v43 + 52);
    *(_DWORD *)v73 = 1065353216;
    std::vector<float>::assign((char **)(v43 + 264), v68, v73);
    v69 = (2 * *(_DWORD *)(v43 + 52));
    *(_DWORD *)v73 = 0;
    std::vector<float>::assign((char **)(v43 + 312), v69, v73);
    ecutils::fcn_vector_init<float>((uint64_t *)(v43 + 360), *(_DWORD *)v43, *(_DWORD *)(v43 + 52), 1.0);
    v70 = *(unsigned int *)(v43 + 52);
    *(_DWORD *)v73 = 1065353216;
    std::vector<float>::assign((char **)(v43 + 336), v70, v73);
    ecutils::fcn_vector_init<float>((uint64_t *)(v43 + 384), *(_DWORD *)(v43 + 24), 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 408, *(_DWORD *)(v43 + 40), *(_DWORD *)v43 + 1, 4 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 432, *(_DWORD *)(v43 + 40), *(_DWORD *)v43 + 1, 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 456, *(_DWORD *)(v43 + 40), *(_DWORD *)v43 + 1, 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)(v43 + 504), *(_DWORD *)(v43 + 40), 4 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 480, *(_DWORD *)(v43 + 40), *(_DWORD *)v43, 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 528, *(_DWORD *)(v43 + 40), *(_DWORD *)(v43 + 40), *(_DWORD *)v43, 4 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 552, *(_DWORD *)(v43 + 24), *(_DWORD *)(v43 + 40), *(_DWORD *)v43, 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 576, *(_DWORD *)(v43 + 40), *(_DWORD *)(v43 + 40), *(_DWORD *)v43, 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 600, *(_DWORD *)(v43 + 40), *(_DWORD *)(v43 + 40), *(_DWORD *)v43, 2 * *(_DWORD *)(v43 + 52), 0.0);
    ecutils::fcn_vector_init<float>(v43 + 624, *(_DWORD *)(v43 + 40), *(_DWORD *)v43, 2 * *(_DWORD *)(v43 + 52), *(float *)(v43 + 16));
    ecRMGS::ec_state_reset((ecRMGS *)v43);
    (*(void (**)(AUECRMGS *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
    v71 = AUECRMGSLogScope();
    v72 = os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v72)
    {
      *(_WORD *)v73 = 0;
      _os_log_impl(&dword_1B5ED0000, v71, OS_LOG_TYPE_DEFAULT, "AUECRMGS: Successfully initialized.\n", v73, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t AUECRMGS::Reset(AUECRMGS *this)
{
  caulk::concurrent::messenger *v2;
  uint64_t v3;

  v2 = (caulk::concurrent::messenger *)*((_QWORD *)this + 75);
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = &off_1E69E6178;
  *(_QWORD *)(v3 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v2, (caulk::concurrent::message *)v3);
  if (*((_BYTE *)this + 17))
    ecRMGS::ec_state_reset(*((ecRMGS **)this + 76));
  return 0;
}

uint64_t AUECRMGS::GetPropertyInfo(AUECRMGS *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUECRMGS::GetProperty(AUECRMGS *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 528;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUECRMGS::SetProperty(AUECRMGS *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_BYTE *)this + 528) = *a5 != 0;
  }
  return result;
}

uint64_t AUECRMGS::SetParameter(AUECRMGS *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;

  if (a3)
    return 4294956418;
  ++*((_DWORD *)this + 133);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
  return 0;
}

uint64_t AUECRMGS::CanScheduleParameters(AUECRMGS *this)
{
  return 0;
}

uint64_t AUECRMGS::ProcessMultipleBufferLists(AUECRMGS *this, unsigned int *a2, int a3, uint64_t a4, const AudioBufferList **a5, uint64_t a6, AudioBufferList **a7)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  const AudioBufferList *v11;
  uint64_t v12;
  AudioBufferList *v13;
  unint64_t v14;
  const void **v15;
  void **p_mData;
  void **v17;
  void *v18;
  void *v19;
  float *v20;
  float *v21;
  const void *v22;
  caulk::concurrent::messenger *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  const void **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  vDSP_Length v35;
  float *v36;
  float *v37;
  vDSP_Length v38;
  uint64_t v39;
  uint64_t v40;
  float *mData;
  unsigned int v42;
  unint64_t i;
  const float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float **v48;
  vDSP_Length v49;
  float *v50;
  unsigned int v51;
  uint64_t v52;
  float *v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  float *v77;
  vDSP_Length v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t j;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  vDSP_Length v90;
  float *v91;
  float *v92;
  float *v93;
  float *v94;
  DSPSplitComplex v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t k;
  uint64_t v104;
  DSPSplitComplex v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  DSPSplitComplex v112;
  uint64_t v113;
  uint64_t v114;
  DSPSplitComplex v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  DSPSplitComplex v119;
  __int128 v120;
  float *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  vDSP_Length v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t m;
  vDSP_Length v130;
  float *v131;
  unint64_t v132;
  unint64_t n;
  float *v134;
  vDSP_Length v135;
  float *v136;
  unsigned int v137;
  float *v138;
  vDSP_Length v139;
  float *v140;
  char *v141;
  const float *v142;
  float *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  float v148;
  uint64_t v149;
  unint64_t v150;
  float v151;
  const float *v152;
  float v153;
  vDSP_Length v154;
  const float *v155;
  uint64_t v156;
  unint64_t v157;
  caulk::concurrent::messenger *v159;
  uint64_t v160;
  unint64_t v161;
  const void **v162;
  void **v163;
  void **v164;
  void *v165;
  void *v166;
  float *v167;
  float *v168;
  const void *v169;
  AUECRMGS *v170;
  AudioBufferList *v171;
  uint64_t v172;
  uint64_t v173;
  AudioBufferList *v174;
  uint64_t v175;
  DSPSplitComplex v176;
  DSPSplitComplex v177;
  DSPSplitComplex v178;
  const AudioBufferList *v179;
  DSPSplitComplex v180;
  DSPSplitComplex v181;
  float v182;
  float __C;
  DSPSplitComplex v184;
  DSPSplitComplex v185;
  __int128 v186;
  DSPSplitComplex v187;
  DSPSplitComplex v188;
  int v189[4];
  DSPSplitComplex __A;

  v8 = *((_DWORD *)this + 84);
  if (v8 == a3)
  {
    result = 4294956428;
    if ((_DWORD)a4 == 2 && (_DWORD)a6 == 3)
    {
      v10 = (uint64_t)*a5;
      v11 = a5[1];
      v12 = (uint64_t)*a7;
      v174 = a7[1];
      v13 = a7[2];
      if (*((_BYTE *)this + 528))
      {
        if (v12 != v10 && *((_DWORD *)this + 137))
        {
          v14 = 0;
          v15 = (const void **)(v10 + 16);
          p_mData = &v174->mBuffers[0].mData;
          v17 = (void **)(v12 + 16);
          do
          {
            v19 = *v17;
            v17 += 2;
            v18 = v19;
            v21 = (float *)*p_mData;
            p_mData += 2;
            v20 = v21;
            v22 = *v15;
            v15 += 2;
            memcpy(v18, v22, 8 * *((unsigned int *)this + 136));
            vDSP_vclr(v20, 1, (2 * *((_DWORD *)this + 136)));
            ++v14;
          }
          while (v14 < *((unsigned int *)this + 137));
        }
        if (v11 != v13)
          memcpy(v13->mBuffers[0].mData, v11->mBuffers[0].mData, 8 * *((unsigned int *)this + 136));
      }
      else
      {
        v179 = a5[1];
        v172 = (uint64_t)*a7;
        v173 = (uint64_t)*a5;
        v170 = this;
        v171 = a7[2];
        v26 = (unsigned int *)*((_QWORD *)this + 76);
        v182 = 1.0;
        __C = 0.0;
        if (v26[6])
        {
          v27 = 0;
          v28 = 0;
          v29 = &v174->mBuffers[0].mData;
          v30 = (const void **)(v10 + 16);
          do
          {
            v31 = (char *)*v30;
            memcpy(*v29, *v30, 8 * v26[8]);
            memcpy(*(void **)(*((_QWORD *)v26 + 48) + v27), v31, 4 * v26[8]);
            v32 = v26[8];
            v33 = *(_QWORD *)(*((_QWORD *)v26 + 48) + v27);
            *(_DWORD *)(v33 + 4 * v32) = *(_DWORD *)&v31[4 * v32];
            v34 = v26[13];
            *(_DWORD *)(v33 + 4 * v34) = 0;
            memcpy((void *)(v33 + 4 * (v34 + 1)), &v31[4 * (v32 + 1)], 4 * (v32 - 1));
            v35 = 2 * v26[13];
            v36 = *(float **)(*((_QWORD *)v26 + 48) + v27);
            v36[(v35 - 1)] = 0.0;
            vDSP_vsmul(v36, 1, (const float *)v26 + 15, v36, 1, v35);
            v37 = (float *)*((_QWORD *)v26 + 21);
            v38 = v26[13];
            __A.realp = *(float **)(*((_QWORD *)v26 + 48) + v27);
            __A.imagp = &__A.realp[v38];
            vDSP_zvmags(&__A, 1, v37, 1, v38);
            vDSP_meanv(*((const float **)v26 + 21), 1, &__C, v26[13]);
            v39 = *((_QWORD *)v26 + 15);
            v40 = *(_QWORD *)(v39 + 8 * (v28 >> 6));
            *(_QWORD *)(v39 + 8 * (v28 >> 6)) = v40 & ~(1 << v28);
            if ((float)(log10f(__C + *((float *)v26 + 17)) * 10.0) > *((float *)v26 + 3))
              *(_QWORD *)(v39 + 8 * (v28 >> 6)) = v40 | (1 << v28);
            ++v28;
            v27 += 24;
            v29 += 2;
            v30 += 2;
          }
          while (v28 < v26[6]);
        }
        mData = (float *)v171->mBuffers[0].mData;
        vDSP_vclr(mData, 1, 2 * v26[8]);
        v42 = v26[7];
        __C = 1.0 / (float)v42;
        if (v42)
        {
          for (i = 0; i < v51; ++i)
          {
            v44 = (const float *)v179->mBuffers[i].mData;
            vDSP_vsma(v44, 1, &__C, mData, 1, mData, 1, 2 * v26[8]);
            memcpy(**(void ***)(*((_QWORD *)v26 + 51) + 24 * i), v44, 4 * v26[8]);
            v45 = v26[8];
            v46 = **(_QWORD **)(*((_QWORD *)v26 + 51) + 24 * i);
            *(float *)(v46 + 4 * v45) = v44[v45];
            v47 = v26[13];
            *(_DWORD *)(v46 + 4 * v47) = 0;
            memcpy((void *)(v46 + 4 * (v47 + 1)), &v44[(v45 + 1)], 4 * (v45 - 1));
            v48 = *(float ***)(*((_QWORD *)v26 + 51) + 24 * i);
            v49 = 2 * v26[13];
            v50 = *v48;
            (*v48)[(v49 - 1)] = 0.0;
            vDSP_vsmul(v50, 1, (const float *)v26 + 15, v50, 1, v49);
            v51 = v26[7];
            if (v26[16] >= 2)
            {
              v52 = *((_QWORD *)v26 + 51);
              v53 = **(float ***)(v52 + 24 * i);
              v54 = v26[13];
              v55 = -2;
              v56 = 1;
              do
              {
                v185.realp = v53;
                v185.imagp = &v53[v54];
                v57 = 2 * v56;
                v58 = 2 * v56 - 1;
                v59 = **(_QWORD **)(v52 + 24 * (i + v51 * v58));
                v184.realp = (float *)(v59 + 4 * v56);
                v184.imagp = (float *)(v59 + 4 * (v54 + v56));
                vDSP_zvmov(&v185, 1, &v184, 1, v54 - v56);
                v60 = 0;
                v61 = *((_QWORD *)v26 + 51);
                v62 = **(_QWORD **)(v61 + 24 * i);
                v63 = v26[7];
                v64 = **(_QWORD **)(v61 + 24 * (i + v63 * v58));
                v65 = v26[13];
                v66 = v56;
                do
                {
                  *(_DWORD *)(v64 + 4 * v60) = *(_DWORD *)(v62 + 4 * v66);
                  *(float *)(v64 + 4 * (v65 + v60++)) = -*(float *)(v62
                                                                                  + 4 * (v65 + v66--));
                }
                while (v66);
                v185.realp = (float *)(v62 + 4 * v56);
                v185.imagp = (float *)(v62 + 4 * (v65 + v56));
                v184.realp = **(float ***)(v61 + 24 * (i + v63 * v57));
                v184.imagp = &v184.realp[v65];
                vDSP_zvmov(&v185, 1, &v184, 1, (v65 - v56));
                v52 = *((_QWORD *)v26 + 51);
                v54 = v26[13];
                v51 = v26[7];
                v53 = **(float ***)(v52 + 24 * i);
                v67 = **(_QWORD **)(v52 + 24 * (i + v51 * v57));
                v68 = -1;
                v69 = v55;
                v70 = v56;
                do
                {
                  *(float *)(v67 + 4 * (v54 + v68)) = v53[v54 + v69];
                  *(float *)(v67 + 4 * (2 * v54 + v68--)) = -v53[2 * v54 + v69++];
                  --v70;
                }
                while (v70);
                v71 = v56++ >= (unint64_t)v26[16] >> 1;
                --v55;
              }
              while (!v71);
            }
          }
        }
        if (v26[10])
        {
          v72 = 0;
          v73 = 0;
          do
          {
            v74 = **(_QWORD **)(*((_QWORD *)v26 + 51) + v72);
            memcpy((void *)(v74 + 8 * v26[13]), (const void *)(v74 + 4 * v26[13]), 4 * v26[13]);
            v75 = **(_QWORD **)(*((_QWORD *)v26 + 51) + v72);
            memcpy((void *)(v75 + 12 * v26[13]), (const void *)(v75 + 4 * v26[13]), 4 * v26[13]);
            v76 = **(char ***)(*((_QWORD *)v26 + 51) + v72);
            memcpy(&v76[4 * v26[13]], v76, 4 * v26[13]);
            v77 = (float *)*((_QWORD *)v26 + 21);
            v78 = v26[13];
            __A.realp = **(float ***)(*((_QWORD *)v26 + 51) + v72);
            __A.imagp = &__A.realp[(2 * v78)];
            vDSP_zvmags(&__A, 1, v77, 1, v78);
            vDSP_meanv(*((const float **)v26 + 21), 1, &__C, v26[13]);
            v79 = *((_QWORD *)v26 + 18);
            v80 = (float)(*((float *)v26 + 21) * __C) + (float)(*((float *)v26 + 20) * *(float *)(v79 + 4 * v73));
            *(float *)(v79 + 4 * v73) = v80;
            v81 = *((_QWORD *)v26 + 12);
            v82 = *(_QWORD *)(v81 + 8 * (v73 >> 6));
            *(_QWORD *)(v81 + 8 * (v73 >> 6)) = v82 & ~(1 << v73);
            if ((float)(log10f(v80 + *((float *)v26 + 17)) * 10.0) > *((float *)v26 + 3))
              *(_QWORD *)(v81 + 8 * (v73 >> 6)) = v82 | (1 << v73);
            ++v73;
            v72 += 24;
          }
          while (v73 < v26[10]);
        }
        vDSP_vfill(&v182, *((float **)v26 + 42), 1, v26[13]);
        if (*v26)
        {
          v83 = 0;
          do
          {
            v84 = v26[10];
            if ((_DWORD)v84)
            {
              v85 = 0;
              for (j = 0; j < v84; ++j)
              {
                if (((*(_QWORD *)(*((_QWORD *)v26 + 12) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) != 0)
                {
                  memcpy(*(void **)(*((_QWORD *)v26 + 24) + v85), *(const void **)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v85) + 24 * v83), 16 * v26[13]);
                  v84 = v26[10];
                }
                v85 += 24;
              }
            }
            vDSP_vfill(&v182, *((float **)v26 + 39), 1, 2 * v26[13]);
            vDSP_vdiv(*((const float **)v26 + 33), 1, *((const float **)v26 + 39), 1, *((float **)v26 + 39), 1, v26[13]);
            vDSP_vdiv(*((const float **)v26 + 33), 1, (const float *)(*((_QWORD *)v26 + 39) + 4 * v26[13]), 1, (float *)(*((_QWORD *)v26 + 39) + 4 * v26[13]), 1, v26[13]);
            if (v26[10])
            {
              v87 = 0;
              v88 = 24;
              v89 = 1;
              do
              {
                if ((*(_QWORD *)(*((_QWORD *)v26 + 12) + 8 * (v87 >> 6)) & (1 << v87)) != 0)
                {
                  v175 = v89;
                  v90 = 2 * v26[13];
                  v91 = (float *)(*(_QWORD *)(*((_QWORD *)v26 + 24) + 24 * v87) + 4 * v90);
                  v185.realp = *(float **)(*((_QWORD *)v26 + 24) + 24 * v87);
                  v185.imagp = v91;
                  v92 = *(float **)(*((_QWORD *)v26 + 63) + 24 * v87);
                  v93 = *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 78) + 24 * v87) + 24 * v83);
                  vDSP_vsmul(v93, 1, (const float *)v26 + 1, v93, 1, v90);
                  vDSP_zvmags(&v185, 1, *((float **)v26 + 30), 1, 2 * v26[13]);
                  v94 = *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 78) + 24 * v87) + 24 * v83);
                  vDSP_vma(*((const float **)v26 + 30), 1, *((const float **)v26 + 39), 1, v94, 1, v94, 1, 2 * v26[13]);
                  vDSP_meanv(*(const float **)(*(_QWORD *)(*((_QWORD *)v26 + 78) + 24 * v87) + 24 * v83), 1, &__C, v26[13]);
                  if (__C <= 0.00000011921)
                  {
                    *(_QWORD *)(*((_QWORD *)v26 + 12) + 8 * (v87 >> 6)) &= ~(1 << v87);
                  }
                  else
                  {
                    v95.realp = v92;
                    v95.imagp = &v92[v90];
                    v180 = v95;
                    __C = 0.00000011921;
                    vDSP_vthr(*(const float **)(*(_QWORD *)(*((_QWORD *)v26 + 78) + 24 * v87) + 24 * v83), 1, &__C, *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 78) + 24 * v87) + 24 * v83), 1, 2 * v26[13]);
                    vDSP_vdiv(*(const float **)(*(_QWORD *)(*((_QWORD *)v26 + 78) + 24 * v87) + 24 * v83), 1, *((const float **)v26 + 39), 1, *((float **)v26 + 21), 1, 2 * v26[13]);
                    vDSP_vmul(*((const float **)v26 + 21), 1, *(const float **)(*((_QWORD *)v26 + 24) + 24 * v87), 1, *(float **)(*((_QWORD *)v26 + 63) + 24 * v87), 1, 2 * v26[13]);
                    vDSP_vmul(*((const float **)v26 + 21), 1, (const float *)(*(_QWORD *)(*((_QWORD *)v26 + 24) + 24 * v87) + 8 * v26[13]), 1, (float *)(*(_QWORD *)(*((_QWORD *)v26 + 63) + 24 * v87) + 8 * v26[13]), 1, 2 * v26[13]);
                    vDSP_vneg(*(const float **)(*((_QWORD *)v26 + 63) + 24 * v87), 1, *(float **)(*((_QWORD *)v26 + 63) + 24 * v87), 1, 2 * v26[13]);
                    vDSP_vmul(*((const float **)v26 + 21), 1, *((const float **)v26 + 30), 1, *((float **)v26 + 21), 1, 2 * v26[13]);
                    vDSP_vabs(*((const float **)v26 + 21), 1, *((float **)v26 + 21), 1, 2 * v26[13]);
                    vDSP_vneg(*((const float **)v26 + 21), 1, *((float **)v26 + 21), 1, 2 * v26[13]);
                    vDSP_vma(*((const float **)v26 + 39), 1, *((const float **)v26 + 21), 1, *((const float **)v26 + 39), 1, *((float **)v26 + 39), 1, 2 * v26[13]);
                    vDSP_vabs(*((const float **)v26 + 39), 1, *((float **)v26 + 39), 1, 2 * v26[13]);
                    vDSP_vthr(*((const float **)v26 + 39), 1, (const float *)v26 + 2, *((float **)v26 + 39), 1, 2 * v26[13]);
                    v96 = v26[10];
                    v97 = v88;
                    v98 = v89;
                    if (v87 + 1 < v96)
                    {
                      do
                      {
                        if (((*(_QWORD *)(*((_QWORD *)v26 + 12) + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v98) & 1) != 0)
                        {
                          v99 = 2 * v26[13];
                          v184.realp = *(float **)(*((_QWORD *)v26 + 24) + v97);
                          v184.imagp = &v184.realp[v99];
                          *(_QWORD *)&v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 66) + 24 * v87) + v97)
                                                       + 24 * v83);
                          *((_QWORD *)&v100 + 1) = v100 + 4 * v99;
                          *(_OWORD *)v189 = v100;
                          __A = v185;
                          v187 = v180;
                          v188 = v184;
                          v186 = v100;
                          aDSP_zvmama((float32x4_t *)&__A, 1, (float32x4_t **)v189, 1, (float32x4_t **)&v188, 1, (float32x4_t **)&v187, 1, (float32x4_t **)&v186, 1, v99);
                          v96 = v26[10];
                        }
                        ++v98;
                        v97 += 24;
                      }
                      while (v98 < v96);
                    }
                    v101 = v26[6];
                    if ((_DWORD)v101)
                    {
                      v102 = 0;
                      for (k = 0; k < v101; ++k)
                      {
                        if (((*(_QWORD *)(*((_QWORD *)v26 + 15) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) != 0)
                        {
                          v104 = v26[13];
                          v105.realp = *(float **)(*((_QWORD *)v26 + 48) + v102);
                          v105.imagp = &v105.realp[v104];
                          *(_QWORD *)&v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 69) + v102) + 24 * v87)
                                                       + 24 * v83);
                          *((_QWORD *)&v106 + 1) = v106 + 4 * v104;
                          *(_OWORD *)v189 = v106;
                          __A = v185;
                          v188 = v105;
                          v186 = v106;
                          v187 = v180;
                          aDSP_zvmama((float32x4_t *)&__A, 1, (float32x4_t **)v189, 1, (float32x4_t **)&v188, 1, (float32x4_t **)&v187, 1, (float32x4_t **)&v186, 1, v104);
                          v101 = v26[6];
                        }
                        v102 += 24;
                      }
                      v96 = v26[10];
                    }
                    v107 = v26[13];
                    v108 = *(char **)(*(_QWORD *)(*((_QWORD *)v26 + 57) + 24 * v87) + 24 * v83);
                    v109 = *(char **)(*((_QWORD *)v26 + 24) + 24 * v87);
                    if (v96)
                    {
                      v110 = 0;
                      v111 = 0;
                      v112.realp = *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 60) + 24 * v87) + 24 * v83);
                      v112.imagp = &v112.realp[v107];
                      v181 = v112;
                      v112.realp = *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 57) + 24 * v87) + 24 * v83);
                      v112.imagp = (float *)&v108[4 * v107];
                      v178 = v112;
                      v113 = *(_QWORD *)(*((_QWORD *)v26 + 63) + 24 * v87);
                      v112.realp = (float *)(v113 + 4 * v107);
                      v112.imagp = (float *)(v113 + 4 * (3 * v107));
                      v177 = v112;
                      v112.realp = (float *)&v109[4 * v107];
                      v112.imagp = (float *)&v109[4 * (3 * v107)];
                      v176 = v112;
                      do
                      {
                        if (((*(_QWORD *)(*((_QWORD *)v26 + 12) + ((v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v111) & 1) != 0)
                        {
                          v114 = v26[13];
                          v115.realp = *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 54) + v110) + 24 * v83);
                          v115.imagp = &v115.realp[v114];
                          *(_QWORD *)&v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 72) + v110) + 24 * v87)
                                                       + 24 * v83);
                          *((_QWORD *)&v116 + 1) = v116 + 4 * v114;
                          *(_OWORD *)v189 = v116;
                          __A = v176;
                          v188 = v115;
                          v186 = v116;
                          v187 = v177;
                          aDSP_zvmama((float32x4_t *)&__A, 1, (float32x4_t **)v189, 1, (float32x4_t **)&v188, 1, (float32x4_t **)&v187, 1, (float32x4_t **)&v186, 1, v114);
                          v117 = v26[13];
                          v118 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v110) + 24 * v83);
                          v119.realp = (float *)(v118 + 4 * v117);
                          v119.imagp = (float *)(v118 + 4 * (3 * v117));
                          *(_QWORD *)&v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 75) + v110) + 24 * v87)
                                                       + 24 * v83);
                          *((_QWORD *)&v120 + 1) = v120 + 4 * v117;
                          *(_OWORD *)v189 = v120;
                          __A = v178;
                          v188 = v119;
                          v186 = v120;
                          v187 = v181;
                          aDSP_zvmama((float32x4_t *)&__A, 1, (float32x4_t **)v189, 1, (float32x4_t **)&v188, 1, (float32x4_t **)&v187, 1, (float32x4_t **)&v186, 1, v117);
                          v96 = v26[10];
                        }
                        ++v111;
                        v110 += 24;
                      }
                      while (v111 < v96);
                      v107 = v26[13];
                      v108 = *(char **)(*(_QWORD *)(*((_QWORD *)v26 + 57) + 24 * v87) + 24 * v83);
                      v109 = *(char **)(*((_QWORD *)v26 + 24) + 24 * v87);
                      v89 = v175;
                    }
                    memcpy(v108, v109, 4 * v107);
                    memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 57) + 24 * v87) + 24 * v83) + 4 * v26[13]), (const void *)(*(_QWORD *)(*((_QWORD *)v26 + 24) + 24 * v87) + 8 * v26[13]), 4 * v26[13]);
                    memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)v26 + 60) + 24 * v87) + 24 * v83), *(const void **)(*((_QWORD *)v26 + 63) + 24 * v87), 4 * v26[13]);
                    memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 60) + 24 * v87) + 24 * v83) + 4 * v26[13]), (const void *)(*(_QWORD *)(*((_QWORD *)v26 + 63) + 24 * v87) + 8 * v26[13]), 4 * v26[13]);
                  }
                }
                ++v87;
                ++v89;
                v88 += 24;
              }
              while (v87 < v26[10]);
            }
            vDSP_vmul(*((const float **)v26 + 33), 1, *((const float **)v26 + 39), 1, *((float **)v26 + 39), 1, v26[13]);
            vDSP_vmul(*((const float **)v26 + 33), 1, (const float *)(*((_QWORD *)v26 + 39) + 4 * v26[13]), 1, (float *)(*((_QWORD *)v26 + 39) + 4 * v26[13]), 1, v26[13]);
            vDSP_vmul(*((const float **)v26 + 39), 1, *((const float **)v26 + 42), 1, *((float **)v26 + 42), 1, v26[13]);
            LODWORD(__A.realp) = 2 * v26[13];
            vvsqrtf(*((float **)v26 + 21), *((const float **)v26 + 39), (const int *)&__A);
            v189[0] = v26[13];
            v121 = *(float **)(*((_QWORD *)v26 + 45) + 24 * v83);
            vvsqrtf(v121, v121, v189);
            v122 = v26[10];
            if ((_DWORD)v122)
            {
              v123 = 0;
              v124 = 0;
              v125 = v83 + 1;
              do
              {
                if (((*(_QWORD *)(*((_QWORD *)v26 + 12) + ((v124 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v124) & 1) != 0)
                {
                  vDSP_vmul(*(const float **)(*(_QWORD *)(*((_QWORD *)v26 + 54) + v123) + 24 * v83), 1, (const float *)(*((_QWORD *)v26 + 21) + 4 * v26[13]), 1, *(float **)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v125), 1, v26[13]);
                  v126 = v26[13];
                  vDSP_vmul((const float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 54) + v123) + 24 * v83) + 4 * v126), 1, (const float *)(*((_QWORD *)v26 + 21) + 4 * v126), 1, (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v125)+ 4 * (2 * v126)), 1, v126);
                  vDSP_vmul((const float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v83) + 4 * v26[13]), 1, *(const float **)(*((_QWORD *)v26 + 45) + 24 * v83), 1, (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v125) + 4 * v26[13]), 1, v26[13]);
                  vDSP_vmul((const float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v83) + 12 * v26[13]), 1, *(const float **)(*((_QWORD *)v26 + 45) + 24 * v83), 1, (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v125) + 12 * v26[13]), 1, v26[13]);
                  memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)v26 + 54) + v123) + 24 * v83), *(const void **)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v83), 4 * v26[13]);
                  memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 54) + v123) + 24 * v83) + 4 * v26[13]), (const void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 51) + v123) + 24 * v83) + 8 * v26[13]), 4 * v26[13]);
                  v122 = v26[10];
                }
                ++v124;
                v123 += 24;
              }
              while (v124 < v122);
            }
            v127 = v26[6];
            if ((_DWORD)v127)
            {
              v128 = 0;
              for (m = 0; m < v127; ++m)
              {
                if (((*(_QWORD *)(*((_QWORD *)v26 + 15) + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) != 0)
                {
                  vDSP_vmul(*(const float **)(*((_QWORD *)v26 + 48) + v128), 1, *((const float **)v26 + 21), 1, *(float **)(*((_QWORD *)v26 + 48) + v128), 1, v26[13]);
                  v130 = v26[13];
                  v131 = (float *)(*(_QWORD *)(*((_QWORD *)v26 + 48) + v128) + 4 * v130);
                  vDSP_vmul(v131, 1, *((const float **)v26 + 21), 1, v131, 1, v130);
                  v127 = v26[6];
                }
                v128 += 24;
              }
            }
            memcpy(*(void **)(*((_QWORD *)v26 + 45) + 24 * v83++), *((const void **)v26 + 39), 4 * v26[13]);
          }
          while (v83 < *v26);
        }
        LODWORD(__A.realp) = v26[13];
        vvsqrtf(*((float **)v26 + 42), *((const float **)v26 + 42), (const int *)&__A);
        vDSP_vclr(*((float **)v26 + 33), 1, v26[13]);
        v132 = v26[6];
        if ((_DWORD)v132)
        {
          for (n = 0; n < v132; ++n)
          {
            if (((*(_QWORD *)(*((_QWORD *)v26 + 15) + ((n >> 3) & 0x1FFFFFFFFFFFFFF8)) >> n) & 1) != 0)
            {
              vDSP_vmul(*((const float **)v26 + 42), 1, *(const float **)(*((_QWORD *)v26 + 48) + 24 * n), 1, *((float **)v26 + 30), 1, v26[13]);
              vDSP_vma(*((const float **)v26 + 30), 1, *((const float **)v26 + 30), 1, *((const float **)v26 + 33), 1, *((float **)v26 + 33), 1, v26[13]);
              vDSP_vmul(*((const float **)v26 + 42), 1, (const float *)(*(_QWORD *)(*((_QWORD *)v26 + 48) + 24 * n) + 4 * v26[13]), 1, *((float **)v26 + 30), 1, v26[13]);
              vDSP_vma(*((const float **)v26 + 30), 1, *((const float **)v26 + 30), 1, *((const float **)v26 + 33), 1, *((float **)v26 + 33), 1, v26[13]);
              if (*((_BYTE *)v26 + 88))
              {
                v134 = *(float **)(*((_QWORD *)v26 + 48) + 24 * n);
                vDSP_vdiv(*((const float **)v26 + 42), 1, v134, 1, v134, 1, v26[13]);
                v135 = v26[13];
                v136 = (float *)(*(_QWORD *)(*((_QWORD *)v26 + 48) + 24 * n) + 4 * v135);
                vDSP_vdiv(*((const float **)v26 + 42), 1, v136, 1, v136, 1, v135);
                if (v26[19])
                {
                  v137 = 0;
                  do
                  {
                    vvsqrtf(*((float **)v26 + 42), *((const float **)v26 + 42), (const int *)&__A);
                    ++v137;
                  }
                  while (v137 < v26[19]);
                }
              }
              v138 = *(float **)(*((_QWORD *)v26 + 48) + 24 * n);
              vDSP_vmul(v138, 1, *((const float **)v26 + 42), 1, v138, 1, v26[13]);
              v139 = v26[13];
              v140 = (float *)(*(_QWORD *)(*((_QWORD *)v26 + 48) + 24 * n) + 4 * v139);
              vDSP_vmul(v140, 1, *((const float **)v26 + 42), 1, v140, 1, v139);
              v141 = *(char **)(v172 + 16 * n + 16);
              v142 = *(const float **)(v173 + 16 * n + 16);
              v143 = (float *)v174->mBuffers[n].mData;
              memcpy(v141, *(const void **)(*((_QWORD *)v26 + 48) + 24 * n), 4 * v26[8]);
              v144 = *(_QWORD *)(*((_QWORD *)v26 + 48) + 24 * n);
              v145 = v26[8];
              *(_DWORD *)&v141[4 * v145] = *(_DWORD *)(v144 + 4 * v145);
              memcpy(&v141[4 * (v145 + 1)], (const void *)(v144 + 4 * (v26[13] + 1)), 4 * (v145 - 1));
              vDSP_vsmul((const float *)v141, 1, (const float *)v26 + 14, (float *)v141, 1, 2 * v26[8]);
              vDSP_dotpr((const float *)v141, 1, (const float *)v141, 1, &__C, 2 * v26[8]);
              v189[0] = 0;
              vDSP_dotpr(v142, 1, v142, 1, (float *)v189, 2 * v26[8]);
              if (__C > (float)(*(float *)v189 * *((float *)v26 + 5)))
                memcpy(v141, v142, 8 * v26[8]);
              vDSP_vsub((const float *)v141, 1, v142, 1, v143, 1, 2 * v26[8]);
              v132 = v26[6];
            }
          }
        }
        vDSP_vsmul(*((const float **)v26 + 33), 1, (const float *)v26 + 23, *((float **)v26 + 33), 1, v26[13]);
        vDSP_vthr(*((const float **)v26 + 33), 1, (const float *)v26 + 2, *((float **)v26 + 33), 1, v26[13]);
        if (v26[18])
        {
          v146 = 0;
          do
          {
            vvsqrtf(*((float **)v26 + 33), *((const float **)v26 + 33), (const int *)&__A);
            ++v146;
          }
          while (v146 < v26[18]);
        }
        v147 = *((_QWORD *)v170 + 76);
        LODWORD(__A.realp) = 0;
        v148 = 0.0;
        if (*(_DWORD *)(v147 + 28))
        {
          v149 = 0;
          v150 = 0;
          v151 = 0.0;
          do
          {
            v152 = **(const float ***)(*(_QWORD *)(v147 + 408) + v149);
            vDSP_dotpr(v152, 1, v152, 1, (float *)&__A, *(unsigned int *)(v147 + 52));
            v153 = v151 + *(float *)&__A.realp;
            v154 = *(unsigned int *)(v147 + 52);
            v155 = (const float *)(**(_QWORD **)(*(_QWORD *)(v147 + 408) + v149) + 4 * (2 * v154));
            vDSP_dotpr(v155, 1, v155, 1, (float *)&__A, v154);
            v151 = v153 + *(float *)&__A.realp;
            ++v150;
            v149 += 24;
          }
          while (v150 < *(unsigned int *)(v147 + 28));
          v147 = *((_QWORD *)v170 + 76);
        }
        else
        {
          v151 = 0.0;
        }
        LODWORD(__A.realp) = 0;
        if (*(_DWORD *)(v147 + 24))
        {
          v156 = 0;
          v157 = 0;
          v148 = 0.0;
          do
          {
            vDSP_dotpr(*(const float **)(*(_QWORD *)(v147 + 384) + v156), 1, *(const float **)(*(_QWORD *)(v147 + 384) + v156), 1, (float *)&__A, (2 * *(_DWORD *)(v147 + 52)));
            v148 = v148 + *(float *)&__A.realp;
            ++v157;
            v156 += 24;
          }
          while (v157 < *(unsigned int *)(v147 + 24));
        }
        if ((LODWORD(v148) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v151) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          v159 = (caulk::concurrent::messenger *)*((_QWORD *)v170 + 75);
          v160 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
          *(_DWORD *)(v160 + 16) = 0;
          *(_BYTE *)(v160 + 21) = (LODWORD(v151) & 0x7FFFFFFFu) < 0x7F800000;
          *(_BYTE *)(v160 + 22) = (LODWORD(v148) & 0x7FFFFFFFu) < 0x7F800000;
          *(_QWORD *)v160 = &off_1E69E61C8;
          *(_QWORD *)(v160 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v159, (caulk::concurrent::message *)v160);
          ecRMGS::ec_state_reset(*((ecRMGS **)v170 + 76));
          if (*((_DWORD *)v170 + 137))
          {
            v161 = 0;
            v162 = (const void **)(v173 + 16);
            v163 = &v174->mBuffers[0].mData;
            v164 = (void **)(v172 + 16);
            do
            {
              v166 = *v164;
              v164 += 2;
              v165 = v166;
              v168 = (float *)*v163;
              v163 += 2;
              v167 = v168;
              v169 = *v162;
              v162 += 2;
              memcpy(v165, v169, 8 * *((unsigned int *)v170 + 136));
              vDSP_vclr(v167, 1, (2 * *((_DWORD *)v170 + 136)));
              ++v161;
            }
            while (v161 < *((unsigned int *)v170 + 137));
          }
          vDSP_vclr((float *)v171->mBuffers[0].mData, 1, (2 * *((_DWORD *)v170 + 136)));
        }
      }
      return 0;
    }
  }
  else
  {
    v24 = (caulk::concurrent::messenger *)*((_QWORD *)this + 75);
    v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 32, 8, a4, a5, a6, a7);
    *(_DWORD *)(v25 + 16) = 0;
    *(_DWORD *)(v25 + 24) = a3;
    *(_DWORD *)(v25 + 28) = v8;
    *(_QWORD *)v25 = &off_1E69E61A0;
    *(_QWORD *)(v25 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v24, (caulk::concurrent::message *)v25);
    return 4294956422;
  }
  return result;
}

uint64_t AUECRMGS::Render(AUECRMGS *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUECRMGS *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUECRMGS *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUECRMGS::BusCountWritable(AUECRMGS *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECRMGS::GetParameterList(AUECRMGS *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    a3[8] = 8;
  }
  result = 0;
  *a4 = 9;
  return result;
}

uint64_t AUECRMGS::GetParameterInfo(AUECRMGS *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 8)
  {
    v6 = off_1E69E61E0[a3];
    v7 = dword_1B6686904[a3];
    v8 = flt_1B6686928[a3];
    v9 = flt_1B668694C[a3];
    v10 = flt_1B6686970[a3];
    v11 = dword_1B6686994[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECRMGS::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUECRMGS::GetLatency(AUECRMGS *this)
{
  return 0.0;
}

double AUECRMGS::GetTailTime(AUECRMGS *this)
{
  return 0.0;
}

uint64_t AUECRMGS::SupportsTail(AUECRMGS *this)
{
  return 1;
}

BOOL AUECRMGS::StreamFormatWritable(AUECRMGS *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUECRMGS::SupportedNumChannels(AUECRMGS *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUECRMGS::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 12;
}

uint64_t AUECRMGS::ValidFormat(AUECRMGS *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 64 || a4->mFormatID != 1718773105 || a4->mChannelsPerFrame >= 0xD)
    return 0;
  else
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
}

void caulk::concurrent::details::rt_message_call<AUECRMGS::ResetMaster(AudioBufferList const*,AudioBufferList const*,AudioBufferList*,AudioBufferList*,AudioBufferList*)::$_0,BOOL &,BOOL &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUECRMGS::ResetMaster(AudioBufferList const*,AudioBufferList const*,AudioBufferList*,AudioBufferList*,AudioBufferList*)::$_0,BOOL &,BOOL &>::perform(unsigned __int8 *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a1[21];
  v3 = a1[22];
  v4 = AUECRMGSLogScope();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109376;
    v6[1] = v2;
    v7 = 1024;
    v8 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "AUECRMGS: ********* Reset begins *********\nAUECRMGS: ref-signal buffers have finite values (1 if True): %u\nAUECRMGS: EC output buffers have valid values (1 if True): %u\n", (uint8_t *)v6, 0xEu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], a1, 24, 8);
}

void sub_1B64F9E8C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AUECRMGSLogScope(void)
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;

  v1 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
  if ((v0 & 1) == 0)
  {
    v1 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (v3)
    {
      AUECRMGSLogScope(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", " AUECRMGS");
      v1 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    }
  }
  return v1[46];
}

void caulk::concurrent::details::rt_message_call<AUECRMGS::ProcessMultipleBufferLists(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**)::$_0,unsigned int &,unsigned int>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUECRMGS::ProcessMultipleBufferLists(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**)::$_0,unsigned int &,unsigned int>::perform(caulk::concurrent::message *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a1 + 6);
  v2 = *((_DWORD *)a1 + 7);
  v4 = AUECRMGSLogScope();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v2;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "AUECRMGS::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", (uint8_t *)v6, 0xEu);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688]
                                                                                           + 24))(*MEMORY[0x1E0DDB688], a1, 32, 8);
}

void sub_1B64FA008(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AUECRMGS::Reset(unsigned int,unsigned int)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUECRMGS::Reset(unsigned int,unsigned int)::$_0>::perform(caulk::concurrent::message *a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = AUECRMGSLogScope();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "AUECRMGS: Reset.\n", v4, 2u);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688]
                                                                                           + 24))(*MEMORY[0x1E0DDB688], a1, 24, 8);
}

uint64_t *std::unique_ptr<ecRMGS>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v12 = (void **)(v2 + 624);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 600);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 576);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 552);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 528);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 504);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 480);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 456);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 432);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 408);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 384);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 360);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v3 = *(void **)(v2 + 336);
    if (v3)
    {
      *(_QWORD *)(v2 + 344) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 312);
    if (v4)
    {
      *(_QWORD *)(v2 + 320) = v4;
      operator delete(v4);
    }
    v12 = (void **)(v2 + 288);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v5 = *(void **)(v2 + 264);
    if (v5)
    {
      *(_QWORD *)(v2 + 272) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 240);
    if (v6)
    {
      *(_QWORD *)(v2 + 248) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 216);
    if (v7)
    {
      *(_QWORD *)(v2 + 224) = v7;
      operator delete(v7);
    }
    v12 = (void **)(v2 + 192);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v8 = *(void **)(v2 + 168);
    if (v8)
    {
      *(_QWORD *)(v2 + 176) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v2 + 144);
    if (v9)
    {
      *(_QWORD *)(v2 + 152) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v2 + 120);
    if (v10)
      operator delete(v10);
    v11 = *(void **)(v2 + 96);
    if (v11)
      operator delete(v11);
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void audiodsp::espresso::v1::espresso_error_category::~espresso_error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x1BCC95CECLL);
}

const char *audiodsp::espresso::v1::espresso_error_category::name(audiodsp::espresso::v1::espresso_error_category *this)
{
  return "espresso";
}

_QWORD *audiodsp::espresso::v1::espresso_error_category::message@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if (a1 != 0 && a1 < 0xFFFFFFF5)
    v3 = "Unknown error";
  else
    v3 = off_1E69E6270[a1 + 11];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void AUOneChannelNoiseEstimator::~AUOneChannelNoiseEstimator(AUOneChannelNoiseEstimator *this)
{
  AUOneChannelNoiseEstimator::~AUOneChannelNoiseEstimator(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)this = &off_1E69E62E0;
  v2 = (void *)*((_QWORD *)this + 74);
  if (v2)
  {
    *((_QWORD *)this + 75) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 71);
  if (v3)
  {
    *((_QWORD *)this + 72) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v4)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v5)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v5);
  v6 = (_QWORD *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v6)
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v6);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUOneChannelNoiseEstimator::Initialize(AUOneChannelNoiseEstimator *this)
{
  uint64_t Element;
  double v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  float v10;
  float v11;
  int v12;
  char v13;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  Element = ausdk::AUScope::SafeGetElement((AUOneChannelNoiseEstimator *)((char *)this + 80), 0);
  if (*(_DWORD *)(Element + 88) != 1718773105 || *(_DWORD *)(Element + 108) != 1 || *(_DWORD *)(Element + 104) != 8)
    return 4294956428;
  v5 = *(double *)(Element + 80);
  v6 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 134) = v6;
  v7 = (_DWORD *)ausdk::AUScope::SafeGetElement((AUOneChannelNoiseEstimator *)((char *)this + 128), 0);
  if (v7[27] != 1)
    return 4294956428;
  v8 = v7[26];
  if (v8 != 8 && v8 != 4)
    return 4294956428;
  v10 = v5;
  v11 = (float)v6;
  v12 = v7[22];
  if (v12 == 1718773105)
  {
    v13 = 1;
    goto LABEL_20;
  }
  if (v12 == 1819304813)
  {
    v13 = 0;
LABEL_20:
    *((_BYTE *)this + 532) = v13;
  }
  v15 = v11 + 1.0;
  v16 = v10 / v11;
  v17 = operator new();
  SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::SmoothedNoiseEstimator(v17, (unint64_t)v15, v10, v16);
  v18 = (_QWORD *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = v17;
  if (v18)
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v18);
  v19 = operator new();
  *(_DWORD *)v19 = 0;
  AWeight<float>::Generate((_QWORD *)(v19 + 8), (unint64_t)v15, v10);
  v20 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = v19;
  if (v20)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v20);
  v21 = operator new();
  *(_DWORD *)v21 = 0;
  CWeight<float>::Generate((_QWORD *)(v21 + 8), (unint64_t)v15, v10);
  v22 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = v21;
  if (v22)
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v22);
  v24 = 0;
  std::vector<float>::assign((char **)this + 71, (unint64_t)v15, &v24);
  v23 = 0;
  std::vector<float>::assign((char **)this + 74, (unint64_t)v15, &v23);
  AUOneChannelNoiseEstimator::RefreshKernelParamValue((uint64_t)this, 0);
  AUOneChannelNoiseEstimator::RefreshKernelParamValue((uint64_t)this, 1u);
  return 0;
}

void sub_1B64FA538(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x1080C406BDE4C18);
  _Unwind_Resume(a1);
}

uint64_t AUOneChannelNoiseEstimator::GetPropertyInfo(AUOneChannelNoiseEstimator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  if (a2 == 5200)
  {
    *a6 = 0;
    v7 = 4 * *((_DWORD *)this + 84) + 4;
  }
  else
  {
    if (a2 == 3700)
    {
      *a6 = 0;
    }
    else
    {
      if (a2 != 21)
        return 4294956417;
      *a6 = 1;
    }
    v7 = 4;
  }
  result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUOneChannelNoiseEstimator::GetProperty(AUOneChannelNoiseEstimator *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  uint64_t result;
  int v7;
  _BYTE *v8;
  _BYTE *v9;

  if (a3)
    return 4294956417;
  if (a2 == 5200)
  {
    if (*((_BYTE *)this + 17))
    {
      v8 = (_BYTE *)*((_QWORD *)this + 71);
      v9 = (_BYTE *)*((_QWORD *)this + 72);
      if (v9 != v8)
        memmove(__dst, v8, v9 - v8);
      return 0;
    }
    else
    {
      return 4294956429;
    }
  }
  else
  {
    if (a2 == 3700)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 376);
    }
    else
    {
      if (a2 != 21)
        return 4294956417;
      result = 0;
      v7 = *((_DWORD *)this + 132);
    }
    *__dst = v7;
  }
  return result;
}

uint64_t AUOneChannelNoiseEstimator::SetProperty(AUOneChannelNoiseEstimator *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_DWORD *)this + 132) = *a5;
  }
  return result;
}

uint64_t AUOneChannelNoiseEstimator::SetParameter(AUOneChannelNoiseEstimator *this, unsigned int a2, int a3, float a4)
{
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  AUOneChannelNoiseEstimator::RefreshKernelParamValue((uint64_t)this, a2);
  return 0;
}

uint64_t AUOneChannelNoiseEstimator::CanScheduleParameters(AUOneChannelNoiseEstimator *this)
{
  return 0;
}

uint64_t AUOneChannelNoiseEstimator::ProcessMultipleBufferLists(AUOneChannelNoiseEstimator *this, unsigned int *a2, vDSP_Length __N, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  unsigned int v11;
  unint64_t v12;
  const float **v13;
  float v14;
  float v15;
  DSPSplitComplex v16;

  if (*((_DWORD *)this + 84) != (_DWORD)__N)
    return 4294956422;
  result = 4294956428;
  if (a4 == 1 && a6 == 1)
  {
    v11 = __N;
    if (*((_BYTE *)this + 532) && 2 * (_DWORD)__N)
      memmove((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, 4 * (2 * __N));
    if (*((_DWORD *)this + 132))
    {
      v12 = (uint64_t)(*((_QWORD *)this + 72) - *((_QWORD *)this + 71)) >> 2;
      LODWORD(v16.realp) = 0;
      std::vector<float>::assign((char **)this + 71, v12, &v16);
      (*(void (**)(AUOneChannelNoiseEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 2, 0, 0, 0, 0.0);
      (*(void (**)(AUOneChannelNoiseEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 3, 0, 0, 0, 0.0);
      result = 0;
      if (*((_BYTE *)this + 532))
        return result;
      vDSP_vclr((float *)(*a7)->mBuffers[0].mData, 1, *((unsigned int *)this + 134));
    }
    else
    {
      v16.realp = (float *)(*a5)->mBuffers[0].mData;
      v16.imagp = &v16.realp[v11];
      vDSP_zvmags(&v16, 1, *((float **)this + 74), 1, v11);
      **((float **)this + 74) = *v16.realp * *v16.realp;
      *(float *)(*((_QWORD *)this + 75) - 4) = *v16.imagp * *v16.imagp;
      v13 = (const float **)SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(*((_QWORD *)this + 68));
      vDSP_vsmul(*v13, 1, (const float *)this + 154, *((float **)this + 71), 1, (uint64_t)(*((_QWORD *)this + 72) - *((_QWORD *)this + 71)) >> 2);
      v14 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((_QWORD *)this + 69), *((const float **)this + 71), *((_QWORD *)this + 72));
      (*(void (**)(AUOneChannelNoiseEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 2, 0, 0, 0, v14);
      v15 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((_QWORD *)this + 70), *((const float **)this + 71), *((_QWORD *)this + 72));
      (*(void (**)(AUOneChannelNoiseEstimator *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 3, 0, 0, 0, v15);
      if (!*((_BYTE *)this + 532))
        memcpy((*a7)->mBuffers[0].mData, *((const void **)this + 71), 4 * *((unsigned int *)this + 134));
    }
    return 0;
  }
  return result;
}

uint64_t AUOneChannelNoiseEstimator::Render(AUOneChannelNoiseEstimator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t BufferList;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v8 = (AUOneChannelNoiseEstimator *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUOneChannelNoiseEstimator *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUOneChannelNoiseEstimator *)((char *)this + 128), 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUOneChannelNoiseEstimator *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUOneChannelNoiseEstimator::GetParameterList(AUOneChannelNoiseEstimator *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 0;
    result = 4294956418;
  }
  else
  {
    result = 0;
    if (a3)
      *(_OWORD *)a3 = xmmword_1B6626920;
    v4 = 4;
  }
  *a4 = v4;
  return result;
}

uint64_t AUOneChannelNoiseEstimator::GetParameterInfo(AUOneChannelNoiseEstimator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  if (a2)
    return 4294956430;
  buffer->unitName = 0;
  buffer->flags = 0x40000000;
  if (a3 > 3)
    return 4294956418;
  v6 = off_1E69E65B8[a3];
  v7 = dword_1B66A2B40[a3];
  v8 = flt_1B66A2B50[a3];
  v9 = flt_1B66A2B60[a3];
  v10 = flt_1B66A2B70[a3];
  v11 = dword_1B66A2B80[a3];
  buffer->cfNameString = v6;
  buffer->flags = 1207959552;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v7;
  buffer->minValue = v8;
  buffer->maxValue = v9;
  buffer->defaultValue = v10;
  buffer->flags |= v11;
  return result;
}

uint64_t AUOneChannelNoiseEstimator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
  {
    AUOneChannelNoiseEstimator::RefreshKernelParamValue((uint64_t)this, 0);
    AUOneChannelNoiseEstimator::RefreshKernelParamValue((uint64_t)this, 1u);
  }
  return v3;
}

double AUOneChannelNoiseEstimator::GetLatency(AUOneChannelNoiseEstimator *this)
{
  return 0.0;
}

double AUOneChannelNoiseEstimator::GetTailTime(AUOneChannelNoiseEstimator *this)
{
  return 0.0;
}

uint64_t AUOneChannelNoiseEstimator::SupportsTail(AUOneChannelNoiseEstimator *this)
{
  return 1;
}

BOOL AUOneChannelNoiseEstimator::StreamFormatWritable(AUOneChannelNoiseEstimator *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUOneChannelNoiseEstimator::SupportedNumChannels(AUOneChannelNoiseEstimator *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUOneChannelNoiseEstimator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUOneChannelNoiseEstimator::ValidFormat(AUOneChannelNoiseEstimator *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  _BOOL8 result;
  AudioFormatID mFormatID;
  UInt32 mChannelsPerFrame;
  UInt32 mBytesPerFrame;

  v5 = (int)a2;
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
    result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  if (v5 == 2)
  {
    mFormatID = a4->mFormatID;
    mBytesPerFrame = a4->mBytesPerFrame;
    mChannelsPerFrame = a4->mChannelsPerFrame;
    if (mBytesPerFrame == 8 && mFormatID == 1718773105 && mChannelsPerFrame == 1)
      return 1;
    return mBytesPerFrame == 4 && mFormatID == 1819304813 && mChannelsPerFrame == 1;
  }
  if (v5 == 1)
  {
    result = 0;
    if (a4->mBytesPerFrame == 8 && a4->mFormatID == 1718773105)
      return a4->mChannelsPerFrame == 1;
  }
  return result;
}

uint64_t AUOneChannelNoiseEstimator::Version(AUOneChannelNoiseEstimator *this)
{
  return 67072;
}

void AUOneChannelNoiseEstimator::RefreshKernelParamValue(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  ausdk::AUElement *v5;
  ausdk::AUElement **v6;
  float Parameter;
  float *v8;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0);
  }
  else
  {
    v6 = *(ausdk::AUElement ***)(a1 + 48);
    if (*(ausdk::AUElement ***)(a1 + 56) == v6)
      v5 = 0;
    else
      v5 = *v6;
  }
  Parameter = ausdk::AUElement::GetParameter(v5, a2);
  if (a2 == 1)
  {
    v8 = *(float **)(a1 + 544);
    if (v8)
      v8[70] = expf(-1.0 / (float)(Parameter * *v8));
  }
  else if (!a2)
  {
    *(float *)(a1 + 616) = __exp10f(Parameter / 10.0);
  }
}

void AudioStatisticsHelperSendMessage(uint64_t *a1, unsigned int a2, const UInt8 **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  if (a2)
  {
    v7 = a2;
    do
    {
      if (*a1)
      {
        applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&cf, a3);
        v8 = *a1;
        v9 = cf;
        if (AudioStatisticsLibraryLoader(void)::once != -1)
          dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_20170);
        if (AudioStatisticsLibraryLoader(void)::libSym)
          AudioStatisticsLibraryLoader(void)::libSym(v8, v9, 8, a4);
        if (v9)
          CFRelease(v9);
      }
      ++a1;
      --v7;
    }
    while (v7);
  }
  else
  {
    applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&cf, a3);
    v10 = cf;
    if (AudioStatisticsLibraryLoader(void)::once != -1)
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_20170);
    if (AudioStatisticsLibraryLoader(void)::libSym)
      AudioStatisticsLibraryLoader(void)::libSym(v10, 8, a4);
    if (v10)
      CFRelease(v10);
  }
}

void sub_1B64FB064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void AUTTYEchoSuppressor::~AUTTYEchoSuppressor(AUTTYEchoSuppressor *this)
{
  *(_QWORD *)this = &off_1E69E6628;
  ausdk::AUBase::~AUBase(this);
}

{
  *(_QWORD *)this = &off_1E69E6628;
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUTTYEchoSuppressor::Initialize(AUTTYEchoSuppressor *this)
{
  ausdk::AUScope *v2;
  uint64_t Element;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  const AudioStreamBasicDescription *v7;
  AudioStreamBasicDescription v9;
  _OWORD v10[2];
  uint64_t v11;

  v2 = (AUTTYEchoSuppressor *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUTTYEchoSuppressor *)((char *)this + 80), 0);
  v4 = *(_OWORD *)(Element + 96);
  v10[0] = *(_OWORD *)(Element + 80);
  v10[1] = v4;
  v11 = *(_QWORD *)(Element + 112);
  if (*(double *)v10 != *(double *)(ausdk::AUScope::SafeGetElement(v2, 1u) + 80))
    return 4294956428;
  v5 = ausdk::AUScope::SafeGetElement((AUTTYEchoSuppressor *)((char *)this + 128), 0);
  v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v9.mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v9.mBytesPerPacket = v6;
  *(_QWORD *)&v9.mBitsPerChannel = *(_QWORD *)(v5 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v10, &v9, v7))
    return 4294956428;
  (*(void (**)(AUTTYEchoSuppressor *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  return 0;
}

uint64_t AUTTYEchoSuppressor::Reset(AUTTYEchoSuppressor *this)
{
  AUTTYEchoSuppressor::UpdateState(this);
  return 0;
}

uint64_t AUTTYEchoSuppressor::GetPropertyInfo(AUTTYEchoSuppressor *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

uint64_t AUTTYEchoSuppressor::GetProperty(AUTTYEchoSuppressor *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *a5 = *((_DWORD *)this + 135);
  }
  return result;
}

uint64_t AUTTYEchoSuppressor::SetProperty(AUTTYEchoSuppressor *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_DWORD *)this + 135) = *a5;
  }
  return result;
}

uint64_t AUTTYEchoSuppressor::SetParameter(AUTTYEchoSuppressor *this, unsigned int a2, int a3, float a4)
{
  uint64_t result;
  uint64_t v8;
  ausdk::AUElement *v9;
  ausdk::AUElement **v10;

  if (a3)
    return 4294956418;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0);
  }
  else
  {
    v10 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v10)
      v9 = 0;
    else
      v9 = *v10;
  }
  ausdk::AUElement::SetParameter(v9, a2, a4, 0);
  result = 0;
  ++*((_DWORD *)this + 133);
  return result;
}

uint64_t AUTTYEchoSuppressor::CanScheduleParameters(AUTTYEchoSuppressor *this)
{
  return 0;
}

uint64_t AUTTYEchoSuppressor::ProcessMultipleBufferLists(AUTTYEchoSuppressor *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v9;
  float *mData;
  float *v11;
  float *v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  if (*((_DWORD *)this + 135) || *((_BYTE *)this + 528))
  {
    memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
  }
  else
  {
    LODWORD(v9) = a3;
    mData = (float *)(*a5)->mBuffers[0].mData;
    v11 = (float *)a5[1]->mBuffers[0].mData;
    v12 = (float *)(*a7)->mBuffers[0].mData;
    v13 = *((_DWORD *)this + 133);
    if (*((_DWORD *)this + 134) != v13)
    {
      AUTTYEchoSuppressor::UpdateState(this);
      *((_DWORD *)this + 134) = v13;
    }
    if ((_DWORD)v9)
    {
      v9 = v9;
      do
      {
        TTYSignalTracker::Gain((uint64_t)this + 544, *mData);
        v15 = v14;
        TTYSignalTracker::Gain((uint64_t)this + 596, *v11);
        v17 = 1.0 - v16;
        if (*((_DWORD *)this + 161) && *((_DWORD *)this + 148))
          v17 = v15;
        v18 = *mData++;
        *v12++ = v17 * v18;
        ++v11;
        --v9;
      }
      while (v9);
    }
  }
  return 0;
}

uint64_t AUTTYEchoSuppressor::Render(AUTTYEchoSuppressor *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  ausdk::AUInputElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v8 = (AUTTYEchoSuppressor *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUTTYEchoSuppressor *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUTTYEchoSuppressor *)((char *)this + 128), 0);
  *((_BYTE *)this + 528) = 0;
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if ((_DWORD)result)
    return result;
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  if (ausdk::AUBase::HasInput(this, 1u))
  {
    v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
    result = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4);
    if ((_DWORD)result)
      return result;
    v15 = ausdk::AUScope::SafeGetElement(v8, 1u);
    v16 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
  }
  else
  {
    v16 = 0;
    *((_BYTE *)this + 528) = 1;
  }
  v18[0] = BufferList;
  v18[1] = v16;
  v17 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
  return (*(uint64_t (**)(AUTTYEchoSuppressor *, unsigned int *, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 2, v18, 1, &v17);
}

uint64_t AUTTYEchoSuppressor::GetParameterList(AUTTYEchoSuppressor *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t result;

  if (a2)
  {
    v4 = 0;
    result = 4294956418;
  }
  else
  {
    result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1B6626920;
      *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
      a3[8] = 8;
    }
    v4 = 9;
  }
  *a4 = v4;
  return result;
}

uint64_t AUTTYEchoSuppressor::GetParameterInfo(AUTTYEchoSuppressor *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;

  if (a2)
    return 4294956418;
  buffer->flags = 0;
  buffer->unitName = 0;
  if (a3 > 8)
    return 4294956418;
  v6 = off_1E69E6868[a3];
  v7 = dword_1B66869C0[a3];
  v8 = flt_1B66869E4[a3];
  v9 = flt_1B6686A08[a3];
  v10 = flt_1B6686A2C[a3];
  buffer->cfNameString = v6;
  buffer->flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v7;
  buffer->minValue = v8;
  buffer->maxValue = v9;
  buffer->defaultValue = v10;
  buffer->flags |= 0xC0000000;
  return result;
}

uint64_t AUTTYEchoSuppressor::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUTTYEchoSuppressor::GetLatency(AUTTYEchoSuppressor *this)
{
  return 0.0;
}

double AUTTYEchoSuppressor::GetTailTime(AUTTYEchoSuppressor *this)
{
  return 0.0;
}

uint64_t AUTTYEchoSuppressor::SupportsTail(AUTTYEchoSuppressor *this)
{
  return 1;
}

BOOL AUTTYEchoSuppressor::StreamFormatWritable(AUTTYEchoSuppressor *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUTTYEchoSuppressor::SupportedNumChannels(AUTTYEchoSuppressor *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUTTYEchoSuppressor::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

BOOL AUTTYEchoSuppressor::ValidFormat(AUTTYEchoSuppressor *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL4 v5;

  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2))
    v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  else
    v5 = 0;
  return a4->mChannelsPerFrame == 1 && v5;
}

float AUTTYEchoSuppressor::UpdateState(AUTTYEchoSuppressor *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  float Parameter;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  float v9;
  uint64_t v10;
  ausdk::AUElement *v11;
  ausdk::AUElement **v12;
  float v13;
  uint64_t v14;
  ausdk::AUElement *v15;
  ausdk::AUElement **v16;
  uint64_t v17;
  ausdk::AUElement *v18;
  ausdk::AUElement **v19;
  uint64_t v20;
  ausdk::AUElement *v21;
  ausdk::AUElement **v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  ausdk::AUElement **v25;
  uint64_t v26;
  ausdk::AUElement *v27;
  ausdk::AUElement **v28;
  uint64_t v29;
  ausdk::AUElement *v30;
  ausdk::AUElement **v31;
  float v32;
  float v33;
  int32x2_t v34;
  int32x4_t v40;
  int32x2_t v41;
  float32x2_t v42;
  float result;
  float v46;
  float v47;
  float v48;
  float v49;
  double v50;
  float v51;
  float32x2_t v52;

  v50 = *(double *)(ausdk::AUScope::SafeGetElement((AUTTYEchoSuppressor *)((char *)this + 128), 0) + 80);
  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  Parameter = ausdk::AUElement::GetParameter(v3, 0);
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  v9 = ausdk::AUElement::GetParameter(v7, 1u);
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    v11 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0);
  }
  else
  {
    v12 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v12)
      v11 = 0;
    else
      v11 = *v12;
  }
  v13 = ausdk::AUElement::GetParameter(v11, 2u);
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0);
  }
  else
  {
    v16 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v16)
      v15 = 0;
    else
      v15 = *v16;
  }
  v49 = ausdk::AUElement::GetParameter(v15, 3u);
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0);
  }
  else
  {
    v19 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v19)
      v18 = 0;
    else
      v18 = *v19;
  }
  v48 = ausdk::AUElement::GetParameter(v18, 4u);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    v21 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0);
  }
  else
  {
    v22 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v22)
      v21 = 0;
    else
      v21 = *v22;
  }
  v47 = ausdk::AUElement::GetParameter(v21, 5u);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v25 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v25)
      v24 = 0;
    else
      v24 = *v25;
  }
  v46 = ausdk::AUElement::GetParameter(v24, 6u);
  v26 = *((_QWORD *)this + 9);
  if (v26)
  {
    v27 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 0);
  }
  else
  {
    v28 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v28)
      v27 = 0;
    else
      v27 = *v28;
  }
  v51 = ausdk::AUElement::GetParameter(v27, 7u);
  v29 = *((_QWORD *)this + 9);
  if (v29)
  {
    v30 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0);
  }
  else
  {
    v31 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v31)
      v30 = 0;
    else
      v30 = *v31;
  }
  v52 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(ausdk::AUElement::GetParameter(v30, 8u)), LODWORD(v51));
  *((double *)this + 86) = v50;
  v32 = __exp10(Parameter * 0.05);
  *((float *)this + 162) = v32;
  v33 = __exp10(v9 * 0.05);
  *((float *)this + 163) = v33;
  *(float *)v34.i32 = __exp10(v13 * 0.05);
  *((_DWORD *)this + 164) = v34.i32[0];
  __asm { FMOV            V3.2D, #1.0 }
  v40 = (int32x4_t)vcvtq_f32_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_n_f64(_Q3, vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v48), LODWORD(v49))), v50)), (int32x4_t)vcvtq_s64_f64(vmlaq_n_f64(_Q3, vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v46), LODWORD(v47))), v50))));
  *(int32x4_t *)((char *)this + 660) = v40;
  v41 = (int32x2_t)vcvt_f32_s32(vmovn_s64(vcvtq_s64_f64(vmlaq_n_f64(_Q3, vcvtq_f64_f32(v52), v50))));
  *(int32x2_t *)((char *)this + 676) = v41;
  LODWORD(_Q3.f64[0]) = *((_DWORD *)this + 162);
  *((_DWORD *)this + 136) = LODWORD(_Q3.f64[0]);
  *((_DWORD *)this + 137) = LODWORD(_Q3.f64[0]);
  *((_DWORD *)this + 145) = *(float *)&v40.i32[1];
  *((_DWORD *)this + 138) = v34.i32[0];
  *((_DWORD *)this + 139) = 1065353216;
  *(uint32x2_t *)&_Q3.f64[0] = vcvt_u32_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v40.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL)));
  *((_DWORD *)this + 144) = LODWORD(_Q3.f64[0]);
  *((_DWORD *)this + 146) = HIDWORD(_Q3.f64[0]);
  v42 = (float32x2_t)vdup_lane_s32(v34, 0);
  __asm { FMOV            V4.2S, #1.0 }
  _D4.f32[0] = vsub_f32(_D4, v42).f32[0];
  __asm { FMOV            V5.2S, #-1.0 }
  *(uint32x2_t *)v40.i8 = vcvt_u32_f32((float32x2_t)vzip1_s32(vdup_laneq_s32(v40, 3), v41));
  *(_QWORD *)((char *)this + 628) = v40.i64[0];
  *((_DWORD *)this + 152) = _D4.i32[0];
  _D4.i32[1] = vadd_f32(v42, _D5).i32[1];
  *((float32x2_t *)this + 71) = vdiv_f32(_D4, vadd_f32(vcvt_f32_u32(*(uint32x2_t *)&_Q3.f64[0]), (float32x2_t)vdup_n_s32(0x3727C5ACu)));
  v42.i32[0] = *((_DWORD *)this + 163);
  *((_DWORD *)this + 149) = v42.i32[0];
  *((_DWORD *)this + 150) = v42.i32[0];
  *((_DWORD *)this + 159) = *(float *)&v41.i32[1];
  *((_DWORD *)this + 151) = 0;
  *((float *)this + 155) = _D4.f32[0] / (float)((float)v40.u32[0] + 0.00001);
  result = (float)(0.0 - _D4.f32[0]) / (float)((float)*(float *)&v41.i32[1] + 0.00001);
  *((float *)this + 156) = result;
  return result;
}

void ecutils::fcn_otplace_fftReal_inverse(const vDSP_DFT_SetupStruct ***this, const DSPSplitComplex *a2, DSPComplex *a3, vDSP_Length __N, float a5)
{
  unsigned int v5;
  float __B;

  v5 = __N;
  __B = a5;
  if (this)
    MultiRadixRealFFT::RealOutOfPlaceInverseTransform(this, a2, a3);
  vDSP_vclr((float *)a3, 1, v5);
  vDSP_vsmul((const float *)a3 + v5, 1, &__B, (float *)a3 + v5, 1, v5);
}

void ecutils::fcn_smooth_psd(ecutils *this, const float *a2, float a3, float a4, float *a5, float a6, unsigned int a7)
{
  int v7;
  vDSP_Length v11;
  float v12;
  float v13;
  float __B;

  v7 = (int)a5;
  v13 = a4;
  __B = a3;
  v12 = a6;
  v11 = a7;
  vDSP_vsmul((const float *)this, 1, &__B, (float *)this, 1, a7);
  vDSP_vsma(a2, 1, &v13, (const float *)this, 1, (float *)this, 1, v11);
  if (v7)
    vDSP_vabs((const float *)this, 1, (float *)this, 1, v11);
  if (a6 > 0.0)
    vDSP_vsadd((const float *)this, 1, &v12, (float *)this, 1, v11);
}

float ecutils::fcn_complex_mult_by_psd(ecutils *this, const float *__B, float *__C, vDSP_Length __N)
{
  unsigned int v4;
  float result;

  v4 = __N;
  vDSP_vmul((const float *)this, 1, __B, 1, __C, 1, __N);
  vDSP_vmul((const float *)this + v4 + 1, 1, __B + 1, 1, &__C[v4 + 1], 1, v4 - 1);
  result = *((float *)this + v4) * __B[v4];
  __C[v4] = result;
  return result;
}

float ecutils::fcn_complex_mult_add(int64x2_t *this, int64x2_t *a2, int64x2_t *a3, int64x2_t *a4, DSPSplitComplex *a5)
{
  int64x2_t v9;
  DSPSplitComplex v10;
  float result;
  DSPSplitComplex __D;
  DSPSplitComplex __C;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  v9 = vdupq_n_s64(4uLL);
  __A = (DSPSplitComplex)vaddq_s64(*this, v9);
  v10 = (DSPSplitComplex)vaddq_s64(*a2, v9);
  __C = (DSPSplitComplex)vaddq_s64(*a3, v9);
  __B = v10;
  __D = (DSPSplitComplex)vaddq_s64(*a4, v9);
  vDSP_zvma(&__A, 1, &__B, 1, &__C, 1, &__D, 1, ((_DWORD)a5 - 1));
  *(float *)a4->i64[0] = *(float *)a3->i64[0] + (float)(*(float *)this->i64[0] * *(float *)a2->i64[0]);
  result = *(float *)a3->i64[1] + (float)(*(float *)this->i64[1] * *(float *)a2->i64[1]);
  *(float *)a4->i64[1] = result;
  return result;
}

float ecutils::fcn_complex_mult_add_mult_add(int64x2_t *this, int64x2_t *a2, int64x2_t *a3, int64x2_t *a4, int64x2_t *a5, DSPSplitComplex *a6)
{
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float result;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;

  v11 = vdupq_n_s64(4uLL);
  v23 = vaddq_s64(*this, v11);
  v12 = vaddq_s64(*a2, v11);
  v21 = vaddq_s64(*a3, v11);
  v22 = v12;
  v13 = vaddq_s64(*a4, v11);
  v19 = vaddq_s64(*a5, v11);
  v20 = v13;
  aDSP_zvmama((float32x4_t *)&v23, 1, (float32x4_t **)&v22, 1, (float32x4_t **)&v21, 1, (float32x4_t **)&v20, 1, (float32x4_t **)&v19, 1, ((_DWORD)a6 - 1));
  v14 = (float *)a2->i64[0];
  v15 = (float *)a3->i64[0];
  *v15 = *(float *)a3->i64[0] + (float)(*(float *)this->i64[0] * *(float *)a2->i64[0]);
  v16 = (float *)a2->i64[1];
  v17 = (float *)a3->i64[1];
  *v17 = *v17 + (float)(*(float *)this->i64[1] * *v16);
  *(float *)a5->i64[0] = *v14 + (float)(*v15 * *(float *)a4->i64[0]);
  result = *v16 + (float)(*v17 * *(float *)a4->i64[1]);
  *(float *)a5->i64[1] = result;
  return result;
}

_DWORD *AUsubMAEC::dftBuffer::GetIndexSequence(_DWORD *this, int a2)
{
  signed int **v2;
  int v3;
  signed int v4;
  signed int *v5;
  int v6;
  unsigned int v7;
  signed int v8;
  uint64_t i;

  if (a2)
  {
    v2 = (signed int **)(this + 8);
    v3 = this[14];
    v4 = v3;
  }
  else
  {
    v2 = (signed int **)(this + 10);
    v4 = this[14];
    v3 = this[15];
  }
  v5 = *v2;
  if (v4 <= 1)
    v7 = 1;
  else
    v7 = v4;
  v6 = this[12];
  v8 = v6
     + v4
     + v4
     * ((~(v6 - v3) + ((v6 - v3 + 1) >> 31) + ((v6 - v3 + 1) & ~((v6 - v3 + 1) >> 31))) / v7
      + ((v6 - v3 + 1) >> 31))
     - v3
     + 1;
  do
    v8 -= v4;
  while (v8 >= v4);
  *v5 = v8;
  if (v3 >= 2)
  {
    for (i = 1; i != v3; v5[i++] = v8)
    {
      v8 += 1
          + v4
          + v4
          * ((~v8 + ((v8 + 1) >> 31) + ((v8 + 1) & ~((v8 + 1) >> 31))) / v7
           + ((v8 + 1) >> 31));
      do
        v8 -= v4;
      while (v8 >= v4);
    }
  }
  return this;
}

uint64_t AUSM::SoundStage::setSoundStageParameters(uint64_t a1, int a2, _QWORD *a3, const std::string *a4, char a5, char a6, char a7, float a8, float a9)
{
  uint64_t v18;
  NSObject *v19;
  _DWORD *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  __int128 v34;
  _OWORD *v35;
  unsigned int v36;
  NSObject *v37;
  _QWORD *v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  int32x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unsigned int v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int64x2_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  int8x8_t v86;
  float32x2_t v87;
  float v88;
  float v89;
  unsigned int v90;
  BOOL v91;
  unsigned int v92;
  const float *v93;
  int8x8_t v94;
  uint64_t v95;
  float32x2_t v96;
  uint64_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _DWORD *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  float64x2_t *v121;
  float64x2_t *v122;
  void **v123;
  _OWORD *v124;
  void **v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  float64x2_t *v138;
  float64x2_t *v139;
  float64x2_t *v140;
  float64x2_t *v141;
  char *v142;
  int v143;
  _DWORD *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  int v154;
  float *v155;
  float v156;
  __float2 v157;
  __float2 v158;
  float v159;
  char *v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  float *v169;
  int v170;
  float v171;
  float *v172;
  float *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  float *v179;
  int v180;
  float v181;
  float *v182;
  float *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  float *v189;
  int v190;
  double v191;
  double *v192;
  double *v193;
  double *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  double *v200;
  uint64_t v201;
  double v202;
  double *v203;
  double *v204;
  double *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  double *v211;
  uint64_t v212;
  double v213;
  double *v214;
  double *v215;
  double *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  double *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _OWORD *v228;
  _OWORD *v229;
  void **v230;
  __int128 v231;
  _OWORD *v232;
  void **v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  _OWORD *v240;
  __int128 v241;
  char *v242;
  char *v243;
  _OWORD *v244;
  __int128 v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  unint64_t v249;
  float *v250;
  float v251;
  __float2 v252;
  __float2 v253;
  void **v254;
  float64x2_t *v255;
  _OWORD *f64;
  void **v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  float64x2_t *v264;
  float64x2_t *v265;
  float64x2_t *v266;
  float64_t *v267;
  unint64_t v268;
  uint64_t v269;
  float64_t *v270;
  float64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  uint64_t v284;
  BOOL v285;
  float64x2_t v286;
  float64x2_t v287;
  float v288;
  double v289;
  float64x2_t v290;
  uint64_t v291;
  float64x2_t v292;
  float64x2_t v293;
  __int128 v294;
  float64x2_t v295;
  float64x2_t v296;
  __int128 v297;
  float64x2_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  uint64_t v304;
  float64x2_t v305;
  uint64_t v306;
  uint64_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  NSObject *v316;
  _QWORD *v317;
  const char *v318;
  NSObject *v319;
  uint64_t i;
  uint64_t v321;
  NSObject *v322;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  std::vector<int> *v330;
  void **v331;
  char **v332;
  float64x2_t v333;
  unsigned int v334;
  unsigned int v335;
  void *__p;
  __int128 v337;
  uint64_t v338;
  char v339;
  void *v340;
  double *v341;
  double *v342;
  void *v343;
  double *v344;
  double *v345;
  void *v346;
  double *v347;
  double *v348;
  void *v349;
  char *v350;
  char *v351;
  void *v352;
  char *v353;
  char *v354;
  char *v355;
  int64x2_t v356;
  char *v357;
  float64x2_t v358;
  float64_t v359;
  float64x2_t v360;
  float64_t v361;
  _BYTE buf[32];
  void *v363[2];
  void *v364[2];
  float64x2_t v365;
  void *v366[2];
  __int128 v367;
  __int128 v368;
  unint64_t v369;
  float v370;
  float v371;
  void *v372;
  void *v373;
  uint64_t v374;
  char v375;
  __int16 v376;
  char v377;
  uint64_t v378;

  v378 = *MEMORY[0x1E0C80C00];
  v338 = a1;
  v339 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1);
  v18 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176) != v18 && a3[1] - *a3 != *(_QWORD *)(v18 + 40) - *(_QWORD *)(v18 + 32))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v19 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v326 = (_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        v326 = (_QWORD *)*v326;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v326;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "setSoundStageParameters";
      _os_log_debug_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "[%s|%s] Provided vector of parameters does not match size of SoundStage parameter vectors.", buf, 0x16u);
    }
  }
  AUSM::SoundStage::getDefaultParameters((AUSM::SoundStage *)&__p, a2);
  v20 = __p;
  v21 = v337;
  if ((void *)v337 == __p)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v22 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v324 = (_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        v324 = (_QWORD *)*v324;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v324;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "setSoundStageParameters";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a2;
      _os_log_debug_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "[%s|%s] No default for enum value %u. Building on top of Neutral instead", buf, 0x1Cu);
    }
    AUSM::SoundStage::getDefaultParameters((AUSM::SoundStage *)buf, 4);
    if (__p)
    {
      *(_QWORD *)&v337 = __p;
      operator delete(__p);
    }
    v20 = *(_DWORD **)buf;
    __p = *(void **)buf;
    v337 = *(_OWORD *)&buf[8];
    v21 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
      __assert_rtn("setSoundStageParameters", "AUSMSoundStage.cpp", 441, "params.size() > 0");
  }
  v23 = v21 - (_QWORD)v20;
  v91 = v23 == 0;
  v24 = v23 >> 5;
  if (v91)
  {
    v27 = 0;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = a3[1] - *a3;
      if (v28)
      {
        v29 = 0;
        v30 = v28 >> 5;
        v31 = 1;
        while (1)
        {
          v32 = *a3 + 32 * v29;
          if (*(_DWORD *)(v32 + 28) == v20[8 * v25 + 7])
            break;
          v29 = v31;
          v33 = v30 > v31++;
          if (!v33)
            goto LABEL_21;
        }
        v34 = *(_OWORD *)(v32 + 16);
        v35 = &v20[8 * v25];
        *v35 = *(_OWORD *)v32;
        v35[1] = v34;
        ++v27;
      }
LABEL_21:
      v25 = ++v26;
    }
    while (v24 > v26);
  }
  v36 = v27;
  if (v27 >= (unint64_t)((uint64_t)(a3[1] - *a3) >> 5))
  {
    if (v24 > v27)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v40 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v328 = (_QWORD *)(a1 + 200);
        if (*(char *)(a1 + 223) < 0)
          v328 = (_QWORD *)*v328;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v328;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "setSoundStageParameters";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = (((_QWORD)v337 - (_QWORD)__p) >> 5) - v36;
        _os_log_debug_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_DEBUG, "[%s|%s] %u channel parameters using default values", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v37 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      v38 = (_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        v38 = (_QWORD *)*v38;
      v39 = ((a3[1] - *a3) >> 5) - v36;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v38;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "setSoundStageParameters";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v39;
      _os_log_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_DEFAULT, "[%s|%s] %u incoming channel parameters dropped", buf, 0x1Cu);
    }
  }
  v41 = *(_QWORD *)(a1 + 168);
  v42 = *(_QWORD *)(a1 + 176) - v41;
  if (v42)
  {
    v43 = 0;
    v44 = 0;
    v45 = 0x2E8BA2E8BA2E8BA3 * (v42 >> 4);
    while (*(_DWORD *)(v41 + 176 * v43 + 24) != a2)
    {
      v43 = ++v44;
      if (v45 <= v44)
        goto LABEL_39;
    }
    v57 = (char *)(v41 + 176 * v44 + 32);
    if (v57 != (char *)&__p)
    {
      std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(v57, (char *)__p, v337, (uint64_t)(v337 - (_QWORD)__p) >> 5);
      v41 = *(_QWORD *)(a1 + 168);
    }
    v58 = v44;
    std::string::operator=((std::string *)(v41 + 176 * v44), a4);
    v59 = 1.0;
    if (a9 <= 1.0)
      v59 = a9;
    if (a9 < 0.0)
      v59 = 0.0;
    v60 = *(_QWORD *)(a1 + 168);
    v61 = v60 + 176 * v44;
    *(_BYTE *)(v61 + 168) = 1;
    *(_BYTE *)(v61 + 169) = a5;
    *(float *)(v61 + 136) = a8;
    *(float *)(v61 + 140) = v59;
    *(_BYTE *)(v61 + 170) = a6;
    *(_BYTE *)(v61 + 171) = a7;
    goto LABEL_86;
  }
LABEL_39:
  memset(buf, 0, 24);
  *(_OWORD *)v363 = 0u;
  *(_OWORD *)v364 = 0u;
  v365 = 0u;
  *(_OWORD *)v366 = 0u;
  v367 = 0u;
  v368 = xmmword_1B6627BD0;
  v369 = 0xFFFFFFFF00000001;
  v374 = 0;
  v372 = 0;
  v373 = 0;
  v376 = 0;
  v377 = 0;
  std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>((char *)v363, (char *)__p, v337, (uint64_t)(v337 - (_QWORD)__p) >> 5);
  std::string::operator=((std::string *)buf, a4);
  v46 = 1.0;
  if (a9 <= 1.0)
    v46 = a9;
  if (a9 < 0.0)
    v46 = 0.0;
  *(_DWORD *)&buf[24] = a2;
  v375 = 1;
  LOBYTE(v376) = a5;
  v370 = a8;
  v371 = v46;
  HIBYTE(v376) = a6;
  v377 = a7;
  v47 = *(_QWORD *)(a1 + 184);
  v48 = *(_QWORD *)(a1 + 176);
  if (v48 >= v47)
  {
    v51 = *(_QWORD *)(a1 + 168);
    v52 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v48 - v51) >> 4);
    if ((unint64_t)(v52 + 1) > 0x1745D1745D1745DLL)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v53 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v47 - v51) >> 4);
    v54 = 2 * v53;
    if (2 * v53 <= v52 + 1)
      v54 = v52 + 1;
    if (v53 >= 0xBA2E8BA2E8BA2ELL)
      v55 = 0x1745D1745D1745DLL;
    else
      v55 = v54;
    *(_QWORD *)&v358.f64[0] = a1 + 184;
    if (v55)
    {
      if (v55 > 0x1745D1745D1745DLL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v56 = (char *)operator new(176 * v55);
    }
    else
    {
      v56 = 0;
    }
    v355 = v56;
    v356.i64[0] = (uint64_t)&v56[176 * v52];
    v356.i64[1] = v356.i64[0];
    v357 = &v56[176 * v55];
    AUSM::SoundStage::SoundStageParameters::SoundStageParameters((std::string *)v356.i64[0], (const AUSM::SoundStage::SoundStageParameters *)buf);
    v62 = v356.i64[0];
    v50 = v356.i64[1] + 176;
    v356.i64[1] += 176;
    v64 = *(_QWORD *)(a1 + 168);
    v63 = *(_QWORD *)(a1 + 176);
    if (v63 == v64)
    {
      v73 = vdupq_n_s64(v63);
    }
    else
    {
      v65 = 0;
      do
      {
        v66 = v63 + v65;
        v67 = v62 + v65;
        v68 = *(_OWORD *)(v63 + v65 - 176);
        *(_QWORD *)(v67 - 160) = *(_QWORD *)(v63 + v65 - 160);
        *(_OWORD *)(v67 - 176) = v68;
        *(_QWORD *)(v66 - 168) = 0;
        *(_QWORD *)(v66 - 160) = 0;
        *(_QWORD *)(v66 - 176) = 0;
        v69 = *(_DWORD *)(v63 + v65 - 152);
        *(_QWORD *)(v67 - 136) = 0;
        *(_QWORD *)(v67 - 128) = 0;
        *(_QWORD *)(v67 - 144) = 0;
        *(_DWORD *)(v67 - 152) = v69;
        *(_OWORD *)(v67 - 144) = *(_OWORD *)(v63 + v65 - 144);
        *(_QWORD *)(v67 - 128) = *(_QWORD *)(v63 + v65 - 128);
        *(_QWORD *)(v66 - 144) = 0;
        *(_QWORD *)(v66 - 136) = 0;
        *(_QWORD *)(v66 - 128) = 0;
        *(_QWORD *)(v67 - 120) = 0;
        *(_QWORD *)(v67 - 112) = 0;
        *(_QWORD *)(v67 - 104) = 0;
        *(_OWORD *)(v67 - 120) = *(_OWORD *)(v63 + v65 - 120);
        *(_QWORD *)(v67 - 104) = *(_QWORD *)(v63 + v65 - 104);
        *(_QWORD *)(v66 - 120) = 0;
        *(_QWORD *)(v66 - 112) = 0;
        *(_QWORD *)(v66 - 104) = 0;
        *(_QWORD *)(v67 - 96) = 0;
        *(_QWORD *)(v67 - 88) = 0;
        *(_QWORD *)(v67 - 80) = 0;
        *(_OWORD *)(v67 - 96) = *(_OWORD *)(v63 + v65 - 96);
        *(_QWORD *)(v67 - 80) = *(_QWORD *)(v63 + v65 - 80);
        *(_QWORD *)(v66 - 96) = 0;
        *(_QWORD *)(v66 - 88) = 0;
        v70 = *(_OWORD *)(v63 + v65 - 72);
        v71 = *(_OWORD *)(v63 + v65 - 56);
        v72 = *(_QWORD *)(v63 + v65 - 40);
        *(_QWORD *)(v66 - 80) = 0;
        *(_OWORD *)(v67 - 56) = v71;
        *(_OWORD *)(v67 - 72) = v70;
        *(_QWORD *)(v67 - 24) = 0;
        *(_QWORD *)(v67 - 16) = 0;
        *(_QWORD *)(v67 - 40) = v72;
        *(_QWORD *)(v67 - 32) = 0;
        *(_OWORD *)(v67 - 32) = *(_OWORD *)(v63 + v65 - 32);
        *(_QWORD *)(v67 - 16) = *(_QWORD *)(v63 + v65 - 16);
        *(_QWORD *)(v66 - 32) = 0;
        *(_QWORD *)(v66 - 24) = 0;
        *(_QWORD *)(v66 - 16) = 0;
        *(_DWORD *)(v67 - 8) = *(_DWORD *)(v63 + v65 - 8);
        v65 -= 176;
      }
      while (v63 + v65 != v64);
      v62 += v65;
      v73 = *(int64x2_t *)(a1 + 168);
      v50 = v356.i64[1];
    }
    *(_QWORD *)(a1 + 168) = v62;
    *(_QWORD *)(a1 + 176) = v50;
    v356 = v73;
    v74 = *(char **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v357;
    v357 = v74;
    v355 = (char *)v73.i64[0];
    std::__split_buffer<AUSM::SoundStage::SoundStageParameters>::~__split_buffer((uint64_t)&v355);
  }
  else
  {
    AUSM::SoundStage::SoundStageParameters::SoundStageParameters(*(std::string **)(a1 + 176), (const AUSM::SoundStage::SoundStageParameters *)buf);
    v50 = v48 + 176;
    *(_QWORD *)(a1 + 176) = v50;
  }
  *(_QWORD *)(a1 + 176) = v50;
  v75 = *(_QWORD *)(a1 + 168);
  v76 = v50 - v75;
  if (v50 == v75)
  {
LABEL_72:
    v78 = 0;
    v81 = 1;
  }
  else
  {
    v77 = 0;
    v78 = 0;
    v79 = 0x2E8BA2E8BA2E8BA3 * (v76 >> 4);
    while (1)
    {
      v80 = *(_DWORD *)(v75 + 176 * v77 + 24);
      v81 = v80 != a2;
      if (v80 == a2)
        break;
      v77 = ++v78;
      if (v79 <= v78)
        goto LABEL_72;
    }
  }
  if (v372)
  {
    v373 = v372;
    operator delete(v372);
  }
  if (v366[0])
  {
    v366[1] = v366[0];
    operator delete(v366[0]);
  }
  if (v364[1])
  {
    *(void **)&v365.f64[0] = v364[1];
    operator delete(v364[1]);
  }
  if (v363[0])
  {
    v363[1] = v363[0];
    operator delete(v363[0]);
  }
  if ((buf[23] & 0x80000000) == 0)
  {
    if (v81)
      goto LABEL_105;
LABEL_85:
    v60 = *(_QWORD *)(a1 + 168);
    v58 = v78;
LABEL_86:
    v82 = v60 + 176 * v58;
    v83 = *(_QWORD *)(v82 + 32);
    v84 = *(_QWORD *)(v82 + 40);
    v85 = 0.0;
    v86 = (int8x8_t)0x3F80000000000000;
    v87 = 0;
    if (v83 == v84)
    {
      v89 = 0.0;
      v88 = 0.0;
      v49.i32[0] = 0;
    }
    else
    {
      v49.i32[0] = 0;
      v88 = 0.0;
      v89 = 0.0;
      do
      {
        v90 = *(_DWORD *)(v83 + 28);
        v91 = v90 > 0x3E || ((0x4000002000000010uLL >> v90) & 1) == 0;
        if (v91)
        {
          v87 = vadd_f32(v87, *(float32x2_t *)(v83 + 12));
          v89 = v89 + *(float *)(v83 + 20);
          v91 = v90 == 3;
          v92 = v90 == 3;
          if (v91)
            v88 = *(float *)v83;
          v93 = (const float *)(v83 + 4);
          v94 = (int8x8_t)vld1_dup_f32(v93);
          v86 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v92), 0x1FuLL)), v94, v86);
          *(float *)v49.i32 = *(float *)v49.i32 + 1.0;
        }
        v83 += 32;
      }
      while (v83 != v84);
    }
    v95 = v60 + 176 * v58;
    if (a2 != 1)
      v88 = 0.0;
    *(float *)(v95 + 104) = v88;
    *(int8x8_t *)(v95 + 108) = vand_s8(v86, (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 1), 0x1FuLL)));
    if (*(float *)v49.i32 <= 0.0)
    {
      v96 = (float32x2_t)1065353216;
    }
    else
    {
      v96 = vdiv_f32(v87, (float32x2_t)vdup_lane_s32(v49, 0));
      v85 = v89 / *(float *)v49.i32;
    }
    v97 = v60 + 176 * v58;
    *(float32x2_t *)(v97 + 116) = v96;
    *(float *)(v97 + 124) = v85;
    goto LABEL_105;
  }
  operator delete(*(void **)buf);
  if (!v81)
    goto LABEL_85;
LABEL_105:
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1);
  v101 = *(_QWORD *)(a1 + 168);
  v102 = *(_QWORD *)(a1 + 176);
  v103 = 0x2E8BA2E8BA2E8BA3 * ((v102 - v101) >> 4);
  if (v103 >= 2)
  {
    v104 = 2;
    v105 = 1;
    do
    {
      if (*(_QWORD *)(v101 + 176 * v105 + 40) - *(_QWORD *)(v101 + 176 * v105 + 32) != *(_QWORD *)(v101 + 40)
                                                                                      - *(_QWORD *)(v101 + 32))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v319 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v327 = (_QWORD *)(a1 + 200);
          if (*(char *)(a1 + 223) < 0)
            v327 = (_QWORD *)*v327;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v327;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "initializeSoundStage";
          _os_log_error_impl(&dword_1B5ED0000, v319, OS_LOG_TYPE_ERROR, "[%s|%s] SoundStages found to have different number of parameters.", buf, 0x16u);
        }
        if (*(_QWORD *)(*(_QWORD *)(a1 + 168) + 176 * v105 + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 168) + 176 * v105 + 32) != *(_QWORD *)(*(_QWORD *)(a1 + 168) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32))
          __assert_rtn("initializeSoundStage", "AUSMSoundStage.cpp", 173, "mSoundStages[i].parameters.size() == mSoundStages[0].parameters.size()");
        v315 = 0;
        goto LABEL_367;
      }
      v105 = v104;
      v33 = v103 > v104++;
    }
    while (v33);
  }
  if (v102 == v101)
LABEL_113:
    __assert_rtn("initializeSoundStage", "AUSMSoundStage.cpp", 179, "neutralIndex");
  v106 = 0;
  v335 = 0;
  while (*(_DWORD *)(v101 + 176 * v106 + 24) != 4)
  {
    v106 = ++v335;
    if (v103 <= v335)
      goto LABEL_113;
  }
  v107 = 0;
  v334 = 0;
  v352 = 0;
  v353 = 0;
  v354 = 0;
  v349 = 0;
  v350 = 0;
  v351 = 0;
  v346 = 0;
  v347 = 0;
  v331 = (void **)(a1 + 64);
  v332 = (char **)(a1 + 80);
  v348 = 0;
  v330 = (std::vector<int> *)(a1 + 88);
  v343 = 0;
  v344 = 0;
  v345 = 0;
  v340 = 0;
  v341 = 0;
  v342 = 0;
  while (!*(_BYTE *)(v101 + 176 * v107 + 168))
  {
LABEL_334:
    v107 = ++v334;
    if (0x2E8BA2E8BA2E8BA3 * ((v102 - v101) >> 4) <= (unint64_t)v334)
    {
      v315 = 1;
      goto LABEL_357;
    }
  }
  v108 = (_QWORD *)(v101 + 176 * v107);
  v108[11] = v108[10];
  v108[8] = v108[7];
  v108[19] = v108[18];
  if (v334 == v335)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  v109 = *(_QWORD *)(v101 + 176 * v107 + 32);
  if (*(_QWORD *)(v101 + 176 * v107 + 40) != v109)
  {
    v110 = 0;
    v111 = 0;
    do
    {
      v112 = *(_DWORD *)(v109 + 32 * v110 + 28);
      if (v112 > 0x3E || ((0x4000002000000010uLL >> v112) & 1) == 0)
      {
        if (v334 == v335)
        {
          v114 = (_DWORD *)(*(_QWORD *)(v101 + 176 * v107 + 32) + 32 * v110);
          v115 = v353;
          if (v353 >= v354)
          {
            v132 = (char *)v352;
            v133 = (v353 - (_BYTE *)v352) >> 2;
            v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62)
              goto LABEL_396;
            v135 = v354 - (_BYTE *)v352;
            if ((v354 - (_BYTE *)v352) >> 1 > v134)
              v134 = v135 >> 1;
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
              v136 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v136 = v134;
            if (v136)
            {
              v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v354, v136);
              v132 = (char *)v352;
              v115 = v353;
            }
            else
            {
              v137 = 0;
            }
            v142 = &v137[4 * v133];
            *(_DWORD *)v142 = *v114;
            v116 = v142 + 4;
            while (v115 != v132)
            {
              v143 = *((_DWORD *)v115 - 1);
              v115 -= 4;
              *((_DWORD *)v142 - 1) = v143;
              v142 -= 4;
            }
            v352 = v142;
            v353 = v116;
            v354 = &v137[4 * v136];
            if (v132)
              operator delete(v132);
          }
          else
          {
            *(_DWORD *)v353 = *v114;
            v116 = v115 + 4;
          }
          v353 = v116;
          v144 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 176 * v107 + 32) + 32 * v110 + 4);
          v145 = v350;
          if (v350 >= v351)
          {
            v147 = (char *)v349;
            v148 = (v350 - (_BYTE *)v349) >> 2;
            v149 = v148 + 1;
            if ((unint64_t)(v148 + 1) >> 62)
LABEL_396:
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v150 = v351 - (_BYTE *)v349;
            if ((v351 - (_BYTE *)v349) >> 1 > v149)
              v149 = v150 >> 1;
            if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
              v151 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v151 = v149;
            if (v151)
            {
              v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v351, v151);
              v147 = (char *)v349;
              v145 = v350;
            }
            else
            {
              v152 = 0;
            }
            v153 = &v152[4 * v148];
            *(_DWORD *)v153 = *v144;
            v146 = v153 + 4;
            while (v145 != v147)
            {
              v154 = *((_DWORD *)v145 - 1);
              v145 -= 4;
              *((_DWORD *)v153 - 1) = v154;
              v153 -= 4;
            }
            v349 = v153;
            v350 = v146;
            v351 = &v152[4 * v151];
            if (v147)
              operator delete(v147);
          }
          else
          {
            *(_DWORD *)v350 = *v144;
            v146 = v145 + 4;
          }
          v350 = v146;
          v155 = (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 176 * v107 + 32) + 32 * v110);
          v156 = v155[1] * 0.017453;
          v157 = __sincosf_stret(*v155 * 0.017453);
          v158 = __sincosf_stret(v156);
          v159 = v157.__cosval * v158.__cosval;
          v161 = *(float **)(a1 + 72);
          v160 = *(char **)(a1 + 80);
          if (v161 >= (float *)v160)
          {
            v163 = (float *)*v331;
            v164 = ((char *)v161 - (_BYTE *)*v331) >> 2;
            v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v166 = v160 - (char *)v163;
            if (v166 >> 1 > v165)
              v165 = v166 >> 1;
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
              v167 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v167 = v165;
            if (v167)
            {
              v168 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v332, v167);
              v163 = *(float **)(a1 + 64);
              v161 = *(float **)(a1 + 72);
            }
            else
            {
              v168 = 0;
            }
            v169 = (float *)&v168[4 * v164];
            *v169 = v159;
            v162 = v169 + 1;
            while (v161 != v163)
            {
              v170 = *((_DWORD *)v161-- - 1);
              *((_DWORD *)v169-- - 1) = v170;
            }
            v160 = &v168[4 * v167];
            *(_QWORD *)(a1 + 64) = v169;
            *(_QWORD *)(a1 + 72) = v162;
            *(_QWORD *)(a1 + 80) = v160;
            if (v163)
            {
              operator delete(v163);
              v160 = *v332;
            }
          }
          else
          {
            *v161 = v159;
            v162 = v161 + 1;
          }
          v171 = v157.__sinval * v158.__cosval;
          *(_QWORD *)(a1 + 72) = v162;
          if (v162 >= (float *)v160)
          {
            v173 = (float *)*v331;
            v174 = ((char *)v162 - (_BYTE *)*v331) >> 2;
            v175 = v174 + 1;
            if ((unint64_t)(v174 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v176 = v160 - (char *)v173;
            if (v176 >> 1 > v175)
              v175 = v176 >> 1;
            if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
              v177 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v177 = v175;
            if (v177)
            {
              v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v332, v177);
              v173 = *(float **)(a1 + 64);
              v162 = *(float **)(a1 + 72);
            }
            else
            {
              v178 = 0;
            }
            v179 = (float *)&v178[4 * v174];
            *v179 = v171;
            v172 = v179 + 1;
            while (v162 != v173)
            {
              v180 = *((_DWORD *)v162-- - 1);
              *((_DWORD *)v179-- - 1) = v180;
            }
            v160 = &v178[4 * v177];
            *(_QWORD *)(a1 + 64) = v179;
            *(_QWORD *)(a1 + 72) = v172;
            *(_QWORD *)(a1 + 80) = v160;
            if (v173)
            {
              operator delete(v173);
              v160 = *v332;
            }
          }
          else
          {
            *v162 = v171;
            v172 = v162 + 1;
          }
          v181 = -v158.__sinval;
          *(_QWORD *)(a1 + 72) = v172;
          if (v172 >= (float *)v160)
          {
            v183 = (float *)*v331;
            v184 = ((char *)v172 - (_BYTE *)*v331) >> 2;
            v185 = v184 + 1;
            if ((unint64_t)(v184 + 1) >> 62)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v186 = v160 - (char *)v183;
            if (v186 >> 1 > v185)
              v185 = v186 >> 1;
            if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
              v187 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v187 = v185;
            if (v187)
            {
              v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v332, v187);
              v183 = *(float **)(a1 + 64);
              v172 = *(float **)(a1 + 72);
            }
            else
            {
              v188 = 0;
            }
            v189 = (float *)&v188[4 * v184];
            *v189 = v181;
            v182 = v189 + 1;
            while (v172 != v183)
            {
              v190 = *((_DWORD *)v172-- - 1);
              *((_DWORD *)v189-- - 1) = v190;
            }
            *(_QWORD *)(a1 + 64) = v189;
            *(_QWORD *)(a1 + 72) = v182;
            *(_QWORD *)(a1 + 80) = &v188[4 * v187];
            if (v183)
              operator delete(v183);
          }
          else
          {
            *v172 = v181;
            v182 = v172 + 1;
          }
          *(_QWORD *)(a1 + 72) = v182;
          v191 = v159;
          v192 = v347;
          if (v347 >= v348)
          {
            v194 = (double *)v346;
            v195 = ((char *)v347 - (_BYTE *)v346) >> 3;
            v196 = v195 + 1;
            if ((unint64_t)(v195 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v197 = (char *)v348 - (_BYTE *)v346;
            if (((char *)v348 - (_BYTE *)v346) >> 2 > v196)
              v196 = v197 >> 2;
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8)
              v198 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v198 = v196;
            if (v198)
            {
              v199 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v348, v198);
              v194 = (double *)v346;
              v192 = v347;
            }
            else
            {
              v199 = 0;
            }
            v200 = (double *)&v199[8 * v195];
            *v200 = v191;
            v193 = v200 + 1;
            while (v192 != v194)
            {
              v201 = *((_QWORD *)v192-- - 1);
              *((_QWORD *)v200-- - 1) = v201;
            }
            v346 = v200;
            v347 = v193;
            v348 = (double *)&v199[8 * v198];
            if (v194)
              operator delete(v194);
          }
          else
          {
            *v347 = v191;
            v193 = v192 + 1;
          }
          v347 = v193;
          v202 = v171;
          v203 = v344;
          if (v344 >= v345)
          {
            v205 = (double *)v343;
            v206 = ((char *)v344 - (_BYTE *)v343) >> 3;
            v207 = v206 + 1;
            if ((unint64_t)(v206 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v208 = (char *)v345 - (_BYTE *)v343;
            if (((char *)v345 - (_BYTE *)v343) >> 2 > v207)
              v207 = v208 >> 2;
            if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF8)
              v209 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v209 = v207;
            if (v209)
            {
              v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v345, v209);
              v205 = (double *)v343;
              v203 = v344;
            }
            else
            {
              v210 = 0;
            }
            v211 = (double *)&v210[8 * v206];
            *v211 = v202;
            v204 = v211 + 1;
            while (v203 != v205)
            {
              v212 = *((_QWORD *)v203-- - 1);
              *((_QWORD *)v211-- - 1) = v212;
            }
            v343 = v211;
            v344 = v204;
            v345 = (double *)&v210[8 * v209];
            if (v205)
              operator delete(v205);
          }
          else
          {
            *v344 = v202;
            v204 = v203 + 1;
          }
          v344 = v204;
          v213 = v181;
          v214 = v341;
          if (v341 >= v342)
          {
            v216 = (double *)v340;
            v217 = ((char *)v341 - (_BYTE *)v340) >> 3;
            v218 = v217 + 1;
            if ((unint64_t)(v217 + 1) >> 61)
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            v219 = (char *)v342 - (_BYTE *)v340;
            if (((char *)v342 - (_BYTE *)v340) >> 2 > v218)
              v218 = v219 >> 2;
            if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
              v220 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v220 = v218;
            if (v220)
            {
              v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>((uint64_t)&v342, v220);
              v216 = (double *)v340;
              v214 = v341;
            }
            else
            {
              v221 = 0;
            }
            v222 = (double *)&v221[8 * v217];
            *v222 = v213;
            v215 = v222 + 1;
            while (v214 != v216)
            {
              v223 = *((_QWORD *)v214-- - 1);
              *((_QWORD *)v222-- - 1) = v223;
            }
            v340 = v222;
            v341 = v215;
            v342 = (double *)&v221[8 * v220];
            if (v216)
              operator delete(v216);
          }
          else
          {
            *v341 = v213;
            v215 = v214 + 1;
          }
          v341 = v215;
          v101 = *(_QWORD *)(a1 + 168);
        }
        v224 = v101 + 176 * v107;
        v227 = *(_QWORD *)(v224 + 72);
        v226 = (_QWORD *)(v224 + 72);
        v225 = v227;
        v228 = (_OWORD *)(*(v226 - 5) + 32 * v110);
        v230 = (void **)(v226 - 1);
        v229 = (_OWORD *)*(v226 - 1);
        if ((unint64_t)v229 >= v227)
        {
          v233 = (void **)(v226 - 2);
          v234 = *(v226 - 2);
          v235 = ((uint64_t)v229 - v234) >> 5;
          v236 = v235 + 1;
          if ((unint64_t)(v235 + 1) >> 59)
LABEL_391:
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v237 = v225 - v234;
          if (v237 >> 4 > v236)
            v236 = v237 >> 4;
          if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFE0)
            v238 = 0x7FFFFFFFFFFFFFFLL;
          else
            v238 = v236;
          if (v238)
            v238 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v238);
          else
            v239 = 0;
          v240 = (_OWORD *)(v238 + 32 * v235);
          v241 = v228[1];
          *v240 = *v228;
          v240[1] = v241;
          v242 = (char *)*v230;
          v243 = (char *)*v233;
          v244 = v240;
          if (*v230 != *v233)
          {
            do
            {
              v245 = *((_OWORD *)v242 - 1);
              *(v244 - 2) = *((_OWORD *)v242 - 2);
              *(v244 - 1) = v245;
              v244 -= 2;
              v242 -= 32;
            }
            while (v242 != v243);
            v242 = (char *)*v233;
          }
          *v233 = v244;
          v232 = v240 + 2;
          *v230 = v240 + 2;
          *v226 = v238 + 32 * v239;
          if (v242)
            operator delete(v242);
        }
        else
        {
          v231 = v228[1];
          *v229 = *v228;
          v229[1] = v231;
          v232 = v229 + 2;
        }
        *v230 = v232;
        v246 = *(_QWORD *)(a1 + 168) + 176 * v107;
        v249 = *(_QWORD *)(v246 + 160);
        v247 = (_QWORD *)(v246 + 160);
        v248 = v249;
        v250 = (float *)(*(v247 - 16) + 32 * v110);
        v251 = v250[1];
        v252 = __sincosf_stret((float)(*v250 * 0.017453) * 0.5);
        v253 = __sincosf_stret((float)(v251 * 0.017453) * 0.5);
        *(float *)v100.f64 = -(float)((float)(v252.__sinval * v253.__sinval)
                                    - (float)((float)(v252.__cosval * v253.__cosval) * 0.0));
        *((float *)v100.f64 + 1) = (float)(v252.__sinval * (float)(v253.__cosval * 0.0))
                                 + (float)(v253.__sinval * v252.__cosval);
        *(_QWORD *)&v100.f64[1] = __PAIR64__((float)(v252.__cosval * v253.__cosval)+ (float)((float)(v252.__sinval * v253.__sinval) * 0.0), (float)(v252.__cosval * (float)(v253.__sinval * -0.0))+ (float)(v253.__cosval * v252.__sinval));
        v254 = (void **)(v247 - 1);
        v255 = (float64x2_t *)*(v247 - 1);
        if ((unint64_t)v255 >= v249)
        {
          v333 = v100;
          v257 = (void **)(v247 - 2);
          v258 = *(v247 - 2);
          v259 = ((uint64_t)v255 - v258) >> 4;
          v260 = v259 + 1;
          if ((unint64_t)(v259 + 1) >> 60)
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          v261 = v248 - v258;
          if (v261 >> 3 > v260)
            v260 = v261 >> 3;
          if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF0)
            v262 = 0xFFFFFFFFFFFFFFFLL;
          else
            v262 = v260;
          if (v262)
            v262 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v262);
          else
            v263 = 0;
          v264 = (float64x2_t *)(v262 + 16 * v259);
          *v264 = v333;
          f64 = (_OWORD *)v264[1].f64;
          v265 = (float64x2_t *)*v254;
          v266 = (float64x2_t *)*v257;
          if (*v254 != *v257)
          {
            do
            {
              v264[-1] = v265[-1];
              --v264;
              --v265;
            }
            while (v265 != v266);
            v265 = (float64x2_t *)*v257;
          }
          *v257 = v264;
          *v254 = f64;
          *v247 = v262 + 16 * v263;
          if (v265)
            operator delete(v265);
        }
        else
        {
          *v255 = v100;
          f64 = (_OWORD *)v255[1].f64;
        }
        *v254 = f64;
      }
      else
      {
        v117 = v101 + 176 * v107;
        v120 = *(_QWORD *)(v117 + 96);
        v119 = (_QWORD *)(v117 + 96);
        v118 = v120;
        v121 = (float64x2_t *)(*(v119 - 8) + 32 * v110);
        v123 = (void **)(v119 - 1);
        v122 = (float64x2_t *)*(v119 - 1);
        if ((unint64_t)v122 >= v120)
        {
          v125 = (void **)(v119 - 2);
          v126 = *(v119 - 2);
          v127 = ((uint64_t)v122 - v126) >> 5;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 59)
            goto LABEL_391;
          v129 = v118 - v126;
          if (v129 >> 4 > v128)
            v128 = v129 >> 4;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFE0)
            v130 = 0x7FFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
            v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<__CFString const*,AudioUnitParameterUnit,unsigned int,float,float,float,int>>>(v130);
          else
            v131 = 0;
          v138 = (float64x2_t *)(v130 + 32 * v127);
          v98 = v121[1];
          *v138 = *v121;
          v138[1] = v98;
          v139 = (float64x2_t *)*v123;
          v140 = (float64x2_t *)*v125;
          v141 = v138;
          if (*v123 != *v125)
          {
            do
            {
              v98 = v139[-1];
              v141[-2] = v139[-2];
              v141[-1] = v98;
              v141 -= 2;
              v139 -= 2;
            }
            while (v139 != v140);
            v139 = (float64x2_t *)*v125;
          }
          *v125 = v141;
          v124 = (_OWORD *)v138[2].f64;
          *v123 = &v138[2];
          *v119 = v130 + 32 * v131;
          if (v139)
            operator delete(v139);
        }
        else
        {
          v98 = v121[1];
          *v122 = *v121;
          v122[1] = v98;
          v124 = (_OWORD *)v122[2].f64;
        }
        *v123 = v124;
      }
      v101 = *(_QWORD *)(a1 + 168);
      v109 = *(_QWORD *)(v101 + 176 * v107 + 32);
      v110 = ++v111;
    }
    while (v111 < (unint64_t)((*(_QWORD *)(v101 + 176 * v107 + 40) - v109) >> 5));
  }
  if (v334 != v335)
  {
LABEL_333:
    v102 = *(_QWORD *)(a1 + 176);
    *(_BYTE *)(v101 + 176 * v107 + 168) = 0;
    goto LABEL_334;
  }
  v267 = (float64_t *)v346;
  v268 = (unint64_t)((char *)v347 - (_BYTE *)v346) >> 3;
  if (v268 < 4)
    goto LABEL_336;
  v269 = 0;
  v270 = (float64_t *)v343;
  v271 = (float64_t *)v340;
  v272 = ((unint64_t)((char *)v347 - (_BYTE *)v346) >> 3);
LABEL_309:
  v273 = 0;
  while (v273 == v269)
  {
LABEL_316:
    if (++v273 == v272)
    {
      if (++v269 == v272)
        goto LABEL_336;
      goto LABEL_309;
    }
  }
  v274 = 0;
  while (1)
  {
    if (v269 != v274 && v273 != v274)
    {
      v275.f64[0] = *((float64_t *)v346 + v269);
      v275.f64[1] = *((float64_t *)v343 + v269);
      v98.f64[0] = *((float64_t *)v340 + v269);
      v276.f64[0] = *((float64_t *)v346 + v273);
      v276.f64[1] = *((float64_t *)v343 + v273);
      v99.f64[0] = *((float64_t *)v340 + v273);
      v277.f64[0] = *((float64_t *)v346 + v274);
      v277.f64[1] = *((float64_t *)v343 + v274);
      v100.f64[0] = *((float64_t *)v340 + v274);
      v278 = vsubq_f64(v277, v275);
      v279 = vsubq_f64(v100, v98);
      v280 = vsubq_f64(v276, v275);
      v281 = vsubq_f64(v99, v98);
      v282 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v279, v280, 1)), v281, v278, 1);
      v281.f64[1] = v280.f64[0];
      v279.f64[1] = v278.f64[0];
      v100 = vmlaq_f64(vnegq_f64(vmulq_f64(v278, v281)), v280, v279);
      v283.f64[0] = v282.f64[0];
      v283.f64[1] = v100.f64[0];
      v99 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v100, 1);
      if (vaddvq_f64(vabsq_f64(v283)) + vabsq_f64(v99).f64[0] > 0.05)
        break;
    }
    if (v272 == ++v274)
      goto LABEL_316;
  }
  v284 = 0;
  v285 = 0;
  *(_QWORD *)&v283.f64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u64[0];
  v286 = (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL);
  v100.f64[1] = v286.f64[0];
  v287 = vmulq_f64(v100, v100);
  v288 = sqrt(vmulq_f64(v282, v282).f64[0] + v287.f64[0] + v287.f64[1]);
  v289 = 1.0 / v288;
  do
  {
    if (v274 != v284 && v269 != v284 && v273 != v284)
    {
      v290.f64[0] = *((float64_t *)v346 + v284);
      v290.f64[1] = *((float64_t *)v343 + v284);
      v286.f64[0] = *((float64_t *)v340 + v284);
      v286 = vmulq_f64(vsubq_f64(v286, v98), v99);
      if (fabs((vaddvq_f64(vmulq_f64(vsubq_f64(v290, v275), v283)) + v286.f64[0]) * v289) > 0.01)
        break;
    }
    v285 = ++v284 >= v272;
  }
  while (v272 != v284);
  if (!v285)
  {
    if ((CDelaunayTriangles3D::find_delaunay_triangles((CDelaunayTriangles3D *)(a1 + 16), (uint64_t)v346, (uint64_t)v343, (uint64_t)v340, v330, v268) & 1) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v316 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v329 = (_QWORD *)(a1 + 200);
        if (*(char *)(a1 + 223) < 0)
          v329 = (_QWORD *)*v329;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v329;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "initializeTriangulation";
        v318 = "[%s|%s] Failed to compute triangulation.";
        goto LABEL_388;
      }
      goto LABEL_350;
    }
    v291 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
    std::vector<double>::resize(a1 + 112, (v291 >> 1) + (v291 >> 2));
    vDSP_vclrD(*(double **)(a1 + 112), 1, (uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3);
    v300 = *(_QWORD *)(a1 + 88);
    v299 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)(v299 - v300) >= 0xC)
    {
      v301 = 8;
      v302 = 1;
      v303 = 2;
      do
      {
        v304 = *(int *)(v300 + 4 * (v303 - 2));
        v305.f64[0] = v267[v304];
        v305.f64[1] = v270[v304];
        v292.f64[0] = v271[v304];
        v306 = *(int *)(v300 + 4 * (v303 - 1));
        v293.f64[0] = v267[v306];
        v296.f64[0] = v270[v306];
        *(float64_t *)&v294 = v271[v306];
        v307 = *(int *)(v300 + 4 * v303);
        v295.f64[0] = v267[v307];
        v298.f64[0] = v270[v307];
        *(float64_t *)&v297 = v271[v307];
        v308.f64[0] = v296.f64[0];
        *(_QWORD *)&v308.f64[1] = v294;
        *(_QWORD *)&v309.f64[0] = v297;
        v309.f64[1] = v295.f64[0];
        *(_QWORD *)&v310.f64[0] = v294;
        v310.f64[1] = v293.f64[0];
        v311.f64[0] = v298.f64[0];
        *(_QWORD *)&v311.f64[1] = v297;
        if (fabs(vmulq_f64(v292, vmlaq_f64(vmulq_f64(v295, vnegq_f64(v296)), v298, v293)).f64[0]+ vaddvq_f64(vmulq_f64(v305, vmlaq_f64(vmulq_f64(v311, vnegq_f64(v310)), v309, v308)))) > 0.00000011920929)
        {
          v293.f64[1] = v296.f64[0];
          v295.f64[1] = v270[v307];
          *(float64x2_t *)buf = v305;
          *(float64x2_t *)&buf[16] = v292;
          *(float64x2_t *)v363 = v293;
          *(_OWORD *)v364 = v294;
          v365 = v295;
          *(_OWORD *)v366 = v297;
          __invert_d3();
          v312 = v356.i64[0];
          v292 = v358;
          v293 = v360;
          *(_QWORD *)&v294 = v356.i64[1];
          v295.f64[0] = v359;
          v296.f64[0] = v361;
          v313 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(v313 + 8 * (v301 - 8)) = v355;
          *(float64_t *)(v313 + 8 * (v301 - 7)) = v292.f64[0];
          *(float64_t *)(v313 + 8 * (v301 - 6)) = v293.f64[0];
          *(_QWORD *)(v313 + 8 * (v301 - 5)) = v312;
          *(float64_t *)(v313 + 8 * (v301 - 4)) = v292.f64[1];
          *(float64_t *)(v313 + 8 * (v301 - 3)) = v293.f64[1];
          *(_QWORD *)(v313 + 8 * (v301 - 2)) = v294;
          *(float64_t *)(v313 + 8 * (v301 - 1)) = v295.f64[0];
          *(float64_t *)(v313 + 8 * v301) = v296.f64[0];
          v300 = *(_QWORD *)(a1 + 88);
          v299 = *(_QWORD *)(a1 + 96);
        }
        v314 = v302;
        v301 += 9;
        ++v302;
        v303 += 3;
      }
      while (v314 < ((v299 - v300) >> 2) / 3uLL);
    }
    *(_DWORD *)(a1 + 160) = CDelaunayTriangles3D::calculate_triangle_bins((uint64_t)v267, (uint64_t)v270, (uint64_t)v271, v330, (void **)(a1 + 136));
    v101 = *(_QWORD *)(a1 + 168);
    goto LABEL_333;
  }
LABEL_336:
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v316 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v317 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v317 = (_QWORD *)*v317;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v317;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "initializeTriangulation";
    v318 = "[%s|%s] Control Points found to be coplanar. Unable to compute triangulation.";
LABEL_388:
    _os_log_error_impl(&dword_1B5ED0000, v316, OS_LOG_TYPE_ERROR, v318, buf, 0x16u);
  }
LABEL_350:
  v321 = *(_QWORD *)(a1 + 168);
  for (i = *(_QWORD *)(a1 + 176); i != v321; std::__destroy_at[abi:ne180100]<AUSM::SoundStage::SoundStageParameters,0>(i))
    i -= 176;
  *(_QWORD *)(a1 + 176) = v321;
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v322 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    v325 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v325 = (_QWORD *)*v325;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v325;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "initializeSoundStage";
    _os_log_error_impl(&dword_1B5ED0000, v322, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to initialize Delaunay triangulation.", buf, 0x16u);
  }
  v315 = 0;
LABEL_357:
  if (v340)
  {
    v341 = (double *)v340;
    operator delete(v340);
  }
  if (v343)
  {
    v344 = (double *)v343;
    operator delete(v343);
  }
  if (v346)
  {
    v347 = (double *)v346;
    operator delete(v346);
  }
  if (v349)
  {
    v350 = (char *)v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = (char *)v352;
    operator delete(v352);
  }
LABEL_367:
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(a1);
  if (__p)
  {
    *(_QWORD *)&v337 = __p;
    operator delete(__p);
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v338);
  return v315;
}

void sub_1B64FDBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::__split_buffer<AUSM::SoundStage::SoundStageParameters>::~__split_buffer((uint64_t)&a45);
  AUSM::SoundStage::SoundStageParameters::~SoundStageParameters((AUSM::SoundStage::SoundStageParameters *)&a57);
  if (__p)
    operator delete(__p);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void AUSM::SoundStage::getDefaultParameters(AUSM::SoundStage *this, int a2)
{
  unint64_t v3;
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  void *__p;
  char *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  __int128 __s1;
  __int128 v32;
  __int128 v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  switch(a2)
  {
    case 1:
      LODWORD(v34[0]) = 0;
      __s1 = xmmword_1B6686A84;
      v32 = unk_1B6686A94;
      v33 = xmmword_1B6686AA4;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v28, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686AB8;
      v32 = unk_1B6686AC8;
      v33 = xmmword_1B6686AD8;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v25, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686AEC;
      v32 = unk_1B6686AFC;
      v33 = xmmword_1B6686B0C;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v22, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686C58;
      v32 = unk_1B6686C68;
      v33 = xmmword_1B6686C78;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v19, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      LODWORD(v34[0]) = 0;
      v32 = 0u;
      v33 = 0u;
      __s1 = 0u;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v16, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      LODWORD(v34[0]) = 0;
      v32 = 0u;
      v33 = 0u;
      __s1 = 0u;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&__p, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      goto LABEL_5;
    case 2:
      LODWORD(v34[0]) = 0;
      __s1 = xmmword_1B6686B20;
      v32 = unk_1B6686B30;
      v33 = xmmword_1B6686B40;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v28, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686B54;
      v32 = *(_OWORD *)algn_1B6686B64;
      v33 = xmmword_1B6686B74;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v25, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686B88;
      v32 = unk_1B6686B98;
      v33 = xmmword_1B6686BA8;
      LODWORD(v34[0]) = 1056964608;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v22, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686C58;
      v32 = unk_1B6686C68;
      v33 = xmmword_1B6686C78;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v19, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      LODWORD(v34[0]) = 0;
      v32 = 0u;
      v33 = 0u;
      __s1 = 0u;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v16, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      LODWORD(v34[0]) = 0;
      v32 = 0u;
      v33 = 0u;
      __s1 = 0u;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&__p, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      goto LABEL_5;
    case 3:
    case 4:
      LODWORD(v34[0]) = 0;
      __s1 = xmmword_1B6686BBC;
      v32 = unk_1B6686BCC;
      v33 = xmmword_1B6686BDC;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v28, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686BF0;
      v32 = unk_1B6686C00;
      v33 = xmmword_1B6686C10;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v25, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686C24;
      v32 = unk_1B6686C34;
      v33 = xmmword_1B6686C44;
      LODWORD(v34[0]) = 1065353216;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v22, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      __s1 = xmmword_1B6686C58;
      v32 = unk_1B6686C68;
      v33 = xmmword_1B6686C78;
      LODWORD(v34[0]) = 0;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v19, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      LODWORD(v34[0]) = 0;
      v32 = 0u;
      v33 = 0u;
      __s1 = 0u;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&v16, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
      LODWORD(v34[0]) = 0;
      v32 = 0u;
      v33 = 0u;
      __s1 = 0u;
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)&__p, (char *)&__s1, (uint64_t)v34 + 4, 0xDuLL);
LABEL_5:
      *(_QWORD *)&v32 = (v26 - (_BYTE *)v25) >> 2;
      *((_QWORD *)&v32 + 1) = (v20 - (_BYTE *)v19) >> 2;
      v3 = (v29 - v28) >> 2;
      *(_QWORD *)&__s1 = 13;
      *((_QWORD *)&__s1 + 1) = v3;
      *(_QWORD *)&v33 = (v23 - (_BYTE *)v22) >> 2;
      *((_QWORD *)&v33 + 1) = (v17 - (_BYTE *)v16) >> 2;
      v34[0] = (v14 - (_BYTE *)__p) >> 2;
      if (memcmp(&__s1, (char *)&__s1 + 8, 0x30uLL))
        __assert_rtn("getDefaultParameters", "AUSMSoundStage.cpp", 104, "are_all_equal({channelLabels.size(), soundStageAzimsDefault.size(), soundStageElevsDefault.size(), soundStageDistancesDefault.size(), soundStageGainsDefault.size(), soundStageDRRsDefault.size(), soundStageDelaysDefault.size()})");
      std::vector<AUSMChannelParameters>::vector(this, v3);
      v4 = v28;
      v5 = (char *)__p;
      if (v29 == v28)
      {
        if (!__p)
          goto LABEL_12;
      }
      else
      {
        v6 = 0;
        v7 = (v29 - v28) >> 2;
        v8 = v25;
        v9 = v19;
        v10 = v22;
        v11 = v16;
        v12 = (_DWORD *)(*(_QWORD *)this + 16);
        do
        {
          *(v12 - 4) = v4[v6];
          *(v12 - 3) = v8[v6];
          *(v12 - 2) = v9[v6];
          *(v12 - 1) = v10[v6];
          *v12 = v11[v6];
          v12[1] = *(_DWORD *)&v5[4 * v6];
          v12[3] = AUSM::SoundStage::getDefaultParameters::channelLabels[v6++];
          v12 += 8;
        }
        while (v7 > v6);
      }
      v14 = v5;
      operator delete(v5);
LABEL_12:
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
LABEL_15:
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      return;
    default:
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      goto LABEL_15;
  }
}

void sub_1B64FE3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

std::string *AUSM::SoundStage::SoundStageParameters::SoundStageParameters(std::string *this, const AUSM::SoundStage::SoundStageParameters *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  void *v12;
  uint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 5);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(&this[2].__r_.__value_.__l.__size_, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 5);
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 5);
  v6 = *(_OWORD *)((char *)a2 + 104);
  v7 = *(_OWORD *)((char *)a2 + 120);
  v8 = *((_QWORD *)a2 + 17);
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__r.__words[2] = v8;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v7;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v6;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  v10 = (_BYTE *)*((_QWORD *)a2 + 18);
  v9 = (_BYTE *)*((_QWORD *)a2 + 19);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v11 >> 4);
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    this[6].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    this[6].__r_.__value_.__r.__words[2] = (std::string::size_type)v12 + 16 * v13;
    memmove(v12, v10, v11);
    this[6].__r_.__value_.__l.__size_ = (std::string::size_type)v12 + 16 * (v11 >> 4);
  }
  LODWORD(this[7].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 42);
  return this;
}

void sub_1B64FE5E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void AUSM::SoundStage::SoundStageParameters::~SoundStageParameters(AUSM::SoundStage::SoundStageParameters *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::__split_buffer<AUSM::SoundStage::SoundStageParameters>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 176;
    std::__destroy_at[abi:ne180100]<AUSM::SoundStage::SoundStageParameters,0>(i - 176);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t AUSM::SoundStage::SoundStage(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  _OWORD *v6;
  __int128 v7;
  char v8;
  std::runtime_error *exception;
  NSObject *v11;
  std::string::size_type v12;
  CFTypeRef cf;
  std::string __p;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 12));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  v6 = (_OWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 200), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a3 + 2);
    *v6 = v7;
  }
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_1B6627BD0;
  *(_OWORD *)(a1 + 400) = xmmword_1B66A2890;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 420) = xmmword_1B66A19E0;
  *(_QWORD *)(a1 + 436) = 1065353216;
  CFRetain(CFSTR("AUSMSoundStageNeutralParameters"));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, CFSTR("AUSMSoundStageNeutralParameters"));
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&__p);
  v8 = AUSM::SoundStage::setSoundStageParameters(a1, 4, a2, &__p, 1, 0, 0, 1.0, 0.0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (cf)
    CFRelease(cf);
  if ((v8 & 1) == 0)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v11 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v12 = a1 + 200;
      if (*(char *)(a1 + 223) < 0)
        v12 = *(_QWORD *)v6;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v12;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"SoundStage";
      _os_log_error_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to initialize SoundStage.", (uint8_t *)&__p, 0x16u);
    }
    __assert_rtn("SoundStage", "AUSMSoundStage.cpp", 32, "result");
  }
  return a1;
}

void sub_1B64FE9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  CDelaunayTriangles3D *v17;
  void *v19;
  void *v20;
  void *v21;

  std::vector<AUSM::SoundStage::SoundStageParameters>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = (void *)v16[14];
  if (v19)
  {
    v16[15] = v19;
    operator delete(v19);
  }
  v20 = (void *)v16[11];
  if (v20)
  {
    v16[12] = v20;
    operator delete(v20);
  }
  v21 = (void *)v16[8];
  if (v21)
  {
    v16[9] = v21;
    operator delete(v21);
  }
  CDelaunayTriangles3D::~CDelaunayTriangles3D(v17);
  _Unwind_Resume(a1);
}

float applesauce::CF::details::find_at_key<float,__CFString const*&>(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *v2;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<float,0>(v2);
}

void sub_1B64FEB44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::SoundStage::getSoundStageParametersDictionary(AUSM::SoundStage *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t v10;
  int *i;
  int *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  CFDictionaryRef CFDictionaryRef;
  uint64_t j;
  const void *v22;
  const void *v23;
  uint64_t v25;
  char v26;
  CFTypeRef cf;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];

  v41[2] = *MEMORY[0x1E0C80C00];
  v25 = a2;
  v26 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
  v4 = *(_QWORD *)(a2 + 168);
  v5 = *(_QWORD *)(a2 + 176) - v4;
  if (!v5)
    goto LABEL_46;
  v6 = 0;
  v7 = 0;
  v8 = 0x2E8BA2E8BA2E8BA3 * (v5 >> 4);
  while (*(_DWORD *)(v4 + 176 * v6 + 24) != 3)
  {
    v6 = ++v7;
    if (v8 <= v7)
      goto LABEL_46;
  }
  if (v8 > v7)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v10 = *(_QWORD *)(a2 + 168) + 176 * v7;
    v12 = *(int **)(v10 + 32);
    for (i = *(int **)(v10 + 40); v12 != i; v12 += 8)
    {
      v13 = (const void *)kPresetKeyAzimuth;
      if (kPresetKeyAzimuth)
        CFRetain((CFTypeRef)kPresetKeyAzimuth);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v33, v13);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(v35, v33, v12);
      v14 = (const void *)kPresetKeyElevation;
      if (kPresetKeyElevation)
        CFRetain((CFTypeRef)kPresetKeyElevation);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v32, v14);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(&v36, v32, v12 + 1);
      v15 = (const void *)kPresetKeyDistance;
      if (kPresetKeyDistance)
        CFRetain((CFTypeRef)kPresetKeyDistance);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v31, v15);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(&v37, v31, v12 + 2);
      v16 = (const void *)kPresetKeyDRRAdjustment;
      if (kPresetKeyDRRAdjustment)
        CFRetain((CFTypeRef)kPresetKeyDRRAdjustment);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v30, v16);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(&v38, v30, v12 + 4);
      v17 = (const void *)kPresetKeyGain;
      if (kPresetKeyGain)
        CFRetain((CFTypeRef)kPresetKeyGain);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v29, v17);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(&v39, v29, v12 + 3);
      v18 = (const void *)kPresetKeyDelay;
      if (kPresetKeyDelay)
        CFRetain((CFTypeRef)kPresetKeyDelay);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v28, v18);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(&v40, v28, v12 + 5);
      v19 = (const void *)kPresetKeyChannelLabel;
      if (kPresetKeyChannelLabel)
        CFRetain((CFTypeRef)kPresetKeyChannelLabel);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v19);
      applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int &>(v41, cf, v12 + 7);
      v34[0] = v35;
      v34[1] = 7;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v34);
      for (j = 0; j != -14; j -= 2)
      {
        v22 = (const void *)v41[j + 1];
        if (v22)
          CFRelease(v22);
        v23 = (const void *)v41[j];
        if (v23)
          CFRelease(v23);
      }
      if (cf)
        CFRelease(cf);
      if (v28)
        CFRelease(v28);
      if (v29)
        CFRelease(v29);
      if (v30)
        CFRelease(v30);
      if (v31)
        CFRelease(v31);
      if (v32)
        CFRelease(v32);
      if (v33)
        CFRelease(v33);
      CFArrayAppendValue(Mutable, CFDictionaryRef);
      if (CFDictionaryRef)
        CFRelease(CFDictionaryRef);
    }
    applesauce::CF::ArrayRef::ArrayRef(this, Mutable);
  }
  else
  {
LABEL_46:
    *(_QWORD *)this = 0;
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v25);
}

void sub_1B64FEEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::SoundStage::getSoundStageParameters(AUSM::SoundStage *this, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  char v14;

  v13 = a2;
  v14 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
  v6 = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 176);
  v8 = v7 - v6;
  if (v7 == v6)
    goto LABEL_8;
  v9 = 0;
  v10 = 0;
  v11 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
  while (*(_DWORD *)(v6 + 176 * v9 + 24) != a3)
  {
    v9 = ++v10;
    if (v11 <= v10)
      goto LABEL_8;
  }
  if (v11 <= v10)
  {
LABEL_8:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(this, *(const void **)(v6 + 176 * v10 + 32), *(_QWORD *)(v6 + 176 * v10 + 40), (uint64_t)(*(_QWORD *)(v6 + 176 * v10 + 40) - *(_QWORD *)(v6 + 176 * v10 + 32)) >> 5);
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v13);
}

void sub_1B64FF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUSM::SoundStage::initialize(AUSM::SoundStage *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  _DWORD *v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  _DWORD *v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  _DWORD *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char **v78;
  uint64_t v79;
  int v81;
  void **v82;
  void **v83;
  void **v84;
  AUSM::SoundStage *v85;
  char v86;

  v85 = this;
  v86 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this);
  *((float *)this + 107) = a2;
  if (a2 <= 0.0)
    __assert_rtn("initialize", "AUSMSoundStage.cpp", 616, "mSampleRate > 0.f");
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 224, *((char **)this + 8), *((_QWORD *)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
  v4 = *((_QWORD *)this + 28);
  v5 = *((_QWORD *)this + 29) - v4;
  if ((unint64_t)v5 >= 9)
  {
    v6 = v5 >> 2;
    v7 = 5;
    v8 = 2;
    do
    {
      *(float *)(v4 + 4 * v8) = -*(float *)(v4 + 4 * v8);
      v8 = v7;
      v9 = v6 > v7;
      v7 += 3;
    }
    while (v9);
  }
  v10 = atomic_load((unsigned int *)this + 104);
  v11 = *((_QWORD *)this + 21);
  v12 = *((_QWORD *)this + 22);
  v13 = v12 - v11;
  if (v12 == v11)
  {
    v18 = "soundStageToBeInitialized";
LABEL_91:
    v81 = 633;
LABEL_97:
    __assert_rtn("initialize", "AUSMSoundStage.cpp", v81, v18);
  }
  v14 = 0;
  v15 = 0;
  v16 = 0x2E8BA2E8BA2E8BA3 * (v13 >> 4);
  do
  {
    if (*(_DWORD *)(v11 + 176 * v14 + 24) == v10)
    {
      v19 = atomic_load((unsigned int *)this + 104);
      atomic_store(v19, (unsigned int *)this + 102);
      v11 = *((_QWORD *)this + 21);
      goto LABEL_14;
    }
    v14 = ++v15;
  }
  while (v16 > v15);
  v17 = 0;
  v15 = 0;
  v18 = "soundStageToBeInitialized";
  while (*(_DWORD *)(v11 + 176 * v17 + 24) != 4)
  {
    v17 = ++v15;
    if (v16 <= v15)
      goto LABEL_91;
  }
LABEL_14:
  v21 = (void **)((char *)this + 248);
  v20 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 32) = v20;
  v83 = (void **)((char *)this + 272);
  v22 = *((_QWORD *)this + 37);
  v82 = (void **)((char *)this + 296);
  *((_QWORD *)this + 35) = *((_QWORD *)this + 34);
  *((_QWORD *)this + 38) = v22;
  v23 = (char *)*((_QWORD *)this + 40);
  v84 = (void **)((char *)this + 320);
  *((_QWORD *)this + 41) = v23;
  v24 = v15;
  v26 = (uint64_t *)(v11 + 176 * v15 + 56);
  v25 = *v26;
  if (v26[1] == *v26)
  {
    v76 = v20;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = (_DWORD *)(v25 + 32 * v27 + 8);
      v31 = (char *)*((_QWORD *)this + 32);
      v30 = *((_QWORD *)this + 33);
      if ((unint64_t)v31 >= v30)
      {
        v33 = (char *)*v21;
        v34 = (v31 - (_BYTE *)*v21) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          goto LABEL_98;
        v36 = v30 - (_QWORD)v33;
        if (v36 >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 264, v37);
          v33 = (char *)*((_QWORD *)this + 31);
          v31 = (char *)*((_QWORD *)this + 32);
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[4 * v34];
        *(_DWORD *)v39 = *v29;
        v32 = v39 + 4;
        while (v31 != v33)
        {
          v40 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        *((_QWORD *)this + 31) = v39;
        *((_QWORD *)this + 32) = v32;
        *((_QWORD *)this + 33) = &v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v31 = *v29;
        v32 = v31 + 4;
      }
      *((_QWORD *)this + 32) = v32;
      v41 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 176 * v24 + 56) + 32 * v27 + 12);
      v43 = (char *)*((_QWORD *)this + 35);
      v42 = *((_QWORD *)this + 36);
      if ((unint64_t)v43 >= v42)
      {
        v45 = (char *)*v83;
        v46 = (v43 - (_BYTE *)*v83) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          goto LABEL_98;
        v48 = v42 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 288, v49);
          v45 = (char *)*((_QWORD *)this + 34);
          v43 = (char *)*((_QWORD *)this + 35);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[4 * v46];
        *(_DWORD *)v51 = *v41;
        v44 = v51 + 4;
        while (v43 != v45)
        {
          v52 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v51 - 1) = v52;
          v51 -= 4;
        }
        *((_QWORD *)this + 34) = v51;
        *((_QWORD *)this + 35) = v44;
        *((_QWORD *)this + 36) = &v50[4 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_DWORD *)v43 = *v41;
        v44 = v43 + 4;
      }
      *((_QWORD *)this + 35) = v44;
      v53 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 176 * v24 + 56) + 32 * v27 + 16);
      v55 = (char *)*((_QWORD *)this + 38);
      v54 = *((_QWORD *)this + 39);
      if ((unint64_t)v55 >= v54)
      {
        v57 = (char *)*v82;
        v58 = (v55 - (_BYTE *)*v82) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          goto LABEL_98;
        v60 = v54 - (_QWORD)v57;
        if (v60 >> 1 > v59)
          v59 = v60 >> 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 312, v61);
          v57 = (char *)*((_QWORD *)this + 37);
          v55 = (char *)*((_QWORD *)this + 38);
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[4 * v58];
        *(_DWORD *)v63 = *v53;
        v56 = v63 + 4;
        while (v55 != v57)
        {
          v64 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v63 - 1) = v64;
          v63 -= 4;
        }
        *((_QWORD *)this + 37) = v63;
        *((_QWORD *)this + 38) = v56;
        *((_QWORD *)this + 39) = &v62[4 * v61];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *(_DWORD *)v55 = *v53;
        v56 = v55 + 4;
      }
      *((_QWORD *)this + 38) = v56;
      v65 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 176 * v24 + 56) + 32 * v27 + 20);
      v67 = (char *)*((_QWORD *)this + 41);
      v66 = *((_QWORD *)this + 42);
      if ((unint64_t)v67 >= v66)
      {
        v68 = (char *)*v84;
        v69 = (v67 - (_BYTE *)*v84) >> 2;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 62)
LABEL_98:
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        v71 = v66 - (_QWORD)v68;
        if (v71 >> 1 > v70)
          v70 = v71 >> 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
          v72 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 336, v72);
          v68 = (char *)*((_QWORD *)this + 40);
          v67 = (char *)*((_QWORD *)this + 41);
        }
        else
        {
          v73 = 0;
        }
        v74 = &v73[4 * v69];
        *(_DWORD *)v74 = *v65;
        v23 = v74 + 4;
        while (v67 != v68)
        {
          v75 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v74 - 1) = v75;
          v74 -= 4;
        }
        *((_QWORD *)this + 40) = v74;
        *((_QWORD *)this + 41) = v23;
        *((_QWORD *)this + 42) = &v73[4 * v72];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *(_DWORD *)v67 = *v65;
        v23 = v67 + 4;
      }
      *((_QWORD *)this + 41) = v23;
      v11 = *((_QWORD *)this + 21);
      v25 = *(_QWORD *)(v11 + 176 * v24 + 56);
      v27 = ++v28;
    }
    while (v28 < (unint64_t)((*(_QWORD *)(v11 + 176 * v24 + 64) - v25) >> 5));
    v20 = *((_QWORD *)this + 31);
    v76 = *((_QWORD *)this + 32);
  }
  *((_QWORD *)this + 43) = 0;
  v77 = (v76 - v20) >> 2;
  if (v77 != ((uint64_t)(*((_QWORD *)this + 29) - *((_QWORD *)this + 28)) >> 2) / 3uLL)
  {
    v18 = "mSoundStageBasisDistances.size() == mSoundStageBasisVertices.size()/3";
    v81 = 649;
    goto LABEL_97;
  }
  if (v77 != (uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 2)
  {
    v18 = "mSoundStageBasisGains.size() == mSoundStageBasisVertices.size()/3";
    v81 = 650;
    goto LABEL_97;
  }
  if (v77 != (uint64_t)(*((_QWORD *)this + 38) - *((_QWORD *)this + 37)) >> 2)
  {
    v18 = "mSoundStageBasisDRRs.size() == mSoundStageBasisVertices.size()/3";
    v81 = 651;
    goto LABEL_97;
  }
  if (v77 != (v23 - (_BYTE *)*v84) >> 2)
  {
    v18 = "mSoundStageBasisDelays.size() == mSoundStageBasisVertices.size()/3";
    v81 = 652;
    goto LABEL_97;
  }
  v78 = (char **)(v11 + 176 * v24 + 80);
  if ((char **)((char *)this + 352) != v78)
  {
    v79 = *(_QWORD *)(v11 + 176 * v24 + 88);
    std::vector<AUSMChannelParameters>::__assign_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>((char *)this + 352, *v78, v79, (v79 - (uint64_t)*v78) >> 5);
  }
  *((_DWORD *)this + 106) = 1065353216;
  AUSM::SoundStage::incrementSoundStageVerticesAndGains((float32x2_t *)this, 1u);
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v85);
}

void sub_1B64FF7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::SoundStage::incrementSoundStageVerticesAndGains(float32x2_t *this, unsigned int a2)
{
  uint64_t v4;
  int32x2_t v5;
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float32x2_t *v12;
  unint64_t v13;
  NSObject *v14;
  float32x2_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  _BOOL4 v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float32x4_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float32x2_t v71;
  float32x2_t v72;
  float v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x2_t v76;
  unsigned __int32 v77;
  float32x2_t v78;
  float32x2_t v79;
  int8x16_t v80;
  float32x2_t v81;
  float v82;
  float v83;
  float v84;
  unsigned __int32 v86;
  float32x2_t v87;
  float32x2_t v88;
  float v97;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float v103;
  __float2 v104;
  __float2 v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  float v109;
  int32x2_t v110;
  int32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t *v123;
  float32x4_t *v124;
  __int32 v125;
  float32x2_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  float32x2_t v139;
  unsigned int v140;
  uint64_t v141;
  float v142;
  float v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  int8x16_t v147;
  __int32 v148;
  uint64_t v149;
  unint64_t v150;
  int32x2_t v151;
  float v152;
  float v153;
  float v154;
  float32x2_t *v155;
  char v156;
  uint8_t buf[4];
  float32x2_t *v158;
  __int16 v159;
  const char *v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v155 = this;
  v4 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this);
  v6 = v4;
  v156 = v4;
  if ((v4 & 1) != 0)
  {
    v8 = this[21];
    v7 = this[22];
    v9 = *(_QWORD *)&v7 - *(_QWORD *)&v8;
    if (*(_QWORD *)&v7 == *(_QWORD *)&v8)
LABEL_6:
      __assert_rtn("incrementSoundStageVerticesAndGains", "AUSMSoundStage.cpp", 697, "neutralIndex");
    v10 = 0;
    v11 = 0;
    v12 = this + 47;
    v13 = 0x2E8BA2E8BA2E8BA3 * (v9 >> 4);
    while (*(_DWORD *)(*(_QWORD *)&v8 + 176 * v10 + 24) != 4)
    {
      v10 = ++v11;
      if (v13 <= v11)
        goto LABEL_6;
    }
    v16 = 0;
    v17 = 0;
    while (*(_DWORD *)(*(_QWORD *)&v8 + 176 * v16 + 24) != this[51].i32[1])
    {
      v16 = ++v17;
      if (v13 <= v17)
      {
        v17 = v11;
        break;
      }
    }
    v18 = atomic_load((unsigned int *)&this[51]);
    v19 = this[21];
    v20 = this[22];
    v21 = *(_QWORD *)&v20 - *(_QWORD *)&v19;
    if (*(_QWORD *)&v20 == *(_QWORD *)&v19)
    {
LABEL_21:
      v23 = 0;
      v27 = 1;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = 0x2E8BA2E8BA2E8BA3 * (v21 >> 4);
      while (1)
      {
        v25 = *(_DWORD *)(*(_QWORD *)&v19 + 176 * v22 + 24);
        _ZF = v25 == v18;
        v27 = v25 != v18;
        if (_ZF)
          break;
        v22 = ++v23;
        if (v24 <= v23)
          goto LABEL_21;
      }
    }
    v28 = this[52].f32[1];
    v29 = 1.0;
    if (v28 > 0.0)
      v29 = (float)a2 / (float)(v28 * this[53].f32[1]);
    v30 = v29 + this[53].f32[0];
    this[53].f32[0] = v30;
    if (v30 <= 1.0)
      *(float *)v5.i32 = v30;
    else
      *(float *)v5.i32 = 1.0;
    if (v27)
      v31 = v11;
    else
      v31 = v23;
    v32 = v11;
    v33 = v17;
    v34 = *(_QWORD *)(*(_QWORD *)&v19 + 176 * v11 + 152) - *(_QWORD *)(*(_QWORD *)&v19 + 176 * v11 + 144);
    if (v34)
    {
      v136 = v32;
      v137 = v17;
      v139 = v19;
      v140 = v4;
      v35 = 0;
      v36 = 0;
      v37 = v34 >> 4;
      v38 = *(_QWORD *)&v19 + 176 * v17;
      v141 = *(_QWORD *)(v38 + 144);
      v138 = v31;
      v39 = *(_QWORD *)&v19 + 176 * v31;
      v149 = *(_QWORD *)(v39 + 144);
      v150 = v37;
      v145 = 1.0 - *(float *)v5.i32;
      v40 = this[28];
      v41 = this[31];
      v42 = this[34];
      v43 = this[37];
      v44 = this[40];
      v45 = (float *)(*(_QWORD *)(v39 + 56) + 12);
      v46 = (float *)(*(_QWORD *)(v38 + 56) + 12);
      v151 = v5;
      do
      {
        v47 = *(v46 - 1);
        v48 = *v46;
        v50 = v46[1];
        v49 = v46[2];
        v51 = *(float32x4_t *)(v149 + 16 * v36);
        v52 = *(v45 - 1);
        v152 = *v45;
        v153 = v45[1];
        v154 = v45[2];
        if (*(float *)v5.i32 != 1.0)
        {
          v53 = *(float32x4_t *)(v141 + 16 * v36);
          v54 = vmulq_f32(v53, v51);
          v55 = (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL);
          *(float32x2_t *)v54.f32 = vadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v55.f32);
          v54.f32[0] = vaddv_f32(*(float32x2_t *)v54.f32);
          v55.i32[0] = 0;
          v56 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v54, v55)), 0), (int8x16_t)vnegq_f32(v51), (int8x16_t)v51);
          v57 = vsubq_f32(v53, v56);
          v58 = (int8x16_t)vmulq_f32(v57, v57);
          v146 = v53;
          v144 = v56;
          v59 = vaddq_f32(v53, v56);
          v60 = (int8x16_t)vmulq_f32(v59, v59);
          v61 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)))));
          v62 = v61 + v61;
          v63 = 1.0;
          v64 = 1.0;
          if ((float)(v61 + v61) != 0.0)
            v64 = sinf(v61 + v61) / v62;
          if ((float)(v145 * v62) != 0.0)
          {
            v142 = v64;
            v65 = sinf(v145 * v62);
            v64 = v142;
            v63 = v65 / (float)(v145 * v62);
          }
          v66 = *(float *)v151.i32;
          v67 = *(float *)v151.i32 * v62;
          v68 = 1.0;
          if (v67 != 0.0)
          {
            v143 = v64;
            v69 = sinf(v67);
            v64 = v143;
            v66 = *(float *)v151.i32;
            v68 = v69 / v67;
          }
          v70 = v64;
          v71 = vrecpe_f32((float32x2_t)LODWORD(v64));
          v72 = vmul_f32(v71, vrecps_f32((float32x2_t)LODWORD(v70), v71));
          v73 = vmul_f32(v72, vrecps_f32((float32x2_t)LODWORD(v70), v72)).f32[0];
          v72.f32[0] = v145 * (float)(v73 * v63);
          v74 = vmlaq_f32(vmulq_n_f32(v144, v66 * (float)(v73 * v68)), v146, (float32x4_t)vdupq_lane_s32((int32x2_t)v72, 0));
          v75 = (int8x16_t)vmulq_f32(v74, v74);
          v76 = vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL));
          if (vaddv_f32(v76) == 0.0)
          {
            v51 = (float32x4_t)xmmword_1B6629CC0;
          }
          else
          {
            v77 = vadd_f32(v76, (float32x2_t)vdup_lane_s32((int32x2_t)v76, 1)).u32[0];
            v78 = vrsqrte_f32((float32x2_t)v77);
            v79 = vmul_f32(v78, vrsqrts_f32((float32x2_t)v77, vmul_f32(v78, v78)));
            v51 = vmulq_n_f32(v74, vmul_f32(v79, vrsqrts_f32((float32x2_t)v77, vmul_f32(v79, v79))).f32[0]);
          }
        }
        v80 = (int8x16_t)vmulq_f32(v51, v51);
        v81 = vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL));
        v82 = vaddv_f32(v81);
        v83 = 0.0;
        v84 = 0.0;
        if (sqrtf(v82) >= 0.0001)
        {
          _Q1 = (float32x4_t)xmmword_1B6629CC0;
          if (v82 != 0.0)
          {
            v86 = vadd_f32(v81, (float32x2_t)vdup_lane_s32((int32x2_t)v81, 1)).u32[0];
            v87 = vrsqrte_f32((float32x2_t)v86);
            v88 = vmul_f32(v87, vrsqrts_f32((float32x2_t)v86, vmul_f32(v87, v87)));
            _Q1 = vmulq_n_f32(v51, vmul_f32(v88, vrsqrts_f32((float32x2_t)v86, vmul_f32(v88, v88))).f32[0]);
          }
          _S9 = _Q1.i32[2];
          _S10 = _Q1.i32[1];
          __asm { FMLA            S0, S9, V1.S[3] }
          _V2.S[1] = _Q1.i32[1];
          v148 = _Q1.i32[3];
          __asm { FMLA            S1, S10, V2.S[1] }
          v97 = atan2f(_S0 + _S0, (float)(_S1 * -2.0) + 1.0);
          _V1.S[3] = v148;
          __asm { FMLA            S0, S10, V1.S[3] }
          *(float *)v100.i32 = _S0 + _S0;
          v147 = v100;
          if (fabsf(*(float *)v100.i32) >= nexttowardf(1.0, 0.0))
          {
            v101.i32[0] = 1119092736;
            v102.i64[0] = 0x8000000080000000;
            v102.i64[1] = 0x8000000080000000;
            LODWORD(v84) = vbslq_s8(v102, v101, v147).u32[0];
          }
          else
          {
            v84 = asinf(*(float *)v147.i32) * 57.296;
          }
          v83 = v97 * 57.296;
        }
        v103 = v84 * 0.017453;
        v104 = __sincosf_stret(v83 * 0.017453);
        v105 = __sincosf_stret(v103);
        *(float *)(*(_QWORD *)&v40 + 4 * v35) = v104.__cosval * v105.__cosval;
        *(float *)(*(_QWORD *)&v40 + 4 * (v35 + 1)) = v104.__sinval * v105.__cosval;
        *(float *)(*(_QWORD *)&v40 + 4 * (v35 + 2)) = -v105.__sinval;
        v5 = v151;
        *(float *)(*(_QWORD *)&v41 + 4 * v36) = v47 + (float)(*(float *)v151.i32 * (float)(v52 - v47));
        *(float *)(*(_QWORD *)&v42 + 4 * v36) = v48 + (float)(*(float *)v151.i32 * (float)(v152 - v48));
        *(float *)(*(_QWORD *)&v43 + 4 * v36) = v50 + (float)(*(float *)v151.i32 * (float)(v153 - v50));
        *(float *)(*(_QWORD *)&v44 + 4 * v36++) = v49 + (float)(*(float *)v151.i32 * (float)(v154 - v49));
        v35 += 3;
        v45 += 8;
        v46 += 8;
      }
      while (v150 > v36);
      v6 = v140;
      v19 = v139;
      v12 = this + 47;
      v33 = v137;
      v31 = v138;
      v32 = v136;
    }
    v106 = *(_QWORD *)&v19 + 176 * v33;
    v107 = *(_QWORD *)&v19 + 176 * v31;
    this[54].f32[0] = *(float *)(v106 + 136)
                    + (float)(*(float *)v5.i32 * (float)(*(float *)(v107 + 136) - *(float *)(v106 + 136)));
    this[43].f32[0] = *(float *)(v106 + 140)
                    + (float)(*(float *)v5.i32 * (float)(*(float *)(v107 + 140) - *(float *)(v106 + 140)));
    v108 = 1.0;
    if (*(_BYTE *)(v106 + 169))
      v109 = 1.0;
    else
      v109 = 0.0;
    if (!*(_BYTE *)(v107 + 169))
      v108 = 0.0;
    this[43].f32[1] = v109 + (float)(*(float *)v5.i32 * (float)(v108 - v109));
    v110.i32[0] = *(unsigned __int8 *)(v106 + 170);
    v110.i32[1] = *(unsigned __int8 *)(v106 + 171);
    v111.i32[0] = *(unsigned __int8 *)(v107 + 170);
    v111.i32[1] = *(unsigned __int8 *)(v107 + 171);
    v112 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32(v110), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000);
    v113 = (float32x2_t)vdup_lane_s32(v5, 0);
    *(float32x2_t *)((char *)v12 + 60) = vmla_n_f32(v112, vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vceqz_s32(v111), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000), v112), *(float *)v5.i32);
    v114 = *(_QWORD *)&v19 + 176 * v32;
    v115 = *(_QWORD *)(v114 + 80);
    v116 = *(_QWORD *)(v114 + 88);
    if (v115 == v116)
    {
      v122 = (float32x4_t)vdupq_lane_s32(v5, 0);
    }
    else
    {
      v117 = 0;
      v118 = 0;
      v119 = (v116 - v115) >> 5;
      v120 = *(_QWORD *)(*(_QWORD *)&v19 + 176 * v33 + 80);
      v121 = *(_QWORD *)(*(_QWORD *)&v19 + 176 * v31 + 80);
      v122 = (float32x4_t)vdupq_lane_s32(v5, 0);
      do
      {
        v123 = (float32x4_t *)(v120 + 32 * v117);
        v124 = (float32x4_t *)(v121 + 32 * v117);
        v125 = v123[1].i32[3];
        if (v125 != v124[1].i32[3])
          __assert_rtn("incrementSoundStageVerticesAndGains", "AUSMSoundStage.cpp", 765, "loc_start_lfe_params.channelLabel == loc_target_lfe_params.channelLabel");
        v126 = this[44];
        v127 = *(_QWORD *)&this[45] - *(_QWORD *)&v126;
        if (v127)
        {
          v128 = 0;
          v129 = 0;
          v130 = v127 >> 5;
          while (*(_DWORD *)(*(_QWORD *)&v126 + 32 * v128 + 28) != v125)
          {
            v128 = ++v129;
            if (v130 <= v129)
              goto LABEL_65;
          }
          v131 = *(_QWORD *)&v126 + 32 * v129;
          *(float32x4_t *)v131 = vmlaq_f32(*v123, vsubq_f32(*v124, *v123), v122);
          *(float32x2_t *)(v131 + 16) = vmla_f32(*(float32x2_t *)(v120 + 32 * v117 + 16), vsub_f32(*(float32x2_t *)(v121 + 32 * v117 + 16), *(float32x2_t *)(v120 + 32 * v117 + 16)), v113);
        }
LABEL_65:
        v117 = ++v118;
      }
      while (v119 > v118);
    }
    v132 = *(_QWORD *)&v19 + 176 * v33;
    v133 = *(_QWORD *)&v19 + 176 * v31;
    *(float32x4_t *)v12->f32 = vmlaq_f32(*(float32x4_t *)(v132 + 104), vsubq_f32(*(float32x4_t *)(v133 + 104), *(float32x4_t *)(v132 + 104)), v122);
    this[49] = vmla_f32(*(float32x2_t *)(v132 + 120), vsub_f32(*(float32x2_t *)(v133 + 120), *(float32x2_t *)(v132 + 120)), v113);
    if (this[53].f32[0] >= 1.0)
    {
      this[53].i32[0] = 0;
      v134 = atomic_load((unsigned int *)&this[51]);
      this[51].i32[1] = v134;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v14 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v15 = this + 25;
      if (this[27].i8[7] < 0)
        v15 = (float32x2_t *)*v15;
      *(_DWORD *)buf = 136315394;
      v158 = v15;
      v159 = 2080;
      v160 = "incrementSoundStageVerticesAndGains";
      _os_log_debug_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_DEBUG, "[%s|%s] Could not acquire the lock. Vertices and gains not incremented.", buf, 0x16u);
    }
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v155);
  return v6;
}

void sub_1B6500074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t AUSM::SoundStage::warp(uint64_t a1, float32x4_t *a2, float *a3, float *a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  NSObject *v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  _QWORD *v29;
  uint64_t v30;
  float *v31;
  float v32;
  __float2 v33;
  __float2 v34;
  float32x4_t v35;
  uint64_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int8x16_t v45;
  double v46;
  float64x2_t v47;
  float64_t v48;
  unsigned int subtriangle_containment;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  float32x4_t v55;
  uint64_t v56;
  _QWORD *v57;
  const char *v58;
  _QWORD *v59;
  NSObject *v60;
  uint32_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  float v76;
  float v77;
  uint64_t i;
  int32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  __float2 v87;
  __float2 v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  float64x2_t v92;
  float v93;
  uint64_t v94;
  char v95;
  float v96;
  float v97;
  float v98;
  double v99;
  double __C;
  double __B;
  float64x2_t v102;
  _BYTE buf[12];
  __int16 v104;
  const char *v105;
  __int16 v106;
  double v107;
  __int16 v108;
  float64_t v109;
  __int16 v110;
  float64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v94 = a1;
  v95 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a1);
  if ((v95 & 1) == 0)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v16 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
    v29 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v29 = (_QWORD *)*v29;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v29;
    v104 = 2080;
    v105 = "warp";
    v18 = "[%s|%s] Could not acquire the lock. SoundStage warping not done.";
LABEL_29:
    _os_log_debug_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, v18, buf, 0x16u);
    return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
  }
  v10 = *(_QWORD *)(a1 + 168);
  v11 = *(_QWORD *)(a1 + 176) - v10;
  if (!v11)
  {
LABEL_6:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v16 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
    v17 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v17 = (_QWORD *)*v17;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v17;
    v104 = 2080;
    v105 = "warp";
    v18 = "[%s|%s] SoundStage Manager has no Neutral SoundStage";
    goto LABEL_29;
  }
  v12 = 0;
  v13 = 0x2E8BA2E8BA2E8BA3 * (v11 >> 4);
  v14 = 1;
  while (*(_DWORD *)(v10 + 176 * v12 + 24) != 4)
  {
    v12 = v14;
    if (v13 <= v14++)
      goto LABEL_6;
  }
  if (a5 > 0x3E || ((0x4000002000000010uLL >> a5) & 1) == 0)
  {
    v25 = *(float *)(a1 + 344);
    v26 = *a2;
    if (v25 > 0.0)
    {
      v27 = vmulq_f32(v26, v26);
      v28 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
      if (v28 <= 0.001)
        v26 = (float32x4_t)*(unsigned int *)(a1 + 344);
      else
        v26 = vmulq_n_f32(v26, (float)(v25 + (float)((float)(1.0 - v25) * v28)) / v28);
      *a2 = v26;
    }
    v38 = vmulq_f32(v26, v26);
    v39 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]);
    v40 = 0.0;
    v41 = 1.0;
    if (v39 <= 0.001)
    {
LABEL_75:
      if (v39 < 1.0)
      {
        v93 = *(float *)(a1 + 384);
        v86 = *(float *)(a1 + 380) * 0.017453;
        v90 = v26;
        v87 = __sincosf_stret(*(float *)(a1 + 376) * 0.017453);
        v88 = __sincosf_stret(v86);
        *(float32x2_t *)v89.f32 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v87.__sinval), LODWORD(v87.__cosval)), v88.__cosval);
        v89.f32[2] = -v88.__sinval;
        *a2 = vmlaq_n_f32(v90, vmulq_n_f32(v89, v93), 1.0 - v39);
        v41 = (float)((float)(1.0 - v39) * *(float *)(a1 + 388)) + (float)(v39 * v41);
        v40 = (float)((float)(1.0 - v39) * *(float *)(a1 + 392)) + (float)(v39 * v40);
      }
      *a3 = *a3 * (float)(v41 * *(float *)(a1 + 432));
      v37 = __exp10f(v40 / 20.0);
LABEL_78:
      *a4 = v37 * *a4;
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
    }
    if (*(_QWORD *)(a1 + 168) == *(_QWORD *)(a1 + 176))
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v62 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
      v63 = (_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0)
        v63 = (_QWORD *)*v63;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v63;
      v104 = 2080;
      v105 = "triangleLookup";
      v58 = "[%s|%s] SoundStages not initialized";
      v60 = v62;
      v61 = 22;
    }
    else
    {
      v42 = (int32x4_t)vmulq_f32(v26, v26);
      v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
      v43 = vrsqrte_f32((float32x2_t)v42.u32[0]);
      v44 = vmul_f32(v43, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v43, v43)));
      v45 = (int8x16_t)vmulq_n_f32(v26, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v44, v44))).f32[0]);
      v46 = *(float *)v45.i32;
      v47 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 4uLL));
      v48 = v47.f64[1];
      v92 = v47;
      subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(*(int *)(a1 + 160), *(float *)v45.i32, v47.f64[0], v47.f64[1]);
      if ((subtriangle_containment & 0x80000000) != 0
        || (v50 = *(_QWORD *)(a1 + 136),
            0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 144) - v50) >> 3) <= subtriangle_containment))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v56 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_64;
        v59 = (_QWORD *)(a1 + 200);
        if (*(char *)(a1 + 223) < 0)
          v59 = (_QWORD *)*v59;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v59;
        v104 = 2080;
        v105 = "triangleLookup";
        v106 = 2048;
        v107 = v46;
        v108 = 2048;
        v109 = v92.f64[0];
        v110 = 2048;
        v111 = v48;
        v58 = "[%s|%s] Triangle containment not found for coordinates %f, %f, %f";
      }
      else
      {
        __B = v46;
        v102 = v92;
        v51 = v50 + 24 * subtriangle_containment;
        v52 = *(_QWORD *)(v51 + 8);
        if (v52 != v51)
        {
          while (1)
          {
            v53 = *(_DWORD *)(v52 + 16);
            *(_QWORD *)buf = 0;
            v54 = 9 * v53;
            vDSP_dotprD((const double *)(*(_QWORD *)(a1 + 112) + 72 * v53), 1, &__B, 1, (double *)buf, 3uLL);
            if (*(double *)buf > -0.00000011920929)
            {
              __C = 0.0;
              vDSP_dotprD((const double *)(*(_QWORD *)(a1 + 112) + 8 * (v54 + 3)), 1, &__B, 1, &__C, 3uLL);
              if (__C > -0.00000011920929)
              {
                v99 = 0.0;
                vDSP_dotprD((const double *)(*(_QWORD *)(a1 + 112) + 8 * (v54 + 6)), 1, &__B, 1, &v99, 3uLL);
                if (v99 > -0.00000011920929)
                  break;
              }
            }
            v52 = *(_QWORD *)(v52 + 8);
            if (v52 == v51)
              goto LABEL_42;
          }
          v65 = 0;
          v66 = *(double *)buf;
          v67 = __C;
          v96 = v66;
          v97 = v67;
          v68 = v99;
          v98 = v68;
          v69 = *(_QWORD *)(a1 + 88);
          v70 = *(int *)(v69 + 12 * v53);
          v71 = *(_QWORD *)(a1 + 224);
          v72 = 3 * v53 + 1;
          v73 = *(int *)(v69 + 4 * v72);
          v74 = 3 * v53 + 2;
          v75 = *(int *)(v69 + 4 * v74);
          v76 = 0.0;
          do
          {
            v76 = v76 + fabsf(*(float *)((char *)&v96 + v65));
            v65 += 4;
          }
          while (v65 != 12);
          *(float32x2_t *)v55.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v71 + 12 * v73), v67), *(float32x2_t *)(v71 + 12 * v70), v66), *(float32x2_t *)(v71 + 12 * v75), v68);
          v77 = (float)((float)(*(float *)(v71 + 4 * (3 * (int)v73 + 2)) * v67)
                      + (float)(v66 * *(float *)(v71 + 4 * (3 * (int)v70 + 2))))
              + (float)(v68 * *(float *)(v71 + 4 * (3 * (int)v75 + 2)));
          if (v76 > 0.0)
          {
            for (i = 0; i != 12; i += 4)
              *(float *)((char *)&v96 + i) = (float)(1.0 / v76) * *(float *)((char *)&v96 + i);
            v66 = v96;
            v67 = v97;
            v68 = v98;
          }
          v55.f32[2] = v77;
          v79 = (int32x4_t)vmulq_f32(v55, v55);
          v79.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v79, 2), vadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1))).u32[0];
          v80 = vrsqrte_f32((float32x2_t)v79.u32[0]);
          v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v80, v80)));
          v26 = vmulq_n_f32(vmulq_n_f32(v55, vmul_f32(v81, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v81, v81))).f32[0]), v39* (float)((float)((float)(v67 * *(float *)(*(_QWORD *)(a1 + 248) + 4 * v73))+ (float)(v66 * *(float *)(*(_QWORD *)(a1 + 248) + 4 * v70)))+ (float)(v68 * *(float *)(*(_QWORD *)(a1 + 248) + 4 * v75))));
          *a2 = v26;
          v82 = *(_QWORD *)(a1 + 88);
          v83 = *(int *)(v82 + 12 * v53);
          v84 = *(int *)(v82 + 4 * v72);
          v85 = *(int *)(v82 + 4 * v74);
          v41 = (float)((float)(v67 * *(float *)(*(_QWORD *)(a1 + 272) + 4 * v84))
                      + (float)(v66 * *(float *)(*(_QWORD *)(a1 + 272) + 4 * v83)))
              + (float)(v68 * *(float *)(*(_QWORD *)(a1 + 272) + 4 * v85));
          v40 = (float)((float)(v67 * *(float *)(*(_QWORD *)(a1 + 296) + 4 * v84))
                      + (float)(v66 * *(float *)(*(_QWORD *)(a1 + 296) + 4 * v83)))
              + (float)(v68 * *(float *)(*(_QWORD *)(a1 + 296) + 4 * v85));
          goto LABEL_75;
        }
LABEL_42:
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v56 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          goto LABEL_62;
        v57 = (_QWORD *)(a1 + 200);
        if (*(char *)(a1 + 223) < 0)
          v57 = (_QWORD *)*v57;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v57;
        v104 = 2080;
        v105 = "triangleLookup";
        v106 = 2048;
        v107 = v46;
        v108 = 2048;
        v109 = v92.f64[0];
        v110 = 2048;
        v111 = v48;
        v58 = "[%s|%s] Triangle lookup failed for coordinates %f, %f, %f";
      }
      v60 = v56;
      v61 = 52;
    }
    _os_log_error_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_ERROR, v58, buf, v61);
LABEL_62:
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
LABEL_64:
    v16 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
    v64 = (_QWORD *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0)
      v64 = (_QWORD *)*v64;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v64;
    v104 = 2080;
    v105 = "warpNonLFE";
    v18 = "[%s|%s] Triangle lookup failed. Unable to complete SoundStage warping.";
    goto LABEL_29;
  }
  v20 = *(_QWORD *)(a1 + 352);
  v21 = *(_QWORD *)(a1 + 360);
  if (v20 != v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = (v21 - v20) >> 5;
    while (*(_DWORD *)(v20 + 32 * v22 + 28) != a5)
    {
      v22 = ++v23;
      if (v24 <= v23)
        return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
    }
    v30 = v23;
    v31 = (float *)(v20 + 32 * v23);
    v91 = v31[2];
    v32 = v31[1] * 0.017453;
    v33 = __sincosf_stret(*v31 * 0.017453);
    v34 = __sincosf_stret(v32);
    *(float32x2_t *)v35.f32 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v33.__sinval), LODWORD(v33.__cosval)), v34.__cosval);
    v35.f32[2] = -v34.__sinval;
    *a2 = vmulq_n_f32(v35, v91);
    v36 = *(_QWORD *)(a1 + 352) + 32 * v30;
    *a3 = *a3 * (float)(*(float *)(v36 + 12) * *(float *)(a1 + 432));
    v37 = __exp10f(*(float *)(v36 + 16) / 20.0);
    goto LABEL_78;
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v94);
}

void sub_1B6500A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ParametricFilters::ParametricFilters(uint64_t a1, int a2, char a3, int a4, __int128 *a5, float a6)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t (*v10)(_QWORD);
  _OWORD *v11;
  __int128 v12;
  NSObject *v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char **v36;
  char **v37;
  uint64_t v39;
  uint64_t v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(float *)a1 = a6;
  *(_DWORD *)(a1 + 4) = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  v40 = a1 + 40;
  *(_OWORD *)(a1 + 64) = 0u;
  v8 = (uint64_t *)(a1 + 64);
  v9 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = a3;
  *(_DWORD *)(a1 + 116) = 0;
  v10 = MEMORY[0x1E0C8BFE0];
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 164));
  v11 = (_OWORD *)(a1 + 168);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v12 = *a5;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a5 + 2);
    *v11 = v12;
  }
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v13 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    v39 = a1 + 168;
    if (*(char *)(a1 + 191) < 0)
      v39 = *(_QWORD *)v11;
    *(_DWORD *)buf = 136315394;
    v42 = v39;
    v43 = 2080;
    v44 = "ParametricFilters";
    _os_log_debug_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_DEBUG, "[%s|%s] Constructing", buf, 0x16u);
  }
  if (!*(_DWORD *)(a1 + 4) || (v14 = *(unsigned int *)(a1 + 12), !(_DWORD)v14) || *(float *)a1 <= 0.0)
    __assert_rtn("ParametricFilters", "ParametricFilters.cpp", 17, "mNumChannels > 0 && mMaxStages > 0 && mSampleRate > 0");
  v16 = *(_BYTE **)(a1 + 16);
  v15 = *(char **)(a1 + 24);
  v17 = 0x8E38E38E38E38E39 * ((v15 - v16) >> 3);
  v18 = v14 - v17;
  if (v14 > v17)
  {
    v19 = *(_QWORD *)(a1 + 32);
    if (0x8E38E38E38E38E39 * ((v19 - (uint64_t)v15) >> 3) >= v18)
    {
      bzero(*(void **)(a1 + 24), 72 * ((72 * v18 - 72) / 0x48) + 72);
      *(_QWORD *)(a1 + 24) = &v15[72 * ((72 * v18 - 72) / 0x48) + 72];
      goto LABEL_37;
    }
    v20 = 0x8E38E38E38E38E39 * ((v19 - (uint64_t)v16) >> 3);
    v21 = 0x1C71C71C71C71C72 * ((v19 - (uint64_t)v16) >> 3);
    if (v21 > v14)
      v14 = v21;
    if (v20 >= 0x1C71C71C71C71C7)
      v22 = 0x38E38E38E38E38ELL;
    else
      v22 = v14;
    if (v22 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v23 = (char *)operator new(72 * v22);
    v24 = &v23[8 * ((v15 - v16) >> 3)];
    v25 = &v23[72 * v22];
    v26 = 72 * ((72 * v18 - 72) / 0x48) + 72;
    bzero(v24, v26);
    v27 = &v24[v26];
    if (v15 == v16)
    {
      *(_QWORD *)(a1 + 16) = v24;
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(a1 + 32) = v25;
      if (!v15)
        goto LABEL_37;
    }
    else
    {
      do
      {
        v28 = *(_OWORD *)(v15 - 72);
        v29 = *(_OWORD *)(v15 - 56);
        *(_OWORD *)(v24 - 47) = *(_OWORD *)(v15 - 47);
        *(_OWORD *)(v24 - 56) = v29;
        *(_OWORD *)(v24 - 72) = v28;
        v30 = *(_OWORD *)(v15 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v15 - 1);
        *(_OWORD *)(v24 - 24) = v30;
        v24 -= 72;
        *((_QWORD *)v15 - 2) = 0;
        *((_QWORD *)v15 - 1) = 0;
        *((_QWORD *)v15 - 3) = 0;
        v15 -= 72;
      }
      while (v15 != v16);
      v31 = *(char **)(a1 + 16);
      v15 = *(char **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v24;
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(a1 + 32) = v25;
      if (v15 != v31)
      {
        do
        {
          if (*(v15 - 1) < 0)
            operator delete(*((void **)v15 - 3));
          v15 -= 72;
        }
        while (v15 != v31);
        v15 = v31;
      }
      if (!v15)
        goto LABEL_37;
    }
    operator delete(v15);
    goto LABEL_37;
  }
  if (v14 < v17)
  {
    v32 = &v16[72 * v14];
    while (v15 != v32)
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 72;
    }
    *(_QWORD *)(a1 + 24) = v32;
  }
LABEL_37:
  std::vector<double>::resize(v40, (5 * *(_DWORD *)(a1 + 12)));
  std::vector<std::vector<float>>::resize(v9, *(unsigned int *)(a1 + 4));
  std::vector<std::vector<float>>::resize(v8, *(unsigned int *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4))
  {
    v33 = 0;
    v34 = 0;
    v35 = (2 * *(_DWORD *)(a1 + 12) + 2);
    do
    {
      v36 = (char **)(*v9 + v33);
      *(_DWORD *)buf = 0;
      std::vector<float>::assign(v36, v35, buf);
      v37 = (char **)(*v8 + v33);
      *(_DWORD *)buf = 0;
      std::vector<float>::assign(v37, v35, buf);
      ++v34;
      v33 += 24;
    }
    while (v34 < *(unsigned int *)(a1 + 4));
  }
  return a1;
}

void sub_1B6500EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v11 + 136) = 0;
  if (v13)
    (*(void (**)(void))(v11 + 144))();
  v14 = *(_QWORD *)(v11 + 120);
  *(_QWORD *)(v11 + 120) = 0;
  if (v14)
    (*(void (**)(void))(v11 + 128))();
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  v15 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v11 + 48) = v15;
    operator delete(v15);
  }
  a11 = a9;
  std::vector<BiquadStage>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t ParametricFilters::clear(ParametricFilters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char v7;

  v6 = (char *)this + 152;
  v7 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 152);
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 15) = 0;
    (*((void (**)(uint64_t, uint64_t))this + 16))(v3, v2);
  }
  v4 = *((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 17) = 0;
    (*((void (**)(uint64_t, uint64_t))this + 18))(v4, v2);
  }
  ParametricFilters::reset(this);
  *((_DWORD *)this + 29) = 0;
  atomic_store(0, (unsigned __int8 *)this + 8);
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v6);
}

void sub_1B650101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ParametricFilters::reset(ParametricFilters *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char *v13;
  char v14;

  v13 = (char *)this + 152;
  v14 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 152);
  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v2)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      vDSP_vclr(*(float **)(v2 + 24 * v3), 1, (uint64_t)(*(_QWORD *)(v2 + 24 * v3 + 8) - *(_QWORD *)(v2 + 24 * v3)) >> 2);
      v3 = v4;
      v2 = *((_QWORD *)this + 8);
      v5 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 9) - v2) >> 3);
      v6 = v5 >= v4;
      v7 = v5 == v4++;
    }
    while (!v7 && v6);
  }
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) != v8)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      vDSP_vclr(*(float **)(v8 + 24 * v9), 1, (uint64_t)(*(_QWORD *)(v8 + 24 * v9 + 8) - *(_QWORD *)(v8 + 24 * v9)) >> 2);
      v9 = v10;
      v8 = *((_QWORD *)this + 11);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 12) - v8) >> 3);
      v6 = v11 >= v10;
      v7 = v11 == v10++;
    }
    while (!v7 && v6);
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v13);
}

void sub_1B6501130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ParametricFilters::process(uint64_t this, float *const *a2, float *const *a3, vDSP_Length a4, float **a5)
{
  uint64_t v9;
  int v10;
  float *const *v11;
  unsigned __int8 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float *const *v19;
  float **v20;
  float *v21;
  const vDSP_biquad_SetupStruct *v22;
  const vDSP_biquad_SetupStruct *v23;
  float *v24;
  uint64_t __n;
  float __Start;
  float v27;
  float __Step;
  float v29;
  uint64_t v30;
  char v31;

  if ((_DWORD)a4)
  {
    v9 = this;
    v30 = this + 152;
    v10 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(this + 152);
    v31 = v10;
    if (v10)
    {
      v12 = atomic_load((unsigned __int8 *)(v9 + 8));
      if ((v12 & 1) == 0)
        goto LABEL_19;
      __Step = 1.0 / (float)a4;
      v29 = -1.0 / (float)a4;
      atomic_store(0, (unsigned __int8 *)(v9 + 8));
      v13 = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v9 + 64) = *(_OWORD *)(v9 + 88);
      *(_OWORD *)(v9 + 88) = v13;
      v14 = *(_QWORD *)(v9 + 80);
      *(_QWORD *)(v9 + 80) = *(_QWORD *)(v9 + 104);
      *(_QWORD *)(v9 + 104) = v14;
      v15 = *(_OWORD *)(v9 + 120);
      *(_OWORD *)(v9 + 120) = *(_OWORD *)(v9 + 136);
      *(_OWORD *)(v9 + 136) = v15;
      if (*(_BYTE *)(v9 + 112))
      {
        if (*(_DWORD *)(v9 + 4))
        {
          v16 = 0;
          v17 = 0;
          v18 = 0;
          __n = 4 * a4;
          v19 = a3;
          do
          {
            v20 = (float **)&a2[v16];
            if (a3)
              v20 = (float **)v19;
            v21 = *v20;
            __Start = 0.0;
            v27 = 1.0;
            v22 = *(const vDSP_biquad_SetupStruct **)(v9 + 120);
            if (v22)
              vDSP_biquad(v22, *(float **)(*(_QWORD *)(v9 + 64) + v17), a2[v18], 1, *a5, 1, a4);
            else
              memcpy(a5[v18], a2[v18], __n);
            vDSP_vrampmul(*a5, 1, &__Start, &__Step, *a5, 1, a4);
            v23 = *(const vDSP_biquad_SetupStruct **)(v9 + 136);
            if (v23)
              vDSP_biquad(v23, *(float **)(*(_QWORD *)(v9 + 88) + v17), a2[v18], 1, v21, 1, a4);
            else
              memcpy(v21, a2[v18], __n);
            vDSP_vrampmul(v21, 1, &v27, &v29, v21, 1, a4);
            v24 = v21;
            if (!a3)
              v24 = a2[v18];
            vDSP_vadd(*a5, 1, v21, 1, v24, 1, a4);
            ++v18;
            v17 += 24;
            ++v19;
            ++v16;
          }
          while (v18 < *(unsigned int *)(v9 + 4));
        }
      }
      else
      {
LABEL_19:
        ParametricFilters::processCurrentBiquads((const vDSP_biquad_SetupStruct **)v9, a2, a3, a4, a3 == 0, v11);
      }
    }
    return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v30);
  }
  return this;
}

void sub_1B6501394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ParametricFilters::processCurrentBiquads(const vDSP_biquad_SetupStruct **this, float *const *a2, float *const *a3, vDSP_Length __N, char a5, float *const *a6)
{
  uint64_t v10;
  unint64_t v11;
  vDSP_Length v12;
  float *v13;
  unint64_t v14;
  size_t v15;

  if (this[15])
  {
    if (*((_DWORD *)this + 1))
    {
      v10 = 0;
      v11 = 0;
      v12 = __N;
      do
      {
        v13 = a2[v11];
        if ((a5 & 1) == 0)
          v13 = a3[v11];
        vDSP_biquad(this[15], *(float **)((char *)this[8] + v10), a2[v11++], 1, v13, 1, v12);
        v10 += 24;
      }
      while (v11 < *((unsigned int *)this + 1));
    }
  }
  else if ((a5 & 1) == 0 && *((_DWORD *)this + 1))
  {
    v14 = 0;
    v15 = 4 * __N;
    do
    {
      memcpy(a3[v14], a2[v14], v15);
      ++v14;
    }
    while (v14 < *((unsigned int *)this + 1));
  }
}

void ParametricFilters::setParametricFilters(uint64_t a1, CFDictionaryRef *a2, uint64_t a3)
{
  const __CFArray *Value;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  const __CFArray *v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  float v24;
  uint64_t v25;
  std::string::size_type v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  double v30;
  const void *v31;
  const void *v32;
  CFTypeRef v33;
  const __CFString *v34;
  uint64_t v35;
  std::string::size_type v36;
  NSObject *v37;
  _QWORD *v38;
  const char *v39;
  _QWORD *v40;
  std::string::size_type *v41;
  const __CFArray *theArray;
  CFTypeRef cf;
  unsigned int v44[2];
  uint64_t valuePtr;
  std::string __str;
  int v47;
  _BYTE buf[32];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (fabsf(*(float *)a1) <= 0.00000011921 || !*a2)
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v37 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      return;
    v38 = (_QWORD *)(a1 + 168);
    if (*(char *)(a1 + 191) < 0)
      v38 = (_QWORD *)*v38;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v38;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "setParametricFilters";
    v39 = "[%s|%s] Biquad dictionary invalid";
LABEL_69:
    _os_log_error_impl(&dword_1B5ED0000, v37, OS_LOG_TYPE_ERROR, v39, buf, 0x16u);
    return;
  }
  if (!CFDictionaryContainsKey(*a2, CFSTR("Frequency"))
    || !CFDictionaryContainsKey(*a2, CFSTR("Type"))
    || !CFDictionaryContainsKey(*a2, CFSTR("Quality"))
    || !CFDictionaryContainsKey(*a2, CFSTR("Gain")))
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v37 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      return;
    v40 = (_QWORD *)(a1 + 168);
    if (*(char *)(a1 + 191) < 0)
      v40 = (_QWORD *)*v40;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v40;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "setParametricFilters";
    v39 = "[%s|%s] Biquad dictionary misses one or multiple entries";
    goto LABEL_69;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(*a2, CFSTR("Frequency"));
  v7 = (const __CFArray *)CFDictionaryGetValue(*a2, CFSTR("Type"));
  v8 = (const __CFArray *)CFDictionaryGetValue(*a2, CFSTR("Quality"));
  v9 = (const __CFArray *)CFDictionaryGetValue(*a2, CFSTR("Gain"));
  v10 = (const __CFArray *)CFDictionaryGetValue(*a2, CFSTR("Name"));
  theArray = Value;
  Count = CFArrayGetCount(Value);
  *(_QWORD *)buf = Count;
  v12 = v7;
  *(_QWORD *)&buf[8] = CFArrayGetCount(v7);
  *(_QWORD *)&buf[16] = CFArrayGetCount(v8);
  *(_QWORD *)&buf[24] = CFArrayGetCount(v9);
  v13 = 8;
  v14 = buf;
  do
  {
    if (*(_QWORD *)&buf[v13] < Count)
    {
      Count = *(_QWORD *)&buf[v13];
      v14 = &buf[v13];
    }
    v13 += 8;
  }
  while (v13 != 32);
  v15 = *(_DWORD *)v14;
  if (v10)
  {
    v16 = CFArrayGetCount(v10);
    if (v15 >= v16)
      v15 = v16;
  }
  v17 = *(_DWORD *)(a1 + 12);
  if (v15 < v17)
    v17 = v15;
  *(_DWORD *)(a1 + 116) = v17;
  if (v17)
  {
    v18 = 0;
    v19 = 0;
    v41 = (std::string::size_type *)(a1 + 168);
    while (1)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_OWORD *)&buf[16] = 0x3FF0000000000000uLL;
      v49 = 0;
      *(_QWORD *)v44 = 0;
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v19);
      CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, (char *)&valuePtr + 4);
      v21 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, v19);
      CFNumberGetValue(v21, kCFNumberIntType, v44);
      v22 = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v19);
      CFNumberGetValue(v22, kCFNumberFloatType, &valuePtr);
      v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v19);
      CFNumberGetValue(v23, kCFNumberFloatType, &v44[1]);
      if ((HIDWORD(valuePtr) & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (valuePtr & 0x7FFFFFFF) > 0x7F7FFFFF
        || (v44[1] & 0x7FFFFFFF) >= 0x7F800000)
      {
        break;
      }
      v24 = (float)(*((float *)&valuePtr + 1) + *((float *)&valuePtr + 1)) / *(float *)a1;
      if (v24 > 0.99)
        v24 = 0.99;
      *((float *)&valuePtr + 1) = v24;
      if (BiquadCoefficients::SetQ((BiquadCoefficients *)buf, v44[0], v24 * 3.14159265, *(float *)&valuePtr, *(float *)&v44[1]))
      {
        if (getAUSMV2Log(void)::onceToken != -1)
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
        v25 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          v26 = a1 + 168;
          if (*(char *)(a1 + 191) < 0)
            v26 = *v41;
          LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v26;
          WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"setParametricFilters";
          HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
          v47 = v19;
          v27 = v25;
          v28 = "[%s|%s] Biquad Stage %u error; replacing with bypass filter";
          goto LABEL_54;
        }
        goto LABEL_33;
      }
LABEL_34:
      if (v10)
      {
        v31 = CFArrayGetValueAtIndex(v10, v19);
        v32 = v31;
        if (v31)
        {
          CFRetain(v31);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v32);
          v33 = cf;
        }
        else
        {
          v33 = 0;
          cf = 0;
        }
        v34 = CFCopyDescription(v33);
        applesauce::CF::details::CFString_get_value<true>(v34, (uint64_t)&__str);
        if (v34)
          CFRelease(v34);
      }
      else if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        __str = *(std::string *)a3;
      }
      std::string::operator=((std::string *)(*(_QWORD *)(a1 + 16) + v18 + 48), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_47:
          if (cf)
            CFRelease(cf);
        }
      }
      else if (v10)
      {
        goto LABEL_47;
      }
      v35 = *(_QWORD *)(a1 + 16) + v18;
      *(_OWORD *)v35 = *(_OWORD *)&buf[16];
      *(_QWORD *)(v35 + 16) = v49;
      *(_OWORD *)(v35 + 24) = *(_OWORD *)buf;
      *(_BYTE *)(v35 + 40) = 1;
      ++v19;
      v18 += 72;
      if (v19 >= *(unsigned int *)(a1 + 116))
        goto LABEL_65;
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v29 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v36 = a1 + 168;
      if (*(char *)(a1 + 191) < 0)
        v36 = *v41;
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v36;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"setParametricFilters";
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      v47 = v19;
      v27 = v29;
      v28 = "[%s|%s] Biquad Stage %u error -- non-finite parameter; replacing with bypass filter";
LABEL_54:
      _os_log_error_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&__str, 0x1Cu);
    }
LABEL_33:
    v30 = __exp10(0.0);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v49 = 0;
    *(_OWORD *)&buf[16] = *(unint64_t *)&v30;
    goto LABEL_34;
  }
LABEL_65:
  ParametricFilters::setParametricFilters(a1, (_QWORD *)(a1 + 16));
}

void sub_1B6501B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ParametricFilters::setParametricFilters(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  vDSP_biquad_Setup Setup;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v3 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (__int128 *)(*a2 + v4);
      if (*((_BYTE *)v7 + 40))
      {
        v8 = *(_QWORD *)(a1 + 40) + 40 * v6;
        v9 = *v7;
        v10 = v7[1];
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v7 + 4);
        *(_OWORD *)v8 = v9;
        *(_OWORD *)(v8 + 16) = v10;
        ++v6;
        v3 = *(unsigned int *)(a1 + 116);
      }
      ++v5;
      v4 += 72;
    }
    while (v5 < v3);
  }
  else
  {
    v6 = 0;
  }
  Setup = vDSP_biquad_CreateSetup(*(const double **)(a1 + 40), v6);
  v15 = a1 + 152;
  v16 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a1 + 152);
  v13 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = Setup;
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(a1 + 144))(v13, v12);
  *(_QWORD *)(a1 + 144) = MEMORY[0x1E0C8BFE0];
  atomic_store(1u, (unsigned __int8 *)(a1 + 8));
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v15);
}

void sub_1B6501C60(_Unwind_Exception *exception_object)
{
  vDSP_biquad_SetupStruct *v1;

  if (v1)
    vDSP_biquad_DestroySetup(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ParametricFilters::setParametricFilters(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  int *v9;
  float v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  _QWORD *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = -858993459 * ((unint64_t)(a2[1] - *a2) >> 3);
  if (v3 >= *(_DWORD *)(a1 + 12))
    v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 116) = v3;
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    v24 = (_QWORD *)(a1 + 168);
    for (i = 24; ; i += 72)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0x3FF0000000000000;
      v28 = 0;
      v29 = 0;
      v8 = *a2;
      v9 = (int *)(*a2 + v5);
      if ((v9[1] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v9[2] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (*(_DWORD *)(v8 + v5 + 12) & 0x7FFFFFFFu) >= 0x7F800000)
      {
        break;
      }
      v10 = (float)(*((float *)v9 + 1) + *((float *)v9 + 1)) / *(float *)a1;
      if (v10 > 0.99)
        v10 = 0.99;
      if (!BiquadCoefficients::SetQ((BiquadCoefficients *)&v25, *v9, v10 * 3.14159265, *((float *)v9 + 2), *(float *)(v8 + v5 + 12)))
      {
        v17 = *(double *)&v27;
        v20 = v28;
        v19 = v29;
        v18 = v25;
        v16 = v26;
        goto LABEL_21;
      }
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v11 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v12 = v24;
        if (*(char *)(a1 + 191) < 0)
          v12 = (_QWORD *)*v24;
        *(_DWORD *)buf = 136315650;
        v31 = v12;
        v32 = 2080;
        v33 = "setParametricFilters";
        v34 = 1024;
        v35 = v6;
        v13 = v11;
        v14 = "[%s|%s] Biquad Stage %u error; replacing with bypass filter";
LABEL_26:
        _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x1Cu);
      }
LABEL_20:
      v16 = 0;
      v17 = __exp10(0.0);
      v18 = 0;
      v19 = 0;
      v20 = 0;
LABEL_21:
      std::string::operator=((std::string *)(*(_QWORD *)(a1 + 16) + i + 24), (const std::string *)(*a2 + v5 + 16));
      v21 = *(_QWORD *)(a1 + 16) + i;
      *(double *)(v21 - 24) = v17;
      *(_QWORD *)(v21 - 16) = v20;
      *(_QWORD *)(v21 - 8) = v19;
      *(_QWORD *)v21 = v18;
      *(_QWORD *)(v21 + 8) = v16;
      *(_BYTE *)(v21 + 16) = 1;
      ++v6;
      v5 += 40;
      if (v6 >= *(unsigned int *)(a1 + 116))
        return ParametricFilters::setParametricFilters(a1, (_QWORD *)(a1 + 16));
    }
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v15 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v22 = v24;
    if (*(char *)(a1 + 191) < 0)
      v22 = (_QWORD *)*v24;
    *(_DWORD *)buf = 136315650;
    v31 = v22;
    v32 = 2080;
    v33 = "setParametricFilters";
    v34 = 1024;
    v35 = v6;
    v13 = v15;
    v14 = "[%s|%s] Biquad Stage %u error -- non-finite parameter; replacing with bypass filter";
    goto LABEL_26;
  }
  return ParametricFilters::setParametricFilters(a1, (_QWORD *)(a1 + 16));
}

uint64_t ParametricFilters::setParametricFilters(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 *v15;
  __int128 v16;
  _QWORD *v17;
  _BYTE *v18;
  std::string __p;

  v4 = -858993459 * ((a2[1] - *a2) >> 3);
  v5 = a3[1];
  v6 = -1431655765 * ((unint64_t)(v5 - *a3) >> 3);
  if (v6 >= v4)
    v6 = -858993459 * ((a2[1] - *a2) >> 3);
  if (*a3 != v5)
    v4 = v6;
  if (v4 >= *(_DWORD *)(a1 + 12))
    v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 116) = v4;
  if (v4)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 40;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v11)
      {
        v13 = *(_QWORD *)(a1 + 16) + v12;
        v14 = (_QWORD *)(v13 + 8);
        if (*(char *)(v13 + 31) < 0)
        {
          *(_QWORD *)(v13 + 16) = 0;
          v14 = (_QWORD *)*v14;
        }
        else
        {
          *(_BYTE *)(v13 + 31) = 0;
        }
        *(_BYTE *)v14 = 0;
      }
      else
      {
        std::string::operator=((std::string *)(*(_QWORD *)(a1 + 16) + v12 + 8), (const std::string *)(*a3 + v10));
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v11)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
      }
      else
      {
        v15 = (__int128 *)(*a3 + v10);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          v16 = *v15;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
        }
      }
      std::string::operator=((std::string *)(*(_QWORD *)(a1 + 16) + v12 + 8), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = (_QWORD *)(*a2 + v9);
      v18 = (_BYTE *)(*(_QWORD *)(a1 + 16) + v12);
      *((_QWORD *)v18 - 5) = v17[2];
      *((_QWORD *)v18 - 4) = v17[3];
      *((_QWORD *)v18 - 3) = v17[4];
      *((_QWORD *)v18 - 2) = *v17;
      *((_QWORD *)v18 - 1) = v17[1];
      *v18 = 1;
      ++v11;
      v10 += 24;
      v9 += 40;
      v12 += 72;
    }
    while (v11 < *(unsigned int *)(a1 + 116));
  }
  return ParametricFilters::setParametricFilters(a1, (_QWORD *)(a1 + 16));
}

void sub_1B65021D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ParametricFilters::isEnabled(ParametricFilters *this)
{
  _BOOL8 v2;
  char *v4;
  char v5;

  v4 = (char *)this + 152;
  v5 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 152);
  if (!*((_QWORD *)this + 15) || *((_QWORD *)this + 9) == *((_QWORD *)this + 8))
  {
    if (*((_QWORD *)this + 17))
      v2 = *((_QWORD *)this + 12) != *((_QWORD *)this + 11);
    else
      v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
  return v2;
}

uint64_t ParametricFilters::getTailLength(ParametricFilters *this)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  double v8;
  _OWORD v10[2];
  uint64_t v11;

  v1 = *((unsigned int *)this + 29);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (__int128 *)(*((_QWORD *)this + 2) + v3);
    if (*((_BYTE *)v6 + 40))
    {
      v7 = *v6;
      v11 = *((_QWORD *)v6 + 2);
      v10[0] = *(__int128 *)((char *)v6 + 24);
      v10[1] = v7;
      BiquadCoefficients::GetT((BiquadCoefficients *)v10, *(double *)&v7);
      v5 = v5 + vcvtpd_u64_f64(v8);
      v1 = *((unsigned int *)this + 29);
    }
    ++v4;
    v3 += 72;
  }
  while (v4 < v1);
  return v5;
}

void VoiceProcessorV2::GetAndPopulateAUTuningPreset(VoiceProcessorV2 *this, int a2, int a3, char *a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  const __CFArray *v16;
  TuningPListMgr *v17;
  const __CFDictionary *v18;
  TuningPListMgr *Effect;
  const char *v20;
  TuningPListMgr *UnitByName;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  const void *AUPresetFromUnit;
  const __CFNumber *Value;
  const __CFNumber *v26;
  CFTypeID TypeID;
  int v28;
  int v29;
  int v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  unint64_t v46;
  __int128 v47;
  _QWORD *v48;
  NSObject *v49;
  int *v50;
  _BOOL4 v51;
  _BOOL4 v54;
  char v55;
  int v56;
  uint64_t v57;
  int v58;
  const char *v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  NSObject *v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  __int128 v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  size_t v78;
  std::string *v79;
  __int128 v80;
  void **v81;
  std::string::size_type v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  const char *v88;
  int *v89;
  uint64_t v90;
  int v91;
  const char *v92;
  const char *v93;
  char *v94;
  char *v95;
  void *v96;
  std::string::size_type v97;
  unsigned __int8 v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  void *__p[2];
  int64_t v105;
  std::string v106;
  int v107;
  int valuePtr;
  const char *v109;
  __int16 v110;
  int v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  uint64_t v116;

  v7 = 0;
  v116 = *MEMORY[0x1E0C80C00];
  v95 = (char *)this + 15897;
  if (a3)
    v8 = (char *)this + 6392;
  else
    v8 = (char *)this + 10336;
  if (a3)
    v9 = (char *)this + 7032;
  else
    v9 = (char *)this + 10904;
  v10 = *((_QWORD *)this + 341);
  if (a3)
    v11 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
  else
    v11 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
  v12 = v11;
  if (a3)
    v13 = 71;
  else
    v13 = 62;
  v14 = v11;
  while (1)
  {
    v15 = *v14;
    v14 += 18;
    if (v15 == a2)
      break;
    if (v13 == ++v7)
    {
      v16 = 0;
      goto LABEL_18;
    }
  }
  v16 = (const __CFArray *)&v11[18 * v7 + 2];
LABEL_18:
  v107 = 0;
  v17 = TuningPListMgr::lookupPlist_(v10, a4, 0);
  if (v17
    && (Effect = (TuningPListMgr *)TuningPListMgr::getEffect(v17, v18)) != 0
    && (UnitByName = TuningPListMgr::getUnitByName(Effect, v16, v20)) != 0)
  {
    v23 = UnitByName;
    AUPresetFromUnit = TuningPListMgr::getAUPresetFromUnit(UnitByName, v22);
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(v23, CFSTR("bypass"));
    v94 = v9;
    if (Value)
    {
      v26 = Value;
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v26))
      {
        v28 = CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr);
        v9 = v94;
        v29 = valuePtr;
        if (!v28)
          v29 = 0;
      }
      else
      {
        v29 = 0;
        v9 = v94;
      }
    }
    else
    {
      v29 = 0;
    }
    v107 = v29;
    v30 = a2;
    v61 = &v8[8 * a2];
    *(_QWORD *)v61 = AUPresetFromUnit;
    if (AUPresetFromUnit)
    {
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)&v9[24 * a2], 0, 0, 0, 8uLL, v61, 1);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v62 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v63 = (*v62 ? *v62 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          v64 = 0;
          v65 = v11;
          while (1)
          {
            v66 = *v65;
            v65 += 18;
            if (v66 == a2)
              break;
            if (v13 == ++v64)
            {
              v67 = 0;
              goto LABEL_158;
            }
          }
          v67 = (uint64_t)&v11[18 * v64 + 2];
LABEL_158:
          v109 = "vpTuningHelper.cpp";
          valuePtr = 136315906;
          v110 = 1024;
          if (v107)
            v88 = "(bypassed)";
          else
            v88 = "";
          v111 = 35;
          v112 = 2080;
          v113 = (const char *)v67;
          v114 = 2080;
          v115 = v88;
          _os_log_impl(&dword_1B5ED0000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found aupreset for au: %s %s", (uint8_t *)&valuePtr, 0x26u);
        }
      }
      v89 = (int *)*((_QWORD *)this + 1570);
      if (v89 && (*v95 || v95[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v90 = 0;
        v9 = v94;
        while (1)
        {
          v91 = *v12;
          v12 += 18;
          if (v91 == a2)
            break;
          if (v13 == ++v90)
          {
            v92 = 0;
            goto LABEL_173;
          }
        }
        v92 = (const char *)&v11[18 * v90 + 2];
LABEL_173:
        if (v107)
          v93 = "(bypassed)";
        else
          v93 = "";
        CALegacyLog::log(v89, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 35, "GetAndPopulateAUTuningPreset", "found aupreset for au: %s %s", v92, v93);
      }
      else
      {
        v9 = v94;
      }
      goto LABEL_177;
    }
  }
  else
  {
    *(_QWORD *)&v8[8 * a2] = 0;
    v30 = a2;
  }
  if (a2 == 6 && (a3 & 1) == 0)
  {
    snprintf((char *)&valuePtr, 0x80uLL, "couldn't find aupreset for experimental au: %s ", "(DL-)OCNS");
    std::string::basic_string[abi:ne180100]<0>(&v106, "vpTuningHelper.cpp");
    std::to_string(&v99, 40);
    v31 = std::string::insert(&v99, 0, ":", 1uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v100, ":", 1uLL);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v96, "GetAndPopulateAUTuningPreset");
    if ((v98 & 0x80u) == 0)
      v35 = (const std::string::value_type *)&v96;
    else
      v35 = (const std::string::value_type *)v96;
    if ((v98 & 0x80u) == 0)
      v36 = v98;
    else
      v36 = v97;
    v37 = std::string::append(&v101, v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v102, " ", 1uLL);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = strlen((const char *)&valuePtr);
    v42 = std::string::append(&v103, (const std::string::value_type *)&valuePtr, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v105 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v105 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v105 >= 0)
      v45 = HIBYTE(v105);
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(&v106, (const std::string::value_type *)v44, v45);
    if (SHIBYTE(v105) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if ((char)v98 < 0)
      operator delete(v96);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    v46 = *((_QWORD *)this + 2001);
    if (v46 >= *((_QWORD *)this + 2002))
    {
      v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 2000, (__int128 *)&v106);
    }
    else
    {
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)this + 2001), v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      }
      else
      {
        v47 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
        *(_QWORD *)(v46 + 16) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
        *(_OWORD *)v46 = v47;
      }
      v60 = v46 + 24;
      *((_QWORD *)this + 2001) = v46 + 24;
    }
    *((_QWORD *)this + 2001) = v60;
LABEL_155:
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    goto LABEL_177;
  }
  if (a3)
  {
    if ((a2 - 1) < 3 || a2 == 63)
    {
LABEL_177:
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)&v9[24 * v30], 0x15u, 0, 0, 4uLL, &v107, 1);
      return;
    }
    if (a2 == 56)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v48 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        v49 = (*v48 ? *v48 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          valuePtr = 136315650;
          v109 = "vpTuningHelper.cpp";
          v110 = 1024;
          v111 = 47;
          v112 = 2080;
          v113 = "(UL-)KeystrokeSuppressor";
          _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> couldn't find aupreset for au: %s, expected to be bypassed", (uint8_t *)&valuePtr, 0x1Cu);
        }
      }
      v50 = (int *)*((_QWORD *)this + 1570);
      if (v50 && (*v95 || v95[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v50, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 47, "GetAndPopulateAUTuningPreset", "couldn't find aupreset for au: %s, expected to be bypassed", "(UL-)KeystrokeSuppressor");
      }
      goto LABEL_177;
    }
  }
  v51 = a2 != 0;
  v54 = a2 != 27 && a2 != 61 && a2 != 70;
  if (a3)
    v51 = v54;
  v55 = a3 ^ 1;
  if (a2 == 1)
    v56 = a3;
  else
    v56 = 1;
  if (a2 != 24)
    v55 = 0;
  if ((v55 & 1) == 0 && v56 && v51)
  {
    v57 = 0;
    while (1)
    {
      v58 = *v12;
      v12 += 18;
      if (v58 == a2)
        break;
      if (v13 == ++v57)
      {
        v59 = 0;
        goto LABEL_120;
      }
    }
    v59 = (const char *)&v11[18 * v57 + 2];
LABEL_120:
    snprintf((char *)&valuePtr, 0x80uLL, "couldn't find aupreset for au: %s ", v59);
    std::string::basic_string[abi:ne180100]<0>(&v106, "vpTuningHelper.cpp");
    std::to_string(&v99, 74);
    v68 = std::string::insert(&v99, 0, ":", 1uLL);
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    v70 = std::string::append(&v100, ":", 1uLL);
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v96, "GetAndPopulateAUTuningPreset");
    if ((v98 & 0x80u) == 0)
      v72 = (const std::string::value_type *)&v96;
    else
      v72 = (const std::string::value_type *)v96;
    if ((v98 & 0x80u) == 0)
      v73 = v98;
    else
      v73 = v97;
    v74 = std::string::append(&v101, v72, v73);
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append(&v102, " ", 1uLL);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    v78 = strlen((const char *)&valuePtr);
    v79 = std::string::append(&v103, (const std::string::value_type *)&valuePtr, v78);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v105 = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    if (v105 >= 0)
      v81 = __p;
    else
      v81 = (void **)__p[0];
    if (v105 >= 0)
      v82 = HIBYTE(v105);
    else
      v82 = (std::string::size_type)__p[1];
    std::string::append(&v106, (const std::string::value_type *)v81, v82);
    if (SHIBYTE(v105) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if ((char)v98 < 0)
      operator delete(v96);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    v83 = 16000;
    if (a3)
      v83 = 15976;
    v84 = (char *)this + v83;
    v85 = *((_QWORD *)v84 + 1);
    if (v85 >= *((_QWORD *)v84 + 2))
    {
      v87 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v84, (__int128 *)&v106);
    }
    else
    {
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)v84 + 1), v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
      }
      else
      {
        v86 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
        *(_QWORD *)(v85 + 16) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
        *(_OWORD *)v85 = v86;
      }
      v87 = v85 + 24;
      *((_QWORD *)v84 + 1) = v85 + 24;
    }
    *((_QWORD *)v84 + 1) = v87;
    goto LABEL_155;
  }
}

void sub_1B6502D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v45;

  *(_QWORD *)(v44 + 8) = v45;
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::GetAndPopulateAuxAUTuningPreset(VoiceProcessorV2 *this, int a2, char *a3)
{
  char *v6;
  uint64_t v7;
  TuningPListMgr *v8;
  const __CFDictionary *v9;
  TuningPListMgr *Effect;
  const char *v11;
  TuningPListMgr *UnitByName;
  const __CFDictionary *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  int *v17;
  _QWORD *v18;
  NSObject *v19;
  int *v20;
  const void *AUPresetFromUnit;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  char buffer[64];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 15897;
  v7 = 10888;
  if (a2)
    v7 = 7016;
  CFStringGetCString(*(CFStringRef *)((char *)this + v7), buffer, 64, 0x600u);
  v8 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), a3, 0);
  if (v8
    && (Effect = (TuningPListMgr *)TuningPListMgr::getEffect(v8, v9)) != 0
    && (UnitByName = TuningPListMgr::getUnitByName(Effect, (const __CFArray *)buffer, v11)) != 0
    && (AUPresetFromUnit = TuningPListMgr::getAUPresetFromUnit(UnitByName, v13)) != 0)
  {
    v14 = 6480;
    if (a2)
      v14 = 2608;
    AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)((char *)this + v14 + 4352), 0, 0, 0, 8uLL, &AUPresetFromUnit, 1);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v15 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v16 = (*v15 ? *v15 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v23 = "vpTuningHelper.cpp";
        v24 = 1024;
        v25 = 102;
        v26 = 2080;
        v27 = buffer;
        _os_log_impl(&dword_1B5ED0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found aupreset for aux au: %s", buf, 0x1Cu);
      }
    }
    v17 = (int *)*((_QWORD *)this + 1570);
    if (v17 && (*v6 || v6[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 102, "GetAndPopulateAuxAUTuningPreset", "found aupreset for aux au: %s");
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v18 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v19 = (*v18 ? *v18 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v23 = "vpTuningHelper.cpp";
        v24 = 1024;
        v25 = 105;
        v26 = 2080;
        v27 = buffer;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> couldn't find aupreset for aux au: %s", buf, 0x1Cu);
      }
    }
    v20 = (int *)*((_QWORD *)this + 1570);
    if (v20 && (*v6 || v6[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v20, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 105, "GetAndPopulateAuxAUTuningPreset", "couldn't find aupreset for aux au: %s");
    }
  }
}

uint64_t VoiceProcessorV2::LoadContinuityCapturePresetOverrides(VoiceProcessorV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, BOOL a9)
{
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  int v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  int v31;
  std::string *v32;
  __int128 v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  int v36;
  unsigned int v37;
  std::string *v38;
  __int128 v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *p_str;
  const __CFDictionary *v43;
  _BYTE *v44;
  uint64_t *v45;
  uint64_t Tuning;
  uint64_t *v47;
  _QWORD *v48;
  NSObject *v49;
  std::string *v50;
  _QWORD *v51;
  NSObject *v52;
  std::string *v53;
  uint64_t v54;
  int *v55;
  int v56;
  int *v57;
  std::string *v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  const char *v65;
  std::string *v66;
  const char *v67;
  uint64_t v68;
  char *v69;
  int *v70;
  int v71;
  char *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int *v75;
  int v76;
  int *v77;
  std::string *v78;
  std::string *v79;
  int *v80;
  uint64_t v81;
  int *v82;
  int v83;
  const char *v84;
  std::string *v85;
  const char *v86;
  uint64_t v88;
  std::string __str;
  _BYTE __p[28];
  __int16 v91;
  std::string *v92;
  __int16 v93;
  int *v94;
  std::string v95;
  char __s[8];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  std::string::append(&__str, "gen-vp", 6uLL);
  strcpy(__s, "aufx");
  std::string::basic_string[abi:ne180100]<0>(&v95, __s);
  v14 = std::string::insert(&v95, 0, "-", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (__p[23] >= 0)
    v16 = __p;
  else
    v16 = *(const std::string::value_type **)__p;
  if (__p[23] >= 0)
    v17 = __p[23];
  else
    v17 = *(_QWORD *)&__p[8];
  std::string::append(&__str, v16, v17);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  v18 = bswap32(a3);
  *(_DWORD *)__s = v18;
  if (((char)v18 - 32) > 0x5E
    || (((__int16)v18 >> 8) - 32) > 0x5E
    || ((v18 << 8 >> 24) - 32) > 0x5E
    || ((v18 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v95, a3);
  }
  else
  {
    __s[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v95, __s);
  }
  v19 = std::string::insert(&v95, 0, "-", 1uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (__p[23] >= 0)
    v21 = __p;
  else
    v21 = *(const std::string::value_type **)__p;
  if (__p[23] >= 0)
    v22 = __p[23];
  else
    v22 = *(_QWORD *)&__p[8];
  std::string::append(&__str, v21, v22);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  strcpy(__s, "appl");
  std::string::basic_string[abi:ne180100]<0>(&v95, __s);
  v23 = std::string::insert(&v95, 0, "-", 1uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (__p[23] >= 0)
    v25 = __p;
  else
    v25 = *(const std::string::value_type **)__p;
  if (__p[23] >= 0)
    v26 = __p[23];
  else
    v26 = *(_QWORD *)&__p[8];
  std::string::append(&__str, v25, v26);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  strcpy(__s, "evil");
  std::string::basic_string[abi:ne180100]<0>(&v95, __s);
  v27 = std::string::insert(&v95, 0, "-", 1uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (__p[23] >= 0)
    v29 = __p;
  else
    v29 = *(const std::string::value_type **)__p;
  if (__p[23] >= 0)
    v30 = __p[23];
  else
    v30 = *(_QWORD *)&__p[8];
  std::string::append(&__str, v29, v30);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  v31 = bswap32(a4);
  *(_DWORD *)__s = v31;
  if (((char)v31 - 32) > 0x5E
    || (((__int16)v31 >> 8) - 32) > 0x5E
    || ((v31 << 8 >> 24) - 32) > 0x5E
    || ((v31 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v95, a4);
  }
  else
  {
    __s[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v95, __s);
  }
  v32 = std::string::insert(&v95, 0, "-", 1uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (__p[23] >= 0)
    v34 = __p;
  else
    v34 = *(const std::string::value_type **)__p;
  if (__p[23] >= 0)
    v35 = __p[23];
  else
    v35 = *(_QWORD *)&__p[8];
  std::string::append(&__str, v34, v35);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  std::string::append(&__str, "-ulnk", 5uLL);
  v36 = bswap32(a5);
  *(_DWORD *)__s = v36;
  v37 = (char)v36 - 32;
  if (v37 > 0x5E
    || (SBYTE1(v36) - 32) > 0x5E
    || (SBYTE2(v36) - 32) > 0x5E
    || ((v36 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v95, a5);
  }
  else
  {
    __s[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v95, __s);
  }
  v38 = std::string::insert(&v95, 0, "-", 1uLL);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v38->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (__p[23] >= 0)
    v40 = __p;
  else
    v40 = *(const std::string::value_type **)__p;
  if (__p[23] >= 0)
    v41 = __p[23];
  else
    v41 = *(_QWORD *)&__p[8];
  std::string::append(&__str, v40, v41);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  *(_QWORD *)__s = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v43 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)p_str, 1u);
  v44 = (char *)this + 15897;
  *(_QWORD *)__s = v43;
  v45 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
  if (v43)
  {
    LODWORD(Tuning) = 0;
    goto LABEL_84;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &__str;
  else
    v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
  Tuning = TuningPListMgr::loadTuning(*((_QWORD *)this + 341), "Generic", "AU", (const char *)v50, 1u);
  if (!(_DWORD)Tuning)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__str;
    else
      v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v43 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v53, 1u);
    *(_QWORD *)__s = v43;
    if (!v43)
      goto LABEL_195;
    goto LABEL_84;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v51 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
  {
    v52 = (*v51 ? *v51 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = v36;
      if (v37 > 0x5E
        || (SBYTE1(v36) - 32) > 0x5E
        || (SBYTE2(v36) - 32) > 0x5E
        || ((v36 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v95, a5);
      }
      else
      {
        __p[4] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v95, __p);
      }
      v74 = 0;
      v75 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
      while (1)
      {
        v76 = *v75;
        v75 += 18;
        if (v76 == a2)
          break;
        if (++v74 == 71)
        {
          v77 = 0;
          goto LABEL_166;
        }
      }
      v77 = &VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v74 + 2];
LABEL_166:
      v78 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &__str;
      v79 = &v95;
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v79 = (std::string *)v95.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "vpTuningHelper.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 240;
      *(_WORD *)&__p[18] = 2080;
      *(_QWORD *)&__p[20] = v79;
      v91 = 2080;
      v92 = v78;
      v93 = 2080;
      v94 = v77;
      _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> could not find '%s' override preset \"%s\" for %s!", __p, 0x30u);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
    }
  }
  v80 = (int *)*((_QWORD *)this + 1570);
  if (v80 && (*v44 || *((_BYTE *)this + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v88 = VPLogScope(void)::scope;
    LODWORD(v95.__r_.__value_.__l.__data_) = v36;
    if (v37 > 0x5E
      || (SBYTE1(v36) - 32) > 0x5E
      || (SBYTE2(v36) - 32) > 0x5E
      || ((v36 >> 24) - 32) > 0x5E)
    {
      std::to_string((std::string *)__p, a5);
    }
    else
    {
      v95.__r_.__value_.__s.__data_[4] = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v95);
    }
    v81 = 0;
    v82 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      v83 = *v82;
      v82 += 18;
      if (v83 == a2)
        break;
      if (++v81 == 71)
      {
        v84 = 0;
        goto LABEL_188;
      }
    }
    v84 = (const char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v81 + 2];
LABEL_188:
    v85 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = &__str;
    v86 = __p;
    if (__p[23] < 0)
      v86 = *(const char **)__p;
    CALegacyLog::log(v80, 2, v88, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 240, "LoadContinuityCapturePresetOverrides", "could not find '%s' override preset \"%s\" for %s!", v86, (const char *)v85, v84);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v43 = *(const __CFDictionary **)__s;
  v45 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
  if (*(_QWORD *)__s)
  {
LABEL_84:
    CFRetain(v43);
    AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 879, 0, 0, 0, 8uLL, __s, 1);
    CFRelease(*(CFTypeRef *)__s);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v47 = v45;
    v48 = (_QWORD *)v45[43];
    if (v48 && CALegacyLog::LogEnabled(4, (uint64_t)v48, 0))
    {
      v49 = (*v48 ? *v48 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = v36;
        if (v37 > 0x5E
          || (SBYTE1(v36) - 32) > 0x5E
          || (SBYTE2(v36) - 32) > 0x5E
          || ((v36 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v95, a5);
        }
        else
        {
          __p[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v95, __p);
        }
        v54 = 0;
        v55 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        while (1)
        {
          v56 = *v55;
          v55 += 18;
          if (v56 == a2)
            break;
          if (++v54 == 71)
          {
            v57 = 0;
            goto LABEL_125;
          }
        }
        v57 = &VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v54 + 2];
LABEL_125:
        v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &__str;
        v59 = &v95;
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v59 = (std::string *)v95.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136316162;
        *(_QWORD *)&__p[4] = "vpTuningHelper.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 255;
        *(_WORD *)&__p[18] = 2080;
        *(_QWORD *)&__p[20] = v59;
        v91 = 2080;
        v92 = v58;
        v93 = 2080;
        v94 = v57;
        _os_log_impl(&dword_1B5ED0000, v49, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> found '%s' override preset \"%s\" for %s", __p, 0x30u);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
      }
    }
    v60 = (int *)*((_QWORD *)this + 1570);
    if (v60 && (*v44 || *((_BYTE *)this + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v61 = v47[43];
      LODWORD(v95.__r_.__value_.__l.__data_) = v36;
      if (v37 > 0x5E
        || (SBYTE1(v36) - 32) > 0x5E
        || (SBYTE2(v36) - 32) > 0x5E
        || ((v36 >> 24) - 32) > 0x5E)
      {
        std::to_string((std::string *)__p, a5);
      }
      else
      {
        v95.__r_.__value_.__s.__data_[4] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v95);
      }
      v62 = 0;
      v63 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
      while (1)
      {
        v64 = *v63;
        v63 += 18;
        if (v64 == a2)
          break;
        if (++v62 == 71)
        {
          v65 = 0;
          goto LABEL_147;
        }
      }
      v65 = (const char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v62 + 2];
LABEL_147:
      v66 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &__str;
      v67 = __p;
      if (__p[23] < 0)
        v67 = *(const char **)__p;
      CALegacyLog::log(v60, 4, v61, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 255, "LoadContinuityCapturePresetOverrides", "found '%s' override preset \"%s\" for %s", v67, (const char *)v66, v65);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v68 = 0;
    v69 = (char *)this + 4616;
    v70 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    Tuning = Tuning;
    while (1)
    {
      v71 = *v70;
      v70 += 18;
      if (v71 == a2)
        break;
      if (++v68 == 71)
      {
        v72 = 0;
        goto LABEL_158;
      }
    }
    v72 = (char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v68 + 2];
LABEL_158:
    std::string::basic_string[abi:ne180100]<0>(__p, v72);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v73 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v69, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v95);
    std::string::operator=((std::string *)(v73 + 40), &__str);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
LABEL_195:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return Tuning;
}

void sub_1B6503E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::LoadAUDataPreset(VoiceProcessorV2 *this, const char *a2, char *a3, const char *a4)
{
  const char *v5;
  _QWORD *v7;
  NSObject *v8;
  int *v9;
  _QWORD *v10;
  NSObject *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *p_str;
  _QWORD *v16;
  NSObject *v17;
  int *v18;
  std::string *v19;
  const __CFDictionary *v20;
  _QWORD *v21;
  NSObject *v22;
  std::string *v23;
  int *v24;
  std::string *v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  NSObject *v28;
  std::string *v29;
  int *v30;
  std::string *v31;
  uint64_t v32;
  std::string *v33;
  _QWORD *v34;
  NSObject *v35;
  int *v36;
  std::string *v37;
  const __CFDictionary *v38;
  _QWORD *v39;
  NSObject *v40;
  std::string *v41;
  int *v42;
  std::string *v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  NSObject *v46;
  std::string *v47;
  int *v48;
  std::string *v49;
  uint64_t v50;
  std::string *v51;
  _QWORD *v52;
  NSObject *v53;
  int *v54;
  std::string *v55;
  const __CFDictionary *v56;
  _QWORD *v57;
  NSObject *v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  std::string *v73;
  _QWORD *v74;
  NSObject *v75;
  int *v76;
  std::string *v77;
  const __CFDictionary *v78;
  std::string *v79;
  __int128 v80;
  uint64_t v81;
  std::string *v82;
  _QWORD *v83;
  NSObject *v84;
  int *v85;
  std::string *v86;
  const __CFDictionary *v87;
  _QWORD *v88;
  __CFString *Mutable;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v98;
  _QWORD *v99;
  NSObject *v100;
  int *v101;
  std::string *v102;
  const __CFDictionary *v103;
  size_t v104;
  const char *v105;
  size_t v106;
  const char *v107;
  size_t v108;
  const char *v109;
  size_t v110;
  uint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::string *v114;
  _QWORD *v115;
  NSObject *v116;
  int *v117;
  _OWORD *v118;
  std::string *v119;
  const __CFDictionary *v120;
  _OWORD *v121;
  uint64_t v122;
  std::string *v123;
  uint64_t v124;
  std::string *v125;
  _QWORD *v126;
  NSObject *v127;
  int *v128;
  _OWORD *v129;
  std::string *v130;
  const __CFDictionary *v131;
  _OWORD *v132;
  uint64_t v133;
  std::string *v134;
  uint64_t v135;
  std::string *v136;
  _QWORD *v137;
  NSObject *v138;
  int *v139;
  _OWORD *v140;
  std::string *v141;
  const __CFDictionary *v142;
  _OWORD *v143;
  uint64_t v144;
  std::string *v145;
  __int128 v146;
  uint64_t v147;
  std::string *v148;
  _QWORD *v149;
  NSObject *v150;
  int *v151;
  std::string *v152;
  const __CFDictionary *v153;
  _QWORD *v154;
  NSObject *v155;
  int *v156;
  uint64_t v157;
  std::string *v158;
  _QWORD *v159;
  NSObject *v160;
  int *v161;
  std::string *v162;
  const __CFDictionary *v163;
  _QWORD *v164;
  NSObject *v165;
  int *v166;
  uint64_t v167;
  std::string *v168;
  _QWORD *v169;
  NSObject *v170;
  int *v171;
  std::string *v172;
  const __CFDictionary *v173;
  _QWORD *v174;
  NSObject *v175;
  int *v176;
  std::string *v177;
  __int128 v178;
  size_t v179;
  std::string *v180;
  __int128 v181;
  std::string *v182;
  __int128 v183;
  size_t v184;
  std::string *v185;
  std::string::size_type v186;
  char v187;
  uint64_t v188;
  std::string *v189;
  std::string *v190;
  std::string::size_type v191;
  char v192;
  uint64_t v193;
  std::string *v194;
  _QWORD *v195;
  NSObject *v196;
  int *v197;
  std::string *v198;
  const __CFDictionary *v199;
  _QWORD *v200;
  NSObject *v201;
  int *v202;
  uint64_t v203;
  std::string *v204;
  _QWORD *v205;
  NSObject *v206;
  int *v207;
  std::string *v208;
  const __CFDictionary *v209;
  _QWORD *v210;
  NSObject *v211;
  int *v212;
  uint64_t v213;
  uint64_t v214;
  std::string *v215;
  _QWORD *v216;
  NSObject *v217;
  int *v218;
  std::string *v219;
  const __CFDictionary *v220;
  _QWORD *v221;
  NSObject *v222;
  int *v223;
  size_t size;
  _BYTE *v225;
  std::string *v226;
  uint64_t v227;
  std::string *p_s;
  _QWORD *v229;
  NSObject *v230;
  int *v231;
  uint64_t v232;
  std::string *v233;
  _QWORD *v234;
  NSObject *v235;
  int *v236;
  std::string::size_type v237;
  BOOL v238;
  std::string *v239;
  const char *v240;
  const __CFDictionary *v241;
  _QWORD *v242;
  NSObject *v243;
  int *v244;
  _QWORD *v245;
  NSObject *v246;
  int *v247;
  unsigned int v248;
  char v249;
  uint64_t v250;
  char v251;
  unint64_t v252;
  char v253;
  int v254;
  uint64_t v255;
  int *v256;
  int v257;
  unsigned int v258;
  int ChatFlavor;
  char v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  int *v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  int *v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  std::string *v277;
  const __CFDictionary *v278;
  _QWORD *v279;
  NSObject *v280;
  uint64_t v281;
  int *v282;
  int v283;
  int *v284;
  uint64_t v285;
  std::string *v286;
  _QWORD *v287;
  NSObject *v288;
  uint64_t v289;
  int *v290;
  int v291;
  int *v292;
  std::string *v293;
  std::string *v294;
  int *v295;
  uint64_t v296;
  uint64_t v297;
  int *v298;
  int v299;
  const char *v300;
  std::string *v301;
  uint64_t v302;
  int *v303;
  int v304;
  char *v305;
  unsigned __int8 *v306;
  std::string *v307;
  int *v308;
  uint64_t v309;
  uint64_t v310;
  int *v311;
  int v312;
  const char *v313;
  std::string *v314;
  char *v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t i;
  uint64_t v319;
  uint64_t v320;
  int *v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  std::string *v326;
  const __CFDictionary *v327;
  _QWORD *v328;
  NSObject *v329;
  std::string *v330;
  int *v331;
  uint64_t v332;
  std::string *v333;
  unsigned __int8 *v334;
  uint64_t v335;
  std::string *v336;
  _QWORD *v337;
  NSObject *v338;
  std::string *v339;
  int *v340;
  uint64_t v341;
  std::string *v342;
  std::string *v343;
  _QWORD *v344;
  NSObject *v345;
  int *v346;
  unsigned int v347;
  unsigned int v348;
  std::string *v349;
  const __CFDictionary *v350;
  _QWORD *v351;
  NSObject *v352;
  std::string *v353;
  int *v354;
  uint64_t v355;
  std::string *v356;
  unsigned __int8 *v357;
  uint64_t v358;
  std::string *v359;
  _QWORD *v360;
  NSObject *v361;
  std::string *v362;
  int *v363;
  uint64_t v364;
  std::string *v365;
  std::string *v366;
  _QWORD *v367;
  NSObject *v368;
  int *v369;
  size_t v370;
  _BYTE *v371;
  std::string *v372;
  uint64_t v373;
  std::string *v374;
  _QWORD *v375;
  NSObject *v376;
  int *v377;
  uint64_t v378;
  std::string *v379;
  size_t v380;
  _BYTE *v381;
  std::string *v382;
  _QWORD *v383;
  NSObject *v384;
  int *v385;
  std::string::size_type v386;
  BOOL v387;
  std::string *v388;
  const char *v389;
  const __CFDictionary *v390;
  _QWORD *v391;
  NSObject *v392;
  int *v393;
  _QWORD *v394;
  NSObject *v395;
  int *v396;
  uint64_t j;
  uint64_t v398;
  unint64_t v399;
  int *v400;
  int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  std::string *v405;
  std::string *v406;
  __int128 v407;
  const std::string::value_type *v408;
  std::string::size_type v409;
  int v410;
  std::string *v411;
  __int128 v412;
  std::string *v413;
  __int128 v414;
  const std::string::value_type *v415;
  std::string::size_type v416;
  int v417;
  std::string *v418;
  __int128 v419;
  const std::string::value_type *v420;
  std::string::size_type v421;
  int v422;
  std::string *v423;
  __int128 v424;
  const std::string::value_type *v425;
  std::string::size_type v426;
  std::string *v427;
  std::string *v428;
  __int128 v429;
  const std::string::value_type *v430;
  std::string::size_type v431;
  int v432;
  unsigned int v433;
  uint64_t v434;
  std::string *v435;
  int v436;
  unsigned int v437;
  int v438;
  _QWORD *v439;
  NSObject *v440;
  std::string *v441;
  int *v442;
  uint64_t v443;
  const char *v444;
  std::string *v445;
  std::string *v446;
  __int128 v447;
  std::string *v448;
  std::string::size_type v449;
  std::string *v450;
  __int128 v451;
  std::string *v452;
  __int128 v453;
  std::string *v454;
  std::string::size_type v455;
  std::string *v456;
  __int128 v457;
  std::string *v458;
  std::string::size_type v459;
  std::string *v460;
  __int128 v461;
  std::string *v462;
  std::string::size_type v463;
  std::string *v464;
  std::string *v465;
  __int128 v466;
  std::string *v467;
  std::string::size_type v468;
  const char *v469;
  int Tuning;
  _QWORD *v471;
  NSObject *v472;
  std::string *v473;
  int *v474;
  uint64_t v475;
  const char *v476;
  std::string *v477;
  std::string *v478;
  __int128 v479;
  std::string *v480;
  std::string::size_type v481;
  std::string *v482;
  __int128 v483;
  std::string *v484;
  __int128 v485;
  std::string *v486;
  std::string::size_type v487;
  std::string *v488;
  std::string *v489;
  __int128 v490;
  std::string *v491;
  std::string::size_type v492;
  const char *v493;
  int v494;
  _QWORD *v495;
  NSObject *v496;
  std::string *v497;
  int *v498;
  uint64_t v499;
  const char *v500;
  _QWORD *v501;
  NSObject *v502;
  unsigned int v503;
  std::string *v504;
  const __CFDictionary *v505;
  _QWORD *v506;
  NSObject *v507;
  _QWORD *v508;
  NSObject *v509;
  std::string *v510;
  int *v511;
  uint64_t v512;
  const char *v513;
  std::string *v514;
  int *v515;
  uint64_t v516;
  const char *v517;
  std::string *v518;
  int *v519;
  uint64_t v520;
  const char *v521;
  unsigned int v522;
  const char *v523;
  size_t v524;
  const char *v525;
  size_t v526;
  const char *v527;
  size_t v528;
  const char *v529;
  size_t v530;
  _QWORD *v531;
  NSObject *v532;
  std::string *v533;
  int *v534;
  std::string *v535;
  std::string *v536;
  _QWORD *v537;
  NSObject *v538;
  int *v539;
  std::string *v540;
  const __CFDictionary *v541;
  _QWORD *v542;
  NSObject *v543;
  int *v544;
  unsigned __int8 *v545;
  _QWORD *v546;
  NSObject *v547;
  int *v548;
  char v549;
  uint64_t v550;
  unsigned int v551;
  char v552;
  uint64_t v553;
  int *v554;
  int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  size_t v559;
  std::string *v560;
  std::string *v561;
  __int128 v562;
  std::string *v563;
  std::string::size_type v564;
  int v565;
  std::string *v566;
  __int128 v567;
  std::string *v568;
  std::string::size_type v569;
  std::string *v570;
  std::string *v571;
  __int128 v572;
  std::string *v573;
  std::string::size_type v574;
  int v575;
  std::string *v576;
  __int128 v577;
  std::string *v578;
  std::string::size_type v579;
  int v580;
  std::string *v581;
  __int128 v582;
  std::string *v583;
  std::string::size_type v584;
  std::string *v585;
  std::string *v586;
  __int128 v587;
  std::string *v588;
  std::string::size_type v589;
  uint64_t v590;
  int *v591;
  int v592;
  char *v593;
  unsigned int v594;
  unsigned int v595;
  size_t v596;
  std::string *v597;
  std::string *v598;
  __int128 v599;
  std::string *v600;
  std::string::size_type v601;
  std::string *v602;
  std::string *v603;
  __int128 v604;
  std::string *v605;
  std::string::size_type v606;
  std::string *v607;
  std::string *v608;
  __int128 v609;
  std::string *v610;
  std::string::size_type v611;
  int v612;
  std::string *v613;
  __int128 v614;
  std::string *v615;
  std::string::size_type v616;
  int v617;
  std::string *v618;
  __int128 v619;
  std::string *v620;
  std::string::size_type v621;
  std::string *v622;
  std::string *v623;
  __int128 v624;
  std::string *v625;
  std::string::size_type v626;
  BOOL v627;
  int v628;
  char *v629;
  char v630;
  unsigned int v631;
  char *v632;
  uint64_t *v633;
  std::string v634;
  CFTypeRef v635;
  char v636;
  std::string cf;
  AUPropertyItem **v638;
  CFStringRef v639;
  char v640;
  CFTypeRef v641;
  char v642;
  int TuningInSubdirs;
  std::string::value_type v644[8];
  std::string::value_type v645[16];
  _QWORD v646[2];
  _BYTE buf[40];
  const char *v648;
  std::string v649;
  std::string __s;
  std::string __str;
  uint64_t v652;

  v5 = a2;
  v652 = *MEMORY[0x1E0C80C00];
  v632 = (char *)this + 15897;
  TuningInSubdirs = 0;
  if (!a2)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v7 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v8 = (*v7 ? *v7 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 274;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "./";
        _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> LoadAUDataPreset(): Using '%s' as sub directory", buf, 0x1Cu);
      }
    }
    v9 = (int *)*((_QWORD *)this + 1570);
    v5 = "./";
    if (v9 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v9, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 274, "LoadAUDataPreset", "LoadAUDataPreset(): Using '%s' as sub directory", "./");
    }
  }
  if (!a3)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v10 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      v11 = (*v10 ? *v10 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 277;
        _os_log_impl(&dword_1B5ED0000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> LoadAUDataPreset(): <INFO> file prefix is NULL!", buf, 0x12u);
      }
    }
    v12 = (int *)*((_QWORD *)this + 1570);
    if (v12 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v12, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 277, "LoadAUDataPreset", "LoadAUDataPreset(): <INFO> file prefix is NULL!");
    }
  }
  v641 = CFStringCreateWithCString(0, "./", 0x600u);
  v642 = 1;
  v638 = (AUPropertyItem **)this;
  v639 = CFStringCreateWithCString(0, v5, 0x600u);
  v640 = 1;
  v633 = (uint64_t *)((char *)this + 4656);
  v13 = *((_QWORD *)this + 582);
  if ((v13 & 0x40000000) != 0)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x626D326Eu);
    v14 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)p_str, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v14, (const __CFString ***)buf, 4u, 1u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v16 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v17 = (*v16 ? *v16 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 383;
          _os_log_impl(&dword_1B5ED0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fail to find Beam forming AU data presets!! Disabling beam former!", buf, 0x12u);
        }
      }
      v18 = (int *)*((_QWORD *)this + 1570);
      if (v18 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v18, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 383, "LoadAUDataPreset", "fail to find Beam forming AU data presets!! Disabling beam former!");
      }
    }
    else
    {
      v649.__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__str;
      else
        v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v20 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v19, 1u);
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      if (v20)
      {
        CFRetain(v20);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 969, 0, 0, 0, 8uLL, &v649, 0);
        CFRelease(v649.__r_.__value_.__l.__data_);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v21 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v22 = (*v21 ? *v21 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &__str;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 395;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v23;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = "(UL-)BF";
            _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found AU data preset: %s for %s", buf, 0x26u);
          }
        }
        v24 = (int *)*((_QWORD *)this + 1570);
        if (v24 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &__str;
          CALegacyLog::log(v24, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 395, "LoadAUDataPreset", "found AU data preset: %s for %s", (const char *)v25, "(UL-)BF");
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "(UL-)BF");
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v26 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4616, buf, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
        std::string::operator=((std::string *)(v26 + 40), &__str);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v27 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v28 = (*v27 ? *v27 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = &__str;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 398;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v29;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = "(UL-)BF";
            _os_log_impl(&dword_1B5ED0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> : fail to load AU data preset: %s for %s! Disabling beam former!", buf, 0x26u);
          }
        }
        v30 = (int *)*((_QWORD *)this + 1570);
        if (v30 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &__str;
          CALegacyLog::log(v30, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 398, "LoadAUDataPreset", ": fail to load AU data preset: %s for %s! Disabling beam former!", (const char *)v31, "(UL-)BF");
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v13 = *v633;
  }
  if ((v13 & 0x80000000) != 0)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x626D6E66u);
    v32 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &__str;
    else
      v33 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v33, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v32, (const __CFString ***)buf, 4u, 1u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v34 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v35 = (*v34 ? *v34 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 409;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "(UL-)BeamNF";
          _os_log_impl(&dword_1B5ED0000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fail to find %s data presets!! Disabling AU.", buf, 0x1Cu);
        }
      }
      v36 = (int *)*((_QWORD *)this + 1570);
      if (v36 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v36, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 409, "LoadAUDataPreset", "fail to find %s data presets!! Disabling AU.", "(UL-)BeamNF");
      }
    }
    else
    {
      v649.__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__str;
      else
        v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v38 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v37, 1u);
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      if (v38)
      {
        CFRetain(v38);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 972, 0, 0, 0, 8uLL, &v649, 0);
        CFRelease(v649.__r_.__value_.__l.__data_);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v39 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v40 = (*v39 ? *v39 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            v41 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__str;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 420;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v41;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = "(UL-)BeamNF";
            _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found AU data preset: %s for %s", buf, 0x26u);
          }
        }
        v42 = (int *)*((_QWORD *)this + 1570);
        if (v42 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &__str;
          CALegacyLog::log(v42, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 420, "LoadAUDataPreset", "found AU data preset: %s for %s", (const char *)v43, "(UL-)BeamNF");
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "(UL-)BeamNF");
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v44 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4616, buf, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
        std::string::operator=((std::string *)(v44 + 40), &__str);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v45 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v46 = (*v45 ? *v45 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            v47 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = &__str;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 423;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v47;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = "(UL-)BeamNF";
            _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fail to load AU data preset: %s for %s! Disabling AU!", buf, 0x26u);
          }
        }
        v48 = (int *)*((_QWORD *)this + 1570);
        if (v48 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &__str;
          CALegacyLog::log(v48, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 423, "LoadAUDataPreset", "fail to load AU data preset: %s for %s! Disabling AU!", (const char *)v49, "(UL-)BeamNF");
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v13 = *v633;
  }
  if ((v13 & 0x100000000) != 0)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x626E6673u);
    v50 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &__str;
    else
      v51 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v51, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v50, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v52 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v53 = (*v52 ? *v52 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 439;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "BeamNFSel";
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = "(UL-)BeamNFSelector";
          _os_log_impl(&dword_1B5ED0000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fail to load AU data preset: %s for %s! Continuing anyway...", buf, 0x26u);
        }
      }
      v54 = (int *)*((_QWORD *)this + 1570);
      if (v54 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v54, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 439, "LoadAUDataPreset", "fail to load AU data preset: %s for %s! Continuing anyway...", "BeamNFSel", "(UL-)BeamNFSelector");
      }
    }
    else
    {
      __s.__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &__str;
      else
        v55 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v56 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v55, 2u);
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
      if (v56)
      {
        CFRetain(v56);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 975, 0x11B2u, 0, 0, 8uLL, &__s, 1);
        CFRelease(__s.__r_.__value_.__l.__data_);
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v57 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v58 = (*v57 ? *v57 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 447;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "BeamSystemNoiseProfile";
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = "(UL-)BeamNFSelector";
            _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fail to load AU data preset: %s for %s! not disabling AU!", buf, 0x26u);
          }
        }
        v59 = (int *)*((_QWORD *)this + 1570);
        if (v59 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v59, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 447, "LoadAUDataPreset", "fail to load AU data preset: %s for %s! not disabling AU!", "BeamSystemNoiseProfile", "(UL-)BeamNFSelector");
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (TuningInSubdirs)
  {
    (*(void (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 312))(this);
    VPChannelConfig::SetChConfig((VoiceProcessorV2 *)((char *)this + 448), 2, "top or top front", 1u);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = *((_DWORD *)this + 106);
    v64 = *((_DWORD *)this + 112);
    do
    {
      if (((1 << v60) & v63) == 0 || ((1 << v60) & v64) == 0)
        v61 += ((v64 | v63) >> v60) & 1;
      else
        v62 |= 1 << v61++;
      ++v60;
    }
    while (v60 != 6);
    *((_DWORD *)this + 105) = v62;
  }
  v66 = *v633;
  if ((*v633 & 0x1000000400) != 0)
  {
    v67 = 0;
    if ((v66 & 0x400) != 0)
      v68 = 10;
    else
      v68 = 36;
    v69 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      v70 = *v69;
      v69 += 18;
      if (v70 == v68)
        break;
      if (++v67 == 71)
      {
        v71 = 0;
        goto LABEL_228;
      }
    }
    v71 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v67 + 1];
LABEL_228:
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, v71);
    v72 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &__str;
    else
      v73 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v73, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v72, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v74 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v75 = (*v74 ? *v74 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 478;
          _os_log_impl(&dword_1B5ED0000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find BeamItFD/TD AU data plist!\n", buf, 0x12u);
        }
      }
      v76 = (int *)*((_QWORD *)this + 1570);
      if (v76 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v76, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 478, "LoadAUDataPreset", "failed to find BeamItFD/TD AU data plist!\n");
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &__str;
      else
        v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v78 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v77, 2u);
      *(_QWORD *)buf = v78;
      if (v78)
      {
        CFRetain(v78);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * v68 + 879, 0x1216u, 0, 0, 8uLL, buf, 1);
        CFRelease(*(CFTypeRef *)buf);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v66 = *v633;
  }
  if ((v66 & 0x800) != 0)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>((std::string *)buf, a3, 0x626D7464u);
    v79 = std::string::append((std::string *)buf, "-nfn", 4uLL);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v81 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &__str;
    else
      v82 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v82, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v81, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v83 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v84 = (*v83 ? *v83 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 497;
          _os_log_impl(&dword_1B5ED0000, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find NFN AU data plist!\n", buf, 0x12u);
        }
      }
      v85 = (int *)*((_QWORD *)this + 1570);
      if (v85 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v85, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 497, "LoadAUDataPreset", "failed to find NFN AU data plist!\n");
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = &__str;
      else
        v86 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v87 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v86, 2u);
      *(_QWORD *)buf = v87;
      if (v87)
      {
        CFRetain(v87);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 912, 0x1216u, 0, 0, 8uLL, buf, 1);
        CFRelease(*(CFTypeRef *)buf);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v66 = *v633;
  }
  if ((v66 & 2) != 0)
  {
    v88 = (_QWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v88 = (_QWORD *)*v88;
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x61756678u);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__str, 0x66697266u);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6170706Cu);
    v627 = (char)v88;
    if (a3)
      CFStringAppendFormat(Mutable, 0, CFSTR("%s/%s/%s/%s-%s-%s-%s.plist"));
    else
      CFStringAppendFormat(Mutable, 0, CFSTR("%s/%s/%s/%s-%s-%s.plist"));
    v90 = 0;
    *(_QWORD *)buf = Mutable;
    buf[8] = 1;
    do
    {
      v91 = v90 + 1;
      if (((*(unint64_t *)((char *)v633 + (((unint64_t)dword_1B66A2B90[v90] >> 3) & 0x1FFFFFF8)) >> dword_1B66A2B90[v90]) & 1) != 0)
      {
        v92 = 0;
        if (v91 <= 1)
          v93 = 1;
        else
          v93 = v90 + 1;
        v94 = 1;
        do
        {
          if (((*((_DWORD *)this + 112) >> v92) & 1) != 0)
          {
            if (v94 == v93)
              goto LABEL_302;
            ++v94;
          }
          ++v92;
        }
        while (v92 != 32);
        v92 = 33;
LABEL_302:
        v95 = (char *)this + 24 * v90;
        *((_DWORD *)v95 + 2188) = v92;
        CACFString::operator=((uint64_t)(v95 + 8736), (uint64_t)buf);
      }
      v90 = v91;
    }
    while (v91 != 4);
    CACFString::~CACFString((CACFString *)buf);
  }
  v96 = *((_QWORD *)this + 1104);
  if ((v96 & 0x80000000000) != 0)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x6C6B6972u);
    v97 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = &__str;
    else
      v98 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v98, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v97, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v99 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v100 = (*v99 ? *v99 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 565;
          _os_log_impl(&dword_1B5ED0000, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find TweakaLeakIR biquad table plist, coefficients will be calculated at runtime instead\n", buf, 0x12u);
        }
      }
      v101 = (int *)*((_QWORD *)this + 1570);
      if (v101 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v101, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 565, "LoadAUDataPreset", "failed to find TweakaLeakIR biquad table plist, coefficients will be calculated at runtime instead\n");
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &__str;
      else
        v102 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v103 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v102, 2u);
      *(_QWORD *)buf = v103;
      if (v103)
      {
        CFRetain(v103);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1492, 0x22C4u, 0, 0, 8uLL, buf, 1);
        CFRelease(*(CFTypeRef *)buf);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v96 = *((_QWORD *)this + 1104);
  }
  if ((v96 & 0x100000000000000) != 0)
  {
    memset(buf, 0, 24);
    if (a3)
    {
      v104 = strlen(a3);
      std::string::append((std::string *)buf, a3, v104);
      std::string::append((std::string *)buf, "-", 1uLL);
    }
    std::string::append((std::string *)buf, "vp-", 3uLL);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x61756678u);
    v106 = strlen(v105);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v106);
    std::string::append((std::string *)buf, "-", 1uLL);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x73707033u);
    v108 = strlen(v107);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v108);
    std::string::append((std::string *)buf, "-", 1uLL);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6170706Cu);
    v110 = strlen(v109);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v110);
    __str = *(std::string *)buf;
    v111 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v112 = &__str;
    else
      v112 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v112, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v111, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (!TuningInSubdirs)
      goto LABEL_364;
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>((std::string *)buf, a3, 0x73707033u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = *(std::string *)buf;
    v113 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    v114 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__str
         : (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v114, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v113, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v115 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v116 = (*v115 ? *v115 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 592;
          _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find SPV3 AU data plist!\n", buf, 0x12u);
        }
      }
      v117 = (int *)*((_QWORD *)this + 1570);
      if (v117 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v117, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 592, "LoadAUDataPreset", "failed to find SPV3 AU data plist!\n");
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      std::string::basic_string[abi:ne180100]<0>(&__s, "vp_spp_error");
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      v118 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, (void **)&__s.__r_.__value_.__l.__data_, &v649);
      std::string::__assign_external((std::string *)((char *)v118 + 56), "failed to find SPV3 AU data plist", 0x21uLL);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_364:
      cf.__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v119 = &__str;
      else
        v119 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v120 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v119, 2u);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
      if (v120)
      {
        CFRetain(v120);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1531, 0xFA03u, 0, 0, 8uLL, &cf, 1);
        CFRelease(cf.__r_.__value_.__l.__data_);
LABEL_372:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v96 = *((_QWORD *)this + 1104);
        goto LABEL_375;
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      std::string::basic_string[abi:ne180100]<0>(&__s, "vp_spp_error");
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      v121 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, (void **)&__s.__r_.__value_.__l.__data_, &v649);
      std::string::__assign_external((std::string *)((char *)v121 + 56), "failed to get SPV3 plistDictionary", 0x22uLL);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
    goto LABEL_372;
  }
LABEL_375:
  if ((v96 & 0x200000000000000) == 0)
    goto LABEL_415;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_2::operator()<$_1,unsigned int,$_2,char const*>(&__str, a3, 0x73707033u, "hf");
  v122 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = &__str;
  else
    v123 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v123, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v122, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_3::operator()<$_1,unsigned int,$_2,char const*>((std::string *)buf, a3, 0x73707033u, "hf");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = *(std::string *)buf;
    v124 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    v125 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__str
         : (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v125, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v124, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v126 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v127 = (*v126 ? *v126 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 631;
          _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find SPV3 HF AU data plist!\n", buf, 0x12u);
        }
      }
      v128 = (int *)*((_QWORD *)this + 1570);
      if (v128 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v128, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 631, "LoadAUDataPreset", "failed to find SPV3 HF AU data plist!\n");
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      std::string::basic_string[abi:ne180100]<0>(&__s, "vp_spp_error");
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, (void **)&__s.__r_.__value_.__l.__data_, &v649);
      std::string::__assign_external((std::string *)((char *)v129 + 56), "failed to find SPV3 HF AU data plist", 0x24uLL);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
LABEL_411:
      AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
      goto LABEL_412;
    }
  }
  cf.__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v130 = &__str;
  else
    v130 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v131 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v130, 2u);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (!v131)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    std::string::basic_string[abi:ne180100]<0>(&__s, "vp_spp_error");
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
    v132 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, (void **)&__s.__r_.__value_.__l.__data_, &v649);
    std::string::__assign_external((std::string *)((char *)v132 + 56), "failed to get SPV3 HF plistDictionary", 0x25uLL);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_411;
  }
  CFRetain(v131);
  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1534, 0xFA03u, 0, 0, 8uLL, &cf, 1);
  CFRelease(cf.__r_.__value_.__l.__data_);
LABEL_412:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v96 = *((_QWORD *)this + 1104);
LABEL_415:
  if ((v96 & 0x400000000000000) == 0)
    goto LABEL_454;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_2::operator()<$_1,unsigned int,$_2,char const*>(&__str, a3, 0x73707033u, "lf");
  v133 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v134 = &__str;
  else
    v134 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v134, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v133, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (!TuningInSubdirs)
    goto LABEL_444;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_3::operator()<$_1,unsigned int,$_2,char const*>((std::string *)buf, a3, 0x73707033u, "lf");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = *(std::string *)buf;
  v135 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  v136 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__str
       : (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v136, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v135, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v137 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v138 = (*v137 ? *v137 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 670;
        _os_log_impl(&dword_1B5ED0000, v138, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find SPV3 LF AU data plist!\n", buf, 0x12u);
      }
    }
    v139 = (int *)*((_QWORD *)this + 1570);
    if (v139 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v139, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 670, "LoadAUDataPreset", "failed to find SPV3 LF AU data plist!\n");
    }
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    std::string::basic_string[abi:ne180100]<0>(&__s, "vp_spp_error");
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
    v140 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, (void **)&__s.__r_.__value_.__l.__data_, &v649);
    std::string::__assign_external((std::string *)((char *)v140 + 56), "failed to find SPV3 LF AU data plist", 0x24uLL);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_444:
    cf.__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v141 = &__str;
    else
      v141 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v142 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v141, 2u);
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
    if (v142)
    {
      CFRetain(v142);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1537, 0xFA03u, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf.__r_.__value_.__l.__data_);
      goto LABEL_452;
    }
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    std::string::basic_string[abi:ne180100]<0>(&__s, "vp_spp_error");
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
    v143 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, (void **)&__s.__r_.__value_.__l.__data_, &v649);
    std::string::__assign_external((std::string *)((char *)v143 + 56), "failed to get SPV3 LF plistDictionary", 0x25uLL);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&buf[8]);
LABEL_452:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_454:
  v144 = *v633;
  if ((*v633 & 0x8000000000000) == 0)
    goto LABEL_501;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>((std::string *)buf, a3, 0x6F636E73u);
  v145 = std::string::append((std::string *)buf, "-fctm", 5uLL);
  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v147 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v148 = &__str;
  else
    v148 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v148, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v147, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v149 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v150 = (*v149 ? *v149 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 703;
        _os_log_impl(&dword_1B5ED0000, v150, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find fixed NS AU data plist! Bypassing NS!\n", buf, 0x12u);
      }
    }
    v151 = (int *)*((_QWORD *)this + 1570);
    if (v151 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v151, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 703, "LoadAUDataPreset", "failed to find fixed NS AU data plist! Bypassing NS!\n");
    }
LABEL_497:
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1032, 0x15u, 0, 0, 4uLL, buf, 1);
    goto LABEL_498;
  }
  __s.__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v152 = &__str;
  else
    v152 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v153 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v152, 2u);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
  if (!v153)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v154 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v155 = (*v154 ? *v154 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 713;
        _os_log_impl(&dword_1B5ED0000, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing NS!\n", buf, 0x12u);
      }
    }
    v156 = (int *)*((_QWORD *)this + 1570);
    if (v156 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v156, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 713, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing NS!\n");
    }
    goto LABEL_497;
  }
  CFRetain(v153);
  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1032, 0x11A8u, 0, 0, 8uLL, &__s, 1);
  CFRelease(__s.__r_.__value_.__l.__data_);
LABEL_498:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v144 = *v633;
LABEL_501:
  if ((v144 & 0x200000000000000) == 0)
    goto LABEL_546;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x64727662u);
  v157 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v158 = &__str;
  else
    v158 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v158, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v157, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v159 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v160 = (*v159 ? *v159 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 725;
        _os_log_impl(&dword_1B5ED0000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find reverb suppressor AU data plist! Bypassing Reverb Suppressor!\n", buf, 0x12u);
      }
    }
    v161 = (int *)*((_QWORD *)this + 1570);
    if (v161 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v161, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 725, "LoadAUDataPreset", "failed to find reverb suppressor AU data plist! Bypassing Reverb Suppressor!\n");
    }
LABEL_542:
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1050, 0x15u, 0, 0, 4uLL, buf, 1);
    goto LABEL_543;
  }
  __s.__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v162 = &__str;
  else
    v162 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v163 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v162, 2u);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
  if (!v163)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v164 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v165 = (*v164 ? *v164 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 735;
        _os_log_impl(&dword_1B5ED0000, v165, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing Reverb Suppressor!\n", buf, 0x12u);
      }
    }
    v166 = (int *)*((_QWORD *)this + 1570);
    if (v166 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v166, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 735, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing Reverb Suppressor!\n");
    }
    goto LABEL_542;
  }
  CFRetain(v163);
  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1050, 0x13ECu, 0, 0, 8uLL, &__s, 1);
  CFRelease(__s.__r_.__value_.__l.__data_);
LABEL_543:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v144 = *v633;
LABEL_546:
  if ((v144 & 0x20) == 0)
    goto LABEL_591;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x73656E73u);
  v167 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v168 = &__str;
  else
    v168 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v168, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v167, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v169 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v170 = (*v169 ? *v169 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 746;
        _os_log_impl(&dword_1B5ED0000, v170, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find mic sense AU data plist! Bypassing Mic Sense!\n", buf, 0x12u);
      }
    }
    v171 = (int *)*((_QWORD *)this + 1570);
    if (v171 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v171, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 746, "LoadAUDataPreset", "failed to find mic sense AU data plist! Bypassing Mic Sense!\n");
    }
LABEL_587:
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 894, 0x15u, 0, 0, 4uLL, buf, 1);
    goto LABEL_588;
  }
  __s.__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v172 = &__str;
  else
    v172 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v173 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v172, 2u);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
  if (!v173)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v174 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v175 = (*v174 ? *v174 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 755;
        _os_log_impl(&dword_1B5ED0000, v175, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing Mic Sense!\n", buf, 0x12u);
      }
    }
    v176 = (int *)*((_QWORD *)this + 1570);
    if (v176 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v176, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 755, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing Mic Sense!\n");
    }
    goto LABEL_587;
  }
  CFRetain(v173);
  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 894, 0x3E8u, 0, 0, 8uLL, &__s, 1);
  CFRelease(__s.__r_.__value_.__l.__data_);
LABEL_588:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v144 = *v633;
LABEL_591:
  if ((v144 & 0x4000000000000) == 0)
    goto LABEL_653;
  memset(&__str, 0, sizeof(__str));
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&cf, a3, 0x73656E73u);
  v177 = std::string::append(&cf, "-fctm-", 6uLL);
  v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v649.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v649.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v645, **((_DWORD **)this + 292));
  v179 = strlen(v645);
  v180 = std::string::append(&v649, v645, v179);
  v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  v182 = std::string::append(&__s, "-", 1uLL);
  v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v182->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v183;
  v182->__r_.__value_.__l.__size_ = 0;
  v182->__r_.__value_.__r.__words[2] = 0;
  v182->__r_.__value_.__r.__words[0] = 0;
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v644, **((_DWORD **)this + 295));
  v184 = strlen(v644);
  v185 = std::string::append((std::string *)buf, v644, v184);
  v186 = v185->__r_.__value_.__r.__words[0];
  v646[0] = v185->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v646 + 7) = *(std::string::size_type *)((char *)&v185->__r_.__value_.__r.__words[1] + 7);
  v187 = HIBYTE(v185->__r_.__value_.__r.__words[2]);
  v185->__r_.__value_.__l.__size_ = 0;
  v185->__r_.__value_.__r.__words[2] = 0;
  v185->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = v186;
  __str.__r_.__value_.__l.__size_ = v646[0];
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v646 + 7);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v187;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v649.__r_.__value_.__l.__data_);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  v188 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v189 = &__str;
  else
    v189 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v189, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v188, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (!TuningInSubdirs)
    goto LABEL_630;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>((std::string *)buf, a3, 0x73656E73u);
  v190 = std::string::append((std::string *)buf, "-fctm", 5uLL);
  v191 = v190->__r_.__value_.__r.__words[0];
  __s.__r_.__value_.__r.__words[0] = v190->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v190->__r_.__value_.__r.__words[1] + 7);
  v192 = HIBYTE(v190->__r_.__value_.__r.__words[2]);
  v190->__r_.__value_.__l.__size_ = 0;
  v190->__r_.__value_.__r.__words[2] = 0;
  v190->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = v191;
  __str.__r_.__value_.__l.__size_ = __s.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 7);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v192;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v193 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  v194 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__str
       : (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v194, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v193, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v195 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v196 = (*v195 ? *v195 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 776;
        _os_log_impl(&dword_1B5ED0000, v196, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find mic sense AU data plist! Bypassing Mic Sense!\n", buf, 0x12u);
      }
    }
    v197 = (int *)*((_QWORD *)this + 1570);
    if (v197 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v197, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 776, "LoadAUDataPreset", "failed to find mic sense AU data plist! Bypassing Mic Sense!\n");
    }
  }
  else
  {
LABEL_630:
    __s.__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v198 = &__str;
    else
      v198 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v199 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v198, 2u);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
    if (v199)
    {
      CFRetain(v199);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1029, 0x3E8u, 0, 0, 8uLL, &__s, 1);
      CFRelease(__s.__r_.__value_.__l.__data_);
      goto LABEL_651;
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v200 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v201 = (*v200 ? *v200 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 785;
        _os_log_impl(&dword_1B5ED0000, v201, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing Mic Sense!\n", buf, 0x12u);
      }
    }
    v202 = (int *)*((_QWORD *)this + 1570);
    if (v202 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v202, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 785, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing Mic Sense!\n");
    }
  }
  *(_DWORD *)buf = 1;
  AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1029, 0x15u, 0, 0, 4uLL, buf, 1);
LABEL_651:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_653:
  if ((*((_BYTE *)this + 8838) & 8) == 0)
    goto LABEL_697;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x63706D31u);
  v203 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v204 = &__str;
  else
    v204 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v204, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v203, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v205 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v206 = (*v205 ? *v205 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 796;
        _os_log_impl(&dword_1B5ED0000, v206, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find cpms AU data plist! Bypassing CPMS!\n", buf, 0x12u);
      }
    }
    v207 = (int *)*((_QWORD *)this + 1570);
    if (v207 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v207, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 796, "LoadAUDataPreset", "failed to find cpms AU data plist! Bypassing CPMS!\n");
    }
  }
  else
  {
    __s.__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v208 = &__str;
    else
      v208 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v209 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v208, 2u);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
    if (v209)
    {
      CFRetain(v209);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1516, 0xFA65u, 0, 0, 8uLL, &__s, 1);
      CFRelease(__s.__r_.__value_.__l.__data_);
      goto LABEL_695;
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v210 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v211 = (*v210 ? *v210 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 805;
        _os_log_impl(&dword_1B5ED0000, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing CPMS!\n", buf, 0x12u);
      }
    }
    v212 = (int *)*((_QWORD *)this + 1570);
    if (v212 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v212, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 805, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing CPMS!\n");
    }
  }
  *(_DWORD *)buf = 1;
  AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1516, 0x15u, 0, 0, 4uLL, buf, 1);
LABEL_695:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_697:
  v213 = *v633;
  if ((*v633 & 0x100000000000000) == 0)
    goto LABEL_742;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x6B737570u);
  v214 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v215 = &__str;
  else
    v215 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v215, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v214, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v216 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      v217 = (*v216 ? *v216 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 817;
        _os_log_impl(&dword_1B5ED0000, v217, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> failed to find KeystrokeSuppressor AU data plist! Bypassing KeyStrokeSuppressor!\n", buf, 0x12u);
      }
    }
    v218 = (int *)*((_QWORD *)this + 1570);
    if (v218 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v218, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 817, "LoadAUDataPreset", "failed to find KeystrokeSuppressor AU data plist! Bypassing KeyStrokeSuppressor!\n");
    }
LABEL_738:
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1047, 0x15u, 0, 0, 4uLL, buf, 1);
    goto LABEL_739;
  }
  __s.__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v219 = &__str;
  else
    v219 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v220 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v219, 2u);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
  if (!v220)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v221 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v222 = (*v221 ? *v221 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 827;
        _os_log_impl(&dword_1B5ED0000, v222, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing KeystrokeSuppressor!\n", buf, 0x12u);
      }
    }
    v223 = (int *)*((_QWORD *)this + 1570);
    if (v223 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v223, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 827, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing KeystrokeSuppressor!\n");
    }
    goto LABEL_738;
  }
  CFRetain(v220);
  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1047, 0x3E9u, 0, 0, 8uLL, &__s, 1);
  CFRelease(__s.__r_.__value_.__l.__data_);
LABEL_739:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v213 = *v633;
LABEL_742:
  if ((v213 & 0x800000000) == 0)
    goto LABEL_843;
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x6E6E6574u);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    __s = __str;
  if (*((_BYTE *)this + 2246))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v225 = buf;
    std::string::basic_string[abi:ne180100]((uint64_t)buf, size + 5);
    if (buf[23] < 0)
      v225 = *(_BYTE **)buf;
    if (size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v226 = &__str;
      else
        v226 = (std::string *)__str.__r_.__value_.__r.__words[0];
      memmove(v225, v226, size);
    }
    strcpy(&v225[size], "-mcsb");
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    __s = *(std::string *)buf;
    v227 = *((_QWORD *)this + 341);
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)p_s, 0x600u);
    cf.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &v649;
    *(_QWORD *)&buf[24] = &cf;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v227, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&cf);
    CACFString::~CACFString((CACFString *)&v649);
    if (!TuningInSubdirs)
      goto LABEL_801;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v229 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      v230 = (*v229 ? *v229 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 849;
        _os_log_impl(&dword_1B5ED0000, v230, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> failed to find NeuralNet AU data plist for multi channel speech bubble! Attempting to load standard AUNeuralNet data plist!", buf, 0x12u);
      }
    }
    v231 = (int *)*((_QWORD *)this + 1570);
    if (v231 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v231, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 849, "LoadAUDataPreset", "failed to find NeuralNet AU data plist for multi channel speech bubble! Attempting to load standard AUNeuralNet data plist!");
    }
    std::string::operator=(&__s, &__str);
    v232 = *((_QWORD *)this + 341);
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = &__str;
    else
      v233 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    v232 = *((_QWORD *)this + 341);
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = &__str;
    else
      v233 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v233, 0x600u);
  cf.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &v649;
  *(_QWORD *)&buf[24] = &cf;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v232, (const __CFString ***)buf, 4u, 2u);
  CACFString::~CACFString((CACFString *)&cf);
  CACFString::~CACFString((CACFString *)&v649);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v234 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v235 = (*v234 ? *v234 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 863;
        _os_log_impl(&dword_1B5ED0000, v235, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find NeuralNet AU data plist! Bypassing AUNeuralNet!", buf, 0x12u);
      }
    }
    v236 = (int *)*((_QWORD *)this + 1570);
    if (v236 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v236, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 863, "LoadAUDataPreset", "failed to find NeuralNet AU data plist! Bypassing AUNeuralNet!");
    }
    goto LABEL_838;
  }
LABEL_801:
  v649.__r_.__value_.__r.__words[0] = 0;
  if (*((_BYTE *)this + 2246))
  {
    v237 = __s.__r_.__value_.__r.__words[0];
    v238 = (__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    v239 = &__s;
  }
  else
  {
    v237 = __str.__r_.__value_.__r.__words[0];
    v238 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    v239 = &__str;
  }
  if (v238)
    v240 = (const char *)v237;
  else
    v240 = (const char *)v239;
  v241 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), v240, 2u);
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
  if (v241)
  {
    CFRetain(v241);
    AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 984, 0xE71u, 0, 0, 8uLL, &v649, 1);
    CFRelease(v649.__r_.__value_.__l.__data_);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v242 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v243 = (*v242 ? *v242 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v243, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 875;
        _os_log_impl(&dword_1B5ED0000, v243, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Found plist for AUNeuralNet", buf, 0x12u);
      }
    }
    v244 = (int *)*((_QWORD *)this + 1570);
    if (v244 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v244, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 875, "LoadAUDataPreset", "Found plist for AUNeuralNet");
    }
    goto LABEL_839;
  }
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v245 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    v246 = (*v245 ? *v245 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 879;
      _os_log_impl(&dword_1B5ED0000, v246, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing AUNeuralNet!", buf, 0x12u);
    }
  }
  v247 = (int *)*((_QWORD *)this + 1570);
  if (v247 && (*v632 || v632[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    CALegacyLog::log(v247, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 879, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing AUNeuralNet!");
  }
LABEL_838:
  *(_DWORD *)buf = 1;
  AUPropAndParamHelper::AddItemToAUPropsList(v638 + 984, 0x15u, 0, 0, 4uLL, buf, 1);
LABEL_839:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_843:
  v248 = 1835361379;
  v629 = a3;
  if (*((_BYTE *)this + 2244) || v632[663])
  {
    v630 = 0;
    v249 = 1;
LABEL_846:
    v250 = 0;
    v251 = v249 ^ 1;
    while (1)
    {
      v252 = dword_1B6686C8C[v250];
      if ((_DWORD)v252 != 60)
      {
        if (v252 >= 0x47)
          std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
        goto LABEL_857;
      }
      if (VoiceProcessorV2::GetChatFlavor(this) != 2)
        break;
      if (*((_DWORD *)this + 16) == 3)
        v253 = v251;
      else
        v253 = 1;
      if ((v253 & 1) == 0
        && ((*(unsigned int (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0) == 1886745455|| (*(unsigned int (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0) == 1886745449))
      {
        goto LABEL_857;
      }
LABEL_963:
      if (++v250 == 16)
        goto LABEL_968;
    }
    ChatFlavor = VoiceProcessorV2::GetChatFlavor(this);
    v260 = v630;
    if (ChatFlavor != 1)
      v260 = 0;
    if ((v260 & 1) != 0)
      goto LABEL_963;
LABEL_857:
    if (((*(unint64_t *)((char *)v633 + ((v252 >> 3) & 0x1FFFFFF8)) >> v252) & 1) == 0 || (_DWORD)v252 == 62)
      goto LABEL_963;
    v254 = **((_DWORD **)this + 295);
    if ((v254 & 0xFFFFFFF7) == 0x63637764)
    {
      if (v254 == 1667463020)
      {
        v255 = 0;
        v256 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        while (1)
        {
          v257 = *v256;
          v256 += 18;
          if (v257 == (_DWORD)v252)
            break;
          if (++v255 == 71)
          {
            v258 = 0;
            goto LABEL_870;
          }
        }
        v258 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v255 + 1];
LABEL_870:
        (*(void (**)(VoiceProcessorV2 *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), 1667463020, *((unsigned int *)this + 597), 0);
        if (!VoiceProcessorV2::LoadContinuityCapturePresetOverrides(this, v252, v258, 0x6363776Cu, v248, v261, v262, v263, v627))goto LABEL_963;
      }
      v264 = 0;
      v265 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
      while (1)
      {
        v266 = *v265;
        v265 += 18;
        if (v266 == (_DWORD)v252)
          break;
        if (++v264 == 71)
        {
          v267 = 0;
          goto LABEL_876;
        }
      }
      v267 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v264 + 1];
LABEL_876:
      (*(void (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
      if (!VoiceProcessorV2::LoadContinuityCapturePresetOverrides(this, v252, v267, 0x63636170u, v248, v268, v269, v270, v627))goto LABEL_963;
    }
    v271 = 0;
    v272 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      v273 = *v272;
      v272 += 18;
      if (v273 == (_DWORD)v252)
        break;
      if (++v271 == 71)
      {
        v274 = 0;
        goto LABEL_882;
      }
    }
    v274 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v271 + 1];
LABEL_882:
    v275 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
    v276 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,unsigned int,$_2,unsigned int,unsigned int,unsigned int>(&__str, a3, v274, v275, v276, v248, 1);
    cf.__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v277 = &__str;
    else
      v277 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v278 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v277, 1u);
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
    if (!v278)
    {
      v285 = *((_QWORD *)this + 341);
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
      __s.__r_.__value_.__s.__data_[8] = 1;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v286 = &__str;
      else
        v286 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v286, 0x600u);
      v649.__r_.__value_.__s.__data_[8] = 1;
      *(_QWORD *)buf = &v641;
      *(_QWORD *)&buf[8] = &v639;
      *(_QWORD *)&buf[16] = &__s;
      *(_QWORD *)&buf[24] = &v649;
      TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v285, (const __CFString ***)buf, 4u, 1u);
      CACFString::~CACFString((CACFString *)&v649);
      CACFString::~CACFString((CACFString *)&__s);
      if (TuningInSubdirs)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v287 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v288 = (*v287 ? *v287 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v288, OS_LOG_TYPE_ERROR))
          {
            CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, v248);
            v289 = 0;
            v290 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
            while (1)
            {
              v291 = *v290;
              v290 += 18;
              if (v291 == (_DWORD)v252)
                break;
              if (++v289 == 71)
              {
                v292 = 0;
                goto LABEL_944;
              }
            }
            v292 = &VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v289 + 2];
LABEL_944:
            v307 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v307 = &__str;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1055;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = &__s;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = v307;
            *(_WORD *)&buf[38] = 2080;
            v648 = (const char *)v292;
            _os_log_impl(&dword_1B5ED0000, v288, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> could not find '%s' override preset \"%s\" for %s!", buf, 0x30u);
          }
        }
        v308 = (int *)*((_QWORD *)this + 1570);
        if (v308 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v309 = VPLogScope(void)::scope;
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, v248);
          v310 = 0;
          v311 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
          while (1)
          {
            v312 = *v311;
            v311 += 18;
            if (v312 == (_DWORD)v252)
              break;
            if (++v310 == 71)
            {
              v313 = 0;
              goto LABEL_957;
            }
          }
          v313 = (const char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v310 + 2];
LABEL_957:
          v314 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v314 = &__str;
          CALegacyLog::log(v308, 1, v309, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1055, "LoadAUDataPreset", "could not find '%s' override preset \"%s\" for %s!", buf, (const char *)v314, v313);
        }
        v278 = (const __CFDictionary *)cf.__r_.__value_.__r.__words[0];
        if (!cf.__r_.__value_.__r.__words[0])
          goto LABEL_961;
      }
      else
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v293 = &__str;
        else
          v293 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v278 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v293, 1u);
        cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
        if (!v278)
        {
LABEL_961:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_963;
        }
      }
    }
    CFRetain(v278);
    AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * v252 + 879, 0, 0, 0, 8uLL, &cf, 1);
    CFRelease(cf.__r_.__value_.__l.__data_);
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v279 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      v280 = (*v279 ? *v279 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, v248);
        v281 = 0;
        v282 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        while (1)
        {
          v283 = *v282;
          v282 += 18;
          if (v283 == (_DWORD)v252)
            break;
          if (++v281 == 71)
          {
            v284 = 0;
            goto LABEL_920;
          }
        }
        v284 = &VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v281 + 2];
LABEL_920:
        v294 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v294 = &__str;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1070;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &__s;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v294;
        *(_WORD *)&buf[38] = 2080;
        v648 = (const char *)v284;
        _os_log_impl(&dword_1B5ED0000, v280, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> found '%s' override preset \"%s\" for %s", buf, 0x30u);
      }
    }
    v295 = (int *)*((_QWORD *)this + 1570);
    if (v295 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v296 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, v248);
      v297 = 0;
      v298 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
      while (1)
      {
        v299 = *v298;
        v298 += 18;
        if (v299 == (_DWORD)v252)
          break;
        if (++v297 == 71)
        {
          v300 = 0;
          goto LABEL_933;
        }
      }
      v300 = (const char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v297 + 2];
LABEL_933:
      v301 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v301 = &__str;
      CALegacyLog::log(v295, 4, v296, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1070, "LoadAUDataPreset", "found '%s' override preset \"%s\" for %s", buf, (const char *)v301, v300);
    }
    v302 = 0;
    v303 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      v304 = *v303;
      v303 += 18;
      if (v304 == (_DWORD)v252)
        break;
      if (++v302 == 71)
      {
        v305 = 0;
        goto LABEL_941;
      }
    }
    v305 = (char *)&VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v302 + 2];
LABEL_941:
    std::string::basic_string[abi:ne180100]<0>(buf, v305);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    v306 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4616, buf, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
    std::string::operator=((std::string *)(v306 + 40), &__str);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_961;
  }
  if (*((_BYTE *)this + 2245) && VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) >= 2)
  {
    v249 = 0;
    v248 = 1936744803;
    v630 = 1;
    goto LABEL_846;
  }
LABEL_968:
  LOBYTE(v646[0]) = 0;
  v315 = a3;
  if (*((_BYTE *)this + 2244))
  {
    *(_QWORD *)buf = this;
    *(_QWORD *)&buf[8] = &TuningInSubdirs;
    *(_QWORD *)&buf[16] = &v641;
    *(_QWORD *)&buf[24] = &v639;
    *(_QWORD *)&buf[32] = v646;
    v648 = (const char *)&v638;
    v316 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this
                                                                                                  + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0x16D656463);
    v317 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this
                                                                                                  + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0x16D656463);
    for (i = 0; i != 7; ++i)
    {
      v319 = dword_1B6686CCC[i];
      if (v319 >= 0x3E)
        std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
      if (((*((_QWORD *)this + 1104) >> v319) & 1) != 0 && ((0x17FFFFFFC7FFFFFFuLL >> v319) & 1) != 0)
      {
        v320 = 0;
        v321 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        while (1)
        {
          v322 = *v321;
          v321 += 18;
          if (v322 == (_DWORD)v319)
            break;
          if (++v320 == 62)
          {
            v323 = 0;
            goto LABEL_978;
          }
        }
        v323 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v320 + 1];
LABEL_978:
        VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,unsigned int,$_2,unsigned int,unsigned int,unsigned int>(&__str, a3, v323, v316, v317, 0x6D656463u, 0);
        VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_10::operator()((uint64_t *)buf, (uint64_t)&__str, v319 | 0x100000000);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,$_7,$_2,unsigned int,unsigned int,unsigned int>(&__str, a3, 0x61787664u, v316, v317, 0);
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_10::operator()((uint64_t *)buf, (uint64_t)&__str, 0);
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,$_7,$_2,unsigned int,unsigned int,unsigned int>(&__s, a3, 0x61787675u, v316, v317, 1);
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_10::operator()((uint64_t *)buf, (uint64_t)&__s, 0);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v632[663] && (*((_BYTE *)this + 8833) & 0x80) != 0)
  {
    v324 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
    v325 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,unsigned int,$_2,unsigned int,unsigned int,unsigned int>(&__str, a3, 0x6479646Bu, v324, v325, 0x6D656463u, 0);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v326 = &__str;
    else
      v326 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v327 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v326, 1u);
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
    if (v327)
      goto LABEL_991;
    v335 = *((_QWORD *)this + 341);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
    __s.__r_.__value_.__s.__data_[8] = 1;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v336 = &__str;
    else
      v336 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v336, 0x600u);
    v649.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &__s;
    *(_QWORD *)&buf[24] = &v649;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v335, (const __CFString ***)buf, 4u, 1u);
    CACFString::~CACFString((CACFString *)&v649);
    CACFString::~CACFString((CACFString *)&__s);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v337 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v338 = (*v337 ? *v337 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v338, OS_LOG_TYPE_DEFAULT))
        {
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6D656463u);
          v339 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v339 = &__str;
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1216;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = &__s;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v339;
          *(_WORD *)&buf[38] = 2080;
          v648 = "(DL-)DynDucker";
          _os_log_impl(&dword_1B5ED0000, v338, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> could not find '%s' override preset \"%s\" for %s!", buf, 0x30u);
        }
      }
      v340 = (int *)*((_QWORD *)this + 1570);
      if (v340 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v341 = VPLogScope(void)::scope;
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x6D656463u);
        v342 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v342 = &__str;
        CALegacyLog::log(v340, 2, v341, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1216, "operator()", "could not find '%s' override preset \"%s\" for %s!", buf, (const char *)v342, "(DL-)DynDucker");
      }
    }
    else
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v343 = &__str;
      else
        v343 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v327 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v343, 1u);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
      if (v327)
      {
LABEL_991:
        CFRetain(v327);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0, 0, 0, 8uLL, &cf, 1);
        CFRelease(cf.__r_.__value_.__l.__data_);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v328 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
        {
          v329 = (*v328 ? *v328 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v329, OS_LOG_TYPE_INFO))
          {
            CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6D656463u);
            v330 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v330 = &__str;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1230;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = &__s;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = v330;
            *(_WORD *)&buf[38] = 2080;
            v648 = "(DL-)DynDucker";
            _os_log_impl(&dword_1B5ED0000, v329, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> found '%s' override preset \"%s\" for %s", buf, 0x30u);
          }
        }
        v331 = (int *)*((_QWORD *)this + 1570);
        if (v331 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v332 = VPLogScope(void)::scope;
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x6D656463u);
          v333 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v333 = &__str;
          CALegacyLog::log(v331, 4, v332, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1230, "operator()", "found '%s' override preset \"%s\" for %s", buf, (const char *)v333, "(DL-)DynDucker");
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "(DL-)DynDucker");
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v334 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4576, buf, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
        std::string::operator=((std::string *)(v334 + 40), &__str);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        LOBYTE(v646[0]) = 1;
LABEL_1056:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_1058;
      }
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v344 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      v345 = (*v344 ? *v344 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v345, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1242;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "(DL-)DynDucker";
        _os_log_impl(&dword_1B5ED0000, v345, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> Bypassing %s!\n", buf, 0x1Cu);
      }
    }
    v346 = (int *)*((_QWORD *)this + 1570);
    if (v346 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v346, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1242, "operator()", "Bypassing %s!\n", "(DL-)DynDucker");
    }
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1408, 0x15u, 0, 0, 4uLL, buf, 1);
    goto LABEL_1056;
  }
LABEL_1058:
  if (!*((_BYTE *)this + 2245) || (*((_BYTE *)this + 8835) & 1) == 0)
    goto LABEL_1130;
  v347 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
  v348 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
  VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,unsigned int,$_2,unsigned int,unsigned int,unsigned int>(&__str, a3, 0x61787463u, v347, v348, 0x73706163u, 0);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v349 = &__str;
  else
    v349 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v350 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v349, 1u);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v350;
  if (v350)
    goto LABEL_1064;
  v358 = *((_QWORD *)this + 341);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
  __s.__r_.__value_.__s.__data_[8] = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v359 = &__str;
  else
    v359 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v359, 0x600u);
  v649.__r_.__value_.__s.__data_[8] = 1;
  *(_QWORD *)buf = &v641;
  *(_QWORD *)&buf[8] = &v639;
  *(_QWORD *)&buf[16] = &__s;
  *(_QWORD *)&buf[24] = &v649;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v358, (const __CFString ***)buf, 4u, 1u);
  CACFString::~CACFString((CACFString *)&v649);
  CACFString::~CACFString((CACFString *)&__s);
  if (TuningInSubdirs)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v360 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      v361 = (*v360 ? *v360 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v361, OS_LOG_TYPE_DEFAULT))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x73706163u);
        v362 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v362 = &__str;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1280;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &__s;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v362;
        *(_WORD *)&buf[38] = 2080;
        v648 = "(DL-)XTC";
        _os_log_impl(&dword_1B5ED0000, v361, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> could not find '%s' override preset \"%s\" for %s!", buf, 0x30u);
      }
    }
    v363 = (int *)*((_QWORD *)this + 1570);
    if (v363 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v364 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x73706163u);
      v365 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v365 = &__str;
      CALegacyLog::log(v363, 2, v364, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1280, "operator()", "could not find '%s' override preset \"%s\" for %s!", buf, (const char *)v365, "(DL-)XTC");
    }
    goto LABEL_1112;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v366 = &__str;
  else
    v366 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v350 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v366, 1u);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v350;
  if (!v350)
  {
LABEL_1112:
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v367 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      v368 = (*v367 ? *v367 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v368, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1303;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "(DL-)XTC";
        _os_log_impl(&dword_1B5ED0000, v368, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> Bypassing %s!\n", buf, 0x1Cu);
      }
    }
    v369 = (int *)*((_QWORD *)this + 1570);
    if (v369 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v369, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1303, "operator()", "Bypassing %s!\n", "(DL-)XTC");
    }
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1435, 0x15u, 0, 0, 4uLL, buf, 1);
    goto LABEL_1128;
  }
LABEL_1064:
  CFRetain(v350);
  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1435, 0, 0, 0, 8uLL, &cf, 1);
  CFRelease(cf.__r_.__value_.__l.__data_);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v351 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    v352 = (*v351 ? *v351 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v352, OS_LOG_TYPE_INFO))
    {
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x73706163u);
      v353 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v353 = &__str;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1294;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = &__s;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v353;
      *(_WORD *)&buf[38] = 2080;
      v648 = "(DL-)XTC";
      _os_log_impl(&dword_1B5ED0000, v352, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> found '%s' override preset \"%s\" for %s", buf, 0x30u);
    }
  }
  v354 = (int *)*((_QWORD *)this + 1570);
  if (v354 && (*v632 || v632[1]))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v355 = VPLogScope(void)::scope;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x73706163u);
    v356 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v356 = &__str;
    CALegacyLog::log(v354, 4, v355, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1294, "operator()", "found '%s' override preset \"%s\" for %s", buf, (const char *)v356, "(DL-)XTC");
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "(DL-)XTC");
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v357 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4576, buf, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
  std::string::operator=((std::string *)(v357 + 40), &__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_1128:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_1130:
  if ((*((_BYTE *)this + 4663) & 8) != 0)
  {
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(&__str, a3, 0x6E6E6574u);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__s, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      __s = __str;
    if (*((_BYTE *)this + 2246))
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v370 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v370 = __str.__r_.__value_.__l.__size_;
      v371 = buf;
      std::string::basic_string[abi:ne180100]((uint64_t)buf, v370 + 5);
      if (buf[23] < 0)
        v371 = *(_BYTE **)buf;
      if (v370)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v372 = &__str;
        else
          v372 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v371, v372, v370);
      }
      strcpy(&v371[v370], "-scsb");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      __s = *(std::string *)buf;
      v373 = *((_QWORD *)this + 341);
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
      v649.__r_.__value_.__s.__data_[8] = 1;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v374 = &__s;
      else
        v374 = (std::string *)__s.__r_.__value_.__r.__words[0];
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v374, 0x600u);
      cf.__r_.__value_.__s.__data_[8] = 1;
      *(_QWORD *)buf = &v641;
      *(_QWORD *)&buf[8] = &v639;
      *(_QWORD *)&buf[16] = &v649;
      *(_QWORD *)&buf[24] = &cf;
      TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v373, (const __CFString ***)buf, 4u, 2u);
      CACFString::~CACFString((CACFString *)&cf);
      CACFString::~CACFString((CACFString *)&v649);
      if (!TuningInSubdirs)
        goto LABEL_1203;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v375 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v376 = (*v375 ? *v375 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v376, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1343;
          _os_log_impl(&dword_1B5ED0000, v376, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find NeuralNet AU data plist for single channel speech bubble! Attempting to load standard AUNeuralNet data plist!", buf, 0x12u);
        }
      }
      v377 = (int *)*((_QWORD *)this + 1570);
      if (v377 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v377, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1343, "LoadAUDataPreset", "failed to find NeuralNet AU data plist for single channel speech bubble! Attempting to load standard AUNeuralNet data plist!");
      }
      std::string::operator=(&__s, &__str);
      v378 = *((_QWORD *)this + 341);
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
      v649.__r_.__value_.__s.__data_[8] = 1;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v379 = &__str;
      else
        v379 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 624))(this))
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v380 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v380 = __str.__r_.__value_.__l.__size_;
        v381 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v380 + 5);
        if (buf[23] < 0)
          v381 = *(_BYTE **)buf;
        if (v380)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v382 = &__str;
          else
            v382 = (std::string *)__str.__r_.__value_.__r.__words[0];
          memmove(v381, v382, v380);
        }
        strcpy(&v381[v380], "-scrc");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = *(std::string *)buf;
      }
      v378 = *((_QWORD *)this + 341);
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
      v649.__r_.__value_.__s.__data_[8] = 1;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v379 = &__str;
      else
        v379 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v379, 0x600u);
    cf.__r_.__value_.__s.__data_[8] = 1;
    *(_QWORD *)buf = &v641;
    *(_QWORD *)&buf[8] = &v639;
    *(_QWORD *)&buf[16] = &v649;
    *(_QWORD *)&buf[24] = &cf;
    TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v378, (const __CFString ***)buf, 4u, 2u);
    CACFString::~CACFString((CACFString *)&cf);
    CACFString::~CACFString((CACFString *)&v649);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v383 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v384 = (*v383 ? *v383 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v384, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1362;
          _os_log_impl(&dword_1B5ED0000, v384, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find NeuralNet AU data plist! Bypassing AUNeuralNet!", buf, 0x12u);
        }
      }
      v385 = (int *)*((_QWORD *)this + 1570);
      if (v385 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v385, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1362, "LoadAUDataPreset", "failed to find NeuralNet AU data plist! Bypassing AUNeuralNet!");
      }
      goto LABEL_1240;
    }
LABEL_1203:
    v649.__r_.__value_.__r.__words[0] = 0;
    if (*((_BYTE *)this + 2246))
    {
      v386 = __s.__r_.__value_.__r.__words[0];
      v387 = (__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v388 = &__s;
    }
    else
    {
      v386 = __str.__r_.__value_.__r.__words[0];
      v387 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v388 = &__str;
    }
    if (v387)
      v389 = (const char *)v386;
    else
      v389 = (const char *)v388;
    v390 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), v389, 2u);
    v649.__r_.__value_.__r.__words[0] = (std::string::size_type)v390;
    if (v390)
    {
      CFRetain(v390);
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1056, 0xE71u, 0, 0, 8uLL, &v649, 1);
      CFRelease(v649.__r_.__value_.__l.__data_);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v391 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v392 = (*v391 ? *v391 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v392, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1374;
          _os_log_impl(&dword_1B5ED0000, v392, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Found plist for AUNeuralNet", buf, 0x12u);
        }
      }
      v393 = (int *)*((_QWORD *)this + 1570);
      if (v393 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v393, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1374, "LoadAUDataPreset", "Found plist for AUNeuralNet");
      }
      goto LABEL_1241;
    }
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v394 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v395 = (*v394 ? *v394 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v395, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1376;
        _os_log_impl(&dword_1B5ED0000, v395, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing AUNeuralNet!", buf, 0x12u);
      }
    }
    v396 = (int *)*((_QWORD *)this + 1570);
    if (v396 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      CALegacyLog::log(v396, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1376, "LoadAUDataPreset", "plist dictionary is invalid! Bypassing AUNeuralNet!");
    }
LABEL_1240:
    *(_DWORD *)buf = 1;
    AUPropAndParamHelper::AddItemToAUPropsList(v638 + 1056, 0x15u, 0, 0, 4uLL, buf, 1);
LABEL_1241:
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  for (j = 0; j != 3; ++j)
  {
    v398 = 0;
    v399 = dword_1B6686CE8[j];
    v400 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      v401 = *v400;
      v400 += 18;
      if (v401 == (_DWORD)v399)
        break;
      if (++v398 == 71)
      {
        v402 = 0;
        goto LABEL_1251;
      }
    }
    v402 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v398 + 1];
LABEL_1251:
    if (v399 >= 0x47)
      std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
    if (((*(unint64_t *)((char *)v633 + ((v399 >> 3) & 0x1FFFFFF8)) >> v399) & 1) != 0
      && (_DWORD)v399 != 62
      && *((_BYTE *)this + 2246))
    {
      v403 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0x16D706564);
      v404 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0x16D706564);
      memset(&cf, 0, sizeof(cf));
      v635 = v641;
      v636 = v642;
      if (v642 && v641)
        CFRetain(v641);
      memset(&__str, 0, sizeof(__str));
      if (v315)
      {
        v405 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__s, v315);
        v406 = std::string::append(v405, "-", 1uLL);
        v407 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v406->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v407;
        v406->__r_.__value_.__l.__size_ = 0;
        v406->__r_.__value_.__r.__words[2] = 0;
        v406->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0)
          v408 = buf;
        else
          v408 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v409 = buf[23];
        else
          v409 = *(_QWORD *)&buf[8];
        std::string::append(&__str, v408, v409);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
      }
      v410 = bswap32(v402);
      *(_DWORD *)v645 = v410;
      v631 = (char)v410 - 32;
      if (v631 > 0x5E
        || (((__int16)v410 >> 8) - 32) > 0x5E
        || ((v410 << 8 >> 24) - 32) > 0x5E
        || ((v410 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v649, v402);
      }
      else
      {
        v645[4] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v649, v645);
      }
      v411 = std::string::insert(&v649, 0, "vp-aufx-", 8uLL);
      v412 = *(_OWORD *)&v411->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v411->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v412;
      v411->__r_.__value_.__l.__size_ = 0;
      v411->__r_.__value_.__r.__words[2] = 0;
      v411->__r_.__value_.__r.__words[0] = 0;
      v413 = std::string::append(&__s, "-appl", 5uLL);
      v414 = *(_OWORD *)&v413->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v413->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v414;
      v413->__r_.__value_.__l.__size_ = 0;
      v413->__r_.__value_.__r.__words[2] = 0;
      v413->__r_.__value_.__r.__words[0] = 0;
      if (buf[23] >= 0)
        v415 = buf;
      else
        v415 = *(const std::string::value_type **)buf;
      if (buf[23] >= 0)
        v416 = buf[23];
      else
        v416 = *(_QWORD *)&buf[8];
      std::string::append(&__str, v415, v416);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v649.__r_.__value_.__l.__data_);
      v417 = bswap32(v403);
      if (v403)
      {
        LODWORD(v649.__r_.__value_.__l.__data_) = v417;
        if (((char)v417 - 32) > 0x5E
          || (((__int16)v417 >> 8) - 32) > 0x5E
          || ((v417 << 8 >> 24) - 32) > 0x5E
          || ((v417 >> 24) - 32) > 0x5E)
        {
          std::to_string(&__s, v403);
        }
        else
        {
          v649.__r_.__value_.__s.__data_[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
        }
        v418 = std::string::insert(&__s, 0, "-", 1uLL);
        v419 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v418->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v419;
        v418->__r_.__value_.__l.__size_ = 0;
        v418->__r_.__value_.__r.__words[2] = 0;
        v418->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0)
          v420 = buf;
        else
          v420 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v421 = buf[23];
        else
          v421 = *(_QWORD *)&buf[8];
        std::string::append(&__str, v420, v421);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
      }
      v422 = bswap32(v404);
      if (v404)
      {
        LODWORD(v649.__r_.__value_.__l.__data_) = v422;
        if (((char)v422 - 32) > 0x5E
          || (((__int16)v422 >> 8) - 32) > 0x5E
          || ((v422 << 8 >> 24) - 32) > 0x5E
          || ((v422 >> 24) - 32) > 0x5E)
        {
          std::to_string(&__s, v404);
        }
        else
        {
          v649.__r_.__value_.__s.__data_[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
        }
        v423 = std::string::insert(&__s, 0, "-", 1uLL);
        v424 = *(_OWORD *)&v423->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v423->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v424;
        v423->__r_.__value_.__l.__size_ = 0;
        v423->__r_.__value_.__r.__words[2] = 0;
        v423->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0)
          v425 = buf;
        else
          v425 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v426 = buf[23];
        else
          v426 = *(_QWORD *)&buf[8];
        std::string::append(&__str, v425, v426);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
      }
      strcpy((char *)&v649, "mped");
      v427 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
      v628 = v422;
      v428 = std::string::insert(v427, 0, "-ulnk-", 6uLL);
      v429 = *(_OWORD *)&v428->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v428->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v429;
      v428->__r_.__value_.__l.__size_ = 0;
      v428->__r_.__value_.__r.__words[2] = 0;
      v428->__r_.__value_.__r.__words[0] = 0;
      if (buf[23] >= 0)
        v430 = buf;
      else
        v430 = *(const std::string::value_type **)buf;
      if (buf[23] >= 0)
        v431 = buf[23];
      else
        v431 = *(_QWORD *)&buf[8];
      std::string::append(&__str, v430, v431);
      v432 = v410;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v433 = v402;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v434 = *((_QWORD *)this + 341);
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, "AU", 0x600u);
      __s.__r_.__value_.__s.__data_[8] = 1;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v435 = &__str;
      else
        v435 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0, (const char *)v435, 0x600u);
      v649.__r_.__value_.__s.__data_[8] = 1;
      *(_QWORD *)buf = &v635;
      *(_QWORD *)&buf[8] = &__s;
      *(_QWORD *)&buf[16] = &v649;
      v436 = TuningPListMgr::loadTuningInSubdirs_(v434, (const __CFString ***)buf, 3u, 1u);
      CACFString::~CACFString((CACFString *)&v649);
      CACFString::~CACFString((CACFString *)&__s);
      if (!v436)
        std::string::operator=(&cf, &__str);
      v437 = v433;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      TuningInSubdirs = v436;
      CACFString::~CACFString((CACFString *)&v635);
      v438 = v432;
      if (!TuningInSubdirs)
        goto LABEL_1579;
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v439 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        v440 = (*v439 ? *v439 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v440, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)&buf[1] = v432;
          if (v631 > 0x5E
            || (((__int16)v432 >> 8) - 32) > 0x5E
            || ((v432 << 8 >> 24) - 32) > 0x5E
            || ((v432 >> 24) - 32) > 0x5E)
          {
            std::to_string(&__str, v437);
          }
          else
          {
            strcpy(&buf[5], "'");
            buf[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(&__str, buf);
          }
          v441 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v441 = (std::string *)__str.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1461;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v441;
          _os_log_impl(&dword_1B5ED0000, v440, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> failed to find device specific aupreset for %s!", buf, 0x1Cu);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      v442 = (int *)*((_QWORD *)this + 1570);
      if (v442 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v443 = VPLogScope(void)::scope;
        *(_DWORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v432;
        if (v631 > 0x5E
          || (((__int16)v432 >> 8) - 32) > 0x5E
          || ((v432 << 8 >> 24) - 32) > 0x5E
          || ((v432 >> 24) - 32) > 0x5E)
        {
          std::to_string((std::string *)buf, v437);
        }
        else
        {
          *(_WORD *)((char *)__str.__r_.__value_.__r.__words + 5) = 39;
          __str.__r_.__value_.__s.__data_[0] = 39;
          std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
        }
        v444 = buf;
        if (buf[23] < 0)
          v444 = *(const char **)buf;
        CALegacyLog::log(v442, 5, v443, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1461, "LoadAUDataPreset", "failed to find device specific aupreset for %s!", v444);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      memset(buf, 0, 24);
      v445 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__s, "gen");
      v446 = std::string::append(v445, "-", 1uLL);
      v447 = *(_OWORD *)&v446->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v446->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v447;
      v446->__r_.__value_.__l.__size_ = 0;
      v446->__r_.__value_.__r.__words[2] = 0;
      v446->__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v448 = &__str;
      else
        v448 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v449 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v449 = __str.__r_.__value_.__l.__size_;
      std::string::append((std::string *)buf, (const std::string::value_type *)v448, v449);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      *(_DWORD *)v645 = v432;
      if (v631 > 0x5E
        || (((__int16)v432 >> 8) - 32) > 0x5E
        || ((v432 << 8 >> 24) - 32) > 0x5E
        || ((v432 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v649, v437);
      }
      else
      {
        v645[4] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v649, v645);
      }
      v450 = std::string::insert(&v649, 0, "vp-aufx-", 8uLL);
      v451 = *(_OWORD *)&v450->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v450->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v451;
      v450->__r_.__value_.__l.__size_ = 0;
      v450->__r_.__value_.__r.__words[2] = 0;
      v450->__r_.__value_.__r.__words[0] = 0;
      v452 = std::string::append(&__s, "-appl", 5uLL);
      v453 = *(_OWORD *)&v452->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v452->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v453;
      v452->__r_.__value_.__l.__size_ = 0;
      v452->__r_.__value_.__r.__words[2] = 0;
      v452->__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v454 = &__str;
      else
        v454 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v455 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v455 = __str.__r_.__value_.__l.__size_;
      std::string::append((std::string *)buf, (const std::string::value_type *)v454, v455);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v649.__r_.__value_.__l.__data_);
        if (!v403)
          goto LABEL_1417;
      }
      else if (!v403)
      {
        goto LABEL_1417;
      }
      LODWORD(v649.__r_.__value_.__l.__data_) = v417;
      if (((char)v417 - 32) > 0x5E
        || (((__int16)v417 >> 8) - 32) > 0x5E
        || ((v417 << 8 >> 24) - 32) > 0x5E
        || ((v417 >> 24) - 32) > 0x5E)
      {
        std::to_string(&__s, v403);
      }
      else
      {
        v649.__r_.__value_.__s.__data_[4] = 0;
        std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
      }
      v456 = std::string::insert(&__s, 0, "-", 1uLL);
      v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v456->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v457;
      v456->__r_.__value_.__l.__size_ = 0;
      v456->__r_.__value_.__r.__words[2] = 0;
      v456->__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v458 = &__str;
      else
        v458 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v459 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v459 = __str.__r_.__value_.__l.__size_;
      std::string::append((std::string *)buf, (const std::string::value_type *)v458, v459);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s.__r_.__value_.__l.__data_);
        if (!v404)
          goto LABEL_1435;
        goto LABEL_1418;
      }
LABEL_1417:
      if (!v404)
        goto LABEL_1435;
LABEL_1418:
      LODWORD(v649.__r_.__value_.__l.__data_) = v628;
      if (((char)v628 - 32) > 0x5E
        || (((__int16)v628 >> 8) - 32) > 0x5E
        || ((v628 << 8 >> 24) - 32) > 0x5E
        || ((v628 >> 24) - 32) > 0x5E)
      {
        std::to_string(&__s, v404);
      }
      else
      {
        v649.__r_.__value_.__s.__data_[4] = 0;
        std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
      }
      v460 = std::string::insert(&__s, 0, "-", 1uLL);
      v461 = *(_OWORD *)&v460->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v460->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v461;
      v460->__r_.__value_.__l.__size_ = 0;
      v460->__r_.__value_.__r.__words[2] = 0;
      v460->__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v462 = &__str;
      else
        v462 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v463 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v463 = __str.__r_.__value_.__l.__size_;
      std::string::append((std::string *)buf, (const std::string::value_type *)v462, v463);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
LABEL_1435:
      strcpy((char *)&v649, "mped");
      v464 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
      v465 = std::string::insert(v464, 0, "-ulnk-", 6uLL);
      v466 = *(_OWORD *)&v465->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v465->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v466;
      v465->__r_.__value_.__l.__size_ = 0;
      v465->__r_.__value_.__r.__words[2] = 0;
      v465->__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v467 = &__str;
      else
        v467 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v468 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v468 = __str.__r_.__value_.__l.__size_;
      std::string::append((std::string *)buf, (const std::string::value_type *)v467, v468);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (buf[23] >= 0)
        v469 = buf;
      else
        v469 = *(const char **)buf;
      Tuning = TuningPListMgr::loadTuning(*((_QWORD *)this + 341), "Generic", "AU", v469, 1u);
      if (!Tuning)
        std::string::operator=(&cf, (const std::string *)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      TuningInSubdirs = Tuning;
      if (Tuning)
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v471 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v472 = (*v471 ? *v471 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v472, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)&buf[1] = v432;
            if (v631 > 0x5E
              || (((__int16)v432 >> 8) - 32) > 0x5E
              || ((v432 << 8 >> 24) - 32) > 0x5E
              || ((v432 >> 24) - 32) > 0x5E)
            {
              std::to_string(&__str, v437);
            }
            else
            {
              strcpy(&buf[5], "'");
              buf[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(&__str, buf);
            }
            v473 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v473 = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1464;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v473;
            _os_log_impl(&dword_1B5ED0000, v472, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> failed to find route specific aupreset for %s!", buf, 0x1Cu);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        v474 = (int *)*((_QWORD *)this + 1570);
        if (v474 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v475 = VPLogScope(void)::scope;
          *(_DWORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v432;
          if (v631 > 0x5E
            || (((__int16)v432 >> 8) - 32) > 0x5E
            || ((v432 << 8 >> 24) - 32) > 0x5E
            || ((v432 >> 24) - 32) > 0x5E)
          {
            std::to_string((std::string *)buf, v437);
          }
          else
          {
            *(_WORD *)((char *)__str.__r_.__value_.__r.__words + 5) = 39;
            __str.__r_.__value_.__s.__data_[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
          }
          v476 = buf;
          if (buf[23] < 0)
            v476 = *(const char **)buf;
          CALegacyLog::log(v474, 5, v475, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1464, "LoadAUDataPreset", "failed to find route specific aupreset for %s!", v476);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        memset(buf, 0, 24);
        v477 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__s, "gen");
        v478 = std::string::append(v477, "-", 1uLL);
        v479 = *(_OWORD *)&v478->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v478->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v479;
        v478->__r_.__value_.__l.__size_ = 0;
        v478->__r_.__value_.__r.__words[2] = 0;
        v478->__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v480 = &__str;
        else
          v480 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v481 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v481 = __str.__r_.__value_.__l.__size_;
        std::string::append((std::string *)buf, (const std::string::value_type *)v480, v481);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        *(_DWORD *)v645 = v432;
        if (v631 > 0x5E
          || (((__int16)v432 >> 8) - 32) > 0x5E
          || ((v432 << 8 >> 24) - 32) > 0x5E
          || ((v432 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v649, v437);
        }
        else
        {
          v645[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        }
        v482 = std::string::insert(&v649, 0, "vp-aufx-", 8uLL);
        v483 = *(_OWORD *)&v482->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v482->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v483;
        v482->__r_.__value_.__l.__size_ = 0;
        v482->__r_.__value_.__r.__words[2] = 0;
        v482->__r_.__value_.__r.__words[0] = 0;
        v484 = std::string::append(&__s, "-appl", 5uLL);
        v485 = *(_OWORD *)&v484->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v484->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v485;
        v484->__r_.__value_.__l.__size_ = 0;
        v484->__r_.__value_.__r.__words[2] = 0;
        v484->__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v486 = &__str;
        else
          v486 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v487 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v487 = __str.__r_.__value_.__l.__size_;
        std::string::append((std::string *)buf, (const std::string::value_type *)v486, v487);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        strcpy((char *)&v649, "mped");
        v488 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&v649);
        v489 = std::string::insert(v488, 0, "-ulnk-", 6uLL);
        v490 = *(_OWORD *)&v489->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v489->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v490;
        v489->__r_.__value_.__l.__size_ = 0;
        v489->__r_.__value_.__r.__words[2] = 0;
        v489->__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v491 = &__str;
        else
          v491 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v492 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v492 = __str.__r_.__value_.__l.__size_;
        std::string::append((std::string *)buf, (const std::string::value_type *)v491, v492);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (buf[23] >= 0)
          v493 = buf;
        else
          v493 = *(const char **)buf;
        v494 = TuningPListMgr::loadTuning(*((_QWORD *)this + 341), "Generic", "AU", v493, 1u);
        if (!v494)
          std::string::operator=(&cf, (const std::string *)buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        TuningInSubdirs = v494;
        if (v494)
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v495 = (_QWORD *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            v496 = (*v495 ? *v495 : MEMORY[0x1E0C81028]);
            if (os_log_type_enabled(v496, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)&buf[1] = v432;
              if (v631 > 0x5E
                || (((__int16)v432 >> 8) - 32) > 0x5E
                || ((v432 << 8 >> 24) - 32) > 0x5E
                || ((v432 >> 24) - 32) > 0x5E)
              {
                std::to_string(&__str, v437);
              }
              else
              {
                strcpy(&buf[5], "'");
                buf[0] = 39;
                std::string::basic_string[abi:ne180100]<0>(&__str, buf);
              }
              v497 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v497 = (std::string *)__str.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1467;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v497;
              _os_log_impl(&dword_1B5ED0000, v496, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> failed to find generic aupreset for %s!", buf, 0x1Cu);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          v498 = (int *)*((_QWORD *)this + 1570);
          if (v498 && (*v632 || v632[1]))
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v499 = VPLogScope(void)::scope;
            *(_DWORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v432;
            if (v631 > 0x5E
              || (((__int16)v432 >> 8) - 32) > 0x5E
              || ((v432 << 8 >> 24) - 32) > 0x5E
              || ((v432 >> 24) - 32) > 0x5E)
            {
              std::to_string((std::string *)buf, v437);
            }
            else
            {
              *(_WORD *)((char *)__str.__r_.__value_.__r.__words + 5) = 39;
              __str.__r_.__value_.__s.__data_[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
            }
            v500 = buf;
            if (buf[23] < 0)
              v500 = *(const char **)buf;
            CALegacyLog::log(v498, 5, v499, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1467, "LoadAUDataPreset", "failed to find generic aupreset for %s!", v500);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (TuningInSubdirs)
          {
            if (VPLogScope(void)::once != -1)
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
            v501 = (_QWORD *)VPLogScope(void)::scope;
            v315 = v629;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              v502 = (*v501 ? *v501 : MEMORY[0x1E0C81028]);
              if (os_log_type_enabled(v502, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)&buf[1] = v432;
                if (v631 > 0x5E
                  || (((__int16)v432 >> 8) - 32) > 0x5E
                  || ((v432 << 8 >> 24) - 32) > 0x5E
                  || ((v432 >> 24) - 32) > 0x5E)
                {
                  std::to_string(&__str, v437);
                }
                else
                {
                  strcpy(&buf[5], "'");
                  buf[0] = 39;
                  std::string::basic_string[abi:ne180100]<0>(&__str, buf);
                }
                v518 = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v518 = (std::string *)__str.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1474;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v518;
                _os_log_impl(&dword_1B5ED0000, v502, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find aupreset for %s! Bypassing this AU!", buf, 0x1Cu);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            v519 = (int *)*((_QWORD *)this + 1570);
            if (v519 && (*v632 || v632[1]))
            {
              if (VPLogScope(void)::once != -1)
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
              v520 = VPLogScope(void)::scope;
              *(_DWORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v432;
              if (v631 > 0x5E
                || (((__int16)v432 >> 8) - 32) > 0x5E
                || ((v432 << 8 >> 24) - 32) > 0x5E
                || ((v432 >> 24) - 32) > 0x5E)
              {
                std::to_string((std::string *)buf, v437);
              }
              else
              {
                *(_WORD *)((char *)__str.__r_.__value_.__r.__words + 5) = 39;
                __str.__r_.__value_.__s.__data_[0] = 39;
                std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
              }
              v521 = buf;
              if (buf[23] < 0)
                v521 = *(const char **)buf;
              CALegacyLog::log(v519, 1, v520, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1474, "LoadAUDataPreset", "failed to find aupreset for %s! Bypassing this AU!", v521);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            v522 = dword_1B6686CE8[j];
            *(_DWORD *)buf = 1;
            AUPropAndParamHelper::AddItemToAUPropsList(&v638[3 * v522 + 879], 0x15u, 0, 0, 4uLL, buf, 1);
LABEL_1676:
            if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(cf.__r_.__value_.__l.__data_);
            continue;
          }
        }
      }
LABEL_1579:
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v634, cf.__r_.__value_.__l.__data_, cf.__r_.__value_.__l.__size_);
      else
        v634 = cf;
      v315 = v629;
      v503 = dword_1B6686CE8[j];
      if ((v634.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v504 = &v634;
      else
        v504 = (std::string *)v634.__r_.__value_.__r.__words[0];
      v505 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v504, 1u);
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v505;
      if (v505)
      {
        CFRetain(v505);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * v503 + 879, 0, 0, 0, 8uLL, &__s, 1);
        CFRelease(__s.__r_.__value_.__l.__data_);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v506 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v507 = (*v506 ? *v506 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v507, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)&buf[1] = v438;
            if (v631 > 0x5E
              || (((__int16)v438 >> 8) - 32) > 0x5E
              || ((v438 << 8 >> 24) - 32) > 0x5E
              || ((v438 >> 24) - 32) > 0x5E)
            {
              std::to_string(&__str, v437);
            }
            else
            {
              strcpy(&buf[5], "'");
              buf[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(&__str, buf);
            }
            v510 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v510 = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1442;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v510;
            _os_log_impl(&dword_1B5ED0000, v507, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Found preset for %s", buf, 0x1Cu);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        v511 = (int *)*((_QWORD *)this + 1570);
        if (v511 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v512 = VPLogScope(void)::scope;
          *(_DWORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v438;
          if (v631 > 0x5E
            || (((__int16)v438 >> 8) - 32) > 0x5E
            || ((v438 << 8 >> 24) - 32) > 0x5E
            || ((v438 >> 24) - 32) > 0x5E)
          {
            std::to_string((std::string *)buf, v437);
          }
          else
          {
            *(_WORD *)((char *)__str.__r_.__value_.__r.__words + 5) = 39;
            __str.__r_.__value_.__s.__data_[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
          }
          v513 = buf;
          if (buf[23] < 0)
            v513 = *(const char **)buf;
          CALegacyLog::log(v511, 5, v512, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1442, "operator()", "Found preset for %s", v513);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v508 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v509 = (*v508 ? *v508 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v509, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&buf[1] = v438;
            if (v631 > 0x5E
              || (((__int16)v438 >> 8) - 32) > 0x5E
              || ((v438 << 8 >> 24) - 32) > 0x5E
              || ((v438 >> 24) - 32) > 0x5E)
            {
              std::to_string(&__str, v437);
            }
            else
            {
              strcpy(&buf[5], "'");
              buf[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(&__str, buf);
            }
            v514 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v514 = (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1446;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v514;
            _os_log_impl(&dword_1B5ED0000, v509, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> plist dictionary is invalid! Bypassing %s!", buf, 0x1Cu);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        v515 = (int *)*((_QWORD *)this + 1570);
        if (v515 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          v516 = VPLogScope(void)::scope;
          *(_DWORD *)((char *)&__str.__r_.__value_.__l.__data_ + 1) = v438;
          if (v631 > 0x5E
            || (((__int16)v438 >> 8) - 32) > 0x5E
            || ((v438 << 8 >> 24) - 32) > 0x5E
            || ((v438 >> 24) - 32) > 0x5E)
          {
            std::to_string((std::string *)buf, v437);
          }
          else
          {
            *(_WORD *)((char *)__str.__r_.__value_.__r.__words + 5) = 39;
            __str.__r_.__value_.__s.__data_[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)&__str);
          }
          v517 = buf;
          if (buf[23] < 0)
            v517 = *(const char **)buf;
          CALegacyLog::log(v515, 1, v516, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1446, "operator()", "plist dictionary is invalid! Bypassing %s!", v517);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        *(_DWORD *)buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList(&v638[3 * v503 + 879], 0x15u, 0, 0, 4uLL, buf, 1);
      }
      if (SHIBYTE(v634.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v634.__r_.__value_.__l.__data_);
      goto LABEL_1676;
    }
  }
  if ((*((_BYTE *)this + 2244) || v632[663]) && (*((_BYTE *)this + 8833) & 0x80) != 0 && !LOBYTE(v646[0]))
  {
    memset(buf, 0, 24);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x61756678u);
    v524 = strlen(v523);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v524);
    std::string::append((std::string *)buf, "-", 1uLL);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6479646Bu);
    v526 = strlen(v525);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v526);
    std::string::append((std::string *)buf, "-", 1uLL);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6170706Cu);
    v528 = strlen(v527);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v528);
    std::string::append((std::string *)buf, "-", 1uLL);
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&__s, 0x6D656463u);
    v530 = strlen(v529);
    std::string::append((std::string *)buf, (const std::string::value_type *)&__s, v530);
    __str = *(std::string *)buf;
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v531 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      v532 = (*v531 ? *v531 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v532, OS_LOG_TYPE_DEBUG))
      {
        v533 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v533 = (std::string *)__str.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1489;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v533;
        _os_log_impl(&dword_1B5ED0000, v532, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loading media chat AUDynamicDucker preset %s", buf, 0x1Cu);
      }
    }
    v534 = (int *)*((_QWORD *)this + 1570);
    if (v534 && (*v632 || v632[1]))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v535 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v535 = (std::string *)__str.__r_.__value_.__r.__words[0];
      CALegacyLog::log(v534, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1489, "LoadAUDataPreset", "loading media chat AUDynamicDucker preset %s", (const char *)v535);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v536 = &__str;
    else
      v536 = (std::string *)__str.__r_.__value_.__r.__words[0];
    TuningInSubdirs = TuningPListMgr::loadTuning(*((_QWORD *)this + 341), "Generic", "AU", (const char *)v536, 1u);
    if (TuningInSubdirs)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v537 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        v538 = (*v537 ? *v537 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v538, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1494;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = TuningInSubdirs;
          _os_log_impl(&dword_1B5ED0000, v538, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to find AUDynamicDucker media chat  preset!(%d) Using default AUDynamicDucker tuning\n", buf, 0x18u);
        }
      }
      v539 = (int *)*((_QWORD *)this + 1570);
      if (v539 && (*v632 || v632[1]))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        CALegacyLog::log(v539, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1494, "LoadAUDataPreset", "failed to find AUDynamicDucker media chat  preset!(%d) Using default AUDynamicDucker tuning\n", TuningInSubdirs);
      }
    }
    else
    {
      v649.__r_.__value_.__r.__words[0] = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v540 = &__str;
      else
        v540 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v541 = TuningPListMgr::lookupPlist_(*((_QWORD *)this + 341), (const char *)v540, 1u);
      v649.__r_.__value_.__r.__words[0] = (std::string::size_type)v541;
      if (v541)
      {
        CFRetain(v541);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1408, 0, 0, 0, 8uLL, &v649, 1);
        CFRelease(v649.__r_.__value_.__l.__data_);
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v542 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          v543 = (*v542 ? *v542 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v543, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1502;
            _os_log_impl(&dword_1B5ED0000, v543, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> found media chat preset for AUDynamicDucker\n", buf, 0x12u);
          }
        }
        v544 = (int *)*((_QWORD *)this + 1570);
        if (v544 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v544, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1502, "LoadAUDataPreset", "found media chat preset for AUDynamicDucker\n");
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "(DL-)DynDucker");
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v545 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 4576, buf, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
        std::string::operator=((std::string *)(v545 + 40), &__str);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      else
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v546 = (_QWORD *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          v547 = (*v546 ? *v546 : MEMORY[0x1E0C81028]);
          if (os_log_type_enabled(v547, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1505;
            _os_log_impl(&dword_1B5ED0000, v547, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> media chat preset dictionary is invalid! Using default AUDynamicDucker tuning!\n", buf, 0x12u);
          }
        }
        v548 = (int *)*((_QWORD *)this + 1570);
        if (v548 && (*v632 || v632[1]))
        {
          if (VPLogScope(void)::once != -1)
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
          CALegacyLog::log(v548, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1505, "LoadAUDataPreset", "media chat preset dictionary is invalid! Using default AUDynamicDucker tuning!\n");
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(_QWORD *)this + 536))(this))
  {
    v549 = 0;
    v550 = 0;
    *(_QWORD *)buf = &TuningInSubdirs;
    *(_QWORD *)&buf[8] = this;
    *(_QWORD *)&buf[16] = &v641;
    *(_QWORD *)&buf[24] = &v639;
    *(_QWORD *)v644 = 0x2300000022;
    do
    {
      v551 = *(_DWORD *)&v644[4 * v550];
      if (v551 >= 0x3E)
        std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
      v552 = v549;
      if (((*((_QWORD *)this + 1104) >> v551) & 1) != 0 && ((0x17FFFFFFC7FFFFFFuLL >> v551) & 1) != 0)
      {
        v553 = 0;
        v554 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        while (1)
        {
          v555 = *v554;
          v554 += 18;
          if (v555 == v551)
            break;
          if (++v553 == 62)
          {
            v556 = 0;
            goto LABEL_1769;
          }
        }
        v556 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v553 + 1];
LABEL_1769:
        v557 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
        v558 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
        memset(&__str, 0, sizeof(__str));
        if (v629)
        {
          v559 = strlen(v629);
          std::string::append(&__str, v629, v559);
          std::string::append(&__str, "-", 1uLL);
        }
        std::string::append(&__str, "vp", 2uLL);
        strcpy(v645, "aufx");
        v560 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        v561 = std::string::insert(v560, 0, "-", 1uLL);
        v562 = *(_OWORD *)&v561->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v561->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v562;
        v561->__r_.__value_.__l.__size_ = 0;
        v561->__r_.__value_.__r.__words[2] = 0;
        v561->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v563 = &__s;
        else
          v563 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v564 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v564 = __s.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v563, v564);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        v565 = bswap32(v556);
        *(_DWORD *)v645 = v565;
        if (((char)v565 - 32) > 0x5E
          || (((__int16)v565 >> 8) - 32) > 0x5E
          || ((v565 << 8 >> 24) - 32) > 0x5E
          || ((v565 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v649, v556);
        }
        else
        {
          v645[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        }
        v566 = std::string::insert(&v649, 0, "-", 1uLL);
        v567 = *(_OWORD *)&v566->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v566->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v567;
        v566->__r_.__value_.__l.__size_ = 0;
        v566->__r_.__value_.__r.__words[2] = 0;
        v566->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v568 = &__s;
        else
          v568 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v569 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v569 = __s.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v568, v569);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        strcpy(v645, "appl");
        v570 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        v571 = std::string::insert(v570, 0, "-", 1uLL);
        v572 = *(_OWORD *)&v571->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v571->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v572;
        v571->__r_.__value_.__l.__size_ = 0;
        v571->__r_.__value_.__r.__words[2] = 0;
        v571->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v573 = &__s;
        else
          v573 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v574 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v574 = __s.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v573, v574);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        v575 = bswap32(v557);
        *(_DWORD *)v645 = v575;
        if (((char)v575 - 32) > 0x5E
          || (((__int16)v575 >> 8) - 32) > 0x5E
          || ((v575 << 8 >> 24) - 32) > 0x5E
          || ((v575 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v649, v557);
        }
        else
        {
          v645[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        }
        v576 = std::string::insert(&v649, 0, "-", 1uLL);
        v577 = *(_OWORD *)&v576->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v576->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v577;
        v576->__r_.__value_.__l.__size_ = 0;
        v576->__r_.__value_.__r.__words[2] = 0;
        v576->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v578 = &__s;
        else
          v578 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v579 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v579 = __s.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v578, v579);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        v580 = bswap32(v558);
        *(_DWORD *)v645 = v580;
        if (((char)v580 - 32) > 0x5E
          || (((__int16)v580 >> 8) - 32) > 0x5E
          || ((v580 << 8 >> 24) - 32) > 0x5E
          || ((v580 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v649, v558);
        }
        else
        {
          v645[4] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        }
        v581 = std::string::insert(&v649, 0, "-", 1uLL);
        v582 = *(_OWORD *)&v581->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v581->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v582;
        v581->__r_.__value_.__l.__size_ = 0;
        v581->__r_.__value_.__r.__words[2] = 0;
        v581->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v583 = &__s;
        else
          v583 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v584 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v584 = __s.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v583, v584);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        std::string::append(&__str, "-dlnk", 5uLL);
        strcpy(v645, "misc");
        v585 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
        v586 = std::string::insert(v585, 0, "-", 1uLL);
        v587 = *(_OWORD *)&v586->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v586->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v587;
        v586->__r_.__value_.__l.__size_ = 0;
        v586->__r_.__value_.__r.__words[2] = 0;
        v586->__r_.__value_.__r.__words[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v588 = &__s;
        else
          v588 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v589 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v589 = __s.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v588, v589);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v649.__r_.__value_.__l.__data_);
        v590 = 0;
        cf = __str;
        v591 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        while (1)
        {
          v592 = *v591;
          v591 += 18;
          if (v592 == v551)
            break;
          if (++v590 == 62)
          {
            v593 = 0;
            goto LABEL_1854;
          }
        }
        v593 = (char *)&VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v590 + 2];
LABEL_1854:
        std::string::basic_string[abi:ne180100]<0>(&__str, v593);
        VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_13::operator()((uint64_t)buf, &cf, (uint64_t)&__str, (AUPropertyItem **)this + 3 * v551 + 1363);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(cf.__r_.__value_.__l.__data_);
      }
      v549 = 1;
      v550 = 1;
    }
    while ((v552 & 1) == 0);
    v594 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 488))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
    v595 = (*(uint64_t (**)(VoiceProcessorV2 *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 496))(this, **((unsigned int **)this + 292), *((unsigned int *)this + 596), **((unsigned int **)this + 295), *((unsigned int *)this + 597), 0);
    memset(&__str, 0, sizeof(__str));
    if (v629)
    {
      v596 = strlen(v629);
      std::string::append(&__str, v629, v596);
      std::string::append(&__str, "-", 1uLL);
    }
    std::string::append(&__str, "vp", 2uLL);
    strcpy(v645, "aufx");
    v597 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
    v598 = std::string::insert(v597, 0, "-", 1uLL);
    v599 = *(_OWORD *)&v598->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v598->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v599;
    v598->__r_.__value_.__l.__size_ = 0;
    v598->__r_.__value_.__r.__words[2] = 0;
    v598->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v600 = &__s;
    else
      v600 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v601 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v601 = __s.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v600, v601);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    strcpy(v645, "axvd");
    v602 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
    v603 = std::string::insert(v602, 0, "-", 1uLL);
    v604 = *(_OWORD *)&v603->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v603->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v604;
    v603->__r_.__value_.__l.__size_ = 0;
    v603->__r_.__value_.__r.__words[2] = 0;
    v603->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v605 = &__s;
    else
      v605 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v606 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v606 = __s.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v605, v606);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    strcpy(v645, "appl");
    v607 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
    v608 = std::string::insert(v607, 0, "-", 1uLL);
    v609 = *(_OWORD *)&v608->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v608->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v609;
    v608->__r_.__value_.__l.__size_ = 0;
    v608->__r_.__value_.__r.__words[2] = 0;
    v608->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v610 = &__s;
    else
      v610 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v611 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v611 = __s.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v610, v611);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    v612 = bswap32(v594);
    *(_DWORD *)v645 = v612;
    if (((char)v612 - 32) > 0x5E
      || (((__int16)v612 >> 8) - 32) > 0x5E
      || ((v612 << 8 >> 24) - 32) > 0x5E
      || ((v612 >> 24) - 32) > 0x5E)
    {
      std::to_string(&v649, v594);
    }
    else
    {
      v645[4] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v649, v645);
    }
    v613 = std::string::insert(&v649, 0, "-", 1uLL);
    v614 = *(_OWORD *)&v613->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v613->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v614;
    v613->__r_.__value_.__l.__size_ = 0;
    v613->__r_.__value_.__r.__words[2] = 0;
    v613->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v615 = &__s;
    else
      v615 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v616 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v616 = __s.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v615, v616);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    v617 = bswap32(v595);
    *(_DWORD *)v645 = v617;
    if (((char)v617 - 32) > 0x5E
      || (((__int16)v617 >> 8) - 32) > 0x5E
      || ((v617 << 8 >> 24) - 32) > 0x5E
      || ((v617 >> 24) - 32) > 0x5E)
    {
      std::to_string(&v649, v595);
    }
    else
    {
      v645[4] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v649, v645);
    }
    v618 = std::string::insert(&v649, 0, "-", 1uLL);
    v619 = *(_OWORD *)&v618->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v618->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v619;
    v618->__r_.__value_.__l.__size_ = 0;
    v618->__r_.__value_.__r.__words[2] = 0;
    v618->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v620 = &__s;
    else
      v620 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v621 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v621 = __s.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v620, v621);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    std::string::append(&__str, "-dlnk", 5uLL);
    strcpy(v645, "misc");
    v622 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v649, v645);
    v623 = std::string::insert(v622, 0, "-", 1uLL);
    v624 = *(_OWORD *)&v623->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v623->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v624;
    v623->__r_.__value_.__l.__size_ = 0;
    v623->__r_.__value_.__r.__words[2] = 0;
    v623->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v625 = &__s;
    else
      v625 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v626 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v626 = __s.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v625, v626);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v649.__r_.__value_.__l.__data_);
    cf = __str;
    std::string::basic_string[abi:ne180100]<0>(&__str, "(DL)-AuxVP");
    VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_13::operator()((uint64_t)buf, &cf, (uint64_t)&__str, (AUPropertyItem **)this + 1354);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
  }
  CACFString::~CACFString((CACFString *)&v639);
  CACFString::~CACFString((CACFString *)&v641);
}

void sub_1B650DC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 137) < 0)
    operator delete(*(void **)(v38 - 160));
  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  CACFString::~CACFString((CACFString *)&a36);
  CACFString::~CACFString((CACFString *)&a38);
  _Unwind_Resume(a1);
}

double VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_0::operator()<$_1,unsigned int,$_2>(std::string *a1, char *__s, unsigned int a3)
{
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  double result;
  std::string v11;
  char __sa[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(&v11, 0, sizeof(v11));
  if (__s)
  {
    v6 = strlen(__s);
    std::string::append(&v11, __s, v6);
    std::string::append(&v11, "-", 1uLL);
  }
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, 0x61756678u);
  v7 = strlen(__sa);
  std::string::append(&v11, __sa, v7);
  std::string::append(&v11, "-", 1uLL);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, a3);
  v8 = strlen(__sa);
  std::string::append(&v11, __sa, v8);
  std::string::append(&v11, "-", 1uLL);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, 0x6170706Cu);
  v9 = strlen(__sa);
  std::string::append(&v11, __sa, v9);
  result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_1B650E614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_2::operator()<$_1,unsigned int,$_2,char const*>(std::string *a1, char *__s, unsigned int a3, char *a4)
{
  size_t v8;
  const char *v9;
  size_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string::value_type *v15;
  std::string::size_type v16;
  const char *v17;
  size_t v18;
  const char *v19;
  size_t v20;
  double result;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string::value_type __sa[16];
  int64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(&v24, 0, sizeof(v24));
  if (__s)
  {
    v8 = strlen(__s);
    std::string::append(&v24, __s, v8);
    std::string::append(&v24, "-", 1uLL);
  }
  std::string::append(&v24, "vp-", 3uLL);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, 0x61756678u);
  v10 = strlen(v9);
  std::string::append(&v24, __sa, v10);
  std::string::basic_string[abi:ne180100]<0>(&v22, a4);
  v11 = std::string::insert(&v22, 0, "-", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, "-", 1uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__sa = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v26 >= 0)
    v15 = __sa;
  else
    v15 = *(std::string::value_type **)__sa;
  if (v26 >= 0)
    v16 = HIBYTE(v26);
  else
    v16 = *(_QWORD *)&__sa[8];
  std::string::append(&v24, v15, v16);
  if (SHIBYTE(v26) < 0)
    operator delete(*(void **)__sa);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, a3);
  v18 = strlen(v17);
  std::string::append(&v24, __sa, v18);
  std::string::append(&v24, "-", 1uLL);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, 0x6170706Cu);
  v20 = strlen(v19);
  std::string::append(&v24, __sa, v20);
  result = *(double *)&v24.__r_.__value_.__l.__data_;
  *a1 = v24;
  return result;
}

void sub_1B650E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_3::operator()<$_1,unsigned int,$_2,char const*>(std::string *a1, char *__s, unsigned int a3, char *a4)
{
  size_t v8;
  const char *v9;
  size_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string::value_type *v15;
  std::string::size_type v16;
  const char *v17;
  size_t v18;
  const char *v19;
  size_t v20;
  double result;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string::value_type __sa[16];
  int64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  memset(&v24, 0, sizeof(v24));
  if (__s)
  {
    v8 = strlen(__s);
    std::string::append(&v24, __s, v8);
    std::string::append(&v24, "-", 1uLL);
  }
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, 0x61756678u);
  v10 = strlen(v9);
  std::string::append(&v24, __sa, v10);
  std::string::basic_string[abi:ne180100]<0>(&v22, a4);
  v11 = std::string::insert(&v22, 0, "-", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v23, "-", 1uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__sa = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v26 >= 0)
    v15 = __sa;
  else
    v15 = *(std::string::value_type **)__sa;
  if (v26 >= 0)
    v16 = HIBYTE(v26);
  else
    v16 = *(_QWORD *)&__sa[8];
  std::string::append(&v24, v15, v16);
  if (SHIBYTE(v26) < 0)
    operator delete(*(void **)__sa);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, a3);
  v18 = strlen(v17);
  std::string::append(&v24, __sa, v18);
  std::string::append(&v24, "-", 1uLL);
  CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__sa, 0x6170706Cu);
  v20 = strlen(v19);
  std::string::append(&v24, __sa, v20);
  result = *(double *)&v24.__r_.__value_.__l.__data_;
  *a1 = v24;
  return result;
}

void sub_1B650EA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,unsigned int,$_2,unsigned int,unsigned int,unsigned int>(std::string *a1, char *__s, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  size_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  int v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  int v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  int v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::string::size_type v37;
  const std::string::value_type *v38;
  int v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  double result;
  std::string v45;
  void *__p[2];
  int64_t v47;
  std::string v48;
  char __sa[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  memset(&v48, 0, sizeof(v48));
  if (__s)
  {
    v14 = strlen(__s);
    std::string::append(&v48, __s, v14);
    std::string::append(&v48, "-", 1uLL);
  }
  std::string::append(&v48, "vp", 2uLL);
  strcpy(__sa, "aufx");
  std::string::basic_string[abi:ne180100]<0>(&v45, __sa);
  v15 = std::string::insert(&v45, 0, "-", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v47 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if (v47 >= 0)
    v18 = HIBYTE(v47);
  else
    v18 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v17, v18);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v19 = bswap32(a3);
  *(_DWORD *)__sa = v19;
  if (((char)v19 - 32) > 0x5E
    || (((__int16)v19 >> 8) - 32) > 0x5E
    || ((v19 << 8 >> 24) - 32) > 0x5E
    || ((v19 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v45, a3);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v45, __sa);
  }
  v20 = std::string::insert(&v45, 0, "-", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v47 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if (v47 >= 0)
    v23 = HIBYTE(v47);
  else
    v23 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  strcpy(__sa, "appl");
  std::string::basic_string[abi:ne180100]<0>(&v45, __sa);
  v24 = std::string::insert(&v45, 0, "-", 1uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v47 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if (v47 >= 0)
    v27 = HIBYTE(v47);
  else
    v27 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v26, v27);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v28 = bswap32(a4);
  *(_DWORD *)__sa = v28;
  if (((char)v28 - 32) > 0x5E
    || (((__int16)v28 >> 8) - 32) > 0x5E
    || ((v28 << 8 >> 24) - 32) > 0x5E
    || ((v28 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v45, a4);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v45, __sa);
  }
  v29 = std::string::insert(&v45, 0, "-", 1uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  if (v47 >= 0)
    v32 = HIBYTE(v47);
  else
    v32 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v31, v32);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v33 = bswap32(a5);
  *(_DWORD *)__sa = v33;
  if (((char)v33 - 32) > 0x5E
    || (((__int16)v33 >> 8) - 32) > 0x5E
    || ((v33 << 8 >> 24) - 32) > 0x5E
    || ((v33 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v45, a5);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v45, __sa);
  }
  v34 = std::string::insert(&v45, 0, "-", 1uLL);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v47 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v36 = __p;
  else
    v36 = (void **)__p[0];
  if (v47 >= 0)
    v37 = HIBYTE(v47);
  else
    v37 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v36, v37);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (a7)
    v38 = "-ulnk";
  else
    v38 = "-dlnk";
  std::string::append(&v48, v38, 5uLL);
  v39 = bswap32(a6);
  *(_DWORD *)__sa = v39;
  if (((char)v39 - 32) > 0x5E
    || (((__int16)v39 >> 8) - 32) > 0x5E
    || ((v39 << 8 >> 24) - 32) > 0x5E
    || ((v39 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v45, a6);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v45, __sa);
  }
  v40 = std::string::insert(&v45, 0, "-", 1uLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v47 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v42 = __p;
  else
    v42 = (void **)__p[0];
  if (v47 >= 0)
    v43 = HIBYTE(v47);
  else
    v43 = (std::string::size_type)__p[1];
  std::string::append(&v48, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  result = *(double *)&v48.__r_.__value_.__l.__data_;
  *a1 = v48;
  return result;
}

void sub_1B650F090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_4::operator()<$_1,$_7,$_2,unsigned int,unsigned int,unsigned int>(std::string *a1, char *__s, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  size_t v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  int v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  std::string::size_type v25;
  int v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  int v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  const std::string::value_type *v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  double result;
  std::string v42;
  void *__p[2];
  int64_t v44;
  std::string v45;
  char __sa[8];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  memset(&v45, 0, sizeof(v45));
  if (__s)
  {
    v12 = strlen(__s);
    std::string::append(&v45, __s, v12);
    std::string::append(&v45, "-", 1uLL);
  }
  std::string::append(&v45, "vp", 2uLL);
  strcpy(__sa, "aufx");
  std::string::basic_string[abi:ne180100]<0>(&v42, __sa);
  v13 = std::string::insert(&v42, 0, "-", 1uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v44 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v44 >= 0)
    v16 = HIBYTE(v44);
  else
    v16 = (std::string::size_type)__p[1];
  std::string::append(&v45, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v17 = bswap32(a3);
  *(_DWORD *)__sa = v17;
  if (((char)v17 - 32) > 0x5E
    || (((__int16)v17 >> 8) - 32) > 0x5E
    || ((v17 << 8 >> 24) - 32) > 0x5E
    || ((v17 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v42, a3);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v42, __sa);
  }
  v18 = std::string::insert(&v42, 0, "-", 1uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v44 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (v44 >= 0)
    v21 = HIBYTE(v44);
  else
    v21 = (std::string::size_type)__p[1];
  std::string::append(&v45, (const std::string::value_type *)v20, v21);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  strcpy(__sa, "appl");
  std::string::basic_string[abi:ne180100]<0>(&v42, __sa);
  v22 = std::string::insert(&v42, 0, "-", 1uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v44 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if (v44 >= 0)
    v25 = HIBYTE(v44);
  else
    v25 = (std::string::size_type)__p[1];
  std::string::append(&v45, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v26 = bswap32(a4);
  *(_DWORD *)__sa = v26;
  if (((char)v26 - 32) > 0x5E
    || (((__int16)v26 >> 8) - 32) > 0x5E
    || ((v26 << 8 >> 24) - 32) > 0x5E
    || ((v26 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v42, a4);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v42, __sa);
  }
  v27 = std::string::insert(&v42, 0, "-", 1uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v44 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  if (v44 >= 0)
    v30 = HIBYTE(v44);
  else
    v30 = (std::string::size_type)__p[1];
  std::string::append(&v45, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v31 = bswap32(a5);
  *(_DWORD *)__sa = v31;
  if (((char)v31 - 32) > 0x5E
    || (((__int16)v31 >> 8) - 32) > 0x5E
    || ((v31 << 8 >> 24) - 32) > 0x5E
    || ((v31 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v42, a5);
  }
  else
  {
    __sa[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v42, __sa);
  }
  v32 = std::string::insert(&v42, 0, "-", 1uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v44 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if (v44 >= 0)
    v35 = HIBYTE(v44);
  else
    v35 = (std::string::size_type)__p[1];
  std::string::append(&v45, (const std::string::value_type *)v34, v35);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (a6)
    v36 = "-ulnk";
  else
    v36 = "-dlnk";
  std::string::append(&v45, v36, 5uLL);
  strcpy(__sa, "medc");
  std::string::basic_string[abi:ne180100]<0>(&v42, __sa);
  v37 = std::string::insert(&v42, 0, "-", 1uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v44 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v39 = __p;
  else
    v39 = (void **)__p[0];
  if (v44 >= 0)
    v40 = HIBYTE(v44);
  else
    v40 = (std::string::size_type)__p[1];
  std::string::append(&v45, (const std::string::value_type *)v39, v40);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  result = *(double *)&v45.__r_.__value_.__l.__data_;
  *a1 = v45;
  return result;
}

void sub_1B650F660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_10::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v5;
  uint64_t v6;
  char v7;
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  char *v13;
  char *v14;
  const char *v16;
  const void *v17;
  _BYTE *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int *v27;
  int v28;
  int *p_p;
  const char *v30;
  _QWORD *v31;
  NSObject *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int *v53;
  int v54;
  const char *v55;
  uint64_t v56;
  AUPropertyItem **v57;
  _QWORD *v58;
  NSObject *v59;
  const char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int *v64;
  int v65;
  int *v66;
  int *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  int *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int *v80;
  int v81;
  char *v82;
  unsigned __int8 *v83;
  int *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  int *v88;
  int v89;
  const char *v90;
  int *v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  int *v95;
  int v96;
  const char *v97;
  uint64_t v98;
  __int128 v99;
  CFStringRef v101;
  char v102;
  CFTypeRef cf;
  void *__p;
  uint64_t v105;
  uint64_t v106;
  _BYTE buf[38];
  __int16 v108;
  int *v109;
  __int128 *v110;
  char v111;
  uint64_t v112;

  v3 = a3;
  v112 = *MEMORY[0x1E0C80C00];
  v5 = BYTE4(a3);
  v6 = *a1;
  __p = 0;
  v105 = 0;
  v106 = 0;
  v7 = *(_BYTE *)(a2 + 23);
  if (BYTE4(a3))
  {
    v8 = 0;
    v9 = *(const char **)a2;
  }
  else
  {
    v9 = *(const char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    if (v7 < 0)
    {
      v11 = *(const char **)a2;
    }
    else
    {
      v10 = *(unsigned __int8 *)(a2 + 23);
      v11 = (const char *)a2;
    }
    if (v10 >= 6)
    {
      v12 = (char *)&v11[v10];
      v13 = (char *)v11;
      do
      {
        v14 = (char *)memchr(v13, 45, v10 - 5);
        if (!v14)
          break;
        if (*(_DWORD *)v14 == 1852597293 && *((_WORD *)v14 + 2) == 11627)
        {
          if (v14 != v12 && v14 - v11 != -1)
          {
            v8 = 0;
            HIBYTE(v106) = 10;
            LOWORD(v105) = 20566;
            __p = *(void **)"(DL)-AuxVP";
            goto LABEL_19;
          }
          break;
        }
        v13 = v14 + 1;
        v10 = v12 - v13;
      }
      while (v12 - v13 >= 6);
    }
    HIBYTE(v106) = 10;
    LOWORD(v105) = 20566;
    __p = *(void **)"(UL)-AuxVP";
    v8 = 1;
  }
LABEL_19:
  cf = 0;
  if (v7 >= 0)
    v16 = (const char *)a2;
  else
    v16 = v9;
  v17 = TuningPListMgr::lookupPlist_(*(_QWORD *)(v6 + 2728), v16, 1u);
  v18 = (_BYTE *)(v6 + 15897);
  cf = v17;
  if (v17)
    goto LABEL_113;
  v19 = *(_QWORD *)(v6 + 2728);
  v99 = *((_OWORD *)a1 + 1);
  v110 = (__int128 *)CFStringCreateWithCString(0, "AU", 0x600u);
  v111 = 1;
  if (*(char *)(a2 + 23) >= 0)
    v20 = (const char *)a2;
  else
    v20 = *(const char **)a2;
  v101 = CFStringCreateWithCString(0, v20, 0x600u);
  v102 = 1;
  *(_OWORD *)buf = v99;
  *(_QWORD *)&buf[16] = &v110;
  *(_QWORD *)&buf[24] = &v101;
  *(_DWORD *)a1[1] = TuningPListMgr::loadTuningInSubdirs_(v19, (const __CFString ***)buf, 4u, 1u);
  CACFString::~CACFString((CACFString *)&v101);
  CACFString::~CACFString((CACFString *)&v110);
  if (*(_DWORD *)a1[1])
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v21 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      v22 = (*v21 ? *v21 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v110, 0x6D656463u);
        if (*(char *)(a2 + 23) >= 0)
          v23 = (const char *)a2;
        else
          v23 = *(const char **)a2;
        if (v5)
        {
          v24 = 0;
          v25 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
          if (v8)
            v25 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
          v26 = 62;
          if (v8)
            v26 = 71;
          v27 = v25;
          while (1)
          {
            v28 = *v27;
            v27 += 18;
            if (v28 == v3)
              break;
            if (v26 == ++v24)
            {
              p_p = 0;
              goto LABEL_89;
            }
          }
          p_p = &v25[18 * v24 + 2];
        }
        else
        {
          p_p = (int *)&__p;
          if (v106 < 0)
            p_p = (int *)__p;
        }
LABEL_89:
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1116;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &v110;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v23;
        v108 = 2080;
        v109 = p_p;
        _os_log_impl(&dword_1B5ED0000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> could not find '%s' override preset \"%s\" for %s!", buf, 0x30u);
      }
    }
    v47 = *(int **)(v6 + 12560);
    if (v47 && (*v18 || *(_BYTE *)(v6 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v48 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x6D656463u);
      if (*(char *)(a2 + 23) >= 0)
        v49 = (const char *)a2;
      else
        v49 = *(const char **)a2;
      if (v5)
      {
        v50 = 0;
        v51 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        if (v8)
          v51 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        v52 = 62;
        if (v8)
          v52 = 71;
        v53 = v51;
        while (1)
        {
          v54 = *v53;
          v53 += 18;
          if (v54 == v3)
            break;
          if (v52 == ++v50)
          {
            v55 = 0;
            goto LABEL_111;
          }
        }
        v55 = (const char *)&v51[18 * v50 + 2];
      }
      else
      {
        v55 = (const char *)&__p;
        if (v106 < 0)
          v55 = (const char *)__p;
      }
LABEL_111:
      CALegacyLog::log(v47, 2, v48, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1116, "operator()", "could not find '%s' override preset \"%s\" for %s!", buf, v49, v55);
    }
    v17 = cf;
    if (cf)
      goto LABEL_113;
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v30 = (const char *)a2;
    else
      v30 = *(const char **)a2;
    v17 = TuningPListMgr::lookupPlist_(*(_QWORD *)(v6 + 2728), v30, 1u);
    cf = v17;
    if (v17)
    {
LABEL_113:
      CFRetain(v17);
      v56 = 6480;
      if (v8)
        v56 = 2608;
      if (v5)
        v57 = (AUPropertyItem **)(v6 + 4352 + 24 * v3 + 6552);
      else
        v57 = (AUPropertyItem **)(v6 + 4352 + v56);
      AUPropAndParamHelper::AddItemToAUPropsList(v57, 0, 0, 0, 8uLL, &cf, 1);
      CFRelease(cf);
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v58 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        v59 = (*v58 ? *v58 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v110, 0x6D656463u);
          if (*(char *)(a2 + 23) >= 0)
            v60 = (const char *)a2;
          else
            v60 = *(const char **)a2;
          if (v5)
          {
            v61 = 0;
            v62 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
            if (v8)
              v62 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
            v63 = 62;
            if (v8)
              v63 = 71;
            v64 = v62;
            while (1)
            {
              v65 = *v64;
              v64 += 18;
              if (v65 == v3)
                break;
              if (v63 == ++v61)
              {
                v66 = 0;
                goto LABEL_142;
              }
            }
            v66 = &v62[18 * v61 + 2];
          }
          else
          {
            v66 = (int *)&__p;
            if (v106 < 0)
              v66 = (int *)__p;
          }
LABEL_142:
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1130;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = &v110;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v60;
          v108 = 2080;
          v109 = v66;
          _os_log_impl(&dword_1B5ED0000, v59, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> found '%s' override preset \"%s\" for %s", buf, 0x30u);
        }
      }
      v67 = *(int **)(v6 + 12560);
      if (v67 && (*v18 || *(_BYTE *)(v6 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v68 = VPLogScope(void)::scope;
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, 0x6D656463u);
        if (*(char *)(a2 + 23) >= 0)
          v69 = (const char *)a2;
        else
          v69 = *(const char **)a2;
        if (v5)
        {
          v70 = 0;
          v71 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
          if (v8)
            v71 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
          v72 = 62;
          if (v8)
            v72 = 71;
          v73 = v71;
          while (1)
          {
            v74 = *v73;
            v73 += 18;
            if (v74 == v3)
              break;
            if (v72 == ++v70)
            {
              v75 = 0;
              goto LABEL_164;
            }
          }
          v75 = (const char *)&v71[18 * v70 + 2];
        }
        else
        {
          v75 = (const char *)&__p;
          if (v106 < 0)
            v75 = (const char *)__p;
        }
LABEL_164:
        CALegacyLog::log(v67, 4, v68, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1130, "operator()", "found '%s' override preset \"%s\" for %s", buf, v69, v75);
      }
      if (v8)
        v76 = 264;
      else
        v76 = 224;
      if (v5)
      {
        v77 = 0;
        v78 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        if (v8)
          v78 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        v79 = 62;
        if (v8)
          v79 = 71;
        v80 = v78;
        while (1)
        {
          v81 = *v80;
          v80 += 18;
          if (v81 == v3)
            break;
          if (v79 == ++v77)
          {
            v82 = 0;
            goto LABEL_181;
          }
        }
        v82 = (char *)&v78[18 * v77 + 2];
      }
      else if (v106 >= 0)
      {
        v82 = (char *)&__p;
      }
      else
      {
        v82 = (char *)__p;
      }
LABEL_181:
      std::string::basic_string[abi:ne180100]<0>(buf, v82);
      v110 = (__int128 *)buf;
      v83 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 4352 + v76, buf, (uint64_t)&std::piecewise_construct, &v110);
      std::string::operator=((std::string *)(v83 + 40), (const std::string *)a2);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (v3 == 15 && v5)
        *(_BYTE *)a1[4] = 1;
      goto LABEL_186;
    }
  }
  if (v5)
  {
    if (v3 == 15)
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v31 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        v32 = (*v31 ? *v31 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          v33 = 0;
          v34 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
          if (v8)
            v34 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
          v35 = 62;
          if (v8)
            v35 = 71;
          v36 = v34;
          while (1)
          {
            v37 = *v36;
            v36 += 18;
            if (v37 == 15)
              break;
            if (v35 == ++v33)
            {
              v38 = 0;
              goto LABEL_190;
            }
          }
          v38 = (uint64_t)&v34[18 * v33 + 2];
LABEL_190:
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1150;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v38;
          _os_log_impl(&dword_1B5ED0000, v32, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> Could not find route specific preset for %s...VP will try loading global preset next", buf, 0x1Cu);
        }
      }
      v84 = *(int **)(v6 + 12560);
      if (v84 && (*v18 || *(_BYTE *)(v6 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v85 = 0;
        v86 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        if (v8)
          v86 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        v87 = 62;
        if (v8)
          v87 = 71;
        v88 = v86;
        while (1)
        {
          v89 = *v88;
          v88 += 18;
          if (v89 == 15)
            break;
          if (v87 == ++v85)
          {
            v90 = 0;
            goto LABEL_205;
          }
        }
        v90 = (const char *)&v86[18 * v85 + 2];
LABEL_205:
        CALegacyLog::log(v84, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1150, "operator()", "Could not find route specific preset for %s...VP will try loading global preset next", v90);
      }
    }
    else
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v39 = (_QWORD *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        v40 = (*v39 ? *v39 : MEMORY[0x1E0C81028]);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 0;
          v42 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
          if (v8)
            v42 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
          v43 = 62;
          if (v8)
            v43 = 71;
          v44 = v42;
          while (1)
          {
            v45 = *v44;
            v44 += 18;
            if (v45 == v3)
              break;
            if (v43 == ++v41)
            {
              v46 = 0;
              goto LABEL_207;
            }
          }
          v46 = (uint64_t)&v42[18 * v41 + 2];
LABEL_207:
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1145;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v46;
          _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> Bypassing %s!\n", buf, 0x1Cu);
        }
      }
      v91 = *(int **)(v6 + 12560);
      if (v91 && (*v18 || *(_BYTE *)(v6 + 15898)))
      {
        if (VPLogScope(void)::once != -1)
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
        v92 = 0;
        v93 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
        if (v8)
          v93 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
        v94 = 62;
        if (v8)
          v94 = 71;
        v95 = v93;
        while (1)
        {
          v96 = *v95;
          v95 += 18;
          if (v96 == v3)
            break;
          if (v94 == ++v92)
          {
            v97 = 0;
            goto LABEL_222;
          }
        }
        v97 = (const char *)&v93[18 * v92 + 2];
LABEL_222:
        CALegacyLog::log(v91, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1145, "operator()", "Bypassing %s!\n", v97);
      }
      v98 = *(_QWORD *)a1[5];
      *(_DWORD *)buf = 1;
      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)(v98 + 24 * v3 + 10904), 0x15u, 0, 0, 4uLL, buf, 1);
    }
  }
LABEL_186:
  if (SHIBYTE(v106) < 0)
    operator delete(__p);
}

void sub_1B65103A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::LoadAUDataPreset(char const*,char const*,char const*)::$_13::operator()(uint64_t a1, const std::string *a2, uint64_t a3, AUPropertyItem **a4)
{
  unint64_t v4;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int TuningInSubdirs;
  _BYTE *v13;
  _QWORD *v14;
  NSObject *v15;
  const std::string *v16;
  const char *v17;
  int *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const __CFDictionary *v23;
  _QWORD *v24;
  NSObject *v25;
  const std::string *v26;
  const char *v27;
  int *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  const std::string *v41;
  const char *v42;
  int *v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  uint64_t **v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  float v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  _QWORD *v59;
  unint64_t v60;
  __int128 v61;
  CFTypeRef cf;
  char v63;
  _BYTE buf[38];
  __int16 v65;
  const char *v66;
  CFStringRef v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(v9 + 2728);
  v61 = *(_OWORD *)(a1 + 16);
  v67 = CFStringCreateWithCString(0, "AU", 0x600u);
  v68 = 1;
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = (const char *)a2;
  else
    v11 = (const char *)a2->__r_.__value_.__r.__words[0];
  cf = CFStringCreateWithCString(0, v11, 0x600u);
  v63 = 1;
  *(_OWORD *)buf = v61;
  *(_QWORD *)&buf[16] = &v67;
  *(_QWORD *)&buf[24] = &cf;
  TuningInSubdirs = TuningPListMgr::loadTuningInSubdirs_(v10, (const __CFString ***)buf, 4u, 1u);
  v13 = (_BYTE *)(v9 + 15897);
  **(_DWORD **)a1 = TuningInSubdirs;
  CACFString::~CACFString((CACFString *)&cf);
  CACFString::~CACFString((CACFString *)&v67);
  if (**(_DWORD **)a1)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v14 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      v15 = (*v14 ? *v14 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v67, *(_DWORD *)(v9 + 92));
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = a2;
        else
          v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 23) >= 0)
          v17 = (const char *)a3;
        else
          v17 = *(const char **)a3;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1519;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &v67;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v16;
        v65 = 2080;
        v66 = v17;
        _os_log_impl(&dword_1B5ED0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> could not find '%s' override preset \"%s\" for %s!", buf, 0x30u);
      }
    }
    v18 = *(int **)(v9 + 12560);
    if (v18 && (*v13 || *(_BYTE *)(v9 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v19 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(v9 + 92));
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = (const char *)a2;
      else
        v20 = (const char *)a2->__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 23) >= 0)
        v21 = (const char *)a3;
      else
        v21 = *(const char **)a3;
      CALegacyLog::log(v18, 1, v19, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1519, "operator()", "could not find '%s' override preset \"%s\" for %s!", buf, v20, v21);
    }
    return;
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = (const char *)a2;
  else
    v22 = (const char *)a2->__r_.__value_.__r.__words[0];
  v23 = TuningPListMgr::lookupPlist_(*(_QWORD *)(v9 + 2728), v22, 1u);
  cf = v23;
  if (!v23)
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v39 = (_QWORD *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
    {
      v40 = (*v39 ? *v39 : MEMORY[0x1E0C81028]);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v67, *(_DWORD *)(v9 + 92));
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = a2;
        else
          v41 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 23) >= 0)
          v42 = (const char *)a3;
        else
          v42 = *(const char **)a3;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1530;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = &v67;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v41;
        v65 = 2080;
        v66 = v42;
        _os_log_impl(&dword_1B5ED0000, v40, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> Not found '%s' override preset \"%s\" for %s", buf, 0x30u);
      }
    }
    v43 = *(int **)(v9 + 12560);
    if (v43 && (*v13 || *(_BYTE *)(v9 + 15898)))
    {
      if (VPLogScope(void)::once != -1)
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
      v44 = VPLogScope(void)::scope;
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(v9 + 92));
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = (const char *)a2;
      else
        v45 = (const char *)a2->__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 23) >= 0)
        v46 = (const char *)a3;
      else
        v46 = *(const char **)a3;
      CALegacyLog::log(v43, 4, v44, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1530, "operator()", "Not found '%s' override preset \"%s\" for %s", buf, v45, v46);
    }
    return;
  }
  CFRetain(v23);
  AUPropAndParamHelper::AddItemToAUPropsList(a4, 0, 0, 0, 8uLL, &cf, 1);
  CFRelease(cf);
  if (VPLogScope(void)::once != -1)
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
  v24 = (_QWORD *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    v25 = (*v24 ? *v24 : MEMORY[0x1E0C81028]);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)&v67, *(_DWORD *)(v9 + 92));
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = a2;
      else
        v26 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 23) >= 0)
        v27 = (const char *)a3;
      else
        v27 = *(const char **)a3;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "vpTuningHelper.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1526;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = &v67;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v26;
      v65 = 2080;
      v66 = v27;
      _os_log_impl(&dword_1B5ED0000, v25, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> found '%s' override preset \"%s\" for %s", buf, 0x30u);
    }
  }
  v28 = *(int **)(v9 + 12560);
  if (v28 && (*v13 || *(_BYTE *)(v9 + 15898)))
  {
    if (VPLogScope(void)::once != -1)
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_19930);
    v29 = VPLogScope(void)::scope;
    CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)buf, *(_DWORD *)(v9 + 92));
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = (const char *)a2;
    else
      v30 = (const char *)a2->__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 23) >= 0)
      v31 = (const char *)a3;
    else
      v31 = *(const char **)a3;
    CALegacyLog::log(v28, 4, v29, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpTuningHelper.cpp", 1526, "operator()", "found '%s' override preset \"%s\" for %s", buf, v30, v31);
  }
  v32 = (_QWORD *)(v9 + 4576);
  v33 = (_QWORD *)(v9 + 4600);
  v34 = std::__string_hash<char>::operator()[abi:ne180100](v9 + 4600, a3);
  v35 = v34;
  v36 = *(_QWORD *)(v9 + 4584);
  if (!v36)
    goto LABEL_109;
  v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
  v37.i16[0] = vaddlv_u8(v37);
  v38 = v37.u32[0];
  if (v37.u32[0] > 1uLL)
  {
    v4 = v34;
    if (v34 >= v36)
      v4 = v34 % v36;
  }
  else
  {
    v4 = (v36 - 1) & v34;
  }
  v47 = *(uint64_t ***)(*v32 + 8 * v4);
  if (!v47)
    goto LABEL_109;
  v48 = *v47;
  if (!*v47)
    goto LABEL_108;
  do
  {
    v49 = v48[1];
    if (v49 == v35)
    {
      if ((std::equal_to<std::string>::operator()[abi:ne180100](v9 + 4608, (unsigned __int8 *)v48 + 16, (unsigned __int8 *)a3) & 1) != 0)goto LABEL_133;
      goto LABEL_106;
    }
    if (v38 > 1)
    {
      if (v49 >= v36)
        v49 %= v36;
    }
    else
    {
      v49 &= v36 - 1;
    }
    if (v49 != v4)
      break;
LABEL_106:
    v48 = (uint64_t *)*v48;
  }
  while (v48);
  v33 = (_QWORD *)(v9 + 4600);
LABEL_108:
  v32 = (_QWORD *)(v9 + 4576);
LABEL_109:
  v50 = operator new(0x40uLL);
  v51 = (_QWORD *)(v9 + 4592);
  *(_QWORD *)buf = v50;
  *(_QWORD *)&buf[8] = v9 + 4592;
  buf[16] = 0;
  *v50 = 0;
  v50[1] = v35;
  v52 = (std::string *)(v50 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v50[4] = *(_QWORD *)(a3 + 16);
  }
  v50[5] = 0;
  v50[6] = 0;
  v50[7] = 0;
  buf[16] = 1;
  v53 = (float)(unint64_t)(*(_QWORD *)(v9 + 4600) + 1);
  v54 = *(float *)(v9 + 4608);
  if (!v36 || (float)(v54 * (float)v36) < v53)
  {
    v55 = 1;
    if (v36 >= 3)
      v55 = (v36 & (v36 - 1)) != 0;
    v56 = v55 | (2 * v36);
    v57 = vcvtps_u32_f32(v53 / v54);
    if (v56 <= v57)
      v58 = v57;
    else
      v58 = v56;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>((uint64_t)v32, v58);
    v36 = *(_QWORD *)(v9 + 4584);
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v35 >= v36)
        v4 = v35 % v36;
      else
        v4 = v35;
    }
    else
    {
      v4 = (v36 - 1) & v35;
    }
  }
  v59 = *(_QWORD **)(*v32 + 8 * v4);
  if (v59)
  {
    **(_QWORD **)buf = *v59;
    *v59 = *(_QWORD *)buf;
  }
  else
  {
    **(_QWORD **)buf = *v51;
    *v51 = *(_QWORD *)buf;
    *(_QWORD *)(*v32 + 8 * v4) = v51;
    if (**(_QWORD **)buf)
    {
      v60 = *(_QWORD *)(**(_QWORD **)buf + 8);
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v60 >= v36)
          v60 %= v36;
      }
      else
      {
        v60 &= v36 - 1;
      }
      *(_QWORD *)(*v32 + 8 * v60) = *(_QWORD *)buf;
    }
  }
  v48 = *(uint64_t **)buf;
  *(_QWORD *)buf = 0;
  ++*v33;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
LABEL_133:
  std::string::operator=((std::string *)(v48 + 5), a2);
}

void sub_1B6510CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void VPGetPropsPListStringForKey(applesauce::CF::StringRef *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  const __CFString *v5;
  CFIndex location;
  CFIndex Length;
  CFStringRef v8;
  const __CFString *v9;
  const __CFString *v10;
  CFRange v11;

  v3 = 0;
  while (*(_DWORD *)((char *)&kVPPropsPListKeyNameTable + v3) != a2)
  {
    v3 += 16;
    if (v3 == 1296)
    {
      *(_QWORD *)a1 = 0;
      return;
    }
  }
  v4 = *(const void **)((char *)&kVPPropsPListKeyNameTable + v3 + 8);
  if (v4)
  {
    CFRetain(*(CFTypeRef *)((char *)&kVPPropsPListKeyNameTable + v3 + 8));
    applesauce::CF::StringRef::StringRef(a1, v4);
    v5 = *(const __CFString **)a1;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = 0;
  }
  location = CFStringFind(v5, CFSTR("."), 0).location;
  if ((location & 0x8000000000000000) == 0)
  {
    Length = CFStringGetLength(*(CFStringRef *)a1);
    v11.location = location + 2;
    v11.length = Length - (location + 2);
    v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)a1, v11);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v10, v8);
    v9 = *(const __CFString **)a1;
    *(_QWORD *)a1 = v10;
    v10 = v9;
    if (v9)
      CFRelease(v9);
  }
}

void sub_1B6510E24(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::StringRef::~StringRef(v1);
  _Unwind_Resume(a1);
}

uint64_t myAllocABLDynamic(const AudioStreamBasicDescription *a1, int a2, AudioBufferList **a3)
{
  AudioFormatFlags mFormatFlags;
  char *v7;
  AudioBufferList *v8;
  size_t v9;
  AudioBufferList *v10;
  UInt32 mChannelsPerFrame;
  uint64_t v12;
  unint64_t v13;
  UInt32 v14;
  char *v15;
  size_t v16;
  void *v17;
  BOOL v18;
  void *v19;
  std::bad_alloc *exception;
  std::bad_alloc *v22;

  mFormatFlags = a1->mFormatFlags;
  myFreeABLDynamic(a3);
  if ((mFormatFlags & 0x20) == 0)
  {
    v7 = (char *)malloc_type_malloc(0x18uLL, 0x2C8E6D5CuLL);
    if (v7)
    {
      v8 = (AudioBufferList *)v7;
      *(_QWORD *)(v7 + 12) = 0;
      *(_QWORD *)(v7 + 4) = 0;
      *((_DWORD *)v7 + 5) = 0;
      *a3 = (AudioBufferList *)v7;
      *(_DWORD *)v7 = 1;
      goto LABEL_6;
    }
LABEL_17:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v22 = std::bad_alloc::bad_alloc(exception);
  }
  v9 = 16 * (a1->mChannelsPerFrame - 1) + 24;
  v10 = (AudioBufferList *)malloc_type_malloc(v9, 0x2C8E6D5CuLL);
  if (!v10)
    goto LABEL_17;
  v8 = v10;
  bzero(v10, v9);
  *a3 = v8;
  mChannelsPerFrame = a1->mChannelsPerFrame;
  v8->mNumberBuffers = mChannelsPerFrame;
  if (!mChannelsPerFrame)
    return 0;
LABEL_6:
  v12 = 0;
  v13 = 0;
  while (1)
  {
    v14 = a1->mChannelsPerFrame;
    if ((mFormatFlags & 0x20) != 0)
      v14 = 1;
    v15 = (char *)v8 + v12 * 16;
    v16 = a1->mBytesPerFrame * a2;
    *((_DWORD *)v15 + 2) = v14;
    *((_DWORD *)v15 + 3) = v16;
    v17 = malloc_type_malloc(v16, 0x2C8E6D5CuLL);
    if ((_DWORD)v16)
      v18 = v17 == 0;
    else
      v18 = 0;
    if (v18)
      goto LABEL_17;
    v19 = v17;
    bzero(v17, v16);
    (*a3)->mBuffers[v12].mData = v19;
    v8 = *a3;
    if (!(*a3)->mBuffers[v12].mData)
      return 4294967188;
    ++v13;
    ++v12;
    if (v13 >= v8->mNumberBuffers)
      return 0;
  }
}

void myFreeABLDynamic(AudioBufferList **a1)
{
  unsigned int *v2;
  unint64_t mNumberBuffers;
  unint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)*a1;
  if (v2)
  {
    mNumberBuffers = *v2;
    if ((_DWORD)mNumberBuffers)
    {
      v4 = 0;
      v5 = 4;
      do
      {
        if (*(_QWORD *)&v2[v5])
        {
          free(*(void **)&v2[v5]);
          *(_QWORD *)((char *)&(*a1)->mNumberBuffers + v5 * 4) = 0;
          v2 = (unsigned int *)*a1;
          mNumberBuffers = (*a1)->mNumberBuffers;
        }
        ++v4;
        v5 += 4;
      }
      while (v4 < mNumberBuffers);
    }
    free(v2);
    *a1 = 0;
  }
}

void WritePropertyListToFile(CFPropertyListRef *a1, const char *a2)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  const __CFURL *v5;
  const __CFData *Data;
  NSObject *v7;
  SInt32 errorCode;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  SInt32 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  errorCode = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x600u);
  v5 = CFURLCreateWithFileSystemPath(v3, v4, kCFURLPOSIXPathStyle, 0);
  Data = CFPropertyListCreateData(v3, *a1, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (!CFURLWriteDataAndPropertiesToResource(v5, Data, 0, &errorCode))
  {
    if (VPGenCppUtilsLogScope(void)::once != -1)
      dispatch_once(&VPGenCppUtilsLogScope(void)::once, &__block_literal_global_20762);
    if (VPGenCppUtilsLogScope(void)::scope)
    {
      v7 = *(NSObject **)VPGenCppUtilsLogScope(void)::scope;
      if (!*(_QWORD *)VPGenCppUtilsLogScope(void)::scope)
        goto LABEL_2;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "vpGenCppUtils.cpp";
      v11 = 1024;
      v12 = 290;
      v13 = 1024;
      v14 = errorCode;
      _os_log_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d _vp: plist write to file: err-%d writing plist", buf, 0x18u);
    }
  }
LABEL_2:
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (Data)
    CFRelease(Data);
}

os_log_t ___ZL21VPGenCppUtilsLogScopev_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "vpgencpputil");
  *v0 = result;
  VPGenCppUtilsLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void WriteItemToDictionary(__CFDictionary **a1, const void **a2, int a3, unint64_t a4, const char *valuePtr)
{
  const __CFAllocator *v8;
  CFStringEncoding SystemEncoding;
  void *v10;
  const __CFAllocator *v11;
  CFNumberType v12;
  const void *v13;
  __CFArray *Value;
  __CFArray *Mutable;

  switch(a3)
  {
    case 0:
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      SystemEncoding = CFStringGetSystemEncoding();
      v10 = (void *)CFStringCreateWithCString(v8, valuePtr, SystemEncoding);
      goto LABEL_10;
    case 1:
      if (a4 < 4)
        goto LABEL_14;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = kCFNumberIntType;
      goto LABEL_9;
    case 2:
      if (a4 < 4)
        goto LABEL_14;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = kCFNumberFloat32Type;
      goto LABEL_9;
    case 3:
      if (a4 < 8)
        goto LABEL_14;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = kCFNumberFloat64Type;
LABEL_9:
      v10 = CFNumberCreate(v11, v12, valuePtr);
LABEL_10:
      v13 = v10;
      break;
    case 4:
      if (a4 < 8)
        goto LABEL_14;
      v13 = *(const void **)valuePtr;
      if (*(_QWORD *)valuePtr)
        CFRetain(v13);
      break;
    default:
LABEL_14:
      v13 = 0;
      break;
  }
  if (CFDictionaryContainsKey(*a1, *a2))
  {
    Value = (__CFArray *)CFDictionaryGetValue(*a1, *a2);
    Mutable = Value;
    if (Value)
    {
      CFRetain(Value);
      if (v13)
        goto LABEL_18;
    }
  }
  else
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (v13)
LABEL_18:
      CFArrayAppendValue(Mutable, v13);
  }
  CFDictionarySetValue(*a1, *a2, Mutable);
  if (v13)
    CFRelease(v13);
  if (Mutable)
    CFRelease(Mutable);
}

void ASBDToText(const CAStreamBasicDescription *a1, char *__str)
{
  uint64_t v4;
  int16x8_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int32x4_t v9;
  uint32x4_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;
  const char *v19;
  char __dst[8];
  uint64_t v21;
  uint64_t v22;
  _BYTE __source[24];
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = 0uLL;
  do
  {
    *(_OWORD *)&__str[v4] = 0uLL;
    v4 += 16;
  }
  while (v4 != 512);
  v6 = *((_DWORD *)a1 + 2);
  if (v6 == 1819304813)
  {
    v7 = *((_DWORD *)a1 + 3);
    if ((v7 & 1) != 0)
    {
      *(_WORD *)__str = 70;
      v8 = 1;
    }
    else
    {
      if ((v7 & 2) != 0)
        snprintf(__str, 0x200uLL, "BE");
      else
        snprintf(__str, 0x200uLL, "LE");
      if ((*((_BYTE *)a1 + 12) & 4) != 0)
      {
        *((_WORD *)__str + 1) = 73;
        v8 = 3;
      }
      else
      {
        strcpy(__str + 2, "UI");
        v8 = 4;
      }
    }
    if (((*((_DWORD *)a1 + 3) >> 7) & 0x3F) != 0)
      snprintf(__source, 0x14uLL, "%d.%d");
    else
      snprintf(__source, 0x14uLL, "%d");
    snprintf(&__str[v8], v8 | 0x200, "%s");
  }
  else
  {
    *(_QWORD *)__dst = 0;
    v21 = 0;
    v22 = 0;
    *(_DWORD *)&__source[4] = 0;
    v5.i32[0] = bswap32(v6);
    *(int8x8_t *)v5.i8 = vzip1_s8(*(int8x8_t *)v5.i8, *(int8x8_t *)v5.i8);
    v9.i64[0] = 0x1F0000001FLL;
    v9.i64[1] = 0x1F0000001FLL;
    v10.i64[0] = 0x5F0000005FLL;
    v10.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v5.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v10, (uint32x4_t)vsraq_n_s32(v9, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v5.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v5.i8, (int8x8_t)0x2E002E002E002ELL);
    *(_QWORD *)&__source[8] = 0;
    *(_QWORD *)&__source[16] = 0x400000000000000;
    *(_DWORD *)__source = vmovn_s16(v5).u32[0];
    strlcpy(__dst, __source, 0x18uLL);
    if ((__source[23] & 0x80000000) != 0)
      operator delete(*(void **)__source);
    __dst[5] = 0;
    snprintf(__str, 0x200uLL, "%s");
  }
  v11 = strlen(__str);
  snprintf(&__str[v11], v11 + 512, "@%.0f/%X", *(double *)a1, *((_DWORD *)a1 + 3));
  v12 = strlen(__str);
  v13 = &__str[v12];
  if (*((_DWORD *)a1 + 2) != 1819304813)
  {
    snprintf(v13, v12 + 512, "#%d", *((_DWORD *)a1 + 5));
    v13 = &__str[strlen(__str)];
  }
  v14 = *((_DWORD *)a1 + 6);
  v15 = *((_DWORD *)a1 + 3);
  if (!v14)
    goto LABEL_38;
  if ((v15 & 0x20) != 0)
  {
    v16 = 1;
  }
  else
  {
    v16 = *((_DWORD *)a1 + 7);
    if (!v16)
      goto LABEL_38;
  }
  if ((int)(v14 / v16) < 1)
  {
LABEL_38:
    if ((v15 & 0x20) != 0)
      v19 = "D";
    else
      v19 = "I";
    snprintf(v13, v13 - __str + 512, ",%d%s", *((_DWORD *)a1 + 7), v19);
    return;
  }
  if (*((_DWORD *)a1 + 2) == 1819304813)
  {
    if ((v15 & 0x20) != 0)
    {
      v17 = 1;
    }
    else
    {
      v17 = *((_DWORD *)a1 + 7);
      if (!v17)
      {
LABEL_33:
        if (v17 != *((_DWORD *)a1 + 8))
        {
          if ((v15 & 0x10) != 0)
            v18 = "H";
          else
            v18 = "L";
          snprintf(v13, v13 - __str + 512, ":%s%d", v18, v14);
          v13 = &__str[strlen(__str)];
          v15 = *((_DWORD *)a1 + 3);
        }
        goto LABEL_38;
      }
    }
    v17 = 8 * (v14 / v17);
    goto LABEL_33;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__source = 136315394;
    *(_QWORD *)&__source[4] = "CAStreamBasicDescription.h";
    *(_WORD *)&__source[12] = 1024;
    *(_DWORD *)&__source[14] = 234;
    _os_log_impl(&dword_1B5ED0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  PackednessIsSignificant only applies for PCM", __source, 0x12u);
  }
  __break(1u);
}

void sub_1B6511728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t BlockSizeHelper::GetNextFFTFriendlyBlkSz(unint64_t this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  const char *v6;
  void *__p;
  _BYTE *v9;
  uint64_t v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  _OWORD v19[7];
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v19[4] = xmmword_1B6686D34;
  v19[5] = unk_1B6686D44;
  v19[6] = xmmword_1B6686D54;
  v19[0] = xmmword_1B6686CF4;
  v19[1] = unk_1B6686D04;
  v19[2] = xmmword_1B6686D14;
  v19[3] = unk_1B6686D24;
  __p = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&__p, v19, (uint64_t)v20, 0x1CuLL);
  if ((this - 4097) < 0xFFFFF00F)
  {
    if (VPGenCppUtilsLogScope(void)::once != -1)
      dispatch_once(&VPGenCppUtilsLogScope(void)::once, &__block_literal_global_20762);
    if (VPGenCppUtilsLogScope(void)::scope)
    {
      v2 = *(NSObject **)VPGenCppUtilsLogScope(void)::scope;
      if (!*(_QWORD *)VPGenCppUtilsLogScope(void)::scope)
      {
LABEL_18:
        this = 0;
        goto LABEL_23;
      }
    }
    else
    {
      v2 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v6 = "large";
      *(_DWORD *)buf = 136315906;
      v12 = "vpGenCppUtils.cpp";
      v14 = 559;
      v13 = 1024;
      if (this < 0x10)
        v6 = "small";
      v15 = 1024;
      v16 = this;
      v17 = 2080;
      v18 = v6;
      _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d GetNextFFTFriendlyBlkSz: input block size %d is too %s !!!", buf, 0x22u);
    }
    goto LABEL_18;
  }
  if ((int)((unint64_t)(v9 - (_BYTE *)__p) >> 2) < 1)
  {
LABEL_12:
    v4 = 0;
    v5 = 0;
LABEL_20:
    if (this - v5 >= v4 - this)
      this = v4;
    else
      this = v5;
  }
  else
  {
    v3 = 0;
    while (1)
    {
      v4 = *((_DWORD *)__p + v3);
      if (v4 == (_DWORD)this)
        break;
      if (v4 > this)
      {
        v5 = *(_DWORD *)((char *)__p + (((v3 << 32) - 0x100000000) >> 30));
        goto LABEL_20;
      }
      if (((unint64_t)(v9 - (_BYTE *)__p) >> 2) == ++v3)
        goto LABEL_12;
    }
  }
LABEL_23:
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return this;
}

AudioBufferList *GetMonoABL(AudioBufferList *a1, AudioBufferList *a2, vDSP_Length __N)
{
  AudioBufferList *v4;
  vDSP_Length v5;
  unint64_t v6;
  uint64_t v7;
  float __B;

  if (!a1)
    return 0;
  if (a1->mNumberBuffers < 2)
    return a1;
  v4 = a2;
  *(_QWORD *)&a2->mNumberBuffers = 0;
  *(_QWORD *)&a2->mBuffers[0].mNumberChannels = 0;
  a2->mBuffers[0].mData = 0;
  a2->mNumberBuffers = 1;
  a2->mBuffers[0] = a1->mBuffers[0];
  __B = 1.0 / (float)a1->mNumberBuffers;
  v5 = __N;
  vDSP_vsmul((const float *)a1->mBuffers[0].mData, 1, &__B, (float *)a1->mBuffers[0].mData, 1, __N);
  if (a1->mNumberBuffers >= 2)
  {
    v6 = 1;
    v7 = 32;
    do
    {
      vDSP_vsma(*(const float **)((char *)&a1->mNumberBuffers + v7), 1, &__B, (const float *)a1->mBuffers[0].mData, 1, (float *)a1->mBuffers[0].mData, 1, v5);
      ++v6;
      v7 += 16;
    }
    while (v6 < a1->mNumberBuffers);
  }
  return v4;
}

UInt32 *CopyAllBuffersABL(UInt32 *result, const AudioBufferList *a2)
{
  uint64_t mNumberBuffers;
  void **p_mData;
  void **v4;
  unsigned int v5;
  unsigned int v6;
  size_t v7;

  if (a2->mNumberBuffers >= *result)
    mNumberBuffers = *result;
  else
    mNumberBuffers = a2->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    p_mData = &a2->mBuffers[0].mData;
    v4 = (void **)(result + 4);
    do
    {
      v5 = *((_DWORD *)p_mData - 1);
      v6 = *((_DWORD *)v4 - 1);
      if (v5 >= v6)
        v7 = v6;
      else
        v7 = v5;
      result = (UInt32 *)memcpy(*v4, *p_mData, v7);
      p_mData += 2;
      v4 += 2;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  return result;
}

void FadeOutOverOneFrame(AudioBufferList *this, AudioBufferList *a2)
{
  unint64_t v4;
  void **p_mData;
  unint64_t v6;
  vDSP_Length v7;
  uint64_t v8;

  if (a2->mNumberBuffers)
  {
    v4 = 0;
    p_mData = &a2->mBuffers[0].mData;
    do
    {
      bzero(*p_mData, *((unsigned int *)p_mData - 1));
      ++v4;
      p_mData += 2;
    }
    while (v4 < a2->mNumberBuffers);
  }
  vp::utility::fade_srcA_to_srcB((vp::utility *)this, a2, a2, 0, 1);
  if (this->mNumberBuffers)
  {
    v6 = 0;
    v7 = (unint64_t)this->mBuffers[0].mDataByteSize >> 2;
    v8 = 16;
    do
    {
      vDSP_vclr(*(float **)((char *)&this->mNumberBuffers + v8), 1, v7);
      ++v6;
      v8 += 16;
    }
    while (v6 < this->mNumberBuffers);
  }
}

uint64_t FadeInOverFewFrames(AudioBufferList *a1, AudioBufferList *a2, uint64_t a3, int a4)
{
  unint64_t v8;
  vDSP_Length v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  float __C;

  if (!a2->mNumberBuffers)
    goto LABEL_15;
  v8 = 0;
  v9 = (unint64_t)a2->mBuffers[0].mDataByteSize >> 2;
  v10 = 0.0;
  v11 = 16;
  do
  {
    __C = 0.0;
    vDSP_svemg(*(const float **)((char *)&a2->mNumberBuffers + v11), 1, &__C, v9);
    v10 = v10 + __C;
    if (__C != 0.0)
      break;
    ++v8;
    v11 += 16;
  }
  while (v8 < a2->mNumberBuffers);
  if (!(_DWORD)a3 && v10 != 0.0)
  {
    if (a2->mNumberBuffers)
    {
      v12 = 0;
      v13 = 16;
      do
      {
        vDSP_vclr(*(float **)((char *)&a2->mNumberBuffers + v13), 1, v9);
        ++v12;
        v13 += 16;
      }
      while (v12 < a2->mNumberBuffers);
      v14 = 0;
      a3 = 1;
    }
    else
    {
      v14 = 0;
      a3 = 1;
    }
    return v14 | (a3 << 32);
  }
  if (v10 == 0.0)
  {
LABEL_15:
    v14 = 0;
    return v14 | (a3 << 32);
  }
  vp::utility::fade_srcA_to_srcB((vp::utility *)a1, a2, a2, (AudioBufferList *)(a3 - 1), a4);
  v14 = (_DWORD)a3 + 1 == a4;
  if ((_DWORD)a3 + 1 == a4)
    a3 = 0;
  else
    a3 = (a3 + 1);
  return v14 | (a3 << 32);
}

double AUJBase::PostConstructor(AUJBase *this)
{
  void *v2;
  double result;
  __int128 v4;
  uint64_t v5;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 592))(&v4);
  v2 = (void *)*((_QWORD *)this + 70);
  if (v2)
  {
    *((_QWORD *)this + 71) = v2;
    operator delete(v2);
  }
  result = *(double *)&v4;
  *((_OWORD *)this + 35) = v4;
  *((_QWORD *)this + 72) = v5;
  return result;
}

uint64_t AUJBase::Initialize(AUJBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t Element;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  NSObject *v21;
  int16x8_t v22;
  void **v23;
  const char *v24;
  int16x8_t v25;
  void **v26;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  void *__p[2];
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  void **v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 15);
  if (v2)
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if (!(_DWORD)v3)
      goto LABEL_12;
LABEL_8:
    v6 = 0;
    while (1)
    {
      Element = ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 80), v6);
      v8 = *(_OWORD *)(Element + 96);
      v35 = *(_OWORD *)(Element + 80);
      v36 = v8;
      v37 = *(_QWORD *)(Element + 112);
      if (DWORD2(v35) != 1819304813 || (~HIDWORD(v35) & 0x21) != 0)
        break;
      if ((_DWORD)v3 == ++v6)
        goto LABEL_12;
    }
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v21 = *(NSObject **)AUJBase::AUJBaseLogScope(void)::scope;
      if (!*(_QWORD *)AUJBase::AUJBaseLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)&v35, (uint64_t)__p, v22);
      if (v34 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v39 = "AUJBase.cpp";
      v40 = 1024;
      v41 = 85;
      v42 = 1024;
      v43 = v6;
      v44 = 2080;
      v45 = v23;
      v24 = "%25s:%-5d Format not supported, input bus %u (format is: %s)\n";
LABEL_61:
      _os_log_impl(&dword_1B5ED0000, v21, OS_LOG_TYPE_ERROR, v24, buf, 0x22u);
      if (v34 < 0)
        operator delete(__p[0]);
    }
    return 4294956428;
  }
  v5 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  if ((_DWORD)v3)
    goto LABEL_8;
LABEL_12:
  if ((_DWORD)v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 128), v9);
      v11 = *(_OWORD *)(v10 + 96);
      v35 = *(_OWORD *)(v10 + 80);
      v36 = v11;
      v37 = *(_QWORD *)(v10 + 112);
      if (DWORD2(v35) != 1819304813 || (~HIDWORD(v35) & 0x21) != 0)
        break;
      if ((_DWORD)v5 == ++v9)
        goto LABEL_17;
    }
    if (AUJBase::AUJBaseLogScope(void)::once != -1)
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_20859);
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      v21 = *(NSObject **)AUJBase::AUJBaseLogScope(void)::scope;
      if (!*(_QWORD *)AUJBase::AUJBaseLogScope(void)::scope)
        return 4294956428;
    }
    else
    {
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      CA::StreamDescription::AsString((CA::StreamDescription *)&v35, (uint64_t)__p, v25);
      if (v34 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v39 = "AUJBase.cpp";
      v40 = 1024;
      v41 = 95;
      v42 = 1024;
      v43 = v9;
      v44 = 2080;
      v45 = v26;
      v24 = "%25s:%-5d Format not supported, output bus %u (format: %s)\n";
      goto LABEL_61;
    }
    return 4294956428;
  }
LABEL_17:
  v12 = (__int16 *)*((_QWORD *)this + 70);
  v13 = (unsigned __int16 *)*((_QWORD *)this + 71);
  if (v12 == (__int16 *)v13)
    return 4294956428;
  while (1)
  {
    v14 = (unsigned __int16)*v12;
    v15 = (unsigned __int16)v12[1];
    if (v14 == 0xFFFF && v15 == 65534)
      break;
    if (v14 == 0xFFFF && v15 == 0xFFFF)
    {
      v28 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 80), 0) + 108);
      if (v3 >= 2)
      {
        v29 = 2;
        do
        {
          v30 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 80), v29 - 1) + 108) != v28
             || (_DWORD)v3 == v29;
          ++v29;
        }
        while (!v30);
      }
      if (v5 >= 2)
      {
        v31 = 2;
        do
        {
          v32 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 128), v31 - 1) + 108) != v28
             || (_DWORD)v5 == v31;
          ++v31;
        }
        while (!v32);
      }
      break;
    }
    if ((_DWORD)v3)
    {
      v18 = 0;
      v19 = 1;
      do
      {
        if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 80), v18) + 108) != *v12)
          break;
        v19 = ++v18 < v3;
      }
      while ((_DWORD)v3 != v18);
      if ((_DWORD)v5)
      {
LABEL_33:
        v20 = 0;
        while (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 128), v20) + 108) == v12[1])
        {
          if ((_DWORD)v5 == ++v20)
            goto LABEL_36;
        }
        goto LABEL_37;
      }
    }
    else
    {
      v19 = 0;
      if ((_DWORD)v5)
        goto LABEL_33;
    }
LABEL_36:
    if (!v19)
      break;
LABEL_37:
    v12 += 2;
    if (v12 == (__int16 *)v13)
      return 4294956428;
  }
  std::vector<AudioBufferList *>::resize((char **)this + 73, v3);
  std::vector<AudioBufferList *>::resize((char **)this + 76, v5);
  return 0;
}

uint64_t AUJBase::GetPropertyInfo(AUJBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if ((*(unsigned int (**)(AUJBase *))(*(_QWORD *)this + 600))(this))
    {
      result = 0;
      *a6 = 1;
      *a5 = 4;
    }
    else
    {
      return 4294956417;
    }
  }
  return result;
}

uint64_t AUJBase::GetProperty(AUJBase *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if ((*(unsigned int (**)(AUJBase *))(*(_QWORD *)this + 600))(this))
    {
      result = 0;
      *a5 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      return 4294956417;
    }
  }
  return result;
}

uint64_t AUJBase::SetParameter(AUJBase *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  int v12;
  ausdk::AUScope *v13;
  ausdk::AUElement *v14;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  if (*((_BYTE *)this + 17))
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
    ausdk::AUElement::SetParameter(Element, v8, a5, 0);
  }
  else
  {
    v12 = (*(uint64_t (**)(AUJBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 576))(this, a2, a3, a4);
    v13 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
    v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v13, v6);
    ausdk::AUElement::SetParameter(v14, v8, a5, 0);
    if (!v12)
      (*(void (**)(AUJBase *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 3, 0, 0);
  }
  return 0;
}

uint64_t AUJBase::ProcessMultipleBufferLists(AUJBase *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v8;
  uint64_t v9;
  AudioBufferList *v10;
  UInt32 v11;
  void **p_mData;

  if (a6)
  {
    v8 = 0;
    v9 = a6;
    do
    {
      v10 = a7[v8];
      if (v10->mNumberBuffers)
      {
        v11 = 0;
        p_mData = &v10->mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v11;
          p_mData += 2;
        }
        while (v11 < v10->mNumberBuffers);
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return 0;
}

uint64_t AUJBase::Render(AUJBase *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  ausdk::AUInputElement *Element;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;

  if (*((_QWORD *)this + 74) == *((_QWORD *)this + 73))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 80), v9);
      if (ausdk::AUInputElement::PullInput(Element, a2, a3, v9, a4))
        break;
      v11 = ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 80), v9);
      *(_QWORD *)(*((_QWORD *)this + 73) + 8 * v8) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
      v8 = (v9 + 1);
      v9 = v8;
      if (v8 >= (uint64_t)(*((_QWORD *)this + 74) - *((_QWORD *)this + 73)) >> 3)
        goto LABEL_8;
    }
    v8 = v9;
  }
LABEL_8:
  if (*((_QWORD *)this + 77) == *((_QWORD *)this + 76))
  {
    v15 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = ausdk::AUScope::SafeGetElement((AUJBase *)((char *)this + 128), v13 - 1);
      *(_QWORD *)(*((_QWORD *)this + 76) + 8 * v12) = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
      v12 = v13;
      v15 = (uint64_t)(*((_QWORD *)this + 77) - *((_QWORD *)this + 76)) >> 3;
    }
    while (v15 > v13++);
  }
  return (*(uint64_t (**)(AUJBase *, unsigned int *, uint64_t, unint64_t, _QWORD, unint64_t))(*(_QWORD *)this + 184))(this, a2, a4, v8, *((_QWORD *)this + 73), v15);
}

uint64_t AUJBase::SaveState(AUJBase *this, ausdk **a2)
{
  __CFDictionary *v4;
  CFNumberRef v5;
  int valuePtr;

  ausdk::AUBase::SaveState(this, a2);
  if (a2)
  {
    v4 = *a2;
    if (v4)
    {
      valuePtr = (*(uint64_t (**)(AUJBase *))(*(_QWORD *)this + 584))(this);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v4, CFSTR("auversion"), v5);
      CFRelease(v5);
    }
  }
  return 0;
}

uint64_t AUJBase::RestoreState(AUJBase *this, const void *a2)
{
  AUJBase *v3;
  CFTypeID v4;
  const __CFNumber *Value;
  const __CFData *v6;
  const __CFData *v7;
  unsigned int *BytePtr;
  CFIndex Length;
  char *v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __CFDictionary *MutableCopy;
  uint64_t v33;
  const __CFDictionary *theDict;
  unsigned int *v36;
  AUJBase *v37;
  unsigned int v38;
  unsigned int v39;
  void *__p;
  void *v41;
  char *v42;
  unsigned int valuePtr;

  v3 = this;
  if (((*(uint64_t (**)(AUJBase *))(*(_QWORD *)this + 640))(this) & 1) == 0)
    return ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)v3, a2);
  v4 = CFGetTypeID(a2);
  if (v4 != CFDictionaryGetTypeID())
    return 4294956445;
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("auversion"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  __p = 0;
  v41 = 0;
  v42 = 0;
  theDict = (const __CFDictionary *)a2;
  v6 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("data"));
  v7 = v6;
  if (v6)
  {
    BytePtr = (unsigned int *)CFDataGetBytePtr(v6);
    Length = CFDataGetLength(v7);
    if (Length >= 1)
    {
      v10 = 0;
      v36 = (unsigned int *)((char *)BytePtr + Length);
      v37 = v3;
      do
      {
        v11 = BytePtr[2];
        v12 = BytePtr + 3;
        if (v11)
        {
          v13 = 0;
          v14 = bswap32(*BytePtr);
          v15 = bswap32(BytePtr[1]);
          v16 = bswap32(v11);
          v38 = v15;
          v39 = v16;
          do
          {
            v17 = bswap32(*v12);
            v18 = bswap32(v12[1]);
            v19 = *((_QWORD *)v3 + 1);
            if (v10 >= v42)
            {
              v21 = v14;
              v22 = (char *)__p;
              v23 = (v10 - (_BYTE *)__p) >> 5;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 59)
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              v25 = v42 - (_BYTE *)__p;
              if ((v42 - (_BYTE *)__p) >> 4 > v24)
                v24 = v25 >> 4;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
                v24 = 0x7FFFFFFFFFFFFFFLL;
              if (v24)
              {
                if (v24 >> 59)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v26 = v18;
                v27 = v24;
                v28 = (char *)operator new(32 * v24);
                v18 = v26;
              }
              else
              {
                v28 = 0;
                v27 = 0;
              }
              v29 = &v28[32 * v23];
              *(_QWORD *)v29 = v19;
              *((_DWORD *)v29 + 2) = v17;
              *((_DWORD *)v29 + 3) = v21;
              v14 = v21;
              v15 = v38;
              *((_QWORD *)v29 + 2) = v38;
              *((_DWORD *)v29 + 6) = v18;
              v30 = v29;
              if (v10 != v22)
              {
                do
                {
                  v31 = *((_OWORD *)v10 - 1);
                  *((_OWORD *)v30 - 2) = *((_OWORD *)v10 - 2);
                  *((_OWORD *)v30 - 1) = v31;
                  v30 -= 32;
                  v10 -= 32;
                }
                while (v10 != v22);
                v10 = v22;
              }
              v20 = v29 + 32;
              __p = v30;
              v41 = v29 + 32;
              v42 = &v28[32 * v27];
              if (v10)
                operator delete(v10);
              v3 = v37;
              v16 = v39;
            }
            else
            {
              *(_QWORD *)v10 = v19;
              *((_DWORD *)v10 + 2) = v17;
              *((_DWORD *)v10 + 3) = v14;
              *((_DWORD *)v10 + 4) = v15;
              *((_DWORD *)v10 + 5) = 0;
              v20 = v10 + 32;
              *((_DWORD *)v10 + 6) = v18;
            }
            v41 = v20;
            v12 += 2;
            ++v13;
            v10 = v20;
          }
          while (v13 != v16);
        }
        else
        {
          v20 = v10;
        }
        v10 = v20;
        BytePtr = v12;
      }
      while (v12 < v36);
    }
  }
  (*(void (**)(AUJBase *, void **, _QWORD))(*(_QWORD *)v3 + 648))(v3, &__p, valuePtr);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  CFDictionaryRemoveValue(MutableCopy, CFSTR("data"));
  v33 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)v3, MutableCopy);
  CFRelease(MutableCopy);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  return v33;
}

void sub_1B6512818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double AUJBase::GetLatency(AUJBase *this)
{
  return 0.0;
}

uint64_t AUJBase::SupportedNumChannels(AUJBase *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)*((_QWORD *)this + 70);
  return (*((_QWORD *)this + 71) - *((_QWORD *)this + 70)) >> 2;
}

BOOL AUJBase::HasParameter(AUJBase *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  return ausdk::AUElement::HasParameterID(Element, a2);
}

os_log_t ___ZN7AUJBase15AUJBaseLogScopeEv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "aujbase");
  *v0 = result;
  AUJBase::AUJBaseLogScope(void)::scope = (uint64_t)v0;
  return result;
}

uint64_t AUJBase::AUJBase(uint64_t a1, OpaqueAudioComponentInstance *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  void (**v7)(AUJBase *__hidden);

  v5 = (std::string *)ausdk::AUBase::AUBase((ausdk::AUBase *)a1, a2, 1, 1);
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69E6E50;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 22, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    v7 = *(void (***)(AUJBase *__hidden))a1;
  }
  else
  {
    v6 = *a3;
    v5[22].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5[22].__r_.__value_.__l.__data_ = v6;
    v7 = off_1E69E6E50;
  }
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  ((void (*)(uint64_t, uint64_t, _QWORD *(*)(_QWORD *, void *, OpaqueAudioComponentInstance *), uint64_t))v7[14])(a1, 36, AUJBase::AUJBasePropertyListener, a1);
  (*(void (**)(uint64_t, uint64_t, _QWORD *(*)(_QWORD *, void *, OpaqueAudioComponentInstance *), uint64_t))(*(_QWORD *)a1 + 112))(a1, 8, AUJBase::AUJBasePropertyListener, a1);
  return a1;
}

void sub_1B65129D8(_Unwind_Exception *a1)
{
  ausdk::AUBase *v1;

  ausdk::AUBase::~AUBase(v1);
  _Unwind_Resume(a1);
}

_QWORD *AUJBase::AUJBasePropertyListener(_QWORD *this, void *a2, OpaqueAudioComponentInstance *a3)
{
  uint64_t v3;

  if ((_DWORD)a3 == 36)
  {
    v3 = 77;
  }
  else
  {
    if ((_DWORD)a3 != 8)
      return this;
    v3 = 78;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v3))();
}

uint64_t ScottyUpmixer::Initialize(ScottyUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  _OWORD *v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  int v18;
  unsigned int v19;
  uint64_t i;
  unsigned int v21;
  uint64_t j;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  std::string buf;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v3 = (_QWORD *)*v3;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Initialize";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing ScottyUpmixer", (uint8_t *)&buf, 0x16u);
  }
  if (*((_BYTE *)this + 8))
    return 0;
  if (*((_BYTE *)this + 108))
  {
    v5 = *((_DWORD *)this + 28);
    v6 = v5 % (*(unsigned int (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this) != 0;
  }
  else
  {
    v6 = 1;
  }
  *((_BYTE *)this + 116) = v6;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 16, 0);
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  v7 = operator new();
  v8 = (_OWORD *)((char *)this + 296);
  v9 = *((double *)this + 3);
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *v8;
    buf.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 39);
  }
  Crossover2f::Crossover2f(v7, (__int128 *)&buf, v9);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v7;
  if (v10)
    std::default_delete<Crossover2f>::operator()[abi:ne180100](v10);
  ScottyUpmixer::UpdateCrossover(this);
  *((_DWORD *)this + 30) = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this);
  if (*((_BYTE *)this + 116))
  {
    v11 = *((_DWORD *)this + 26);
    if (v11)
    {
      v12 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 80))(this);
      if (v11 < (*(unsigned int (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this) + v12)
      {
        if (getScottyLog(void)::onceToken != -1)
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
        v13 = getScottyLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294944291;
        if (*((char *)this + 319) < 0)
          v8 = *(_OWORD **)v8;
        v14 = *((_DWORD *)this + 26);
        v15 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 80))(this);
        v16 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Initialize";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        v29 = v14;
        v30 = 1024;
        v31 = v15;
        v32 = 1024;
        v33 = v16;
        v17 = "[%s|%s] Target latency %u is too small (upmixer latency=%u, native blocksize=%u)";
LABEL_47:
        _os_log_error_impl(&dword_1B5ED0000, v13, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&buf, 0x28u);
        return 4294944291;
      }
      v18 = *((_DWORD *)this + 26);
      v19 = v18 - (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 80))(this);
      if (v19 % (*(unsigned int (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this))
      {
        if (getScottyLog(void)::onceToken != -1)
          dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
        v13 = getScottyLog(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
          return 4294944291;
        if (*((char *)this + 319) < 0)
          v8 = *(_OWORD **)v8;
        v24 = *((_DWORD *)this + 26);
        v25 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 80))(this);
        v26 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"Initialize";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        v29 = v24;
        v30 = 1024;
        v31 = v25;
        v32 = 1024;
        v33 = v26;
        v17 = "[%s|%s] Target latency %u is not a multiple of native blocksize (upmixer latency=%u, native blocksize=%u)";
        goto LABEL_47;
      }
    }
  }
  for (i = 0; i != 8; ++i)
  {
    if ((*(unsigned int (**)(ScottyUpmixer *, uint64_t))(*(_QWORD *)this + 128))(this, i))
    {
      v21 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this);
      v27 = 0;
      std::vector<float>::vector(&buf, v21, &v27);
      std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)this + 16, (uint64_t)&buf);
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      *((_QWORD *)this + i + 19) = *(_QWORD *)(*((_QWORD *)this + 17) - 24);
    }
  }
  for (j = 216; j != 280; j += 8)
  {
    v23 = *((unsigned int *)this + 30);
    v27 = 0;
    std::vector<float>::vector(&buf, v23, &v27);
    std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)this + 16, (uint64_t)&buf);
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)((char *)this + j) = *(_QWORD *)(*((_QWORD *)this + 17) - 24);
  }
  (*(void (**)(ScottyUpmixer *))(*(_QWORD *)this + 32))(this);
  result = 0;
  *((_BYTE *)this + 8) = 1;
  return result;
}

void sub_1B6512F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x1BCC95CEC](v16, 0x1032C409EFFA567);
  _Unwind_Resume(a1);
}

double ScottyUpmixer::UnInitialize(ScottyUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  double result;
  _OWORD *v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v3 = (_QWORD *)*v3;
    v6 = 136315394;
    v7 = v3;
    v8 = 2080;
    v9 = "UnInitialize";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Uninitializing ScottyUpmixer", (uint8_t *)&v6, 0x16u);
  }
  *((_BYTE *)this + 8) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 16, 0);
  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  v5 = (_OWORD *)((char *)this + 152);
  *(_OWORD *)((char *)v5 + 124) = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[1] = 0u;
  return result;
}

ParametricFilters **ScottyUpmixer::Reset(ScottyUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  ParametricFilters *v9;
  ParametricFilters *v10;
  ParametricFilters **result;
  int v12;
  _QWORD *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v3 = (_QWORD *)*v3;
    v12 = 136315394;
    v13 = v3;
    v14 = 2080;
    v15 = "Reset";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Resetting ScottyUpmixer", (uint8_t *)&v12, 0x16u);
  }
  *((_QWORD *)this + 35) = 0;
  if (*((_BYTE *)this + 116))
    v4 = (*(uint64_t (**)(ScottyUpmixer *))(*(_QWORD *)this + 72))(this);
  else
    v4 = 0;
  *((_DWORD *)this + 72) = v4;
  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  while (v5 != v6)
  {
    v7 = *(float **)v5;
    v8 = *(_QWORD *)(v5 + 8);
    v5 += 24;
    vDSP_vclr(v7, 1, (v8 - (uint64_t)v7) >> 2);
  }
  v9 = (ParametricFilters *)*((_QWORD *)this + 10);
  if (v9)
    ParametricFilters::reset(v9);
  v10 = (ParametricFilters *)*((_QWORD *)this + 11);
  if (v10)
    ParametricFilters::reset(v10);
  result = (ParametricFilters **)*((_QWORD *)this + 6);
  if (result)
    return (ParametricFilters **)Crossover2f::Reset(result);
  return result;
}

uint64_t ScottyUpmixer::SetOutputChannelMask(ScottyUpmixer *this)
{
  char v2;

  if (((*(uint64_t (**)(ScottyUpmixer *, _QWORD))(*(_QWORD *)this + 136))(this, 0) & 1) != 0)
    v2 = 1;
  else
    v2 = (*(uint64_t (**)(ScottyUpmixer *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
  *((_BYTE *)this + 32) = v2;
  return 0;
}

uint64_t ScottyUpmixer::EnableOutputChannel(ScottyUpmixer *this)
{
  return 0;
}

uint64_t ScottyUpmixer::DisableOutputChannel(ScottyUpmixer *this)
{
  return 0;
}

uint64_t ScottyUpmixer::UpdateCrossover(ScottyUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  Crossover2f *v8;
  int v10;
  _QWORD *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v3 = (_QWORD *)*v3;
    v10 = 136315394;
    v11 = v3;
    v12 = 2080;
    v13 = "UpdateCrossover";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Updating crossover for ScottyUpmixer", (uint8_t *)&v10, 0x16u);
  }
  v4 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 108)));
  v5 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 16)));
  v6 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 112)));
  v7 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 24)));
  caulk::pooled_semaphore_mutex::_lock((ScottyUpmixer *)((char *)this + 72));
  v8 = (Crossover2f *)*((_QWORD *)this + 6);
  if (v8)
  {
    Crossover2f::SetLowCrossover(v8, v4, v5);
    Crossover2f::SetHighCrossover(*((Crossover2f **)this + 6), v6, v7);
  }
  return caulk::pooled_semaphore_mutex::_unlock((ScottyUpmixer *)((char *)this + 72));
}

void sub_1B6513424(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ScottyUpmixer::~ScottyUpmixer(ScottyUpmixer *this)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v5[12];
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E69E7148;
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v2 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)v5 = 136315394;
    *(_QWORD *)&v5[4] = v3;
    v6 = 2080;
    v7 = "~ScottyUpmixer";
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Destructing", v5, 0x16u);
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 16, 0);
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  *(_QWORD *)v5 = (char *)this + 128;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 11, 0);
  std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 10, 0);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    std::default_delete<Crossover2f>::operator()[abi:ne180100](v4);
}

void sub_1B65135C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ScottyUpmixer::GetParamInfo(int a1, uint64_t a2)
{
  uint64_t v3;
  __CFString **v4;
  uint64_t result;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;
  float v11;
  NSObject *v12;
  _BOOL4 v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v3 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v4 = (__CFString **)((char *)&kParameterInfo + v3);
    if (*(_DWORD *)((char *)&kParameterInfo + v3) == a1)
      break;
    v3 += 40;
    if (v3 == 1360)
      goto LABEL_11;
  }
  if (v4 == kDspLibBuzzKillParameterNames)
  {
LABEL_11:
    *(_DWORD *)a2 = -1;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = CFSTR("*** Invalid parameter ***");
    *(_DWORD *)(a2 + 32) = 0;
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v12 = getScottyLog(void)::gLog;
    v13 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v13)
    {
      v14 = 136315394;
      v15 = "GetParamInfo";
      v16 = 1024;
      v17 = a1;
      _os_log_impl(&dword_1B5ED0000, v12, OS_LOG_TYPE_DEFAULT, "%s: Invalid Parameter ID: %u", (uint8_t *)&v14, 0x12u);
      return 0;
    }
    return result;
  }
  result = 0;
  *(_OWORD *)(a2 + 16) = *((_OWORD *)v4 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v4 + 8);
  v6 = *(_DWORD *)(a2 + 28);
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = a2 + 4 * result;
    v11 = *(float *)(v9 + 20);
    v10 = (_DWORD *)(v9 + 20);
    if (v11 == -10000000.0)
      *v10 = v6;
    v7 = 0;
    result = 1;
  }
  while ((v8 & 1) != 0);
  return result;
}

uint64_t ScottyUpmixer::GetParamDefault(int a1, unsigned int a2, float *a3)
{
  uint64_t v4;
  __CFString **v5;
  float v6;
  uint64_t result;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 > 1)
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = (__CFString **)((char *)&kParameterInfo + v4);
    if (*(_DWORD *)((char *)&kParameterInfo + v4) == a1)
      break;
    v4 += 40;
    if (v4 == 1360)
      goto LABEL_9;
  }
  if (v5 != kDspLibBuzzKillParameterNames)
  {
    v6 = *((float *)v5 + a2 + 5);
    if (v6 == -10000000.0)
      return 0;
    *a3 = v6;
    return 1;
  }
LABEL_9:
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v8 = getScottyLog(void)::gLog;
  v9 = os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    v10 = 136315394;
    v11 = "GetParamDefault";
    v12 = 1024;
    v13 = a1;
    _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "%s: Invalid Parameter ID: %u", (uint8_t *)&v10, 0x12u);
    return 0;
  }
  return result;
}

void ScottyUpmixer::InitializeSurroundFilters(ScottyUpmixer *this, int a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  double v14;
  float v15;
  void **v16;
  double v17;
  float v18;
  _BYTE __p[12];
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v4 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v5;
    v20 = 2080;
    v21 = "InitializeSurroundFilters";
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] Initializing surround filters", __p, 0x16u);
  }
  if (*((double *)this + 3) == 0.0)
  {
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v6 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v7 = (_QWORD *)((char *)this + 296);
      if (*((char *)this + 319) < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v7;
      v20 = 2080;
      v21 = "InitializeSurroundFilters";
      v8 = "[%s|%s] Sample Rate can not be zero";
      v9 = v6;
      v10 = 22;
LABEL_21:
      _os_log_error_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_ERROR, v8, __p, v10);
    }
  }
  else if ((a2 - 9) > 0xFFFFFFF7)
  {
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 56);
    v13 = (void **)operator new();
    v14 = *((double *)this + 3);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v15 = v14;
    ParametricFilters::ParametricFilters((uint64_t)v13, a2, 0, 5, (__int128 *)__p, v15);
    if (SHIBYTE(v22) < 0)
      operator delete(*(void **)__p);
    std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 11, v13);
    v16 = (void **)operator new();
    v17 = *((double *)this + 3);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v18 = v17;
    ParametricFilters::ParametricFilters((uint64_t)v16, a2, 0, 5, (__int128 *)__p, v18);
    if (SHIBYTE(v22) < 0)
      operator delete(*(void **)__p);
    std::unique_ptr<ParametricFilters>::reset[abi:ne180100]((void ***)this + 10, v16);
    ScottyUpmixer::UpdateSurroundFilters(this);
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 56);
  }
  else
  {
    if (getScottyLog(void)::onceToken != -1)
      dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
    v11 = getScottyLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v12 = (_QWORD *)((char *)this + 296);
      if (*((char *)this + 319) < 0)
        v12 = (_QWORD *)*v12;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v12;
      v20 = 2080;
      v21 = "InitializeSurroundFilters";
      v22 = 1024;
      v23 = a2;
      v8 = "[%s|%s] Invalid number of channels %u";
      v9 = v11;
      v10 = 28;
      goto LABEL_21;
    }
  }
}

void sub_1B6513BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ScottyUpmixer::UpdateSurroundFilters(ScottyUpmixer *this)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  _BYTE buf[12];
  _BYTE __p[12];
  double v19;
  _BYTE v20[12];
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float v28;
  _QWORD v29[2];
  uint64_t v30;
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  v2 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 96)));
  v3 = v2;
  *(_DWORD *)buf = 6;
  *(_QWORD *)&buf[4] = 0x3F400000456FD000;
  *(float *)__p = v2 * -7.535;
  v19 = 0.0;
  *(_QWORD *)v20 = 0;
  *(_QWORD *)&__p[4] = 0;
  *(_DWORD *)&v20[8] = 6;
  v21 = 0x3F9C28F645ACC800;
  v22 = v2 * 6.021;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v26 = 6;
  v27 = 0x3FE8F5C345C73000;
  v28 = v2 * -7.959;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v13 = 0;
  v14 = 0;
  v15[0] = 0;
  v10 = (void **)&v13;
  LOBYTE(v11) = 0;
  v13 = (char *)operator new(0x78uLL);
  v14 = (uint64_t)v13;
  v15[0] = v13 + 120;
  v4 = 0;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ParametricFilterSpecs>,ParametricFilterSpecs const*,ParametricFilterSpecs const*,ParametricFilterSpecs*>((uint64_t)v15, (__int128 *)buf, &v31, (uint64_t)v13);
  do
  {
    if (*((char *)&v30 + v4 * 8 + 7) < 0)
      operator delete((void *)v29[v4]);
    v4 -= 5;
  }
  while (v4 != -15);
  v5 = COERCE_FLOAT(atomic_load((unsigned int *)(*((_QWORD *)this + 5) + 100)));
  *(_DWORD *)buf = 8;
  *(_QWORD *)&buf[4] = 0x3F34FDF445DAC000;
  *(float *)__p = v5;
  v19 = 0.0;
  *(_QWORD *)v20 = 0;
  *(_QWORD *)&__p[4] = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v15[1] = &v10;
  v16 = 0;
  v10 = (void **)operator new(0x28uLL);
  v11 = (uint64_t)v10;
  v12 = v10 + 5;
  v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ParametricFilterSpecs>,ParametricFilterSpecs const*,ParametricFilterSpecs const*,ParametricFilterSpecs*>((uint64_t)&v12, (__int128 *)buf, (__int128 *)&v20[8], (uint64_t)v10);
  if ((v20[7] & 0x80000000) != 0)
    operator delete(*(void **)&__p[4]);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 56);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    ParametricFilters::setParametricFilters(v6, (uint64_t *)&v13);
  v7 = *((_QWORD *)this + 10);
  if (v7)
    ParametricFilters::setParametricFilters(v7, (uint64_t *)&v10);
  if (getScottyLog(void)::onceToken != -1)
    dispatch_once(&getScottyLog(void)::onceToken, &__block_literal_global_21994);
  v8 = getScottyLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getScottyLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (_QWORD *)((char *)this + 296);
    if (*((char *)this + 319) < 0)
      v9 = (_QWORD *)*v9;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)__p = 2080;
    *(_QWORD *)&__p[2] = "UpdateSurroundFilters";
    *(_WORD *)&__p[10] = 2048;
    v19 = v3;
    *(_WORD *)v20 = 2048;
    *(double *)&v20[2] = v5;
    _os_log_impl(&dword_1B5ED0000, v8, OS_LOG_TYPE_DEFAULT, "[%s|%s] Updated surround filters ---- suroundEQAmount = %f, highShelfGaindB = %f", buf, 0x2Au);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)this + 56);
  *(_QWORD *)buf = &v10;
  std::vector<ParametricFilterSpecs>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v13;
  std::vector<ParametricFilterSpecs>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B6513F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ParametricFilterSpecs>,ParametricFilterSpecs const*,ParametricFilterSpecs const*,ParametricFilterSpecs*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  std::string *v7;
  __int128 v8;
  __int128 *v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 1;
    do
    {
      *(_OWORD *)v4 = *(v6 - 1);
      v7 = (std::string *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v14;
      }
      else
      {
        v8 = *v6;
        *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v6 - 1;
      v4 += 40;
      v14 = v4;
      v6 = (__int128 *)((char *)v6 + 40);
    }
    while ((__int128 *)((char *)v9 + 40) != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ParametricFilterSpecs>,ParametricFilterSpecs*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1B65140C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ParametricFilterSpecs>,ParametricFilterSpecs*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<ParametricFilterSpecs>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ParametricFilterSpecs>,ParametricFilterSpecs*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 40;
    }
  }
  return a1;
}

void ScottyUpmixer::ProcessBypass(ScottyUpmixer *this, const float **a2, vDSP_Length __N)
{
  int v3;
  uint64_t v6;
  vDSP_Length v7;
  size_t v8;
  float *v9;
  float *v10;

  v3 = __N;
  v6 = 0;
  v7 = __N;
  v8 = 4 * __N;
  do
  {
    v9 = *(float **)((char *)this + v6 * 8);
    v10 = (float *)a2[v6];
    if (v9)
    {
      if (v9 != v10 && v3 != 0 && v10 != 0)
        memmove(v10, v9, v8);
    }
    else if (v10)
    {
      vDSP_vclr(v10, 1, v7);
    }
    ++v6;
  }
  while (v6 != 8);
}

void AUBuzzKill::~AUBuzzKill(AUBuzzKill *this)
{
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AUBuzzKill::GetParameterValueStrings(AUBuzzKill *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  __CFArray *v5;
  uint64_t result;

  if (!a4)
    return 0;
  if (*(_DWORD *)(*((_QWORD *)this + 211) + 4 * a3) != 16)
    return 4294956418;
  v5 = AUDspLib::CFArrayOfStringsCreateWithCArrayOfStrings((const char **)_ZGRN6DspLib8BuzzKill10ParametersL27kMaxOperationFrequencyNamesE_, (const char *const *)5);
  result = 0;
  *a4 = v5;
  return result;
}

uint64_t AUBuzzKill::Version(AUBuzzKill *this)
{
  return 132864;
}

uint64_t AUBuzzKill::newDspLibAlgorithm(AUBuzzKill *this)
{
  uint64_t v1;

  v1 = operator new();
  DspLib::AlgorithmBase::AlgorithmBase(v1, &_ZGRN6DspLib8BuzzKill10ParametersL8kDefaultE_, 0x62uLL, (uint64_t)&_ZGRN6DspLib8BuzzKill10ParametersL8kMinimumE_, 98, (uint64_t)&_ZGRN6DspLib8BuzzKill10ParametersL8kMaximumE_, 98);
  *(_QWORD *)v1 = &off_1E69C3EB8;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(v1 + 264), 0, 0);
  *(_QWORD *)(v1 + 344) = 0;
  *(_BYTE *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 456) = 0;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  DspLib::FFT::Filterbank::Filterbank((DspLib::FFT::Filterbank *)(v1 + 464), 0);
  *(_QWORD *)(v1 + 464) = &off_1E69E7CE0;
  DspLib::FFT::Filterbank::Filterbank((DspLib::FFT::Filterbank *)(v1 + 824), 0);
  *(_QWORD *)(v1 + 824) = &off_1E69E7CE0;
  *(_OWORD *)(v1 + 1184) = 0u;
  *(_OWORD *)(v1 + 1200) = 0u;
  *(_OWORD *)(v1 + 1216) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1260) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(v1 + 1280), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(v1 + 1360), 0, 0);
  *(_OWORD *)(v1 + 1472) = 0u;
  *(_OWORD *)(v1 + 1456) = 0u;
  *(_OWORD *)(v1 + 1440) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v1 + 1488) = _D0;
  *(_DWORD *)(v1 + 1496) = 0;
  *(_BYTE *)(v1 + 1504) = 0;
  *(_QWORD *)(v1 + 1520) = 0;
  *(_QWORD *)(v1 + 1512) = 0;
  *(_DWORD *)(v1 + 1528) = 0;
  DspLib::NotchFilterBank::FilterBank::FilterBank((DspLib::NotchFilterBank::FilterBank *)(v1 + 1536));
  *(_OWORD *)(v1 + 2256) = 0u;
  *(_OWORD *)(v1 + 2240) = 0u;
  *(_OWORD *)(v1 + 2224) = 0u;
  *(_OWORD *)(v1 + 2268) = 0u;
  *(_DWORD *)(v1 + 2288) = 0;
  *(_QWORD *)(v1 + 2296) = 0;
  *(_OWORD *)(v1 + 2304) = 0u;
  *(_DWORD *)(v1 + 2320) = 1;
  *(_DWORD *)(v1 + 2328) = 1;
  *(_QWORD *)(v1 + 2408) = 0;
  *(_OWORD *)(v1 + 2416) = 0u;
  *(_OWORD *)(v1 + 2336) = 0u;
  *(_OWORD *)(v1 + 2352) = 0u;
  *(_OWORD *)(v1 + 2368) = 0u;
  *(_OWORD *)(v1 + 2384) = 0u;
  *(_DWORD *)(v1 + 2400) = 0;
  *(_QWORD *)(v1 + 2432) = 1;
  *(_QWORD *)(v1 + 2504) = 0;
  *(_OWORD *)(v1 + 2488) = 0u;
  *(_OWORD *)(v1 + 2472) = 0u;
  *(_OWORD *)(v1 + 2456) = 0u;
  *(_OWORD *)(v1 + 2440) = 0u;
  *(_DWORD *)(v1 + 2512) = 1;
  *(_BYTE *)(v1 + 2520) = 0;
  *(_OWORD *)(v1 + 2528) = 0u;
  *(_OWORD *)(v1 + 2544) = 0u;
  *(_OWORD *)(v1 + 2560) = 0u;
  *(_OWORD *)(v1 + 2576) = 0u;
  *(_OWORD *)(v1 + 2592) = 0u;
  *(_OWORD *)(v1 + 2608) = 0u;
  *(_DWORD *)(v1 + 2624) = 1;
  *(_QWORD *)(v1 + 2644) = 0;
  *(_DWORD *)(v1 + 2652) = 0;
  *(_OWORD *)(v1 + 2628) = 0u;
  *(_WORD *)(v1 + 2656) = 1;
  *(_BYTE *)(v1 + 2658) = 0;
  *(_OWORD *)(v1 + 4664) = 0u;
  *(_DWORD *)(v1 + 4688) = 0;
  *(_QWORD *)(v1 + 4680) = 0;
  return v1;
}

void sub_1B6514514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10)
{
  _QWORD *v10;
  DspLib::ComplexVector *v11;
  DspLib::Biquad::ParametricFilter *v12;
  DspLib::FFT::Filterbank *v13;
  void **v14;
  DspLib::FFT::Filterbank *v15;
  uint64_t *v16;
  DspLib::ComplexVector *v17;
  DspLib::ComplexVector *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v19 = (void *)v10[183];
  if (v19)
  {
    v10[184] = v19;
    operator delete(v19);
  }
  v20 = *v14;
  if (*v14)
  {
    v10[181] = v20;
    operator delete(v20);
  }
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexVector::~ComplexVector(v17);
  v21 = (void *)v10[156];
  if (v21)
  {
    v10[157] = v21;
    operator delete(v21);
  }
  v22 = (void *)v10[153];
  if (v22)
  {
    v10[154] = v22;
    operator delete(v22);
  }
  v23 = (void *)v10[150];
  if (v23)
  {
    v10[151] = v23;
    operator delete(v23);
  }
  v24 = *v16;
  *v16 = 0;
  if (v24)
    std::default_delete<DspLib::BuzzKill::HighBuzzKillFFT>::operator()[abi:ne180100]((uint64_t)v16, v24);
  DspLib::FFT::Filterbank::~Filterbank(v15);
  DspLib::FFT::Filterbank::~Filterbank(v13);
  v25 = v10[57];
  v10[57] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v12);
  std::unique_ptr<DspLib::BuzzKill::FFTForDisplay>::reset[abi:ne180100](v10 + 43, 0);
  DspLib::ComplexVector::~ComplexVector(v11);
  a10 = v10 + 30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *v10 = off_1E69C46F0;
  v26 = (void *)v10[6];
  if (v26)
  {
    v10[7] = v26;
    operator delete(v26);
  }
  MEMORY[0x1BCC95CEC](v10, 0x10F1C4064A6821ELL);
  _Unwind_Resume(a1);
}

void DspLib::BuzzKill::BuzzKillFFT::~BuzzKillFFT(DspLib::BuzzKill::BuzzKillFFT *this)
{
  DspLib::FFT::Filterbank::~Filterbank(this);
  JUMPOUT(0x1BCC95CECLL);
}

void VAD3Configuration::~VAD3Configuration(VAD3Configuration *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  v2 = (void *)*((_QWORD *)this + 45);
  if (v2)
  {
    *((_QWORD *)this + 46) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 43) = v3;
    operator delete(v3);
  }
  v12 = (void **)((char *)this + 312);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = (void *)*((_QWORD *)this + 36);
  if (v4)
  {
    *((_QWORD *)this + 37) = v4;
    operator delete(v4);
  }
  v12 = (void **)((char *)this + 264);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  v5 = (void *)*((_QWORD *)this + 30);
  if (v5)
  {
    *((_QWORD *)this + 31) = v5;
    operator delete(v5);
  }
  v12 = (void **)((char *)this + 216);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  v6 = (void *)*((_QWORD *)this + 22);
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v12 = (void **)((char *)this + 128);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 10);
  if (v9)
  {
    *((_QWORD *)this + 11) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 8) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 5) = v11;
    operator delete(v11);
  }
  v12 = (void **)((char *)this + 8);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void VADGenUtils::VectorReverseCumulativeProduct<unsigned int>(uint64_t *a1, std::vector<unsigned int> *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<unsigned int>::pointer begin;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;

  v4 = (a1[1] - *a1) >> 2;
  std::vector<unsigned int>::resize(this, v4);
  v5 = *a1;
  v6 = a1[1] - *a1;
  if (v6)
  {
    v7 = 0;
    v8 = v6 >> 2;
    begin = this->__begin_;
    v10 = this->__end_ - this->__begin_;
    v11 = v4 - 1;
    v12 = 1;
    v13 = 1;
    do
    {
      if (v10 <= v11 || (begin[v11] = v13, v14 = ~v7, v15 = __CFADD__(v8, v14), v16 = v8 + v14, !v15))
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      v13 *= *(_DWORD *)(v5 + 4 * v16);
      v7 = v12;
      v17 = v8 > v12++;
      --v11;
    }
    while (v17);
  }
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unint64_t v5;
  unint64_t v6;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  unint64_t v9;
  std::vector<std::string>::size_type v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  size_t v15;
  std::string *v16;
  size_t v17;
  std::__split_buffer<std::string> __v;

  begin = this->__begin_;
  end = this->__end_;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= __sz)
        v10 = __sz;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)p_end_cap, v11);
      v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_1B65149CC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

std::vector<std::string> *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(uint64_t a1, uint64_t a2, std::vector<std::string> *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((std::vector<std::string> *)v5 != a3)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(std::string **)v5, *(__int128 **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v5 += 24;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B6514AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void HRTFOBHDSpatializer::~HRTFOBHDSpatializer(HRTFOBHDSpatializer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69E7E00;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  v2 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  Spatializer::~Spatializer(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E69E7E00;
  std::shared_ptr<vp::services::Telephony_Utility>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  v2 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  Spatializer::~Spatializer(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t HRTFOBHDSpatializer::initialize(HRTFOBHDSpatializer *this, float a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *p_p;
  const __CFURL *v13;
  CFStringRef v14;
  const char *CStringPtr;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  _BYTE *v21;
  std::runtime_error *exception;
  CFStringRef theString;
  std::string v24;
  std::string __p;
  std::string v26;
  _BYTE buf[28];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 44)
                                                                                            + 16))(*((_QWORD *)this + 44), a4, 128, *((unsigned __int8 *)this + 348), *((unsigned __int8 *)this + 349), 0, 1);
  if (getAUSMV2Log(void)::onceToken != -1)
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
  v7 = getAUSMV2Log(void)::gLog;
  if ((_DWORD)v6)
  {
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(&v26, "HRTFOBHDSpatializer");
      v8 = std::string::append(&v26, "::", 2uLL);
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v24, "initialize", 0xAuLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = *(const __CFURL **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 224))(*((_QWORD *)this + 44));
      if (!v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      v14 = CFURLCopyFileSystemPath(v13, kCFURLPOSIXPathStyle);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v14);
      CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = p_p;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v6;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = CStringPtr;
      _os_log_error_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_ERROR, "%s: error %d while initializing the HRIR processor with fileURL=%s", buf, 0x1Cu);
      if (theString)
        CFRelease(theString);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "HRTFOBHDSpatializer");
      v17 = std::string::append(&v24, "::", 2uLL);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&__p, "initialize", 0xAuLL);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = buf;
      if (buf[23] < 0)
        v21 = *(_BYTE **)buf;
      LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_debug_impl(&dword_1B5ED0000, v7, OS_LOG_TYPE_DEBUG, "%s: Initializing.", (uint8_t *)&v26, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)buf = 0;
    std::vector<float>::resize((uint64_t)this + 136, a3, buf);
    *(_DWORD *)buf = 0;
    std::vector<float>::resize((uint64_t)this + 272, a3, buf);
    *((_WORD *)this + 8) = 257;
    *((_DWORD *)this + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 128))(*((_QWORD *)this + 44));
  }
  return v6;
}

void sub_1B6514FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HRTFOBHDSpatializer::reset(HRTFOBHDSpatializer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 44) + 32))(*((_QWORD *)this + 44));
  *((_BYTE *)this + 17) = 1;
  *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
  return result;
}

uint64_t HRTFOBHDSpatializer::processAccumulating(HRTFOBHDSpatializer *this, const float *a2, const float **a3, int a4, const float **a5, uint64_t a6, uint64_t a7, __n128 a8, IR::ComplexDataCircBuffer *a9)
{
  float v10;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  IR::IRCoordinates *v19;
  uint64_t v20;
  char *v21;
  float *v22;
  float v23;
  uint64_t v24;
  NSObject *v26;
  NSObject *v27;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  _QWORD v37[2];
  const float *v38;
  IR::ComplexDataCircBuffer *v39;
  int v40;
  void *v41[2];
  char v42;
  std::string v43;
  std::string v44;
  uint8_t buf[4];
  std::string *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a6 == a4)
  {
    if (*((_BYTE *)this + 16))
    {
      v10 = a8.n128_f32[0];
      v12 = a6;
      v15 = *((_QWORD *)this + 45);
      if (*((_BYTE *)this + 17) || *(_BYTE *)(v15 + 41))
      {
        v38 = a2;
        v39 = a9;
        v37[1] = v37;
        v40 = *(_DWORD *)(v15 + 24);
        v16 = *(unsigned int *)(v15 + 36);
        v17 = 36 * v16;
        v18.n128_f64[0] = MEMORY[0x1E0C80A78](this);
        if ((_DWORD)v16)
        {
          v19 = (IR::IRCoordinates *)((char *)v37 - ((v17 + 15) & 0x7FFFFFFFF0));
          do
          {
            v19 = (IR::IRCoordinates *)(IR::IRCoordinates::IRCoordinates(v19) + 36);
            v17 -= 36;
          }
          while (v17);
          v20 = 0;
          v21 = (char *)v37 - ((36 * v16 + 15) & 0x7FFFFFFFF0);
          do
          {
            IR::IRCoordinates::set();
            IR::IRCoordinates::set();
            v20 += 4;
            v21 += 36;
          }
          while (4 * v16 != v20);
        }
        (*(void (**)(_QWORD, char *, uint64_t, uint64_t, __n128))(**((_QWORD **)this + 44) + 216))(*((_QWORD *)this + 44), (char *)v37 - ((36 * v16 + 15) & 0x7FFFFFFFF0), *(_QWORD *)(*((_QWORD *)this + 45) + 16) + 4 * (*((_DWORD *)this + 94) * v40), v16, v18);
        a2 = v38;
        a9 = v39;
      }
      a8.n128_u32[0] = 0;
      if (*((_BYTE *)this + 132))
        a8.n128_f32[0] = v10;
      v22 = (float *)*((_QWORD *)this + 44);
      v23 = 3000.0;
      if (*((_DWORD *)this + 81))
        v23 = -1.0;
      v22[100] = v23;
      v24 = (*(uint64_t (**)(float *, const float *, const float **, uint64_t, uint64_t, IR::ComplexDataCircBuffer *, __n128))(*(_QWORD *)v22 + 40))(v22, a2, a5, v12, a7, a9, a8);
      if (v12 >= 2)
        v12 = 2;
      else
        v12 = v12;
      if ((_DWORD)v12)
      {
        do
        {
          vDSP_vadd(*a5, 1, *a3, 1, (float *)*a3, 1, a7);
          ++a3;
          ++a5;
          --v12;
        }
        while (v12);
      }
      *((_BYTE *)this + 268) = *((_BYTE *)this + 132);
      *((_BYTE *)this + 17) = 0;
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1)
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
      v27 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        v35 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v41, "HRTFOBHDSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v35, &v43);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &v43, &v44);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v44;
        else
          v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v46 = v36;
        _os_log_debug_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (v42 < 0)
          operator delete(v41[0]);
      }
      return 4294956429;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1)
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_5474);
    v26 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      v29 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v41, "HRTFOBHDSpatializer");
      v30 = std::string::append(v29, "::", 2uLL);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(&v43, "processAccumulating", 0x13uLL);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = &v44;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v46 = v34;
      v47 = 1024;
      v48 = a4;
      _os_log_debug_impl(&dword_1B5ED0000, v26, OS_LOG_TYPE_DEBUG, "%s: ERROR: wrong number of output channels %d", buf, 0x12u);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (v42 < 0)
        operator delete(v41[0]);
    }
    return 4294956445;
  }
  return v24;
}

void sub_1B65154FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  if (*(char *)(v1 - 209) < 0)
    operator delete(*(void **)(v1 - 232));
  _Unwind_Resume(exception_object);
}

uint64_t HRTFOBHDSpatializer::getFFTFilterConfigParams@<X0>(HRTFOBHDSpatializer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 44);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t HRTFOBHDSpatializer::getLatencyFrames(HRTFOBHDSpatializer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 44);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

void AUECRMDF::~AUECRMDF(AUECRMDF *this)
{
  AUECRMDF::~AUECRMDF(this);
  JUMPOUT(0x1BCC95CECLL);
}

{
  *(_QWORD *)this = &off_1E69E8050;
  std::unique_ptr<ecRMDF>::reset[abi:ne180100]((uint64_t *)this + 91, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 90, 0);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 704);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 688);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECRMDF::Initialize(AUECRMDF *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Element;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  int v21;
  int v22;
  uint64_t v23;
  ausdk::AUElement *v24;
  uint64_t result;
  ausdk::AUElement **v26;
  uint64_t v27;
  ausdk::AUElement *v28;
  ausdk::AUElement **v29;
  uint64_t v30;
  ausdk::AUElement *v31;
  ausdk::AUElement **v32;
  uint64_t v33;
  ausdk::AUElement *v34;
  ausdk::AUElement **v35;
  uint64_t v36;
  ausdk::AUElement *v37;
  ausdk::AUElement **v38;
  uint64_t v39;
  ausdk::AUElement *v40;
  ausdk::AUElement **v41;
  uint64_t v42;
  ausdk::AUElement *v43;
  ausdk::AUElement **v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int i;
  int v64;
  NSObject *v65;
  int v66;
  int v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  ausdk::AUElement *v71;
  ausdk::AUElement **v72;
  uint64_t v73;
  ausdk::AUElement *v74;
  ausdk::AUElement **v75;
  uint64_t v76;
  ausdk::AUElement *v77;
  ausdk::AUElement **v78;
  uint64_t v79;
  ausdk::AUElement *v80;
  ausdk::AUElement **v81;
  uint64_t v82;
  ausdk::AUElement *v83;
  ausdk::AUElement **v84;
  uint64_t v85;
  ausdk::AUElement *v86;
  ausdk::AUElement **v87;
  uint64_t v88;
  ausdk::AUElement *v89;
  ausdk::AUElement **v90;
  uint64_t v91;
  ausdk::AUElement *v92;
  ausdk::AUElement **v93;
  uint64_t v94;
  ausdk::AUElement *v95;
  ausdk::AUElement **v96;
  uint64_t v97;
  ausdk::AUElement *v98;
  ausdk::AUElement **v99;
  uint64_t v100;
  ausdk::AUElement *v101;
  ausdk::AUElement **v102;
  uint64_t v103;
  ausdk::AUElement *v104;
  ausdk::AUElement **v105;
  uint64_t v106;
  ausdk::AUElement *v107;
  ausdk::AUElement **v108;
  uint64_t v109;
  ausdk::AUElement *v110;
  ausdk::AUElement **v111;
  uint64_t v112;
  ausdk::AUElement *v113;
  ausdk::AUElement **v114;
  uint64_t v115;
  ausdk::AUElement *v116;
  ausdk::AUElement **v117;
  uint64_t v118;
  ausdk::AUElement *v119;
  ausdk::AUElement **v120;
  uint64_t v121;
  ausdk::AUElement *v122;
  ausdk::AUElement **v123;
  uint64_t v124;
  ausdk::AUElement *v125;
  ausdk::AUElement **v126;
  uint64_t v127;
  ausdk::AUElement *v128;
  ausdk::AUElement **v129;
  uint64_t v130;
  ausdk::AUElement *v131;
  ausdk::AUElement **v132;
  uint64_t v133;
  ausdk::AUElement *v134;
  ausdk::AUElement **v135;
  uint64_t v136;
  ausdk::AUElement *v137;
  ausdk::AUElement **v138;
  char v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  float v148;
  float v149;
  int v150;
  float v151;
  float v152;
  unsigned int v153;
  int v154;
  char v155;
  float v156;
  float v157;
  int v158;
  float v159;
  float v160;
  float v161;
  int v162;
  float v163;
  int32x2_t v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  vDSP_Length v173;
  vDSP_DFT_SetupStruct *Setup;
  vDSP_DFT_SetupStruct *v175;
  unsigned int v176;
  float v177;
  unsigned int v178;
  float v179;
  NSObject *v180;
  _BOOL4 v181;
  int32x2_t v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  char v188;
  float32x2_t v189;
  float v190;
  uint8_t buf[8];
  __int16 v192;
  int v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v2 = AUECRMDFLogScope();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "Initialize.\n", buf, 2u);
  }
  v3 = *((_QWORD *)this + 15);
  if (v3)
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  else
    v4 = (*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3;
  v5 = *((_QWORD *)this + 21);
  if (v5)
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
  Element = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), 0);
  v8 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), 1u);
  *((_DWORD *)this + 137) = *(_DWORD *)(Element + 108);
  *((_DWORD *)this + 138) = *(_DWORD *)(v8 + 108);
  *((_DWORD *)this + 135) = *(double *)(Element + 80);
  if (v4 >= 2)
  {
    v9 = 1;
    do
    {
      v10 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), v9 - 1);
      v11 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), v9);
      LODWORD(v12) = *((_DWORD *)this + 135);
      v13 = (double)v12;
      if (*(double *)(v10 + 80) != v13 || *(double *)(v11 + 80) != v13)
        return 4294956428;
    }
    while ((_DWORD)v4 != ++v9);
  }
  if (v6 >= 2)
  {
    v15 = 1;
    do
    {
      v16 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), v15 - 1);
      v17 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), v15);
      LODWORD(v18) = *((_DWORD *)this + 135);
      v19 = (double)v18;
      if (*(double *)(v16 + 80) != v19 || *(double *)(v17 + 80) != v19)
        return 4294956428;
    }
    while ((_DWORD)v6 != ++v15);
  }
  v21 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), 0) + 108);
  if (v21 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), 0) + 108))
    return 4294956428;
  if (v6 >= 2)
  {
    v22 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), 0) + 108);
    if (v22 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), 1u) + 108))
      return 4294956428;
  }
  *((_DWORD *)this + 136) = *((_DWORD *)this + 84);
  v23 = *((_QWORD *)this + 9);
  if (v23)
  {
    v24 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0);
  }
  else
  {
    v26 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v26)
      v24 = 0;
    else
      v24 = *v26;
  }
  *((_DWORD *)this + 140) = ausdk::AUElement::GetParameter(v24, 0);
  v27 = *((_QWORD *)this + 9);
  if (v27)
  {
    v28 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0);
  }
  else
  {
    v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v29)
      v28 = 0;
    else
      v28 = *v29;
  }
  *((float *)this + 141) = ausdk::AUElement::GetParameter(v28, 1u);
  v30 = *((_QWORD *)this + 9);
  if (v30)
  {
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 0);
  }
  else
  {
    v32 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v32)
      v31 = 0;
    else
      v31 = *v32;
  }
  *((float *)this + 142) = ausdk::AUElement::GetParameter(v31, 2u);
  v33 = *((_QWORD *)this + 9);
  if (v33)
  {
    v34 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0);
  }
  else
  {
    v35 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v35)
      v34 = 0;
    else
      v34 = *v35;
  }
  *((float *)this + 143) = ausdk::AUElement::GetParameter(v34, 3u);
  v36 = *((_QWORD *)this + 9);
  if (v36)
  {
    v37 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 32))(v36, 0);
  }
  else
  {
    v38 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v38)
      v37 = 0;
    else
      v37 = *v38;
  }
  *((float *)this + 144) = ausdk::AUElement::GetParameter(v37, 4u);
  v39 = *((_QWORD *)this + 9);
  if (v39)
  {
    v40 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0);
  }
  else
  {
    v41 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v41)
      v40 = 0;
    else
      v40 = *v41;
  }
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v40, 5u);
  v42 = *((_QWORD *)this + 9);
  if (v42)
  {
    v43 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 0);
  }
  else
  {
    v44 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v44)
      v43 = 0;
    else
      v43 = *v44;
  }
  *((_DWORD *)this + 146) = ausdk::AUElement::GetParameter(v43, 6u);
  if (*((_BYTE *)this + 696))
    v45 = 1;
  else
    v45 = v6 > 1;
  if (!v45)
  {
    v46 = ExtendedAudioBufferList_Create();
    CA::AudioBuffers::AudioBuffers(buf, v46);
    if (*((_BYTE *)this + 696))
    {
      v47 = *((_QWORD *)this + 86);
      v48 = *(_QWORD *)buf;
    }
    else
    {
      v47 = 0;
      v48 = *(_QWORD *)buf;
      *((_BYTE *)this + 696) = 1;
    }
    *(_QWORD *)buf = v47;
    *((_QWORD *)this + 86) = v48;
    ExtendedAudioBufferList_Destroy();
  }
  if (!*((_BYTE *)this + 712) && v6 <= 2)
  {
    v49 = ExtendedAudioBufferList_Create();
    CA::AudioBuffers::AudioBuffers(buf, v49);
    if (*((_BYTE *)this + 712))
    {
      v50 = *((_QWORD *)this + 88);
      v51 = *(_QWORD *)buf;
    }
    else
    {
      v50 = 0;
      v51 = *(_QWORD *)buf;
      *((_BYTE *)this + 712) = 1;
    }
    *(_QWORD *)buf = v50;
    *((_QWORD *)this + 88) = v51;
    ExtendedAudioBufferList_Destroy();
  }
  v52 = *((_DWORD *)this + 136);
  v53 = *((_DWORD *)this + 146);
  v54 = v52 / v53;
  if (-858993459 * (v52 / v53) >= 0x33333334)
    v55 = 1;
  else
    v55 = 5;
  if (-1431655765 * v54 >= 0x55555556)
    v56 = 8;
  else
    v56 = 24;
  v57 = v56 * v55;
  v58 = v57;
  do
  {
    v59 = v58;
    v58 *= 2;
  }
  while (v59 < v54);
  v60 = v59 >> (v59 > v54);
  if (v60 <= v57)
    v61 = v57;
  else
    v61 = v60;
  v62 = 1;
  for (i = v61; i < v52; ++v62)
    i += v61;
  v64 = (__PAIR64__(v62, v52) - i) >> 32;
  if (v64 != v53)
  {
    v65 = AUECRMDFLogScope();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      v66 = *((_DWORD *)this + 146);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v66;
      v192 = 1024;
      v193 = v64;
      _os_log_impl(&dword_1B5ED0000, v65, OS_LOG_TYPE_DEFAULT, "AUECRMDF::Init warning - tried to set mOrder: (%u), but forced mOrder to (%u)\n", buf, 0xEu);
    }
    *((_DWORD *)this + 146) = v64;
    v52 = *((_DWORD *)this + 136);
    v53 = v64;
  }
  v67 = v53 * v61;
  if (v67 != v52)
  {
    v68 = AUECRMDFLogScope();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      v69 = *((_DWORD *)this + 136);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v69;
      v192 = 1024;
      v193 = v67;
      _os_log_impl(&dword_1B5ED0000, v68, OS_LOG_TYPE_DEFAULT, "AUECRMDF::Init warning - tried to set mBlkSize: (%u), but forced mBlkSize to (%u)\n", buf, 0xEu);
    }
    *((_DWORD *)this + 136) = v67;
  }
  v70 = *((_QWORD *)this + 9);
  if (v70)
  {
    v71 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0);
  }
  else
  {
    v72 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v72)
      v71 = 0;
    else
      v71 = *v72;
  }
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v71, 7u);
  v73 = *((_QWORD *)this + 9);
  if (v73)
  {
    v74 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 0);
  }
  else
  {
    v75 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v75)
      v74 = 0;
    else
      v74 = *v75;
  }
  *((_BYTE *)this + 592) = ausdk::AUElement::GetParameter(v74, 8u) != 0.0;
  v76 = *((_QWORD *)this + 9);
  if (v76)
  {
    v77 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 0);
  }
  else
  {
    v78 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v78)
      v77 = 0;
    else
      v77 = *v78;
  }
  *((float *)this + 149) = ausdk::AUElement::GetParameter(v77, 9u);
  v79 = *((_QWORD *)this + 9);
  if (v79)
  {
    v80 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0);
  }
  else
  {
    v81 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v81)
      v80 = 0;
    else
      v80 = *v81;
  }
  *((_DWORD *)this + 150) = ausdk::AUElement::GetParameter(v80, 0xAu);
  v82 = *((_QWORD *)this + 9);
  if (v82)
  {
    v83 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 0);
  }
  else
  {
    v84 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v84)
      v83 = 0;
    else
      v83 = *v84;
  }
  *((float *)this + 151) = ausdk::AUElement::GetParameter(v83, 0xBu);
  v85 = *((_QWORD *)this + 9);
  if (v85)
  {
    v86 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 32))(v85, 0);
  }
  else
  {
    v87 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v87)
      v86 = 0;
    else
      v86 = *v87;
  }
  *((float *)this + 152) = ausdk::AUElement::GetParameter(v86, 0xCu);
  v88 = *((_QWORD *)this + 9);
  if (v88)
  {
    v89 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 0);
  }
  else
  {
    v90 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v90)
      v89 = 0;
    else
      v89 = *v90;
  }
  *((float *)this + 153) = ausdk::AUElement::GetParameter(v89, 0xDu);
  v91 = *((_QWORD *)this + 9);
  if (v91)
  {
    v92 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 0);
  }
  else
  {
    v93 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v93)
      v92 = 0;
    else
      v92 = *v93;
  }
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v92, 0xEu);
  v94 = *((_QWORD *)this + 9);
  if (v94)
  {
    v95 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 0);
  }
  else
  {
    v96 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v96)
      v95 = 0;
    else
      v95 = *v96;
  }
  *((_DWORD *)this + 155) = ausdk::AUElement::GetParameter(v95, 0xFu);
  v97 = *((_QWORD *)this + 9);
  if (v97)
  {
    v98 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 0);
  }
  else
  {
    v99 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v99)
      v98 = 0;
    else
      v98 = *v99;
  }
  *((float *)this + 156) = ausdk::AUElement::GetParameter(v98, 0x10u);
  v100 = *((_QWORD *)this + 9);
  if (v100)
  {
    v101 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 0);
  }
  else
  {
    v102 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v102)
      v101 = 0;
    else
      v101 = *v102;
  }
  *((float *)this + 159) = ausdk::AUElement::GetParameter(v101, 0x11u);
  v103 = *((_QWORD *)this + 9);
  if (v103)
  {
    v104 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 0);
  }
  else
  {
    v105 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v105)
      v104 = 0;
    else
      v104 = *v105;
  }
  *((float *)this + 157) = ausdk::AUElement::GetParameter(v104, 0x12u);
  v106 = *((_QWORD *)this + 9);
  if (v106)
  {
    v107 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 0);
  }
  else
  {
    v108 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v108)
      v107 = 0;
    else
      v107 = *v108;
  }
  *((float *)this + 160) = ausdk::AUElement::GetParameter(v107, 0x13u);
  v109 = *((_QWORD *)this + 9);
  if (v109)
  {
    v110 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0);
  }
  else
  {
    v111 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v111)
      v110 = 0;
    else
      v110 = *v111;
  }
  *((_BYTE *)this + 644) = ausdk::AUElement::GetParameter(v110, 0x14u) != 0.0;
  v112 = *((_QWORD *)this + 9);
  if (v112)
  {
    v113 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 0);
  }
  else
  {
    v114 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v114)
      v113 = 0;
    else
      v113 = *v114;
  }
  *((float *)this + 162) = ausdk::AUElement::GetParameter(v113, 0x15u);
  v115 = *((_QWORD *)this + 9);
  if (v115)
  {
    v116 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0);
  }
  else
  {
    v117 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v117)
      v116 = 0;
    else
      v116 = *v117;
  }
  *((float *)this + 163) = ausdk::AUElement::GetParameter(v116, 0x16u);
  v118 = *((_QWORD *)this + 9);
  if (v118)
  {
    v119 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0);
  }
  else
  {
    v120 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v120)
      v119 = 0;
    else
      v119 = *v120;
  }
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v119, 0x17u);
  v121 = *((_QWORD *)this + 9);
  if (v121)
  {
    v122 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 0);
  }
  else
  {
    v123 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v123)
      v122 = 0;
    else
      v122 = *v123;
  }
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v122, 0x18u);
  v124 = *((_QWORD *)this + 9);
  if (v124)
  {
    v125 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 32))(v124, 0);
  }
  else
  {
    v126 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v126)
      v125 = 0;
    else
      v125 = *v126;
  }
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v125, 0x19u);
  v127 = *((_QWORD *)this + 9);
  if (v127)
  {
    v128 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 32))(v127, 0);
  }
  else
  {
    v129 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v129)
      v128 = 0;
    else
      v128 = *v129;
  }
  *((float *)this + 167) = ausdk::AUElement::GetParameter(v128, 0x1Au);
  v130 = *((_QWORD *)this + 9);
  if (v130)
  {
    v131 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0);
  }
  else
  {
    v132 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v132)
      v131 = 0;
    else
      v131 = *v132;
  }
  *((_BYTE *)this + 672) = ausdk::AUElement::GetParameter(v131, 0x1Bu) != 0.0;
  v133 = *((_QWORD *)this + 9);
  if (v133)
  {
    v134 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 32))(v133, 0);
  }
  else
  {
    v135 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v135)
      v134 = 0;
    else
      v134 = *v135;
  }
  *((float *)this + 169) = ausdk::AUElement::GetParameter(v134, 0x1Cu);
  v136 = *((_QWORD *)this + 9);
  if (v136)
  {
    v137 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v136 + 32))(v136, 0);
  }
  else
  {
    v138 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v138)
      v137 = 0;
    else
      v137 = *v138;
  }
  v139 = ausdk::AUElement::GetParameter(v137, 0x1Du) != 0.0;
  *((_BYTE *)this + 680) = v139;
  v140 = *((_DWORD *)this + 150);
  v141 = *((_DWORD *)this + 137);
  if (v140 > v141)
  {
    v140 = 0;
    *((_DWORD *)this + 150) = 0;
  }
  v142 = *((_DWORD *)this + 155);
  if (v142 > v141 - 1)
  {
    v142 = 0;
    *((_DWORD *)this + 155) = 0;
  }
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  v143 = *((_QWORD *)this + 91);
  if (!v143)
  {
    v144 = operator new();
    *(_DWORD *)v144 = 4;
    *(_OWORD *)(v144 + 4) = xmmword_1B66A28A0;
    *(_QWORD *)(v144 + 20) = 0x408000003F800000;
    *(_OWORD *)(v144 + 28) = xmmword_1B66A28B0;
    *(_QWORD *)(v144 + 44) = 0x3C000005DC0;
    *(_DWORD *)(v144 + 52) = 481;
    *(_QWORD *)(v144 + 56) = 0x3F0000003A888889;
    *(_DWORD *)(v144 + 64) = 962;
    *(_BYTE *)(v144 + 68) = 1;
    *(_QWORD *)(v144 + 72) = 0xF0000001E0;
    *(_DWORD *)(v144 + 80) = 1056964608;
    *(_QWORD *)(v144 + 84) = 1;
    *(_DWORD *)(v144 + 92) = 10;
    *(_OWORD *)(v144 + 96) = xmmword_1B66A28C0;
    *(_QWORD *)(v144 + 112) = 0x3F8000003F4CCCCDLL;
    *(_QWORD *)(v144 + 136) = 0;
    *(_DWORD *)(v144 + 132) = 0;
    *(_QWORD *)(v144 + 120) = 0;
    *(_WORD *)(v144 + 128) = 0;
    *(_QWORD *)(v144 + 144) = 0x3F0000003F800000;
    *(_QWORD *)(v144 + 152) = 0;
    *(_QWORD *)(v144 + 160) = 0xC08000003F800000;
    *(_DWORD *)(v144 + 168) = 1065353216;
    *(_BYTE *)(v144 + 172) = 0;
    bzero((void *)(v144 + 176), 0x2C8uLL);
    std::unique_ptr<ecRMDF>::reset[abi:ne180100]((uint64_t *)this + 91, v144);
    v143 = *((_QWORD *)this + 91);
    v141 = *((_DWORD *)this + 137);
    v140 = *((_DWORD *)this + 150);
    v142 = *((_DWORD *)this + 155);
    v139 = *((_BYTE *)this + 680);
  }
  v145 = *((_DWORD *)this + 136);
  v146 = *((_DWORD *)this + 135);
  v147 = vcvtps_u32_f32((float)*((unsigned int *)this + 140) / (float)((float)((float)v145 / (float)v146) * 1000.0));
  *((_DWORD *)this + 139) = v147;
  v183 = *((float *)this + 143);
  v148 = *((float *)this + 141);
  v149 = *((float *)this + 147);
  v150 = *((_DWORD *)this + 145);
  v151 = *((float *)this + 144);
  v152 = *((float *)this + 142);
  v153 = *((_DWORD *)this + 146);
  v154 = *((_DWORD *)this + 138);
  v155 = *((_BYTE *)this + 592);
  v156 = *((float *)this + 151);
  v157 = *((float *)this + 152);
  v158 = *((_DWORD *)this + 160);
  v188 = *((_BYTE *)this + 644);
  v189 = *(float32x2_t *)((char *)this + 648);
  v159 = *((float *)this + 164);
  v190 = *((float *)this + 165);
  v186 = *((float *)this + 167);
  v187 = *((float *)this + 153);
  v184 = *((float *)this + 169);
  v185 = *((float *)this + 166);
  *(_BYTE *)(v143 + 172) = v139;
  *(_DWORD *)(v143 + 140) = v142;
  *(_DWORD *)(v143 + 116) = v158;
  *(float *)(v143 + 8) = __exp10f(v148 / 10.0);
  *(_BYTE *)(v143 + 68) = v155;
  v160 = __exp10f(v152 / 10.0);
  *(_DWORD *)v143 = v153 * v147;
  *(_DWORD *)(v143 + 28) = v153;
  *(_DWORD *)(v143 + 32) = v141;
  *(_DWORD *)(v143 + 36) = v154;
  *(_DWORD *)(v143 + 40) = v145 / v153;
  *(_DWORD *)(v143 + 44) = v146;
  *(float *)(v143 + 20) = v160;
  *(_DWORD *)(v143 + 24) = v150;
  v161 = __exp10f(v149 / 10.0);
  v162 = *(_DWORD *)(v143 + 40);
  *(_DWORD *)(v143 + 48) = 2 * v162;
  *(float *)(v143 + 12) = v161;
  *(_DWORD *)(v143 + 52) = ++v162;
  *(_DWORD *)(v143 + 64) = 2 * v162;
  *(float *)(v143 + 16) = __exp10f(v151 / 10.0);
  v163 = (float)*(unsigned int *)(v143 + 48);
  *(float *)v164.i32 = (float)*(unsigned int *)(v143 + 44);
  v165 = (float)((float)((float)(v156 * v163) / *(float *)v164.i32) + -1.0);
  v166 = (float)((float)((float)(v157 * v163) / *(float *)v164.i32) + -1.0);
  *(_DWORD *)(v143 + 84) = v140;
  *(_DWORD *)(v143 + 88) = v165;
  v167 = *(_DWORD *)(v143 + 40);
  if (v167 < v166)
    v166 = *(_DWORD *)(v143 + 40);
  *(_DWORD *)(v143 + 92) = v166;
  if (v166 <= v165)
    *(_DWORD *)(v143 + 88) = v166 - 1;
  *(float *)v164.i32 = (float)v167 / *(float *)v164.i32;
  v182 = v164;
  *(_DWORD *)(v143 + 108) = v164.i32[0];
  v168 = -*(float *)v164.i32;
  v169 = expf((float)-*(float *)v164.i32 / v187);
  v170 = 1.0;
  *(float *)(v143 + 96) = v169;
  *(float *)(v143 + 100) = (float)(1.0 - v169) / v169;
  *(_BYTE *)(v143 + 129) = v188;
  *(uint32x2_t *)(v143 + 132) = vcvt_u32_f32(vmul_f32(vdiv_f32(v189, (float32x2_t)vdup_lane_s32(v182, 0)), (float32x2_t)vdup_n_s32(0x3A83126Fu)));
  v171 = expf(v168 / v159);
  if (v159 == 0.0)
    v171 = 1.0;
  *(float *)(v143 + 148) = v171;
  *(float *)(v143 + 152) = __exp10f(v190 / 10.0);
  if (v185 != 0.0)
    v170 = expf((float)-*(float *)(v143 + 108) / v185);
  *(float *)(v143 + 160) = v170;
  *(float *)(v143 + 164) = __exp10f(v186 / 10.0);
  v172 = 1.0;
  if (v184 != 0.0)
    v172 = expf((float)-*(float *)(v143 + 108) / v184);
  v173 = *(unsigned int *)(v143 + 48);
  *(float *)(v143 + 168) = v172;
  Setup = vDSP_DFT_zrop_CreateSetup(*(vDSP_DFT_Setup *)(v143 + 872), v173, vDSP_DFT_FORWARD);
  std::unique_ptr<vDSP_DFT_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_DFT_SetupStruct*,&(vDSP_DFT_DestroySetup)>>::reset[abi:ne180100]((vDSP_DFT_SetupStruct **)(v143 + 872), Setup);
  v175 = vDSP_DFT_zrop_CreateSetup(*(vDSP_DFT_Setup *)(v143 + 880), *(unsigned int *)(v143 + 48), vDSP_DFT_INVERSE);
  std::unique_ptr<vDSP_DFT_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_DFT_SetupStruct*,&(vDSP_DFT_DestroySetup)>>::reset[abi:ne180100]((vDSP_DFT_SetupStruct **)(v143 + 880), v175);
  v176 = *(_DWORD *)(v143 + 48);
  v177 = 1.0 / (float)v176;
  *(float *)(v143 + 56) = v177;
  *(_DWORD *)(v143 + 60) = 1056964608;
  v178 = *(_DWORD *)(v143 + 40);
  v179 = 0.0;
  if (v183 > 0.0)
    v179 = expf((float)((float)-(float)v178 / (float)*(unsigned int *)(v143 + 44)) / v183);
  *(float *)(v143 + 4) = v179;
  *(_DWORD *)(v143 + 72) = v176 >> 1;
  *(_DWORD *)(v143 + 76) = v178 >> 1;
  *(float *)(v143 + 80) = v177 * 0.5;
  ecRMDF::ec_state_reset((ecRMDF *)v143);
  (*(void (**)(AUECRMDF *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v180 = AUECRMDFLogScope();
  v181 = os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v181)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B5ED0000, v180, OS_LOG_TYPE_DEFAULT, "Successfully initialized.\n", buf, 2u);
    return 0;
  }
  return result;
}

void sub_1B65166D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AUECRMDF::Reset(AUECRMDF *this)
{
  caulk::concurrent::messenger *v2;
  uint64_t v3;

  v2 = (caulk::concurrent::messenger *)*((_QWORD *)this + 90);
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = &off_1E69E82A0;
  *(_QWORD *)(v3 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v2, (caulk::concurrent::message *)v3);
  if (*((_BYTE *)this + 17))
    ecRMDF::ec_state_reset(*((ecRMDF **)this + 91));
  return 0;
}

uint64_t AUECRMDF::GetPropertyInfo(AUECRMDF *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;

  if (a3)
    return 4294956417;
  if (a2 == 21)
  {
    v7 = 1;
  }
  else
  {
    if (a2 != 3700)
      return 4294956417;
    v7 = 0;
  }
  result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUECRMDF::GetProperty(AUECRMDF *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v6;

  if (a3)
    return 4294956417;
  if (a2 == 3700)
  {
    v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21)
      return 4294956417;
    v6 = (unsigned __int8 *)this + 528;
  }
  result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUECRMDF::SetProperty(AUECRMDF *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;

  result = 4294956417;
  if (a2 == 21 && !a3)
  {
    result = 0;
    *((_BYTE *)this + 528) = *a5 != 0;
  }
  return result;
}

uint64_t AUECRMDF::SetParameter(AUECRMDF *this, unsigned int a2, int a3, float a4)
{
  uint64_t v7;
  ausdk::AUElement *v8;
  ausdk::AUElement **v9;

  if (a3)
    return 4294956418;
  ++*((_DWORD *)this + 133);
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v8 = (ausdk::AUElement *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v7 + 32))(*((_QWORD *)this + 9), 0);
  }
  else
  {
    v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v9)
      v8 = 0;
    else
      v8 = *v9;
  }
  ausdk::AUElement::SetParameter(v8, a2, a4, 0);
  return 0;
}

uint64_t AUECRMDF::CanScheduleParameters(AUECRMDF *this)
{
  return 0;
}

uint64_t AUECRMDF::ProcessMultipleBufferLists(AUECRMDF *this, unsigned int *a2, int a3, uint64_t a4, const AudioBufferList **a5, uint64_t a6, AudioBufferList **a7)
{
  int v8;
  AudioBufferList *v9;
  caulk::concurrent::messenger *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t Element;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  const void **v21;
  void **v22;
  float *v23;
  float *v24;
  const void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  ausdk::AUElement **v29;
  float v30;
  ausdk::AUElement *v31;
  float v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  const void *v40;
  vDSP_Length v41;
  const float *v42;
  float *v43;
  unint64_t v44;
  unint64_t v45;
  const float *v46;
  char *v47;
  uint64_t v48;
  vDSP_Length v49;
  unsigned int v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  float *v58;
  const float *v59;
  uint64_t v60;
  float v61;
  vDSP_Length v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float *v68;
  float *v69;
  float *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  float *v76;
  vDSP_Length v77;
  float *v78;
  vDSP_Length v79;
  float *v80;
  float *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int i;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  float *v96;
  float *v97;
  float *v98;
  float *v99;
  vDSP_Length v100;
  vDSP_Length v101;
  vDSP_Length v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  float v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  float v113;
  const float *v114;
  const float *v115;
  const float *v116;
  const float *v117;
  float v118;
  float v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  float v127;
  float v128;
  float *v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  float v133;
  unint64_t v134;
  unint64_t v135;
  float v136;
  uint64_t v137;
  unint64_t v138;
  vDSP_Length v139;
  uint64_t v140;
  float v141;
  uint64_t v142;
  unint64_t v143;
  float v144;
  vDSP_Length v145;
  const float *v146;
  uint64_t v147;
  unint64_t v148;
  caulk::concurrent::messenger *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void **v155;
  const void **v156;
  void **p_mData;
  float *v158;
  float *v159;
  const void *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  ausdk::AUElement *v164;
  ausdk::AUElement **v165;
  ausdk::AUElement **v166;
  uint64_t v167;
  ausdk::AUElement *v168;
  ausdk::AUElement **v169;
  uint64_t v170;
  ausdk::AUElement *v171;
  ausdk::AUElement **v172;
  uint64_t v173;
  ausdk::AUElement *v174;
  ausdk::AUElement **v175;
  uint64_t v176;
  ausdk::AUElement *v177;
  ausdk::AUElement **v178;
  float v179;
  _QWORD *v180;
  int v181;
  AudioBufferList *v182;
  float *v183;
  float *v184;
  uint64_t v185;
  uint64_t v186;
  AudioBufferList *v187;
  const AudioBufferList *v188;
  void *__dst;
  float *__A;
  uint64_t v191;
  float *v192;
  DSPSplitComplex v193;
  uint64_t v194;
  DSPSplitComplex __B;
  DSPSplitComplex __C;
  float v197[3];

  v8 = *((_DWORD *)this + 84);
  if (v8 != a3)
  {
    v11 = (caulk::concurrent::messenger *)*((_QWORD *)this + 90);
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const AudioBufferList **, uint64_t, AudioBufferList **))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 32, 8, a4, a5, a6, a7);
    *(_DWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 24) = a3;
    *(_DWORD *)(v12 + 28) = v8;
    *(_QWORD *)v12 = &off_1E69E82C8;
    *(_QWORD *)(v12 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v12);
    return 4294956422;
  }
  if (a6 <= 1)
  {
    v187 = (AudioBufferList *)(*((_QWORD *)this + 86) + 48);
  }
  else
  {
    v187 = a7[1];
    if ((_DWORD)a6 != 2)
    {
      v9 = a7[2];
      goto LABEL_8;
    }
  }
  v9 = (AudioBufferList *)(*((_QWORD *)this + 88) + 48);
LABEL_8:
  v14 = (uint64_t)*a5;
  v188 = a5[1];
  v15 = (uint64_t)*a7;
  Element = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), 0);
  if (!*((_BYTE *)this + 528))
  {
    v185 = v15;
    v186 = v14;
    v32 = __exp10f(*((float *)this + 141) / 10.0);
    v33 = (unsigned int *)*((_QWORD *)this + 91);
    v34 = v33[7];
    v182 = v9;
    if (v34)
    {
      v35 = 0;
      v183 = (float *)(v33 + 24);
      v184 = (float *)(v33 + 25);
      v180 = (_QWORD *)(v14 + 16);
      do
      {
        v36 = v33[10];
        v181 = v35;
        v191 = v36 * v35;
        if (v33[8])
        {
          v37 = 0;
          v38 = 0;
          v39 = v180;
          do
          {
            v40 = (const void *)(*v39 + 4 * v191);
            LODWORD(__C.realp) = 0;
            memcpy((void *)(*(_QWORD *)(*((_QWORD *)v33 + 67) + v37) + 4 * v36), v40, 4 * v36);
            *(_QWORD *)(*((_QWORD *)v33 + 49) + 8 * (v38 >> 6)) |= 1 << v38;
            v41 = v33[10];
            v42 = (const float *)(*(_QWORD *)(*((_QWORD *)v33 + 67) + v37) + 4 * v41);
            vDSP_dotpr(v42, 1, v42, 1, (float *)&__C, v41);
            v36 = v33[10];
            if ((float)(*(float *)&__C.realp / (float)v36) < *((float *)v33 + 4))
              *(_QWORD *)(*((_QWORD *)v33 + 49) + 8 * (v38 >> 6)) &= ~(1 << v38);
            ++v38;
            v37 += 24;
            v39 += 2;
          }
          while (v38 < v33[8]);
        }
        v43 = (float *)((char *)v9->mBuffers[0].mData + 4 * v191);
        vDSP_vclr(v43, 1, v36);
        LODWORD(v44) = v33[9];
        if ((_DWORD)v44)
        {
          v45 = 0;
          do
          {
            v46 = (const float *)((char *)v188->mBuffers[v45].mData + 4 * v191);
            *(float *)&__B.realp = 1.0 / (float)v44;
            vDSP_vsma(v46, 1, (const float *)&__B, v43, 1, v43, 1, v33[10]);
            v47 = *(char **)(*((_QWORD *)v33 + 79) + 24 * v45);
            memmove(v47, &v47[4 * v33[10]], 4 * v33[10]);
            memcpy((void *)(*(_QWORD *)(*((_QWORD *)v33 + 79) + 24 * v45) + 4 * v33[10]), v46, 4 * v33[10]);
            ecRMDF::fcnOlsAnaly((uint64_t)v33, *((const vDSP_DFT_SetupStruct **)v33 + 109), *(DSPComplex **)(*((_QWORD *)v33 + 79) + 24 * v45), (float **)(*(_QWORD *)(*((_QWORD *)v33 + 82) + 24 * v45) + 24 * **((unsigned int **)v33 + 106)));
            v48 = 3 * **((unsigned int **)v33 + 106);
            v49 = v33[13];
            __C.realp = *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 82) + 24 * v45) + 24
                                                                                  * **((unsigned int **)v33 + 106));
            __C.imagp = &__C.realp[v49];
            vDSP_zvmags(&__C, 1, *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 85) + 24 * v45) + 8 * v48), 1, v49);
            *(_DWORD *)(*((_QWORD *)v33 + 37) + 4 * v45) = 0;
            LODWORD(v193.realp) = 0;
            v50 = v33[30];
            v51 = 0.0;
            if (v50 < v33[31])
            {
              v52 = 4 * (int)v50;
              do
              {
                vDSP_meanv(*(const float **)(*(_QWORD *)(*((_QWORD *)v33 + 85) + 24 * v45)+ 24 * *(unsigned int *)(*((_QWORD *)v33 + 106) + v52)), 1, (float *)&v193, v33[13]);
                v53 = *((_QWORD *)v33 + 37);
                v54 = v33[31];
                v51 = *(float *)(v53 + 4 * v45) + (float)(*(float *)&v193.realp / (float)(v54 - v33[30]));
                *(float *)(v53 + 4 * v45) = v51;
                ++v50;
                v52 += 4;
              }
              while (v54 > v50);
            }
            v55 = *((_QWORD *)v33 + 46);
            v56 = *(_QWORD *)(v55 + 8 * (v45 >> 6));
            *(_QWORD *)(v55 + 8 * (v45 >> 6)) = v56 | (1 << v45);
            if (v51 < *((float *)v33 + 4))
              *(_QWORD *)(v55 + 8 * (v45 >> 6)) = v56 & ~(1 << v45);
            ++v45;
            v44 = v33[9];
          }
          while (v45 < v44);
        }
        if (v33[8])
        {
          v57 = 0;
          do
          {
            v58 = (float *)((char *)v187->mBuffers[v57].mData + 4 * v191);
            if (((*(_QWORD *)(*((_QWORD *)v33 + 49) + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v57) & 1) != 0)
            {
              __dst = (void *)(*(_QWORD *)(v185 + 16 * v57 + 16) + 4 * v191);
              __A = (float *)(*(_QWORD *)(v186 + 16 * v57 + 16) + 4 * v191);
              v192 = (float *)((char *)v187->mBuffers[v57].mData + 4 * v191);
              ecRMDF::fcnGetError((uint64_t)v33, v57, (DSPComplex **)(*((_QWORD *)v33 + 70) + 24 * v57));
              LODWORD(__C.realp) = 0;
              v59 = *(const float **)(*((_QWORD *)v33 + 76) + 24 * v57);
              vDSP_dotpr(v59, 1, v59, 1, (float *)&__C, v33[16]);
              v60 = *((_QWORD *)v33 + 22);
              v61 = *(float *)(v60 + 4 * v57) + 1.0;
              *(float *)(v60 + 4 * v57) = v61;
              if (*((float *)v33 + 29) < v61)
                v61 = *((float *)v33 + 29);
              *(float *)(v60 + 4 * v57) = v61;
              v62 = v33[13];
              *(float *)&__C.realp = v61
                                   * (float)((float)((float)(*(float *)&__C.realp + *(float *)&__C.realp)
                                                   / *((float *)v33 + 6))
                                           / (float)v62);
              vDSP_vfill((const float *)&__C, *((float **)v33 + 61), 1, v62);
              vDSP_vthr(*((const float **)v33 + 61), 1, (const float *)v33 + 2, *((float **)v33 + 61), 1, v33[13]);
              memcpy(*((void **)v33 + 55), *((const void **)v33 + 61), 4 * v33[13]);
              v64 = v33[30];
              v63 = v33[31];
              if (v64 < v63)
              {
                LODWORD(v65) = v33[9];
                do
                {
                  if ((_DWORD)v65)
                  {
                    v66 = 0;
                    v67 = 0;
                    do
                    {
                      if (((*(_QWORD *)(*((_QWORD *)v33 + 46) + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v67) & 1) != 0)
                      {
                        v68 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v66) + 24 * v64);
                        vDSP_vsdiv(v68, 1, (const float *)v33 + 1, v68, 1, v33[13]);
                        vDSP_vma(*(const float **)(*(_QWORD *)(*((_QWORD *)v33 + 85) + v66)+ 24 * *(unsigned int *)(*((_QWORD *)v33 + 106) + 4 * v64)), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v66) + 24 * v64), 1, *((const float **)v33 + 55), 1, *((float **)v33 + 55), 1, v33[13]);
                        vDSP_vmul(*(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v66) + 24 * v64), 1, *(const float **)(*(_QWORD *)(*((_QWORD *)v33 + 82) + v66)+ 24 * *(unsigned int *)(*((_QWORD *)v33 + 106) + 4 * v64)), 1, *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v66) + 24 * v64), 1, v33[13]);
                        vDSP_vmul(*(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v66) + 24 * v64), 1, (const float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 82) + v66)+ 24 * *(unsigned int *)(*((_QWORD *)v33 + 106) + 4 * v64))+ 4 * v33[13]), 1, (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v66) + 24 * v64) + 4 * v33[13]), 1, v33[13]);
                        v69 = *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v66) + 24 * v64);
                        vDSP_vneg(v69, 1, v69, 1, v33[13]);
                        v70 = *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v66) + 24 * v64);
                        vDSP_vsmul(v70, 1, (const float *)v33 + 6, v70, 1, v33[16]);
                      }
                      else
                      {
                        vDSP_vclr(*(float **)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v66) + 24 * v64), 1, v33[16]);
                      }
                      ++v67;
                      v65 = v33[9];
                      v66 += 24;
                    }
                    while (v67 < v65);
                    v63 = v33[31];
                  }
                  ++v64;
                }
                while (v64 < v63);
              }
              vDSP_vsmul(*((const float **)v33 + 55), 1, (const float *)v33 + 6, *((float **)v33 + 55), 1, v33[13]);
              v72 = v33[30];
              v71 = v33[31];
              if (v72 < v71)
              {
                LODWORD(v73) = v33[9];
                do
                {
                  if ((_DWORD)v73)
                  {
                    v74 = 0;
                    v75 = 0;
                    do
                    {
                      v76 = *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v74) + 24 * v72);
                      vDSP_vdiv(*((const float **)v33 + 55), 1, v76, 1, v76, 1, v33[13]);
                      v77 = v33[13];
                      v78 = (float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v74) + 24 * v72) + 4 * v77);
                      vDSP_vdiv(*((const float **)v33 + 55), 1, v78, 1, v78, 1, v77);
                      if (v72 >= v33[30] && v72 < v33[31])
                        ecRMDF::fcnUpdateFilter((ecRMDF *)v33, v57, v75, v72);
                      v79 = v33[13];
                      __B.realp = *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 88) + v74) + 24 * v72);
                      __B.imagp = &__B.realp[v79];
                      __C.realp = *(float **)(*(_QWORD *)(*((_QWORD *)v33 + 82) + v74)
                                            + 24 * *(unsigned int *)(*((_QWORD *)v33 + 106) + 4 * v72));
                      __C.imagp = &__C.realp[v79];
                      v193.realp = (float *)*((_QWORD *)v33 + 58);
                      v193.imagp = &v193.realp[v79];
                      vDSP_zvmul(&__C, 1, &__B, 1, &v193, 1, v79, 1);
                      vDSP_vabs(*((const float **)v33 + 58), 1, *((float **)v33 + 58), 1, v33[13]);
                      vDSP_vneg(*((const float **)v33 + 58), 1, *((float **)v33 + 58), 1, v33[13]);
                      v80 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v74) + 24 * v72);
                      vDSP_vma(*((const float **)v33 + 58), 1, v80, 1, v80, 1, v80, 1, v33[13]);
                      v81 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v74) + 24 * v72);
                      vDSP_vabs(v81, 1, v81, 1, v33[13]);
                      ++v75;
                      v73 = v33[9];
                      v74 += 24;
                    }
                    while (v75 < v73);
                    v71 = v33[31];
                  }
                  ++v72;
                }
                while (v72 < v71);
              }
              ecRMDF::fcnGetError((uint64_t)v33, v57, (DSPComplex **)(*((_QWORD *)v33 + 73) + 24 * v57));
              v83 = v33[30];
              v82 = v33[31];
              if (v83 < v82)
              {
                v84 = v33[9];
                do
                {
                  if (v84)
                  {
                    for (i = 0; i < v84; ++i)
                    {
                      ecRMDF::fcnUpdateFilter((ecRMDF *)v33, v57, i, v83);
                      v84 = v33[9];
                    }
                    v82 = v33[31];
                  }
                  ++v83;
                }
                while (v83 < v82);
              }
              v194 = 0;
              v86 = 146;
              if (!*((_BYTE *)v33 + 68))
                v86 = 140;
              memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)&v33[v86] + 24 * v57) + 4 * v33[10]), 4 * v33[10]);
              vDSP_dotpr((const float *)__dst, 1, (const float *)__dst, 1, (float *)&v194 + 1, v33[10]);
              vDSP_dotpr(__A, 1, __A, 1, (float *)&v194, v33[10]);
              v87 = *((_QWORD *)v33 + 25);
              *(float *)(v87 + 4 * v57) = (float)((float)(1.0 - *((float *)v33 + 42)) * *(float *)&v194)
                                        + (float)(*((float *)v33 + 42) * *(float *)(v87 + 4 * v57));
              v88 = *((_QWORD *)v33 + 28);
              v89 = (float)((float)(1.0 - *((float *)v33 + 42)) * *((float *)&v194 + 1))
                  + (float)(*((float *)v33 + 42) * *(float *)(v88 + 4 * v57));
              *(float *)(v88 + 4 * v57) = v89;
              v90 = v192;
              if (v89 > (float)(*(float *)(v87 + 4 * v57) * *((float *)v33 + 3)) && *((float *)v33 + 40) < 1.0)
              {
                *(_DWORD *)(*((_QWORD *)v33 + 22) + 4 * v57) = 1065353216;
                *(float *)&__C.realp = (float)(1.0 - *((float *)v33 + 40)) * *((float *)v33 + 5);
                v91 = *v33;
                if ((_DWORD)v91)
                {
                  v92 = 0;
                  LODWORD(v93) = v33[9];
                  do
                  {
                    if ((_DWORD)v93)
                    {
                      v94 = 0;
                      v95 = 0;
                      do
                      {
                        v96 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 100) + 24 * v57) + v94) + 24 * v92);
                        vDSP_vsmul(v96, 1, (const float *)v33 + 40, v96, 1, v33[13]);
                        v97 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 103) + 24 * v57) + v94) + 24 * v92);
                        vDSP_vsmul(v97, 1, (const float *)v33 + 40, v97, 1, v33[13]);
                        v98 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v94) + 24 * v92);
                        vDSP_vsmul(v98, 1, (const float *)v33 + 40, v98, 1, v33[13]);
                        v99 = *(float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 91) + 24 * v57) + v94) + 24 * v92);
                        vDSP_vsadd(v99, 1, (const float *)&__C, v99, 1, v33[13]);
                        ++v95;
                        v93 = v33[9];
                        v94 += 24;
                      }
                      while (v95 < v93);
                      v91 = *v33;
                      v90 = v192;
                    }
                    ++v92;
                  }
                  while (v92 < v91);
                }
              }
              vDSP_vsub((const float *)__dst, 1, __A, 1, v90, 1, v33[10]);
              if (*((float *)&v194 + 1) > (float)(*(float *)&v194 * *((float *)v33 + 3)))
                memcpy(__dst, __A, 4 * v33[10]);
              if ((_DWORD)v57 + 1 == v33[21])
              {
                memcpy((void *)(*((_QWORD *)v33 + 40) + 4 * v33[10]), v90, 4 * v33[10]);
                LODWORD(v193.realp) = 0;
                v197[0] = 0.0;
                v100 = v33[23] - v33[22] + 1;
                ecRMDF::fcnOlsAnaly((uint64_t)v33, *((const vDSP_DFT_SetupStruct **)v33 + 109), *(DSPComplex **)(*((_QWORD *)v33 + 67) + 24 * v57), (float **)v33 + 52);
                v101 = v33[13];
                __C.realp = (float *)*((_QWORD *)v33 + 52);
                __C.imagp = &__C.realp[v101];
                vDSP_zvmags(&__C, 1, *((float **)v33 + 58), 1, v101);
                vDSP_vsma(*((const float **)v33 + 58), 1, v184, *((const float **)v33 + 31), 1, *((float **)v33 + 31), 1, v33[13]);
                vDSP_vsmul(*((const float **)v33 + 31), 1, v183, *((float **)v33 + 31), 1, v33[13]);
                vDSP_meanv((const float *)(*((_QWORD *)v33 + 31) + 4 * v33[22]), 1, (float *)&v193, v100);
                ecRMDF::fcnOlsAnaly((uint64_t)v33, *((const vDSP_DFT_SetupStruct **)v33 + 109), *((DSPComplex **)v33 + 40), (float **)v33 + 43);
                v102 = v33[13];
                __B.realp = (float *)*((_QWORD *)v33 + 43);
                __B.imagp = &__B.realp[v102];
                vDSP_zvcmul(&__C, 1, &__B, 1, &__B, 1, v102);
                vDSP_zvabs(&__B, 1, *((float **)v33 + 58), 1, v33[13]);
                vDSP_vsma(*((const float **)v33 + 58), 1, v184, *((const float **)v33 + 34), 1, *((float **)v33 + 34), 1, v33[13]);
                vDSP_vsmul(*((const float **)v33 + 34), 1, v183, *((float **)v33 + 34), 1, v33[13]);
                vDSP_meanv((const float *)(*((_QWORD *)v33 + 34) + 4 * v33[22]), 1, v197, v100);
                *((float *)v33 + 26) = fmaxf(fminf(v197[0] / (float)(*(float *)&v193.realp + *((float *)v33 + 2)), 1.0), 0.0);
              }
            }
            else
            {
              memcpy((void *)(*(_QWORD *)(v185 + 16 * v57 + 16) + 4 * v191), (const void *)(*(_QWORD *)(v186 + 16 * v57 + 16) + 4 * v191), 4 * v33[10]);
              vDSP_vclr(v58, 1, v33[10]);
            }
            ++v57;
          }
          while (v57 < v33[8]);
        }
        if (*v33)
        {
          v103 = 0;
          do
          {
            v104 = *((_QWORD *)v33 + 106);
            v105 = *(_DWORD *)(v104 + 4 * v103);
            *(_DWORD *)(v104 + 4 * v103) = v105 + 1;
            if (v105 + 1 == *v33)
              v106 = 0;
            else
              v106 = v105 + 1;
            *(_DWORD *)(v104 + 4 * v103++) = v106;
          }
          while (v103 < *v33);
        }
        v35 = v181 + 1;
        v34 = v33[7];
      }
      while (v181 + 1 < v34);
    }
    v107 = v33[35];
    v33[39] = 0;
    LODWORD(__C.realp) = 0;
    LODWORD(__B.realp) = 0;
    v108 = v33[30];
    if (v108 < v33[31])
    {
      v109 = *((float *)v33 + 2);
      LODWORD(v110) = v33[9];
      do
      {
        if ((_DWORD)v110)
        {
          v111 = 0;
          v112 = 0;
          v113 = 0.0;
          do
          {
            v114 = *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 100) + 24 * v107) + v111) + 24 * v108);
            vDSP_dotpr(v114, 1, v114, 1, (float *)&__C, v33[13]);
            v115 = *(const float **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 103) + 24 * v107) + v111) + 24 * v108);
            vDSP_dotpr(v115, 1, v115, 1, (float *)&__B, v33[13]);
            v113 = (float)(v113 + *(float *)&__C.realp) + *(float *)&__B.realp;
            ++v112;
            v110 = v33[9];
            v111 += 24;
          }
          while (v112 < v110);
          v9 = v182;
        }
        else
        {
          v113 = 0.0;
        }
        if (v113 > v109)
        {
          v33[39] = v108;
          v109 = v113;
        }
        ++v108;
      }
      while (v108 < v33[31]);
      LODWORD(v107) = v33[35];
      v34 = v33[7];
    }
    v116 = *(const float **)(v186 + 16 * v107 + 16);
    v117 = *(const float **)(v185 + 16 * v107 + 16);
    LODWORD(__C.realp) = 0;
    LODWORD(__B.realp) = 0;
    vDSP_svesq(v116, 1, (float *)&__C, v34 * v33[10]);
    vDSP_svesq(v117, 1, (float *)&__B, v33[7] * v33[10]);
    v118 = *((float *)v33 + 2);
    v119 = (float)((float)((float)(1.0 - *((float *)v33 + 37)) * (float)(*(float *)&__B.realp + v118))
                 / (float)(v118 + *(float *)&__C.realp))
         + (float)(*((float *)v33 + 36) * *((float *)v33 + 37));
    if (v119 <= v118)
      v119 = *((float *)v33 + 2);
    *((float *)v33 + 36) = v119;
    if (*((_BYTE *)v33 + 128) && v119 < *((float *)v33 + 38))
    {
      *((_BYTE *)v33 + 128) = *((unsigned __int8 *)v33 + 128) != *((unsigned __int8 *)v33 + 172);
      v120 = v33[39];
      v121 = v33[33];
      v122 = v33[34] + v120;
      if (v122 >= *v33)
        v122 = *v33;
      v123 = v120 >= v121;
      v124 = v120 - v121;
      if (!v123)
        v124 = 0;
      v33[30] = v124;
      v33[31] = v122;
    }
    v125 = *((_QWORD *)this + 91);
    *((_DWORD *)this + 149) = *(_DWORD *)(v125 + 104);
    LODWORD(v126) = *(_DWORD *)(v125 + 36);
    v127 = 0.0;
    v128 = 0.0;
    if ((_DWORD)v126)
    {
      v129 = *(float **)(v125 + 296);
      v130 = *(unsigned int *)(v125 + 36);
      do
      {
        v131 = *v129++;
        v128 = v128 + v131;
        --v130;
      }
      while (v130);
    }
    *((float *)this + 154) = v128 / (float)v126;
    *((float *)this + 156) = (float)(*(float *)(v125 + 108) * (float)((float)*(unsigned int *)(v125 + 156) + 0.5))
                           * 1000.0;
    v132 = *((unsigned int *)this + 155);
    LODWORD(__C.realp) = 0;
    v133 = *(float *)(v125 + 8);
    LODWORD(__B.realp) = 0;
    LODWORD(v193.realp) = 0;
    v135 = *(unsigned int *)(v125 + 120);
    v134 = *(unsigned int *)(v125 + 124);
    if (v135 >= v134)
    {
      v136 = v133;
    }
    else
    {
      v127 = 0.0;
      v136 = v133;
      do
      {
        if ((_DWORD)v126)
        {
          v137 = 0;
          v138 = 0;
          do
          {
            vDSP_svesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 776) + 24 * v132) + v137) + 24 * v135), 1, (float *)&__B, *(unsigned int *)(v125 + 40));
            v136 = v136 + *(float *)&__B.realp;
            vDSP_svesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 752) + 24 * v132) + v137) + 24 * v135), 1, (float *)&v193, *(unsigned int *)(v125 + 40));
            v133 = v133 + *(float *)&v193.realp;
            vDSP_vsub(*(const float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 776) + 24 * v132) + v137) + 24 * v135), 1, *(const float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 752) + 24 * v132) + v137) + 24 * v135), 1, *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 776) + 24 * v132) + v137) + 24 * v135), 1, *(unsigned int *)(v125 + 40));
            vDSP_svesq(*(const float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 776) + 24 * v132) + v137) + 24 * v135), 1, (float *)&__C, *(unsigned int *)(v125 + 40));
            v127 = v127 + *(float *)&__C.realp;
            memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 776) + 24 * v132) + v137) + 24 * v135), *(const void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 + 752) + 24 * v132) + v137) + 24 * v135), 4 * *(unsigned int *)(v125 + 40));
            ++v138;
            v126 = *(unsigned int *)(v125 + 36);
            v137 += 24;
          }
          while (v138 < v126);
          v134 = *(unsigned int *)(v125 + 124);
          v9 = v182;
        }
        ++v135;
      }
      while (v135 < v134);
      LODWORD(v132) = *((_DWORD *)this + 155);
    }
    *((float *)this + 159) = (float)(v127
                                   / (float)((float)(v133 * (float)(1.0 - *(float *)(v125 + 112)))
                                           + (float)(*(float *)(v125 + 112) * v136)))
                           * 100.0;
    v139 = *((unsigned int *)this + 136);
    *((float *)this + 157) = log10f(v32 + (float)(*((float *)this + 158) / (float)v139)) * 10.0;
    vDSP_svesq((const float *)v187->mBuffers[v132].mData, 1, (float *)this + 158, v139);
    v140 = *((_QWORD *)this + 91);
    *((_BYTE *)this + 672) = *(float *)(v140 + 144) < *(float *)(v140 + 164);
    LODWORD(__C.realp) = 0;
    v141 = 0.0;
    if (*(_DWORD *)(v140 + 36))
    {
      v142 = 0;
      v143 = 0;
      v144 = 0.0;
      do
      {
        v145 = *(unsigned int *)(v140 + 40);
        v146 = (const float *)(*(_QWORD *)(*(_QWORD *)(v140 + 632) + v142) + 4 * v145);
        vDSP_dotpr(v146, 1, v146, 1, (float *)&__C, v145);
        v144 = v144 + *(float *)&__C.realp;
        ++v143;
        v142 += 24;
      }
      while (v143 < *(unsigned int *)(v140 + 36));
      v140 = *((_QWORD *)this + 91);
    }
    else
    {
      v144 = 0.0;
    }
    LODWORD(__C.realp) = 0;
    if (*(_DWORD *)(v140 + 32))
    {
      v147 = 0;
      v148 = 0;
      v141 = 0.0;
      do
      {
        vDSP_dotpr(*(const float **)(*(_QWORD *)(v140 + 584) + v147), 1, *(const float **)(*(_QWORD *)(v140 + 584) + v147), 1, (float *)&__C, *(unsigned int *)(v140 + 40));
        v141 = v141 + *(float *)&__C.realp;
        ++v148;
        v147 += 24;
      }
      while (v148 < *(unsigned int *)(v140 + 32));
    }
    if ((LODWORD(v141) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v144) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v150 = (caulk::concurrent::messenger *)*((_QWORD *)this + 90);
      v151 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 24, 8);
      *(_DWORD *)(v151 + 16) = 0;
      *(_BYTE *)(v151 + 21) = (LODWORD(v144) & 0x7FFFFFFFu) < 0x7F800000;
      *(_BYTE *)(v151 + 22) = (LODWORD(v141) & 0x7FFFFFFFu) < 0x7F800000;
      *(_QWORD *)v151 = &off_1E69E82F0;
      *(_QWORD *)(v151 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v150, (caulk::concurrent::message *)v151);
      ecRMDF::ec_state_reset(*((ecRMDF **)this + 91));
      v152 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), 0);
      if (*(_DWORD *)(v152 + 108))
      {
        v153 = v152;
        v154 = 0;
        v155 = (void **)(v185 + 16);
        v156 = (const void **)(v186 + 16);
        p_mData = &v187->mBuffers[0].mData;
        do
        {
          v159 = (float *)*p_mData;
          p_mData += 2;
          v158 = v159;
          v160 = *v156;
          v156 += 2;
          memcpy(*v155, v160, *((unsigned int *)v155 - 1));
          vDSP_vclr(v158, 1, *((unsigned int *)this + 136));
          ++v154;
          v155 += 2;
        }
        while (v154 < *(unsigned int *)(v153 + 108));
      }
      if (v9->mNumberBuffers)
      {
        v161 = 0;
        v162 = 16;
        do
        {
          vDSP_vclr(*(float **)((char *)&v9->mNumberBuffers + v162), 1, *((unsigned int *)this + 136));
          ++v161;
          v162 += 16;
        }
        while (v161 < v9->mNumberBuffers);
      }
      *((_DWORD *)this + 149) = 0;
      *((_DWORD *)this + 154) = 0;
      *((_BYTE *)this + 672) = 0;
      *((_QWORD *)this + 78) = 0;
      *((_QWORD *)this + 79) = 0;
    }
    v28 = *((_QWORD *)this + 9);
    if (!v28)
    {
      v166 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v166)
        v31 = 0;
      else
        v31 = *v166;
      goto LABEL_144;
    }
LABEL_143:
    v31 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 0);
LABEL_144:
    v30 = *((float *)this + 149);
    goto LABEL_145;
  }
  if (v15 != v14)
  {
    v17 = Element;
    if (*(_DWORD *)(Element + 108))
    {
      v18 = v15;
      v19 = 0;
      v20 = (void **)(v18 + 16);
      v21 = (const void **)(v14 + 16);
      v22 = &v187->mBuffers[0].mData;
      do
      {
        v24 = (float *)*v22;
        v22 += 2;
        v23 = v24;
        v25 = *v21;
        v21 += 2;
        memcpy(*v20, v25, *((unsigned int *)v20 - 1));
        vDSP_vclr(v23, 1, *((unsigned int *)this + 136));
        ++v19;
        v20 += 2;
      }
      while (v19 < *(unsigned int *)(v17 + 108));
    }
  }
  if (v188 != v9 && v9->mNumberBuffers)
  {
    v26 = 0;
    v27 = 0;
    do
    {
      memcpy(v9->mBuffers[v26].mData, v188->mBuffers[v26].mData, v9->mBuffers[v26].mDataByteSize);
      ++v27;
      ++v26;
    }
    while (v27 < v9->mNumberBuffers);
  }
  *((_DWORD *)this + 149) = 0;
  *((_DWORD *)this + 154) = 0;
  *((_BYTE *)this + 672) = 0;
  *((_OWORD *)this + 39) = 0u;
  v28 = *((_QWORD *)this + 9);
  if (v28)
    goto LABEL_143;
  v29 = (ausdk::AUElement **)*((_QWORD *)this + 6);
  v30 = 0.0;
  if (*((ausdk::AUElement ***)this + 7) == v29)
    v31 = 0;
  else
    v31 = *v29;
LABEL_145:
  ausdk::AUElement::SetParameter(v31, 9u, v30, 0);
  v163 = *((_QWORD *)this + 9);
  if (v163)
  {
    v164 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v163 + 32))(v163, 0);
  }
  else
  {
    v165 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v165)
      v164 = 0;
    else
      v164 = *v165;
  }
  ausdk::AUElement::SetParameter(v164, 0xEu, *((float *)this + 154), 0);
  v167 = *((_QWORD *)this + 9);
  if (v167)
  {
    v168 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 0);
  }
  else
  {
    v169 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v169)
      v168 = 0;
    else
      v168 = *v169;
  }
  ausdk::AUElement::SetParameter(v168, 0x10u, *((float *)this + 156), 0);
  v170 = *((_QWORD *)this + 9);
  if (v170)
  {
    v171 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 0);
  }
  else
  {
    v172 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v172)
      v171 = 0;
    else
      v171 = *v172;
  }
  ausdk::AUElement::SetParameter(v171, 0x11u, *((float *)this + 159), 0);
  v173 = *((_QWORD *)this + 9);
  if (v173)
  {
    v174 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 0);
  }
  else
  {
    v175 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v175)
      v174 = 0;
    else
      v174 = *v175;
  }
  ausdk::AUElement::SetParameter(v174, 0x12u, *((float *)this + 157), 0);
  v176 = *((_QWORD *)this + 9);
  if (v176)
  {
    v177 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 0);
  }
  else
  {
    v178 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (*((ausdk::AUElement ***)this + 7) == v178)
      v177 = 0;
    else
      v177 = *v178;
  }
  v179 = 0.0;
  if (*((_BYTE *)this + 672))
    v179 = 1.0;
  ausdk::AUElement::SetParameter(v177, 0x1Bu, v179, 0);
  return 0;
}

uint64_t AUECRMDF::Render(AUECRMDF *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  AudioBufferList *BufferList;

  if (*((_DWORD *)this + 84) != (_DWORD)a4)
    return 4294956422;
  v8 = (AUECRMDF *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUECRMDF *)((char *)this + 128), 0);
  if (!ausdk::AUBase::HasInput(this, 0))
    return 4294956420;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

BOOL AUECRMDF::BusCountWritable(AUECRMDF *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUECRMDF::GetParameterList(AUECRMDF *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  if (a2)
    return 4294956430;
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1B6626920;
    *((_OWORD *)a3 + 1) = xmmword_1B66A0770;
    *((_OWORD *)a3 + 2) = xmmword_1B66A07D0;
    *((_OWORD *)a3 + 3) = xmmword_1B66A07E0;
    *((_OWORD *)a3 + 4) = xmmword_1B66A07F0;
    *((_OWORD *)a3 + 5) = xmmword_1B66A0800;
    *((_OWORD *)a3 + 6) = xmmword_1B66A1320;
    *((_QWORD *)a3 + 14) = 0x1D0000001CLL;
  }
  result = 0;
  *a4 = 30;
  return result;
}

uint64_t AUECRMDF::GetParameterInfo(AUECRMDF *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  result = 4294956418;
  if (!a2 && a3 <= 0x1D)
  {
    v6 = off_1E69E8308[a3];
    v7 = dword_1B66876BC[a3];
    v8 = flt_1B6687734[a3];
    v9 = flt_1B66877AC[a3];
    v10 = flt_1B6687824[a3];
    v11 = dword_1B668789C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECRMDF::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 133);
  return result;
}

double AUECRMDF::GetLatency(AUECRMDF *this)
{
  return 0.0;
}

double AUECRMDF::GetTailTime(AUECRMDF *this)
{
  return 0.0;
}

uint64_t AUECRMDF::SupportsTail(AUECRMDF *this)
{
  return 1;
}

BOOL AUECRMDF::StreamFormatWritable(AUECRMDF *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUECRMDF::SupportedNumChannels(AUECRMDF *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUECRMDF::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 12;
}

uint64_t AUECRMDF::ValidFormat(AUECRMDF *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel != 32 || a4->mFormatID != 1819304813 || a4->mChannelsPerFrame >= 0xD)
    return 0;
  else
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
}

void caulk::concurrent::details::rt_message_call<AUECRMDF::ResetMain(AudioBufferList const*,AudioBufferList const*,AudioBufferList*,AudioBufferList*,AudioBufferList*)::$_0,BOOL &,BOOL &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUECRMDF::ResetMain(AudioBufferList const*,AudioBufferList const*,AudioBufferList*,AudioBufferList*,AudioBufferList*)::$_0,BOOL &,BOOL &>::perform(unsigned __int8 *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a1[21];
  v3 = a1[22];
  v4 = AUECRMDFLogScope();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109376;
    v6[1] = v2;
    v7 = 1024;
    v8 = v3;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "********* Reset begins *********\nref-signal buffers have finite values (1 if True): %u\nEC output buffers have valid values (1 if True): %u\n", (uint8_t *)v6, 0xEu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], a1, 24, 8);
}

void sub_1B6518280(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AUECRMDFLogScope(void)
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;

  v1 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
  if ((v0 & 1) == 0)
  {
    v1 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (v3)
    {
      AUECRMDFLogScope(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", " AUECRMDF");
      v1 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    }
  }
  return v1[67];
}

void caulk::concurrent::details::rt_message_call<AUECRMDF::ProcessMultipleBufferLists(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**)::$_0,unsigned int &,unsigned int>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUECRMDF::ProcessMultipleBufferLists(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**)::$_0,unsigned int &,unsigned int>::perform(caulk::concurrent::message *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a1 + 6);
  v2 = *((_DWORD *)a1 + 7);
  v4 = AUECRMDFLogScope();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109376;
    v6[1] = v3;
    v7 = 1024;
    v8 = v2;
    _os_log_impl(&dword_1B5ED0000, v4, OS_LOG_TYPE_DEFAULT, "AUECRMDF::ProcessMultipleBufferLists error - wrong (%u) block size expected (%u)\n", (uint8_t *)v6, 0xEu);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688]
                                                                                           + 24))(*MEMORY[0x1E0DDB688], a1, 32, 8);
}

void sub_1B65183FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AUECRMDF::Reset(unsigned int,unsigned int)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t caulk::concurrent::details::rt_message_call<AUECRMDF::Reset(unsigned int,unsigned int)::$_0>::perform(caulk::concurrent::message *a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = AUECRMDFLogScope();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B5ED0000, v2, OS_LOG_TYPE_DEFAULT, "Reset.\n", v4, 2u);
  }
  caulk::concurrent::message::~message(a1);
  return (*(uint64_t (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688]
                                                                                           + 24))(*MEMORY[0x1E0DDB688], a1, 24, 8);
}

uint64_t *std::unique_ptr<ecRMDF>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<vDSP_DFT_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_DFT_SetupStruct*,&(vDSP_DFT_DestroySetup)>>::reset[abi:ne180100]((vDSP_DFT_SetupStruct **)(v2 + 880), 0);
    std::unique_ptr<vDSP_DFT_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_DFT_SetupStruct*,&(vDSP_DFT_DestroySetup)>>::reset[abi:ne180100]((vDSP_DFT_SetupStruct **)(v2 + 872), 0);
    v3 = *(void **)(v2 + 848);
    if (v3)
    {
      *(_QWORD *)(v2 + 856) = v3;
      operator delete(v3);
    }
    v18 = (void **)(v2 + 824);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 800);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 776);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 752);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 728);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 704);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 680);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 656);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 632);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 608);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 584);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 560);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 536);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v18 = (void **)(v2 + 512);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
    v4 = *(void **)(v2 + 488);
    if (v4)
    {
      *(_QWORD *)(v2 + 496) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 464);
    if (v5)
    {
      *(_QWORD *)(v2 + 472) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 + 440);
    if (v6)
    {
      *(_QWORD *)(v2 + 448) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v2 + 416);
    if (v7)
    {
      *(_QWORD *)(v2 + 424) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(v2 + 392);
    if (v8)
      operator delete(v8);
    v9 = *(void **)(v2 + 368);
    if (v9)
      operator delete(v9);
    v10 = *(void **)(v2 + 344);
    if (v10)
    {
      *(_QWORD *)(v2 + 352) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(v2 + 320);
    if (v11)
    {
      *(_QWORD *)(v2 + 328) = v11;
      operator delete(v11);
    }
    v12 = *(void **)(v2 + 296);
    if (v12)
    {
      *(_QWORD *)(v2 + 304) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(v2 + 272);
    if (v13)
    {
      *(_QWORD *)(v2 + 280) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v2 + 248);
    if (v14)
    {
      *(_QWORD *)(v2 + 256) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v2 + 224);
    if (v15)
    {
      *(_QWORD *)(v2 + 232) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v2 + 200);
    if (v16)
    {
      *(_QWORD *)(v2 + 208) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v2 + 176);
    if (v17)
    {
      *(_QWORD *)(v2 + 184) = v17;
      operator delete(v17);
    }
    JUMPOUT(0x1BCC95CECLL);
  }
  return result;
}

void AULoudspeakerManager::~AULoudspeakerManager(AULoudspeakerManager *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E69E8408;
  v2 = (const void *)*((_QWORD *)this + 275);
  if (v2)
    CFRelease(v2);
  AUDspLib::~AUDspLib(this);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E69E8408;
  v2 = (const void *)*((_QWORD *)this + 275);
  if (v2)
    CFRelease(v2);
  AUDspLib::~AUDspLib(this);
  JUMPOUT(0x1BCC95CECLL);
}

uint64_t AULoudspeakerManager::Initialize(AULoudspeakerManager *this)
{
  uint64_t result;

  result = AUDspLib::Initialize(this);
  if (!(_DWORD)result)
    return AULoudspeakerManager::ReadCalibrationData(this);
  return result;
}

uint64_t AULoudspeakerManager::GetPropertyInfo(AULoudspeakerManager *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 6620)
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  result = 0;
  *a5 = 8;
  *a6 = 1;
  return result;
}

uint64_t AULoudspeakerManager::GetProperty(const __CFDictionary **this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  uint64_t result;
  const __CFDictionary *v8;
  CFDictionaryRef Copy;
  const __CFDictionary *v10;

  if (a2 != 6620)
    return AUDspLib::GetProperty((AUDspLib *)this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  v8 = this[275];
  if (!v8)
    return 4294956433;
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v10, Copy);
  result = 0;
  *a5 = v10;
  return result;
}

uint64_t AULoudspeakerManager::SetProperty(AULoudspeakerManager *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  CFTypeRef v9;
  const void *v10;
  const void *v11;
  const void *v12;

  if (a2 != 6620)
    return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
  if (a3)
    return 4294956430;
  if ((_DWORD)a6 != 8)
    return 4294956445;
  v9 = *(CFTypeRef *)a5;
  if (*(_QWORD *)a5)
  {
    CFRetain(*(CFTypeRef *)a5);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v12, v9);
    v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = v10;
  v12 = v11;
  if (v11)
    CFRelease(v11);
  if (*((_BYTE *)this + 17))
    return AULoudspeakerManager::ReadCalibrationData(this);
  else
    return 0;
}

BOOL AULoudspeakerManager::BusCountWritable(AULoudspeakerManager *this, int a2)
{
  return a2 == 1;
}

uint64_t AULoudspeakerManager::Version(AULoudspeakerManager *this)
{
  return 0x1000000;
}

DspLib::LoudspeakerManagerV1::Algorithm *AULoudspeakerManager::newDspLibAlgorithm(AULoudspeakerManager *this)
{
  DspLib::LoudspeakerManagerV1::Algorithm *v1;

  v1 = (DspLib::LoudspeakerManagerV1::Algorithm *)operator new();
  DspLib::LoudspeakerManagerV1::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1B65189CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC95CEC](v1, 0x10E1C407665139ELL);
  _Unwind_Resume(a1);
}

uint64_t AULoudspeakerManager::ReadCalibrationData(AULoudspeakerManager *this)
{
  CFStringRef v2;
  const void *Value;
  const void *v4;
  const UInt8 *BytePtr;
  unint64_t Length;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;
  int *v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *i;
  unsigned int *v19;
  unint64_t v20;
  std::runtime_error *exception;
  std::runtime_error *v23;
  uint64_t v24;
  int v25;
  CFDataRef theData;
  void *key;

  if (!*((_QWORD *)this + 275))
    return 0;
  v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "SpVA", 0x8000100u);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, v2);
  Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 275), key);
  v4 = Value;
  if (Value)
    CFRetain(Value);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, v4);
  v24 = 0;
  v25 = 0;
  if (!theData)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (!theData)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
  }
  Length = CFDataGetLength(theData);
  if (Length < 8)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_34;
  }
  v7 = 0;
  if (*(_WORD *)BytePtr == 1 && *((_WORD *)BytePtr + 1) == 8)
  {
    v8 = *((unsigned __int16 *)BytePtr + 2);
    if (!*((_WORD *)BytePtr + 2) || 8 * v8 + 8 > Length)
    {
LABEL_25:
      v17 = 0;
      for (i = (uint64_t *)((char *)this + 528); ; i += 7)
      {
        if (*((_DWORD *)this + 397))
        {
          v19 = (unsigned int *)*((_QWORD *)this + 268);
          v20 = v19 == *((unsigned int **)this + 269) ? 0 : *v19;
        }
        else
        {
          v20 = 1;
        }
        if (v17 >= v20)
          break;
        DspLib::LoudspeakerManagerV1::Algorithm::setCalibrationData(*i, &v24);
        ++v17;
      }
      v7 = 1;
      goto LABEL_34;
    }
    v9 = 0;
    v10 = 0;
    do
      v10 += BytePtr[v9++];
    while (v9 != 6);
    v11 = 9;
    v12 = 8;
    do
    {
      v10 += BytePtr[v12];
      v12 = v11;
    }
    while (Length > v11++);
    v7 = 0;
    if (*((unsigned __int16 *)BytePtr + 3) == (unsigned __int16)-v10)
    {
      v14 = (int *)(BytePtr + 8);
      do
      {
        v15 = *v14;
        if (*v14 == 1702054192)
        {
          v16 = (uint64_t *)&v25;
        }
        else if (v15 == 1886208304)
        {
          v16 = &v24;
        }
        else
        {
          v16 = (uint64_t *)((char *)&v24 + 4);
          if (v15 != 1702057520)
            goto LABEL_7;
        }
        *(_DWORD *)v16 = v14[1];
        v14 += 2;
        LODWORD(v8) = v8 - 1;
      }
      while ((_DWORD)v8);
      goto LABEL_25;
    }
  }
LABEL_34:
  if (theData)
    CFRelease(theData);
  if (key)
    CFRelease(key);
  if ((v7 & 1) != 0)
    return 0;
  return 0xFFFFFFFFLL;
}

void sub_1B6518C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  _Unwind_Resume(a1);
}

void GuidedMWF::InitializeMultiChannelFilter(float **this)
{
  unsigned int v2;

  vDSP_vclr(this[8], 1, (2 * *((_DWORD *)this + 10)));
  if (*(_DWORD *)this)
  {
    v2 = 0;
    do
      vDSP_vfill(&GuidedMWF::mOne, &this[8][(*((_DWORD *)this + 1) + *((_DWORD *)this + 9)) * v2++], 1, *((unsigned int *)this + 1));
    while (v2 < *(_DWORD *)this);
  }
}

os_log_t ___ZL17AUDenoiseLogScopev_block_invoke_21403()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "audnos");
  *v0 = result;
  AUDenoiseLogScope(void)::scope = (uint64_t)v0;
  return result;
}

void GuidedMWF::Reset(GuidedMWF *this)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  float v6;
  unsigned int v7;
  InverseWithGramSchmidt *v8;
  NSObject *v9;
  float v10;
  float __A;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  bzero(*((void **)this + 8), *((_QWORD *)this + 9) - *((_QWORD *)this + 8));
  bzero(*((void **)this + 11), *((_QWORD *)this + 12) - *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 15) - (_QWORD)v2;
  if (v3 >= 1)
    memset_pattern16(v2, &unk_1B6627B80, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  bzero(*((void **)this + 44), *((_QWORD *)this + 45) - *((_QWORD *)this + 44));
  bzero(*((void **)this + 47), *((_QWORD *)this + 48) - *((_QWORD *)this + 47));
  if (*(_DWORD *)this)
  {
    v4 = 0;
    do
    {
      __A = 1.0 / *((float *)this + 4);
      vDSP_vfill(&__A, (float *)(*((_QWORD *)this + 11) + 4 * (*((_DWORD *)this + 1) + *((_DWORD *)this + 9)) * v4), 1, *((unsigned int *)this + 1));
      vDSP_vfill((const float *)this + 4, (float *)(*((_QWORD *)this + 44) + 4 * (*((_DWORD *)this + 1) + *((_DWORD *)this + 9)) * v4), 1, *((unsigned int *)this + 1));
      vDSP_vfill((const float *)this + 4, (float *)(*((_QWORD *)this + 47) + 4 * (*((_DWORD *)this + 1) + *((_DWORD *)this + 9)) * v4++), 1, *((unsigned int *)this + 1));
    }
    while (v4 < *(_DWORD *)this);
  }
  v5 = *((_QWORD *)this + 64);
  if (v5)
  {
    bzero(*(void **)v5, *(_QWORD *)(v5 + 8) - *(_QWORD *)v5);
    bzero(*(void **)(v5 + 24), *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24));
    bzero(*(void **)(v5 + 48), *(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48));
    bzero(*(void **)(v5 + 72), *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72));
    bzero(*(void **)(v5 + 96), *(_QWORD *)(v5 + 104) - *(_QWORD *)(v5 + 96));
    bzero(*(void **)(v5 + 120), *(_QWORD *)(v5 + 128) - *(_QWORD *)(v5 + 120));
    bzero(*(void **)(v5 + 144), *(_QWORD *)(v5 + 152) - *(_QWORD *)(v5 + 144));
    bzero(*(void **)(v5 + 168), *(_QWORD *)(v5 + 176) - *(_QWORD *)(v5 + 168));
    v6 = *(float *)(v5 + 200);
    v10 = 1.0 / v6;
    __A = 1.0 / sqrtf(v6);
    if (*(_DWORD *)(v5 + 192))
    {
      v7 = 0;
      do
      {
        vDSP_vfill(&__A, (float *)(*(_QWORD *)v5 + 4 * (*(_DWORD *)(v5 + 196) + *(_DWORD *)(v5 + 208)) * v7), 1, *(unsigned int *)(v5 + 196));
        vDSP_vfill(&v10, (float *)(*(_QWORD *)(v5 + 24) + 4 * (*(_DWORD *)(v5 + 196) + *(_DWORD *)(v5 + 208)) * v7++), 1, *(unsigned int *)(v5 + 196));
      }
      while (v7 < *(_DWORD *)(v5 + 192));
    }
  }
  v8 = (InverseWithGramSchmidt *)*((_QWORD *)this + 65);
  if (v8)
    InverseWithGramSchmidt::cleanup(v8);
  *((_DWORD *)this + 118) = *(_DWORD *)this;
  vec::fill<BOOL>(*((_QWORD *)this + 60), *((_QWORD *)this + 61), 0);
  GuidedMWF::InitializeMultiChannelFilter((float **)this);
  if (AUDenoiseLogScope(void)::once != -1)
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_21398);
  if (AUDenoiseLogScope(void)::scope)
  {
    v9 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(_QWORD *)AUDenoiseLogScope(void)::scope)
      return;
  }
  else
  {
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    __A = 4.8151e-34;
    v12 = "GuidedMWF.cpp";
    v13 = 1024;
    v14 = 184;
    _os_log_impl(&dword_1B5ED0000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d successful reset.\n", (uint8_t *)&__A, 0x12u);
  }
}

void GuidedMWF::UpdatePSD(uint64_t a1, _QWORD *a2, float **a3)
{
  unsigned int v6;
  vDSP_Length v7;
  float *v8;
  DSPSplitComplex v9;

  vDSP_vclr(*a3, 1, *(unsigned int *)(a1 + 4));
  if (*(_DWORD *)a1)
  {
    v6 = 0;
    do
    {
      v7 = *(unsigned int *)(a1 + 4);
      v8 = (float *)(*a2 + 4 * (*(_DWORD *)(a1 + 36) + v7 * v6));
      v9.realp = (float *)(*a2 + 4 * v7 * v6);
      v9.imagp = v8;
      vDSP_zvmgsa(&v9, 1, *a3, 1, *a3, 1, v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)a1);
  }
  vDSP_vsmul(*a3, 1, (const float *)(a1 + 44), *a3, 1, *(unsigned int *)(a1 + 4));
}

void GuidedMWF::UpdateSpatialCovariance(uint64_t a1, _QWORD *a2, const float *a3, const float **a4, const float **a5)
{
  const float **v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float *v15;
  float *v16;
  vDSP_Length __N;
  int v18;
  int v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float *v24;
  DSPSplitComplex __A;
  DSPSplitComplex __D;
  DSPSplitComplex __B;
  int v28;

  v28 = *(_DWORD *)(a1 + 4);
  v9 = (const float **)(a1 + 232);
  vvsqrtf(*(float **)(a1 + 232), a3, &v28);
  vDSP_vthr(*v9, 1, (const float *)(a1 + 20), (float *)*v9, 1, *(unsigned int *)(a1 + 4));
  vDSP_svdiv(&GuidedMWF::mOne, *v9, 1, (float *)*v9, 1, *(unsigned int *)(a1 + 4));
  GuidedMWF::ApplyMaskOnMultiChannelVector((unsigned int *)a1, v9, a2, a5);
  vDSP_vsmul(*a4, 1, (const float *)(a1 + 8), (float *)*a4, 1, (2 * *(_DWORD *)(a1 + 40)));
  vDSP_vsmul(*a5, 1, (const float *)(a1 + 52), *(float **)(a1 + 256), 1, (2 * *(_DWORD *)(a1 + 36)));
  if (*(_DWORD *)a1)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = 0;
      v13 = *(_DWORD *)(a1 + 4) * v10;
      v14 = *(_QWORD *)(a1 + 256);
      v15 = (float *)(v14 + 4 * v13);
      v16 = (float *)(v14 + 4 * (*(_DWORD *)(a1 + 36) + v13));
      __B.realp = v15;
      __B.imagp = v16;
      do
      {
        __N = *(unsigned int *)(a1 + 4);
        v18 = *(_DWORD *)(a1 + 36);
        v19 = __N * v12 + v18 * v10;
        v20 = (float *)&(*a4)[v19 + *(_DWORD *)(a1 + 40)];
        __D.realp = (float *)&(*a4)[v19];
        __D.imagp = v20;
        v21 = *(_QWORD *)(a1 + 256);
        __A.realp = (float *)(v21 + 4 * __N * v12);
        __A.imagp = (float *)(v21 + 4 * (__N * v12 + v18));
        vDSP_zvcma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
        if (v12 < v10)
        {
          v22 = *(unsigned int *)(a1 + 4);
          v23 = *(_DWORD *)(a1 + 36) * v12 + v22 * v10;
          v24 = (float *)&(*a4)[v23 + *(_DWORD *)(a1 + 40)];
          memcpy((void *)&(*a4)[v23], __D.realp, 4 * v22);
          vDSP_vneg(__D.imagp, 1, v24, 1, *(unsigned int *)(a1 + 4));
        }
        ++v12;
      }
      while (v11 != v12);
      ++v10;
      ++v11;
    }
    while (v10 < *(_DWORD *)a1);
  }
}

void GuidedMWF::ApplyFilterFastVersion(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float *v8;
  float *v9;
  vDSP_Length __N;
  int v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  float *v15;
  void **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vDSP_Length v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  vDSP_Length v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  float *v43;
  float *v44;
  vDSP_Length v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  DSPSplitComplex __B;
  DSPSplitComplex __A;
  DSPSplitComplex __D;

  if (*(_DWORD *)(a1 + 28) > 1u)
  {
    v16 = *(void ***)(a1 + 520);
    memcpy(v16[22], *a2, 4 * *((unsigned int *)v16 + 2));
    memcpy(v16[25], (char *)*a2 + 4 * *((unsigned int *)v16 + 2), 4 * *((unsigned int *)v16 + 2));
    LODWORD(v17) = *(_DWORD *)v16;
    if (*(_DWORD *)v16)
    {
      v18 = 0;
      v19 = 1;
      v20 = 16;
      do
      {
        if (((*(_QWORD *)((char *)v16[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
        {
          ++v18;
        }
        else
        {
          v21 = *((unsigned int *)v16 + 1);
          v22 = *(_QWORD *)(a1 + 256);
          v23 = (float *)(v22 + 4 * (*((_DWORD *)v16 + 2) + v21 * v18));
          __D.realp = (float *)(v22 + 4 * (v21 * v18));
          __D.imagp = v23;
          vDSP_zrvdiv((const DSPSplitComplex *)v16[28] + v18, 1, *((const float **)v16[10] + 3 * v18), 1, &__D, 1, v21);
          v17 = *(unsigned int *)v16;
          v24 = v20;
          v25 = v19;
          if (v18 + 1 < v17)
          {
            do
            {
              if (((*(_QWORD *)((char *)v16[7] + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
              {
                vDSP_zvma((const DSPSplitComplex *)(*((_QWORD *)v16[19] + 3 * v18) + v24), 1, (const DSPSplitComplex *)v16[28] + v18, 1, (const DSPSplitComplex *)((char *)v16[28] + v24), 1, (const DSPSplitComplex *)((char *)v16[28] + v24), 1, *((unsigned int *)v16 + 1));
                LODWORD(v17) = *(_DWORD *)v16;
              }
              ++v25;
              v24 += 16;
            }
            while (v25 < v17);
          }
          ++v18;
        }
        ++v19;
        v20 += 16;
      }
      while (v18 < v17);
      v26 = (v17 - 1);
      if ((int)v17 - 1 >= 0)
      {
        v27 = v17 - 2;
        do
        {
          if (((*(_QWORD *)((char *)v16[7] + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          {
            v28 = *((_DWORD *)v16 + 1) * v17 - 1;
            v29 = *(_QWORD *)(a1 + 256);
            v30 = (float *)(v29 + 4 * v28);
            v31 = (float *)(v29 + 4 * (*((_DWORD *)v16 + 2) + v28));
            __D.realp = v30;
            __D.imagp = v31;
            if ((int)v17 - 2 >= 0)
            {
              v32 = 24 * v27;
              v33 = v27;
              do
              {
                if (((*(_QWORD *)((char *)v16[7] + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
                {
                  __A.realp = 0;
                  __A.imagp = 0;
                  v34 = *((unsigned int *)v16 + 1);
                  __A.realp = (float *)(*(_QWORD *)(*(_QWORD *)((char *)v16[13] + v32) + 24 * v26)
                                      + 4 * (v34 - 1));
                  __A.imagp = (float *)(*(_QWORD *)(*(_QWORD *)((char *)v16[16] + v32) + 24 * v26)
                                      + 4 * (v34 - 1));
                  v35 = v34 - 1 + v34 * v33;
                  v36 = *(_QWORD *)(a1 + 256);
                  v37 = *((_DWORD *)v16 + 2) + v35;
                  __B.realp = (float *)(v36 + 4 * v35);
                  __B.imagp = (float *)(v36 + 4 * v37);
                  vDSP_zvcma(&__A, -1, &__D, -1, &__B, -1, &__B, -1, v34);
                }
                v38 = v33--;
                v32 -= 24;
              }
              while (v38 > 0);
            }
          }
          LODWORD(v17) = v26;
          --v27;
        }
        while ((uint64_t)v26-- > 0);
      }
    }
  }
  else
  {
    vDSP_vclr(*(float **)(a1 + 256), 1, (2 * *(_DWORD *)(a1 + 36)));
    if (*(_DWORD *)a1)
    {
      v4 = 0;
      do
      {
        v5 = 0;
        v6 = *(_DWORD *)(a1 + 4) * v4;
        v7 = *(_QWORD *)(a1 + 256);
        v8 = (float *)(v7 + 4 * v6);
        v9 = (float *)(v7 + 4 * (*(_DWORD *)(a1 + 36) + v6));
        __D.realp = v8;
        __D.imagp = v9;
        do
        {
          __N = *(unsigned int *)(a1 + 4);
          v11 = *(_DWORD *)(a1 + 36);
          v12 = __N * v5 + v11 * v4;
          v13 = *(_QWORD *)(a1 + 88);
          v14 = (float *)(v13 + 4 * (v12 + *(_DWORD *)(a1 + 40)));
          __A.realp = (float *)(v13 + 4 * v12);
          __A.imagp = v14;
          v15 = (float *)((char *)*a2 + 4 * __N * v5 + 4 * v11);
          __B.realp = (float *)((char *)*a2 + 4 * __N * v5);
          __B.imagp = v15;
          vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
          ++v5;
        }
        while (v5 < *(_DWORD *)a1);
        ++v4;
      }
      while (v4 < *(_DWORD *)a1);
    }
  }
  if ((*(_DWORD *)(a1 + 28) - 1) <= 1)
    GuidedMWF::ApplyMaskOnMultiChannelVector((unsigned int *)a1, (const float **)(a1 + 112), (_QWORD *)(a1 + 256), (_QWORD *)(a1 + 256));
  vDSP_vclr((float *)*a2, 1, (2 * *(_DWORD *)(a1 + 36)));
  if (*(_DWORD *)a1)
  {
    v40 = 0;
    do
    {
      v41 = 0;
      v42 = *(_DWORD *)(a1 + 4) * v40;
      v43 = (float *)((char *)*a2 + 4 * v42);
      v44 = (float *)((char *)*a2 + 4 * *(_DWORD *)(a1 + 36) + 4 * v42);
      __D.realp = v43;
      __D.imagp = v44;
      do
      {
        v45 = *(unsigned int *)(a1 + 4);
        v46 = *(_DWORD *)(a1 + 36);
        v47 = v45 * v41 + v46 * v40;
        v48 = *(_QWORD *)(a1 + 352);
        v49 = (float *)(v48 + 4 * (v47 + *(_DWORD *)(a1 + 40)));
        __A.realp = (float *)(v48 + 4 * v47);
        __A.imagp = v49;
        v50 = *(_QWORD *)(a1 + 256);
        __B.realp = (float *)(v50 + 4 * v45 * v41);
        __B.imagp = (float *)(v50 + 4 * (v45 * v41 + v46));
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, v45);
        ++v41;
      }
      while (v41 < *(_DWORD *)a1);
      ++v40;
    }
    while (v40 < *(_DWORD *)a1);
  }
  GuidedMWF::ApplyMaskOnMultiChannelVector((unsigned int *)a1, (const float **)(a1 + 400), a2, a2);
}

void GuidedMWF::ApplyMaskOnMultiChannelVector(unsigned int *a1, const float **a2, _QWORD *a3, _QWORD *a4)
{
  unsigned int v8;

  if (*a1)
  {
    v8 = 0;
    do
    {
      vDSP_vmul(*a2, 1, (const float *)(*a3 + 4 * a1[1] * v8), 1, (float *)(*a4 + 4 * a1[1] * v8), 1, a1[1]);
      vDSP_vmul(*a2, 1, (const float *)(*a3 + 4 * (a1[9] + a1[1] * v8)), 1, (float *)(*a4 + 4 * (a1[9] + a1[1] * v8)), 1, a1[1]);
      ++v8;
    }
    while (v8 < *a1);
  }
}

void GuidedMWF::CopyBufferListToVector(unsigned int *a1, uint64_t a2, const float **a3, float a4)
{
  unint64_t v6;
  const void **v7;
  char *v8;
  float __B;

  __B = a4;
  if (*a1)
  {
    v6 = 0;
    v7 = (const void **)(a2 + 16);
    do
    {
      memcpy((void *)&(*a3)[a1[1] * v6], *v7, 4 * a1[1]);
      v8 = (char *)*v7;
      v7 += 2;
      memcpy((void *)&(*a3)[a1[9] + 1 + a1[1] * (_DWORD)v6++], &v8[4 * a1[1]], 4 * (a1[1] - 2));
    }
    while (v6 < *a1);
  }
  vDSP_vsmul(*a3, 1, &__B, (float *)*a3, 1, 2 * a1[9]);
}

void GuidedMWF::ApplyMaskOnBufferList(unsigned int *a1, const float **a2, uint64_t a3)
{
  unint64_t v5;
  float **v6;
  float *v7;

  if (*a1)
  {
    v5 = 0;
    v6 = (float **)(a3 + 16);
    do
    {
      v7 = *v6;
      v6 += 2;
      vDSP_vmul(*a2, 1, v7, 1, v7, 1, a1[1]);
      vDSP_vmul(*a2 + 1, 1, &v7[a1[1]], 1, &v7[a1[1]], 1, a1[1] - 2);
      ++v5;
    }
    while (v5 < *a1);
  }
}

void GuidedMWF::ProcessBufferList(GuidedMWF *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7)
{
  AudioBufferList *v10;
  const AudioBufferList *v12;
  unsigned int v14;
  unint64_t v16;
  void **p_mData;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  unint64_t v26;
  const void **v27;
  void **v28;
  void *v29;
  void *v30;
  const void *v31;
  unint64_t v32;
  unint64_t v34;
  void **v35;
  void **v36;
  void *v37;
  void *v38;
  void *v39;
  const void **v40;
  int v41;
  unsigned int v42;
  vDSP_Length v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  vDSP_Length v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  float *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  AudioBufferList *v89;
  uint64_t *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  float *v96;
  float *v97;
  vDSP_Length __N;
  int v99;
  unsigned int v100;
  uint64_t v101;
  float *v102;
  unsigned int v103;
  float *v104;
  float *v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *mData;
  float *v114;
  float *v115;
  float *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  float v125;
  uint64_t v126;
  AudioBufferList *v127;
  const AudioBufferList *v128;
  AudioBufferList *v129;
  const AudioBufferList *v130;
  DSPSplitComplex __B;
  DSPSplitComplex __C;
  DSPSplitComplex __A;
  DSPSplitComplex __D;

  v10 = a4;
  v12 = a2;
  v14 = *(_DWORD *)this;
  *((_DWORD *)this + 118) = *(_DWORD *)this;
  if (v14)
  {
    v16 = 0;
    p_mData = &a2->mBuffers[0].mData;
    v19 = 0.0;
    do
    {
      v20 = cblas_sdot(2 * *((_DWORD *)this + 1) - 2, (const float *)*p_mData, 1, (const float *)*p_mData, 1);
      v21 = *((_QWORD *)this + 60);
      v22 = *(_QWORD *)(v21 + 8 * (v16 >> 6));
      *(_QWORD *)(v21 + 8 * (v16 >> 6)) = v22 & ~(1 << v16);
      if (v20 == 0.0)
      {
        --*((_DWORD *)this + 118);
        *(_QWORD *)(v21 + 8 * (v16 >> 6)) = v22 | (1 << v16);
      }
      else
      {
        v19 = v19 + v20;
      }
      ++v16;
      p_mData += 2;
    }
    while (v16 < *(unsigned int *)this);
    v14 = *((_DWORD *)this + 118);
    if (v14)
      v23 = v19 / (float)v14;
    else
      v23 = 0.0;
    v10 = a4;
    v12 = a2;
  }
  else
  {
    v23 = 0.0;
  }
  v24 = *((_QWORD *)this + 65);
  if (v24)
  {
    *(_DWORD *)(v24 + 48) = v14;
    std::vector<BOOL>::operator=((void **)(v24 + 56), (uint64_t)this + 480);
  }
  if (v23 <= *((float *)this + 5) || (LODWORD(v23) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (*(_DWORD *)this)
    {
      v26 = 0;
      v27 = (const void **)&v12->mBuffers[0].mData;
      v28 = &v10->mBuffers[0].mData;
      do
      {
        v30 = *v28;
        v28 += 2;
        v29 = v30;
        v31 = *v27;
        v27 += 2;
        memcpy(v29, v31, 4 * (2 * *((_DWORD *)this + 1) - 2));
        ++v26;
        v32 = *(unsigned int *)this;
      }
      while (v26 < v32);
      if ((_DWORD)v32 && a6 != 0)
      {
        v34 = 0;
        v35 = &a3->mBuffers[0].mData;
        v36 = &a5->mBuffers[0].mData;
        do
        {
          v38 = *v36;
          v36 += 2;
          v37 = v38;
          v39 = *v35;
          v35 += 2;
          memcpy(v37, v39, 4 * (2 * *((_DWORD *)this + 1) - 2));
          ++v34;
        }
        while (v34 < *(unsigned int *)this);
      }
    }
    return;
  }
  GuidedMWF::CopyBufferListToVector((unsigned int *)this, (uint64_t)v12, (const float **)this + 17, *((float *)this + 14));
  v40 = (const void **)((char *)this + 160);
  GuidedMWF::CopyBufferListToVector((unsigned int *)this, (uint64_t)a3, (const float **)this + 20, *((float *)this + 14));
  if (!a7)
  {
    GuidedMWF::ApplyFilterFastVersion((uint64_t)this, (const void **)this + 17);
    goto LABEL_73;
  }
  v41 = *((_DWORD *)this + 6);
  v130 = a3;
  switch(v41)
  {
    case 2:
      memcpy(*((void **)this + 23), *((const void **)this + 20), 4 * (2 * *((_DWORD *)this + 9)));
      GuidedMWF::ApplyMaskOnMultiChannelVector((unsigned int *)this, (const float **)this + 38, (_QWORD *)this + 23, (_QWORD *)this + 23);
      break;
    case 1:
      if (*(_DWORD *)this)
      {
        v42 = 0;
        do
        {
          v43 = *((unsigned int *)this + 1);
          v44 = *((_QWORD *)this + 20);
          v45 = *((_DWORD *)this + 9) + v43 * v42;
          __D.realp = (float *)(v44 + 4 * v43 * v42);
          __D.imagp = (float *)(v44 + 4 * v45);
          v46 = *((_QWORD *)this + 17);
          __A.realp = (float *)(v46 + 4 * v43 * v42);
          __A.imagp = (float *)(v46 + 4 * v45);
          v47 = *((_QWORD *)this + 23);
          __C.realp = (float *)(v47 + 4 * v43 * v42);
          __C.imagp = (float *)(v47 + 4 * v45);
          vDSP_zvphas(&__A, 1, *((float **)this + 29), 1, v43);
          LODWORD(__B.realp) = *((_DWORD *)this + 1);
          vvsincosf(__C.imagp, __C.realp, *((const float **)this + 29), (const int *)&__B);
          vDSP_zvmags(&__D, 1, *((float **)this + 29), 1, *((unsigned int *)this + 1));
          vvsqrtf(*((float **)this + 29), *((const float **)this + 29), (const int *)&__B);
          vDSP_zrvmul(&__C, 1, *((const float **)this + 29), 1, &__C, 1, *((unsigned int *)this + 1));
          ++v42;
        }
        while (v42 < *(_DWORD *)this);
      }
      break;
    case 0:
      memcpy(*((void **)this + 23), *((const void **)this + 20), 4 * (2 * *((_DWORD *)this + 9)));
      break;
  }
  vDSP_vsub(*((const float **)this + 23), 1, *((const float **)this + 17), 1, *((float **)this + 26), 1, (2 * *((_DWORD *)this + 9)));
  GuidedMWF::UpdatePSD((uint64_t)this, (_QWORD *)this + 23, (float **)this + 50);
  GuidedMWF::UpdatePSD((uint64_t)this, (_QWORD *)this + 26, (float **)this + 53);
  GuidedMWF::UpdateSpatialCovariance((uint64_t)this, (_QWORD *)this + 23, *((const float **)this + 50), (const float **)this + 44, (const float **)this + 23);
  GuidedMWF::UpdateSpatialCovariance((uint64_t)this, (_QWORD *)this + 26, *((const float **)this + 53), (const float **)this + 47, (const float **)this + 26);
  v48 = *((_DWORD *)this + 7);
  if (v48 == 1)
  {
    v128 = v12;
    v129 = v10;
    v89 = a5;
    InverseWithHRLS::update(*((_QWORD *)this + 64), *((const void **)this + 23), *((float *)this + 2), 1.0 - *((float *)this + 2));
    InverseWithHRLS::update(*((_QWORD *)this + 64), *((const void **)this + 26), 1.0, *((float *)this + 12));
    v90 = (uint64_t *)*((_QWORD *)this + 64);
    v64 = (char *)(v90 + 3);
    vDSP_vclr((float *)v90[3], 1, (2 * *((_DWORD *)v90 + 51)));
    vDSP_vneg((const float *)(*v90 + 4 * *((unsigned int *)v90 + 51)), 1, (float *)v90[21], 1, *((unsigned int *)v90 + 51));
    if (*((_DWORD *)v90 + 48))
    {
      v91 = 0;
      do
      {
        v92 = 0;
        do
        {
          v93 = 0;
          v94 = *((_DWORD *)v90 + 52) * v91 + *((_DWORD *)v90 + 49) * v92;
          v95 = v90[3];
          v96 = (float *)(v95 + 4 * v94);
          v97 = (float *)(v95 + 4 * (v94 + *((_DWORD *)v90 + 51)));
          __D.realp = v96;
          __D.imagp = v97;
          do
          {
            __N = *((unsigned int *)v90 + 49);
            v99 = *((_DWORD *)v90 + 52);
            v100 = __N * v93 + v99 * v91;
            v101 = *v90;
            v102 = (float *)(*v90 + 4 * (v100 + *((_DWORD *)v90 + 51)));
            __A.realp = (float *)(*v90 + 4 * v100);
            __A.imagp = v102;
            v103 = __N * v93 + v99 * v92;
            v104 = (float *)(v101 + 4 * v103);
            v105 = (float *)(v90[21] + 4 * v103);
            __C.realp = v104;
            __C.imagp = v105;
            vDSP_zvma(&__C, 1, &__A, 1, &__D, 1, &__D, 1, __N);
            ++v93;
            v106 = *((_DWORD *)v90 + 48);
          }
          while (v93 < v106);
          ++v92;
        }
        while (v92 < v106);
        ++v91;
      }
      while (v91 < v106);
    }
    vDSP_vadd(*((const float **)this + 50), 1, *((const float **)this + 53), 1, *((float **)this + 29), 1, *((unsigned int *)this + 1));
    vDSP_vsadd(*((const float **)this + 29), 1, (const float *)this + 5, *((float **)this + 29), 1, *((unsigned int *)this + 1));
    LODWORD(__D.realp) = 0x40000000;
    vDSP_svdiv((const float *)&__D, *((const float **)this + 29), 1, *((float **)this + 14), 1, *((unsigned int *)this + 1));
    a5 = v89;
    goto LABEL_69;
  }
  if (v48)
  {
    InverseWithGramSchmidt::update_InvR(*((unsigned int **)this + 65), (const void **)this + 23, *((float *)this + 2), *((float *)this + 12));
    InverseWithGramSchmidt::update_InvR(*((unsigned int **)this + 65), (const void **)this + 26, 1.0, *((float *)this + 12));
    vDSP_vadd(*((const float **)this + 50), 1, *((const float **)this + 53), 1, *((float **)this + 29), 1, *((unsigned int *)this + 1));
    vDSP_vsadd(*((const float **)this + 29), 1, (const float *)this + 5, *((float **)this + 29), 1, *((unsigned int *)this + 1));
    LODWORD(__D.realp) = 0x40000000;
    vDSP_svdiv((const float *)&__D, *((const float **)this + 29), 1, *((float **)this + 14), 1, *((unsigned int *)this + 1));
    v64 = (char *)this + 88;
    goto LABEL_72;
  }
  v128 = v12;
  v129 = v10;
  vDSP_vclr(*((float **)this + 32), 1, (2 * *((_DWORD *)this + 9)));
  vDSP_vclr(*((float **)this + 35), 1, (2 * *((_DWORD *)this + 10)));
  if (*(_DWORD *)this)
  {
    v49 = 0;
    v50 = 1;
    do
    {
      v51 = 0;
      do
      {
        v52 = *((unsigned int *)this + 9);
        v53 = *((unsigned int *)this + 1);
        v54 = v52 * v49 + v53 * v51;
        v55 = *((_QWORD *)this + 35);
        v56 = v54 + *((_DWORD *)this + 10);
        __D.realp = (float *)(v55 + 4 * v54);
        __D.imagp = (float *)(v55 + 4 * v56);
        v57 = *((_QWORD *)this + 44);
        __A.realp = (float *)(v57 + 4 * v54);
        __A.imagp = (float *)(v57 + 4 * v56);
        v58 = *((_QWORD *)this + 47);
        __C.realp = (float *)(v58 + 4 * v54);
        __C.imagp = (float *)(v58 + 4 * v56);
        v59 = (float *)(*((_QWORD *)this + 32) + 4 * v52);
        __B.realp = (float *)*((_QWORD *)this + 32);
        __B.imagp = v59;
        vDSP_zrvmul(&__A, 1, *((const float **)this + 50), 1, &__D, 1, v53);
        vDSP_zrvmul(&__C, 1, *((const float **)this + 53), 1, &__B, 1, *((unsigned int *)this + 1));
        vDSP_zvadd(&__D, 1, &__B, 1, &__D, 1, *((unsigned int *)this + 1));
        if (v51 < v49)
        {
          v60 = *((unsigned int *)this + 1);
          v61 = *((_DWORD *)this + 9) * v51 + v60 * v49;
          v62 = *((_QWORD *)this + 35);
          v63 = (float *)(v62 + 4 * (v61 + *((_DWORD *)this + 10)));
          memcpy((void *)(v62 + 4 * v61), __D.realp, 4 * v60);
          vDSP_vneg(__D.imagp, 1, v63, 1, *((unsigned int *)this + 1));
        }
        ++v51;
      }
      while (v50 != v51);
      ++v49;
      ++v50;
    }
    while (v49 < *(_DWORD *)this);
  }
  v64 = (char *)*((_QWORD *)this + 63);
  vDSP_vclr(*(float **)v64, 1, (2 * *((_DWORD *)v64 + 9)));
  LODWORD(v65) = *((_DWORD *)v64 + 7);
  if ((_DWORD)v65)
  {
    v127 = a5;
    v66 = 0;
    v67 = *((_QWORD *)v64 + 75);
    v68 = v67 + 4 * ((*((_QWORD *)v64 + 76) - v67) >> 3);
    v69 = *((_QWORD *)v64 + 80);
    v70 = v69 + 4 * ((*((_QWORD *)v64 + 81) - v69) >> 3);
    v71 = *((unsigned int *)v64 + 6);
    do
    {
      if (v71)
      {
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = *((_DWORD *)v64 + 8);
        v76 = *((_DWORD *)v64 + 9);
        v77 = *((_QWORD *)this + 35) + 4 * v66;
        do
        {
          v78 = 0;
          v79 = v72;
          do
          {
            v80 = v73 + v78;
            *(_DWORD *)(v67 + 4 * v80) = *(_DWORD *)(v77 + 4 * v79);
            *(_DWORD *)(v68 + 4 * v80) = *(_DWORD *)(v77 + 4 * (v76 + v79));
            ++v78;
            v79 += v65;
          }
          while (v71 != v78);
          ++v74;
          v73 += v71;
          v72 += v75;
        }
        while (v74 != (_DWORD)v71);
      }
      MoorePenrose::pseudoInverse((MoorePenrose *)(v64 + 40), (CLiteMatrix *)(v64 + 624), (const CLiteMatrix *)(v64 + 584));
      v71 = *((unsigned int *)v64 + 6);
      v65 = *((unsigned int *)v64 + 7);
      if ((_DWORD)v71)
      {
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = *((_DWORD *)v64 + 8);
        v85 = *((_DWORD *)v64 + 9);
        v86 = *(_QWORD *)v64 + 4 * v66;
        do
        {
          v87 = 0;
          v88 = v81;
          do
          {
            *(_DWORD *)(v86 + 4 * v88) = *(_DWORD *)(v69 + 4 * (v82 + v87));
            *(_DWORD *)(v86 + 4 * (v85 + v88)) = *(_DWORD *)(v70 + 4 * (v82 + v87++));
            v88 += v65;
          }
          while (v71 != v87);
          ++v83;
          v82 += v71;
          v81 += v84;
        }
        while (v83 != (_DWORD)v71);
      }
      ++v66;
    }
    while (v66 < v65);
    a5 = v127;
LABEL_69:
    a3 = v130;
  }
  v12 = v128;
  v10 = v129;
LABEL_72:
  memcpy(*((void **)this + 11), *(const void **)v64, 4 * (2 * *((_DWORD *)this + 10)));
  GuidedMWF::ApplyFilterFastVersion((uint64_t)this, (const void **)this + 17);
  v40 = (const void **)((char *)this + 160);
LABEL_73:
  vDSP_vsmul(*((const float **)this + 17), 1, (const float *)this + 15, *((float **)this + 17), 1, (2 * *((_DWORD *)this + 9)));
  if (a6)
  {
    GuidedMWF::ApplyFilterFastVersion((uint64_t)this, v40);
    vDSP_vsmul(*((const float **)this + 20), 1, (const float *)this + 15, *((float **)this + 20), 1, (2 * *((_DWORD *)this + 9)));
  }
  v107 = *(unsigned int *)this;
  if ((_DWORD)v107)
  {
    v108 = 0;
    v109 = 0;
    v110 = *((unsigned int *)this + 1);
    v111 = (v110 - 1);
    while (!(_DWORD)v110)
    {
LABEL_94:
      ++v109;
      v108 += v110;
      if (v109 == v107)
        goto LABEL_95;
    }
    v112 = 0;
    mData = (float *)v12->mBuffers[v109].mData;
    v114 = (float *)a3->mBuffers[v109].mData;
    v115 = (float *)v10->mBuffers[v109].mData;
    v116 = (float *)a5->mBuffers[v109].mData;
    while (1)
    {
      v117 = v108 + v112;
      if (!v112 || v111 == v112)
      {
        v124 = *(float *)(*((_QWORD *)this + 17) + 4 * v117);
        v125 = mData[v112];
        if ((float)(v124 * v124) <= (float)(v125 * v125))
        {
          v115[v112] = (float)(v125 * *((float *)this + 3)) + (float)((float)(1.0 - *((float *)this + 3)) * v124);
          if (a6)
          {
            v123 = (float)(*((float *)this + 3) * v114[v112])
                 + (float)((float)(1.0 - *((float *)this + 3))
                         * *(float *)(*((_QWORD *)this + 20) + 4 * (v108 + v112)));
LABEL_91:
            v118 = v112;
LABEL_92:
            v116[v118] = v123;
          }
        }
        else
        {
          v115[v112] = v125;
          if (a6)
          {
            v123 = v114[v112];
            goto LABEL_91;
          }
        }
      }
      else
      {
        v118 = (v111 + v112);
        v119 = *((_QWORD *)this + 17);
        v120 = *(float *)(v119 + 4 * v117);
        v121 = (v108 + v112 + *((_DWORD *)this + 9));
        v122 = mData[v112];
        if ((float)((float)(*(float *)(v119 + 4 * v121) * *(float *)(v119 + 4 * v121))
                   + (float)(v120 * v120)) <= (float)((float)(mData[v118] * mData[v118])
                                                    + (float)(v122 * v122)))
        {
          v115[v112] = (float)(v122 * *((float *)this + 3)) + (float)((float)(1.0 - *((float *)this + 3)) * v120);
          v115[v118] = (float)(*((float *)this + 3) * mData[v118])
                     + (float)((float)(1.0 - *((float *)this + 3)) * *(float *)(v119 + 4 * v121));
          if (a6)
          {
            v126 = *((_QWORD *)this + 20);
            v116[v112] = (float)(*((float *)this + 3) * v114[v112])
                       + (float)((float)(1.0 - *((float *)this + 3))
                               * *(float *)(v126 + 4 * (v108 + v112)));
            v123 = (float)(*((float *)this + 3) * v114[v118])
                 + (float)((float)(1.0 - *((float *)this + 3)) * *(float *)(v126 + 4 * v121));
            goto LABEL_92;
          }
        }
        else
        {
          v115[v112] = v122;
          v115[v118] = mData[v118];
          if (a6)
          {
            v116[v112] = v114[v112];
            v123 = v114[v118];
            goto LABEL_92;
          }
        }
      }
      if (v110 == ++v112)
        goto LABEL_94;
    }
  }
LABEL_95:
  GuidedMWF::ApplyMaskOnBufferList((unsigned int *)this, (const float **)this + 41, (uint64_t)v10);
  if (a6)
    GuidedMWF::ApplyMaskOnBufferList((unsigned int *)this, (const float **)this + 41, (uint64_t)a5);
}

void PListReader::GetSerializedFloat32DataFromDict(_QWORD *a1, CFDictionaryRef theDict, void *key)
{
  void *__p;
  void *v4;
  uint64_t v5;
  int v6;

  v6 = 0;
  __p = 0;
  v4 = 0;
  v5 = 0;
  PListReader::GetSerializedFloat32DataFromDict(a1, &v6, (unint64_t)&__p, theDict, key);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1B651A558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PListReader::GetSerializedFloat32DataFromDict(_QWORD *a1, _DWORD *a2, unint64_t a3, CFDictionaryRef theDict, void *key)
{
  const __CFData *Value;
  unsigned int *BytePtr;
  unsigned int *v10;
  std::vector<unsigned int>::size_type v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;

  Value = (const __CFData *)CFDictionaryGetValue(theDict, key);
  BytePtr = (unsigned int *)CFDataGetBytePtr(Value);
  v10 = BytePtr + 1;
  v11 = bswap32(*BytePtr);
  *a2 = v11;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)a3, v11);
  if (!*a2)
  {
    a3 = 1;
    std::vector<float>::resize((uint64_t)a1, 1uLL);
LABEL_7:
    v16 = (_DWORD *)*a1;
    do
    {
      v17 = *v10++;
      *v16++ = bswap32(v17);
      --a3;
    }
    while (a3);
    return;
  }
  v12 = 0;
  v13 = *(_QWORD *)a3;
  LODWORD(a3) = 1;
  do
  {
    v14 = *v10++;
    v15 = bswap32(v14);
    *(_DWORD *)(v13 + 4 * v12) = v15;
    a3 = v15 * a3;
    ++v12;
  }
  while (v12 < *a2);
  std::vector<float>::resize((uint64_t)a1, a3);
  if ((_DWORD)a3)
    goto LABEL_7;
}

void NeuralNetLoader<FullyConnectedLayerBNNS<signed char>>::loadLayers(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  unint64_t i;
  std::string *v6;
  __int128 v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  const void *Value;
  const void *v12;
  NSObject **v13;
  NSObject *v14;
  __int128 *v15;
  const void *v16;
  const void *v17;
  NSObject **v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  const void *v27;
  NSObject **v28;
  NSObject *v29;
  const __CFString *v30;
  void **v31;
  int v32;
  const __CFString *v33;
  char v34;
  int v35;
  const __CFString *v36;
  char v37;
  const __CFString *v38;
  char v39;
  const __CFString *v40;
  BOOL v41;
  NSObject **v42;
  NSObject *v43;
  const void *v44;
  const void *v45;
  NSObject **v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  unint64_t v50;
  const void *v51;
  const void *v52;
  NSObject **v53;
  NSObject *v54;
  const __CFString *v55;
  void **v56;
  const __CFString *v57;
  _BOOL4 v58;
  NSObject **v59;
  NSObject *v60;
  NSObject **v61;
  NSObject *v62;
  const void *v63;
  const void *v64;
  NSObject **v65;
  NSObject *v66;
  NSObject **v67;
  NSObject *v68;
  const void *v69;
  const void *v70;
  NSObject **v71;
  NSObject *v72;
  const __CFString *v73;
  void **v74;
  const __CFString *v75;
  char v76;
  int v77;
  const __CFString *v78;
  BOOL v79;
  const __CFDictionary *v80;
  const __CFDictionary *v81;
  NSObject **v82;
  NSObject *v83;
  uint64_t **v84;
  uint64_t v85;
  const __CFData *v86;
  const __CFData *v87;
  _BYTE **v88;
  unint64_t Length;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  size_t v93;
  _QWORD *v94;
  _BYTE *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  BOOL v102;
  unint64_t v103;
  _BYTE *v104;
  unint64_t v105;
  const UInt8 *BytePtr;
  uint64_t j;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::string::size_type v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_log_t v124;
  double v125;
  NSObject *v126;
  const char *v127;
  uint32_t v128;
  uint64_t v129;
  os_log_t v130;
  int v131;
  uint64_t v132;
  os_log_t v133;
  int v134;
  uint64_t v135;
  os_log_t v136;
  int v137;
  unint64_t v138;
  const __CFString *v139;
  const __CFString *v140;
  NSObject **v141;
  NSObject *v142;
  const __CFString *v143;
  void **v144;
  int v145;
  const __CFString *v146;
  char v147;
  int v148;
  const __CFString *v149;
  char v150;
  const __CFString *v151;
  char v152;
  const __CFString *v153;
  BOOL v154;
  NSObject **v155;
  NSObject *v156;
  NSObject **v157;
  NSObject *v158;
  const void *v159;
  const void *v160;
  NSObject **v161;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t k;
  uint64_t v169;
  NSObject *v170;
  double v171;
  unint64_t v172;
  const void *v173;
  const void *v174;
  NSObject **v175;
  NSObject *v176;
  const __CFString *v177;
  void **v178;
  const __CFString *v179;
  _BOOL4 v180;
  NSObject **v181;
  NSObject *v182;
  NSObject **v183;
  NSObject *v184;
  const void *v185;
  const void *v186;
  NSObject **v187;
  NSObject *v188;
  const void *v189;
  const void *v190;
  NSObject **v191;
  NSObject *v192;
  const __CFString *v193;
  void **v194;
  const __CFString *v195;
  char v196;
  int v197;
  const __CFString *v198;
  char v199;
  const __CFString *v200;
  char v201;
  const __CFString *v202;
  BOOL v203;
  const __CFString *v204;
  BOOL v205;
  const __CFString *v206;
  BOOL v207;
  const __CFString *v208;
  BOOL v209;
  const __CFString *v210;
  BOOL v211;
  NSObject **v212;
  NSObject *v213;
  NSObject **v214;
  NSObject *v215;
  NSObject **v216;
  NSObject *v217;
  NSObject **v218;
  NSObject *v219;
  NSObject **v220;
  NSObject *v221;
  NSObject **v222;
  NSObject *v223;
  NSObject **v224;
  NSObject *v225;
  NSObject **v226;
  NSObject *v227;
  NSObject **v228;
  NSObject *v229;
  NSObject **v230;
  NSObject *v231;
  NSObject **v232;
  NSObject *v233;
  NSObject **v234;
  NSObject *v235;
  NSObject **v236;
  NSObject *v237;
  NSObject **v238;
  NSObject *v239;
  NSObject **v240;
  NSObject *v241;
  NSObject **v242;
  NSObject *v243;
  _DWORD *v244;
  _DWORD *v245;
  _DWORD *v246;
  _DWORD *v247;
  _DWORD *v248;
  _DWORD *v249;
  _DWORD *v250;
  _DWORD *v251;
  _DWORD *v252;
  _DWORD *v253;
  _DWORD *v254;
  _DWORD *v255;
  _DWORD *v256;
  _DWORD *v257;
  NSObject **v258;
  NSObject *v259;
  _DWORD *v260;
  NSObject *v261;
  NSObject **v262;
  _DWORD *v263;
  NSObject *v264;
  NSObject **v265;
  __int128 *v266;
  _DWORD *v267;
  std::runtime_error *exception;
  NSObject *v269;
  NSObject **v270;
  _DWORD *v271;
  NSObject *v272;
  NSObject **v273;
  _DWORD *v274;
  NSObject *v275;
  NSObject **v276;
  _DWORD *v277;
  NSObject **v278;
  NSObject *v279;
  NSObject *v280;
  NSObject **v281;
  _DWORD *v282;
  NSObject **v283;
  NSObject *v284;
  NSObject *v285;
  NSObject **v286;
  _DWORD *v287;
  NSObject *v288;
  NSObject **v289;
  _DWORD *v290;
  NSObject **v291;
  NSObject *v292;
  NSObject *v293;
  NSObject **v294;
  _DWORD *v295;
  NSObject *v296;
  NSObject **v297;
  _DWORD *v298;
  NSObject *v299;
  NSObject **v300;
  _DWORD *v301;
  NSObject **v302;
  NSObject *v303;
  NSObject **v304;
  NSObject *v305;
  NSObject *v306;
  NSObject **v307;
  _DWORD *v308;
  _DWORD *v309;
  const char *CStringPtr;
  NSObject **v311;
  NSObject *v312;
  _DWORD *v313;
  int v314;
  _DWORD *v315;
  int v316;
  _DWORD *v317;
  _DWORD *v318;
  NSObject **v319;
  NSObject *v320;
  _DWORD *v321;
  NSObject **v322;
  NSObject *v323;
  _DWORD *v324;
  CFStringRef v326;
  int v327;
  void *v328[2];
  char v329;
  CFTypeRef v330;
  void *v331[2];
  char v332;
  CFTypeRef v333;
  void *v334[2];
  char v335;
  CFTypeRef v336;
  void *__p[2];
  char v338;
  CFTypeRef cf;
  void *v340[2];
  char v341;
  CFStringRef v342;
  void *v343[2];
  char v344;
  void *v345[2];
  char v346;
  const __CFString *v347;
  void *v348[2];
  char v349;
  void *v350[2];
  char v351;
  const __CFString *v352;
  void *v353[2];
  char v354;
  void *v355[2];
  char v356;
  const __CFString *v357;
  const __CFString *v358;
  const void *v359;
  const __CFDictionary *v360;
  const void *v361;
  int v362;
  int v363;
  void *v364[2];
  char v365;
  CFStringRef v366;
  const __CFString *v367;
  const void *v368;
  const __CFDictionary *v369;
  const void *v370;
  int v371;
  int v372;
  void *v373[2];
  char v374;
  CFStringRef v375;
  void *v376[2];
  char v377;
  void *v378[2];
  char v379;
  const __CFString *v380;
  void *v381[2];
  char v382;
  void *v383[2];
  char v384;
  const __CFString *v385;
  void *v386[2];
  char v387;
  void *v388[2];
  char v389;
  const __CFString *v390;
  const __CFString *v391;
  void *v392[2];
  char v393;
  CFStringRef v394;
  void *v395[2];
  char v396;
  void *v397[2];
  char v398;
  const __CFString *v399;
  const __CFString *v400;
  const void *v401;
  const __CFDictionary *v402;
  const void *v403;
  int v404;
  int v405;
  void *v406[2];
  char v407;
  CFStringRef v408;
  const __CFString *v409;
  const void *v410;
  unsigned int v411;
  const __CFDictionary *v412;
  const void *v413;
  int v414;
  int v415;
  void *v416[2];
  char v417;
  CFStringRef v418;
  void *v419[2];
  char v420;
  void *v421[2];
  char v422;
  const __CFString *v423;
  void *v424[2];
  char v425;
  void *v426[2];
  char v427;
  const __CFString *v428;
  void *v429[2];
  char v430;
  void *v431[2];
  char v432;
  const __CFString *v433;
  void *v434[2];
  char v435;
  const __CFString *v436;
  const void *v437;
  unsigned int v438;
  const __CFDictionary *v439;
  const void *v440;
  const __CFDictionary *v441;
  const void *v442;
  __int128 v443;
  int64_t v444;
  _BYTE v445[12];
  __int16 v446;
  int v447;
  __int16 v448;
  std::string v449;
  uint64_t v450;

  v450 = *MEMORY[0x1E0C80C00];
  if (a3[1] != *a3)
  {
    for (i = 0; i < 0x1B810ECF56BE69C9 * ((a3[1] - *a3) >> 3); ++i)
    {
      std::to_string((std::string *)v445, i);
      v6 = std::string::insert((std::string *)v445, 0, "Layer", 5uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v444 = v6->__r_.__value_.__r.__words[2];
      v443 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v449.__r_.__value_.__s.__data_[3] < 0)
        operator delete(*(void **)v445);
      if (v444 >= 0)
        v8 = (const UInt8 *)&v443;
      else
        v8 = (const UInt8 *)v443;
      if (v444 >= 0)
        v9 = HIBYTE(v444);
      else
        v9 = *((_QWORD *)&v443 + 1);
      v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      Value = CFDictionaryGetValue(a2, v10);
      v12 = Value;
      v326 = v10;
      if (!Value)
      {
        v264 = 0;
        v442 = 0;
        v265 = *(NSObject ***)(a1 + 16);
        if (v265)
          v264 = *v265;
        if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
        {
          v266 = &v443;
          if (v444 < 0)
            v266 = (__int128 *)v443;
          *(_DWORD *)v445 = 136315906;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 60;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          WORD2(v449.__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 6) = (std::string::size_type)v266;
          _os_log_impl(&dword_1B5ED0000, v264, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [topLevelDict_ref.get_cf() == nullptr is false]: \"Missing dictionary: %s\"", v445, 0x22u);
        }
        v267 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v267 = &off_1E69EE218;
        v267[2] = -66741;
      }
      CFRetain(Value);
      v442 = v12;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v442, (applesauce::CF::DictionaryRef *)&v441);
      v13 = *(NSObject ***)(a1 + 16);
      if (v13)
      {
        v14 = *v13;
        if (!*v13)
          goto LABEL_21;
      }
      else
      {
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = &v443;
        if (v444 < 0)
          v15 = (__int128 *)v443;
        *(_DWORD *)v445 = 136315650;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 64;
        v448 = 2080;
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", v445, 0x1Cu);
      }
LABEL_21:
      v16 = CFDictionaryGetValue(v441, CFSTR("InputVectorDescriptor"));
      v17 = v16;
      if (!v16)
      {
        v261 = 0;
        v440 = 0;
        v262 = *(NSObject ***)(a1 + 16);
        if (v262)
          v261 = *v262;
        if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 75;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v261, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary InputVectorDescriptor.\"", v445, 0x18u);
        }
        v263 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v263 = &off_1E69EE218;
        v263[2] = -66741;
      }
      CFRetain(v16);
      v440 = v17;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v440, (applesauce::CF::DictionaryRef *)&v439);
      v18 = *(NSObject ***)(a1 + 16);
      if (v18)
      {
        v19 = *v18;
        if (!*v18)
        {
          v438 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 79;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary InputVectorDescriptor.", v445, 0x12u);
        v18 = *(NSObject ***)(a1 + 16);
      }
      v438 = 0;
      if (v18)
      {
        v20 = *v18;
        if (!*v18)
          goto LABEL_34;
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 83;
        _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v445, 0x12u);
      }
LABEL_34:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v439, CFSTR("Size"), &v438))
      {
        v216 = *(NSObject ***)(a1 + 16);
        if (v216)
          v217 = *v216;
        else
          v217 = 0;
        if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 86;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v217, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary InputVectorDescriptor.\"", v445, 0x18u);
        }
        v244 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v244 = &off_1E69EE218;
        v244[2] = -66741;
      }
      v21 = *a3 + 968 * i;
      *(_DWORD *)(v21 + 4) = 0x10000;
      v22 = v438;
      *(_QWORD *)(v21 + 8) = v438;
      *(_QWORD *)(v21 + 72) = 1;
      *(_DWORD *)v445 = 0;
      std::vector<float>::resize(v21 + 792, v22, v445);
      v23 = *a3 + 968 * i;
      v445[0] = 0;
      v24 = *(_QWORD *)(v23 + 912);
      v25 = *(_QWORD *)(v23 + 920) - v24;
      if (v438 <= v25)
      {
        if (v438 < v25)
          *(_QWORD *)(v23 + 920) = v24 + v438;
      }
      else
      {
        std::vector<signed char>::__append((_QWORD *)(v23 + 912), v438 - v25, v445);
      }
      v26 = CFDictionaryGetValue(v439, CFSTR("DataType"));
      v27 = v26;
      if (!v26)
      {
        v269 = 0;
        v437 = 0;
        v270 = *(NSObject ***)(a1 + 16);
        if (v270)
          v269 = *v270;
        if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 98;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v269, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType.\"", v445, 0x18u);
        }
        v271 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v271 = &off_1E69EE218;
        v271[2] = -66741;
      }
      CFRetain(v26);
      v437 = v27;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v437, (applesauce::CF::StringRef *)&v436);
      v28 = *(NSObject ***)(a1 + 16);
      if (v28)
      {
        v29 = *v28;
        if (!*v28)
          goto LABEL_51;
      }
      else
      {
        v29 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v30 = CFCopyDescription(v436);
        applesauce::CF::details::CFString_get_value<true>(v30, (uint64_t)v434);
        if (v30)
          CFRelease(v30);
        v31 = v434;
        if (v435 < 0)
          v31 = (void **)v434[0];
        *(_DWORD *)v445 = 136315906;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 102;
        v448 = 2080;
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input data type (%s) for Layer %zu.", v445, 0x26u);
        if (v435 < 0)
          operator delete(v434[0]);
      }
LABEL_51:
      v32 = *(_DWORD *)(a1 + 8);
      if (v32 != 8)
        goto LABEL_63;
      v33 = v436;
      if (v436)
        CFRetain(v436);
      v433 = v33;
      std::string::basic_string[abi:ne180100]<0>(v431, "int8");
      std::string::basic_string[abi:ne180100]<0>(v429, "Sint8");
      v34 = matchiEither((CFTypeRef *)&v433, (uint64_t)v431, (uint64_t)v429);
      if (v430 < 0)
        operator delete(v429[0]);
      if ((v432 & 0x80000000) == 0)
      {
        if (!v33)
          goto LABEL_61;
LABEL_60:
        CFRelease(v33);
        goto LABEL_61;
      }
      operator delete(v431[0]);
      if (v33)
        goto LABEL_60;
LABEL_61:
      v35 = 131080;
      if ((v34 & 1) != 0)
        goto LABEL_98;
      v32 = *(_DWORD *)(a1 + 8);
LABEL_63:
      if (v32 != 16)
        goto LABEL_76;
      v36 = v436;
      if (v436)
        CFRetain(v436);
      v428 = v36;
      std::string::basic_string[abi:ne180100]<0>(v426, "int16");
      std::string::basic_string[abi:ne180100]<0>(v424, "SInt16");
      v37 = matchiEither((CFTypeRef *)&v428, (uint64_t)v426, (uint64_t)v424);
      if (v425 < 0)
        operator delete(v424[0]);
      if ((v427 & 0x80000000) == 0)
      {
        if (!v36)
          goto LABEL_73;
LABEL_72:
        CFRelease(v36);
        goto LABEL_73;
      }
      operator delete(v426[0]);
      if (v36)
        goto LABEL_72;
LABEL_73:
      if ((v37 & 1) != 0)
      {
        v35 = 131088;
        goto LABEL_98;
      }
      v32 = *(_DWORD *)(a1 + 8);
LABEL_76:
      if (v32 != 32)
        goto LABEL_89;
      v38 = v436;
      if (v436)
        CFRetain(v436);
      v423 = v38;
      std::string::basic_string[abi:ne180100]<0>(v421, "int32");
      std::string::basic_string[abi:ne180100]<0>(v419, "Sint32");
      v39 = matchiEither((CFTypeRef *)&v423, (uint64_t)v421, (uint64_t)v419);
      if (v420 < 0)
        operator delete(v419[0]);
      if ((v422 & 0x80000000) == 0)
      {
        if (!v38)
          goto LABEL_86;
LABEL_85:
        CFRelease(v38);
        goto LABEL_86;
      }
      operator delete(v421[0]);
      if (v38)
        goto LABEL_85;
LABEL_86:
      if ((v39 & 1) != 0)
      {
        v35 = 131104;
        goto LABEL_98;
      }
      v32 = *(_DWORD *)(a1 + 8);
LABEL_89:
      if (v32)
        goto LABEL_702;
      v40 = v436;
      if (v436)
        CFRetain(v436);
      v418 = v40;
      std::string::basic_string[abi:ne180100]<0>(v416, "float32");
      v41 = matchiString(&v418, (const UInt8 *)v416);
      if (v417 < 0)
      {
        operator delete(v416[0]);
        if (!v40)
          goto LABEL_97;
LABEL_96:
        CFRelease(v40);
        goto LABEL_97;
      }
      if (v40)
        goto LABEL_96;
LABEL_97:
      v35 = 65568;
      if (!v41)
      {
LABEL_702:
        v302 = *(NSObject ***)(a1 + 16);
        if (v302)
          v303 = *v302;
        else
          v303 = 0;
        if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
        {
          v314 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v445 = 136315906;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 124;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
          WORD2(v449.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v449.__r_.__value_.__r.__words + 6) = v314;
          _os_log_impl(&dword_1B5ED0000, v303, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported input data quantization type for Quantization (%u).\"", v445, 0x1Eu);
        }
        v315 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v315 = &off_1E69EE218;
        v315[2] = -66743;
      }
LABEL_98:
      *(_DWORD *)(*a3 + 968 * i + 144) = v35;
      v415 = 1065353216;
      v42 = *(NSObject ***)(a1 + 16);
      if (v42)
      {
        v43 = *v42;
        if (!*v42)
          goto LABEL_104;
      }
      else
      {
        v43 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 129;
        _os_log_impl(&dword_1B5ED0000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v445, 0x12u);
      }
LABEL_104:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v439, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v415))
      {
        v218 = *(NSObject ***)(a1 + 16);
        if (v218)
          v219 = *v218;
        else
          v219 = 0;
        if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 132;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary InputVectorDescriptor.\"", v445, 0x18u);
        }
        v245 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v245 = &off_1E69EE218;
        v245[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 164) = v415;
      v414 = 0;
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v439, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v414))
      {
        v220 = *(NSObject ***)(a1 + 16);
        if (v220)
          v221 = *v220;
        else
          v221 = 0;
        if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 140;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v221, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary InputVectorDescriptor.\"", v445, 0x18u);
        }
        v246 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v246 = &off_1E69EE218;
        v246[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 168) = v414;
      v44 = CFDictionaryGetValue(v441, CFSTR("OutputVectorDescriptor"));
      v45 = v44;
      if (!v44)
      {
        v272 = 0;
        v413 = 0;
        v273 = *(NSObject ***)(a1 + 16);
        if (v273)
          v272 = *v273;
        if (os_log_type_enabled(v272, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 153;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v272, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary OutputVectorDescriptor.\"", v445, 0x18u);
        }
        v274 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v274 = &off_1E69EE218;
        v274[2] = -66741;
      }
      CFRetain(v44);
      v413 = v45;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v413, (applesauce::CF::DictionaryRef *)&v412);
      v46 = *(NSObject ***)(a1 + 16);
      if (v46)
      {
        v47 = *v46;
        if (!*v46)
        {
          v411 = 0;
          goto LABEL_119;
        }
      }
      else
      {
        v47 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 157;
        _os_log_impl(&dword_1B5ED0000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary OutputVectorDescriptor.", v445, 0x12u);
        v46 = *(NSObject ***)(a1 + 16);
      }
      v411 = 0;
      if (v46)
      {
        v48 = *v46;
        if (!*v46)
          goto LABEL_119;
      }
      else
      {
        v48 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 161;
        _os_log_impl(&dword_1B5ED0000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v445, 0x12u);
      }
LABEL_119:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v412, CFSTR("Size"), &v411))
      {
        v222 = *(NSObject ***)(a1 + 16);
        if (v222)
          v223 = *v222;
        else
          v223 = 0;
        if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 164;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary OutputVectorDescriptor.\"", v445, 0x18u);
        }
        v247 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v247 = &off_1E69EE218;
        v247[2] = -66741;
      }
      v49 = *a3 + 968 * i;
      *(_DWORD *)(v49 + 356) = 0x10000;
      v50 = v411;
      *(_QWORD *)(v49 + 360) = v411;
      *(_QWORD *)(v49 + 424) = 1;
      *(_DWORD *)v445 = 0;
      std::vector<float>::resize(v49 + 816, v50, v445);
      v51 = CFDictionaryGetValue(v412, CFSTR("DataType"));
      v52 = v51;
      if (!v51)
      {
        v275 = 0;
        v410 = 0;
        v276 = *(NSObject ***)(a1 + 16);
        if (v276)
          v275 = *v276;
        if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 176;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v275, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDataType_ref.get_cf() == nullptr is false]: \"Failed to retrieve output data type (DataType) from dictionary OutputVectorDescriptor.\"", v445, 0x18u);
        }
        v277 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v277 = &off_1E69EE218;
        v277[2] = -66741;
      }
      CFRetain(v51);
      v410 = v52;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v410, (applesauce::CF::StringRef *)&v409);
      v53 = *(NSObject ***)(a1 + 16);
      if (v53)
      {
        v54 = *v53;
        if (!*v53)
          goto LABEL_132;
      }
      else
      {
        v54 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        v55 = CFCopyDescription(v409);
        applesauce::CF::details::CFString_get_value<true>(v55, (uint64_t)v434);
        if (v55)
          CFRelease(v55);
        v56 = v434;
        if (v435 < 0)
          v56 = (void **)v434[0];
        *(_DWORD *)v445 = 136315906;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 179;
        v448 = 2080;
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        LOWORD(v449.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output data type (%s) for Layer %u.", v445, 0x22u);
        if (v435 < 0)
          operator delete(v434[0]);
      }
LABEL_132:
      v57 = v409;
      if (v409)
        CFRetain(v409);
      v408 = v57;
      std::string::basic_string[abi:ne180100]<0>(v406, "float32");
      v58 = matchiString(&v408, (const UInt8 *)v406);
      if (v407 < 0)
        operator delete(v406[0]);
      if (v408)
        CFRelease(v408);
      if (!v58)
      {
        v278 = *(NSObject ***)(a1 + 16);
        if (v278)
          v279 = *v278;
        else
          v279 = 0;
        if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 189;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v279, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported output data type.\"", v445, 0x18u);
        }
        v309 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v309 = &off_1E69EE218;
        v309[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 496) = 65568;
      v405 = 1065353216;
      v59 = *(NSObject ***)(a1 + 16);
      if (v59)
      {
        v60 = *v59;
        if (!*v59)
          goto LABEL_145;
      }
      else
      {
        v60 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 194;
        _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v445, 0x12u);
      }
LABEL_145:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v412, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v405))
      {
        v224 = *(NSObject ***)(a1 + 16);
        if (v224)
          v225 = *v224;
        else
          v225 = 0;
        if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 197;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v225, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary OutputVectorDescriptor.\"", v445, 0x18u);
        }
        v248 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v248 = &off_1E69EE218;
        v248[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 516) = v405;
      v404 = 0;
      v61 = *(NSObject ***)(a1 + 16);
      if (v61)
      {
        v62 = *v61;
        if (!*v61)
          goto LABEL_152;
      }
      else
      {
        v62 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 203;
        _os_log_impl(&dword_1B5ED0000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v445, 0x12u);
      }
LABEL_152:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v412, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v404))
      {
        v226 = *(NSObject ***)(a1 + 16);
        if (v226)
          v227 = *v226;
        else
          v227 = 0;
        if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 206;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v227, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary OutputVectorDescriptor.\"", v445, 0x18u);
        }
        v249 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v249 = &off_1E69EE218;
        v249[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 520) = v404;
      v63 = CFDictionaryGetValue(v441, CFSTR("LayerDescriptor"));
      v64 = v63;
      if (!v63)
      {
        v403 = 0;
        v67 = *(NSObject ***)(a1 + 16);
        if (v67)
        {
          v68 = *v67;
          if (!*v67)
          {
LABEL_202:
            *(_DWORD *)(*a3 + 968 * i + 964) = 0;
            goto LABEL_203;
          }
        }
        else
        {
          v68 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 221;
          v448 = 2048;
          v449.__r_.__value_.__r.__words[0] = i;
          _os_log_impl(&dword_1B5ED0000, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LayerDescriptor for layer %zu not found, using default fully connected layer.", v445, 0x1Cu);
        }
        goto LABEL_202;
      }
      CFRetain(v63);
      v403 = v64;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v403, (applesauce::CF::DictionaryRef *)&v402);
      v65 = *(NSObject ***)(a1 + 16);
      if (v65)
      {
        v66 = *v65;
        if (!*v65)
          goto LABEL_163;
      }
      else
      {
        v66 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 228;
        _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary LayerDescriptor.", v445, 0x12u);
      }
LABEL_163:
      v69 = CFDictionaryGetValue(v402, CFSTR("Type"));
      v70 = v69;
      if (!v69)
      {
        v306 = 0;
        v401 = 0;
        v307 = *(NSObject ***)(a1 + 16);
        if (v307)
          v306 = *v307;
        if (os_log_type_enabled(v306, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 233;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v306, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [layerType_ref.get_cf() == nullptr is false]: \"Failed to retrieve layer type (Type) from dictionary LayerDescriptor.\"", v445, 0x18u);
        }
        v308 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v308 = &off_1E69EE218;
        v308[2] = -66741;
      }
      CFRetain(v69);
      v401 = v70;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v401, (applesauce::CF::StringRef *)&v400);
      v71 = *(NSObject ***)(a1 + 16);
      if (!v71)
      {
        v72 = MEMORY[0x1E0C81028];
LABEL_168:
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          v73 = CFCopyDescription(v400);
          applesauce::CF::details::CFString_get_value<true>(v73, (uint64_t)v434);
          if (v73)
            CFRelease(v73);
          v74 = v434;
          if (v435 < 0)
            v74 = (void **)v434[0];
          *(_DWORD *)v445 = 136315906;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 237;
          v448 = 2080;
          v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
          LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = i;
          _os_log_impl(&dword_1B5ED0000, v72, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved Type (%s) for LayerDescriptor %zu.", v445, 0x26u);
          if (v435 < 0)
            operator delete(v434[0]);
        }
        goto LABEL_175;
      }
      v72 = *v71;
      if (*v71)
        goto LABEL_168;
LABEL_175:
      v75 = v400;
      if (v400)
        CFRetain(v400);
      v399 = v75;
      std::string::basic_string[abi:ne180100]<0>(v397, "FullyConnected");
      std::string::basic_string[abi:ne180100]<0>(v395, "Dense");
      v76 = matchiEither((CFTypeRef *)&v399, (uint64_t)v397, (uint64_t)v395);
      if (v396 < 0)
        operator delete(v395[0]);
      if (v398 < 0)
        operator delete(v397[0]);
      if (v399)
        CFRelease(v399);
      if ((v76 & 1) != 0)
      {
        v77 = 0;
      }
      else
      {
        v78 = v400;
        if (v400)
          CFRetain(v400);
        v394 = v78;
        std::string::basic_string[abi:ne180100]<0>(v392, "LSTM");
        v79 = matchiString(&v394, (const UInt8 *)v392);
        if (v393 < 0)
          operator delete(v392[0]);
        if (v394)
          CFRelease(v394);
        if (!v79)
        {
          v319 = *(NSObject ***)(a1 + 16);
          if (v319)
            v320 = *v319;
          else
            v320 = 0;
          if (os_log_type_enabled(v320, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v445 = 136315650;
            *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
            v446 = 1024;
            v447 = 250;
            v448 = 1024;
            LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
            _os_log_impl(&dword_1B5ED0000, v320, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported LayerType.\"", v445, 0x18u);
          }
          v321 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v321 = &off_1E69EE218;
          v321[2] = -66743;
        }
        v77 = 1;
      }
      *(_DWORD *)(*a3 + 968 * i + 964) = v77;
      if (v400)
        CFRelease(v400);
      if (v401)
        CFRelease(v401);
      if (v402)
        CFRelease(v402);
LABEL_203:
      v80 = (const __CFDictionary *)CFDictionaryGetValue(v441, CFSTR("Weights"));
      v81 = v80;
      if (!v80)
      {
        v280 = 0;
        v402 = 0;
        v281 = *(NSObject ***)(a1 + 16);
        if (v281)
          v280 = *v281;
        if (os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 262;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v280, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Weights.\"", v445, 0x18u);
        }
        v282 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v282 = &off_1E69EE218;
        v282[2] = -66741;
      }
      CFRetain(v80);
      v402 = v81;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef((const void **)&v402, (applesauce::CF::DictionaryRef *)&v401);
      v82 = *(NSObject ***)(a1 + 16);
      if (v82)
      {
        v83 = *v82;
        if (!*v82)
          goto LABEL_210;
      }
      else
      {
        v83 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 266;
        _os_log_impl(&dword_1B5ED0000, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Weights.", v445, 0x12u);
      }
LABEL_210:
      v84 = *(uint64_t ***)a1;
      v85 = *a3;
      v86 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v401, CFSTR("Data"));
      v87 = v86;
      if (!v86)
      {
        v283 = (NSObject **)*v84;
        if (*v84)
        {
          v284 = *v283;
          if (*v283)
            goto LABEL_716;
        }
        else
        {
          v284 = MEMORY[0x1E0C81028];
LABEL_716:
          if (os_log_type_enabled(v284, OS_LOG_TYPE_DEFAULT))
          {
            CStringPtr = CFStringGetCStringPtr(CFSTR("Data"), 0x8000100u);
            *(_DWORD *)v445 = 136315650;
            *(_QWORD *)&v445[4] = "DictionaryBlobReader.hpp";
            v446 = 1024;
            v447 = 95;
            v448 = 2080;
            v449.__r_.__value_.__r.__words[0] = (std::string::size_type)CStringPtr;
            _os_log_impl(&dword_1B5ED0000, v284, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to retrieve %s.", v445, 0x1Cu);
          }
        }
        v311 = *(NSObject ***)(a1 + 16);
        if (v311)
          v312 = *v311;
        else
          v312 = 0;
        if (os_log_type_enabled(v312, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 271;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v312, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Weights.\"", v445, 0x18u);
        }
        v318 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v318 = &off_1E69EE218;
        v318[2] = -66741;
      }
      v88 = (_BYTE **)(v85 + 968 * i + 936);
      Length = CFDataGetLength(v86);
      v90 = *(_QWORD *)(v85 + 968 * i + 952);
      v91 = *v88;
      if (v90 - (unint64_t)*v88 >= Length)
      {
        v98 = v85 + 968 * i;
        v99 = *(_QWORD *)(v98 + 944) - (_QWORD)v91;
        if (v99 >= Length)
          v100 = Length;
        else
          v100 = *(_QWORD *)(v98 + 944) - (_QWORD)v91;
        for (; v100; --v100)
          *v91++ = 0;
        v101 = (_QWORD *)(v98 + 944);
        v102 = Length >= v99;
        v103 = Length - v99;
        if (v103 != 0 && v102)
        {
          v104 = (_BYTE *)*v101;
          v105 = *v101 + v103;
          do
          {
            *v104++ = 0;
            --v103;
          }
          while (v103);
          *v101 = v105;
        }
        else
        {
          *v101 = &(*v88)[Length];
        }
      }
      else
      {
        if (v91)
        {
          *(_QWORD *)(v85 + 968 * i + 944) = v91;
          operator delete(v91);
          v90 = 0;
          *v88 = 0;
          *(_QWORD *)(v85 + 968 * i + 944) = 0;
          *(_QWORD *)(v85 + 968 * i + 952) = 0;
        }
        v92 = 2 * v90;
        if (2 * v90 <= Length)
          v92 = Length;
        if (v90 >= 0x3FFFFFFFFFFFFFFFLL)
          v93 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        std::vector<signed char>::__vallocate[abi:ne180100]((_QWORD *)(v85 + 968 * i + 936), v93);
        v94 = (_QWORD *)(v85 + 968 * i + 944);
        v95 = (_BYTE *)*v94;
        v96 = *v94 + Length;
        v97 = Length;
        do
        {
          *v95++ = 0;
          --v97;
        }
        while (v97);
        *v94 = v96;
      }
      BytePtr = CFDataGetBytePtr(v87);
      if (Length)
      {
        for (j = 0; j != Length; ++j)
          (*v88)[j] = BytePtr[j];
      }
      v108 = *a3;
      v109 = *a3 + 968 * i;
      v110 = *(_DWORD *)(v109 + 964);
      v111 = *(_QWORD *)(v109 + 360);
      v112 = v110 == 1;
      if (v110 == 1)
        v113 = *(_QWORD *)(v109 + 360);
      else
        v113 = 0;
      v114 = *(_QWORD *)(v109 + 8) + v113;
      if (v112)
        v111 *= 4;
      v115 = v111 * v114;
      v116 = *(_QWORD *)(v109 + 936);
      v117 = *(_QWORD *)(v109 + 944) - v116;
      if (v117 != v111 * v114)
      {
        v228 = *(NSObject ***)(a1 + 16);
        if (v228)
          v229 = *v228;
        else
          v229 = 0;
        if (os_log_type_enabled(v229, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136316162;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 280;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
          WORD2(v449.__r_.__value_.__r.__words[0]) = 2048;
          *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 6) = v117;
          HIWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
          v449.__r_.__value_.__r.__words[2] = v115;
          _os_log_impl(&dword_1B5ED0000, v229, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [nnLayers[i].mWeightsQuantized.size() != weightsNumberOfCoefficients is false]: \"Number of weights in Data (%lu) does not match the required number of weights (%lu).\"", v445, 0x2Cu);
        }
        v250 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v250 = &off_1E69EE218;
        v250[2] = -66743;
      }
      *(_DWORD *)(v109 + 180) = 0x20000;
      *(_QWORD *)(v109 + 184) = v114;
      *(_QWORD *)(v109 + 192) = v111;
      *(_QWORD *)(v109 + 248) = 1;
      *(_QWORD *)(v109 + 256) = v114;
      if (v115 >= 4)
        v118 = 4;
      else
        v118 = v111 * v114;
      *(_QWORD *)(v109 + 312) = v116;
      if (v118)
      {
        v119 = 0;
        while (2)
        {
          v120 = *(_DWORD *)(a1 + 8);
          HIDWORD(v121) = v120;
          LODWORD(v121) = v120;
          v122 = v108 + 968 * i;
          switch((v121 >> 3))
          {
            case 0u:
              v123 = *(_QWORD *)(a1 + 16);
              if (!v123)
                goto LABEL_269;
              if ((*(_BYTE *)(v123 + 8) & 1) == 0)
                goto LABEL_269;
              v124 = *(os_log_t *)v123;
              if (!*(_QWORD *)v123 || !os_log_type_enabled(*(os_log_t *)v123, OS_LOG_TYPE_DEBUG))
                goto LABEL_269;
              v125 = *(float *)(*(_QWORD *)(v122 + 312) + 4 * v119);
              *(_DWORD *)v445 = 136315906;
              *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
              v446 = 1024;
              v447 = 308;
              v448 = 2048;
              *(double *)&v449.__r_.__value_.__l.__data_ = v125;
              LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = v119;
              v126 = v124;
              v127 = "%25s:%-5d Successfully retrieved weights data (%g) at index (%zu).";
              v128 = 38;
              goto LABEL_268;
            case 1u:
              v135 = *(_QWORD *)(a1 + 16);
              if (!v135)
                goto LABEL_269;
              if ((*(_BYTE *)(v135 + 8) & 1) == 0)
                goto LABEL_269;
              v136 = *(os_log_t *)v135;
              if (!*(_QWORD *)v135 || !os_log_type_enabled(*(os_log_t *)v135, OS_LOG_TYPE_DEBUG))
                goto LABEL_269;
              v137 = *(char *)(*(_QWORD *)(v122 + 312) + v119);
              *(_DWORD *)v445 = 136315906;
              *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
              v446 = 1024;
              v447 = 296;
              v448 = 1024;
              LODWORD(v449.__r_.__value_.__l.__data_) = v137;
              WORD2(v449.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 6) = v119;
              v126 = v136;
              v127 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_267;
            case 2u:
              v129 = *(_QWORD *)(a1 + 16);
              if (!v129)
                goto LABEL_269;
              if ((*(_BYTE *)(v129 + 8) & 1) == 0)
                goto LABEL_269;
              v130 = *(os_log_t *)v129;
              if (!*(_QWORD *)v129 || !os_log_type_enabled(*(os_log_t *)v129, OS_LOG_TYPE_DEBUG))
                goto LABEL_269;
              v131 = *(char *)(*(_QWORD *)(v122 + 312) + 2 * v119);
              *(_DWORD *)v445 = 136315906;
              *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
              v446 = 1024;
              v447 = 300;
              v448 = 1024;
              LODWORD(v449.__r_.__value_.__l.__data_) = v131;
              WORD2(v449.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 6) = v119;
              v126 = v130;
              v127 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_267;
            case 4u:
              v132 = *(_QWORD *)(a1 + 16);
              if (!v132)
                goto LABEL_269;
              if ((*(_BYTE *)(v132 + 8) & 1) == 0)
                goto LABEL_269;
              v133 = *(os_log_t *)v132;
              if (!*(_QWORD *)v132 || !os_log_type_enabled(*(os_log_t *)v132, OS_LOG_TYPE_DEBUG))
                goto LABEL_269;
              v134 = *(char *)(*(_QWORD *)(v122 + 312) + 4 * v119);
              *(_DWORD *)v445 = 136315906;
              *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
              v446 = 1024;
              v447 = 304;
              v448 = 1024;
              LODWORD(v449.__r_.__value_.__l.__data_) = v134;
              WORD2(v449.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v449.__r_.__value_.__r.__words + 6) = v119;
              v126 = v133;
              v127 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
LABEL_267:
              v128 = 34;
LABEL_268:
              _os_log_impl(&dword_1B5ED0000, v126, OS_LOG_TYPE_DEBUG, v127, v445, v128);
LABEL_269:
              ++v119;
              v108 = *a3;
              v138 = *(_QWORD *)(*a3 + 968 * i + 944) - *(_QWORD *)(*a3 + 968 * i + 936);
              if (v138 >= 4)
                v138 = 4;
              if (v119 >= v138)
                break;
              continue;
            default:
              v258 = *(NSObject ***)(a1 + 16);
              if (v258)
                v259 = *v258;
              else
                v259 = 0;
              if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v445 = 136315906;
                *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
                v446 = 1024;
                v447 = 312;
                v448 = 1024;
                LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
                WORD2(v449.__r_.__value_.__r.__words[0]) = 1024;
                *(_DWORD *)((char *)v449.__r_.__value_.__r.__words + 6) = v120;
                _os_log_impl(&dword_1B5ED0000, v259, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown quantization type (%u).\"", v445, 0x1Eu);
              }
              v260 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v260 = &off_1E69EE218;
              v260[2] = -66743;
          }
          break;
        }
      }
      v139 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v401, CFSTR("DataType"));
      v140 = v139;
      if (!v139)
      {
        v285 = 0;
        v400 = 0;
        v286 = *(NSObject ***)(a1 + 16);
        if (v286)
          v285 = *v286;
        if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 320;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v285, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDataType_ref.get_cf() == nullptr is false]: \"Missing DataType from dictionary Weights.\"", v445, 0x18u);
        }
        v287 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v287 = &off_1E69EE218;
        v287[2] = -66741;
      }
      CFRetain(v139);
      v400 = v140;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef((const void **)&v400, (applesauce::CF::StringRef *)&v391);
      v141 = *(NSObject ***)(a1 + 16);
      if (v141)
      {
        v142 = *v141;
        if (!*v141)
          goto LABEL_284;
      }
      else
      {
        v142 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
      {
        v143 = CFCopyDescription(v391);
        applesauce::CF::details::CFString_get_value<true>(v143, (uint64_t)v434);
        if (v143)
          CFRelease(v143);
        v144 = v434;
        if (v435 < 0)
          v144 = (void **)v434[0];
        *(_DWORD *)v445 = 136315906;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 324;
        v448 = 2080;
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
        LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved weights data type (%s) for Layer %zu.", v445, 0x26u);
        if (v435 < 0)
          operator delete(v434[0]);
      }
LABEL_284:
      v145 = *(_DWORD *)(a1 + 8);
      if (v145 == 8)
      {
        v146 = v391;
        if (v391)
          CFRetain(v391);
        v390 = v146;
        std::string::basic_string[abi:ne180100]<0>(v388, "int8");
        std::string::basic_string[abi:ne180100]<0>(v386, "SInt8");
        v147 = matchiEither((CFTypeRef *)&v390, (uint64_t)v388, (uint64_t)v386);
        if (v387 < 0)
          operator delete(v386[0]);
        if (v389 < 0)
          operator delete(v388[0]);
        if (v390)
          CFRelease(v390);
        v148 = 131080;
        if ((v147 & 1) != 0)
          goto LABEL_327;
        v145 = *(_DWORD *)(a1 + 8);
      }
      if (v145 == 16)
      {
        v149 = v391;
        if (v391)
          CFRetain(v391);
        v385 = v149;
        std::string::basic_string[abi:ne180100]<0>(v383, "int16");
        std::string::basic_string[abi:ne180100]<0>(v381, "SInt16");
        v150 = matchiEither((CFTypeRef *)&v385, (uint64_t)v383, (uint64_t)v381);
        if (v382 < 0)
          operator delete(v381[0]);
        if (v384 < 0)
          operator delete(v383[0]);
        if (v385)
          CFRelease(v385);
        if ((v150 & 1) != 0)
        {
          v148 = 131088;
          goto LABEL_327;
        }
        v145 = *(_DWORD *)(a1 + 8);
      }
      if (v145 == 32)
      {
        v151 = v391;
        if (v391)
          CFRetain(v391);
        v380 = v151;
        std::string::basic_string[abi:ne180100]<0>(v378, "int32");
        std::string::basic_string[abi:ne180100]<0>(v376, "SInt32");
        v152 = matchiEither((CFTypeRef *)&v380, (uint64_t)v378, (uint64_t)v376);
        if (v377 < 0)
          operator delete(v376[0]);
        if (v379 < 0)
          operator delete(v378[0]);
        if (v380)
          CFRelease(v380);
        if ((v152 & 1) != 0)
        {
          v148 = 131104;
          goto LABEL_327;
        }
        v145 = *(_DWORD *)(a1 + 8);
      }
      if (v145)
        goto LABEL_704;
      v153 = v391;
      if (v391)
        CFRetain(v391);
      v375 = v153;
      std::string::basic_string[abi:ne180100]<0>(v373, "float32");
      v154 = matchiString(&v375, (const UInt8 *)v373);
      if (v374 < 0)
        operator delete(v373[0]);
      if (v375)
        CFRelease(v375);
      v148 = 65568;
      if (!v154)
      {
LABEL_704:
        v304 = *(NSObject ***)(a1 + 16);
        if (v304)
          v305 = *v304;
        else
          v305 = 0;
        if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
        {
          v316 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v445 = 136315906;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 346;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
          WORD2(v449.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v449.__r_.__value_.__r.__words + 6) = v316;
          _os_log_impl(&dword_1B5ED0000, v305, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported weights data quantization type for Quantization (%u).\"", v445, 0x1Eu);
        }
        v317 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v317 = &off_1E69EE218;
        v317[2] = -66743;
      }
LABEL_327:
      *(_DWORD *)(*a3 + 968 * i + 320) = v148;
      v372 = 1065353216;
      v155 = *(NSObject ***)(a1 + 16);
      if (v155)
      {
        v156 = *v155;
        if (!*v155)
          goto LABEL_333;
      }
      else
      {
        v156 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 351;
        _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v445, 0x12u);
      }
LABEL_333:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v401, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v372))
      {
        v230 = *(NSObject ***)(a1 + 16);
        if (v230)
          v231 = *v230;
        else
          v231 = 0;
        if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 354;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v231, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Weights.\"", v445, 0x18u);
        }
        v251 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v251 = &off_1E69EE218;
        v251[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 340) = v372;
      v371 = 0;
      v157 = *(NSObject ***)(a1 + 16);
      if (v157)
      {
        v158 = *v157;
        if (!*v157)
          goto LABEL_340;
      }
      else
      {
        v158 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 360;
        _os_log_impl(&dword_1B5ED0000, v158, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v445, 0x12u);
      }
LABEL_340:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v401, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v371))
      {
        v232 = *(NSObject ***)(a1 + 16);
        if (v232)
          v233 = *v232;
        else
          v233 = 0;
        if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 363;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v233, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Weights.\"", v445, 0x18u);
        }
        v252 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v252 = &off_1E69EE218;
        v252[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 344) = v371;
      v159 = CFDictionaryGetValue(v441, CFSTR("Bias"));
      v160 = v159;
      if (!v159)
      {
        v288 = 0;
        v370 = 0;
        v289 = *(NSObject ***)(a1 + 16);
        if (v289)
          v288 = *v289;
        if (os_log_type_enabled(v288, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 374;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v288, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Bias from dictionary Weights.\"", v445, 0x18u);
        }
        v290 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v290 = &off_1E69EE218;
        v290[2] = -66741;
      }
      CFRetain(v159);
      v370 = v160;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v370, (applesauce::CF::DictionaryRef *)&v369);
      v161 = *(NSObject ***)(a1 + 16);
      if (v161)
      {
        v162 = *v161;
        if (!*v161)
          goto LABEL_348;
      }
      else
      {
        v162 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 378;
        _os_log_impl(&dword_1B5ED0000, v162, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Bias.", v445, 0x12u);
      }
LABEL_348:
      if (DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)a1, v369, CFSTR("Data"), (char **)(*a3 + 968 * i + 888)))
      {
        v234 = *(NSObject ***)(a1 + 16);
        if (v234)
          v235 = *v234;
        else
          v235 = 0;
        if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 383;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v235, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Bias.\"", v445, 0x18u);
        }
        v253 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v253 = &off_1E69EE218;
        v253[2] = -66741;
      }
      v163 = *a3;
      v164 = *a3 + 968 * i;
      *(_DWORD *)(v164 + 532) = 0x10000;
      v165 = *(_QWORD *)(v164 + 888);
      v166 = (*(_QWORD *)(v164 + 896) - v165) >> 2;
      *(_QWORD *)(v164 + 536) = v166;
      *(_QWORD *)(v164 + 600) = 1;
      *(_QWORD *)(v164 + 664) = v165;
      if (v166 >= 4)
        v167 = 4;
      else
        v167 = v166;
      if (v167)
      {
        for (k = 0; k < v172; ++k)
        {
          v169 = *(_QWORD *)(a1 + 16);
          if (v169)
          {
            if ((*(_BYTE *)(v169 + 8) & 1) != 0)
            {
              v170 = *(NSObject **)v169;
              if (*(_QWORD *)v169)
              {
                if (os_log_type_enabled(*(os_log_t *)v169, OS_LOG_TYPE_DEBUG))
                {
                  v171 = *(float *)(*(_QWORD *)(v163 + 968 * i + 664) + 4 * k);
                  *(_DWORD *)v445 = 136315906;
                  *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
                  v446 = 1024;
                  v447 = 394;
                  v448 = 2048;
                  *(double *)&v449.__r_.__value_.__l.__data_ = v171;
                  LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
                  *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = k;
                  _os_log_impl(&dword_1B5ED0000, v170, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data (%g) at index (%zu).", v445, 0x26u);
                  v163 = *a3;
                }
              }
            }
          }
          v172 = (uint64_t)(*(_QWORD *)(v163 + 968 * i + 896) - *(_QWORD *)(v163 + 968 * i + 888)) >> 2;
          if (v172 >= 4)
            v172 = 4;
        }
      }
      v173 = CFDictionaryGetValue(v369, CFSTR("DataType"));
      v174 = v173;
      if (!v173)
      {
        v293 = 0;
        v368 = 0;
        v294 = *(NSObject ***)(a1 + 16);
        if (v294)
          v293 = *v294;
        if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 401;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v293, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType from dictionary Weights.\"", v445, 0x18u);
        }
        v295 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v295 = &off_1E69EE218;
        v295[2] = -66741;
      }
      CFRetain(v173);
      v368 = v174;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v368, (applesauce::CF::StringRef *)&v367);
      v175 = *(NSObject ***)(a1 + 16);
      if (v175)
      {
        v176 = *v175;
        if (!*v175)
          goto LABEL_374;
      }
      else
      {
        v176 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v176, OS_LOG_TYPE_DEBUG))
      {
        v177 = CFCopyDescription(v367);
        applesauce::CF::details::CFString_get_value<true>(v177, (uint64_t)v434);
        if (v177)
          CFRelease(v177);
        v178 = v434;
        if (v435 < 0)
          v178 = (void **)v434[0];
        *(_DWORD *)v445 = 136315906;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 405;
        v448 = 2080;
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
        LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v176, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data type (%s) for Layer %zu.", v445, 0x26u);
        if (v435 < 0)
          operator delete(v434[0]);
      }
LABEL_374:
      v179 = v367;
      if (v367)
        CFRetain(v367);
      v366 = v179;
      std::string::basic_string[abi:ne180100]<0>(v364, "float32");
      v180 = matchiString(&v366, (const UInt8 *)v364);
      if (v365 < 0)
        operator delete(v364[0]);
      if (v366)
        CFRelease(v366);
      if (!v180)
      {
        v291 = *(NSObject ***)(a1 + 16);
        if (v291)
          v292 = *v291;
        else
          v292 = 0;
        if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 414;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v292, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported bias data type.\"", v445, 0x18u);
        }
        v313 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v313 = &off_1E69EE218;
        v313[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 672) = 65568;
      v363 = 1065353216;
      v181 = *(NSObject ***)(a1 + 16);
      if (v181)
      {
        v182 = *v181;
        if (!*v181)
          goto LABEL_387;
      }
      else
      {
        v182 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v182, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 419;
        _os_log_impl(&dword_1B5ED0000, v182, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v445, 0x12u);
      }
LABEL_387:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v369, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v363))
      {
        v236 = *(NSObject ***)(a1 + 16);
        if (v236)
          v237 = *v236;
        else
          v237 = 0;
        if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 422;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v237, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Bias.\"", v445, 0x18u);
        }
        v254 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v254 = &off_1E69EE218;
        v254[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 692) = v363;
      v362 = 0;
      v183 = *(NSObject ***)(a1 + 16);
      if (v183)
      {
        v184 = *v183;
        if (!*v183)
          goto LABEL_394;
      }
      else
      {
        v184 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 428;
        _os_log_impl(&dword_1B5ED0000, v184, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v445, 0x12u);
      }
LABEL_394:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v369, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v362))
      {
        v238 = *(NSObject ***)(a1 + 16);
        if (v238)
          v239 = *v238;
        else
          v239 = 0;
        if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 431;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v239, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Bias.\"", v445, 0x18u);
        }
        v255 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v255 = &off_1E69EE218;
        v255[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 696) = v362;
      v185 = CFDictionaryGetValue(v441, CFSTR("Activation"));
      v186 = v185;
      if (!v185)
      {
        v296 = 0;
        v361 = 0;
        v297 = *(NSObject ***)(a1 + 16);
        if (v297)
          v296 = *v297;
        if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 443;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v296, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Activation.\"", v445, 0x18u);
        }
        v298 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v298 = &off_1E69EE218;
        v298[2] = -66741;
      }
      CFRetain(v185);
      v361 = v186;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v361, (applesauce::CF::DictionaryRef *)&v360);
      v187 = *(NSObject ***)(a1 + 16);
      if (v187)
      {
        v188 = *v187;
        if (!*v187)
          goto LABEL_402;
      }
      else
      {
        v188 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 447;
        _os_log_impl(&dword_1B5ED0000, v188, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Activation.", v445, 0x12u);
      }
LABEL_402:
      v189 = CFDictionaryGetValue(v360, CFSTR("Function"));
      v190 = v189;
      if (!v189)
      {
        v299 = 0;
        v359 = 0;
        v300 = *(NSObject ***)(a1 + 16);
        if (v300)
          v299 = *v300;
        if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 453;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v299, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationFunction_ref.get_cf() == nullptr is false]: \"Failed to retrieve activation function (Function) from dictionary Activation.\"", v445, 0x18u);
        }
        v301 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v301 = &off_1E69EE218;
        v301[2] = -66741;
      }
      CFRetain(v189);
      v359 = v190;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v359, (applesauce::CF::StringRef *)&v358);
      v191 = *(NSObject ***)(a1 + 16);
      if (v191)
      {
        v192 = *v191;
        if (!*v191)
          goto LABEL_414;
      }
      else
      {
        v192 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
      {
        v193 = CFCopyDescription(v358);
        applesauce::CF::details::CFString_get_value<true>(v193, (uint64_t)v434);
        if (v193)
          CFRelease(v193);
        v194 = v434;
        if (v435 < 0)
          v194 = (void **)v434[0];
        *(_DWORD *)v445 = 136315906;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 457;
        v448 = 2080;
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
        LOWORD(v449.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v449.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v192, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved activation function (%s) for Layer %zu.", v445, 0x26u);
        if (v435 < 0)
          operator delete(v434[0]);
      }
LABEL_414:
      *(_DWORD *)(*a3 + 968 * i + 704) = 0;
      v195 = v358;
      if (v358)
        CFRetain(v358);
      v357 = v195;
      std::string::basic_string[abi:ne180100]<0>(v355, "Identity");
      std::string::basic_string[abi:ne180100]<0>(v353, "Linear");
      v196 = matchiEither((CFTypeRef *)&v357, (uint64_t)v355, (uint64_t)v353);
      if (v354 < 0)
        operator delete(v353[0]);
      if (v356 < 0)
        operator delete(v355[0]);
      if (v357)
        CFRelease(v357);
      if ((v196 & 1) != 0)
      {
        v197 = 0;
      }
      else
      {
        v198 = v358;
        if (v358)
          CFRetain(v358);
        v352 = v198;
        std::string::basic_string[abi:ne180100]<0>(v350, "RectifiedLinear");
        std::string::basic_string[abi:ne180100]<0>(v348, "ReLU");
        v199 = matchiEither((CFTypeRef *)&v352, (uint64_t)v350, (uint64_t)v348);
        if (v349 < 0)
          operator delete(v348[0]);
        if (v351 < 0)
          operator delete(v350[0]);
        if (v352)
          CFRelease(v352);
        if ((v199 & 1) != 0)
        {
          v197 = 1;
        }
        else
        {
          v200 = v358;
          if (v358)
            CFRetain(v358);
          v347 = v200;
          std::string::basic_string[abi:ne180100]<0>(v345, "LeakyRectifiedLinear");
          std::string::basic_string[abi:ne180100]<0>(v343, "LeakyReLU");
          v201 = matchiEither((CFTypeRef *)&v347, (uint64_t)v345, (uint64_t)v343);
          if (v344 < 0)
            operator delete(v343[0]);
          if (v346 < 0)
            operator delete(v345[0]);
          if (v347)
            CFRelease(v347);
          if ((v201 & 1) != 0)
          {
            v197 = 2;
          }
          else
          {
            v202 = v358;
            if (v358)
              CFRetain(v358);
            v342 = v202;
            std::string::basic_string[abi:ne180100]<0>(v340, "Sigmoid");
            v203 = matchiString(&v342, (const UInt8 *)v340);
            if (v341 < 0)
              operator delete(v340[0]);
            if (v342)
              CFRelease(v342);
            if (v203)
            {
              v197 = 3;
            }
            else
            {
              v204 = v358;
              if (v358)
                CFRetain(v358);
              cf = v204;
              std::string::basic_string[abi:ne180100]<0>(__p, "Tanh");
              v205 = matchiString((CFStringRef *)&cf, (const UInt8 *)__p);
              if (v338 < 0)
                operator delete(__p[0]);
              if (cf)
                CFRelease(cf);
              if (v205)
              {
                v197 = 4;
              }
              else
              {
                v206 = v358;
                if (v358)
                  CFRetain(v358);
                v336 = v206;
                std::string::basic_string[abi:ne180100]<0>(v334, "ScaledTanh");
                v207 = matchiString((CFStringRef *)&v336, (const UInt8 *)v334);
                if (v335 < 0)
                  operator delete(v334[0]);
                if (v336)
                  CFRelease(v336);
                if (v207)
                {
                  v197 = 5;
                }
                else
                {
                  v208 = v358;
                  if (v358)
                    CFRetain(v358);
                  v333 = v208;
                  std::string::basic_string[abi:ne180100]<0>(v331, "Abs");
                  v209 = matchiString((CFStringRef *)&v333, (const UInt8 *)v331);
                  if (v332 < 0)
                    operator delete(v331[0]);
                  if (v333)
                    CFRelease(v333);
                  if (v209)
                  {
                    v197 = 6;
                  }
                  else
                  {
                    v210 = v358;
                    if (v358)
                      CFRetain(v358);
                    v330 = v210;
                    std::string::basic_string[abi:ne180100]<0>(v328, "ELU");
                    v211 = matchiString((CFStringRef *)&v330, (const UInt8 *)v328);
                    if (v329 < 0)
                      operator delete(v328[0]);
                    if (v330)
                      CFRelease(v330);
                    if (!v211)
                    {
                      v322 = *(NSObject ***)(a1 + 16);
                      if (v322)
                        v323 = *v322;
                      else
                        v323 = 0;
                      if (os_log_type_enabled(v323, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v445 = 136315650;
                        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
                        v446 = 1024;
                        v447 = 496;
                        v448 = 1024;
                        LODWORD(v449.__r_.__value_.__l.__data_) = -66743;
                        _os_log_impl(&dword_1B5ED0000, v323, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported activation function.\"", v445, 0x18u);
                      }
                      v324 = __cxa_allocate_exception(0x10uLL);
                      *(_QWORD *)v324 = &off_1E69EE218;
                      v324[2] = -66743;
                    }
                    v197 = 7;
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(*a3 + 968 * i + 960) = v197;
      LODWORD(v434[0]) = 1065353216;
      v212 = *(NSObject ***)(a1 + 16);
      if (v212)
      {
        v213 = *v212;
        if (!*v212)
          goto LABEL_490;
      }
      else
      {
        v213 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v445 = 136315394;
        *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
        v446 = 1024;
        v447 = 501;
        _os_log_impl(&dword_1B5ED0000, v213, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v445, 0x12u);
      }
LABEL_490:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v360, CFSTR("Alpha"), kCFNumberFloat32Type, (float *)v434))
      {
        v240 = *(NSObject ***)(a1 + 16);
        if (v240)
          v241 = *v240;
        else
          v241 = 0;
        if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 504;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v241, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Alpha from dictionary Activation.\"", v445, 0x18u);
        }
        v256 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v256 = &off_1E69EE218;
        v256[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 708) = v434[0];
      v327 = 0;
      v214 = *(NSObject ***)(a1 + 16);
      if (!v214)
      {
        v215 = MEMORY[0x1E0C81028];
LABEL_495:
        if (os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v445 = 136315394;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 510;
          _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v445, 0x12u);
        }
        goto LABEL_497;
      }
      v215 = *v214;
      if (*v214)
        goto LABEL_495;
LABEL_497:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v360, CFSTR("Beta"), kCFNumberFloat32Type, (float *)&v327))
      {
        v242 = *(NSObject ***)(a1 + 16);
        if (v242)
          v243 = *v242;
        else
          v243 = 0;
        if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v445 = 136315650;
          *(_QWORD *)&v445[4] = "NeuralNetLoader.cpp";
          v446 = 1024;
          v447 = 513;
          v448 = 1024;
          LODWORD(v449.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v243, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Beta from dictionary Activation.\"", v445, 0x18u);
        }
        v257 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v257 = &off_1E69EE218;
        v257[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 712) = v327;
      if (v358)
        CFRelease(v358);
      if (v359)
        CFRelease(v359);
      if (v360)
        CFRelease(v360);
      if (v361)
        CFRelease(v361);
      if (v367)
        CFRelease(v367);
      if (v368)
        CFRelease(v368);
      if (v369)
        CFRelease(v369);
      if (v370)
        CFRelease(v370);
      if (v391)
        CFRelease(v391);
      if (v400)
        CFRelease(v400);
      if (v401)
        CFRelease(v401);
      if (v402)
        CFRelease(v402);
      if (v403)
        CFRelease(v403);
      if (v409)
        CFRelease(v409);
      if (v410)
        CFRelease(v410);
      if (v412)
        CFRelease(v412);
      if (v413)
        CFRelease(v413);
      if (v436)
        CFRelease(v436);
      if (v437)
        CFRelease(v437);
      if (v439)
        CFRelease(v439);
      if (v440)
        CFRelease(v440);
      if (v441)
        CFRelease(v441);
      if (v442)
        CFRelease(v442);
      CFRelease(v326);
      if (SHIBYTE(v444) < 0)
        operator delete((void *)v443);
    }
  }
}

void sub_1B651E384(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B651EDC8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B651ED68);
  JUMPOUT(0x1B651EC7CLL);
}

void sub_1B651EDD0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B651ED68);
  JUMPOUT(0x1B651EC7CLL);
}

void sub_1B651EDD8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B651ED68);
  JUMPOUT(0x1B651EC7CLL);
}

void sub_1B651EDE0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B651ED68);
  JUMPOUT(0x1B651EC7CLL);
}

void sub_1B651EDE8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B651ED68);
  JUMPOUT(0x1B651EC7CLL);
}

void NeuralNetLoader<FullyConnectedLayerBNNS<short>>::loadLayers(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  unint64_t i;
  std::string *v6;
  __int128 v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  const void *Value;
  const void *v12;
  NSObject **v13;
  NSObject *v14;
  __int128 *v15;
  const void *v16;
  const void *v17;
  NSObject **v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  const void *v24;
  const void *v25;
  NSObject **v26;
  NSObject *v27;
  const __CFString *v28;
  void **v29;
  int v30;
  const __CFString *v31;
  char v32;
  int v33;
  const __CFString *v34;
  char v35;
  const __CFString *v36;
  char v37;
  const __CFString *v38;
  BOOL v39;
  NSObject **v40;
  NSObject *v41;
  const void *v42;
  const void *v43;
  NSObject **v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  const void *v49;
  const void *v50;
  NSObject **v51;
  NSObject *v52;
  const __CFString *v53;
  void **v54;
  const __CFString *v55;
  _BOOL4 v56;
  NSObject **v57;
  NSObject *v58;
  NSObject **v59;
  NSObject *v60;
  const void *v61;
  const void *v62;
  NSObject **v63;
  NSObject *v64;
  NSObject **v65;
  NSObject *v66;
  const void *v67;
  const void *v68;
  NSObject **v69;
  NSObject *v70;
  const __CFString *v71;
  void **v72;
  const __CFString *v73;
  char v74;
  int v75;
  const __CFString *v76;
  BOOL v77;
  const __CFDictionary *v78;
  const __CFDictionary *v79;
  NSObject **v80;
  NSObject *v81;
  uint64_t **v82;
  uint64_t v83;
  const __CFData *v84;
  const __CFData *v85;
  unsigned int Length;
  void **v87;
  unint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  _WORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  _WORD *v101;
  char **v102;
  char *v103;
  uint64_t v104;
  const UInt8 *BytePtr;
  _WORD *v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  os_log_t v125;
  double v126;
  NSObject *v127;
  const char *v128;
  uint32_t v129;
  uint64_t v130;
  os_log_t v131;
  int v132;
  uint64_t v133;
  os_log_t v134;
  int v135;
  uint64_t v136;
  os_log_t v137;
  int v138;
  unint64_t v139;
  const __CFString *v140;
  const __CFString *v141;
  NSObject **v142;
  NSObject *v143;
  const __CFString *v144;
  void **v145;
  int v146;
  const __CFString *v147;
  char v148;
  int v149;
  const __CFString *v150;
  char v151;
  const __CFString *v152;
  char v153;
  const __CFString *v154;
  BOOL v155;
  NSObject **v156;
  NSObject *v157;
  NSObject **v158;
  NSObject *v159;
  const void *v160;
  const void *v161;
  NSObject **v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t j;
  uint64_t v170;
  NSObject *v171;
  double v172;
  unint64_t v173;
  const void *v174;
  const void *v175;
  NSObject **v176;
  NSObject *v177;
  const __CFString *v178;
  void **v179;
  const __CFString *v180;
  _BOOL4 v181;
  NSObject **v182;
  NSObject *v183;
  NSObject **v184;
  NSObject *v185;
  const void *v186;
  const void *v187;
  NSObject **v188;
  NSObject *v189;
  const void *v190;
  const void *v191;
  NSObject **v192;
  NSObject *v193;
  const __CFString *v194;
  void **v195;
  const __CFString *v196;
  char v197;
  int v198;
  const __CFString *v199;
  char v200;
  const __CFString *v201;
  char v202;
  const __CFString *v203;
  BOOL v204;
  const __CFString *v205;
  BOOL v206;
  const __CFString *v207;
  BOOL v208;
  const __CFString *v209;
  BOOL v210;
  const __CFString *v211;
  BOOL v212;
  NSObject **v213;
  NSObject *v214;
  NSObject **v215;
  NSObject *v216;
  NSObject **v217;
  NSObject *v218;
  NSObject **v219;
  NSObject *v220;
  NSObject **v221;
  NSObject *v222;
  NSObject **v223;
  NSObject *v224;
  NSObject **v225;
  NSObject *v226;
  NSObject **v227;
  NSObject *v228;
  NSObject **v229;
  NSObject *v230;
  NSObject **v231;
  NSObject *v232;
  NSObject **v233;
  NSObject *v234;
  NSObject **v235;
  NSObject *v236;
  NSObject **v237;
  NSObject *v238;
  NSObject **v239;
  NSObject *v240;
  NSObject **v241;
  NSObject *v242;
  NSObject **v243;
  NSObject *v244;
  _DWORD *v245;
  _DWORD *v246;
  _DWORD *v247;
  _DWORD *v248;
  _DWORD *v249;
  _DWORD *v250;
  _DWORD *v251;
  _DWORD *v252;
  _DWORD *v253;
  _DWORD *v254;
  _DWORD *v255;
  _DWORD *v256;
  _DWORD *v257;
  _DWORD *v258;
  NSObject **v259;
  NSObject *v260;
  _DWORD *v261;
  NSObject *v262;
  NSObject **v263;
  _DWORD *v264;
  std::runtime_error *exception;
  NSObject *v266;
  NSObject **v267;
  __int128 *v268;
  _DWORD *v269;
  NSObject *v270;
  NSObject **v271;
  _DWORD *v272;
  NSObject *v273;
  NSObject **v274;
  _DWORD *v275;
  NSObject *v276;
  NSObject **v277;
  _DWORD *v278;
  NSObject **v279;
  NSObject *v280;
  NSObject **v281;
  NSObject *v282;
  NSObject *v283;
  NSObject **v284;
  _DWORD *v285;
  NSObject *v286;
  NSObject **v287;
  _DWORD *v288;
  NSObject *v289;
  NSObject **v290;
  _DWORD *v291;
  NSObject *v292;
  NSObject **v293;
  _DWORD *v294;
  NSObject **v295;
  NSObject *v296;
  NSObject *v297;
  NSObject **v298;
  _DWORD *v299;
  NSObject *v300;
  NSObject **v301;
  _DWORD *v302;
  NSObject **v303;
  NSObject *v304;
  NSObject **v305;
  NSObject *v306;
  NSObject *v307;
  NSObject **v308;
  _DWORD *v309;
  _DWORD *v310;
  const char *CStringPtr;
  NSObject **v312;
  NSObject *v313;
  _DWORD *v314;
  int v315;
  _DWORD *v316;
  int v317;
  _DWORD *v318;
  _DWORD *v319;
  NSObject **v320;
  NSObject *v321;
  _DWORD *v322;
  NSObject **v323;
  NSObject *v324;
  _DWORD *v325;
  CFStringRef v327;
  int v328;
  void *v329[2];
  char v330;
  CFTypeRef v331;
  void *v332[2];
  char v333;
  CFTypeRef v334;
  void *v335[2];
  char v336;
  CFTypeRef v337;
  void *__p[2];
  char v339;
  CFTypeRef cf;
  void *v341[2];
  char v342;
  CFStringRef v343;
  void *v344[2];
  char v345;
  void *v346[2];
  char v347;
  const __CFString *v348;
  void *v349[2];
  char v350;
  void *v351[2];
  char v352;
  const __CFString *v353;
  void *v354[2];
  char v355;
  void *v356[2];
  char v357;
  const __CFString *v358;
  const __CFString *v359;
  const void *v360;
  const __CFDictionary *v361;
  const void *v362;
  int v363;
  int v364;
  void *v365[2];
  char v366;
  CFStringRef v367;
  const __CFString *v368;
  const void *v369;
  const __CFDictionary *v370;
  const void *v371;
  int v372;
  int v373;
  void *v374[2];
  char v375;
  CFStringRef v376;
  void *v377[2];
  char v378;
  void *v379[2];
  char v380;
  const __CFString *v381;
  void *v382[2];
  char v383;
  void *v384[2];
  char v385;
  const __CFString *v386;
  void *v387[2];
  char v388;
  void *v389[2];
  char v390;
  const __CFString *v391;
  const __CFString *v392;
  void *v393[2];
  char v394;
  CFStringRef v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  const __CFString *v400;
  const __CFString *v401;
  const void *v402;
  const __CFDictionary *v403;
  const void *v404;
  int v405;
  int v406;
  void *v407[2];
  char v408;
  CFStringRef v409;
  const __CFString *v410;
  const void *v411;
  unsigned int v412;
  const __CFDictionary *v413;
  const void *v414;
  int v415;
  int v416;
  void *v417[2];
  char v418;
  CFStringRef v419;
  void *v420[2];
  char v421;
  void *v422[2];
  char v423;
  const __CFString *v424;
  void *v425[2];
  char v426;
  void *v427[2];
  char v428;
  const __CFString *v429;
  void *v430[2];
  char v431;
  void *v432[2];
  char v433;
  const __CFString *v434;
  void *v435[2];
  char v436;
  const __CFString *v437;
  const void *v438;
  unsigned int v439;
  const __CFDictionary *v440;
  const void *v441;
  const __CFDictionary *v442;
  const void *v443;
  __int128 v444;
  int64_t v445;
  _BYTE v446[12];
  __int16 v447;
  int v448;
  __int16 v449;
  std::string v450;
  uint64_t v451;

  v451 = *MEMORY[0x1E0C80C00];
  if (a3[1] != *a3)
  {
    for (i = 0; i < 0x1B810ECF56BE69C9 * ((a3[1] - *a3) >> 3); ++i)
    {
      std::to_string((std::string *)v446, i);
      v6 = std::string::insert((std::string *)v446, 0, "Layer", 5uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v445 = v6->__r_.__value_.__r.__words[2];
      v444 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v450.__r_.__value_.__s.__data_[3] < 0)
        operator delete(*(void **)v446);
      if (v445 >= 0)
        v8 = (const UInt8 *)&v444;
      else
        v8 = (const UInt8 *)v444;
      if (v445 >= 0)
        v9 = HIBYTE(v445);
      else
        v9 = *((_QWORD *)&v444 + 1);
      v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      Value = CFDictionaryGetValue(a2, v10);
      v12 = Value;
      if (!Value)
      {
        v266 = 0;
        v443 = 0;
        v267 = *(NSObject ***)(a1 + 16);
        if (v267)
          v266 = *v267;
        if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
        {
          v268 = &v444;
          if (v445 < 0)
            v268 = (__int128 *)v444;
          *(_DWORD *)v446 = 136315906;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 60;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          WORD2(v450.__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 6) = (std::string::size_type)v268;
          _os_log_impl(&dword_1B5ED0000, v266, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [topLevelDict_ref.get_cf() == nullptr is false]: \"Missing dictionary: %s\"", v446, 0x22u);
        }
        v269 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v269 = &off_1E69EE218;
        v269[2] = -66741;
      }
      CFRetain(Value);
      v443 = v12;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v443, (applesauce::CF::DictionaryRef *)&v442);
      v13 = *(NSObject ***)(a1 + 16);
      if (v13)
      {
        v14 = *v13;
        if (!*v13)
          goto LABEL_21;
      }
      else
      {
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = &v444;
        if (v445 < 0)
          v15 = (__int128 *)v444;
        *(_DWORD *)v446 = 136315650;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 64;
        v449 = 2080;
        v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", v446, 0x1Cu);
      }
LABEL_21:
      v16 = CFDictionaryGetValue(v442, CFSTR("InputVectorDescriptor"));
      v17 = v16;
      if (!v16)
      {
        v262 = 0;
        v441 = 0;
        v263 = *(NSObject ***)(a1 + 16);
        if (v263)
          v262 = *v263;
        if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 75;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v262, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary InputVectorDescriptor.\"", v446, 0x18u);
        }
        v264 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v264 = &off_1E69EE218;
        v264[2] = -66741;
      }
      CFRetain(v16);
      v441 = v17;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v441, (applesauce::CF::DictionaryRef *)&v440);
      v18 = *(NSObject ***)(a1 + 16);
      if (v18)
      {
        v19 = *v18;
        if (!*v18)
        {
          v439 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 79;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary InputVectorDescriptor.", v446, 0x12u);
        v18 = *(NSObject ***)(a1 + 16);
      }
      v439 = 0;
      if (v18)
      {
        v20 = *v18;
        if (!*v18)
          goto LABEL_34;
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 83;
        _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v446, 0x12u);
      }
LABEL_34:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v440, CFSTR("Size"), &v439))
      {
        v217 = *(NSObject ***)(a1 + 16);
        if (v217)
          v218 = *v217;
        else
          v218 = 0;
        if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 86;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v218, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary InputVectorDescriptor.\"", v446, 0x18u);
        }
        v245 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v245 = &off_1E69EE218;
        v245[2] = -66741;
      }
      v21 = *a3 + 968 * i;
      *(_DWORD *)(v21 + 4) = 0x10000;
      v22 = v439;
      *(_QWORD *)(v21 + 8) = v439;
      *(_QWORD *)(v21 + 72) = 1;
      *(_DWORD *)v446 = 0;
      std::vector<float>::resize(v21 + 792, v22, v446);
      v23 = (char **)(*a3 + 968 * i + 912);
      *(_WORD *)v446 = 0;
      std::vector<short>::resize(v23, v439, v446);
      v24 = CFDictionaryGetValue(v440, CFSTR("DataType"));
      v25 = v24;
      if (!v24)
      {
        v270 = 0;
        v438 = 0;
        v271 = *(NSObject ***)(a1 + 16);
        if (v271)
          v270 = *v271;
        if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 98;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v270, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType.\"", v446, 0x18u);
        }
        v272 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v272 = &off_1E69EE218;
        v272[2] = -66741;
      }
      CFRetain(v24);
      v438 = v25;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v438, (applesauce::CF::StringRef *)&v437);
      v26 = *(NSObject ***)(a1 + 16);
      if (v26)
      {
        v27 = *v26;
        if (!*v26)
          goto LABEL_47;
      }
      else
      {
        v27 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = CFCopyDescription(v437);
        applesauce::CF::details::CFString_get_value<true>(v28, (uint64_t)v435);
        if (v28)
          CFRelease(v28);
        v29 = v435;
        if (v436 < 0)
          v29 = (void **)v435[0];
        *(_DWORD *)v446 = 136315906;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 102;
        v449 = 2080;
        v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input data type (%s) for Layer %zu.", v446, 0x26u);
        if (v436 < 0)
          operator delete(v435[0]);
      }
LABEL_47:
      v30 = *(_DWORD *)(a1 + 8);
      if (v30 != 8)
        goto LABEL_59;
      v31 = v437;
      if (v437)
        CFRetain(v437);
      v434 = v31;
      std::string::basic_string[abi:ne180100]<0>(v432, "int8");
      std::string::basic_string[abi:ne180100]<0>(v430, "Sint8");
      v32 = matchiEither((CFTypeRef *)&v434, (uint64_t)v432, (uint64_t)v430);
      if (v431 < 0)
        operator delete(v430[0]);
      if ((v433 & 0x80000000) == 0)
      {
        if (!v31)
          goto LABEL_57;
LABEL_56:
        CFRelease(v31);
        goto LABEL_57;
      }
      operator delete(v432[0]);
      if (v31)
        goto LABEL_56;
LABEL_57:
      v33 = 131080;
      if ((v32 & 1) != 0)
        goto LABEL_94;
      v30 = *(_DWORD *)(a1 + 8);
LABEL_59:
      if (v30 != 16)
        goto LABEL_72;
      v34 = v437;
      if (v437)
        CFRetain(v437);
      v429 = v34;
      std::string::basic_string[abi:ne180100]<0>(v427, "int16");
      std::string::basic_string[abi:ne180100]<0>(v425, "SInt16");
      v35 = matchiEither((CFTypeRef *)&v429, (uint64_t)v427, (uint64_t)v425);
      if (v426 < 0)
        operator delete(v425[0]);
      if ((v428 & 0x80000000) == 0)
      {
        if (!v34)
          goto LABEL_69;
LABEL_68:
        CFRelease(v34);
        goto LABEL_69;
      }
      operator delete(v427[0]);
      if (v34)
        goto LABEL_68;
LABEL_69:
      if ((v35 & 1) != 0)
      {
        v33 = 131088;
        goto LABEL_94;
      }
      v30 = *(_DWORD *)(a1 + 8);
LABEL_72:
      if (v30 != 32)
        goto LABEL_85;
      v36 = v437;
      if (v437)
        CFRetain(v437);
      v424 = v36;
      std::string::basic_string[abi:ne180100]<0>(v422, "int32");
      std::string::basic_string[abi:ne180100]<0>(v420, "Sint32");
      v37 = matchiEither((CFTypeRef *)&v424, (uint64_t)v422, (uint64_t)v420);
      if (v421 < 0)
        operator delete(v420[0]);
      if ((v423 & 0x80000000) == 0)
      {
        if (!v36)
          goto LABEL_82;
LABEL_81:
        CFRelease(v36);
        goto LABEL_82;
      }
      operator delete(v422[0]);
      if (v36)
        goto LABEL_81;
LABEL_82:
      if ((v37 & 1) != 0)
      {
        v33 = 131104;
        goto LABEL_94;
      }
      v30 = *(_DWORD *)(a1 + 8);
LABEL_85:
      if (v30)
        goto LABEL_700;
      v38 = v437;
      if (v437)
        CFRetain(v437);
      v419 = v38;
      std::string::basic_string[abi:ne180100]<0>(v417, "float32");
      v39 = matchiString(&v419, (const UInt8 *)v417);
      if (v418 < 0)
      {
        operator delete(v417[0]);
        if (!v38)
          goto LABEL_93;
LABEL_92:
        CFRelease(v38);
        goto LABEL_93;
      }
      if (v38)
        goto LABEL_92;
LABEL_93:
      v33 = 65568;
      if (!v39)
      {
LABEL_700:
        v303 = *(NSObject ***)(a1 + 16);
        if (v303)
          v304 = *v303;
        else
          v304 = 0;
        if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
        {
          v315 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v446 = 136315906;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 124;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
          WORD2(v450.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v450.__r_.__value_.__r.__words + 6) = v315;
          _os_log_impl(&dword_1B5ED0000, v304, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported input data quantization type for Quantization (%u).\"", v446, 0x1Eu);
        }
        v316 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v316 = &off_1E69EE218;
        v316[2] = -66743;
      }
LABEL_94:
      *(_DWORD *)(*a3 + 968 * i + 144) = v33;
      v416 = 1065353216;
      v40 = *(NSObject ***)(a1 + 16);
      if (v40)
      {
        v41 = *v40;
        if (!*v40)
          goto LABEL_100;
      }
      else
      {
        v41 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 129;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v446, 0x12u);
      }
LABEL_100:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v440, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v416))
      {
        v219 = *(NSObject ***)(a1 + 16);
        if (v219)
          v220 = *v219;
        else
          v220 = 0;
        if (os_log_type_enabled(v220, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 132;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v220, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary InputVectorDescriptor.\"", v446, 0x18u);
        }
        v246 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v246 = &off_1E69EE218;
        v246[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 164) = v416;
      v415 = 0;
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v440, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v415))
      {
        v221 = *(NSObject ***)(a1 + 16);
        if (v221)
          v222 = *v221;
        else
          v222 = 0;
        if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 140;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v222, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary InputVectorDescriptor.\"", v446, 0x18u);
        }
        v247 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v247 = &off_1E69EE218;
        v247[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 168) = v415;
      v42 = CFDictionaryGetValue(v442, CFSTR("OutputVectorDescriptor"));
      v43 = v42;
      if (!v42)
      {
        v273 = 0;
        v414 = 0;
        v274 = *(NSObject ***)(a1 + 16);
        if (v274)
          v273 = *v274;
        if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 153;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v273, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary OutputVectorDescriptor.\"", v446, 0x18u);
        }
        v275 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v275 = &off_1E69EE218;
        v275[2] = -66741;
      }
      CFRetain(v42);
      v414 = v43;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v414, (applesauce::CF::DictionaryRef *)&v413);
      v44 = *(NSObject ***)(a1 + 16);
      if (v44)
      {
        v45 = *v44;
        if (!*v44)
        {
          v412 = 0;
          goto LABEL_115;
        }
      }
      else
      {
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 157;
        _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary OutputVectorDescriptor.", v446, 0x12u);
        v44 = *(NSObject ***)(a1 + 16);
      }
      v412 = 0;
      if (v44)
      {
        v46 = *v44;
        if (!*v44)
          goto LABEL_115;
      }
      else
      {
        v46 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 161;
        _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v446, 0x12u);
      }
LABEL_115:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v413, CFSTR("Size"), &v412))
      {
        v223 = *(NSObject ***)(a1 + 16);
        if (v223)
          v224 = *v223;
        else
          v224 = 0;
        if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 164;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v224, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary OutputVectorDescriptor.\"", v446, 0x18u);
        }
        v248 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v248 = &off_1E69EE218;
        v248[2] = -66741;
      }
      v47 = *a3 + 968 * i;
      *(_DWORD *)(v47 + 356) = 0x10000;
      v48 = v412;
      *(_QWORD *)(v47 + 360) = v412;
      *(_QWORD *)(v47 + 424) = 1;
      *(_DWORD *)v446 = 0;
      std::vector<float>::resize(v47 + 816, v48, v446);
      v49 = CFDictionaryGetValue(v413, CFSTR("DataType"));
      v50 = v49;
      if (!v49)
      {
        v276 = 0;
        v411 = 0;
        v277 = *(NSObject ***)(a1 + 16);
        if (v277)
          v276 = *v277;
        if (os_log_type_enabled(v276, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 176;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v276, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDataType_ref.get_cf() == nullptr is false]: \"Failed to retrieve output data type (DataType) from dictionary OutputVectorDescriptor.\"", v446, 0x18u);
        }
        v278 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v278 = &off_1E69EE218;
        v278[2] = -66741;
      }
      CFRetain(v49);
      v411 = v50;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v411, (applesauce::CF::StringRef *)&v410);
      v51 = *(NSObject ***)(a1 + 16);
      if (v51)
      {
        v52 = *v51;
        if (!*v51)
          goto LABEL_128;
      }
      else
      {
        v52 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v53 = CFCopyDescription(v410);
        applesauce::CF::details::CFString_get_value<true>(v53, (uint64_t)v435);
        if (v53)
          CFRelease(v53);
        v54 = v435;
        if (v436 < 0)
          v54 = (void **)v435[0];
        *(_DWORD *)v446 = 136315906;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 179;
        v449 = 2080;
        v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        LOWORD(v450.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output data type (%s) for Layer %u.", v446, 0x22u);
        if (v436 < 0)
          operator delete(v435[0]);
      }
LABEL_128:
      v55 = v410;
      if (v410)
        CFRetain(v410);
      v409 = v55;
      std::string::basic_string[abi:ne180100]<0>(v407, "float32");
      v56 = matchiString(&v409, (const UInt8 *)v407);
      if (v408 < 0)
        operator delete(v407[0]);
      if (v409)
        CFRelease(v409);
      if (!v56)
      {
        v279 = *(NSObject ***)(a1 + 16);
        if (v279)
          v280 = *v279;
        else
          v280 = 0;
        if (os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 189;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v280, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported output data type.\"", v446, 0x18u);
        }
        v310 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v310 = &off_1E69EE218;
        v310[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 496) = 65568;
      v406 = 1065353216;
      v57 = *(NSObject ***)(a1 + 16);
      if (v57)
      {
        v58 = *v57;
        if (!*v57)
          goto LABEL_141;
      }
      else
      {
        v58 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 194;
        _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v446, 0x12u);
      }
LABEL_141:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v413, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v406))
      {
        v225 = *(NSObject ***)(a1 + 16);
        if (v225)
          v226 = *v225;
        else
          v226 = 0;
        if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 197;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v226, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary OutputVectorDescriptor.\"", v446, 0x18u);
        }
        v249 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v249 = &off_1E69EE218;
        v249[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 516) = v406;
      v405 = 0;
      v59 = *(NSObject ***)(a1 + 16);
      if (v59)
      {
        v60 = *v59;
        if (!*v59)
          goto LABEL_148;
      }
      else
      {
        v60 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 203;
        _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v446, 0x12u);
      }
LABEL_148:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v413, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v405))
      {
        v227 = *(NSObject ***)(a1 + 16);
        if (v227)
          v228 = *v227;
        else
          v228 = 0;
        if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 206;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v228, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary OutputVectorDescriptor.\"", v446, 0x18u);
        }
        v250 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v250 = &off_1E69EE218;
        v250[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 520) = v405;
      v61 = CFDictionaryGetValue(v442, CFSTR("LayerDescriptor"));
      v62 = v61;
      if (!v61)
      {
        v404 = 0;
        v65 = *(NSObject ***)(a1 + 16);
        if (v65)
        {
          v66 = *v65;
          if (!*v65)
          {
LABEL_198:
            *(_DWORD *)(*a3 + 968 * i + 964) = 0;
            goto LABEL_199;
          }
        }
        else
        {
          v66 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 221;
          v449 = 2048;
          v450.__r_.__value_.__r.__words[0] = i;
          _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LayerDescriptor for layer %zu not found, using default fully connected layer.", v446, 0x1Cu);
        }
        goto LABEL_198;
      }
      CFRetain(v61);
      v404 = v62;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v404, (applesauce::CF::DictionaryRef *)&v403);
      v63 = *(NSObject ***)(a1 + 16);
      if (v63)
      {
        v64 = *v63;
        if (!*v63)
          goto LABEL_159;
      }
      else
      {
        v64 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 228;
        _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary LayerDescriptor.", v446, 0x12u);
      }
LABEL_159:
      v67 = CFDictionaryGetValue(v403, CFSTR("Type"));
      v68 = v67;
      if (!v67)
      {
        v307 = 0;
        v402 = 0;
        v308 = *(NSObject ***)(a1 + 16);
        if (v308)
          v307 = *v308;
        if (os_log_type_enabled(v307, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 233;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v307, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [layerType_ref.get_cf() == nullptr is false]: \"Failed to retrieve layer type (Type) from dictionary LayerDescriptor.\"", v446, 0x18u);
        }
        v309 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v309 = &off_1E69EE218;
        v309[2] = -66741;
      }
      CFRetain(v67);
      v402 = v68;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v402, (applesauce::CF::StringRef *)&v401);
      v69 = *(NSObject ***)(a1 + 16);
      if (!v69)
      {
        v70 = MEMORY[0x1E0C81028];
LABEL_164:
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          v71 = CFCopyDescription(v401);
          applesauce::CF::details::CFString_get_value<true>(v71, (uint64_t)v435);
          if (v71)
            CFRelease(v71);
          v72 = v435;
          if (v436 < 0)
            v72 = (void **)v435[0];
          *(_DWORD *)v446 = 136315906;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 237;
          v449 = 2080;
          v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
          LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = i;
          _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved Type (%s) for LayerDescriptor %zu.", v446, 0x26u);
          if (v436 < 0)
            operator delete(v435[0]);
        }
        goto LABEL_171;
      }
      v70 = *v69;
      if (*v69)
        goto LABEL_164;
LABEL_171:
      v73 = v401;
      if (v401)
        CFRetain(v401);
      v400 = v73;
      std::string::basic_string[abi:ne180100]<0>(v398, "FullyConnected");
      std::string::basic_string[abi:ne180100]<0>(v396, "Dense");
      v74 = matchiEither((CFTypeRef *)&v400, (uint64_t)v398, (uint64_t)v396);
      if (v397 < 0)
        operator delete(v396[0]);
      if (v399 < 0)
        operator delete(v398[0]);
      if (v400)
        CFRelease(v400);
      if ((v74 & 1) != 0)
      {
        v75 = 0;
      }
      else
      {
        v76 = v401;
        if (v401)
          CFRetain(v401);
        v395 = v76;
        std::string::basic_string[abi:ne180100]<0>(v393, "LSTM");
        v77 = matchiString(&v395, (const UInt8 *)v393);
        if (v394 < 0)
          operator delete(v393[0]);
        if (v395)
          CFRelease(v395);
        if (!v77)
        {
          v320 = *(NSObject ***)(a1 + 16);
          if (v320)
            v321 = *v320;
          else
            v321 = 0;
          if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v446 = 136315650;
            *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
            v447 = 1024;
            v448 = 250;
            v449 = 1024;
            LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
            _os_log_impl(&dword_1B5ED0000, v321, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported LayerType.\"", v446, 0x18u);
          }
          v322 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v322 = &off_1E69EE218;
          v322[2] = -66743;
        }
        v75 = 1;
      }
      *(_DWORD *)(*a3 + 968 * i + 964) = v75;
      if (v401)
        CFRelease(v401);
      if (v402)
        CFRelease(v402);
      if (v403)
        CFRelease(v403);
LABEL_199:
      v78 = (const __CFDictionary *)CFDictionaryGetValue(v442, CFSTR("Weights"));
      v79 = v78;
      if (!v78)
      {
        v283 = 0;
        v403 = 0;
        v284 = *(NSObject ***)(a1 + 16);
        if (v284)
          v283 = *v284;
        if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 262;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v283, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Weights.\"", v446, 0x18u);
        }
        v285 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v285 = &off_1E69EE218;
        v285[2] = -66741;
      }
      CFRetain(v78);
      v403 = v79;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef((const void **)&v403, (applesauce::CF::DictionaryRef *)&v402);
      v80 = *(NSObject ***)(a1 + 16);
      v327 = v10;
      if (v80)
      {
        v81 = *v80;
        if (!*v80)
          goto LABEL_206;
      }
      else
      {
        v81 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 266;
        _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Weights.", v446, 0x12u);
      }
LABEL_206:
      v82 = *(uint64_t ***)a1;
      v83 = *a3;
      v84 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v402, CFSTR("Data"));
      v85 = v84;
      if (!v84)
      {
        v281 = (NSObject **)*v82;
        if (*v82)
        {
          v282 = *v281;
          if (*v281)
            goto LABEL_714;
        }
        else
        {
          v282 = MEMORY[0x1E0C81028];
LABEL_714:
          if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
          {
            CStringPtr = CFStringGetCStringPtr(CFSTR("Data"), 0x8000100u);
            *(_DWORD *)v446 = 136315650;
            *(_QWORD *)&v446[4] = "DictionaryBlobReader.hpp";
            v447 = 1024;
            v448 = 95;
            v449 = 2080;
            v450.__r_.__value_.__r.__words[0] = (std::string::size_type)CStringPtr;
            _os_log_impl(&dword_1B5ED0000, v282, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to retrieve %s.", v446, 0x1Cu);
          }
        }
        v312 = *(NSObject ***)(a1 + 16);
        if (v312)
          v313 = *v312;
        else
          v313 = 0;
        if (os_log_type_enabled(v313, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 271;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v313, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Weights.\"", v446, 0x18u);
        }
        v319 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v319 = &off_1E69EE218;
        v319[2] = -66741;
      }
      Length = CFDataGetLength(v84);
      v87 = (void **)(v83 + 968 * i + 936);
      v88 = Length >> 1;
      v89 = *(_QWORD *)(v83 + 968 * i + 952);
      v90 = *v87;
      if (v88 <= (uint64_t)(v89 - (_QWORD)*v87) >> 1)
      {
        v97 = v83 + 968 * i;
        v98 = *(char **)(v97 + 944);
        v99 = (v98 - v90) >> 1;
        if (v99 >= v88)
          v100 = Length >> 1;
        else
          v100 = (v98 - v90) >> 1;
        if (v100)
        {
          v101 = *v87;
          do
          {
            *v101++ = 0;
            --v100;
          }
          while (v100);
        }
        v102 = (char **)(v97 + 944);
        if (v88 <= v99)
        {
          *v102 = &v90[2 * v88];
        }
        else
        {
          v103 = &v98[2 * (v88 - v99)];
          v104 = 2 * v88 - 2 * v99;
          do
          {
            *(_WORD *)v98 = 0;
            v98 += 2;
            v104 -= 2;
          }
          while (v104);
          *v102 = v103;
        }
      }
      else
      {
        if (v90)
        {
          *(_QWORD *)(v83 + 968 * i + 944) = v90;
          operator delete(v90);
          v89 = 0;
          *v87 = 0;
          *(_QWORD *)(v83 + 968 * i + 944) = 0;
          *(_QWORD *)(v83 + 968 * i + 952) = 0;
        }
        if (v89 <= v88)
          v91 = Length >> 1;
        else
          v91 = v89;
        if (v89 >= 0x7FFFFFFFFFFFFFFELL)
          v92 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        std::vector<short>::__vallocate[abi:ne180100]((_QWORD *)(v83 + 968 * i + 936), v92);
        v93 = (uint64_t *)(v83 + 968 * i + 944);
        v94 = (_WORD *)*v93;
        v95 = *v93 + 2 * v88;
        v96 = 2 * v88;
        do
        {
          *v94++ = 0;
          v96 -= 2;
        }
        while (v96);
        *v93 = v95;
      }
      BytePtr = CFDataGetBytePtr(v85);
      if (Length >= 2)
      {
        v106 = *v87;
        if (v88 <= 1)
          v107 = 1;
        else
          v107 = v88;
        do
        {
          v108 = *(_WORD *)BytePtr;
          BytePtr += 2;
          *v106++ = v108;
          --v107;
        }
        while (v107);
      }
      v109 = *a3;
      v110 = *a3 + 968 * i;
      v111 = *(_DWORD *)(v110 + 964);
      v112 = *(_QWORD *)(v110 + 360);
      v113 = v111 == 1;
      if (v111 == 1)
        v114 = *(_QWORD *)(v110 + 360);
      else
        v114 = 0;
      v115 = *(_QWORD *)(v110 + 8) + v114;
      if (v113)
        v112 *= 4;
      v116 = v112 * v115;
      v117 = *(_QWORD *)(v110 + 936);
      v118 = (*(_QWORD *)(v110 + 944) - v117) >> 1;
      if (v118 != v112 * v115)
      {
        v229 = *(NSObject ***)(a1 + 16);
        if (v229)
          v230 = *v229;
        else
          v230 = 0;
        if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136316162;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 280;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
          WORD2(v450.__r_.__value_.__r.__words[0]) = 2048;
          *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 6) = v118;
          HIWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
          v450.__r_.__value_.__r.__words[2] = v116;
          _os_log_impl(&dword_1B5ED0000, v230, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [nnLayers[i].mWeightsQuantized.size() != weightsNumberOfCoefficients is false]: \"Number of weights in Data (%lu) does not match the required number of weights (%lu).\"", v446, 0x2Cu);
        }
        v251 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v251 = &off_1E69EE218;
        v251[2] = -66743;
      }
      *(_DWORD *)(v110 + 180) = 0x20000;
      *(_QWORD *)(v110 + 184) = v115;
      *(_QWORD *)(v110 + 192) = v112;
      *(_QWORD *)(v110 + 248) = 1;
      *(_QWORD *)(v110 + 256) = v115;
      v119 = 4;
      if (v116 < 4)
        v119 = v116;
      *(_QWORD *)(v110 + 312) = v117;
      if (v119)
      {
        v120 = 0;
        while (2)
        {
          v121 = *(_DWORD *)(a1 + 8);
          HIDWORD(v122) = v121;
          LODWORD(v122) = v121;
          v123 = v109 + 968 * i;
          switch((v122 >> 3))
          {
            case 0u:
              v124 = *(_QWORD *)(a1 + 16);
              if (!v124)
                goto LABEL_268;
              if ((*(_BYTE *)(v124 + 8) & 1) == 0)
                goto LABEL_268;
              v125 = *(os_log_t *)v124;
              if (!*(_QWORD *)v124 || !os_log_type_enabled(*(os_log_t *)v124, OS_LOG_TYPE_DEBUG))
                goto LABEL_268;
              v126 = *(float *)(*(_QWORD *)(v123 + 312) + 4 * v120);
              *(_DWORD *)v446 = 136315906;
              *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
              v447 = 1024;
              v448 = 308;
              v449 = 2048;
              *(double *)&v450.__r_.__value_.__l.__data_ = v126;
              LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = v120;
              v127 = v125;
              v128 = "%25s:%-5d Successfully retrieved weights data (%g) at index (%zu).";
              v129 = 38;
              goto LABEL_267;
            case 1u:
              v136 = *(_QWORD *)(a1 + 16);
              if (!v136)
                goto LABEL_268;
              if ((*(_BYTE *)(v136 + 8) & 1) == 0)
                goto LABEL_268;
              v137 = *(os_log_t *)v136;
              if (!*(_QWORD *)v136 || !os_log_type_enabled(*(os_log_t *)v136, OS_LOG_TYPE_DEBUG))
                goto LABEL_268;
              v138 = *(char *)(*(_QWORD *)(v123 + 312) + v120);
              *(_DWORD *)v446 = 136315906;
              *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
              v447 = 1024;
              v448 = 296;
              v449 = 1024;
              LODWORD(v450.__r_.__value_.__l.__data_) = v138;
              WORD2(v450.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 6) = v120;
              v127 = v137;
              v128 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_266;
            case 2u:
              v130 = *(_QWORD *)(a1 + 16);
              if (!v130)
                goto LABEL_268;
              if ((*(_BYTE *)(v130 + 8) & 1) == 0)
                goto LABEL_268;
              v131 = *(os_log_t *)v130;
              if (!*(_QWORD *)v130 || !os_log_type_enabled(*(os_log_t *)v130, OS_LOG_TYPE_DEBUG))
                goto LABEL_268;
              v132 = *(char *)(*(_QWORD *)(v123 + 312) + 2 * v120);
              *(_DWORD *)v446 = 136315906;
              *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
              v447 = 1024;
              v448 = 300;
              v449 = 1024;
              LODWORD(v450.__r_.__value_.__l.__data_) = v132;
              WORD2(v450.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 6) = v120;
              v127 = v131;
              v128 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_266;
            case 4u:
              v133 = *(_QWORD *)(a1 + 16);
              if (!v133)
                goto LABEL_268;
              if ((*(_BYTE *)(v133 + 8) & 1) == 0)
                goto LABEL_268;
              v134 = *(os_log_t *)v133;
              if (!*(_QWORD *)v133 || !os_log_type_enabled(*(os_log_t *)v133, OS_LOG_TYPE_DEBUG))
                goto LABEL_268;
              v135 = *(char *)(*(_QWORD *)(v123 + 312) + 4 * v120);
              *(_DWORD *)v446 = 136315906;
              *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
              v447 = 1024;
              v448 = 304;
              v449 = 1024;
              LODWORD(v450.__r_.__value_.__l.__data_) = v135;
              WORD2(v450.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 6) = v120;
              v127 = v134;
              v128 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
LABEL_266:
              v129 = 34;
LABEL_267:
              _os_log_impl(&dword_1B5ED0000, v127, OS_LOG_TYPE_DEBUG, v128, v446, v129);
LABEL_268:
              ++v120;
              v109 = *a3;
              v139 = (uint64_t)(*(_QWORD *)(*a3 + 968 * i + 944) - *(_QWORD *)(*a3 + 968 * i + 936)) >> 1;
              if (v139 >= 4)
                v139 = 4;
              if (v120 >= v139)
                break;
              continue;
            default:
              v259 = *(NSObject ***)(a1 + 16);
              if (v259)
                v260 = *v259;
              else
                v260 = 0;
              if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v446 = 136315906;
                *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
                v447 = 1024;
                v448 = 312;
                v449 = 1024;
                LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
                WORD2(v450.__r_.__value_.__r.__words[0]) = 1024;
                *(_DWORD *)((char *)v450.__r_.__value_.__r.__words + 6) = v121;
                _os_log_impl(&dword_1B5ED0000, v260, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown quantization type (%u).\"", v446, 0x1Eu);
              }
              v261 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v261 = &off_1E69EE218;
              v261[2] = -66743;
          }
          break;
        }
      }
      v140 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v402, CFSTR("DataType"));
      v141 = v140;
      if (!v140)
      {
        v286 = 0;
        v401 = 0;
        v287 = *(NSObject ***)(a1 + 16);
        if (v287)
          v286 = *v287;
        if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 320;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v286, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDataType_ref.get_cf() == nullptr is false]: \"Missing DataType from dictionary Weights.\"", v446, 0x18u);
        }
        v288 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v288 = &off_1E69EE218;
        v288[2] = -66741;
      }
      CFRetain(v140);
      v401 = v141;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef((const void **)&v401, (applesauce::CF::StringRef *)&v392);
      v142 = *(NSObject ***)(a1 + 16);
      if (v142)
      {
        v143 = *v142;
        if (!*v142)
          goto LABEL_283;
      }
      else
      {
        v143 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
      {
        v144 = CFCopyDescription(v392);
        applesauce::CF::details::CFString_get_value<true>(v144, (uint64_t)v435);
        if (v144)
          CFRelease(v144);
        v145 = v435;
        if (v436 < 0)
          v145 = (void **)v435[0];
        *(_DWORD *)v446 = 136315906;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 324;
        v449 = 2080;
        v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
        LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v143, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved weights data type (%s) for Layer %zu.", v446, 0x26u);
        if (v436 < 0)
          operator delete(v435[0]);
      }
LABEL_283:
      v146 = *(_DWORD *)(a1 + 8);
      if (v146 == 8)
      {
        v147 = v392;
        if (v392)
          CFRetain(v392);
        v391 = v147;
        std::string::basic_string[abi:ne180100]<0>(v389, "int8");
        std::string::basic_string[abi:ne180100]<0>(v387, "SInt8");
        v148 = matchiEither((CFTypeRef *)&v391, (uint64_t)v389, (uint64_t)v387);
        if (v388 < 0)
          operator delete(v387[0]);
        if (v390 < 0)
          operator delete(v389[0]);
        if (v391)
          CFRelease(v391);
        v149 = 131080;
        if ((v148 & 1) != 0)
          goto LABEL_326;
        v146 = *(_DWORD *)(a1 + 8);
      }
      if (v146 == 16)
      {
        v150 = v392;
        if (v392)
          CFRetain(v392);
        v386 = v150;
        std::string::basic_string[abi:ne180100]<0>(v384, "int16");
        std::string::basic_string[abi:ne180100]<0>(v382, "SInt16");
        v151 = matchiEither((CFTypeRef *)&v386, (uint64_t)v384, (uint64_t)v382);
        if (v383 < 0)
          operator delete(v382[0]);
        if (v385 < 0)
          operator delete(v384[0]);
        if (v386)
          CFRelease(v386);
        if ((v151 & 1) != 0)
        {
          v149 = 131088;
          goto LABEL_326;
        }
        v146 = *(_DWORD *)(a1 + 8);
      }
      if (v146 == 32)
      {
        v152 = v392;
        if (v392)
          CFRetain(v392);
        v381 = v152;
        std::string::basic_string[abi:ne180100]<0>(v379, "int32");
        std::string::basic_string[abi:ne180100]<0>(v377, "SInt32");
        v153 = matchiEither((CFTypeRef *)&v381, (uint64_t)v379, (uint64_t)v377);
        if (v378 < 0)
          operator delete(v377[0]);
        if (v380 < 0)
          operator delete(v379[0]);
        if (v381)
          CFRelease(v381);
        if ((v153 & 1) != 0)
        {
          v149 = 131104;
          goto LABEL_326;
        }
        v146 = *(_DWORD *)(a1 + 8);
      }
      if (v146)
        goto LABEL_702;
      v154 = v392;
      if (v392)
        CFRetain(v392);
      v376 = v154;
      std::string::basic_string[abi:ne180100]<0>(v374, "float32");
      v155 = matchiString(&v376, (const UInt8 *)v374);
      if (v375 < 0)
        operator delete(v374[0]);
      if (v376)
        CFRelease(v376);
      v149 = 65568;
      if (!v155)
      {
LABEL_702:
        v305 = *(NSObject ***)(a1 + 16);
        if (v305)
          v306 = *v305;
        else
          v306 = 0;
        if (os_log_type_enabled(v306, OS_LOG_TYPE_ERROR))
        {
          v317 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v446 = 136315906;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 346;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
          WORD2(v450.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v450.__r_.__value_.__r.__words + 6) = v317;
          _os_log_impl(&dword_1B5ED0000, v306, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported weights data quantization type for Quantization (%u).\"", v446, 0x1Eu);
        }
        v318 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v318 = &off_1E69EE218;
        v318[2] = -66743;
      }
LABEL_326:
      *(_DWORD *)(*a3 + 968 * i + 320) = v149;
      v373 = 1065353216;
      v156 = *(NSObject ***)(a1 + 16);
      if (v156)
      {
        v157 = *v156;
        if (!*v156)
          goto LABEL_332;
      }
      else
      {
        v157 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 351;
        _os_log_impl(&dword_1B5ED0000, v157, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v446, 0x12u);
      }
LABEL_332:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v402, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v373))
      {
        v231 = *(NSObject ***)(a1 + 16);
        if (v231)
          v232 = *v231;
        else
          v232 = 0;
        if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 354;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v232, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Weights.\"", v446, 0x18u);
        }
        v252 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v252 = &off_1E69EE218;
        v252[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 340) = v373;
      v372 = 0;
      v158 = *(NSObject ***)(a1 + 16);
      if (v158)
      {
        v159 = *v158;
        if (!*v158)
          goto LABEL_339;
      }
      else
      {
        v159 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 360;
        _os_log_impl(&dword_1B5ED0000, v159, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v446, 0x12u);
      }
LABEL_339:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v402, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v372))
      {
        v233 = *(NSObject ***)(a1 + 16);
        if (v233)
          v234 = *v233;
        else
          v234 = 0;
        if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 363;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v234, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Weights.\"", v446, 0x18u);
        }
        v253 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v253 = &off_1E69EE218;
        v253[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 344) = v372;
      v160 = CFDictionaryGetValue(v442, CFSTR("Bias"));
      v161 = v160;
      if (!v160)
      {
        v289 = 0;
        v371 = 0;
        v290 = *(NSObject ***)(a1 + 16);
        if (v290)
          v289 = *v290;
        if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 374;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v289, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Bias from dictionary Weights.\"", v446, 0x18u);
        }
        v291 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v291 = &off_1E69EE218;
        v291[2] = -66741;
      }
      CFRetain(v160);
      v371 = v161;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v371, (applesauce::CF::DictionaryRef *)&v370);
      v162 = *(NSObject ***)(a1 + 16);
      if (v162)
      {
        v163 = *v162;
        if (!*v162)
          goto LABEL_347;
      }
      else
      {
        v163 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 378;
        _os_log_impl(&dword_1B5ED0000, v163, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Bias.", v446, 0x12u);
      }
LABEL_347:
      if (DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)a1, v370, CFSTR("Data"), (char **)(*a3 + 968 * i + 888)))
      {
        v235 = *(NSObject ***)(a1 + 16);
        if (v235)
          v236 = *v235;
        else
          v236 = 0;
        if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 383;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v236, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Bias.\"", v446, 0x18u);
        }
        v254 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v254 = &off_1E69EE218;
        v254[2] = -66741;
      }
      v164 = *a3;
      v165 = *a3 + 968 * i;
      *(_DWORD *)(v165 + 532) = 0x10000;
      v166 = *(_QWORD *)(v165 + 888);
      v167 = (*(_QWORD *)(v165 + 896) - v166) >> 2;
      *(_QWORD *)(v165 + 536) = v167;
      *(_QWORD *)(v165 + 600) = 1;
      *(_QWORD *)(v165 + 664) = v166;
      v168 = 4;
      if (v167 < 4)
        v168 = v167;
      if (v168)
      {
        for (j = 0; j < v173; ++j)
        {
          v170 = *(_QWORD *)(a1 + 16);
          if (v170)
          {
            if ((*(_BYTE *)(v170 + 8) & 1) != 0)
            {
              v171 = *(NSObject **)v170;
              if (*(_QWORD *)v170)
              {
                if (os_log_type_enabled(*(os_log_t *)v170, OS_LOG_TYPE_DEBUG))
                {
                  v172 = *(float *)(*(_QWORD *)(v164 + 968 * i + 664) + 4 * j);
                  *(_DWORD *)v446 = 136315906;
                  *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
                  v447 = 1024;
                  v448 = 394;
                  v449 = 2048;
                  *(double *)&v450.__r_.__value_.__l.__data_ = v172;
                  LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
                  *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = j;
                  _os_log_impl(&dword_1B5ED0000, v171, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data (%g) at index (%zu).", v446, 0x26u);
                  v164 = *a3;
                }
              }
            }
          }
          v173 = (uint64_t)(*(_QWORD *)(v164 + 968 * i + 896) - *(_QWORD *)(v164 + 968 * i + 888)) >> 2;
          if (v173 >= 4)
            v173 = 4;
        }
      }
      v174 = CFDictionaryGetValue(v370, CFSTR("DataType"));
      v175 = v174;
      if (!v174)
      {
        v292 = 0;
        v369 = 0;
        v293 = *(NSObject ***)(a1 + 16);
        if (v293)
          v292 = *v293;
        if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 401;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v292, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType from dictionary Weights.\"", v446, 0x18u);
        }
        v294 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v294 = &off_1E69EE218;
        v294[2] = -66741;
      }
      CFRetain(v174);
      v369 = v175;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v369, (applesauce::CF::StringRef *)&v368);
      v176 = *(NSObject ***)(a1 + 16);
      if (v176)
      {
        v177 = *v176;
        if (!*v176)
          goto LABEL_372;
      }
      else
      {
        v177 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG))
      {
        v178 = CFCopyDescription(v368);
        applesauce::CF::details::CFString_get_value<true>(v178, (uint64_t)v435);
        if (v178)
          CFRelease(v178);
        v179 = v435;
        if (v436 < 0)
          v179 = (void **)v435[0];
        *(_DWORD *)v446 = 136315906;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 405;
        v449 = 2080;
        v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
        LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v177, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data type (%s) for Layer %zu.", v446, 0x26u);
        if (v436 < 0)
          operator delete(v435[0]);
      }
LABEL_372:
      v180 = v368;
      if (v368)
        CFRetain(v368);
      v367 = v180;
      std::string::basic_string[abi:ne180100]<0>(v365, "float32");
      v181 = matchiString(&v367, (const UInt8 *)v365);
      if (v366 < 0)
        operator delete(v365[0]);
      if (v367)
        CFRelease(v367);
      if (!v181)
      {
        v295 = *(NSObject ***)(a1 + 16);
        if (v295)
          v296 = *v295;
        else
          v296 = 0;
        if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 414;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v296, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported bias data type.\"", v446, 0x18u);
        }
        v314 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v314 = &off_1E69EE218;
        v314[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 672) = 65568;
      v364 = 1065353216;
      v182 = *(NSObject ***)(a1 + 16);
      if (v182)
      {
        v183 = *v182;
        if (!*v182)
          goto LABEL_385;
      }
      else
      {
        v183 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 419;
        _os_log_impl(&dword_1B5ED0000, v183, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v446, 0x12u);
      }
LABEL_385:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v370, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v364))
      {
        v237 = *(NSObject ***)(a1 + 16);
        if (v237)
          v238 = *v237;
        else
          v238 = 0;
        if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 422;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v238, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Bias.\"", v446, 0x18u);
        }
        v255 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v255 = &off_1E69EE218;
        v255[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 692) = v364;
      v363 = 0;
      v184 = *(NSObject ***)(a1 + 16);
      if (v184)
      {
        v185 = *v184;
        if (!*v184)
          goto LABEL_392;
      }
      else
      {
        v185 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 428;
        _os_log_impl(&dword_1B5ED0000, v185, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v446, 0x12u);
      }
LABEL_392:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v370, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v363))
      {
        v239 = *(NSObject ***)(a1 + 16);
        if (v239)
          v240 = *v239;
        else
          v240 = 0;
        if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 431;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v240, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Bias.\"", v446, 0x18u);
        }
        v256 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v256 = &off_1E69EE218;
        v256[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 696) = v363;
      v186 = CFDictionaryGetValue(v442, CFSTR("Activation"));
      v187 = v186;
      if (!v186)
      {
        v300 = 0;
        v362 = 0;
        v301 = *(NSObject ***)(a1 + 16);
        if (v301)
          v300 = *v301;
        if (os_log_type_enabled(v300, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 443;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v300, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Activation.\"", v446, 0x18u);
        }
        v302 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v302 = &off_1E69EE218;
        v302[2] = -66741;
      }
      CFRetain(v186);
      v362 = v187;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v362, (applesauce::CF::DictionaryRef *)&v361);
      v188 = *(NSObject ***)(a1 + 16);
      if (v188)
      {
        v189 = *v188;
        if (!*v188)
          goto LABEL_400;
      }
      else
      {
        v189 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 447;
        _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Activation.", v446, 0x12u);
      }
LABEL_400:
      v190 = CFDictionaryGetValue(v361, CFSTR("Function"));
      v191 = v190;
      if (!v190)
      {
        v297 = 0;
        v360 = 0;
        v298 = *(NSObject ***)(a1 + 16);
        if (v298)
          v297 = *v298;
        if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 453;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v297, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationFunction_ref.get_cf() == nullptr is false]: \"Failed to retrieve activation function (Function) from dictionary Activation.\"", v446, 0x18u);
        }
        v299 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v299 = &off_1E69EE218;
        v299[2] = -66741;
      }
      CFRetain(v190);
      v360 = v191;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v360, (applesauce::CF::StringRef *)&v359);
      v192 = *(NSObject ***)(a1 + 16);
      if (v192)
      {
        v193 = *v192;
        if (!*v192)
          goto LABEL_412;
      }
      else
      {
        v193 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
      {
        v194 = CFCopyDescription(v359);
        applesauce::CF::details::CFString_get_value<true>(v194, (uint64_t)v435);
        if (v194)
          CFRelease(v194);
        v195 = v435;
        if (v436 < 0)
          v195 = (void **)v435[0];
        *(_DWORD *)v446 = 136315906;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 457;
        v449 = 2080;
        v450.__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
        LOWORD(v450.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v450.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v193, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved activation function (%s) for Layer %zu.", v446, 0x26u);
        if (v436 < 0)
          operator delete(v435[0]);
      }
LABEL_412:
      *(_DWORD *)(*a3 + 968 * i + 704) = 0;
      v196 = v359;
      if (v359)
        CFRetain(v359);
      v358 = v196;
      std::string::basic_string[abi:ne180100]<0>(v356, "Identity");
      std::string::basic_string[abi:ne180100]<0>(v354, "Linear");
      v197 = matchiEither((CFTypeRef *)&v358, (uint64_t)v356, (uint64_t)v354);
      if (v355 < 0)
        operator delete(v354[0]);
      if (v357 < 0)
        operator delete(v356[0]);
      if (v358)
        CFRelease(v358);
      if ((v197 & 1) != 0)
      {
        v198 = 0;
      }
      else
      {
        v199 = v359;
        if (v359)
          CFRetain(v359);
        v353 = v199;
        std::string::basic_string[abi:ne180100]<0>(v351, "RectifiedLinear");
        std::string::basic_string[abi:ne180100]<0>(v349, "ReLU");
        v200 = matchiEither((CFTypeRef *)&v353, (uint64_t)v351, (uint64_t)v349);
        if (v350 < 0)
          operator delete(v349[0]);
        if (v352 < 0)
          operator delete(v351[0]);
        if (v353)
          CFRelease(v353);
        if ((v200 & 1) != 0)
        {
          v198 = 1;
        }
        else
        {
          v201 = v359;
          if (v359)
            CFRetain(v359);
          v348 = v201;
          std::string::basic_string[abi:ne180100]<0>(v346, "LeakyRectifiedLinear");
          std::string::basic_string[abi:ne180100]<0>(v344, "LeakyReLU");
          v202 = matchiEither((CFTypeRef *)&v348, (uint64_t)v346, (uint64_t)v344);
          if (v345 < 0)
            operator delete(v344[0]);
          if (v347 < 0)
            operator delete(v346[0]);
          if (v348)
            CFRelease(v348);
          if ((v202 & 1) != 0)
          {
            v198 = 2;
          }
          else
          {
            v203 = v359;
            if (v359)
              CFRetain(v359);
            v343 = v203;
            std::string::basic_string[abi:ne180100]<0>(v341, "Sigmoid");
            v204 = matchiString(&v343, (const UInt8 *)v341);
            if (v342 < 0)
              operator delete(v341[0]);
            if (v343)
              CFRelease(v343);
            if (v204)
            {
              v198 = 3;
            }
            else
            {
              v205 = v359;
              if (v359)
                CFRetain(v359);
              cf = v205;
              std::string::basic_string[abi:ne180100]<0>(__p, "Tanh");
              v206 = matchiString((CFStringRef *)&cf, (const UInt8 *)__p);
              if (v339 < 0)
                operator delete(__p[0]);
              if (cf)
                CFRelease(cf);
              if (v206)
              {
                v198 = 4;
              }
              else
              {
                v207 = v359;
                if (v359)
                  CFRetain(v359);
                v337 = v207;
                std::string::basic_string[abi:ne180100]<0>(v335, "ScaledTanh");
                v208 = matchiString((CFStringRef *)&v337, (const UInt8 *)v335);
                if (v336 < 0)
                  operator delete(v335[0]);
                if (v337)
                  CFRelease(v337);
                if (v208)
                {
                  v198 = 5;
                }
                else
                {
                  v209 = v359;
                  if (v359)
                    CFRetain(v359);
                  v334 = v209;
                  std::string::basic_string[abi:ne180100]<0>(v332, "Abs");
                  v210 = matchiString((CFStringRef *)&v334, (const UInt8 *)v332);
                  if (v333 < 0)
                    operator delete(v332[0]);
                  if (v334)
                    CFRelease(v334);
                  if (v210)
                  {
                    v198 = 6;
                  }
                  else
                  {
                    v211 = v359;
                    if (v359)
                      CFRetain(v359);
                    v331 = v211;
                    std::string::basic_string[abi:ne180100]<0>(v329, "ELU");
                    v212 = matchiString((CFStringRef *)&v331, (const UInt8 *)v329);
                    if (v330 < 0)
                      operator delete(v329[0]);
                    if (v331)
                      CFRelease(v331);
                    if (!v212)
                    {
                      v323 = *(NSObject ***)(a1 + 16);
                      if (v323)
                        v324 = *v323;
                      else
                        v324 = 0;
                      if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v446 = 136315650;
                        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
                        v447 = 1024;
                        v448 = 496;
                        v449 = 1024;
                        LODWORD(v450.__r_.__value_.__l.__data_) = -66743;
                        _os_log_impl(&dword_1B5ED0000, v324, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported activation function.\"", v446, 0x18u);
                      }
                      v325 = __cxa_allocate_exception(0x10uLL);
                      *(_QWORD *)v325 = &off_1E69EE218;
                      v325[2] = -66743;
                    }
                    v198 = 7;
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(*a3 + 968 * i + 960) = v198;
      LODWORD(v435[0]) = 1065353216;
      v213 = *(NSObject ***)(a1 + 16);
      if (v213)
      {
        v214 = *v213;
        if (!*v213)
          goto LABEL_488;
      }
      else
      {
        v214 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v446 = 136315394;
        *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
        v447 = 1024;
        v448 = 501;
        _os_log_impl(&dword_1B5ED0000, v214, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v446, 0x12u);
      }
LABEL_488:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v361, CFSTR("Alpha"), kCFNumberFloat32Type, (float *)v435))
      {
        v241 = *(NSObject ***)(a1 + 16);
        if (v241)
          v242 = *v241;
        else
          v242 = 0;
        if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 504;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v242, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Alpha from dictionary Activation.\"", v446, 0x18u);
        }
        v257 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v257 = &off_1E69EE218;
        v257[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 708) = v435[0];
      v328 = 0;
      v215 = *(NSObject ***)(a1 + 16);
      if (!v215)
      {
        v216 = MEMORY[0x1E0C81028];
LABEL_493:
        if (os_log_type_enabled(v216, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v446 = 136315394;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 510;
          _os_log_impl(&dword_1B5ED0000, v216, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v446, 0x12u);
        }
        goto LABEL_495;
      }
      v216 = *v215;
      if (*v215)
        goto LABEL_493;
LABEL_495:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v361, CFSTR("Beta"), kCFNumberFloat32Type, (float *)&v328))
      {
        v243 = *(NSObject ***)(a1 + 16);
        if (v243)
          v244 = *v243;
        else
          v244 = 0;
        if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v446 = 136315650;
          *(_QWORD *)&v446[4] = "NeuralNetLoader.cpp";
          v447 = 1024;
          v448 = 513;
          v449 = 1024;
          LODWORD(v450.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v244, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Beta from dictionary Activation.\"", v446, 0x18u);
        }
        v258 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v258 = &off_1E69EE218;
        v258[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 712) = v328;
      if (v359)
        CFRelease(v359);
      if (v360)
        CFRelease(v360);
      if (v361)
        CFRelease(v361);
      if (v362)
        CFRelease(v362);
      if (v368)
        CFRelease(v368);
      if (v369)
        CFRelease(v369);
      if (v370)
        CFRelease(v370);
      if (v371)
        CFRelease(v371);
      if (v392)
        CFRelease(v392);
      if (v401)
        CFRelease(v401);
      if (v402)
        CFRelease(v402);
      if (v403)
        CFRelease(v403);
      if (v404)
        CFRelease(v404);
      if (v410)
        CFRelease(v410);
      if (v411)
        CFRelease(v411);
      if (v413)
        CFRelease(v413);
      if (v414)
        CFRelease(v414);
      if (v437)
        CFRelease(v437);
      if (v438)
        CFRelease(v438);
      if (v440)
        CFRelease(v440);
      if (v441)
        CFRelease(v441);
      if (v442)
        CFRelease(v442);
      if (v443)
        CFRelease(v443);
      CFRelease(v327);
      if (SHIBYTE(v445) < 0)
        operator delete((void *)v444);
    }
  }
}

void sub_1B6522BA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B652358C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6523530);
  JUMPOUT(0x1B6523454);
}

void sub_1B6523594(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6523530);
  JUMPOUT(0x1B6523454);
}

void sub_1B652359C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6523530);
  JUMPOUT(0x1B6523454);
}

void sub_1B65235A4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6523530);
  JUMPOUT(0x1B6523454);
}

void sub_1B65235AC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6523530);
  JUMPOUT(0x1B6523454);
}

void NeuralNetLoader<FullyConnectedLayerBNNS<int>>::loadLayers(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  unint64_t i;
  std::string *v6;
  __int128 v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  const void *Value;
  const void *v12;
  NSObject **v13;
  NSObject *v14;
  __int128 *v15;
  const void *v16;
  const void *v17;
  NSObject **v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  std::vector<int> *v23;
  const void *v24;
  const void *v25;
  NSObject **v26;
  NSObject *v27;
  const __CFString *v28;
  void **v29;
  int v30;
  const __CFString *v31;
  char v32;
  int v33;
  const __CFString *v34;
  char v35;
  const __CFString *v36;
  char v37;
  const __CFString *v38;
  BOOL v39;
  NSObject **v40;
  NSObject *v41;
  const void *v42;
  const void *v43;
  NSObject **v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  const void *v49;
  const void *v50;
  NSObject **v51;
  NSObject *v52;
  const __CFString *v53;
  void **v54;
  const __CFString *v55;
  _BOOL4 v56;
  NSObject **v57;
  NSObject *v58;
  NSObject **v59;
  NSObject *v60;
  const void *v61;
  const void *v62;
  NSObject **v63;
  NSObject *v64;
  NSObject **v65;
  NSObject *v66;
  const void *v67;
  const void *v68;
  NSObject **v69;
  NSObject *v70;
  const __CFString *v71;
  void **v72;
  const __CFString *v73;
  char v74;
  int v75;
  const __CFString *v76;
  BOOL v77;
  const __CFDictionary *v78;
  const __CFDictionary *v79;
  NSObject **v80;
  CFStringRef v81;
  NSObject *v82;
  uint64_t **v83;
  uint64_t v84;
  const __CFData *v85;
  const __CFData *v86;
  unsigned int Length;
  std::vector<int> *v88;
  unsigned int v89;
  const UInt8 *BytePtr;
  std::vector<int>::pointer begin;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  os_log_t v110;
  double v111;
  NSObject *v112;
  const char *v113;
  uint32_t v114;
  uint64_t v115;
  os_log_t v116;
  int v117;
  uint64_t v118;
  os_log_t v119;
  int v120;
  uint64_t v121;
  os_log_t v122;
  int v123;
  unint64_t v124;
  const __CFString *v125;
  const __CFString *v126;
  NSObject **v127;
  NSObject *v128;
  const __CFString *v129;
  void **v130;
  int v131;
  const __CFString *v132;
  char v133;
  int v134;
  const __CFString *v135;
  char v136;
  const __CFString *v137;
  char v138;
  const __CFString *v139;
  BOOL v140;
  NSObject **v141;
  NSObject *v142;
  NSObject **v143;
  NSObject *v144;
  const void *v145;
  const void *v146;
  NSObject **v147;
  NSObject *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t j;
  uint64_t v155;
  NSObject *v156;
  double v157;
  unint64_t v158;
  const void *v159;
  const void *v160;
  NSObject **v161;
  NSObject *v162;
  const __CFString *v163;
  void **v164;
  const __CFString *v165;
  _BOOL4 v166;
  NSObject **v167;
  NSObject *v168;
  NSObject **v169;
  NSObject *v170;
  const void *v171;
  const void *v172;
  NSObject **v173;
  NSObject *v174;
  const void *v175;
  const void *v176;
  NSObject **v177;
  NSObject *v178;
  const __CFString *v179;
  void **v180;
  const __CFString *v181;
  char v182;
  int v183;
  const __CFString *v184;
  char v185;
  const __CFString *v186;
  char v187;
  const __CFString *v188;
  BOOL v189;
  const __CFString *v190;
  BOOL v191;
  const __CFString *v192;
  BOOL v193;
  const __CFString *v194;
  BOOL v195;
  const __CFString *v196;
  BOOL v197;
  NSObject **v198;
  NSObject *v199;
  NSObject **v200;
  NSObject *v201;
  NSObject **v202;
  NSObject *v203;
  NSObject **v204;
  NSObject *v205;
  NSObject **v206;
  NSObject *v207;
  NSObject **v208;
  NSObject *v209;
  NSObject **v210;
  NSObject *v211;
  NSObject **v212;
  NSObject *v213;
  NSObject **v214;
  NSObject *v215;
  NSObject **v216;
  NSObject *v217;
  NSObject **v218;
  NSObject *v219;
  NSObject **v220;
  NSObject *v221;
  NSObject **v222;
  NSObject *v223;
  NSObject **v224;
  NSObject *v225;
  NSObject **v226;
  NSObject *v227;
  NSObject **v228;
  NSObject *v229;
  _DWORD *v230;
  _DWORD *v231;
  _DWORD *v232;
  _DWORD *v233;
  _DWORD *v234;
  _DWORD *v235;
  _DWORD *v236;
  _DWORD *v237;
  _DWORD *v238;
  _DWORD *v239;
  _DWORD *v240;
  _DWORD *v241;
  _DWORD *v242;
  _DWORD *v243;
  NSObject **v244;
  NSObject *v245;
  _DWORD *v246;
  std::runtime_error *exception;
  NSObject *v248;
  NSObject **v249;
  __int128 *v250;
  _DWORD *v251;
  NSObject *v252;
  NSObject **v253;
  _DWORD *v254;
  NSObject *v255;
  NSObject **v256;
  _DWORD *v257;
  NSObject *v258;
  NSObject **v259;
  _DWORD *v260;
  NSObject **v261;
  NSObject *v262;
  NSObject *v263;
  NSObject **v264;
  _DWORD *v265;
  NSObject *v266;
  NSObject **v267;
  _DWORD *v268;
  NSObject **v269;
  NSObject *v270;
  NSObject *v271;
  NSObject **v272;
  _DWORD *v273;
  NSObject *v274;
  NSObject **v275;
  _DWORD *v276;
  NSObject **v277;
  NSObject *v278;
  NSObject *v279;
  NSObject **v280;
  _DWORD *v281;
  NSObject *v282;
  NSObject **v283;
  _DWORD *v284;
  NSObject *v285;
  NSObject **v286;
  _DWORD *v287;
  NSObject **v288;
  NSObject *v289;
  NSObject **v290;
  NSObject *v291;
  NSObject *v292;
  NSObject **v293;
  _DWORD *v294;
  _DWORD *v295;
  const char *CStringPtr;
  NSObject **v297;
  NSObject *v298;
  _DWORD *v299;
  int v300;
  _DWORD *v301;
  int v302;
  _DWORD *v303;
  _DWORD *v304;
  NSObject **v305;
  NSObject *v306;
  _DWORD *v307;
  NSObject **v308;
  NSObject *v309;
  _DWORD *v310;
  int v312;
  void *v313[2];
  char v314;
  CFTypeRef v315;
  void *v316[2];
  char v317;
  CFTypeRef v318;
  void *v319[2];
  char v320;
  CFTypeRef v321;
  void *__p[2];
  char v323;
  CFTypeRef cf;
  void *v325[2];
  char v326;
  CFStringRef v327;
  void *v328[2];
  char v329;
  void *v330[2];
  char v331;
  const __CFString *v332;
  void *v333[2];
  char v334;
  void *v335[2];
  char v336;
  const __CFString *v337;
  void *v338[2];
  char v339;
  void *v340[2];
  char v341;
  const __CFString *v342;
  const __CFString *v343;
  const void *v344;
  const __CFDictionary *v345;
  const void *v346;
  int v347;
  int v348;
  void *v349[2];
  char v350;
  CFStringRef v351;
  const __CFString *v352;
  const void *v353;
  const __CFDictionary *v354;
  const void *v355;
  int v356;
  int v357;
  void *v358[2];
  char v359;
  CFStringRef v360;
  void *v361[2];
  char v362;
  void *v363[2];
  char v364;
  const __CFString *v365;
  void *v366[2];
  char v367;
  void *v368[2];
  char v369;
  const __CFString *v370;
  void *v371[2];
  char v372;
  void *v373[2];
  char v374;
  const __CFString *v375;
  const __CFString *v376;
  void *v377[2];
  char v378;
  CFStringRef v379;
  void *v380[2];
  char v381;
  void *v382[2];
  char v383;
  const __CFString *v384;
  const __CFString *v385;
  const void *v386;
  const __CFDictionary *v387;
  const void *v388;
  int v389;
  int v390;
  void *v391[2];
  char v392;
  CFStringRef v393;
  const __CFString *v394;
  const void *v395;
  unsigned int v396;
  const __CFDictionary *v397;
  const void *v398;
  int v399;
  int v400;
  void *v401[2];
  char v402;
  CFStringRef v403;
  void *v404[2];
  char v405;
  void *v406[2];
  char v407;
  const __CFString *v408;
  void *v409[2];
  char v410;
  void *v411[2];
  char v412;
  const __CFString *v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  const __CFString *v418;
  void *v419[2];
  char v420;
  const __CFString *v421;
  const void *v422;
  unsigned int v423;
  const __CFDictionary *v424;
  const void *v425;
  const __CFDictionary *v426;
  const void *v427;
  __int128 v428;
  int64_t v429;
  _BYTE v430[12];
  __int16 v431;
  int v432;
  __int16 v433;
  std::string v434;
  uint64_t v435;

  v435 = *MEMORY[0x1E0C80C00];
  if (a3[1] != *a3)
  {
    for (i = 0; i < 0x1B810ECF56BE69C9 * ((a3[1] - *a3) >> 3); ++i)
    {
      std::to_string((std::string *)v430, i);
      v6 = std::string::insert((std::string *)v430, 0, "Layer", 5uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v429 = v6->__r_.__value_.__r.__words[2];
      v428 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v434.__r_.__value_.__s.__data_[3] < 0)
        operator delete(*(void **)v430);
      if (v429 >= 0)
        v8 = (const UInt8 *)&v428;
      else
        v8 = (const UInt8 *)v428;
      if (v429 >= 0)
        v9 = HIBYTE(v429);
      else
        v9 = *((_QWORD *)&v428 + 1);
      v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      Value = CFDictionaryGetValue(a2, v10);
      v12 = Value;
      if (!Value)
      {
        v248 = 0;
        v427 = 0;
        v249 = *(NSObject ***)(a1 + 16);
        if (v249)
          v248 = *v249;
        if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
        {
          v250 = &v428;
          if (v429 < 0)
            v250 = (__int128 *)v428;
          *(_DWORD *)v430 = 136315906;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 60;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          WORD2(v434.__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 6) = (std::string::size_type)v250;
          _os_log_impl(&dword_1B5ED0000, v248, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [topLevelDict_ref.get_cf() == nullptr is false]: \"Missing dictionary: %s\"", v430, 0x22u);
        }
        v251 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v251 = &off_1E69EE218;
        v251[2] = -66741;
      }
      CFRetain(Value);
      v427 = v12;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v427, (applesauce::CF::DictionaryRef *)&v426);
      v13 = *(NSObject ***)(a1 + 16);
      if (v13)
      {
        v14 = *v13;
        if (!*v13)
          goto LABEL_21;
      }
      else
      {
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = &v428;
        if (v429 < 0)
          v15 = (__int128 *)v428;
        *(_DWORD *)v430 = 136315650;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 64;
        v433 = 2080;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", v430, 0x1Cu);
      }
LABEL_21:
      v16 = CFDictionaryGetValue(v426, CFSTR("InputVectorDescriptor"));
      v17 = v16;
      if (!v16)
      {
        v252 = 0;
        v425 = 0;
        v253 = *(NSObject ***)(a1 + 16);
        if (v253)
          v252 = *v253;
        if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 75;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v252, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary InputVectorDescriptor.\"", v430, 0x18u);
        }
        v254 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v254 = &off_1E69EE218;
        v254[2] = -66741;
      }
      CFRetain(v16);
      v425 = v17;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v425, (applesauce::CF::DictionaryRef *)&v424);
      v18 = *(NSObject ***)(a1 + 16);
      if (v18)
      {
        v19 = *v18;
        if (!*v18)
        {
          v423 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 79;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary InputVectorDescriptor.", v430, 0x12u);
        v18 = *(NSObject ***)(a1 + 16);
      }
      v423 = 0;
      if (v18)
      {
        v20 = *v18;
        if (!*v18)
          goto LABEL_34;
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 83;
        _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v430, 0x12u);
      }
LABEL_34:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v424, CFSTR("Size"), &v423))
      {
        v202 = *(NSObject ***)(a1 + 16);
        if (v202)
          v203 = *v202;
        else
          v203 = 0;
        if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 86;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v203, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary InputVectorDescriptor.\"", v430, 0x18u);
        }
        v230 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v230 = &off_1E69EE218;
        v230[2] = -66741;
      }
      v21 = *a3 + 968 * i;
      *(_DWORD *)(v21 + 4) = 0x10000;
      v22 = v423;
      *(_QWORD *)(v21 + 8) = v423;
      *(_QWORD *)(v21 + 72) = 1;
      *(_DWORD *)v430 = 0;
      std::vector<float>::resize(v21 + 792, v22, v430);
      v23 = (std::vector<int> *)(*a3 + 968 * i + 912);
      *(_DWORD *)v430 = 0;
      std::vector<int>::resize(v23, v423, (std::vector<int>::const_reference)v430);
      v24 = CFDictionaryGetValue(v424, CFSTR("DataType"));
      v25 = v24;
      if (!v24)
      {
        v255 = 0;
        v422 = 0;
        v256 = *(NSObject ***)(a1 + 16);
        if (v256)
          v255 = *v256;
        if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 98;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v255, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType.\"", v430, 0x18u);
        }
        v257 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v257 = &off_1E69EE218;
        v257[2] = -66741;
      }
      CFRetain(v24);
      v422 = v25;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v422, (applesauce::CF::StringRef *)&v421);
      v26 = *(NSObject ***)(a1 + 16);
      if (v26)
      {
        v27 = *v26;
        if (!*v26)
          goto LABEL_47;
      }
      else
      {
        v27 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = CFCopyDescription(v421);
        applesauce::CF::details::CFString_get_value<true>(v28, (uint64_t)v419);
        if (v28)
          CFRelease(v28);
        v29 = v419;
        if (v420 < 0)
          v29 = (void **)v419[0];
        *(_DWORD *)v430 = 136315906;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 102;
        v433 = 2080;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input data type (%s) for Layer %zu.", v430, 0x26u);
        if (v420 < 0)
          operator delete(v419[0]);
      }
LABEL_47:
      v30 = *(_DWORD *)(a1 + 8);
      if (v30 != 8)
        goto LABEL_59;
      v31 = v421;
      if (v421)
        CFRetain(v421);
      v418 = v31;
      std::string::basic_string[abi:ne180100]<0>(v416, "int8");
      std::string::basic_string[abi:ne180100]<0>(v414, "Sint8");
      v32 = matchiEither((CFTypeRef *)&v418, (uint64_t)v416, (uint64_t)v414);
      if (v415 < 0)
        operator delete(v414[0]);
      if ((v417 & 0x80000000) == 0)
      {
        if (!v31)
          goto LABEL_57;
LABEL_56:
        CFRelease(v31);
        goto LABEL_57;
      }
      operator delete(v416[0]);
      if (v31)
        goto LABEL_56;
LABEL_57:
      v33 = 131080;
      if ((v32 & 1) != 0)
        goto LABEL_94;
      v30 = *(_DWORD *)(a1 + 8);
LABEL_59:
      if (v30 != 16)
        goto LABEL_72;
      v34 = v421;
      if (v421)
        CFRetain(v421);
      v413 = v34;
      std::string::basic_string[abi:ne180100]<0>(v411, "int16");
      std::string::basic_string[abi:ne180100]<0>(v409, "SInt16");
      v35 = matchiEither((CFTypeRef *)&v413, (uint64_t)v411, (uint64_t)v409);
      if (v410 < 0)
        operator delete(v409[0]);
      if ((v412 & 0x80000000) == 0)
      {
        if (!v34)
          goto LABEL_69;
LABEL_68:
        CFRelease(v34);
        goto LABEL_69;
      }
      operator delete(v411[0]);
      if (v34)
        goto LABEL_68;
LABEL_69:
      if ((v35 & 1) != 0)
      {
        v33 = 131088;
        goto LABEL_94;
      }
      v30 = *(_DWORD *)(a1 + 8);
LABEL_72:
      if (v30 != 32)
        goto LABEL_85;
      v36 = v421;
      if (v421)
        CFRetain(v421);
      v408 = v36;
      std::string::basic_string[abi:ne180100]<0>(v406, "int32");
      std::string::basic_string[abi:ne180100]<0>(v404, "Sint32");
      v37 = matchiEither((CFTypeRef *)&v408, (uint64_t)v406, (uint64_t)v404);
      if (v405 < 0)
        operator delete(v404[0]);
      if ((v407 & 0x80000000) == 0)
      {
        if (!v36)
          goto LABEL_82;
LABEL_81:
        CFRelease(v36);
        goto LABEL_82;
      }
      operator delete(v406[0]);
      if (v36)
        goto LABEL_81;
LABEL_82:
      if ((v37 & 1) != 0)
      {
        v33 = 131104;
        goto LABEL_94;
      }
      v30 = *(_DWORD *)(a1 + 8);
LABEL_85:
      if (v30)
        goto LABEL_677;
      v38 = v421;
      if (v421)
        CFRetain(v421);
      v403 = v38;
      std::string::basic_string[abi:ne180100]<0>(v401, "float32");
      v39 = matchiString(&v403, (const UInt8 *)v401);
      if (v402 < 0)
      {
        operator delete(v401[0]);
        if (!v38)
          goto LABEL_93;
LABEL_92:
        CFRelease(v38);
        goto LABEL_93;
      }
      if (v38)
        goto LABEL_92;
LABEL_93:
      v33 = 65568;
      if (!v39)
      {
LABEL_677:
        v288 = *(NSObject ***)(a1 + 16);
        if (v288)
          v289 = *v288;
        else
          v289 = 0;
        if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
        {
          v300 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v430 = 136315906;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 124;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
          WORD2(v434.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v434.__r_.__value_.__r.__words + 6) = v300;
          _os_log_impl(&dword_1B5ED0000, v289, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported input data quantization type for Quantization (%u).\"", v430, 0x1Eu);
        }
        v301 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v301 = &off_1E69EE218;
        v301[2] = -66743;
      }
LABEL_94:
      *(_DWORD *)(*a3 + 968 * i + 144) = v33;
      v400 = 1065353216;
      v40 = *(NSObject ***)(a1 + 16);
      if (v40)
      {
        v41 = *v40;
        if (!*v40)
          goto LABEL_100;
      }
      else
      {
        v41 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 129;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v430, 0x12u);
      }
LABEL_100:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v424, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v400))
      {
        v204 = *(NSObject ***)(a1 + 16);
        if (v204)
          v205 = *v204;
        else
          v205 = 0;
        if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 132;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary InputVectorDescriptor.\"", v430, 0x18u);
        }
        v231 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v231 = &off_1E69EE218;
        v231[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 164) = v400;
      v399 = 0;
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v424, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v399))
      {
        v206 = *(NSObject ***)(a1 + 16);
        if (v206)
          v207 = *v206;
        else
          v207 = 0;
        if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 140;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary InputVectorDescriptor.\"", v430, 0x18u);
        }
        v232 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v232 = &off_1E69EE218;
        v232[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 168) = v399;
      v42 = CFDictionaryGetValue(v426, CFSTR("OutputVectorDescriptor"));
      v43 = v42;
      if (!v42)
      {
        v258 = 0;
        v398 = 0;
        v259 = *(NSObject ***)(a1 + 16);
        if (v259)
          v258 = *v259;
        if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 153;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v258, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary OutputVectorDescriptor.\"", v430, 0x18u);
        }
        v260 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v260 = &off_1E69EE218;
        v260[2] = -66741;
      }
      CFRetain(v42);
      v398 = v43;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v398, (applesauce::CF::DictionaryRef *)&v397);
      v44 = *(NSObject ***)(a1 + 16);
      if (v44)
      {
        v45 = *v44;
        if (!*v44)
        {
          v396 = 0;
          goto LABEL_115;
        }
      }
      else
      {
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 157;
        _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary OutputVectorDescriptor.", v430, 0x12u);
        v44 = *(NSObject ***)(a1 + 16);
      }
      v396 = 0;
      if (v44)
      {
        v46 = *v44;
        if (!*v44)
          goto LABEL_115;
      }
      else
      {
        v46 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 161;
        _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v430, 0x12u);
      }
LABEL_115:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v397, CFSTR("Size"), &v396))
      {
        v208 = *(NSObject ***)(a1 + 16);
        if (v208)
          v209 = *v208;
        else
          v209 = 0;
        if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 164;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v209, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary OutputVectorDescriptor.\"", v430, 0x18u);
        }
        v233 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v233 = &off_1E69EE218;
        v233[2] = -66741;
      }
      v47 = *a3 + 968 * i;
      *(_DWORD *)(v47 + 356) = 0x10000;
      v48 = v396;
      *(_QWORD *)(v47 + 360) = v396;
      *(_QWORD *)(v47 + 424) = 1;
      *(_DWORD *)v430 = 0;
      std::vector<float>::resize(v47 + 816, v48, v430);
      v49 = CFDictionaryGetValue(v397, CFSTR("DataType"));
      v50 = v49;
      if (!v49)
      {
        v263 = 0;
        v395 = 0;
        v264 = *(NSObject ***)(a1 + 16);
        if (v264)
          v263 = *v264;
        if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 176;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v263, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDataType_ref.get_cf() == nullptr is false]: \"Failed to retrieve output data type (DataType) from dictionary OutputVectorDescriptor.\"", v430, 0x18u);
        }
        v265 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v265 = &off_1E69EE218;
        v265[2] = -66741;
      }
      CFRetain(v49);
      v395 = v50;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v395, (applesauce::CF::StringRef *)&v394);
      v51 = *(NSObject ***)(a1 + 16);
      if (v51)
      {
        v52 = *v51;
        if (!*v51)
          goto LABEL_128;
      }
      else
      {
        v52 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v53 = CFCopyDescription(v394);
        applesauce::CF::details::CFString_get_value<true>(v53, (uint64_t)v419);
        if (v53)
          CFRelease(v53);
        v54 = v419;
        if (v420 < 0)
          v54 = (void **)v419[0];
        *(_DWORD *)v430 = 136315906;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 179;
        v433 = 2080;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        LOWORD(v434.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output data type (%s) for Layer %u.", v430, 0x22u);
        if (v420 < 0)
          operator delete(v419[0]);
      }
LABEL_128:
      v55 = v394;
      if (v394)
        CFRetain(v394);
      v393 = v55;
      std::string::basic_string[abi:ne180100]<0>(v391, "float32");
      v56 = matchiString(&v393, (const UInt8 *)v391);
      if (v392 < 0)
        operator delete(v391[0]);
      if (v393)
        CFRelease(v393);
      if (!v56)
      {
        v261 = *(NSObject ***)(a1 + 16);
        if (v261)
          v262 = *v261;
        else
          v262 = 0;
        if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 189;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v262, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported output data type.\"", v430, 0x18u);
        }
        v295 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v295 = &off_1E69EE218;
        v295[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 496) = 65568;
      v390 = 1065353216;
      v57 = *(NSObject ***)(a1 + 16);
      if (v57)
      {
        v58 = *v57;
        if (!*v57)
          goto LABEL_141;
      }
      else
      {
        v58 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 194;
        _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v430, 0x12u);
      }
LABEL_141:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v397, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v390))
      {
        v210 = *(NSObject ***)(a1 + 16);
        if (v210)
          v211 = *v210;
        else
          v211 = 0;
        if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 197;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary OutputVectorDescriptor.\"", v430, 0x18u);
        }
        v234 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v234 = &off_1E69EE218;
        v234[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 516) = v390;
      v389 = 0;
      v59 = *(NSObject ***)(a1 + 16);
      if (v59)
      {
        v60 = *v59;
        if (!*v59)
          goto LABEL_148;
      }
      else
      {
        v60 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 203;
        _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v430, 0x12u);
      }
LABEL_148:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v397, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v389))
      {
        v212 = *(NSObject ***)(a1 + 16);
        if (v212)
          v213 = *v212;
        else
          v213 = 0;
        if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 206;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v213, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary OutputVectorDescriptor.\"", v430, 0x18u);
        }
        v235 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v235 = &off_1E69EE218;
        v235[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 520) = v389;
      v61 = CFDictionaryGetValue(v426, CFSTR("LayerDescriptor"));
      v62 = v61;
      if (!v61)
      {
        v388 = 0;
        v65 = *(NSObject ***)(a1 + 16);
        if (v65)
        {
          v66 = *v65;
          if (!*v65)
          {
LABEL_198:
            *(_DWORD *)(*a3 + 968 * i + 964) = 0;
            goto LABEL_199;
          }
        }
        else
        {
          v66 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 221;
          v433 = 2048;
          v434.__r_.__value_.__r.__words[0] = i;
          _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LayerDescriptor for layer %zu not found, using default fully connected layer.", v430, 0x1Cu);
        }
        goto LABEL_198;
      }
      CFRetain(v61);
      v388 = v62;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v388, (applesauce::CF::DictionaryRef *)&v387);
      v63 = *(NSObject ***)(a1 + 16);
      if (v63)
      {
        v64 = *v63;
        if (!*v63)
          goto LABEL_159;
      }
      else
      {
        v64 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 228;
        _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary LayerDescriptor.", v430, 0x12u);
      }
LABEL_159:
      v67 = CFDictionaryGetValue(v387, CFSTR("Type"));
      v68 = v67;
      if (!v67)
      {
        v292 = 0;
        v386 = 0;
        v293 = *(NSObject ***)(a1 + 16);
        if (v293)
          v292 = *v293;
        if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 233;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v292, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [layerType_ref.get_cf() == nullptr is false]: \"Failed to retrieve layer type (Type) from dictionary LayerDescriptor.\"", v430, 0x18u);
        }
        v294 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v294 = &off_1E69EE218;
        v294[2] = -66741;
      }
      CFRetain(v67);
      v386 = v68;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v386, (applesauce::CF::StringRef *)&v385);
      v69 = *(NSObject ***)(a1 + 16);
      if (!v69)
      {
        v70 = MEMORY[0x1E0C81028];
LABEL_164:
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          v71 = CFCopyDescription(v385);
          applesauce::CF::details::CFString_get_value<true>(v71, (uint64_t)v419);
          if (v71)
            CFRelease(v71);
          v72 = v419;
          if (v420 < 0)
            v72 = (void **)v419[0];
          *(_DWORD *)v430 = 136315906;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 237;
          v433 = 2080;
          v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
          LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = i;
          _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved Type (%s) for LayerDescriptor %zu.", v430, 0x26u);
          if (v420 < 0)
            operator delete(v419[0]);
        }
        goto LABEL_171;
      }
      v70 = *v69;
      if (*v69)
        goto LABEL_164;
LABEL_171:
      v73 = v385;
      if (v385)
        CFRetain(v385);
      v384 = v73;
      std::string::basic_string[abi:ne180100]<0>(v382, "FullyConnected");
      std::string::basic_string[abi:ne180100]<0>(v380, "Dense");
      v74 = matchiEither((CFTypeRef *)&v384, (uint64_t)v382, (uint64_t)v380);
      if (v381 < 0)
        operator delete(v380[0]);
      if (v383 < 0)
        operator delete(v382[0]);
      if (v384)
        CFRelease(v384);
      if ((v74 & 1) != 0)
      {
        v75 = 0;
      }
      else
      {
        v76 = v385;
        if (v385)
          CFRetain(v385);
        v379 = v76;
        std::string::basic_string[abi:ne180100]<0>(v377, "LSTM");
        v77 = matchiString(&v379, (const UInt8 *)v377);
        if (v378 < 0)
          operator delete(v377[0]);
        if (v379)
          CFRelease(v379);
        if (!v77)
        {
          v305 = *(NSObject ***)(a1 + 16);
          if (v305)
            v306 = *v305;
          else
            v306 = 0;
          if (os_log_type_enabled(v306, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v430 = 136315650;
            *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
            v431 = 1024;
            v432 = 250;
            v433 = 1024;
            LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
            _os_log_impl(&dword_1B5ED0000, v306, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported LayerType.\"", v430, 0x18u);
          }
          v307 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v307 = &off_1E69EE218;
          v307[2] = -66743;
        }
        v75 = 1;
      }
      *(_DWORD *)(*a3 + 968 * i + 964) = v75;
      if (v385)
        CFRelease(v385);
      if (v386)
        CFRelease(v386);
      if (v387)
        CFRelease(v387);
LABEL_199:
      v78 = (const __CFDictionary *)CFDictionaryGetValue(v426, CFSTR("Weights"));
      v79 = v78;
      if (!v78)
      {
        v266 = 0;
        v387 = 0;
        v267 = *(NSObject ***)(a1 + 16);
        if (v267)
          v266 = *v267;
        if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 262;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v266, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Weights.\"", v430, 0x18u);
        }
        v268 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v268 = &off_1E69EE218;
        v268[2] = -66741;
      }
      CFRetain(v78);
      v387 = v79;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef((const void **)&v387, (applesauce::CF::DictionaryRef *)&v386);
      v80 = *(NSObject ***)(a1 + 16);
      if (v80)
      {
        v81 = v10;
        v82 = *v80;
        if (!*v80)
          goto LABEL_206;
      }
      else
      {
        v81 = v10;
        v82 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 266;
        _os_log_impl(&dword_1B5ED0000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Weights.", v430, 0x12u);
      }
LABEL_206:
      v83 = *(uint64_t ***)a1;
      v84 = *a3;
      v85 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v386, CFSTR("Data"));
      v86 = v85;
      if (!v85)
      {
        v269 = (NSObject **)*v83;
        if (*v83)
        {
          v270 = *v269;
          if (*v269)
            goto LABEL_691;
        }
        else
        {
          v270 = MEMORY[0x1E0C81028];
LABEL_691:
          if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
          {
            CStringPtr = CFStringGetCStringPtr(CFSTR("Data"), 0x8000100u);
            *(_DWORD *)v430 = 136315650;
            *(_QWORD *)&v430[4] = "DictionaryBlobReader.hpp";
            v431 = 1024;
            v432 = 95;
            v433 = 2080;
            v434.__r_.__value_.__r.__words[0] = (std::string::size_type)CStringPtr;
            _os_log_impl(&dword_1B5ED0000, v270, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to retrieve %s.", v430, 0x1Cu);
          }
        }
        v297 = *(NSObject ***)(a1 + 16);
        if (v297)
          v298 = *v297;
        else
          v298 = 0;
        if (os_log_type_enabled(v298, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 271;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v298, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Weights.\"", v430, 0x18u);
        }
        v304 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v304 = &off_1E69EE218;
        v304[2] = -66741;
      }
      Length = CFDataGetLength(v85);
      v88 = (std::vector<int> *)(v84 + 968 * i + 936);
      v89 = Length >> 2;
      *(_DWORD *)v430 = 0;
      std::vector<int>::assign(v88, Length >> 2, (std::vector<int>::const_reference)v430);
      BytePtr = CFDataGetBytePtr(v86);
      if (Length >= 4)
      {
        begin = v88->__begin_;
        if (v89 <= 1)
          v92 = 1;
        else
          v92 = v89;
        do
        {
          v93 = *(_DWORD *)BytePtr;
          BytePtr += 4;
          *begin++ = v93;
          --v92;
        }
        while (v92);
      }
      v94 = *a3;
      v95 = *a3 + 968 * i;
      v96 = *(_DWORD *)(v95 + 964);
      v97 = *(_QWORD *)(v95 + 360);
      v98 = v96 == 1;
      if (v96 == 1)
        v99 = *(_QWORD *)(v95 + 360);
      else
        v99 = 0;
      v100 = *(_QWORD *)(v95 + 8) + v99;
      if (v98)
        v97 *= 4;
      v101 = v97 * v100;
      v102 = *(_QWORD *)(v95 + 936);
      v103 = (*(_QWORD *)(v95 + 944) - v102) >> 2;
      if (v103 != v97 * v100)
      {
        v214 = *(NSObject ***)(a1 + 16);
        if (v214)
          v215 = *v214;
        else
          v215 = 0;
        if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136316162;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 280;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
          WORD2(v434.__r_.__value_.__r.__words[0]) = 2048;
          *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 6) = v103;
          HIWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
          v434.__r_.__value_.__r.__words[2] = v101;
          _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [nnLayers[i].mWeightsQuantized.size() != weightsNumberOfCoefficients is false]: \"Number of weights in Data (%lu) does not match the required number of weights (%lu).\"", v430, 0x2Cu);
        }
        v236 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v236 = &off_1E69EE218;
        v236[2] = -66743;
      }
      *(_DWORD *)(v95 + 180) = 0x20000;
      *(_QWORD *)(v95 + 184) = v100;
      *(_QWORD *)(v95 + 192) = v97;
      *(_QWORD *)(v95 + 248) = 1;
      *(_QWORD *)(v95 + 256) = v100;
      v104 = 4;
      if (v101 < 4)
        v104 = v101;
      *(_QWORD *)(v95 + 312) = v102;
      if (v104)
      {
        v105 = 0;
        while (2)
        {
          v106 = *(_DWORD *)(a1 + 8);
          HIDWORD(v107) = v106;
          LODWORD(v107) = v106;
          v108 = v94 + 968 * i;
          switch((v107 >> 3))
          {
            case 0u:
              v109 = *(_QWORD *)(a1 + 16);
              if (!v109)
                goto LABEL_245;
              if ((*(_BYTE *)(v109 + 8) & 1) == 0)
                goto LABEL_245;
              v110 = *(os_log_t *)v109;
              if (!*(_QWORD *)v109 || !os_log_type_enabled(*(os_log_t *)v109, OS_LOG_TYPE_DEBUG))
                goto LABEL_245;
              v111 = *(float *)(*(_QWORD *)(v108 + 312) + 4 * v105);
              *(_DWORD *)v430 = 136315906;
              *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
              v431 = 1024;
              v432 = 308;
              v433 = 2048;
              *(double *)&v434.__r_.__value_.__l.__data_ = v111;
              LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = v105;
              v112 = v110;
              v113 = "%25s:%-5d Successfully retrieved weights data (%g) at index (%zu).";
              v114 = 38;
              goto LABEL_244;
            case 1u:
              v121 = *(_QWORD *)(a1 + 16);
              if (!v121)
                goto LABEL_245;
              if ((*(_BYTE *)(v121 + 8) & 1) == 0)
                goto LABEL_245;
              v122 = *(os_log_t *)v121;
              if (!*(_QWORD *)v121 || !os_log_type_enabled(*(os_log_t *)v121, OS_LOG_TYPE_DEBUG))
                goto LABEL_245;
              v123 = *(char *)(*(_QWORD *)(v108 + 312) + v105);
              *(_DWORD *)v430 = 136315906;
              *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
              v431 = 1024;
              v432 = 296;
              v433 = 1024;
              LODWORD(v434.__r_.__value_.__l.__data_) = v123;
              WORD2(v434.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 6) = v105;
              v112 = v122;
              v113 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_243;
            case 2u:
              v115 = *(_QWORD *)(a1 + 16);
              if (!v115)
                goto LABEL_245;
              if ((*(_BYTE *)(v115 + 8) & 1) == 0)
                goto LABEL_245;
              v116 = *(os_log_t *)v115;
              if (!*(_QWORD *)v115 || !os_log_type_enabled(*(os_log_t *)v115, OS_LOG_TYPE_DEBUG))
                goto LABEL_245;
              v117 = *(char *)(*(_QWORD *)(v108 + 312) + 2 * v105);
              *(_DWORD *)v430 = 136315906;
              *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
              v431 = 1024;
              v432 = 300;
              v433 = 1024;
              LODWORD(v434.__r_.__value_.__l.__data_) = v117;
              WORD2(v434.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 6) = v105;
              v112 = v116;
              v113 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_243;
            case 4u:
              v118 = *(_QWORD *)(a1 + 16);
              if (!v118)
                goto LABEL_245;
              if ((*(_BYTE *)(v118 + 8) & 1) == 0)
                goto LABEL_245;
              v119 = *(os_log_t *)v118;
              if (!*(_QWORD *)v118 || !os_log_type_enabled(*(os_log_t *)v118, OS_LOG_TYPE_DEBUG))
                goto LABEL_245;
              v120 = *(char *)(*(_QWORD *)(v108 + 312) + 4 * v105);
              *(_DWORD *)v430 = 136315906;
              *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
              v431 = 1024;
              v432 = 304;
              v433 = 1024;
              LODWORD(v434.__r_.__value_.__l.__data_) = v120;
              WORD2(v434.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 6) = v105;
              v112 = v119;
              v113 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
LABEL_243:
              v114 = 34;
LABEL_244:
              _os_log_impl(&dword_1B5ED0000, v112, OS_LOG_TYPE_DEBUG, v113, v430, v114);
LABEL_245:
              ++v105;
              v94 = *a3;
              v124 = (uint64_t)(*(_QWORD *)(*a3 + 968 * i + 944) - *(_QWORD *)(*a3 + 968 * i + 936)) >> 2;
              if (v124 >= 4)
                v124 = 4;
              if (v105 >= v124)
                break;
              continue;
            default:
              v244 = *(NSObject ***)(a1 + 16);
              if (v244)
                v245 = *v244;
              else
                v245 = 0;
              if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v430 = 136315906;
                *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
                v431 = 1024;
                v432 = 312;
                v433 = 1024;
                LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
                WORD2(v434.__r_.__value_.__r.__words[0]) = 1024;
                *(_DWORD *)((char *)v434.__r_.__value_.__r.__words + 6) = v106;
                _os_log_impl(&dword_1B5ED0000, v245, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown quantization type (%u).\"", v430, 0x1Eu);
              }
              v246 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v246 = &off_1E69EE218;
              v246[2] = -66743;
          }
          break;
        }
      }
      v125 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v386, CFSTR("DataType"));
      v126 = v125;
      if (!v125)
      {
        v271 = 0;
        v385 = 0;
        v272 = *(NSObject ***)(a1 + 16);
        if (v272)
          v271 = *v272;
        if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 320;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v271, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDataType_ref.get_cf() == nullptr is false]: \"Missing DataType from dictionary Weights.\"", v430, 0x18u);
        }
        v273 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v273 = &off_1E69EE218;
        v273[2] = -66741;
      }
      CFRetain(v125);
      v385 = v126;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef((const void **)&v385, (applesauce::CF::StringRef *)&v376);
      v127 = *(NSObject ***)(a1 + 16);
      if (v127)
      {
        v128 = *v127;
        if (!*v127)
          goto LABEL_260;
      }
      else
      {
        v128 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
      {
        v129 = CFCopyDescription(v376);
        applesauce::CF::details::CFString_get_value<true>(v129, (uint64_t)v419);
        if (v129)
          CFRelease(v129);
        v130 = v419;
        if (v420 < 0)
          v130 = (void **)v419[0];
        *(_DWORD *)v430 = 136315906;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 324;
        v433 = 2080;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
        LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v128, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved weights data type (%s) for Layer %zu.", v430, 0x26u);
        if (v420 < 0)
          operator delete(v419[0]);
      }
LABEL_260:
      v131 = *(_DWORD *)(a1 + 8);
      if (v131 == 8)
      {
        v132 = v376;
        if (v376)
          CFRetain(v376);
        v375 = v132;
        std::string::basic_string[abi:ne180100]<0>(v373, "int8");
        std::string::basic_string[abi:ne180100]<0>(v371, "SInt8");
        v133 = matchiEither((CFTypeRef *)&v375, (uint64_t)v373, (uint64_t)v371);
        if (v372 < 0)
          operator delete(v371[0]);
        if (v374 < 0)
          operator delete(v373[0]);
        if (v375)
          CFRelease(v375);
        v134 = 131080;
        if ((v133 & 1) != 0)
          goto LABEL_303;
        v131 = *(_DWORD *)(a1 + 8);
      }
      if (v131 == 16)
      {
        v135 = v376;
        if (v376)
          CFRetain(v376);
        v370 = v135;
        std::string::basic_string[abi:ne180100]<0>(v368, "int16");
        std::string::basic_string[abi:ne180100]<0>(v366, "SInt16");
        v136 = matchiEither((CFTypeRef *)&v370, (uint64_t)v368, (uint64_t)v366);
        if (v367 < 0)
          operator delete(v366[0]);
        if (v369 < 0)
          operator delete(v368[0]);
        if (v370)
          CFRelease(v370);
        if ((v136 & 1) != 0)
        {
          v134 = 131088;
          goto LABEL_303;
        }
        v131 = *(_DWORD *)(a1 + 8);
      }
      if (v131 == 32)
      {
        v137 = v376;
        if (v376)
          CFRetain(v376);
        v365 = v137;
        std::string::basic_string[abi:ne180100]<0>(v363, "int32");
        std::string::basic_string[abi:ne180100]<0>(v361, "SInt32");
        v138 = matchiEither((CFTypeRef *)&v365, (uint64_t)v363, (uint64_t)v361);
        if (v362 < 0)
          operator delete(v361[0]);
        if (v364 < 0)
          operator delete(v363[0]);
        if (v365)
          CFRelease(v365);
        if ((v138 & 1) != 0)
        {
          v134 = 131104;
          goto LABEL_303;
        }
        v131 = *(_DWORD *)(a1 + 8);
      }
      if (v131)
        goto LABEL_679;
      v139 = v376;
      if (v376)
        CFRetain(v376);
      v360 = v139;
      std::string::basic_string[abi:ne180100]<0>(v358, "float32");
      v140 = matchiString(&v360, (const UInt8 *)v358);
      if (v359 < 0)
        operator delete(v358[0]);
      if (v360)
        CFRelease(v360);
      v134 = 65568;
      if (!v140)
      {
LABEL_679:
        v290 = *(NSObject ***)(a1 + 16);
        if (v290)
          v291 = *v290;
        else
          v291 = 0;
        if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
        {
          v302 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v430 = 136315906;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 346;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
          WORD2(v434.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v434.__r_.__value_.__r.__words + 6) = v302;
          _os_log_impl(&dword_1B5ED0000, v291, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported weights data quantization type for Quantization (%u).\"", v430, 0x1Eu);
        }
        v303 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v303 = &off_1E69EE218;
        v303[2] = -66743;
      }
LABEL_303:
      *(_DWORD *)(*a3 + 968 * i + 320) = v134;
      v357 = 1065353216;
      v141 = *(NSObject ***)(a1 + 16);
      if (v141)
      {
        v142 = *v141;
        if (!*v141)
          goto LABEL_309;
      }
      else
      {
        v142 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 351;
        _os_log_impl(&dword_1B5ED0000, v142, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v430, 0x12u);
      }
LABEL_309:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v386, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v357))
      {
        v216 = *(NSObject ***)(a1 + 16);
        if (v216)
          v217 = *v216;
        else
          v217 = 0;
        if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 354;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v217, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Weights.\"", v430, 0x18u);
        }
        v237 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v237 = &off_1E69EE218;
        v237[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 340) = v357;
      v356 = 0;
      v143 = *(NSObject ***)(a1 + 16);
      if (v143)
      {
        v144 = *v143;
        if (!*v143)
          goto LABEL_316;
      }
      else
      {
        v144 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 360;
        _os_log_impl(&dword_1B5ED0000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v430, 0x12u);
      }
LABEL_316:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v386, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v356))
      {
        v218 = *(NSObject ***)(a1 + 16);
        if (v218)
          v219 = *v218;
        else
          v219 = 0;
        if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 363;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Weights.\"", v430, 0x18u);
        }
        v238 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v238 = &off_1E69EE218;
        v238[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 344) = v356;
      v145 = CFDictionaryGetValue(v426, CFSTR("Bias"));
      v146 = v145;
      if (!v145)
      {
        v274 = 0;
        v355 = 0;
        v275 = *(NSObject ***)(a1 + 16);
        if (v275)
          v274 = *v275;
        if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 374;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v274, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Bias from dictionary Weights.\"", v430, 0x18u);
        }
        v276 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v276 = &off_1E69EE218;
        v276[2] = -66741;
      }
      CFRetain(v145);
      v355 = v146;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v355, (applesauce::CF::DictionaryRef *)&v354);
      v147 = *(NSObject ***)(a1 + 16);
      if (v147)
      {
        v148 = *v147;
        if (!*v147)
          goto LABEL_324;
      }
      else
      {
        v148 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 378;
        _os_log_impl(&dword_1B5ED0000, v148, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Bias.", v430, 0x12u);
      }
LABEL_324:
      if (DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)a1, v354, CFSTR("Data"), (char **)(*a3 + 968 * i + 888)))
      {
        v220 = *(NSObject ***)(a1 + 16);
        if (v220)
          v221 = *v220;
        else
          v221 = 0;
        if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 383;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v221, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Bias.\"", v430, 0x18u);
        }
        v239 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v239 = &off_1E69EE218;
        v239[2] = -66741;
      }
      v149 = *a3;
      v150 = *a3 + 968 * i;
      *(_DWORD *)(v150 + 532) = 0x10000;
      v151 = *(_QWORD *)(v150 + 888);
      v152 = (*(_QWORD *)(v150 + 896) - v151) >> 2;
      *(_QWORD *)(v150 + 536) = v152;
      *(_QWORD *)(v150 + 600) = 1;
      *(_QWORD *)(v150 + 664) = v151;
      v153 = 4;
      if (v152 < 4)
        v153 = v152;
      if (v153)
      {
        for (j = 0; j < v158; ++j)
        {
          v155 = *(_QWORD *)(a1 + 16);
          if (v155)
          {
            if ((*(_BYTE *)(v155 + 8) & 1) != 0)
            {
              v156 = *(NSObject **)v155;
              if (*(_QWORD *)v155)
              {
                if (os_log_type_enabled(*(os_log_t *)v155, OS_LOG_TYPE_DEBUG))
                {
                  v157 = *(float *)(*(_QWORD *)(v149 + 968 * i + 664) + 4 * j);
                  *(_DWORD *)v430 = 136315906;
                  *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
                  v431 = 1024;
                  v432 = 394;
                  v433 = 2048;
                  *(double *)&v434.__r_.__value_.__l.__data_ = v157;
                  LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
                  *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = j;
                  _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data (%g) at index (%zu).", v430, 0x26u);
                  v149 = *a3;
                }
              }
            }
          }
          v158 = (uint64_t)(*(_QWORD *)(v149 + 968 * i + 896) - *(_QWORD *)(v149 + 968 * i + 888)) >> 2;
          if (v158 >= 4)
            v158 = 4;
        }
      }
      v159 = CFDictionaryGetValue(v354, CFSTR("DataType"));
      v160 = v159;
      if (!v159)
      {
        v279 = 0;
        v353 = 0;
        v280 = *(NSObject ***)(a1 + 16);
        if (v280)
          v279 = *v280;
        if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 401;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v279, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType from dictionary Weights.\"", v430, 0x18u);
        }
        v281 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v281 = &off_1E69EE218;
        v281[2] = -66741;
      }
      CFRetain(v159);
      v353 = v160;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v353, (applesauce::CF::StringRef *)&v352);
      v161 = *(NSObject ***)(a1 + 16);
      if (v161)
      {
        v162 = *v161;
        if (!*v161)
          goto LABEL_349;
      }
      else
      {
        v162 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
      {
        v163 = CFCopyDescription(v352);
        applesauce::CF::details::CFString_get_value<true>(v163, (uint64_t)v419);
        if (v163)
          CFRelease(v163);
        v164 = v419;
        if (v420 < 0)
          v164 = (void **)v419[0];
        *(_DWORD *)v430 = 136315906;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 405;
        v433 = 2080;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
        LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v162, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data type (%s) for Layer %zu.", v430, 0x26u);
        if (v420 < 0)
          operator delete(v419[0]);
      }
LABEL_349:
      v165 = v352;
      if (v352)
        CFRetain(v352);
      v351 = v165;
      std::string::basic_string[abi:ne180100]<0>(v349, "float32");
      v166 = matchiString(&v351, (const UInt8 *)v349);
      if (v350 < 0)
        operator delete(v349[0]);
      if (v351)
        CFRelease(v351);
      if (!v166)
      {
        v277 = *(NSObject ***)(a1 + 16);
        if (v277)
          v278 = *v277;
        else
          v278 = 0;
        if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 414;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v278, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported bias data type.\"", v430, 0x18u);
        }
        v299 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v299 = &off_1E69EE218;
        v299[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 672) = 65568;
      v348 = 1065353216;
      v167 = *(NSObject ***)(a1 + 16);
      if (v167)
      {
        v168 = *v167;
        if (!*v167)
          goto LABEL_362;
      }
      else
      {
        v168 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 419;
        _os_log_impl(&dword_1B5ED0000, v168, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v430, 0x12u);
      }
LABEL_362:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v354, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v348))
      {
        v222 = *(NSObject ***)(a1 + 16);
        if (v222)
          v223 = *v222;
        else
          v223 = 0;
        if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 422;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v223, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Bias.\"", v430, 0x18u);
        }
        v240 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v240 = &off_1E69EE218;
        v240[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 692) = v348;
      v347 = 0;
      v169 = *(NSObject ***)(a1 + 16);
      if (v169)
      {
        v170 = *v169;
        if (!*v169)
          goto LABEL_369;
      }
      else
      {
        v170 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 428;
        _os_log_impl(&dword_1B5ED0000, v170, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v430, 0x12u);
      }
LABEL_369:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v354, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v347))
      {
        v224 = *(NSObject ***)(a1 + 16);
        if (v224)
          v225 = *v224;
        else
          v225 = 0;
        if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 431;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v225, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Bias.\"", v430, 0x18u);
        }
        v241 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v241 = &off_1E69EE218;
        v241[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 696) = v347;
      v171 = CFDictionaryGetValue(v426, CFSTR("Activation"));
      v172 = v171;
      if (!v171)
      {
        v282 = 0;
        v346 = 0;
        v283 = *(NSObject ***)(a1 + 16);
        if (v283)
          v282 = *v283;
        if (os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 443;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v282, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Activation.\"", v430, 0x18u);
        }
        v284 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v284 = &off_1E69EE218;
        v284[2] = -66741;
      }
      CFRetain(v171);
      v346 = v172;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v346, (applesauce::CF::DictionaryRef *)&v345);
      v173 = *(NSObject ***)(a1 + 16);
      if (v173)
      {
        v174 = *v173;
        if (!*v173)
          goto LABEL_377;
      }
      else
      {
        v174 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 447;
        _os_log_impl(&dword_1B5ED0000, v174, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Activation.", v430, 0x12u);
      }
LABEL_377:
      v175 = CFDictionaryGetValue(v345, CFSTR("Function"));
      v176 = v175;
      if (!v175)
      {
        v285 = 0;
        v344 = 0;
        v286 = *(NSObject ***)(a1 + 16);
        if (v286)
          v285 = *v286;
        if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 453;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v285, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationFunction_ref.get_cf() == nullptr is false]: \"Failed to retrieve activation function (Function) from dictionary Activation.\"", v430, 0x18u);
        }
        v287 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v287 = &off_1E69EE218;
        v287[2] = -66741;
      }
      CFRetain(v175);
      v344 = v176;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v344, (applesauce::CF::StringRef *)&v343);
      v177 = *(NSObject ***)(a1 + 16);
      if (v177)
      {
        v178 = *v177;
        if (!*v177)
          goto LABEL_389;
      }
      else
      {
        v178 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
      {
        v179 = CFCopyDescription(v343);
        applesauce::CF::details::CFString_get_value<true>(v179, (uint64_t)v419);
        if (v179)
          CFRelease(v179);
        v180 = v419;
        if (v420 < 0)
          v180 = (void **)v419[0];
        *(_DWORD *)v430 = 136315906;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 457;
        v433 = 2080;
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v180;
        LOWORD(v434.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v434.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v178, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved activation function (%s) for Layer %zu.", v430, 0x26u);
        if (v420 < 0)
          operator delete(v419[0]);
      }
LABEL_389:
      *(_DWORD *)(*a3 + 968 * i + 704) = 0;
      v181 = v343;
      if (v343)
        CFRetain(v343);
      v342 = v181;
      std::string::basic_string[abi:ne180100]<0>(v340, "Identity");
      std::string::basic_string[abi:ne180100]<0>(v338, "Linear");
      v182 = matchiEither((CFTypeRef *)&v342, (uint64_t)v340, (uint64_t)v338);
      if (v339 < 0)
        operator delete(v338[0]);
      if (v341 < 0)
        operator delete(v340[0]);
      if (v342)
        CFRelease(v342);
      if ((v182 & 1) != 0)
      {
        v183 = 0;
      }
      else
      {
        v184 = v343;
        if (v343)
          CFRetain(v343);
        v337 = v184;
        std::string::basic_string[abi:ne180100]<0>(v335, "RectifiedLinear");
        std::string::basic_string[abi:ne180100]<0>(v333, "ReLU");
        v185 = matchiEither((CFTypeRef *)&v337, (uint64_t)v335, (uint64_t)v333);
        if (v334 < 0)
          operator delete(v333[0]);
        if (v336 < 0)
          operator delete(v335[0]);
        if (v337)
          CFRelease(v337);
        if ((v185 & 1) != 0)
        {
          v183 = 1;
        }
        else
        {
          v186 = v343;
          if (v343)
            CFRetain(v343);
          v332 = v186;
          std::string::basic_string[abi:ne180100]<0>(v330, "LeakyRectifiedLinear");
          std::string::basic_string[abi:ne180100]<0>(v328, "LeakyReLU");
          v187 = matchiEither((CFTypeRef *)&v332, (uint64_t)v330, (uint64_t)v328);
          if (v329 < 0)
            operator delete(v328[0]);
          if (v331 < 0)
            operator delete(v330[0]);
          if (v332)
            CFRelease(v332);
          if ((v187 & 1) != 0)
          {
            v183 = 2;
          }
          else
          {
            v188 = v343;
            if (v343)
              CFRetain(v343);
            v327 = v188;
            std::string::basic_string[abi:ne180100]<0>(v325, "Sigmoid");
            v189 = matchiString(&v327, (const UInt8 *)v325);
            if (v326 < 0)
              operator delete(v325[0]);
            if (v327)
              CFRelease(v327);
            if (v189)
            {
              v183 = 3;
            }
            else
            {
              v190 = v343;
              if (v343)
                CFRetain(v343);
              cf = v190;
              std::string::basic_string[abi:ne180100]<0>(__p, "Tanh");
              v191 = matchiString((CFStringRef *)&cf, (const UInt8 *)__p);
              if (v323 < 0)
                operator delete(__p[0]);
              if (cf)
                CFRelease(cf);
              if (v191)
              {
                v183 = 4;
              }
              else
              {
                v192 = v343;
                if (v343)
                  CFRetain(v343);
                v321 = v192;
                std::string::basic_string[abi:ne180100]<0>(v319, "ScaledTanh");
                v193 = matchiString((CFStringRef *)&v321, (const UInt8 *)v319);
                if (v320 < 0)
                  operator delete(v319[0]);
                if (v321)
                  CFRelease(v321);
                if (v193)
                {
                  v183 = 5;
                }
                else
                {
                  v194 = v343;
                  if (v343)
                    CFRetain(v343);
                  v318 = v194;
                  std::string::basic_string[abi:ne180100]<0>(v316, "Abs");
                  v195 = matchiString((CFStringRef *)&v318, (const UInt8 *)v316);
                  if (v317 < 0)
                    operator delete(v316[0]);
                  if (v318)
                    CFRelease(v318);
                  if (v195)
                  {
                    v183 = 6;
                  }
                  else
                  {
                    v196 = v343;
                    if (v343)
                      CFRetain(v343);
                    v315 = v196;
                    std::string::basic_string[abi:ne180100]<0>(v313, "ELU");
                    v197 = matchiString((CFStringRef *)&v315, (const UInt8 *)v313);
                    if (v314 < 0)
                      operator delete(v313[0]);
                    if (v315)
                      CFRelease(v315);
                    if (!v197)
                    {
                      v308 = *(NSObject ***)(a1 + 16);
                      if (v308)
                        v309 = *v308;
                      else
                        v309 = 0;
                      if (os_log_type_enabled(v309, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v430 = 136315650;
                        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
                        v431 = 1024;
                        v432 = 496;
                        v433 = 1024;
                        LODWORD(v434.__r_.__value_.__l.__data_) = -66743;
                        _os_log_impl(&dword_1B5ED0000, v309, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported activation function.\"", v430, 0x18u);
                      }
                      v310 = __cxa_allocate_exception(0x10uLL);
                      *(_QWORD *)v310 = &off_1E69EE218;
                      v310[2] = -66743;
                    }
                    v183 = 7;
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(*a3 + 968 * i + 960) = v183;
      LODWORD(v419[0]) = 1065353216;
      v198 = *(NSObject ***)(a1 + 16);
      if (v198)
      {
        v199 = *v198;
        if (!*v198)
          goto LABEL_465;
      }
      else
      {
        v199 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v430 = 136315394;
        *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
        v431 = 1024;
        v432 = 501;
        _os_log_impl(&dword_1B5ED0000, v199, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v430, 0x12u);
      }
LABEL_465:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v345, CFSTR("Alpha"), kCFNumberFloat32Type, (float *)v419))
      {
        v226 = *(NSObject ***)(a1 + 16);
        if (v226)
          v227 = *v226;
        else
          v227 = 0;
        if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 504;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v227, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Alpha from dictionary Activation.\"", v430, 0x18u);
        }
        v242 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v242 = &off_1E69EE218;
        v242[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 708) = v419[0];
      v312 = 0;
      v200 = *(NSObject ***)(a1 + 16);
      if (!v200)
      {
        v201 = MEMORY[0x1E0C81028];
LABEL_470:
        if (os_log_type_enabled(v201, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v430 = 136315394;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 510;
          _os_log_impl(&dword_1B5ED0000, v201, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v430, 0x12u);
        }
        goto LABEL_472;
      }
      v201 = *v200;
      if (*v200)
        goto LABEL_470;
LABEL_472:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v345, CFSTR("Beta"), kCFNumberFloat32Type, (float *)&v312))
      {
        v228 = *(NSObject ***)(a1 + 16);
        if (v228)
          v229 = *v228;
        else
          v229 = 0;
        if (os_log_type_enabled(v229, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v430 = 136315650;
          *(_QWORD *)&v430[4] = "NeuralNetLoader.cpp";
          v431 = 1024;
          v432 = 513;
          v433 = 1024;
          LODWORD(v434.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v229, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Beta from dictionary Activation.\"", v430, 0x18u);
        }
        v243 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v243 = &off_1E69EE218;
        v243[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 712) = v312;
      if (v343)
        CFRelease(v343);
      if (v344)
        CFRelease(v344);
      if (v345)
        CFRelease(v345);
      if (v346)
        CFRelease(v346);
      if (v352)
        CFRelease(v352);
      if (v353)
        CFRelease(v353);
      if (v354)
        CFRelease(v354);
      if (v355)
        CFRelease(v355);
      if (v376)
        CFRelease(v376);
      if (v385)
        CFRelease(v385);
      if (v386)
        CFRelease(v386);
      if (v387)
        CFRelease(v387);
      if (v388)
        CFRelease(v388);
      if (v394)
        CFRelease(v394);
      if (v395)
        CFRelease(v395);
      if (v397)
        CFRelease(v397);
      if (v398)
        CFRelease(v398);
      if (v421)
        CFRelease(v421);
      if (v422)
        CFRelease(v422);
      if (v424)
        CFRelease(v424);
      if (v425)
        CFRelease(v425);
      if (v426)
        CFRelease(v426);
      if (v427)
        CFRelease(v427);
      CFRelease(v81);
      if (SHIBYTE(v429) < 0)
        operator delete((void *)v428);
    }
  }
}

void sub_1B6527278(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B6527C5C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6527C00);
  JUMPOUT(0x1B6527B24);
}

void sub_1B6527C64(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6527C00);
  JUMPOUT(0x1B6527B24);
}

void sub_1B6527C6C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6527C00);
  JUMPOUT(0x1B6527B24);
}

void sub_1B6527C74(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6527C00);
  JUMPOUT(0x1B6527B24);
}

void sub_1B6527C7C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B6527C00);
  JUMPOUT(0x1B6527B24);
}

void NeuralNetLoader<FullyConnectedLayerBNNS<float>>::loadLayers(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  unint64_t i;
  std::string *v6;
  __int128 v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  const void *Value;
  const void *v12;
  NSObject **v13;
  NSObject *v14;
  __int128 *v15;
  const void *v16;
  const void *v17;
  NSObject **v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  NSObject **v26;
  NSObject *v27;
  const __CFString *v28;
  void **v29;
  int v30;
  const __CFString *v31;
  char v32;
  int v33;
  const __CFString *v34;
  char v35;
  const __CFString *v36;
  char v37;
  const __CFString *v38;
  BOOL v39;
  NSObject **v40;
  NSObject *v41;
  const void *v42;
  const void *v43;
  NSObject **v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  const void *v49;
  const void *v50;
  NSObject **v51;
  NSObject *v52;
  const __CFString *v53;
  void **v54;
  const __CFString *v55;
  _BOOL4 v56;
  NSObject **v57;
  NSObject *v58;
  NSObject **v59;
  NSObject *v60;
  const void *v61;
  const void *v62;
  NSObject **v63;
  NSObject *v64;
  NSObject **v65;
  NSObject *v66;
  const void *v67;
  const void *v68;
  NSObject **v69;
  NSObject *v70;
  const __CFString *v71;
  void **v72;
  const __CFString *v73;
  char v74;
  int v75;
  const __CFString *v76;
  BOOL v77;
  const __CFDictionary *v78;
  const __CFDictionary *v79;
  NSObject **v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_t v98;
  double v99;
  NSObject *v100;
  const char *v101;
  uint32_t v102;
  uint64_t v103;
  os_log_t v104;
  int v105;
  uint64_t v106;
  os_log_t v107;
  int v108;
  uint64_t v109;
  os_log_t v110;
  int v111;
  unint64_t v112;
  const __CFString *v113;
  const __CFString *v114;
  NSObject **v115;
  NSObject *v116;
  const __CFString *v117;
  void **v118;
  int v119;
  const __CFString *v120;
  char v121;
  int v122;
  const __CFString *v123;
  char v124;
  const __CFString *v125;
  char v126;
  const __CFString *v127;
  BOOL v128;
  NSObject **v129;
  NSObject *v130;
  NSObject **v131;
  NSObject *v132;
  const void *v133;
  const void *v134;
  NSObject **v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t j;
  uint64_t v143;
  NSObject *v144;
  double v145;
  unint64_t v146;
  const void *v147;
  const void *v148;
  NSObject **v149;
  NSObject *v150;
  const __CFString *v151;
  void **v152;
  const __CFString *v153;
  _BOOL4 v154;
  NSObject **v155;
  NSObject *v156;
  NSObject **v157;
  NSObject *v158;
  const void *v159;
  const void *v160;
  NSObject **v161;
  NSObject *v162;
  const void *v163;
  const void *v164;
  NSObject **v165;
  NSObject *v166;
  const __CFString *v167;
  void **v168;
  const __CFString *v169;
  char v170;
  int v171;
  const __CFString *v172;
  char v173;
  const __CFString *v174;
  char v175;
  const __CFString *v176;
  BOOL v177;
  const __CFString *v178;
  BOOL v179;
  const __CFString *v180;
  BOOL v181;
  const __CFString *v182;
  BOOL v183;
  const __CFString *v184;
  BOOL v185;
  NSObject **v186;
  NSObject *v187;
  NSObject **v188;
  NSObject *v189;
  NSObject **v190;
  NSObject *v191;
  NSObject **v192;
  NSObject *v193;
  NSObject **v194;
  NSObject *v195;
  NSObject **v196;
  NSObject *v197;
  NSObject **v198;
  NSObject *v199;
  NSObject **v200;
  NSObject *v201;
  NSObject **v202;
  NSObject *v203;
  NSObject **v204;
  NSObject *v205;
  NSObject **v206;
  NSObject *v207;
  NSObject **v208;
  NSObject *v209;
  NSObject **v210;
  NSObject *v211;
  NSObject **v212;
  NSObject *v213;
  NSObject **v214;
  NSObject *v215;
  NSObject **v216;
  NSObject *v217;
  NSObject **v218;
  NSObject *v219;
  _DWORD *v220;
  _DWORD *v221;
  _DWORD *v222;
  _DWORD *v223;
  _DWORD *v224;
  _DWORD *v225;
  _DWORD *v226;
  _DWORD *v227;
  _DWORD *v228;
  _DWORD *v229;
  _DWORD *v230;
  _DWORD *v231;
  _DWORD *v232;
  _DWORD *v233;
  _DWORD *v234;
  NSObject **v235;
  NSObject *v236;
  _DWORD *v237;
  NSObject *v238;
  NSObject **v239;
  _DWORD *v240;
  std::runtime_error *exception;
  NSObject *v242;
  NSObject **v243;
  __int128 *v244;
  _DWORD *v245;
  NSObject *v246;
  NSObject **v247;
  _DWORD *v248;
  NSObject *v249;
  NSObject **v250;
  _DWORD *v251;
  NSObject *v252;
  NSObject **v253;
  _DWORD *v254;
  NSObject **v255;
  NSObject *v256;
  NSObject *v257;
  NSObject **v258;
  _DWORD *v259;
  NSObject *v260;
  NSObject **v261;
  _DWORD *v262;
  NSObject *v263;
  NSObject **v264;
  _DWORD *v265;
  NSObject *v266;
  NSObject **v267;
  _DWORD *v268;
  NSObject **v269;
  NSObject *v270;
  NSObject *v271;
  NSObject **v272;
  _DWORD *v273;
  NSObject *v274;
  NSObject **v275;
  _DWORD *v276;
  NSObject **v277;
  NSObject *v278;
  NSObject **v279;
  NSObject *v280;
  NSObject *v281;
  NSObject **v282;
  _DWORD *v283;
  _DWORD *v284;
  _DWORD *v285;
  int v286;
  _DWORD *v287;
  int v288;
  _DWORD *v289;
  NSObject **v290;
  NSObject *v291;
  _DWORD *v292;
  NSObject **v293;
  NSObject *v294;
  _DWORD *v295;
  CFStringRef v297;
  int v298;
  void *v299[2];
  char v300;
  CFTypeRef v301;
  void *v302[2];
  char v303;
  CFTypeRef v304;
  void *v305[2];
  char v306;
  CFTypeRef v307;
  void *__p[2];
  char v309;
  CFTypeRef cf;
  void *v311[2];
  char v312;
  CFStringRef v313;
  void *v314[2];
  char v315;
  void *v316[2];
  char v317;
  const __CFString *v318;
  void *v319[2];
  char v320;
  void *v321[2];
  char v322;
  const __CFString *v323;
  void *v324[2];
  char v325;
  void *v326[2];
  char v327;
  const __CFString *v328;
  const __CFString *v329;
  const void *v330;
  const __CFDictionary *v331;
  const void *v332;
  int v333;
  int v334;
  void *v335[2];
  char v336;
  CFStringRef v337;
  const __CFString *v338;
  const void *v339;
  const __CFDictionary *v340;
  const void *v341;
  int v342;
  int v343;
  void *v344[2];
  char v345;
  CFStringRef v346;
  void *v347[2];
  char v348;
  void *v349[2];
  char v350;
  const __CFString *v351;
  void *v352[2];
  char v353;
  void *v354[2];
  char v355;
  const __CFString *v356;
  void *v357[2];
  char v358;
  void *v359[2];
  char v360;
  const __CFString *v361;
  const __CFString *v362;
  void *v363[2];
  char v364;
  CFStringRef v365;
  void *v366[2];
  char v367;
  void *v368[2];
  char v369;
  const __CFString *v370;
  const __CFString *v371;
  const void *v372;
  const __CFDictionary *v373;
  const void *v374;
  int v375;
  int v376;
  void *v377[2];
  char v378;
  CFStringRef v379;
  const __CFString *v380;
  const void *v381;
  unsigned int v382;
  const __CFDictionary *v383;
  const void *v384;
  int v385;
  int v386;
  void *v387[2];
  char v388;
  CFStringRef v389;
  void *v390[2];
  char v391;
  void *v392[2];
  char v393;
  const __CFString *v394;
  void *v395[2];
  char v396;
  void *v397[2];
  char v398;
  const __CFString *v399;
  void *v400[2];
  char v401;
  void *v402[2];
  char v403;
  const __CFString *v404;
  void *v405[2];
  char v406;
  const __CFString *v407;
  const void *v408;
  unsigned int v409;
  const __CFDictionary *v410;
  const void *v411;
  const __CFDictionary *v412;
  const void *v413;
  __int128 v414;
  int64_t v415;
  _BYTE v416[12];
  __int16 v417;
  int v418;
  __int16 v419;
  std::string v420;
  uint64_t v421;

  v421 = *MEMORY[0x1E0C80C00];
  if (a3[1] != *a3)
  {
    for (i = 0; i < 0x1B810ECF56BE69C9 * ((a3[1] - *a3) >> 3); ++i)
    {
      std::to_string((std::string *)v416, i);
      v6 = std::string::insert((std::string *)v416, 0, "Layer", 5uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v415 = v6->__r_.__value_.__r.__words[2];
      v414 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v420.__r_.__value_.__s.__data_[3] < 0)
        operator delete(*(void **)v416);
      if (v415 >= 0)
        v8 = (const UInt8 *)&v414;
      else
        v8 = (const UInt8 *)v414;
      if (v415 >= 0)
        v9 = HIBYTE(v415);
      else
        v9 = *((_QWORD *)&v414 + 1);
      v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      Value = CFDictionaryGetValue(a2, v10);
      v12 = Value;
      v297 = v10;
      if (!Value)
      {
        v242 = 0;
        v413 = 0;
        v243 = *(NSObject ***)(a1 + 16);
        if (v243)
          v242 = *v243;
        if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
        {
          v244 = &v414;
          if (v415 < 0)
            v244 = (__int128 *)v414;
          *(_DWORD *)v416 = 136315906;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 60;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          WORD2(v420.__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)v420.__r_.__value_.__r.__words + 6) = (std::string::size_type)v244;
          _os_log_impl(&dword_1B5ED0000, v242, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [topLevelDict_ref.get_cf() == nullptr is false]: \"Missing dictionary: %s\"", v416, 0x22u);
        }
        v245 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v245 = &off_1E69EE218;
        v245[2] = -66741;
      }
      CFRetain(Value);
      v413 = v12;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v413, (applesauce::CF::DictionaryRef *)&v412);
      v13 = *(NSObject ***)(a1 + 16);
      if (v13)
      {
        v14 = *v13;
        if (!*v13)
          goto LABEL_21;
      }
      else
      {
        v14 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = &v414;
        if (v415 < 0)
          v15 = (__int128 *)v414;
        *(_DWORD *)v416 = 136315650;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 64;
        v419 = 2080;
        v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        _os_log_impl(&dword_1B5ED0000, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", v416, 0x1Cu);
      }
LABEL_21:
      v16 = CFDictionaryGetValue(v412, CFSTR("InputVectorDescriptor"));
      v17 = v16;
      if (!v16)
      {
        v238 = 0;
        v411 = 0;
        v239 = *(NSObject ***)(a1 + 16);
        if (v239)
          v238 = *v239;
        if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 75;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v238, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary InputVectorDescriptor.\"", v416, 0x18u);
        }
        v240 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v240 = &off_1E69EE218;
        v240[2] = -66741;
      }
      CFRetain(v16);
      v411 = v17;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v411, (applesauce::CF::DictionaryRef *)&v410);
      v18 = *(NSObject ***)(a1 + 16);
      if (v18)
      {
        v19 = *v18;
        if (!*v18)
        {
          v409 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 79;
        _os_log_impl(&dword_1B5ED0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary InputVectorDescriptor.", v416, 0x12u);
        v18 = *(NSObject ***)(a1 + 16);
      }
      v409 = 0;
      if (v18)
      {
        v20 = *v18;
        if (!*v18)
          goto LABEL_34;
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 83;
        _os_log_impl(&dword_1B5ED0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v416, 0x12u);
      }
LABEL_34:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v410, CFSTR("Size"), &v409))
      {
        v190 = *(NSObject ***)(a1 + 16);
        if (v190)
          v191 = *v190;
        else
          v191 = 0;
        if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 86;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v191, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary InputVectorDescriptor.\"", v416, 0x18u);
        }
        v220 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v220 = &off_1E69EE218;
        v220[2] = -66741;
      }
      v21 = *a3 + 968 * i;
      *(_DWORD *)(v21 + 4) = 0x10000;
      v22 = v409;
      *(_QWORD *)(v21 + 8) = v409;
      *(_QWORD *)(v21 + 72) = 1;
      *(_DWORD *)v416 = 0;
      std::vector<float>::resize(v21 + 792, v22, v416);
      v23 = *a3 + 968 * i + 912;
      *(_DWORD *)v416 = 0;
      std::vector<float>::resize(v23, v409, v416);
      v24 = CFDictionaryGetValue(v410, CFSTR("DataType"));
      v25 = v24;
      if (!v24)
      {
        v246 = 0;
        v408 = 0;
        v247 = *(NSObject ***)(a1 + 16);
        if (v247)
          v246 = *v247;
        if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 98;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v246, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [inputDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType.\"", v416, 0x18u);
        }
        v248 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v248 = &off_1E69EE218;
        v248[2] = -66741;
      }
      CFRetain(v24);
      v408 = v25;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v408, (applesauce::CF::StringRef *)&v407);
      v26 = *(NSObject ***)(a1 + 16);
      if (v26)
      {
        v27 = *v26;
        if (!*v26)
          goto LABEL_47;
      }
      else
      {
        v27 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = CFCopyDescription(v407);
        applesauce::CF::details::CFString_get_value<true>(v28, (uint64_t)v405);
        if (v28)
          CFRelease(v28);
        v29 = v405;
        if (v406 < 0)
          v29 = (void **)v405[0];
        *(_DWORD *)v416 = 136315906;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 102;
        v419 = 2080;
        v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved input data type (%s) for Layer %zu.", v416, 0x26u);
        if (v406 < 0)
          operator delete(v405[0]);
      }
LABEL_47:
      v30 = *(_DWORD *)(a1 + 8);
      if (v30 != 8)
        goto LABEL_59;
      v31 = v407;
      if (v407)
        CFRetain(v407);
      v404 = v31;
      std::string::basic_string[abi:ne180100]<0>(v402, "int8");
      std::string::basic_string[abi:ne180100]<0>(v400, "Sint8");
      v32 = matchiEither((CFTypeRef *)&v404, (uint64_t)v402, (uint64_t)v400);
      if (v401 < 0)
        operator delete(v400[0]);
      if ((v403 & 0x80000000) == 0)
      {
        if (!v31)
          goto LABEL_57;
LABEL_56:
        CFRelease(v31);
        goto LABEL_57;
      }
      operator delete(v402[0]);
      if (v31)
        goto LABEL_56;
LABEL_57:
      v33 = 131080;
      if ((v32 & 1) != 0)
        goto LABEL_94;
      v30 = *(_DWORD *)(a1 + 8);
LABEL_59:
      if (v30 != 16)
        goto LABEL_72;
      v34 = v407;
      if (v407)
        CFRetain(v407);
      v399 = v34;
      std::string::basic_string[abi:ne180100]<0>(v397, "int16");
      std::string::basic_string[abi:ne180100]<0>(v395, "SInt16");
      v35 = matchiEither((CFTypeRef *)&v399, (uint64_t)v397, (uint64_t)v395);
      if (v396 < 0)
        operator delete(v395[0]);
      if ((v398 & 0x80000000) == 0)
      {
        if (!v34)
          goto LABEL_69;
LABEL_68:
        CFRelease(v34);
        goto LABEL_69;
      }
      operator delete(v397[0]);
      if (v34)
        goto LABEL_68;
LABEL_69:
      if ((v35 & 1) != 0)
      {
        v33 = 131088;
        goto LABEL_94;
      }
      v30 = *(_DWORD *)(a1 + 8);
LABEL_72:
      if (v30 != 32)
        goto LABEL_85;
      v36 = v407;
      if (v407)
        CFRetain(v407);
      v394 = v36;
      std::string::basic_string[abi:ne180100]<0>(v392, "int32");
      std::string::basic_string[abi:ne180100]<0>(v390, "Sint32");
      v37 = matchiEither((CFTypeRef *)&v394, (uint64_t)v392, (uint64_t)v390);
      if (v391 < 0)
        operator delete(v390[0]);
      if ((v393 & 0x80000000) == 0)
      {
        if (!v36)
          goto LABEL_82;
LABEL_81:
        CFRelease(v36);
        goto LABEL_82;
      }
      operator delete(v392[0]);
      if (v36)
        goto LABEL_81;
LABEL_82:
      if ((v37 & 1) != 0)
      {
        v33 = 131104;
        goto LABEL_94;
      }
      v30 = *(_DWORD *)(a1 + 8);
LABEL_85:
      if (v30)
        goto LABEL_678;
      v38 = v407;
      if (v407)
        CFRetain(v407);
      v389 = v38;
      std::string::basic_string[abi:ne180100]<0>(v387, "float32");
      v39 = matchiString(&v389, (const UInt8 *)v387);
      if (v388 < 0)
      {
        operator delete(v387[0]);
        if (!v38)
          goto LABEL_93;
LABEL_92:
        CFRelease(v38);
        goto LABEL_93;
      }
      if (v38)
        goto LABEL_92;
LABEL_93:
      v33 = 65568;
      if (!v39)
      {
LABEL_678:
        v277 = *(NSObject ***)(a1 + 16);
        if (v277)
          v278 = *v277;
        else
          v278 = 0;
        if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
        {
          v286 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v416 = 136315906;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 124;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
          WORD2(v420.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v420.__r_.__value_.__r.__words + 6) = v286;
          _os_log_impl(&dword_1B5ED0000, v278, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported input data quantization type for Quantization (%u).\"", v416, 0x1Eu);
        }
        v287 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v287 = &off_1E69EE218;
        v287[2] = -66743;
      }
LABEL_94:
      *(_DWORD *)(*a3 + 968 * i + 144) = v33;
      v386 = 1065353216;
      v40 = *(NSObject ***)(a1 + 16);
      if (v40)
      {
        v41 = *v40;
        if (!*v40)
          goto LABEL_100;
      }
      else
      {
        v41 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 129;
        _os_log_impl(&dword_1B5ED0000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from inputDescDict.", v416, 0x12u);
      }
LABEL_100:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v410, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v386))
      {
        v192 = *(NSObject ***)(a1 + 16);
        if (v192)
          v193 = *v192;
        else
          v193 = 0;
        if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 132;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary InputVectorDescriptor.\"", v416, 0x18u);
        }
        v221 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v221 = &off_1E69EE218;
        v221[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 164) = v386;
      v385 = 0;
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v410, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v385))
      {
        v194 = *(NSObject ***)(a1 + 16);
        if (v194)
          v195 = *v194;
        else
          v195 = 0;
        if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 140;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v195, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary InputVectorDescriptor.\"", v416, 0x18u);
        }
        v222 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v222 = &off_1E69EE218;
        v222[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 168) = v385;
      v42 = CFDictionaryGetValue(v412, CFSTR("OutputVectorDescriptor"));
      v43 = v42;
      if (!v42)
      {
        v249 = 0;
        v384 = 0;
        v250 = *(NSObject ***)(a1 + 16);
        if (v250)
          v249 = *v250;
        if (os_log_type_enabled(v249, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 153;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v249, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDescDict_ref.get_cf() == nullptr is false]: \"Missing dictionary OutputVectorDescriptor.\"", v416, 0x18u);
        }
        v251 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v251 = &off_1E69EE218;
        v251[2] = -66741;
      }
      CFRetain(v42);
      v384 = v43;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v384, (applesauce::CF::DictionaryRef *)&v383);
      v44 = *(NSObject ***)(a1 + 16);
      if (v44)
      {
        v45 = *v44;
        if (!*v44)
        {
          v382 = 0;
          goto LABEL_115;
        }
      }
      else
      {
        v45 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 157;
        _os_log_impl(&dword_1B5ED0000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary OutputVectorDescriptor.", v416, 0x12u);
        v44 = *(NSObject ***)(a1 + 16);
      }
      v382 = 0;
      if (v44)
      {
        v46 = *v44;
        if (!*v44)
          goto LABEL_115;
      }
      else
      {
        v46 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 161;
        _os_log_impl(&dword_1B5ED0000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v416, 0x12u);
      }
LABEL_115:
      if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)a1, v383, CFSTR("Size"), &v382))
      {
        v196 = *(NSObject ***)(a1 + 16);
        if (v196)
          v197 = *v196;
        else
          v197 = 0;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 164;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v197, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Size from dictionary OutputVectorDescriptor.\"", v416, 0x18u);
        }
        v223 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v223 = &off_1E69EE218;
        v223[2] = -66741;
      }
      v47 = *a3 + 968 * i;
      *(_DWORD *)(v47 + 356) = 0x10000;
      v48 = v382;
      *(_QWORD *)(v47 + 360) = v382;
      *(_QWORD *)(v47 + 424) = 1;
      *(_DWORD *)v416 = 0;
      std::vector<float>::resize(v47 + 816, v48, v416);
      v49 = CFDictionaryGetValue(v383, CFSTR("DataType"));
      v50 = v49;
      if (!v49)
      {
        v252 = 0;
        v381 = 0;
        v253 = *(NSObject ***)(a1 + 16);
        if (v253)
          v252 = *v253;
        if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 176;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v252, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [outputDataType_ref.get_cf() == nullptr is false]: \"Failed to retrieve output data type (DataType) from dictionary OutputVectorDescriptor.\"", v416, 0x18u);
        }
        v254 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v254 = &off_1E69EE218;
        v254[2] = -66741;
      }
      CFRetain(v49);
      v381 = v50;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v381, (applesauce::CF::StringRef *)&v380);
      v51 = *(NSObject ***)(a1 + 16);
      if (v51)
      {
        v52 = *v51;
        if (!*v51)
          goto LABEL_128;
      }
      else
      {
        v52 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v53 = CFCopyDescription(v380);
        applesauce::CF::details::CFString_get_value<true>(v53, (uint64_t)v405);
        if (v53)
          CFRelease(v53);
        v54 = v405;
        if (v406 < 0)
          v54 = (void **)v405[0];
        *(_DWORD *)v416 = 136315906;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 179;
        v419 = 2080;
        v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        LOWORD(v420.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved output data type (%s) for Layer %u.", v416, 0x22u);
        if (v406 < 0)
          operator delete(v405[0]);
      }
LABEL_128:
      v55 = v380;
      if (v380)
        CFRetain(v380);
      v379 = v55;
      std::string::basic_string[abi:ne180100]<0>(v377, "float32");
      v56 = matchiString(&v379, (const UInt8 *)v377);
      if (v378 < 0)
        operator delete(v377[0]);
      if (v379)
        CFRelease(v379);
      if (!v56)
      {
        v255 = *(NSObject ***)(a1 + 16);
        if (v255)
          v256 = *v255;
        else
          v256 = 0;
        if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 189;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v256, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported output data type.\"", v416, 0x18u);
        }
        v284 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v284 = &off_1E69EE218;
        v284[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 496) = 65568;
      v376 = 1065353216;
      v57 = *(NSObject ***)(a1 + 16);
      if (v57)
      {
        v58 = *v57;
        if (!*v57)
          goto LABEL_141;
      }
      else
      {
        v58 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 194;
        _os_log_impl(&dword_1B5ED0000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v416, 0x12u);
      }
LABEL_141:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v383, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v376))
      {
        v198 = *(NSObject ***)(a1 + 16);
        if (v198)
          v199 = *v198;
        else
          v199 = 0;
        if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 197;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v199, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary OutputVectorDescriptor.\"", v416, 0x18u);
        }
        v224 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v224 = &off_1E69EE218;
        v224[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 516) = v376;
      v375 = 0;
      v59 = *(NSObject ***)(a1 + 16);
      if (v59)
      {
        v60 = *v59;
        if (!*v59)
          goto LABEL_148;
      }
      else
      {
        v60 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 203;
        _os_log_impl(&dword_1B5ED0000, v60, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from outputDescDict.", v416, 0x12u);
      }
LABEL_148:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v383, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v375))
      {
        v200 = *(NSObject ***)(a1 + 16);
        if (v200)
          v201 = *v200;
        else
          v201 = 0;
        if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 206;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v201, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary OutputVectorDescriptor.\"", v416, 0x18u);
        }
        v225 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v225 = &off_1E69EE218;
        v225[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 520) = v375;
      v61 = CFDictionaryGetValue(v412, CFSTR("LayerDescriptor"));
      v62 = v61;
      if (!v61)
      {
        v374 = 0;
        v65 = *(NSObject ***)(a1 + 16);
        if (v65)
        {
          v66 = *v65;
          if (!*v65)
          {
LABEL_198:
            *(_DWORD *)(*a3 + 968 * i + 964) = 0;
            goto LABEL_199;
          }
        }
        else
        {
          v66 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 221;
          v419 = 2048;
          v420.__r_.__value_.__r.__words[0] = i;
          _os_log_impl(&dword_1B5ED0000, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LayerDescriptor for layer %zu not found, using default fully connected layer.", v416, 0x1Cu);
        }
        goto LABEL_198;
      }
      CFRetain(v61);
      v374 = v62;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v374, (applesauce::CF::DictionaryRef *)&v373);
      v63 = *(NSObject ***)(a1 + 16);
      if (v63)
      {
        v64 = *v63;
        if (!*v63)
          goto LABEL_159;
      }
      else
      {
        v64 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 228;
        _os_log_impl(&dword_1B5ED0000, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary LayerDescriptor.", v416, 0x12u);
      }
LABEL_159:
      v67 = CFDictionaryGetValue(v373, CFSTR("Type"));
      v68 = v67;
      if (!v67)
      {
        v281 = 0;
        v372 = 0;
        v282 = *(NSObject ***)(a1 + 16);
        if (v282)
          v281 = *v282;
        if (os_log_type_enabled(v281, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 233;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v281, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [layerType_ref.get_cf() == nullptr is false]: \"Failed to retrieve layer type (Type) from dictionary LayerDescriptor.\"", v416, 0x18u);
        }
        v283 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v283 = &off_1E69EE218;
        v283[2] = -66741;
      }
      CFRetain(v67);
      v372 = v68;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v372, (applesauce::CF::StringRef *)&v371);
      v69 = *(NSObject ***)(a1 + 16);
      if (!v69)
      {
        v70 = MEMORY[0x1E0C81028];
LABEL_164:
        if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
        {
          v71 = CFCopyDescription(v371);
          applesauce::CF::details::CFString_get_value<true>(v71, (uint64_t)v405);
          if (v71)
            CFRelease(v71);
          v72 = v405;
          if (v406 < 0)
            v72 = (void **)v405[0];
          *(_DWORD *)v416 = 136315906;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 237;
          v419 = 2080;
          v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
          LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = i;
          _os_log_impl(&dword_1B5ED0000, v70, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully retrieved Type (%s) for LayerDescriptor %zu.", v416, 0x26u);
          if (v406 < 0)
            operator delete(v405[0]);
        }
        goto LABEL_171;
      }
      v70 = *v69;
      if (*v69)
        goto LABEL_164;
LABEL_171:
      v73 = v371;
      if (v371)
        CFRetain(v371);
      v370 = v73;
      std::string::basic_string[abi:ne180100]<0>(v368, "FullyConnected");
      std::string::basic_string[abi:ne180100]<0>(v366, "Dense");
      v74 = matchiEither((CFTypeRef *)&v370, (uint64_t)v368, (uint64_t)v366);
      if (v367 < 0)
        operator delete(v366[0]);
      if (v369 < 0)
        operator delete(v368[0]);
      if (v370)
        CFRelease(v370);
      if ((v74 & 1) != 0)
      {
        v75 = 0;
      }
      else
      {
        v76 = v371;
        if (v371)
          CFRetain(v371);
        v365 = v76;
        std::string::basic_string[abi:ne180100]<0>(v363, "LSTM");
        v77 = matchiString(&v365, (const UInt8 *)v363);
        if (v364 < 0)
          operator delete(v363[0]);
        if (v365)
          CFRelease(v365);
        if (!v77)
        {
          v290 = *(NSObject ***)(a1 + 16);
          if (v290)
            v291 = *v290;
          else
            v291 = 0;
          if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v416 = 136315650;
            *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
            v417 = 1024;
            v418 = 250;
            v419 = 1024;
            LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
            _os_log_impl(&dword_1B5ED0000, v291, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported LayerType.\"", v416, 0x18u);
          }
          v292 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v292 = &off_1E69EE218;
          v292[2] = -66743;
        }
        v75 = 1;
      }
      *(_DWORD *)(*a3 + 968 * i + 964) = v75;
      if (v371)
        CFRelease(v371);
      if (v372)
        CFRelease(v372);
      if (v373)
        CFRelease(v373);
LABEL_199:
      v78 = (const __CFDictionary *)CFDictionaryGetValue(v412, CFSTR("Weights"));
      v79 = v78;
      if (!v78)
      {
        v257 = 0;
        v373 = 0;
        v258 = *(NSObject ***)(a1 + 16);
        if (v258)
          v257 = *v258;
        if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 262;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v257, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Weights.\"", v416, 0x18u);
        }
        v259 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v259 = &off_1E69EE218;
        v259[2] = -66741;
      }
      CFRetain(v78);
      v373 = v79;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef((const void **)&v373, (applesauce::CF::DictionaryRef *)&v372);
      v80 = *(NSObject ***)(a1 + 16);
      if (v80)
      {
        v81 = *v80;
        if (!*v80)
          goto LABEL_206;
      }
      else
      {
        v81 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 266;
        _os_log_impl(&dword_1B5ED0000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Weights.", v416, 0x12u);
      }
LABEL_206:
      if (DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)a1, (CFDictionaryRef)v372, CFSTR("Data"), (char **)(*a3 + 968 * i + 936)))
      {
        v202 = *(NSObject ***)(a1 + 16);
        if (v202)
          v203 = *v202;
        else
          v203 = 0;
        if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 271;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v203, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Weights.\"", v416, 0x18u);
        }
        v226 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v226 = &off_1E69EE218;
        v226[2] = -66741;
      }
      v82 = *a3;
      v83 = *a3 + 968 * i;
      v84 = *(_DWORD *)(v83 + 964);
      v85 = *(_QWORD *)(v83 + 360);
      v86 = v84 == 1;
      if (v84 == 1)
        v87 = *(_QWORD *)(v83 + 360);
      else
        v87 = 0;
      v88 = *(_QWORD *)(v83 + 8) + v87;
      if (v86)
        v85 *= 4;
      v89 = v85 * v88;
      v90 = *(_QWORD *)(v83 + 936);
      v91 = (*(_QWORD *)(v83 + 944) - v90) >> 2;
      if (v91 != v85 * v88)
      {
        v204 = *(NSObject ***)(a1 + 16);
        if (v204)
          v205 = *v204;
        else
          v205 = 0;
        if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136316162;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 280;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
          WORD2(v420.__r_.__value_.__r.__words[0]) = 2048;
          *(std::string::size_type *)((char *)v420.__r_.__value_.__r.__words + 6) = v91;
          HIWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
          v420.__r_.__value_.__r.__words[2] = v89;
          _os_log_impl(&dword_1B5ED0000, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [nnLayers[i].mWeightsQuantized.size() != weightsNumberOfCoefficients is false]: \"Number of weights in Data (%lu) does not match the required number of weights (%lu).\"", v416, 0x2Cu);
        }
        v227 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v227 = &off_1E69EE218;
        v227[2] = -66743;
      }
      *(_DWORD *)(v83 + 180) = 0x20000;
      *(_QWORD *)(v83 + 184) = v88;
      *(_QWORD *)(v83 + 192) = v85;
      *(_QWORD *)(v83 + 248) = 1;
      *(_QWORD *)(v83 + 256) = v88;
      if (v89 >= 4)
        v92 = 4;
      else
        v92 = v85 * v88;
      *(_QWORD *)(v83 + 312) = v90;
      if (v92)
      {
        v93 = 0;
        while (2)
        {
          v94 = *(_DWORD *)(a1 + 8);
          HIDWORD(v95) = v94;
          LODWORD(v95) = v94;
          v96 = v82 + 968 * i;
          switch((v95 >> 3))
          {
            case 0u:
              v97 = *(_QWORD *)(a1 + 16);
              if (!v97)
                goto LABEL_241;
              if ((*(_BYTE *)(v97 + 8) & 1) == 0)
                goto LABEL_241;
              v98 = *(os_log_t *)v97;
              if (!*(_QWORD *)v97 || !os_log_type_enabled(*(os_log_t *)v97, OS_LOG_TYPE_DEBUG))
                goto LABEL_241;
              v99 = *(float *)(*(_QWORD *)(v96 + 312) + 4 * v93);
              *(_DWORD *)v416 = 136315906;
              *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
              v417 = 1024;
              v418 = 308;
              v419 = 2048;
              *(double *)&v420.__r_.__value_.__l.__data_ = v99;
              LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = v93;
              v100 = v98;
              v101 = "%25s:%-5d Successfully retrieved weights data (%g) at index (%zu).";
              v102 = 38;
              goto LABEL_240;
            case 1u:
              v109 = *(_QWORD *)(a1 + 16);
              if (!v109)
                goto LABEL_241;
              if ((*(_BYTE *)(v109 + 8) & 1) == 0)
                goto LABEL_241;
              v110 = *(os_log_t *)v109;
              if (!*(_QWORD *)v109 || !os_log_type_enabled(*(os_log_t *)v109, OS_LOG_TYPE_DEBUG))
                goto LABEL_241;
              v111 = *(char *)(*(_QWORD *)(v96 + 312) + v93);
              *(_DWORD *)v416 = 136315906;
              *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
              v417 = 1024;
              v418 = 296;
              v419 = 1024;
              LODWORD(v420.__r_.__value_.__l.__data_) = v111;
              WORD2(v420.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v420.__r_.__value_.__r.__words + 6) = v93;
              v100 = v110;
              v101 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_239;
            case 2u:
              v103 = *(_QWORD *)(a1 + 16);
              if (!v103)
                goto LABEL_241;
              if ((*(_BYTE *)(v103 + 8) & 1) == 0)
                goto LABEL_241;
              v104 = *(os_log_t *)v103;
              if (!*(_QWORD *)v103 || !os_log_type_enabled(*(os_log_t *)v103, OS_LOG_TYPE_DEBUG))
                goto LABEL_241;
              v105 = *(char *)(*(_QWORD *)(v96 + 312) + 2 * v93);
              *(_DWORD *)v416 = 136315906;
              *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
              v417 = 1024;
              v418 = 300;
              v419 = 1024;
              LODWORD(v420.__r_.__value_.__l.__data_) = v105;
              WORD2(v420.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v420.__r_.__value_.__r.__words + 6) = v93;
              v100 = v104;
              v101 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
              goto LABEL_239;
            case 4u:
              v106 = *(_QWORD *)(a1 + 16);
              if (!v106)
                goto LABEL_241;
              if ((*(_BYTE *)(v106 + 8) & 1) == 0)
                goto LABEL_241;
              v107 = *(os_log_t *)v106;
              if (!*(_QWORD *)v106 || !os_log_type_enabled(*(os_log_t *)v106, OS_LOG_TYPE_DEBUG))
                goto LABEL_241;
              v108 = *(char *)(*(_QWORD *)(v96 + 312) + 4 * v93);
              *(_DWORD *)v416 = 136315906;
              *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
              v417 = 1024;
              v418 = 304;
              v419 = 1024;
              LODWORD(v420.__r_.__value_.__l.__data_) = v108;
              WORD2(v420.__r_.__value_.__r.__words[0]) = 2048;
              *(std::string::size_type *)((char *)v420.__r_.__value_.__r.__words + 6) = v93;
              v100 = v107;
              v101 = "%25s:%-5d Successfully retrieved weights data (%i) at index (%zu).";
LABEL_239:
              v102 = 34;
LABEL_240:
              _os_log_impl(&dword_1B5ED0000, v100, OS_LOG_TYPE_DEBUG, v101, v416, v102);
LABEL_241:
              ++v93;
              v82 = *a3;
              v112 = (uint64_t)(*(_QWORD *)(*a3 + 968 * i + 944) - *(_QWORD *)(*a3 + 968 * i + 936)) >> 2;
              if (v112 >= 4)
                v112 = 4;
              if (v93 >= v112)
                break;
              continue;
            default:
              v235 = *(NSObject ***)(a1 + 16);
              if (v235)
                v236 = *v235;
              else
                v236 = 0;
              if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v416 = 136315906;
                *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
                v417 = 1024;
                v418 = 312;
                v419 = 1024;
                LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
                WORD2(v420.__r_.__value_.__r.__words[0]) = 1024;
                *(_DWORD *)((char *)v420.__r_.__value_.__r.__words + 6) = v94;
                _os_log_impl(&dword_1B5ED0000, v236, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown quantization type (%u).\"", v416, 0x1Eu);
              }
              v237 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v237 = &off_1E69EE218;
              v237[2] = -66743;
          }
          break;
        }
      }
      v113 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v372, CFSTR("DataType"));
      v114 = v113;
      if (!v113)
      {
        v260 = 0;
        v371 = 0;
        v261 = *(NSObject ***)(a1 + 16);
        if (v261)
          v260 = *v261;
        if (os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 320;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v260, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [weightsDataType_ref.get_cf() == nullptr is false]: \"Missing DataType from dictionary Weights.\"", v416, 0x18u);
        }
        v262 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v262 = &off_1E69EE218;
        v262[2] = -66741;
      }
      CFRetain(v113);
      v371 = v114;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef((const void **)&v371, (applesauce::CF::StringRef *)&v362);
      v115 = *(NSObject ***)(a1 + 16);
      if (v115)
      {
        v116 = *v115;
        if (!*v115)
          goto LABEL_256;
      }
      else
      {
        v116 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
      {
        v117 = CFCopyDescription(v362);
        applesauce::CF::details::CFString_get_value<true>(v117, (uint64_t)v405);
        if (v117)
          CFRelease(v117);
        v118 = v405;
        if (v406 < 0)
          v118 = (void **)v405[0];
        *(_DWORD *)v416 = 136315906;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 324;
        v419 = 2080;
        v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
        LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v116, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved weights data type (%s) for Layer %zu.", v416, 0x26u);
        if (v406 < 0)
          operator delete(v405[0]);
      }
LABEL_256:
      v119 = *(_DWORD *)(a1 + 8);
      if (v119 == 8)
      {
        v120 = v362;
        if (v362)
          CFRetain(v362);
        v361 = v120;
        std::string::basic_string[abi:ne180100]<0>(v359, "int8");
        std::string::basic_string[abi:ne180100]<0>(v357, "SInt8");
        v121 = matchiEither((CFTypeRef *)&v361, (uint64_t)v359, (uint64_t)v357);
        if (v358 < 0)
          operator delete(v357[0]);
        if (v360 < 0)
          operator delete(v359[0]);
        if (v361)
          CFRelease(v361);
        v122 = 131080;
        if ((v121 & 1) != 0)
          goto LABEL_299;
        v119 = *(_DWORD *)(a1 + 8);
      }
      if (v119 == 16)
      {
        v123 = v362;
        if (v362)
          CFRetain(v362);
        v356 = v123;
        std::string::basic_string[abi:ne180100]<0>(v354, "int16");
        std::string::basic_string[abi:ne180100]<0>(v352, "SInt16");
        v124 = matchiEither((CFTypeRef *)&v356, (uint64_t)v354, (uint64_t)v352);
        if (v353 < 0)
          operator delete(v352[0]);
        if (v355 < 0)
          operator delete(v354[0]);
        if (v356)
          CFRelease(v356);
        if ((v124 & 1) != 0)
        {
          v122 = 131088;
          goto LABEL_299;
        }
        v119 = *(_DWORD *)(a1 + 8);
      }
      if (v119 == 32)
      {
        v125 = v362;
        if (v362)
          CFRetain(v362);
        v351 = v125;
        std::string::basic_string[abi:ne180100]<0>(v349, "int32");
        std::string::basic_string[abi:ne180100]<0>(v347, "SInt32");
        v126 = matchiEither((CFTypeRef *)&v351, (uint64_t)v349, (uint64_t)v347);
        if (v348 < 0)
          operator delete(v347[0]);
        if (v350 < 0)
          operator delete(v349[0]);
        if (v351)
          CFRelease(v351);
        if ((v126 & 1) != 0)
        {
          v122 = 131104;
          goto LABEL_299;
        }
        v119 = *(_DWORD *)(a1 + 8);
      }
      if (v119)
        goto LABEL_680;
      v127 = v362;
      if (v362)
        CFRetain(v362);
      v346 = v127;
      std::string::basic_string[abi:ne180100]<0>(v344, "float32");
      v128 = matchiString(&v346, (const UInt8 *)v344);
      if (v345 < 0)
        operator delete(v344[0]);
      if (v346)
        CFRelease(v346);
      v122 = 65568;
      if (!v128)
      {
LABEL_680:
        v279 = *(NSObject ***)(a1 + 16);
        if (v279)
          v280 = *v279;
        else
          v280 = 0;
        if (os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
        {
          v288 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)v416 = 136315906;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 346;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
          WORD2(v420.__r_.__value_.__r.__words[0]) = 1024;
          *(_DWORD *)((char *)v420.__r_.__value_.__r.__words + 6) = v288;
          _os_log_impl(&dword_1B5ED0000, v280, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported weights data quantization type for Quantization (%u).\"", v416, 0x1Eu);
        }
        v289 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v289 = &off_1E69EE218;
        v289[2] = -66743;
      }
LABEL_299:
      *(_DWORD *)(*a3 + 968 * i + 320) = v122;
      v343 = 1065353216;
      v129 = *(NSObject ***)(a1 + 16);
      if (v129)
      {
        v130 = *v129;
        if (!*v129)
          goto LABEL_305;
      }
      else
      {
        v130 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 351;
        _os_log_impl(&dword_1B5ED0000, v130, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v416, 0x12u);
      }
LABEL_305:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v372, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v343))
      {
        v206 = *(NSObject ***)(a1 + 16);
        if (v206)
          v207 = *v206;
        else
          v207 = 0;
        if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 354;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Weights.\"", v416, 0x18u);
        }
        v228 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v228 = &off_1E69EE218;
        v228[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 340) = v343;
      v342 = 0;
      v131 = *(NSObject ***)(a1 + 16);
      if (v131)
      {
        v132 = *v131;
        if (!*v131)
          goto LABEL_312;
      }
      else
      {
        v132 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 360;
        _os_log_impl(&dword_1B5ED0000, v132, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from weightsDict.", v416, 0x12u);
      }
LABEL_312:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, (CFDictionaryRef)v372, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v342))
      {
        v208 = *(NSObject ***)(a1 + 16);
        if (v208)
          v209 = *v208;
        else
          v209 = 0;
        if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 363;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v209, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Weights.\"", v416, 0x18u);
        }
        v229 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v229 = &off_1E69EE218;
        v229[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 344) = v342;
      v133 = CFDictionaryGetValue(v412, CFSTR("Bias"));
      v134 = v133;
      if (!v133)
      {
        v263 = 0;
        v341 = 0;
        v264 = *(NSObject ***)(a1 + 16);
        if (v264)
          v263 = *v264;
        if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 374;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v263, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Bias from dictionary Weights.\"", v416, 0x18u);
        }
        v265 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v265 = &off_1E69EE218;
        v265[2] = -66741;
      }
      CFRetain(v133);
      v341 = v134;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v341, (applesauce::CF::DictionaryRef *)&v340);
      v135 = *(NSObject ***)(a1 + 16);
      if (v135)
      {
        v136 = *v135;
        if (!*v135)
          goto LABEL_320;
      }
      else
      {
        v136 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 378;
        _os_log_impl(&dword_1B5ED0000, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Bias.", v416, 0x12u);
      }
LABEL_320:
      if (DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)a1, v340, CFSTR("Data"), (char **)(*a3 + 968 * i + 888)))
      {
        v210 = *(NSObject ***)(a1 + 16);
        if (v210)
          v211 = *v210;
        else
          v211 = 0;
        if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 383;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing vector Data from dictionary Bias.\"", v416, 0x18u);
        }
        v230 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v230 = &off_1E69EE218;
        v230[2] = -66741;
      }
      v137 = *a3;
      v138 = *a3 + 968 * i;
      *(_DWORD *)(v138 + 532) = 0x10000;
      v139 = *(_QWORD *)(v138 + 888);
      v140 = (*(_QWORD *)(v138 + 896) - v139) >> 2;
      *(_QWORD *)(v138 + 536) = v140;
      *(_QWORD *)(v138 + 600) = 1;
      *(_QWORD *)(v138 + 664) = v139;
      if (v140 >= 4)
        v141 = 4;
      else
        v141 = v140;
      if (v141)
      {
        for (j = 0; j < v146; ++j)
        {
          v143 = *(_QWORD *)(a1 + 16);
          if (v143)
          {
            if ((*(_BYTE *)(v143 + 8) & 1) != 0)
            {
              v144 = *(NSObject **)v143;
              if (*(_QWORD *)v143)
              {
                if (os_log_type_enabled(*(os_log_t *)v143, OS_LOG_TYPE_DEBUG))
                {
                  v145 = *(float *)(*(_QWORD *)(v137 + 968 * i + 664) + 4 * j);
                  *(_DWORD *)v416 = 136315906;
                  *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
                  v417 = 1024;
                  v418 = 394;
                  v419 = 2048;
                  *(double *)&v420.__r_.__value_.__l.__data_ = v145;
                  LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
                  *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = j;
                  _os_log_impl(&dword_1B5ED0000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data (%g) at index (%zu).", v416, 0x26u);
                  v137 = *a3;
                }
              }
            }
          }
          v146 = (uint64_t)(*(_QWORD *)(v137 + 968 * i + 896) - *(_QWORD *)(v137 + 968 * i + 888)) >> 2;
          if (v146 >= 4)
            v146 = 4;
        }
      }
      v147 = CFDictionaryGetValue(v340, CFSTR("DataType"));
      v148 = v147;
      if (!v147)
      {
        v266 = 0;
        v339 = 0;
        v267 = *(NSObject ***)(a1 + 16);
        if (v267)
          v266 = *v267;
        if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 401;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v266, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [biasDataType_ref.get_cf() == nullptr is false]: \"Missing dictionary DataType from dictionary Weights.\"", v416, 0x18u);
        }
        v268 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v268 = &off_1E69EE218;
        v268[2] = -66741;
      }
      CFRetain(v147);
      v339 = v148;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v339, (applesauce::CF::StringRef *)&v338);
      v149 = *(NSObject ***)(a1 + 16);
      if (v149)
      {
        v150 = *v149;
        if (!*v149)
          goto LABEL_346;
      }
      else
      {
        v150 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
      {
        v151 = CFCopyDescription(v338);
        applesauce::CF::details::CFString_get_value<true>(v151, (uint64_t)v405);
        if (v151)
          CFRelease(v151);
        v152 = v405;
        if (v406 < 0)
          v152 = (void **)v405[0];
        *(_DWORD *)v416 = 136315906;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 405;
        v419 = 2080;
        v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
        LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v150, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved bias data type (%s) for Layer %zu.", v416, 0x26u);
        if (v406 < 0)
          operator delete(v405[0]);
      }
LABEL_346:
      v153 = v338;
      if (v338)
        CFRetain(v338);
      v337 = v153;
      std::string::basic_string[abi:ne180100]<0>(v335, "float32");
      v154 = matchiString(&v337, (const UInt8 *)v335);
      if (v336 < 0)
        operator delete(v335[0]);
      if (v337)
        CFRelease(v337);
      if (!v154)
      {
        v269 = *(NSObject ***)(a1 + 16);
        if (v269)
          v270 = *v269;
        else
          v270 = 0;
        if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 414;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
          _os_log_impl(&dword_1B5ED0000, v270, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported bias data type.\"", v416, 0x18u);
        }
        v285 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v285 = &off_1E69EE218;
        v285[2] = -66743;
      }
      *(_DWORD *)(*a3 + 968 * i + 672) = 65568;
      v334 = 1065353216;
      v155 = *(NSObject ***)(a1 + 16);
      if (v155)
      {
        v156 = *v155;
        if (!*v155)
          goto LABEL_359;
      }
      else
      {
        v156 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 419;
        _os_log_impl(&dword_1B5ED0000, v156, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v416, 0x12u);
      }
LABEL_359:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v340, CFSTR("DataScale"), kCFNumberFloat32Type, (float *)&v334))
      {
        v212 = *(NSObject ***)(a1 + 16);
        if (v212)
          v213 = *v212;
        else
          v213 = 0;
        if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 422;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v213, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataScale from dictionary Bias.\"", v416, 0x18u);
        }
        v231 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v231 = &off_1E69EE218;
        v231[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 692) = v334;
      v333 = 0;
      v157 = *(NSObject ***)(a1 + 16);
      if (v157)
      {
        v158 = *v157;
        if (!*v157)
          goto LABEL_366;
      }
      else
      {
        v158 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 428;
        _os_log_impl(&dword_1B5ED0000, v158, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from biasDict.", v416, 0x12u);
      }
LABEL_366:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v340, CFSTR("DataBias"), kCFNumberFloat32Type, (float *)&v333))
      {
        v214 = *(NSObject ***)(a1 + 16);
        if (v214)
          v215 = *v214;
        else
          v215 = 0;
        if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 431;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v215, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar DataBias from dictionary Bias.\"", v416, 0x18u);
        }
        v232 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v232 = &off_1E69EE218;
        v232[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 696) = v333;
      v159 = CFDictionaryGetValue(v412, CFSTR("Activation"));
      v160 = v159;
      if (!v159)
      {
        v271 = 0;
        v332 = 0;
        v272 = *(NSObject ***)(a1 + 16);
        if (v272)
          v271 = *v272;
        if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 443;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v271, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationDict_ref.get_cf() == nullptr is false]: \"Missing dictionary Activation.\"", v416, 0x18u);
        }
        v273 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v273 = &off_1E69EE218;
        v273[2] = -66741;
      }
      CFRetain(v159);
      v332 = v160;
      applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&v332, (applesauce::CF::DictionaryRef *)&v331);
      v161 = *(NSObject ***)(a1 + 16);
      if (v161)
      {
        v162 = *v161;
        if (!*v161)
          goto LABEL_374;
      }
      else
      {
        v162 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 447;
        _os_log_impl(&dword_1B5ED0000, v162, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary Activation.", v416, 0x12u);
      }
LABEL_374:
      v163 = CFDictionaryGetValue(v331, CFSTR("Function"));
      v164 = v163;
      if (!v163)
      {
        v274 = 0;
        v330 = 0;
        v275 = *(NSObject ***)(a1 + 16);
        if (v275)
          v274 = *v275;
        if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 453;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v274, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [activationFunction_ref.get_cf() == nullptr is false]: \"Failed to retrieve activation function (Function) from dictionary Activation.\"", v416, 0x18u);
        }
        v276 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v276 = &off_1E69EE218;
        v276[2] = -66741;
      }
      CFRetain(v163);
      v330 = v164;
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef(&v330, (applesauce::CF::StringRef *)&v329);
      v165 = *(NSObject ***)(a1 + 16);
      if (v165)
      {
        v166 = *v165;
        if (!*v165)
          goto LABEL_386;
      }
      else
      {
        v166 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
      {
        v167 = CFCopyDescription(v329);
        applesauce::CF::details::CFString_get_value<true>(v167, (uint64_t)v405);
        if (v167)
          CFRelease(v167);
        v168 = v405;
        if (v406 < 0)
          v168 = (void **)v405[0];
        *(_DWORD *)v416 = 136315906;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 457;
        v419 = 2080;
        v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
        LOWORD(v420.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v420.__r_.__value_.__r.__words[1] + 2) = i;
        _os_log_impl(&dword_1B5ED0000, v166, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved activation function (%s) for Layer %zu.", v416, 0x26u);
        if (v406 < 0)
          operator delete(v405[0]);
      }
LABEL_386:
      *(_DWORD *)(*a3 + 968 * i + 704) = 0;
      v169 = v329;
      if (v329)
        CFRetain(v329);
      v328 = v169;
      std::string::basic_string[abi:ne180100]<0>(v326, "Identity");
      std::string::basic_string[abi:ne180100]<0>(v324, "Linear");
      v170 = matchiEither((CFTypeRef *)&v328, (uint64_t)v326, (uint64_t)v324);
      if (v325 < 0)
        operator delete(v324[0]);
      if (v327 < 0)
        operator delete(v326[0]);
      if (v328)
        CFRelease(v328);
      if ((v170 & 1) != 0)
      {
        v171 = 0;
      }
      else
      {
        v172 = v329;
        if (v329)
          CFRetain(v329);
        v323 = v172;
        std::string::basic_string[abi:ne180100]<0>(v321, "RectifiedLinear");
        std::string::basic_string[abi:ne180100]<0>(v319, "ReLU");
        v173 = matchiEither((CFTypeRef *)&v323, (uint64_t)v321, (uint64_t)v319);
        if (v320 < 0)
          operator delete(v319[0]);
        if (v322 < 0)
          operator delete(v321[0]);
        if (v323)
          CFRelease(v323);
        if ((v173 & 1) != 0)
        {
          v171 = 1;
        }
        else
        {
          v174 = v329;
          if (v329)
            CFRetain(v329);
          v318 = v174;
          std::string::basic_string[abi:ne180100]<0>(v316, "LeakyRectifiedLinear");
          std::string::basic_string[abi:ne180100]<0>(v314, "LeakyReLU");
          v175 = matchiEither((CFTypeRef *)&v318, (uint64_t)v316, (uint64_t)v314);
          if (v315 < 0)
            operator delete(v314[0]);
          if (v317 < 0)
            operator delete(v316[0]);
          if (v318)
            CFRelease(v318);
          if ((v175 & 1) != 0)
          {
            v171 = 2;
          }
          else
          {
            v176 = v329;
            if (v329)
              CFRetain(v329);
            v313 = v176;
            std::string::basic_string[abi:ne180100]<0>(v311, "Sigmoid");
            v177 = matchiString(&v313, (const UInt8 *)v311);
            if (v312 < 0)
              operator delete(v311[0]);
            if (v313)
              CFRelease(v313);
            if (v177)
            {
              v171 = 3;
            }
            else
            {
              v178 = v329;
              if (v329)
                CFRetain(v329);
              cf = v178;
              std::string::basic_string[abi:ne180100]<0>(__p, "Tanh");
              v179 = matchiString((CFStringRef *)&cf, (const UInt8 *)__p);
              if (v309 < 0)
                operator delete(__p[0]);
              if (cf)
                CFRelease(cf);
              if (v179)
              {
                v171 = 4;
              }
              else
              {
                v180 = v329;
                if (v329)
                  CFRetain(v329);
                v307 = v180;
                std::string::basic_string[abi:ne180100]<0>(v305, "ScaledTanh");
                v181 = matchiString((CFStringRef *)&v307, (const UInt8 *)v305);
                if (v306 < 0)
                  operator delete(v305[0]);
                if (v307)
                  CFRelease(v307);
                if (v181)
                {
                  v171 = 5;
                }
                else
                {
                  v182 = v329;
                  if (v329)
                    CFRetain(v329);
                  v304 = v182;
                  std::string::basic_string[abi:ne180100]<0>(v302, "Abs");
                  v183 = matchiString((CFStringRef *)&v304, (const UInt8 *)v302);
                  if (v303 < 0)
                    operator delete(v302[0]);
                  if (v304)
                    CFRelease(v304);
                  if (v183)
                  {
                    v171 = 6;
                  }
                  else
                  {
                    v184 = v329;
                    if (v329)
                      CFRetain(v329);
                    v301 = v184;
                    std::string::basic_string[abi:ne180100]<0>(v299, "ELU");
                    v185 = matchiString((CFStringRef *)&v301, (const UInt8 *)v299);
                    if (v300 < 0)
                      operator delete(v299[0]);
                    if (v301)
                      CFRelease(v301);
                    if (!v185)
                    {
                      v293 = *(NSObject ***)(a1 + 16);
                      if (v293)
                        v294 = *v293;
                      else
                        v294 = 0;
                      if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v416 = 136315650;
                        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
                        v417 = 1024;
                        v418 = 496;
                        v419 = 1024;
                        LODWORD(v420.__r_.__value_.__l.__data_) = -66743;
                        _os_log_impl(&dword_1B5ED0000, v294, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unsupported activation function.\"", v416, 0x18u);
                      }
                      v295 = __cxa_allocate_exception(0x10uLL);
                      *(_QWORD *)v295 = &off_1E69EE218;
                      v295[2] = -66743;
                    }
                    v171 = 7;
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(*a3 + 968 * i + 960) = v171;
      LODWORD(v405[0]) = 1065353216;
      v186 = *(NSObject ***)(a1 + 16);
      if (v186)
      {
        v187 = *v186;
        if (!*v186)
          goto LABEL_462;
      }
      else
      {
        v187 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v416 = 136315394;
        *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
        v417 = 1024;
        v418 = 501;
        _os_log_impl(&dword_1B5ED0000, v187, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v416, 0x12u);
      }
LABEL_462:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v331, CFSTR("Alpha"), kCFNumberFloat32Type, (float *)v405))
      {
        v216 = *(NSObject ***)(a1 + 16);
        if (v216)
          v217 = *v216;
        else
          v217 = 0;
        if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 504;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v217, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Alpha from dictionary Activation.\"", v416, 0x18u);
        }
        v233 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v233 = &off_1E69EE218;
        v233[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 708) = v405[0];
      v298 = 0;
      v188 = *(NSObject ***)(a1 + 16);
      if (!v188)
      {
        v189 = MEMORY[0x1E0C81028];
LABEL_467:
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v416 = 136315394;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 510;
          _os_log_impl(&dword_1B5ED0000, v189, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loading from activationDict.", v416, 0x12u);
        }
        goto LABEL_469;
      }
      v189 = *v188;
      if (*v188)
        goto LABEL_467;
LABEL_469:
      if (DictionaryBlobReader::ReadScalarFromDictionary<float>(*(uint64_t ***)a1, v331, CFSTR("Beta"), kCFNumberFloat32Type, (float *)&v298))
      {
        v218 = *(NSObject ***)(a1 + 16);
        if (v218)
          v219 = *v218;
        else
          v219 = 0;
        if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = "NeuralNetLoader.cpp";
          v417 = 1024;
          v418 = 513;
          v419 = 1024;
          LODWORD(v420.__r_.__value_.__l.__data_) = -66741;
          _os_log_impl(&dword_1B5ED0000, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d) [err != noErr is false]: \"Missing scalar Beta from dictionary Activation.\"", v416, 0x18u);
        }
        v234 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v234 = &off_1E69EE218;
        v234[2] = -66741;
      }
      *(_DWORD *)(*a3 + 968 * i + 712) = v298;
      if (v329)
        CFRelease(v329);
      if (v330)
        CFRelease(v330);
      if (v331)
        CFRelease(v331);
      if (v332)
        CFRelease(v332);
      if (v338)
        CFRelease(v338);
      if (v339)
        CFRelease(v339);
      if (v340)
        CFRelease(v340);
      if (v341)
        CFRelease(v341);
      if (v362)
        CFRelease(v362);
      if (v371)
        CFRelease(v371);
      if (v372)
        CFRelease(v372);
      if (v373)
        CFRelease(v373);
      if (v374)
        CFRelease(v374);
      if (v380)
        CFRelease(v380);
      if (v381)
        CFRelease(v381);
      if (v383)
        CFRelease(v383);
      if (v384)
        CFRelease(v384);
      if (v407)
        CFRelease(v407);
      if (v408)
        CFRelease(v408);
      if (v410)
        CFRelease(v410);
      if (v411)
        CFRelease(v411);
      if (v412)
        CFRelease(v412);
      if (v413)
        CFRelease(v413);
      CFRelease(v297);
      if (SHIBYTE(v415) < 0)
        operator delete((void *)v414);
    }
  }
}

